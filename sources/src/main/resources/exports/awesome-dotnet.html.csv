"category"	"name"	"url"	"description"	"star"	"stackOverflow"	"stackOverflowUrl"	"license"	"licenseUrl"	"site"	"userGuide"	"newStars"	"newWatchs"	"newForks"	"pageText"	"newStackOverflow"	"github"	"allText"	"isExist"
"Awesome .NET!"	"frontend-dev-bookmarks"	"https://github.com/dypsilon/frontend-dev-bookmarks"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"19256"	"1801"	"3392"	"GitHub - dypsilon/frontend-dev-bookmarks: Manually curated collection of resources for frontend web developers. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,801 Star 19,256 Fork 3,392 dypsilon/frontend-dev-bookmarks Code Issues 12 Pull requests 80 Pulse Graphs Manually curated collection of resources for frontend web developers. http://frontend.directory/ 377 commits 1 branch 1 release 100 contributors Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v.1.0 Nothing to show New pull request Latest commit 27b984f Jul 11, 2016 dypsilon No commit message Permalink Failed to load latest commit information. animation No commit message Jul 11, 2016 appearance No commit message Jul 11, 2016 architecture No commit message Jul 11, 2016 compatibility No commit message Jun 15, 2016 ecosystem No commit message Jul 11, 2016 languages-protocols-browser-apis No commit message Jul 11, 2016 user-interface-components No commit message Jun 27, 2016 workflow No commit message Jul 5, 2016 README.md No commit message Jul 11, 2016 TOTALLY-GIGANTIC-FILE.md No commit message Jul 11, 2016 about.md Capitalize `GitHub` correctly Jun 27, 2015 contributing.md Added the contribution guidelines. Jun 29, 2015 README.md Frontend Development Manually curated collection of resources for frontend web developers. You are viewing a browseable version, split by category in many small files. There is also a really huge file with every single resource on one page. Proceed to the totally gigantic file if you are into this kind of thing. This is the current version, which receives ongoing updates. If you want the good old bookmarks, please use the tag v.1.0. Keep in mind, that the old version has many outdated links. Appearance The outward or visible aspect of a website. Animation: The process of creating motion and shape change. Typography: The style, arrangement, or appearance of typeset matter. Visualization: Placing data in a visual context. Architecture High level structure of the frontend code and the discipline of creating such structures. Algorithms: A self-contained step-by-step set of operations to be performed. Algorithms perform calculation, data processing, and/or automated reasoning tasks. Design Patterns: Best practices that the programmer can use to solve common problems when designing an application or system. Designs: Ready to use and well documented structures and frameworks for frontend development. Event-Driven Programming: Event-driven programming is a programming paradigm in which the flow of the program is determined by events such as user actions, sensor outputs, or messages from other programs/threads. Functional Programming: Functional programming is a programming paradigm, that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. Functional Reactive Programming (FRP): FRP is a programming paradigm for asynchronous dataflow programming using the building blocks of functional programming. Compatibility Ability of a product to work with different input/output devices and rendering software. Including printers, email, mobile devices and different browsers. Cross Browser: Cross-browser refers to the ability of a website, web application, HTML construct or client-side script to function in environments that provide its required features and to bow out or degrade gracefully when features are absent or lacking. E-Mail: Preparing HTML based electronic mail. Keyboard: Working with keyboard input in a web browser. Mobile: Development of websites optimized for viewing on smartphone and tablet devices. Printers: Manipulation of printer output through CSS. Responsive Web Design (RWD): RWD responds to the needs of the users and the devices they’re using. The layout changes based on the size and capabilities of the device. Web Accessibility: Web accessibility means that people with disabilities can perceive, understand, navigate, and interact with the Web, and that they can contribute to the Web. Ecosystem Important developers, companies, organizations and news sources. Communities Around Projects: Successful open source projects attract many developers who produce plugins, libraries, tutorials and other resources. This section collects such resources. News: Websites & newsletters which provide daily and weekly news related to frontend web development. Notable Community Members: Important engineers, evangelists, architects and other celebrities. Organizations: Commercial companies and nonprofit organizations around web development. Podcasts: A podcast is a form of digital media that consists of an episodic series of audio, video, digital radio, PDF, or ePub files subscribed to and downloaded automatically through web syndication or streamed online to a computer or mobile device. Languages, Protocols, Browser APIs Programming/mark-up languages and web related standards. Cascading Style Sheets (CSS): CSS are a stylesheet language used to describe the presentation of a document written in HTML or XML. It describes how elements should be rendered on screen, on paper, in speech, or on other media. Document Object Model (DOM): The DOM is a programming interface for HTML, XML and SVG documents. It defines methods that allow access to the tree, so that they can change the document structure, style and content. HyperText Markup Language (HTML): HTML is the standard markup language used to create web pages and its elements form the building blocks of all websites. Hypertext Transfer Protocol (HTTP): The Hypertext Transfer Protocol (HTTP) is an application protocol for distributed, collaborative, hypermedia information systems. HTTP is the foundation of data communication for the World Wide Web. JavaScript (EcmaScript): JavaScript is a full-fledged dynamic programming language that, when applied to an HTML document, can provide dynamic interactivity on websites. It is defined by ECMAScript standard. JavaScript Object Notation (JSON): JSON (JavaScript Object Notation) is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate. It is based on a subset of the JavaScript Programming Language. Scalable Vector Graphics (SVG): An XML-based vector image format for two-dimensional graphics with support for interactivity and animation. Service Workers: A method that enables applications to take advantage of persistent background processing, including hooks to enable bootstrapping of web applications while offline. Templating Languages and Engines: Template engines are tools to separate program-logic and presentation into two independent parts. This makes the development of both logic and presentation easier, improves flexibility and eases modification and maintenance. Transpiled Languages: Abstract languages converted to native, browser supported standards like JavaScript or CSS. Uniform Resource Identifier (URI): URI is a string of characters used to identify a resource. The most common form of URI is the Uniform Resource Locator (URL). Web Animations API: Web Animations is a new JavaScript API for driving animated content on the web. By unifying the animation features of SVG and CSS, Web Animations unlocks features previously only usable declaratively, and exposes powerful, high-performance animation capabilities to developers. WebAssembly: WebAssembly is meant to fill a place that JavaScript has been forced to occupy up to now: a low-level code representation that can serve as a compiler target. User Interface Components Drop-in UI components for web sites and applications. Buttons: The term button refers to any graphical control element that provides the user a simple way to trigger an event, like searching for a query at a search engine, or to interact with dialog boxes, like confirming an action. Code: Code viewers and editors designed for embedding inside a website. Forms: A HTML form on a web page allows a user to enter data that is sent to a server for processing. Web users fill out the forms using checkboxes, radio buttons, or text fields. Grid: CSS Grid Layout Systems. Rich Text Editors: A rich text editor is the interface for editing rich text within web browsers. The aim is to reduce the effort for users trying to express their formatting directly as valid HTML markup. Table Of Contents: Components for automatic table of contents generation. UI Kits: Collections of ready to use components. Video & Audio: Components for playing audio and video files on a website. Workflow Task automation and asset delivery. Automated Testing: Automated software testing is a process in which software tools execute pre-scripted tests on a software application before it is released into production. Build Tools: Toolkits and their ecosystems, that help you automate painful and repeated tasks. CSS Tools: Tools for analysis, pre and post processing of CSS files. Code Editors: Text editor programs designed specifically for editing source code of a website. Documentation: Writing, generating, publishing and consuming documentation for web deliverables. Fonts for Programmers: Programmers need special fonts, which help align the code and distinguish between characters, that look alike. Getting Started: Step by step guides for setting up a frontend development workflow. HTML Tools: Tools for pre and post processing of the HTML source code. Image Post Processing: Tools for image conversion and optimization. JavaScript Tools: Tools for static analysis, pre and post processing of JavaScript files. Package Management: A package manager or package management system is a collection of software tools that automates the process of installing, upgrading, configuring, and removing reusable libraries and components in a consistent manner. Sourcemaps: Sourcemap is a way to map a combined/minified file back to an unbuilt state. Version Control: Version control or source control is a system that records changes to a file or set of files over time so that you can recall specific versions later. License This work is licensed under a Creative Commons Attribution 4.0 International License. Please provide a link back to this repository. This is not necessary for GitHub forks. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dypsilon/frontend-dev-bookmarks"	""	"true"
"Awesome .NET!"	"ruby-bookmarks"	"https://github.com/dreikanter/ruby-bookmarks"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1151"	"103"	"177"	"GitHub - dreikanter/ruby-bookmarks: Ruby and Ruby on Rails bookmarks collection Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 103 Star 1,151 Fork 177 dreikanter/ruby-bookmarks Code Issues 0 Pull requests 2 Pulse Graphs Ruby and Ruby on Rails bookmarks collection 225 commits 1 branch 0 releases 33 contributors Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit ef206f5 Jun 30, 2016 dreikanter committed on GitHub Merge pull request #44 from cesc1989/master … Add table of contents Permalink Failed to load latest commit information. README.md add table of contents Jun 29, 2016 README.md Ruby Bookmarks This is a curated collection of essential Ruby and Ruby on Rails resources. The project aims to maintain a well-structured reference equally useful both for beginners and advanced web developers. ★ stands here for Editors' Choice. This list is not intended to include any random resource related to Ruby programming (we already have a most complete gem catalogue at ruby-toolbox.com), but only the best and most actual alternatives in each area. You will find here latest editions of the most important books, time and community tested gems (alive projects only!), and actively updated websites. Sharing and pull requests are very much appreciated! Fork and edit PS: Check out awesome-awesomeness for other community-driven bookmark collections. Table of Contents Books For beginners and intermediate level developers Advancing Ruby knowledge Ruby on Rails for beginners Ruby on Rails, advanced level Testing Other frameworks and tools Blogs Screencasts and courses Other Learning Materials Style Guides Podcasts Tools IDEs and text editors Code quality analysis Environment management Ruby distributions Documentation Application and Web Servers Deployment Automation and Configuration Management Other tools Quizzes, tests, exams Hosting VPS PAAS Some materials on Rails deployment Gems ActiveRecord API Authentication Authorization Avatars Background Jobs Bootstrap CLI CSS Configuration and environment variables Debugging E-commerce Graphics HTML, XML Logging Mail Markdown Message Queuing Misc Multithreading Profiling and Performance Rack Rails Scheduling SDKs and API Wrapers Search Security Serialization Syntax Highlighters Template engines Testing Web Frameworks Books For beginners and intermediate level developers Why's Poignant Guide to Ruby by Why the Lucky Stiff ★ Eloquent Ruby by Russ Olsen. Official site, Amazon. Programming Ruby 1.9 & 2.0 by Dave Thomas, Andy Hunt, and Chad Fowler. Learn Ruby The Hard Way by Zed A. Shaw. Available to pre-order at amazon. The Ruby Programming Language by David Flanagan and Yukihiro ""Matz"" Matsumoto. Advancing Ruby knowledge ★ Ruby Under a Microscope: An Illustrated Guide to Ruby Internals by Pat Shaughnessy. Official site, Amazon, O'Reilly. ★ Confident Ruby: 32 Patterns for Joyful Coding by Avdi Grimm. Official site, Amazon, Pragprog. Exceptional Ruby: Master the Art of Handling Failure in Ruby by Avdi Grimm. Metaprogramming Ruby: Program Like the Ruby Pros by Paolo Perrotta. The Well-Grounded Rubyist by David A. Black. Practical Object-Oriented Design in Ruby by Sandi Metz. Clean Ruby by Jim Gay Reliably Deploying Rails Applications by Ben Dixon — a robust framework for provisioning servers with Chef and deploying reliably with Capistrano 3, including example code templates you can use directly. Ruby on Rails for beginners Learn Ruby on Rails by Daniel Kehoe. Amazon. ★ The Rails 4 Way by Obie Fernandez and Kevin Faustino. Amazon, Informit. Agile Web Development with Rails 4 by Sam Ruby, Dave Thomas, and David Heinemeier Hansson. Rails 4 in Action by Ryan Bigg, Yehuda Katz, Steve Klabnik, and Rebecca Skinner. The Ruby on Rails Tutorial by Michael Hartl Ruby on Rails, advanced level Crafting Rails 4 Applications: Expert Practices for Everyday Rails Development by José Valim. Rails AntiPatterns: Best Practice Ruby on Rails Refactoring by Chad Pytel, Tammer Saleh. Deploying Rails: Automate, Deploy, Scale, Maintain, and Sleep at Night by Tom Copeland, Anthony Burns. Multitenancy with Rails by Ryan Bigg. Ruby Science by thoughtbot — the reference for writing fantastic Rails applications. Rebuilding Rails by Noah Gibbs Testing The RSpec Book: Behaviour Driven Development with RSpec, Cucumber, and Friends by David Chelimsky, Dave Astels, Bryan Helmkamp, Dan North, Zach Dennis, Aslak Hellesoy. Rails 4 Test Prescriptions: Build a Healthy Codebase by Noel Rappin — a comprehensive guide to how tests can help you design and write better Rails applications. In this completely revised edition, you’ll learn why testing works and how to test effectively using Rails 4, Minitest 5, and RSpec 3, as well as popular testing libraries such as factory_girl and Cucumber. Continuous Testing by Ben Rady and Rod Coffin. Everyday Rails Testing with RSpec by Aaron Sumner. Practical advice for adding reliable tests to your Rails apps with RSpec What Do I Test? by Eric Steele. Testing Rails - Thoughtbot Testing Rails is a practical approach to learning testing. Other frameworks and tools RubyMotion by Clay Allsopp. Build Awesome Command-Line Applications in Ruby 2 by David Copeland. Sinatra Book — a cookbook full of excellent tutorials and recipes for developing Sinatra web applications. The Guide to Cuba — this book will teach you how to create a Ruby web application from scratch using Cuba microframework. Blogs Ruby Inside — one of the most popular Ruby blogs. RubyFlow — the Ruby Community Blog. ★ Green Ruby News Random Ruby and Rails tips ★ Practicing Ruby — delightful lessons for dedicated programmers. Yehuda Katz Sitepoint A Fresh Cup — links to new resources and insightful blog posts. Black Bytes — Ruby tutorials Weissblog — Rails tutorials Screencasts and courses ★ Pluralsight Ruby Course Library. ★ RubyTapas by Avdi Grimm. ★ The Pragmatic Studio ★ Lynda.com Ruby screencasts at TutsPlus.com Rails screencasts at TutsPlus.com RailsCasts CodeSchool (includes Rails for zombies). Learn Rails the Zombie Way CodeAcademy confreaks.com — expert recording services for conferences, seminars, and workshops. Learnable — video courses and books ($30 per month). Destroy All Software — by Gary Bernhardt. ★ GoRails — a series of screencasts and guides for all aspects of Ruby on Rails. Learn how to setup your machine, build a Rails application, and deploy it to a server. RubySteps - daily emails on Ruby, Rails, TDD, OOP, and Refactoring with code examples and challenges. Also mob programming events with guest developers and Pat Maddox. ($149 per month). UT on Rails - 10 weeks long Ruby on Rails screencasts. It assumes you know little about programming and not used Ruby, Rails or databases previously. Good for beginners. Other Learning Materials TryRuby — online Ruby console and 15 minute interactive Ruby tutorial. Project Euler — a huge amount of programming problems to learn any language. PuzzleNode — a site for coders who enjoy to work on challenging problems, and is inspired by similar efforts such as Project Euler and the Internet Problem Solving Contest. Ruby on Rails Guides — These guides are designed to make you immediately productive with Rails, and to help you understand how all of the pieces fit together. Ruby Koans — will walk you along the path to enlightenment in order to learn Ruby. The goal is to learn the Ruby language, syntax, structure, and some common functions and libraries. We also teach you culture. Testing is not just something we pay lip service to, but something we live. It is essential in your quest to learn and do great things in the language. RubyMonk — free, interactive tutorials to help you discover Ruby idioms, in your browser! SitePoint — articles on Ruby programming. Better Specs — RSpec best practices. Sourcegraph — search engine for code examples/ Here is a demo video. Basic Algorithms written in Ruby. Algorithms and Data Structures in Ruby Jumpstart Lab — a list of beginner and advanced-level Ruby, Rails, and Sinatra project tutorials. Includes challenging independent projects as well. RubyOffRails — An online Ruby course recently open sourced. The Odin Project — an online Ruby lesson plan with a community to help. Style Guides A community-driven Ruby coding style guide A community-driven Rails 3 & 4 style guide GitHub Ruby Coding Style Thoughtbot Style Guides — short guidelines on Ruby, Rails, Git some other technologies. See also: Semantic Versioning Keep a CHANGELOG — don’t let your friends dump git logs into CHANGELOGs™ Code quality analysis tools. Podcasts Ruby5 Ruby Rogues Ruby on Rails Podcast Giant Robots Smashing into Other Giant Robots Tools IDEs and text editors StackOverflow: What Ruby IDE do you prefer? ★ Sublime Text — one of the best text editors for coding. Take a look at Sublime Bookmarks — a comprehensive list of plugins and other related stuff. RubyMine — intelligent Ruby and Rails IDE. Atom — a brand-new hackable text editor from Github. Visual Studio Code — Redefined code editor from Microsoft with Ruby debugging support. Code quality analysis RuboCop — a Ruby static code analyzer, based on the community Ruby style guide. Guard plugin for RuboCop — allows you to automatically check Ruby code style with RuboCop when files are modified. RubyCritic — a gem that wraps around static analysis gems such as Reek, Flay and Flog to provide a quality report of your Ruby code. Environment management ★ rbenv — a tool to to pick a Ruby version for your application and guarantee that your development environment matches production. Put rbenv to work with Bundler for painless Ruby upgrades and bulletproof deployments. rbenv-vars — an rbenv plugin that safely sets global and per-project environment variables. RVM — a command-line tool which allows you to easily install, manage, and work with multiple ruby environments from interpreters to sets of gems. chruby — a tool that changes the current Ruby. Ruby distributions RubyInstaller — a self-contained Windows-based installer that includes the Ruby language, an execution environment, important documentation, and more. RubyStack — a complete development environment for Ruby on Rails that can be deployed in one click. It includes the latest stable release of Ruby, RVM, Rails, Apache, NGinx, MySQL, SQLite, Git and Subversion, Memcache and Varnish, Sphinx, PHP and phpMyAdmin. Documentation Dash — an API Documentation Browser and Code Snippet Manager. Dash stores snippets of code and instantly searches offline documentation sets for 150+ APIs, including Ruby core libraries, and Ruby on Rails. Zeal – Dash alternative for Linux & Windows. DevDocs — multiple API documentations in a fast, organized, and searchable interface (web). OmniRef — comprehensive ruby documentation search (web). Application and Web Servers Unicorn – Rack HTTP server for fast clients and Unix. Phusion Passenger — a fast and robust web server and application server for Ruby, Python and Node.js. Thin – A very fast & simple Ruby web server. Puma — a Ruby web server built for concurrency. Pow! — a zero-config Rack server for Mac OS X. Powder — user-friendly CLI wraper for Pow. Powify — a management tool for Pow by 37 signals. It allows you to easily install, update, and manage pow and pow applications seamlessly. Prax — a pure ruby alternative to Pow! that runs on GNU/Linux. TorqueBox — an application platform that supports popular technologies such as Ruby on Rails and Sinatra, while extending the footprint of Ruby applications to include built-in support for services such as messaging, scheduling, caching, and daemons. TorqueBox provides an all-in-one environment, built upon the latest JBoss AS Java application server and JRuby. Functionality such as clustering, load-balancing and high-availability is included right out-of-the-box. See also: The Ruby Web Benchmark Report (July 2014) — „I benchmarked every single version of Ruby available as of the beginning of this test — January 2014. On each version I benchmarked every Rack server and web framework combination I could find. I tested with both Apache Bench and wrk to see if there are flaws that one benchmarking tool picks up on that the other didn’t. The goal of the benchmark is the fastest benchmark run, not the average.“ App Server Arena — a comparison of popular ruby application servers. Deployment Automation and Configuration Management Capistrano — remote multi-server automation tool. Chef — a systems integration framework, built to bring the benefits of configuration management to your entire infrastructure. ★ Mina – really fast deployer and server automation tool. Rails + Nginx + Unicorn Dockerfile — easy useable docker for rails. less configuration, affordable production. Other tools Pry — a powerful alternative to the standard IRB shell for Ruby. It features syntax highlighting, a flexible plugin architecture, runtime invocation and source and documentation browsing. Reek — code smell detection for Ruby. Foreman — manage Procfile-based applications. Rubular — a Ruby-based regular expression editor. It's a handy way to test regular expressions as you write them. httpie — extremely handy command line HTTP client, a user-friendly cURL replacement. ngrok — introspected tunnels to localhost. ngrok creates a tunnel from the public internet (http://subdomain.ngrok.com) to a port on your local machine. You can give this URL to anyone to allow them to try out a web site you're developing without doing any deployment. eye — a process monitor. god - the Ruby Framework for Process Management Quizzes, tests, exams codequizzes.com — learn programming by doing, not by reading. codewars.com — achieve mastery through challenge. Smarterer.com — crowdsourced tests for Ruby, Rails, and a lot of other technologies. oDesk — a global freelance platform that includes qualification testing for programming languages and frameworkks. Hosting VPS DigitalOcean — fast VPS hosting. Among other features they provide one-click Rails installation that uses Nginx with Unicorn on Ubuntu. PAAS Heroku — cloud computing designed and built for developers. More details on Ruby support. NineFold — Rails-friendly hosting with a generous free tier (1.5 GB RAM, 1 CPU, 25 GB for DataBase server in the US region). Credit card required even if you fit the free tier. OpenShift — Red Hat's Platform-as-a-Service that allows developers to quickly develop, host, and scale applications in a cloud environment. Capable for Rails apps git-push deployment. There also a free tier (no credit card required). AppFog — another developer-friendly cloud service. Some materials on Rails deployment A guide to setting up a Ruby on Rails production environment at DigitalOcean. How To Automate Ruby On Rails Application Deployments Using Capistrano How to Use the DigitalOcean Dokku Application How To Use the Dokku One-Click DigitalOcean Image to Run a Ruby on Rails App Gems ActiveRecord Annotate — Add a comment summarizing the current schema to the top or bottom of each of your ActiveRecord models, fixtures, tests and specs, factory_girl factories, routes.rb file, etc. Paperclip — easy file attachment management for ActiveRecord. Thinking Sphinx — a library for connecting ActiveRecord to the Sphinx full-text search tool, and integrates closely with Rails (but also works with other Ruby web frameworks). Ancestry — organise ActiveRecord model into a tree structure. Squeel — lets you write your Active Record queries with fewer strings, and more Ruby, by making the Arel awesomeness that lies beneath Active Record more accessible. API RABL — a Rails and Padrino ruby templating system for generating JSON, XML, MessagePack, PList and BSON. Grape — an opinionated micro-framework for creating REST-like APIs in Ruby. Pliny – write excellent APIs in Ruby. Authentication Devise — flexible authentication solution for Rails with Warden. OmniAuth — a flexible authentication system utilizing Rack middleware. Authlogic — a clean, simple, and unobtrusive ruby authentication solution. sorcery — magical Authentication for Rails 3 and 4, with OAuth support. Supports ActiveRecord, DataMapper, Mongoid and MongoMapper. Authorization CanCanCan — a continuation of the dead. CanCan project. Our mission is to keep CanCan alive and moving forward, with maintenance fixes and new features. Pundit — minimal authorization through OO design and pure Ruby classes. Avatars avatarly — a simple gem for creating gmail-like user avatars based on user email or any other string passed. Background Jobs Backburner — a beanstalkd-powered job queue that can handle a very high volume of jobs. Stalker — a minimalist queuing DSL for Beanstalk. Delayed::Job — database backed asynchronous priority queue. Minion — simple job queue based on AMQP gem and Bunny. Qu — a Ruby library for queuing and processing background jobs. que — a Ruby job queue that uses PostgreSQL's advisory locks for speed and reliability. Resque — a Redis-backed Ruby library for creating background jobs, placing them on multiple queues, and processing them later. Sidekiq — a full-featured background processing framework for Ruby. It aims to be simple to integrate with any modern Rails application and much higher performance than other existing solutions. Sucker Punch — an asynchronous processing library using Celluloid, heavily influenced by Sidekiq and girl_friday. Ost — a lightweight Redis based queues and workers. Ohm — object-hash mapping for Redis. Bootstrap bootstrap-sass — official SASS port of Twitter Bootstrap. twitter-bootstrap-rails — Twitter Bootstrap for Rails asset pipeline. CLI colorize — String class extension. It add some methods to set color, background color and text effect on console easier using ANSI escape sequences. TTY — a toolbox for developing beautiful command line clients in Ruby. CSS LESS — leaner CSS, in your browser or Ruby. Bourbon — alightweight mixin library for Sass. SASS — an extension of CSS3, adding nested rules, variables, mixins, selector inheritance, and more. It's translated to well-formatted, standard CSS using the command line tool or a web-framework plugin. Bitters — add a dash of pre-defined style to your Bourbon. Autoprefixer — a tool to parse CSS and add vendor prefixes to CSS rules using values from the Can I Use. This gem provides Ruby and Ruby on Rails integration with this JavaScript tool. Configuration and environment variables ★ dotenv — loads environment variables from .env file into ENV in development. Chamber — A surprisingly configurable convention-based approach to managing your application's custom configuration settings. Figaro — simple, Heroku-friendly Rails app configuration using ENV and a single YAML file. Debugging Byebug — a simple to use, feature rich debugger for Ruby 2. It uses the new TracePoint API for execution control and the new Debug Inspector API for call stack navigation, so it doesn't depend on internal core sources. It's developed as a C extension, so it's fast. And it has a full test suite so it's reliable. E-commerce FastSpring — subscription API for Rails. Active Merchant — a simple and unified API to access dozens of different payment gateways with very different internal APIs. PayPal — this SDK provides Ruby APIs to create, process and manage payment. Shoppe — e-commerce platform for Ruby on Rails. Graphics RMagick — an interface to the ImageMagick and GraphicsMagick image processing libraries. MiniMagick — a ruby wrapper for ImageMagick or GraphicsMagick command line. psd.rb Parse Photoshop files in Ruby with ease. HTML, XML Nokogiri — an HTML, XML, SAX, and Reader parser. Among Nokogiri’s many features is the ability to search documents via XPath or CSS3 selectors. Logging MonoLogger — a lock-free logger for Ruby 2.0. Yell — Your Extensible Logging Library, a comprehensive logging replacement for Ruby. Fluentd — an open source data collector designed for processing data streams, which instantly enables you to have Log Management, Big Data Analytics, etc. mongodb_logger — an alternative logger for Rails or Rack based app, which log all requests of you application into MongoDB database (allow to store and search any information from logs; web panel allow filter logs, build graphs using MapReduce by information from logs). Hatchet — logging library that provides the ability to add class/module specific filters. Whoops — a free, self-hosted tool for logging application events like errors or background worker completion (uses Rails for web frontend and MongoDB). logstasher Awesome rails logs Mail Pony — the express way to send email in Ruby. Mailgun-Ruby — Mailgun's Official Ruby Library. AWS::SES — easy ruby DSL & interface to Amazon SES. See also the official Ruby SDK. Mail — a library that is designed to handle emails generation, parsing and sending in a simple, rubyesque manner. Markdown kramdown — yet-another-markdown-parser but fast, pure Ruby, using a strict syntax definition and supporting several common extensions, http://kramdown.gettalong.org redcarpet — a fast, safe and extensible Markdown to (X)HTML parser. maruku — a pure-Ruby Markdown-superset interpreter. markup — the code GitHub uses to render README.your_favorite_markup. See also: StackOverflow: Better ruby markdown interpreter? Message Queuing AMQP — EventMachine-based RabbitMQ client. ★ Bunny — RabbitMQ Ruby client based on AMQP gem. rbzmq — Ruby binding for ZeroMQ. ★ ffi-rzmq — FFI bindings for ZeroMQ so the library can be used under JRuby and other FFI-compliant ruby runtimes. Misc If there is a nice gem, but it is difficult to classify it with existing bookmarks groups, or it is still one of his kind, put it here. Prawn — fast, nimble PDF generation. Dalli — high performance Memcached client for Ruby. EventMachine — fast, simple event-processing library. rpush — push notification service, supporting Apple Push Notification Service, Google Cloud Messaging, Amazon Device Messaging, Windows Phone Push Notification Service. Rubyzip — reading and writing zip files. JsonCompare — returns the difference between two JSON files. MicroMachine — minimal Finite State Machine. Dante — turn any ruby code into a daemon. Memoist — an extraction of ActiveSupport::Memoizable with few extensions. Awesome Print — a Ruby library that pretty prints Ruby objects in full color exposing their internal structure with proper indentation. Rails ActiveRecord objects and usage within Rails templates are supported via included mixins. twig Your personal Git branch assistant datashift Comprehensive Excel and CSV import/export tools for Ruby Configurations — provides a unified approach to do configurations for gems or other ruby code. awesome_print — a Ruby library that pretty prints Ruby objects in full color exposing their internal structure with proper indentation. Rails ActiveRecord objects and usage within Rails templates are supported via included mixins. YYMMDD — tiny DSL for idiomatic date parsing and formatting. Libnotify — Ruby bindings for libnotify, a crossplatform user notification library. MemFs — provides a fake file system that can be used for tests. Github-Changelog-Generator — automatically generate change log from your tags, issues, labels and pull requests. Multithreading thread — extensions to the thread library (includes thread pool). Sprawling — spawn gem for Rails to easily fork or thread long-running code blocks. Parallel — Run any code in parallel Processes(> use all CPUs) or Threads(> speedup blocking operations). Best suited for map-reduce or e.g. parallel downloads/uploads. Profiling and Performance ruby-prof — a code profiler for MRI rubies. Timecop — a gem providing ""time travel"", ""time freezing"", and ""time acceleration"" capabilities, making it simple to test time-dependent code. It provides a unified method to mock Time.now, Date.today, and DateTime.now in a single call. timecop-console — expose Timecop's capabilities to the UI in your rails app, allowing QA to take advantage of it. stackprof — a sampling call-stack profiler for ruby 2.1+. stackprof-webnav — web UI for viewing stackprof dumps. rblineprof — line-profiler. Peek — status bar showing performance info for Rails apps. Peek::Rblineprof — peek into how much each line of your Rails application takes throughout a request. Bullet — a gem to help to increase application's performance by reducing the number of queries it makes. It will watch your queries while you develop your application and notify you when you should add eager loading (N+1 queries), when you're using eager loading that isn't necessary and when you should use counter cache. rack-mini-profiler — middleware that displays speed badge for every html page. Designed to work both in production and in development. Rack Rack::Timeout — abort requests that are taking too long. Rack::Protection — protects against typical web attacks. Should work for all Rack apps, including Rails. Rack::LiveReload — Bring in livereload.js into handy Rack middleware. No need for browser extensions anymore! Just plug it in your middleware stack and go! Even supports browsers without WebSockets! rack-mini-profiler — middleware that displays speed badge for every html page. Designed to work both in production and in development. Coverband — Rack middleware to help measure production code coverage. Rails Simple Form — forms made easy for Rails! It's tied to a simple DSL, with no opinion on markup. ResqueMailer — Rails plugin for sending asynchronous email with ActionMailer and Resque. Jammit — an industrial strength asset packaging library for Rails, providing both the CSS and JavaScript concatenation and compression that you'd expect, as well as YUI Compressor, Closure Compiler, and UglifyJS compatibility, ahead-of-time gzipping, built-in JavaScript template support, and optional Data-URI / MHTML image and font embedding. CarrierWave — classier solution for file uploads for Rails, Sinatra and other Ruby web frameworks. Kaminari — clean, powerful, customizable and sophisticated paginator for modern web app frameworks and ORMs. suspenders — a Rails template with Thoughtbot standard defaults, ready to deploy to Heroku. High Voltage — easily include static pages in your Rails app. Squasher — compresses old migrations in a Rails application. If you work on a big project with lots of migrations, every rake db:migrate might take a few seconds, or creating of a new database might take a few minutes. That's because Rails loads all those migration files. Squasher removes all the migrations and creates a single migration with the final database state of the specified date (a new migration will look like a schema). Metamagic — a simple Ruby on Rails plugin for creating meta tags. It supports regular meta tags, OpenGraph (Facebook), Twitter Cards, and custom tags. Better Errors — replaces the standard Rails error page with a much better and more useful error page. It is also usable outside of Rails in any Rack app as Rack middleware. Quiet Assets — turns off the Rails asset pipeline log. RailsAdmin — a Rails engine that provides an easy-to-use interface for managing your data. paper_trail — track changes to your models' data. Good for auditing or versioning. font-awesome-rails — the Font Awesome font bundled as an asset for the rails asset pipeline. gemoji — emoji images and names. rails_emoji — one more emoji gem for Ruby on Rails. Royce — a Ruby on Rails roles solution. YamlDb — a database-independent format for dumping and restoring data. It complements the the database-independent schema format found in db/schema.rb. The data is saved into db/data.yml. formtastic — a Rails form builder plugin with semantically rich and accessible markup. rails_param — parameter Validation & Type Coercion. RailsFriendlyURLs - Rails gem to configure absolutely any url within your project into a SEO-Friendly one. Validation: email_validator — an email validator for Rails 3 and 4. validates_email_format_of — validate e-mail addreses against RFC 2822 and RFC 3696 with this Ruby on Rails plugin and gem. Scheduling (info collected from Stack Overflow) ★ rufus-scheduler — an in-process, in-memory scheduler with no persistence, accepting at, in, cron and every jobs. sidekiq-cron — scheduler based on rufus-scheduler and Sidekiq (Redis based message queue) for persistence. Inherits web UI from Sidekiq. sidekiq-scheduler — one more job scheduler based on rufus-scheduler and Sidekiq. resque-scheduler — rufus-scheduler + Resque. Clockwork — a cron replacement. It runs as a lightweight, long-running Ruby process which sits alongside your web processes (Mongrel/Thin) and your worker processes (DJ/Resque/Minion/Stalker) to schedule recurring work at particular times or dates. Here is a blog post with more details. Whenever — a Ruby wrapper for crond, with a clear syntax (each job is a separate process). SDKs and API Wrapers AWS SDK — Amazon Web Services API for Ruby. Dropbox Core API for Ruby. Fog — cloud services library, top to bottom: collections provide a simplified interface, making clouds easier to work with and switch between; requests allow power users to get the most out of the features of each individual cloud; mocks make testing and integrating a breeze. Yt — YouTube API Ruby client. Search Ransack — enables the creation of both simple and advanced search forms against your application's models. Security Brakeman — a static analysis security vulnerability scanner for Ruby on Rails applications. Codesake::Dawn - Codesake::Dawn is a security source code scanner for ruby powered code. It is especially designed for web applications, but it works also with general purpose ruby scripts. Codesake::Dawn supports all major MVC frameworks like ruby on rails, Padrino and Sinatra; it provides more than 170 security checks with their own mitigation suggestion. Serialization Text: JSON — includes pure Ruby and C implementation for JSON. JSON::Stream — a streaming JSON parser that generates SAX-like events. YAJL — a streaming JSON parsing and encoding library for Ruby (C bindings to YAJL). OJ — Optimized JSON, as the name implies, was written to provide speed optimized JSON handling. So far it has achieved that, and is about 2 times faster than any other Ruby JSON parser, and 3 or more times faster at serializing JSON. TOML — a sane configuration format from @mojombo. Binary: BSON — Ruby implementation of the BSON Specification (2.0.0+), http://bsonspec.org MessagePack — an efficient binary serialization format. It lets you exchange data among multiple languages like JSON but it's faster and smaller. For example, small integers (like flags or error code) are encoded into a single byte, and typical short strings only require an extra byte in addition to the strings themselves. See http://msgpack.org Protobuf — Ruby implementation for Protocol Buffers. Syntax Highlighters Rouge — a pure-ruby code highlighter that is compatible with pygments. pygments.rb — a Ruby wrapper for the Python pygments syntax highlighter. Template engines Mustache — logic-less Ruby templates. A framework-agnostic way to render logic-free views. HAML — a very compact markup language, that accelerates and simplifies template creation down to veritable haiku. Slim – a templating language that reduce the syntax to the essential parts without becoming cryptic. Tilt — generic interface to multiple Ruby template engines. Testing RSpec — RSpec meta-gem that depends on the other components. rspec-rails — Rails integration for RSpec. RSpec::Expectations — a simple, readable API to express expected outcomes of a code example. Cucumber — a tool for running automated tests written in plain language. shoulda factory_girl — a fixtures replacement with a straightforward definition syntax, support for multiple build strategies (saved instances, unsaved instances, attribute hashes, and stubbed objects), and support for multiple factories for the same class, including factory inheritance. factory_girl_rails — Rails integration for factory_girl. Capybara — a tool helping you test web applications by simulating how a real user would interact with your app. It is agnostic about the driver running your tests and comes with Rack::Test and Selenium support built in. WebKit is supported through an external gem. capybara-webkit A Capybara driver for headless WebKit so you can test JavaScript web apps. Formulaic — simplify form filling with Capybara. Mocha — a Ruby library for mocking and stubbing. Spring — Rails application preloader to speeds up development by keeping your application running in the background so you don't need to boot it every time you run a test, rake task or migration. Faker — a library for generating fake data such as names, addresses, and phone numbers. Web Frameworks Ruby on Rails — an open source full-stack framework web application framework. Sinatra — a DSL for quickly creating web applications in Ruby with minimal effort. Padrino — a Ruby framework built upon the Sinatra web library, created to make it fun and easy to code more advanced web applications while still adhering to the spirit that makes Sinatra great! ★ Cuba — a microframework for web development originally inspired by Rum, a tiny but powerful mapper for Rack applications. It integrates many templates via Tilt, and testing via Cutest and Capybara. Hanami — a complete, modern web framework. Roda — a new ruby web framework, allowing for fast and DRY code using a routing tree. Find out why you should use it. See also: Benchmark results for different Ruby, web framework and app server combinations (actual on July 2014). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dreikanter/ruby-bookmarks"	""	"true"
"Web Frameworks"	"NancyFx"	"https://github.com/NancyFx/Nancy"	"Lightweight, low-ceremony, framework for building HTTP based services on.Net and Mono"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4188"	"382"	"1071"	"GitHub - NancyFx/Nancy: Lightweight, low-ceremony, framework for building HTTP based services on .Net and Mono Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 382 Star 4,188 Fork 1,071 NancyFx/Nancy Code Issues 132 Pull requests 8 Wiki Pulse Graphs Lightweight, low-ceremony, framework for building HTTP based services on .Net and Mono http://nancyfx.org 5,116 commits 3 branches 44 releases 251 contributors C# 95.5% JavaScript 1.7% HTML 1.7% Liquid 0.5% Ruby 0.3% CSS 0.2% Other 0.1% C# JavaScript HTML Liquid Ruby CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x-WorkingBranch jchannon-patch-1 master Nothing to show v2.0.0-barneyrubble v2.0.0-alpha v1.4.3 v1.4.2 v1.4.1 v1.4.0 v1.3.0 v1.2.0 v1.1 v1.0.0 v0.23.2 v0.23.1 v0.23.0 v0.22.2 v0.22.1 v0.22.0 v0.21.1 v0.21.0 v0.20.0 v0.18.0 v0.17.1 v0.17.0 v0.16.1 v0.16.0 v0.15.3 v0.15.2 v0.15.1 v0.15.0 v0.14.1 v0.14.0 v0.13.0 v0.12.1 v0.12.0 v0.11.0 v0.10.0 v0.9.0 v0.8.1 v0.8.0 v0.7.1 v0.7.0 v0.6.0 v0.5.0 v0.4.0 v0.0.2.0 Nothing to show New pull request Latest commit cc15a94 Jul 12, 2016 grumpydev Updated version to 2.0.0-barneyrubble Permalink Failed to load latest commit information. .github Fixes wording on the pull request template May 11, 2016 samples Updated kestrel deps Jul 7, 2016 src Updated version to 2.0.0-barneyrubble Jul 12, 2016 test Added net standard 1.6 and RTM versions Jul 7, 2016 tools Removed docu and mspec from tools folder Mar 8, 2016 .editorconfig Added .editorconfig Aug 26, 2015 .gitattributes Settings the stage for magic Nov 20, 2010 .gitignore Upgraded dotnet cli tools to preview 2 for RTM build Jul 8, 2016 .mailmap Added .mailmap Aug 25, 2015 .travis.yml Upgraded dotnet cli tools to preview 2 for RTM build Jul 8, 2016 Gemfile include the rake gem Jun 8, 2015 Nancy.Next.sln added kestrel demo project May 27, 2016 Nancy.Next.sln.DotSettings Add ReSharper code style for braces (#2480) Jun 3, 2016 Nancy.sln Moved samples projects back into old folders Feb 5, 2016 Nancy.sln.DotSettings Add ReSharper code style for braces (#2480) Jun 3, 2016 NuGet.config Updated to stable rc2 bits May 27, 2016 README.md Update route syntax in readme May 27, 2016 SharedAssemblyInfo.cs Updated SharedAssemblyInfo to v2.0.0-alpha Mar 22, 2016 appveyor.yml force dotnet install even if installed globally as may be diff versio… Jul 5, 2016 build.cake removed json net dependency from cake| Jul 6, 2016 build.ps1 Upgraded dotnet cli tools to preview 2 for RTM build Jul 8, 2016 build.sh Upgraded dotnet cli tools to preview 2 for RTM build Jul 8, 2016 customassemblyinfo.rb Added new task for updating informational version Feb 4, 2013 favicon.license.txt corrected typo in license owner Apr 24, 2015 global.json Updated global.json for net sdk 1.0.0-preview2-003121 Jul 8, 2016 how_to_build.txt Update how to build instructions with missing prerequisites Sep 2, 2015 license.txt Updated readme and license to include Steven Robbins as core developer Mar 31, 2011 rakefile.rb Made the compile tasks depend on the nuget restore tasks Mar 17, 2016 sub_projects.rb Added placeholder script for future subproject refactor Nov 2, 2011 README.md Meet Nancy Nancy is a lightweight, low-ceremony, framework for building HTTP based services on .Net and Mono. The goal of the framework is to stay out of the way as much as possible and provide a super-duper-happy-path to all interactions. Nancy is designed to handle DELETE, GET, HEAD, OPTIONS, POST, PUT and PATCH requests and provides a simple, elegant, Domain Specific Language (DSL) for returning a response with just a couple of keystrokes, leaving you with more time to focus on the important bits.. your code and your application. Write your application public class Module : NancyModule {     public Module()     {         Get(""/greet/{name}"", x => {             return string.Concat(""Hello "", x.name);         });     } } Compile, run and enjoy the simple, elegant design! Features Built from the bottom up, not simply a DSL on top of an existing framework. Removing limitations and feature hacks of an underlying framework, as well as the need to reference more assemblies than you need. keep it light Run anywhere. Nancy is not built on any specific hosting technology can be run anywhere. Out of the box, Nancy supports running on ASP.NET/IIS, WCF, Self-hosting and any OWIN Ultra lightweight action declarations for GET, HEAD, PUT, POST, DELETE, OPTIONS and PATCH requests View engine integration (Razor, Spark, dotLiquid, our own SuperSimpleViewEngine and many more) Powerful request path matching that includes advanced parameter capabilities. The path matching strategy can be replaced with custom implementations to fit your exact needs Easy response syntax, enabling you to return things like int, string, HttpStatusCode and Action elements without having to explicitly cast or wrap your response - you just return it and Nancy will do the work for you A powerful, light-weight, testing framework to help you verify the behavior of your application Content negotiation And much, much more The super-duper-happy-path The ""super-duper-happy-path"" (or SDHP if you’re ‘down with the kids’ ;-)) is a phrase we coined to describe the ethos of Nancy; and providing the “super-duper-happy-path” experience is something we strive for in all of our APIs. While it’s hard to pin down exactly what it is, it’s a very emotive term after all, but the basic ideas behind it are: “It just works” - you should be able to pick things up and use them without any mucking about. Added a new module? That’s automatically discovered for you. Brought in a new View Engine? All wired up and ready to go without you having to do anything else. Even if you add a new dependency to your module, by default we’ll locate that and inject it for you - no configuration required. “Easily customisable” - even though “it just works”, there shouldn’t be any barriers that get in the way of customisation should you want to work the way you want to work with the components that you want to use. Want to use another container? No problem! Want to tweak the way routes are selected? Go ahead! Through our bootstrapper approach all of these things should be a piece of cake. “Low ceremony” - the amount of “Nancy code” you should need in your application should be minimal. The important part of any Nancy application is your code - our code should get out of your way and let you get on with building awesome applications. As a testament to this it’s actually possible to fit a functional Nancy application into a single Tweet :-) “Low friction” - when building software with Nancy the APIs should help you get where you want to go, rather than getting in your way. Naming should be obvious, required configuration should be minimal, but power and extensibility should still be there when you need it. Above all, creating an application with Nancy should be a pleasure, and hopefully fun! But without sacrificing the power or extensibility that you may need as your application grows. Community Nancy followers can be found on Slack NancyFx team. You can also find Nancy on Twitter using the #NancyFx hashtag. Help out There are many ways you can contribute to Nancy. Like most open-source software projects, contributing code is just one of many outlets where you can help improve. Some of the things that you could help out with in Nancy are: Documentation (both code and features) Bug reports Bug fixes Feature requests Feature implementations Test coverage Code quality Sample applications Contributors Nancy is not a one man project and many of the features that are available would not have been possible without the awesome contributions from the community! For a full list of contributors, please see the website. Copyright Copyright © 2010 Andreas Håkansson, Steven Robbins and contributors License Nancy is licensed under MIT. Refer to license.txt for more information. CI Builds TC (.net) Travis (Mono) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/NancyFx/Nancy"	"Lightweight, low-ceremony, framework for building HTTP based services on.Net and Mono"	"true"
"API"	"ASP.NET WebAPI"	"http://www.asp.net/web-api"	"Framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ASP.NET Web API | The ASP.NET Site Blog Sign inJoin Language ASP.NET Home Get Started ASP.NET ASP.NET Core Learn ASP.NET ASP.NET Core Hosting Downloads Community Overview Community Spotlight Articles of the Day What's new Community Blogs ASP.NET Team Events Hall Of Fame MSDN Samples Forums Community Websites Community Support ASP.NET Community Standup Forums Help Learn About ASP.NET Web API ASP.NET Web API is a framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices. ASP.NET Web API is an ideal platform for building RESTful applications on the .NET Framework. Download Visual Studio 2015 Web API: Guidance Videos Samples Forum Books Open Source Getting Started Getting Started Getting Started with Web API 2 (C#) Getting Started with ASP.NET Web API Creating a Leaderboard App with Azure Mobile Services .NET Backend Action Results in Web API 2 Web API 2 Poster Pro ASP.NET Web API Using Web API with ASP.NET Web Forms Creating Web API Help Pages Hands On Lab: Build a Single Page Application (SPA) with ASP.NET Web API and Angular.js Routing Routing in Web API Routing and Action Selection in Web API Attribute Routing in Web API 2 Create a REST API with Attribute Routing in Web API 2 Working with Data Using Web API 2 with Entity Framework 6 1. Create the Project 2. Add Models and Controllers 3. Seed the Database 4. Handling Entity Relations 5. Create Data Transfer Objects (DTOs) 6. Create the JavaScript Client 7. Create the View (UI) 8. Display Item Details 9. Add a New Item to the Database 10. Publish the App to Azure Websites ASP.NET Data Access - Recommended Resources Mobile Clients Calling Web API from a Windows Phone 8 Application (C#) Get Started with Mobile Apps in Azure App Service Creating a Leaderboard App with Azure Mobile Services .NET Backend Add Authentication to your Mobile App Add Push Notifications to Your Mobile App OData OData v4 Create an OData v4 Endpoint Create an OData v4 Client App (C#) Entity Relations in OData v4 Actions and Functions in OData v4 Containment in OData v4 Create a Singleton in OData v4 Open Types in OData v4 Complex Type Inheritance in OData v4 OData v3 Creating an OData v3 Endpoint Supporting Entity Relations in OData v3 OData Actions in Web API 2 Calling an OData Service From a .NET Client (C#) A New Option for Creating OData: Web API Supporting OData Query Options in Web API 2 Using $select, $expand, and $value in Web API 2 OData Routing Conventions in Web API 2 OData Security Guidance for Web API 2 OData Serialization and Model Binding Media Formatters in Web API 2 JSON and XML Serialization in Web API BSON Support in Web API 2.1 Content Negotiation in Web API Model Validation in Web API Parameter Binding in Web API Error Handling Exception Handling in Web API Global Error Handling in Web API 2 Testing and Debugging Tracing in Web API 2 Unit Testing Web API 2 Unit Testing Controllers in ASP.NET Web API 2 Mocking Entity Framework when Unit Testing Web API 2 Troubleshooting HTTP 405 Errors after Publishing Web API 2 Applications Debugging ASP.NET Web API with Route Debugger Troubleshooting Azure Web Apps in Visual Studio Security, Authentication, and Authorization Authentication and Authorization in Web API Secure a Web API with Individual Accounts in Web API 2.2 ASP.NET Identity External Authentication Services with Web API (C#) Web API Security Architecture Preventing Cross-Site Request Forgery (CSRF) Attacks in Web API Enabling Cross-Origin Requests in Web API 2 Authentication Filters in Web API 2 Basic Authentication in Web API Forms Authentication in Web API Integrated Windows Authentication Working with SSL Securing Web API Deployment and Hosting Deploy a Web API to an Azure Website Create a mobile-friendly REST service using Web API 2 and SQL Database Use OWIN to Self-Host Web API 2 Host Web API 2 in an Azure Worker Role MVC Deployment Resources API Reference ASP.NET Web API Reference Advanced Topics Configuring Web API 2 Dependency Injection in Web API 2 Calling a Web API From a .NET Client in Web API 2 (C#) HTTP Message Handlers in Web API HttpClient Message Handlers in Web API Sending HTML Form Data in Web API: Form-urlencoded Data Sending HTML Form Data in Web API: File Upload and Multipart MIME Batching HTTP Messages in Web API HTTP Cookies in ASP.NET Web API Versioning RESTful Services Releases What's New in Web API OData 5.3 What's New in ASP.NET Web API 2.2 What's New in ASP.NET Web API 2.1 What's New in ASP.NET Web API 2 Additional Resources .NET Web Development and Tools Blog Brad Wilson's Blog Henrik's Blog Hongmei's Blog Kiran's Blog Mike Stall's Blog Yao's Blog Older Versions Enabling CRUD Operations in Web API 1 Using ASP.NET Web API 1 with Entity Framework 5 1. Overview and Creating the Project 2. Creating the Domain Models 3. Creating an Admin Controller 4. Adding an Admin View 5. Creating a Dynamic UI with Knockout.js 6. Creating Product and Order Controllers 7. Creating the Main Page Self-Host Web API 1 (C#) Build RESTful API's with ASP.NET Web API Get Help ASP.NET Web API Forum ASP.NET Web API in StackOverflow The basics of building an HTTP service using ASP.NET Web API Getting Started with ASP.NET Web API 2 By Mike Wasson|May 28, 2015 In this tutorial, you will create your first HTTP service using ASP.NET Web API. Getting Started with ASP.NET Web API This video from Scott Hanselman will get you started on ASP.NET Web API. Creating a Leaderboard App with Azure Mobile Services .NET Backend Use Visual Studio to create a Web API app hosted in Azure Mobile Services. Action Results in Web API 2 By Mike Wasson|February 3, 2014 Describes how Web API converts the return value from a controller action into an HTTP response. Web API 2 Poster This poster shows how an HTTP request flows through the Web API 2 pipeline, and how the HTTP response flows back. It also shows extensibility points, where you can add custom code or even replace the default behavior entirely. Pro ASP.NET Web API Pro ASP.NET Web API, by Tugberk Ugurlu and Alexander Zeitler, shows you how to build flexible, extensible web services that run seamlessly on a range of operating systems and devices, from desktops to tablets to smart phones—even the ones we don’t know today. Using Web API with ASP.NET Web Forms By Mike Wasson|April 3, 2012 This tutorial shows how to use ASP.NET Web API in an ASP.NET Web Forms project. Creating API Help Pages By Mike Wasson|April 1, 2013 Learn how to add help pages for your web API, so that other developers will know how to call your API. Hands On Lab: Build a Single Page Application (SPA) with ASP.NET Web API and Angular.js By Web Camps Team|September 30, 2015 Build Geek Quiz, a trivia website based on the SPA concept, from the ground up using ASP.NET Web API, AngularJS, and CSS3. Essential Videos Microsoft has made it possible for you to enjoy this Pluralsight training free of charge. In addition, you can watch more videos free of charge from Microsoft. 1. Introduction 54 mins 2. Uniform Interface 46 mins 3. HttpClient 33 mins 4. Hosting 25 mins 5. Security 10 mins 6.Extensbility 27 mins Sponsored By: Pluralsight Unlock access to 3,000+ dev, IT and creative courses that you can watch anytime, anywhere. Starting at $29/mo. Free Trial! Free Subscribe Now! Web API Books Microsoft's Jon Galloway recommends these books for learning ASP.NET MVC: ASP.NET MVC 4 and the Web API: Building a REST Service from Start to Finish by Jamie Kurtz Pro ASP.NET Web API by Tugberk Ugurlu, Alexander Zeitler ASP.NET Web API 2 Recipes: A Problem-Solution Approach by Filip Wojcieszyn Designing Evolvable Web APIs with ASP.NET by Glenn Block, Pablo Cibraro, Pedro Felix, Howard Dierking, Darrel Miller This site is managed for Microsoft by Neudesic, LLC. | © 2016 Microsoft. All rights reserved. Privacy Statement| Terms of Use| Contact Us| Advertise With Us| CMS by Umbraco| Hosted on Microsoft Azure Feedback on ASP.NET| File Bugs| Support Lifecycle ✖ Installs powered by the Microsoft Web Platform Installer The product(s) you are about to install leverage the Web Platform Installer (WebPI) for installation. By downloading and using the Web Platform Installer (WebPI), you agree to the license terms and privacy statement for WebPI. This installer will contact Microsoft over the Internet to retrieve product information. WebPI uses the Microsoft Customer Experience Improvement Program (CEIP), which is turned on by default, see privacy statement for more information. Some of the Microsoft software obtained through WebPI may use CEIP. To view which software uses CEIP, see here.Accept and install"	"null"	"null"	"Framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices"	"true"
"API"	"Breeze"	"http://breeze.github.io/doc-net/"	"Api framework enabling rich data access by using the OData 3 protocol. Client libraries available for Javascript and C#."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Breeze | .NET .NET Server + EF or NHibernate Start with Nuget Download Toggle Dropdown Release Notes Hosting in ASP.NET Web API Routing The Web API Controller The ContextProvider Controlling Serialization Entity Framework Toggle Dropdown The server side model The DBContext The EFContextProvider Server-side validation NHibernate Toggle Dropdown NHibernate details Support for OData OData vs. WebApi .NET Server + EF or NHibernate .NET Server + EF or NHibernate Support Overview Introduction Client technologies JavaScript client C# client Server technologies .NET server + EF or NHibernate Node server + Sequelize Node server + MongoDB Java server + Hibernate Other Samples Blog Cool Breezes Breeze Labs Support Go! Need a hand with your app? ASP.NET Web API The ASP.NET Web API is a popular technology for providing data services over HTTP. This section describes how specific Web API service implementations influence Breeze client development. ##Support For technical questions, please go to StackOverflow with the tag “breeze”. StackOverflow is a fantastic site where thousands of developers help each other with their technical questions. We monitor the [breeze] tag on the StackOverflow website and do our best to answer your questions. The advantage of StackOverflow over the GitHub Wiki is the sheer number of qualified developers able to help you with your questions, the visibility of the question itself, and the whole StackOverflow infrastructure (reputation, up- or down-vote, comments, etc). For bug reports, please do use the GitHub Issues tab! Please post your feature suggestions to our User Voice site Learn about paid support. Learn about IdeaBlade’s professional services from training through application development. Have a non-technical question? Ask us at breeze@ideablade.com. ASP.NET Web API There are many ways to write your service with the ASP.NET Web API. We group them here in three categories: Breeze Web API Conventional Web API OData Web API Breeze Web API A “Breeze-flavored” Web API is the quickest, most productive path to an HTTP service that a Breeze client can talk to with minimal configuration. You’ll use .NET components written specifically to support Breeze clients and you’ll write one (or a few) controllers in a style that minimizes your server-side coding and maintenance without compromising power, flexibility, security or performance. The following topics cover various aspects of this Breeze-flavored approach Hosting in ASP.NET Web API Routing The Web API controller The ContextProvider Using the Entity Framework for data access Using NHibernate for data access Conventional Web API Conventional Web API development is a bit different. Instead of one controller governing a feature area, you write a controller for every exposed “root type”. Such controllers typically sport one or more GET methods and a PUT, POST/PATCH, and DELETE method for the create, update, and delete operations. This is sometimes referred to as a “REST API”. On top of this scheme you may choose from a variety of data serialization options. With this approach, you can tailor the API precisely to what you believe your client applications’ require. You don’t need any Breeze-oriented components on the server. You can ignore Breeze altogether. On the other hand, you’re API is entirely idiosyncratic and you’ll have to explain that API to all client developers (Breeze and non-Breeze client developers) so they know how to call your API, how to interpret response data, and how to compose a request body when a body is needed. Breeze clients work well with these APIs too. You have to do a bit more work to configure your Breeze client to communicate with such an API; there are a variety of client-side extension points for this purpose. The effort is small or large depending upon the complexity of your API and in this respect writing a Breeze client is no more challenging than writing a client without Breeze. You do have to learn how. Documentation for this path is not yet available but is on the way. OData Web API ASP.NET provides a special set of components and techniques for building an OData service in Web API. Such a service can be consumed by any client that understands the OData protocol … a set that includes Breeze clients. If you’re writing an OData Web API service, you have implementation choices with consequences for client application developers. To learn how these choices affect Breeze clients, start with the topic “OData on the Server”. © BreezeJS 2012-2016 Free & open source"	"null"	"null"	"Api framework enabling rich data access by using the OData 3 protocol. Client libraries available for Javascript and C#."	"true"
"API"	"Mobius: C# API for Spark"	"https://github.com/Microsoft/Mobius"	"Mobius adds C# language binding to Apache Spark, enabling the implementation of Spark driver code and data processing operations in C#."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"345"	"81"	"89"	"GitHub - Microsoft/Mobius: C# language binding and extensions to Apache Spark Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 81 Star 345 Fork 89 Microsoft/Mobius Code Issues 19 Pull requests 4 Wiki Pulse Graphs C# language binding and extensions to Apache Spark 921 commits 4 branches 7 releases 25 contributors C# 83.7% Scala 10.9% PowerShell 1.9% C++ 1.4% Batchfile 1.2% Shell 0.6% Other 0.3% C# Scala PowerShell C++ Batchfile Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags branch-1.4 branch-1.5 branch-1.6 master Nothing to show v1.6.101-PREVIEW-1 v1.6.100 v1.6.100-PREVIEW-2 v1.6.100-PREVIEW-1 v1.6.000-PREVIEW-2 v1.6.000-PREVIEW-1 v1.5.200 Nothing to show New pull request Latest commit 94420c1 Jul 15, 2016 hebinhuang committed on GitHub Merge pull request #502 from hebinhuang/RioSockBug … Fix bugs in RioSocketWrapper and SocketStream that cause vstest failed Permalink Failed to load latest commit information. build Merge pull request #492 from tawan0109/local_checkpoint Jul 12, 2016 cpp Add RIOSocketWrapper and SaeaSocketWrapper Jul 9, 2016 csharp Fix bugs in RioSocketWrapper and SocketStream that cause vstest failed Jul 14, 2016 dev/scripts updating Examples to reference latest release, updated helper scritpts Apr 25, 2016 docs doc updates and using Mobius name in scripts Apr 25, 2016 examples Add RIOSocketWrapper and SaeaSocketWrapper Jul 10, 2016 logo replacing old SparkCLR logo with new Mobius logo Apr 19, 2016 notes Add RIOSocketWrapper and SaeaSocketWrapper Jul 10, 2016 scala Merge pull request #492 from tawan0109/local_checkpoint Jul 12, 2016 scripts upgrading to Spark 1.6.2 Jul 1, 2016 .gitattributes Add standard .gitattributes file, to avoid line ending problems. Nov 5, 2015 .gitignore Add RIOSocketWrapper and SaeaSocketWrapper Jul 10, 2016 .travis.yml updating maven version Jul 5, 2016 LICENSE initial commit Oct 29, 2015 README.md updates to documentation for Mobius in Linux Jun 28, 2016 appveyor.yml updating build version to reflect Spark version Jul 5, 2016 README.md Mobius: C# API for Spark Mobius adds C# language binding to Apache Spark, enabling the implementation of Spark driver code and data processing operations in C#. For example, the word count sample in Apache Spark can be implemented in C# as follows : var lines = sparkContext.TextFile(@""hdfs://path/to/input.txt"");   var words = lines.FlatMap(s => s.Split(' ')); var wordCounts = words.Map(w => new KeyValuePair<string, int>(w.Trim(), 1))                         .ReduceByKey((x, y) => x + y);   var wordCountCollection = wordCounts.Collect();   wordCounts.SaveAsTextFile(@""hdfs://path/to/wordcount.txt"");  A simple DataFrame application using TempTable may look like the following: var reqDataFrame = sqlContext.TextFile(@""hdfs://path/to/requests.csv""); var metricDataFrame = sqlContext.TextFile(@""hdfs://path/to/metrics.csv""); reqDataFrame.RegisterTempTable(""requests""); metricDataFrame.RegisterTempTable(""metrics""); // C0 - guid in requests DataFrame, C3 - guid in metrics DataFrame   var joinDataFrame = GetSqlContext().Sql(       ""SELECT joinedtable.datacenter"" +          "", MAX(joinedtable.latency) maxlatency"" +          "", AVG(joinedtable.latency) avglatency "" +      ""FROM ("" +        ""SELECT a.C1 as datacenter, b.C6 as latency "" +          ""FROM requests a JOIN metrics b ON a.C0  = b.C3) joinedtable "" +        ""GROUP BY datacenter""); joinDataFrame.ShowSchema(); joinDataFrame.Show(); A simple DataFrame application using DataFrame DSL may look like the following: // C0 - guid, C1 - datacenter var reqDataFrame = sqlContext.TextFile(@""hdfs://path/to/requests.csv"")                                .Select(""C0"", ""C1"");     // C3 - guid, C6 - latency    var metricDataFrame = sqlContext.TextFile(@""hdfs://path/to/metrics.csv"", "","", false, true)                                 .Select(""C3"", ""C6""); //override delimiter, hasHeader & inferSchema var joinDataFrame = reqDataFrame.Join(metricDataFrame, reqDataFrame[""C0""] == metricDataFrame[""C3""])                                 .GroupBy(""C1""); var maxLatencyByDcDataFrame = joinDataFrame.Agg(new Dictionary<string, string> { { ""C6"", ""max"" } }); maxLatencyByDcDataFrame.ShowSchema(); maxLatencyByDcDataFrame.Show(); A simple Spark Streaming application that processes messages from Kafka using C# may be implemented using the following code: StreamingContext sparkStreamingContext = StreamingContext.GetOrCreate(checkpointPath, () =>     {       var ssc = new StreamingContext(sparkContext, slideDurationInMillis);       ssc.Checkpoint(checkpointPath);       var stream = KafkaUtils.CreateDirectStream(ssc, topicList, kafkaParams, perTopicPartitionKafkaOffsets);       //message format: [timestamp],[loglevel],[logmessage]       var countByLogLevelAndTime = stream                                     .Map(kvp => Encoding.UTF8.GetString(kvp.Value))                                     .Filter(line => line.Contains("",""))                                     .Map(line => line.Split(','))                                     .Map(columns => new KeyValuePair<string, int>(                                                           string.Format(""{0},{1}"", columns[0], columns[1]), 1))                                     .ReduceByKeyAndWindow((x, y) => x + y, (x, y) => x - y,                                                           windowDurationInSecs, slideDurationInSecs, 3)                                     .Map(logLevelCountPair => string.Format(""{0},{1}"",                                                           logLevelCountPair.Key, logLevelCountPair.Value));       countByLogLevelAndTime.ForeachRDD(countByLogLevel =>       {           foreach (var logCount in countByLogLevel.Collect())               Console.WriteLine(logCount);       });       return ssc;     }); sparkStreamingContext.Start(); sparkStreamingContext.AwaitTermination(); Refer to Mobius\csharp\Samples directory and sample usage for complete samples. API Documentation Refer to Mobius C# API documentation for the list of Spark's data processing operations supported in Mobius. API Usage Mobius API usage samples are available at: Examples folder which contains standalone C# projects that can be used as templates to start developing Mobius applications Samples project which uses a comprehensive set of Mobius APIs to implement samples that are also used for functional validation of APIs Mobius performance test scenarios implemented in C# and Scala for side by side comparison of Spark driver code Documents Refer to the docs folder for design overview and other info on Mobius Build Status Ubuntu 14.04.3 LTS Windows Unit test coverage Getting Started Windows Linux Build & run unit tests Build in Windows Build in Linux Run samples (functional tests) in local mode Samples in Windows Samples in Linux Run examples in local mode Examples in Windows Examples in Linux Run Mobius app Standalone cluster YARN cluster Linux cluster Azure HDInsight Spark Cluster AWS EMR Spark Cluster Useful Links Configuration parameters in Mobius Troubleshoot errors in Mobius Debug Mobius apps Supported Spark Versions Mobius is built and tested with Apache Spark 1.4.1, 1.5.2 and 1.6.*. Releases Mobius releases are available at https://github.com/Microsoft/Mobius/releases. References needed to build C# Spark driver applicaiton using Mobius are also available in NuGet Refer to mobius-release-info.md for the details on versioning policy and the contents of the release. License Mobius is licensed under the MIT license. See LICENSE file for full license information. Community Mobius project welcomes contributions. To contribute, follow the instructions in CONTRIBUTING.md Options to ask your question to the Mobius community create issue on GitHub create post with ""sparkclr"" tag in Stack Overflow join chat at Mobius room in Gitter tweet @MobiusForSpark Code of Conduct This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Microsoft/Mobius"	"Mobius adds C# language binding to Apache Spark, enabling the implementation of Spark driver code and data processing operations in C#."	"true"
"API"	"ServiceStack"	"https://github.com/ServiceStack/ServiceStack"	"Thoughtfully architected, obscenely fast, thoroughly enjoyable web services for all"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3449"	"517"	"1283"	"GitHub - ServiceStack/ServiceStack: Thoughtfully architected, obscenely fast, thoroughly enjoyable web services for all Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 517 Star 3,449 Fork 1,283 ServiceStack/ServiceStack Code Pull requests 1 Wiki Pulse Graphs Thoughtfully architected, obscenely fast, thoroughly enjoyable web services for all https://servicestack.net 7,319 commits 5 branches 29 releases Fetching contributors C# 91.7% JavaScript 5.6% HTML 1.4% CSS 0.6% ASP 0.2% Pascal 0.2% Other 0.3% C# JavaScript HTML CSS ASP Pascal Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master netcore v3 v4-sync vs2012 Nothing to show v4.0.60 v4.0.58 v4.0.56 v4.0.54 v4.0.52 v4.0.50 v4.0.48 v4.0.46 v4.0.44 v4.0.42 v4.0.40 v4.0.38 v4.0.36 v4.0.35 v4.0.34 v4.0.33 v4.0.32 v4.0.31 v4.0.30 v4.0.24 v4.0.23 v4.0.22 v4.0.21 v4.0.20 v4.0.19 v4.0.18 v4.0.17 v4.0.10-sync v3-snapshot Nothing to show New pull request Latest commit 89b3905 Jul 15, 2016 mythz Upgrade to latest System.Web.Razor Permalink Failed to load latest commit information. NuGet.Signed Update year to 2016 Feb 18, 2016 NuGet Upgrade logging deps Jun 5, 2016 build Add EncryptedServiceClient to iOS/Android/NET45 PCL projects Jun 28, 2016 docs Update v4.0.60.md Jul 12, 2016 lib Upgrade to latest System.Web.Razor Jul 15, 2016 src Add Context stub to help with VS.NET intelli-sense Jul 15, 2016 tests Implemented named registration for various IoC container overloads (#… Jul 15, 2016 .gitattributes - added eol=crlf for main files Oct 3, 2012 .gitignore Add new CsvRequestLogger Apr 4, 2016 CONTRIBUTING.md Update Contributing.md Oct 13, 2013 CONTRIBUTORS.md Removed duplicate CONTRIBUTORS.md entry Apr 17, 2014 README.md Fix link May 5, 2016 acknowledgments.md Add Acknolwedgements for different components used in ServiceStack Jun 22, 2011 build.cmd Create NuGet package for Razor Build Task Apr 17, 2014 license.txt Updated spelling (#1046) Jul 14, 2016 release-notes.md Added v4.0.36 Release Notes and restructured docs so they're organize… Jan 15, 2015 README.md Join the ServiceStack Google+ Community or follow @ServiceStack for updates. View the Release Notes for latest features or see servicestack.net/features for an overview. Simple, Fast, Versatile and full-featured Services Framework ServiceStack is a simple, fast, versatile and highly-productive full-featured Web and Web Services Framework that's thoughtfully-architected to reduce artificial complexity and promote remote services best-practices with a message-based design that allows for maximum re-use that can leverage an integrated Service Gateway for the creation of loosely-coupled Modularized Service Architectures. ServiceStack Services are consumable via an array of built-in fast data formats (inc. JSON, XML, CSV, JSV, ProtoBuf and MsgPack) as well as XSD/WSDL for SOAP endpoints and Rabbit MQ, Redis MQ and Amazon SQS MQ hosts. Its design and simplicity focus offers an unparalleled suite of productivity features that can be declaratively enabled without code, from creating fully queryable Web API's with just a single Typed Request DTO with Auto Query supporting every major RDBMS to the built-in support for Auto Batched Requests or effortlessly enabling rich HTTP Caching and Encrypted Messaging for all your existing services via Plugins. Your same Services also serve as the Controller in ServiceStack's Smart Razor Views reducing the effort to serve both Web and Single Page Apps as well as Rich Desktop and Mobile Clients that are able to deliver instant interactive experiences using ServiceStack's real-time Server Events. ServiceStack Services also maximize productivity for consumers providing an instant end-to-end typed API without code-gen enabling the most productive development experience for developing .NET to .NET Web Services. Generate Instant Typed APIs from within all Major IDEs! ServiceStack now integrates with all Major IDE's used for creating the best native experiences on the most popular platforms to enable a highly productive dev workflow for consuming Web Services, making ServiceStack the ideal back-end choice for powering rich, native iPhone and iPad Apps on iOS with Swift, Mobile and Tablet Apps on the Android platform with Java, OSX Desktop Appications as well as targetting the most popular .NET PCL platforms including Xamarin.iOS, Xamarin.Android, Windows Store, WPF, WinForms and Silverlight: VS.NET integration with ServiceStackVS Providing instant Native Typed API's for C#, F#, VB.NET and TypeScript directly in Visual Studio for the most popular .NET platforms including iOS and Android using Xamarin.iOS and Xamarin.Android on Windows. Xamarin Studio integration with ServiceStackXS Providing C# Native Types support for developing iOS and Android mobile Apps using Xamarin.iOS and Xamarin.Android with Xamarin Studio on OSX. The ServiceStackXS plugin also provides a rich web service development experience developing Client applications with Mono Develop on Linux Xcode integration with ServiceStackXC Plugin Providing an instant Native Typed API in Swift including generic Service Clients enabling a highly-productive workflow and effortless consumption of Web Services from native iOS and OSX Applications - directly from within Xcode! Android Studio integration with ServiceStackIDEA Providing an instant Native Typed API in Java and Kotlin including idiomatic Java Generic Service Clients supporting Sync and Async Requests by levaraging Android's AsyncTasks to enable the creation of services-rich and responsive native Java or Kotlin Mobile Apps on the Android platform - directly from within Android Studio! IntelliJ integration with ServiceStackIDEA The ServiceStack IDEA plugin is installable directly from IntelliJ's Plugin repository and enables seamless integration with IntelliJ Java Maven projects for genearting a Typed API to quickly and effortlessly consume remote ServiceStack Web Services from pure cross-platform Java or Kotlin Clients. Eclipse integration with ServiceStackEclipse The unmatched productivity offered by Java Add ServiceStack Reference is also available in the ServiceStackEclipse IDE Plugin that's installable from the Eclipse MarketPlace to provide deep integration of Add ServiceStack Reference with Eclipse Java Maven Projects enabling Java Developers to effortlessly Add and Update the references of their evolving remote ServiceStack Web Services. ssutil.exe - Command line ServiceStack Reference tool In addition to our growing list of supported IDE's, the ssutil.exe cross-platform command-line .NET .exe makes it easy for build servers, automated tasks and command-line runners of your favorite text editors to easily Add and Update ServiceStack References! Simple Customer Database REST Services Example This example is also available as a stand-alone integration test: //Web Service Host Configuration public class AppHost : AppSelfHostBase {     public AppHost()          : base(""Customer REST Example"", typeof(CustomerService).Assembly) {}      public override void Configure(Container container)     {         //Register which RDBMS provider to use         container.Register<IDbConnectionFactory>(c =>              new OrmLiteConnectionFactory("":memory:"", SqliteDialect.Provider));          using (var db = container.Resolve<IDbConnectionFactory>().Open())         {             //Create the Customer POCO table if it doesn't already exist             db.CreateTableIfNotExists<Customer>();         }     } }  //Web Service DTO's [Route(""/customers"", ""GET"")] public class GetCustomers : IReturn<GetCustomersResponse> {}  public class GetCustomersResponse {     public List<Customer> Results { get; set; }  }  [Route(""/customers/{Id}"", ""GET"")] public class GetCustomer : IReturn<Customer> {     public int Id { get; set; } }  [Route(""/customers"", ""POST"")] public class CreateCustomer : IReturn<Customer> {     public string Name { get; set; } }  [Route(""/customers/{Id}"", ""PUT"")] public class UpdateCustomer : IReturn<Customer> {     public int Id { get; set; }      public string Name { get; set; } }  [Route(""/customers/{Id}"", ""DELETE"")] public class DeleteCustomer : IReturnVoid {     public int Id { get; set; } }  // POCO DB Model public class Customer {     [AutoIncrement]     public int Id { get; set; }      public string Name { get; set; } }  //Web Services Implementation public class CustomerService : Service {     public object Get(GetCustomers request)     {         return new GetCustomersResponse { Results = Db.Select<Customer>() };     }      public object Get(GetCustomer request)     {         return Db.SingleById<Customer>(request.Id);     }      public object Post(CreateCustomer request)     {         var customer = new Customer { Name = request.Name };         Db.Save(customer);         return customer;     }      public object Put(UpdateCustomer request)     {         var customer = Db.SingleById<Customer>(request.Id);         if (customer == null)             throw HttpError.NotFound(""Customer '{0}' does not exist"".Fmt(request.Id));          customer.Name = request.Name;         Db.Update(customer);          return customer;     }      public void Delete(DeleteCustomer request)     {         Db.DeleteById<Customer>(request.Id);     } }  Calling the above REST Service from any C#/.NET Client No code-gen required, can re-use above Server DTOs: var client = new JsonServiceClient(BaseUri);  //GET /customers var all = client.Get(new GetCustomers());                         // Count = 0  //POST /customers var customer = client.Post(new CreateCustomer { Name = ""Foo"" });  //GET /customer/1 customer = client.Get(new GetCustomer { Id = customer.Id });      // Name = Foo  //GET /customers all = client.Get(new GetCustomers());                             // Count = 1  //PUT /customers/1 customer = client.Put(     new UpdateCustomer { Id = customer.Id, Name = ""Bar"" });       // Name = Bar  //DELETE /customers/1 client.Delete(new DeleteCustomer { Id = customer.Id });  //GET /customers all = client.Get(new GetCustomers());                             // Count = 0 Same code also works with PCL Clients in Xamarin iOS/Android, Windows Store Apps F# and VB.NET can re-use same .NET Service Clients and DTO's Calling from Swift var client = JsonServiceClient(baseUrl: BaseUri)  let response = client.get(GetCustomers()) Calling from Java JsonServiceClient client = new JsonServiceClient(BaseUri);  GetCustomersResponse all = client.get(new GetCustomers()); Calling from Kotlin val client = JsonServiceClient(BaseUri)  val response = client.get(GetCustomers()) Calling from jQuery using TypeScript $.getJSON($.ss.createUrl(""/customers"", request), request,      function (r: dtos.GetCustomersResponse) {         alert(r.Results.length == 1);     }); Calling from jQuery $.getJSON(baseUri + ""/customers"", function(r) {     alert(r.Results.length == 1); }); Calling the from Dart JsonClient var client = new JsonClient(baseUri); client.customers()     .then((r) => alert(r.Results.length == 1)); That's all the application code required to create and consume a simple database-enabled REST Web Service! Getting Started Start with the Getting Started section on the Wiki Example Apps and Demos Community resources Release Notes Download If you have NuGet installed, the easiest way to get started is to: Install ServiceStack via NuGet. Latest v4+ on NuGet is a commercial release with free quotas. Docs and Downloads for older v3 BSD releases Live Demos The Definitive list of Example Projects, Use-Cases, Demos, Starter Templates Copying Since September 2013, ServiceStack source code is available under GNU Affero General Public License/FOSS License Exception, see license.txt in the source. Alternative commercial licensing is also available, see https://servicestack.net/pricing for details. Contributing Contributors need to approve the Contributor License Agreement before any code will be reviewed, see the Contributing wiki for more details. All contributions must include tests verifying the desired behavior. OSS Libraries used ServiceStack includes source code of the great libraries below for some of its core functionality. Each library is released under its respective licence: Mono (License) Funq IOC (License) Fluent Validation (License) Mini Profiler (License) Dapper (License) TweetStation's OAuth library (License) MarkdownSharp (License) MarkdownDeep (License) HtmlCompressor (License) JSMin (License) RecyclableMemoryStream (License) Similar open source projects Similar Open source .NET projects for developing or accessing web services include: Nancy Fx - A Sinatra-inspired lightweight Web Framework for .NET: Fubu MVC - A ""Front Controller"" pattern-style MVC framework designed for use in web applications built on ASP.NET: Rest Sharp - An open source REST client for .NET Find out More Follow @ServiceStack and +ServiceStack for project updates. Core Team mythz (Demis Bellot) layoric (Darren Reid) / @layoric arxisos (Steffen Müller) / @arxisos desunit (Sergey Bogdanov) / @desunit Contributors A big thanks to GitHub and all of ServiceStack's contributors: bman654 (Brandon Wallace) iristyle (Ethan Brown) superlogical (Jake Scott) itamar82 chadwackerman derfsplat johnacarruthers (John Carruthers) mvitorino (Miguel Vitorino) bsiegel (Brandon Siegel) mdavid (M. David Peterson) lhaussknecht (Louis Haussknecht) grendello (Marek Habersack) SteveDunn (Steve Dunn) kcherenkov (Konstantin Cherenkov) timryan (Tim Ryan) letssellsomebananas (Tymek Majewski) danbarua (Dan Barua) JonCanning (Jon Canning) paegun (James Gorlick) pvasek (pvasek) derfsplat (derfsplat) justinrolston (Justin Rolston) danmiser (Dan Miser) danatkinson (Dan Atkinson) brainless83 (Thomas Grassauer) angelcolmenares (angel colmenares) dbeattie71 (Derek Beattie) danielwertheim (Daniel Wertheim) greghroberts (Gregh Roberts) int03 (Selim Selçuk) andidog (AndiDog) chuckb (chuckb) niemyjski (Blake Niemyjski) mj1856 (Matt Johnson) matthieugd (Matthieu) tomaszkubacki (Tomasz Kubacki) e11137 (Rogelio Canedo) davidroth (David Roth) meebey (Mirco Bauer) codedemonuk (Pervez Choudhury) jrosskopf (Joachim Rosskopf) friism (Michael Friis) mp3125 aurimas86 parnham (Dan Parnham) yeurch (Richard Fawcett) damianh (Damian Hickey) freeman (Michel Rasschaert) kvervo (Kvervo) pauldbau (Paul Du Bois) justinpihony (Justin Pihony) bokmadsen (Bo Kingo Damgaard) dragan (Dale Ragan) sneal (Shawn Neal) johnsheehan (John Sheehan) jschlicht (Jared Schlicht) kumarnitin (Nitin Kumar) davidchristiansen (David Christiansen) paulecoyote (Paul Evans) kongo2002 (Gregor Uhlenheuer) brannonking (Brannon King) alexandrerocco (Alexandre Rocco) cbarbara assaframan (Assaf Raman) csakshaug (Christian Sakshaug) johnman jarroda ssboisen (Simon Skov Boisen) paulduran (Paul Duran) pruiz (Pablo Ruiz García) fantasticjamieburns pseabury kevingessner (Kevin Gessner) iskomorokh (Igor Skomorokh) royjacobs (Roy Jacobs) robertmircea (Robert Mircea) markswiatek (Mark Swiatek) flq (Frank Quednau) ashd (Ash D) thanhhh algra (Alexey Gravanov) jimschubert (Jim Schubert) gkathire mikaelwaltersson (Mikael Waltersson) asunar (Alper) chucksavage (Chuck Savage) sashagit (Sasha) froyke (Froyke) dbhobbs (Daniel Hobbs) bculberson (Brad Culberson) awr (Andrew) pingvinen (Patrick) citndev (Sebastien Curutchet) cyberprune jorbor (Jordan Hayashi) bojanv55 i-e-b (Iain Ballard) pietervp (Pieter Van Parys) franklinwise ckasabula (Chuck Kasabula) dortzur (Dor Tzur) allenarthurgay (Allen Gay) viceberg vansha (Ivan Korneliuk) aaronlerch (Aaron Lerch) glikoz danielcrenna (Daniel Crenna) stevegraygh (Steve Graygh) jrmitch120 (Jeff Mitchell) manuelnelson (Manuel Nelson) babcca (Petr Babicka) jgeurts (Jim Geurts) driis (Dennis Riis) gshackles (Greg Shackles) jsonmez (John Sonmez) dchurchland (David Churchland) softwx (Steve Hatchett) ggeurts (Gerke Geurts) andrewrissing (Andrew Rissing) jjavery (James Javery) suremaker (Wojtek) cheesebaron (Tomasz Cielecki) mikkelfish (Mikkel Fishman) johngibb (John Gibb) stabbylambda (David Stone) mikepugh (Mike Pugh) permalmberg (Per Malmberg) adamralph (Adam Ralph) shamsulamry (Shamsul Amry) peterlazzarino (Peter Lazzarino) kevin-montrose (Kevin Montrose) msarchet (Michael Sarchet) jeffgabhart (Jeff Gabhart) pkudinov (Pavel Kudinov) permalmberg (Per Malmberg) namman (Nick Miller) leon-andria (Leon Andria) kkolstad (Kenneth Kolstad) electricshaman (Jeff Smith) ecgan (Gan Eng Chin) its-tyson (Tyson Stolarski) tischlda (David Tischler) connectassist (Carl Healy) starteleport jfoshee (Jacob Foshee) nardin (Mamaev Michail) cliffstill somya (Somya Jain) thinkbeforecoding (Jérémie Chassaing) paksys (Khalil Ahmad) mcguinness (Karl McGuinness) jpasichnyk (Jesse Pasichnyk) waynebrantley (Wayne Brantley) dcartoon (Dan Cartoon) alexvodovoz (Alex Vodovoz) jluchiji (Denis Luchkin-Zhou) grexican akoslukacs (Ákos Lukács) medianick (Nick Jones) arhoads76 dylanvdmerwe (Dylan v.d Merwe) mattiasw2 (Mattias) paultyng (Paul Tyng) h2oman (Jason Waterman) anewton (Allen Newton) sami1971 russellchadwick (Russell Chadwick) cyberzed (Stefan Daugaard Poulsen) filipw (Filip Wojcieszyn) ghuntley (Geoffrey Huntley) baramuse pdegenhardt (Phil Degenhardt) captncraig (Craig Peterson) abattery (Jae sung Chung) biliktamas79 garuma (Jérémie Laval) dsimunic adamfowleruk (Adam Fowler) bfriesen (Brian Friesen) roryf (Rory Fitzpatrick) stefandevo gdassac metal10k cmelgarejo skaman rossipedia (Bryan J. Ross) wimatihomer (Wim Pool) sword-breaker adebisi-fa (Adebisi Foluso A.) mbischoff (M. Bischoff) ivanfioravanti (Ivan Fioravanti) inhibition (Keith Hassen) joshearl (Josh Earl) friism (Michael Friis) corkupine bchavez (Brian Chavez) nhhagen (Niels Henrik Hagen) daggmano (Darren Oster) chappoo (Steve Chapman) julrichkieffer (Julrich Kieffer) adamclarsen (Adam Larsen) joero74 (Joerg Rosenkranz) ddotlic (Drazen Dotlic) chrismcv (Chris McVittie) marcioalthmann (Márcio Fábio Althmann) mmertsock (Mike Mertsock) johnkamau (John Kamau) uhaciogullari (Ufuk Hacıoğulları) davybrion (Davy Brion) aleshi (Alexander Shiryaev) alexandryz (Alexandr Zaozerskiy) mistobaan (Fabrizio Milo) niemyjski (Blake Niemyjski) alexandernyquist (Alexander Nyquist) mcduck76 kojoru jeremy-bridges (Jeremy Bridges) andreabalducci (Andrea Balducci) robertthegrey (Robert Greyling) robertbeal (Robert Beal) improvedk (Mark Rasmussen) foresterh (Jamie Houston) peterkahl (Peter Kahl) helgel anthonycarl (Anthony Carl) mrjul (Julien Lebosquain) pwhe23 (Paul Wheeler) aleksd miketrebilcock (Mike Trebilcock) markwoodhall (Mark Woodhall) theonlylawislove (Paul Knopf) callumvass (Callum Vass) bpruitt-goddard gregpakes (Greg Pakes) caspiancanuck (Caspian Canuck) merwer pavelsavara (Pavel Savara) markwalls (Mark Walls) prasannavl (Prasanna Loganathar) wilfrem emiba lucky-ly (Dmitry Svechnikov) hhandoko (Herdy Handoko) datawingsoftware tal952 bretternst kevinhoward (Kevin Howard) mattbutton (Matt Button) torbenrahbekkoch (Torben Rahbek Koch) pilotmartin (Pilot Martin) catlion tstade (Toft Stade) niltz (Jeff Sawatzky) nhalm fhurta (Filip Hurta) discobanan x-cray jeremistadler (Jeremi Stadler) bangbite felipesabino (Felipe Sabino) xelom (Arıl Bozoluk) shiweichuan (Weichuan Shi) kojoru (Konstantin Yakushev) eddiegroves (Eddie Groves) fetters5 rcollette (Richard Collette) urihendler (Uri Hendler) laurencee (Laurence Evans) m-andrew-albright (Andrew Albright) lee337 (Lee Venkatsamy) kaza mishfit rfvgyhn (Chris) caioproiete (Caio Proiete) sjuxax (Jeff Cook) madaleno (Luis Madaleno) yavosh (Yavor Shahpasov) fvoncina (Facundo Voncina) devrios (Dev Rios) bfkelsey (Ben Kelsey) maksimenko dixon (Jarrod Dixon) kal (Kal Ahmed) mhanney (Michael Hanney) bcms mgravell (Marc Gravell) lafama (Denis Ndwiga) jamesgroat (James Groat) jamesearl (James Cunningham) remkoboschker (Remko Boschker) shelakel schmidt4brains (Doug Schmidt) joplaal aifdsc (Stephan Desmoulin) nicklarsen (NickLarsen) connectassist (Carl Healy) et1975 (Eugene Tolmachev) barambani nhalm Runs on both Mono and .NET (Live preview hosted on Mono / Ubuntu) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ServiceStack/ServiceStack"	"Thoughtfully architected, obscenely fast, thoroughly enjoyable web services for all"	"true"
"API"	"Nelibur"	"https://github.com/Nelibur/Nelibur"	"Nelibur is message based web service framework on the pure WCF. Nelibur simplifies creating high-performance and message based web services and you certainly have all the power of the WCF."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"55"	"10"	"16"	"GitHub - Nelibur/Nelibur: Message based webservice framework on the pure WCF Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 55 Fork 16 Nelibur/Nelibur Code Issues 1 Pull requests 0 Wiki Pulse Graphs Message based webservice framework on the pure WCF http://nelibur.org/ 280 commits 1 branch 11 releases 4 contributors C# 82.4% CSS 5.2% Cucumber 4.4% HTML 4.2% JavaScript 2.5% PowerShell 1.2% Other 0.1% C# CSS Cucumber HTML JavaScript PowerShell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v3.1.8 v3.1.6 v3.1.2 v3.1.0 v3.0.3-beta7 v3.0.3-beta6 v3.0.3-beta5 v3.0.3-beta2 v3.0.3-beta1 v3.0.2 v3.0.1-beta2 Nothing to show New pull request Latest commit f1cde65 Jun 27, 2016 GSerjo removed google group Permalink Failed to load latest commit information. .nuget + Tools portable msbuild.community.tasks Based on KickStart tricks fr… Nov 8, 2014 Clients/JavaScript + JsonServiceClient.js initial version Sep 20, 2014 Samples + ThreadPoolSample Apr 21, 2015 Site Merge branch 'master' of https://github.com/Nelibur/Nelibur Jul 23, 2014 Source * option class -> struct Mar 26, 2016 Tools - All useless gitignore Nov 22, 2014 packages - All useless gitignore Nov 22, 2014 .gitignore * Ignore fixed Dec 17, 2014 CONTRIBUTING.markdown + CONTRIBUTING.markdown May 14, 2014 FactTest.msbuild + Root.msbuild Jan 3, 2014 GlobalAssemblyInfo.cs * All added nuget package for .net 4.0 Mar 1, 2015 LICENSE * Nelibur/nelibur.nuspec Jan 29, 2014 NuGet.msbuild * All added nuget package for .net 4.0 Feb 28, 2015 README.md removed google group Jun 27, 2016 ReleaseNotes.markdown * ReleaseNotes.markdown version 3.0.2 May 25, 2014 Root.msbuild * All added nuget package for .net 4.0 Feb 28, 2015 Solution.sln * option class -> struct Mar 27, 2016 Solution.sln.DotSettings * option class -> struct Mar 27, 2016 Solution.sln.GhostDoc.xml * ExtendedThreadPool -> TinyThreadPool Apr 21, 2015 SpecFlowTest.msbuild + SpecFlowTest.msbuild Feb 15, 2014 nuspec.xsd Awsome nuget packaging based on ServiceStack packaging tricks Nov 7, 2014 restore.cmd + restore.cmd restores packages: both for project and tools Nov 8, 2014 README.md Nelibur - Message based web service framework on the pure WCF Nelibur is message based web service framework on the pure WCF. Nelibur simplifies creating high-performance and message based web services and you certainly have all the power of the WCF What to read Advantages of message based web services Getting Started with RESTful WCF Powered by Nelibur Building RESTful Message Based Web Services with WCF Building SOAP Message Based Web Services with WCF How to create REST message based Servcie on the pure WCF How to use REST message based Client How to create SOAP message based Servcie on the pure WCF How to use SOAP message based Client Simple RESTful Message based Client var client = new JsonServiceClient(""http://localhost:8080/webhost"");  var createRequest = new CreateClientRequest     {         Email = ""email@email.com""     }; ClientResponse response = client.Post<ClientResponse>(createRequest);  var updateRequest = new UpdateClientRequest     {         Email = ""new@email.com"",         Id = response.Id     }; response = client.Put<ClientResponse>(updateRequest);  var getClientRequest = new GetClientRequest     {         Id = response.Id     }; response = client.Get<ClientResponse>(getClientRequest);  var deleteRequest = new DeleteClientRequest     {         Id = response.Id     }; client.Delete(deleteRequest); Simple RESTful Message based service on the pure WCF var service = new WebServiceHost(typeof(JsonServicePerCall)); service.Open(); JsonServicePerCall - is predefined service which implements following interface IJsonService The IJsonService is flexible, stable and maintainable, we can transfer any data, because the service contract depends only from WCF's Message class. ""The Message class is fundamental to Windows Communication Foundation (WCF). All communication between clients and services ultimately results in Message instances being sent and received."" (MSDN) [ServiceContract] public interface IJsonService {     [OperationContract]     [WebInvoke(Method = OperationType.Delete,         UriTemplate = RestServiceMetadata.Path.Delete,         RequestFormat = WebMessageFormat.Json, ResponseFormat = WebMessageFormat.Json)]     Message Delete(Message message);      [OperationContract]     [WebInvoke(Method = OperationType.Delete,         UriTemplate = RestServiceMetadata.Path.DeleteOneWay,         RequestFormat = WebMessageFormat.Json, ResponseFormat = WebMessageFormat.Json)]     void DeleteOneWay(Message message);      [OperationContract]     [WebGet(UriTemplate = RestServiceMetadata.Path.Get,         RequestFormat = WebMessageFormat.Json, ResponseFormat = WebMessageFormat.Json)]     Message Get(Message message);      [OperationContract]     [WebGet(UriTemplate = RestServiceMetadata.Path.GetOneWay,         RequestFormat = WebMessageFormat.Json, ResponseFormat = WebMessageFormat.Json)]     void GetOneWay(Message message);      [OperationContract]     [WebInvoke(Method = OperationType.Post,         UriTemplate = RestServiceMetadata.Path.Post,         RequestFormat = WebMessageFormat.Json, ResponseFormat = WebMessageFormat.Json)]     Message Post(Message message);      [OperationContract]     [WebInvoke(Method = OperationType.Post,         UriTemplate = RestServiceMetadata.Path.PostOneWay,         RequestFormat = WebMessageFormat.Json, ResponseFormat = WebMessageFormat.Json)]     void PostOneWay(Message message);      [OperationContract]     [WebInvoke(Method = OperationType.Put,         UriTemplate = RestServiceMetadata.Path.Put,         RequestFormat = WebMessageFormat.Json, ResponseFormat = WebMessageFormat.Json)]     Message Put(Message message);      [OperationContract]     [WebInvoke(Method = OperationType.Put,         UriTemplate = RestServiceMetadata.Path.PutOneWay,         RequestFormat = WebMessageFormat.Json, ResponseFormat = WebMessageFormat.Json)]     void PutOneWay(Message message); } Performance of CRUD operations - JsonServiceClient Method Duration Remarks Get 3767 ms 10 000 messages. Default WebServiceHost settings. JsonServiceClient sends messages in one thread. Win x64. Intel Core i7-2600 3.4 GHz. Post with void return 4546 ms Post 5323 ms Put with void return 4521 ms Put 5334 ms Delete with void return 3243 ms Delete 3807 ms WCF's RESTful service Nelibur already contains JsonServicePerCall service, but you can create your own custom Service, for instance [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)] public sealed class SampleWebService : IJsonService {     public void DeleteOneWay(Message message)     {         NeliburRestService.ProcessOneWay(message);     }      public Message Delete(Message message)     {         return NeliburRestService.Process(message);     }      public void GetOneWay(Message message)     {         NeliburRestService.ProcessOneWay(message);     }      public Message Get(Message message)     {         return NeliburRestService.Process(message);     }      public void PostOneWay(Message message)     {         NeliburRestService.ProcessOneWay(message);     }      public Message Post(Message message)     {         return NeliburRestService.Process(message);     }      public void PutOneWay(Message message)     {         NeliburRestService.ProcessOneWay(message);     }      public Message Put(Message message)     {         return NeliburRestService.Process(message);     } } Request binding on appropriate Processor NeliburRestService.Configure(x => {     x.Bind<CreateClientRequest, ClientProcessor>();     x.Bind<UpdateClientRequest, ClientProcessor>();     x.Bind<DeleteClientRequest, ClientProcessor>();     x.Bind<GetClientRequest, ClientProcessor>(); }); ClientProcessor example public sealed class ClientProcessor : IPost<CreateClientRequest>,                                      IGet<GetClientRequest>,                                      IDeleteOneWay<DeleteClientRequest>,                                      IPut<UpdateClientRequest> {     private static List<Client> _clients = new List<Client>();      public void DeleteOneWay(DeleteClientRequest request)     {         _clients = _clients.Where(x => x.Id != request.Id).ToList();     }      public object Get(GetClientRequest request)     {         Client client = _clients.Single(x => x.Id == request.Id);         return new ClientResponse { Id = client.Id, Email = client.Email };     }      public object Post(CreateClientRequest request)     {         var client = new Client         {             Id = Guid.NewGuid(),             Email = request.Email         };         _clients.Add(client);         return new ClientResponse { Id = client.Id, Email = client.Email };     }      public object Put(UpdateClientRequest request)     {         Client client = _clients.Single(x => x.Id == request.Id);         client.Email = request.Email;         return new ClientResponse { Id = client.Id, Email = client.Email };     } } Simple SOAP Message based Client var client = new SoapServiceClient(""NeliburSoapService"");  var createRequest = new CreateClientRequest     {         Email = ""email@email.com""     }; ClientResponse response = client.Post<ClientResponse>(createRequest);  var updateRequest = new UpdateClientRequest     {         Email = ""new@email.com"",         Id = response.Id     }; response = client.Put<ClientResponse>(updateRequest);  var getClientRequest = new GetClientRequest     {         Id = response.Id     }; response = client.Get<ClientResponse>(getClientRequest);  var deleteRequest = new DeleteClientRequest     {         Id = response.Id     }; client.Delete(deleteRequest); Simple SOAP Message based service on the pure WCF WCF's ServiceContract [ServiceContract] public interface ISoapService {      [OperationContract(Action = SoapServiceMetadata.Action.Process,         ReplyAction = SoapServiceMetadata.Action.ProcessResponse)]     Message Process(Message message);      [OperationContract(Action = SoapServiceMetadata.Action.ProcessOneWay)]     void ProcessOneWay(Message message); } WCF's SOAP service [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)] public sealed class SampleSoapService : ISoapService {     public Message Process(Message message)     {         return NeliburSoapService.Process(message);     }      public void ProcessOneWay(Message message)     {         NeliburSoapService.ProcessOneWay(message);     } } Request binding on appropriate Processor NeliburSoapService.Configure(x => {     x.Bind<CreateClientRequest, ClientProcessor>();     x.Bind<UpdateClientRequest, ClientProcessor>();     x.Bind<DeleteClientRequest, ClientProcessor>();     x.Bind<GetClientRequest, ClientProcessor>(); }); ClientProcessor is the same as for RESTful public sealed class ClientProcessor : IPost<CreateClientRequest>,                                      IGet<GetClientRequest>,                                      IDeleteOneWay<DeleteClientRequest>,                                      IPut<UpdateClientRequest> {     private static List<Client> _clients = new List<Client>();      public void DeleteOneWay(DeleteClientRequest request)     {         _clients = _clients.Where(x => x.Id != request.Id).ToList();     }      public object Get(GetClientRequest request)     {         Client client = _clients.Single(x => x.Id == request.Id);         return new ClientResponse { Id = client.Id, Email = client.Email };     }      public object Post(CreateClientRequest request)     {         var client = new Client         {             Id = Guid.NewGuid(),             Email = request.Email         };         _clients.Add(client);         return new ClientResponse { Id = client.Id, Email = client.Email };     }      public object Put(UpdateClientRequest request)     {         Client client = _clients.Single(x => x.Id == request.Id);         client.Email = request.Email;         return new ClientResponse { Id = client.Id, Email = client.Email };     } } Contributing To contribute please follow these guidelines: Fork the project Spaces, not Tabs and no regions Make a branch for each thing you want to do Send a pull request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Nelibur/Nelibur"	"Nelibur is message based web service framework on the pure WCF. Nelibur simplifies creating high-performance and message based web services and you certainly have all the power of the WCF."	"true"
"API"	"WebAPI Contrib"	"https://github.com/WebApiContrib/WebAPIContrib"	"Collection of open source projects to help improve your work with ASP.NET Web API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"548"	"80"	"168"	"GitHub - WebApiContrib/WebAPIContrib: Community Contributions for ASP.NET Web API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 80 Star 548 Fork 168 WebApiContrib/WebAPIContrib Code Issues 5 Pull requests 0 Wiki Pulse Graphs Community Contributions for ASP.NET Web API http://webapicontrib.github.com/ 297 commits 5 branches 0 releases 26 contributors C# 95.1% F# 4.2% Other 0.7% C# F# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master rc v1.0-nuspec v1.0 v2.0.0 Nothing to show Nothing to show New pull request Latest commit 4740aab May 15, 2016 abatishchev Merge pull request #126 from TerraVenil/master … Added NUnit tests on method GetClientIpAddress Permalink Failed to load latest commit information. .build @ d75e28f Update build to use FAKE, SourceLink, and Paket Feb 28, 2015 .paket Update build to use FAKE, SourceLink, and Paket Feb 28, 2015 src Added nunit tests on method GetClientIpAddress. Updating references t… May 15, 2016 test/WebApiContribTests Added nunit tests on method GetClientIpAddress. Updating references t… May 15, 2016 .gitattributes .txt trick didnt work used *.cs prevent CRLF=>LF Mar 3, 2013 .gitignore Bumping version to 2.0.0, updating build scripts, nuspecs Feb 17, 2016 .gitmodules Update build to use FAKE, SourceLink, and Paket Feb 28, 2015 .travis.yml chmod the build.sh to allow execute permissions Mar 3, 2015 LICENSE.txt Update LICENSE.txt Dec 7, 2012 RELEASE_NOTES.md Bumping version to 2.0.0, updating build scripts, nuspecs Feb 17, 2016 WebApiContrib.sln Update build to use FAKE, SourceLink, and Paket Feb 28, 2015 appveyor.yml Add travis and appveyor config files Feb 28, 2015 build.cmd Update build to use FAKE, SourceLink, and Paket Feb 28, 2015 build.fsx Bumping version to 2.0.0, updating build scripts, nuspecs Feb 17, 2016 build.sh Update build to use FAKE, SourceLink, and Paket Feb 28, 2015 paket.dependencies Added nunit tests on method GetClientIpAddress. Updating references t… May 15, 2016 paket.lock Added nunit tests on method GetClientIpAddress. Updating references t… May 15, 2016 readme.md Add Travis CI build status for WebAPIContrib Mar 3, 2015 readme.md WebAPIContrib WebAPIContrib is a collection of open source projects to help improve your work with ASP.NET Web API. We have divided the projects into a few different categories. For more information on each project, click through to visit the GitHub page. Core WebApiContrib WebApiContrib.Testing Formatters CollectionJson.Net WebApiContrib.Formatting.Bson WebApiContrib.Formatting.Html WebApiContrib.Formatting.JavaScriptSerializer WebApiContrib.Formatting.Jsonp WebApiContrib.Formatting.MsgPack WebApiContrib.Formatting.ProtoBuf WebApiContrib.Formatting.Razor WebApiContrib.Formatting.ServiceStack WebApiContrib.Formatting.Xlsx Inversion of Control WebApiContrib.IoC.Autofac WebApiContrib.IoC.CastleWindsor WebApiContrib.IoC.Mef WebApiContrib.IoC.Ninject WebApiContrib.IoC.StructureMap WebApiContrib.IoC.Unity Tracing WebApiContrib.Tracing.Log4Net WebApiContrib.Tracing.Nlog Miscellaneous WebApiContrib.RavenDb Contributing If you would like to contribute, feel free to fork the projects or get in touch with the mailing list: https://groups.google.com/group/webapicontrib Want to transfer your project to WebApiContrib? You created your own project and now want to transfer it to WebApiContrib? Awesome! We've got you covered. It is easy peasy. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/WebApiContrib/WebAPIContrib"	"Collection of open source projects to help improve your work with ASP.NET Web API"	"true"
"Application Frameworks"	"ASP.NET Boilerplate"	"https://github.com/aspnetboilerplate/aspnetboilerplate"	"A starting point for new modern ASP.NET MVC web applications with best practices and most popular tools."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1609"	"365"	"892"	"GitHub - aspnetboilerplate/aspnetboilerplate: ASP.NET Boilerplate - Application Framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 365 Star 1,609 Fork 892 aspnetboilerplate/aspnetboilerplate Code Issues 210 Pull requests 10 Wiki Pulse Graphs ASP.NET Boilerplate - Application Framework http://www.aspnetboilerplate.com 2,379 commits 4 branches 93 releases 47 contributors C# 94.3% JavaScript 4.8% Other 0.9% C# JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags dev-aspnetcoredemo dev master old-project-format Nothing to show v0.10.0.0 v0.9.7.0 v0.9.6.0 v0.9.5.0 v0.9.4.0 v0.9.3.0 v0.9.2.0 v0.9.1.1 v0.9.1.0 v0.9.0.1 v0.9.0.0 v0.8.4.0 v0.8.3.0 v0.8.2.0 v0.8.1.0 v0.8.0.1 v0.8.0.0 v0.7.8.0 v0.7.7.2 v0.7.7.1 v0.7.7.0 v0.7.6.0 v0.7.5.0 v0.7.4.1 v0.7.4.0 v0.7.3.0 v0.7.2.3 v0.7.2.0 v0.7.1.0 v0.7.0.4 v0.7.0.3 v0.7.0.1 v0.7.0.0 v0.6.9.0 v0.6.8.0 v0.6.7.0 v0.6.6.0 v0.6.5.1 v0.6.5.0 v0.6.4.1 v0.6.4.0 v0.6.3.1 v0.6.3.0 v0.6.2.0 v0.6.1.1 v0.6.0.1 v0.6.0.0 v0.5.13.3 v0.5.13.2 v0.5.13.1 v0.5.13.0 v0.5.12.1 v0.5.12.0 v0.5.11.0 v0.5.10.3 v0.5.10.1 v0.5.10.0 v0.5.9.0 v0.5.8.1 v0.5.8.0 v0.5.7.1 v0.5.7.0 v0.5.6.0 v0.5.5.0 v0.5.4.0 v0.5.3.0 v0.5.2.1 v0.5.2.0 v0.5.1.1 v0.5.0.0 v0.4.4.2 v0.4.4.1 v0.4.4.0 v0.4.3.2 v0.4.3.1 v0.4.3.0 v0.4.2.1 v0.4.2.0 v0.4.1.0 v0.4.0.0 v0.3.2.0 v0.3.1.2 v0.3.0.1 v0.3.0.0 v0.2.4.0 v0.2.3.1 v0.2.3.0 v0.2.2.1 v0.2.2.0 v0.2.1.2 v0.2.1.1 v0.2.0.1 v0.2.0.0 Nothing to show New pull request Latest commit 12953dd Jul 15, 2016 hikalkan committed on GitHub Merge pull request #1203 from aspnetboilerplate/master … Master Permalink Failed to load latest commit information. doc Dynamic web api controllers should not be UOW by default, since appli… Jul 15, 2016 nupkg Resolved #1137: Created Abp.AspNetCore.TestBase module. Jun 22, 2016 src Dynamic web api controllers should not be UOW by default, since appli… Jul 15, 2016 test AspNet Core module should trigger AbpHandledExceptionData event. Jul 15, 2016 tools Remove vs folder and don't ignore nuget.exe Jun 3, 2016 .gitattributes gitattributes file Mar 10, 2014 .gitignore Added SQLite.Interop.dll Jun 3, 2016 Abp.sln Created AbpAspNetCoreDemo for ASP.NET Core 1.0. Jul 4, 2016 LICENSE Update LICENSE Oct 10, 2013 README.md Added AppVeyor status Jun 3, 2016 appveyor.yml Added AspNetCore tests to appveyor Jun 21, 2016 global.json Removed sdk specification from global.asax #1129 Jun 30, 2016 README.md ASP.NET Boilerplate AppVeyor: What is ABP? ASP.NET Boilerplate is a starting point for new modern web applications using best practices and most popular tools. It's aimed to be a SOLID model, a general-purpose application framework and a project template. Framework ASP.NET Boilerplate is an application framework built on latest ASP.NET MVC & Web API technologies. It makes easy to use dependency injection, logging, validation, exception handling, localization and so on. It makes these not only itself but also using popular framework and libraries. Architecture ASP.NET Boilerplate implements NLayer architecture (Domain, Application, Infrastructure and Presentation Layers) and Domain Driven Design (Entities, Repositories, Domain/Application Services, DTO's...). Also implements and provides a good infrastructure to implement best practices such as Dependency Injection. Template ASP.NET Boilerplate easily creates startup template for your project. It includes most used framework and libraries by default. Also allows you to choice Single-Page (Angularjs) or Multi-Page (MVC) architecture, EntityFramework or NHibernate as ORM. Links Web site: http://www.aspnetboilerplate.com Official forum: http://forum.aspnetboilerplate.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aspnetboilerplate/aspnetboilerplate"	"A starting point for new modern ASP.NET MVC web applications with best practices and most popular tools."	"true"
"Distributed Computing"	"Orleans"	"https://github.com/dotnet/orleans"	"Orleans is a framework that provides a straight-forward approach to building distributed high-scale computing applications, without the need to learn and apply complex concurrency or other scaling patterns. It was created by Microsoft Research."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1958"	"286"	"486"	"GitHub - dotnet/orleans: Orleans - Distributed Virtual Actor Model Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 286 Star 1,958 Fork 486 dotnet/orleans Code Issues 197 Pull requests 14 Wiki Pulse Graphs Orleans - Distributed Virtual Actor Model http://dotnet.github.io/orleans 2,584 commits 4 branches 22 releases 76 contributors C# 93.2% HTML 3.5% PowerShell 2.2% Visual Basic 0.4% PLpgSQL 0.3% Batchfile 0.3% Other 0.1% C# HTML PowerShell Visual Basic PLpgSQL Batchfile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.2.3 coreclr-compatibility gh-pages master Nothing to show v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.2.0-beta v1.2.0-beta-vsix v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.1.0-beta2 v1.1.0-beta1 v1.0.10 v1.0.9 v1.0.8 v1.0.7 v1.0.5 v1.0.5.corrected v1.0.3_NuGets v1.0.1 v1.0.0 1.1.0-VSIX Nothing to show New pull request Latest commit de94742 Jul 16, 2016 shayhatsor committed on GitHub Merge pull request #1947 from jkonecki/feature/tutorial-code … Porting OrleansContrib/Orleans.Tutorials.Minimal Permalink Failed to load latest commit information. Samples Basic functioning Orleans application described in tutorial http://do… Jul 15, 2016 misc Added files via upload Apr 5, 2016 src IsPrimaryKeyBasedOnLong added documentation Jul 14, 2016 test Fixed method interceptors invocation to provide non-null MethodInfo w… Jul 13, 2016 .gitattributes Add .gitattributes file Jan 27, 2015 .gitignore Ignore generated SetupTestScriptOutput.txt file. Feb 4, 2016 Build.cmd Wrapped build paths with quotes May 28, 2015 LICENSE Update LICENSE Apr 22, 2015 README.md Update README.md Jun 30, 2016 Test.cmd Fix some other places that are effected by directory paths with space… Jun 6, 2015 TestAll.cmd Fix some other places that are effected by directory paths with space… Jun 6, 2015 changelog.md Added a few more items included in 1.2.3 Jul 9, 2016 netci.groovy Branchify and move to dynamic labels Apr 12, 2016 README.md Orleans - Distributed Actor Model Orleans is a framework that provides a straight-forward approach to building distributed high-scale computing applications, without the need to learn and apply complex concurrency or other scaling patterns. It was created by Microsoft Research implementing the Virtual Actor Model and designed for use in the cloud. Orleans has been used extensively running in Microsoft Azure by several Microsoft product groups, most notably by 343 Industries as a platform for all of Halo 4 and Halo 5 cloud services, as well as by a number of other projects and companies. Installation Installation is performed via NuGet. There are several packages, one for each different project type (interfaces, grains, silo, and client). In the grain interfaces project: PM> Install-Package Microsoft.Orleans.Templates.Interfaces  In the grain implementations project: PM> Install-Package Microsoft.Orleans.Templates.Grains  In the server (silo) project: PM> Install-Package Microsoft.Orleans.Server  In the client project: PM> Install-Package Microsoft.Orleans.Client  Official Builds The stable production-quality release is located here. The latest clean development branch build from CI is located: here Building From Source Clone the sources from the GitHub repo Run run the Build.cmd script to build the binaries locally, then reference the required NuGet packages from Binaries\NuGet.Packages\*. Documentation Documentation is located here Code Examples Create an interface for your grain: public interface IHello : Orleans.IGrainWithIntegerKey {   Task<string> SayHello(string greeting); } Provide an implementation of that interface: public class HelloGrain : Orleans.Grain, IHello {   Task<string> SayHello(string greeting)   {     return Task.FromResult($""You said: '{greeting}', I say: Hello!"");   } } Call the grain from your Web service (or anywhere else): // Get a reference to the IHello grain with id '0'. var friend = GrainClient.GrainFactory.GetGrain<IHello>(0);  // Send a greeting to the grain and await the response. Console.WriteLine(await friend.SayHello(""Good morning, my friend!"")); Community Ask questions by opening an issue on GitHub or on Stack Overflow Chat on Gitter Follow the @ProjectOrleans Twitter account for Orleans announcements. OrleansContrib - Repository of community add-ons to Orleans Various community projects, including Orleans Monitoring, Design Patterns, Storage Provider, etc. Guidelines for developers wanting to contribute code changes to Orleans. You are also encouraged to report bugs or start a technical discussion by starting a new thread on GitHub. License This project is licensed under the MIT license. Quick Links MSR-ProjectOrleans Orleans Tech Report - Distributed Virtual Actors for Programmability and Scalability Orleans-GitHub Orleans Documentation Contributing This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dotnet/orleans"	"Orleans is a framework that provides a straight-forward approach to building distributed high-scale computing applications, without the need to learn and apply complex concurrency or other scaling patterns. It was created by Microsoft Research."	"true"
"Application Frameworks"	"CoreFX"	"https://github.com/dotnet/corefx"	"The corefx repo contains the library implementation (called ""CoreFX"") for.NET Core. It includes System.Collections, System.IO, System.Xml and many other components. It builds and runs on Windows. You can 'watch' the repo to see Linux and Mac support being added over the next few months."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10226"	"1471"	"2488"	"GitHub - dotnet/corefx: This repo contains the .NET Core foundational libraries, called CoreFX. It includes classes for collections, file systems, console, XML, async and many others. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,471 Star 10,226 Fork 2,488 dotnet/corefx Code Issues 1,105 Pull requests 44 Wiki Pulse Graphs This repo contains the .NET Core foundational libraries, called CoreFX. It includes classes for collections, file systems, console, XML, async and many others. https://dotnet.github.io/ 12,116 commits 11 branches 5 releases 282 contributors C# 97.5% C 1.1% Visual Basic 0.8% C++ 0.4% Shell 0.1% PowerShell 0.1% C# C Visual Basic C++ Shell PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ReflectionBasedDCS anurse/macos-sierra-rid dev/api dev/cms_unix dev/metadata dev/xml future master release/1.0.0-rc1 release/1.0.0-rc2 release/1.0.0 Nothing to show v1.0.0 v1.0.0-rc2 v1.0.0-rc1 System.Reflection.Metadata-1.0.21 System.Collections.Immutable-1.1.36 Nothing to show New pull request Latest commit 999695c Jul 15, 2016 stephentoub committed on GitHub Merge pull request #10086 from dotnet-bot/UpdateDependencies201607150… … …20224  Updating CoreFx dependencies to beta-24315-04 Permalink Failed to load latest commit information. Documentation docs: Added documentation for building for Linux Emulator Jul 14, 2016 cross Add ARM softfp cross build support (#8678) May 25, 2016 pkg Increment versions post servicing Jun 30, 2016 scripts ARM-CI: Enable build of managed components Jul 8, 2016 src Updating CoreFx dependencies to beta-24315-04 Jul 15, 2016 .editorconfig Adding a clang-format file and a script to format every cpp and h fil… Sep 16, 2015 .gitattributes Update .gitattributes Mar 3, 2016 .gitignore Adding server code. Fixing IIS application deployment. Jul 13, 2016 .gitmirrorall Sync changes from TFS as of 2015/02/16 9:30:00 AM Feb 16, 2015 BuildToolsVersion.txt Update Buildtools to version 615-01 Jul 14, 2016 CONTRIBUTING.md Add folders to CoreFX Documentation Jun 23, 2015 DotnetCLIVersion.txt Update CLI to 1.0.0-preview2-002733 May 13, 2016 FindConflictingProjectConfigurations.ps1 Script to detect conflicting project configurations. Jan 22, 2016 GenerateBuilds.ps1 Clean up references to DNXCore50. May 24, 2016 LICENSE Update license to .NET Foundation Jan 26, 2016 PATENTS.TXT Add additional data to patents file Nov 18, 2015 Packaging.props Ensure we reference the latest Lineup package. Jun 20, 2016 README.md Add code of conduct information to README.md (#9579) Jun 22, 2016 THIRD-PARTY-NOTICES Open Source CLRCompression Jan 7, 2016 UpdateDependencies.ps1 Disable native build when updating dependencies. Jun 10, 2016 UpdatePublishedVersions.ps1 Add powershell script that updates the versions repository. May 11, 2016 build-packages.cmd Set exit codes for wrapper scripts if there is an error. (#8014) Apr 25, 2016 build-packages.sh Remove Mac OS minor version number from package filtering. Jul 11, 2016 build-tests.cmd Set exit codes for wrapper scripts if there is an error. (#8014) Apr 25, 2016 build-tests.sh Fixing DevWorkflow Scripts given that corerun is not present in the t… Jun 16, 2016 build.cmd Update corefx build.cmd to emit msbuild.err and msbuild.wrn as well a… May 19, 2016 build.proj Support filtering to TestTFM Jul 1, 2016 build.sh Add `makeargs <args>` option to passing extra options to `make` Jun 22, 2016 clean.cmd Add support for additional properties passed to msbuild Mar 30, 2016 clean.sh Fixing DevWorkflow Scripts given that corerun is not present in the t… Jun 16, 2016 corefx.vssettings Removing properties not relevant to code formatting May 4, 2015 dir.props Updating CoreFx dependencies to beta-24315-04 Jul 15, 2016 dir.targets Support filtering to TestTFM Jul 1, 2016 dir.traversal.targets Set default FilterToTestTFM to be netcoreapp1.0 in CoreFx Jul 13, 2016 global.json Enable project reference to package dependency conversion for test bu… Apr 13, 2016 init-tools.cmd Specify --no-cache on restore Jul 12, 2016 init-tools.sh Specify --no-cache on restore Jul 12, 2016 netci.groovy Enable arm testing in PRs. Jul 11, 2016 publish-packages.cmd Set exit codes for wrapper scripts if there is an error. (#8014) Apr 25, 2016 publish-packages.sh Fixing DevWorkflow Scripts given that corerun is not present in the t… Jun 16, 2016 run-test.cmd Check for RunTest.cmd before running test on Nano. Jul 11, 2016 run-test.sh Handle a ctrl-c interrupt on test runner Jun 7, 2016 sync.cmd Change sync.cmd to use argument parsing logic from build.cmd. May 2, 2016 sync.sh Fixing DevWorkflow Scripts given that corerun is not present in the t… Jun 16, 2016 README.md .NET Core Libraries (CoreFX) The corefx repo contains the library implementation (called ""CoreFX"") for .NET Core. It includes System.Collections, System.IO, System.Xml, and many other components. You can see more information in Documentation. The corresponding .NET Core Runtime repo contains the runtime implementation (called ""CoreCLR"") for .NET Core. It includes RyuJIT, the .NET GC, and many other components. Runtime-specific library code - namely mscorlib - lives in the CoreCLR repo. It needs to be built and versioned in tandem with the runtime. The rest of CoreFX is agnostic of runtime-implementation and can be run on any compatible .NET runtime. Build & Test Status Inner Loop Outer Loop CentOS 7.1 Debian 8 Fedora 23 openSUSE 13.2 OS X 10.11 Red Hat 7.2 Ubuntu 14.04 Ubuntu 16.04 Windows 7 Windows 8.1 Windows 10 Windows Nano Server 2016 How to Engage, Contribute and Provide Feedback Some of the best ways to contribute are to try things out, file bugs, and join in design conversations. If you are having issues with the Full .NET Framework or .NET Runtime, the best way to file a bug is at Connect or through Product Support if you have a contract. Want to get more familiar with what's going on in the code? Pull requests: Open/Closed , and changes Looking for something to work on? The list of up-for-grabs issues is a great place to start. See some of our guides for more details: Contributing Guide Developer Guide Issue Guide We've also started to share some of our direction via more higher-level documentation, specifically: Road to RTM How we triage Porting to .NET Core You are also encouraged to start a discussion by filing an issue or creating a gist. You can discuss .NET OSS more generally in the .NET Foundation forums. Want to chat with other members of the CoreFX community? This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information, see the .NET Foundation Code of Conduct. .NET Core Library Components The repo contains the source for each of the assemblies that comprises .NET Core. Each Microsoft.* or System. folder under src represents an individual library. Each such folder may contain a ref folder, which contains the source representing the ""contract"" or ""reference assembly"" for that library. It may also contain a src folder, which contains the source for some or all of the implementation for that library (some implementation may live in mscorlib in the coreclr repo, with the build tooling generating type forwards from the library assembly to mscorlib.) It may also contain a test folder containing the tests associated with that library, whether the implementation source lives in corefx or in coreclr. Daily Builds Daily builds of .NET Core components are published to dotnet-core MyGet gallery. The latest version number of each library can be seen in that gallery. License .NET Core (including the corefx repo) is licensed under the MIT license. .NET Foundation .NET Core is a .NET Foundation project. Related Projects There are many .NET related projects on GitHub. The .NET home repo links to 100s of .NET projects, from Microsoft and the community. The .NET Core repo links to .NET Core related projects from Microsoft. The ASP.NET home repo is the best place to start learning about ASP.NET Core. dotnet.github.io is a good place to discover .NET Foundation projects. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dotnet/corefx"	"The corefx repo contains the library implementation (called ""CoreFX"") for.NET Core. It includes System.Collections, System.IO, System.Xml and many other components. It builds and runs on Windows. You can 'watch' the repo to see Linux and Mac support being added over the next few months."	"true"
"Application Frameworks"	"CSLA .NET"	"https://github.com/MarimerLLC/csla"	"business layer development framework"	"null"	"null"	"null"	"null"	"null"	"http://cslanet.com/"	"null"	"330"	"83"	"159"	"GitHub - MarimerLLC/csla: CSLA .NET business layer development framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 83 Star 330 Fork 159 MarimerLLC/csla Code Issues 42 Pull requests 0 Wiki Pulse Graphs CSLA .NET business layer development framework http://www.cslanet.com 5,459 commits 7 branches 35 releases 25 contributors C# 96.4% HTML 1.8% Visual Basic 0.9% PowerShell 0.6% ASP 0.3% Batchfile 0.0% C# HTML Visual Basic PowerShell ASP Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags V1-5-x V3-8-x V4-3-x V4-5-x gh-pages master v4.6.4xx Nothing to show v4.6.401 v4.6.400 v4.6.301 v4.6.300 v4.6.200 v4.6.100 v4.6.001 v4.5.701 v4.5.601 v4.5.600 v3.8 V4.5.40 V4.5.30 V4.3.14 V4-5-begin V4-5-20 V4-5-15 V4-5-14 V4-5-13 V4-5-12 V4-5-10 V4-3-10 V4-2-0 V4-1-0 V4-0-0 V3-0-5 V2-1-4 V2-0-begin V2-0-0 V1-53 V1-51 4.5.700 4.5.681 4.5.501 4.5.500 Nothing to show New pull request Latest commit e8e407f Jun 30, 2016 rockfordlhotka committed on GitHub Fix using statements (#612) … * #608 Move using statement  * #608 Fix using statements Permalink Failed to load latest commit information. NuGet #605 Remove netcore50 project from solution and NuGet output (#609) Jun 30, 2016 Samples #505 Fix app.xaml.cs missing line of code May 27, 2016 Source Fix using statements (#612) Jun 30, 2016 Support Add CompilerDirectives.md file for reference Feb 25, 2016 XamarinPackage #264 Invoke packager from support folder. Apr 11, 2014 .gitattributes Add sh files to gitattributes Feb 23, 2016 .gitignore Add upgrade log to ignore list Mar 16, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Feb 16, 2016 README.md #502 Remove/update files Dec 4, 2015 code_of_conduct.md Add code of conduct Dec 3, 2015 license.md #532 Change license to MIT Feb 1, 2016 releasenotes.md #570 Version 4.6.400 release Jun 1, 2016 README.md CSLA .NET CSLA .NET is a software development framework that helps you build a reusable, maintainable object-oriented business layer for your app. This framework reduces the cost of building and maintaining applications. More information about CSLA .NET is available from the following sources: CSLA .NET home page CSLA .NET wiki/FAQ Getting started with CSLA .NET CSLA .NET forum CSLA .NET training videos and ebooks License CSLA .NET is copyright Marimer LLC. Its use is governed by the CSLA .NET license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MarimerLLC/csla"	"business layer development framework"	"true"
"Application Frameworks"	"Mono"	"https://github.com/mono/mono"	"Mono open source ECMA CLI, C# and.NET implementation"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4738"	"526"	"2270"	"GitHub - mono/mono: Mono open source ECMA CLI, C# and .NET implementation. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 526 Star 4,738 Fork 2,270 mono/mono Code Pull requests 125 Pulse Graphs Mono open source ECMA CLI, C# and .NET implementation. http://www.mono-project.com/ 107,764 commits 242 branches 321 releases 491 contributors C# 91.1% C 5.5% PLpgSQL 0.8% ASP 0.7% C++ 0.4% JavaScript 0.4% Other 1.1% C# C PLpgSQL ASP C++ JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2bf0d19a48809f566b59408356a00acc507c991d-for-4.2 4.2.0-37846 5.7 2014-june-hotfix-1 1531798 INITIAL_IMPORT alexischr/canary-sizecalc-change-impact alexischr/g_assert_perfcost alexischr/nursery-canaries-managed-alloc aot-on-demand asmbinder bitcode-premerge bug-36256 bug-37273 bug19334 bug_31491 cody-pango-testing compiler-hooks compression cycle5-profiler-work dick/ia64-hpux disable-2.0 disable-omit-fp fix-39325 fix-bgo41657-4.4.0 fix-leaks fix-pvs-studio getcultureinfo-37848 green gtk-memleak-fixes hotfix-19334 hotfix-29639 hotfix-29871 import-system-xml import-text-encoding kumpera-counters kumpera/coop_420 martin-btls-stable martin-btls martin-pcl martin-work master memory_profiling messaging-2008 microsoft-pcl-fixes mobile-master mono-1-0-6 mono-1-0 mono-1-1-4 mono-1-1-5 mono-1-1-6 mono-1-1-7 mono-1-1-8 mono-1-1-9 mono-1-1-10 mono-1-1-11 mono-1-1-12 mono-1-1-13-8 mono-1-1-13 mono-1-1-14 mono-1-1-15 mono-1-1-16 mono-1-1-17 mono-1-1-18 mono-1-2-1 mono-1-2-2 mono-1-2-3 mono-1-2-4 mono-1-2-5 mono-1-2-6 mono-1-2 mono-1-9-1-1 mono-1-9 mono-2-0 mono-2-2 mono-2-4-0 mono-2-4-1 mono-2-4-2 mono-2-4-3 mono-2-4 mono-2-6-4 mono-2-6-7 mono-2-6 mono-2-8 mono-2-10-8 mono-2-10-9 mono-2-10 mono-3-2 mono-3.2.0-branch mono-3.2.1-branch mono-3.2.3-branch mono-3.2.4-branch mono-3.2.5-branch mono-3.2.6-branch mono-3.2.7-branch mono-3.2.8-branch mono-3.4.0-branch mono-3.6.0-branch mono-3.8.0-branch mono-3.10.0-branch mono-3.12.0-28398-hotfix mono-3.12.0-branch mono-3.12.0-tls-hotfix mono-4.0.0-branch-ServiceModelFix mono-4.0.0-branch-c5sr2-ios9-fix mono-4.0.0-branch-c5sr2-xi mono-4.0.0-branch-c5sr2 mono-4.0.0-branch-c5sr2.1-xi mono-4.0.0-branch-c5sr3-10.11-fix mono-4.0.0-branch-c5sr3 mono-4.0.0-branch-c5sr4-32647 mono-4.0.0-branch-c5sr4 mono-4.0.0-branch-c5sr5 mono-4.0.0-branch-sr1-ios9 mono-4.0.0-branch mono-4.0.0-bug-33585-hotfix mono-4.0.0-hotfix-29570-branch mono-4.2.0-branch-64bitpreview mono-4.2.0-branch-bug36116 mono-4.2.0-branch-c6sr0 mono-4.2.0-branch-c6sr1 mono-4.2.0-branch-c6sr2-arm64mit mono-4.2.0-branch-c6sr2 mono-4.2.0-branch-c6sr4 mono-4.2.0-branch-fix34631 mono-4.2.0-branch-hotfix36183 mono-4.2.0-branch-msvc mono-4.2.0-branch-pinvoke-fix mono-4.2.0-branch-xm_wcf mono-4.2.0-branch mono-4.2.0-bug-33585-hotfix mono-4.2.0-c6sr0-hotfix-36383 mono-4.2.0-c6sr2-hotfix37236-2 mono-4.2.0-c6sr2-hotfix37236 mono-4.2.0-pre-branch mono-4.2.0-pre2-branch mono-4.2.0-thawed mono-4.3.0-branch mono-4.3.1-branch mono-4.3.2-branch-msvc mono-4.3.2-branch mono-4.4.0-branch-c7-baseline mono-4.4.0-branch-c7sr0 mono-4.4.0-branch-c7sr1 mono-4.4.0-branch-profiler mono-4.4.0-branch mono-4.4.0-cycle7-sr1 mono-4.5.0-branch mono-4.5.1-branch mono-4.6.0-branch mono-4.32 mono-pr-1758 mono-pr-1830 mono-pr-2090 mono-pr-2094 mono-pr-2095 mono-pr-2133 mono-pr-2161 mono-pr-2229 mono-pr-2257 mono-pr-2283 mono-pr-2286 mono-pr-2320 mono-pr-2321 mono-pr-2322 mono-pr-2361 mono-pr-2452 mono-pr-2467 mono-pr-2502 mono-pr-2503 mono-pr-2552 mono-pr-2760 mono-pr-2813 mono-pr-2926 mono-pr-3226 mono-pr-3237 mono-symbolicate-ikvm-master mono-symbolicate-standalone2-ikvm monodroid-4-8-1 monodroid-4.12-series-branch monodroid-4.12.4-branch monodroid-4.12.5-branch monotouch-1-0 monotouch-2-0 monotouch-3.12.0-branch monotouch-6.4.4-branch monotouch-6.4.5-branch monotouch-7.0-branch monotouch-7.0.1-branch monotouch-7.0.2-branch monotouch-7.0.6-branch monotouch-7.0.6-tpl-hotfix monotouch-7.0.7-hotfix-branch monotouch-7.2.1-branch monotouch-7.2.4-branch monotouch-8.4.0-branch monotouch-8.6.0-branch monotouch-8.6.1-19334-hotfix monotouch-8.9.0-ios9-branch moon/moon-2-0 moon/1.99.5 mtvs-1.8-series mwf-handle-branch new-logging old/mono-4.2.0-pre2-branch orbis-branch-20 origin/mono-2-6 pango-cfretain-font playscript-mono revert-2002-revert-1991-seq_test_fix revert-2230-4.2.0-threadpool-exit-worker revert-2292-revert-2230-4.2.0-threadpool-exit-worker revert-2738-fixes/complete-eventsource-2 revert-2916-fix-40306 revert-3025-mono_raise_exception_in_threads rodo-linker-analyzer-mono-4.2.0 rodo-unify-xa-linker seq-points system-font system-numerics-vectors-import system_io_compression_datetime vargaz/mini-linear-il vargaz/mini-xp-local-regalloc wii wip-serialization-halfway wip-serialization work-btls work-january-cleanups work-pcl-facades x-refresh xa-pcl-fixes xa-test-19161 xamarin-sketches-4.0-branch xamarin/monodroid-4.8.2-branch xammac-1.10-branch xammac-1.11.0-refresh-branch xcode7-c5 xcode7.2-c5 xi-40570 xi-40574 xi-c5sr1ios9-hotfix-29871 xi-repl Nothing to show type-reflector_0_2 sportsmodel-base moon/3.99.0.2 moon/3.99.0.1 moon/2.99.0.8 moon/2.99.0.7 moon/2.99.0.6 moon/2.99.0.5 moon/2.99.0.4 moon/2.99.0.3 moon/2.99.0.2 moon/2.2 moon/2.1 moon/2.0 moon/1.99.1.1 moon/moon-2-3 moon/moon-2-3-0-1 moon-2.99.0.1 moon-1.99.6 moon-1.99.2 moon-1.99.1 moon-1.9.2 moon-1.9.1 moon-1.9.0 monotouch-1.0 monotouch-1-4 monotouch-1-3 mono-android-1-0 mono-4.4.1.0 mono-4.4.0.182 mono-4.4.0.148 mono-4.4.0.142 mono-4.4.0.122 mono-4.4.0.40 mono-4.3.2.467 mono-4.2.4.4 mono-4.2.3.4 mono-4.2.2.30 mono-4.2.2.29 mono-4.2.2.10 mono-4.2.1.124 mono-4.2.1.102 mono-4.2.1.91 mono-4.2.1.60 mono-4.2.1.36 mono-4.2.0.207 mono-4.2.0.179 mono-4.0.5.1 mono-4.0.4.1 mono-4.0.3.20 mono-4.0.3.19 mono-4.0.3.13 mono-4.0.2.5 mono-4.0.2.4 mono-4.0.1.44 mono-4.0.1.43 mono-4.0.1.28 mono-4.0.1 mono-4.0.0.143 mono-4.0.0.121 mono-4.0.0 mono-4.0.0_alpha1 mono-3.12.1 mono-3.12.0.77 mono-3.12.0.76 mono-3.12.0.68 mono-3.10.0.20 mono-3.10.0 mono-3.8.0.9 mono-3.8.0 mono-3.6.0.39 mono-3.6.0 mono-3.4.0.204 mono-3.4.0.202 mono-3.4.0 mono-3.2.8 mono-3.2.7 mono-3.2.6 mono-3.2.5 mono-3.2.4 mono-3.2.3 mono-3.2.1 mono-3.2.0 mono-3.1.2 mono-3.1.1 mono-3.0.12 mono-3.0.11 mono-3.0.10 mono-3.0.10-windows mono-3.0.9 mono-3.0.8 mono-3.0.7 mono-3.0.6 mono-3.0.5 mono-3.0.4 mono-3.0.3 mono-3.0.2 mono-3.0.1 mono-3.0.0 mono-2.11.4 Nothing to show New pull request Latest commit 7b903d2 Jul 15, 2016 marek-safar [Facades] Remove dulicate subdirs include Permalink Failed to load latest commit information. acceptance-tests [coreclr-tests] Disable a test that fails verification. Jul 4, 2016 data Remove ChangeLog references from Makefile and .gitattribute Jan 29, 2016 docs [build] Change the way how mcs references are passed to compiler to a… Apr 4, 2016 eglib Fixed up configure overridable allocators option. Moved g_vasprintf i… Jul 11, 2016 external [xbuild] Update NuGet tasks to VS2015 Update 3 Jul 15, 2016 ikvm-native Remove ChangeLog files from the repo Jan 29, 2016 libgc [win32_threads] Mark an inline function as static. May 26, 2016 llvm Fix make dist Jun 7, 2016 m4 [mobile_static] Disable NLS by default on OSX Jun 13, 2016 man [runtime] Enable compact seq point by default Jul 13, 2016 mcs [Facades] Remove dulicate subdirs include Jul 15, 2016 mono Merge pull request #3286 from lambdageek/dev/refl-to-managed Jul 15, 2016 msvc Fix windows build issue due to missing export in def files. Jul 12, 2016 nacl Add NaCl build scripts Mar 21, 2013 po Remove ChangeLog files from the repo Jan 29, 2016 runtime [mono] Remove al2/dmcs from TEST_SUPPORT_FILES too Mar 17, 2016 samples Enabled g_mem_set_vtable through the configure option --with-overrida… Jul 11, 2016 scripts Merge pull request #3187 from akoeplinger/mstestsuite-on-prs Jun 28, 2016 support Fixed the build. Feb 25, 2016 tools [tools] Add a few missing files to the tarball Jun 10, 2016 .gitattributes Remove ChangeLog references from Makefile and .gitattribute Jan 29, 2016 .gitignore Ignore extensions-config.h Nov 17, 2015 .gitmodules Add dotnet/buildtools submodule Jul 15, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Mar 29, 2016 COPYING.LIB Update COPYING.LIB Mar 31, 2016 LICENSE Update LICENSE including GPL Mar 28, 2016 Makefile.am Merge pull request #3089 from alexanderkyte/mobile_static_jenkins_script Jun 14, 2016 NEWS Link to the general releases page instead of a specific version in NEWS. May 5, 2015 PATENTS.TXT Added PATENTS.TXT file and link to it Mar 28, 2016 README.md Update README with new CI builds/badges May 28, 2016 acinclude.m4 [build] Enable dolt on mingw32 Oct 26, 2014 appveyor.yml appveyor.yml: switch away from unstable image and simplify script Mar 3, 2015 autogen.sh [runtime] Only print out the value of MONO_EXTRA_CONFIGURE_FLAGS when… Jun 8, 2016 build-libs.bat [genproj] Getting closer to a full build May 31, 2016 build-libs.sh [genproj] Getting closer to a full build May 31, 2016 code_of_conduct.md Update code_of_conduct.md Dec 3, 2015 config.rpath Updated the build system Apr 19, 2011 configure.ac Merge pull request #3171 from alexanderkyte/net_4x_mdoc_fixup Jun 15, 2016 mkinstalldirs Add mkinstalldirs Sep 15, 2008 mono-uninstalled.pc.in Thu Feb 1 12:29:23 CET 2007 Paolo Molaro <lupus@ximian.com> Feb 1, 2007 net_4_x.sln WIP [library.make] Make resource usage declarative in the class libra… Jun 14, 2016 winconfig.h [profiler] Remove unused OProfile stuff from the build system. Apr 20, 2016 README.md Mono is a software platform designed to allow developers to easily create cross platform applications. It is an open source implementation of Microsoft's .NET Framework based on the ECMA standards for C# and the Common Language Runtime. The Mono project is part of the .NET Foundation Compilation and Installation Using Mono Directory Roadmap Contributing to Mono Reporting bugs Configuration Options Working with Submodules Build Status Officially supported architectures: ubuntu-1404-amd64 ubuntu-1404-i386 debian-8-armel debian-8-armhf debian-8-arm64 windows-amd64 Community supported architectures: centos-s390x Compilation and Installation Building the Software Please see our guides for building Mono on Mac OS X, Linux and Windows. Note that building from Git assumes that you already have Mono installed, so please download and install the latest Mono release before trying to build from Git. This is required because the Mono build relies on a working Mono C# compiler to compile itself (also known as bootstrapping). If you don't have a working Mono installation If you don't have a working Mono installation, you can try a slightly more risky approach: getting the latest version of the 'monolite' distribution, which contains just enough to run the 'mcs' compiler. You do this with: # Run the following line after ./autogen.sh make get-monolite-latest  This will download and place the files appropriately so that you can then just run: make  The build will then use the files downloaded by make get-monolite-latest. Testing and Installation You can run the mono and mcs test suites with the command: make check. Expect to find a few test suite failures. As a sanity check, you can compare the failures you got with https://jenkins.mono-project.com/. You can now install mono with: make install You can verify your installation by using the mono-test-install script, it can diagnose some common problems with Mono's install. Failure to follow these steps may result in a broken installation. Using Mono Once you have installed the software, you can run a few programs: mono program.exe runtime engine mcs program.cs C# compiler monodis program.exe CIL Disassembler See the man pages for mono(1), mcs(1) and monodis(1) for further details. Directory Roadmap acceptance-tests/ - Optional third party test suites used to validate Mono against a wider range of test cases. data/ - Configuration files installed as part of the Mono runtime. docs/ - Technical documents about the Mono runtime. external/ - Git submodules for external libraries (Newtonsoft.Json, ikvm, etc). man/ - Manual pages for the various Mono commands and programs. mcs/ - The class libraries, compiler and tools class/ - The class libraries (like System.*, Microsoft.Build, etc.) mcs/ - The Mono C# compiler written in C# tools/ - Tools like gacutil, ikdasm, mdoc, etc. mono/ - The core of the Mono Runtime. arch/ - Architecture specific portions. cil/ - Common Intermediate Representation, XML definition of the CIL bytecodes. dis/ - CIL executable Disassembler io-layer/ - The I/O layer and system abstraction for emulating the .NET IO model. metadata/ - The object system and metadata reader. mini/ - The Just in Time Compiler. runtime/ - A directory that contains the Makefiles that link the mono/ and mcs/ build systems. samples/ -Some simple sample programs on uses of the Mono runtime as an embedded library. scripts/ - Scripts used to invoke Mono and the corresponding program. Contributing to Mono Before submitting changes to Mono, please review the contribution guidelines. Please pay particular attention to the Important Rules section. Reporting bugs To submit bug reports, please use Xamarin's Bugzilla Please use the search facility to ensure the same bug hasn't already been submitted and follow our guidelines on how to make a good bug report. Configuration Options The following are the configuration options that someone building Mono might want to use: --with-sgen=yes,no - Generational GC support: Used to enable or disable the compilation of a Mono runtime with the SGen garbage collector. On platforms that support it, after building Mono, you will have both a mono binary and a mono-sgen binary. mono uses Boehm, while mono-sgen uses the Simple Generational GC. --with-gc=[included, boehm, none] - Selects the default Boehm garbage collector engine to use. included: (slightly modified Boehm GC) This is the default value for the Boehm GC, and it's the most feature complete, it will allow Mono to use typed allocations and support the debugger. boehm: This is used to use a system-install Boehm GC, it is useful to test new features available in Boehm GC, but we do not recommend that people use this, as it disables a few features. none: Disables the inclusion of a garbage collector. This defaults to included. --with-cooperative-gc If you pass this flag the Mono runtime is configured to only use the cooperative mode of the garbage collector. If you do not pass this flag, then you can control at runtime the use of the cooperative GC mode by setting the MONO_ENABLE_COOP flag. --with-tls=__thread,pthread Controls how Mono should access thread local storage, pthread forces Mono to use the pthread APIs, while __thread uses compiler-optimized access to it. Although __thread is faster, it requires support from the compiler, kernel and libc. Old Linux systems do not support with __thread. This value is typically pre-configured and there is no need to set it, unless you are trying to debug a problem. --with-sigaltstack=yes,no Experimental: Use at your own risk, it is known to cause problems with garbage collection and is hard to reproduce those bugs. This controls whether Mono will install a special signal handler to handle stack overflows. If set to yes, it will turn stack overflows into the StackOverflowException. Otherwise when a stack overflow happens, your program will receive a segmentation fault. The configure script will try to detect if your operating system supports this. Some older Linux systems do not support this feature, or you might want to override the auto-detection. --with-static_mono=yes,no This controls whether mono should link against a static library (libmono.a) or a shared library (libmono.so). This defaults to yes, and will improve the performance of the mono program. This only affects the `mono' binary, the shared library libmono.so will always be produced for developers that want to embed the runtime in their application. --with-xen-opt=yes,no - Optimize code for Xen virtualization. It makes Mono generate code which might be slightly slower on average systems, but the resulting executable will run faster under the Xen virtualization system. This defaults to yes. --with-large-heap=yes,no - Enable support for GC heaps larger than 3GB. This defaults to no. --enable-small-config=yes,no - Enable some tweaks to reduce memory usage and disk footprint at the expense of some capabilities. Typically this means that the number of threads that can be created is limited (256), that the maximum heap size is also reduced (256 MB) and other such limitations that still make mono useful, but more suitable to embedded devices (like mobile phones). This defaults to no. --with-ikvm-native=yes,no - Controls whether the IKVM JNI interface library is built or not. This is used if you are planning on using the IKVM Java Virtual machine with Mono. This defaults to yes. --with-profile4=yes,no - Whether you want to build the 4.x profile libraries and runtime. This defaults to yes. --with-libgdiplus=installed,sibling,<path> - Configure where Mono searches for libgdiplus when running System.Drawing tests. It defaults to installed, which means that the library is available to Mono through the regular system setup. sibling can be used to specify that a libgdiplus that resides as a sibling of this directory (mono) should be used. Or you can specify a path to a libgdiplus. --disable-shared-memory Use this option to disable the use of shared memory in Mono (this is equivalent to setting the MONO_DISABLE_SHM environment variable, although this removes the feature completely). Disabling the shared memory support will disable certain features like cross-process named mutexes. --enable-minimal=LIST Use this feature to specify optional runtime components that you might not want to include. This is only useful for developers embedding Mono that require a subset of Mono functionality. The list is a comma-separated list of components that should be removed, these are: aot: Disables support for the Ahead of Time compilation. attach: Support for the Mono.Management assembly and the VMAttach API (allowing code to be injected into a target VM) com: Disables COM support. debug: Drop debugging support. decimal: Disables support for System.Decimal. full_messages: By default Mono comes with a full table of messages for error codes. This feature turns off uncommon error messages and reduces the runtime size. generics: Generics support. Disabling this will not allow Mono to run any 2.0 libraries or code that contains generics. jit: Removes the JIT engine from the build, this reduces the executable size, and requires that all code executed by the virtual machine be compiled with Full AOT before execution. large_code: Disables support for large assemblies. logging: Disables support for debug logging. pinvoke: Support for Platform Invocation services, disabling this will drop support for any libraries using DllImport. portability: Removes support for MONO_IOMAP, the environment variables for simplifying porting applications that are case-insensitive and that mix the Unix and Windows path separators. profiler: Disables support for the default profiler. reflection_emit: Drop System.Reflection.Emit support reflection_emit_save: Drop support for saving dynamically created assemblies (AssemblyBuilderAccess.Save) in System.Reflection.Emit. shadow_copy: Disables support for AppDomain's shadow copies (you can disable this if you do not plan on using appdomains). simd: Disables support for the Mono.SIMD intrinsics library. ssa: Disables compilation for the SSA optimization framework, and the various SSA-based optimizations. --enable-llvm --enable-loadedllvm This enables the use of LLVM as a code generation engine for Mono. The LLVM code generator and optimizer will be used instead of Mono's built-in code generator for both Just in Time and Ahead of Time compilations. See http://www.mono-project.com/docs/advanced/mono-llvm/ for the full details and up-to-date information on this feature. You will need to have an LLVM built that Mono can link against. The --enable-loadedllvm variant will make the LLVM backend into a runtime-loadable module instead of linking it directly into the main mono binary. --enable-big-arrays - Enable use of arrays with indexes larger than Int32.MaxValue. By default Mono has the same limitation as .NET on Win32 and Win64 and limits array indexes to 32-bit values (even on 64-bit systems). In certain scenarios where large arrays are required, you can pass this flag and Mono will be built to support 64-bit arrays. This is not the default as it breaks the C embedding ABI that we have exposed through the Mono development cycle. --enable-parallel-mark Use this option to enable the garbage collector to use multiple CPUs to do its work. This helps performance on multi-CPU machines as the work is divided across CPUS. This option is not currently the default on OSX as it runs into issues there. This option only applies to the Boehm GC. --enable-dtrace On Solaris and MacOS X builds a version of the Mono runtime that contains DTrace probes and can participate in the system profiling using DTrace. --disable-dev-random Mono uses /dev/random to obtain good random data for any source that requires random numbers. If your system does not support this, you might want to disable it. There are a number of runtime options to control this also, see the man page. --enable-nacl This configures the Mono compiler to generate code suitable to be used by Google's Native Client: http://code.google.com/p/nativeclient/ Currently this is used with Mono's AOT engine as Native Client does not support JIT engines yet. Working With Submodules Mono references several external git submodules, for example a fork of Microsoft's reference source code that has been altered to be suitable for use with the Mono runtime. This section describes how to use it. An initial clone should be done recursively so all submodules will also be cloned in a single pass: $ git clone --recursive git@github.com:mono/mono  Once cloned, submodules can be updated to pull down the latest changes. This can also be done after an initial non-recursive clone: $ git submodule update --init --recursive  To pull external changes into a submodule: $ cd <submodule> $ git pull origin <branch> $ cd <top-level> $ git add <submodule> $ git commit  By default, submodules are detached because they point to a specific commit. Use git checkout to move back to a branch before making changes: $ cd <submodule> $ git checkout <branch> # work as normal; the submodule is a normal repo $ git commit/push new changes to the repo (submodule)  $ cd <top-level> $ git add <submodule> # this will record the new commits to the submodule $ git commit  To switch the repo of a submodule (this should not be a common or normal thing to do at all), first edit .gitmodules to point to the new location, then: $ git submodule sync -- <path of the submodule> $ git submodule update --recursive $ git checkout <desired new hash or branch>  The desired output diff is a change in .gitmodules to reflect the change in the remote URL, and a change in / where you see the desired change in the commit hash. License See the LICENSE file for licensing information, and the PATENTS.TXT file for information about Microsoft's patent grant. Mono Trademark Use Policy The use of trademarks and logos for Mono can be found here. Maintaining the Class Library Solution Files Mono now ships with a solution file that can be used to build the assemblies from an IDE. Either by opening the topmost net_4_x.sln file, or to by loading one of the individual csproj files located in each directory. These are maintained by extracting the configuration information from our Makefiles, which as of May 2016 remain the canonical location for configuration information. When changes are made to the Makefiles, a user would need to run the following command to re-generate the solution files at the top level: $ make update-solution-files  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mono/mono"	"Mono open source ECMA CLI, C# and.NET implementation"	"true"
"Application Frameworks"	"Mono-Addins"	"https://github.com/mono/mono-addins"	"Mono.Addins is a generic framework for creating extensible applications, and for creating add-ins which extend those applications"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"104"	"42"	"56"	"GitHub - mono/mono-addins: Mono.Addins is a generic framework for creating extensible applications, and for creating add-ins which extend those applications. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 42 Star 104 Fork 56 mono/mono-addins Code Issues 9 Pull requests 4 Wiki Pulse Graphs Mono.Addins is a generic framework for creating extensible applications, and for creating add-ins which extend those applications. http://monoaddins.codeplex.com/ 568 commits 18 branches 12 releases 25 contributors C# 99.1% Other 0.9% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.5 0.6 0.6.1 0.6.2 atsushi-200810 build_updates condition-fixes default-insert fix-update-disables gh-pages icons jb/cl master messaging-2008 moduled-module opt-dep-without-version sm-with-config threadsafe Nothing to show mono-addins-1.2 mono-addins-1.1 mono-addins-1.0 mono-addins-0.6.2 mono-addins-0.6.1 mono-addins-0.6 0.5 0.4 0.3.1 0.3 0.2 0.1 Nothing to show New pull request Latest commit cd46027 Jul 12, 2016 Therzok [Misc] Remove some extra string allocations. Permalink Failed to load latest commit information. Mono.Addins.CecilReflector Update release configurations. Sep 21, 2015 Mono.Addins.Gui [Misc] Remove some extra string allocations. Jul 12, 2016 Mono.Addins.GuiGtk3 [Icons] Better ~sel overlay treatment Feb 29, 2016 Mono.Addins.MSBuild Update release configurations. Sep 21, 2015 Mono.Addins.Setup [Misc] Remove some extra string allocations. Jul 12, 2016 Mono.Addins [Misc] Remove some extra string allocations. Jul 12, 2016 Samples Bump version to 1.0 Jul 9, 2012 Test Fix unit tests Feb 9, 2016 docs Flush projects Nov 19, 2014 mautil Update release configurations. Sep 21, 2015 support Add package generation scripts and some support files. Feb 25, 2011 .gitattributes Solution files should always be CRLF. Aug 9, 2011 .gitignore [UnitTests] Remove specific version requirements Nov 20, 2013 AUTHORS Updated info files Jul 19, 2012 COPYING Updated info files Jul 19, 2012 ChangeLog * Mono.Addins.sln: Jun 8, 2010 Makefile.am Fix nuget package Nov 19, 2014 Makefile.include Build the solution using xbuild Jul 19, 2012 Mono.Addins.Setup.nuspec Fix Mono.Addins.Setup NuGet dependency version Jan 29, 2015 Mono.Addins.mdw Moved samples to its own solution in a Samples workspace. Added new s… Mar 24, 2010 Mono.Addins.nuspec Fix nuget package Nov 19, 2014 Mono.Addins.sln Update release configurations. Sep 21, 2015 NEWS * AUTHORS, README, NEWS: Added. Mar 26, 2007 Packages.mdse * docs/docs.mdp, mautil/mautil.mdp, Oct 29, 2007 README Update README Oct 12, 2013 autogen.sh Initial import of Mono.Addins Mar 23, 2007 configure.ac Merge pull request #36 from knocte/noGmcs May 9, 2016 makefile-sample.include Avoid installing assemblies generated by samples and tests. Mar 23, 2007 mono-addins.snk 2007-07-03 Lluis Sanchez Gual <lluis@novell.com> Jul 3, 2007 mono-addins.spec.in Bump version to 0.5.90 and add spec file Jan 25, 2011 policy.config.in * policy.config.in: Set correct public token. Dec 14, 2007 xbuild.include Set up autotools stuff to build GuiGtk3 Oct 12, 2013 README  Mono.Addins is a generic framework for creating extensible applications, and for creating libraries which extend those applications.  For for information about the library, see: http://www.mono-project.com/Mono.Addins  Building --------  To build the library execute:  	./configure 	make  Options:  --prefix=/path/to/prefix  	Install to the specified prefix  --enable-gui  	Include GUI support for GTK2 (requires gtk#2)  --enable-gui-gtk3  	Include GUI support for GTK3 (requires gtk#3)  --enable-tests  	Include NUnit tests (requires nunit)   Building the samples --------------------  cd to the Samples directory and run make.  Running the NUnit tests -----------------------  To run the NUnit tests, you need to configure the build with --enable-tests, cd to Tests, and run 'make test'.    Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mono/mono-addins"	"Mono.Addins is a generic framework for creating extensible applications, and for creating add-ins which extend those applications"	"true"
"Application Frameworks"	"peasy"	"https://github.com/peasy/Peasy.NET"	"Peasy is a middle tier framework that offers an easy to use and flexible rules engine and was designed to address common challenges such as concurrency handling, transactional support, fault tolerance, threading, scalability, async and multiple client support, and easy testability, all without a huge learning curve!"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"143"	"14"	"12"	"GitHub - peasy/Peasy.NET: An easy to use middle tier framework for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 143 Fork 12 peasy/Peasy.NET Code Issues 4 Pull requests 0 Wiki Pulse Graphs An easy to use middle tier framework for .NET 395 commits 3 branches 5 releases Fetching contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master order_item_states_updates_in_proxies Nothing to show peasy.core-v1.0.0.4 peasy.core-v1.0.0.3 peasy-v1.0.0.8 peasy-v1.0.0.7 peasy-v1.0.0.6 Nothing to show New pull request Latest commit 0b9b8e7 Jul 14, 2016 ahanusa committed on GitHub Update README.md Permalink Failed to load latest commit information. Peasy.Core.Tests Add tests for ServiceExceptionHandling and Command<T> Nov 17, 2015 Peasy.Core update nuspecs and nuget refs Nov 17, 2015 Peasy.Tests Update tests for base class Editable and ForeignKey attributes Dec 11, 2015 Peasy update nuspec Dec 11, 2015 .gitignore initial commit Apr 13, 2015 LICENSE.txt add license Apr 14, 2015 Package.nuspec Move ExecutionContext into its own file Oct 10, 2015 Peasy.sln Create solution for Orders.com Nov 14, 2015 README.md Update README.md Jul 14, 2016 TODO.txt Update TODO Nov 14, 2015 README.md A middle tier framework for .NET What's a middle tier framework? A middle tier framework is code that facilitates creating business logic in a reusable, extensible, maintainable, and testable manner. It promotes creating business logic that is completely decoupled from its consuming technologies and helps to ensure that separation of concerns (SoC) are adhered to. Peasy.NET offers/addresses the following: Easy to use validation/business rules engine Thread safety Scalability Concurrency Swappable data proxies Async support Multiple client support Multiple deployment scenario support Transactional support and fault tolerance Easy testability Where can I get it? First, install NuGet. Then, install Peasy from the package manager console: PM> Install-Package Peasy You can also download and add the Peasy and/or Peasy.Core projects to your solution Getting started You can get started by reviewing the getting started example on the Peasy wiki. The wiki also covers in-depth how-to's, general framework design, and usage scenarios. You can also check out the samples repo that contains a sample implementation of a middle tier built with peasy, as well as sample consumer clients (WPF, Web API, ASP.NET MVC). You can clone the repo or download the entire project as a zip. Once downloaded, open Orders.com.sln with Visual Studio, set the WPF or ASP.NET MVC project as the startup project and run. More information about the samples application can be found here. Contributing All contributions are welcome, from general framework improvements to sample client consumers, proxy implementations, and documentation updates. Want to get involved? Please hit me up with your ideas. Alternatively, you can make a pull request and we'll get to it ASAP. Like what you see? Please consider showing your support by starring the project. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/peasy/Peasy.NET"	"Peasy is a middle tier framework that offers an easy to use and flexible rules engine and was designed to address common challenges such as concurrency handling, transactional support, fault tolerance, threading, scalability, async and multiple client support, and easy testability, all without a huge learning curve!"	"true"
"IoC"	"Spring.Net"	"https://github.com/spring-projects/spring-net"	"Spring.NET is an open source application framework that makes building enterprise.NET applications easier"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"302"	"129"	"214"	"GitHub - spring-projects/spring-net: Spring Framework for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 129 Star 302 Fork 214 spring-projects/spring-net Code Issues 21 Pull requests 1 Pulse Graphs Spring Framework for .NET http://www.springframework.net 1,747 commits 6 branches 12 releases 27 contributors C# 98.0% HTML 0.8% Smalltalk 0.5% XSLT 0.3% ASP 0.1% GAP 0.1% Other 0.2% C# HTML Smalltalk XSLT ASP GAP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags features/NH-4-support features/SPRNET-1561 features/SPRNET-1564 features/netcore master sprnet-generics Nothing to show spring-net-2.0.1-GA spring-net-2.0.0-RC2 spring-net-2.0.0-RC1 spring-net-2.0.0-M2 spring-net-2.0.0-GA spring-net-1.3.2 spring-net-1.3.1 spring-net-1.3.0 spring-net-1.3.0-RC1 spring-net-1.2.0 spring-net-1.2.0-RC1 1.2.0-M1 Nothing to show New pull request Latest commit ad64f00 Nov 25, 2015 sbohlen fix manual-compilation of dependent RESX files (see comment in .build… … … file for details as to why this is necessary) Permalink Failed to load latest commit information. .nuget SPRNET-1509 upgrade to NUnit 2.6, use NuGet packages Dec 25, 2013 build-support troubleshooting db connectivity for integration tests Jan 17, 2015 dev-support Fix Resharper file template Mar 12, 2012 doc SPRNET-1444 - revert commits on this issue to return DefaultIsolation… Mar 21, 2015 examples/Spring enable nuget package restore for EMS quickstart and add Common.Loggin… Feb 3, 2015 lib add missing references to /lib/ folder Feb 2, 2015 nuget-packages SPRNET-1508 convenience batch file to push all nupkgs to nuget May 9, 2012 src/Spring remove erroneous included XML comment file Nov 24, 2015 templates/vsnet-2008 Removing .NET 2.0 and 3.0 support, updating build and project files, … Feb 16, 2012 test/Spring fix manual-compilation of dependent RESX files (see comment in .build… Nov 25, 2015 .gitignore fix exclude settings file Nov 24, 2015 BreakingChanges.txt SPRNET-1444 - revert commits on this issue to return DefaultIsolation… Mar 21, 2015 Build-ci.cmd update ci-invoked build entry point to run database-dependent integra… Jan 16, 2015 Build.cmd fix project file nowarn flags in release mode, fix build cmd platform… Feb 23, 2014 CopyLibToBinHelpers.include -rework build scripts to pull all dependencies from current.bin.dir a… Apr 18, 2015 Local.testsettings fixing broken build; reworked build script so that VS2008 (.NET 2.0) … May 30, 2011 Spring.Net.2010.sln Merge branch 'master' of https://github.com/spring-projects/spring-net … Apr 9, 2015 Spring.Net.2010.sln.GhostDoc.xml adding GHOSTDOC control file Nov 24, 2015 Spring.build bifurcate tests to reflect both apache nvelocity and castle nvelocity… Apr 19, 2015 Spring.include SPRNET-1563 Make code as ClsCompliant as possible Dec 6, 2013 appveyor.yml adding appveyor.yml to control CI server settings Jan 17, 2015 build-release-all.cmd update metadata and build scripts to reflect 2.0.1-GA Apr 11, 2015 changelog.txt update metadata and build scripts to reflect 2.0.1-GA Apr 11, 2015 common-project.include switch to nunit-console-x86.exe to force tests run in a 32-bit process Feb 23, 2014 copy-files-to-package-dir.cmd update NANT config settings to support builds on both x86 and x64 pro… Feb 23, 2014 license.txt Initial import! May 30, 2008 package-nuget-only.cmd add convenience cmd script to create nuget packages from existing bui… Nov 27, 2012 powershell-invoker.cmd SPRNET-1414 Mar 26, 2011 readme.txt NHibernate 4 support Oct 19, 2014 s3-nightly-delete-old-files.ps1 SPRNET-1414 Mar 25, 2011 s3-nightly-upload.ps1 SPRNET-1414 Mar 25, 2011 readme.txt THE SPRING.NET FRAMEWORK, Release 2.0.0  (PRE-RELEASE) --------------------------------------------------------- http://www.springframework.net/   1. INTRODUCTION  The 2.0.0 release of Spring.NET contains       * A full featured Inversion of Control container      * An Aspect Oriented Programming framework      * Expression Language for lightweight scripting      * UI-agnostic validation framework      * ASP.NET Framework        - Dependency Injection for pages and user controls, bi-directional data binding, and more.      * ASP.NET MVC and ASP.NET WebAPI Framework        - Dependency Injection for MVC3, MVC4 (including MVC4 WebAPI).      * Declarative transaction management abstraction        - Declarative transaction management via use of common XML configuration and attributes across different transaction APIs      * ADO.NET framework        - Simplifies use of ADO.NET.  DAO support classes and integration with Spring's declarative transaction management functionality      * Portable Service Abstractions        - Export plain .NET objects via .NET Remoting, Web Service or .NET Serviced Component and create client side proxies based on endpoint URL and service interface.      * NHibernate Integation        - NHibernate 3.2, and 3.3 integration to simplify use of NHibernate and participate in Spring's declarative transaction management functionality.      * ASP.NET AJAX Integration        - Exporter to expose plain object on which Dependency Injection and AOP have been applied to JavaScript.      * NUnit and MSTest integration        - Provides Dependency Injection of test cases and Spring container loading and caching. .  Data access and transaction management features aid with integration testing.      * WCF integration        - Provides Dependency Injection and applicatin of AOP advice to WCF services      * Quartz integration        - Configure Quartz jobs using dependency injection and Spring's transactional support to          persist job details      * MSMQ integration        - Simplifies the use MSMQ by providing helper classes for message sending and receiving.  Integrates with Spring's transaction management features.      * NMS integration        - Simplifies the use of NMS by providing helper classes for message sending and receiving.      * TIBCO EMS integration        - Simplifies the use of TIBCO EMS by providing helper classes for message sending and receiving.      * NVelocity integration        - Simplifies the use of configuring NVelocity  Spring.NET is a port of the Java based Spring Framework. In turn, the Java/J2EE Spring Framework is based on code published in ""Expert One-on-One J2EE Design and Development"" by Rod Johnson (Wrox, 2002).   2. SUPPORTED .NET FRAMEWORK VERSIONS  Spring.NET 2.0.0 supports .NET 3.5 and 4.0.  In the directories bin\net\3.5 and bin\net\4.0 are framework-specific DLLs for each of .NET 3.5 and 4.0 framework versions.   3. KNOWN ISSUES  <none>   4. RELEASE INFO  Release contents:  * ""src"" contains the C# source files for the framework * ""test"" contains the C# source files for Spring.NET's test suite * ""bin"" contains various Spring.NET distribution dll files * ""lib/Net"" contains shared third-party libraries needed for building the framework * ""lib/NHibernate3"" contains NHibernate 3.3 dlls * ""doc"" contains reference documentation, MSDN-style API help, and the Spring.NET xsd. * ""examples"" contains sample applications. * ""build-support"" contains additonal applications need to build using NAnt as some convenience    VS.NET solution files. * ""dev-support"" contains 'developer support' tools and code, such as solution templates for VS.NET  debug build is done using /DEBUG:full and release build using /DEBUG:pdbonly flags.  The VS.NET solution for the framework and examples are provided.  Latest info is available at the public website: http://www.springframework.net/  The Spring Framework is released under the terms of the Apache Software License (see license.txt).   5. DISTRIBUTION DLLs  The ""bin"" directory contains the following distinct dll files for use in applications. Dependencies are those other than on the .NET BCL.  * ""Spring.Core"" (~765 KB) - Contents: Inversion of control container. Collection classes. - Dependencies: Common.Logging  * ""Spring.Aop"" (~150 KB) - Contents: Abstract Oriented Programming Framework. - Dependencies: Spring.Core, Common.Logging  * ""Spring.Data"" (~320 KB) - Contents: Transaction and ADO.NET Framework. - Dependencies: Spring.Core, Spring.Aop  * ""Spring.Data.NHibernate3"" (~90 KB) - Contents: NHibernate 3.x integration - Dependencies: Spring.Core, Spring.Aop, Spring.Data, NHibernate  * ""Spring.Data.NHibernate4"" (~90 KB) - Contents: NHibernate 4.x integration - Dependencies: Spring.Core, Spring.Aop, Spring.Data, NHibernate  * ""Spring.Services"" (~70 KB) - Contents: Web Services, Remoting, and Enterprise Component based services. - Dependencies: Spring.Core, Spring.Aop  * ""Spring.Web"" (~165 KB) - Contents: ASP.NET based Web Application Framework. - Dependencies: Spring.Core, Spring.Aop  * ""Spring.Web.Extensions"" (~8 KB) - Contents: ASP.NET AJAX Integartion - Dependencies: Spring.Core, Spring.Aop, System.Web.Extensions  * ""Spring.Web.Mvc3"" (~8 KB) - Contents: ASP.NET MVC3 Integartion - Dependencies: Spring.Core, Spring.Web  * ""Spring.Web.Mvc4"" (~8 KB) - Contents: ASP.NET MVC4 and WebAPI Integartion - Dependencies: Spring.Core, Spring.Web  * ""Spring.Web.Mvc5"" (~8 KB) - Contents: ASP.NET MVC5 and WebAPI Integartion - Dependencies: Spring.Core, Spring.Web  * ""Spring.Testing.NUnit"" (~24 KB) - Contents: NUnit Integration - Dependencies: Spring.Core, Spring.Data, NUnit  * ""Spring.Testing.Microsoft"" (~24 KB) - Contents: MSTest Integration - Dependencies: Spring.Core, Spring.Data, MSTest  * ""Spring.Messaging"" (~65 KB) - Contents: MSMQ Integration - Dependencies: Spring.Core, Spring.Data, System.Messaging  * ""Spring.Messaging.Nms"" (~100 KB) - Contents: NMS Integration - Dependencies: Spring.Core, Spring.Data, Apache NMS  * ""Spring.Scheduling.Quartz2"" (~44 KB) - Contents: Quartz 2.x Integration - Dependencies: Spring.Core, Spring.Data, Quartz  * ""Spring.Template.Velocity"" (~44 KB) - Contents: NVelocity Integration - Dependencies: Spring.Core, NVelocity   6. WHERE TO START?  Documentation can be found in the ""docs"" directory: * The Spring reference documentation  Documented sample applications can be found in ""examples"": * IoCQuickStart.MovieFinder - A simple example demonstrating basic IoC container behavior. * IoCQuickStart.AppContext - Show use of various IApplicationContext features. * IoCQuickStart.EventRegistry - Show use of loosely coupled eventing features. * AopQuickStart - Show use of AOP features. * CachingQuickStart - Show use of Caching abstraction. * SpringAir - Show use of Spring.Web features. * Calculator - Show use of Spring.Services features. * WebQuickStart - Show step by step usage of Spring.Web features. * Web.Extensions.Example - Show ASP.NET AJAX integartion. * DataQuickStart - Show use of Spring.Data data access features. * TxQuickStart - Show use of Spring's transaction features. * Data.NHibernate.Northwind - Show use of Spring's NHibernate features. * WCFQuickStart - Show use of DI and AOP with WCF * NMSQuickStart - Sample application using NMS * MSMQ QuickStart - Sample application using MSMQ * Quartz Example - Scheduling using Quartz * MvcQuickStart - Show the configuration of the Mvc2 support * Mvc3QuickStart - Show the configuration of the Mvc3 support * Mvc4QuickStart - Show the configuration of the Mvc4 support  7. How to build  VS.NET ------ There are two solution file for different version of VS.NET  * Spring.Net.2008.sln for use with VS.NET 2008 * Spring.Net.2010.sln for use with VS.NET 2010  Note: When building on Vista/Windows7 with activated UAC, you might get an error:  xcopy ""C:\Spring.Net\Spring.NET-1.3.2\Spring.NET\test\Spring\Spring.Core.Tests\Spring.Core.Tests.dll.config"" ..\..\..\..\build\VS.Net.2008\Spring.Core.Tests\Debug\ /y /s /q-Command exited with Code 9009.	Spring.Core.Tests.2008  In this case you need to run Visual Studio with Administrator-permissions. (note that the first part of this path is an example only)   NAnt ----  Before building you will need to install on your machine ASP.NET MVC2, 3 and 4.  This is due to not being able to redistribute ASP.NET DLLs  Build scripts are delivered with the download package.  To build the source and run the unit tests type  build test  If you want to run the build to create strongly signed assemblies you can generate a key file by executing the following command (assuming that sn.exe is properly on your search path):  sn -k Spring.Net.snk  You need to place the Spring.NET.snk file into the root folder of the source tree. All builds are strongly named using this key file when executing the following nant command:  nant -D:project.build.sign=true  InnovaSys Document X! is used to generate the SDK documentation.   8. Support  The user forums at http://forum.springframework.net/ are available for you to submit questions, support requests, and interact with other Spring.NET users.  Bug and issue tracking can be found at https://jira.springsource.org/browse/SPRNET  A Fisheye repository browser is located at https://fisheye.springframework.org/browse/spring-net  To get the sources, fork us on github at https://github.com/SpringSource/spring-net  We are always happy to receive your feedback on the forums. If you think you found a bug, have an improvement suggestion or feature request, please submit a ticket in JIRA (see link above).  A word on bug reports: If at all possible, try to download one of the nightly snapshots at http://www.springframework.net/downloads/nightly/ and see, if this bug has already been fixed. If the problem still persists, don't forget to mention the version of Spring.NET you are using (check the file versions of Spring.NET dlls), the .NET version you are running on and a description how to reproduce the problem. Ideally attach some sample code reproducing the problem to the JIRA ticket.   9. Acknowledgements  InnovaSys Document X! --------------------- InnovSys has kindly provided a license to generate the SDK documentation and supporting utilities for integration with Visual Studio.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/spring-projects/spring-net"	"Spring.NET is an open source application framework that makes building enterprise.NET applications easier"	"true"
"Application Templates"	"MVC.Template"	"https://github.com/NonFactors/MVC5.Template"	"ASP.NET MVC 5 project starter template"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"93"	"32"	"44"	"GitHub - NonFactors/MVC5.Template: ASP.NET MVC 5 project starter template Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 93 Fork 44 NonFactors/MVC5.Template Code Issues 0 Pull requests 0 Pulse Graphs ASP.NET MVC 5 project starter template 1,005 commits 3 branches 7 releases Fetching contributors C# 48.8% JavaScript 43.4% CSS 6.9% Other 0.9% C# JavaScript CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop master xunit Nothing to show v1.6.0 v1.5.0 v1.4.0 v1.3.0 v1.2.0 v1.1.0 v1.0.0 Nothing to show New pull request Latest commit 7ab234a Jul 15, 2016 Muchiachio Code base clean up … - Cleaned up code base. Permalink Failed to load latest commit information. .nuget Code base clean up Oct 7, 2014 src Gzip compression Jul 13, 2016 test/MvcTemplate.Tests Code base clean up Jul 15, 2016 tools Code base clean up Jun 30, 2016 .gitattributes Stricter git attributes Aug 14, 2015 .gitignore File logger Sep 12, 2015 CONTRIBUTING.md Contributing information Sep 7, 2015 LICENSE.txt Licensing clean up Mar 22, 2016 MvcTemplate.sln 3rd party library update Nov 15, 2014 README.md Installation read me Jan 22, 2016 Rename.exe Project renaming sources Oct 7, 2015 WebEssentials-Settings.json Web essentials update Feb 16, 2015 scaffolding.config Removal of unused scaffolding templates May 26, 2014 README.md Installation Before opening project rename it using ""Rename Project.exe"". Build project or restore NuGet packages. Set Web as default start up project. Install necessary VS extensions if you don't have them already: Web Essentials. If you are using VS2013, download Windows Management Framework 4.0. Which is needed for VS2013 scaffolding to work. If you area using VS2015, remove T4Scaffolding.Core package, because VS2015 does not support this kind of scaffolding. Open ""Package Manager Console"" and run ""update-database"" command on ""Data"" project. Features Model-View-ViewModel architectural design. Latest technologies and frameworks. Lowercase or normal ASP.NET urls. Protection from CSRF, XSS, etc. Custom membership providers. Easy project renaming. Dependency injection. Custom error pages. Globalization. Audit log. Site map. Tests. Contribution Before you start writing a pull request you should discuss it using GitHub issues. Bugs, improvements or features should be reported using GitHub issues. Questions should be asked at CodeProject. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/NonFactors/MVC5.Template"	"ASP.NET MVC 5 project starter template"	"true"
"Application Templates"	"ProjectScaffold"	"https://github.com/fsprojects/ProjectScaffold"	"A prototypical.NET solution recommended by the F# Foundation---includes file system setup, Paket for dependencies and FAKE for build/test automation. By default, build process also compiles documentation and generates NuGet packages."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"337"	"46"	"121"	"GitHub - fsprojects/ProjectScaffold: A prototypical .NET solution (file system layout and tooling), recommended for F# projects Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 46 Star 337 Fork 121 fsprojects/ProjectScaffold Code Issues 65 Pull requests 4 Pulse Graphs A prototypical .NET solution (file system layout and tooling), recommended for F# projects http://fsprojects.github.io/ProjectScaffold 502 commits 9 branches 0 releases 58 contributors F# 81.5% Shell 16.0% Batchfile 2.5% F# Shell Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags docs dsyme-patch-1 dsyme-patch-2 forki-patch-1 gh-pages init-git master paket revert-116-multiproject Nothing to show Nothing to show New pull request Latest commit 1f31b59 Jun 5, 2016 pblasucci Merge pull request #257 from rmunn/remove-bashisms … Make build.sh runnable by (almost) any shell Permalink Failed to load latest commit information. .github Create ISSUE_TEMPLATE.md Apr 4, 2016 .paket Use latest bootstrapper Aug 10, 2015 docs Merge branch 'master' of https://github.com/fsprojects/ProjectScaffold Jan 14, 2016 lib Improved contents of non-root README.md files Oct 29, 2013 src/FSharp.ProjectTemplate Update dependencies Apr 27, 2016 tests/FSharp.ProjectTemplate.Tests Update dependencies Apr 27, 2016 .gitattributes Add *.vb files to .gitattributes Aug 26, 2015 .gitignore Ignores .vscode folder Apr 25, 2016 .travis.yml missing space Dec 9, 2015 FSharp.ProjectScaffold.sln Removed involentary 2013 stuff Feb 25, 2015 LICENSE.txt added .txt extension to LICENSE file Oct 19, 2013 README.md more accurate description how to start the scaffolding process Jul 30, 2015 RELEASE_NOTES.md Minor spelling corrections Oct 20, 2014 appveyor.yml Update appveyor.yml Jul 18, 2014 build.cmd Use Paket's group feature Dec 29, 2015 build.sh Handle FSIARGS correctly in zsh Jun 5, 2016 build.template Merge pull request #229 from davidpodhola/master Jan 9, 2016 init.fsx Update project name in paket.template on init Apr 16, 2016 paket.dependencies Let Paket manage FSharp.Core Apr 24, 2016 paket.lock Update dependencies Apr 27, 2016 README.md ProjectScaffold This project can be used to scaffold a prototypical .NET solution including file system layout and tooling. This includes a build process that: updates all AssemblyInfo files compiles the application and runs all test projects generates SourceLinks generates API docs based on XML document tags generates documentation based on Markdown files generates NuGet packages and allows a simple one step release process. In order to start the scaffolding process run > build.cmd // on windows     $ ./build.sh  // on unix  Read the Getting started tutorial to learn more. Documentation: http://fsprojects.github.io/ProjectScaffold Build Status Mono .NET Maintainer(s) @forki @pblasucci @sergey-tihon The default maintainer account for projects under ""fsprojects"" is @fsprojectsgit - F# Community Project Incubation Space (repo management) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fsprojects/ProjectScaffold"	"A prototypical.NET solution recommended by the F# Foundation---includes file system setup, Paket for dependencies and FAKE for build/test automation. By default, build process also compiles documentation and generates NuGet packages."	"true"
"Application Templates"	"Serene"	"https://github.com/volkanceylan/Serenity"	"Serenity is an ASP.NET MVC application platform designed to simplify and shorten development of data-centric business applications with a service based architecture. Serene is a starter template to build Serenity applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"346"	"96"	"134"	"GitHub - volkanceylan/Serenity: Business Apps Made Simple with TypeScript / ASP.NET MVC Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 96 Star 346 Fork 134 volkanceylan/Serenity Code Issues 8 Pull requests 0 Wiki Pulse Graphs Business Apps Made Simple with TypeScript / ASP.NET MVC 1,909 commits 3 branches 0 releases 10 contributors JavaScript 62.2% C# 31.8% CSS 3.0% TypeScript 2.7% XSLT 0.2% Groff 0.1% JavaScript C# CSS TypeScript XSLT Groff Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master toplanti ts-experiments Nothing to show Nothing to show New pull request Latest commit d238d23 Jul 15, 2016 volkanceylan committed on GitHub Update CHANGELOG Permalink Failed to load latest commit information. .vs/config update packages and vs 2015 support Sep 2, 2015 References/Mono.Cecil remove unused files Mar 14, 2016 Serenity.Caching.Couchbase update Newtonsoft.Json to 8.0.3, toastr.d.ts to 0.3.0, jqueryui.d.ts … Apr 17, 2016 Serenity.Caching.Redis update Newtonsoft.Json to 8.0.2 Jan 14, 2016 Serenity.CodeGenerator split mostly third party, not often changing assets/code generation t… Jul 13, 2016 Serenity.Core made RadioButtonEditor work with enums/lookups and some more cosmetic… Jul 9, 2016 Serenity.Data.Entity make ListField clone items like RowListField on Row.Clone May 28, 2016 Serenity.Data added QuoteColumnAlias but seems to be not affecting OracleDialect, i… Jun 6, 2016 Serenity.Script.Core restructuring files Mar 22, 2016 Serenity.Script.Imports added visible option to Slick.Column, to make it possible for column … May 12, 2016 Serenity.Script.Test start writing tests with typescript Apr 8, 2016 Serenity.Script.UI made RadioButtonEditor work with enums/lookups and some more cosmetic… Jul 9, 2016 Serenity.Services else was actually required, not updatebyid after else Jun 27, 2016 Serenity.Test make RetrieveRequest interface members optional Jul 15, 2016 Serenity.Testing update Newtonsoft.Json to 8.0.3, toastr.d.ts to 0.3.0, jqueryui.d.ts … Apr 17, 2016 Serenity.Web make RetrieveRequest interface members optional Jul 14, 2016 Tools latest roslyn Jul 8, 2016 .gitignore revert add corelib under test to ignore May 17, 2016 Build.cake split mostly third party, not often changing assets/code generation t… Jul 13, 2016 Build.cmd first nuget package success Sep 7, 2014 CHANGELOG.md Update CHANGELOG Jul 15, 2016 LICENSE.md MIT lisansı eklendi. Jan 31, 2014 NuGet.config trying to solve Serenity as submodule and nuget packages reference in… Oct 20, 2015 README.md Added Serene animation May 13, 2016 Serenity.sln add serenity.caching.redis to solution Mar 21, 2015 SharedAssemblyInfo.cs 🆙 2.3.2 Jul 15, 2016 README.md Serenity Application Platform What is Serenity Platform Serenity is an ASP.NET MVC / TypeScript application platform designed to simplify and shorten development of data-centric business applications with a service based architecture. It aims to make development easier while reducing maintenance costs by avoiding boiler-plate code, reducing the time spent on repetitive tasks and applying best software design practices. Documentation See Serenity Developer Guide at https://www.gitbook.com/book/volkanceylan/serenity-guide for documentation. Türkçe dökümantasyon için şu kılavuz incelenebilir. Katkıları için Adem beye teşekkür ederiz. Quick Start The easiest and fastest way to get your hands dirty on Serenity is by using a sample application template (Serene) from Visual Studio Gallery at https://visualstudiogallery.msdn.microsoft.com/559ec6fc-feef-4077-b6d5-5a99408a6681 You can also install it directly from Visual Studio, by entering File -> New -> Project -> Online and searching for SERENE. Please read documentation at https://volkanceylan.gitbooks.io/serenity-guide for step-by-step tutorials. Support / Spread the Word You may contribute to the project by opening a pull request, adding documentation, sample source code, asking a question or suggesting an improvement etc. Just open an issue here with relevant links. If you are using Serenity in any open source / commercial projects let me know, so i can add it to the list of references. .NET open source community is a bit limited and is not so active, so if you help spread the word by posting in forums, starring the project here and in Visual Studio Gallery, i'll appreciate it much. Video Tutorials Youtube Channel https://www.youtube.com/channel/UCUL4l2DlXCOCprdUfsoP0iw Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/volkanceylan/Serenity"	"Serenity is an ASP.NET MVC application platform designed to simplify and shorten development of data-centric business applications with a service based architecture. Serene is a starter template to build Serenity applications."	"true"
"Application Templates"	"Side-Waffle"	"https://github.com/LigerShark/side-waffle"	"Large collection of useful templates for Web and Desktop development."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"532"	"62"	"220"	"GitHub - ligershark/side-waffle: A collection of Item- and Project Templates for Visual Studio Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 62 Star 532 Fork 220 ligershark/side-waffle Code Issues 30 Pull requests 2 Wiki Pulse Graphs A collection of Item- and Project Templates for Visual Studio 912 commits 9 branches 4 releases 50 contributors JavaScript 78.6% C# 15.7% HTML 1.6% CSS 1.6% PowerShell 1.3% ApacheConf 1.0% Other 0.2% JavaScript C# HTML CSS PowerShell ApacheConf Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags CustomWizardSample add-google-analytics autopublish imar itemtempcustpath localrefs master multiprojectsample release Nothing to show v1.20 v1.19 v1.18 1.21 Nothing to show New pull request Latest commit 49f675d Jun 14, 2016 sayedihashimi committed on GitHub Merge pull request #382 from ligershark/aspt4 … updating t4 from prog files #330 Permalink Failed to load latest commit information. .nuget updates for nuget Aug 29, 2013 LigerShark.Templates Merge pull request #331 from RandomlyKnighted/telemetry-fix Jan 27, 2016 Project Templates Packages are updated to lastest version as of 17/02/2016 Feb 17, 2016 SideWaffle.Common Revert ""deleting files that are no longer used"" Jul 3, 2014 TemplatePack updating t4 from prog files #330 Jun 13, 2016 assemblies Added assembly Apr 4, 2015 item-templates/PowerShell Added custom parameter for template type Dec 14, 2015 project-templates/Windows Desktop/ConsoleApplicationAsync Added custom parameter for template type Dec 14, 2015 .gitattributes Initial commit Aug 9, 2013 .gitignore minor change to telemetry Dec 16, 2015 LICENSE.md Added LICENCE.md Aug 12, 2013 README.md Update README.md Oct 6, 2015 SideWaffle.sln Disabled replacments on vstemplate file for the SW-ProjectVSTemplateF… Mar 12, 2016 add-telemtrywizard.ps1 Added wizard for Google Analytics Oct 8, 2015 add-templateid.ps1 adding a templateid to all templates, also adding script May 22, 2015 add-templatetypeparameter.ps1 Add fix for identifying project templates from item templates Dec 14, 2015 appveyor.ps1 Updated Appveyor script to correctly push nightly builds only for the… Mar 30, 2016 appveyor.yml Updated Appveyor to use release-notes.xml instead of release-notes.html Sep 14, 2015 build-main.ps1 Removed write-host line Mar 22, 2016 build-templates.proj updating to 1.1.2-beta of templatebuilder Dec 25, 2014 multi-project-templates.docx adding multi-proj doc Jun 28, 2014 release-notes.xml Updated the release notes for jscsrc item template Mar 31, 2016 screenshot.png optimizing images Mar 2, 2014 README.md SideWaffle for Visual Studio SideWaffle.com - download the extension The ultimate web developer template pack A collection of Item Templates for Visual Studio 2012/2013/2015 that makes any web developer's life much easier. The result of a search for ""angular"" in the ""Add new item"" dialog Add new templates Fork the project Clone it to your computer Install the Visual Studio 2012 SDK, Visual Studio 2013 SDK, or Visual Studio 2015 SDK. Open the solution in Visual Studio Watch this video tutorial After adding your templates, send us a pull request Only high quality templates with broad appeal will be accepted SideWaffle templates can be installed in Visual Studio 2012, 2013 and 2015, regardless of the version you use for creating new templates. Learn more about on MSDN about customizing item templates Releasing updates Here in the beginning, we are probably going to release updates rather frequently to get a feel for what the best user experience might be. Expect that we will be moving toward a fixed schedule - for instance every 2-3 weeks - when we have more templates submitted from the Visual Studio community. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/LigerShark/side-waffle"	"Large collection of useful templates for Web and Desktop development."	"true"
"Application Templates"	"Template10"	"https://github.com/Windows-XAML/Template10"	"Windows 10 templates with design patterns."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"937"	"204"	"366"	"GitHub - Windows-XAML/Template10: Making Windows 10 apps awesome Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 204 Star 937 Fork 366 Windows-XAML/Template10 Code Issues 25 Pull requests 6 Wiki Pulse Graphs Making Windows 10 apps awesome 1,461 commits 2 branches 2 releases 69 contributors C# 99.0% Other 1.0% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags NavigationRefactor master Nothing to show v0.04 V0.05 Nothing to show New pull request Latest commit 8451536 Jul 15, 2016 Viachaslau-Zinkevich committed with JerryNixon ViewService enhancement to control Lifetime of secondary windows (#941) … * Added ViewService for secondary view safe creation and closing management. Added Example project ""MultipleViews"" to show ViewService usage.  * Added some comments  * Changed NavigationService to utilize ViewService inside Permalink Failed to load latest commit information. .vs/config Removed the ProjectWizard. We are not doing that. Aug 27, 2015 Assets Adding more samples May 14, 2016 Lib Updated for Nuget 1.1.10 Apr 26, 2016 Samples ViewService enhancement to control Lifetime of secondary windows (#941) Jul 15, 2016 Template10 (Installer) ViewService enhancement to control Lifetime of secondary windows (#941) Jul 15, 2016 Template10 (Library) ViewService enhancement to control Lifetime of secondary windows (#941) Jul 15, 2016 Template10 (Services) Nag service (#1104) Jul 12, 2016 Template10 (Tests) Fixed encoding (ASCII -> UTF-8) Nov 15, 2015 Template10 (Validation) Update ""Microsoft.NETCore.UniversalWindowsPlatform"" to version 5.1.0 Apr 14, 2016 Template10.Core/Template10.Core Updated for NuGet Jun 3, 2016 Templates (Items)/Items Update dependency to Newtonsoft.Json from 8.0.3 to 9.0.1 (latest) (#1099 Jul 11, 2016 Templates (Project) Merge branch 'master' of https://github.com/Windows-XAML/Template10.git Jul 12, 2016 .gitattributes Jerry Nixon Apr 9, 2015 .gitignore added last visual feedback to voice to textbox Feb 5, 2016 LICENSE.md Adding Template 10 license Aug 24, 2015 README.md Update README.md Nov 3, 2015 Template10.sln ViewService enhancement to control Lifetime of secondary windows (#941) Jul 15, 2016 template10.snk Make Template10 assemblies strong-named. Sep 13, 2015 README.md Template 10: Getting Started If you want Template 10, just open up Visual Studio 2015 and search ""Template 10"" in the Extension Manager. After you install it, when you go File>New>Project the Template 10 project template will be in your list. After you create a project, head to our documentation wiki and get started: http://aka.ms/Template10 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Windows-XAML/Template10"	"Windows 10 templates with design patterns."	"true"
"Artificial Intelligence"	"AIMLBot (Program#)"	"http://aimlbot.sourceforge.net/"	"A small, fast, standards-compliant yet easily customizable implementation of an AIML (Artificial Intelligence Markup Language) based chatter bot in C#."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Welcome to Program# - C# AIML .NET Go to content Go to menu Program# - AIMLbot.dll AIMLBot (Program#) is a small, fast, standards-compliant yet easily customizable implementation of an AIML (Artificial Intelligence Markup Language) based chatter bot in C#. AIMLBot has been tested on both Microsoft's runtime environment and Mono. Put simply, it will allow you to chat (by entering text) with your computer using natural language. This is the second version of the library and it has been re-written from scratch. It now boasts: Better cross-platform compatibility. Support for .NET 1.1, 2.0 and XNA as well as the open source Mono project (tested under version 1.1). Testing on Windows Vista with version 3.0 of the .NET platform is pending. A completely new modular architecture to make it easier for developers to extend and add functionality. A simpler and more logical API. Standards compliant AIML support with the option for custom tags. Very small size (currently only 56k). Very fast (over 30,000 categories processed in under a second). Inclusion of a comprehensive test suite including over 200 unit tests (based upon nUnit). A means of saving the bot's ""brain"" as a binary file (Graphmaster.dat). Some simple code snippets and examples for developers to get started (simple windows and console based applications as well as a sample custom tags library). Appropriately commented code. Comprehensive documentation. Sections Home About Download Source Code (SVN) Documentation Sourceforge Page All trademarks and copyrights on this page are owned by their respective owners. Program# / AIMLbot is © 2006 Nicholas H.Tollervey (ntoll.org)"	"null"	"null"	"A small, fast, standards-compliant yet easily customizable implementation of an AIML (Artificial Intelligence Markup Language) based chatter bot in C#."	"true"
"Artificial Intelligence"	"SIML"	"http://simlbot.com/"	"Synthetic Intelligence Markup Language, a next generation Chatbot & Digital Assistant Language."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"SIML - The Synthetic Intelligence Markup Language Synthetic Intelligence Markup Language Next generation Digital Assistant & Bot Language by Synthetic Intelligence Network SIML Quick Start Next Let's create intelligent Machines SIML is the next step in Bot technology that pushes the state-of-the-art a step further. With SIML you will never miss anything as we have put it all under the hood for you. Developers can easily integrate Natural Language Processing into their .Net and Mono applications while the users can enjoy fast intelligent natural language interactions. Design goals for SIML focuses on Advanced Bots, Digital Assistants and Natural Language Interface for Applications, Databases, Games and Websites. Next Syn Bot Studio Syn Bot Studio offers a comprehensive collection of tools to develop intelligent Bots that target desktops, mobile and web platforms. It doesn't matter if you are creating your first Bot or not you can always leverage your skill using Bot Studio's state-of-the-art development environment. Create intelligent and faster bots with Code Analysis, AIML to SIML converter, JavaScript Editor, Regex Tester and smooth Auto-Complete. Requires .Net Framework 4.5 or above Download Syn Bot Studio Next Synthetic Intelligence Markup Language Interpreter More than a specification. Syn Bot is our official and specification compliant SIML Interpreter that can be imported to any .Net and Mono Project using NuGet. We deploy updates on a regular basis to keep you in pace with upcoming technologies. NuGet PM> Install-Package Syn.Bot Next Synthetic Intelligence Markup Language Any sufficiently advanced technology is indistinguishable from magic - Arthur C. Clarke Optimize your Bot Learn exactly where and how a response is generated using Stack information. Use advanced Graph information to optimize speed filtration, normalization and scripts.Load large project in seconds, create multiple bots or even combine bots of different domains using templates feature. Deploy as a Standalone Package Share your project online or load your entire project into your application using a single Portable SIML Package. SIML Packages are extremely small when compared to SIML Projects. A typical 16 MB project is approximately 3MB when exported to an SIML Package. SIML Packages cannot be read by any Text-Editor. JavaScript SIML offers scripting capability as an in-built feature. Bot Studio comes with its own Script evaluator that internally uses the same Scripting Engine used by SIML Bot. Ensuring that the results are the same during run-time. Code Analysis Stop Repeating. Using code analysis you can finally stop repeating patterns and responses, check exactly where you've made mistakes and where you could improve your code. Save scripts, patterns, random responses and phrases under separate categories and reuse them when necessary. Code Conversion SIML > AIML. Convert your AIML code to SIML in seconds using the intelligent SIML Converter. SIML Converter can automatically correct common AIML errors before conversion including typos, usage of deprecated tags and html elements. Power of Regular Expressions Never miss the best of Regular Expressions using the Regular Expression Tester. Check where the Regular Expression has matched, how long it took to find a match and how it effects filtration and normalization. Let us do the honour of getting you started You've got 99 Problems but Bot ain't one. Twitter Facebook LinkedIn YouTube GitHub © Synthetic Intelligence Network. All rights reserved. SIML & Bot Studio exclusively for You."	"null"	"null"	"Synthetic Intelligence Markup Language, a next generation Chatbot & Digital Assistant Language."	"true"
"Assembly Manipulation"	"dnSpy"	"https://github.com/0xd4d/dnSpy"	"dnSpy is a.NET assembly editor, decompiler, and debugger forked from ILSpy."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"790"	"120"	"165"	"GitHub - 0xd4d/dnSpy: .NET assembly editor, decompiler, and debugger Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 120 Star 790 Fork 165 0xd4d/dnSpy Code Issues 20 Pull requests 0 Wiki Pulse Graphs .NET assembly editor, decompiler, and debugger 3,406 commits 1 branch 1 release 41 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2.0.2.0 Nothing to show New pull request Latest commit 1657ade Jul 11, 2016 0xd4d Update translated strings Permalink Failed to load latest commit information. AvalonEdit @ f5647dd Update AvalonEdit submodule Feb 20, 2016 Examples tool windows: add Default{Horizontal,Vertical} locs Apr 1, 2016 ICSharpCode.Decompiler Don't remove empty ctors if all members must be shown Apr 8, 2016 Licenses Update translated strings Jul 11, 2016 NRefactory Switch to VS2015 and C# 6. Fixes #98 Mar 27, 2016 NRefactory2 @ 8e089cf Some optimizations Mar 1, 2016 SharpTreeView Switch to VS2015 and C# 6. Fixes #98 Mar 27, 2016 dnSpy-x86 Move asm version attrs to a common file Apr 6, 2016 dnSpy.Analyzer Update translated strings Jul 10, 2016 dnSpy.AsmEditor Update translated strings Jul 10, 2016 dnSpy.BamlDecompiler Update translated strings Jul 10, 2016 dnSpy.Console Update translated strings Jul 10, 2016 dnSpy.Contracts Move asm version attrs to a common file Apr 6, 2016 dnSpy.Debugger Update translated strings Jul 10, 2016 dnSpy.Decompiler.Shared Move asm version attrs to a common file Apr 6, 2016 dnSpy.Languages.ILSpy Update translated strings Jul 10, 2016 dnSpy.Languages Update translated strings Jul 10, 2016 dnSpy.Scripting.Roslyn Update translated strings Jul 10, 2016 dnSpy.Shared Update translated strings Jul 10, 2016 dnSpy Update translated strings Jul 10, 2016 dndbg Move asm version attrs to a common file Apr 6, 2016 dnlib @ f77429d Update debugger scripting code Mar 19, 2016 .gitattributes Add .gitattributes and normalize newlines Oct 1, 2013 .gitignore Ignore .vs/ dir Mar 20, 2016 .gitmodules Update URLs docs and build files Jul 1, 2015 README.md Add CREDITS.txt Mar 15, 2016 dnSpy.sln Switch to VS2015 and C# 6. Fixes #98 Mar 27, 2016 dnSpy.snk Add some debugger classes Aug 26, 2015 README.md ??? dnSpy is a tool to reverse engineer .NET assemblies. It includes a decompiler, a debugger and an assembly editor (and more) and can be easily extended by writing your own plugin. It uses dnlib to read and write assemblies so it can handle obfuscated assemblies (eg. malware) without crashing. License GPLv3 Credits EXE S B Translate Wiki EOF Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/0xd4d/dnSpy"	"dnSpy is a.NET assembly editor, decompiler, and debugger forked from ILSpy."	"true"
"Assembly Manipulation"	"Fody"	"https://github.com/Fody/Fody"	"Extensible tool for weaving.net assemblies"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1088"	"123"	"131"	"GitHub - Fody/Fody: Extensible tool for weaving .net assemblies Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 123 Star 1,088 Fork 131 Fody/Fody Code Issues 9 Pull requests 2 Wiki Pulse Graphs Extensible tool for weaving .net assemblies 559 commits 2 branches 21 releases 30 contributors C# 97.1% PostScript 2.8% PowerShell 0.1% C# PostScript PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master removeTargetsHack Nothing to show 1.29.0-beta01 1.13.8 1.13.7 1.13.6 1.13.1 1.12.0 1.11.5 1.9.8 1.9.7 1.9.4 1.8.14 1.8.13 1.8.11 1.8.1 1.8 1.7.1 1.6.4 1.6.3 1.5.0 1.3.0 1.0.0 Nothing to show New pull request Latest commit 1823eb9 Jul 15, 2016 SimonCropp refs Permalink Failed to load latest commit information. Fody.Tests refs Jul 15, 2016 Fody update to 4.5.2 Jul 15, 2016 FodyCommon.Tests bump refs Jul 15, 2016 FodyCommon update to 4.5.2 Jul 15, 2016 FodyIsolated.Tests refs Jul 15, 2016 FodyIsolated update to 4.5.2 Jul 15, 2016 Icons fix icon path Apr 3, 2013 Images icons Apr 1, 2013 Integration bump refs Jul 15, 2016 Lib/Cecil bump to new cecil Feb 14, 2016 NuGet update to 4.5.2 Jul 15, 2016 NuGetCecil update to 4.5.2 Jul 15, 2016 SampleTask.Fody update to 4.5.2 Jul 15, 2016 Tools Add nuget updater Jul 15, 2016 WeaverNugetTemplates remove msbuild hack Feb 13, 2016 packages dont use fody to build fody Sep 6, 2014 .gitattributes icons Apr 1, 2013 .gitignore add custom cecil nuget May 10, 2014 CommonAssemblyInfo.cs bump version Feb 1, 2016 Fody.sln remove msbuild hack Feb 13, 2016 Fody.sln.DotSettings sign move back to location Mar 26, 2014 Key.snk fix build Aug 3, 2012 License.txt fix license Oct 18, 2012 NugetConfigReader.cs dont use fody to build fody Sep 6, 2014 README.md Update README URLs based on HTTP redirects Jul 1, 2016 README.md Extensible tool for weaving .net assemblies Introduction Manipulating the IL of an assembly as part of a build requires a significant amount of plumbing code. This plumbing code involves knowledge of both the MSBuild and Visual Studio APIs. Fody attempts to eliminate that plumbing code through an extensible add-in model. The nuget package https://www.nuget.org/packages/Fody/ PM> Install-Package Fody  Why? This technique of ""weaving"" in new instructions is fantastically powerful. You can turn simple public properties into full INotifyPropertyChanged implementations, add checks for null arguments, add Git hashes to your Assemblies, even make all your string comparisons case insensitive. The plumbing tasks Fody handles Injection of the MSBuild task into the build pipeline Resolving the location of the assembly and pdb Abstracts the complexities of logging to MSBuild Reads the assembly and pdb into the Mono.Cecil object model Re-applying the strong name if necessary Saving the assembly and pdb Fody Uses Mono.Cecil and an add-in based approach to modifying the IL of .net assemblies at compile time. No install required to build No attributes required No references required Supports .net 3.5, .net 4, .net 4.5, .net 4.6, Silverlight 4, Silverlight 5, Windows Phone 7, Windows Phone 8, Metro on Windows 8, Mono, MonoTouch, MonoDroid and PCL Usage See SampleUsage for an introduction on using Fody. Naming The name ""Fody"" comes from the small birds that belong to the weaver family Ploceidae. Tools and Products Used JetBrains dotTrace JetBrains Resharper Mono Cecil Samples BasicFodyAddin A simple project meant to illustrate how to build an addin. FodyAddinSamples is a single solution that contains a working copy of every fody addin. Addins List Anotar Simplifies logging through a static class and some IL manipulation. ArraySlice ArraySlice allows to build shared memory array views without performance impact. It uses IL manipulation to achieve the fastest implementation. AssertMessage Generates 'message' from sourcecode and adds it to assertion. AsyncErrorHandler Integrates error handling into async and TPL code. AutoDependencyProperty Generates WPF DependencyProperty boilerplate from automatic C# properties. AutoLazy Automatically implements the double-checked locking pattern on specified properties and methods. BasicFodyAddin A simple project meant to illustrate how to build an addin. Caseless Change string comparisons to be case insensitive. Catel For transforming automatic properties into Catel properties. Cilador Write your own mixins in C# for code reuse without inheritance. Commander Injects ICommand properties and implementations for use in MVVM applications. ConfigureAwait Allows you to set the async ConfigureAwait at a global level for all your await calls. Costura For embedding references as resources. CryptStr Encrypts literal strings in your .NET assemblies. DependencyInjection automatic dependency injection for Ninject, Autofac and Spring. EmptyConstructor Adds an empty constructor to classes even if a non empty one is defined. EmptyStringGuard Adds empty string argument checks to an assembly. EnableFaking Allows faking your types without writing interfaces for testing purposes only. Equals Generate Equals, GetHashCode and operators methods from properties. Expose Exposes members and optionally implements interface of a field declared in class. ExtraConstraints Facilitates adding constraints for Enum and Delegate to types and methods. Fielder Converts public fields to public properties. FodyDependencyInjection Dependency injection with Fody add-ins. Freezable Implements the Freezable pattern. InfoOf Provides methodof, propertyof and fieldof equivalents of typeof. Ionad Replaces static method calls. Janitor Simplifies the implementation of IDisposable. JetBrainsAnnotations Leverage JetBrains Annotations without the need for JetBrainsAnnotations.dll. LoadAssembliesOnStartup Loads references on startup by using the types in the module initializer MethodCache Caches return values of methods decorated with a CacheAttribute. MethodDecorator Decorate arbitrary methods to run code before and after invocation. MethodTimer Injects method timing code. Mixins A mixin is a class that provides a certain functionality to be inherited or just reused by a subclass. ModuleInit Adds a module initializer to an assembly. MrAdvice .NET aspect weaver. Mutable Make F# setters for union types and eliminate need for CLIMutable attribute for records. Mvid Adds the ability to specify the assembly MVID (Module Version Id). NameOf Provides strongly typed access to a compile-time string representing the name of a variable, field, property, method, event, enum value, or type. Nancy.ModelPostprocess Modify Nancy models after route execution but before serialization NullGuard Adds null argument checks to an assembly Obsolete Helps keep usages of ObsoleteAttribute consistent. Padded Adds padding to fight the false sharing problem. PropertyChanged Injects INotifyPropertyChanged code into properties. PropertyChanging Injects INotifyPropertyChanging code into properties. Publicize Converts non-public members to public hidden members. QueryValidator Validates your DB queries during a build. ReactiveUI Generates ReactiveUI RaisePropertyChange notifications for properties and ObservableAsPropertyHelper properties. RemoveReference Facilitates removing references in a compiled assembly during a build. Resourcer Simplifies reading embedded resources from an Assembly. RomanticWeb Fody weaver plugin for RomanticWeb instrumentation. Scalpel Strips tests from an assembly. Seal mark all non-virtual(abstract, non-sealed) types as sealed by default. SemVer versions your assemblies according to SemVer based on your CVS commit messages. Spring Spring constructor configuration. Stamp Stamps an assembly with git data. StampSvn Stamps an assembly with svn data. StaticProxy Helps proxy dynamic code emitting: Moq, FakeItEasy, Castle Dynamic, LinFu. Stiletto Compile-time static analysis and optimization for the Stiletto IoC library. SwallowExceptions Swallow Exceptions in targeted methods. ToString Generate ToString method from public properties. Tracer Adds trace-enter and trace-leave log entries for selected methods. Undisposed Debugging tool to track down undisposed objects. Usable Adds using statements for local variables that have been created, and implement IDisposable. Validar Injects IDataErrorInfo or INotifyDataErrorInfo code into a class at compile time. Vandelay Simplifies MEF importing\exporting. Visualize Adds debugger attributes to help visualize objects. Virtuosity Change all members to virtual. With Methods to return copies of immutable objects with one property modified. YALF Yet Another Logging Framework. Tail Adds a postfixed method call instruction to recursive calls. Icon Bird designed by Marco Hernandez from The Noun Project More Info AddinSearchPaths DeployingAddinsAsNugets Home HowToWriteAnAddin InSolutionWeaving AssemblyVerification ModuleWeaver PdbReWritingAndDebugging SampleUsage Setup SignedAssemblies SupportedRuntimesAndIde TaskAddsAFlagInterface TaskCouldNotBeLoaded WeavingTaskOptions ThrowingAnExceptionFromAnAddin Mono Support Building From A Network Share With thanks to Resharper from Jetbrains http://www.jetbrains.com/resharper/ TeamCity from Jetbrains http://www.jetbrains.com/teamcity/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Fody/Fody"	"Extensible tool for weaving.net assemblies"	"true"
"Assembly Manipulation"	"Mono.Cecil"	"https://github.com/jbevain/cecil"	"Cecil is a library to generate and inspect programs and libraries in the ECMA CIL form."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"703"	"100"	"257"	"GitHub - jbevain/cecil: Cecil is a library to generate and inspect .NET programs and libraries. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 100 Star 703 Fork 257 jbevain/cecil Code Issues 26 Pull requests 5 Wiki Pulse Graphs Cecil is a library to generate and inspect .NET programs and libraries. http://cecil.pe 778 commits 5 branches 7 releases 29 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.9.6-nuget master net_core new-symbols symbols Nothing to show 0.9.6 0.9.5 0.9.4 0.9.3 0.9.2 0.9.1 0.9 Nothing to show New pull request Latest commit 94ea613 Jul 14, 2016 jbevain Fix NET_3_5 compilation Permalink Failed to load latest commit information. Mono.Cecil.Cil Fix NET_3_5 compilation Jul 14, 2016 Mono.Cecil.Metadata Merge branch 'lowermemuse' into ppdb_lowermemuse Jul 14, 2016 Mono.Cecil.PE Rename GetFullyQualifiedName to GetFileName Jul 14, 2016 Mono.Cecil Rename GetFullyQualifiedName to GetFileName Jul 15, 2016 Mono.Collections.Generic Style fixes Jul 12, 2016 Mono.Security.Cryptography Simplify ifdefing out of CryptoService May 28, 2015 Mono Add support for the portable pdb format Jul 13, 2016 System.Security.Cryptography Compiling version of PCL May 28, 2015 Test Fix NET_3_5 compilation Jul 15, 2016 rocks Merge branch 'lowermemuse' into ppdb_lowermemuse Jul 14, 2016 symbols Add support for the portable pdb format Jul 13, 2016 .gitattributes Use auto EOL for text Nov 13, 2014 .gitignore Add support for the portable pdb format Jul 13, 2016 .travis.yml Added travis CI Jun 1, 2015 LICENSE.txt This file doesn't use any markdown Jan 19, 2016 Mono.Cecil.Tests.settings Fix eol and props Nov 13, 2014 Mono.Cecil.csproj Merge branch 'master' into winrt-projections Jul 14, 2016 Mono.Cecil.nunit Added travis CI Jun 1, 2015 Mono.Cecil.nuspec Remove support for net_2_0 May 28, 2015 Mono.Cecil.settings Remove support for net_2_0 May 28, 2015 Mono.Cecil.sln Remove support for net_2_0 May 28, 2015 Mono.Cecil.sln.DotSettings Add support for the portable pdb format Jul 13, 2016 ProjectInfo.cs Remove support for building against SL and the CF in favor of a PCL May 28, 2015 README.md Add travis badge Jun 2, 2015 appveyor.yml Add appveyor config to the repo Jun 2, 2015 mono.snk initial commit Apr 12, 2010 README.md Cecil Mono.Cecil is a library to generate and inspect programs and libraries in the ECMA CIL form. To put it simply, you can use Cecil to: Analyze .NET binaries using a simple and powerful object model, without having to load assemblies to use Reflection. Modify .NET binaries, add new metadata structures and alter the IL code. Cecil has been around since 2004 and is widely used in the .NET community. The best way to learn how to use Cecil is to dive into the Cecil.Samples repository. It's a growing collection of samples with the goal of showing how to get things done using Cecil, as IL manipulation can sometime get tricky. Read about the Cecil development on the development log. To discuss Cecil, the best place is the mono-cecil Google Group. Cecil is a project under the benevolent umbrella of the .NET Foundation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jbevain/cecil"	"Cecil is a library to generate and inspect programs and libraries in the ECMA CIL form."	"true"
"Assets"	"Cassette"	"https://github.com/andrewdavey/cassette"	"Manages.NET web application assets (scripts, css and templates)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"506"	"30"	"142"	"GitHub - andrewdavey/cassette: Manages .NET web application assets (scripts, css and templates) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 30 Star 506 Fork 142 andrewdavey/cassette Code Issues 109 Pull requests 18 Pulse Graphs Manages .NET web application assets (scripts, css and templates) http://getcassette.net 1,826 commits 6 branches 15 releases Fetching contributors C# 64.5% JavaScript 29.7% CSS 5.4% PowerShell 0.2% ASP 0.1% Puppet 0.1% C# JavaScript CSS PowerShell ASP Puppet Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags appcache asset-transformer cache-renderer-type jstmpl master perf Nothing to show v2.4.2 v2.4.1 v2.4.0 v2.3.0 v2.2.2 v2.2.1 v2.2.0 v2.1.0 v2.0.0 v1.2.0 v1.1.0 v1.0.2 v1.0.1 v1.0.0 v0.9.6 Nothing to show New pull request Latest commit a2d9870 Sep 2, 2014 andrewdavey Remove broken external script Permalink Failed to load latest commit information. contributing Removed -FX35 solution configurations to clean up configuration manager Feb 24, 2012 examples Changed all nuget hint paths to be relative to solution, this makes i… Jul 15, 2013 src Remove broken external script Sep 2, 2014 tools Include dependency so that everyone can build solution May 30, 2013 .gitignore Ignore cassette-cache directory Sep 4, 2012 Cassette.targets Fix build after .net 4.5 update Mar 3, 2013 build.3.5.xml Fix up generation of 3.5 projects Feb 27, 2013 build.4.0.xml Fix up generation of 3.5 projects Feb 27, 2013 build.bat Fix up generation of 3.5 projects Feb 27, 2013 build.package.xml Include dependency so that everyone can build solution May 30, 2013 license.txt Switch to the MIT License. Dec 22, 2011 readme.md Update readme.md Dec 28, 2012 readme_fx35.md Removing lib35 stuff from Nuget packages and opting for manual zip re… Mar 6, 2012 test.bat Fix up generation of 3.5 projects Feb 27, 2013 readme.md Cassette Cassette's website: getcassette.net. Web applications today are using more JavaScript than ever. As a result, structuring these files is becoming a problem. You wouldn't put all your C# classes within a single .cs file, so why do that with JavaScript? Creating lots of smaller .js files is good development practice. However, downloading 100 individual files will make YSlow very unhappy! Better to concatenate and minify the files into logical ""bundles"" for use in production. In ASP.NET there currently exist partial solutions, but nothing handles all the following: Parse the dependencies between scripts and correctly order the files. Using JavaScript 'reference' comments already gives you VS intellisense, now they also give automatic build dependency ordering! View pages AND partial views can reference scripts. Layout/master page makes a single ""RenderScripts"" call to generate all the required script elements. Rich Debug-time output. Full, individual source scripts are rendered into the HTML. So debugging with tools like FireBug match one-to-one with your source. Efficient Release-time output. JavaScript files are concatentated and minified into bundles. Each bundle is versioned using a hash and is very cache friendly. No change in view code between debug and release. Compile CoffeeScript & LESS (in both debug and release modes). Build modules at runtime and cache in isolated storage. No complex build tooling required and medium-trust is fully supported. Cassette does all this and more! Install into your web application using Nuget Install-Package Cassette.Aspnet  Documentation Check out the docs on the website for help getting started. Contributing Checkout the contributing folder in the repository for more information. Support and Discussion Join the Discussion Group to ask questions and learn about new features. If you have questions, let me know here: @getcassette. Commercial support is also available if you need it. Open Source License Cassette is free software, distributed under the MIT License Copyright (c) 2012 Andrew Davey Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/andrewdavey/cassette"	"Manages.NET web application assets (scripts, css and templates)"	"true"
"Assets"	"NodeAssets"	"https://github.com/ajorkowski/NodeAssets"	"Asset Manager for.net that has live css updates using SignalR and can optionally leverage NodeJS compilers"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"3"	"2"	"GitHub - ajorkowski/NodeAssets: Asset Manager for .net that has live css updates using SignalR and can optionally leverage NodeJS compilers Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 15 Fork 2 ajorkowski/NodeAssets Code Issues 0 Pull requests 0 Pulse Graphs Asset Manager for .net that has live css updates using SignalR and can optionally leverage NodeJS compilers http://ajorkowski.github.com/NodeAssets 55 commits 2 branches 0 releases 2 contributors C# 53.6% JavaScript 43.8% CSS 2.3% Other 0.3% C# JavaScript CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 821ed1c May 24, 2016 ajorkowski Fixed small bug on cross domain - shouldn't enable on url based imports Permalink Failed to load latest commit information. .vs/config Updated all dependencies and added ETag/Last Modified headers May 19, 2016 NodeAssets.AspNet Fixed small bug on cross domain - shouldn't enable on url based imports May 24, 2016 NodeAssets.Compilers.CoffeeSharp v3 update of node assets May 22, 2016 NodeAssets.Compilers.Minify v3 update of node assets May 23, 2016 NodeAssets.Compilers.Node v3 update of node assets May 23, 2016 NodeAssets.Compilers.Sass Added measuring of timings, bug fixes around compiling May 23, 2016 NodeAssets.Core Added measuring of timings, bug fixes around compiling May 23, 2016 NodeAssets.Example Added CORS handler for JS file for CDN May 24, 2016 NodeAssets.Test v3 update of node assets May 23, 2016 .gitignore Removed binaries Feb 1, 2013 NodeAssets.sln v3 update of node assets May 23, 2016 NuGet.exe v3 update of node assets May 23, 2016 readme.md Changed link on readme to the website as opposed to my blog... Jul 14, 2012 readme.md Node Assets Provides a complete asset manager solution including compilation from coffee/styles, minification, combination, compression, and also a refresh-on-change css live updater Get it using Nuget Install-Package NodeAssets.AspNet More info? Go to the website http://ajorkowski.github.com/NodeAssets Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ajorkowski/NodeAssets"	"Asset Manager for.net that has live css updates using SignalR and can optionally leverage NodeJS compilers"	"true"
"Assets"	"Bundle Transformer"	"http://bundletransformer.codeplex.com/"	"Modular extension for. Its modules supports LESS, Sass, CoffeeScript, TypeScript, Mustache, Handlebars, Autoprefixer along with a bunch of different JS and CSS minifiers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Bundle Transformer - a modular extension for ASP.NET Web Optimization Framework - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe Project Description Bundle Transformer - a modular extension for System.Web.Optimization (also known as the Microsoft ASP.NET Web Optimization Framework). Classes StyleTransformer and ScriptTransformer, included in the core of Bundle Transformer and implement interface IBundleTransform. They are intended to replace the standard classes CssMinify and JsMinify. The main differences of StyleTransformer and ScriptTransformer classes from a standard implementations: ability to exclude unnecessary assets when adding assets from a directory, does not produce the re-minification of pre-minified assets, support automatic transformation of relative paths to absolute in CSS-code (by using UrlRewritingCssPostProcessor), etc. These classes do not produce the minification of code in runtime, but this feature can be added by installing of minifier-modules (now available modules based on Microsoft Ajax Minifier, YUI Compressor for .NET, Google Closure Compiler, Douglas Crockford's JSMin, Dean Edwards' Packer, Mihai Bazon's UglifyJS, Sergey Kryzhanovsky's CSSO (CSS Optimizer), WebGrease and Clean-css). In addition, you can also install translator-modules that implement the translation of code on intermediate languages (LESS, Sass, SCSS, CoffeeScript, TypeScript, Mustache (by using Hogan) and Handlebars). Apart from this, in the Bundle Transformer there is a third type of modules - postprocessors. Postprocessors runs after translators and before minifiers. Now available following postprocessors: URL rewriting CSS-postprocessor (included in core) and postprocessor-module based on the Andrey Sitnik's Autoprefixer. This extension will help your web applications successfully pass a most part of the tests in YSlow. NuGet Packages Core Bundle Transformer: Core Bundle Transformer: IntelliSense Translators Bundle Transformer: LESS Bundle Transformer: Sass and SCSS Bundle Transformer: CoffeeScript Bundle Transformer: TypeScript Bundle Transformer: Hogan Bundle Transformer: Handlebars Postprocessors Bundle Transformer: Autoprefixer Minifiers Bundle Transformer: Microsoft Ajax Bundle Transformer: YUI Bundle Transformer: Closure Bundle Transformer: JSMin Bundle Transformer: Packer Bundle Transformer: UglifyJS Bundle Transformer: CSSO Bundle Transformer: WebGrease Bundle Transformer: Clean-css Unofficial modules AngularBundle by Andreas Hjortland BundleTransformer.TypeScript.Unofficial by Alexey Kushnikov Who's Using Bundle Transformer If you use Bundle Transformer in some project, please send me a message so I can include it in this list: Software ASP.NET MVC5 with Bootstrap 3.1.1 LESS by Krzysztof Osowicki bootlessmvc by Jarek Dubrownik Bundle Transformer LESS Theme Builders by Ben Embery Dynamic Bundles for ASP.NET MVC by Matt Perdeck EonicWeb5 Equ Umbraco Bootstrap LearnAngular by Levi Botelho ModernSkins by Sam Salisbury Open Government Data Initiative v6 Optimus by Tim Geyssens Sassy by Warren Buckley SmartStore.NET Vault MVC Library by Admir Tuzovic, Josip Dusper, Mirza Dervisevic and Fedja Omeragic Web Performance Helpers for ASP.NET MVC by Ben Embery Websites CustomersCanvas.com Website of Latvia Dance Sport Federation (LSDF) Bundle Transformer was created and is maintained by Andrey Taritsyn. Last edited May 23 at 12:45 PM by Taritsyn, version 82 current Bundle Transformer 1.9.116 date Wed Jul 13, 2016 at 7:00 AM status Stable downloads 0 rating       0 ratings Review this release activity downloads 3 Days: 7 7 30 30 All All Details related projects Yahoo! UI Library: YUI Compressor for .Net Microsoft Ajax Minifier Web Optimization WebGrease TypeScript ClearScript Web Markup Minifier © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"Modular extension for. Its modules supports LESS, Sass, CoffeeScript, TypeScript, Mustache, Handlebars, Autoprefixer along with a bunch of different JS and CSS minifiers."	"true"
"Assets"	"Microsoft ASP.NET Web Optimization Framework"	"http://aspnetoptimization.codeplex.com/"	"Modular extension for. Its modules supports LESS, Sass, CoffeeScript, TypeScript, Mustache, Handlebars, Autoprefixer along with a bunch of different JS and CSS minifiers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Web Optimization - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In Web Optimization home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe The Web optimization framework is installed via NuGet at https://nuget.org/packages/Microsoft.AspNet.Web.Optimization Description The ASP.NET Web optimization framework provides services to improve the performance of your ASP.NET Web applications. Current services provided by the framework include: bundling - combining multiple scripts or style resources together into a single resource, and thereby requiring browsers to make fewer HTTP requests minification - making scripts or styles smaller using techniques such variable name shortening, white space elimination, etc. Additionally, the framework has multiple extensibility points, enabling you to add new services over time. Last edited Jul 2, 2014 at 11:35 PM by howarddierking, version 6 current 1.1.3 date Thu Feb 20, 2014 at 7:00 AM status Stable downloads 0 rating       9 ratings Review this release Most Helpful Reviews      fdsdgsfdfgdfgggggggggggggg      goodgoodgoodgoodgood View all reviews activity downloads 4 Days: 7 7 30 30 All All Details © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"Modular extension for. Its modules supports LESS, Sass, CoffeeScript, TypeScript, Mustache, Handlebars, Autoprefixer along with a bunch of different JS and CSS minifiers."	"true"
"Assets"	"Bundler"	"https://github.com/ServiceStack/Bundler"	"Compile & Minify Less/Sass/Stylus/Css/JS/CoffeeScript/LiveScript files. Integrates with MVC and ServiceStack"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"251"	"24"	"64"	"GitHub - ServiceStack/Bundler: Compile & Minify Less/Sass/Stylus/Css/JS/CoffeeScript/LiveScript files. Integrates with MVC and ServiceStack Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 251 Fork 64 ServiceStack/Bundler Code Pull requests 1 Pulse Graphs Compile & Minify Less/Sass/Stylus/Css/JS/CoffeeScript/LiveScript files. Integrates with MVC and ServiceStack http://www.servicestack.net 218 commits 1 branch 0 releases 24 contributors JavaScript 70.3% CSS 18.8% C# 8.3% HTML 1.7% Batchfile 0.4% PowerShell 0.4% Other 0.1% JavaScript CSS C# HTML Batchfile PowerShell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 4881070 Mar 7, 2016 mythz Update README.md Permalink Failed to load latest commit information. NuGet support sass on OSX Jul 9, 2014 build update sass, remove unnecessary files not required at runtime Jul 9, 2014 src Do not pass the wrong options into CleanCss. Jan 15, 2015 tests MapServerPath for broader SS env coverage Apr 5, 2015 .gitignore Allow node's 'debug' by limiting .gitignore to 'Debug' Aug 26, 2013 LICENSE turn into NuGet proj Feb 4, 2012 README.md Update README.md Mar 7, 2016 README.md New Project Update: ServiceStackVS modern Single Page App Templates! To provide the ultimate Single Page App development experience from VS.NET we've created specialized AngularJS and React.js Single Page App VS.NET templates focusing on providing an optimal run-time and development experience using a pre-configured starting project template that leverages the rich Grunt/Gulp.js build ecosystem for optimized packaging and deployments. The individual Grunt tasks are also accessible with VS.NET's new GUI Grunt Task Runner or via command-line .bat scripts. There are 3 Single Page App templates optimized for building full-stack Apps with the popular JS Frameworks: TypeScript React Template React.js App Template AngularJS App Template Both these templates are available in the ServiceStackVS VS.NET Extension. In contrast this Bundler project below uses a vanilla node.js-based build system configured using plain .txt files and avoids Grunt/Gulp.js by referencing npm packages directly: Bundler Bundler is a fast, cross-platform, command-line runner (easily integrated into existing IDEs, inc VS.NET) with optimized support for ASP.NET MVC and ServiceStack that statically compiles, minifies and combines your websites less, sass, stylus, css, coffeescript, livescript and js files. Bundler uses the popular and well-tested javascript libraries in node's package manager for all minification and compilation. This enables it to generate faster and more up-to-date outputs than any other .NET wrapper solution which either uses old .NET ports of node.js or ruby implementations, or they have to invoke external out-of-process IronRuby and JavaScript processes resulting in slower execution - consuming valuable iteration-time on each dev-cycle. Easy to use! All .bundle's are plain text files which just contain a list of the file names that make up each bundle Includes VS.NET Integration! Saving any supported file auto-runs Bundler. Works seamlessly behind-the-scenes while you code Integrates with ASP.NET MVC and ServiceStack! Includes 1 C# Bundler.cs class to seamlessly integrate with web apps Runs outside the context of your ASP.NET website so client scripts can be re-compiled without restarting your C# project Can be used with any website project (not only .NET). Includes a windows node.exe although all scripts work cross-platform All bundling done at compile time, by running the single bundler.cmd command - no dependencies needed at runtime Uses a self-contained node.exe for all compilation & minification - designed for maximum runtime and compile time performance All node.js .js and C# .cs src files used are in plain-text - so can be easily be followed, extended or customized Extremely fast at both Build and Runtime Bundler is extremely fast - uses Googles leading V8 JavaScript engine (inside node.exe). All build scripts use only pure JavaScript implementations (uglifyjs, coffee-script, clean-css, etc) allowing all compilation and minification to run in a single process. Async / Non-Blocking The packager is completely async and non-blocking - allowing the processing inside each bundle to happen in parallel. No Runtime overhead Designed for maximum runtime performance since no compilation/minification happens at runtime. Even the generated HTML output is cached in memory (in production mode) - so has effectively no runtime overhead. Cuts build-time in 1/2 After moving to Bundler for all their compilation and minification, StackOverflow Careers have reduced their total build times by more than 1/2! YMMV but if your current .NET-based Compilation/Optimization build-system is slowing you down - definitely tryout Bundler. Pre-configured Single Page App Starter Template Checkout Social Bootstrap Api for a great starting template to base your next Single Page App on. Includes Twitter Bootstrap + Backbone.js + ASP.NET MVC + ServiceStack with Bundler all wired-up with Twitter + Facebook + HTML Form + Basic and Digest Auth providers ready-to-go out-of-the-box. Release Notes v1.16 Release Notes Bundler has added support for LiveScript and Stylus thanks to @legomind. LiveScript is a terse, functionally-inspired language with CoffeeScript roots popular with functional programmers who want to target JS. Whilst Stylus is another creation from JavaScript's code hero @tjholowaychuk, with his take on a terse white-space significant DSL for CSS. SASS support has also been vastly improved thanks to the integration efforts of @michael-misshore who updated Bundler's SASS provider to use the more robust node-sass implementation. In addition to supporting ASP.NET MVC we've also added first-class support for ServiceStack-only web projects. To reflect this change Mvc.Bundler.cs (which contains all MVC and ServcieStack HTML Helper utils) has been renamed to Bundler.cs and now sits in the ServiceStack.Html namespace. If you're upgrading from an older version of Bundler you may need to update to use the new references. v1.10 Release Notes This release is thanks to the hard work of @fody who implemented both the VS.NET Extension and advanced bundling options. Added VS.NET the Bundler Integration via Bundler's VS.NET Extension Added advanced bundling options for finer-grain control Lets you skip bundling or minification steps Lets you recursively compile and minify all files in current and sub-directories without having to list them Community Resources Using ServiceStack Bundler - Fantastic step-by-step guide to enable Bundler in MVC. Install To run you just need a copy of /bundler folder in your website host directory. This can be done by cloning this repo or installing via NuGet: Once installed you can optionally exclude the '/bundler' or '/bundler/node_modules' folders from your VS.NET project since they contain a lot of files (not required to be referenced). By default bundler looks at /Content and /Scripts project folders - this can be changed by editing /bundler/bundler.cmd: node bundler.js ../Content ../Scripts  Now you can define .bundle files in any of the above folders. Setup a Bundler runner You basically want to run Bundler when a file your website references has changed, so you can see those changes before your next page refresh. Although bundler.cmd is just a simple command-line script, there are a few different ways you can run it during development (in order of most productive): Automatically on save of a .less, .css, .sass, .js, .coffee and .bundle (after the 2010 VS.NET Extension is installed) Add an External Tool in VS.NET that runs bundler.cmd. Optionally assign a short-cut so you can run with 1 key-stroke Add a Post-Build event to your project to automatically run it at the end of every build Reminder: If you don't check-in compiled or .min files you should also get your CI build agents run bundler.cmd after each build. Installing the Run on Save VS.NET 2010 Extension If you have VS.NET 2010 you should also double-click the bundler\vs2010-extension\BundlerRunOnSave.vsix package to install Bundler's VS.NET extension which will automatically runs bundler when any .less, .css, .sass, .js, .coffee and .bundle file is saved. Note: You should reboot VS.NET for the changes to take effect Once installed the BundlerRunOnSave.vsix VS.NET extension runs bundler when you save any file in the project with any of the supported extensions .less, .css, .sass, .js, .coffee and .bundle. Create an External Tool inside VS.NET: Allows you to run Alt T + B (or assign your own short-cut) to re-compile and minify your changed assets without re-building your project: Run script on post-build event Alternatively you can run bundler after every successful build. Add the line below to Properties > Build events > Post-build event: ""$(ProjectDir)bundler\node.exe"" ""$(ProjectDir)bundler\bundler.js"" ""$(ProjectDir)Content"" ""$(ProjectDir)Scripts""  How it works You define css or js bundles (in plain text) that specifies the list of files you wish to bundle together. Running bundler.cmd (either as a short-cut key or post-build script) will scan through your /Content folder finding all defined .js.bundle and .css.bundle definition files which it goes through, only compiling and minifying new or modified files. For illustration an example app.js.bundle and app.css.bundle text files are defined below: /Scripts/app.js.bundle js/underscore.js js/backbone.js js/includes.js js/functions.coffee js/base.coffee bootstrap.js  /Content/app.css.bundle css/reset.css css/variables.less css/styles.less css/sassy.sass default.css  Now everytime you run /bundler/bundler.cmd it will scan these files, compiling and minifying any new or changed files. Enable Bundler.cs Html helpers inside view pages To enable MVC or ServiceStack Html helper's add ServiceStack.Html namespace to your views base class by editing your Views/Web.config: <system.web.webPages.razor> <pages pageBaseType=""System.Web.Mvc.WebViewPage"">   <namespaces>     <add namespace=""System.Web.Mvc"" />     <add namespace=""System.Web.Mvc.Ajax"" />     <add namespace=""System.Web.Mvc.Html"" />     <add namespace=""System.Web.Routing"" />     <add namespace=""ServiceStack.Html"" />    <!-- Enable Html Extensions -->   </namespaces> </pages> </system.web.webPages.razor>  Once enabled, you can then reference these bundles in your MVC _Layout.cshtml or View.cshtml pages with the @Html.RenderCssBundle() and @Html.RenderJsBundle() helpers: Bundle Options The different BundleOptions supported are: public enum BundleOptions {     Normal,              // Left as individual files, references pre-compiled .js / .css files     Minified,            // Left as individual files, references pre-compiled and minified .min.js / .min.css files     Combined,            // Combined into single unminified app.js / app.css file     MinifiedAndCombined  // Combined and Minified into a single app.min.js / app.min.css file } With the above bundle configurations, the following helpers below: @Html.RenderJsBundle(""~/Scripts/app.js.bundle"", BundleOptions.MinifiedAndCombined) @Html.RenderCssBundle(""~/Content/app.css.bundle"", BundleOptions.Minified)  Will generate the following HTML: <script src=""/Scripts/app.min.js?b578fa"" type=""text/javascript""></script>  <link href=""/Content/css/reset.min.css?b578fa"" rel=""stylesheet"" /> <link href=""/Content/css/variables.min.css?b578fa"" rel=""stylesheet"" /> <link href=""/Content/css/styles.min.css?b578fa"" rel=""stylesheet"" /> <link href=""/Content/css/sassy.min.css?b578fa"" rel=""stylesheet"" /> <link href=""/Content/default.min.css?b578fa"" rel=""stylesheet"" />  Note: the ?b578fa suffix are cache-breakers added to each file, so any changes invalidates local brower caches - important if you end up hosting your static assets on a CDN. You can rewrite the generated urls (e.g. to use a CDN instead) by injecting your own Bundler.DefaultUrlFilter. Advanced Options Bundle file options Advanced options can be specified that changes how .bundle's are processed. You can specify bundler options following these rules: Options must be specified on the first line of the .bundle file, starting with #options. Options are comma-delimited. Each option is a key/value pair separated by a colon. Keys are case-insensitive. You can omit the value for boolean options - specified options without a value are set to true. Example file with options #options nobundle,skipmin css/reset.css css/variables.less default.css  The currently available options are: nobundle - Compiles and minifies all files listed, however it does not bundle them into a single file. This allows you to compile and minify your standalone files without concatenating them into a bundle. skipmin - Skips the minimization step for every file skipremin - Skips the minification step for files that already contain a '.min.' or '.pack.' in their filename. This lowers the chance of multiple minification iterations introducing problems. folder - Used as a trigger to transform all files in the folder with this bundle file. If the recursive value is used, a seek will search recursively from this root transforming all files in all folders searched. When the folder option is used, the nobundle option is automatically set. When the folder option is used, listing files in the bundle file does nothing. outputbundleonly - Does not create individual .min files for each file in the bundle. The bundled file is the only output. bundleminonly - Does not create a non-minimized version of the bundle file. Only creates the .min version of the bundle. Tip: If you just want bundler to transform all the files in your content folder, add a bundle file in the root of the content folder and set its contents to the following: #options folder:recursive  Development The Bundler VS.NET extension lives in /src/vs/BundlerRunOnSave which requires the VS.NET templates provided by the Visual Studio 2010 SP1 SDK in order to open it. Contributors A big thanks to all of Bundler's contributors: mythz (Demis Bellot) nicklarsen (Nick Larsen) duncansmart (Duncan Smart) phillip-haydon (Phillip Haydon) cyberlane (Justin Nel) isochronous mjibson (Matt Jibson) dixon (Jarrod Dixon) michael-wolfenden (Michael Wolfenden) garjitech (Garrett Wolf) isochronous (Jeremy McLeod) legomind Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ServiceStack/Bundler"	"Compile & Minify Less/Sass/Stylus/Css/JS/CoffeeScript/LiveScript files. Integrates with MVC and ServiceStack"	"true"
"Assets"	"SquishIt"	"https://github.com/jetheredge/SquishIt"	"Lets you bundle some css and javascript"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"469"	"26"	"125"	"GitHub - jetheredge/SquishIt: Lets you *easily* bundle some css and javascript! Check out the Google group if you have questions! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 469 Fork 125 jetheredge/SquishIt Code Issues 38 Pull requests 2 Wiki Pulse Graphs Lets you *easily* bundle some css and javascript! Check out the Google group if you have questions! http://groups.google.com/group/squishit 737 commits 3 branches 25 releases 44 contributors HTML 61.6% C# 20.1% JavaScript 15.6% CSS 1.2% ASP 0.8% PHP 0.5% Other 0.2% HTML C# JavaScript CSS ASP PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.8.x develop master Nothing to show v0.9.8 v0.9.7 v0.9.6.1 v0.9.6 v0.9.5.3 v0.9.5.2 v0.9.5.1 v0.9.5 v0.9.4 v0.9.3 v0.9.2 v0.9.1 v0.9.0 v0.8.7 v0.8.6 v0.8.5 v0.8.4 v0.8.3 v0.8.1 v0.8.0 0.8.2 0.7.1 0.7.0 0.6.1 0.6.0 Nothing to show New pull request Latest commit b9d8200 Jan 6, 2016 AlexCuse 0.9.8.2 release prep Permalink Failed to load latest commit information. Help start adding XML comments for API documentation Nov 30, 2013 SquishIt.CoffeeScript 0.9.8.2 release prep Jan 6, 2016 SquishIt.Framework 0.9.8.2 release prep Jan 6, 2016 SquishIt.Hogan 0.9.8.2 release prep Jan 6, 2016 SquishIt.Less 0.9.8.2 release prep Jan 6, 2016 SquishIt.MsIeCoffeeScript 0.9.8.2 release prep Jan 6, 2016 SquishIt.MsIeHogan 0.9.8.2 release prep Jan 6, 2016 SquishIt.Mvc 0.9.8.2 release prep Jan 6, 2016 SquishIt.NSass update WebActivator namespace (add Ex) in .cs.pp files Jan 6, 2016 SquishIt.Sass 0.9.8.2 release prep Jan 6, 2016 SquishIt.Tests Added logic to create directory structure if does NOT exists Dec 18, 2015 SquishItAspNetMvcTest test for inline content rendering (#282) Jun 3, 2015 licenses automate construction of core download package (fix #220) Dec 5, 2012 nuspec 0.9.8.2 release prep Jan 6, 2016 packages switch to nuget MVC references Nov 22, 2014 tools pass platform when invoking msbuild Aug 16, 2015 .gitignore test sass/scss import with libsass-net Jun 13, 2014 .gitignore.orig Merge remote branch 'origin/master' into preprocessor-pipeline Apr 12, 2012 README.markdown fix markdown for nuget version image link Sep 30, 2015 SquishIt.Mono.sln include NSass project in mono solution Mar 26, 2014 SquishIt.shfbproj output help as html Dec 1, 2013 SquishIt.sln - base relative path adaptation on web paths instead of disk locations Oct 18, 2014 license.txt Update license.txt Dec 24, 2014 squishit.vssettings add .vssettings Jul 4, 2012 README.markdown About SquishIt SquishIt is an asset optimization library for .net web applications. It handles combining and minifying css and javascript assets through creation of bundles. There are currently extensions available that allow use of .less, coffeescript, SASS/SCSS and Hogan templates through SquishIt's preprocessor pipeline. There is also an extension that writes your combined files to Amazon S3 that can serve as a template for integrating with the CDN of your choosing. For medium trust environments there is an option to build and cache bundles in-memory so that you don't need write permission in the application's working directory. An example of setting this up for an ASP.net MVC project can be found here. For a WebForms project the asset controller would just be replaced with an HTTP handler. Installation SquishIt comes as a NuGet package and can be installed via PM> Install-Package SquishIt. Latest stable package: . You can also download precompiled binaries from the SquishIt AppHarbor page. Building from source You will need to have Visual Studio and 7-Zip installed. Open Visual Studio Command Prompt cd \path\to\SquishIt\tools If necessary, add 7z.exe to your path: set PATH=%PATH%;C:\Program Files\7-Zip\ Run build-package version-id (version-id can be anything you like.) If all went well, you should have a package called tools/SquishIt-version-id.zip. Thanks The build is generously hosted and run on the CodeBetter TeamCity infrastructure. Latest build status: We also get great tooling support from the kind folks at JetBrains Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jetheredge/SquishIt"	"Lets you bundle some css and javascript"	"true"
"Authentication and Authorization"	"ASP.NET Identity"	"https://aspnetidentity.codeplex.com/"	"New membership system for ASP.NET applications"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"854"	"263"	"378"	"GitHub - aspnet/Identity: ASP.NET Core Identity is the membership system for building ASP.NET Core web applications, including membership, login, and user data. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 263 Star 854 Fork 378 aspnet/Identity Code Issues 68 Pull requests 4 Wiki Pulse Graphs ASP.NET Core Identity is the membership system for building ASP.NET Core web applications, including membership, login, and user data. 641 commits 29 branches 14 releases 52 contributors C# 99.7% Other 0.3% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags DeferedLogging EFUpdates0310 UpdateConnStr UpdateLogging UpdateSample apidocs cesarbs/strong-name danroth27/doccomment danroth27/doccomment2 dev eilon/fix-build-break eilon/fix-metadata haok/builderz haok/5-23interop haok/6-10clean haok/6-13doc haok/7-5doc jcnOptions master packageversions pakrym/fix-tests pakrym/portable prkrishn/challenge-result prkrishn/ci-build prkrishn/identity prkrishn/master-fix release trdai/update.coreclr wei/replace-k-with-dnx Nothing to show 3.0.0-rc1 3.0.0-beta8 3.0.0-beta7 3.0.0-beta6 3.0.0-beta5 3.0.0-beta4 3.0.0-beta3 3.0.0-beta2 3.0.0-beta1 3.0.0-alpha4 3.0.0-alpha3 3.0.0-alpha2 1.0.0 1.0.0-rc2 Nothing to show New pull request Latest commit f9cdef7 Jul 13, 2016 pranavkm Remove Microsoft.AspNet.DataProtection.Extensions Permalink Failed to load latest commit information. samples One build to rule them all Jul 7, 2016 src Remove Microsoft.AspNet.DataProtection.Extensions Jul 15, 2016 test One build to rule them all Jul 7, 2016 tools Strong name everything. Nov 3, 2015 .gitattributes Build with dotnet Jan 15, 2016 .gitignore Build with dotnet Jan 15, 2016 .travis.yml Fix OSX build on Travis. May 27, 2016 CONTRIBUTING.md Update Home master -> Home dev May 12, 2015 Identity.sln Remove interop sample from sln since it uses non public pkgs Jun 10, 2016 LICENSE.txt Update LICENSE.txt and license header on files. May 1, 2015 NuGet.config Add Interop 45 Compat package May 23, 2016 NuGetPackageVerifier.json CoreCompat => AspNetCoreCompat May 24, 2016 README.md Fix package metadata Mar 27, 2016 Settings.StyleCop Cleanup style cop violations Jun 24, 2014 appveyor.yml Fix backslashes in yml config. Mar 9, 2016 build.cmd Return the error code from build.cmd Feb 28, 2016 build.ps1 Update the build scripts to the latest version Mar 7, 2016 build.sh Update the build scripts to the latest version Mar 8, 2016 global.json Reacting to new Hosting API Dec 18, 2015 README.md ASP.NET Core Identity AppVeyor: Travis: ASP.NET Core Identity is the membership system for building ASP.NET Core web applications, including membership, login, and user data. ASP.NET Core Identity allows you to add login features to your application and makes it easy to customize data about the logged in user. This project is part of ASP.NET Core. You can find samples, documentation and getting started instructions for ASP.NET Core at the Home repo. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aspnet/Identity"	"New membership system for ASP.NET applications"	"true"
"Authentication and Authorization"	"DotNetOpenAuth"	"https://github.com/DotNetOpenAuth/DotNetOpenAuth"	"A C# implementation of the OpenID, OAuth and InfoCard protocols"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1186"	"198"	"627"	"GitHub - DotNetOpenAuth/DotNetOpenAuth: A C# implementation of the OpenID, OAuth protocols Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 198 Star 1,186 Fork 627 DotNetOpenAuth/DotNetOpenAuth Code Issues 69 Pull requests 8 Wiki Pulse Graphs A C# implementation of the OpenID, OAuth protocols http://dotnetopenauth.net 3,495 commits 39 branches 107 releases 25 contributors C# 97.9% JavaScript 1.9% Other 0.2% C# JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags DNOA.Messaging.Portable Silverlight Silverlight3 WIX boo ci contracts_RC csteeg-v3.4 develop dimebrain godaddylogging infocardintegration jwt master mono mono2 mvcProjTemplate netcf oauthspmvc osis v0.1 v1.0 v2.0 v2.1 v2.2 v2.3 v2.4 v2.5 v2.6 v3.0 v3.1 v3.2 v3.3 v3.4 v4.0 v4.1 v4.2 v4.3 v5.0 Nothing to show v5.0.0.13117-alpha1 v5.0.0-alpha3 v5.0.0-alpha2 v4.3.3.13295 v4.3.2.13293 v4.3.1.13153 v4.3.0.13117 v4.2.2.13055 v4.2.1.13026 v4.2.0.13024 v4.1.2.12274 v4.1.1.12273 v4.1.0.12182 v4.0.4.12182 v4.0.2.12119 v4.0.1.12097 v4.0.0.12084 v4.0.0.12030-Beta1 v3.5.0.12037-refresh3 v3.4.7.11121 v3.4.6.10357 v3.4.5.10202 v3.4.5.10201 v3.4.4.10162 v3.4.3.10103 v3.4.2.10079 v3.4.2.10079a v3.4.1.10044 v3.4.0.10015 v3.3.1.9337 v3.3.0.9336 v3.2.2.9257 v3.2.1.9252 v3.2.0.9177 v3.1.2.9252 v3.1.1.9177 v3.1.0.9122 v3.0.4.9252 v3.0.3.9177 v3.0.2.9122 v3.0.1.9115 v3.0.0.9106 v3.0.0.9087RC1 v3.0.0.9073Beta2 v3.0.0.9070Beta2 v3.0.0.9035Beta1 v2.5.7.10213 v2.5.5.9153 v2.5.4.9045 v2.5.3.9044 v2.5.2.9007 v2.5.1.9005aolHotfix v2.5.1.8313 v2.5.0.8281 v2.5.0.8248Beta1 v2.4.3.8264 v2.4.2.8248 v2.4.1.8239 v2.4.0.8233 v2.3.2.8233 v2.3.1.8219 v2.3.0.8204 v2.3.0.8204a v2.2.4.8233 v2.2.3.8219 v2.2.2.8204 v2.2.2.8204a v2.2.1.8170 v2.2.0.8168 v2.2.0.8152Beta2 v2.2.0.8121Beta1 v2.1.7.8233 v2.1.6.8219 v2.1.5.8204 v2.1.5.8204a v2.1.4.8170 v2.1.3.8168 v2.1.2.8149 v2.1.1 v2.1.0 v2.0.2 v2.0.1 v2.0.0 v2.0.0Beta2 v2.0.0Beta1 v1.0.2 v1.0.1 v1.0.0 v1.0.0RC1 v0.1.2 v0.1.1 v0.1.0 clrbugDestabilizeRuntime cccheckspin ccbug5 ccbug4 ccbug3 ccbug2 ccbug1 boo-1.1.0-pre2 Nothing to show New pull request Latest commit 190e552 May 18, 2016 AArnott Merge pull request #385 from tomap/develop … add 'mentalis content' credits in readme Permalink Failed to load latest commit information. doc Added Docs structure (Closes #364) Jan 5, 2015 lib Switches out log4net 1.2.11 for 2.0.0 from NuGet. Dec 28, 2012 nuget specify only .net 4.0 for dependency Microsoft.Net.Http Feb 17, 2016 samples Remove unnecessary references to Microsoft.Net.Http and Microsoft.Bcl… Aug 7, 2015 src Merge pull request #379 from lcalabrese/develop Mar 25, 2016 tools Updated NuGet.exe Jan 5, 2015 .gitignore Resolves #363 Jan 5, 2015 CONTRIB.txt Added some contributing guidelines and the LICENSE file to the drop g… Feb 1, 2009 DNOA Localisation.zreproj #365 Jan 5, 2015 EnlistmentInfo.props Avoids StyleCop messages on generated files in the IDE. Mar 27, 2013 EnlistmentInfo.targets Accomodates nuget's insistent project file changes. Dec 27, 2012 GhostDoc.gdc Added customized GhostDoc configuration. Mar 9, 2009 ILMergeInternalizeExceptions.txt Fixed use of ILMerge so that it doesn't make all DNOA types internal. Sep 20, 2011 LICENSE.txt Updated all copyright notices to reflect copyright assignment to Oute… Feb 5, 2012 README.md add 'mentalis content' credits in readme May 18, 2016 Settings.StyleCop More StyleCop fixes. Mar 26, 2013 appveyor.yml Resolves #363 Jan 5, 2015 build.proj Removes delay-signing build authoring leftovers that was still breaki… Oct 22, 2013 mkdocs.yml Added Docs structure (Closes #364) Jan 5, 2015 README.md DotNetOpenAuth Dev Build:: Summary The C# implementation of the OpenID, OAuth protocols. Use DotNetOpenAuth to create Identity Providers and Identity Consumers (Relying Parties). The following sample implementations are available: OpenID Provider (MVC / WebForms) OpenID Relying Party (Classic ASP / MVC / WebForms) OpenID Web Ring Provider / Relying Party OAuth Authorisation Server OAuth Resource Server OAuth Service Provider OAuth Client OAuth Consumer (Web/Wpf) All samples are available in the Samples Repository Credits DotNetOpenAuth utilises the following open source projects: ASP.NET Web API Katana Autofac Json.Net LibLog Web Protection Library XUnit License Header Manager Mentalis Content ..and is supported by the following open source friendly companies: JetBrains Gitter Huboard AppVeyor Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/DotNetOpenAuth/DotNetOpenAuth"	"A C# implementation of the OpenID, OAuth and InfoCard protocols"	"true"
"Authentication and Authorization"	"Logibit Hawk"	"https://github.com/logibit/logibit.hawk/"	"A F# authentication library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"18"	"5"	"4"	"GitHub - logibit/Logibit.Hawk: A F# Hawk implementation with a strongly typed API that guides your usage and minimises security programming errors. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 18 Fork 4 logibit/Logibit.Hawk Code Issues 1 Pull requests 0 Pulse Graphs A F# Hawk implementation with a strongly typed API that guides your usage and minimises security programming errors. 153 commits 2 branches 29 releases Fetching contributors F# 96.6% Ruby 3.4% F# Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bewit master Nothing to show v3.0.5 v3.0.4 v3.0.3 v3.0.2 v3.0.1 v3.0.0 v2.0.0 v1.0.1 v1.0.0 v0.9.3 v0.9.2 v0.9.1 v0.9.0 v0.8.2 v0.8.1 v0.8.0 v0.7.0 v0.6.0 v0.5.1 v0.4.4 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.1 v0.3.0 v0.2.1 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 3d4f92a Jun 18, 2016 haf [encoding] Uri.Escape... -> encodeURIComponent Permalink Failed to load latest commit information. src [encoding] Uri.Escape... -> encodeURIComponent Jun 18, 2016 tools adding a hawk Jan 5, 2015 .gitignore [infra] Uppercase library name Feb 13, 2016 .gitmodules passing parsing Dec 28, 2014 .semver [encoding] Uri.Escape... -> encodeURIComponent Jun 18, 2016 Gemfile initial commit Dec 25, 2014 Gemfile.lock [infra] update gems Oct 27, 2015 LICENSE.md Apache 2.0 Dec 30, 2014 README.md Update README.md Apr 4, 2016 Rakefile [infra] Uppercase library name Feb 13, 2016 paket.dependencies [infra] Uppercase library name Feb 13, 2016 paket.lock [infra] upgrading Suave Apr 1, 2016 README.md Logibit Hawk A F# implementation of the Hawk authentication protocol. Few dependencies. No cruft. No thrown exceptions. If this library throws an exception, report an issue - instead it uses return values that are structured instead. paket add nuget Hawk paket add nuget Hawk.Suave Dependencies: { Aether, FSharp.Core, NodaTime }, nugets Hawk and Hawk.Suave. For all API methods implemented, the full test suite for those methods has also been translated. Sponsored by qvitoo – A.I. bookkeeping. Usage (Suave Example) open Logibit.Hawk open Logibit.Hawk.Types open Logibit.Hawk.Server  open Suave open Suave.Http // houses submodule 'Hawk' open Suave.Http.Successful open Suave.Http.RequestErrors open Suave.Types  // your own user type type User =   { homepage  : Uri     realName : string }  // this is the structure that is the 'context' for Logibit.Hawk let settings =   // this is what the lib is looking for to verify the request   let sampleCreds =     { id        = ""haf""       key       = ""werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn""       algorithm = SHA256 }    // the generic type param allows you to implement a generic user repository   // for your own user type (above)   { Settings.empty<User>() with      // sign: UserId -> Choice<Credentials * 'a, CredsError>      credsRepo = fun id ->        (sampleCreds,         { homepage = Uri(""https://qvitoo.com""); realName = ""Henrik"" }        )        // no error:        |> Choice1Of2 }  // You can compose this into the rest of the app, as it's a web part. In this // case you're doing a Authorization header authentication let sampleApp settings : WebPart =   Hawk.authenticate     settings     Hawk.bindHeaderReq     // in here you can put your authenticated web parts     (fun (attr, creds, user) -> OK (sprintf ""authenticated user '%s'"" user.realName))     // on failure to authenticate the request     (fun err -> UNAUTHORIZED (err.ToString()))  // Similarly for bewits, where you want to authenticate a portion of the query // string: let sampleApp2 settings : WebPart =   Hawk.authenticateBewit     settings Hawk.bindQueryRequest     // in here you can put your authenticated web parts     (fun (attr, creds, user) -> OK (sprintf ""authenticated user '%s'"" user.realName))     // on failure to authenticate the request     (fun err -> UNAUTHORIZED (err.ToString())) Currently the code is only fully documented - but not outside the code, so have a browse to the source code that you are interested in to see how the API composes. Usage from client: Use the .js file from src/vendor/hawk.js/lib, then you can wrap your ajax calls like this: request.js: (using CommonJS module layout, which you can use to require it and get a function in return). var Auth   = require('./auth.js'),     Hawk   = require('./lib/hawk.js'),     Logger = require('./logger.js'),     jQuery = require('jquery');  var qt = function(str) {   return ""'"" + str + ""'""; }  var jqSetHawkHeader = function(opts, creds, jqXHR, settings) {   if (typeof opts.contentType == 'undefined') {     throw new Error('missing contentType from options');   }    var opts = jQuery.extend({ credentials: creds, payload: settings.data }, opts),       // header(uri, method, options): should have options values for       // - contentType       // - credentials       // - payload       header = Hawk.client.header(settings.url, settings.type, opts); // type = HTTP-method    if (typeof header.err !== 'undefined') {     Logger.error('(1/2) Hawk error:', qt(header.err), 'for', method, qt(settings.url));     Logger.error('(2/2) Using credentials', opts.credentials);     return;   }    Logger.debug('(1/3)', settings.type, settings.url);   Logger.debug('(2/3) opts:', opts);   Logger.debug('(3/3) header:', header.field);    jqXHR.setRequestHeader('Authorization', header.field); };  module.exports = function (method, resource, data, opts) {   var origin    = window.location.origin,       creds     = Auth.getCredentials(),       url       = origin + resource,       opts      = jQuery.extend({         contentType: 'application/x-www-form-urlencoded; charset=UTF-8',         dataType: 'html'       }, (typeof opts !== 'undefined' ? opts : {})),       jqOpts    = jQuery.extend({         type:       method,         data:       data,         url:        url,         beforeSend: function(xhr, s) { jqSetHawkHeader(opts, creds, xhr, s) }       }, opts);    return jQuery.ajax(jqOpts); }; Changelog Please have a look at Releases. API This is the public API of the library. It mimics the API of Hawk.js - the reference implementation. Logibit.Hawk.Bewit These functions are available to creating and verifying Bewits. generate - generate a new bewit from credentials, a uri and an optional ext field. generate' - generate a new bewit from credentials, a string uri and an optional ext field. authenticate - verify a given bewit authenticate details TBD - docs, in the meanwhilse, see Server authenticate (superset is validated). Logibit.Hawk.Client These functions are available, checked functions are implemented header - generate a request header for server to authenticate bewit - delegates to Bewit.generate authenticate - test that server response is authentic, see Response Payload Validation. message - generate an authorisation string for a message Logibit.Hawk.Server authenticate - authenticate a request authenticatePayload - authenticate the payload of a request - assumes you first have called authenticate to get credentials. Payload Validation authenticatePayloadHash header - generate a server-header for the client to authenticate authenticateBewit - authenticate a client-supplied bewit, see Bewit Usage Example. authenticateMessage - authenticate a client-supplied message authenticate details How strictly does the server validate its input? Compared to reference implementation. This part is important since it will make or break the usability of your api/app. Just throwing SecurityException for any of these is not granular enough. server cannot parse header -> FaultyAuthorizationHeader server cannot find Hawk scheme in header -> FaultyAuthorizationHeader id, ts, nonce and mac (required attrs) are supplied -> MissingAttribute credential function errors -> CredsError mac doesn't match payload -> BadMac missing payload hash if payload -> MissingAttribute payload hash not matching -> BadPayloadHash of hash_given * hash_calculated nonce reused -> NonceError AlreadySeen, with in-memory cache stale timestamp -> StaleTimestamp Hints when not under attack (in dev) If you see CredsError, it's most likely a problem that you can't find the user with your repository function. If you see BadMac, it means probably means you haven't fed the right parameters to authenticate. Log the input parameters, verify that host and port match (are you behind a reverse proxy?) and check that the length of the content is the same on the client as on the server. The BadMac error comes from hashing a normalised string of these parameters: hawk header version type of normalisation ('header' in this case) timestamp nonce method resource (aka PathAndQuery for the constructed Uri) host port hash value ext if there is one app if there is one dlg if there is app and if there is one If you see PadPayloadHash, it means that the MAC check passed, so you're probably looking at an empty byte array, or your Content-Type isn't being passed to the server properly, or the server implementation doesn't feed the correct Content-Type header (e.g. it doesn't trim the stuff after the first MimeType declaration, before the semi-colon ;). Logibit.Hawk.Crypto The crypto module contains functions for validating the pieces of the request. genNormStr - generate a normalised string for a request/auth data calcPayloadHash - calculates the payload hash from a given byte[] calcPayloadHash - calculates the payload hash from a given string calcHmac - calculates the HMAC for a given string Logibit.Hawk.Types This module contains the shared types that you should use for interacting with the above modules. HttpMethod - discriminated union type of HTTP methods Algo - The supported hash algorithms Credentials - The credentials object used in both client and server HawkAttributes - Recognised attributes in the Hawk header FullAuth - A structure that represents the fully calculated hawk request data structure This module also contains a module-per-type with lenses for that type. The lenses follow the same format as Aether recommends. Logibit.Hawk.Logging Types: LogLevel - the level of the LogLine. LogLine - this is the data structure of the logging module, this is where you feed your data. Logger interface - the main interface that we can log to/into. Logger module - a module that contains functions equiv. to the instance methods of the logger interface. NoopLogger : Logger - the default logger, you have to replace it yourself It's good to know that you have to construct your LogLine yourself. That LogLines with Verbose or Debug levels should be sent to the debug or verbose functions/methods of the module/interface Logger, which in turn takes functions, which are evaluated if it's the case that the logging infrastructure is indeed logging at that level. This means that logging at that level, and computing the log lines, needs only be done if we can really do something with them. Other APIs There are some modules that are currently internal as to avoid conflicting with existing code. If these are made 'more coherent' or else moved to external libraries, they can be placed on their own and be made public. The modules like this are Random, Prelude, Parse. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/logibit/logibit.hawk/"	"A F# authentication library"	"true"
"Authentication and Authorization"	"Hawk"	"https://github.com/hueniverse/hawk#usage-example"	"A F# authentication library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1189"	"81"	"91"	"GitHub - hueniverse/hawk: HTTP Holder-Of-Key Authentication Scheme Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 81 Star 1,189 Fork 91 hueniverse/hawk Code Issues 5 Pull requests 5 Pulse Graphs HTTP Holder-Of-Key Authentication Scheme 277 commits 2 branches 43 releases 28 contributors JavaScript 100.0% JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master v3.1.x Nothing to show v5.0.1 v5.0.0 v4.1.2 v4.1.1 v4.0.1 v4.0.0 v3.1.3 v3.1.2 v3.1.1 v3.1.0 v3.0.0 v2.3.1 v2.3.0 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.1.3 v2.1.2 v2.1.1 v2.1.0 v2.0.0 v1.1.2 v1.1.0-pre v1.0.0 v0.15.0 v0.14.0 v0.13.1 v0.13.0 v0.12.2 v0.12.1 v0.12.0 v0.11.1 v0.11.0 v0.10.2 v0.10.1 v0.9.0 v0.8.1 v0.7.1 v0.7.0 v0.6.1 4.1.0 1.1.1 Nothing to show New pull request Latest commit a77c5b1 Jun 27, 2016 hueniverse Handle email in path. Closes #187 Permalink Failed to load latest commit information. example Linting Dec 8, 2015 images logo Nov 25, 2012 lib Handle email in path. Closes #187 Jun 27, 2016 test Handle email in path. Closes #187 Jun 27, 2016 .eslintignore ES5 build. Closes #154 Nov 5, 2015 .gitignore ES5 build. Closes #154 Nov 6, 2015 .npmignore ES5 build. Closes #154 Nov 6, 2015 .travis.yml Normalize time methods. Closes #184 May 25, 2016 LICENSE Normalize time methods. Closes #184 May 25, 2016 README.md Merge branch 'master' of github.com:hueniverse/hawk May 25, 2016 bower.json ES5 build. Closes #154 Nov 6, 2015 client.js Fixes build for browser clients Dec 8, 2015 component.json ES5 build. Closes #154 Nov 6, 2015 package.json Handle email in path. Closes #187 Jun 27, 2016 README.md Hawk is an HTTP authentication scheme using a message authentication code (MAC) algorithm to provide partial HTTP request cryptographic verification. For more complex use cases such as access delegation, see Oz. Current version: 5.x Note: 5.x, 4.x, 3.x, and 2.x are the same exact protocol as 1.1. The version increments reflect changes in the node API. Table of Content Introduction Replay Protection Usage Example Protocol Example Payload Validation Response Payload Validation Browser Support and Considerations Single URI Authorization Usage Example Security Considerations MAC Keys Transmission Confidentiality of Requests Spoofing by Counterfeit Servers Plaintext Storage of Credentials Entropy of Keys Coverage Limitations Future Time Manipulation Client Clock Poisoning Bewit Limitations Host Header Forgery Frequently Asked Questions Implementations Acknowledgements Introduction Hawk is an HTTP authentication scheme providing mechanisms for making authenticated HTTP requests with partial cryptographic verification of the request and response, covering the HTTP method, request URI, host, and optionally the request payload. Similar to the HTTP Digest access authentication schemes, Hawk uses a set of client credentials which include an identifier (e.g. username) and key (e.g. password). Likewise, just as with the Digest scheme, the key is never included in authenticated requests. Instead, it is used to calculate a request MAC value which is included in its place. However, Hawk has several differences from Digest. In particular, while both use a nonce to limit the possibility of replay attacks, in Hawk the client generates the nonce and uses it in combination with a timestamp, leading to less ""chattiness"" (interaction with the server). Also unlike Digest, this scheme is not intended to protect the key itself (the password in Digest) because the client and server must both have access to the key material in the clear. The primary design goals of this scheme are to: simplify and improve HTTP authentication for services that are unwilling or unable to deploy TLS for all resources, secure credentials against leakage (e.g., when the client uses some form of dynamic configuration to determine where to send an authenticated request), and avoid the exposure of credentials sent to a malicious server over an unauthenticated secure channel due to client failure to validate the server's identity as part of its TLS handshake. In addition, Hawk supports a method for granting third-parties temporary access to individual resources using a query parameter called bewit (in falconry, a leather strap used to attach a tracking device to the leg of a hawk). The Hawk scheme requires the establishment of a shared symmetric key between the client and the server, which is beyond the scope of this module. Typically, the shared credentials are established via an initial TLS-protected phase or derived from some other shared confidential information available to both the client and the server. Replay Protection Without replay protection, an attacker can use a compromised (but otherwise valid and authenticated) request more than once, gaining access to a protected resource. To mitigate this, clients include both a nonce and a timestamp when making requests. This gives the server enough information to prevent replay attacks. The nonce is generated by the client, and is a string unique across all requests with the same timestamp and key identifier combination. The timestamp enables the server to restrict the validity period of the credentials where requests occurring afterwards are rejected. It also removes the need for the server to retain an unbounded number of nonce values for future checks. By default, Hawk uses a time window of 1 minute to allow for time skew between the client and server (which in practice translates to a maximum of 2 minutes as the skew can be positive or negative). Using a timestamp requires the client's clock to be in sync with the server's clock. Hawk requires both the client clock and the server clock to use NTP to ensure synchronization. However, given the limitations of some client types (e.g. browsers) to deploy NTP, the server provides the client with its current time (in seconds precision) in response to a bad timestamp. There is no expectation that the client will adjust its system clock to match the server (in fact, this would be a potential attack vector). Instead, the client only uses the server's time to calculate an offset used only for communications with that particular server. The protocol rewards clients with synchronized clocks by reducing the number of round trips required to authenticate the first request. Usage Example Server code: var Http = require('http'); var Hawk = require('hawk');   // Credentials lookup function  var credentialsFunc = function (id, callback) {      var credentials = {         key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',         algorithm: 'sha256',         user: 'Steve'     };      return callback(null, credentials); };  // Create HTTP server  var handler = function (req, res) {      // Authenticate incoming request      Hawk.server.authenticate(req, credentialsFunc, {}, function (err, credentials, artifacts) {          // Prepare response          var payload = (!err ? 'Hello ' + credentials.user + ' ' + artifacts.ext : 'Shoosh!');         var headers = { 'Content-Type': 'text/plain' };          // Generate Server-Authorization response header          var header = Hawk.server.header(credentials, artifacts, { payload: payload, contentType: headers['Content-Type'] });         headers['Server-Authorization'] = header;          // Send the response back          res.writeHead(!err ? 200 : 401, headers);         res.end(payload);     }); };  // Start server  Http.createServer(handler).listen(8000, 'example.com'); Client code: var Request = require('request'); var Hawk = require('hawk');   // Client credentials  var credentials = {     id: 'dh37fgj492je',     key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',     algorithm: 'sha256' }  // Request options  var requestOptions = {     uri: 'http://example.com:8000/resource/1?b=1&a=2',     method: 'GET',     headers: {} };  // Generate Authorization request header  var header = Hawk.client.header('http://example.com:8000/resource/1?b=1&a=2', 'GET', { credentials: credentials, ext: 'some-app-data' }); requestOptions.headers.Authorization = header.field;  // Send authenticated request  Request(requestOptions, function (error, response, body) {      // Authenticate the server's response      var isValid = Hawk.client.authenticate(response, credentials, header.artifacts, { payload: body });      // Output results      console.log(response.statusCode + ': ' + body + (isValid ? ' (valid)' : ' (invalid)')); }); Hawk utilized the SNTP module for time sync management. By default, the local machine time is used. To automatically retrieve and synchronize the clock within the application, use the SNTP 'start()' method. Hawk.sntp.start(); Protocol Example The client attempts to access a protected resource without authentication, sending the following HTTP request to the resource server: GET /resource/1?b=1&a=2 HTTP/1.1 Host: example.com:8000  The resource server returns an authentication challenge. HTTP/1.1 401 Unauthorized WWW-Authenticate: Hawk  The client has previously obtained a set of Hawk credentials for accessing resources on the ""http://example.com/"" server. The Hawk credentials issued to the client include the following attributes: Key identifier: dh37fgj492je Key: werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn Algorithm: sha256 The client generates the authentication header by calculating a timestamp (e.g. the number of seconds since January 1, 1970 00:00:00 GMT), generating a nonce, and constructing the normalized request string (each value followed by a newline character): hawk.1.header 1353832234 j4h3g2 GET /resource/1?b=1&a=2 example.com 8000  some-app-ext-data   The request MAC is calculated using HMAC with the specified hash algorithm ""sha256"" and the key over the normalized request string. The result is base64-encoded to produce the request MAC: 6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE=  The client includes the Hawk key identifier, timestamp, nonce, application specific data, and request MAC with the request using the HTTP Authorization request header field: GET /resource/1?b=1&a=2 HTTP/1.1 Host: example.com:8000 Authorization: Hawk id=""dh37fgj492je"", ts=""1353832234"", nonce=""j4h3g2"", ext=""some-app-ext-data"", mac=""6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE=""  The server validates the request by calculating the request MAC again based on the request received and verifies the validity and scope of the Hawk credentials. If valid, the server responds with the requested resource. Payload Validation Hawk provides optional payload validation. When generating the authentication header, the client calculates a payload hash using the specified hash algorithm. The hash is calculated over the concatenated value of (each followed by a newline character): hawk.1.payload the content-type in lowercase, without any parameters (e.g. application/json) the request payload prior to any content encoding (the exact representation requirements should be specified by the server for payloads other than simple single-part ascii to ensure interoperability) For example: Payload: Thank you for flying Hawk Content Type: text/plain Hash (sha256): Yi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY= Results in the following input to the payload hash function (newline terminated values): hawk.1.payload text/plain Thank you for flying Hawk   Which produces the following hash value: Yi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY=  The client constructs the normalized request string (newline terminated values): hawk.1.header 1353832234 j4h3g2 POST /resource/1?a=1&b=2 example.com 8000 Yi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY= some-app-ext-data   Then calculates the request MAC and includes the Hawk key identifier, timestamp, nonce, payload hash, application specific data, and request MAC, with the request using the HTTP Authorization request header field: POST /resource/1?a=1&b=2 HTTP/1.1 Host: example.com:8000 Authorization: Hawk id=""dh37fgj492je"", ts=""1353832234"", nonce=""j4h3g2"", hash=""Yi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY="", ext=""some-app-ext-data"", mac=""aSe1DERmZuRl3pI36/9BdZmnErTw3sNzOOAUlfeKjVw=""  It is up to the server if and when it validates the payload for any given request, based solely on it's security policy and the nature of the data included. If the payload is available at the time of authentication, the server uses the hash value provided by the client to construct the normalized string and validates the MAC. If the MAC is valid, the server calculates the payload hash and compares the value with the provided payload hash in the header. In many cases, checking the MAC first is faster than calculating the payload hash. However, if the payload is not available at authentication time (e.g. too large to fit in memory, streamed elsewhere, or processed at a different stage in the application), the server may choose to defer payload validation for later by retaining the hash value provided by the client after validating the MAC. It is important to note that MAC validation does not mean the hash value provided by the client is valid, only that the value included in the header was not modified. Without calculating the payload hash on the server and comparing it to the value provided by the client, the payload may be modified by an attacker. Response Payload Validation Hawk provides partial response payload validation. The server includes the Server-Authorization response header which enables the client to authenticate the response and ensure it is talking to the right server. Hawk defines the HTTP Server-Authorization header as a response header using the exact same syntax as the Authorization request header field. The header is contructed using the same process as the client's request header. The server uses the same credentials and other artifacts provided by the client to constructs the normalized request string. The ext and hash values are replaced with new values based on the server response. The rest as identical to those used by the client. The result MAC digest is included with the optional hash and ext values: Server-Authorization: Hawk mac=""XIJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE="", hash=""f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM="", ext=""response-specific""  Browser Support and Considerations A browser script is provided for including using a <script> tag in lib/browser.js. It's also a component. Hawk relies on the Server-Authorization and WWW-Authenticate headers in its response to communicate with the client. Therefore, in case of CORS requests, it is important to consider sending Access-Control-Expose-Headers with the value ""WWW-Authenticate, Server-Authorization"" on each response from your server. As explained in the specifications, it will indicate that these headers can safely be accessed by the client (using getResponseHeader() on the XmlHttpRequest object). Otherwise you will be met with a ""simple response header"" which excludes these fields and would prevent the Hawk client from authenticating the requests.You can read more about the why and how in this article Single URI Authorization There are cases in which limited and short-term access to a protected resource is granted to a third party which does not have access to the shared credentials. For example, displaying a protected image on a web page accessed by anyone. Hawk provides limited support for such URIs in the form of a bewit - a URI query parameter appended to the request URI which contains the necessary credentials to authenticate the request. Because of the significant security risks involved in issuing such access, bewit usage is purposely limited only to GET requests and for a finite period of time. Both the client and server can issue bewit credentials, however, the server should not use the same credentials as the client to maintain clear traceability as to who issued which credentials. In order to simplify implementation, bewit credentials do not support single-use policy and can be replayed multiple times within the granted access timeframe. Bewit Usage Example Server code: var Http = require('http'); var Hawk = require('hawk');   // Credentials lookup function  var credentialsFunc = function (id, callback) {      var credentials = {         key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',         algorithm: 'sha256'     };      return callback(null, credentials); };  // Create HTTP server  var handler = function (req, res) {      Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes) {          res.writeHead(!err ? 200 : 401, { 'Content-Type': 'text/plain' });         res.end(!err ? 'Access granted' : 'Shoosh!');     }); };  Http.createServer(handler).listen(8000, 'example.com'); Bewit code generation: var Request = require('request'); var Hawk = require('hawk');   // Client credentials  var credentials = {     id: 'dh37fgj492je',     key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',     algorithm: 'sha256' }  // Generate bewit  var duration = 60 * 5;      // 5 Minutes var bewit = Hawk.uri.getBewit('http://example.com:8080/resource/1?b=1&a=2', { credentials: credentials, ttlSec: duration, ext: 'some-app-data' }); var uri = 'http://example.com:8000/resource/1?b=1&a=2' + '&bewit=' + bewit; Security Considerations The greatest sources of security risks are usually found not in Hawk but in the policies and procedures surrounding its use. Implementers are strongly encouraged to assess how this module addresses their security requirements. This section includes an incomplete list of security considerations that must be reviewed and understood before deploying Hawk on the server. Many of the protections provided in Hawk depends on whether and how they are used. MAC Keys Transmission Hawk does not provide any mechanism for obtaining or transmitting the set of shared credentials required. Any mechanism used to obtain Hawk credentials must ensure that these transmissions are protected using transport-layer mechanisms such as TLS. Confidentiality of Requests While Hawk provides a mechanism for verifying the integrity of HTTP requests, it provides no guarantee of request confidentiality. Unless other precautions are taken, eavesdroppers will have full access to the request content. Servers should carefully consider the types of data likely to be sent as part of such requests, and employ transport-layer security mechanisms to protect sensitive resources. Spoofing by Counterfeit Servers Hawk provides limited verification of the server authenticity. When receiving a response back from the server, the server may choose to include a response Server-Authorization header which the client can use to verify the response. However, it is up to the server to determine when such measure is included, to up to the client to enforce that policy. A hostile party could take advantage of this by intercepting the client's requests and returning misleading or otherwise incorrect responses. Service providers should consider such attacks when developing services using this protocol, and should require transport-layer security for any requests where the authenticity of the resource server or of server responses is an issue. Plaintext Storage of Credentials The Hawk key functions the same way passwords do in traditional authentication systems. In order to compute the request MAC, the server must have access to the key in plaintext form. This is in contrast, for example, to modern operating systems, which store only a one-way hash of user credentials. If an attacker were to gain access to these keys - or worse, to the server's database of all such keys - he or she would be able to perform any action on behalf of any resource owner. Accordingly, it is critical that servers protect these keys from unauthorized access. Entropy of Keys Unless a transport-layer security protocol is used, eavesdroppers will have full access to authenticated requests and request MAC values, and will thus be able to mount offline brute-force attacks to recover the key used. Servers should be careful to assign keys which are long enough, and random enough, to resist such attacks for at least the length of time that the Hawk credentials are valid. For example, if the credentials are valid for two weeks, servers should ensure that it is not possible to mount a brute force attack that recovers the key in less than two weeks. Of course, servers are urged to err on the side of caution, and use the longest key reasonable. It is equally important that the pseudo-random number generator (PRNG) used to generate these keys be of sufficiently high quality. Many PRNG implementations generate number sequences that may appear to be random, but which nevertheless exhibit patterns or other weaknesses which make cryptanalysis or brute force attacks easier. Implementers should be careful to use cryptographically secure PRNGs to avoid these problems. Coverage Limitations The request MAC only covers the HTTP Host header and optionally the Content-Type header. It does not cover any other headers which can often affect how the request body is interpreted by the server. If the server behavior is influenced by the presence or value of such headers, an attacker can manipulate the request headers without being detected. Implementers should use the ext feature to pass application-specific information via the Authorization header which is protected by the request MAC. The response authentication, when performed, only covers the response payload, content-type, and the request information provided by the client in it's request (method, resource, timestamp, nonce, etc.). It does not cover the HTTP status code or any other response header field (e.g. Location) which can affect the client's behaviour. Future Time Manipulation The protocol relies on a clock sync between the client and server. To accomplish this, the server informs the client of its current time when an invalid timestamp is received. If an attacker is able to manipulate this information and cause the client to use an incorrect time, it would be able to cause the client to generate authenticated requests using time in the future. Such requests will fail when sent by the client, and will not likely leave a trace on the server (given the common implementation of nonce, if at all enforced). The attacker will then be able to replay the request at the correct time without detection. The client must only use the time information provided by the server if: it was delivered over a TLS connection and the server identity has been verified, or the tsm MAC digest calculated using the same client credentials over the timestamp has been verified. Client Clock Poisoning When receiving a request with a bad timestamp, the server provides the client with its current time. The client must never use the time received from the server to adjust its own clock, and must only use it to calculate an offset for communicating with that particular server. Bewit Limitations Special care must be taken when issuing bewit credentials to third parties. Bewit credentials are valid until expiration and cannot be revoked or limited without using other means. Whatever resource they grant access to will be completely exposed to anyone with access to the bewit credentials which act as bearer credentials for that particular resource. While bewit usage is limited to GET requests only and therefore cannot be used to perform transactions or change server state, it can still be used to expose private and sensitive information. Host Header Forgery Hawk validates the incoming request MAC against the incoming HTTP Host header. However, unless the optional host and port options are used with server.authenticate(), a malicous client can mint new host names pointing to the server's IP address and use that to craft an attack by sending a valid request that's meant for another hostname than the one used by the server. Server implementors must manually verify that the host header received matches their expectation (or use the options mentioned above). Frequently Asked Questions Where is the protocol specification? If you are looking for some prose explaining how all this works, this is it. Hawk is being developed as an open source project instead of a standard. In other words, the code is the specification. Not sure about something? Open an issue! Is it done? As of version 0.10.0, Hawk is feature-complete. However, until this module reaches version 1.0.0 it is considered experimental and is likely to change. This also means your feedback and contribution are very welcome. Feel free to open issues with questions and suggestions. Where can I find Hawk implementations in other languages? Hawk's only reference implementation is provided in JavaScript as a node.js module. However, it has been ported to other languages. The full list is maintained here. Please add an issue if you are working on another port. A cross-platform test-suite is in the works. Why isn't the algorithm part of the challenge or dynamically negotiated? The algorithm used is closely related to the key issued as different algorithms require different key sizes (and other requirements). While some keys can be used for multiple algorithm, the protocol is designed to closely bind the key and algorithm together as part of the issued credentials. Why is Host and Content-Type the only headers covered by the request MAC? It is really hard to include other headers. Headers can be changed by proxies and other intermediaries and there is no well-established way to normalize them. Many platforms change the case of header field names and values. The only straight-forward solution is to include the headers in some blob (say, base64 encoded JSON) and include that with the request, an approach taken by JWT and other such formats. However, that design violates the HTTP header boundaries, repeats information, and introduces other security issues because firewalls will not be aware of these ""hidden"" headers. In addition, any information repeated must be compared to the duplicated information in the header and therefore only moves the problem elsewhere. Why not just use HTTP Digest? Digest requires pre-negotiation to establish a nonce. This means you can't just make a request - you must first send a protocol handshake to the server. This pattern has become unacceptable for most web services, especially mobile where extra round-trip are costly. Why bother with all this nonce and timestamp business? Hawk is an attempt to find a reasonable, practical compromise between security and usability. OAuth 1.0 got timestamp and nonces halfway right but failed when it came to scalability and consistent developer experience. Hawk addresses it by requiring the client to sync its clock, but provides it with tools to accomplish it. In general, replay protection is a matter of application-specific threat model. It is less of an issue on a TLS-protected system where the clients are implemented using best practices and are under the control of the server. Instead of dropping replay protection, Hawk offers a required time window and an optional nonce verification. Together, it provides developers with the ability to decide how to enforce their security policy without impacting the client's implementation. What are app and dlg in the authorization header and normalized mac string? The original motivation for Hawk was to replace the OAuth 1.0 use cases. This included both a simple client-server mode which this module is specifically designed for, and a delegated access mode which is being developed separately in Oz. In addition to the Hawk use cases, Oz requires another attribute: the application id app. This provides binding between the credentials and the application in a way that prevents an attacker from tricking an application to use credentials issued to someone else. It also has an optional 'delegated-by' attribute dlg which is the application id of the application the credentials were directly issued to. The goal of these two additions is to allow Oz to utilize Hawk directly, but with the additional security of delegated credentials. What is the purpose of the static strings used in each normalized MAC input? When calculating a hash or MAC, a static prefix (tag) is added. The prefix is used to prevent MAC values from being used or reused for a purpose other than what they were created for (i.e. prevents switching MAC values between a request, response, and a bewit use cases). It also protects against exploits created after a potential change in how the protocol creates the normalized string. For example, if a future version would switch the order of nonce and timestamp, it can create an exploit opportunity for cases where the nonce is similar in format to a timestamp. Does Hawk have anything to do with OAuth? Short answer: no. Hawk was originally proposed as the OAuth MAC Token specification. However, the OAuth working group in its consistent incompetence failed to produce a final, usable solution to address one of the most popular use cases of OAuth 1.0 - using it to authenticate simple client-server transactions (i.e. two-legged). As you can guess, the OAuth working group is still hard at work to produce more garbage. Hawk provides a simple HTTP authentication scheme for making client-server requests. It does not address the OAuth use case of delegating access to a third party. If you are looking for an OAuth alternative, check out Oz. Implementations Logibit Hawk in F#/.Net Tent Hawk in Ruby Wealdtech in Java Kumar's Mohawk in Python Hiyosi in Go Acknowledgements Hawk is a derivative work of the HTTP MAC Authentication Scheme proposal co-authored by Ben Adida, Adam Barth, and Eran Hammer, which in turn was based on the OAuth 1.0 community specification. Special thanks to Ben Laurie for his always insightful feedback and advice. The Hawk logo was created by Chris Carrasco. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hueniverse/hawk#usage-example"	"A F# authentication library"	"true"
"Authentication and Authorization"	"IdentityModel"	"https://github.com/IdentityModel"	"Helper library for identity & access control in.NET 4.5 and MVC4/Web API."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"IdentityModel · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization IdentityModel Repositories People 1 Filters Sources Forks C# 5 7 IdentityModelv2 Experimental (and temporary) repo for IdentityModel multi-targeting using the new project system Updated Jul 15, 2016 C# 16 4 IdentityModel.OidcClient OpenID Connect Client Library for Native Applications Updated Jul 15, 2016 C# 3 3 IdentityModel.OidcClient.Samples Updated Jul 8, 2016 JavaScript 58 37 oidc-client-js Updated Jul 1, 2016 C# 2 6 IdentityModel.AspNetCore.OAuth2Introspection Updated Jun 28, 2016 C# 3 4 IdentityModel.AspNetCore.ScopeValidation Updated Jun 27, 2016 C# 11 3 Thinktecture.IdentityModel.v1 [deprecated] Add-on and convenience extension for claims-based identity in .NET Updated Jun 5, 2016 JavaScript 40 28 oidc-token-manager Updated May 25, 2016 C# 339 291 Thinktecture.IdentityModel [deprecated] Thinktecture.IdentityModel Updated May 17, 2016 C# 371 320 Thinktecture.IdentityModel.45 [deprecated] Helper library for identity & access control in .NET 4.5 and MVC4/Web API. Updated May 2, 2016 C# 45 32 IdentityModel A helper library for claims-based identity, OAuth 2.0 and OpenID Connect. Updated Apr 18, 2016 C# 0 0 IdentityModel.Owin.PopAuthentication Authentication Middleware for Proof of Possession Tokens Updated Apr 1, 2016 C# 0 0 IdentityModel.HttpSigning A Method for Signing HTTP Requests for OAuth (https://tools.ietf.org/html/draft-ietf-oauth-signed-http-request-02) Updated Apr 1, 2016 C# 2 0 UwpOidcClient Sample Universal Windows Platform (Windows 10) OpenID Connect Client Updated Feb 17, 2016 C# 50 30 Thinktecture.IdentityModel.40 [deprecated] Helper library for identity & access control in .NET 4.0/WIF and MVC4/Web API. Updated Jan 7, 2016 C# 231 124 AuthorizationServer Sample implementation of an OAuth2 Authorization Server Updated Nov 10, 2015 C# 0 1 WpfOidcClient Prototype of a WPF-based OpenID Connect Client Library Updated Sep 25, 2015 C# 0 0 IdentityModel.Owin.ClaimsTransformation Claims Transformation Middleware for OWIN/Katana Updated Sep 6, 2015 C# 4 3 IdentityModel.Owin.BasicAuthentication Basic Authentication Middleware Updated Apr 16, 2015 C# 9 5 Thinktecture.IdentityModel.Web [deprecated ]WCF Web Programming Model extensions for token authentication and claims-based identity. Updated May 22, 2012 1 People brockallen Brock Allen Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/IdentityModel"	"Helper library for identity & access control in.NET 4.5 and MVC4/Web API."	"true"
"Authentication and Authorization"	"IdentityServer"	"https://github.com/IdentityServer"	"Extensible OAuth2 and OpenID Connect provider framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"IdentityServer · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization IdentityServer http://identityserver.io identity@leastprivilege.com Repositories People 6 Filters Sources Forks C# 419 101 IdentityServer4 IdentityServer for ASP.NET Core 1.0 Updated Jul 15, 2016 HTML 34 119 Documentation Documentation for IdentityServer3 Updated Jul 15, 2016 C# 1,573 655 IdentityServer3 OpenID Connect Provider and OAuth 2.0 Authorization Server Framework Updated Jul 14, 2016 JavaScript 359 792 IdentityServer3.Samples Samples for Thinktecture IdentityServer v3 Updated Jul 9, 2016 JavaScript 93 67 IdentityServer4.Samples Updated Jul 8, 2016 C# 3 3 demo.identityserver.io IdentityServer Demo Instance Updated Jul 8, 2016 C# 7 9 IdentityServer3.Integration.AspNetCore IdentityServer3 Integration Library for ASP.NET Core Updated Jul 3, 2016 C# 43 48 IdentityServer3.AccessTokenValidation OWIN Middleware to validate access tokens from IdentityServer3 Updated Jul 1, 2016 C# 46 83 IdentityServer3.EntityFramework EntityFramework persistence layer for IdentityServer v3 Updated Jun 30, 2016 C# 17 17 IdentityServer4.AccessTokenValidation IdentityServer Access Token Validation for ASP.NET Core Updated Jun 28, 2016 CSS 38 48 IdentityServer3.Admin Admin - finally! Updated Jun 9, 2016 C# 20 31 IdentityServer3.WsFederation WS-Federation Plugin for IdentityServer v3 Updated Jun 3, 2016 C# 0 2 IdentityServer3.WsFederation.EntityFramework Entity Framework Persistence Layer for the WS-Federation Plugin Updated Jun 2, 2016 C# 2 4 IdentityServer3.AccessTokenValidation.Integration.AspNetCore ASP.NET Core Integration Package for the IdentityServer3 Access Token Validation Middleware Updated May 18, 2016 C# 7 18 IdentityServer3.Admin.EntityFramework Updated May 4, 2016 C# 29 24 IdentityServer3.MembershipReboot MembershipReboot support for Thinktecture IdentityServer3 Updated May 4, 2016 C# 51 47 IdentityServer3.AspNetIdentity ASP.NET Identity support for Thinktecture IdentityServer3 Updated Apr 13, 2016 C# 5 7 IdentityServer3.EntityFramework.Cli Command line interface used to configure IdentityServer database with clients and scopes Updated Feb 22, 2016 C# 19 12 WindowsAuthentication Windows Token to JWT Token Service for active and passive Flows Updated Feb 22, 2016 C# 30 19 IdentityServer1 Lightweight, easy to use security token service based on .NET Updated Feb 7, 2016 Previous 1 2 Next 6 People Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/IdentityServer"	"Extensible OAuth2 and OpenID Connect provider framework."	"true"
"Authentication and Authorization"	"OAuth"	"https://github.com/danielcrenna/oauth"	"A very lightweight library for generating OAuth 1.0a signatures written in C#"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"https://github.com/danielcrenna/oauth"	"A very lightweight library for generating OAuth 1.0a signatures written in C#"	"false"
"Build Automation"	"Psake"	"https://github.com/psake/psake"	".NET-based build automation tool written in PowerShell"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"828"	"67"	"170"	"GitHub - psake/psake: A build automation tool... now with less XML... Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 67 Star 828 Fork 170 psake/psake Code Issues 31 Pull requests 3 Wiki Pulse Graphs A build automation tool... now with less XML... 402 commits 1 branch 16 releases Fetching contributors PowerShell 99.1% Batchfile 0.9% PowerShell Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v4.6.0 v4.5.0 v4.4.1 v4.4.0 v4.3.2 v4.3.1 v4.3.0 v4.1.0 v4.00 v2.02 v2.01 v2.00 v1.00 v0.22 v0.20 v0.11 Nothing to show New pull request Latest commit 3b10a68 Jun 15, 2016 gep13 committed on GitHub Merge pull request #184 from dragon788/patch-1 … Fix typo Permalink Failed to load latest commit information. docs Fix typo Jun 15, 2016 en-US Added help for Get-PSakeScriptTasks and now export this function from… Mar 20, 2016 examples Adding an example for a parallel task Jan 30, 2016 images Moved psake-ps2 changes from master to psake-ps2 branch. Oct 3, 2009 nuget (choco) Removing unnecessary call to write success/failure Jan 15, 2016 specs #153 Added new Get-ScriptTasks function to the psake module. Mar 20, 2016 tabexpansion Ensure TabExpansion function exists before rename. Jan 11, 2013 .gitattributes Added repo setting to disable CRLF conversion (c.f. core.autocrlf) Oct 3, 2009 .gitignore Added Thumbs.db to gitignore Feb 26, 2013 NuGet.exe Update Nov 16, 2013 NuGetPackageBuilder.ps1 Version bump, nugetpackagebuilder.ps1 reads version from manifest Mar 5, 2016 README.markdown Update README.markdown Apr 1, 2016 license.txt Update licence year and copyrights Dec 2, 2013 mkdocs.yml (GH-155) Added all other doc files Mar 3, 2016 psake-buildTester.ps1 Adding ability to use a scriptblock when initializing an invoke-psake… May 7, 2012 psake-config.ps1 Defaulted psake to .NET 4.0 Mar 20, 2012 psake.cmd Added some comments to psake.ps1 and psake.cmd Jan 8, 2014 psake.ps1 Merge pull request #121 from InPermutation/master Nov 16, 2014 psake.psd1 Change Icon to match what was chosen for VSTS Task Mar 20, 2016 psake.psm1 Added help for Get-PSakeScriptTasks and now export this function from… Mar 20, 2016 README.markdown Welcome to the psake project. psake is a build automation tool written in PowerShell. It avoids the angle-bracket tax associated with executable XML by leveraging the PowerShell syntax in your build scripts. psake has a syntax inspired by rake (aka make in Ruby) and bake (aka make in Boo), but is easier to script because it leverages your existing command-line knowledge. psake is pronounced sake – as in Japanese rice wine. It does NOT rhyme with make, bake, or rake. How to get started: Step 1: Download and extract the project You will need to ""unblock"" the zip file before extracting - PowerShell by default does not run files downloaded from the internet. Just right-click the zip and click on ""properties"" and click on the ""unblock"" button. Step 2: CD into the directory where you extracted the project (where the psake.psm1 file is) Import-Module .\psake.psm1 If you encounter the following error ""Import-Module : ...psake.psm1 cannot be loaded because the execution of scripts is disabled on this system."" Please see ""get-help about_signing"" for more details. Run PowerShell as administrator Set-ExecutionPolicy RemoteSigned Get-Help Invoke-psake -Full this will show you help and examples of how to use psake Step 3: Run some examples CD .\examples Invoke-psake This will execute the ""default"" task in the ""default.ps1"" Invoke-psake .\default.ps1 Clean will execute the single task in the default.ps1 script Release Notes You can find all the information about each release of psake in the releases section. How To Contribute, Collaborate, Communicate If you'd like to get involved with psake, we have discussion groups over at google: psake-dev psake-users Anyone can fork the main repository and submit patches, as well. And lastly, the wiki and issues list are also open for additions, edits, and discussion. Also check out the psake-contrib project for scripts, modules and functions to help you with a build. License psake is released under the MIT license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/psake/psake"	".NET-based build automation tool written in PowerShell"	"true"
"Build Automation"	"FAKE"	"https://github.com/fsharp/FAKE"	"F# Make, a cross platform build automation system"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"613"	"63"	"392"	"GitHub - fsharp/FAKE: FAKE - F# Make Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 63 Star 613 Fork 392 fsharp/FAKE Code Issues 138 Pull requests 12 Pulse Graphs FAKE - F# Make http://fsharp.github.com/FAKE 5,663 commits 34 branches 1,563 releases 226 contributors F# 74.5% C# 19.2% JavaScript 4.0% CSS 1.5% HTML 0.4% TeX 0.2% Other 0.2% F# C# JavaScript CSS HTML TeX Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Calculator FCS4 FSFormatting FSI Formatting Globbing MonoBug Null OctoCleanup PATH Package Paket Paket2 Razor Restore Splitted TestST Travis VS2012 cache develop fixmono gh-pages master monad monofix paketparallel revert-1090-1082-print-cmd-line-warning rsync scp simplepack unboot v2 xunit Nothing to show SQLServerSplitted FirstVersionWithoutFSharpInstalled 4.31.1 4.31.0 4.30.2 4.30.1 4.30.0 4.29.2 4.29.1 4.29.0 4.28.0 4.27.0 4.26.0 4.25.5 4.25.4 4.25.3 4.25.2 4.25.1 4.25.0 4.24.3 4.24.2 4.24.1 4.24.0 4.23.6 4.23.5 4.23.4 4.23.3 4.23.2 4.23.1 4.23.0 4.22.9 4.22.8 4.22.7 4.22.6 4.22.5 4.22.4 4.22.3 4.22.2 4.22.1 4.22.0 4.21.4 4.21.3 4.21.2 4.21.1 4.21.0 4.20.0 4.19.0 4.18.0 4.17.1 4.17.0 4.17.0-alpha007 4.17.0-alpha005 4.17.0-alpha004 4.17.0-alpha003 4.17.0-alpha002 4.17.0-alpha001 4.16.1 4.16.0 4.16.0-alpha001 4.15.2 4.15.1 4.15.0 4.14.9 4.14.8 4.14.7 4.14.5 4.14.4 4.14.3 4.14.2 4.14.1 4.14.0 4.13.1 4.13.0 4.12.2 4.12.0 4.11.3 4.11.2 4.11.1 4.11.0 4.10.5 4.10.4 4.10.3 4.10.1 4.10.0 4.9.8 4.9.7 4.9.6 4.9.5 4.9.3 4.9.2 4.9.1 4.8.0 4.7.3 4.7.2 4.7.1 4.7.0 4.7.0-alpha002 4.7.0-alpha001 4.6.4 4.6.3 Nothing to show New pull request Latest commit 40dd0ff Jul 14, 2016 forki Bump version to 4.31.1 Permalink Failed to load latest commit information. .github Create ISSUE_TEMPLATE.md Apr 5, 2016 .paket Use latest bootstrapper Aug 10, 2015 Samples add FSharp.Core to Fake.FluentMigrator and run paket install Jun 18, 2016 bash-completion Add BASH completion for FAKE tasks Nov 29, 2015 help Fix Fake.Deploy downloadString Jun 29, 2016 lib manage FSharp.Core version using Paket Dec 3, 2014 modules/Octokit Update paket.dependencies Jun 27, 2016 paket-files/matthid/Yaaf.FSharp.Scripting/src/source/Yaaf.FSharp.Scripting Bump version to 4.15.0 Jan 19, 2016 src Bump version to 4.31.1 Jul 14, 2016 .editorconfig Add a .editorconfig file Mar 24, 2015 .gitattributes Add a Vagrant file to automatically deploy an Ubuntu 14.04 developmen… Mar 24, 2015 .gitignore add yaaf.fsharp.scripting to fakelib (infrastructure only). Jan 19, 2016 .travis.yml Use Travs CI language support for .NET Dec 26, 2014 FAKE.Deploy.Web.sln Remove starnge install script Oct 28, 2014 FAKE.sln Merge branch 'SlackNotifications' of https://github.com/bretkoppel/FAKE Feb 29, 2016 FAKE.sln.DotSettings Add shared sln R# settings with ShadowCopy off. Jan 17, 2016 ISSUE_TEMPLATE.md Create ISSUE_TEMPLATE.md Apr 14, 2016 License.txt Dual-license under Apache 2 and MS-PL, with Apache as default Nov 24, 2014 README.markdown Cool NuGet badge Apr 4, 2016 RELEASE_NOTES.md Revert ""make the parsing of FAKE commands that are used internal to t… Jul 14, 2016 Vagrantfile Add a Vagrant file to automatically deploy an Ubuntu 14.04 developmen… Mar 24, 2015 appveyor.yml Trying different appveyor.yml May 23, 2014 build-web-bundles.cmd Added web bundles build Jan 26, 2013 build-web-bundles.fsx Cleanup the use of <=> Nov 5, 2013 build.cmd Support target and args in build.cmd on Windows. Jan 19, 2016 build.fsx Reference SourceLink folder Jan 22, 2016 build.sh improve default npm path handling Jun 20, 2016 fake.cmd We don't need to specify the fsx Jan 26, 2013 fake.nuspec Updated link to project logo Nov 17, 2014 paket.dependencies Remove redundant entry in paket.dependencies which caused paket to fail. Jun 28, 2016 paket.lock add FSharp.Core to Fake.FluentMigrator and run paket install Jun 18, 2016 README.markdown FAKE - F# Make ""FAKE - F# Make"" is a cross platform build automation system. Due to its integration in F#, all benefits of the .NET Framework and functional programming can be used, including the extensive class library, powerful debuggers and integrated development environments like Visual Studio or MonoDevelop, which provide syntax highlighting and code completion. The new DSL was designed to be succinct, typed, declarative, extensible and easy to use. See the project home page for tutorials and API documentation. Build the project Mono: Run build.sh Windows: Run build.cmd How to contribute code See the contributing page. Maintainers Although this project is hosted in the fsharp repository for historical reasons, it is not maintained and managed by the F# Core Engineering Group. The F# Core Engineering Group acknowledges that the independent owner and maintainer of this project is Steffen Forkmann. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fsharp/FAKE"	"F# Make, a cross platform build automation system"	"true"
"Build Automation"	"Invoke-Build"	"https://github.com/nightroman/Invoke-Build"	"PowerShell build and test automation tool inspired by Psake."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"83"	"13"	"8"	"GitHub - nightroman/Invoke-Build: Build Automation in PowerShell Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 83 Fork 8 nightroman/Invoke-Build Code Issues 1 Pull requests 0 Wiki Pulse Graphs Build Automation in PowerShell https://github.com/nightroman/Invoke-Build/wiki 212 commits 1 branch 125 releases 1 contributor PowerShell 99.8% Batchfile 0.2% PowerShell Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2.14.7 v2.14.6 v2.14.5 v2.14.4 v2.14.3 v2.14.2 v2.14.1 v2.14.0 v2.13.0 v2.12.4 v2.12.3 v2.12.2 v2.12.1 v2.12.0 v2.11.1 v2.11.0 v2.10.4 v2.10.3 v2.10.2 v2.10.1 v2.10.0 v2.9.14 v2.9.13 v2.9.12 v2.9.11 v2.9.10 v2.9.9 v2.9.8 v2.9.7 v2.9.6 v2.9.5 v2.9.4 v2.9.3 v2.9.2 v2.9.1 v2.9.0 v2.8.1 v2.8.0 v2.7.4 v2.7.3 v2.7.1 v2.7.0 v2.6.3 v2.6.2 v2.6.1 v2.6.0 v2.5.2 v2.5.1 v2.5.0 v2.4.7 v2.4.6 v2.4.5 v2.4.4 v2.4.3 v2.4.2 v2.4.1 v2.4.0 v2.3.0 v2.2.0 v2.1.1 v2.1.0 v2.0.1 v2.0.0 v1.5.2 v1.5.1 v1.5.0 v1.4.1 v1.4.0 v1.3.2 v1.3.1 v1.3.0 v1.2.8 v1.2.7 v1.2.6 v1.2.5 v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.2 v1.1.1 v1.1.0 v1.0.41 v1.0.40 v1.0.39 v1.0.38 v1.0.37 v1.0.36 v1.0.35 v1.0.34 v1.0.33 v1.0.32 v1.0.31 v1.0.30 v1.0.29 v1.0.28 v1.0.27 v1.0.26 v1.0.25 Nothing to show New pull request Latest commit 917e321 Jul 13, 2016 nightroman Help and README Permalink Failed to load latest commit information. InvokeBuild Fixed #27, `Invoke-Builds` regression. Jul 8, 2016 Tasks 2.12.0 Package just core files... Apr 26, 2015 Tests Fixed #27, `Invoke-Builds` regression. Jul 7, 2016 .build.ps1 New-VSCodeTask.ps1 resolve #24, output encoding, console host Jun 1, 2016 .gitignore New-VSCodeTask.ps1 resolve #24, output encoding, console host Jun 1, 2016 Convert-psake.ps1 Convert-psake.ps1 TODO comments about $psake, exec, assert May 24, 2016 Invoke-Build-Help.ps1 Help and README Jul 13, 2016 Invoke-Build.ArgumentCompleters.ps1 Argument completers for v5 native, TabExpansionPlusPlus, TabExpansion… Jun 22, 2016 Invoke-Build.ps1 Help and README Jul 13, 2016 Invoke-Builds.ps1 Fixed #27, `Invoke-Builds` regression. Jul 7, 2016 Invoke-TaskFromISE.ps1 Use NoProfile and ExecutionPolicy in Invoke-TaskFrom*, Jun 20, 2016 Invoke-TaskFromVSCode.ps1 Use NoProfile and ExecutionPolicy in Invoke-TaskFrom*, Jun 20, 2016 LICENSE.txt Tweaks in error processing and satellite tools. Mar 8, 2016 New-VSCodeTask.ps1 Use NoProfile and ExecutionPolicy in Invoke-TaskFrom*, Jun 20, 2016 README.md Help and README Jul 13, 2016 Release-Notes.md Fixed #27, `Invoke-Builds` regression. Jul 7, 2016 Show-BuildGraph.ps1 Tweaks in error processing and satellite tools. Mar 8, 2016 Show-BuildTree.ps1 Tweaks in error processing and satellite tools. Mar 8, 2016 ib.cmd Resolved #8, covered by tests. Apr 18, 2015 ib.png v2.9.9 May 31, 2014 README.md Build Automation in PowerShell Invoke-Build is a build and test automation tool which invokes tasks defined in PowerShell v2.0+ scripts. It is similar to psake but arguably easier to use and more powerful. In addition to basic task processing the engine supports Incremental tasks with effectively processed inputs and outputs. Persistent builds which can be resumed after interruptions. Parallel builds as a part of another with common stats. Batch invocation of tests composed as tasks. Ability to define new classes of tasks. Invoke-Build can invoke the current task from a build script being composed in ISE and VSCode, see Invoke-TaskFromISE.ps1 and Invoke-TaskFromVSCode.ps1. Invoke-Build can be used as the task runner in VSCode with tasks maintained in a PowerShell build script instead of tasks.json, see New-VSCodeTask.ps1. The package The standalone script Invoke-Build.ps1 is enough for invoking build scripts. It can be downloaded directly from the repository and used alone right away. The package also includes helper scripts and the generated help file: Invoke-Build.ps1 - invokes build scripts, this is the build engine Invoke-Builds.ps1 - invokes parallel builds using the engine Invoke-Build-Help.xml - external content for Get-Help ib.cmd - Invoke-Build helper for cmd.exe Extra tools, see PSGallery and the repository: Invoke-Build.ArgumentCompleters.ps1 - completers for v5 native, TabExpansionPlusPlus, TabExpansion2.ps1 Invoke-TaskFromISE.ps1 - invokes a task from a build script opened in ISE Invoke-TaskFromVSCode.ps1 - invokes a task from a build script opened in VSCode New-VSCodeTask.ps1 - generates VSCode tasks bound to build script tasks And some more tools, see the repository: Convert-psake.ps1 - converts psake build scripts Show-BuildTree.ps1 - shows task trees as text Show-BuildGraph.ps1 - shows task trees by Graphviz Install as module Invoke-Build is distributed as the module InvokeBuild. In PowerShell 5.0 or with PowerShellGet you can install it by this command Install-Module InvokeBuild  The module provides commands Invoke-Build and Invoke-Builds. Import the module in order to make them available: Import-Module InvokeBuild  You can also call the module scripts directly. Consider to include the module directory to the path. In this scenario you do not have to import the module. Install as scripts Invoke-Build is also distributed as the NuGet package Invoke-Build. If you use scoop then invoke scoop install invoke-build  and you are done, scripts are downloaded and their directory is added to the path. You may need to start a new PowerShell session with the updated path. Otherwise download the directory ""Invoke-Build"" to the current location by this PowerShell command: Invoke-Expression ""& {$((New-Object Net.WebClient).DownloadString('https://github.com/nightroman/PowerShelf/raw/master/Save-NuGetTool.ps1'))} Invoke-Build""  Consider to include the directory with scripts to the path so that script paths may be omitted in commands. With cmd.exe use the helper ib.cmd. For similar experience in interactive PowerShell use an alias ib defined in a PowerShell profile Set-Alias ib <path>\Invoke-Build.ps1  <path>\ may be omitted if the script is in the path. Getting help If you are using the module then import it at first. If you are using scripts then make sure Invoke-Build-Help.xml from the package is in the same directory as Invoke-Build.ps1. Then invoke help Invoke-Build -full  In order to get help for commands, dot-source Invoke-Build: . Invoke-Build  This imports commands and makes their help available: help task -full  Online resources Basic Concepts : Why build scripts may have advantages over normal scripts. Script Tutorial : Take a look in order to get familiar with build scripts. Project Wiki : Detailed tutorials, helpers, notes, and etc. Examples : Build scripts used in various projects. Tasks : Samples, patterns, and various techniques. Questions, suggestions, and issues are welcome at Google Group and Project Issues. Or just hit me up on Twitter @romkuzmin Credits The project was inspired by psake, see Comparison with psake. Some concepts came from MSBuild, see Comparison with MSBuild. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nightroman/Invoke-Build"	"PowerShell build and test automation tool inspired by Psake."	"true"
"Build Automation"	"MSBuild"	"https://github.com/Microsoft/msbuild"	"The Microsoft Build Engine (MSBuild) is the build platform for.NET and Visual Studio"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2646"	"354"	"519"	"GitHub - Microsoft/msbuild: The Microsoft Build Engine (MSBuild) is the build platform for .NET and Visual Studio. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 354 Star 2,646 Fork 519 Microsoft/msbuild Code Issues 223 Pull requests 9 Wiki Pulse Graphs The Microsoft Build Engine (MSBuild) is the build platform for .NET and Visual Studio. 535 commits 6 branches 8 releases 42 contributors C# 99.6% XSLT 0.4% Batchfile 0.0% Groovy 0.0% C 0.0% Shell 0.0% C# XSLT Batchfile Groovy C Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev14-update dev14-update1 dev14-update2 dev14-update3 master xplat Nothing to show v14.0.25420.1-ish v14.0.25402.0-ish v14.0.25123.0-ish v14.0.25029.0-ish v14.0.25008.0-ish v14.0.24720.0-ish mono-hosted-msbuild-v0.2 mono-hosted-msbuild-v0.1 Nothing to show New pull request Latest commit be70f49 Jul 13, 2016 Sarabeth-Jaffe-Microsoft committed on GitHub Update badge link to correctly link to features in progress … Now correctly grabs 'x' amount of work items currently in the ""In Progress"" column. Permalink Failed to load latest commit information. Samples Add project configuration for x86 and x64 May 12, 2016 setup Update setup to drop x86 AnyCPU binaries for AMD64 Jul 8, 2016 src Merge pull request #769 from AndyGerlicher/RARUnitTestRefactor Jul 12, 2016 .editorconfig Added editorconfig properties from corefx Mar 20, 2015 .gitattributes force LF for cibuild.sh Dec 2, 2015 .gitignore gitignore: Ignore VS Code-generated files May 26, 2016 CreateBootstrappedMSBuild.cmd Build only MSBuild.exe platform specific May 24, 2016 CreatePrivateMSBuildEnvironment.proj Version bump 14.1 -> 15.0 Mar 31, 2016 LICENSE Initial commit Mar 11, 2015 README.md Update badge link to correctly link to features in progress Jul 13, 2016 RebuildWithLocalMSBuild.cmd Build only MSBuild.exe platform specific May 24, 2016 build.cmd Search build results in path indicated by variable Jan 29, 2016 build.proj Add support to build multiple platforms May 12, 2016 cibuild.sh stub log to avoid CI failing on master for crossplatform Dec 4, 2015 dir.props Update xunit version in dir.props (#687) Jun 13, 2016 dir.targets Add support for Platform configuration in build May 12, 2016 dir.traversal.targets Support for /m builds (make test projects sequential) May 13, 2016 netci.groovy Revert ""Enable Linux tests on CI"" Jun 3, 2016 version.json Adding file version using Nerdbank.GitVersioning Apr 27, 2016 README.md Microsoft.Build (MSBuild) The Microsoft Build Engine is a platform for building applications. This engine, which is also known as MSBuild, provides an XML schema for a project file that controls how the build platform processes and builds software. Visual Studio uses MSBuild, but MSBuild does not depend on Visual Studio. By invoking msbuild.exe on your project or solution file, you can orchestrate and build products in environments where Visual Studio isn't installed. For more information on MSBuild, see the MSDN documentation. Build Status Configuration Windows Ubuntu Mac OS X Full Framework (master) N/A N/A .NET Core (xplat) Source code Clone the sources: git clone https://github.com/Microsoft/msbuild.git Building Building MSBuild in VS 2015 For the full supported experience, you will need to have Visual Studio 2015. You can open the solution in Visual Studio 2013, but you will encounter issues building with the provided scripts. To get started on Visual Studio 2015: Install Visual Studio 2015. Select the following optional components: Microsoft Web Developer Tools Universal Windows App Development Tools Tools and Windows SDK 10.0.10240 Clone the source code (see above). Restore NuGet packages: msbuild /t:BulkRestoreNugetPackages build.proj Open src/MSBuild.sln solution in Visual Studio 2015. Building MSBuild in Unix (Mac & Linux) MSBuild's xplat branch allows MSBuild to be run on Unix Systems. Set-up instructions can be viewed on the wiki: Building Testing and Debugging on .Net Core MSBuild How to Engage, Contribute and Provide Feedback This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Before you contribute, please read through the contributing and developer guides to get an idea of what kinds of pull requests we will or won't accept. Contributing Guide Developer Guide Want to get more familiar with what's going on in the code? Pull requests: Open/Closed Issues You are also encouraged to start a discussion by filing an issue or creating a gist. MSBuild Components MSBuild. Microsoft.Build.CommandLine is the entrypoint for the Microsoft Build Engine (MSBuild.exe). Microsoft.Build. The Microsoft.Build namespaces contain types that provide programmatic access to, and control of, the MSBuild engine. Microsoft.Build.Framework. The Microsoft.Build.Framework namespace contains the types that define how tasks and loggers interact with the MSBuild engine. For additional information on this component, see our Microsoft.Build.Framework wiki page. Microsoft.Build.Tasks. The Microsoft.Build.Tasks namespace contains the implementation of all tasks shipping with MSBuild. Microsoft.Build.Utilities. The Microsoft.Build.Utilities namespace provides helper classes that you can use to create your own MSBuild loggers and tasks. License MSBuild is licensed under the MIT license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Microsoft/msbuild"	"The Microsoft Build Engine (MSBuild) is the build platform for.NET and Visual Studio"	"true"
"Build Automation"	"Cake"	"https://github.com/cake-build/cake"	"Cake (C# Make) is a cross platform build automation system with a C# DSL."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"672"	"56"	"166"	"GitHub - cake-build/cake: Cake (C# Make) is a cross platform build automation system. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 56 Star 672 Fork 166 cake-build/cake Code Issues 134 Pull requests 15 Wiki Pulse Graphs Cake (C# Make) is a cross platform build automation system. http://cakebuild.net/ 1,355 commits 3 branches 62 releases 68 contributors C# 99.8% Other 0.2% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags coreclr develop main Nothing to show v0.14.0 v0.13.0 v0.12.0 v0.11.0 v0.10.1 v0.10.0 v0.9.0 v0.8.0 v0.7.0 v0.6.4 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.5 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.2 v0.3.0 v0.2.2 v0.2.1 v0.2.0 v0.1.34 v0.1.33 v0.1.32 v0.1.31 v0.1.30 v0.1.29 v0.1.28 v0.1.27 v0.1.26 v0.1.25 v0.1.24 v0.1.23 v0.1.22 v0.1.21 v0.1.20 v0.1.19 v0.1.18 v0.1.17 v0.1.16 v0.1.15 v0.1.14 v0.1.13 v0.1.12 v0.1.11 v0.1.10 v0.1.9 v0.1.8 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.2 v0.1.1 Nothing to show New pull request Latest commit e6d0980 Jul 15, 2016 devlead committed on GitHub Merge pull request #1065 from Philo/feature/gitversion-nofetch … Adds /nofetch option support to GitVersion tool Permalink Failed to load latest commit information. .github (GH-850) Added Issue and PR Templates Apr 29, 2016 build Fixes invalid AppVeyor check in parameters.cake Jun 2, 2016 nuspec Cake joins the .NET Foundation Jun 9, 2016 src Adds /nofetch option support to GitVersion tool Jul 15, 2016 tests/integration Unified tool resolution May 25, 2016 tools (build) Updated Cake tool to version 0.14.0 Jul 11, 2016 .editorconfig (maint) Added .cake file to EditorConfig Dec 11, 2015 .gitignore Restore-NuGet-Packages retry handling May 13, 2016 .travis.yml Added caching to Travis CI build. Oct 5, 2015 CODEOFCONDUCT.md Added code of conduct. Dec 17, 2015 CONTRIBUTING.md Updated CONTRIBUTING.md Mar 10, 2016 GitReleaseManager.yaml (GH-1045) Change label order for GitReleaseManager Jul 14, 2016 GitVersionConfig.yaml (GH-567) Added back in the execution of GitVersion Feb 26, 2016 LICENSE Cake joins the .NET Foundation Jun 9, 2016 README.md Fixed spelling mistake Jul 15, 2016 ReleaseNotes.md (build) Updated version and release notes. Jul 11, 2016 appveyor.yml (GH-1058) Added second trigger for tools folder Jul 14, 2016 build.cake (GH-1040) Added new GitReleaseManager Jul 10, 2016 build.ps1 Fixed remaining arguments bug. Mar 16, 2016 build.sh Corrected resource download urls May 10, 2016 README.md Cake Cake (C# Make) is a build automation system with a C# DSL to do things like compiling code, copy files/folders, running unit tests, compress files and build NuGet packages. Build server Platform Status AppVeyor Windows Travis Linux / OS X TeamCity Windows Bitrise OS X Bitrise Linux Jenkins Windows Bamboo Windows Visual Studio Team Services Windows MyGet Build Services Windows Table of Contents Documentation Example Install the Cake bootstrapper Create a Cake script Run it! Contributing Get in touch License Documentation You can read the latest documentation at http://cakebuild.net/. Example This example downloads the Cake bootstrapper and executes a simple build script. The bootstrapper is used to bootstrap Cake in a simple way and is not in required in any way to execute build scripts. If you prefer to invoke the Cake executable yourself, take a look at the command line usage. This example is also available on our homepage: http://cakebuild.net/docs/tutorials/setting-up-a-new-project 1. Install the Cake bootstrapper The bootstrapper is used to download Cake and the tools required by the build script. Windows Invoke-WebRequest http://cakebuild.net/download/bootstrapper/windows -OutFile build.ps1 Linux curl -Lsfo build.sh http://cakebuild.net/download/bootstrapper/linux OS X curl -Lsfo build.sh http://cakebuild.net/download/bootstrapper/osx 2. Create a Cake script Add a cake script called build.cake to the same location as the bootstrapper script that you downloaded. var target = Argument(""target"", ""Default"");  Task(""Default"")   .Does(() => {   Information(""Hello World!""); });  RunTarget(target); 3. Run it! Windows # Execute the bootstrapper script. ./build.ps1 Linux / OS X # Adjust the permissions for the bootstrapper script. chmod +x build.sh  # Execute the bootstrapper script. ./build.sh Contributing So you’re thinking about contributing to Cake? Great! It’s really appreciated. Make sure you've read the contribution guidelines before sending that epic pull request. Fork the repository. Make your feature addition or bug fix. Don't forget the unit tests. Send a pull request. Get in touch License Copyright © Patrik Svensson, Mattias Karlsson, Gary Ewan Park and contributors. Cake is provided as-is under the MIT license. For more information see LICENSE. For Roslyn, see https://github.com/dotnet/roslyn/blob/master/License.txt For Mono.CSharp, see https://github.com/mono/mono/blob/master/mcs/LICENSE For Autofac, see https://github.com/autofac/Autofac/blob/master/LICENSE For NuGet.Core, see https://nuget.codeplex.com/license Thanks A big thank you has to go to JetBrains who provide each of the Cake Developers with an Open Source License for ReSharper that helps with the development of Cake. Code of Conduct This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information see the .NET Foundation Code of Conduct. .NET Foundation This project is supported by the .NET Foundation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cake-build/cake"	"Cake (C# Make) is a cross platform build automation system with a C# DSL."	"true"
"Caching"	"CacheCow"	"https://github.com/aliostad/CacheCow"	"An ASP.NET Web API HTTP caching implementation both on client and server"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"399"	"43"	"96"	"GitHub - aliostad/CacheCow: An ASP.NET Web API HTTP caching implementation both on client and server Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 43 Star 399 Fork 96 aliostad/CacheCow Code Issues 10 Pull requests 4 Wiki Pulse Graphs An ASP.NET Web API HTTP caching implementation both on client and server 267 commits 6 branches 0 releases 10 contributors C# 97.7% SourcePawn 1.5% Other 0.8% C# SourcePawn Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Legacy0.4 Server.MongoDB.Tests dotnet45 master sync wip Nothing to show Nothing to show New pull request Latest commit de9978d Mar 2, 2016 aliostad Merge pull request #157 from benfoster/bugs/last-modified-culture … TimedEntityTagHeader should parse RFC1123 date using Invariant culture. Permalink Failed to load latest commit information. lib adding memcached 1.2 proyectos May 21, 2013 samples/UsingCacheCowWithNancyAndOwin changes to include symbols and push Aug 24, 2015 scripts improv on nuget publish sn Sep 14, 2015 src TimedEntityTagHeader should parse RFC1123 date using Invariant culture. Mar 2, 2016 test Fixing #154 Jan 29, 2016 .gitattributes some end of line stuff + azure Apr 18, 2014 .gitignore adding ncrunch Jul 11, 2013 CacheCow.key Changes for sn Sep 13, 2015 CacheCow.msbuild improv on nuget publish sn Sep 13, 2015 CacheCow.public.key adding cachecow.key Apr 20, 2014 CacheCow.sln Changes for sn Sep 13, 2015 LICENSE.txt Adding license - issue #23 Mar 21, 2013 NuGet.Config nuget fixes and improve cache header when 304 Aug 24, 2015 README.md Update README.md Aug 24, 2015 TraceWriter.cs Some tracing added Aug 30, 2012 build-sn.bat Changes for sn Sep 13, 2015 build.bat Changes for sn Sep 13, 2015 build.ps1 clean up Jul 17, 2012 nuget.exe Updating nuget.exe Sep 7, 2015 publish-sn.bat improv on nuget publish sn Sep 13, 2015 README.md CacheCow An implementation of HTTP Caching in ASP.NET Web API for both client-side and server-side. Please see Wiki NOTE Currently CacheCow's attribute setting does not work with Attribute Routing. And I personally think you should not use Attribute Routing... ""Give a rope to people and they will hang themselves up with it"" - anonymous Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aliostad/CacheCow"	"An ASP.NET Web API HTTP caching implementation both on client and server"	"true"
"Caching"	"Akavache"	"https://github.com/akavache/Akavache"	"An asynchronous, persistent key-value store"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1204"	"100"	"200"	"GitHub - akavache/Akavache: An asynchronous, persistent key-value store Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 100 Star 1,204 Fork 200 akavache/Akavache Code Issues 57 Pull requests 4 Wiki Pulse Graphs An asynchronous, persistent key-value store 1,100 commits 18 branches 36 releases 24 contributors C# 99.3% Other 0.7% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags akavache2 akavache4-master akavache5-master coalescing-fixes datastore-spike fix-them-builds haacked/nuget-restore-the-right-way let-eriks-dream-soar master move-to-ms-rx no-more-locking-oopses realmio remove-winrt80 rx-2.2.5 sayonara-reactiveui sqlite-ng use-the-right-scheduler-yo xamarin-http Nothing to show 4.1.2 4.1.1 4.1.0 4.0.4 4.0.3 4.0.2 4.0.1 4.0.0 3.99.3 3.99.2 3.99.1 3.2.0 3.1.2 3.1.1 3.1.0 3.0.2 3.0.1 2.6.9 2.6.8 2.6.7 2.6.6 2.6.5 2.6.4 2.6.3 2.6.2 2.6.1 2.6.0 2.5.1 2.5.0 2.4.3 2.4.1 2.4.0 2.3.0 2.2.2 2.2.1 2.2.0 Nothing to show New pull request Latest commit 4499dd4 May 27, 2016 flagbug Merge pull request #293 from kentcb/Shutdown … Add Shutdown docs to README. Permalink Failed to load latest commit information. .nuget Sorry Haacked, I can't stand it anymore Jun 12, 2014 Akavache.Deprecated Version bump to 4.1.2 Oct 26, 2015 Akavache.Mobile Revert ""Remove the support for WinRT80, since it can't even be opened… May 24, 2016 Akavache.Sqlite3 Index the TypeName in the database to make bulk object queries faster May 23, 2016 Akavache.Tests Allow UTC DateTimes to be forced. Oct 27, 2015 Akavache Revert ""Remove the support for WinRT80, since it can't even be opened… May 24, 2016 component MonoMac only Feb 7, 2014 packages Merge remote-tracking branch 'origin/pr/163' Jul 24, 2014 .gitattributes Update .gitignore and .gitattributes. Jul 18, 2013 .gitignore DS_Store is a crime Jul 17, 2014 .gitmodules Add Pierce Nov 11, 2013 Akavache.6.0.ReSharper Initial import Dec 1, 2011 Akavache.6.1.ReSharper Add R# 6.1 file Jan 6, 2012 Akavache.sln Revert ""Remove the support for WinRT80, since it can't even be opened… May 24, 2016 Akavache_VSAll.sln Revert ""Remove the support for WinRT80, since it can't even be opened… May 24, 2016 Akavache_XSAll.sln Project nonsense Jan 3, 2015 Akavache_XSNoMac.sln Merge remote-tracking branch 'origin/akavache4-master' into akavache-… Dec 24, 2013 BuildPC.cmd Update release scripts to build Dec 27, 2013 CODE_OF_CONDUCT.md Update CODE_OF_CONDUCT.md Jan 22, 2016 CleanFolders.ps1 Update packages. Jul 23, 2014 CommonAssemblyInfo.cs Version bump to 4.1.2 Oct 27, 2015 LICENSE Add LICENSE Apr 23, 2012 Logo.psd Add a logo for Akavache Jul 20, 2013 MakeRelease.ps1 Revert ""Remove the support for WinRT80, since it can't even be opened… May 24, 2016 Makefile Package restore in Makefile Jul 17, 2014 PACKAGING.md Update some documentation Jul 20, 2013 README.md Add Shutdown docs to README. May 27, 2016 Rebracer.xml Add rebracer file. Jul 18, 2014 akavache-meta.nuspec Version bump to 4.1.2 Oct 27, 2015 README.md Akavache: An Asynchronous Key-Value Store for Native Applications Akavache is an asynchronous, persistent (i.e. writes to disk) key-value store created for writing desktop and mobile applications in C#, based on SQLite3. Akavache is great for both storing important data (i.e. user settings) as well as cached local data that expires. Where can I use it? Akavache is currently compatible with: Xamarin.iOS / Xamarin.Mac 32-bit Xamarin.Android .NET 4.5 Desktop (WPF) Windows Phone 8 WinRT (Windows Store) Windows Phone 8.1 Universal Apps What does that mean? Downloading and storing remote data from the internet while still keeping the UI responsive is a task that nearly every modern application needs to do. However, many applications that don't take the consideration of caching into the design from the start often end up with inconsistent, duplicated code for caching different types of objects. Akavache is a library that makes common app patterns easy, and unifies caching of different object types (i.e. HTTP responses vs. JSON objects vs. images). It's built on a core key-value byte array store (conceptually similar to a Dictionary<string, byte[]>), and on top of that store, extensions are added to support: Arbitrary objects via JSON.NET Fetching and loading Images and URLs from the Internet Storing and automatically encrypting User Credentials Platform-specific notes Xamarin.iOS / Xamarin.Mac 32-bit - No issues. Xamarin.Android - No issues. .NET 4.5 Desktop (WPF) - No issues Windows Phone 8.0 - You must mark your application as x86 or ARM, or else you will get a strange runtime error about SQLitePCL_Raw not loading correctly. WinRT (Windows Store) - You must mark your application as x86 or ARM, or else you will get a strange runtime error about SQLitePCL_Raw not loading correctly. You must also ensure that the Microsoft Visual C++ runtime is added to your project. This means that you must submit several versions of your app to the Store to support ARM. Windows Phone 8.1 Universal Apps - You must mark your application as x86 or ARM, or else you will get a strange runtime error about SQLitePCL_Raw not loading correctly. You must also ensure that the Microsoft Visual C++ runtime is added to your project. Getting Started Interacting with Akavache is primarily done through an object called BlobCache. At App startup, you must first set your app's name via BlobCache.ApplicationName - on the desktop, your application's data will be stored in %AppData%\[ApplicationName] and %LocalAppData%\[ApplicationName]. Store data that should be shared between different machines in BlobCache.UserAccount and store data that is throwaway or per-machine (such as images) in BlobCache.LocalMachine. The most straightforward way to use Akavache is via the object extensions: using System.Reactive.Linq;   // IMPORTANT - this makes await work!  // Make sure you set the application name before doing any inserts or gets BlobCache.ApplicationName = ""AkavacheExperiment"";  var myToaster = new Toaster(); await BlobCache.UserAccount.InsertObject(""toaster"", myToaster);  // // ...later, in another part of town... //  // Using async/await var toaster = await BlobCache.UserAccount.GetObject<Toaster>(""toaster"");  // or without async/await Toaster toaster;  BlobCache.UserAccount.GetObject<Toaster>(""toaster"")     .Subscribe(x => toaster = x, ex => Console.WriteLine(""No Key!"")); Handling Errors When a key is not present in the cache, GetObject throws a KeyNotFoundException (or more correctly, OnError's the IObservable). Often, you would want to return a default value instead of failing: Toaster toaster;  try {     toaster = await BlobCache.UserAccount.GetObjectAsync(""toaster""); } catch (KeyNotFoundException ex) {     toaster = new Toaster(); }  // Or without async/await: toaster = await BlobCache.UserAccount.GetObjectAsync<Toaster>(""toaster"")     .Catch(Observable.Return(new Toaster())); Shutting Down Critical to the integrity of your Akavache cache is the BlobCache.Shutdown() method. You must call this when your application shuts down. Moreover, be sure to wait for the result: BlobCache.Shutdown().Wait(); Failure to do this may mean that queued items are not flushed to the cache. Examining Akavache caches Using Akavache Explorer, you can dig into Akavache repos for debugging purposes to see what has been stored. What's this Global Variable nonsense? Why can't I use $FAVORITE_IOC_LIBRARY You totally can. Just instantiate SQLitePersistentBlobCache or SQLiteEncryptedBlobCache instead - the static variables are there just to make it easier to get started. Basic Method Documentation Every blob cache supports the basic raw operations given below (some of them are not implemented directly, but are added on via extension methods): /*  * Get items from the store  */  // Get a single item IObservable<byte[]> Get(string key);  // Get a list of items IObservable<IDictionary<string, byte[]>> Get(IEnumerable<string> keys);  // Get an object serialized via InsertObject IObservable<T> GetObject<T>(string key);  // Get all objects of type T IObservable<IEnumerable<T>> GetAllObjects<T>();  // Get a list of objects given a list of keys IObservable<IDictionary<string, T>> GetObjects<T>(IEnumerable<string> keys);  /*  * Save items to the store  */  // Insert a single item IObservable<Unit> Insert(string key, byte[] data, DateTimeOffset? absoluteExpiration = null);  // Insert a set of items IObservable<Unit> Insert(IDictionary<string, byte[]> keyValuePairs, DateTimeOffset? absoluteExpiration = null);  // Insert a single object IObservable<Unit> InsertObject<T>(string key, T value, DateTimeOffset? absoluteExpiration = null);  // Insert a group of objects IObservable<Unit> InsertObjects<T>(IDictionary<string, T> keyValuePairs, DateTimeOffset? absoluteExpiration = null);  /*  * Remove items from the store  */  // Delete a single item IObservable<Unit> Invalidate(string key);  // Delete a list of items IObservable<Unit> Invalidate(IEnumerable<string> keys);  // Delete a single object (do *not* use Invalidate for items inserted with InsertObject!) IObservable<Unit> InvalidateObject<T>(string key);  // Deletes a list of objects IObservable<Unit> InvalidateObjects<T>(IEnumerable<string> keys);  // Deletes all items (regardless if they are objects or not) IObservable<Unit> InvalidateAll();  // Deletes all objects of type T IObservable<Unit> InvalidateAllObjects<T>();  /*  * Get Metadata about items  */  // Return a list of all keys. Use for debugging purposes only. IObservable<IEnumerable<string>> GetAllKeys();  // Return the time which an item was created IObservable<DateTimeOffset?> GetCreatedAt(string key);  // Return the time which an object of type T was created IObservable<DateTimeOffset?> GetObjectCreatedAt<T>(string key);  // Return the time which a list of keys were created IObservable<IDictionary<string, DateTimeOffset?>> GetCreatedAt(IEnumerable<string> keys);  /*  * Utility methods  */  // Attempt to ensure all outstanding operations are written to disk IObservable<Unit> Flush();  // Preemptively drop all expired keys and run SQLite's VACUUM method on the // underlying database IObservable<Unit> Vacuum(); Extension Method Documentation On top of every IBlobCache object, there are extension methods that help with common application scenarios: /*  * Username / Login Methods (only available on ISecureBlobCache)  */  // Save login information for the given host IObservable<Unit> SaveLogin(string user, string password, string host = ""default"", DateTimeOffset? absoluteExpiration = null);  // Load information for the given host IObservable<LoginInfo> GetLoginAsync(string host = ""default"");  // Erase information for the given host IObservable<Unit> EraseLogin(string host = ""default"");  /*  * Downloading and caching URLs and Images  */  // Download a file as a byte array IObservable<byte[]> DownloadUrl(string url,     IDictionary<string, string> headers = null,     bool fetchAlways = false,     DateTimeOffset? absoluteExpiration = null);  // Load a given key as an image IObservable<IBitmap> LoadImage(string key, float? desiredWidth = null, float? desiredHeight = null);  // Download an image from the network and load it IObservable<IBitmap> LoadImageFromUrl(string url,     bool fetchAlways = false,     float? desiredWidth = null,     float? desiredHeight = null,     DateTimeOffset? absoluteExpiration = null);  /*  * Composite operations  */  // Attempt to return an object from the cache. If the item doesn't // exist or returns an error, call a Func to return the latest // version of an object and insert the result in the cache. IObservable<T> GetOrFetchObject<T>(string key, Func<Task<T>> fetchFunc, DateTimeOffset? absoluteExpiration = null);  // Like GetOrFetchObject, but isn't async IObservable<T> GetOrCreateObject<T>(string key, Func<T> fetchFunc, DateTimeOffset? absoluteExpiration = null);  // Immediately return a cached version of an object if available, but *always* // also execute fetchFunc to retrieve the latest version of an object. IObservable<T> GetAndFetchLatest<T>(string key,     Func<Task<T>> fetchFunc,     Func<DateTimeOffset, bool> fetchPredicate = null,     DateTimeOffset? absoluteExpiration = null); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/akavache/Akavache"	"An asynchronous, persistent key-value store"	"true"
"Caching"	"CacheManager"	"https://github.com/MichaCo/CacheManager"	"A common interface and abstraction layer for caching."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"313"	"69"	"120"	"GitHub - MichaCo/CacheManager: CacheManager is an open source caching abstraction layer for .NET written in C#. It supports various cache providers and implements many advanced features. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 69 Star 313 Fork 120 MichaCo/CacheManager Code Issues 15 Pull requests 1 Wiki Pulse Graphs CacheManager is an open source caching abstraction layer for .NET written in C#. It supports various cache providers and implements many advanced features. http://cachemanager.net 413 commits 3 branches 15 releases 4 contributors C# 99.7% Other 0.3% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags dev master redis/core-clr Nothing to show 0.8.0 0.7.4 0.7.3 0.7.2 0.7.1 0.7.0 0.6.1 0.6.0 0.5.0 0.4.4.1 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 Nothing to show New pull request Latest commit 8dfade9 Jun 19, 2016 MichaCo Fixing precision issues in storing expiration timeout in redis. Fixes #… … …57 Permalink Failed to load latest commit information. .nuget Fixing ms build!? Jan 29, 2016 Articles Back to absolute urls Mar 1, 2016 Documentation trying to improve load time of toc.html Feb 25, 2016 common adding GzJson serialization to configuration builder Jun 5, 2016 samples Fixing precision issues in storing expiration timeout in redis. Fixes #… Jun 19, 2016 src Fixing precision issues in storing expiration timeout in redis. Fixes #… Jun 19, 2016 test Fixing precision issues in storing expiration timeout in redis. Fixes #… Jun 19, 2016 tools #44 rename backplane part 1 Feb 28, 2016 .gitattributes Moved from cachemanager.codeplex.com Mar 22, 2015 .gitignore Part 1 of migrating to dotnet core RC2 #37 Jun 5, 2016 .travis.yml going back to no coreclr build on travis... Feb 12, 2016 COPYRIGHT.txt Moved from cachemanager.codeplex.com Mar 22, 2015 CacheManager.Msbuild.sln update readme, new docs Feb 28, 2016 CacheManager.sln Adding serialization docs #40 Feb 28, 2016 LICENSE Initial commit Mar 22, 2015 NuGet.Config +Fixed an issue where asp.net core logging RC1 mixes Debug and Trace … Feb 6, 2016 README.md Update README.md Mar 24, 2016 appveyor.vs2013.yml new version Feb 28, 2016 appveyor.yml new version Feb 28, 2016 build.cmd Part 1 of migrating to dotnet core RC2 #37 Jun 5, 2016 build.ps1 Part 1 of migrating to dotnet core RC2 #37 Jun 5, 2016 build.sh Part 1 of migrating to dotnet core RC2 #37 Jun 5, 2016 global.json Part 1 of migrating to dotnet core RC2 #37 Jun 5, 2016 makefile.shade Created dnx solution with new project structure and multi targets. Jun 3, 2015 README.md CacheManager CacheManager is an open source caching abstraction layer for .NET written in C#. It supports various cache providers and implements many advanced features. The main goal of the CacheManager package is to make developer's life easier to handle even very complex caching scenarios. With CacheManager it is possible to implement multiple layers of caching, e.g. in-process caching in front of a distributed cache, in just a few lines of code. CacheManager is not just an interface to unify the programming model for various cache providers, which will make it very easy to change the caching strategy later on in a project. It also offers additional features, like cache synchronization, concurrent updates, serialization, events, performance counters... The developer can opt-in to those features only if needed. Build Status Build Server Status Windows, KoreBuild Windows, MSBuild Linux, Mono CacheManager Nuget Packages Package Name .Net 4.0 .Net 4.5 DNX 4.5.1 Dotnet 5.2 Dotnet 5.4 CacheManager.Core x x x x x CacheManager.Serialization.Json x x x x x CacheManager.StackExchange.Redis x x x - - CacheManager.SystemRuntimeCaching x x x - - CacheManager.Memcached x x x - - CacheManager.Microsoft.Extensions.Configuration - - x - x CacheManager.Microsoft.Extensions.Logging - - x - x CacheManager.Web - x x - - CacheManager.Couchbase - x x - - Beta Packages Beta versions of the CacheManager packages are getting pushed to https://www.myget.org/gallery/cachemanager on each build. Add the following feed, if you want to play with the not yet released bits: https://www.myget.org/F/cachemanager/api/v3/index.json  To find which check-in created which build, use this build history. Documentation Documentation can be found within the articles folder of the Cache Manager's repository and hosted on my website: Getting Started Is a very basic introduction of how to install and use Cache Manager Configuration Explains how to configure Cache Manager via code or configuration file Features and Architecture A more advanced in depth introduction to all features of Cache Manager Update Operations Explanation of why and when to use the update method instead of Put Serialization Cache value serialization and configuration options explained in detail. Cache Synchronization Use case for and explanation of the Cache Backplane feature. Logging The logging abstraction and implementations explained There is also from source generated html documentation available online. Examples Examples included in the Cache Manager repository Some usage examples ASP.NET MVC website showcasing usage of the Cache Manager OutputCache provider Single Page Todo App with Cache Manager on Azure using Redis Features in Version: 0.8.x One common interface for handling different caching technologies: ICache<T> Configurable by Code with many different paths and a fluent configuration builder Microsoft.Extensions.Configuration App/Web.config See configuration docs Support for different cache providers MemoryCache (System.Runtime.Caching) Redis using StackExchange.Redis Memcached using Enyim.Memcached Couchbase using Couchbase.Net.Client v2 System.Web.Caching based (included in the Web package) Serialization can now be configured. Serialization is only needed in distributed caches. The default implementation uses binary serialization. The Serialization.Json packages provides a Newtonsoft.Json based alternative. Update values with lock or transaction for distributed caches. The interfaced provides a simple update method which internally ensures you work with the latest version. And CacheManager handles version conflicts for you. Logging CacheManager comes with an extensible logging API (see samples). All standard cache operations are logged Based on log levels more or less information will be logged (try Trace and Debug) Current concrete implementation is based on the ASP.NET Core logging. Other implementation of CacheManager's ILoggerFactory might follow. Strongly typed cache interface. Multiple layers By having multiple cache handles managed by CacheManager, you can easily implement layered caches. For example, an in process cache in front of your distributed cache, to make read access faster. CacheManager will synchronize those layers for you. Put and Add operations will always be executed on all cache handles registered on the manager. On Get, there are different configuration options defined by CacheUpdateMode, if the item was available in one cache handle: None: No update across the cache handles on Get Up: Updates the handles ""above"" All: Updates/Adds the item to all handles Expiration: It is possible to configure the expiration per cache handle within the manager or per cache item. The following are the supported expiration modes: Sliding expiration: On cache hit, the cache item expiration timeout will be extended by the configured amount. Absolute expiration: The cache item will expire after the configured timeout. Cache Regions: Even if some cache systems do not support or implement cache regions, the CacheManager implements the mechanism. This can be used to for example group elements and remove all of them at once. Statistics: Counters for all kind of cache actions. Performance Counters: To be able to inspect certain numbers with perfmon, CacheManager supports performance counters per instance of the manager and per cache handle. Event System: CacheManager triggers events for common cache actions: OnGet, OnAdd, OnPut, OnRemove, OnClear, OnClearRegion System.Web.OutputCache implementation to use CacheManager as OutputCache provider which makes the OutputCache extremely flexible, for example by using a distributed cache like Redis across many web servers. Cache clients synchronization Implemented with the Redis pub/sub feature (Other implementations without Redis might be an option for a later version) Supports .Net 4.0, .Net 4.5, ASP.NET DNX 4.5.1 and Core Benchmarks Benchmarks have been implemented with BenchmarkDotNet. All CacheManager instances used in the benchmarks have only one cache handle configured, either the Dictionary, System.Runtime or Redis handle. We are using the same configuration for all benchmarks and running two jobs each, one for x86 and one for x64. Regarding the different platforms, the conclusion is obviously that x64 is always faster than the x86 platform, but x64 consumes slightly more memory of course. BenchmarkDotNet=v0.9.1.0 OS=Microsoft Windows NT 6.2.9200.0 Processor=Intel(R) Core(TM) i7-6700 CPU @ 3.40GHz, ProcessorCount=8 Frequency=3328117 ticks, Resolution=300.4702 ns HostCLR=MS.NET 4.0.30319.42000, Arch=32-bit RELEASE  Type=PutWithRegionSingleBenchmark  Mode=Throughput  Platform=X64   Jit=RyuJit  LaunchCount=1  WarmupCount=2   TargetCount=100  Add Adding one item per run Redis will be a lot slower in this scenario because CacheManager waits for the response to be able to return the bool value if the key has been added or not. In general, it is good to see how fast the Dictionary handle is compared to the System.Runtime one. One thing you cannot see here is that also the memory footprint of the Dictionary handle is much lower. Method Platform Median StdDev Scaled Dictionary X64 1.7254 us 0.0511 us 1.00 Dictionary X86 1.9563 us 0.0399 us 1.00 Runtime X64 4.9839 us 0.0778 us 2.89 Runtime X86 7.0324 us 0.2012 us 3.59 Redis X64 56.6671 us 1.7202 us 32.84 Redis X86 58.0775 us 0.9517 us 29.69 Adding one item per run with using region Method Platform Median StdDev Scaled Dictionary X64 1.8094 us 0.0386 us 1.00 Dictionary X86 2.5029 us 0.1179 us 1.00 Runtime X64 6.6934 us 0.1275 us 3.70 Runtime X86 9.2334 us 0.1637 us 3.69 Redis X64 58.5355 us 1.7054 us 32.35 Redis X86 61.0272 us 1.4178 us 24.38 Put Put 1 item per run Redis is as fast as the other handles in this scenario because CacheManager uses fire and forget for those operations. For Put it doesn't matter to know if the item has been added or updated... Method Platform Median StdDev Scaled Dictionary X64 1.6802 us 0.0235 us 1.00 Dictionary X86 1.9445 us 0.0341 us 1.00 Runtime X64 4.4431 us 0.0651 us 2.64 Runtime X86 6.5231 us 0.1063 us 3.35 Redis X64 2.6869 us 0.0934 us 1.60 Redis X86 3.5490 us 0.0848 us 1.83 Put 1 item per run with region Method Platform Median StdDev Scaled Dictionary X64 1.7401 us 0.0365 us 1.00 Dictionary X86 2.4589 us 0.1022 us 1.00 Runtime X64 6.1772 us 0.3683 us 3.55 Runtime X86 9.9298 us 0.5574 us 4.04 Redis X64 3.0807 us 0.0906 us 1.77 Redis X86 3.6385 us 0.2123 us 1.48 Get Get 1 item per run With Get operations we can clearly see how much faster an in-memory cache is, compared to the distributed variant. That's why it makes so much sense to use CacheManager with a first and secondary cache layer. Method Platform Median StdDev Scaled Dictionary X64 169.8708 ns 4.6186 ns 1.00 Dictionary X86 540.0879 ns 8.9363 ns 1.00 Runtime X64 310.4025 ns 8.2928 ns 1.83 Runtime X86 1,030.5911 ns 8.0532 ns 1.91 Redis X64 56,917.3537 ns 2,035.4765 ns 335.06 Redis X86 59,519.5459 ns 1,527.9613 ns 110.20 Get 1 item per run with region Method Platform Median StdDev Scaled Dictionary X64 234.9676 ns 7.9172 ns 1.00 Dictionary X86 600.0429 ns 13.7090 ns 1.00 Runtime X64 497.4116 ns 15.6998 ns 2.12 Runtime X86 1,191.6452 ns 19.8484 ns 1.99 Redis X64 57,257.9868 ns 1,705.0148 ns 243.68 Redis X86 61,789.3944 ns 1,775.6064 ns 102.97 [TOC] Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MichaCo/CacheManager"	"A common interface and abstraction layer for caching."	"true"
"CLI"	"Command Line Parser"	"https://github.com/gsscoder/commandline"	"The Command Line Parser Library offers to CLR applications a clean and concise API for manipulating command line arguments and related tasks"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"937"	"82"	"258"	"GitHub - gsscoder/commandline: Terse syntax C# command line parser for .NET with F# support Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 82 Star 937 Fork 258 gsscoder/commandline Code Issues 77 Pull requests 13 Wiki Pulse Graphs Terse syntax C# command line parser for .NET with F# support 1,355 commits 3 branches 40 releases 26 contributors C# 99.4% Other 0.6% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dotnet-core master stable-1.9.71.2 Nothing to show v1.9.71.2 v1.9.62.15 v1.9.61.1 v1.9.6.1 v1.9.5.1 v1.9.4.219 v1.9.4.215 v1.9.4.209 v1.9.4.207 v1.9.4.203 v1.9.4.201 v1.9.4.139 v1.9.4.131 v1.9.4.127 v1.9.4.125 v1.9.4.123 v1.9.4.121 v1.9.4.119 v1.9.4.117 v1.9.4.115 v1.9.4.113 v1.9.4.111 v1.9.4.109 v1.9.4.107 v1.9.4.101 v1.9.4.99 v1.9.4.97 v1.9.4.95 v1.9.4.93 v1.9.4.91 v1.9.3.34 v1.9.3.33 v1.9.3.31 v1.9.3.29 v1.9.3.27 v1.9.3.25 v1.9.3.23 v1.9.3.21 v1.9.3.19 v1.9.2.4 Nothing to show New pull request Latest commit 78848d0 Jun 14, 2016 nemec committed on GitHub Merge pull request #321 from CreepyGnome/Issue320 … Defaults to current consoles width if available otherwise uses default. Made easier to override by bring it up to the ParserSettings class. Permalink Failed to load latest commit information. .paket Adding Paket files Jul 19, 2015 art Updating icon of NuGet package for 2.0.x-pre Jun 18, 2015 demo Updated syntax to latest version Aug 21, 2015 docs Updated docs,vers - Merged PR #255 fixes ISS #254 Oct 16, 2015 nuget Updated docs,vers - Merged PR #255 fixes ISS #254 Oct 16, 2015 src Defaults to current consoles width if available otherwise uses defaul… Jun 14, 2016 tests Defaults to current consoles width if available otherwise uses defaul… Jun 14, 2016 .gitignore Added first property test Sep 13, 2015 CommandLine.sln Removed temporary properties test from solution (not from repo) Sep 22, 2015 CommandLine.sln.DotSettings Added ReSharper naming convention settings in team-shared file. Jun 24, 2015 CommandLine.snk Minor internal refactoring; snk placed out of csproj(s). Feb 26, 2013 License.md Moving license to root Aug 2, 2015 README.md Add note on .Net Core support Jun 8, 2016 appveyor.yml Install FAKE via Paket Jul 21, 2015 build.cmd Install FAKE via Paket Jul 21, 2015 build.fsx Updating build script Aug 2, 2015 build.sh Install FAKE via Paket Jul 21, 2015 paket.dependencies Added FsCheck reference w/ Paket Sep 13, 2015 paket.lock Invoked Paket install Sep 13, 2015 README.md Command Line Parser Library 2.0.275.0 beta for CLR. The Command Line Parser Library offers CLR applications a clean and concise API for manipulating command line arguments and related tasks, such as defining switches, options and verb commands. It allows you to display a help screen with a high degree of customization and a simple way to report syntax errors to the end user. Everything that is boring and repetitive about parsing command line arguments is delegated to the library, letting developers concentrate on core logic. It's written in C# and doesn't depend on other packages. This library provides hassle free command line parsing with a constantly updated API since 2005. Compatibility: .NET Framework 4.0+ Mono 2.1+ Profile .Net Core - Note: support for Core is currently limited to an alternate branch while we wait for release of 1.0. If you have suggestions or changes for support of .Net Core, please submit a pull request to that branch until it's merged into master. Current Release: This is a pre-release, for documentation please read appropriate wiki section. From version 2.0.x-pre+ parsing kernel was rewritten and public API simplified. At glance: One line parsing using default singleton: CommandLine.Parser.Default.ParseArguments(...). Automatic or one line help screen generator: HelpText.AutoBuild(...). Supports --help, --version, version and help [verb] by default. Map to sequences (IEnumerable<T>) or scalar types, including enum and Nullable<T>. You can also map to every type with a constructor that accepts a string (like System.Uri). Plug-In friendly architecture as explained here. Define verb commands as git commit -a. Unparsing support: CommandLine.Parser.Default.FormatCommandLine<T>(T options). F#-friendly with support for option<'a>, see demo. Most of features applies with a CoC philosophy. C# demo: source here. To install: NuGet way (latest stable): Install-Package CommandLineParser NuGet way (latest version): Install-Package CommandLineParser -pre XCOPY way: cp -r ClonedRepo/src/CommandLine To/Your/Project/Dir To build: FAKE Script MS Visual Studio Xamarin Studio Public API: Latest changes are recorded from Version 1.9.4.91, please refer to this document. Used by: FSharp.Formatting by @tpetricek. MiniDumper by @goldshtn. Google APIs Client Library for .NET by Google. FSpec by @PeteProgrammer. Various commercial products. Notes: The project is well suited to be included in your application. If you don't merge it to your project tree, you must reference CommandLine.dll and import CommandLine and CommandLine.Text namespaces (or install via NuGet). The help text builder and support types are in the CommandLine.Text namespace that is loosely coupled with the parser. It is good to know that the HelpText class will avoid a lot of repetitive coding. C#: Define a class to receive parsed values: class Options {   [Option('r', ""read"", Required = true,     HelpText = ""Input files to be processed."")]   public IEnumerable<string> InputFiles { get; set; }    // Omitting long name, default --verbose   [Option(     HelpText = ""Prints all messages to standard output."")]   public bool Verbose { get; set; }    [Option(Default = ""中文"",     HelpText = ""Content language."")]   public string Language { get; set; }    [Value(0, MetaName = ""offset"",     HelpText = ""File offset."")]   public long? Offset { get; set; } } Consume them: static int Main(string[] args) {   var result = CommandLine.Parser.Default.ParseArguments<Options>(args);   var exitCode = result     .MapResult(       options = > {         if (options.Verbose) Console.WriteLine(""Filenames: {0}"", string.Join("","", options.InputFiles.ToArray()));         return 0; },       errors => {         LogHelper.Log(errors);         return 1; });   return exitCode; } F#: type options = {   [<Option('r', ""read"", Required = true, HelpText = ""Input files."")>] files : seq<string>;   [<Option(HelpText = ""Prints all messages to standard output."")>] verbose : bool;   [<Option(Default = ""русский"", HelpText = ""Content language."")>] language : string;   [<Value(0, MetaName=""offset"", HelpText = ""File offset."")>] offset : int64 option; } Consume them: let main argv =   let result = CommandLine.Parser.Default.ParseArguments<options>(argv)   match result with   | :? Parsed<options> as parsed -> run parsed.Value   | :? NotParsed<options> as notParsed -> fail notParsed.Errors For verbs: C#: [Verb(""add"", HelpText = ""Add file contents to the index."")] class AddOptions {   //normal options here } [Verb(""commit"", HelpText = ""Record changes to the repository."")] class CommitOptions {   //normal options here } [Verb(""clone"", HelpText = ""Clone a repository into a new directory."")] class CloneOptions {   //normal options here }  int Main(string[] args) {   return CommandLine.Parser.Default.ParseArguments<AddOptions, CommitOptions, CloneOptions>(args)     .MapResult(       (AddOptions opts) => RunAddAndReturnExitCode(opts),       (CommitOptions opts) => RunCommitAndReturnExitCode(opts),       (CloneOptions opts) => RunCloneAndReturnExitCode(opts),       errs => 1); } F#: open CommandLine  [<Verb(""add"", HelpText = ""Add file contents to the index."")>] type AddOptions = {   // normal options here } [<Verb(""commit"", HelpText = ""Record changes to the repository."")>] type CommitOptions = {   // normal options here } [<Verb(""clone"", HelpText = ""Clone a repository into a new directory."")>] type CloneOptions = {   // normal options here }  [<EntryPoint>] let main args =   let result = Parser.Default.ParseArguments<AddOptions, CommitOptions, CloneOptions> args   match result with   | :? CommandLine.Parsed<obj> as command ->     match command.Value with     | :? AddOptions as opts -> RunAddAndReturnExitCode opts     | :? CommitOptions as opts -> RunCommitAndReturnExitCode opts     | :? CloneOptions as opts -> RunCloneAndReturnExitCode opts   | :? CommandLine.NotParsed<obj> -> 1 Acknowledgements: Thanks to JetBrains for providing an open source license for ReSharper. Main Contributors (alphabetical order): Alexander Fast (@mizipzor) Dan Nemec (@nemec) Kevin Moore (@gimmemoore) Steven Evans Thomas Démoulins (@Thilas) Resources for newcomers: CodePlex Quickstart Wiki GNU getopt Latest Changes: Implemented issue #31 (double dash), thanks also to PR #77 by Tom Glastonbury (@tg73). Merged pull request #87, thanks to @randacc. Merged pull request #95, thanks to Dan Nemec (@nemec). Merged pull request #97, thanks to @bolha7 and @nemec. Merged pull request #103, thanks to @krs43. Merged pull request #119, thanks to @andrecarlucci. Added F# demo (as a simple script); removed specific API (work-in-progress) from solution. Merged pull request #144, thanks to @JLRishe. Merged pull request #154, thanks to @txdv. Implemented issue #68 (option list behaviour). Fixed issue #157 (range problems). Fixed issue #159 (min constraint). Fixed issue #160 (max constraint). Fixed issue #161 (min/max constraint for values). Increased test coverage. Fixed issue #149 (valid numeric input for enums). Fixed issue #164 (fixed bug in required value constraint). Important fix on scalar string value adjacent to string sequence (without constraints). Adding more tests for token partitioners. Fix in Sequence.Partition(). Sequence.Partition() rewritten. Refactoring for Increase Testability. Little change to allow .NET 4.5 build. Better GetHashCode() implementations. New tests added. Fixing FAKE build script. Issue #172 fixed (Max constraint when Min=Max). Merged PR #171 from @mizipzor. Issue #155 Fixed (fix from @guyzeug). Added support for FSharpOption<T> (if not used no need to distribute FSharp.Core.dll). Disallowed Min=Max=0 for sequences, raising exception. Issue #177 Fixed. Issue #112 Fixed. Support for immutable types. PR #123 by @smbecker Merged. Fixes. Issue #179 Implemented (Value|Option.DefaultValue -> Default). Issue #180 Implemented (better ParserResult<T> model). Issue #181 Implemented. Added Return<TSource,TResult>(...) to ParserResult<TSource>. Issue #183 (option list in verb scenario) Fixed by @Thilas. Issue #183 (immutable in verb scenario) reported by @Thilas Fixed. Default --help command refactored. Added WithParsed<T>() for verbs. Added Return<T1...T16>() for verbs. Automatic --version handling. Added C# demo. Issue #189 Implemented. Issue #190 Fixed/Implemented (--help/--version/version for verbs). Issue #188 (reported by @diversteve) Fixed. Issue #191 (--version/version added to help screen) Fixed. Issue #162 (ValueAttribute handled in help screen) Implemented. PR #197 (by @Thilas) Implemented. Issue #202 (reported by @StevenLiekens) Fixed. Managing deps with Paket. Issue #203 Implemented. Issue #204 (reported by @Kimi-Arthur) Fixed. PR #205 (by @forki) Merged. Refactoring with RailwaySharp.ErrorHandling. Test project refactoring. Issue #186 Implemented: Adding unparse support. PR #207 Merged. Using new Paket-friendly CSharpx and RailwaySharp. Added F# option support to FormatCommandLine(). ParserResult<T> internally refactored, minor breaking changes to HelpText. Added FormatCommandLine() overload with settings. Issue #208 Implemented (extended usage text support). Internal/external refactorings. Minor HelpText refactorings. Issue #210 (reported by @mac2000) Implemented. Test refactorings. Fixing XML comments. Changes in usage text handling. Issue #65 (re) Fixed for 2.0.x library. Issue #218 Fixed (IgnoreUnknownArguments). PR #215 (by @Thilas) Merged. PR #216 (by @Thilas) Merged. Issue #217 Fixed. Renaming tests fakes. Issue #220 Implemented. Replacing Either with Result. Centralizing Tokenizer configuration. Issue #225 (reported by @rmunn) Fixed. Issue #225/b (reported by @rmunn) Fixed. All ParserResult<T>.Return renamed to MapResult. PR #227 (by @Thilas) Merged. Reverted back to Tuple<...> instead of TokePartitions type. PR #227 (by @cfeilen) Merged. PR #231 (by @kshanafelt) Merged. Updated RailwaySharp source reference. Internal refactoring. Added properties test project using FsCheck. Issue #241 (reported by @pvmraghunandan) Fixed. PR #255 fixes Issue #254 by @scadorel Merged. Contact: Giacomo Stelluti Scala gsscoder AT gmail DOT com (use this for everything that is not available via GitHub features) Blog Twitter Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gsscoder/commandline"	"The Command Line Parser Library offers to CLR applications a clean and concise API for manipulating command line arguments and related tasks"	"true"
"CLI"	"Fluent Command Line Parser"	"https://github.com/fclp/fluent-command-line-parser"	"A simple, strongly typed.NET C# command line parser library using a fluent easy to use interface"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"190"	"27"	"44"	"GitHub - fclp/fluent-command-line-parser: A simple, strongly typed .NET C# command line parser library using a fluent easy to use interface Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 190 Fork 44 fclp/fluent-command-line-parser Code Issues 29 Pull requests 2 Wiki Pulse Graphs A simple, strongly typed .NET C# command line parser library using a fluent easy to use interface 186 commits 9 branches 2 releases 10 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags blank commands develop formatter gh-pages issue-35 issue-37 master pcl Nothing to show v1.2 v1.1 Nothing to show New pull request Latest commit d8eade0 Jul 4, 2016 siywilliams committed on GitHub Merge pull request #68 from madebyjeffrey/patch-1 … Added namespace to example Permalink Failed to load latest commit information. .nuget Issue #40: Adding support for long Jun 22, 2015 FluentCommandLineParser.Tests Issue 56 - including 0/1 as valid values boolean parameters Dec 27, 2015 FluentCommandLineParser Issue 56 - including 0/1 as valid values boolean parameters Dec 27, 2015 .gitignore init project Feb 23, 2013 FluentCommandLineParser.sln enable nuget package restore on build Jul 7, 2013 LICENCE.txt updated licence, and updated readme to contain teamcity latest Mar 13, 2013 README.md Added namespace to example Jun 28, 2016 README.md Fluent Command Line Parser A simple, strongly typed .NET C# command line parser library using a fluent easy to use interface. Download See what's new in v1.4.3. You can download the latest release from CodeBetter's TeamCity server You can also install using NuGet via the command line cmd> nuget install FluentCommandLineParser  Or use the Package Manager console in Visual Studio: PM> Install-Package FluentCommandLineParser  Usage using Fclp;  public class ApplicationArguments {    public int RecordId { get; set; }    public bool Silent { get; set; }    public string NewValue { get; set; } }  static void Main(string[] args) {    // create a generic parser for the ApplicationArguments type    var p = new FluentCommandLineParser<ApplicationArguments>();     // specify which property the value will be assigned too.    p.Setup(arg => arg.RecordId)     .As('r', ""record"") // define the short and long option name     .Required(); // using the standard fluent Api to declare this Option as required.     p.Setup(arg => arg.NewValue)     .As('v', ""value"")     .Required();     p.Setup(arg => arg.Silent)     .As('s', ""silent"")     .SetDefault(false); // use the standard fluent Api to define a default value if non is specified in the arguments     var result = p.Parse(args);     if(result.HasErrors == false)    {       // use the instantiated ApplicationArguments object from the Object property on the parser.       application.Run(p.Object);    } }  You can also use the non-generic Fluent Command Line Parser to capture values without creating a container class. static void Main(string[] args) {   var p = new FluentCommandLineParser();    p.Setup<int>('r')    .Callback(record => RecordID = record)    .Required();    p.Setup<string>('v')    .Callback(value => NewValue = value)    .Required();    p.Setup<bool>('s', ""silent"")    .Callback(silent => InSilentMode = silent)    .SetDefault(false);    p.Parse(args); }  Parser Option Methods .Setup<int>('r') Setup an option using a short name, .Setup<int>('r', ""record"") or short and long name. .Required() Indicate the option is required and an error should be raised if it is not provided. .Callback(val => Value = val) Provide a delegate to call after the option has been parsed .SetDefault(int.MaxValue) Define a default value if the option was not specified in the args .WithDescription(""Execute operation in silent mode without feedback"") Specify a help description for the option Parsing To Collections Many arguments can be collected as part of a list. Types supported are string, int32, int64, double, bool, Uri, DateTime and Enum For example arguments such as --filenames C:\file1.txt C:\file2.txt ""C:\other file.txt"" can be automatically parsed to a List<string> using static void Main(string[] args) {    var p = new FluentCommandLineParser();     var filenames = new List<string>();     p.Setup<List<string>>('f', ""filenames"")     .Callback(items => filenames = items);     p.Parse(args);     Console.WriteLine(""Input file names:"");     foreach (var filename in filenames)    {       Console.WriteLine(filename);    } }  output: Input file names C:\file1.txt C:\file2.txt C:\other file.txt  Enum support Since v1.2.3 enum types are now supported. [Flags] enum Direction {     North = 1,     East = 2,     South = 4,     West = 8, }  p.Setup<Direction>(""direction"")  .Callback(d => direction = d);  To specify 'East' direction either the text can be provided or the enum integer. dosomething.exe --direction East dosomething.exe --direction 2  You can also collect multiple Enum values into a List List<Direction> direction;  p.Setup<List<Direction>>('d', ""direction"")  .Callback(d => direction = d);  For example, specifiying 'South' and 'East' values dosomething.exe --direction South East dosomething.exe --direction 4 2  Since v1.4 Enum Flags are also supported Direction direction;  p.Setup<Direction>(""direction"")  .Callback(d => direction = d);  p.Parse(args);  Assert.IsFalse(direction.HasFlag(Direction.North)); Assert.IsTrue(direction.HasFlag(Direction.East)); Assert.IsTrue(direction.HasFlag(Direction.South)); Assert.IsFalse(direction.HasFlag(Direction.West));  And the generic FluentCommandLineParser (previously known as FluentCommandLineBuilder) also supports enums. public class Args {    public Direction Direction { get;set; }    public List<Direction> Directions { get;set; } }  var p = new FluentCommandLineParser<Args>();  p.Setup(args => args.Direction)  .As('d', ""direction"");  p.Setup(args => args.Directions)  .As(""directions"");  From v1.5 nullable enums are now supported. Help Screen You can setup any help arguments, such as -? or --help to print all parameters which have been setup, along with their descriptions to the console by using SetupHelp(params string[]). For example: // sets up the parser to execute the callback when -? or --help is detected parser.SetupHelp(""?"", ""help"")  .Callback(text => Console.WriteLine(text));  Since v1.4.1 you can also choose to display the formatted help screen text manually, so that you can display it under other circumstances. For example: var parser = new FluentCommandLineParser<Args>();  parser.SetupHelp(""?"", ""help"")  .Callback(text => Console.WriteLine(text));  // triggers the SetupHelp Callback which writes the text to the console parser.HelpOption.ShowHelp(parser.Options);  Supported Syntax [-|--|/][switch_name][=|:| ][value] Supports boolean names example.exe -s  // enable example.exe -s- // disabled example.exe -s+ // enable  Supports combined (grouped) options example.exe -xyz  // enable option x, y and z example.exe -xyz- // disable option x, y and z example.exe -xyz+ // enable option x, y and z  Development Please feel free to provide any feedback on feature support or the Api itself. If you would like to contribute, you may do so to the develop branch. Please contact me first if doing large scale changes. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fclp/fluent-command-line-parser"	"A simple, strongly typed.NET C# command line parser library using a fluent easy to use interface"	"true"
"CLI"	"Power Args"	"https://github.com/adamabdelhamed/PowerArgs"	"PowerArgs converts command line arguments into.NET objects that are easy to program against. It also provides a ton of optional capabilities such as argument validation, auto generated usage, tab completion, and plenty of extensibility"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"212"	"23"	"33"	"GitHub - adamabdelhamed/PowerArgs: The ultimate .NET command line argument parser Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 212 Fork 33 adamabdelhamed/PowerArgs Code Issues 7 Pull requests 3 Wiki Pulse Graphs The ultimate .NET command line argument parser 300 commits 2 branches 0 releases Fetching contributors C# 99.6% HTML 0.4% C# HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master Nothing to show Nothing to show New pull request Latest commit e063a63 Feb 15, 2016 adamabdelhamed merged dev into master Permalink Failed to load latest commit information. .nuget enable nuget package restore Aug 27, 2015 ArgsTests #92 - Make sure to clean the definition at the beginning of each pars… Feb 15, 2016 DoxygenPublisher enable nuget package restore Aug 27, 2015 ExternalUnitTestPipelineStageExe Added the long overdue pipeline feature. It's pretty stable, but not … Jan 2, 2015 HelloWorld more refactoring and cleanup Feb 10, 2016 PowerArgs.HttpExternalPipelineProvider non change Aug 27, 2015 PowerArgs published Feb 15, 2016 .gitignore 2.6.0.0 - progress bar Mar 5, 2015 DoxygenConfig.txt Small fixes, doxygen integration, updated readme Dec 22, 2014 LICENSE.txt Create LICENSE.txt Mar 11, 2013 PowerArgs.sln First grid test in Dec 5, 2015 PowerArgs.vsmdi Added support for long form args. Apr 19, 2013 Release Process.txt published Feb 15, 2016 StyledUsageExampleOutput.PNG Added example Styled output image Mar 28, 2013 TestSettings1.testsettings Added support for long form args. Apr 19, 2013 readme.md published to NuGet Aug 29, 2015 readme.md Binary PowerArgs is available at the Official NuGet Gallery. Reference information for the entire API surface of the latest version is available here. Overview PowerArgs converts command line arguments into .NET objects that are easy to program against. It also provides a ton of additional, optional capabilities that you can try such as argument validation, auto generated usage, tab completion, and plenty of extensibility. It can also orchestrate the execution of your program. Giving you the following benefits: Consistent and natural user error handling Invoking the correct code based on an action (e.g. 'git push' vs. 'git pull') Focus on writing your code Here's a simple example that just uses the parsing capabilities of PowerArgs. The command line arguments are parsed, but you still have to handle exceptions and ultimately do something with the result. // A class that describes the command line arguments for this program public class MyArgs {     // This argument is required and if not specified the user will      // be prompted.     [ArgRequired(PromptIfMissing=true)]     public string StringArg { get; set; }      // This argument is not required, but if specified must be >= 0 and <= 60     [ArgRange(0,60)]     public int IntArg {get;set; } }  class Program {     static void Main(string[] args)     {         try         {             var parsed = Args.Parse<MyArgs>(args);             Console.WriteLine(""You entered string '{0}' and int '{1}'"", parsed.StringArg, parsed.IntArg);         }         catch (ArgException ex)         {             Console.WriteLine(ex.Message);             Console.WriteLine(ArgUsage.GenerateUsageFromTemplate<MyArgs>());         }     } } Here's the same example that lets PowerArgs do a little more for you. The application logic is factored out of the Program class and user exceptions are handled automatically. The way exceptions are handled is that any exception deriving from ArgException will be treated as user error. PowerArgs' built in validation system always throws these type of exceptions when a validation error occurs. PowerArgs will display the message as well as auto-generated usage documentation for your program. All other exceptions will still bubble up and need to be handled by your code. // A class that describes the command line arguments for this program [ArgExceptionBehavior(ArgExceptionPolicy.StandardExceptionHandling)] public class MyArgs {     // This argument is required and if not specified the user will      // be prompted.     [ArgRequired(PromptIfMissing=true)]     public string StringArg { get; set; }      // This argument is not required, but if specified must be >= 0 and <= 60     [ArgRange(0,60)]     public int IntArg {get;set; }      // This non-static Main method will be called and it will be able to access the parsed and populated instance level properties.     public void Main()     {         Console.WriteLine(""You entered string '{0}' and int '{1}'"", this.StringArg, this.IntArg);     } }  class Program {     static void Main(string[] args)     {         Args.InvokeMain<MyArgs>(args);     } } Then there are more complicated programs that support multiple actions. For example, the 'git' program that we all use supports several actions such as 'push' and 'pull'. As a simpler example, let's say you wanted to build a calculator program that has 4 actions; add, subtract, multiply, and divide. Here's how PowerArgs makes that easy. [ArgExceptionBehavior(ArgExceptionPolicy.StandardExceptionHandling)] public class CalculatorProgram {     [HelpHook, ArgShortcut(""-?""), ArgDescription(""Shows this help"")]     public bool Help { get; set; }      [ArgActionMethod, ArgDescription(""Adds the two operands"")]     public void Add(TwoOperandArgs args)     {         Console.WriteLine(args.Value1 + args.Value2);     }      [ArgActionMethod, ArgDescription(""Subtracts the two operands"")]     public void Subtract(TwoOperandArgs args)     {         Console.WriteLine(args.Value1 - args.Value2);     }      [ArgActionMethod, ArgDescription(""Multiplies the two operands"")]     public void Multiply(TwoOperandArgs args)     {         Console.WriteLine(args.Value1 * args.Value2);     }      [ArgActionMethod, ArgDescription(""Divides the two operands"")]     public void Divide(TwoOperandArgs args)     {         Console.WriteLine(args.Value1 / args.Value2);     } }  public class TwoOperandArgs {     [ArgRequired, ArgDescription(""The first operand to process""), ArgPosition(1)]     public double Value1 { get; set; }     [ArgRequired, ArgDescription(""The second operand to process""), ArgPosition(2)]     public double Value2 { get; set; } }  class Program {     static void Main(string[] args)     {         Args.InvokeAction<CalculatorProgram>(args);     } } Again, the Main method in your program class is just one line of code. PowerArgs will automatically call the right method in the CalculatorProgram class based on the first argument passed on the command line. If the user doesn't specify a valid action then they get a friendly error. If different actions take different arguments then PowerArgs will handle the validation on a per action basis, just as you would expect. Here are some valid ways that an end user could call this program: Calculator.exe add -Value1 1 -Value2 5 outputs '6' Calculator.exe multiply /Value1:2 /Value2:5 outputs '10' Calculator.exe add 1 4 outputs '5' - Since the [ArgPosition] attribute is specified on the Value1 and Value1 properties, PowerArgs knows how to map these arguments. If you wanted to, your action method could accept loose parameters in each action method. I find this is useful for small, simple programs where the input parameters don't need to be reused across many actions. [ArgActionMethod, ArgDescription(""Divides the two operands"")] public void Add(     [ArgRequired][ArgDescription(""The first value to add""), ArgPosition(1)] double value1,      [ArgRequired][ArgDescription(""The second value to add""), ArgPosition(2)] double value2) {     Console.WriteLine(value1 / value2); } You can't mix and match though. An action method needs to be formatted in one of three ways: No parameters - Meaning the action takes no additional arguments except for the action name (i.e. '> myprogram.exe myaction'). A single parameter of a complex type whose own properties describe the action's arguments, validation, and other metadata. The first calculator example used this pattern. One or more 'loose' parameters that are individually revivable, meaning that one command line parameter maps to one property in your class. The second calculator example showed a variation of the Add method that uses this pattern. Metadata Attributes These attributes can be specified on argument properties. PowerArgs uses this metadata to influence how the parser behaves. [ArgPosition(0)] This argument can be specified by position (no need for -propName) [ArgShortcut(""n"")] Lets the user specify -n [ArgDescription(""Description of the argument"")] [ArgExample(""example text"", ""Example description"")] [HelpHook] Put this on a boolean property and when the user specifies that boolean. PowerArgs will display the help info and stop processing any additional work. If the user is in the context of an action (e.g. myprogram myaction -help) then help is shown for the action in context only. [ArgDefaultValue(""SomeDefault"")] Specify the default value [ArgIgnore] Don't populate this property as an arg [StickyArg] Use the last used value if not specified. This is preserved across sessions. Data is stored in /AppData/Roaming/PowerArgs by default. [Query(typeof(MyDataSource))] Easily query a data source (see documentation below). [TabCompletion] Enable tab completion for parameter names (see documentation below) Validator Attributes These attributes can be specified on argument properties. You can create custom validators by implementing classes that derive from ArgValidator. [ArgRequired(PromptIfMissing=bool)] This argument is required. There is also support for conditionally being required. [ArgExistingFile] The value must match the path to an existing file [ArgExistingDirectory] The value must match the path to an existing directory [ArgRange(from, to)] The value must be a numeric value in the given range. [ArgRegex(""MyRegex"")] Apply a regular expression validation rule [UsPhoneNumber] A good example of how to create a reuable, custom validator. Custom Revivers Revivers are used to convert command line strings into their proper .NET types. By default, many of the simple types such as int, DateTime, Guid, string, char, and bool are supported. If you need to support a different type or want to support custom syntax to populate a complex object then you can create a custom reviver. This example converts strings in the format ""x,y"" into a Point object that has properties ""X"" and ""Y"". public class CustomReviverExample {     // By default, PowerArgs does not know what a 'Point' is.  So it will      // automatically search your assembly for arg revivers that meet the      // following criteria:      //     //    - Have an [ArgReviver] attribute     //    - Are a public, static method     //    - Accepts exactly two string parameters     //    - The return value matches the type that is needed      public Point Point { get; set; }      // This ArgReviver matches the criteria for a ""Point"" reviver     // so it will be called when PowerArgs finds any Point argument.     //     // ArgRevivers should throw ArgException with a friendly message     // if the string could not be revived due to user error.      [ArgReviver]     public static Point Revive(string key, string val)     {         var match = Regex.Match(val, @""(\d*),(\d*)"");         if (match.Success == false)         {             throw new ArgException(""Not a valid point: "" + val);         }         else         {             Point ret = new Point();             ret.X = int.Parse(match.Groups[1].Value);             ret.Y = int.Parse(match.Groups[2].Value);             return ret;         }     } } Generate usage documentation from templates (built in or custom) PowerArgs has always provided auto-generated usage documentation via the ArgUsage class. However, the format was hard coded, and gave very little flexibility in terms of the output format. With the latest release of PowerArgs usage documentation can be fully customized via templates. A template is just a piece of text that represents the documentation structure you want along with some placeholders that will be replaced with the actual information about your command line application. There are built in templates designed for the console and a web browser, and you can also create your own. In its latest release, PowerArgs adds a new method called ArgUsage.GenerateUsageFromTemplate(). The method has several overloads, most of which are documented via XML intellisense comments. The part that needs a little more explanation is the template format. To start, let's talk about the built in templates. The first one, the default, is designed to create general purpose command line usage documentation that is similar to the older usage documentation that PowerArgs generated. You can see what that template looks like here. The second one is designed to create documentation that looks good in a browser. You can see what that template looks like here. Here is an example of what the built in browser usage looks like. You can create your own templates from scratch, or modify these default templates to suit your needs. The templating engine was built specifically for PowerArgs. It has quite a bit of functionality and extensibility, but for now I'm only going to document the basics. Most of you probably use the class and attributes model when using PowerArgs, but under the hood there's a pretty extensive object model that gets generated from the classes you build. That model is what is bound to the template. If you're not familiar with the object model you can explore the code here. You can see from the built in templates that there is placeholder syntax that lets you insert information from the model into template. For example, if your program is called 'myprogram' then the following text in the template would be replaced with 'myprogram'. {{ExeName !}} is the best // outputs - 'myprogram is the best'  Additionally, you can add a parameter to the replacement tag that indicates the color to use when printed on the command line as a ConsoleString. You can use any ConsoleColor as a parameter. {{ExeName Cyan !}}       You can also choose to conditionally include portions of a template based on a property. Here's an example from the default template: {{if HasActions}}Global options!{{if}}{{ifnot HasActions}}Options!{{ifnot}}:  In this case, if the HasActions property on the CommandLineArgumentsDefinition object is true then the usage will output 'Global options'. Otherwise it will output 'Options'. This flexibility is important since some command line programs have only simple options while others expose multiple commands within the same executable (e.g. git pull and git push). Another thing you can do is to enumerate over a collection to include multiple template fragments in your output. Take this example. {{each action in Actions}} {{action.DefaultAlias!}} - {{action.Description!}} !{{each}}  If your program has 3 actions defined then you'd get output like this. action1 - action 1 description here action2 - action 2 description here action3 - action 3 description here  When referring to a part of your data model you can also navigate objects using dot '.' notation. Notice in the example above I was able to express {{ action.DefaultAlias !}}. You could go even deeper. For example {{ someObj.SomeProperty.DeeperProperty !}}. More advanced expressions like function calling with parameters are not supported. PS I'm pretty happy with the templating solution. In fact, hidden in PowerArgs is a general purpose template rendering engine that I've found useful in other projects for things like code generation. You can actually bind any string template to any plain old .NET object (dynamic objects not supported). Here's a basic sample: var renderer = new DocumentRenderer(); var document = renderer.Render(""Hi {{ Name !}}"", new { Name = ""Adam"" }); // outputs 'Hi Adam' Ambient Args Access your parsed command line arguments from anywhere in your application. MyArgs parsed = Args.GetAmbientArgs<MyArgs>(); This will get the most recent insance of type MyArgs that was parsed on the current thread. That way, you have access to things like global options without having to pass the result all throughout your code. Secure String Arguments Support for secure strings such as passwords where you don't want your users' input to be visible on the command line. Just add a property of type SecureStringArgument. public class TestArgs {     public SecureStringArgument Password { get; set; } } Then when you parse the args you can access the value in one of two ways. First there's the secure way. TestArgs parsed = Args.Parse<TestArgs>(); SecureString secure = parsed.Password.SecureString; // This line causes the user to be prompted Then there's the less secure way, but at least your users' input won't be visible on the command line. TestArgs parsed = Args.Parse<TestArgs>(); string notSecure = parsed.Password.ConvertToNonsecureString(); // This line causes the user to be prompted Tab Completion Get tab completion for your command line arguments. Just add the TabCompletion attribute and when your users run the program from the command line with no arguments they will get an enhanced prompt (should turn blue) where they can have tab completion for command line argument names. [TabCompletion] public class TestArgs {     [ArgRequired]     public string SomeParam { get; set; }     public int AnotherParam { get; set; } } Sample usage: someapp -some  <-- after typing ""-some"" you can press tab and have it fill in the rest of ""-someparam""  You can even add your own tab completion logic in one of two ways. First there's the really easy way. Derive from SimpleTabCompletionSource and provide a list of words you want to be completable. public class MyCompletionSource : SimpleTabCompletionSource {     public MyCompletionSource() : base(MyCompletionSource.GetWords()) {}     private static IEnumerable<string> GetWords()     {         return new string[] { ""SomeLongWordThatYouWantToEnableCompletionFor"", ""SomeOtherWordToEnableCompletionFor"" };     } } Then just tell the [TabCompletion] attribute where to find your class. [TabCompletion(typeof(MyCompletionSource))] public class TestArgs {     [ArgRequired]     public string SomeParam { get; set; }     public int AnotherParam { get; set; } } There's also the easy, but not really easy way if you want custom tab completion logic. Let's say you wanted to load your auto completions from a text file. You would implement ITabCompletionSource. public class TextFileTabCompletionSource : ITabCompletionSource {     string[] words;     public TextFileTabCompletionSource(string file)     {         words = File.ReadAllLines(file);     }      public bool TryComplete(bool shift, string soFar, out string completion)     {         var match = from w in words where w.StartsWith(soFar) select w;          if (match.Count() == 1)         {             completion = match.Single();             return true;         }         else         {             completion = null;             return false;         }     } } If you expect your users to sometimes use the command line and sometimes run from a script then you can specify an indicator string. If you do this then only users who specify the indicator as the only argument will get the prompt. [TabCompletion(""$"")] public class TestArgs {     [ArgRequired]     public string SomeParam { get; set; }     public int AnotherParam { get; set; } } The PowerArgs.Cli (undocumented) namespace The PowerArgs.Cli namespace contains framework components that make it easy to build very interactive command line applications. This namespace is undocumented since these capabilities are still a work in progress. When it gets closer to being ready I'll document the classes just like the rest of PowerArgs. Data Source Queries Easily query a data source such as an Entity Framework Model (Code First or traditional) using Linq. // An example Entity Framework Code First Data Model public class DataSource : DbContext {     public DbSet<Customer> Customers{get;set;} }  public class TestArgs {     public string OrderBy { get; set; }     [ArgShortcut(""o-"")]     public string OrderByDescending { get; set; }     public string Where { get; set; }     public int Skip { get; set; }     public int Take { get; set; }      [Query(typeof(DataSource))]     [ArgIgnore]     public List<Customer> Customers { get; set; } } That's it! PowerArgs will make the query for you using the query arguments. It's all done by naming convention. Now just consume the data in your program. // Sample command that queries the Customers table for newest 10 customers   // <yourapp> -skip 0 -take 10 -where ""item.DateCreated > DateTime.Now - TimeSpan.FromDays(1)"" -orderby item.LastName  var parsed = Args.Parse<TestArgs>(args); var customers = parsed.Customers; Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/adamabdelhamed/PowerArgs"	"PowerArgs converts command line arguments into.NET objects that are easy to program against. It also provides a ton of optional capabilities such as argument validation, auto generated usage, tab completion, and plenty of extensibility"	"true"
"CLI"	"UnionArgParser"	"https://github.com/fsprojects/Argu"	"Declarative CLI argument & XML configuration parser for F# applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"116"	"17"	"25"	"GitHub - fsprojects/Argu: A declarative CLI argument/XML configuration parser for F# Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 116 Fork 25 fsprojects/Argu Code Issues 2 Pull requests 2 Pulse Graphs A declarative CLI argument/XML configuration parser for F# http://fsprojects.github.io/Argu/ 290 commits 2 branches 22 releases Fetching contributors F# 99.5% Other 0.5% F# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.0 3.2.0 3.1.0 3.0.1 3.0.0 3.0.0-beta03 3.0.0-beta02 3.0.0-beta01 3.0.0-alpha011 3.0.0-alpha010 3.0.0-alpha009 3.0.0-alpha008 3.0.0-alpha007 3.0.0-alpha006 3.0.0-alpha005 3.0.0-alpha004 3.0.0-alpha003 3.0.0-alpha002 3.0.0-alpha001 2.1 2.0 1.1.3 Nothing to show New pull request Latest commit 22713ca Jul 15, 2016 eiriktsarpalis bump version Permalink Failed to load latest commit information. .github Create ISSUE_TEMPLATE.md Apr 4, 2016 .paket migrate to xUnit Jun 21, 2016 docs fix documentation issue Jul 12, 2016 samples/Argu.Samples.LS complete MainCommand attribute implementation Jul 8, 2016 src/Argu bump version Jul 15, 2016 tests/Argu.Tests complete MainCommand attribute implementation Jul 8, 2016 .gitignore update gitignore Jan 7, 2016 .tfignore init Mar 15, 2013 .travis.yml move to container-based travis Jun 1, 2016 Argu.sln bump version Jul 6, 2016 License.md Update License.md Jan 7, 2016 README.md Cool NuGet badge Apr 4, 2016 RELEASE_NOTES.md bump version Jul 15, 2016 appveyor.yml rename project Aug 25, 2015 build.cmd migrate to xUnit Jun 21, 2016 build.fsx migrate to xUnit Jun 21, 2016 build.sh migrate to xUnit Jun 21, 2016 paket.dependencies migrate assertion checking to Unquote Jun 29, 2016 paket.lock migrate assertion checking to Unquote Jun 29, 2016 README.md Argu A declarative CLI argument/XML configuration parser for F# applications. A package of the library is available on Nuget. Documentation Tutorial A short walkthrough of Argu features. API Reference Auto-generated library documentation. All documentation and related material can be found here. Maintainers Eirik Tsarpalis (@eiriktsarpalis) Build Status Head (branch master), Build & Unit tests Windows/.NET Mac OS X/Mono 4.2 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fsprojects/Argu"	"Declarative CLI argument & XML configuration parser for F# applications."	"true"
"CLR"	"CoreCLR"	"https://github.com/dotnet/coreclr"	"The coreclr repo contains the complete runtime implementation (called ""CoreCLR"") for.NET Core. It includes RyuJIT, the.NET GC, native interop and many other components. It builds and runs on Windows. You can 'watch' the repo to see Linux and Mac support being added over the next few months."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6683"	"982"	"1543"	"GitHub - dotnet/coreclr: This repo contains the .NET Core runtime, called CoreCLR, and the base library, called mscorlib. It includes the garbage collector, JIT compiler, base .NET data types and many low-level classes. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 982 Star 6,683 Fork 1,543 dotnet/coreclr Code Issues 809 Pull requests 95 Wiki Pulse Graphs This repo contains the .NET Core runtime, called CoreCLR, and the base library, called mscorlib. It includes the garbage collector, JIT compiler, base .NET data types and many low-level classes. https://dotnet.github.io/ 6,849 commits 7 branches 5 releases 255 contributors C# 63.3% C++ 31.4% C 3.1% Smalltalk 0.7% Assembly 0.4% CMake 0.3% Other 0.8% C# C++ C Smalltalk Assembly CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags SpanOfT master release/1.0.0-rc1 release/1.0.0-rc2 release/1.0.0 revert-5945-devel/arm-ci-checked-fix xperfver Nothing to show v1.0.0 v1.0.0-rc2 v1.0.0-rc1 arm64drop-2 arm64drop-1 Nothing to show New pull request Latest commit 9216c56 Jul 15, 2016 swgillespie committed on GitHub Merge pull request #6296 from swgillespie/vscode-gitignore … Add VS Code local settings folder to gitignore Permalink Failed to load latest commit information. Documentation docs: Add building coreclr for emulator Jul 14, 2016 cross Remove MMAP_DOESNOT_ALLOW_REMAP. Jun 29, 2016 src Merge pull request #6037 from sejongoh/linux_struct_arg Jul 15, 2016 tests Merge pull request #6050 from prajwal-aithal/devel/arm-ci-runtests Jul 14, 2016 .editorconfig Disable the 'trim_trailing_whitespace' fixes issue 225 Feb 12, 2015 .gitattributes Force PAL test lists to have Unix line endings Feb 11, 2015 .gitignore Add VS Code local settings folder to gitignore Jul 15, 2016 .gitmirror Initial commit to populate CoreCLR repo Jan 30, 2015 BuildToolsVersion.txt Update to latest version of buildtools Jul 14, 2016 CMakeLists.txt Fix incremental build problem for cross-components Jul 6, 2016 CODE_OWNERS.TXT Start using CODE_OWNERS.TXT (#5027) May 17, 2016 DotnetCLIVersion.txt Adding commit hash to all built binaries. May 27, 2016 LICENSE.TXT Update copyright for .NET Core and update file header guidance Jan 26, 2016 PATENTS.TXT Add additional data to PATENTS.TXT Nov 18, 2015 README.md Add Code of Conduct details to README.md Jun 22, 2016 THIRD-PARTY-NOTICES Add note about attributions and licenses for 3rd-party originated tests Jan 7, 2016 UpdateDependencies.ps1 Remove CoreFX-specific project.json update code and update summary co… Jun 9, 2016 UpdatePublishedVersions.ps1 Add PowerShell script to update latest package version info in Versio… May 24, 2016 all.locproj Initial commit to populate CoreCLR repo Jan 30, 2015 build-packages.cmd build the TargetingPack package as part of build-packages scripts Jul 13, 2016 build-packages.sh Update to latest version of buildtools Jul 14, 2016 build.cmd Do not clean tests folder when skiptests option is used along with clean Jul 6, 2016 build.proj Add dev workflow scripts for build pipeline May 17, 2016 build.sh Update to latest version of buildtools Jul 14, 2016 clean.cmd Update build scripts to fix small errors May 18, 2016 clean.sh Update build scripts to fix small errors May 18, 2016 clr.coreclr.props Remove Encoding FEATURE_* defines from mscorlib (#5026) May 18, 2016 clr.defines.targets Remove Encoding FEATURE_* defines from mscorlib (#5026) May 18, 2016 clr.desktop.props Remove Encoding FEATURE_* defines from mscorlib (#5026) May 18, 2016 clr.native.targets Initial commit to populate CoreCLR repo Jan 30, 2015 clr.props Delete mdil support from coreclr Feb 6, 2016 clr.targets Initial commit to populate CoreCLR repo Jan 30, 2015 clrdefinitions.cmake [ARM64/Linux] Disable not yet implemented features. Jun 8, 2016 cmake.definitions Change to Generate nuget packages for Windows Arm64 builds. Jun 25, 2016 compileoptions.cmake Add -DARM_SOFTFP inside compileoptions.cmake (#5630) Jun 9, 2016 crosscomponents.cmake enable build of cross target components. Apr 18, 2016 crossgen.cmake Keep FEATURE_MERGE_JIT_AND_ENGINE with refactored approach Apr 26, 2016 dac.cmake Enabling profiling on Unix/OS X. Jan 31, 2016 dac.props Initial commit to populate CoreCLR repo Jan 30, 2015 definitionsconsistencycheck.cmake Move intermediate file into intermediate dir (#5981) Jun 28, 2016 dir.props Update to latest version of buildtools Jul 14, 2016 dir.targets update version of buildtools Jan 29, 2016 dir.traversal.targets Initial commit to populate CoreCLR repo Jan 30, 2015 dirs.proj More xplat binplace clean-up. Aug 14, 2015 enablesanitizers.sh Reduce clr startup noise when using Clang sanitizers Jan 21, 2016 functions.cmake Fix platform logic in symbol stripping code. Jun 28, 2016 generateexportedsymbols.awk Extend the Unix hosting API Jul 16, 2015 generateversionscript.awk Handle mscorwks_unixexports.src with better regexp operator for compa… Apr 5, 2016 init-tools.cmd Adding commit hash to all built binaries. May 27, 2016 init-tools.sh Stop chmoding nonexistant corerun file in Tools dir Jul 15, 2016 netci.groovy Merge pull request #6050 from prajwal-aithal/devel/arm-ci-runtests Jul 14, 2016 oacr.cfg Initial commit to populate CoreCLR repo Jan 30, 2015 partition.settings.targets Initial commit to populate CoreCLR repo Jan 30, 2015 publish-packages.cmd Update build scripts to fix small errors May 18, 2016 publish-packages.sh Update to latest version of buildtools Jul 14, 2016 run-cppcheck.sh NetBSD: Add support for retrieving the number of available CPUs Jan 21, 2016 sanitizerblacklist.txt Reduce clr startup noise when using Clang sanitizers Jan 21, 2016 sync.cmd Update sync.cmd to download Azure Blobs. Also change publish.proj to … May 23, 2016 sync.sh Update to latest version of buildtools Jul 14, 2016 README.md .NET Core Runtime (CoreCLR) The CoreCLR repo contains the complete runtime implementation for .NET Core. It includes RyuJIT, the .NET GC, native interop and many other components. It is cross-platform, with multiple OS and CPU ports in progress. Note that the library implementation CoreFX (System.Collections, System.IO, System.Xml and so on) lives in another repo dotnet/corefx. Build Status Debug Release CentOS 7.1 Debian 8.4 FreeBSD 10.1 openSUSE 13.2 OS X 10.11 Red Hat 7.2 Fedora 23 Ubuntu 14.04 Ubuntu 16.04 Windows 8.1 Building the Repo Linux Windows Mac OS X FreeBSD NetBSD Instructions Instructions Instructions Instructions Instructions Get .NET Core You can get the latest released .NET Core SDK from the .NET Core Getting started page. You can also get the latest development builds of .NET Core and the SDK from the dotnet/cli repo. Chat Room Want to chat with other members of the CoreCLR community? Learn about CoreCLR and .NET Core The best ways to learn about CoreCLR are to try out the product instructions and to read the ""Book of the Runtime"" architecture documents that describe the inner workings of the product. New devs to the CLR team are encouraged to read these documents before making substative changes to the product. They are equally useful for open source contributors. .NET Core Roadmap Product instructions Introduction to the Common Language Runtime Book of the Runtime CoreCLR Documents .NET Core is part of ASP.NET Core and is a subset of the .NET Framework. You can learn more about .NET Core and how and where you can use it in the CoreCLR is open source blog post. The .NET Core Libraries repo contains the base class libraries, which provides data types and base functionality (ex: String, Collections, HttpClient) on top of CoreCLR. The two repos together make up .NET Core. The .NET Core is Open Source and Introducing .NET Core blog posts describes our .NET Core OSS strategy and road map in more detail. Engage, Contribute and Provide Feedback Some of the best ways to contribute are to try things out, file bugs, and join in design conversations. You are encouraged to start a discussion by filing an issue, or starting a thread in the .NET Foundation forums. If you are having issues with the Full .NET Framework or .NET Runtime the best ways to file a bug are at Connect or through Product Support if you have a contract. Looking for something to work on? The list of up-for-grabs issues is a great place to start. Please read the following documents to get started. Contributing Guide Developer Guide This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information, see the .NET Foundation Code of Conduct. License .NET Core (including the coreclr repo) is licensed under the MIT license. .NET Foundation .NET Core is a .NET Foundation project. Related Projects There are many .NET projects on GitHub. The .NET home repo links to 100s of .NET projects, from Microsoft and the community. The .NET Core repo links to .NET Core related projects from Microsoft. The ASP.NET home repo is the best place to start learning about ASP.NET Core. dotnet.github.io is a good place to discover .NET Foundation projects. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dotnet/coreclr"	"The coreclr repo contains the complete runtime implementation (called ""CoreCLR"") for.NET Core. It includes RyuJIT, the.NET GC, native interop and many other components. It builds and runs on Windows. You can 'watch' the repo to see Linux and Mac support being added over the next few months."	"true"
"CMS"	"Composite C1"	"https://github.com/Orckestra/C1-CMS"	"A web CMS that focus on UX and adaptability"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"83"	"44"	"38"	"GitHub - Orckestra/C1-CMS: Composite C1 Web Content Management System - .NET based, open source and a bundle of joy! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 44 Star 83 Fork 38 Orckestra/C1-CMS Code Issues 81 Pull requests 3 Wiki Pulse Graphs Composite C1 Web Content Management System - .NET based, open source and a bundle of joy! 4,442 commits 8 branches 13 releases 11 contributors C# 76.2% JavaScript 15.9% ASP 6.0% CSS 1.0% XSLT 0.6% HTML 0.2% Other 0.1% C# JavaScript ASP CSS XSLT HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags burningice2866-DisplayModes dev feature-bulk-publishing feature-e2e-testing feature-timezone-display fix-external-view-blocked fix-tab-render master Nothing to show v5.0 v5.0-beta.1 v4.3 v4.2 v4.2-update.1 v4.1 v4.0 v3.2 v3.1 v3.0 v2.1.1 v2.1 v2.0 Nothing to show New pull request Latest commit 312d7c2 Mar 3, 2016 kasravi bug fix on add website Permalink Failed to load latest commit information. Bin Removing 3rd party binary dlls from Source Control and referenced the… Oct 29, 2015 Composite.Workflows Updated DependencyInjection to newest NuGet packages, which was also … Dec 16, 2015 Composite bug fix on add website Mar 3, 2016 Packages Removing 3rd party binary dlls from Source Control and referenced the… Oct 29, 2015 Website Making configurable 'app short name' for better branding support. Feb 18, 2016 .editorconfig Added editor config settings to ensure correct usage of tabs and spac… Nov 4, 2015 .gitignore Installing only necessary files from CodeMirror. Fix #31 Nov 12, 2015 CompositeC1.sln Fix 4821: The CodePlex build doesn't have new assemblies copied when … Mar 17, 2015 README.md Add Gitter badge Jan 7, 2016 license.txt License text (MPL 1.1) Sep 30, 2015 readme.now.txt Trial related info added to Package section and Newsletter. Also the … Jan 4, 2011 README.md Composite C1 CMS Composite C1 Web Content Management System - .NET based, open source and a bundle of joy! This project has moved from https://compositec1.codeplex.com/ (September 29th 2015). You can still use the forums at CodePlex, but we encourage you submit issues here. Getting started Visit http://docs.composite.net/Getting-started/Guide Download Download binaries from https://github.com/Orckestra/C1-CMS/releases/latest Forums Head over to https://compositec1.codeplex.com/discussions to ask questions Who are we? Composite is the company driving the development of Composite C1. We are working full time on this CMS and on other cool stuff you can add to it. We are situated in Copenhagen and Kiev. We are owned by Orckestra, a Montreal based company specializing in enterprise commerce software. They actively take part in the development as well. You can visit us at http://www.composite.net and http://www.orckestra.com/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Orckestra/C1-CMS"	"A web CMS that focus on UX and adaptability"	"true"
"CMS"	"mojoPortal"	"https://mojoportal.codeplex.com/"	"MojoPortal is an extensible, cross database, mobile friendly, web content management system (CMS) and web application framework written in C# ASP.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"27"	"14"	"21"	"GitHub - joeaudette/mojoportal: mojoPortal is a website framework built on ASP.NET WebForms framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 27 Fork 21 joeaudette/mojoportal Code Issues 2 Pull requests 0 Wiki Pulse Graphs mojoPortal is a website framework built on ASP.NET WebForms framework 34 commits 1 branch 2 releases Fetching contributors C# 66.7% JavaScript 21.5% CSS 5.4% ASP 4.4% HTML 1.0% PLpgSQL 0.8% Other 0.2% C# JavaScript CSS ASP HTML PLpgSQL Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2.4.1.0 v2.4.0.9 Nothing to show New pull request Latest commit ed17716 Apr 27, 2016 joeaudette update based on pull request … https://github.com/joeaudette/mojoportal/pull/8/files Permalink Failed to load latest commit information. .nuget add missing dependencies Sep 26, 2015 Brettle.Web.NeatHtml finished upgrade to new ajaxcontroltoolkit Mar 25, 2016 CodeSmithTemplates initial migration from codeplex mercurial repo Sep 26, 2015 Documents/xml add neathtml source targeting net 45 Mar 24, 2016 LanguageRemover initial migration from codeplex mercurial repo Sep 26, 2015 MiscUtilities initial migration from codeplex mercurial repo Sep 26, 2015 PrototypeWeb initial migration from codeplex mercurial repo Sep 26, 2015 Web update based on pull request Apr 27, 2016 WebStore.Business initial migration from codeplex mercurial repo Sep 26, 2015 WebStore.Data.MSSQL initial migration from codeplex mercurial repo Sep 26, 2015 WebStore.Data.MySql initial migration from codeplex mercurial repo Sep 26, 2015 WebStore.Data.pgsql initial migration from codeplex mercurial repo Sep 26, 2015 WebStore.UI finished upgrade to new ajaxcontroltoolkit Mar 25, 2016 _libs add missing dependencies Sep 26, 2015 _sts_Projects/OpenSource initial migration from codeplex mercurial repo Sep 26, 2015 licenses initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Business.WebHelpers initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Business fix change password format bug in mssql Dec 4, 2015 mojoPortal.Data.FirebirdSql initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Data.MSSQL initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Data.MySql initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Data.SQLite initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Data.SqlCe Fix paging issue for LetterSubscribers in SQLCE. Feb 24, 2016 mojoPortal.Data.pgsql initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Features.Business initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Features.Data.FirebirdSql initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Features.Data.MSSQL initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Features.Data.MySql initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Features.Data.SQLite initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Features.Data.SqlCe initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Features.Data.pgsql initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Features.MyPage.UI initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Features.UI Merge pull request #2 from exeGesIS-SDM/master Apr 10, 2016 mojoPortal.Net initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.RouteHelpers initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Web.Controls Issues 2 through 8. Jan 5, 2016 mojoPortal.Web.Editor initial migration from codeplex mercurial repo Sep 26, 2015 mojoPortal.Web.Framework add neathtml source targeting net 45 Mar 24, 2016 packages add missing files that were blocked by gitignore Apr 10, 2016 .gitignore add missing files that were blocked by gitignore Apr 10, 2016 LICENSE initial migration from codeplex mercurial repo Sep 26, 2015 README.VisualStudio.txt initial migration from codeplex mercurial repo Sep 26, 2015 README.md Update README.md Mar 28, 2016 mojoportal-core.sln initial migration from codeplex mercurial repo Sep 26, 2015 mojoportal.sln add missing files Apr 10, 2016 README.md mojoportal mojoPortal is a website framework built on the older ASP.NET WebForms framework for .NET 4.5 mojoPortal was under active development from August 2004 until late 2014 but it is no longer under active development. I am continuing to maintain it with security fixes if such issues come up, and occasionally bug fixes. I put in many years of time effort and money trying to build a business selling a few add on features for mojoPortal, but never really made a living on it and now it has declined in popularity to a point where it is no longer a worthwhile venture for me to spend time working on it. Many people now consider the ASP.NET WebForms platform as old fashioned and out of date. There is a much better way of doing things with modern patterns going forward with the new ASP.NET Core framework, and that is the technology I want to be working with going forward. Pull requests are welcome for bug fixes. Feel free to fork it and modify mojoPortal code for your needs or to continue active development yourself on your own fork. If you were a fan of my work on mojoPortal you may also be interested in my latest projects cloudscribe and cloudscribe SimpleContent Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/joeaudette/mojoportal"	"MojoPortal is an extensible, cross database, mobile friendly, web content management system (CMS) and web application framework written in C# ASP.NET"	"true"
"CMS"	"N2CMS"	"http://www.n2cms.com/"	"Open source, lightweight, code-first CMS able to seamlessly integrate into any MVC project."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"306"	"45"	"187"	"GitHub - n2cms/n2cms: N2 CMS, an open source CMS for ASP.NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 45 Star 306 Fork 187 n2cms/n2cms Code Issues 163 Pull requests 2 Wiki Pulse Graphs N2 CMS, an open source CMS for ASP.NET http://n2cms.com 5,080 commits 20 branches 65 releases 39 contributors C# 78.9% JavaScript 10.6% CSS 4.5% ASP 4.1% HTML 1.9% Pascal 0.0% C# JavaScript CSS ASP HTML Pascal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags EventsManagerRefact NoJQueryOption anglifiedframe aspnet-identity autosave blogaddon decreasedependencies editor-next master-2.x master-3.x master mobile newmediabrowser ngpreview popularity proposed-upgradeversionfix ravendb redesign update-image-links xmlrepository Nothing to show 2.9.1 2.9.0.1 2.9 2.8.4 2.8 2.6.3.6 2.6.3.3 2.6.1.2 2.6.1.1 2.5.17.5 2.5.17 2.5.16 2.5.10 2.5.9 2.5.8 2.5.7 2.5.6.3 2.5.6.1 2.5.6 2.5.5-beta 2.5.2.1 2.5.1-beta 2.5.0.10-classic 2.5.0.8 2.5 2.5-beta 2.4.12.24 2.4.12.21 2.4.12.19 2.4.11.1 2.4.11 2.4.10.1 2.4.10 2.4.9.2 2.4.9 2.4.8 2.4.7 2.4.6.3 2.4.6.2 2.4.6.1 2.4.6 2.4.4 2.4-rc3 2.4-rc2 2.4-rc1 2.4-beta 2.3.3.2 2.3.2 2.3.1.3 2.3.1.2 2.3.1.1 2.3.1 2.3.0.2 2.3 2.2.6 2.2.5 2.2.4 2.2.3 2.2.2 2.2.1 2.2 2.1.1 2.1rtm 2.1rc3 2.1rc2 Nothing to show New pull request Latest commit b40199e Apr 27, 2016 libardo Assembly version 2.9.6.8 Permalink Failed to load latest commit information. build Assembly version 2.9.6.8 Apr 27, 2016 docs Moves preview related resource configuration to separate element e.g.… Apr 19, 2016 examples Assembly version 2.9.5.1, tweak of build of Razor package Nov 30, 2015 lib Fixed problem with previous commit Dec 23, 2012 snippets - Added mvc controller item template May 17, 2010 src Assembly version 2.9.6.8 Apr 27, 2016 .gitattributes I've programed some configuration options for ckeditor. My intention … Aug 12, 2013 .gitignore Updating .gitignore Dec 3, 2015 LICENSE.md Updated docs Feb 15, 2014 README.md Correct bad Confluence api reference link Jul 20, 2015 README_BRANCHES.md Updated docs Feb 16, 2014 README_SETUP.md Updated readme Mar 18, 2014 fixnewlines.sh Fixed line endings and encodings in aspx files Dec 14, 2013 fixtabs.sh Added scripts to fix code formatting Dec 11, 2013 README.md Welcome to N2CMS N2CMS is a lightweight CMS framework. With just a few strokes of your keyboard a wonderful strongly-typed model emerges complete with a management UI. You can spend the rest of your day building the best site imaginable. It's so .NET! With N2CMS, you build the model of the data that needs to be managed using C# or VB code in Visual Studio. The type below is picked up by the N2 engine at runtime and made available to be edited. The code uses an open API with multiple built-in options and unlimited customization options. All you have to do is design your model class (inherit N2.ContentItem) and define which properties are editable by adding attributes [PageDefinition(TemplateUrl = ""~/my/pageitemtemplate.aspx"")] public class PageItem : N2.ContentItem {     [EditableFreeTextArea]     public virtual string Text { get; set; } } Quick Start For a quick start, follow these instructions, which assume that you are using ASP.NET MVC + Razor (the ""Dinamico"" template pack -- see below for details). Create a new, empty Web Application Project in Visual Studio 2012 or 2013. Go to Tools > Library Package Manager > Package Manager Console In the Package Manager console run the following commands: Install-Package N2CMS.Dinamico Install-Package N2CMS.Management Please note, N2CMS supports the following ASP.NET view engines: ASP.NET MVC + Razor (""Dinamico"" template pack) ASP.NET MVC + MVC Views (""MVC"" template pack) ASP.NET Web Forms Detailed installation instructions are available at: https://github.com/n2cms/n2cms/blob/master/README_SETUP.md or in our documentation wiki: https://n2cmsdocs.atlassian.net/wiki/display/N2CMS/Getting+Started+using+N2CMS API You can use the API within your methods and properties to develop advanced content manageable features. public void DoSomeStuffWithSomeItems(DateTime minDate, DateTime maxDate) {     IList<ContentItem> items = N2.Find.Items         .Where.Created.Between(minDate, maxDate)         .And.SavedBy.Eq(""admin"")         .OrderBy.Published.Desc         .Select();      foreach (ContentItem item in items)         DoSomethingWith(item); } There are more API usage examples here: http://n2cms.com/Documentation/Manipulating%20content/Finding%20content.aspx. I want this in my project. Where do I download it? Install the Nuget package: http://www.nuget.org/packages/N2CMS/ Where do I get more advanced documentation? Reference Documentation On our Confluence wiki: https://n2cmsdocs.atlassian.net/wiki/display/N2CMS/Getting+Started+using+N2CMS We know... we need to move this to github wiki or our public site. We are the cobblers kids. Would love help if you are interested. Contact us. Screenshots Management Console Page or Part Edit Examples We currently post them on CodePlex: http://n2cms.codeplex.com/releases/. You can also find them in the source code within this repo. You may have to make certain configuration changes when moving the code to a hosting provider. Common issues are addressed here: http://n2cms.com/wiki/Troubleshooting-site-deployment.aspx Clone the Source Code and Contribute to N2CMS What is here? Here you will find the N2 CMS framework and a number of template projects that demonstrate alternative ways to use this CMS. They all share a framework that consists of N2.dll and the UI management files residing below the /N2/ folder. How do I setup my development environment? Clone this repo to your PC. Double-click on Prepare_AllDependencies.bat Choose amount of templates (ranging from minimal example to many features in the box): Examples - Minimal C# Examples - Minimal Visual Basic Examples - Minimal MVC Src - Dinamico Src - MVC Templates Src - WebForm Templates Choose between N2.Everything.sln to open everything, or venture down the directory structure of Src or Examples and open a solution down there. Find the Visual Studio solution explorer find the web project you chose (2.), right-click on it and select ""Set as StartUp Project"". Set the a web site project as startup project (N2.Templates.* or Dinamico in src) Compile and run (Ctrl+F5) N2 CMS supports many databases, this code is set up to use the SQLite embedded database. You may want to use SQL Server or MySQL in production. More Resources and Documentation http://n2cms.codeplex.com/releases/ (Download N2 CMS 2.x Developer Documentation) http://n2cms.com/Documentation.aspx http://google.com http://n2cms.codeplex.com/Thread/List.aspx http://n2cms.com/wiki/Project-life-cycle.aspx http://stackoverflow.com/questions/tagged/n2cms Feedback You are very welcome to let us know about your build experiences in the issues so we can continue to improve things. Pull requests are also welcomed. Frequently Asked Questions What does the N2 in N2CMS stand for? It is short for ""en tva"" (1-2 in swedish). I want to create an open source project based on N2CMS. I want N2CMS to be part of branding my project. Do you have guidance on naming my project? Yes, please use the entire project name ""N2CMS"" in your project name. For example, N2CMS.BootstrapBlog would be great project name. We feel that just using ""N2"" is too generic. Using N2CMS will help with organic search results. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/n2cms/n2cms"	"Open source, lightweight, code-first CMS able to seamlessly integrate into any MVC project."	"true"
"CMS"	"Orchard"	"https://github.com/OrchardCMS/Orchard"	"Free, open source, community-focused project aimed at delivering applications and reusable components on the ASP.NET platform"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"970"	"208"	"657"	"GitHub - OrchardCMS/Orchard: Orchard is a free, open source, community-focused Content Management System built on the ASP.NET MVC platform. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 208 Star 970 Fork 657 OrchardCMS/Orchard Code Issues 1,710 Pull requests 52 Pulse Graphs Orchard is a free, open source, community-focused Content Management System built on the ASP.NET MVC platform. http://orchardproject.net 10,854 commits 39 branches 29 releases 115 contributors C# 57.3% JavaScript 36.1% CSS 4.8% XSLT 0.7% Cucumber 0.6% TypeScript 0.3% Other 0.2% C# JavaScript CSS XSLT Cucumber TypeScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags 1.9.2 1.10.x azureauth dev feature/admin-theme feature/asynccache feature/asyncscripts feature/backgroundtasks feature/caching feature/canopy feature/deployment-backup feature/deployments feature/gulp4all feature/livetranslations feature/nuget feature/recipelogging feature/sqlite feature/tenantcommands feature/tenantreset feature/uniqueconstraints feature/webpi feature/widgets feature/wrappers issue/infoset-nullable-enums issue/snippets issue/4569 issue/5791/homealias issue/5848/importexport issue/6193/htmlfilter issue/6740/localized-menus issue/6748 issue/6937/password-changed lucene48 master sebros/cachegate sebros/etag sebros/filecache task/masterlayouts tests/nunit-azure Nothing to show patch-20150519 dev-old 1.10.1 1.10 1.9.3 1.9.2 1.9.1 1.9 1.8.2 1.8.1 1.8 1.7.3 1.7.2 1.7.1 1.7 1.6.1 1.6 1.5.1 1.4.2 1.4.1 1.4 1.3 1.2 1.1 1.0.3 1.0.2 1.0.1 1.0.0 1.0 Nothing to show New pull request Latest commit 1166163 Jul 3, 2016 DanielStolt Merge remote-tracking branch 'origin/dev' into dev Permalink Failed to load latest commit information. lib Merge branch '1.10.x' into dev Mar 31, 2016 src Merge remote-tracking branch 'origin/dev' into dev Jul 3, 2016 .deployment Adding support for Kudu deployment Jul 17, 2015 .gitattributes Adding .gitattributes file to enforce common line ending configuration Dec 9, 2015 .gitignore Ignoring Rebracer changes Jan 14, 2016 .hgeol Adding proper end of line handling when cloning from Mercurial Nov 19, 2015 CREDITS.txt Updating CREDITS Jan 14, 2016 CleanSolution.ps1 Removed Azure cloud service support. Mar 25, 2016 ClickToBuild.cmd Adding ""/m"" switch to MSBuild in ClickToBuild.cmd and Deploy.cmd. Fixes Jun 5, 2016 DeleteModuleBinaries.cmd Converting all files stored as CRLF in git to be stored as LF Dec 13, 2015 LICENSE.txt Converting all files stored as CRLF in git to be stored as LF Dec 13, 2015 Orchard.proj Merge remote-tracking branch 'origin/1.10.x' into dev Apr 14, 2016 README.md README: updating 1.10.1 release description Jun 29, 2016 build.cmd Converting all files stored as CRLF in git to be stored as LF Dec 13, 2015 deploy.cmd Adding ""/m"" switch to MSBuild in ClickToBuild.cmd and Deploy.cmd. Fixes Jun 5, 2016 README.md Orchard Orchard is a free, open source, community-focused Content Management System built on the ASP.NET MVC platform. You can try it for free on DotNest.com or on Microsoft Azure by clicking on this button. About The Orchard Project Please visit our website at http://orchardproject.net for the most current information about this project. Orchard is a free, open source, community-focused Content Management System built on the ASP.NET MVC platform. Orchard is built on a modern architecture that puts extensibility up-front, as its number one concern. All components in Orchard can be replaced or extended. Content is built from easily composable building blocks. Modules extend the system in a very decoupled fashion, where a commenting module for example can as easily apply to pages, blog posts, photos or products. A rich UI composition system completes the picture and ensures that you can get the exact presentation that you need for your content. Orchard is delivered under the .NET Foundation. It is licensed under a New BSD license, which is approved by the OSI. Our mission is to empower our users and foster a dedicated and diverse community that builds the CMS that we all want to use. Project Status Orchard is currently in version 1.10.1 and 1.9.3: 1.10.1 is the latest minor version that contains bugfixes and the more impactful changes and new features added in the latest major version (1.10). If you're new to Orchard, you should use this version. 1.9.3 contains further bugfixes in addition to 1.9.2 and these versions are based on the feature set of Orchard 1.9. We invite participation by the developer community in shaping the project’s direction, so that we can publicly validate our designs and development approach. All our releases are available on our Releases page, and it's easy to Install Orchard using the Web Platform Installer as well. We encourage interested developers to check out the source code on the Orchard GitHub site and get involved with the project. Download the latest release Feature roadmap Docs and designs/specs About us Contact us How To Get Involved We hope that by engaging with the community we will continue to shape Orchard into a valuable set of tools and applications. The Orchard team is committed to open community participation and accepts code contributions. We encourage community participation at all levels from general project feedback to bug fixes and patches. There are many ways you can contribute to Orchard: Check out the code Write documentation Find and file a bug Propose a feature idea Ask and answer questions in our forums and on Stack Overflow Participate in our gitter.im chatroom Participate in forum discussions Submit a pull request Translate Orchard Contribute modules and themes to our gallery Send us feedback The Future Of Orchard CMS: Orchard 2 As the underlying frameworks (.NET, ASP.NET and ASP.NET MVC) are constantly evolving, Orchard of course keeps track of the changes and improvements of these: Orchard 2 is the next generation of Orchard releases that is based on ASP.NET Core. Just like the current Orchard project, it's fully open-source and is publicly available on GitHub. Orchard 2 (as a framework) is being built from scratch: it's still in development and does not share any of its code base (at least directly) with the current versions of Orchard. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/OrchardCMS/Orchard"	"Free, open source, community-focused project aimed at delivering applications and reusable components on the ASP.NET platform"	"true"
"CMS"	"Piranha CMS"	"https://github.com/PiranhaCMS/Piranha"	"Piranha is the fun, fast and lightweight.NET framework for developing cms-based web applications with an extra bite. It's built on ASP.NET MVC and Web Pages and is fully compatible with both Visual Studio and WebMatrix."	"null"	"null"	"null"	"null"	"null"	"http://piranhacms.org"	"null"	"302"	"77"	"175"	"GitHub - PiranhaCMS/Piranha: Piranha is the fun, fast and lightweight .NET framework for developing cms-based web applications with an extra bite. It's built on ASP.NET MVC and Web Pages and is fully compatible with both Visual Studio and WebMatrix. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 77 Star 302 Fork 175 PiranhaCMS/Piranha Code Issues 53 Pull requests 0 Wiki Pulse Graphs Piranha is the fun, fast and lightweight .NET framework for developing cms-based web applications with an extra bite. It's built on ASP.NET MVC and Web Pages and is fully compatible with both Visual Studio and WebMatrix. http://piranhacms.org 819 commits 8 branches 23 releases 17 contributors C# 91.1% CSS 6.3% JavaScript 2.4% Other 0.2% C# CSS JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x 2.2.4 2.2.5 2.2.6 data-remodel legacy master sitespecific-posts Nothing to show v2.2.5 v2.2.4 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.1.6 v2.1.5 v2.1.4 v2.1.3 v2.1.2 v2.1.1 v2.1.0 v2.0.3 v2.0 v1.2.1 v1.2 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1 v1.0 Nothing to show New pull request Latest commit 6692349 Feb 19, 2016 tidyui Updated versions & NuSpec files. Permalink Failed to load latest commit information. .nuget Updated NuGet package resolver. Feb 21, 2014 Core Updated versions & NuSpec files. Feb 19, 2016 Legacy/Piranha.Legacy.Services Updated service registration. Added NuSpec for services. May 5, 2015 Modules/Piranha.Azure Updated all NuGet packages & NuSpec files. May 5, 2015 NuSpec Updated versions & NuSpec files. Feb 19, 2016 Templates Updated all NuGet packages & NuSpec files. May 5, 2015 packages Updated versions & NuSpec files. Feb 19, 2016 .gitignore Ignoring .vs directory, used in Visual Studio 2015 Aug 25, 2015 LICENSE Changed to MIT license. Feb 4, 2015 Piranha.sln Updated service registration. Added NuSpec for services. May 5, 2015 README.md Updated readme to point to Wiki for NuGet docs. May 31, 2015 RazorGenerator.LICENSE.md Added license for RazorGenerator.Mvc Jun 4, 2013 README.md Welcome to Piranha CMS Piranha CMS is a lightweight framework for building content driven applications using ASP.NET MVC & Web Pages. The main focus of the framework lies in structuring and managing content, not in providing a pre packaged web interface. Piranha CMS can be used to build a new application from scratch, or to add CMS functionality to an already existing application. License Piranha CMS is released under the MIT license. It is a permissive free software license, meaning that it permits reuse within proprietary software provided all copies of the licensed software include a copy of the MIT License terms and the copyright notice Branching strategy The master branch of this reposiory is the development branch. If you want to use the source code that resembles the current NuGet-version, DO NOT use the master branch. Instead, use the branch with the same name as the current version on NuGet. NuGet packages There are NuGet packages available for both the template projects, as well as for the core libraries. To read more about how to get started and the different packages available you can find more information in the Wiki section at: https://github.com/PiranhaCMS/Piranha/wiki/NuGet-packages Features If you're interested in features, you can check out the current feature list at the official site at: http://piranhacms.org/features Contributing Contributing is easy and fun. Create a fork, fix an issue or add an amazing feature and just send a pull request. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PiranhaCMS/Piranha"	"Piranha is the fun, fast and lightweight.NET framework for developing cms-based web applications with an extra bite. It's built on ASP.NET MVC and Web Pages and is fully compatible with both Visual Studio and WebMatrix."	"true"
"CMS"	"Umbraco"	"https://github.com/umbraco/Umbraco-CMS"	"Umbraco is a free open source Content Management System built on the ASP.NET platform"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1274"	"241"	"1023"	"GitHub - umbraco/Umbraco-CMS: The simple, flexible and friendly ASP.NET CMS used by more than 350.000 websites Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 241 Star 1,274 Fork 1,023 umbraco/Umbraco-CMS Code Pull requests 91 Pulse Graphs The simple, flexible and friendly ASP.NET CMS used by more than 350.000 websites http://umbraco.com 16,352 commits 56 branches 102 releases 216 contributors C# 73.1% JavaScript 17.9% HTML 3.4% CSS 3.0% ASP 2.2% XSLT 0.2% Other 0.2% C# JavaScript HTML CSS ASP XSLT Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev-v7 Switch branches/tags Branches Tags 6.1.6-U4-3619 6.2-cachefixing 6.2.0-membershipprovider 7.1.0-ImageCropper-WIP 7.1.0-LocationChangeNotificatiion 7.1.0-batchdistcalls 7.1.0-installer 7.1.3-variations 7.1.5-backoffice-miniprofiler 7.1.5-perf 7.2.0-CssReStructure 7.2.0-Examine2 7.2.0-WIP-Packager 7.2.0-WIPFormsInstallDashboard 7.2.0-sqlexpressions 7.2.8-fixedmodelstatemerge U4-6566 U4-7879 UmbracoCMS-Settings-Dashboard dev-v6 dev-v7-HealthCheck dev-v7-ISearchableTree dev-v7-contentcache dev-v7-contenttypeeditor dev-v7-cteditor dev-v7-deploy dev-v7-package-migrations dev-v7-rollback dev-v7 dev-v8 forms-install-copy master-v6 master-v7 master temp-U4-5896 temp-U4-6206 temp-U4-7662 temp-U4-8331 temp-U4-8445 temp-U4-8500 temp-U4-8511 temp-U4-8542 temp-U4-8584 temp-U4-8601 temp-lang-and-var temp-maurice temp-sortorder-mediapicker temp-stephan-wip temp-template-editor temp-the-circle-of-variations temp-u4-7318 temp-u4-8406 temp-u4-8497 temp-u4-8604 temp-umblocalize umb-deploy Nothing to show release-7.5.0-beta release-7.4.3 release-7.4.2 release-7.4.1 release-7.4.0 release-7.4.0-beta2 release-7.4.0-RC1 release-7.3.8 release-7.3.7 release-7.3.6 release-7.3.5 release-7.3.4 release-7.3.3 release-7.3.2 release-7.3.1 release-7.3.0 release-7.3.0-beta3 release-7.3.0-beta2 release-7.3.0-beta release-7.3.0-RC release-7.2.8 release-7.2.7 release-7.2.6 release-7.2.5 release-7.2.5-RC release-7.2.4 release-7.2.3 release-7.2.2 release-7.2.1 release-7.2.0 release-7.2.0-beta2 release-7.2.0-beta release-7.2.0-alpha release-7.2.0-RC release-7.1.9 release-7.1.8 release-7.1.7 release-7.1.6 release-7.1.5 release-7.1.4 release-7.1.3 release-7.1.2 release-7.1.1 release-7.1.0 release-7.1.0-beta release-7.1.0-RC release-7.0.4 release-7.0.3 release-7.0.2 release-7.0.1 release-7.0.0 release-7.0.0-beta release-7.0.0-alpha release-7.0.0-RC release-6.2.6 release-6.2.5 release-6.2.4 release-6.2.3 release-6.2.2 release-6.2.1 release-6.2.0 release-6.2.0-beta release-6.1.6 release-6.1.5 release-6.1.4 release-6.1.3 release-6.1.2 release-6.1.1 release-6.1.0 release-6.1.0-beta2 release-6.1.0-beta release-6.0.7 release-6.0.6 release-6.0.4 release-6.0.3 release-4.11.10 release-4.11.9 release-4.11.7 release-4.11.6 Sprint-Juno-A Release-6.0.2 Release-6.0.0 Release-6.0.0-beta Release-6.0.0-RC Release-4.11.5 Release-4.11.4 Release-4.11.3 Release-4.11.2.2 Release-4.11.2.1 Release-4.11.2 Release-4.11.1 Release-4.11.0 Release-4.10.0 Release-4.9.1 Release-4.9.0 Release-4.8.1 Release-4.8.0 Release-4.6.0 Release-4.5.2 7.3.0-beta Nothing to show New pull request Latest commit a758688 Jul 15, 2016 nul800sebastiaan U4-8730 MigrationRunner should check for migrations params to already… … … be null  #U4-8730 Fixed Permalink Failed to load latest commit information. apidocs U4-8500 Get c# docs building (#1291) May 30, 2016 build Revert ""Adds a pause after build succeeds and when not running on the… Jul 15, 2016 src U4-8730 MigrationRunner should check for migrations params to already… Jul 15, 2016 tools Add RevertToEmptyInstall which installs an empty DB with credentials … Apr 25, 2013 .gitignore Improving Build.bat and appveyor build output Jul 14, 2016 LICENSE.md oops, not sure how the LICENSE got deleted, removed AD identity nuspe… Apr 1, 2015 README.md Update number of sites running Mar 28, 2016 appveyor.yml Merge branch 'temp-appveyor-output' into dev-v7 Jul 14, 2016 README.md Umbraco CMS Umbraco is a free open source Content Management System built on the ASP.NET platform. Building Umbraco from source The easiest way to get started is to run build/build.bat which will build both the backoffice (also known as ""Belle"") and the Umbraco core. You can then easily start debugging from Visual Studio, or if you need to debug Belle you can run grunt dev in src\Umbraco.Web.UI.Client. If you're interested in making changes to Belle make sure to read the Belle ReadMe file. Note that you can always download a nightly build so you don't have to build the code yourself. Watch a introduction video Umbraco - the simple, flexible and friendly ASP.NET CMS More than 350,000 sites trust Umbraco For the first time on the Microsoft platform, there is a free user and developer friendly CMS that makes it quick and easy to create websites - or a breeze to build complex web applications. Umbraco has award-winning integration capabilities and supports ASP.NET MVC or Web Forms, including User and Custom Controls, out of the box. It's a developer's dream and your users will love it too. Used by more than 350,000 active websites including http://daviscup.com, http://heinz.com, http://peugeot.com, http://www.hersheys.com/ and The Official ASP.NET and IIS.NET website from Microsoft (http://asp.net / http://iis.net), you can be sure that the technology is proven, stable and scales. To view more examples, please visit http://umbraco.com/why-umbraco/#caseStudies Downloading The downloadable Umbraco releases live at http://our.umbraco.org/download. Forums We have a forum running on http://our.umbraco.org. The discussions group on Google Groups is for discussions on developing the core, and not on Umbraco-implementations or extensions in general. For those topics, please use http://our.umbraco.org. Contribute to Umbraco If you want to contribute back to Umbraco you should check out our guide to contributing. Found a bug? Another way you can contribute to Umbraco is by providing issue reports. For information on how to submit an issue report refer to our online guide for reporting issues. To view existing issues, please visit http://issues.umbraco.org. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/umbraco/Umbraco-CMS"	"Umbraco is a free open source Content Management System built on the ASP.NET platform"	"true"
"Code Analysis and Metrics"	"CodeMaid"	"http://www.codemaid.net/"	"Visual studio extension to cleanup, dig through and simplify C#, C++, F#, VB, PHP, JSON, XAML, XML, ASP, HTML, CSS, LESS, SCSS, JavaScript and TypeScript coding."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"393"	"53"	"109"	"GitHub - codecadwallader/codemaid: CodeMaid is an open source Visual Studio extension to cleanup and simplify our C#, C++, F#, VB, PHP, PowerShell, JSON, XAML, XML, ASP, HTML, CSS, LESS, SCSS, JavaScript and TypeScript coding. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 53 Star 393 Fork 109 codecadwallader/codemaid Code Issues 47 Pull requests 0 Pulse Graphs CodeMaid is an open source Visual Studio extension to cleanup and simplify our C#, C++, F#, VB, PHP, PowerShell, JSON, XAML, XML, ASP, HTML, CSS, LESS, SCSS, JavaScript and TypeScript coding. http://www.codemaid.net 1,391 commits 3 branches 26 releases 14 contributors C# 99.3% F# 0.2% Visual Basic 0.2% JavaScript 0.1% PHP 0.1% TypeScript 0.1% C# F# Visual Basic JavaScript PHP TypeScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master nuget stable Nothing to show v10.1 v10.0 v0.9.1 v0.9.0.2-beta v0.9.0.1-beta v0.9.0 v0.8.9-beta v0.8.8-alpha v0.8.1 v0.8.0.1-beta v0.8.0 v0.7.9.1-beta v0.7.9-beta v0.7.8-alpha v0.7.6.1-beta v0.7.6 v0.7.5.1-beta v0.7.5 v0.7.4.3-beta v0.7.4.2-beta v0.7.4.1-beta v0.7.4 v0.7.3.2-beta v0.7.3.1-beta v0.7.3 v0.4.3 Nothing to show New pull request Latest commit 7bbaf15 May 14, 2016 codecadwallader #290: Extend FindInSolutionExplorerCommand to more gracefully handle … … …when Track Active Item is selected. Permalink Failed to load latest commit information. CodeMaid.IntegrationTests #272 #275: When building the code tree by file order, ignore any in-m… Apr 16, 2016 CodeMaid.UnitTests Utilize C# 6 nameof and string interpolation (thanks ReSharper!) Mar 19, 2016 CodeMaid #290: Extend FindInSolutionExplorerCommand to more gracefully handle … May 14, 2016 lib Card 240: Migrate System.Windows.Interactivity to NuGet. Aug 14, 2015 .gitattributes Reverse last commit for EOL behavior. Mar 19, 2016 .gitignore Introduce end-of-line normalization Mar 19, 2016 CHANGELOG.md Update to v10.1 label Apr 23, 2016 CONTRIBUTING.md Update the CHANGELOG.md and CONTRIBUTING.md Mar 19, 2016 CodeMaid.config Add exclusions for two new auto-generated files. Mar 19, 2016 CodeMaid.sln Remove unused x86 configurations from solution. Apr 2, 2016 CodeMaid.snk Relocate and rename snk file for use by unit test projects. Utilize I… May 25, 2013 GlobalAssemblyInfo.cs Remove all copyright headers from tops of files. No longer considered… Mar 19, 2016 ISSUE_TEMPLATE.md Update to v10.1 label Apr 23, 2016 IntegrationTests.testsettings Introduce end-of-line normalization Mar 19, 2016 LICENSE.txt Git is convinced there are hidden differences.. trying to git rid of … Mar 19, 2016 README.md Update to v10.1 label Apr 23, 2016 appveyor.yml Update to v10.1 label Apr 23, 2016 README.md For more details, please visit: http://www.codemaid.net Currently supports VS2012, VS2013, VS2015 and VS ""15"" Preview. For Visual Studio 2010, the last supported version is v0.8.1. For Visual Studio 2005/2008, the last supported version is v0.4.3. Links Project home, Documentation, News: www.codemaid.net Download, Reviews: Visual Studio Gallery Code, Issues: GitHub Continuous Integration: AppVeyor Twitter @codemaid: Twitter Features Code Cleaning Cleanup random white space into a simple standard order. Add unspecified access modifiers. Utilize Visual Studio’s built-in formatting capabilities. Remove and sort using statements. And do it all automatically on save or on demand, from an individual file to the entire solution. Code Digging Visualize and navigate through the contents of your C# and C++ files from a tree view hierarchy. Quickly switch between different sorting methods to get a better overview. Drag and drop to reorganize the code. See McCabe complexity scores and informative tooltips. Code Reorganizing Reorganize the layout of members in a C# file to follow Microsoft’s StyleCop convention, or your own preferences. Automatically generate regions to match. Run on demand or automatically during cleanup. Comment Formatting Format comments to wrap at a specified column and arrange tags on separate lines. Run on demand or automatically during cleanup. Joining Join two adjacent lines, or a highlighted section of code onto a single line. Finding Find the current file in the solution explorer window. Sorting Sort a highlighted section of code alphabetically. Collapsing Recursively collapse nodes or the entire tree in the solution explorer window. Progressing View the overall progress of a build within Visual Studio, or in the Windows taskbar, both with a green/red status indication. Configuring Enable, modify or disable many of the aspects of how CodeMaid does its work. Switching Switch between related files, such as cpp and header files or xaml and code-behind. Toggling Toggle read-only state of files without jumping into the windows explorer. and More! Remove regions, close read-only files, etc. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/codecadwallader/codemaid"	"Visual studio extension to cleanup, dig through and simplify C#, C++, F#, VB, PHP, JSON, XAML, XML, ASP, HTML, CSS, LESS, SCSS, JavaScript and TypeScript coding."	"true"
"Code Analysis and Metrics"	"StyleCop"	"https://stylecop.codeplex.com/"	"StyleCop analyzes C# source code to enforce a set of style and consistency rules"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"StyleCop - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In StyleCop home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe Project Description StyleCop analyzes C# source code to enforce a set of style and consistency rules. It can be run from inside of Visual Studio or integrated into an MSBuild project. StyleCop has also been integrated into many third-party development tools. 4.7.54 is compatible with: Visual Studio 2008, 2010, 2012, 2013, and 2015 JetBrains ReSharper versions: 5.1.3 (5.1.3000.12) 6.0 (6.0.2202.688) 6.1 (6.1.37.86) 6.1.1 (6.1.1000.82) 7.0.1 (7.0.1098.2760) 7.1.3 (7.1.3000.2254) 8.2 (8.2.3000.5176) 9.2 (103.0.0.0) - as an extension from the ReSharper gallery NOTE: An error may be displayed when the extension is first installed, but everything should still work normally 10.0.2 (104.0.0.0) - as an extension from the ReSharper gallery NOTE: An error may be displayed when the extension is first installed, but everything should still work normally Core Principles StyleCop provides value by enforcing a common set of style rules for C# code. StyleCop will continue to ship with a single, consistent set of rules, with minimal rule configuration allowed. Developers can implement their own rules if they so choose. StyleCop ships with the ability to seamlessly integrate with Visual Studio, MSBuild, TFS, etc. Developers are free to implement custom code to integrate StyleCop into other development and tooling environments, as described in the SDK documentation.   Last edited May 13 at 11:02 PM by csdahlberg, version 77 download Opera does not support ClickOnce X To install this application, save it and then open it. Opening it directly from Opera will not work correctly. current 4.7.54 date Fri May 13, 2016 at 7:00 AM status Stable downloads 12,012 rating       4 ratings Review this release Most Helpful Reviews      It's great to see the original StyleCop back in active development. This fits our needs exactly.      Cannot tweak the Stylecop settings in Resharper as when the 'Reset C# Code style settings' button is pressed an error occurs. This p... (more) View all reviews activity downloads 2178 Days: 7 7 30 30 All All Details © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"StyleCop analyzes C# source code to enforce a set of style and consistency rules"	"true"
"Code Analysis and Metrics"	"Gendarme"	"https://github.com/spouliot/gendarme"	"Extensible rule-based tool to find problems in.NET applications and libraries"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"54"	"8"	"0"	"GitHub - spouliot/gendarme: Gendarme is a extensible rule-based tool to find problems in .NET applications and libraries. Gendarme inspects programs and libraries that contain code in ECMA CIL format (Mono and .NET) and looks for common problems with the code, problems that compiler do not typically check or have not historically checked. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 54 Fork 0 spouliot/gendarme Code Issues 6 Pull requests 0 Wiki Pulse Graphs Gendarme is a extensible rule-based tool to find problems in .NET applications and libraries. Gendarme inspects programs and libraries that contain code in ECMA CIL format (Mono and .NET) and looks for common problems with the code, problems that compiler do not typically check or have not historically checked. http://www.mono-project.com/Gendarme 2 commits 1 branch 0 releases Fetching contributors Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit d0366d0 Jan 26, 2011 Sebastien Pouliot Fix typo and add some links Permalink Failed to load latest commit information. README Fix typo and add some links Jan 26, 2011 README NOTE: This is not the official Gendarme source repository.   The official repository is: https://github.com/mono/mono-tools/  This repository is used:  * for unsupported tools (sources) not part of the Gendarme distribution  * download of the win32 installer and ZIPped binaries https://github.com/spouliot/gendarme/downloads  * git-based wiki / documentation https://github.com/spouliot/gendarme/wiki  In short nothing worth the time (or the electrons) cloning.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/spouliot/gendarme"	"Extensible rule-based tool to find problems in.NET applications and libraries"	"true"
"Code Analysis and Metrics"	"Metrics-Net"	"https://github.com/danielcrenna/metrics-net"	"Capturing CLR and application-level metrics. So you know what's going on."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"https://github.com/danielcrenna/metrics-net"	"Capturing CLR and application-level metrics. So you know what's going on."	"false"
"Code Analysis and Metrics"	"BenchmarkDotNet"	"https://github.com/PerfDotNet/BenchmarkDotNet"	"Powerful.NET library for benchmarking."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1171"	"85"	"94"	"GitHub - PerfDotNet/BenchmarkDotNet: Powerful .NET library for benchmarking Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 85 Star 1,171 Fork 94 PerfDotNet/BenchmarkDotNet Code Issues 39 Pull requests 0 Wiki Pulse Graphs Powerful .NET library for benchmarking https://www.nuget.org/packages/BenchmarkDotNet/ 580 commits 3 branches 21 releases Fetching contributors C# 97.5% F# 0.9% R 0.8% Batchfile 0.5% PowerShell 0.3% Shell 0.0% C# F# R Batchfile PowerShell Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: stable Switch branches/tags Branches Tags clrmd master stable Nothing to show v0.9.8 v0.9.7 v0.9.6 v0.9.5 v0.9.4 v0.9.3 v0.9.2 v0.9.1 v0.9.0 v0.8.2 v0.8.1 v0.8.0 v0.7.8 v0.7.7 v0.7.6 v0.7.5 v0.7.4 v0.7.3 v0.7.2 v0.7.1 v0.7.0 Nothing to show New pull request Latest commit c6405a9 Jul 6, 2016 AndreyAkinshin Set library version: 0.9.8 Permalink Failed to load latest commit information. .nuget added missing Nuget feeds to NuGet.Config, removed launchSettings whi… May 28, 2016 BenchmarkDotNet.Diagnostics.Windows Set library version: 0.9.8 Jul 7, 2016 BenchmarkDotNet.IntegrationTests.Classic Remove xmlns for packages.config in IntegrationTests.Classic Jul 5, 2016 BenchmarkDotNet.IntegrationTests.CustomPaths use Roslyn's managed API for compilation, drop .NET 4.0 support!! fixes Jul 5, 2016 BenchmarkDotNet.IntegrationTests.DifferentRuntime use Roslyn's managed API for compilation, drop .NET 4.0 support!! fixes Jul 5, 2016 BenchmarkDotNet.IntegrationTests.DisabledOptimizations use Roslyn's managed API for compilation, drop .NET 4.0 support!! fixes Jul 5, 2016 BenchmarkDotNet.IntegrationTests.EnabledOptimizations use Roslyn's managed API for compilation, drop .NET 4.0 support!! fixes Jul 5, 2016 BenchmarkDotNet.IntegrationTests.FSharp use Roslyn's managed API for compilation, drop .NET 4.0 support!! fixes Jul 5, 2016 BenchmarkDotNet.IntegrationTests.VisualBasic use Roslyn's managed API for compilation, drop .NET 4.0 support!! fixes Jul 5, 2016 BenchmarkDotNet.IntegrationTests remove Framework settings from Jobs, fixes #194 Jul 6, 2016 BenchmarkDotNet.Samples.FSharp.Core Set library version: 0.9.8 Jul 6, 2016 BenchmarkDotNet.Samples.FSharp use Roslyn's managed API for compilation, drop .NET 4.0 support!! fixes Jul 5, 2016 BenchmarkDotNet.Samples Set library version: 0.9.8 Jul 6, 2016 BenchmarkDotNet.Tests Set library version: 0.9.8 Jul 6, 2016 BenchmarkDotNet Set library version: 0.9.8 Jul 6, 2016 build Appveyor build improvements Jun 12, 2016 documentation/images DNX: description for development Feb 24, 2016 .gitignore Added appveyor ci build Jun 5, 2016 BenchmarkDotNet.sln Added missing 'build dependency' Jun 12, 2016 BenchmarkDotNet.sln.DotSettings added GC info to BenchmarkEnvironmentInfo Jun 19, 2016 DEVELOPING.md DEVELOPING.md: fix a typo Jul 6, 2016 LICENSE.md Update year in LICENSE.md May 29, 2016 NuGet.Config added missing Nuget feeds to NuGet.Config, removed launchSettings whi… May 28, 2016 README.md Update to .NET Core RTM, drop DNX* support, fixes #216 Jun 27, 2016 appveyor.yml Set library version: 0.9.8 Jul 6, 2016 global.json dnx: Diagnosers support. Currently only these which do not need umana… Feb 21, 2016 runClassicTests.cmd use Roslyn's managed API for compilation, drop .NET 4.0 support!! fixes Jul 5, 2016 runCoreTests.cmd minor cleanup after moving to RC2 May 26, 2016 strongNameKey.snk Strong naming, fixes #101 Apr 12, 2016 README.md BenchmarkDotNet is a powerful .NET library for benchmarking. Main: Docs: Build: Summary Standard benchmarking routine: generating an isolated project per each benchmark method; auto-selection of iteration amount; warmup; overhead evaluation; statistics calculation; and so on. Easy way to compare different environments (x86 vs x64, LegacyJit vs RyuJit, and so on; see: Jobs) Reports: markdown (default, github, stackoverflow), csv, html, plain text; png plots. Advanced features: Baseline, Params, Percentiles Powerful diagnostics based on ETW events (see BenchmarkDotNet.Diagnostics.Windows) Supported runtimes: Full .NET Framework, .NET Core (RTM), Mono Supported languages: C#, F# (also on .NET Core) and Visual Basic Content Getting started Configs Advanced features Rules of benchmarking How to run? How it works? FAQ Team Getting started Step 1. Install BenchmarkDotNet via the NuGet package: BenchmarkDotNet PM> Install-Package BenchmarkDotNet  Step 2. Write a class with methods that you want to measure and mark them with the Benchmark attribute. In the following example, we compare MD5 and SHA256 cryptographic hash functions: public class Md5VsSha256 {     private const int N = 10000;     private readonly byte[] data;      private readonly SHA256 sha256 = SHA256.Create();     private readonly MD5 md5 = MD5.Create();      public Md5VsSha256()     {         data = new byte[N];         new Random(42).NextBytes(data);     }      [Benchmark]     public byte[] Sha256()     {         return sha256.ComputeHash(data);     }      [Benchmark]     public byte[] Md5()     {         return md5.ComputeHash(data);     } } Step 3. Run it: var summary = BenchmarkRunner.Run<Md5VsSha256>(); Step 4. View the results. Here is an example of output from the above benchmark: BenchmarkDotNet=v0.9.0.0 OS=Microsoft Windows NT 6.2.9200.0 Processor=Intel(R) Core(TM) i7-4810MQ CPU @ 2.80GHz, ProcessorCount=8 Frequency=2728067 ticks, Resolution=366.5599 ns HostCLR=MS.NET 4.0.30319.42000, Arch=64-bit RELEASE [RyuJIT]  Type=Md5VsSha256  Mode=Throughput Method Median StdDev Md5 21.2912 us 0.4373 us Sha256 107.4124 us 1.8339 us Step 5. Analyze it. In your bin directory, you can find a lot of useful files with detailed information. For example: Csv reports with raw data: Md5VsSha256-report.csv, Md5VsSha256-runs.csv Markdown reports: Md5VsSha256-report-default.md, Md5VsSha256-report-stackoverflow.md, Md5VsSha256-report-github.md Plain report and log: Md5VsSha256-report.txt, Md5VsSha256.log Plots (if you have installed R): Md5VsSha256-barplot.png, Md5VsSha256-boxplot.png, and so on. Configs Config is a set of so called jobs, columns, exporters, loggers, diagnosers, analysers, validators that help you to build your benchmark. There are two ways to set your config: Object style [Config(typeof(Config))] public class MyClassWithBenchmarks {     private class Config : ManualConfig     {         public Config()         {             Add(new Job1(), new Job2());             Add(new Column1(), new Column2());             Add(new Exporter1(), new Exporter2());             Add(new Logger1(), new Logger2());             Add(new Diagnoser1(), new Diagnoser2());             Add(new Analyser1(), new Analyser2());         }     }      [Benchmark]     public void Benchmark1()     {     }      [Benchmark]     public void Benchmark2()     {     } } Command style [Config(""jobs=job1,job2 "" +         ""columns=column1,column2 "" +         ""exporters=exporter1,exporter2 "" +         ""loggers=logger1,logger2 "" +         ""diagnosers=diagnoser1,diagnoser2 "" +         ""analysers=analyser1,analyser2"")] public class MyClassWithBenchmarks {     [Benchmark]     public void Benchmark1()     {     }      [Benchmark]     public void Benchmark2()     {     } } Custom configs You can also define own config attribute: [MyConfigSource(Jit.LegacyJit, Jit.RyuJit)] public class IntroConfigSource {     private class MyConfigSourceAttribute : Attribute, IConfigSource     {         public IConfig Config { get; private set; }          public MyConfigSourceAttribute(params Jit[] jits)         {             var jobs = jits.Select(jit => Job.Dry.With(Platform.X64).With(jit)).ToArray();             Config = ManualConfig.CreateEmpty().With(jobs);         }     }      [Benchmark]     public void Foo()     {         Thread.Sleep(10);     } } Fluent config There is no need to create new Config type, you can simply use fluent interface: BenchmarkRunner     .Run<Algo_Md5VsSha256>(         ManualConfig             .Create(DefaultConfig.Instance)             .With(Job.RyuJitX64)             .With(Job.Core)             .With(ExecutionValidator.FailOnError)); Jobs A job is an environment for your benchmarks. You can set one or several jobs for your set of benchmarks. Job characteristics: Toolchain. A toolchain for generating/building/executing your benchmark. Values: Classic (Roslyn based) [default] and Core (dotnet cli based) . Mode. Values: Throughput [default], SingleRun. Platform. Values: Host [default], AnyCpu, X86, X64. Jit. Values: Host [default], LegacyJit, RyuJit. Framework. Values: Host [default], V40, V45, V451, V452, V46. Runtime. Values: Host [default], Clr, Mono, Core. LaunchCount. Count of separated process launches. Values: Auto [default] or specific number. WarmupCount. Count of warmup iterations. Values: Auto [default] or specific number. TargetCount. Count of target iterations (that will be used for summary). Values: Auto [default] or specific number. IterationTime. Desired time of execution of an iteration (in ms). Values: Auto [default] or specific number. Affinity. ProcessorAffinity of process. Values: Auto [default] or specific mask. The Host value means that value will be inherited from host process settings. The Auto values means the BenchmarkDotNet automatically choose the best value. Predefined class Job {     IJob Default = new Job();     IJob LegacyX86 = new Job { Platform = Platform.X86, Jit = Jit.LegacyJit };     IJob LegacyX64 = new Job { Platform = Platform.X64, Jit = Jit.LegacyJit };     IJob RyuJitX64 = new Job { Platform = Platform.X64, Jit = Jit.RyuJit };     IJob Dry = new Job { Mode = Mode.SingleRun, ProcessCount = 1, WarmupCount = 1, TargetCount = 1 };     IJob[] AllJits = { LegacyX86, LegacyX64, RyuJitX64 };     IJob Clr = new Job { Runtime = Runtime.Clr };     IJob Mono = new Job { Runtime = Runtime.Mono };     IJob Core = new Job { Runtime = Runtime.Core };     IJob LongRun = new Job { LaunchCount = 3, WarmupCount = 30, TargetCount = 1000 }; } Examples // *** Command style *** [Config(""jobs=AllJits"")] [Config(""jobs=Dry"")] [Config(""jobs=LegacyX64,RyuJitX64"")] // *** Object style *** class Config : ManualConfig {     public Config()     {         Add(Job.AllJits);         Add(Job.LegacyX64, Job.RyuJitX64);         Add(Job.Default.With(Mode.SingleRun).WithProcessCount(1).WithWarmupCount(1).WithTargetCount(1));         Add(Job.Default.With(Framework.V40).With(Runtime.Mono).With(Platform.X64));     } } Columns A column is a column in the summary table. Predefined class StatisticColumn {     IColumn Mean;     IColumn StdError;     IColumn StdDev;     IColumn OperationPerSecond;     IColumn Min;     IColumn Q1;     IColumn Median;     IColumn Q3;     IColumn Max;      IColumn P0;     IColumn P25;     IColumn P50;     IColumn P80;     IColumn P85;     IColumn P90;     IColumn P95;     IColumn P100;      IColumn[] AllStatistics = { Mean, StdError, StdDev, OperationsPerSecond, Min, Q1, Median, Q3, Max }; } // Specify a ""place"" of each benchmark. Place 1 means a group of the fastest benchmarks, place 2 means the second group, and so on. There are several styles: class Place {     IColumn ArabicNumber; // `1`, `2`, `3`, ...     IColumn Stars; // `*`, `**`, `***`, ... } class PropertyColumn {     IColumn Type;     IColumn Method;     IColumn Mode;     IColumn Platform;     IColumn Jit;     IColumn Framework;     IColumn Toolchain;     IColumn Runtime;     IColumn LaunchCount;     IColumn WarmupCount;     IColumn TargetCount;     IColumn Affinity; } Default PropertyColumn.Type PropertyColumn.Method PropertyColumn.Mode PropertyColumn.Platform PropertyColumn.Jit PropertyColumn.Framework PropertyColumn.Toolchain PropertyColumn.Runtime PropertyColumn.ProcessCount PropertyColumn.WarmupCount PropertyColumn.TargetCount PropertyColumn.Affinity StatisticColumn.Median StatisticColumn.StdDev BaselineDeltaColumn.Default Examples // *** Command style *** [Config(""columns=Min,Max"")] [Config(""columns=AllStatistics"")] // *** Object style *** [Config(typeof(Config))] public class IntroTags {     private class Config : ManualConfig     {         public Config()         {             Add(Job.Dry);             // You can add custom tags per each method using Columns             Add(new TagColumn(""Foo or Bar"", name => name.Substring(0, 3)));             Add(new TagColumn(""Number"", name => name.Substring(3)));         }     }      [Benchmark] public void Foo1() { /* ... */ }     [Benchmark] public void Foo12() { /* ... */ }     [Benchmark] public void Bar3() { /* ... */ }     [Benchmark] public void Bar34() { /* ... */ } } // Result: //  Method |     Median |    StdDev | Foo or Bar | Number | // ------- |----------- |---------- |----------- |------- | //   Bar34 | 10.3636 ms | 0.0000 ms |        Bar |     34 | //    Bar3 | 10.4662 ms | 0.0000 ms |        Bar |      3 | //   Foo12 | 10.1377 ms | 0.0000 ms |        Foo |     12 | //    Foo1 | 10.2814 ms | 0.0000 ms |        Foo |      1 | Exporters An exporter allows you to export results of your benchmark in different formats. By default, files with results will be located in .\BenchmarkDotNet.Artifacts\results directory. Default exporters are: csv, html and markdown. Here is list of all available exporters: public IEnumerable<IExporter> GetExporters() {     yield return MarkdownExporter.Default; // produces <BenchmarkName>-report-default.md     yield return MarkdownExporter.GitHub; // produces <BenchmarkName>-report-github.md     yield return MarkdownExporter.StackOverflow; // produces <BenchmarkName>-report-stackoverflow.md     yield return CsvExporter.Default; // produces <BenchmarkName>-report.csv     yield return CsvMeasurementsExporter.Default; // produces <BenchmarkName>-measurements.csv     yield return HtmlExporter.Default; // produces <BenchmarkName>-report.html     yield return PlainExporter.Default; // produces <BenchmarkName>-report.txt } Plots If you have installed R, defined %R_HOME% variable and used RPlotExporter.Default and CsvMeasurementsExporter.Default in your config, you will also get nice plots with help of the BuildPlots.R script in your bin directory. Examples: <BenchmarkName>-barplot.png <BenchmarkName>-boxplot.png <BenchmarkName>-<MethodName>-density.png <BenchmarkName>-<MethodName>-facetTimeline.png <BenchmarkName>-<MethodName>-facetTimelineSmooth.png <BenchmarkName>-<MethodName>-<JobName>-timelineSmooth.png <BenchmarkName>-<MethodName>-<JobName>-timelineSmooth.png  A config example: public class Config : ManualConfig {     public Config()     {         Add(CsvMeasurementsExporter.Default);         Add(RPlotExporter.Default);     } } Loggers A logger allows you to log results of your benchmark. By default, you can see log on console and in a file (<BenchmarkName>.log). Diagnosers A diagnoser can attach to your benchmark and get some useful info. There is a separated package with diagnosers for Windows (BenchmarkDotNet.Diagnostics.Windows): The current Diagnosers are: GC and Memory Allocation (MemoryDiagnoser) JIT Inlining Events (InliningDiagnoser) Below is a sample output from the GC and Memory Allocation diagnoser, note the extra columns on the right-hand side (""Gen 0"", ""Gen 1"", ""Gen 2"" and ""Bytes Allocated/Op""): Method Lookup Median StdDev Scaled Gen 0 Gen 1 Gen 2 Bytes Allocated/Op LINQ Testing 49.1154 ns 0.5301 ns 2.48 1,526.00 - - 25.21 Iterative Testing 19.8040 ns 0.0456 ns 1.00 - - - 0.00 A config example: private class Config : ManualConfig {     public Config()     {         Add(new MemoryDiagnoser());         Add(new InliningDiagnoser());     } } Analysers An analyser can analyze summary of your benchmarks and produce some useful warnings. For example, EnvironmentAnalyser warns you, if you build your application in the DEBUG mode or run it with an attached debugger. Validators A validator can validate your benchmarks before they are executed and produce validation errors. If any of the validation errors is critical, then none of the benchmarks will get executed. Available validators are: BaselineValidator.FailOnError - it checks if more than 1 Benchmark per class has Baseline = true applied. This validator is mandatory. JitOptimizationsValidator.(Dont)FailOnError - it checks whether any of the referenced assemblies is non-optimized. DontFailOnError version is enabled by default. ExecutionValidator.(Dont)FailOnError - it checks if it is possible to run your benchmarks by executing each of them once. Optional. Advanced Features Params You can mark one or several fields or properties in your class by the Params attribute. In this attribute, you can specify set of values. As a result, you will get results for each combination of params values. Example public class IntroParams {     [Params(100, 200)]     public int A { get; set; }      [Params(10, 20)]     public int B { get; set; }      [Benchmark]     public void Benchmark()     {         Thread.Sleep(A + B + 5);     } } Method Median StdDev A B Benchmark 115.3325 ms 0.0242 ms 100 10 Benchmark 125.3282 ms 0.0245 ms 100 20 Benchmark 215.3024 ms 0.0375 ms 200 10 Benchmark 225.2710 ms 0.0434 ms 200 20 Setup If you have some data that you want to initialize, the [Setup] method is the best place for this. It will be invoked only once before each iteration. private int[] initialValuesArray; private List<int> initialValuesList;  [Setup] public void SetupData() {     int MaxCounter = 1000;     initialValuesArray = Enumerable.Range(0, MaxCounter).ToArray();     initialValuesList = Enumerable.Range(0, MaxCounter).ToList(); }  [Benchmark] public int ForLoop() {     var counter = 0;     for (int i = 0; i < initialValuesArray.Length; i++)         counter += initialValuesArray[i];     return counter; }  [Benchmark] public int ForEachList() {     var counter = 0;     foreach (var i in initialValuesList)         counter += i;     return counter; }  Baseline In order to scale your results you need to mark one of your benchmark methods as a baseline. Only one method in class can have Baseline = true applied. public class Sleeps {     [Benchmark]     public void Time50()     {         Thread.Sleep(50);     }      [Benchmark(Baseline = true)]     public void Time100()     {         Thread.Sleep(100);     }      [Benchmark]     public void Time150()     {         Thread.Sleep(150);     } } As a result, you will have additional column in the summary table: BenchmarkDotNet=v0.9.0.0 OS=Microsoft Windows NT 6.2.9200.0 Processor=Intel(R) Core(TM) i7-4810MQ CPU @ 2.80GHz, ProcessorCount=8 Frequency=2728067 ticks, Resolution=366.5599 ns HostCLR=MS.NET 4.0.30319.42000, Arch=64-bit RELEASE [RyuJIT]  Type=Sleeps  Mode=Throughput Method Median StdDev Scaled Time100 100.2640 ms 0.1238 ms 1.00 Time150 150.2093 ms 0.1034 ms 1.50 Time50 50.2509 ms 0.1153 ms 0.50 Percentiles The percentile represents a higer boundary for specified percengage of a measurements. For example, 95th percentile = 500ms means that 95% of all samples are not slower than 500ms. This metric is not very useful in microbenchmarks, as the values from consequent runs have a very narrow distribution. Hovewer, real-world scenarios often have so-called long tail distribution (due to IO delays, locks, memory access latency and so on), so the average execution time cannot be trusted. The percentiles allow to include the tail of distribution into the comparison. Hovewer, it requires some preparations steps. At first, you should have enough runs to count percentiles from. The TargetCount in the config should be set to 10-20 runs at least. Second, the count of iterations for each run should not be very high, or the peak timings will be averaged. The IterationTime = 25 works fine for most cases; for long-running benchmarks the Mode = Mode.SingleRun will be the best choice. Hovewer, feel free to experiment with the config values. Third, if you want to be sure that measurements are repeatable, set the LanuchCount to 3 or higher. And the last, don't forget to include the columns into the config. They are not included by default (as said above, these are not too useful for most of the benchmarks). There're predefined StatisticColumn.P0..StatisticColumn.P100 for absolute timing percentiles and BaselineDiffColumn.Scaled50..BaselineDiffColumn.Scaled95 for relative percentiles. The sample: Run the IntroPercentiles sample. It contains three benchmark methods. First delays for 20 ms constantly. The second has random delays for 10..30 ms. And the third delays for 10ms 85 times of 100 and delays for 40ms 15 times of 100. Here's the output from the benchmark (some columns removed for brevity): Method Median StdDev Scaled P0 P50 P80 P85 P95 P100 ScaledP50 ScaledP85 ScaledP95 ConstantDelays 20.3813 ms 0.2051 ms 1.00 20.0272 ms 20.3813 ms 20.4895 ms 20.4954 ms 20.5869 ms 21.1471 ms 1.00 1.00 1.00 RandomDelays 19.8055 ms 5.7556 ms 0.97 10.0793 ms 19.8055 ms 25.4173 ms 26.5187 ms 29.0313 ms 29.4550 ms 0.97 1.29 1.41 RareDelays 10.3385 ms 11.4828 ms 0.51 10.0157 ms 10.3385 ms 10.5211 ms 40.0560 ms 40.3992 ms 40.4674 ms 0.51 1.95 1.96 Note that the 'Scaled' column kinda lies to you. The ""almost same"" RandomDelays method is actually not so performant and the seems-to-be-fastest RareDelays method is 2 times slower 15 times of 100. Also, it's very easy to screw the results with incorrect setup. For example, the same code being run with                 new Job                 {                     TargetCount = 5,                     IterationTime = 500                 } completely hides the peak values: Method Median StdDev Scaled P0 P50 P80 P85 P95 P100 ScaledP50 ScaledP85 ScaledP95 ConstantDelays 20.2692 ms 0.0308 ms 1.00 20.1986 ms 20.2692 ms 20.2843 ms 20.2968 ms 20.3097 ms 20.3122 ms 1.00 1.00 1.00 RandomDelays 18.9965 ms 0.8601 ms 0.94 18.1339 ms 18.9965 ms 19.8126 ms 19.8278 ms 20.4485 ms 20.9466 ms 0.94 0.98 1.01 RareDelays 14.0912 ms 2.8619 ms 0.70 10.2606 ms 14.0912 ms 15.7653 ms 17.3862 ms 18.6728 ms 18.6940 ms 0.70 0.86 0.92 Rules of benchmarking Use the Release build without an attached debugger Never use the Debug build for benchmarking. Never. The debug version of the target method can run 10–100 times slower. The release mode means that you should have <Optimize>true</Optimize> in your csproj file or use /optimize for csc. Also your never should use an attached debugger (e.g. Visual Studio or WinDbg) during the benchmarking. The best way is build our benchmark in the Release mode and run it with cmd. Try different environments Please, don't extrapolate your results. Or do it very carefully. I remind you again: the results in different environments may vary significantly. If a Foo1 method is faster than a Foo2 method for CLR4, .NET Framework 4.5, x64, RyuJIT, Windows, it means that the Foo1 method is faster than the Foo2 method for CLR4, .NET Framework 4.5, x64, RyuJIT, Windows and nothing else. And you can not say anything about methods performance for CLR 2 or .NET Framework 4.6 or LegacyJIT-x64 or x86 or Linux+Mono until you try it. Avoid dead code elimination You should also use the result of calculation. For example, if you run the following code: void Foo() {     Math.Exp(1); } then JIT can eliminate this code because the result of Math.Exp is not used. The better way is use it like this: double Foo() {     return Math.Exp(1); } Minimize work with memory If you don't measure efficiency of access to memory, efficiency of the CPU cache, efficiency of GC, you shouldn't create big arrays and you shouldn't allocate big amount of memory. For example, you want to measure performance of ConvertAll(x => 2 * x).ToList(). You can write code like this: List<int> list = /* ??? */; public List<int> ConvertAll() {     return list.ConvertAll(x => 2 * x).ToList(); } In this case, you should create a small list like this: List<int> list = new List<int> { 1, 2, 3, 4, 5 }; If you create a big list (with millions of elements), then you will also measure efficiency of the CPU cache because you will have big amount of cache miss during the calculation. Power settings and other applications Turn off all of the applications except the benchmark process and the standard OS processes. If you run benchmark and work in the Visual Studio at the same time, it can negatively affect to benchmark results. If you use laptop for benchmarking, keep it plugged in and use the maximum performance mode. How to run? There are several ways to run your benchmarks: Types var summary = BenchmarkRunner.Run<MyBenchmarkClass>(); var summary = BenchmarkRunner.Run(typeof(MyBenchmarkClass)); Url You can also run a benchmark directly from the internet: string url = ""<E.g. direct link to raw content of a gist>""; var summary = BenchmarkRunner.RunUrl(url); Source string benchmarkSource = ""public class MyBenchmarkClass { ...""; var summary = BenchmarkRUnner.RunSource(benchmarkSource); BenchmarkSwitcher Or you can create a set of benchmarks and choose one from command line: static void Main(string[] args) {     var switcher = new BenchmarkSwitcher(new[] {         typeof(BenchmarkClass1),         typeof(BenchmarkClass2),         typeof(BenchmarkClass3)     });     switcher.Run(args); } Also you can use the config command style to specify some config via switcher or even command line: switcher.Run(new[] { ""jobs=dry"", ""columns=min,max"" }); How it works? BenchmarkRunner generates an isolated project per each benchmark method/job/params and builds it in Release mode. Next, we take each method/job/params combination and try to measure its performance by launching benchmark process several times (LaunchCount). An invocation of the target method is an operation. A bunch of operation is an iteration. If you have a Setup method, it will be invoked before each iteration, but not between operations. We have the following type of iterations: Pilot: The best operation count will be chosen. IdleWarmup, IdleTarget: BenchmarkDotNet overhead will be evaluated. MainWarmup: Warmup of the main method. MainTarget: Main measurements. Result = MainTarget - <AverageOverhead> After all of the measurements, BenchmarkDotNet creates: An instance of the Summary class that contains all information about benchmark runs. A set of files that contains summary in human-readable and machine-readable formats. A set of plots. FAQ Question Benchmarks takes a lot of time, how I can speedup it? Answer In general case, you need a lot of time for achieving good accuracy. If you are sure that you don't have any tricky performance effects and you don't need such level of accuracy, you can create a special Job. An example: public class FastAndDirtyConfig : ManualConfig {     public FastAndDirtyConfig()     {         Add(Job.Default             .WithLaunchCount(1)     // benchmark process will be launched only once             .WithIterationTime(100) // 100ms per iteration             .WithWarmupCount(3)     // 3 warmup iteration             .WithTargetCount(3)     // 3 target iteration         );     } } Team Authors: Andrey Akinshin (maintainer), Jon Skeet, Matt Warren Contributors: Adam Sitnik, Sasha Goldshtein, and others 2013–2016 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PerfDotNet/BenchmarkDotNet"	"Powerful.NET library for benchmarking."	"true"
"Compiler"	"Bridge.NET"	"https://github.com/bridgedotnet/Bridge"	"Open Source C# to JavaScript Compiler"	"null"	"null"	"null"	"null"	"null"	"http://bridge.net/"	"null"	"542"	"62"	"94"	"GitHub - bridgedotnet/Bridge: Write modern mobile and web apps in C#. Run them anywhere in JavaScript with Bridge.NET. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 62 Star 542 Fork 94 bridgedotnet/Bridge Code Issues 214 Pull requests 6 Wiki Pulse Graphs Write modern mobile and web apps in C#. Run them anywhere in JavaScript with Bridge.NET. http://bridge.net 3,643 commits 7 branches 23 releases 22 contributors JavaScript 59.6% C# 40.1% TypeScript 0.2% CSS 0.1% Batchfile 0.0% PowerShell 0.0% JavaScript C# TypeScript CSS Batchfile PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Dia6lo-NetWebsocket Issue1148 Issue1376 bridge15 d-p-y-issueArrays i1125 master Nothing to show v1.14.0 v1.13.0 v1.12.1 v1.12.0 v1.11.2 v1.11.1 v1.11.0 v1.10.4 v1.10.3 v1.10.2 v1.10.1 v1.10.0 v1.9.0 v1.8.0 v1.7.0 v1.6.0 v1.5.0 v1.4.0 v1.3.0 v1.2.0 v1.1.0 v1.0.0 v1.0.0-beta Nothing to show New pull request Latest commit fd327b9 Jul 13, 2016 LeonidVeriga Fix [#1503] Remove `[Ready]` and add `$entryPoint: true` in sample in… … … README.md Permalink Failed to load latest commit information. .build Plugin API extention (#1491) Jun 24, 2016 .github Removal of [Ready] attribute from template Jun 28, 2016 .nuget Unify nusoec location in .build\specs and CommonAssemblyInfo.cs and N… Jan 29, 2016 Bridge Merge branch 'master' into Issue1485 Jun 28, 2016 Compiler [#1506] Logger adjustements Jun 30, 2016 Html5 Merge branch 'master' into Issue1025 Jun 20, 2016 Tests [#1507] Fix Batch3 assembly description Jul 1, 2016 Transpiled [#1485] Constructor should be prefixed by $ Jun 27, 2016 compiler/translatortests/testprojects/11/bridge/reference Update 1476 test Jun 20, 2016 packages [#947] Remove /* global Bridge */ statement from .js output Feb 15, 2016 .gitattributes Set files with the 'dat' extension to be treated as binary. [#488] Sep 22, 2015 .gitignore [#1507] Separate Batch1 tests to C# tests and Bridge issues tests -> … Jul 1, 2016 Bridge.sln [#1507] Separate Batch1 tests to C# tests and Bridge issues tests -> … Jul 1, 2016 LICENSE Update year Feb 24, 2016 README.md Fix [#1503] Remove `[Ready]` and add `$entryPoint: true` in sample in… Jul 13, 2016 appveyor.yml Change Slack channel name for AppVeyor integration May 3, 2016 README.md Bridge.NET is an open source C#-to-JavaScript Compiler. Compile your C#... Console.WriteLine(""Hello, World!""); into JavaScript console.log(""Hello, World!""); TL;DR Read the Getting Started Knowledge Base article Try Live Bridge if you want to just play Installation: Add Bridge.NET Visual Studio extension, or Use NuGet to install into a C# Class Library project (Install-Package Bridge) The Attribute Reference is important Licensed under Apache License, Version 2.0 Need Help? Bridge.NET Forums or GitHub Issues @bridgedotnet on Twitter Getting Started A great place to start if you're new to Bridge.NET is reviewing the Getting Started Knowledge Base article. The easiest place to see Bridge in action is Live Bridge. Sample The following code sample demonstrates a simple App.cs class that will run automatically on page load and prompt with an alert message. using Bridge; using Bridge.Html5;  namespace Demo {     public class App     {         public static void Main()         {             // Simple alert() to confirm it's working             Window.Alert(""Success"");         }     } } The C# class above will be compiled into JavaScript and added to /Bridge/ouput/demo.js within your project. By default, Bridge will use the Namespace name as the file name. In this case: demo.js. There are many options to control the output of your JavaScript files, and the Attribute Reference is an important Knowledge Base article to review. Bridge.define('Demo.App', {     statics: {         config: {             init: function () {                 Bridge.ready(this.main);             }         },         main: function () {             // Simple alert() to confirm it's working             window.alert(""Success"");         }     },     $entryPoint: true }); Installation A full list of installation options available at bridge.net/download/, including full support on Windows, Mac OS and Linux for Visual Studio Code and Mono Develop. Bridge for Visual Studio If you're using Visual Studio, the best way to get started is by adding the Bridge.NET for Visual Studio extension. From within Visual Studio, go to the Tools > Extensions and Updates.... From the options on the left side, be sure to select Online, then search for Bridge. Clicking Download will install Bridge for Visual Studio. After installation is complete, Visual Studio may require a restart. After installation, you will have a new Bridge.NET project type. When creating new Bridge enabled projects, select this project type. NuGet Another option is installation of Bridge into a new C# Class Library project using NuGet. Within the NuGet Package Manager, search for Bridge and click to install. Another NuGet option is installing Bridge via the NuGet Command line. Run the following command: Install-Package Bridge  More information regarding Nuget package installation for Bridge is available in the Knowledge Base. Contributing Interested in contributing to Bridge? Please see CONTRIBUTING.md. We also flag some Issues as up-for-grabs. These are generally easy introductions to the inner workings of Bridge, although are items we just haven't had time to implement. Your help is always appreciated. Testing Bridge is continually tested and the full test runner is available at http://testing.bridge.net/. Credits Bridge is developed by the team at Object.NET. Frameworks and Tools for .NET Developers. License Apache License, Version 2.0 Please see LICENSE for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bridgedotnet/Bridge"	"Open Source C# to JavaScript Compiler"	"true"
"Compiler"	"ClojureCLR"	"https://github.com/clojure/clojure-clr"	"A port of Clojure to the CLR, part of the Clojure project"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"727"	"152"	"92"	"GitHub - clojure/clojure-clr: A port of Clojure to the CLR, part of the Clojure project Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 152 Star 727 Fork 92 clojure/clojure-clr Code Pull requests 4 Wiki Pulse Graphs A port of Clojure to the CLR, part of the Clojure project 1,743 commits 5 branches 22 releases 7 contributors C# 73.1% Clojure 26.6% Other 0.3% C# Clojure Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags clojure-1.4.1 master nodlr staticlinking v1.5.0 Nothing to show clojure-1.8.0 clojure-1.8.0-beta1 clojure-1.7.0 clojure-1.7.0-beta1 clojure-1.7.0-alpha2 clojure-1.7.0-RC1 clojure-1.6.0 clojure-1.6.0-beta1 clojure-1.6.0-alpha3 clojure-1.6.0-RC1 clojure-1.5.0 clojure-1.5.0-beta1 clojure-1.5.0-RC1 clojure-1.4.1 clojure-1.4.0 clojure-1.4.0-beta1 clojure-1.4.0-alpha4 clojure-1.4.0-alpha3 clojure-1.4.0-alpha2 clojure-1.3.0 1.2.0 1.1.0 Nothing to show New pull request Latest commit 0e9285b Jul 9, 2016 dmiller Prepare for next development iteration Permalink Failed to load latest commit information. Clojure Prepare for next development iteration Jul 9, 2016 FxCop Convert from FxCop to Code Analysis Aug 22, 2015 docs Update preparing-a-release.md, again May 25, 2015 .gitignore Small mod to .gitignore Apr 18, 2015 CONTRIBUTING.md Update to Java commit 5314967 (2013.11.22): add CONTRIBUTING.md file Dec 1, 2013 Clojure.nuspec Prepare release clojure-clr-1.8.0 Jul 9, 2016 changes.md Changelog updates specific to ClojureCLR Jul 9, 2016 epl-v10.html Updated *.txt documentation files in root directory. May 29, 2009 readme.txt CLJCLR-29: Add links ClojureCLR ML, G+ community, JIRA, to the readme Jun 22, 2014 readme.txt ClojureCLR  This project is a native implementation of Clojure on the Common Language Runtime (CLR), the execution engine of Microsoft's .Net Framework.  ClojureCLR is programmed in C# (and Clojure itself) and makes use of Microsoft's Dynamic Language Runtime (DLR).   Goals:   -- Implement a feature-complete Clojure on top of CLR/DLR.  -- Stay as close as possible to the JVM implementation.  -- Have some fun.   --------------------------------------------------------------------------------------  Docs: http://clojure.org Mailing list: http://groups.google.com/group/clojure-clr Getting Started (general): http://dev.clojure.org/display/doc/Getting+Started Google+ community: https://plus.google.com/u/0/communities/106235975067046753407 Bug reports: http://dev.clojure.org/jira/browse/CLJCLR   For more information on ClojureCLR: https://github.com/clojure/clojure-clr/wiki   Installing ClojureCLR:   To just run ClojureCLR, use the binary distribution:    https://github.com/clojure/clojure-clr/wiki/Getting-binaries  For a deeper look, get a source distribution:    https://github.com/clojure/clojure-clr/wiki/Getting-source     --------------------------------------------------------------------------------------   *   ClojureCLR  *   Copyright (c) Rich Hickey. All rights reserved.  *   The use and distribution terms for this software are covered by the  *   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)  *   which can be found in the file epl-v10.html at the root of this distribution.  *   By using this software in any fashion, you are agreeing to be bound by  * 	 the terms of this license.  *   You must not remove this notice, or any other, from this software.      Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/clojure/clojure-clr"	"A port of Clojure to the CLR, part of the Clojure project"	"true"
"Compiler"	"F#"	"https://github.com/fsharp/fsharp/"	"The F# compiler, core library and tools - a functional programming language for safer, faster, better code writing."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1278"	"170"	"253"	"GitHub - fsharp/fsharp: The Open Edition of the F# compiler, core library and tools Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 170 Star 1,278 Fork 253 fsharp/fsharp Code Issues 24 Pull requests 0 Pulse Graphs The Open Edition of the F# compiler, core library and tools http://fsharp.org 3,107 commits 9 branches 80 releases 105 contributors F# 98.8% C# 0.5% OCaml 0.2% HTML 0.2% Shell 0.1% Batchfile 0.1% Other 0.1% F# C# OCaml HTML Shell Batchfile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0 dsyme-patch-1 dsyme-patch-2 fsharp4 fsharp_30 fsharp31 gh-pages integrate-13 master Nothing to show 4.0.1.1 4.0.1.0 4.0.0.4 4.0.0.3 4.0.0.2 4.0.0.1 3.1.2.5 3.1.2.4 3.1.2.3 3.1.2.2 3.1.1.32 3.1.1.31 3.1.1.30 3.1.1.29 3.1.1.28 3.1.1.27 3.1.1.26 3.1.1.25 3.1.1.24 3.1.1.23 3.1.1.22 3.1.1.21 3.1.1.20 3.1.1.19 3.1.1.18 3.1.1.17 3.1.1.16 3.1.1.15 3.1.1.14 3.1.1.13 3.1.1.12 3.1.1.11 3.1.1.10 3.1.1.9 3.1.1.8 3.1.1.7 3.1.1.6 3.1.1.5 3.1.1.4 3.1.1.3 3.1.1.2 3.1.1.1 3.1.1.0 3.1.1 3.1.0 3.0.34 3.0.33 3.0.32 3.0.31 3.0.30 3.0.29 3.0.28 3.0.27 3.0.26 3.0.25 3.0.24 3.0.23 3.0.22 3.0.21 3.0.20 3.0.19 3.0.18 3.0.17 3.0.16 3.0.15 3.0.14 3.0.13 3.0.12 3.0.11 3.0.10 3.0.9 3.0.8 3.0.7 3.0.6 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 Nothing to show New pull request Latest commit d518f91 Jun 29, 2016 dsyme committed on GitHub Merge pull request #582 from dsyme/integrate-80 … Integrate all the latest from visualfsharp\master Permalink Failed to load latest commit information. .nuget integrate visualfsharp May 9, 2016 FSharp.Compiler.Tools.Nuget remove things irrelevant to Mono Apr 19, 2016 FSharp.Core.Nuget remove duplicated nuget.exe Dec 10, 2015 dependencies/mono Add support for Xamarin.TVOS profile. Nov 18, 2015 lib/bootstrap update tools Jun 28, 2016 src fix build Jun 28, 2016 tests integrate visualfsharp master Jun 28, 2016 .gitattributes Merge branch 'master' of https://github.com/ovatsus/fsharp into ovats… Nov 9, 2013 .gitignore integrate visualfsharp master Jun 28, 2016 .travis.yml Merge pull request #558 from dsyme/integrate-6 Apr 13, 2016 BuildToolsVersion.txt update buildtools deps to dotnet/corefx@96ae037 Jun 27, 2016 CHANGELOG-fsharp.md add change notes Apr 13, 2016 CHANGELOG-visualfsharp.md integrate visualfsharp master Apr 8, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Feb 25, 2016 DotnetCLIVersion.txt let's used .NET Core RTM ( version 1.0.0-preview2-003121 ) Jun 27, 2016 ISSUE_TEMPLATE.md Update ISSUE_TEMPLATE.md Apr 4, 2016 LICENSE Clean source of the F# compiler r54075, based on the contents of the Dec 9, 2010 Makefile.in Update Makefile.in Apr 9, 2016 README.md integrate visualfsharp\master Apr 18, 2016 appveyor.ps1 remove duplicated nuget.exe Dec 10, 2015 appveyor.yml integrate visualfsharp master (2) Apr 8, 2016 autogen.sh create wrapper script for travis to call autogen.sh instead of alteri… Oct 13, 2015 build-everything.proj Added vsix project dependencies Jun 9, 2016 build.bat integrate visualfsharp\master Apr 18, 2016 config.make.in update tools Jun 28, 2016 configure.ac update tools Jun 28, 2016 fsharp.sln simplify fsharp.sln Apr 18, 2016 init-tools.cmd update buildtools deps to dotnet/corefx@96ae037 Jun 27, 2016 init-tools.sh update buildtools deps to dotnet/corefx@96ae037 Jun 27, 2016 install-sh Makefiles and public keys Dec 12, 2010 launcher.in Do not depend on Mono executables being in the PATH, but use prefix a… Oct 2, 2015 mono.snk Makefiles and public keys Dec 12, 2010 msfinal.pub Makefiles and public keys Dec 12, 2010 packages.config integrate visualfsharp master Jun 28, 2016 travis-autogen.sh meh Oct 13, 2015 README.md The Open Edition of the F# Compiler, Core Library & Tools The main purpose of this repository is to package the open editions of the F# compiler, core library and core tools for use across multiple platforms. Contributing to the F# Compiler, Core Library and Tools Most contributions to the F# compiler/library/tools go first via the repository at https://github.com/Microsoft/visualfsharp. This ensures that the main packaging of F# on Windows (the Visual F# Tools) also includes any contributions that are made, and ensures that the versions do not diverge. Contributing on Windows If you are using Windows, you should fork the https://github.com/Microsoft/visualfsharp repo and contribute directly there. Your contributions will then be merged into this repo. Contributing on Linux/OSX when using Mono If you are using Linux or OSX, you can prepare your contributions by forking this repository (the code is essentially the same). This will give you access to the cross-platform testing available from this repo. At the moment the process is: Fork this repo. Build and test using the subset of tests available in this repo. If you like, submit a PR to this repo in order to trigger an automatic Travis run, or set up a Travis hook in your fork. Seek initial review by posting an issue in this repository or https://github.com/Microsoft/visualfsharp. Make it clear you are working on Linux or OSX. Cherry-pick your changes into a pull request for https://github.com/Microsoft/visualfsharp and submit for final testing and clearance. The change will then be merged into this repo at a later point. If you don't have access to Windows in order to run final tests at step 4. If you need help, email fsharp-opensource@googlegroups.com and ask to make a final test run on Windows. Contributions specifically related to the packaging of the Open Edition should be made here. Status The master branch is for F# 4.x. The fsharp4 branch archives F# 4.0, the fsharp31 branch archives F# 3.1. To bootstrap the compiler, binaries built from an earlier version of this project are used. This codebase uses the Apache 2.0 license. Current Build Status F# Branch OSX/Linux Windows 4.0+ master 4.0 fsharp4 3.1 fsharp31 3.0 fsharp_30 NuGet Feed of FSharp.Core and FSharp.Compiler.Tools packages This repo is currently used to make two NuGet packages - FSharp.Core and FSharp.Compiler.Tools. Stable builds are available in the NuGet Gallery: http://www.nuget.org/packages/FSharp.Core and http://www.nuget.org/packages/FSharp.Compiler.Tools. The FSharp.Core NuGet package includes all of the FSharp.Core redistributables from Visual F#. In addition, they include assemblies for MonoAndroid and MonoTouch built from this repository. The FSharp.Compiler.Tools package includes the F# compiler fsc.exe, F# Interactive fsi.exe, build support, a copy of FSharp.Core used to run the tools, and related DLLs. A feed of nuget packages from builds is available from AppVeyor using the NuGet feed: https://ci.appveyor.com/nuget/fsgit-fsharp If using Paket, add the source at the top of paket.dependencies. source https://www.nuget.org/api/v2 source https://ci.appveyor.com/nuget/fsgit-fsharp  Add the dependency on FSharp.Core and run paket update. See the AppVeyor build history for a list of available versions. Here are some options for specifying the dependency: nuget FSharp.Core nuget FSharp.Core prerelease nuget FSharp.Core 3.1.2.3 nuget FSharp.Core 3.1.2.3-b208  If using NuGet Package Manager, add the source to the list of available package sources. Build Requirements Building F# on Unix-type platforms requires Mono 3.0 or higher. If you get a complaint in subsequent steps about xbuild being missing, it means you don't have Mono installed. Building on OS X requires several development tools that are not installed by default. Most can be installed via Homebrew: brew install autoconf automake pkg-config  Building on OS X also requires Xcode. If you don't want to install the full GUI development environment, the command line tools are sufficient. At a shell prompt, say: xcode-select --install  How to Build Linux and other Unix systems: The usual: ./autogen.sh --prefix=/usr make sudo make install  By default that makes optimized binaries. To make debug, use make CONFIG=debug OS X Use a prefix to your version of Mono: ./autogen.sh --prefix=/Library/Frameworks/Mono.framework/Versions/Current/ make sudo make install  By default that makes optimized binaries. To make debug, use make CONFIG=debug Windows, using msbuild Build using: build.bat  This build the proto compiler, then the library, then the final compiler. You can also build these independently using: msbuild src\fsharp-proto-build.proj ngen install ..\lib\proto\fsc-proto.exe msbuild src\fsharp-library-build.proj /p:Configuration=Release msbuild src\fsharp-compiler-build.proj /p:Configuration=Release  You can also build FSharp.Core.dll for other profiles: msbuild src\fsharp-library-build.proj /p:TargetFramework=net20 /p:Configuration=Release msbuild src\fsharp-library-build.proj /p:TargetFramework=portable47 /p:Configuration=Release msbuild src\fsharp-library-build.proj /p:TargetFramework=portable7 /p:Configuration=Release msbuild src\fsharp-library-build.proj /p:TargetFramework=portable78 /p:Configuration=Release msbuild src\fsharp-library-build.proj /p:TargetFramework=portable259 /p:Configuration=Release  msbuild src\fsharp-library-build.proj /p:TargetFramework=monodroid /p:Configuration=Release msbuild src\fsharp-library-build.proj /p:TargetFramework=monotouch /p:Configuration=Release  Change to /p:Configuration=Debug for debug binaries. Add /p:FSharpCoreBackVersion=3.0 to build a back version of FSharp.Core.dll with a version number suitable for use when building libaries that have usable with both F# 3.0 and F# 3.1 libraries. msbuild src\fsharp-library-build.proj /p:TargetFramework=net20 /p:Configuration=Release /p:FSharpCoreBackVersion=3.0 msbuild src\fsharp-library-build.proj /p:TargetFramework=net40 /p:Configuration=Release /p:FSharpCoreBackVersion=3.0 msbuild src\fsharp-library-build.proj /p:TargetFramework=portable47 /p:Configuration=Release /p:FSharpCoreBackVersion=3.0 msbuild src\fsharp-library-build.proj /p:TargetFramework=net40 /p:Configuration=Release /p:FSharpCoreBackVersion=3.0 msbuild src\fsharp-library-build.proj /p:TargetFramework=portable47 /p:Configuration=Release /p:FSharpCoreBackVersion=3.0 msbuild src\fsharp-library-build.proj /p:TargetFramework=net40 /p:Configuration=Release /p:FSharpCoreBackVersion=3.1 msbuild src\fsharp-library-build.proj /p:TargetFramework=portable7 /p:Configuration=Release /p:FSharpCoreBackVersion=3.1 msbuild src\fsharp-library-build.proj /p:TargetFramework=portable47 /p:Configuration=Release /p:FSharpCoreBackVersion=3.1 msbuild src\fsharp-library-build.proj /p:TargetFramework=portable78 /p:Configuration=Release /p:FSharpCoreBackVersion=3.1 msbuild src\fsharp-library-build.proj /p:TargetFramework=portable259 /p:Configuration=Release /p:FSharpCoreBackVersion=3.1  Windows, using xbuild (e.g. if only Mono is installed): xbuild src\fsharp-proto-build.proj xbuild src\fsharp-library-build.proj xbuild src\fsharp-compiler-build.proj  Building using xbuild does not yet lay down a Mono-ready distribution (see src/fsharp/targets.make), so should only be used for private development rather than preparing distributions. Build Note: Strong Names The FSharp.Core.dll produced is only delay-signed (Mono does not require strong names). If a strong-name signed FSharp.Core.dll is needed then use the one in lib\bootstrap\signed\.NETFramework\v4.0\4.3.0.0\FSharp.Core.dll lib\bootstrap\signed\.NETFramework\v4.0\4.3.1.0\FSharp.Core.dll  How to Install Built main compiler binaries go to lib/release/4.0 Additionally, versions of FSharp.Core for .NET 2.0, MonoAndroid, MonoTouch (Mono profile 2.1) go to lib/release/2.0 lib/release/2.1 lib/release/2.1monotouch make install sends the binaries to the prefix location, e.g. /Library/Frameworks/Mono.framework/Versions/Current/lib/mono/2.0/FSharp.Core.dll /Library/Frameworks/Mono.framework/Versions/Current/lib/mono/2.1/FSharp.Core.dll /Library/Frameworks/Mono.framework/Versions/Current/lib/mono/4.0/fsc.exe /Library/Frameworks/Mono.framework/Versions/Current/lib/mono/4.0/FSharp.Compiler.dll ... /Library/Frameworks/Mono.framework/Versions/Current/lib/mono/4.5/fsc.exe /Library/Frameworks/Mono.framework/Versions/Current/lib/mono/4.5/FSharp.Compiler.dll ... /Library/Frameworks/Mono.framework/Versions/Current/lib/mono/gac/.../FSharp.Compiler.dll /Library/Frameworks/Mono.framework/Versions/Current/lib/mono/gac/.../FSharp.Compiler.dll ...  plus some files for xbuild support /Library/Frameworks/Mono.framework/Versions/Current/lib/mono/Microsoft\ F#/v4.0/* /Library/Frameworks/Mono.framework/Versions/Current/lib/mono/Microsoft\ SDKs/F#/3.0/Framework/*  (these names are the canonical names for Microsoft.FSharp.Targets used by project files coming from Visual Studio) plus scripts /usr/bin/fsharpc   (F# compiler) /usr/bin/fsharpi   (F# Interactive)  Development Notes Submitting Pull Requests Feel free to send in-progress Pull Requests to ask for clarification or direction for a feature or task. Integrating changes from 'visualfsharp' To integrate latest changes from https://github.com/Microsoft/visualfsharp, use git remote add visualfsharp https://github.com/Microsoft/visualfsharp git pull visualfsharp master  There are certain guidelines that need to be followed when integrating changes from upstream: this repository does not undergo the QA test process that upstream does, so the tests/fsharpqa folder and all files within should be removed when merging this repository does not contain any of the Visual Studio tooling or integrations, so the vsintegration directory and all files within should be removed when merging anything referencing FSharp.LaunguageService.Compiler is a Microsoft-internal version of the open FSharp.Compiler.Service repository, and as such should be removed when merging Windows-specific update.cmd and runtests.cmd aren't used in this repository, and so should be removed when merging anything that references the Salsa testing library is used by Microsoft to test the Visual Studio integrations, and as such should be removed when merging the foremost example of the above is the root/unittests folder, which contains tests for the Visual Studio integration using Salsa, and as such should be removed when merging Continuous Integration Build A continuous integration build is set up with Travis. See above. Editing the Compiler with Visual Studio, Xamarin Studio or MonoDevelop Open all-vs2013.sln, and edit in modes Debug or Release. The compiler takes a good while to compile and that can be a bit invasive to the work flow, so it's normally better to do the actual compilation from the command line, see above. Historically it is difficult to edit the compiler with Xamarin Studio or MonoDevelop because of bugs in loading the hand-edited project files and targets used in the F# compiler build. These are generally in the process of being fixed, your mileage will vary. How to Test and Validate Linux and OSX Only a subset of the tests are currently enabled. After building and installing, run cd tests/fsharp/core ./run-all.sh  Windows See the TESTGUIDE.md for instructions for how to test on Windows. Use that repository to develop and test on Windows. History F# compiler sources as initially dropped are available from fsharppowerpack.codeplex.com. On 4 April 2014, Microsoft Open Tech published the F# compiler sources at http://visualfsharp.codeplex.com and began accepting contributions to the F# compiler/library and tools. This repository is a modified version of that. This repository uses bootstrapping libraries, tools and F# compiler. The lib/bootstrap/X.0 directories contain mono-built libraries, compiler and tools that can be used to bootstrap a build. You can also supply your own via the --with-bootstrap option. Wheezy build vagrant up vagrant ssh cd /vagrant sudo apt-get install dos2unix autoconf ./autogen.sh --prefix=/usr make sudo make install  Maintainers Tha maintainers of this repository appointed by the F# Core Engineering Group are: Tomas Petricek, Robin Neatherway with help and guidance from Don Syme, Cameron Taggart, Dave Thomas, Jo Shields, Lincoln Atkinson, Kevin Ransom and Henrik Feldt Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fsharp/fsharp/"	"The F# compiler, core library and tools - a functional programming language for safer, faster, better code writing."	"true"
"Compiler"	"FunScript"	"http://funscript.info/"	"F# to JavaScript compiler with JQuery etc. mappings through a TypeScript type provider."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"428"	"60"	"104"	"GitHub - ZachBray/FunScript: F# to JavaScript compiler with JQuery etc. mappings through a TypeScript type provider Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 60 Star 428 Fork 104 ZachBray/FunScript Code Issues 43 Pull requests 4 Pulse Graphs F# to JavaScript compiler with JQuery etc. mappings through a TypeScript type provider 484 commits 4 branches 0 releases Fetching contributors F# 99.0% Other 1.0% F# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Silverlight experiment/improved-code-gen gh-pages master Nothing to show Nothing to show New pull request Latest commit 823df83 Jan 24, 2016 alfonsogarciacaro Merge pull request #200 from MaxWilson/Examples … Update project references so that Examples will compile Permalink Failed to load latest commit information. .paket Converted from nuget to paket Jun 10, 2015 build Converted from nuget to paket Jun 10, 2015 docs/presentations Moved presentations again. May 17, 2014 examples Update project references Jan 19, 2016 src Choose should not reverse list Jan 22, 2016 tests/FunScript.Tests Fix build script Sep 6, 2015 .gitattributes Updated attributes Jun 10, 2015 .gitignore Reference packages via paket in TypeScript project Jul 10, 2015 .travis.yml Big refactor of file layout. Added new FAKE build to create and deplo… May 17, 2014 FunScript.Libraries.sln Converted from nuget to paket Jun 10, 2015 FunScript.sln Converted from nuget to paket Jun 10, 2015 LICENSE.txt Added Apache 2.0 licenCe. Oct 7, 2013 README.md Big refactor of file layout. Added new FAKE build to create and deplo… May 17, 2014 build.cmd Converted from nuget to paket Jun 10, 2015 build.fsx rename Build.fsx to lowercase build.fsx; lowercased version is refere… Sep 24, 2015 build.sh Added executable flag to build.sh Nov 3, 2015 paket.dependencies Converted from nuget to paket Jun 10, 2015 paket.lock Reference packages via paket in TypeScript project Jul 10, 2015 README.md FunScript FunScript consists of a standalone F# to JavaScript compiler library and a Type Provider to TypeScript. FunScript lets you connect to client and server APIs with Intellisense and types automagically using F# 3's Type Provider mechanism. Status: Windows: Mono: Compiler Library The compiler library generates JavaScript code that can be run in-browser or server-side inside Node.js. Simply mark F# modules to be compiled with the ReflectedDefinition attribute. The compiler library has minimal dependencies and can be run inside either Visual Studio or MonoDevelop. Contributing Please help test the compiler libary and type provider by building samples and reporting issues. More information Please see the FunScript website. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ZachBray/FunScript"	"F# to JavaScript compiler with JQuery etc. mappings through a TypeScript type provider."	"true"
"Compiler"	"IronScheme"	"https://github.com/leppie/IronScheme"	"R6RS Scheme compiler, runtime and many standard libraries"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"110"	"23"	"18"	"GitHub - leppie/IronScheme: Main repo Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 110 Fork 18 leppie/IronScheme Code Issues 6 Pull requests 0 Pulse Graphs Main repo 1,320 commits 1 branch 0 releases Fetching contributors Scheme 65.0% C# 34.2% Yacc 0.3% Lex 0.2% Batchfile 0.2% CSS 0.1% Scheme C# Yacc Lex Batchfile CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 0fdbfcf Apr 19, 2016 leppie Implement cleaner fix (thanks @jcdickinson) Permalink Failed to load latest commit information. BuildProcessTemplates Upgrade: New Version of LabDefaultTemplate.xaml. To upgrade your buil… Oct 1, 2012 IronScheme Implement cleaner fix (thanks @jcdickinson) Apr 19, 2016 .gitignore Update gitignore Jan 27, 2016 README.md Testing Feb 26, 2016 appveyor.yml Should be working now :) Feb 6, 2016 ci-artefact.cmd Create a debug artefact Feb 10, 2016 sync.sh Add sync file Oct 30, 2015 README.md IronScheme IronScheme aims to be a R6RS conforming Scheme-like implementation based on the Microsoft DLR. IronScheme implements over 99% of the R6RS specification and specified behavior. Notice: Main repo for IronScheme. Codeplex/TFS will not be be maintained anymore. You can download the latest build artefacts from the above link. Note: Previous SVN mirror has been hosed due to Codeplex SVN not working anymore. You can find the last SVN version at https://gitlab.com/leppie/IronScheme. The history is identical. Building Open the IronSchemeCore.sln file in VS2008, VS2010, VS2012, VS2013 or VS2015 Allow the project to be converted, if needed Set startup project as IronScheme.Console Set the solution profile to Release (optional, but recommended) Alternatively, the following can be done from the VS (any version 2008+) command prompt: msbuild IronSchemeCore.sln /v:m /p:TargetFrameworkVersion=v2.0 /p:Configuration=Release  or using the build.cmd batchfile in the IronScheme directory. Note This solution will only build the essentials, basically no web projects. You can also adjust the framework to your liking. Tested with 2.0, 4.0, 4.5 on the Developer Command Prompt for VS2015. Running tests After building, you can use NUnit to run IronScheme.Tests.dll in the IronScheme.Console bin folder. There is also a batch file in the IronScheme directory called test.cmd. You can pass the /verbose to the batch file to see complete output in case of failures. Note Make sure that peverify is in your PATH. The test fixtures are designed to execute in a specfic order. The tests will not take less than 6 minutes to complete. Other http://ironscheme.codeplex.com/ http://ironscheme.codeplex.com/documentation http://ironscheme.codeplex.com/discussions IRC chat Join #IronScheme on FreeNode. Notes The CLR 4 debugger is rather slow. Recommended to stick to CLR 2 .NET versions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/leppie/IronScheme"	"R6RS Scheme compiler, runtime and many standard libraries"	"true"
"Compiler"	"JSIL"	"https://github.com/sq/JSIL"	"CIL to Javascript Compiler"	"null"	"null"	"null"	"null"	"null"	"http://jsil.org/"	"null"	"1177"	"82"	"226"	"GitHub - sq/JSIL: CIL to Javascript Compiler Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 82 Star 1,177 Fork 226 sq/JSIL Code Issues 340 Pull requests 12 Wiki Pulse Graphs CIL to Javascript Compiler http://jsil.org/ 3,868 commits 4 branches 2 releases 24 contributors C# 60.7% JavaScript 37.5% HTML 1.2% CSS 0.4% C++ 0.1% Batchfile 0.1% C# JavaScript HTML CSS C++ Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags NoDynamic backends es7 master Nothing to show 0.7.6 0.7.5 Nothing to show New pull request Latest commit 9e719a6 Jul 1, 2016 kg committed on GitHub Merge pull request #998 from iskiselev/NullableUnary_997 … Fixed translation of unary operations with nullable Permalink Failed to load latest commit information. Compiler Initial .d.ts support. May 10, 2016 Corlib Nuke the Mannux demo since it requires a lot of babysitting Feb 26, 2013 Examples Actually remove submodules. Sigh, git Aug 30, 2015 JSIL.Libraries Interface method runtime dispatcher. May 27, 2016 JSIL.mscorlib Fixed JSIL.mscorlib naming. May 25, 2016 JSIL Fixed translation of unary operations with nullable (#997). Jun 30, 2016 Meta @ b185a3d Use NoDynamic Meta branch. JS-interop returns objects. Dec 15, 2015 Proxies Dynamic custom processing on translation removed. Nov 23, 2015 SimpleProject fixed pointed issues (no asm ID | non-x86 configs | JSIL copy) May 7, 2012 Tests.DCE Mono.Cecil path updated. Mar 25, 2016 Tests Fixed translation of unary operations with nullable (#997). Jul 1, 2016 Try Initial .d.ts support. May 10, 2016 Upstream Updated to latest ILSpy. Mar 25, 2016 jsil.org Documentation updates. Oct 23, 2015 .gitattributes Fixed EOL for .travis.yml. Aug 12, 2015 .gitignore Added JSIL.mscorlib project with number formatter implementation. Sep 17, 2015 .gitmodules Dead code cleanup Aug 30, 2015 .hgeol Fixed EOL for .travis.yml. Aug 12, 2015 .travis.yml Added recursive submodules init for Travis. Mar 25, 2016 JSIL.nunit Pull the method signature cache out of a static field so that it does… Apr 6, 2012 JSIL.sln Fixed build in VS through adding to sln project dependecies. Apr 29, 2016 LICENSE Add missing LICENSE file Jun 4, 2015 README.md Documentation updates. Oct 24, 2015 activate-mono.sh TravisCI compatibility Oct 26, 2015 appveyor.yml Re-enable compilation cache Aug 30, 2015 build_corlib.bat Make RunTransformsOnAllFunctions actually obey the threading setting.… Mar 7, 2013 build_demos.bat Dead code cleanup Aug 30, 2015 install-mono.sh TravisCI compatibility Oct 26, 2015 jsil.ico Updated website and added new logo Jun 7, 2011 linux-build.sh TravisCI compatibility Oct 26, 2015 run_server.bat Change the platform argument for the rpg starter kit so it builds cor… Apr 24, 2012 test_runner.html Browser test runner updated to support Translated test run. Aug 8, 2015 web.config Update test_runner code so you can host it on IIS Jul 14, 2014 README.md JSIL JSIL is a compiler that transforms .NET applications and libraries from their native executable format - CIL bytecode - into standards-compliant, cross-browser JavaScript. You can take this JavaScript and run it in a web browser or any other modern JavaScript runtime. Unlike other cross-compiler tools targeting JavaScript, JSIL produces readable, easy-to-debug JavaScript that resembles the code a developer might write by hand, while still maintaining the behavior and structure of the original .NET code. For live demos and code samples, visit the website. For help on getting started using JSILc, see the wiki. JSIL is currently in partial maintenance mode (due to time constraints on the maintainer's part), but bug reports and questions are still actively responded to. Pull requests still welcome! License Copyright 2011 K. Gadd Additional contributions by Igor Kiselev and assorted community members. License: MIT/X11 Replay/Record support & Emscripten integration sponsored by Mozilla Corporation License: MIT/X11 Acknowledgements JSIL depends upon or is based on the following open source libraries: Mono.Cecil: MIT/X11 (thanks to Jb Evain) ICSharpCode.Decompiler: MIT/X11 (developed as part of ILSpy) Mono.Options: MIT/X11 (Jonathan Pryor & Federico Di Gregorio) printStackTrace: Public Domain (Eric Wendelin and others) XAPParse: Microsoft Public License/Ms-PL (Andy Patrick) webgl-2d: MIT (Corban Brook, Bobby Richter, Charles J. Cliffe, and others) S3TC DXT1 / DXT5 Texture Decompression Routines (Benjamin Dobell) The Upstream folder also contains: Win32 build of the Spidermonkey command-line JavaScript shell. It is built from sources provided by the Mozilla project (http://www.mozilla.org/). This build is used for running JavaScript automated tests. A specific version of the NUnit.Framework assembly, used by the automated tests. This ensures that they compile correctly regardless of which version of NUnit you have installed. Win32 build of PNGQuant for optimizing PNG files. (Jef Poskanzer, Greg Roelofs) Mono ILASM for CIL tests execution The following NuGet packages are used: Grunt Node NPM NUnit NUnit Test Adapter FSharp CodeDom Logo by John Flynn. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sq/JSIL"	"CIL to Javascript Compiler"	"true"
"Compiler"	"Mono-basic"	"https://github.com/mono/mono-basic"	"Visual Basic Compiler and Runtime"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"38"	"31"	"23"	"GitHub - mono/mono-basic: Visual Basic Compiler and Runtime Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 38 Fork 23 mono/mono-basic Code Pull requests 1 Pulse Graphs Visual Basic Compiler and Runtime http://www.mono-project.com/VisualBasic.NET_support 1,114 commits 63 branches 60 releases Fetching contributors Visual Basic 83.3% C# 15.8% Other 0.9% Visual Basic C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags atsushi-200810 mainsoft/cust_1_2.2 mainsoft/gh2.2_customer2 mainsoft/gh2.2_customer3 mainsoft/gh2.2_customer4 mainsoft/gh2.2_customer5 mainsoft/gh2.2 mainsoft/gh2.5_customer2 mainsoft/gh3.0preview1 mainsoft/gh20_Customer2 mainsoft/gh20 mainsoft/solutions_2_2 master messaging-2008 mono-1-1-17 mono-1-1-18 mono-1-2-1 mono-1-2-2 mono-1-2-3 mono-1-2-4 mono-1-2-5 mono-1-2-6 mono-1-9 mono-2-0 mono-2-2 mono-2-4-0 mono-2-4-2 mono-2-4-3 mono-2-4 mono-2-6-4 mono-2-6 mono-2-8 mono-2-10 moon-2-99-0-1 moon-2-99-0-2 moon-2-99-0-3 moon-2-99-0-4 moon-2-99-0-5 moon-2-99-0-6 moon-2-99-0-7 moon-2-99-0-8 moon-3-99-0-1 moon-3-99-0-2 moon/moon-2-0 moon/1.9.0 moon/1.9.1 moon/1.9.2 moon/1.9.3 moon/1.9.4 moon/1.9.5 moon/1.9.6 moon/1.99.1 moon/1.99.2 moon/1.99.3 moon/1.99.4 moon/1.99.5 moon/1.99.6 moon/1.99.7 moon/1.99.8 moon/1.99.9 rhowell/1.9.1 rhowell/1.9.4 rolf/cecil-vbnc Nothing to show moon/2.2 moon/2.1 moon/2.0 moon/1.99.6 moon/1.99.2 moon/1.99.1.1 moon/1.99.1 moon/1.9.2 moon/1.9.1 moon/1.9.0 moon/moon-2-3 mono-2-6 mono-2-6-rc1 mono-2-6-p1 mono-2-6-7 mono-2-6-4 mono-2-6-3 mono-2-6-1 mono-2-4 mono-2-4-p1 mono-2-4-3 mono-2-4-3-1 mono-2-4-2 mono-2-4-2-rc2 mono-2-4-2-rc1 mono-2-4-2-p2 mono-2-4-2-p1 mono-2-4-2-3 mono-2-4-2-3-rc3 mono-2-4-2-3-rc2 mono-2-4-2-3-rc1 mono-2-4-2-2 mono-2-4-2-1 mono-2-2 mono-2-2-rc1 mono-2-2-p3 mono-2-2-p2 mono-2-2-p1 mono-2-0 mono-2-0-rc3 mono-2-0-rc2 mono-2-0-rc1 mono-2-0-p2 mono-2-0-p1 mono-2-0-1 mono-2-0-1-rc1 mono-1-9 mono-1-9-p2 mono-1-2-6 mono-1-2-5 mono-1-2-4 mono-1-2-3 mono-1-2-3-1 mono-1-2-2 mono-1-2-1 mono-1-1-18 mono-1-1-17 4.0 3.8 2.8 Nothing to show New pull request Latest commit 6828fe6 Jul 15, 2016 hifi committed with rolfbjarne Swap Versioned.CallByName and Interaction.CallByName bodies (#9) … Fixes compiler magic caused side effect where Versioned.CallByName ends up in recursion when it's being called. Permalink Failed to load latest commit information. build Remove uses of gmcs since we do not include it anymore. Feb 26, 2015 class New bootstrap, following PR 8 May 6, 2015 man vbnc: Update the man page with information about vbnc2 and /sdkpath. Jan 10, 2011 scripts Fix vbnc2 sdk path Feb 26, 2016 tools Make the moonlight build less fragile Feb 17, 2011 vbnc No more NOTES.txt Apr 27, 2015 vbruntime Swap Versioned.CallByName and Interaction.CallByName bodies (#9) Jul 15, 2016 .gitattributes Use LF as newline for tests.xml Sep 29, 2012 .gitignore Build a 4.5 profile too, and make it the default. Oct 29, 2012 ChangeLog 2010-06-11 Rolf Bjarne Kvinge <RKvinge@novell.com> Jun 11, 2010 LICENSE Add Jan 7, 2008 Makefile Build a 4.5 profile too, and make it the default. Oct 29, 2012 README touch for monobuild. Aug 5, 2008 configure Bump version to 4.4 Feb 26, 2016 install-sh * rules.make: revert to using automake's install-sh (ie: sunos Mar 15, 2007 mkinstalldirs Add Jan 12, 2007 mono-basic.spec.in Fix spec file Sep 4, 2014 README  Mono Basic: Visual Basic Compiler and Runtime.  = Building =  	To configure this module, first configure it, like this:  		./configure [--prefix=/path]  	To build it, use:  		make  	To install the compiler and runtime, use:  		make install  = Package =  == Visual Basic Runtime ==  == Visual Basic Compiler ==   Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mono/mono-basic"	"Visual Basic Compiler and Runtime"	"true"
"Compiler"	"Nemerle"	"https://github.com/rsdn/nemerle"	"Nemerle is a high-level statically-typed programming language for the.NET platform. It offers functional, object-oriented and imperative features. It has a simple C#-like syntax and a powerful meta-programming system."	"null"	"null"	"null"	"null"	"null"	"http://nemerle.org/About"	"null"	"362"	"48"	"70"	"GitHub - rsdn/nemerle: Nemerle language. Main repository. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 48 Star 362 Fork 70 rsdn/nemerle Code Issues 204 Pull requests 1 Wiki Pulse Graphs Nemerle language. Main repository. http://nemerle.org 9,966 commits 16 branches 4 releases 53 contributors Nemerle 52.1% C# 34.4% JavaScript 7.0% HTML 3.8% Groff 0.8% Makefile 0.4% Other 1.5% Nemerle C# JavaScript HTML Groff Makefile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags CodingUnit_work DefaultParameters Highlighting MatchTyping-2 MatchTyping MoveIntegrationOnNewApi PegUpdate ResourcesSupport UnixSupport VladD2_work_2 cci hardcase_work ikvm master sharpdevelop-remove-completion v1.1 Nothing to show v1.2 v1.1b v1.0 v0.0 Nothing to show New pull request Latest commit a300086 Apr 4, 2016 VladD2 Fix bugs: 1. Fix ExternalTypeInfo.SuperClass(). 2. Fix incorrect use … … …of SuperClass(). 3. FixNormalizeSupertypes(). Permalink Failed to load latest commit information. ExternalDependences Create NuGet packages: Nemerle (includes PEG runtime and Diff) and Ne… Sep 25, 2015 Linq Merge pull request #589 from kskalski/master Dec 15, 2013 VsIntegration Add OpenBrace and CloseBrace fields to token groups. Jun 5, 2014 boot-4.0 Update boot to compile on Unix. May 15, 2014 boot Update boot to compile on Unix. May 15, 2014 doc [doc] Add pic Jan 30, 2016 lib GetEnumerator() implemented for LightList. Jun 23, 2015 macros Refactoring extension method registering. Sep 15, 2015 misc Add VS2015 to PkgDefPatcher Aug 11, 2015 ncc Fix bugs: 1. Fix ExternalTypeInfo.SuperClass(). 2. Fix incorrect use … Apr 4, 2016 snippets remove GC.Collect() from Nemerle.Completion2.Engine.BuildTypesTreeImp… Feb 22, 2016 tools Fix GetGitTagRevision MSBuild task. Apr 17, 2015 .gitattributes addind gitattributes Jul 10, 2011 .gitignore Correct version for VisualStudio integration. Nov 12, 2014 .gitmodules Remove wix38 submodule Aug 11, 2015 AUTHORS First version of the Code Completion Engine. Type Tree already works,… Aug 12, 2005 Build-3.5.cmd Revert ""Improve build scripts for those who don't have Framework 32-b… Aug 6, 2013 Build-4.0.cmd Revert ""Improve build scripts for those who don't have Framework 32-b… Aug 6, 2013 Build-Mono.sh Remove NemerleAll-Mono.nproj. May 15, 2014 BuildInstallerFast-4.cmd Revert ""Improve build scripts for those who don't have Framework 32-b… Aug 6, 2013 BuildInstallerFast.cmd Revert ""Improve build scripts for those who don't have Framework 32-b… Aug 6, 2013 BuildInstallerFull-4.cmd Revert ""Improve build scripts for those who don't have Framework 32-b… Aug 6, 2013 BuildInstallerFull.cmd Revert ""Improve build scripts for those who don't have Framework 32-b… Aug 6, 2013 BuildQuick-ncc-4.cmd Revert ""Improve build scripts for those who don't have Framework 32-b… Aug 6, 2013 BuildTest-4.cmd Revert ""Improve build scripts for those who don't have Framework 32-b… Aug 6, 2013 BuildTest.cmd Revert ""Improve build scripts for those who don't have Framework 32-b… Aug 6, 2013 COPYRIGHT Update (c) notices. Please add 2005 during next commits. Jan 8, 2005 CleanUp.cmd Update DevBuildQuick-VS201x.cmd Jan 16, 2016 DevBuild2Stage.cmd Revert ""Improve build scripts for those who don't have Framework 32-b… Aug 6, 2013 DevBuild2StageWithTests-4.cmd Fix deployment of IDE extension during installer build. Oct 9, 2014 DevBuild2StageWithTests.cmd Revert ""Improve build scripts for those who don't have Framework 32-b… Aug 6, 2013 DevBuildForCommit-4.cmd Fix deployment of IDE extension during installer build. Oct 9, 2014 DevBuildForCommit.cmd Revert ""Improve build scripts for those who don't have Framework 32-b… Aug 6, 2013 DevBuildQuick-VS2010.cmd Add CleanUp to DevBuildQuick-VS2010.cmd and DevBuildQuick-VS2012.cmd Jan 30, 2016 DevBuildQuick-VS2012.cmd Add CleanUp to DevBuildQuick-VS2010.cmd and DevBuildQuick-VS2012.cmd Jan 30, 2016 DevBuildQuick-VS2013.cmd Update DevBuildQuick-VS201x.cmd Jan 16, 2016 DevBuildQuick-VS2015.cmd Update DevBuildQuick-VS201x.cmd Jan 16, 2016 DevBuildQuick-ncc-VS2010.cmd Redesigning build sequence. Aug 15, 2014 DevBuildQuick-ncc-VS2012.cmd Redesigning build sequence. Aug 15, 2014 DevBuildQuick-ncc-VS2013.cmd Redesigning build sequence. Aug 15, 2014 DevBuildQuick-ncc.cmd Revert ""Improve build scripts for those who don't have Framework 32-b… Aug 6, 2013 DevBuildQuick.cmd Revert ""Improve build scripts for those who don't have Framework 32-b… Aug 6, 2013 DevBuildQuickWithTests-4.cmd Fix deployment of IDE extension during installer build. Oct 9, 2014 DevBuildQuickWithTests.cmd Revert ""Improve build scripts for those who don't have Framework 32-b… Aug 6, 2013 GacReg-4.0.cmd Add GacReg-4.0.cmd Oct 24, 2013 GacReg-4.5.cmd Add cmd-s Oct 18, 2013 GacReg.cmd Add cmd-s Oct 18, 2013 INSTALL Remove binary installation stuff. This is *source* tarball. Mar 31, 2005 License.rtf Update license. Oct 22, 2013 Makefile Add --tv to Makefile, disable outdated options and unneeded checkings May 29, 2014 NEWS [Doc] Fixes error in NEWS Feb 6, 2011 Nemerle-2005.sln [Compiler] Jun 30, 2010 Nemerle-2008.sln [Compiler] Fix get-only autoproperty typing. Jun 20, 2011 Nemerle-2010.sln [Compiler] Add solution for VS2010. Jul 16, 2012 Nemerle-2012.sln [VS2012] Initial commit for VS2012 support. Aug 12, 2012 Nemerle.Compiler.nproj Add cache to ExprWalker. Oct 29, 2013 Nemerle.Compiler.nuspec Remove .net version specification from nuget packages. Sep 28, 2015 Nemerle.MSBuild.Tasks.csproj Remove warning in build for .NET 4.5 and 4.5.1 Aug 14, 2013 Nemerle.Macros.nproj making VS2013 integration to work on 4.5.1 framework Aug 7, 2013 Nemerle.XBuild.Tasks.csproj [Mono] Fixing build for mono-4.0 target platform Mar 14, 2012 Nemerle.build Wix package fix for x64 Jul 12, 2007 Nemerle.nproj Fix build for CLR 2.0. Jul 16, 2013 Nemerle.nuspec Remove .net version specification from nuget packages. Sep 28, 2015 NemerleAll.nproj Display SDKBin in NemerleAll.nproj Jan 25, 2016 NemerleAllTest.cmd 1. Added msbuild scripts to build compiler, tools, vsintegration, she… Jul 23, 2008 README Better formatting Feb 25, 2014 README.md Update README.md Jan 30, 2016 Reg-bins-2.cmd [VS2010] [VS2008] New Nemerle binaries path calculation algorithm. Cl… Oct 12, 2011 Reg-bins-VS2010.cmd Redesigning build sequence. Aug 15, 2014 Reg-bins-VS2012.cmd Swap file names. Nov 6, 2014 Reg-bins-VS2013.cmd Swap file names. Nov 6, 2014 Reg-bins-VS2015.cmd Add butch files to build Nemerle for .Net 4.6.1 (VS 2015) Dec 17, 2015 Reg-bins.cmd [VS2010] [VS2008] New Nemerle binaries path calculation algorithm. Cl… Oct 11, 2011 Reg-boot-4.0.cmd Closes #402. Updates boots. Aug 27, 2012 Reg-boot.cmd Do not ever try to set the errorlevel environment variable, as it hid… Mar 1, 2008 Tests.nproj [Compiler] Fix build for .Net 4.5, utilize TargetFrameworkVersion=v4.5 . Aug 16, 2012 Tools.sln [Tools] Adds icon to nemish. Apr 25, 2010 configure Add --tv to Makefile, disable outdated options and unneeded checkings May 29, 2014 ncc.nproj Revert ""Add documentation file for debug build."" Sep 4, 2012 ncc32.nproj Revert ""Add documentation file for debug build."" Sep 4, 2012 ncc64.nproj Revert ""Add documentation file for debug build."" Sep 4, 2012 README.md What Is It Nemerle is a high-level statically-typed programming language for the .NET platform. It offers functional, object-oriented and imperative features. It has a simple C#-like syntax and a powerful meta-programming system. Features that come from the functional land are variants, pattern matching, type inference and parameter polymorphism (aka generics). The meta-programming system allows great compiler extensibility, embedding domain specific languages, partial evaluation and aspect-oriented programming. To find out more, please visit: http://nemerle.org/ Quick sample Hello world Create hello.n: using System.Console;  WriteLine(""Hello world"") Compile and run ""C:\Program Files\Nemerle\ncc.exe"" hello.n /out:hello.exe hello.exe Will output Hello world Install Windows Install latest msi package from http://nemerle.org/ Linux, Mono Download latest binary package from http://nemerle.org and export Nemerle=/path/to/binaries/extracted How to build Clone with all submodules: git clone --recursive git://github.com/rsdn/nemerle.git If you have a clone already: git pull --recurse-submodules Windows For Development: Nemerle build process (for Nemerle developers) For Installer: Run BuildInstallerFull(fx-version).cmd depending on required .NET version. Installer will be placed in bin/Release/net-(fx-version)/Installer. Note: You can also use BuildInstallerFast(fx-version).cmd to build installer without running tests. Note: For building Visual Studio bindings you need VSSDK and administrative rights. Linux Nemerle can bootstrap itself on Mono. Generic line: xbuild NemerleAll-Mono.nproj /p:TargetFrameworkVersion=v(3.5 or 4.0 or 4.5 or 4.5.1) /p:Configuration=Release(or Debug) /t:Stage4(1 - 4) /tv:4.0(Needed for framework 4.0 and above) Release 3.5: xbuild NemerleAll-Mono.nproj /p:TargetFrameworkVersion=v3.5 /p:Configuration=Release /t:Stage4 Debug 4.0: xbuild NemerleAll-Mono.nproj /p:TargetFrameworkVersion=v4.0 /p:Configuration=Debug /t:Stage4 /tv:4.0 What about IDE? Visual Studio 2008/2010/2012/2013-preview integration installed by Nemerle installer Nemerle Studio is a free IDE based on Visual Studio Shell (Isolated mode) installed by Nemerle installer if VS Shell was installed Sharp Develop 3.0 addin can be builded manually. See snippets/sharpdevelop/ReadMe.txt See Vim, Emacs, Kate and other editors syntax support in the 'misc' folder Repository structure Nemerle compiler sources (ncc/), Nemerle Documentation (doc/), standard Nemerle library (lib/), standard Nemerle macros (macros/), some examples of Nemerle programs (snippets/), a few useful tools (e.g. synatx highlighting modes) (misc/), binary Nemerle compiler needed to compile itself (boot/, boot-4.0/). Nemerle realted tools (e.g. relector addin) (tools/) Visual Studio 2008 integration (VsIntegration/) Contacts Nemerle forum: http://groups.google.com/group/nemerle-en Nemerle Russian forum: http://rsdn.ru/forum/nemerle/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rsdn/nemerle"	"Nemerle is a high-level statically-typed programming language for the.NET platform. It offers functional, object-oriented and imperative features. It has a simple C#-like syntax and a powerful meta-programming system."	"true"
"Compiler"	"Netjs"	"https://github.com/praeclarum/Netjs"	".NET to TypeScript and JavaScript compiler. Portable Class Libraries work great for this. You can even pass EXEs."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"537"	"64"	"63"	"GitHub - praeclarum/Netjs: .NET to TypeScript and JavaScript compiler Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 64 Star 537 Fork 63 praeclarum/Netjs Code Issues 16 Pull requests 2 Pulse Graphs .NET to TypeScript and JavaScript compiler 58 commits 1 branch 0 releases Fetching contributors C# 86.1% TypeScript 13.5% Other 0.4% C# TypeScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 6dbad4d Dec 31, 2015 praeclarum Merge pull request #20 from ZaneDubya/master … Some small additions to mscorlib. Permalink Failed to load latest commit information. Dependencies Fix file modes Mar 26, 2014 Images Updated the info graphic Mar 26, 2014 Minify Added custom JavaScript minifier Apr 2, 2014 Netjs Add reference to System.Drawing Jun 1, 2015 .gitignore Beginning work on NPM package Jun 12, 2014 LICENSE.txt Added MIT License (Fixes #9) Jun 12, 2014 Makefile Added Philosophy and History sections to README. Added sample. Mar 31, 2014 Netjs.sln Initial commit Mar 26, 2014 README.md Update README.md Feb 20, 2015 mscorlib.ts Some small additions to mscorlib. Jun 22, 2015 netjs.sh Added shell script for Mac Jun 12, 2014 package.json Beginning work on NPM package Jun 12, 2014 sample.cs Added Philosophy and History sections to README. Added sample. Mar 31, 2014 sample.html Added Philosophy and History sections to README. Added sample. Mar 31, 2014 README.md Netjs Netjs is a .NET to TypeScript and JavaScript compiler. It uses multiple stages to produce JavaScript for your web apps. You start by compiling whatever code you want into its own assembly. Portable Class Libraries work great for this, but it really doesn't matter. You can even pass EXEs. netjs Library.dll  This produces a TypeScript file. You can use this file as is if the rest of your app is written in TypeScript. If you want JavaScript (with no dependencies), then pass this file along with a tiny mscorlib to the TypeScript compiler: tsc -t ES5 mscorlib.ts Library.ts --out Library.js  You can now include Library.js in any app because it is fully linked (you will get build errors if anything is missing). <script src=""Library.js"" type=""text/javascript""></script>  And that's it. You can write apps and reuse the portable parts in web apps! Installation Install Netjs Download it: git clone https://github.com/praeclarum/Netjs.git  Mac sudo make install  This will install a soft link called netjs in /usr/bin to the script netjs.sh. Windows msbuild  Netjs.exe will be built in Netjs\bin\Debug. You can copy this executable to someplace in your PATH to make it readily available. Install Node http://nodejs.org/download/ Node is needed by the TypeScript compiler. Install TypeScript sudo npm install -g typescript  Compiling Code Netjs works with .NET assemblies built with any compiler ([limitations][Limitations] not withstanding). Compile to TypeScript netjs Library.dll  This will output a TypeScript file named Library.ts containing all the code from Library.dll and any other assemblies referenced in its directory. Compile to JavaScript tsc -t ES5 mscorlib.ts Library.ts --out Library.js   This compiles the library code along with a small implementation of mscorlib. The files are merged and output as a single JavaScript file Library.js. Philosophy [History][] is filled with other IL to JS compilers, why Netjs? Because I am not happy with the JavaScript generated by current solutions. The best solutions currently generate a lot of code in an attempt to maintain all the finer points of .NET semantics. The philosophy of Netjs is that .NET and JavaScript's semanantics are close enough that idiomatic JavaScript can be generated from any .NET library. Sure we have to work around some of .NET's features, but the majority of code should be clean JavaScript. Well, that's almost true - JavaScript's idioms don't exactly match .NET's. However, TypeScript's come a lot closer. For this reason, Netjs leverages the TypeScript compiler. This also performs a great ""first unit test"" on the generated code because the TypeScript compiler is very strict and is good at catching errors. When I declare a class with properties in C#, class Person {     public DateTime DateOfBirth { get; set; }     public int Age {         get {             var now = DateTime.Now;             return (new DateTime (dob.Year,now.Month,now.Day) >= dob) ?                  now.Year - dob.Year :                  now.Year - dob.Year - 1;         }     } }  The code generated should be idiomatic JavaScript. And it is: var Person = (function (_super) {     __extends(Person, _super);     function Person() {         _super.call(this);         this.DateOfBirth = null;     }     Object.defineProperty(Person.prototype, ""Age"", {         get: function () {             var now = DateTime.Now;             var flag = DateTime.op_GreaterThanOrEqual(new DateTime(this.DateOfBirth.Year, now.Month, now.Day), this.DateOfBirth);             return (!flag) ? (now.Year - this.DateOfBirth.Year - 1) : (now.Year - this.DateOfBirth.Year);         },         enumerable: true,         configurable: true     });     return Person; })(NObject);  There's a tiny wrapper placed around the class definition that is typical of JavaScript code avoiding name conflicts. There is the use of a tiny __extends function that establishes a class hierarchy using JavaScript's prototype chain. The rest is standard JavaScript. I want to make life easier for the machine by generating clean idiomatic code, but I also want it to be easier for us developers. When it comes time to use the Person class from JavaScript, that code should also be clean and idiomatic: <script>     var p = new Person();     p.DateOfBirth = new DateTime(1980, 7, 23);     document.getElementById(""age"").textContent = p.Age; </script>  History Netjs is not the first project that compiles .NET IL to JavaScript. It is, in fact, my second attempt at such an app. The first worked, but wasn't good enough for release. Microsoft built their own named Project V. It was glorious, as was the amount of JavaScript it created. ""Hello world"" generated gigabytes of JavaScript. Serisously, I once calculated that the heat death of the universe would occur before it had finished outputting a foreach loop. You see, the JavaScript it output rigorously obeyed .NET semantics - it was as if a virtual machine vomitted all over your code. Glorious. Anyway, Microsoft cancelled the project. Then the world was blessed with JSIL. This is Project V done right. It's still a virtual machine vomitting all over your code, but it's a clean nice kind of vomit that is measured in megabytes instead of gigabytes. It's powerful enough to compile the BCL and MonoGame - a truly powerful compiler. It's going to generate a lot code and you're might end up with a loading screen, but it does its job well. Limitations Namespaces are ignored mscorlib.ts is a tiny subset of the full BCL Overloaded methods generally work, but have trouble with: One overload being virtual and another not (it hurts my head trying to get this to work) Overloads that have the same argument count and accept values that can be null (runtime type checking is used) Overloaded constuctors that call different base constructors probably don't work Async does not work Gotos only sometimes work Regexes have some problems: Named groups don't work (we rely on the browser's regex implementation) Match Group Index only works if you capture everything Integer casts with the expectation of performing a Truncate operation don't work () Seriously, watch it with those overloads If any of these bother you, then please go use JSIL. Thank you! Netjs owes the majority of its intelligence to Mono.Cecil, NRefactory, and ILSpy's decompiler. Without these projects, Netjs would not exist. Thank you! License The MIT License (MIT) Please see LICENSE.txt for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/praeclarum/Netjs"	".NET to TypeScript and JavaScript compiler. Portable Class Libraries work great for this. You can even pass EXEs."	"true"
"Compiler"	"Roslyn"	"https://github.com/dotnet/roslyn"	"The.NET Compiler Platform (""Roslyn"") provides open-source C# and Visual Basic compilers with rich code analysis APIs. It enables building code analysis tools with the same APIs that are used by Visual Studio."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5839"	"854"	"1392"	"GitHub - dotnet/roslyn: The .NET Compiler Platform (""Roslyn"") provides open-source C# and Visual Basic compilers with rich code analysis APIs. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 854 Star 5,839 Fork 1,392 dotnet/roslyn Code Issues 2,905 Pull requests 118 Wiki Pulse Graphs The .NET Compiler Platform (""Roslyn"") provides open-source C# and Visual Basic compilers with rich code analysis APIs. 16,812 commits 50 branches 45 releases 164 contributors C# 57.0% Visual Basic 43.0% PowerShell 0.0% Batchfile 0.0% Groovy 0.0% Shell 0.0% C# Visual Basic PowerShell Batchfile Groovy Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags MonoGac cifornewbranches crosscutting/lightBulbProgress crosscutting/removeOrganize demos/compiler dev15-preview-4 features/AnnotatedTypes features/NullableReferenceTypes features/constVar features/extensionEverything features/ioperation features/local-functions features/multiVar features/openGenericNameInNameof features/outvar features/patterns features/privateProtected features/records features/ref-returns features/source-generators features/tasklike features/test-impact features/tuples features/typeswitch features/vbTuples future-stabilization future internal-hotfix-20160120 master microupdate netstd perf-run portable-pdb pr-templates preview releases/Dev14CTP5 releases/Dev14CTP6 releases/Dev14Preview releases/VS2015RC releases/VS2015 revert-8223-formatsymbol revert-8911-Revert7510 revert-9017-askmode revert-9498-revert-9017-askmode revert-9791-csi-stderr revert-11275-reasons revert-12492-sign runnerutil-paths stabilization update3 Nothing to show version-2.0.0-beta3 version-2.0.0-beta1 version-1.3.2 version-1.3.1 version-1.3.0 version-1.3.0-beta1-20160429-01 version-1.2.2 version-1.2.1 version-1.2.0 version-1.2.0-beta1-20160108-01 version-1.2.0-beta version-1.2.0-beta-20151211-01 version-1.1.1 version-1.1.0 version-1.1.0-rc1-20151109-01 version-1.0.0 version-1.0.0-beta1-20141031-01 toolset_5 toolset_3 toolset_2 toolset_1_1 toolset_1 Visual.Studio.2015.Update.1.RC Visual.Studio.2015.Update.1.CTP Visual-Studio-2015 Visual-Studio-2015-Update-3 Visual-Studio-2015-Update-3-Micro-Update-1 Visual-Studio-2015-Update-2 Visual-Studio-2015-Update-2-RC Visual-Studio-2015-Update-2-Micro-Update-3 Visual-Studio-2015-Update-2-Micro-Update-1 Visual-Studio-2015-Update-1 Visual-Studio-2015-Update-1-RC Visual-Studio-2015-Update-1-CTP Visual-Studio-2015-RC Visual-Studio-2015-Preview Visual-Studio-2015-CTP-6 Visual-Studio-2015-CTP-5 Visual-Studio-15-Preview Visual-Studio-15-Preview-3 VS.Toolset.Roslyn.1.1.0-beta1-20150727-01 VS.Tools.X86.Managed.V45.1.0.150513.2 Oss.Scan.2015.03.13 Oss.Scan.2013.03.13 NetFx.Toolset.150729 Nothing to show New pull request Latest commit f83061a Jul 15, 2016 tannergooding committed on GitHub Merge pull request #12521 from KevinH-MS/master … Add extra logging to invocation of ibcmerge... Permalink Failed to load latest commit information. .github Update ISSUE_TEMPLATE.md Feb 18, 2016 build Merge pull request #12521 from KevinH-MS/master Jul 15, 2016 docs Merge remote-tracking branch 'dotnet/master' into merge-master Jul 7, 2016 src Fix a typo Jul 15, 2016 .editorconfig .editorconfig: Don't set indent_size for all files Nov 20, 2015 .gitattributes Add comment explaining gitattributes change Mar 10, 2016 .gitignore Download NuGet.exe instead of having it checked in Jun 29, 2016 BuildAndTest.proj Merge from future into features/patterns Apr 1, 2016 Compilers.sln Move Microsoft.DiaSymReader.PortablePdb out of Roslyn repo Jul 6, 2016 CrossPlatform.sln Move Microsoft.DiaSymReader.PortablePdb out of Roslyn repo Jul 7, 2016 License.txt Include the actual license text. Feb 5, 2015 Makefile Download NuGet.exe on Linux / Mac Jun 29, 2016 NuGet.Config Fix IBCMerge Issues (#12520) Jul 14, 2016 README.md Update README.md Jul 14, 2016 Restore.cmd Properly restore packages for the Roslyn SDK Jul 4, 2016 Roslyn.sln Merge pull request #12445 from tmat/CDIRefactoring Jul 13, 2016 cibuild.cmd Tweak how we specify versions in VSL.Versions.targets Jul 1, 2016 cibuild.sh Remove retry around Make Mar 17, 2016 dependencies.xml List versions of all dependencies in Dependencies.props Jul 7, 2016 netci.groovy Move last custom MicroBuild step to Roslyn repo Jul 12, 2016 README.md Welcome to the .NET Compiler Platform (""Roslyn"") Windows - Unit Tests Debug x86 Debug x64 Release x86 Release x64 Determinism master (2.0 Preview 4) Linux/Mac - Unit Tests Linux Mac OSX master (2.0 Preview 4) Roslyn provides open-source C# and Visual Basic compilers with rich code analysis APIs. It enables building code analysis tools with the same APIs that are used by Visual Studio. Download C# and Visual Basic Want to start developing in C# and Visual Basic? Download Visual Studio 2015, which has the latest features built-in. There are also prebuilt Azure VM images available with VS 2015 already installed. To install the latest release without Visual Studio, run one of the following nuget command lines: nuget install Microsoft.Net.Compilers   # Install C# and VB compilers nuget install Microsoft.CodeAnalysis    # Install Language APIs and Services  To get the latest ""preview"" drop, published about once per month, add the -pre switch to the nuget commands. Source code Clone the sources: git clone https://github.com/dotnet/roslyn.git Enhanced source view, powered by Roslyn Building, testing and debugging the sources Get started Tutorial articles by Alex Turner in MSDN Magazine Use Roslyn to Write a Live Code Analyzer for Your API Adding a Code Fix to your Roslyn Analyzer Roslyn Overview API Changes between CTP 6 and RC Samples and Walkthroughs Documentation Analyzer documentation Syntax Visualizer Tool Syntax Quoter Tool Roadmap Language Design Notes FAQ Also take a look at our Wiki for more information on how to contribute, what the labels on issue mean, etc. Contribute! Some of the best ways to contribute are to try things out, file bugs, and join in design conversations. How to Contribute Pull requests: Open/Closed Looking for something to work on? The list of up for grabs issues is a great place to start. This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. .NET Foundation This project is part of the .NET Foundation along with other projects like the class libraries for .NET Core. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dotnet/roslyn"	"The.NET Compiler Platform (""Roslyn"") provides open-source C# and Visual Basic compilers with rich code analysis APIs. It enables building code analysis tools with the same APIs that are used by Visual Studio."	"true"
"Compiler"	"VisualFSharp"	"https://github.com/Microsoft/visualfsharp"	"The Visual F# compiler and tools"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"778"	"148"	"198"	"GitHub - Microsoft/visualfsharp: The Visual F# compiler and tools Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 148 Star 778 Fork 198 Microsoft/visualfsharp Code Issues 278 Pull requests 40 Wiki Pulse Graphs The Visual F# compiler and tools 2,285 commits 4 branches 15 releases 67 contributors F# 85.0% C# 9.2% Visual Basic 4.3% Batchfile 0.7% Perl 0.6% OCaml 0.1% Other 0.1% F# C# Visual Basic Batchfile Perl OCaml Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fsharp4 master roslyn vs2015 Nothing to show V4.0.Update2.Preview-12.18.2015 V4.0.Update2.Preview-12.16.2015 V4.0.Update1.Preview-10.13.2015 V4.0.Update1.Preview-10.03.2015 V4.0.Update1.Preview-09.23.2015 V4.0.Update1.Preview-09.21.2015 V4.0.Preview-06.03.2015 V4.0.Preview-04.10.2015 V4.0.Preview-03.31.2015 V4.0.Preview-03.02.2015 V4.0.Preview-02.24.2015 V4.0.Preview-02.11.2015 V4.0.Preview-01.26.2015 V4.0.Preview-01.19.2015 V4.0.Preview-01.15.2015 Nothing to show New pull request Latest commit 688c26b Jul 12, 2016 otawfik-ms committed on GitHub Merge pull request #1342 from otawfik-ms/setuploc … Added localization support to setup build Permalink Failed to load latest commit information. .nuget remove nuget.org v2 feed, the v3 (faster) is already defined May 26, 2016 lkg fix `Microsoft.NETCore.ConsoleHost` is replaced by `Microsoft.NETCore… Jul 7, 2016 scripts faster download of latest dotnet Jan 29, 2016 setup Reverse dependencies order to work around vsix v2/v3 mismatch Jul 11, 2016 src Remove OPEN_BUILD build flag Jul 12, 2016 tests Merge pull request #1319 from dsyme/fix-126 Jul 10, 2016 vsintegration Merge pull request #1342 from otawfik-ms/setuploc Jul 12, 2016 .gitattributes printfn ""Hello, world!"";; Mar 27, 2014 .gitignore Merge latest from master May 12, 2016 BuildToolsVersion.txt update buildtools deps to dotnet/corefx@96ae037 Jun 27, 2016 CHANGELOG.md reset (c) Microsoft Open Technologies, Inc. back to (c) Microsoft Cor… Jan 28, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Dec 8, 2015 DEVGUIDE.md Update DEVGUIDE.md Jul 5, 2016 DotnetCLIVersion.txt let's used .NET Core RTM ( version 1.0.0-preview2-003121 ) Jun 27, 2016 ISSUE_TEMPLATE.md Update ISSUE_TEMPLATE.md Apr 4, 2016 License.txt reset (c) Microsoft Open Technologies, Inc. back to (c) Microsoft Cor… Jan 29, 2016 README.md Update roslyn branch build badges Jun 28, 2016 TESTGUIDE.md Fix test source links in TESTGUIDE.md Jun 2, 2016 VisualFSharp.sln Fix build errors Jun 30, 2016 appveyor.yml Merge https://github.com/Microsoft/visualfsharp Jun 30, 2016 build-everything.proj Added vsix project dependencies Jun 9, 2016 build.cmd fix `Microsoft.NETCore.ConsoleHost` is replaced by `Microsoft.NETCore… Jul 7, 2016 init-tools.cmd update buildtools deps to dotnet/corefx@96ae037 Jun 27, 2016 init-tools.sh update buildtools deps to dotnet/corefx@96ae037 Jun 27, 2016 netci.groovy Updated groovy script to use dev15 machines May 9, 2016 packages.config Merge branch 'master' of https://github.com/Microsoft/visualfsharp in… Jun 30, 2016 README.md Visual F# Tools Windows build Debug (Build only) Release (Tests Part 1) Release (Tests Part 2) master roslyn Contributing to the F# Language, Library, and Tools You are invited to join with the F# Community and the Visual F# Tools team to help produce future releases of the F# language compiler, library, and tools. F# is a mature, open source, cross-platform, functional-first programming language which empowers users and organizations to tackle complex computing problems with simple, maintainable, and robust code. F# is used in a wide range of application areas and is supported by Microsoft and other industry-leading companies providing professional tools, and by an active open community. You can find out more about F# at http://fsharp.org. Changes contributed here are packaged into the Visual F# Tools, the F# Open Edition, and other open source F# editing tools. Microsoft coordinates packaging this repository as part of the Visual F# Tools, while the F# community coordinates packaging it as the Open Edition of F# for use on Linux, OSX, Android, iOS, and other platforms, via the fsharp/fsharp GitHub repo. Engineering status F# for CoreCLR status F# 4.0 status --- Completed, shipped. License This project is subject to the Apache Licence, Version 2.0. A copy of the license can be found in License.txt at the root of this repo. Development and Testing See DEVGUIDE.md and TESTGUIDE.md in the root of the repo for details on build, development, and testing. Quickstart guides for build and test can be found here and here, respectively. Required Tools for Windows Development and Testing Development tools For F# 4.0 development Visual Studio 2015 Select Visual C++ / Common Tools For Visual C++ Visual F# Visual Studio Extensibility Tools Visual Studio 2015 SDK For F# 4.1 development Visual Studio 15 Select Visual C++ / Common Tools For Visual C++ Visual F# Visual Studio Extensibility Tools Visual Studio 15 SDK Additional frameworks Git for windows Perl (ActiveState 5.16.3 is known to be supported) .NET 3.5 .NET 4.5 .NET 4.5.1 .NET 4.6 MSBuild 12.0 Windows 7 SDK Windows 8 SDK Windows 8.1 SDK Contributing Guidelines for contributions to the Visual F# compiler, library, and tools can be found here. How we label issues and PRs: https://github.com/dotnet/roslyn/wiki/Labels-used-for-issues This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. This code of conduct has been adopted by many other projects. For more information see the Code of conduct. If you would like to contribute to the F# ecosystem more generally see the F# Software Foundation's Community Projects pages. Using CI Builds To install F#, see http://fsharp.org. To download the bits for the latest CI builds see these instructions. This includes and ZIPs containing the F# compiler and VSIX installers for the Visual F# IDE Tools. Code Flow to Other Platforms Currently, this repository only enables development and testing on the Windows platform. If you are using Linux, OSX, Android, or iOS, and would like to contribute, please see the instructions provided at the Open Edition repo. Although the primary focus of this repo is F# for Windows and the Visual Studio F# tools, contributions here flow directly to the F# Open Edition repo. More details can be found here. Get In Touch Keep up with the Visual F# Team and the development of the Visual F# Tools by following us @VisualFSharp or subscribing to our team blog. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Microsoft/visualfsharp"	"The Visual F# compiler and tools"	"true"
"Compiler"	"Fable"	"https://github.com/fsprojects/Fable"	"F# to JavaScript Compiler"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"377"	"39"	"44"	"GitHub - fsprojects/Fable: F# to JavaScript Compiler Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 39 Star 377 Fork 44 fsprojects/Fable Code Issues 25 Pull requests 3 Pulse Graphs F# to JavaScript Compiler http://fsprojects.github.io/Fable/ 524 commits 10 branches 0 releases 27 contributors F# 94.7% TypeScript 3.3% JavaScript 2.0% F# TypeScript JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fable-clients fix-237 gh-pages master netcore online-repl pr/219 publish-0.4.0-alpha react-todomvc return-strategy Nothing to show Nothing to show New pull request Latest commit 9f6476b Jul 12, 2016 mexx committed with alfonsogarciacaro Virtualdom sample: unify item update functionality (#255) Permalink Failed to load latest commit information. .github Update issue template Jul 11, 2016 .paket Missing Async methods May 22, 2016 docs Update Virtualdom sample and publish docs Jul 12, 2016 import Add Pixi.js sample Jul 12, 2016 lib Update FCS lib Jul 4, 2016 samples Virtualdom sample: unify item update functionality (#255) Jul 12, 2016 src Fix tests on CI servers Jul 11, 2016 .gitattributes Fix build on Windows with VS Jul 9, 2016 .gitignore Publish 0.4.0 alpha (#250) Jul 11, 2016 .travis.yml App scripts.postbuild option to fableconfig.json Mar 14, 2016 LICENSE Add license, fixes #7 Feb 13, 2016 README.md Remove do expressions (#248) Jul 11, 2016 appveyor.yml Update docs, prepare beta release Mar 20, 2016 build.cmd Project restructuring Mar 7, 2016 build.fsx Publish 0.4.0 alpha (#250) Jul 11, 2016 build.sh Project restructuring Mar 6, 2016 jsconfig.json Allow passing fableconfig directory Apr 25, 2016 paket.dependencies Add Suave client Jun 7, 2016 paket.lock Big refactoring Jul 7, 2016 typings.json Fix build scripts errors and remove plugin dlls from repo Jun 12, 2016 README.md F# |> BABEL The compiler that emits JavaScript you can be proud of! Fable brings together the power of the F# compiler and Babel to make JavaScript a true backend for F#. Some of its main features are: Works directly on F# source code, no compilation to .NET bytecode needed Optimizes F# code to generate as clean JavaScript as possible Passes location data to Babel to generate source maps Compatible with all Babel plugins and other JS development tools, like Webpack Support for most of the F# core library and a bit of .NET Base Class Library Tiny core library included (less than 10KB minified and gzipped) with no runtime Organizes code using ES6 modules Interacts seamlessly with other JavaScript libraries Bonus: compile NUnit tests to Mocha Usage A beta version has been released to npm! You can install and run it just by typing: npm install -g fable-compiler fable path/to/your/project.fsproj Note the package name is fable-compiler while the command is just fable You must have F# 4 and node 4.4 or higher installed in your computer. You can find more detailed instruction about F# to JS compilation in the docs. Also you can have a look at the samples or download them from here. Contributing At the moment, the best way to contribute is to battle-test the project, report issues, create samples and help promoting it. A plugin system is also available to allow you extend Fable according to you needs. Issues with the label discussion will be also added to ask the opinion of the community on different topics like the logo, roadmap, etc. Caveats Options are erased in compiled code. This has several benefits like removing overhead and interacting with native JS functions in a safer way (null will be None). However, it will lead to unexpected results if you do weird things like wrapping null in Some. For practical purposes, Fable considers null, undefined, None and unit to be the same thing. Information about generic types is not included in the generated JavaScript, so code that depends on this information to be known at runtime for method dispatching may have unexpected behaviour. To know more, read Compatibility. Acknowledgements Of course, this project wouldn't have been possible without the fantastic work of the F# compiler and Babel teams. I hope they feel proud seeing how their work has met in a very unexpected way, giving developers even more possibilities to build great apps. The awesome F# community has played a big role in making this possible. I've met incredible people and it's impossible to list all the names without forgetting anyone, but I'd like to give a particular mention to Zach Bray for his work on FunScript, Don Syme (the fact that the designer of the language himself shows interest in your work, no matter how humble it is, is really a big push!) and Krzysztof Cieślak (I always have to look up the name to spell it correctly) because he's shown that F# is a perfect fit for a big project targeting JS. And finally I'd like to thank my partner (is it too old-fashioned to say wife?) for bearing with me everyday. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fsprojects/Fable"	"F# to JavaScript Compiler"	"true"
"Compression"	"SharpCompress"	"https://github.com/adamhathcock/sharpcompress"	"SharpCompress is a compression library for.NET/Mono/Silverlight/WP7 that can unrar, un7zip, unzip, untar unbzip2 and ungzip with forward-only reading and file random access APIs. Write support for zip/tar/bzip2/gzip are implemented"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"261"	"38"	"104"	"GitHub - adamhathcock/sharpcompress: SharpCompress is a fully managed C# library to deal with many compression types and formats. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 38 Star 261 Fork 104 adamhathcock/sharpcompress Code Issues 51 Pull requests 4 Wiki Pulse Graphs SharpCompress is a fully managed C# library to deal with many compression types and formats. 295 commits 8 branches 17 releases 25 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 7zip_sfx TarNames WinRT dnx master new_7zip portable_crypto rar5 Nothing to show 0.12.1 0.12.0 0.11.6 0.11.5 0.11.4 0.11.3 0.11.2 0.11.1 0.11 0.10.3 0.10.2 0.10.1.3 0.10.1.2 0.10.1.1 0.10.1 0.10 0.9 Nothing to show New pull request Latest commit ef0bf27 Jul 13, 2016 Adam Hathcock Add Silverlight 5 Permalink Failed to load latest commit information. src/SharpCompress Add Silverlight 5 Jul 13, 2016 test Add Silverlight 5 Jul 13, 2016 .gitattributes Fix line endings Jul 13, 2016 .gitignore First pass. Doesn't work yet. May 20, 2016 LICENSE.txt Adds MIT license. Nov 11, 2014 README.md Add Silverlight 5 Jul 13, 2016 SharpCompress.sln Moved tests and fixed up nuget metadata Dec 30, 2015 SharpCompress.sln.DotSettings Add resharper shared config Jul 16, 2013 global.json First pass. Doesn't work yet. May 20, 2016 README.md SharpCompress SharpCompress is a compression library for .NET/Mono/Silverlight/WP7 that can unrar, un7zip, unzip, untar unbzip2 and ungzip with forward-only reading and file random access APIs. Write support for zip/tar/bzip2/gzip are implemented. The major feature is support for non-seekable streams so large files can be processed on the fly (i.e. download stream). Need Help? Post Issues on Github! Check the Supported Formats and basic samples. A Simple Request Hi everyone. I hope you're using SharpCompress and finding it useful. Please give me feedback on what you'd like to see changed especially as far as usability goes. New feature suggestions are always welcome as well. I would also like to know what projects SharpCompress is being used in. I like seeing how it is used to give me ideas for future versions. Thanks! Please do not email me directly to ask for help. If you think there is a real issue, please report it here. Want to contribute? I'm always looking for help or ideas. Please submit code or email with ideas. Unfortunately, just letting me know you'd like to help is not enough because I really have no overall plan of what needs to be done. I'll definitely accept code submissions and add you as a member of the project! TODOs (always lots) RAR 5 support 7Zip writing Zip64 Multi-volume Zip support. In-Progress RAR5 support DNX/NET Core support xproj targeting Version Log Version 0.12.1 Support Silverlight 5 Version 0.12.0 .NET Core RTM! Bug fix for Tar long paths Version 0.11.6 Bug fix for global header in Tar Writers now have a leaveOpen bool overload. They won't close streams if not-requested to. Version 0.11.5 Bug fix in Skip method Version 0.11.4 SharpCompress is now endian neutral (matters for Mono platforms) Fix for Inflate (need to change implementation) Fixes for RAR detection Version 0.11.1 Added Cancel on IReader Removed .NET 2.0 support and LinqBridge dependency Version 0.11 Been over a year, contains mainly fixes from contributors! Possible breaking change: ArchiveEncoding is UTF8 by default now. TAR supports writing long names using longlink RAR Protect Header added Version 0.10.3 Finally fixed Disposal issue when creating a new archive with the Archive API Version 0.10.2 Fixed Rar Header reading for invalid extended time headers. Windows Store assembly is now strong named Known issues with Long Tar names being worked on Updated to VS2013 Portable targets SL5 and Windows Phone 8 (up from SL4 and WP7) Version 0.10.1 Fixed 7Zip extraction performance problem Version 0.10: Added support for RAR Decryption (thanks to https://github.com/hrasyid) Embedded some BouncyCastle crypto classes to allow RAR Decryption and Winzip AES Decryption in Portable and Windows Store DLLs Built in Release (I think) Some Help/Discussion: https://sharpcompress.codeplex.com/discussions 7Zip implementation based on: https://code.google.com/p/managed-lzma/ LICENSE Copyright (c) 2000 - 2011 The Legion Of The Bouncy Castle (http://www.bouncycastle.org) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/adamhathcock/sharpcompress"	"SharpCompress is a compression library for.NET/Mono/Silverlight/WP7 that can unrar, un7zip, unzip, untar unbzip2 and ungzip with forward-only reading and file random access APIs. Write support for zip/tar/bzip2/gzip are implemented"	"true"
"Compression"	"DotNetZip.Semverd"	"https://github.com/haf/DotNetZip.Semverd"	"An open-source project that delivers a.NET library for handling ZIP files, and some associated tools. (fork of )"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"87"	"19"	"46"	"GitHub - haf/DotNetZip.Semverd: A fork of the DotNetZip project without signing with a solution that compiles cleanly. This project aims to follow semver to avoid versioning conflicts.  DotNetZip is a FAST, FREE class library and toolset for manipulating zip files. Use VB, C# or any .NET language to easily create, extract, or update zip files. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 87 Fork 46 haf/DotNetZip.Semverd Code Issues 12 Pull requests 0 Pulse Graphs A fork of the DotNetZip project without signing with a solution that compiles cleanly. This project aims to follow semver to avoid versioning conflicts. DotNetZip is a FAST, FREE class library and toolset for manipulating zip files. Use VB, C# or any .NET language to easily create, extract, or update zip files. 151 commits 2 branches 3 releases 16 contributors C# 88.6% HTML 4.3% Visual Basic 2.7% ASP 1.4% Smalltalk 0.9% JavaScript 0.7% Other 1.4% C# HTML Visual Basic ASP Smalltalk JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bugs/14097-tmp-files master Nothing to show v1.9.3 v1.9.2 v1.9.2-rc1 Nothing to show New pull request Latest commit 738cd38 Jun 22, 2016 haf committed on GitHub Merge pull request #78 from tgp1994/master … Generate NuGet packages for standard DNZ, Android, and iOS Permalink Failed to load latest commit information. buildscripts work in progress on building nugets with new albacore Nov 18, 2013 buildsupport Updating nuget binary for better Xamarin support Jun 21, 2016 src Updating nuget binary for better Xamarin support Jun 21, 2016 .gitattributes auto differs between systems, let's not. Sep 26, 2014 .gitignore v1.9.0-code - working rake file + semver file, here you go jeremy! Al… Aug 27, 2011 .semver Updating nuget binary for better Xamarin support Jun 21, 2016 Gemfile Albacore 2.0 Sep 26, 2014 Gemfile.lock Albacore 2.0 Sep 26, 2014 LICENSE Include all licenses in main LICENSE file Nov 25, 2014 NOTICE Add NOTICE file in compliance with Apache license Nov 25, 2014 README.md README release notes Jan 6, 2014 Rakefile Updating nuget binary for better Xamarin support Jun 21, 2016 appveyor.yml Modifying android namespace to mimic DNZ Jun 21, 2016 README.md Introducing the DotNetZip Library and Tools DotNetZip is the name of an open-source project that delivers a .NET library for handling ZIP files, and some associated tools. The library allows .NET or Silverlight programmers to build applications that read, create and modify ZIP files. The tools are .NET programs that rely on the library, and can be used by anyone on any Windows machine to build or extract ZIP files. Release Notes Mon, 6 Jan 2014 14:35 UTC+0100 Released v1.9.2 to NuGet. This version is identical to the release candidate. Mon, 18 Nov 2013 20:53 UTC+0100 Released v1.9.2-rc1 to NuGet. This version fixes the tmp-file bug and a lockup- bug with ""PendingOverwrite"" so that OverwriteSilently works better. It's a RC, because as a part of this bugfix, I actually cleaned up some code and that might have changed semantics (although I don't think it has, I've tested the function that I changed). Fri, 27 Aug 2011 01:21 Here is a fork of the project that's easily semverd. This is not the official project, but you may clone it - it's easier to build at least. Forked off of http://dotnetzip.codeplex.com/SourceControl/changeset/changes/81674 Mon, 11 Jul 2011 20:10 How to build? bundle && rake Why DotNetZip? The Microsoft .NET Framework base class library lacks a good set of built-in classes for creating and reading ZIP files, and Windows itself lacks full-powered built-in ZIP tools. DotNetZip fills those needs. There are other ZIP libraries available, but some of them have licenses that may be unfriendly, some of them are too hard to use or not powerful enough, and some of them are too expensive (not free). DotNetZip provides one more alternative. The goals for this alternative: easy to adopt - low cost (Free), and a friendly license fully-featured good performance - in speed and compression easy to use. DotNetZip background Many people seem to think, incorrectly, that the classes in the System.IO.Compression namespace, like GZipStream or DeflateStream, can create or read zip files. Not true. The System.IO.Compression namespace, available starting with .NET v2.0 for the desktop Framework and v3.5 for the Compact Framework, includes base class libraries supporting compression within streams - both the Deflate and Gzip formats are supported. But these classes are not directly useful for creating compressed ZIP archives. GZIP is not ZIP. Deflate is not ZIP. The GZipStream in System.IO.Compression is able to read and write GZIP streams, but that is not the same as reading or writing a zip file. Also, these classes deliver poor compression in practice, especially with binary data, or previously-compressed data. Yes, it is possible to read and write zip files, using the classes in the .NET Framework. You can do it with the System.IO.Packaging.ZipPackage class, added in .NET v3.0. Actually this class lets you create a package file, which is a zipfile with a particular internal structure. It includes a manifest and some other things. But the interface is odd and confusing if all you want is a regular-old ZIP file. Also, the classes in this namespace do not provide control for things like passwords, comments, AES encryption, ZIP64, Unicode, and so on. You can also create and read zip files with the J# runtime. This also has ita drawbacks. First, J# is going out of support, or may be out of support now. Second, the J# runtime is huge, and you have to swallow the whole thing, even if all you want is zip file capability. Also, the J# runtime is based on the java.util.zip classes from Java v1.4, dating from 1998. The runtime hasn't been updated in years and still includes bugs in zip file handling. It lacks support for AES, for ZIP64, and Unicode. It is not accessible from COM. Finally, the zip classes in the J# runtime are decidedly un-dotnet. There's no support for events, or enumerators to let you do things like For Each in VB, or foreach in C#. The interface is clunky. It does not feel like a .NET class library, because it isn't a .NET class library. So for all those reasons, J# isn't ideal. You can also rely on P/Invoke to the shell32.dll, and the ShellClass. This works in a limited fashion. The drawbacks here: it isn't documented. It isn't a very intuitive or powerful programming interface. There are no events, so embedding it into a Winforms app with a progress bar would be difficult. Again it lacks an easy way to use or access many ZIP features, like encryption or ZIP64 or self-extracting archives. Also, the shell32.dll is designed for use within Windows Explorer, and presumes a user interface. In fact in some cases, calling into this DLL to perform a ZIP extraction can display a dialog box, so it may not be suitable for use within server or ""headless"" applications. There are other libraries out there than do zip files for .NET. But there are compromises with each one. Some are commercial and expensive. Some are slow. Some are complicated to use. Some of these options lack features. Some of them have more than one of these drawbacks. DotNetZip provides another option. It's a very simple-to-use class library that provides good ZIP file support. Using this library, you can write .NET applications that read and write zip-format files, including files with passwords, Unicode filenames, ZIP64, AES encryption, and comments. The library also supports self-extracting archives. It is well documented and provides good performance. Though DotNetZip is implemented in .NET and was originally intended to provide a managed-code library for ZIP files, you can now use it library from any COM environment, including Javascript, VBScript, VB6, VBA, PHP, Perl, and others. Using DotNetZip, you could generate an AES-encrypted zip file from within the code of a macro running in MS-Excel, for example. DotNetZip works with applications running on PCs with Windows. There is a version of this library available for the .NET Compact Framework, too. I have not tested DotNetZip for use with Mono, but I've heard reports that people use the binary releases with Mono successfully, without change. License This software is open source. It is released under the Microsoft Public License of October 2006. The use of the ""Microsoft Public License"" does not mean it is licensed by Microsoft. See the License.txt file for details. DotNetZip is derived in part from ZLIB, the C-language library by Mark Adler and Jean-loup Gailly . See the License.ZLIB.txt file included in the DotNetZip download for details. What is DotNetZip? and How is it packaged? DotNetZip is primarily a managed library for dealing with ZIP files. It is packaged as a DLL that your application must reference: Ionic.Zip.dll. In the ""developer's kit"" package, there is documentation, code examples, and debug versions of the DLL. The ZIP library depends on a set of supporting classes for doing compression and decompression; these are exposed in other namespaces. The classes in the ZIP library reside in these namespaces: namespace interesting classes Ionic.Zip ZipFile, ZipEntry, ZipOutputStream, and ZipInputStream. Ionic.Zlib DeflateStream, GZipStream, ZlibStream Ionic.BZip2 BZip2InputStream, BZip2OutputStream Ionic.Crc CRC32 If you want only ZLIB (raw compression and decompression, RFC 1950, 1951, and 1952), the ZLIB classes are packaged independently, in Ionic.Zlib.dll. Likewise, if you want to do BZIP2 compression, outside the scope of a zip file, you can use the Ionic.BZip2.dll assembly. If you want ZIP, or both ZIP and ZLIB, then your application should depend soly on Ionic.Zip.dll; this assembly includes a superset of the classes in Ionic.Zlib.dll and Ionic.BZip2.dll. For each DLL, there is a version for the regular .NET Framework and another for the Compact Framework. DotNetZip also includes command-line and GUI tools for manipulating zip files; these can be helpful to developers when building applications that create or manipulate zip files. They also can be helpful as end-user tools. There are other downloads for DotNetZip - the source package, the runtime-only package (DLLs and no helpfile or tools), the documentation-only package, etc. Using the Zip Class Library: The Basics The examples here provide just the basics. There are many other examples available: some are included in the source package, some in the class reference documentation in the help file, and others on the web. Those examples provide many illustrate how to read and write zip files, taking advantage of all the various features of zip files exposed by the library. For a full set of examples, your best bet is to see the documentation. Here's a basic primer: The main type you will use to fiddle with zip files is the ZipFile class. Full name: Ionic.Zip.ZipFile. You use this to create, read, or update zip files. There is also a ZipOutputStream class, which offers a Stream metaphor, for those who want it. You should choose one or the other for your application. The simplest way to create a ZIP file in C# looks like this:   using(ZipFile zip= new ZipFile())   {     zip.AddFile(filename);     zip.Save(NameOfZipFileTocreate);   }  Or in VB.NET, like this:  Using zip As ZipFile = New ZipFile      zip.AddFile(filename)      zip.Save(""MyZipFile.zip"")  End Using  The using clause is important; don't leave it out. The simplest way to Extract all the entries from a zipfile looks like this:   using (ZipFile zip = ZipFile.Read(NameOfExistingZipFile))   {     zip.ExtractAll(args[1]);   }  But you could also do something like this:   using (ZipFile zip = ZipFile.Read(NameOfExistingZipFile))   {     foreach (ZipEntry e in zip)     {       e.Extract();     }   }  Or in VB, extraction would be like this: Using zip As ZipFile = ZipFile.Read(NameOfExistingZipFile) zip.ExtractAll End Using Or this: Using zip As ZipFile = ZipFile.Read(NameOfExistingZipFile) Dim e As ZipEntry For Each e In zip e.Extract Next End Using That covers the basics. Notice that a using clause is always employed. DOn't forget this. Don't leave it off. If you don't understand what it is, don't just skip it. It's important. There are a number of other options for using the class library. For example, you can read zip archives from streams, or you can create (write) zip archives to streams, or you can extract into streams. You can apply passwords for weak encryption. You can specify a code page for the filenames and metadata of entries in an archive. You can rename entries in archives, and you can add or remove entries from archives. You can set up save and read progress events. You can do LINQ queries on the Entries collection. Check the documentation for complete information, or use Visual Studio's intellisense to explore some of the properties and methods on the ZipFile class. Another type you will use is ZipEntry. This represents a single entry - either a file or a directory - within a ZipFile. To add an entry to a zip file, you call one of the AddEntry (or AddFile) methods on the ZipFile class. You never directly instantiate a ZipEntry type. The AddEntry/AddFile returns a ZipEntry type; you can then modify the properties of the entry within the zip file, using that object. For example, the following code adds a file as an entry into a ZipFile, then renames the entry within the zip file:   using(ZipFile zip= new ZipFile())   {     ZipEntry e = zip.AddFile(filename);     e.FileName = ""RenamedFile.txt"";     zip.Save(NameOfZipFileTocreate);   }  Extracting a zip file that was created in this way will produce a file called ""RenamedFile.txt"", regardless of the name of the file originally added to the ZipFile. As an alternative to using ZipFile type to create a zip file, you can use the ZipOutputStream type to create zip files . To do so, wrap it around a stream, and write to it.   using (var fs = File.Create(filename))   {     using(var s = new ZipOutputStream(fs))     {       s.PutNextEntry(""entry1.txt"");       byte[] buffer = Encoding.ASCII.GetBytes(""This is the content for entry #1."");       s.Write(buffer, 0, buffer.Length);     }   }  Unlike the ZipFile class, the ZipOutputStream class can only create zip files. It cannot read or update zip files. If you want to read zip files using a streaming metaphor, you can use ZipInputStream. Think of ZipInputStream and ZipOutputStream as alternatives to using ZipFile to manipulate zip files. The former is for reading zip files; the latter is for writing them. About Directory Paths One important note: the ZipFile.AddXxx methods add the file or directory you specify, including the directory. In other words, logic like this: ZipFile zip = new ZipFile(); zip.AddFile(""c:\a\b\c\Hello.doc""); zip.Save(); ...will produce a zip archive that contains a single entry, or file, and that file is stored with the relative directory information. When you extract that file from the zip, either using this Zip library or winzip or the built-in zip support in Windows, or some other package, all those directories will be created, and the file will be written into that directory hierarchy. At extraction time, if you were to extract that file into a directory like c:\documents, then resulting file would be named c:\documents\a\b\c\Hello.doc . This is by design. If you don't want that directory information in your archive, then you need to use the overload of the AddFile() method that allows you to explicitly specify the directory used for the entry within the archive: zip.AddFile(""c:\\a\\b\\c\\Hello.doc"", ""files""); zip.Save();  This will create an archive with an entry called ""files\Hello.doc"", which contains the contents of the on-disk file located at c:\a\b\c\Hello.doc . If you extract that file into a directory e:\documents, then the resulting file will be called e:\documents\files\Hello.doc . If you want no directory at all, specify """" (the empty string). Specifying null (Nothing in VB) will include all the directory hierarchy in the filename, as in the orginal case. Pre-requisites to run Applications that use DotNetZip To run desktop applications that depend on DotNetZip: .NET Framework 2.0 or later To run smart device applications that depend on DotNetZip: .NET Compact Framework 2.0 or later In more detail: The Zip Class Library The Zip class library is packaged as Ionic.Zip.DLL for the regular .NET Framework and Ionic.Zip.CF.dll for the Compact Framework. The Zip library allows applications to create, read, and update zip files. This library uses the DeflateStream class to compress file data, and extends it to support reading and writing of the metadata - the header, CRC, and other optional data - defined or required by the zip format spec. The key object in the class library is the ZipFile class. Some of the important methods on it:   - AddItem - adds a file or a directory to a zip archive   - AddDirectory - adds a directory to a zip archive   - AddFile - adds a file to a zip archive   - AddFiles - adds a set of files to a zip archive   - Extract - extract a single element from a zip file   - Read - static methods to read in an existing zipfile, for            later extraction   - Save - save a zipfile to disk  There is also a supporting class, called ZipEntry. Applications can enumerate the entries in a ZipFile, via ZipEntry. There are other supporting classes as well. Typically, 80% of apps will use just the ZipFile class, and will not need to directly interact with these other classes. But they are there if you need them. If you want to create or read zip files, the Ionic.Zip.DLL assembly is the one you want. When building applications that do zip stuff, you need to add a reference to the Ionic.Zip.dll in Visual Studio, or specify Ionic.Zip.dll with the /R flag on the CSC.exe or VB.exe compiler line. In more detail: The Zlib Class Library The Zlib class library is packaged as Ionic.Zlib.DLL for the regular .NET Framework and Ionic.Zlib.CF.dll for the Compact Framework. The ZLIB library does compression and decompression according to IETF RFC's 1950 (ZLIB), 1951 (Deflate), and 1952 (GZIP). See http://www.ietf.org/rfc/rfc1950.txt http://www.ietf.org/rfc/rfc1951.txt and http://www.ietf.org/rfc/rfc1952.txt The key classes are: ZlibCodec - a class for Zlib (RFC1950/1951/1952) encoding and decoding. This low-level class does deflation and inflation on buffers. DeflateStream - patterned after the DeflateStream in System.IO.Compression, this class supports compression levels and other options. GZipStream - patterned after the GZipStream in System.IO.Compression, this class supports compression levels and other options. ZlibStream - similar to the GZipStream in System.IO.Compression, this class generates or consumes raw ZLIB streams. If you want to simply compress (deflate) raw block or stream data, this library is the thing you want. When building applications that do zlib things, you need to add a reference to the Ionic.Zlib.dll in Visual Studio, or specify Ionic.Zlib.dll with the /R flag on the CSC.exe or VB.exe compiler line. NB: If your application does both Zlib and Zip stuff, you need only add a reference to Ionic.Zip.dll. Ionic.Zip.dll includes all the capability in Ionic.Zlib.dll. Ionic.Zip.dll is a superset. In more detail: The BZip2 Class Library The BZip2 class library is packaged as Ionic.BZip2.DLL for the regular .NET Framework and Ionic.BZip2.CF.dll for the Compact Framework. The BZip2 library does compression according to the bzip2 format created by Julian Seward. See http://en.wikipedia.org/wiki/Bzip2 NB: If your application does a combination of BZip2, Zlib and Zip stuff, you need only add a reference to Ionic.Zip.dll. Ionic.Zip.dll includes all the capability in Ionic.Zlib.dll and Ionic.BZip2.dll. Ionic.Zip.dll is a superset. If you try to link to more than one of these, you will get compiler warnings about ""duplicate types"". Namespace changes for DotNetZip The namespace for the DotNetZip classes is Ionic.Zip. Classes are like: Ionic.Zip.ZipFile Ionic.Zip.ZipEntry Ionic.Zip.ZipException etc (check the .chm file for the full list) For the versions prior to v1.7, the namespace DotNetZip was Ionic.Utils.Zip. The classes were like so: Ionic.Utils.Zip.ZipFile Ionic.Utils.Zip.ZipEntry etc If you have code that depends on an older version of the library, with classes in the Ionic.Utils.Zip namespace), a simple namespace replacement will allow your code to compile against the new version of the library. In addition to the Zip capability, DotNetZip includes capability (new for v1.7). For Zlib, the classes are like this: Ionic.Zlib.DeflateStream Ionic.Zlib.ZlibStream Ionic.Zlib.ZlibCodec ... (again, check the .chm file for the full list) For v1.9.1.6, the CRC class moved from the Ionic.Zlib namespace to the Ionic.Crc namespace. Dependencies Originally, this library was designed to depend upon the built-in System.IO.Compression.DeflateStream class for the compression. This proved to be less than satisfactory because the built-in compression library did not support compression levels and also was not available on .NET CF 2.0. As of v1.7, the library includes a managed code version of zlib, the library that produces RFC1950 and RFC1951 compressed streams. Within that version of zlib, there is also a DeflateStream class which is similar to the built-in System.IO.Compression.DeflateStream, but more flexible, and often more effective as well. As a result, this library depends only on the .NET Framework v2.0, or the .NET Compact Framework v2.0. The Documentation There is a single set of developer reference documentation for all of the DotNetZip library features, including Zip and Zlib stuff. It is packaged in two ways: As a .chm file, and as a Help Viewer 1.0 resource. The latter is the new format suitable for viewing within VS2010. If you only use the Zlib stuff, then you should focus on the doc in the Ionic.Zlib namespace. Likewise BZip2. If you are building apps for mobile devices running the Compact Framework, then ignore the pieces that deal with SaveSelfExtractor() and AES. Consult the help file for more specifics here. In some cases, upon opening the .chm file for DotNetZip, the help items tree loads, but the contents are empty. You may see an error: ""This program cannot display the webpage."" or, ""Address is invalid."" If this happens, it's likely that you've encountered a problem with Windows protection of files downloaded from less trusted locations. To work around this, within Windows Explorer, right-click on the CHM file, select properties, and Unblock it, using the button in lower part of properties window. The help is also packaged in a format that you can integrate into Visual Studio 2008, or Visual Studio 2010. VS2008 requires MS Help 2.0, while VS2010 requires a different, newer format, sometimes called MS Help 3, and sometimes (confusingly) called ""MS Help Viewer 1.0 format"". The DotNetZip ""devkit"" download includes help in all these formats. The Zip Format The zip format is described by PKWare, at http://www.pkware.com/business_and_developers/developer/popups/appnote.txt Every valid zipfile conforms to this specification. For example, the spec says that for each compressed file contained in the zip archive, the zipfile contains a byte array of compressed data. (The byte array is something the DeflateStream class can produce directly.) But the zipfile also contains header and ""directory"" information - you might call this ""metadata"". In other words, the zipfile must contain a list of all the compressed files in the archive. The zipfile also contains CRC checksums, and can also contain comments, and other optional attributes for each file. These are things the DeflateStream class - either the one included in the .NET Framework Class Library, or the one embedded in this library - does not read or write. Managing the metadata in a zip file is most of what DotNetZip does. Which DLL to use? The binary releases of DotNetZip include multiple distinct DLLs or assemblies. Which one should you use? The likely answer is: use Ionic.Zip.dll. That's the mainstream library, the full library, and it includes all the capability. If you have particular requirements, like you want a smaller library, or you want to exclude the Self-Extracting stuff, or you only want the ZLIB capability, then you may want to choose a different assembly. Here's a summary of the options. Usage scenario Reference this DLL reading or writing Zip files Ionic.Zip.dll raw block or stream compression, ZLIB, GZIP, Ionic.Zlib.dll or DEFLATE raw block or stream compression, BZIP2 Ionic.BZip2.dll both raw compression as well as reading Ionic.Zip.dll or writing Zip files reading or writing Zip files on Compact Ionic.Zip.CF.dll Framework raw compression on Compact Framework Ionic.Zlib.CF.dll -and/or- Ionic.BZip2.CF.dll both raw compression as well as reading Ionic.Zip.CF.dll or writing Zip files on CF reading or writing Zip files, using desktop Ionic.Zip.Reduced.dll .NET framework but never creating a self-extracting archive Never reference both Ionic.Zlib.dll and Ionic.Zip.dll, or both Ionic.BZip2.dll and Ionic.Zip.dll in the same application. If your application does both Zlib and Zip stuff, you need only add a reference to Ionic.Zip.dll. Ionic.Zip.dll includes all the capability in Ionic.Zlib.dll and Ionic.BZip2.dll You always need to reference only a single Ionic DLL, regardless whether you use Zlib or BZip2 or Zip or some combination. Self-Extracting Archive support The Self-Extracting Archive (SFX) support in the library allows you to create a self-extracting zip archive. An SFX is both a standard EXE file and a ZIP file. The exe contains boilerplate program logic to unzip the embedded zip file. When the user executes the SFX runs, the boilerplate application logic just reads the zip content and then unzips itself. You can open an SFX in WinZip and other zip tools, as well, if you want to view it. Running the SFX (unpacking from the SFX) requires the .NET Framework installed on the machine, but does not require the DotNetZip library. There are two versions of the SFX - one that presents a GUI form, and another that runs as a console (command line) application. NB: Creation of SFX is not supported in the Compact Framework version of the library. Also, there is no way, currently, to produce an SFX file that can run on the .NET Compact Framework. The Reduced ZIP library The full DotNetZip library is currently about 400k in size. The SFX (Self-Extracting Archive) support is responsible for more than half the total size of the library. Some deployments may wish to omit the SFX support in order to get a smaller DLL. For that you can rely on the Ionic.Zip.Reduced.dll. It provides everything the normal library does, except the SaveSelfExtractor() method on the ZipFile class. For size comparisons...these approximate figures are for v1.9.1.6 of the library: Desktop Framework: assembly ~size comment Ionic.Zlib.dll 100k {Deflate,GZip,Zlib}Stream and ZlibCodec Ionic.BZip2.dll 57k BZip2{Input,Output}Stream Ionic.Zip.dll 460k includes ZLIB and BZIP2 compression, SFX, selector logic, WinZIP AES encryption, and the ComHelper class Ionic.Zip.Reduced.dll 250k includes everything in the main ZIP library except SFX. (ability to save Self-extracting archives) Compact Framework: assembly ~size comment Ionic.Zlib.CF.dll 74k {Deflate,GZip,Zlib}Stream and ZlibCodec Ionic.BZip2.CF.dll 36k BZip2{Input,Output}Stream Ionic.Zip.CF.dll 204k includes ZLIB and BZIP2 compression, but no SFX. Silverlight: assembly ~size comment Ionic.Zlib.dll 80k {Deflate,GZip,Zlib}Stream and ZlibCodec Ionic.BZip2.dll 41k BZip2{Input,Output}Stream Ionic.Zip.dll 226k includes ZLIB and BZIP2 compression, and the selector logic. No SFX, no WinZIP AES. Support There is no official support for this library. I try to make a good effort to answer questions and monitor the work items raised on the project portal at: http://DotNetZip.codeplex.com.  About Intellectual Property I am no lawyer, but before using this library in your app, it may be worth reviewing the various licenses. The specification for the zip format, which PKWARE owns, includes a paragraph that reads: PKWARE is committed to the interoperability and advancement of the .ZIP format. PKWARE offers a free license for certain technological aspects described above under certain restrictions and conditions. However, the use or implementation in a product of certain technological aspects set forth in the current APPNOTE, including those with regard to strong encryption or patching, requires a license from PKWARE. Please contact PKWARE with regard to acquiring a license. Contact pkware at: zipformat@pkware.com This library does not do strong encryption as described by PKWare, nor does it do patching. But again... I am no lawyer. This library uses a ZLIB implementation that is based on a conversion of the jzlib project http://www.jcraft.com/jzlib/. The license and disclaimer required by the jzlib source license is referenced in the relevant source files of DotNetZip, specifically in the sources for the Zlib module. This library uses a BZip2 implementation that is based on a conversion of the bzip2 implementation in the Apache Commons compression library. The Apache license is referenced in the relevant source files of DotNetZip, specifically in the sources for the BZip2 module. Limitations There are a few limitations to this library: It does not do strong encryption. The GUI tool for creating zips is functional but basic. This isn't a limitation of the library per se. ...and, I'm sure, many others But it is a good basic library for reading and writing zipfiles in .NET applications. Building the Library This section is mostly interesting to developers who will work on or view the source code of DotNetZip, to extend or re-purpose it. If you only plan to use DotNetZip in applications of your own, you probably don't need to concern yourself with the information that follows. Pre-requisites to build DotNetZip .NET Framework 4.0 SDK or later -or- Visual Studio 2010 or later -and- ILMerge - a tool from Microsoft that combines multiple managed assemblies into a single DLL or image. It is in similar in some respects to the lib tool in C toolkits. You can get it here: http://www.microsoft.com/downloads/details.aspx?familyid=22914587-b4ad-4eae-87cf-b14ae6a939b0&displaylang=en Building DotNetZip with the .NET SDK To build the library using the .NET Framework SDK v3.5, extract the contents of the source zip into a new directory. be sure the .NET 2.0 SDK, .NET 3.5 runtime, and .NET 2.0 runtime directories are on your path. These are typically C:\Program Files\Microsoft.NET\SDK\v2.0\bin c:\windows\Microsoft.NET\Framework\v3.5 and c:\WINDOWS\Microsoft.NET\Framework\v2.0.50727 The .NET 3.5 runtime is necessary because building DotNetZip requires the csc.exe compiler from NET 3.5. (Using DotNetZip from within C# requires the v2.0 csc compiler.) Modify the .csproj files in Zip and ZLIB and BZip2 to eliminate mention of the Ionic.pfx and Ionic.snk files. The various DLLs (Zip Partial, ZLIB, etc.) are signed with my private key. You will want to remove the mention of the private key in the project files. I cannot distribute my private key, so don't ask me! That would be silly. So you have to modify the project in order to build without the key. open a CMD prompt and CD to the DotNetZip directory. msbuild Be sure you are using the .NET 3.5 version of MSBuild. This builds the ""Debug"" version of the library. To build the ""Release"" version, do this: msbuild /t:Release to clean and rebuild, do msbuild /t:clean msbuild There are two setup directories, which contain the projects necessary to build the MSI file. Unfortunately msbuild does not include support for building setup projects (vdproj). You need Visual Studio to build the setup directories. I am in the process of converting these from .vdproj to .wixproj, so they can be built from the command line using msbuild. . Building DotNetZip with Visual Studio To build DotNetZip using Visual Studio 2010, Open the DotNetZip.sln file in VS2010. If necessary, Remove the dependencies on Ionic.pfx and Ionic.snk. (References to these will have already been removed from the zipped source distributions, but if you get your source from the TFS server, then you will have to remove references to the keyfiles manually) The various DLLs (Zip, ZLIB, etc.) are signed with my (Dino Chiesa's) private key. I do not distribute that key for anyone else's use. If you build the DotNetZip library from source, You will want to remove the mention of the private key in the project files. I will not distribute my private key, that would be silly. So don't ask me! Press F6 to build everything. The Project Structure and Build approach The function here is grouped into three basic sets: Zip, ZLIB/Deflate/GZIP, and BZip2. The Zip group is a superset of the ZLIB and BZIP2 groups. Each group of functionality is packaged into various assemblies, one assembly per ""platform"". The platforms supported are: .NET (Desktop), Compact Framework 2.0, and Silverlight. There is also a special ""Zip Reduced"" library, available only on the Desktop platform; it is a reduced-function version of the regular Desktop Framework zip library. It provides an option of using a smaller library for those zip-handling applications that don't produce Self-extracting archives. In a previous guise, DotNetZip relied on the ILMerge tool to combine distinct DLLs into a single package. This is no longer the case. Because the ZIP projects include the ZLIB and BZIP2 function, the appropriate source modules for the ZLIB and Bzip2 are ""linked"" into each of the ZIP projects (Desktop, CF, and Silverlight). Regarding the missing Ionic.pfx and Ionic.snk files The binary DLLs shipped in the codeplex project are signed by me, Dino Chiesa. This provides a ""strong name"" for the assembly, which itself provides some assurance as to the integrity of the library, and also allows it to be run within restricted sites, like apps running inside web hosters. For more on strong names, see this article: http://msdn.microsoft.com/en-gb/magazine/cc163583.aspx Signing is done automatically at build time in the Visual Studio project or in the msbuild build. There is a .pfx file that holds the crypto stuff for signing the assembly, and that pfx file is itself protected by a password. There is also an Ionic.snk file which is referenced by the project, but which I do not distribute. People opening the project ask me: what's the password to this .pfx file? Where's the .snk file? Here's the problem; those files contain my private key. if I give everyone the password to the PFX file or the .snk file, then anyone can go and build a modified Ionic.Zip.dll, and sign it with my key, and apply any version number they like. This means there could be multiple distinct assemblies with the same signature. This is obviously not good. Since I don't release the ability to sign DLLs with my key, the DLL signed with my key is guaranteed to be produced by me only, which is in fact the exact intent of code signing in .NET. If anyone wants to modify the project and re-compile it, they have a couple options: sign the assembly themselves, using their own key. produce a modified, unsigned assembly In either case it is not the same as the assembly I am shipping, therefore it should not be signed with the same key. All clear? As for those options above, here is some more detail: If you want a strong-named assembly, then create your own PFX file and .snk file and modify the appropriate projects to use those new files. If you don't need a strong-named assembly, then remove all the signing from the various projects. In either case, you will need to modify the ""Zip"" and ""Zip CF DLL"" projects, the BZip and BZip CF projects, and the ""Zlib"" and ""Zlib CF"" projects. Building the Documentation The documentation files are built using the Sandcastle Helpfile Builder tool, also available on CodePlex at http://www.codeplex.com/SHFB . It is built from in-code xml documentation, augmented with some additional out-of-band html documentation. If you want to build the help files yourself, you will need to have Sandcastle from May 2008 (or later, I guess), and SHFB, from February 2009. Both are free tools available from http://codeplex.com . I think you can get a package download of both of these by installing v1.9.3.0 of SHFB . The helpfile projects are: HtmlHelp1.shfbproj - to build the .chm file MSHelp2.shfbproj - to build the MS Help 2.0 content HelpViewer.shfbproj - to build the MS Help Viewer 1.0 content (The MSHelp2 project is broken at the moment.) To build the documentation in any of these formats, first build the ""zip Full DLL"" project in the source (Ionic.Zip.dll), then run: msbuild HtmlHelp1.shfbproj -or-  msbuild HelpViewer.shfbproj The Help Viewer 1.0 content can be viewed in the help viewer that is integrated into VS 2010, or in an alternative viewer, such as H3Viewer.exe. See http://mshcmigrate.helpmvp.com/viewer . Examples The source solution also includes a number of example applications showing how to use the DotNetZip library and all its features - creating ZIPs, using Unicode, passwords, comments, streams, and so on. Most of these will be built when you build the solution. Some of them do not - you will need to build them independently. Tests There are two source projects in the VS Solution that contain Unit Tests: one for the zlib library, one for the bzip2 library, and another for the Zip library. If you develop any new tests for DotNetZip, I'd be glad to look at them. Origins This library is mostly original code. There is a GPL-licensed library called SharpZipLib that writes zip files, it can be found at http://www.sharpdevelop.net/OpenSource/SharpZipLib/Default.aspx This library is not based on SharpZipLib. I think there may be a Zip library shipped as part of the Mono project. This library is also not based on that. Now that the Java class library is open source, there is at least one open-source Java implementation for zip. This implementation is not based on a port of Sun's JDK code. There is a zlib.net project from ComponentAce.com. This library is not based on that code. This library is all new code, written by me, with these exceptions: the CRC32 class - see above for credit. the zlib library - see above for credit. the bzip2 compressor - see above for credit. You can Donate If you think this library is useful, consider donating to my chosen cause: The Boys and Girls Club of Southwestern Pennsylvania, in the USA. (In the past I accepted donations for the Boys and Girls Club of Washington State, also in the USA. I've moved, and so changed the charity.) I am accepting donations on my paypal account. http://cheeso.members.winisp.net/DotNetZipDonate.aspx Thanks. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/haf/DotNetZip.Semverd"	"An open-source project that delivers a.NET library for handling ZIP files, and some associated tools. (fork of )"	"true"
"Compression"	"Unmaintained DotNetZip"	"http://dotnetzip.codeplex.com"	"An open-source project that delivers a.NET library for handling ZIP files, and some associated tools. (fork of )"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"DotNetZip Library - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe DotNetZip - Zip and Unzip in C#, VB, any .NET language DotNetZip is a FAST, FREE class library and toolset for manipulating zip files. Use VB, C# or any .NET language to easily create, extract, or update zip files. DotNetZip is the best open-source ZIP library for .NET. Just look at the reviews! Xceed is a community sponsor of DotNetZip. Developers look to Xceed Zip for .NET and Xceed Real-Time Zip for .NET when they need advanced Zip and streaming compression capabilities with professional support. DotNetZip works on PCs with the full .NET Framework, and also runs on mobile devices that use the .NET Compact Framework. Create and read zip files in VB, C#, or any .NET language, or any scripting environment. DotNetZip supports these scenarios: - a Silverlight app that dynamically creates zip files. - an ASP.NET app that dynamically creates ZIP files and allows a browser to download them - a Windows Service that periodically zips up a directory for backup and archival purposes - a WPF program that modifies existing archives - renaming entries, removing entries from an archive, or adding new entries to an archive - a Windows Forms app that creates AES-encrypted zip archives for privacy of archived content. - a SSIS script that unzips or zips - An administrative script in PowerShell or VBScript that performs backup and archival. - a WCF service that receives a zip file as an attachment, and dynamically unpacks the zip to a stream for analysis - an old-school ASP (VBScript) application that produces a ZIP file via the COM interface for DotNetZIp - a Windows Forms app that reads or updates ODS files - creating zip files from stream content, saving to a stream, extracting to a stream, reading from a stream - creation of self-extracting archives. If all you want is a better DeflateStream or GZipStream class to replace the one that is built-into the .NET BCL, DotNetZip has that, too. DotNetZip's DeflateStream and GZipStream are available in a standalone assembly, based on a .NET port of Zlib. These streams support compression levels and deliver much better performance than the built-in classes. There is also a ZlibStream to complete the set (RFC 1950, 1951, 1952). And the price for all this: totally FREE. Example Usage Here's some C# code that creates a zip file.   using (ZipFile zip = new ZipFile())  {      // add this map file into the ""images"" directory in the zip archive      zip.AddFile(""c:\\images\\personal\\7440-N49th.png"", ""images"");      // add the report into a different directory in the archive      zip.AddFile(""c:\\Reports\\2008-Regional-Sales-Report.pdf"", ""files"");      zip.AddFile(""ReadMe.txt"");      zip.Save(""MyZipFile.zip"");  }  Here is some VB code that unpacks a zip file (extracts all the entries):    Dim ZipToUnpack As String = ""C1P3SML.zip""      Dim TargetDir As String = ""C1P3SML""      Console.WriteLine(""Extracting file {0} to {1}"", ZipToUnpack, TargetDir)       Using zip1 As ZipFile = ZipFile.Read(ZipToUnpack)           AddHandler zip1.ExtractProgress, AddressOf MyExtractProgress           Dim e As ZipEntry           ' here, we extract every entry, but we could extract            ' based on entry name, size, date, etc.           For Each e In zip1               e.Extract(TargetDir, ExtractExistingFileAction.OverwriteSilently)           Next      End Using    More code: See the examples , for VB, C#, Powershell, and so on. Read ODS files in C# (external article) Creating a zip in ASP.NET (external article by Scott Mitchell) Use DotNetZip in SSIS (external blog) More Information DotNetZip is a 100% managed code library that can be used in any .NET application - Console, Winforms, WPF, ASP.NET, Sharepoint, Web services apps, and so on. New for v1.9.1.6: Silverlight. It can also be used from scripting environments or COM-capable environments like Powershell scripts, VBScript, VBA, VB6, PHP, Perl, Javascript, and more. Whatever environment it is used from, DotNetZip produces zip files that are fully interoperable with Windows Explorer, as well as Java applications, apps running on Linux. It is designed to be simple and easy to use. DotNetZip is packaged as a single DLL, about 400k in size. It has no third-party dependencies. It is Medium Trust, so can be used on most hosters. Get zipping just by referencing the DLL. The library supports zip passwords, Unicode, ZIP64, stream input and output, AES encryption, multiple compression levels, self-extracting archives, spanned archives, and more. Click this link for information on Getting Started with DotNetZip in Visual Studio. The release includes the library, as well as some sample applications (with source) showing how to use the library. This is a look at the WinForms sample app that creates and zip files. It serves as my free replacement for the $29 WinZip tool: If you find DotNetZip useful, consider donating. I am accepting donations. Background and Details Frequently Asked Questions How does this Zip Library work? DotNetZip is packaged as a single DLL, a single assembly. It is fully managed code, written in C#, and provides support for reading and writing Zip archive files and streams. The main type is ZipFile, featuring methods like Add(), Extract() and Save(). There are string and int indexers for the entries of the ZipFile. There are properties for things like password protection, unicode and codepage support, and ZIP64 behavior. And there are progress events for Reading, Saving, and Extracting. What do I need, in order to be able to create and read zip files from within my application using this library? To use the zip capability in your applications, you need to be using the .NET Framework 2.0 or later, and you need the DotNetZip Devkit assembly. You do not need to download the sourcecode of DotNetZip in order to use it. You can simply download the binary. You can use the Zip library from any application, whether a console application, a Windows-Forms application, a server-based application like an ASP.NET page, a smart-device app, a Windows Service, a Silverlight app, or something else. You can use C#, VB.NET, COBOL.NET, IronPython, IronRuby, F#, or any other .NET language. You can also use COM environments, like ASP pages, Javascript, PHP, and others. To build your application, you can use the full version of Visual Studio, or one of the Visual Studio Express tools, or just a text editor. What if I just want to use the graphical tool? No problem. Just download the Utils zip or MSI from the latest releases tab, and you will get an easy-to-use fully-functional ZIP creation and extraction tool, a free functional-equivalent replacement for WinZip. It supports all the DotNetZip capability, like SFX, AES, ZIP64, arbitrary Code Pages, Unicode, zip comments, file and entry selection, spanned or segmented zips, and more. What do I need to build this library from the source? You need the .NET Framework SDK v3.5, or later; or, Visual Studio 2008 or later. While the library is usable by .NET 2.0 and later, to build it you need .NET 3.5 or later. This is because the source code uses features that were introduced in the C# v3.0 compiler, vars and array initializers and so on. The .NET 3.5 SDK is available here. I don't know if the library will build in Visual C# Express 2008; I never tried it. It should. Is this thing supported on Mono/Linux? It's not supported at all. But, it apparently works on Mono/Ubuntu. I don't test it that way. If you'd like to volunteer, let me know. How big is the library? As of version 1.9, the Ionic zip DLL is about 400k in size. The capability to produce self-extracting archives is optional, and amounts to about 200k of that. (there is a ""Reduced"" build of the library in the Devkit download, for those who are counting kilobytes). The Compact-Framework version of the library is about 130k. There is just one DLL. There is no other pre-requisite. Why would you want to produce yet another Zip Library? There are a number of options in the .NET world for manipulating zip files. Some are commercial libraries, some are open-source. You can even shoe-horn the System.IO.Packaging API, which is included in .NET 3.0, into a zip library. But there are tradeoffs for all of them. Some people are willing to give up commercial support for a lower price. Some people don't like the GPL. Some of those other packages are complex to use for zip files. Some of them don't have enough features (Eg, AES encryption, ZIP64, zip spanning). Some are too slow. What I found is that most people want something simple and easy to use, that works well, has good features, compresses effectively and fast, and is the right price. DotNetZip is that option. It's fast, it's simple, it's free. Does this library make self-extracting zip files? Yes. It can make self-extracting zip files or standard zip files. The self-extracting archives can either be Windows (GUI) apps or command-line applications. The self-extractors require .NET 2.0 on the computer doing the extraction. Does this library read self-extracting zip files? Yes. DotNetZip can read self-extracting archives (SFX) generated by WinZip, and WinZip can read SFX files generated by DotNetZip. Are the zip files this library makes compatible with the Java.util.zip classes in the Java class library? Yes. This library makes standard zip files. If you use some advanced features not supported by the built-in Java library, like AES encryption or ZIP64 or spanning, then the zip files won't be readable by Java. This is a shortcoming in the Java library, not in DotNetZip. If I create a zipfile with this library, can I open it from within a Java/PHP/Python/C/Perl application? From within WinRar/WinZIP? Yes. This library makes standard zip files, so anything that can read and write zip files, on any platform, can work with zipfiles generated from this library. In Java, you would use the java.util.zip library. In Python, you would use the zipfile module. Not all languages and environments support all ZIP features. For example, currently the Java library does not do ZIP64, and the zipfile module in Python does not support zipfile comments, while DotNetZip can create and read zip archives using those features. When mixing platforms, you need to be careful with interop testing. If you don't know what these features are, you probably don't need them and you won't run into interop problems. If I create a zipfile with a java/PHP/Python/C/Perl application, or with WinRar/WinZip/7zip, can I open it from within a .NET application, using this library? Yes. This library reads compliant zip files. Can I use the library from within VBScript, PHP, Perl, Javascript, or VB6? Yes, the library is ComVisible. A PHP script running on Windows can use the library to dynamically create an AES-encrypted zip file for download, for example. A .vbs script can extract files. An ASP page can create a zip file. There is sample code in the help file, and in the source distribution, covering all these. Can I use Windows Explorer to open the zip files that this library creates, and vice versa? Yes. This library reads and writes standard zip files. If you use extensions to the ZIP spec not supported by Windows, like ZIP64 or spanning or AES encryption, Windows Explorer will not be able to extract the files. Can I use the Archive Utility on MacOS to or Stuffit open the zip files that this library creates, and vice versa? Yes. This library reads and writes standard zip files. You may have to follow a format convention for the zip file. Does the library work with applications that depend on the .NET Compact Framework? Yes. DotNetZip is built for the .NET Compact Framework (v2.0) as well as for the regular .NET Framework. You can build a Smart Device application in Visual Studio 2008, that uses the capabilities of DotNetZip. Is there a version of the library built to work with Silverlight applications? Yes. New for v1.9.1.6, in July 2011, DotNetZip is built for Silverlight. Does the library support zero-length zip entries, zipfile comments, zip entry comments, zipping up empty directories, recursive directory traversal, zipping up selected files by filename (with wildcards), and password-protecting entries? Yes. Does the library handle ZIP64? Yes. The original ZIP specification allowed up to 65535 entries in a zip archive, and archive and entry sizes up to 4.2g. The ZIP64 extensions raise those restrictions, at the expense of compatibility and interoperability. DotNetZip can read or write ""standard"" zip files or ZIP64 zip files. Does the library do AES 128 or 256 encryption? Yes. DotNetZip's AES encryption is compatible with the WinZip AES-encryption extension to the PKWare ZIP specification. DotNetZip uses the same FIPS-197 compliant data format and approach. If you create an AES-encrypted ZIP file with DotNetZip, you will be able to view it and extract it in WinZip, and vice versa. Also, DotNetZip's AES will work with any other tool that is compatible with WinZip. NB: If you open an AES-encrypted ZIP file in Windows Explorer, whether generated by DotNetZip or some other tool, you will be able to view the list of files, but you won't be able to extract entries. Also, AES encryption is not available in Silverlight. Can an application that uses this library make a self-extracting, AES-encrypted, Unicode, ZIP64 zip file? Yes, if you want to, you can do that. Does this library support any compression algorithm other than deflate? No. Entries are either Stored or Deflated. Can the library read or create ""Split"" zip files? Yes. This was added in v1.9. Does this library use System.IO.Compression.DeflateStream for the DEFLATE capability? No. In earlier versions, it did. But the DeflateStream built-into the .NET Framework BCL exhibits anomalous compression behavior on previously compressed data, like mp3 or jpg files. DotNetZip includes a managed compression library, based on ZLIB. It's fast, fully DEFLATE compliant, and it compresses better than the built in version! And, the DeflateStream that is included in DotNetZip is available for any application to use, under the same terms as the rest of the DotNetZip library. Why would a developer not just use the Packaging APIs included in the .NET Framework 3.0? The Packaging APIs are optimized for producing .docx files and .xlsx files. This library is generally simpler and faster for creating or reading plain, generic zipfiles. This library supports ZIP features like ZIP64 or AES or split archives; the Packaging API does not. DotNetZip provides nice features like progress events and file selectors; the Packaging API does not. Why would a developer not just use the ZIP capability that is built into the Windows Shell? For the same kinds of reasons. The programming model for managed code apps is much nicer with DotNetZip, and DotNetZip is faster. The advanced features, for things like selecting entries from the zip file, or AES-encryption, or self-extracting archives, are not available using the shell library. Does the library support reading or writing encrypted or password protected zip files? Yes, this library helps applications read and write zip files that use passwords to protect the entries in the zip archive. Either PKZIP (""weak"") encryption or WinZip-compatible AES encryption. Does the library support the BZIP2 compression method within ZIP files? Yes. This feature is new for v1.9.1.6. Can Windows Explorer (""compressed folders"") read and extract the zip files created by this library if the zip has password protection? Yes. It just works. Can I use the DotNetZip library to read .docx files, .xslx files? Yes. They are just zip files. Some people use DotNetZip on Mono to produce or edit .xlsx or .docx files. Keep in mind, the Packaging APIs included in .NET 3.0 are optimized for producing .docx files and .xlsx files. Does the library support Unicode filenames and comments? Yes, the library can create and read zip files that have Unicode (UTF-8) filenames and comments. You can also specify arbitrary code pages when reading or writing zipfiles. But, Windows Explorer does not support UTF-8 encoded zip files. To read the zip you create, you will have to use a tool or library that supports unicode, such as WinRar, DotNetZip, etc. Can the library be used to read a zip file that has entries with filenames containing Chinese characters, produced by WinRAR? Yes. To do this you would specify the ""big5"" code page (cp 950) when reading the zip. In addition to Chinese, it can handle any code page. What about reading and writing zip files with other languages and code pages? Portugese? Hebrew? Arabic? Greek? Cyrillic? Norwegian? Finnish? etc? Yes. Just specify the appropriate code page when reading or writing the zip archive. Can Windows Explorer (""compressed folders"") read the zip files created by this library if the zip has entries with Unicode-encoded filenames? No. But that is a limitation of Windows XP and Windows Vista. It is not a limitation of this library. Can DotNetZip read or write RAR files? No. DotNetZip does zip files. Can WinRAR read the zip files produced by DotNetZip? Yes. But remember, DotNetZip does not produce RAR files. DotNetZip produces ZIP files. WinRAR can read ZIP and RAR files, I believe. Is there documentation for the library? Yes, there is a CHM file in MSDN helpfile format, generated from the xml comments in the code. All the public interfaces are thoroughly documented. There are tons of code examples in the doc. You can view the CHM online I cannot view the CHM documentation. The error is: ""This program cannot display the webpage."" or, ""The address is invalid."" Is there an error with the chm file? No, there is no problem with the CHM file. You have likely encountered a problem with Windows protection of files downloaded from less trusted locations. To view the chm file, within Windows Explorer, right-click on the CHM file, select properties, and Unblock it (button in lower part of properties window). Does the library support zipping to a stream? Or unzipping from a stream? Yes, you can zip up files and Save the zip archive to a stream. As well you can Read a zip archive from an open stream - I use this for embedded resources in apps: I call GetManifestResourceStream(), and then unzip that resource. Reading and writing streams complements the capability of being able to Save to a plain file or read from a plain file. The Save-to-a-stream capability allows you to write a zip archive out to, for example, the ASP.NET Response.Output stream, without creating an intermediate file. Very nice for ASP.NET applications. Ok, the library can write a zip archive to a stream, and read a zip from a stream, But... can the library add an entry to a zipfile, reading content from a stream? can the library unzip a single entry into a stream? Can an application read an entry as a stream? Yes. Yes. Yes. Unlike some other libraries, in most cases DotNetZip handles the streaming; your application does not need to implement a Read/Write data pump. The application needs only to open the streams. Using the stream support, you could, for example, open a zip archive, and then modify the files in the archive, and Save out to a Response.OutputStream in ASP.NET, without ever writing a file to the disk. All the zip file content can be manipulated in memory (using MemoryStream for example). Does this library allow removal of entries from zip files, or updating of entries in zip files? Yes. Do I have to write programs to take advantage of this thing? or is there some other way I can take advantage of the DotNetZip? Typically people will embed this DLL into an application. But, the DotNetZip downloads includes a package of utility applications: A Windows GUI tool, and a set of command-line tools that utilize the library, that you can use out of the box to zip and unzip. I drop these in my own bin directory and it allows me to zip and unzip from the command line or from batch files. Also, you can take advantage of the DotNetZip library from within Powershell, if that is your bag. Creating or extracting zips within a script is pretty handy. Can I embed the source for DotNetZip into my own project? Yes - that's allowed by the license. But you may want to think about just redistributing the binary DLL - it is a much easier option. Can I distribute the binary DLL with my own project? Yes - that's allowed by the license. What's the mainstream approach for using DotNetZip in a 3rd party app? The mainstream approach is to distribute the binary DLL with your own app. What if I want to use DotNetZip in my app, but I don't want to distribute it as a separate DLL? You have options. The most mainstream and generally easiest way to embed DotNetZip into your application is to redistribute the DLL. But if you don't want to do that, there are alternatives. One option is to embed the source for DotNetZip into your own project. This may seem like the obvious approach, but it is probably not what you want, unless you really need to modify the source of DotNetZip. A better approach is to merge the DLL into your EXE, with ILMerge: http://www.microsoft.com/downloads/details.aspx?familyid=22914587-b4ad-4eae-87cf-b14ae6a939b0&displaylang=en This works with your app regardless of what language it uses, whether it is a Winforms app, a WPF app, a service, etc. A final option is to embed the DLL as a resource into your application, and provide an AssemblyResolve event that reads the DLL from the resource stream. Which option you choose depends on your requirements. Last edited Jan 16, 2013 at 9:08 PM by Cheeso, version 144 download current v1.9.1.8 DotNetZip - Latest Stable date Mon Jul 11, 2011 at 7:00 AM status Stable downloads 457,567 rating       42 ratings Review this release Most Helpful Reviews      There is a pretty major bug in the code. I am working to figure it out. Another chap logged it before me: Deadlock in ParallelDeflat... (more)      This is ridiculous!! I am forever trying to work out bugs and keep up with these release's but the build number is not changing yet ... (more) View all reviews Ads by Developer Media activity downloads 1327 Days: 7 7 30 30 All All Details © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"An open-source project that delivers a.NET library for handling ZIP files, and some associated tools. (fork of )"	"true"
"Compression"	"SharpZipLib"	"http://icsharpcode.github.io/SharpZipLib/"	"a Zip, GZip, Tar and BZip2 library written entirely in C# for the.NET platform"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"658"	"123"	"274"	"GitHub - icsharpcode/SharpZipLib: #ziplib is a Zip, GZip, Tar and BZip2 library written entirely in C# for the .NET platform. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 123 Star 658 Fork 274 icsharpcode/SharpZipLib Code Issues 66 Pull requests 10 Wiki Pulse Graphs #ziplib is a Zip, GZip, Tar and BZip2 library written entirely in C# for the .NET platform. http://icsharpcode.github.io/SharpZipLib/ 681 commits 2 branches 8 releases 19 contributors C# 95.6% Visual Basic 4.2% Other 0.2% C# Visual Basic Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 0.86.0.518 0.85.5.452 0.85.4.369 0.85.3.365 0.85.2.329 0.85.1.271 0.85.0.0 0.84.0.0 Nothing to show New pull request Latest commit 00c3c91 May 21, 2016 McNeight Merge pull request #117 from silijon/issue-116-trailing-garbage-not-i… … …gnored  John,  Thank you for your contribution. This resolves issue #116.  -Neil Permalink Failed to load latest commit information. .github Merge branch 'master' of https://github.com/McNeight/SharpZipLib into… Apr 26, 2016 Build Remove extra angle bracket and change directory for test results Apr 28, 2016 Documentation MIT License May 16, 2016 ICSharpCode.SharpZipLib.Samples Merge branch 'master' of https://github.com/McNeight/SharpZipLib into… May 11, 2016 ICSharpCode.SharpZipLib.Tests Fixed GzipInputStream to complete reading gracefully if at least one … May 19, 2016 ICSharpCode.SharpZipLib Fixed GzipInputStream to complete reading gracefully if at least one … May 19, 2016 .editorconfig Merge branch 'master' of https://github.com/McNeight/SharpZipLib into… Apr 26, 2016 .gitattributes Merge branch 'master' of https://github.com/McNeight/SharpZipLib into… Apr 26, 2016 .gitignore Build & File Restructuring Apr 6, 2016 .travis.yml Merge branch 'master' of https://github.com/McNeight/SharpZipLib into… May 11, 2016 CONTRIBUTING.md Merge branch 'master' of https://github.com/McNeight/SharpZipLib into… Apr 26, 2016 GlobalAssemblyInfo.cs MIT License May 16, 2016 ICSharpCode.SharpZipLib.sln Merge branch 'master' of https://github.com/McNeight/SharpZipLib into… Apr 26, 2016 ICSharpCode.SharpZipLib.snk Merge branch 'master' of https://github.com/McNeight/SharpZipLib into… Apr 26, 2016 LICENSE.txt MIT License May 16, 2016 README.md MIT License May 16, 2016 Rebracer.xml Merge branch 'master' of https://github.com/McNeight/SharpZipLib into… Apr 26, 2016 appveyor.yml MIT License May 16, 2016 README.md SharpZipLib Build Server Operating System Framework Status AppVeyor Windows Server 2012 .NET Framework 4.5 Travis Ubuntu 12.04.5 LTS Mono 4.2.3 MacOSX 13.4.0.0 Mono 4.2.3 Bitrise (Soon) OSX Xamarin.iOS OSX Xamarin.Android OSX Xamarin.Mac Introduction SharpZipLib (#ziplib, formerly NZipLib) is a compression library that supports Zip files using both stored and deflate compression methods, PKZIP 2.0 style and AES encryption, tar with GNU long filename extensions, GZip, zlib and raw deflate, as well as BZip2. Zip64 is supported while Deflate64 is not yet supported. It is implemented as an assembly (installable in the GAC), and thus can easily be incorporated into other projects (in any .NET language). The creator of SharpZipLib put it this way: ""I've ported the zip library over to C# because I needed gzip/zip compression and I didn't want to use libzip.dll or something like this. I want all in pure C#."" SharpZipLib was originally ported from the GNU Classpath java.util.zip library for use with SharpDevelop, which needed gzip/zip compression. bzip2 compression and tar archiving were added later due to popular demand. The SharpZipLib homepage has precompiled libraries available for download, a link to the forum for support, release history, samples and more. License This software is now released under the MIT License Previous versions were released under the GNU General Public License, version 2 with an exception which allowed linking with non-GPL programs. Namespace layout Module Namespace BZip2 implementation ICSharpCode.SharpZipLib.BZip2.* Checksum implementation ICSharpCode.SharpZipLib.Checksums.* Core utilities / interfaces ICSharpCode.SharpZipLib.Core.* Encryption implementation ICSharpCode.SharpZipLib.Encryption.* GZip implementation ICSharpCode.SharpZipLib.GZip.* Tar implementation ICSharpCode.SharpZipLib.Tar.* ZIP implementation ICSharpCode.SharpZipLib.Zip.* Inflater/Deflater ICSharpCode.SharpZipLib.Zip.Compression.* Inflater/Deflater streams ICSharpCode.SharpZipLib.Zip.Compression.Streams.* Credits SharpZipLib was initially developed by Mike Krüger. Past maintainers are John Reilly and David Pierson. The current maintainer is Neil McNeight. And thanks to all the people that contributed features, bug fixes and issue reports. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/icsharpcode/SharpZipLib"	"a Zip, GZip, Tar and BZip2 library written entirely in C# for the.NET platform"	"true"
"Continuous Integration"	"TeamCity"	"http://www.jetbrains.com/teamcity/"	"Ready to work, extensible and developer-friendly build server — out of the box"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"TeamCity — Your 24/7 Build Engineer All Tools IDEs .NET & Visual Studio Team Tools Languages Store Support We Are JetBrains Check out our IDEs IntelliJ IDEA The most intelligent Java IDE PhpStorm Lightning-smart PHP IDE PyCharm Python IDE for professional developers RubyMine The most intelligent Ruby IDE WebStorm The smartest JavaScript IDE AppCode Smart IDE for iOS/OS X development CLion A smart cross-platform IDE for C and C++ DataGrip Your Swiss Army knife for databases & SQL Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for .NET and Visual Studio ReSharper Visual Studio extension for .NET developers ReSharper C++ Visual Studio extension for C++ developers dotTrace .NET performance profiler dotMemory .NET memory profiler dotCover .NET unit test runner and code coverage tool dotPeek Free .NET decompiler and assembly browser Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for teams TeamCity Powerful Continuous Integration out of the box YouTrack Issue tracker designed for development teams Upsource Code review and repository browsing Hub JetBrains team tools, integrated Check out our languages and related tools Kotlin Programming language for JVM & Android MPS DSL development environment Store Pricing and licensing options for everyone, from free plans for students to volume licensing for companies. JetBrains Toolbox Team Tools Purchase Terms FAQ Contact Sales Support Questions or problems? We want to help! Dedicated support teams can answer product- or purchase-related questions. Technical Support Contact Sales Commitment Community Support Webinars Early Access Programs We Are JetBrains We make professional software development a more productive and enjoyable experience. About Us People Customers & Awards Press Room Partners & Resellers Technology Partners Careers Contacts Search TeamCity What's New Features Docs & Demos Plugins Licensing & Upgrade Download Powerful Continuous Integration out of the box Download Free or Take a tour Benefits Why TeamCity is better for you for developers for admins for build engineers for managers for pandas Perform better Do you practice a traditional approach to Continuous Integration, or prefer Feature Branches with Git or Mercurial? Either way TeamCity has got you covered with a wide range of developer-oriented features to take your team's performance to the next level. Start saving your time from day one Whether you develop in Java, .NET or for mobile platforms, TeamCity has the essentials you need to get started in a matter of minutes, right inside the installer package. Extend as you go Whenever you need special additional functionality, choose from over 100 ready-to-use plugins. Or, add custom features by creating your own plugins using the TeamCity Open API. Enjoy all-around customer support Never feel left alone. Get help from various support channels including a public issue tracker, community forum, and comprehensive online documentation. Rely on scalable architecture and licensing TeamCity gets smarter as you get bigger. Its licensing model allows you to start completely free, and smoothly expand your server capacities as you need more power. Integrate and deploy continuously Initially a Continuous Integration server, TeamCity has encompassed all the features you expect from a mature Continuous Deployment platform. Today it is the best choice you can make for both. Pandas love watching your builds turning green even more than they love bamboo. TeamCity makes them happy. Get teamcity It’s absolutely free Professional edition free forever access to all product features support via the forum and issue tracker 20 build configurations 3 build agents perfect for small teams and individual developers Get started now When you feel you’ve grown out of it, you can always move on to Enterprise edition. Features Your 24/7 Build Engineer Powerful Continuous Integration Remote run and pre-tested commit Build, check and run automated tests on the server even before committing your changes – keeping your code base clean at all times. On-the-fly build progress reporting Don’t wait for a build to finish to discover that something is wrong. Smart Configuration Project hierarchy Form your project tree to inherit parent settings and permissions. Templates Create templates with common settings and inherit any number of build configurations from it. Build chains and dependencies Break down a single build procedure into parts that can be run in sequence or in parallel. Comprehensive VCS integration Feature Branches Using feature branches for development? TeamCity will detect and build changes in your branch, as well as merge it to the master. Versioned Settings Synchronize your project settings with VCS, and never lose track of them again. more features What’s new What’s new in TeamCity 9 Move projects among servers Plan less, do more. Preserve full project and changes history, as well as user profiles, when moving your projects from one server to another. Store settings in Version Control Never lose track of your settings! Store your project settings in a Version Control System just like you do with your source code, and use your favorite tool to review and audit them. Always be in control of your building process. Zero maintenance downtime Downtime is no longer an issue. From now on TeamCity runs server clean-up in the background, so that you can enjoy zero downtime and allocate all the server time for you builds. more new features Testi monials 30,000+ customers are building their success with TeamCity You’re in good company! What our customers say @hey__ben Kicked off a build from the pub. I love @teamcity Thank you for such an incredibly good product which is so easy to use and helps make our development team so productive. Tim Kent, BNP Paribas If you really know what you're doing, you can clearly see how superior TC is. Evgeny Goldin, Build Engineer @maspwr In the land of continuous integration, @teamcity has been my best experience thus far. Check it out! @akosma I'm really impressed with JetBrain's @teamcity — outstanding is the word. My new hobby, while struggling with Jenkins, is to check if the thing I'm doing is supported natively in @teamcity (spoiler: it always is). @pauldambra via Twitter Tell me about new product features as they come out Thanks for your request! @teamcity on twitter Bug and issue tracker Community forum TeamCity blog Also on JetBrains My account Newsletter Contact Follow JetBrains © 2000—2016 JetBrains s.r.o. All rights reserved. Developed with drive and IntelliJ IDEA Privacy Policy | Terms of Use"	"null"	"null"	"Ready to work, extensible and developer-friendly build server — out of the box"	"true"
"Continuous Integration"	"CruiseControl.NET"	"http://www.cruisecontrolnet.org/"	"an Automated Continuous Integration server, implemented using the.NET Framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"CruiseControl.NET CruiseControl.NET Search Home Projects All Projects ? Register Sign in Login Password Stay logged in Lost password | Register CruiseControl.NET Home Welcome to CruiseControl.NET, an Automated Continuous Integration server, implemented using the .NET Framework. Get started with CruiseControl.NET¶ CruiseControl.NET Wiki - Documentation, Downloads, Support, ... About CruiseControl.NET - What is CruiseControl.NET? Installation - How to install and run CruiseControl.NET Configuration - How to configure CruiseControl.NET Communicate and Support¶ Support - Get ""free"" help through the community Mailing lists Public chat Hosting infrastructure sponsored by Nauck IT KG Latest news CruiseControl.NET: CCNet 1.8.5 Released Most important updates : ° Support for Tfs/VS 2013 ° Git does not fetch entire changeset with a new project see setting MaxAmountOfModificationsToFetch in Git (default 100) ° Dashboard install in IIS 7 works Added by Ruben Willems about 2 years ago CruiseControl.NET: CCNet 1.8.4 Released This update mainly has WebDashboard and sourcecontrol improvements, also some issues are fixed in the parallel task. Added by Ruben Willems almost 3 years ago CruiseControl.NET: CCNet 1.8.3 Released (1 comment) Highlights : * Several Parallel Task fixes * the syntax highlighter disables itself if logs are too big (default 50k) * Several preprocessor fixes Added by Ruben Willems over 3 years ago CruiseControl.NET: CCNet 1.8.2 Released (1 comment) There was a breaking bug in the 1.8.1 in the power shell task. 1.8.0 did not have this bug, only 1.8.1. Added by Ruben Willems almost 4 years ago CruiseControl.NET: CCNet 1.8.1 Released (1 comment) The first fix for 1.8 has been released : 1.8.1 Added by Ruben Willems almost 4 years ago View all news Latest projects CCTray (09/05/2011 09:34 pm) A client System Tray application for CruiseControl.NET that enables you to see 'at a glance' the state of your projects from any machine on your network. Hosting infrastructure sponsored by Nauck IT KG CruiseControl.NET (09/05/2011 09:25 pm) Welcome to CruiseControl.NET, an Automated Continuous Integration server, implemented using the .NET Framework. Get started with CruiseControl.NET...¶   Powered by ChiliProject Loading..."	"null"	"null"	"an Automated Continuous Integration server, implemented using the.NET Framework"	"true"
"Package Management"	"MyGet"	"http://www.myget.org/"	"Hosted Package Repository for NuGet, NPM, Bower and VSIX. Also provides CI as-a-Service."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Personal and Enterprise NuGet hosting - MyGet - Hosting your NuGet, Npm, Bower and Vsix packages MyGet - Hosting your NuGet packages - NuGet Server Features Pricing Gallery Docs Blog Contact Sign In Hosted package server Friction-free Continuous Integration & Delivery for your NuGet, npm, Bower and Vsix packages Get started for free! Focus on building and shipping great software. Create NuGet feeds, npm, Bower and Vsix repositories with your own packages and those from other package sources such as NuGet.org or Npmjs.com. NuGet Npm Bower Vsix Free it's free! ✖ No advanced features ✖ No private feeds ✖ No private contributors 500 MB storage Build Services Symbols Services Get started for free Starter $ 9 /m ✔ Advanced features 1 private feeds 2 private contributors 1 GB storage Build Services Symbols Services Buy Now Professional $ 25 /m ✔ Advanced features 5 private feeds 15 private contributors 4 GB storage Build Services Symbols Services Buy Now Enterprise from $ 699 /y excl. VAT ✔ All features Your own subdomain Starts at 25 users / 10 GB More users / storage possible! Build Services Symbols Services Get a quote Free for open source - See available pricing plans - Learn more about features Unlimited public and private NuGet, Npm, Bower and Vsix MyGet provides hosted NuGet, Npm, Bower and Vsix for individual developers, open source projects and corporate development teams. Create feeds and registries for your developers, clients or the entire world using secured access. Work together using activity streams and RSS. Manage your dependencies Feeds and registries can contain your own libraries, artifacts as well as third party packages. In fact, packages can come from your build server, NuGet.org, OneGet, Npmjs.com, Bower.io and Visual Studio Team Services, GitHub, BitBucket or CodePlex where we transform your source code into a compiled NuGet package. Consume dependencies from Visual Studio or deploy them using OctopusDeploy.com. MyGet in short Public and private hosted NuGet, Npm, Bower and Vsix with granular security, for you and your team Packages from NuGet.org, Npmjs.com, Bower.io or any other package source, proxied into one URL Build Services: package, version & publish from Visual Studio Team Services, GitHub, BitBucket and CodePlex Compatible with the tools you know and love License management of consumed packages Enterprise subscription for larger teams with management dashboard We do NuGet, Npm, Bower and Vsix. Give us a try! Sign up for a free trial! Switch to a free or paid plan at any time Package management Create public feeds and repositories for free. Host your continuous integration, staging and release packages. Collaboration Development is a team discipline. MyGet allows you to work together on software and provides insights in what is happening. Wide compatibility We're compatible with the tools of your choice. We support Visual Studio, with NuGet, Paket, Chocolatey, Npm, Bower, TeamCity and many, many more. Secure by default Manage which feeds and packages can be accessed by specific team members with fine-grained security controls. Have it your way Include packages from NuGet.org, Npmjs.com, Bower.io. Upload your own or use MyGet build services to build GitHub, BitBucket and CodePlex projects. Know what's going on Visualize dependencies between packages and projects, build a package promotion flow across different environments. Easy debugging MyGet offers advanced debugging capabilities of packages, even without having the source code on your system. Reliable Hosted in secure datacenters, your intellectual property is safe with us. All communication with MyGet runs over 128 bit SSL, signed with a 2048 bit private key. Our satisfied customers read testimonials and case studies What others are saying MyGet support is amazing! They submit a PR to fix my broken build script when I make a support request.Phil Haack I should have known about MyGet earlier, what an awesome tool.Poul K. Sørensen 3min response time + fix, that's what I call support... Keep up the awesome work MyGet!Philipp Aumayr Get started for free! Stay up to date! Be among the first to know about upcoming features, tips and tricks and news around MyGet Learn more All Features Testimonials & Case Studies Pricing Company Support and Help FAQ MyGet Security Explained Support Email: support@myget.org News and Updates Our Blog → Follow us on Twitter → Feedback via UserVoice → Uptime status → MyGet. Hosted NuGet, NPM, Bower and Vsix. © 2011-2016 MyGet (TechTomato BVBA) Terms of Service | Disclaimer | Privacy MyGet v2.1.0.83 | NuGet v3.5.0.0 | Hosted on Microsoft Azure ""NuGet"" and ""NuGet Gallery"" are © .NET Foundation"	"null"	"null"	"Hosted Package Repository for NuGet, NPM, Bower and VSIX. Also provides CI as-a-Service."	"true"
"Package Management"	"Free for OSS"	"https://www.myget.org/opensource"	"Hosted Package Repository for NuGet, NPM, Bower and VSIX. Also provides CI as-a-Service."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Open Source - MyGet - Hosting your NuGet, Npm, Bower and Vsix packages MyGet - Hosting your NuGet packages - NuGet Server Features Pricing Gallery Docs Blog Contact Sign In Home Pricing Open Source back Open Source We offer an Open Source subscription for free to all non-commercial open source projects. To qualify for an Open Source subscription, the project must meet the OSD specification and must have been active in the past three months. Your latest contibution to the project must have happened in the past month. Sounds like you and your project? We'd be very happy to support you. Simply fill out the form below and we'll get in touch. Name E-mail address Your current MyGet username Project name Project URL How long has the project been around? months Project source control page (GitHub / BitBucket / CodePlex / ...) Project license Your role Are paid services being offered? e.g. premium support / other Additional notes/comments (let us know if you need higher quota)   Open Source it's free! Public feeds Community feeds ✖ No private feeds 1 GB storage Packages can be 100 MB Promote feeds in the gallery Build Services Symbols Services Learn more All Features Testimonials & Case Studies Pricing Company Support and Help FAQ MyGet Security Explained Support Email: support@myget.org News and Updates Our Blog → Follow us on Twitter → Feedback via UserVoice → Uptime status → MyGet. Hosted NuGet, NPM, Bower and Vsix. © 2011-2016 MyGet (TechTomato BVBA) Terms of Service | Disclaimer | Privacy MyGet v2.1.0.83 | NuGet v3.5.0.0 | Hosted on Microsoft Azure ""NuGet"" and ""NuGet Gallery"" are © .NET Foundation"	"null"	"null"	"Hosted Package Repository for NuGet, NPM, Bower and VSIX. Also provides CI as-a-Service."	"true"
"Continuous Integration"	"AppVeyor"	"http://www.appveyor.com/"	".NET Continuous Integration and Deployment as a service."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Continuous Integration and Deployment service for Windows developers - Appveyor AppVeyor Pricing Documentation Support Blog About Sign in #1 Continuous Delivery service for Windows Your new build server in a cloud. Start in minutes. Enjoy faster results. Sign up for free Free for open-source projects. Plans start from $29/month. AppVeyor is a breath of fresh air! No Setup Required You care about your project only - we provide build infrastructure. Robust & Secure Keep your code safe with isolated build environments. Continuous Delivery Build, test, deploy with us - no other tools required. Our great customers and cool projects Sign up for free Here’s what you get with AppVeyor: No setup required and zero maintenance Developer-friendly build configs using UI or YAML - our config won’t kill you! Isolated build workers, pristine environment for every build, admin access to build workers Blazingly fast builds on dedicated hardware with SSD drives Built-in deployment and NuGet server Multi-branch builds to support your workflow Team work with granular permissions First-class support and vibrant community Pay-as-you-go, no upfront investment in expensive software Sign up for free “AppVeyor is the only modern CI server for .NET developers out there. It is years ahead of its competition. We will never use anything else again.” Javier Muniz, CTO and co-founder, Granicus About Pricing Documentation Support Blog Terms of service Privacy policy EULA Status Twitter"	"null"	"null"	".NET Continuous Integration and Deployment as a service."	"true"
"Cryptography"	"BouncyCastle"	"https://bouncycastle.org/"	"Together with the.Net System.Security.Cryptography, the reference implementation for cryptographic algorithms on the CLR."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"bouncycastle.org The Legion of the Bouncy Castle entry wiki issue tracker donate Java home C# home object identifiers about   Follow us on:       Welcome Welcome to the home of the Legion of the Bouncy Castle. A fun place to stay, if you've got some time to kill. Here at the Bouncy Castle, we believe in encryption. That's something that's near and dear to our hearts. We believe so strongly in encryption, that we've gone to the effort to provide some for everybody, and we've now been doing it for over 15 years! The Bouncy Castle Crypto APIs are looked after by an Australian Charity, the Legion of the Bouncy Castle Inc., which looks after the care and feeding of the Bouncy Castle APIs. If you would like to help support this effort please see our donations page or purchase a support contract through Crypto Workshop. Requests to sponsor specific work on the APIs are also most welcome. The Bouncy Castle APIs currently consist of the following: A lightweight cryptography API for Java and C#. A provider for the Java Cryptography Extension and the Java Cryptography Architecture. A clean room implementation of the JCE 1.2.1. A library for reading and writing encoded ASN.1 objects. Lightweight APIs for TLS (RFC 2246, RFC 4346) and DTLS (RFC 4347). Generators for Version 1 and Version 3 X.509 certificates, Version 2 CRLs, and PKCS12 files. Generators for Version 2 X.509 attribute certificates. Generators/Processors for S/MIME and CMS (PKCS7/RFC 3852). Generators/Processors for OCSP (RFC 2560). Generators/Processors for TSP (RFC 3161 & RFC 5544). Generators/Processors for CMP and CRMF (RFC 4210 & RFC 4211). Generators/Processors for OpenPGP (RFC 4880). Generators/Processors for Extended Access Control (EAC). Generators/Processors for Data Validation and Certification Server (DVCS) - RFC 3029. A signed jar version suitable for JDK 1.4-1.7 and the Sun JCE. The lightweight API works with everything from the J2ME to the JDK 1.7 and there is also an API in C# providing equivalent functionality for most of the above. For further details have a look in either our Java project pages or our C# project pages where you can find downloads, mailing lists, and other resources. If you want to provide feedback directly to the members of The Legion then please use feedback-crypto@bouncycastle.org If you need a support agreement or have issues with the Bouncy Castle APIs that may require consulting, mentoring, or education, please contact us at Crypto Workshop         News Java FIPS API submitted to the CMVP. Friday 8th April 2016 The BC FIPS Java API has now passed algorithm and lab testing and has been submitted to the CMVP. If you are interested in seeing the algorithm set this is built around, the User Guide for BC FIPS Java and the Draft Security Policy are now available. Please contact us at office@bouncycastle.org for further details. Java Release 1.54 is now available for download. Wednesday 30th December 2015 This is primarily a security release concerning (D)TLS 1.2. As a precaution, validation has been added to assure that the signature algorithm received in DigitallySigned structures is actually one of those offered (in signature_algorithms extension or CertificateRequest). Users that are customizing the signature_algorithms extension, or running a server supporting client authentication, are advised to double-check that they are not offering any signature algorithms involving MD5. In terms of other changes: the PKCS#7 ANY type and RFC 3370 are now supported by the CMS API, and Blake2b is now supported by the provider. Other bug fixes and improvements have been made as well. For more details go to our latest releases page to download the new version and see the release notes You can also find the latest versions on one of our mirrors: polydistortion.net C# Release 1.8.1 is now available for download. Monday 28th December 2015 This release is largely a security release for (D)TLS 1.2, with extra validation now added to the (D)TLS 1.2 implementation to assure the signature algorithm in DigitallySigned structures. The release also fixes issues with DTLS record-layer version handling and adds support for ASN.1 GraphicString and VideotexString. For more details go to our C# pages for downloads and releasenotes. Sponsored Links   Site hosted by Tau Ceti Co-operative Ltd. Graphics provided by Geoff Hook. Layout and design by Travis Winters. Java and JCE are registered trademarks of Oracle ®. C# is a registered trademark of Microsoft ®. Unless otherwise stated, all content is Copyright © 2013 Legion of the Bouncy Castle Inc. (ABN 84 166 338 567) All rights reserved."	"null"	"null"	"Together with the.Net System.Security.Cryptography, the reference implementation for cryptographic algorithms on the CLR."	"true"
"Cryptography"	"HashLib"	"http://hashlib.codeplex.com/"	"HashLib is a collection of nearly all hash algorithms you've ever seen, it supports almost everything and is very easy to use"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"HashLib - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In HashLib home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe Project Description Here you can find implementations of many hashing algorithms (including all sha3 round 2 and 3 candidates). You can hash files, streams, common types of data. Supported algorithms: non-cryptographics 32-bits hash algorithms: AP, BKDR, Bernstein, Bernstein1, DEK, DJB, ELF, FNV, FNV1a, JS, Jenkins3, Murmur2, Murmur3, OneAtTime, PJW, RS, Rotating, SDBM, ShiftAndXor, SuperFast non-cryptographic 64-bits algorithms: FNV, FNV1a, Murmur2, SipHash non-cryptographic 128-bits algorithms: Murmur3 checksum algorithms: Adler32, CRC32, CRC64 all algorithms build in System.Security.Cryptography: MD5, RIPEMD160, SHA1, SHA256, SHA384, SHA512 cryptographic algorithms: GOST, Grindahl, HAS160, Haval, MD2, MD4, MD5, Panama, RadioGatun, RIPEMD, RIPEMD128, RIPEMD160, RIPEMD256, RIPEMD320, SHA0, SHA1, SHA224, SHA256, SHA384, SHA512, Snefru, Tiger, Tiger2, Whirlpool SHA-3 round 2 candidates: Blake, BlueMidnightWish, CubeHash, Echo, Fugue, Groestl, Hamsi, JH, Keccak, Luffa, Shabal, SHAvite3, SIMD, Skein (as reference I had used optimized x64 version without assembler and SIMD support). SHA-3 round 3 candidates: Blake, Groestl, JH, Keccak, Skein (as reference I had used optimized x64 version without assembler and SIMD support). HMAC for any from above. Example  using System; using System.Diagnostics; using System.IO; using HashLib; using System.Linq; using System.Text;  namespace Examples {     public class Program     {         public static void Main(string[] args)         {             // Prepare temp file.             string file_name = Path.GetTempFileName();             using (var fs = new FileStream(file_name, FileMode.Open))             {                 byte[] v = new byte[256];                 new Random().NextBytes(v);                 fs.Write(v, 0, v.Length);             }              // Prepare stream.             MemoryStream ms = new MemoryStream(new byte[] { 2, 3, 4, 5, 6, 7 });              // Choose algorithm. Explore HashFactory for more algorithms.             IHash hash = HashFactory.Crypto.CreateSHA256();              // Hash data immediate.             HashResult r = hash.ComputeString(""test"", Encoding.ASCII);              // Hash data.             hash.Initialize(); // Not mandatory after Compute and TransformFinal             hash.TransformULong(6);             hash.TransformString(""test"");             r = hash.TransformFinal();              // Calculate 32-bits hash.             hash = HashFactory.Checksum.CreateCRC32_IEEE();             uint crc32 = hash.ComputeString(""test"", Encoding.ASCII).GetUInt();              // For CRCs you may specify parameters.             hash = HashFactory.Checksum.CreateCRC32(                 HashLib.Checksum.CRC32Polynomials.IEEE_802_3, uint.MaxValue, uint.MaxValue);             hash = HashFactory.Checksum.CreateCRC32(                 0xF0F0F0F0, uint.MaxValue, uint.MaxValue);              // Most hashes can be created in two ways.             hash = HashFactory.Crypto.CreateHaval(HashRounds.Rounds3, HashSize.HashSize256);             hash = HashFactory.Crypto.CreateHaval_3_256();              // Calculate 64-bits hash.             hash = HashFactory.Hash64.CreateMurmur2();             ulong crc64 = hash.ComputeString(""test"", Encoding.ASCII).GetULong();              // Calculate hash with key.             var hash_with_key = HashFactory.Hash128.CreateMurmur3_128();             hash_with_key.Key = new TomanuExtensions.Utils.MersenneTwister().NextBytes(hash_with_key.KeyLength.Value);             r = hash_with_key.ComputeString(""test"", Encoding.ASCII);             // This will restore default key.             hash_with_key.Key = null;              // Get some information about algorithm. BlockSize has only informative meaning.             System.Console.WriteLine(""{0}, {1}, {2}"", hash.BlockSize, hash.HashSize, hash.Name);              // Here you can find algorithms grouped by its properties.             foreach (var h in Hashes.CryptoAll)                 System.Console.WriteLine(((IHash)Activator.CreateInstance(h)).Name);             foreach (var h in Hashes.CryptoNotBuildIn)                 System.Console.WriteLine(((IHash)Activator.CreateInstance(h)).Name);             foreach (var h in Hashes.CryptoBuildIn)                 System.Console.WriteLine(((IHash)Activator.CreateInstance(h)).Name);             foreach (var h in Hashes.Checksums)                 System.Console.WriteLine(((IHash)Activator.CreateInstance(h)).Name);             // ... And more                          // Hash stream.             r = hash.ComputeStream(ms);             ms.Position = 2;             r = hash.ComputeStream(ms); // Compute all bytes starting from 2             ms.Position = 3;             r = hash.ComputeStream(ms, 2); // Compute 2 bytes starting from 3              hash.TransformInt(111);             ms.Position = 0;             hash.TransformStream(ms);             r = hash.TransformFinal();              // Hash file             r = hash.ComputeFile(file_name);             r = hash.ComputeFile(file_name, 10); // Compute all bytes starting from 10             r = hash.ComputeFile(file_name, 12, 10); // Compute 10 bytes starting from 12.              hash.TransformInt(111);             hash.TransformFile(file_name);             r = hash.TransformFinal();              // Calculate HMAC.             IHMAC hmac = HashFactory.HMAC.CreateHMAC(HashFactory.Crypto.CreateSHA256());             hmac.Key = Converters.ConvertStringToBytes(""secret"", Encoding.ASCII);             r = hmac.ComputeString(""test"", Encoding.ASCII);             Debug.Assert(hmac.KeyLength == null, ""NULL means key can be any length"");              // Get System.Security.Cryptography.HashAlgorithm wrapper for algorithms from this library.             System.Security.Cryptography.HashAlgorithm hash2 = HashFactory.Wrappers.HashToHashAlgorithm(hash);              // And back.             hash = HashFactory.Wrappers.HashAlgorithmToHash(hash2);               // Some algorithms have fast specialized methods for calculating hashes for all data types.              // They are designed for calculating good-behaving hash codes for hash-tables.             hash = HashFactory.Hash32.CreateMurmur2();             Debug.Assert(hash is IFastHash32);              // Some algorithms can calculated hashes only when they had all needed data,              // they accumulated data to the very end.             hash = HashFactory.Hash32.CreateMurmur2();             Debug.Assert(hash is INonBlockHash);              // Use build-in cryptography hash algorithms.             hash = HashFactory.Crypto.BuildIn.CreateSHA256Cng();              // Delete temp file.             new FileInfo(file_name).Delete();         }     } }  HashLibQualityTest One of project in solution. Here you can test speed, quality and calculate hashes. CLRTest and MFCTest Temporary projects used to convert some hash functions from C++ to C++ CLI, and finally to C#. Last edited Dec 29, 2013 at 12:12 PM by tomanu, version 51 downloads activity downloads 15 Days: 7 7 30 30 All All Details © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"HashLib is a collection of nearly all hash algorithms you've ever seen, it supports almost everything and is very easy to use"	"true"
"Cryptography"	"libsodium-net"	"https://github.com/adamcaudill/libsodium-net"	"libsodium for.NET - A secure cryptographic library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"140"	"26"	"26"	"GitHub - adamcaudill/libsodium-net: libsodium for .NET - A secure cryptographic library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 140 Fork 26 adamcaudill/libsodium-net Code Issues 10 Pull requests 1 Pulse Graphs libsodium for .NET - A secure cryptographic library 408 commits 1 branch 9 releases 5 contributors C# 99.7% Other 0.3% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.9.0 v0.8.0 v0.7.0 v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit a55468a Jul 7, 2016 adamcaudill Update for changes in nuget Permalink Failed to load latest commit information. .nuget Revert ""Update NUnit"" Aug 21, 2015 Tests Switch SecretBox to use the easy exports (#134) Apr 19, 2016 _signing Update for changes in nuget Jul 7, 2016 libsodium-net Call sodium_init before password hash (#141) Jul 7, 2016 .editorconfig Add .editorconfig May 18, 2014 .gitattributes Add .gitattributes Oct 16, 2013 .gitignore Don't ignore the signing dir Jan 17, 2016 .travis.yml Switch to mono 4.4.1 (#142) Jul 7, 2016 CONTRIBUTING.md Update contributing guide Sep 7, 2014 Contributors.md Added new guy Sep 4, 2014 LICENSE 2016 Jan 16, 2016 README.md Update README.md Jan 16, 2016 libsodium-net.nuspec Add new keywords Jul 7, 2016 libsodium-net.sln Update for 0.4.0 Aug 26, 2014 travis-build-libsodium.sh Update to libsodium 1.0.10 Apr 5, 2016 README.md libsodium-net libsodium-net, or better said, libsodium for .NET, is a C# wrapper around libsodium. For those that don't know, libsodium is a portable implementation of Daniel Bernstein's fantastic NaCl library. If you aren't familiar with NaCl, I highly suggest that you look into libsodium and NaCl before using this library. Why NaCl is a great library in that its designed has made the right choices on what to implement and how - something most developers don't know how to do. So by using it (or a wrapper), many of those details are abstracted away where you don't need to worry about them. NaCl itself is less than portable C, only targeted for *nix systems; libsodium solves this by making it portable and making a few minor changes to better suite being distributed as a compiled binary. Crypto is hard - much harder than your average developer understands. This effort was started to make these tools readily available to the .NET community in hopes they will be used to further the goals of defending personal privacy and security. Installation Windows: For Windows, the libsodium library is included in the release packages. Or just use the NuGet version which has everything you need. OSX: For OSX, libsodium-net can easily be built in Xamarin Studio, and libsodium can be installed easily via brew: brew install libsodium --universal  Linux: As with OSX, building with Xamarin Studio is simple, or there's always the option of using xbuild: xbuild libsodium-net.sln  For libsodium, many package managers provide older versions, so it's recommended to build the latest version from source. Thankfully, this is a fairly painless process. See the travis-build-libsodium.sh file or the libsodium README file for details. Other: Support for other Mono supported platforms hasn't been determined. It may or may not work. Note: For all platforms, it's critical that libsodium be compiled for the architecture that the process is running under. If they don't match, you can expect to see errors. If your process is x86/i386, you can't use a copy of libsodium compiled for x64. Documentation libsodium-net documentation is available (an adapted copy of the original written by Frank Denis (@jedisct1)). Requirements & Versions This library can be built in Visual Studio 2010, Xamarin Studio (MonoDevelop 3.x supported), and targets .NET 4.0; it is compiled against libsodium v1.0.7. On OSX & Linux, your copy of libsodium must be compiled for the same architecture as your copy of Mono. If you are running a 32bit process, your copy of libsodium must be 32bit as well. Notes Any method that takes a String, has an overload that accepts a byte array; Strings are assumed to be UTF8; if this is not the case, please convert it to bytes yourself and use the overloads that accept byte arrays. libsodium requires the Visual C++ Redistributable for Visual Studio 2015. File Signing Starting with version 0.4.0, all files are signed via a Certum.pl Code Signing certificate. The files are signed under the name Open Source Developer, Adam Caudill - this can be used to ensure that the files haven't been altered. License NaCl has been released to the public domain to avoid copyright issues. libsodium is subject to the ISC license, and this software is subject to the MIT license (see LICENSE). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/adamcaudill/libsodium-net"	"libsodium for.NET - A secure cryptographic library"	"true"
"Cryptography"	"StreamCryptor"	"https://github.com/bitbeans/StreamCryptor"	"Stream encryption & decryption with libsodium and protobuf"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"38"	"10"	"5"	"GitHub - bitbeans/StreamCryptor: Stream encryption & decryption with libsodium and protobuf Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 38 Fork 5 bitbeans/StreamCryptor Code Issues 0 Pull requests 0 Pulse Graphs Stream encryption & decryption with libsodium and protobuf 88 commits 1 branch 3 releases 2 contributors C# 99.8% Shell 0.2% C# Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v.0.5.0 v.0.4.0 v.0.3.0 Nothing to show New pull request Latest commit 395907d Jul 10, 2016 bitbeans Missing mono Permalink Failed to load latest commit information. .nuget Include DotSettings Jul 8, 2016 StreamCryptor Downgrade protobuf-net Jul 8, 2016 Tests Update Tests to nunit 3 Jul 8, 2016 examples Code improvement Sep 24, 2014 .editorconfig Added new nuget package Dec 10, 2015 .gitattributes 🍭 Added .gitattributes & .gitignore files Sep 13, 2014 .gitignore Include DotSettings Jul 8, 2016 .travis.yml Missing mono Jul 10, 2016 Contributors.md New libsodium-net version. Sep 21, 2014 LICENSE.md 2016 Jan 2, 2016 README.md Add example Mar 21, 2016 StreamCryptor.nuspec Added new nuget package Dec 10, 2015 StreamCryptor.sln New nuget Jul 8, 2016 StreamCryptor.sln.DotSettings.user Include DotSettings Jul 8, 2016 travis-build-libsodium.sh Update Jul 8, 2016 README.md StreamCryptor You can use StreamCryptor to encrypt and decrypt files without size limit and the need to load every file completely into memory. StreamCryptor uses FileStream to read and write files in chunks, there is also an asynchronous implementations for progress reporting available: example. For more working examples check out the tests in this repository. Files are encrypted into SCCEF (StreamCryptor Chunked Encrypted File) format. Every file contains an EncryptedFileHeader some EncryptedFileChunks and an EncryptedFileFooter to prevent file manipulation. The file serialization is realised with Google`s protobuf, it has a small overhead and offers an automatic length prefix for all file parts. All cryptographic operations are performed via libsodium-net and thus libsodium), see Algorithm details. To protect the senders PublicKey from beeing tracked, you should use an ephemeral key pair for every file. If you do this it isn't possible to authenticate who encrypted the file! Code Status StreamCryptor was subjected to a source code audit carried out by Cure53. Final report (PDF): Audit-Report StreamCryptor 04.2015 Installation There is a NuGet package available. This project uses the following libraries libsodium-net - A secure cryptographic library protobuf-net - Efficient binary serialization by Google Requirements This library targets .NET 4.5. SCCEF file format version 2 EncryptedFileHeader Version - Used to indicate the message format. Current version is 2. BaseNonce - The 16 bytes, randomly generated nonce used to generate the chunk nonces. EphemeralNonce - The 24 byte nonce for the ephemeral secret key. Key - The encrypted 64 byte ephemeral secret key. The first 32 bytes of the key are used to handle the encryption and decryption of the chunks. The last 32 bytes are to hash the checksums with blake2b and protect these hashes with a key. HeaderChecksum - The header checksum to validate the header and prevent file manipulation. Filename - The encrypted original filename, padded to 256 bytes. FilenameNonce - The 24 byte nonce to encrypt the filename. SenderPublicKey - The 32 byte public key of the sender to guarantee the recipient can decrypt the file. UnencryptedFileLength - The file length of the unencrypted file. EncryptedFileChunk ChunkLength - The length of the chunk in bytes. ChunkIsLast - Marks the chunk as last in the file (there only can be one last chunk per file). ChunkChecksum - The checksum to validate the chunk and prevent file manipulation. Chunk - The encrypted chunk content. EncryptedFileFooter FooterChecksum - The footer checksum to validate the footer and prevent file manipulation. Usage Synchronous Methods Encrypt public static string EncryptFileWithStream(byte[] senderPrivateKey, byte[] senderPublicKey, byte[] recipientPublicKey, string inputFile, string outputFolder = null, string fileExtension = DEFAULT_FILE_EXTENSION, bool maskFileName = false) public static string EncryptFileWithStream(KeyPair senderKeyPair, byte[] recipientPublicKey, string inputFile, string outputFolder = null, string fileExtension = DEFAULT_FILE_EXTENSION, bool maskFileName = false) //overloaded version (will use the senderKeyPair.PublicKey as recipientPublicKey) public static string EncryptFileWithStream(KeyPair senderKeyPair, string inputFile, string outputFolder = null, string fileExtension = DEFAULT_FILE_EXTENSION, bool maskFileName = false) Decrypt public static string DecryptFileWithStream(byte[] recipientPrivateKey, string inputFile, string outputFolder, bool overWrite = false) //overloaded version (keyPair.PublicKey will be ignored) public static string DecryptFileWithStream(KeyPair keyPair, string inputFile, string outputFolder, bool overWrite = false) Asynchronous Methods Encrypt public static async Task<string> EncryptFileWithStreamAsync(byte[] senderPrivateKey, byte[] senderPublicKey, byte[] recipientPublicKey, string inputFile, IProgress<StreamCryptorTaskAsyncProgress> encryptionProgress = null, string outputFolder = null, string fileExtension = DEFAULT_FILE_EXTENSION, bool maskFileName = false) public static async Task<string> EncryptFileWithStream(KeyPair senderKeyPair, byte[] recipientPublicKey, string inputFile, IProgress<StreamCryptorTaskAsyncProgress> encryptionProgress = null, string outputFolder = null, string fileExtension = DEFAULT_FILE_EXTENSION, bool maskFileName = false) //overloaded version (will use the senderKeyPair.PublicKey as recipientPublicKey) public static async Task<string> EncryptFileWithStream(KeyPair senderKeyPair, string inputFile, IProgress<StreamCryptorTaskAsyncProgress> encryptionProgress = null, string outputFolder = null, string fileExtension = DEFAULT_FILE_EXTENSION, bool maskFileName = false) Decrypt public static async Task<string> DecryptFileWithStreamAsync(byte[] recipientPrivateKey, string inputFile, string outputFolder, IProgress<StreamCryptorTaskAsyncProgress> decryptionProgress = null, bool overWrite = false) //overloaded version (keyPair.PublicKey will be ignored) public static async Task<string> DecryptFileWithStream(KeyPair keyPair, string inputFile, string outputFolder, IProgress<StreamCryptorTaskAsyncProgress> decryptionProgress = null, bool overWrite = false) Some example code AsyncDemo Decrypt a file into memory //Method to decrypt a file and return it as DecryptedFile object public static async Task<DecryptedFile> DecryptFileWithStreamAsync(byte[] recipientPrivateKey, string inputFile, IProgress<StreamCryptorTaskAsyncProgress> decryptionProgress = null) //overloaded version (keyPair.PublicKey will be ignored) public static async Task<DecryptedFile> DecryptFileWithStreamAsync(KeyPair keyPair, string inputFile, IProgress<StreamCryptorTaskAsyncProgress> decryptionProgress = null) And some fixed parameters private const int CURRENT_VERSION = 2; private const int MIN_VERSION = 2; private const int CHUNK_LENGTH = 1048576; //~1MB private const int CHUNK_COUNT_START = 0; private const int CHUNK_MIN_NUMBER = 0; private const int CHUNK_BASE_NONCE_LENGTH = 16; private const int CHUNK_CHECKSUM_LENGTH = 64; private const int HEADER_CHECKSUM_LENGTH = 64; private const int FOOTER_CHECKSUM_LENGTH = 64; private const int NONCE_LENGTH = 24; private const int MAX_FILENAME_LENGTH = 256; private const int ASYNC_KEY_LENGTH = 32; private const int MASKED_FILENAME_LENGTH = 11; private const string DEFAULT_FILE_EXTENSION = "".sccef""; //StreamCryptor Chunked Encrypted File private const string TEMP_FILE_EXTENSION = "".tmp""; Chunk length I have done some time tests with different CHUNK_LENGTH`s and a 1GB testfile, here are the results on my system: 524288 1048576 52428800 104857600 Encrypt ~26s ~26s ~32s ~32s Decrypt ~26s ~25s ~28s ~28s File overhead The produced overhead of the encrypted files: 1 KB 1 MB 100 MB 1000 MB Encrypted +83% +0.1% +0.01% +0.01% Algorithm details Using libsodium Hashing (checksums) Blake2b documentation Secret-key authenticated encryption XSalsa20/Poly1305 MAC documentation Public-key authenticated encryption XSalsa20/Poly1305 MAC/Curve25519 documentation Why Inspired by https://github.com/jedisct1/libsodium/issues/141 and the nacl-stream-js project. Example See SccefDecryptor License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bitbeans/StreamCryptor"	"Stream encryption & decryption with libsodium and protobuf"	"true"
"Database"	"BrightstarDb"	"https://github.com/BrightstarDB/BrightstarDB"	"BrightstarDB is a native.NET RDF triple store"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"269"	"43"	"71"	"GitHub - BrightstarDB/BrightstarDB: This is the core development repository for BrightstarDB. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 43 Star 269 Fork 71 BrightstarDB/BrightstarDB Code Issues 30 Pull requests 0 Wiki Pulse Graphs This is the core development repository for BrightstarDB. http://brightstardb.com/ 998 commits 19 branches 22 releases Fetching contributors C# 74.9% JavaScript 16.9% HTML 6.4% CSS 1.0% Ruby 0.6% ASP 0.2% C# JavaScript HTML CSS Ruby ASP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop feature/binding_cache feature/indexbug feature/issue116 feature/issue175 feature/issue192 feature/issue209 feature/issue230 feature/issue260 feature/page_cache_performance feature/simplify_build feature/stats_optimiser feature/swagger feature/xamarin_sample features/vsix master performance-benchmark-tests release-1.9 release/1.10 Nothing to show 1.13 1.12 1.11.1 1.11 1.10.1 1.10 1.9.1 1.9 1.8 1.7.1 1.7 1.6.2 1.6.1 1.6 1.5.3 1.5.2 1.5.1 1.5 1.4.1 1.4 1.4-alpha 1.3 Nothing to show New pull request Latest commit 0d51841 Jun 23, 2016 kal Updated NuGet dependencies … Upgrade to DNR 1.0.11 Permalink Failed to load latest commit information. doc Fixed cut-n-paste errors Jun 10, 2016 installer Don't include Sphinx docs when NoDocs flag is set. Jan 7, 2016 key Initial source upload Feb 21, 2013 mono Updated target mono version Nov 21, 2013 samples Fixed code for updated sparql API Aug 5, 2015 src Updated NuGet dependencies Jun 23, 2016 tools Update Community Tasks Dependencies Jul 31, 2015 .gitattributes Initial work Jun 29, 2015 .gitignore Remove and ignore generated AssemblyInfo.cs file Jan 7, 2016 LICENSE.txt VSIX for installing item templates into VS2015 Jan 6, 2016 README.md Fixed links to discussion group and API docs Jan 19, 2014 build.proj Removed dependency on MSBuildCommunityTasks Jul 31, 2015 common.proj Bump version number for next release Jan 5, 2016 README.md BrightstarDB BrightstarDB is a native .NET RDF triple store. It uses dotNetRDF to provide support for a wide range of RDF syntaxes as well as SPARQL query support. In addition to providing a raw RDF-based API, BrightstarDB also provides support for binding RDF resources to .NET dynamic objects; and a contract-first entity framework that enables the use of LINQ rather than SPARQL for query purposes. For details and documentation, please see our website at http://brightstardb.com/ To get started with BrightstarDB you may want to check out the following resources: Getting Started provides you with links into the User and Developer documentation API Documentation If you want a binary installer that includes BrightstarDB, the BrightstarDB service and the Polaris management tool, please get them from our Codeplex project homepage Licensing BrightstarDB is provided under the MIT license. It is free to use for both commercial and non-commercial purposes. Commercial Support For a commercial support contract please contact NetworkedPlanet Questions ? If you have questions please come to the BrightstarDB Discussion Forum on Codeplex. Bugs ? Please report any bugs you find here on the GitHub project issue tracker. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BrightstarDB/BrightstarDB"	"BrightstarDB is a native.NET RDF triple store"	"true"
"Database"	"Event Store"	"https://github.com/EventStore/EventStore"	"The open-source, functional database with Complex Event Processing in JavaScript."	"null"	"null"	"null"	"null"	"null"	"https://geteventstore.com"	"null"	"1554"	"195"	"321"	"GitHub - EventStore/EventStore: The open-source, functional database with Complex Event Processing in JavaScript. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 195 Star 1,554 Fork 321 EventStore/EventStore Code Issues 67 Pull requests 1 Wiki Pulse Graphs The open-source, functional database with Complex Event Processing in JavaScript. https://geteventstore.com 4,490 commits 32 branches 44 releases 54 contributors C# 97.8% PowerShell 0.7% Shell 0.6% C++ 0.4% JavaScript 0.4% Protocol Buffer 0.1% C# PowerShell Shell C++ JavaScript Protocol Buffer Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: release-v3.9.0 Switch branches/tags Branches Tags atomtests blindtest chrisgreghttp competing-etc dropped-subscriptions emptyatom escape-stream-names fault-on-checkpoint-write-fail fix-previous-link fix-when-multiple-events gtest http-client-proxy master mmap move-and-fix-projection-tests no-projections nonpromotable oss-v3.2.1 parked parkedcheckpoint projections-bytes projections-support-tb protodoc release-v3.9.0 repchunkissue replay-issue revert-674-fix-previous-link scavenge stats timeread ub unalign Nothing to show v3.0.0rc2 v1.0.1 v1.0.0 v0.9.2 projections-linkMetadata oss-v3.8.0 oss-v3.7.0 oss-v3.6.3 oss-v3.6.2 oss-v3.6.1 oss-v3.6.0 oss-v3.6.0+centos oss-v3.5.0 oss-v3.4.0 oss-v3.3.1 oss-v3.3.0 oss-v3.2.2 oss-v3.2.1 oss-v3.2.0 oss-v3.1.0 oss-v3.0.5 oss-v3.0.3+2 oss-v3.0.3+1 oss-v3.0.3 oss-v3.0.2+1 oss-v3.0.2 oss-v3.0.1 oss-v3.0.0 oss-v3.0.0-rc9 dotnet-client-v3.6.3 dotnet-client-v3.6.2 dotnet-client-v3.5.2 dotnet-client-v3.5.1 dotnet-client-v3.3.1 dotnet-client-v3.2.1 dotnet-client-v3.2.0 dotnet-client-v3.0.2 dotnet-client-v3.0.1 dotnet-client-v3.0.0 dotnet-client-v3.0.0-rc9 ES-NET-v2.0.1 ES-NET-v2.0.0 ES-Mono-v2.0.1 ES-Mono-v2.0.0 Nothing to show New pull request Latest commit 2772c1c Jul 13, 2016 pgermishuys Merge branch 'release-v3.8.0' Permalink Failed to load latest commit information. etc Update docs generator to generate command line args tables with corre… Jul 8, 2016 scripts Switch to github hosted protobuf May 31, 2016 src Merge branch 'release-v3.8.0' Jul 13, 2016 tools move etc over to EventStore.Rags Sep 7, 2015 .gitattributes Changed AssemblyInformationalVersion to explicitly include namespace Jul 17, 2013 .gitignore Add VS 2015 local config directory to ignore list. Dec 5, 2015 .travis.yml Add travis CI Dec 7, 2015 LICENSE.md Credit other OSS in the license Jul 7, 2014 README.md Spelling, grammar and formatting improvements May 12, 2016 auto.sh Improve replication performance in 5 node clusters Oct 20, 2015 build.cmd Make Windows build use $PSScriptRoot Jul 12, 2014 build.sh Fix usage of sed in build script for version Nov 3, 2015 check-test-results.sh Add travis CI Dec 7, 2015 run_tc_tests.sh Add Buffer Management and Projection tests Dec 7, 2015 run_tests.sh Update run_tests.sh with new paths Jul 10, 2014 run_travis_tests.sh We aren't using Maven... Dec 8, 2015 README.md Event Store Documentation is available at http://docs.geteventstore.com. Development is on the branch aimed at the next release (usually prefixed with release-v0.0.0). Please make any pull requests to this branch. This is the repository for the open source version of Event Store, which includes the clustering implementation for high availability. Information on commercial support and options such as LDAP authentication can be found on the Event Store website at https://geteventstore.com/support. Building from Source Event Store is written in a mixture of C#, C++ and JavaScript. It can run either on Mono or .NET, however because it contains platform specific code (including hosting the V8 JavaScript engine), it must be built for the platform on which you intend to run it. Binaries are available from https://geteventstore.com, however if you want to build it from source, instructions for Windows and Linux are below. Debug Builds on Linux or Mac OS X There are two stages to building Event Store. First, a native library used for projections, libjs1 must be built. Following that, the main Event Store project can be built. If you are running on Mac OS X Yosemite, Ubuntu Linux 14.04 or Amazon Linux 2015.03, it is not necessary to build libjs1 from source. Precompiled binaries are already included in this repository. If you are running a different distribution or version than those listed above, you will need to compile libjs1 yourself. Compiling libjs1 Prerequisites git on PATH svn on PATH gcc installed Instructions (Mac OS X) From the root of the repository: scripts/build-js1/build-js1-mac.sh Instructions (Linux) From the root of the repository: scripts/build-js1/build-js1-linux.sh [werror=no] It may be necessary to include werror=no as the only parameter to the script if you have a newer compiler which treats warnings appearing as a result of compiling the Google V8 codebase as errors. Compiling Event Store (Linux and Mac OS X) From the root of the repository: ./build.sh [<version=0.0.0.0>] [<configuration=release>] [<distro-platform-override>] Versions must be complete four part identifiers valid for use on a .NET assembly. Valid configurations are: debug release The OS distribution and version will be detected automatically unless it is overridden as the last argument. This script expects to find libjs1.[so|dylib] in the src/libs/x64/distroname-distroversion/ directory, built using the scripts in the scripts/build-js1/ directory. Note that overriding this may result in crashes using Event Store. The only supported Linux for production use at the moment is Ubuntu 14.04 LTS. However, since several people have asked for builds compatible with Amazon Linux in particular, we have included a pre-built version of libjs1.so which will link to the correct version of libc on Amazon Linux 2015.03. Currently the supported versions without needing to build libjs1 from source are: ubuntu-14.04 (Ubuntu Trusty) amazon-2015.03 (Amazon Linux 2015.03) Note that it is no longer possible to build x86 builds of Event Store. Debug Builds on Windows / .NET Prerequisites .NET Framework v4.0+ Windows platform SDK with compilers (v7.1) or Visual C++ installed (Only required for a full build) git on PATH svn on PATH (Only required for a full build) Building the Event Store From a command prompt: build.cmd — runs the Event Store build build.cmd clean-all — cleans the repository Optional parameters (Specified using -ParameterName value) -Platform — x64 (default) or x86 -Configuration — release (default) or debug -Version — the semantic version number to give to the release. Defaults to version 0.0.0.0, which should be used for all non-released builds. -SpecificVisualStudioVersion — 2010, 2012, 2013, Windows7.1SDK. Default is to use whichever version is installed. This only needs to be overridden if you have multiple versions installed. -ForceNetwork — true if you want to force the script to get dependencies even if Windows thinks theres no network connection (otherwise we don’t try to avoid sometimes lengthy delays). -Defines — any additional defines you want to pass to the compiler. Should be enclosed in single quotes Building the Event Store from Visual Studio When building through Visual Studio, there are PowerShell scripts which run as pre- and post-build tasks on the EventStore.Common project, which set the informational version attribute of the EventStore.Common.dll assembly to the current commit hash on each build and then revert it. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/EventStore/EventStore"	"The open-source, functional database with Complex Event Processing in JavaScript."	"true"
"Database"	"LiteDB"	"https://github.com/mbdavid/LiteDB"	"A.NET NoSQL Document Store in a single data file -"	"null"	"null"	"null"	"null"	"null"	"http://www.litedb.org"	"null"	"691"	"114"	"179"	"GitHub - mbdavid/LiteDB: LiteDB - A .NET NoSQL Document Store in a single data file - www.litedb.org Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 114 Star 691 Fork 179 mbdavid/LiteDB Code Issues 36 Pull requests 3 Wiki Pulse Graphs LiteDB - A .NET NoSQL Document Store in a single data file - www.litedb.org 403 commits 6 branches 9 releases 15 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev fts gh-pages master pcl v2mine Nothing to show v.2.0.0-rc v2.0.0-beta v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.9.0 v0.8.0 Nothing to show New pull request Latest commit af9d625 Jul 14, 2016 mbdavid committed on GitHub Update README.md Permalink Failed to load latest commit information. LiteDB.Core - Add Nuspecs for LiteDB, LiteDB.Core, LiteDB.Shell Jul 13, 2016 LiteDB.Platform.Android - Add Nuspecs for LiteDB, LiteDB.Core, LiteDB.Shell Jul 13, 2016 LiteDB.Platform.Universal10 - Add Nuspecs for LiteDB, LiteDB.Core, LiteDB.Shell Jul 13, 2016 LiteDB.Platform.Universal81 - Add Nuspecs for LiteDB, LiteDB.Core, LiteDB.Shell Jul 13, 2016 LiteDB.Platform.iOS - Add Nuspecs for LiteDB, LiteDB.Core, LiteDB.Shell Jul 13, 2016 LiteDB.Platform - Add Nuspecs for LiteDB, LiteDB.Core, LiteDB.Shell Jul 13, 2016 LiteDB.Shell.Console Reworks all transactions to be a disposable object so they can be wra… Jul 11, 2016 LiteDB.Shell - Add Nuspecs for LiteDB, LiteDB.Core, LiteDB.Shell Jul 13, 2016 LiteDB.Tests.Android - Add Nuspecs for LiteDB, LiteDB.Core, LiteDB.Shell Jul 13, 2016 LiteDB.Tests.Mac - Removed LiteDB.Platform.Mac Jul 15, 2016 LiteDB.Tests.Universal10 change NeutralResourcesLanguage to en Jul 11, 2016 LiteDB.Tests.Universal81 Reworks all transactions to be a disposable object so they can be wra… Jul 12, 2016 LiteDB.Tests.iOS - Add Nuspecs for LiteDB, LiteDB.Core, LiteDB.Shell Jul 13, 2016 LiteDB.Tests - Removed LiteDB.Platform.Mac Jul 14, 2016 LiteDB - Removed LiteDB.Platform.Mac Jul 14, 2016 LiteDb.Platform.DotNet45 - Add Nuspecs for LiteDB, LiteDB.Core, LiteDB.Shell Jul 13, 2016 NuGet Nuget 2.0.0-rc Dec 24, 2015 .gitignore Merge #159 - fix #178 #186 Jul 9, 2016 LICENSE Update year Mar 9, 2015 LiteDB.Core.nuspec - Removed LiteDB.Platform.Mac Jul 14, 2016 LiteDB.Portable.sln - Removed LiteDB.Platform.Mac Jul 14, 2016 LiteDB.Shell.nuspec - Removed LiteDB.Platform.Mac Jul 14, 2016 LiteDB.nuspec - Add Nuspecs for LiteDB, LiteDB.Core, LiteDB.Shell Jul 13, 2016 LiteDB.sln - Removed LiteDB.Platform.Mac Jul 14, 2016 README.md Update README.md Jul 14, 2016 Repository.cs Merge #159 - fix #178 #186 Jul 9, 2016 README.md LiteDB - A .NET NoSQL Document Store in a single data file LiteDB is a small, fast and lightweight NoSQL embedded database. Serverless NoSQL Document Store Simple API similar to MongoDB 100% C# code for .NET 3.5 in a single DLL (less than 200kb) Support for Portable UWP/PCL (thanks to @szurgot) ACID transactions Data recovery after write failure (journal mode) Datafile encryption using DES (AES) cryptography Map your POCO classes to BsonDocument Store files and stream data (like GridFS in MongoDB) Single data file storage (like SQLite) Index document fields for fast search (up to 16 indexes per collection) LINQ support for queries Shell command line - try this online version Open source and free for everyone - including commercial use Install from NuGet: Install-Package LiteDB New features in v2.0.0 Generic data access - can use any Stream Better mapping of classes from your entity to BsonDocument (like EntityFramework) Better cross reference with DbRef mapping Lazy engine load (open the datafile only when running a command) Reduce your database size with shrink Support for Initial Size and Limit Size databases Complete re-write of engine classes with full debug logger See more examples at http://www.litedb.org/ Try online Try LiteDB Web Shell. For security reasons, in the online version not all commands are available. Try the offline version for full feature tests. Documentation Visit the Wiki for full documentation Download Download the source code or binary only in LiteDB Releases How to use LiteDB A quick example for storing and searching documents: // Create your POCO class public class Customer {     public int Id { get; set; }     public string Name { get; set; }     public string[] Phones { get; set; }     public bool IsActive { get; set; } }  // Open database (or create if doesn't exist) using(var db = new LiteDatabase(@""C:\Temp\MyData.db"")) {     // Get customer collection     var col = db.GetCollection<Customer>(""customers"");      // Create your new customer instance     var customer = new Customer     {          Name = ""John Doe"",          Phones = new string[] { ""8000-0000"", ""9000-0000"" },          IsActive = true     };      // Insert new customer document (Id will be auto-incremented)     col.Insert(customer);      // Update a document inside a collection     customer.Name = ""Joana Doe"";      col.Update(customer);      // Index document using a document property     col.EnsureIndex(x => x.Name);      // Use Linq to query documents     var results = col.Find(x => x.Name.StartsWith(""Jo"")); } Where to use? Desktop/local small applications Application file format Small web applications One database per account/user data store Few concurrent write operations Changelog Change details for each release are documented in the release notes. License MIT Copyright (c) 2016 - Maurício David Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mbdavid/LiteDB"	"A.NET NoSQL Document Store in a single data file -"	"true"
"Database"	"RavenDB"	"https://github.com/ravendb/ravendb"	"A linq enabled document database for.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1534"	"139"	"631"	"GitHub - ravendb/ravendb: A linq enabled document database for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 139 Star 1,534 Fork 631 ravendb/ravendb Code Pull requests 0 Wiki Pulse Graphs A linq enabled document database for .NET http://ayende.com/Blog/ 31,410 commits 5 branches 209 releases 225 contributors C# 61.4% JavaScript 32.1% TypeScript 3.3% HTML 1.5% CSS 0.9% PowerShell 0.4% Other 0.4% C# JavaScript TypeScript HTML CSS PowerShell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: v3.0 Switch branches/tags Branches Tags 2.0 2.5 gh-pages v3.0 v3.5 Nothing to show build-30143 build-30115 build-30100 build-30037 build-30000 build-25001 build-3800 build-3785 build-3690 build-3660 build-3599 build-3528 build-3524 build-3522 build-2996 build-2994 build-2993 build-2992 build-2991 build-2990 build-2982 build-2981 build-2977 build-2971 build-2970 build-2962 build-2956 build-2952 build-2951 build-2947 build-2946 build-2945 build-2941 build-2939 build-2938 build-2935 build-2916 build-2910 build-2908 build-2907 build-2879 build-2878 build-2875 build-2874 build-2870 build-2851 build-2850 build-2750 build-2700 build-2666 build-2380 build-2375 build-2370 build-2360 build-2340 build-2330 build-2325 build-2324 build-2261 build-2260 build-2230 build-2222 build-992 build-990 build-960 build-888 build-800 build-700 build-616 build-615 build-573 build-571 build-570 build-562 build-561 build-560 build-559 build-558 build-557 build-556 build-555 build-554 build-553 build-552 build-551 build-550 build-549 build-547 build-546 build-544 build-543 build-541 build-538 build-537 build-536 build-535 build-534 build-533 build-531 build-530 Nothing to show New pull request Latest commit b87a422 Jun 1, 2016 ayende Merge pull request #651 from ayende/v3.0 … V3.0 Permalink Failed to load latest commit information. .nuget RavenDB-4143 restoring nuget packages before compilation Dec 19, 2015 Art Adding logo Aug 7, 2014 Bundles included AuthorizationClientAsyncExtensions Feb 17, 2016 DefaultConfigs crlf, tabs to spaces Oct 30, 2015 Imports porting RavenDB-4196 issue fix from 2.5, with code style refactorings Jan 27, 2016 NuGet RavenDB-3454 added Raven.Client.* bundles to build script Dec 4, 2015 Raven.Abstractions RavenDB-4607 Input string was not in a correct format - Issue on Save… May 17, 2016 Raven.Backup RavenDB-4205 Force C# 5.0 in VS2015 (debug only) + turned off R# tips… Jan 11, 2016 Raven.Client.Lightweight Merge pull request #3763 from arekpalinski/RavenDB-4649-v3.0 May 30, 2016 Raven.Client.MvcIntegration RavenDB-3454 removed NuGet.targets Dec 8, 2015 Raven.Database RavenDB-4434 Fixing a problem where if you use API keys the principal… May 31, 2016 Raven.Debug RavenDB-3454 removed NuGet.targets Dec 8, 2015 Raven.DtcTests RavenDB-4205 Force C# 5.0 in VS2015 (debug only) + turned off R# tips… Jan 11, 2016 Raven.Migration RavenDB-4205 Force C# 5.0 in VS2015 (debug only) + turned off R# tips… Jan 11, 2016 Raven.Performance RavenDB-3454 removed NuGet.targets Dec 8, 2015 Raven.Server RavenDB-4205 Force C# 5.0 in VS2015 (debug only) + turned off R# tips… Jan 11, 2016 Raven.Setup.CustomActions crlf, tabs to spaces Oct 30, 2015 Raven.Setup Renaming build output directory so it won't conflict with the tab com… Jan 28, 2016 Raven.SimulatedWorkLoad RavenDB-3454 removed NuGet.targets Dec 8, 2015 Raven.SlowTests RavenDB-4085 export will do multiple runs with last run that is execu… Jan 28, 2016 Raven.Smuggler RavenDB-4516 Smuggler fails after finishing and therefore it doesnt c… Apr 19, 2016 Raven.Sparrow RavenDB-4205 Force C# 5.0 in VS2015 (debug only) + turned off R# tips… Jan 11, 2016 Raven.StorageExporter RavenDB-4205 Force C# 5.0 in VS2015 (debug only) + turned off R# tips… Jan 11, 2016 Raven.Studio.Html5 RavenDB-4644 Unable to view SQL replication stats with non-admin user May 29, 2016 Raven.Tests.Bundles failing test Feb 2, 2016 Raven.Tests.Common RavenDB-4205 Force C# 5.0 in VS2015 (debug only) + turned off R# tips… Jan 11, 2016 Raven.Tests.Core RavenDB-4510 adding missing configuration Apr 18, 2016 Raven.Tests.FileSystem RavenDB-4548 Fixing creation of signatures when a file name contains … Apr 26, 2016 Raven.Tests.Helpers Added unique sufix to enable parallel testing scenarios for embedded … Apr 8, 2016 Raven.Tests.Issues Merge branch 'v3.0' of https://github.com/ayende/ravendb into RavenDB… May 25, 2016 Raven.Tests.MailingList RavenDB-4607 Input string was not in a correct format - Issue on Save… May 17, 2016 Raven.Tests.Migration RavenDB-3454 removed NuGet.targets Dec 8, 2015 Raven.Tests.Server.Runner RavenDB-4205 Force C# 5.0 in VS2015 (debug only) + turned off R# tips… Jan 11, 2016 Raven.Tests.Web RavenDB-4286 increased timeout to prevent task canceled exception fro… Feb 3, 2016 Raven.Tests RavenDB-4531 fix the Exception we get when we use ShardDatabase with … May 18, 2016 Raven.Tryouts make sure that http connection is returned to HttpClientCache when ch… Apr 25, 2016 Raven.Voron RavenDB-4587 Fixing edge case in the page splitter when keys are long… May 25, 2016 Raven.Web RavenDB-4205 Force C# 5.0 in VS2015 (debug only) + turned off R# tips… Jan 11, 2016 Raven.Xunit.Runner RavenDB-4205 Force C# 5.0 in VS2015 (debug only) + turned off R# tips… Jan 11, 2016 Scripts crlf, tabs to spaces Oct 30, 2015 SharedLibs RavenDB-4378 mscorlib recursive resource lookup bug (ayende/Costura#4) Feb 24, 2016 Tools RavenDB-4205 Force C# 5.0 in VS2015 (debug only) + turned off R# tips… Jan 11, 2016 .gitattributes added pre-commit hook Nov 1, 2015 .gitignore RavenDB-3454 making xproj and csproj projects compile when in same sln Dec 4, 2015 CommonAssemblyInfo.cs Fixing tests outside build server Jan 8, 2016 RavenDB.sln RavenDB-3454 removed NuGet.targets Dec 8, 2015 RavenDB.sln.DotSettings RavenDB-4205 Force C# 5.0 in VS2015 (debug only) + turned off R# tips… Jan 11, 2016 Settings.StyleCop crlf, tabs to spaces Oct 30, 2015 acknowledgments.txt crlf, tabs to spaces Oct 30, 2015 agpl.txt crlf, tabs to spaces Oct 30, 2015 bisect.cmd added bisect.cmd, removed bisect_internal.ps1 May 9, 2014 bisect.ps1 crlf, tabs to spaces Oct 30, 2015 bisect_internal.sh Fixing path in the bisect tool Jan 7, 2015 build.cmd Upgrade psake to use the package from NuGet. Now builds should run like: Oct 31, 2012 build.ps1 crlf, tabs to spaces Oct 30, 2015 build_utils.ps1 crlf, tabs to spaces Oct 30, 2015 cleanup.cmd added cleanup script Jun 24, 2014 cleanup.ps1 fixed git.exe lookup in cleanup.ps1 (since git 2.6 default installati… Nov 17, 2015 default.ps1 RavenDB-4639 Fix build script to push the right package to nuget May 24, 2016 git_setup.cmd converting tabs to spaces Oct 30, 2015 git_setup.ps1 added pre-commit hook Nov 1, 2015 global.json RavenDB-3454 updated dnx core to 1.0.0-rc1-update1 Dec 9, 2015 license.txt crlf, tabs to spaces Oct 30, 2015 normalize.ps1 crlf, tabs to spaces Oct 30, 2015 quick.ps1 crlf, tabs to spaces Oct 30, 2015 readme.md RavenDB-4179 added build status for 3.0 and 3.5 May 30, 2016 reserver_ports.cmd crlf, tabs to spaces Oct 30, 2015 zzz_RavenDB_Release.sln sln fixes Oct 30, 2015 zzz_RavenDB_Release.sln.DotSettings Team conventions for the zzz_RavenDB_Release.sln Feb 4, 2014 readme.md RavenDB - the premier NoSQL database for .NET This repository contains source code for RavenDB document database. Build Status Version Windows 3.0 3.5 New to RavenDB? Check out our Getting started page. How to download? Stable download NuGet Unstable download NuGet .NET Client download NuGet Java Client download Maven What's new? Our latest list of changes can always be found here. Found a bug? You can create issues at our YouTrack. How to build? Requirements: .NET 4.5+ TypeScript 1.5 WiX Toolset 3.7 or higher The easiest way to build is to execute build.cmd or quick.ps1. Just ensure that you can execute PowerShell scripts, if you can't then you might want to execute Set-ExecutionPolicy Unrestricted in PowerShell as an Administrator. Want to contribute? Each Pull Request will be checked against following rules: cla/signed - all commit authors need to sign CLA. This can be done using our CLA sign form commit/whitespace - all changed files cannot contain TABs inside them. Before doing any work we suggest executing our git_setup.cmd. This will install git pre-commit hook that will normalize all whitespaces during commit commit/message/conventions - all commit messages (except in merge commits) must contain issue number from our YouTrack e.g. 'RavenDB-1234 Fixed issue with something' tests - this executes build.cmd Test on our CI to check if no constraints were voilated Need help? If you have any questions please visit our community group. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ravendb/ravendb"	"A linq enabled document database for.NET"	"true"
"Database Drivers"	"MySQL Connector"	"https://dev.mysql.com/downloads/connector/net/"	"Connector/Net is a fully-managed ADO.NET driver for MySQL"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"MySQL :: Download Connector/Net Contact MySQL  |  Login  |  Register The world's most popular open source database MySQL.com Downloads Documentation Developer Zone Developer Zone Documentation MySQL.com Downloads Enterprise Community Yum Repository APT Repository SUSE Repository Windows Archives MySQL.com Documentation Developer Zone Section Menu:   MySQL on Windows MySQL Yum Repository MySQL APT Repository MySQL SUSE Repository MySQL Community Server MySQL Cluster MySQL Fabric MySQL Router MySQL Utilities MySQL Shell MySQL Workbench MySQL Connectors Connector/ODBC Connector/Net Connector/J Connector/Node.js Connector/Python Connector/C++ Connector/C MySQL Native Driver for PHP Other Downloads Download Connector/Net MySQL open source software is provided under the GPL License. OEMs, ISVs and VARs can purchase commercial licenses. Connector/Net is a fully-managed ADO.NET driver for MySQL. Starting with version 6.7, Connector/Net will no longer include the MySQL for Visual Studio integration. That functionality is now available in a separate product called MySQL for Visual Studio available using the MySQL Installer for Windows (see http://dev.mysql.com/tech-resources/articles/mysql-installer-for-windows.html). Online Documentation: MySQL Connector/Net Installation Instructions Documentation MySQL Connector/Net X DevAPI Reference (requires Connector/Net 7.0) Change History Please report any bugs or inconsistencies you observe to our Bugs Database. Thank you for your support! Generally Available (GA) Releases Development Releases Connector/Net 6.9.9 Looking for previous GA versions? Select Platform: Select Platform… .NET & Mono Microsoft Windows Source Code Contact Sales USA: +1-866-221-0634 Canada: +1-866-221-0634 Germany: +49 89 143 01280 France: +33 1 57 60 83 57 Italy: +39 02 249 59 120 UK: +44 207 553 8447 Japan: 0120-065556 China: 10800-811-0823 India: 0008001005870 More Countries » Contact Us Online » Products MySQL Enterprise Edition MySQL Standard Edition MySQL Classic Edition MySQL Cluster CGE MySQL Embedded (OEM/ISV) Services Training Certification Consulting Support Downloads MySQL Community Server MySQL Cluster MySQL Fabric MySQL Utilities MySQL Workbench About MySQL Contact Us How to Buy Partners Job Opportunities Site Map Documentation MySQL Reference Manuals MySQL Workbench Expert Guides Topic Guides MySQL Cluster Legal Legal Policies Your Privacy Rights Terms of Use Trademark Policy Contributor Agreement   © 2016, Oracle Corporation and/or its affiliates"	"null"	"null"	"Connector/Net is a fully-managed ADO.NET driver for MySQL"	"true"
"Database Drivers"	"Npgsql"	"https://github.com/npgsql/Npgsql"	".Net data provider for Postgresql"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"803"	"137"	"317"	"GitHub - npgsql/npgsql: Npgsql is the .NET data provider for PostgreSQL. It allows any program developed for .NET framework to access a PostgreSQL database server. It is implemented in 100% C# code. PostgreSQL versions since 9.1 are officially supported, others may work. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 137 Star 803 Fork 317 npgsql/npgsql Code Issues 85 Pull requests 3 Pulse Graphs Npgsql is the .NET data provider for PostgreSQL. It allows any program developed for .NET framework to access a PostgreSQL database server. It is implemented in 100% C# code. PostgreSQL versions since 9.1 are officially supported, others may work. http://www.npgsql.org 2,560 commits 8 branches 49 releases 50 contributors C# 81.1% C 15.0% Perl6 2.8% NSIS 0.6% Batchfile 0.3% Shell 0.1% PowerShell 0.1% C# C Perl6 NSIS Batchfile Shell PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags dev hotfix/3.0.8 hotfix/3.0.9 hotfix/3.1.7 keepalive-workaround master support/2.x support/3.0 Nothing to show v3.1.6 v3.1.5 v3.1.4 v3.1.3 v3.1.2 v3.1.1 v3.1.0 v3.1.0-beta1 v3.1.0-alpha6 v3.1.0-alpha5 v3.1.0-alpha3 v3.1.0-alpha2 v3.1.0-alpha1 v3.0.8 v3.0.7 v3.0.6 v3.0.5 v3.0.4 v3.0.3 v3.0.2 v3.0.1 v3.0.0 v3.0.0-rc2 v3.0.0-rc1 v3.0.0-beta.1 v2.2.7 v2.2.6 v2.2.5 v2.2.4.3 v2.2.4.1 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.2.0-rc2 v2.2.0-rc1 v2.2.0-beta1 v2.1.3 v2.1.2 v2.1.1 v2.1.0 v2.1.0-rc1 v2.1.0-beta1 v2.0.14.3 v2.0.14.2 v2.0.14 v2.0.13-beta1 v2.0.12.0 before-migration-from-cvs Nothing to show New pull request Latest commit 81c3755 Jul 12, 2016 roji Check 65536 parameters on statement, not command … Fixes #1199 Permalink Failed to load latest commit information. .teamcity Workaround korebuild pack issue Jul 3, 2016 Tools Merge pull request #925 from kenjiuno/v3.x-setup Dec 29, 2015 packages Fix NpgsqlFactory.GetService: Dec 30, 2015 src Check 65536 parameters on statement, not command Jul 13, 2016 test/Npgsql.Tests Check 65536 parameters on statement, not command Jul 13, 2016 .editorconfig Remove executable bit Dec 22, 2015 .gitattributes Remove executable bit Dec 21, 2015 .gitignore Bring back xproj files for RC2 May 17, 2016 .gitmodules Remove executable bit Dec 21, 2015 Dockerfile.test add dockerfile for running tests Dec 15, 2015 LICENSE.txt Copyright year Jan 3, 2016 Npgsql-xproj.sln Bring back xproj files for RC2 May 16, 2016 Npgsql-xproj.sln.DotSettings Bring back xproj files for RC2 May 16, 2016 Npgsql.doxyfile Remove executable bit Dec 21, 2015 Npgsql.sln Bring back GAC installer May 23, 2016 Npgsql.sln.DotSettings Implicit type internal May 29, 2016 Npgsql.snk Reorganized Entity Framework support Dec 4, 2013 NpgsqlDdexProvider.sln Add Npgsql V3.x setup: traditional, NSIS DDEX+GAC. Dec 29, 2015 NuGet.Config Remove aspnetrelease myget feed Jun 27, 2016 README.md Fix TeamCity build ID in readme May 11, 2016 build.cmd Ported to dotnet rc2 Apr 14, 2016 build.ps1 Switch korebuild to 1.0.0 Jun 28, 2016 build.sh Switch korebuild to 1.0.0 Jun 28, 2016 bump.sh Replace GitVersion with manual bumping May 19, 2016 circle.yml add circle.yml Dec 15, 2015 global.json Ported to dotnet rc2 Apr 14, 2016 teamcity_set_version.cmd Bump version to 3.2.0-ci May 19, 2016 README.md Npgsql - .NET Data Provider for PostgreSQL What Is Npgsql? Npgsql is a .NET data provider for PostgreSQL. It allows you to connect and interact with PostgreSQL server using .NET. For any additional information, please visit the Npgsql website at http://www.npgsql.org. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/npgsql/Npgsql"	".Net data provider for Postgresql"	"true"
"Database Drivers"	"MongoDB"	"https://github.com/mongodb/mongo-csharp-driver"	"Official MongoDB C# Driver"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1387"	"256"	"687"	"GitHub - mongodb/mongo-csharp-driver: .NET Driver for MongoDB Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 256 Star 1,387 Fork 687 mongodb/mongo-csharp-driver Code Pull requests 35 Pulse Graphs .NET Driver for MongoDB http://mongodb.github.io/mongo-csharp-driver/ 2,864 commits 8 branches 51 releases 36 contributors C# 92.4% CSS 2.8% Visual Basic 2.5% JavaScript 2.0% HTML 0.2% F# 0.1% C# CSS Visual Basic JavaScript HTML F# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master v1.x v1.8.x v1.9.x v2.0.x v2.1.x v2.2.x Nothing to show v2.2.4 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.2.0-rc0 v2.1.1 v2.1.0 v2.1.0-rc1 v2.1.0-rc0 v2.0.2 v2.0.1 v2.0.0 v2.0.0-rc0 v2.0.0-beta4 v2.0.0-beta3 v2.0.0-beta2 v2.0.0-beta1 v1.11.0 v1.11.0-rc0 v1.10.1 v1.10.0 v1.10.0-rc1 v1.10.0-rc0 v1.9.2 v1.9.1 v1.9.0 v1.9.0-rc1 v1.9.0-rc0 v1.8.3.9 v1.8.2.34 v1.8.1.20 v1.8.0.124 v1.7.1.4791 v1.7.0.4714 v1.6.1.4678 v1.6.0.4624 v1.6.0rc0 v1.5.0.4566 v1.4.2.4500 v1.4.1.4490 v1.4.0.4468 v1.3.1.4349 v1.3.0.4309 v1.2.0.4274 v1.1.0.4184 v1.0.0.4098 v0.11.0.4042 v0.9.0.3992 v0.7.0.3959 v0.5.0.3940 Nothing to show New pull request Latest commit 6508d75 Jun 13, 2016 rstam CSHARP-1690: Fix race condition with BinaryConnection Dispose. Permalink Failed to load latest commit information. Docs Update expressions.md (#241) Jun 8, 2016 Release Notes Bumping version post release. Jan 8, 2016 Tools/NuGet CSHARP-1684: Update Tools/NuGet to v3.4.4. Jun 7, 2016 build CSHARP-1684: Increase test timeout from 10 to 20 minutes. Jun 10, 2016 src CSHARP-1690: Fix race condition with BinaryConnection Dispose. Jun 13, 2016 tests CSHARP-1684: Increase SemaphoreSlimRequestTests SpinWait timeouts. Jun 10, 2016 .gitattributes The MongoDB.Bson.dll and MongoDB.Driver.dll are now strongly named. T… Mar 2, 2011 .gitignore CSHARP-1684: Convert build script to use xUnit.net. Jun 6, 2016 CONTRIBUTING.md CSHARP-578: added contributing doc. Nov 8, 2012 CSharpDriver.sln Reorganize solution directory into src and tests subdirectories. Jun 8, 2016 License.rtf fixing up some extra 10gen related text. Feb 19, 2014 License.txt fixing up some extra 10gen related text. Feb 19, 2014 MongoDB.ruleset Reorganize solution directory into src and tests subdirectories. Jun 8, 2016 MongoDBLegacy.ruleset Reorganize solution directory into src and tests subdirectories. Jun 8, 2016 README.md removed travis and build status as they were never accurate. Mar 14, 2016 appveyor.yml minor changes for 2.1.0-rc1 release. Oct 7, 2015 build.cmd CSHARP-1684: Convert build script to use xUnit.net. Jun 6, 2016 build.sh CSHARP-1139: Use NuGet to manage our dependency on NUnit. Apr 3, 2015 uuidhelpers.js Added uuidhelpers.js file with Javascript helper functions to work wi… Nov 18, 2011 README.md MongoDB C# Driver You can get the latest stable release from the official Nuget.org feed or from our github releases page. If you'd like to work with the bleeding edge, you can use our custom feed. Some packages on this feed are pre-release and, while they've passed all our tests, are not yet ready for production. Getting Started Untyped Documents using MongoDB.Bson; using MongoDB.Driver; var client = new MongoClient(""mongodb://localhost:27017""); var database = client.GetDatabase(""foo""); var collection = database.GetCollection<BsonDocument>(""bar"");  await collection.InsertOneAsync(new BsonDocument(""Name"", ""Jack""));  var list = await collection.Find(new BsonDocument(""Name"", ""Jack""))     .ToListAsync();  foreach(var document in list) {     Console.WriteLine(document[""Name""]); } Typed Documents using MongoDB.Bson; using MongoDB.Driver; public class Person {     public ObjectId Id { get; set; }     public string Name { get; set; } } var client = new MongoClient(""mongodb://localhost:27017""); var database = client.GetDatabase(""foo""); var collection = database.GetCollection<Person>(""bar"");  await collection.InsertOneAsync(new Person { Name = ""Jack"" });  var list = await collection.Find(x => x.Name == ""Jack"")     .ToListAsync();  foreach(var person in list) {     Console.WriteLine(person.Name); } Documentation MongoDB Documentation Questions/Bug Reports Discussion Forum Stack Overflow Jira If you’ve identified a security vulnerability in a driver or any other MongoDB project, please report it according to the instructions here. Contributing Please see our guidelines for contributing to the driver. Maintainers: Robert Stam robert@mongodb.com Craig Wilson craig.wilson@mongodb.com Contributors (in alphabetical order): Bit Diffusion Limited code@bitdiff.com Alex Brown https://github.com/alexjamesbrown Justin Dearing zippy1981@gmail.com Dan DeBilt dan.debilt@gmail.com Teun Duynstee teun@duynstee.com Einar Egilsson https://github.com/einaregilsson Ken Egozi mail@kenegozi.com Daniel Goldman daniel@stackwave.com Simon Green simon@captaincodeman.com Nik Kolev nkolev@gmail.com Oleg Kosmakov kosmakoff@gmail.com Brian Knight brianknight10@gmail.com Richard Kreuter richard@10gen.com Kevin Lewis kevin.l.lewis@gmail.com Dow Liu redforks@gmail.com Alex Lyman mail.alex.lyman@gmail.com Alexander Nagy optimiz3@gmail.com Sridhar Nanjundeswaran https://github.com/sridharn Andrew Rondeau github@andrewrondeau.com Ed Rooth edward.rooth@wallstreetjapan.com Pete Smith roysvork@gmail.com staywellandy https://github.com/staywellandy Testo test1@doramail.com Bar Arnon https://github.com/I3arnon Rich Quackenbush rich.quackenbush@captiveaire.com James Hadwen james.hadwen@sociustec.com Jacob Jewell jacobjewell@eflexsystems.com If you have contributed and we have neglected to add you to this list please contact one of the maintainers to be added to the list (with apologies). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mongodb/mongo-csharp-driver"	"Official MongoDB C# Driver"	"true"
"Database Drivers"	"RethinkDb.Driver"	"https://github.com/bchavez/RethinkDb.Driver/"	"A RethinkDB database driver in C# striving for 100% ReQL API compatibility and completeness."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"99"	"15"	"19"	"GitHub - bchavez/RethinkDb.Driver: A C#/.NET RethinkDB driver with 100% ReQL API coverage. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 99 Fork 19 bchavez/RethinkDb.Driver Code Issues 10 Pull requests 0 Wiki Pulse Graphs 🎧 A C#/.NET RethinkDB driver with 100% ReQL API coverage. http://rethinkdb.com/api/java 703 commits 1 branch 66 releases 7 contributors C# 96.4% JavaScript 3.1% Other 0.5% C# JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2.3.9 v2.3.8 v2.3.7 v2.3.6 v2.3.6-beta-1 v2.3.5-beta-1 v2.3.4-beta-5 v2.3.4-beta-4 v2.3.4-beta-3 v2.3.4-beta-2 v2.3.4-beta-1 v2.3.3-beta-1 v2.3.2-beta-2 v2.3.2-beta-1 v2.3.1-beta-3 v2.3.1-beta-2 v2.3.1-beta-1 v2.2.10-beta-1 v2.2.9-beta-2 v2.2.9-beta-1 v2.2.8-beta-4 v2.2.8-beta-3 v2.2.8-beta-2 v2.2.8-beta-1 v2.2.7-beta-1 v2.2.6-beta-1 v2.2.5-beta-5 v2.2.5-beta-4 v2.2.5-beta-3 v2.2.5-beta-2 v2.2.5-beta-1 v2.2.4-beta-1 v2.2.3-beta-2 v2.2.3-beta-1 v2.2.2-beta-2 v2.2.2-beta-1 v2.2.1-beta-2 v2.2.1-beta-1 v2.2.0 v2.2.0-beta-2 v2.2.0-beta-1 v0.0.7-alpha7 v0.0.7-alpha6 v0.0.7-alpha5 v0.0.7-alpha4 v0.0.7-alpha3 v0.0.7-alpha2 v0.0.7-alpha1 v0.0.5-alpha9 v0.0.5-alpha7 v0.0.5-alpha6 v0.0.5-alpha5 v0.0.5-alpha4 v0.0.5-alpha3 v0.0.5-alpha2 v0.0.5-alpha1 v0.0.4-alpha10 v0.0.4-alpha9 v0.0.4-alpha8 v0.0.4-alpha7 v0.0.4-alpha6 v0.0.4-alpha5 v0.0.4-alpha4 v0.0.4-alpha3 v0.0.4-alpha2 v0.0.4-alpha1 Nothing to show New pull request Latest commit 7276f8b Jul 14, 2016 bchavez history //skipci Permalink Failed to load latest commit information. .github Issue template //skipci Apr 25, 2016 .paket Working on F# FAKE builder to replace Bau. Feb 1, 2016 Builder dotnetzip wtf Jul 6, 2016 Source ReQL XML Docs Update at version rethinkdb/rethinkdb@afede7a Jul 14, 2016 .gitignore CrossPlatform refactoring #32 Feb 16, 2016 CONTRIBUTING.md Music Wall //readme May 21, 2016 HISTORY.md history //skipci Jul 14, 2016 LICENSE Many bug fixes... Jan 29, 2016 README.md readme //skipci Jul 13, 2016 appveyor.yml removing RC2 installer, appveyor has everything installed. May 20, 2016 build.cmd lock down async with static analyzer. caught a few bad awaits. Feb 14, 2016 README.md RethinkDb.Driver Project Description A RethinkDB database driver written in C# with 100% ReQL API compatibility and completeness. This driver is based on the official Java Driver. The basic mechanics and architecture of both drivers are the same. Except this C# driver is a bit more cool, stylish and kick-ass. 😎 Getting Help Commercial Support Independent commercial support and consulting are available for this community driver. To ensure best practices in .NET, proper driver usage, training, and critical bug fixes for the C# community driver contact Brian Chavez (twitter) for more information. Commercial support for RethinkDB Server out-of-scope of the C# community driver can be found here. Community Support Slack (http://slack.rethinkdb.com) is the primary means of getting help for free. If you don't receive the invite, check your spam folder. The #general channel has many RethinkDB users willing to help. If your C# related question can't be answered by anyone tag @bchavez in your question. Download & Install NuGet Package RethinkDb.Driver Install-Package RethinkDb.Driver  Supported Runtimes Windows Linux Mac OS X .NET Framework v4.5 n/a n/a .NET Standard All platforms supporting .NET Standard 1.3 or higher. Eg: .NET Core 1.0. Mono All platforms 4.0.2 SR2 or higher RethinkDB server 2.3.0 or higher Documentation Home Query Examples Logging Connections & Pooling Single Connection Round Robin Pooling Epsilon Greedy Pooling Extra C# Features Optional Arguments Bracket DLR Integration Cursor[T] Run Helpers .RunAtom .RunCursor .RunResult .RunChanges .RunGrouping Async/Await Support POCO Support DAO Support JObject Support Anon Type Insert Anon Type Projection Consuming Changefeeds Reactive Extensions Implicit Operators Serializing Expressions GOTCHA Goblins! LINQ to ReQL Provider Differences Java ReQL API Documentation ReGrid File Storage What is ReGrid? Getting Started Buckets Files Revision Numbers Upload Download Seekable Streams Delete Driver Development Contributing Getting Started Unit Tests Protocol Debugging Threading Architecture Connection Pooling Architecture Quick Examples public static RethinkDB R = RethinkDB.R;  [Test] public void can_connect() {     var c = R.Connection()              .Hostname(""192.168.0.11"")              .Port(RethinkDBConstants.DefaultPort)              .Timeout(60)              .Connect();      int result = R.Random(1, 9).Add(R.Random(1, 9)).Run<int>(c);     Console.WriteLine(result);     result.Should().BeGreaterOrEqualTo(2).And.BeLessThan(18); } // Output: 8  [Test] public void insert_poco_without_id() {     var obj = new Foo { Bar = 1, Baz = 2};     var result = R.Db(""mydb"").Table(""mytable"").Insert(obj).Run(conn);     result.Dump(); } /*     //JObject: Insert Response     {       ""deleted"": 0,       ""errors"": 0,       ""generated_keys"": [         ""6931c97f-de3d-46d2-b0f9-956af9517a57""       ],       ""inserted"": 1,       ""replaced"": 0,       ""skipped"": 0,       ""unchanged"": 0     } */  [Test] public void insert_an_array_of_pocos() {     var list = new[]         {             new Foo {id = ""a"", Baz = 1, Bar = 1},             new Foo {id = ""b"", Baz = 2, Bar = 2},             new Foo {id = ""c"", Baz = 3, Bar = 3}         };     var result = R.Db(""mydb"").Table(""mytable"").Insert(list).Run(conn);     result.Dump(); } /*     //JObject Insert Response     {       ""deleted"": 0,       ""errors"": 0,       ""inserted"": 3,       ""replaced"": 0,       ""skipped"": 0,       ""unchanged"": 0     } */   [Test] public void get_a_poco() {     Foo foo = R.Db(""mydb"").Table(""mytable"").Get(""abc"").Run<Foo>(conn);     foo.Dump(); } //Foo Object /*     {       ""id"": ""abc"",       ""Bar"": 1,       ""Baz"": 2     } */ Contributing If you'd like to contribute, please consider reading some helpful tips before making changes. Contributors Created by Brian Chavez (twitter). Originally ported from the Java Driver by Josh Kuhn. Special thanks to the rest of the RethinkDB team (Josh, AtnNn, danielmewes, neumino) for answering ReQL protocol questions. Also, special thanks to Annie Ruygt for the wonderful GitHub banner! A big thanks to GitHub and all contributors: jrote1 (Jake Rote) ~ LINQ Provider fiLLLip (Filip Andre Larsen Tomren) cadabloom Music Wall 🎼 A small collection of videos that helped in the creation of this driver. =) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bchavez/RethinkDb.Driver/"	"A RethinkDB database driver in C# striving for 100% ReQL API compatibility and completeness."	"true"
"Database Drivers"	"ServiceStack Redis"	"https://github.com/ServiceStack/ServiceStack.Redis"	".NET's leading C# Redis Client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1052"	"185"	"584"	"GitHub - ServiceStack/ServiceStack.Redis: .NET's leading C# Redis Client Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 185 Star 1,052 Fork 584 ServiceStack/ServiceStack.Redis Code Pull requests 0 Wiki Pulse Graphs .NET's leading C# Redis Client https://servicestack.net/redis 1,133 commits 5 branches 28 releases 53 contributors C# 99.8% Batchfile 0.2% C# Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ci-testing-singlehost master netcore v3 vs2012 Nothing to show v4.0.60 v4.0.58 v4.0.56 v4.0.54 v4.0.52 v4.0.50 v4.0.48 v4.0.46 v4.0.44 v4.0.42 v4.0.40 v4.0.38 v4.0.36 v4.0.35 v4.0.34 v4.0.33 v4.0.32 v4.0.31 v4.0.30 v4.0.24 v4.0.23 v4.0.22 v4.0.21 v4.0.20 v4.0.19 v4.0.18 v4.0.17 v3-snapshot Nothing to show New pull request Latest commit 78b7788 Jul 9, 2016 mythz Update SS.Common dlls Permalink Failed to load latest commit information. NuGet.Signed/ServiceStack.Redis.Signed Update nspecs Aug 15, 2015 NuGet Update nspecs Aug 14, 2015 build Upgrade to latest gcloud ips for sentinel Aug 15, 2015 lib Update SS.Common dlls Jul 9, 2016 src Add support for running RedisData/RedisText operations in a Transaction Jun 27, 2016 tests Add support for running RedisData/RedisText operations in a Transaction Jun 27, 2016 .gitattributes - normalizing whitespaces Sep 29, 2012 .gitignore Upgrade to latest gcloud ips for sentinel Aug 14, 2015 CONTRIBUTING.md Add a Contributing.md Oct 13, 2013 README.md Fix spelling Jun 30, 2016 build.cmd - added NuGetPack target for build script Sep 19, 2012 license.txt Add v4 readme, licensing and NuGet changes Sep 18, 2013 README.md Join the ServiceStack Google+ Community or follow @ServiceStack for updates. C#/.NET Client for Redis Redis Connection Strings Redis Connection strings have been expanded to support the more versatile URI format which is now able to capture most of Redis Client settings in a single connection string (akin to DB Connection strings). Redis Connection Strings supports multiple URI-like formats, from a simple hostname or IP Address and port pair to a fully-qualified URI with multiple options specified on the QueryString. Some examples of supported formats: localhost 127.0.0.1:6379 redis://localhost:6379 password@localhost:6379 clientid:password@localhost:6379 redis://clientid:password@localhost:6380?ssl=true&db=1  More examples can be seen in ConfigTests.cs Any additional configuration can be specified as QueryString parameters. The full list of options that can be specified include: Ssl bool If this is an SSL connection Db int The Redis DB this connection should be set to Client string A text alias to specify for this connection for analytic purposes Password string UrlEncoded version of the Password for this connection ConnectTimeout int Timeout in ms for making a TCP Socket connection SendTimeout int Timeout in ms for making a synchronous TCP Socket Send ReceiveTimeout int Timeout in ms for waiting for a synchronous TCP Socket Receive IdleTimeOutSecs int Timeout in Seconds for an Idle connection to be considered active NamespacePrefix string Use a custom prefix for ServiceStack.Redis internal index colletions Download PM> Install-Package ServiceStack.Redis  Latest v4+ on NuGet is a commercial release with free quotas. Getting Started with AWS ElastiCache Redis and ServiceStack ServiceStack.Redis has great support AWS's ElastiCache Redis solution, follow this guide to help getting up and running quickly: ElastiCache Redis Redis Client Managers The recommended way to access RedisClient instances is to use one of the available Thread-Safe Client Managers below. Client Managers are connection factories which is ideally registered as a Singleton either in your IOC or static classes. RedisManagerPool With the enhanced Redis URI Connection Strings we've been able to simplify and streamline the existing PooledRedisClientManager implementation and have extracted it out into a new clients manager called RedisManagerPool. In addition to removing all above options on the Client Manager itself, readonly connection strings have also been removed so the configuration ends up much simpler and more aligned with the common use-case: container.Register<IRedisClientsManager>(c =>      new RedisManagerPool(redisConnectionString)); Pooling Behavior Any connections required after the maximum Pool size has been reached will be created and disposed outside of the Pool. By not being restricted to a maximum pool size, the pooling behavior in RedisManagerPool can maintain a smaller connection pool size at the cost of potentially having a higher opened/closed connection count. PooledRedisClientManager If you prefer to define options on the Client Manager itself or you want to provide separate Read/Write and ReadOnly (i.e. Master and Slave) redis-servers, use the PooledRedisClientManager instead: container.Register<IRedisClientsManager>(c =>      new PooledRedisClientManager(redisReadWriteHosts, redisReadOnlyHosts) {          ConnectTimeout = 100,         //...     }); Pooling Behavior The PooledRedisClientManager imposes a maximum connection limit and when its maximum pool size has been reached will instead block on any new connection requests until the next RedisClient is released back into the pool. If no client became available within PoolTimeout, a Pool TimeoutException will be thrown. BasicRedisClientManager If don't want to use connection pooling (i.e. your accessing a local redis-server instance) you can use a basic (non-pooled) Clients Manager which creates a new RedisClient instance each time: container.Register<IRedisClientsManager>(c =>      new BasicRedisClientManager(redisConnectionString)); Accessing the Redis Client Once registered, accessing the RedisClient is the same in all Client Managers, e.g: var clientsManager = container.Resolve<IRedisClientsManager>(); using (IRedisClient redis = clientsManager.GetClient()) {     redis.IncrementValue(""counter"");     List<string> days = redis.GetAllItemsFromList(""days"");      //Access Typed API     var redisTodos = redis.As<Todo>();      redisTodos.Store(new Todo {         Id = redisTodos.GetNextSequence(),         Content = ""Learn Redis"",     });      var todo = redisTodos.GetById(1);      //Access Native Client     var redisNative = (IRedisNativeClient)redis;      redisNative.Incr(""counter"");     List<string> days = redisNative.LRange(""days"", 0, -1); } A more detailed list of the available RedisClient APIs used in the example can be seen in the C# interfaces below: IRedisClient IRedisTypedClient IRedisNativeClient Redis React Browser Redis React is a simple user-friendly UI for browsing data in Redis servers which takes advantages of the complex type conventions built in the ServiceStack.Redis Client to provide a rich, human-friendly UI for navigating related datasets, enabling a fast and fluid browsing experience for your Redis servers. Live Demo Downloads available from Redis React Home Page Redis Sentinel To use the new Sentinel support, instead of populating the Redis Client Managers with the connection string of the master and slave instances you would create a single RedisSentinel instance configured with the connection string of the running Redis Sentinels: var sentinelHosts = new[]{ ""sentinel1"", ""sentinel2:6390"", ""sentinel3"" }; var sentinel = new RedisSentinel(sentinelHosts, masterName: ""mymaster""); This configues a RedisSentinel with 3 sentinel hosts looking at mymaster group. As the default port for sentinels when unspecified is 26379 and how RedisSentinel is able to auto-discover other sentinels, the minimum configuration required is with a single Sentinel host: var sentinel = new RedisSentinel(""sentinel1""); Custom Redis Connection String The host the RedisSentinel is configured with only applies to that Sentinel Host, to use the flexibility of Redis Connection Strings to apply configuration on individual Redis Clients you need to register a custom HostFilter: sentinel.HostFilter = host => ""{0}?db=1&RetryTimeout=5000"".Fmt(host); An alternative to using connection strings for configuring clients is to modify default configuration on RedisConfig. Change to use RedisManagerPool By default RedisSentinel uses a PooledRedisClientManager, this can be changed to use the newer RedisManagerPool with: sentinel.RedisManagerFactory = (master,slaves) => new RedisManagerPool(master); Start monitoring Sentinels Once configured, you can start monitoring the Redis Sentinel servers and access the pre-configured client manager with: IRedisClientsManager redisManager = sentinel.Start(); Which as before, can be registered in your preferred IOC as a singleton instance: container.Register<IRedisClientsManager>(c => sentinel.Start()); Configure Redis Sentinel Servers See the redis config project for a quick way to setup up the minimal highly available Redis Sentinel configuration including start/stop scripts for instantly running multiple redis instances on a single (or multiple) Windows, OSX or Linux servers. Redis Stats You can use the RedisStats class for visibility and introspection into your running instances. The Redis Stats wiki lists the stats available. Automatic Retries To improve the resilience of client connections, RedisClient will transparently retry failed Redis operations due to Socket and I/O Exceptions in an exponential backoff starting from 10ms up until the RetryTimeout of 3000ms. These defaults can be tweaked with: RedisConfig.DefaultRetryTimeout = 3000; RedisConfig.BackOffMultiplier = 10; ServiceStack.Redis SSL Support ServiceStack.Redis now supporting SSL connections making it suitable for accessing remote Redis server instances over a secure SSL connection. Connecting to Azure Redis As connecting to Azure Redis Cache via SSL was the primary use-case for this feature, we've added a new Getting connected to Azure Redis via SSL to help you get started. Redis GEO The release of Redis 3.2.0 brings it exciting new GEO capabilities which will let you store Lat/Long coordinates in Redis and query locations within a specified radius. To demonstrate this functionality we've created a new Redis GEO Live Demo which lets you click on anywhere in the U.S. to find the list of nearest cities within a given radius, Live Demo at: http://redisgeo.servicestack.net Generic APIs for calling Custom Redis commands Most of the time when waiting to use a new Redis Command you'll need to wait for an updated version of ServiceStack.Redis to add support for the new commands likewise there are times when the Redis Client doesn't offer every permutation that redis-server supports. With the new Custom and RawCommand APIs on IRedisClient and IRedisNativeClient you can now use the RedisClient to send your own custom commands that can call adhoc Redis commands: public interface IRedisClient {     ...     RedisText Custom(params object[] cmdWithArgs); }  public interface IRedisNativeClient {     ...     RedisData RawCommand(params object[] cmdWithArgs);     RedisData RawCommand(params byte[][] cmdWithBinaryArgs); } These Custom APIs take a flexible object[] arguments which accepts any serializable value e.g. byte[], string, int as well as any user-defined Complex Types which are transparently serialized as JSON and send across the wire as UTF-8 bytes. var ret = Redis.Custom(""SET"", ""foo"", 1);          // ret.Text = ""OK""  byte[] cmdSet = Commands.Set; ret = Redis.Custom(cmdSet, ""bar"", ""b"");           // ret.Text = ""OK""  ret = Redis.Custom(""GET"", ""foo"");                 // ret.Text = ""1"" There are also convenient extension methods on RedisData and RedisText that make it easy to access structured data, e.g: var ret = Redis.Custom(Commands.Keys, ""*""); var keys = ret.GetResults();                      // keys = [""foo"", ""bar""]  ret = Redis.Custom(Commands.MGet, ""foo"", ""bar""); var values = ret.GetResults();                    // values = [""1"", ""b""]  Enum.GetNames(typeof(DayOfWeek)).ToList()     .ForEach(x => Redis.Custom(Commands.RPush, ""DaysOfWeek"", x)); ret = Redis.Custom(Commands.LRange, ""DaysOfWeek"", 1, -2); var weekDays = ret.GetResults();        weekDays.PrintDump(); // [""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday""] and some more examples using Complex Types with the Custom APIs: var ret = Redis.Custom(Commands.Set, ""foo"", new Poco { Name = ""Bar"" }); // ret.Text = ""OK""  ret = Redis.Custom(Commands.Get, ""foo"");          // ret.Text =  {""Name"":""Bar""} Poco dto = ret.GetResult<Poco>();  dto.Name.Print(); // Bar This API is used in most of Redis React UI's redis.js JavaScript client library where Redis server commands are made available via the single ServiceStack Service: public object Any(CallRedis request) {     var args = request.Args.ToArray();     var response = new CallRedisResponse { Result = Redis.Custom(args) };     return response; } Managed Pub/Sub Server The Pub/Sub engine powering Redis ServerEvents and Redis MQ has been extracted and encapsulated it into a re-usable class that can be used independently for handling messages published to specific Redis Pub/Sub channels. RedisPubSubServer processes messages in a managed background thread that automatically reconnects when the redis-server connection fails and works like an independent background Service that can be stopped and started on command. The public API is captured in the IRedisPubSubServer interface: public interface IRedisPubSubServer : IDisposable {     IRedisClientsManager ClientsManager { get; }     // What Channels it's subscribed to     string[] Channels { get; }      // Run once on initial StartUp     Action OnInit { get; set; }     // Called each time a new Connection is Started     Action OnStart { get; set; }     // Invoked when Connection is broken or Stopped     Action OnStop { get; set; }     // Invoked after Dispose()     Action OnDispose { get; set; }      // Fired when each message is received     Action<string, string> OnMessage { get; set; }     // Fired after successfully subscribing to the specified channels     Action<string> OnUnSubscribe { get; set; }     // Called when an exception occurs      Action<Exception> OnError { get; set; }     // Called before attempting to Failover to a new redis master     Action<IRedisPubSubServer> OnFailover { get; set; }      int? KeepAliveRetryAfterMs { get; set; }     // The Current Time for RedisServer     DateTime CurrentServerTime { get; }      // Current Status: Starting, Started, Stopping, Stopped, Disposed     string GetStatus();     // Different life-cycle stats     string GetStatsDescription();      // Subscribe to specified Channels and listening for new messages     IRedisPubSubServer Start();     // Close active Connection and stop running background thread     void Stop();     // Stop than Start     void Restart(); } Usage To use RedisPubSubServer, initialize it with the channels you want to subscribe to and assign handlers for each of the events you want to handle. At a minimum you'll want to handle OnMessage: var clientsManager = new PooledRedisClientManager(); var redisPubSub = new RedisPubSubServer(clientsManager, ""channel-1"", ""channel-2"") {         OnMessage = (channel, msg) => ""Received '{0}' from '{1}'"".Print(msg, channel)     }.Start(); Calling Start() after it's initialized will get it to start listening and processing any messages published to the subscribed channels. Lex Operations The new ZRANGEBYLEX sorted set operations allowing you to query a sorted set lexically have been added. A good showcase for this is available on autocomplete.redis.io. These new operations are available as a 1:1 mapping with redis-server on IRedisNativeClient: public interface IRedisNativeClient {     ...     byte[][] ZRangeByLex(string setId, string min, string max, int? skip, int? take);     long ZLexCount(string setId, string min, string max);     long ZRemRangeByLex(string setId, string min, string max); } And the more user-friendly APIs under IRedisClient: public interface IRedisClient {     ...     List<string> SearchSortedSet(string setId, string start=null, string end=null);     long SearchSortedSetCount(string setId, string start=null, string end=null);     long RemoveRangeFromSortedSetBySearch(string setId, string start=null, string end=null); } Just like NuGet version matchers, Redis uses [ char to express inclusiveness and ( char for exclusiveness. Since the IRedisClient APIs defaults to inclusive searches, these two APIs are the same: Redis.SearchSortedSetCount(""zset"", ""a"", ""c"") Redis.SearchSortedSetCount(""zset"", ""[a"", ""[c"") Alternatively you can specify one or both bounds to be exclusive by using the ( prefix, e.g: Redis.SearchSortedSetCount(""zset"", ""a"", ""(c"") Redis.SearchSortedSetCount(""zset"", ""(a"", ""(c"") More API examples are available in LexTests.cs. HyperLog API The development branch of Redis server (available when v3.0 is released) includes an ingenious algorithm to approximate the unique elements in a set with maximum space and time efficiency. For details about how it works see Redis's creator Salvatore's blog who explains it in great detail. Essentially it lets you maintain an efficient way to count and merge unique elements in a set without having to store its elements. A Simple example of it in action: redis.AddToHyperLog(""set1"", ""a"", ""b"", ""c""); redis.AddToHyperLog(""set1"", ""c"", ""d""); var count = redis.CountHyperLog(""set1""); //4  redis.AddToHyperLog(""set2"", ""c"", ""d"", ""e"", ""f"");  redis.MergeHyperLogs(""mergedset"", ""set1"", ""set2"");  var mergeCount = redis.CountHyperLog(""mergedset""); //6 Scan APIs Redis v2.8 introduced a beautiful new SCAN operation that provides an optimal strategy for traversing a redis instance entire keyset in managable-size chunks utilizing only a client-side cursor and without introducing any server state. It's a higher performance alternative and should be used instead of KEYS in application code. SCAN and its related operations for traversing members of Sets, Sorted Sets and Hashes are now available in the Redis Client in the following APIs: public interface IRedisClient {     ...     IEnumerable<string> ScanAllKeys(string pattern = null, int pageSize = 1000);     IEnumerable<string> ScanAllSetItems(string setId, string pattern = null, int pageSize = 1000);     IEnumerable<KeyValuePair<string, double>> ScanAllSortedSetItems(string setId, string pattern = null, int pageSize = 1000);     IEnumerable<KeyValuePair<string, string>> ScanAllHashEntries(string hashId, string pattern = null, int pageSize = 1000);     }  //Low-level API public interface IRedisNativeClient {     ...     ScanResult Scan(ulong cursor, int count = 10, string match = null);     ScanResult SScan(string setId, ulong cursor, int count = 10, string match = null);     ScanResult ZScan(string setId, ulong cursor, int count = 10, string match = null);     ScanResult HScan(string hashId, ulong cursor, int count = 10, string match = null); } The IRedisClient provides a higher-level API that abstracts away the client cursor to expose a lazy Enumerable sequence to provide an optimal way to stream scanned results that integrates nicely with LINQ, e.g: var scanUsers = Redis.ScanAllKeys(""urn:User:*""); var sampleUsers = scanUsers.Take(10000).ToList(); //Stop after retrieving 10000 user keys Efficient SCAN in LUA The C# API below returns the first 10 results matching the key:* pattern: var keys = Redis.ScanAllKeys(pattern: ""key:*"", pageSize: 10)     .Take(10).ToList(); However the C# Streaming API above requires an unknown number of Redis Operations (bounded to the number of keys in Redis) to complete the request. The number of SCAN calls can be reduced by choosing a higher pageSize to tell Redis to scan more keys each time the SCAN operation is called. As the number of API calls has the potential to result in a large number of Redis Operations, it can end up yielding an unacceptable delay due to the latency of multiple dependent remote network calls. An easy solution is to instead have the multiple SCAN calls performed in-process on the Redis Server, eliminating the network latency of multiple SCAN calls, e.g: const string FastScanScript = @"" local limit = tonumber(ARGV[2]) local pattern = ARGV[1] local cursor = 0 local len = 0 local results = {} repeat     local r = redis.call('scan', cursor, 'MATCH', pattern, 'COUNT', limit)     cursor = tonumber(r[1])     for k,v in ipairs(r[2]) do         table.insert(results, v)         len = len + 1         if len == limit then break end     end until cursor == 0 or len == limit return results"";  RedisText r = redis.ExecLua(FastScanScript, ""key:*"", ""10""); r.Children.Count.Print() //= 10 The ExecLua API returns this complex LUA table response in the Children collection of the RedisText Response. Alternative Complex API Response Another way to return complex data structures in a LUA operation is to serialize the result as JSON return cjson.encode(results)  Which you can access as raw JSON by parsing the response as a String with: string json = redis.ExecLuaAsString(FastScanScript, ""key:*"", ""10""); This is also the approach used in Redis React's RedisServices. ExecCachedLua ExecCachedLua is a convenient high-level API that eliminates the bookkeeping required for executing high-performance server LUA Scripts which suffers from many of the problems that RDBMS stored procedures have which depends on pre-existing state in the RDBMS that needs to be updated with the latest version of the Stored Procedure. With Redis LUA you either have the option to send, parse, load then execute the entire LUA script each time it's called or alternatively you could pre-load the LUA Script into Redis once on StartUp and then execute it using the Script's SHA1 hash. The issue with this is that if the Redis server is accidentally flushed you're left with a broken application relying on a pre-existing script that's no longer there. The new ExecCachedLua API provides the best of both worlds where it will always execute the compiled SHA1 script, saving bandwidth and CPU but will also re-create the LUA Script if it no longer exists. You can instead execute the compiled LUA script above by its SHA1 identifier, which continues to work regardless if it never existed or was removed at runtime, e.g: // #1: Loads LUA script and caches SHA1 hash in Redis Client r = redis.ExecCachedLua(FastScanScript, sha1 =>     redis.ExecLuaSha(sha1, ""key:*"", ""10""));  // #2: Executes using cached SHA1 hash r = redis.ExecCachedLua(FastScanScript, sha1 =>     redis.ExecLuaSha(sha1, ""key:*"", ""10""));  // Deletes all existing compiled LUA scripts  redis.ScriptFlush();  // #3: Executes using cached SHA1 hash, gets NOSCRIPT Error,  //     re-creates then re-executes the LUA script using its SHA1 hash r = redis.ExecCachedLua(FastScanScript, sha1 =>     redis.ExecLuaSha(sha1, ""key:*"", ""10"")); IRedisClient LUA APIs The IRedisClient APIs for redis server-side LUA support have been re-factored into the more user-friendly APIs below: public interface IRedisClient  {     //Eval/Lua operations      T ExecCachedLua<T>(string scriptBody, Func<string, T> scriptSha1);      RedisText ExecLua(string body, params string[] args);     RedisText ExecLua(string luaBody, string[] keys, string[] args);     RedisText ExecLuaSha(string sha1, params string[] args);     RedisText ExecLuaSha(string sha1, string[] keys, string[] args);      string ExecLuaAsString(string luaBody, params string[] args);     string ExecLuaAsString(string luaBody, string[] keys, string[] args);     string ExecLuaShaAsString(string sha1, params string[] args);     string ExecLuaShaAsString(string sha1, string[] keys, string[] args);      int ExecLuaAsInt(string luaBody, params string[] args);     int ExecLuaAsInt(string luaBody, string[] keys, string[] args);     int ExecLuaShaAsInt(string sha1, params string[] args);     int ExecLuaShaAsInt(string sha1, string[] keys, string[] args);      List<string> ExecLuaAsList(string luaBody, params string[] args);     List<string> ExecLuaAsList(string luaBody, string[] keys, string[] args);     List<string> ExecLuaShaAsList(string sha1, params string[] args);     List<string> ExecLuaShaAsList(string sha1, string[] keys, string[] args);      string CalculateSha1(string luaBody);      bool HasLuaScript(string sha1Ref);     Dictionary<string, bool> WhichLuaScriptsExists(params string[] sha1Refs);     void RemoveAllLuaScripts();     void KillRunningLuaScript();     string LoadLuaScript(string body); } Usage Examples Here's how you can implement a ZPOP in Lua to remove the items with the lowest rank from a sorted set: var luaBody = @""     local val = redis.call('zrange', KEYS[1], 0, ARGV[1]-1)     if val then redis.call('zremrangebyrank', KEYS[1], 0, ARGV[1]-1) end     return val"";  var i = 0; var alphabet = 26.Times(c => ((char)('A' + c)).ToString()); alphabet.ForEach(x => Redis.AddItemToSortedSet(""zalphabet"", x, i++));  //Remove the letters with the lowest rank from the sorted set 'zalphabet' var letters = Redis.ExecLuaAsList(luaBody, keys: new[] { ""zalphabet"" }, args: new[] { ""3"" }); letters.PrintDump(); //[A, B, C] And how to implement ZREVPOP to remove items with the highest rank from a sorted set: var luaBody = @""     local val = redis.call('zrange', KEYS[1], -ARGV[1], -1)     if val then redis.call('zremrangebyrank', KEYS[1], -ARGV[1], -1) end     return val"";  var i = 0; var alphabet = 26.Times(c => ((char)('A' + c)).ToString()); alphabet.ForEach(x => Redis.AddItemToSortedSet(""zalphabet"", x, i++));  //Remove the letters with the highest rank from the sorted set 'zalphabet' List<string> letters = Redis.ExecLuaAsList(luaBody,      keys: new[] { ""zalphabet"" }, args: new[] { ""3"" });  letters.PrintDump(); //[X, Y, Z] Other examples Returning an int: int intVal = Redis.ExecLuaAsInt(""return 123""); //123 int intVal = Redis.ExecLuaAsInt(""return ARGV[1] + ARGV[2]"", ""10"", ""20""); //30 Returning an string: //Hello, Redis Lua! var strVal = Redis.ExecLuaAsString(@""return 'Hello, ' .. ARGV[1] .. '!'"", ""Redis Lua""); Returning a List of strings: Enum.GetNames(typeof(DayOfWeek)).ToList()     .ForEach(x => Redis.AddItemToList(""DaysOfWeek"", x));  var daysOfWeek = Redis.ExecLuaAsList(""return redis.call('LRANGE', 'DaysOfWeek', 0, -1)""); daysOfWeek.PrintDump(); //[Sunday, Monday, Tuesday, ...] More examples can be found in the Redis Eval Lua tests Overview The Redis client is an independent project and can be used with or without the ServiceStack webservices framework. Redis is one of the fastest and most feature-rich key-value stores to come from the NoSQL movement. It is similar to memcached but the dataset is not volatile, and values can either be strings lists, sets, sorted sets or hashes. ServiceStack's C# Redis Client is an Open Source C# Redis client based on Miguel de Icaza previous efforts with redis-sharp. There are a number of different APIs available which are all a friendly drop-in with your local IOC: The ServiceStack.Redis.RedisClient class below implements the following interfaces: ICacheClient - If you are using Redis solely as a cache, you should bind to the ServiceStack's common interface as there already are In-Memory an Memcached implementations available in ServiceStack, allowing you to easily switch providers in-future. IRedisNativeClient - For those wanting a low-level raw byte access (where you can control your own serialization/deserialization) that map 1:1 with Redis operations of the same name. For most cases if you require access to Redis specific functionality you would want to bind to the interface below: IRedisClient - Provides a friendlier, more descriptive API that lets you store values as strings (UTF8 encoding). IRedisTypedClient - created with IRedisClient.As<T>() - it returns a 'strongly-typed client' that provides a typed-interface for all redis value operations that works against any C#/.NET POCO type. The class hierarchy for the C# Redis clients effectively look like: RedisTypedClient (POCO) > RedisClient (string) > RedisNativeClient (raw byte[])  Each client provides a different layer of abstraction: The RedisNativeClient exposes raw byte[] apis and does no marshalling and passes all values directly to redis. The RedisClient assumes string values and simply converts strings to UTF8 bytes before sending to Redis The RedisTypedClient provides a generic interface allowing you to add POCO values. The POCO types are serialized using .NETs fastest JSON Serializer which is then converted to UTF8 bytes and sent to Redis. Redis Client API Overview Thread-safe client managers For multi-threaded applications you can choose from our different client connection managers: BasicRedisClientManager - a load-balance (master-write and read-slaves) client manager that returns a new IRedisClient connection with the defaults specified (faster when accessing a redis-server instance on the same host). PooledRedisClientManager - a load-balanced (master-write and read-slaves) client manager that utilizes a pool of redis client connections (faster when accessing a redis-server instance over the network). Docs and Downloads for older v3 BSD releases Copying Since September 2013, ServiceStack source code is available under GNU Affero General Public License/FOSS License Exception, see license.txt in the source. Alternative commercial licensing is also available, see https://servicestack.net/pricing for details. Contributing Commits should be made to the v3-fixes branch so they can be merged into both v3 and master (v4) release branches. Contributors need to approve the Contributor License Agreement before any code will be reviewed, see the Contributing wiki for more details. Redis Server builds for Windows MS Open Tech - Redis on Windows Downloads for Cygwin 32bit Redis Server Windows builds. Project that lets you run Redis as a Windows Service Another Redis as a Windows Service project, which allows you to run separate service for each Redis instance Downloads for MinGW 32bit and 64bit Redis Server Windows builds Redis Virtual Machines Run Redis in a Vagrant virtual machine Getting Started with the C# Redis client C# Redis Client wiki Contains all the examples, tutorials and resources you need to get you up to speed with common operations and the latest features. Useful Links on Redis server Specific Examples Using Transactions in Redis (i.e. MULTI/EXEC/DISCARD) Using Redis's built-in Publish/Subscribe pattern for high performance network notifications Using Redis to create high performance distributed locks spannable across multiple app servers Simple example using Redis Lists Below is a simple example to give you a flavour of how easy it is to use some of Redis's advanced data structures - in this case Redis Lists: Full source code of this example is viewable online using (var redisClient = new RedisClient()) {     //Create a 'strongly-typed' API that makes all Redis Value operations to apply against Shippers     IRedisTypedClient<Shipper> redis = redisClient.As<Shipper>();      //Redis lists implement IList<T> while Redis sets implement ICollection<T>     var currentShippers = redis.Lists[""urn:shippers:current""];     var prospectiveShippers = redis.Lists[""urn:shippers:prospective""];      currentShippers.Add(         new Shipper {             Id = redis.GetNextSequence(),             CompanyName = ""Trains R Us"",             DateCreated = DateTime.UtcNow,             ShipperType = ShipperType.Trains,             UniqueRef = Guid.NewGuid()         });      currentShippers.Add(         new Shipper {             Id = redis.GetNextSequence(),             CompanyName = ""Planes R Us"",             DateCreated = DateTime.UtcNow,             ShipperType = ShipperType.Planes,             UniqueRef = Guid.NewGuid()         });      var lameShipper = new Shipper {         Id = redis.GetNextSequence(),         CompanyName = ""We do everything!"",         DateCreated = DateTime.UtcNow,         ShipperType = ShipperType.All,         UniqueRef = Guid.NewGuid()     };      currentShippers.Add(lameShipper);      Dump(""ADDED 3 SHIPPERS:"", currentShippers);      currentShippers.Remove(lameShipper);      Dump(""REMOVED 1:"", currentShippers);      prospectiveShippers.Add(         new Shipper {             Id = redis.GetNextSequence(),             CompanyName = ""Trucks R Us"",             DateCreated = DateTime.UtcNow,             ShipperType = ShipperType.Automobiles,             UniqueRef = Guid.NewGuid()         });      Dump(""ADDED A PROSPECTIVE SHIPPER:"", prospectiveShippers);      redis.PopAndPushBetweenLists(prospectiveShippers, currentShippers);      Dump(""CURRENT SHIPPERS AFTER POP n' PUSH:"", currentShippers);     Dump(""PROSPECTIVE SHIPPERS AFTER POP n' PUSH:"", prospectiveShippers);      var poppedShipper = redis.PopFromList(currentShippers);     Dump(""POPPED a SHIPPER:"", poppedShipper);     Dump(""CURRENT SHIPPERS AFTER POP:"", currentShippers);      //reset sequence and delete all lists     redis.SetSequence(0);     redis.Remove(currentShippers, prospectiveShippers);     Dump(""DELETING CURRENT AND PROSPECTIVE SHIPPERS:"", currentShippers); }  /* == EXAMPLE OUTPUT ==  ADDED 3 SHIPPERS: Id:1,CompanyName:Trains R Us,ShipperType:Trains,DateCreated:2010-01-31T11:53:37.7169323Z,UniqueRef:d17c5db0415b44b2ac5da7b6ebd780f5 Id:2,CompanyName:Planes R Us,ShipperType:Planes,DateCreated:2010-01-31T11:53:37.799937Z,UniqueRef:e02a73191f4b4e7a9c44eef5b5965d06 Id:3,CompanyName:We do everything!,ShipperType:All,DateCreated:2010-01-31T11:53:37.8009371Z,UniqueRef:d0c249bbbaf84da39fc4afde1b34e332  REMOVED 1: Id:1,CompanyName:Trains R Us,ShipperType:Trains,DateCreated:2010-01-31T11:53:37.7169323Z,UniqueRef:d17c5db0415b44b2ac5da7b6ebd780f5 Id:2,CompanyName:Planes R Us,ShipperType:Planes,DateCreated:2010-01-31T11:53:37.799937Z,UniqueRef:e02a73191f4b4e7a9c44eef5b5965d06  ADDED A PROSPECTIVE SHIPPER: Id:4,CompanyName:Trucks R Us,ShipperType:Automobiles,DateCreated:2010-01-31T11:53:37.8539401Z,UniqueRef:67d7d4947ebc4b0ba5c4d42f5d903bec  CURRENT SHIPPERS AFTER POP n' PUSH: Id:4,CompanyName:Trucks R Us,ShipperType:Automobiles,DateCreated:2010-01-31T11:53:37.8539401Z,UniqueRef:67d7d4947ebc4b0ba5c4d42f5d903bec Id:1,CompanyName:Trains R Us,ShipperType:Trains,DateCreated:2010-01-31T11:53:37.7169323Z,UniqueRef:d17c5db0415b44b2ac5da7b6ebd780f5 Id:2,CompanyName:Planes R Us,ShipperType:Planes,DateCreated:2010-01-31T11:53:37.799937Z,UniqueRef:e02a73191f4b4e7a9c44eef5b5965d06  PROSPECTIVE SHIPPERS AFTER POP n' PUSH:  POPPED a SHIPPER: Id:2,CompanyName:Planes R Us,ShipperType:Planes,DateCreated:2010-01-31T11:53:37.799937Z,UniqueRef:e02a73191f4b4e7a9c44eef5b5965d06  CURRENT SHIPPERS AFTER POP: Id:4,CompanyName:Trucks R Us,ShipperType:Automobiles,DateCreated:2010-01-31T11:53:37.8539401Z,UniqueRef:67d7d4947ebc4b0ba5c4d42f5d903bec Id:1,CompanyName:Trains R Us,ShipperType:Trains,DateCreated:2010-01-31T11:53:37.7169323Z,UniqueRef:d17c5db0415b44b2ac5da7b6ebd780f5  DELETING CURRENT AND PROSPECTIVE SHIPPERS: */  More examples are available in the [RedisExamples Redis examples page] and in the comprehensive test suite Speed One of the best things about Redis is the speed - it is quick. This example below stores and gets the entire Northwind database (3202 records) in less 1.2 secs - we've never had it so quick! (Running inside a VS.NET/R# unit test on a 3 year old iMac) using (var client = new RedisClient()) {     var before = DateTime.Now;     client.StoreAll(NorthwindData.Categories);     client.StoreAll(NorthwindData.Customers);     client.StoreAll(NorthwindData.Employees);     client.StoreAll(NorthwindData.Shippers);     client.StoreAll(NorthwindData.Orders);     client.StoreAll(NorthwindData.Products);     client.StoreAll(NorthwindData.OrderDetails);     client.StoreAll(NorthwindData.CustomerCustomerDemos);     client.StoreAll(NorthwindData.Regions);     client.StoreAll(NorthwindData.Territories);     client.StoreAll(NorthwindData.EmployeeTerritories);      Console.WriteLine(""Took {0}ms to store the entire Northwind database ({1} records)"",         (DateTime.Now - before).TotalMilliseconds, totalRecords);       before = DateTime.Now;     var categories = client.GetAll<Category>();     var customers = client.GetAll<Customer>();     var employees = client.GetAll<Employee>();     var shippers = client.GetAll<Shipper>();     var orders = client.GetAll<Order>();     var products = client.GetAll<Product>();     var orderDetails = client.GetAll<OrderDetail>();     var customerCustomerDemos = client.GetAll<CustomerCustomerDemo>();     var regions = client.GetAll<Region>();     var territories = client.GetAll<Territory>();     var employeeTerritories = client.GetAll<EmployeeTerritory>();      Console.WriteLine(""Took {0}ms to get the entire Northwind database ({1} records)"",         (DateTime.Now - before).TotalMilliseconds, totalRecords); } /* == EXAMPLE OUTPUT ==  Took 1020.0583ms to store the entire Northwind database (3202 records) Took 132.0076ms to get the entire Northwind database (3202 records) */  Note: The total time taken includes an extra Redis operation for each record to store the id in a Redis set for each type as well as serializing and de-serializing each record using Service Stack's TypeSerializer. Community Resources Synchronizing Redis local caches for distributed multi-subscriber scenarios by @Tore_Aurstad Distributed Caching using Redis Server with .NET/C# Client by Sem.Shekhovtsov Fan Messaging with ServiceStack.Redis by miket Redis and VB.Net by @chrissie1 Using ServiceStack.Redis Part 2: Sets and Hashes by @msarchet Using the ServiceStack.Redis Client by @msarchet Implementing ServiceStack.Redis.RedisClient (.NET Client for Redis) by @NarizWallace Getting started with Redis in ASP.NET under Windows by @maxivak Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ServiceStack/ServiceStack.Redis"	".NET's leading C# Redis Client"	"true"
"Database Drivers"	"StackExchange Redis"	"https://github.com/StackExchange/StackExchange.Redis"	"General purpose redis client from StackExchange"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1441"	"212"	"504"	"GitHub - StackExchange/StackExchange.Redis: General purpose redis client Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 212 Star 1,441 Fork 504 StackExchange/StackExchange.Redis Code Issues 145 Pull requests 17 Wiki Pulse Graphs General purpose redis client 535 commits 5 branches 7 releases 59 contributors C# 99.9% Other 0.1% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags CoreCLR RC2 core-rc2 core-rtm master Nothing to show 1.1.604-alpha 1.1.553 1.1.0-alpha2 1.1.0-alpha1 1.0.488 1.0.481 1.0.479 Nothing to show New pull request Latest commit 7acc1c9 Jul 12, 2016 NickCraver committed on GitHub Merge pull request #438 from IlincescuMihai/patch-1 … Configuring the minIoThreads Permalink Failed to load latest commit information. .nuget Lib updates Apr 13, 2015 BasicTest RC2 upgrades to get an alpha out May 20, 2016 BasicTest_dnxcore50 RC2 upgrades to get an alpha out May 20, 2016 ConnectionWatcher Refactor project structure to be more manageable; move to CORE_CLR fo… Dec 10, 2015 Docs Configuring the minIoThreads Jul 5, 2016 MigratedBookSleeveTestSuite Set default version to 3.0 for Azure Mar 16, 2016 Redis Configs Investigation into #182 Apr 13, 2015 StackExchange.Redis.StrongName RC2 upgrades to get an alpha out May 20, 2016 StackExchange.Redis.Tests RC2 upgrades to get an alpha out May 20, 2016 StackExchange.Redis.Tests_Net46 Refactor project structure to be more manageable; move to CORE_CLR fo… Dec 10, 2015 StackExchange.Redis RC2 upgrades to get an alpha out May 20, 2016 StackExchange.Redis_Net40 Refactor project structure to be more manageable; move to CORE_CLR fo… Dec 10, 2015 StackExchange.Redis_Net45 Refactor project structure to be more manageable; move to CORE_CLR fo… Dec 10, 2015 StackExchange.Redis_Net46 Refactor project structure to be more manageable; move to CORE_CLR fo… Dec 10, 2015 packages Refactor project structure to be more manageable; move to CORE_CLR fo… Dec 10, 2015 .gitignore Attempt to fix the whitespace/encoding issue with Emacs. Nov 24, 2015 .hgignore Update MS redis (local dev server) to 2.8.4 Mar 27, 2014 LICENSE Meh, actually: less is clearer here. Let them read the license. Apr 17, 2014 NuGet.Config RC2 upgrades to get an alpha out May 20, 2016 README.md Docs: proper syntax highlighting on GitHub Dec 22, 2015 StackExchange.Redis.StrongName.nuspec nuspec update for strongname package as well #397 May 24, 2016 StackExchange.Redis.dnx.sln RC2 upgrades to get an alpha out May 20, 2016 StackExchange.Redis.nuspec net 40 project packages.config already has dependency on 1.1.10 updat… Apr 21, 2016 StackExchange.Redis.sln Refactor project structure to be more manageable; move to CORE_CLR fo… Dec 10, 2015 StackExchange.Redis.sln.DotSettings Code cleanup and C#6 feature use Jan 28, 2016 StackExchange.Redis.snk Strong named deploy (parallel and separate) Jun 24, 2014 StrongName.ps1 Strong named deploy (parallel and separate) Jun 24, 2014 build.msbuild Support Net40 Apr 14, 2014 global.json RC2 upgrades to get an alpha out May 20, 2016 monobuild.bash Tell mono folks why their DNS-based connect fails, and what to do abo… May 6, 2014 monobuild.cmd Tell mono folks why their DNS-based connect fails, and what to do abo… May 6, 2014 netbuild.cmd fix partial interfaces; codemaid; split SocketManager.Poll.cs code ou… Mar 26, 2014 README.md StackExchange.Redis StackExchange.Redis is a high performance general purpose redis client for .NET languages (C# etc). It is the logical successor to BookSleeve, and is the client developed-by (and used-by) Stack Exchange for busy sites like Stack Overflow. For the full reasons why this library was created (i.e. ""What about BookSleeve?"") please see here. Features High performance multiplexed design, allowing for efficient use of shared connections from multiple calling threads Abstraction over redis node configuration: the client can silently negotiate multiple redis servers for robustness and availability Convenient access to the full redis feature-set Full dual programming model both synchronous and asynchronous usage, without requiring ""sync over async"" usage of the TPL Support for redis ""cluster"" Installation StackExchange.Redis can be installed via the nuget UI (as StackExchange.Redis), or via the nuget package manager console: PM> Install-Package StackExchange.Redis If you require a strong-named package (because your project is strong-named), then you may wish to use instead: PM> Install-Package StackExchange.Redis.StrongName (for further reading, see here) Documentation Basic Usage - getting started and basic usage Configuration - options available when connecting to redis Pipelines and Multiplexers - what is a multiplexer? Keys, Values and Channels - discusses the data-types used on the API Transactions - how atomic transactions work in redis Events - the events available for logging / information purposes Pub/Sub Message Order - advice on sequential and concurrent processing Where are KEYS / SCAN / FLUSH*? - how to use server-based commands Profiling - profiling interfaces, as well as how to profile in an async world Scripting - running Lua scripts with convenient named parameter replacement Questions and Contributions If you think you have found a bug or have a feature request, please report an issue, or if appropriate: submit a pull request. If you have a question, feel free to contact me. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/StackExchange/StackExchange.Redis"	"General purpose redis client from StackExchange"	"true"
"Database Drivers"	"Cassandra"	"https://github.com/datastax/csharp-driver"	"DataStax.NET Driver for Apache Cassandra"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"186"	"81"	"121"	"GitHub - datastax/csharp-driver: DataStax .NET Driver for Apache Cassandra Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 81 Star 186 Fork 121 datastax/csharp-driver Code Pull requests 8 Wiki Pulse Graphs DataStax .NET Driver for Apache Cassandra 1,330 commits 18 branches 44 releases 34 contributors C# 99.9% Other 0.1% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 2.0 2.1 2.5 2.6 2.7 2.8 3.0 CSHARP-281-WTests CSHARP-305 CSHARP-307 CSHARP-455-test CSHARP-475 dse_3.1 gh-pages master netcore tcp-socket-async Nothing to show 3.0.7 3.0.6 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 3.0.0-beta2 3.0.0-beta1 2.8.0-alpha1 2.7.3 2.7.2 2.7.1 2.7.0 2.6.0 2.6.0-rc1 2.5.3-alpha1 2.5.2 2.5.1 2.5.0 2.5.0-rc1 2.1.7 2.1.6 2.1.5 2.1.4 2.1.3 2.1.2 2.1.1 2.1.0 2.1.0-rc1 2.1.0-beta1 2.0.3 2.0.2 2.0.0-beta2 2.0.0-beta1 1.0.4 1.0.3 1.0.3-dse 1.0.2 1.0.1 1.0.0 1.0.0-dse 0.9.1 Nothing to show New pull request Latest commit 3d453d2 Jul 1, 2016 alprema committed with jorgebay Observe exceptions in AttemptReconnection (#225) … The observed exceptions are silenced, since they will be already logged by AttemptReconnection Permalink Failed to load latest commit information. build Version bump to v3.0.7 Jun 27, 2016 doc Doc features and faq Apr 20, 2016 src Observe exceptions in AttemptReconnection (#225) Jul 1, 2016 tools Add a build script (msbuild) Apr 9, 2014 .gitattributes Doc features and faq Apr 20, 2016 .gitignore Removed packages from git May 30, 2014 .travis.yml Switch travis to containers Aug 26, 2015 CHANGELOG.md Version bump to v3.0.7 Jun 27, 2016 LICENSE Code cleanup Jan 27, 2013 NOTICE Use buffer pool for write path Oct 26, 2015 README.md Doc features and faq Apr 20, 2016 appveyor.yml Support C* 3.7 at appveyor (#233) Jun 20, 2016 appveyor_install.ps1 Test IdempotenceAwareRetryPolicy (#235) Jun 23, 2016 build.yaml Update build.yaml to support Cassandra 3.4 Mar 11, 2016 docs.yaml Doc features and faq Apr 20, 2016 doxyfile Updated doxyfile_csharp for new parameters Sep 15, 2015 README.md DataStax C# Driver for Apache Cassandra A modern, feature-rich and highly tunable C# client library for Apache Cassandra (1.2+) and DataStax Enterprise (3.1+) using exclusively Cassandra's binary protocol and Cassandra Query Language v3. Installation Get it on Nuget PM> Install-Package CassandraCSharpDriver Features Sync and Async API Simple, Prepared, and Batch statements Asynchronous IO, parallel execution, request pipelining Connection pooling Auto node discovery Automatic reconnection Configurable load balancing and retry policies Works with any cluster size Linq2Cql and Ado.Net support Documentation Documentation index Getting started guide API docs Getting Help You can use the project Mailing list or create a ticket on the Jira issue tracker. Upgrading from previous versions If you are upgrading from the 2.1 branch of the driver, be sure to have a look at the upgrade guide. If you are upgrading from the 1.x branch of the driver, follow the upgrade guide to 2.0, and then the above document. Basic Usage //Create a cluster instance using 3 cassandra nodes. var cluster = Cluster.Builder()   .AddContactPoints(""host1"", ""host2"", ""host3"")   .Build(); //Create connections to the nodes using a keyspace var session = cluster.Connect(""sample_keyspace""); //Execute a query on a connection synchronously var rs = session.Execute(""SELECT * FROM sample_table""); //Iterate through the RowSet foreach (var row in rs) {   var value = row.GetValue<int>(""sample_int_column"");   //do something with the value } Prepared statements Prepare your query once and bind different parameters to obtain best performance. //Prepare a statement once var ps = session.Prepare(""UPDATE user_profiles SET birth=? WHERE key=?"");  //...bind different parameters every time you need to execute var statement = ps.Bind(new DateTime(1942, 11, 27), ""hendrix""); //Execute the bound statement with the provided parameters session.Execute(statement); Batching statements You can execute multiple statements (prepared or unprepared) in a batch to update/insert several rows atomically even in different column families. //Prepare the statements involved in a profile update once var profileStmt = session.Prepare(""UPDATE user_profiles SET email=? WHERE key=?""); var userTrackStmt = session.Prepare(""INSERT INTO user_track (key, text, date) VALUES (?, ?, ?)""); //...you should reuse the prepared statement //Bind the parameters and add the statement to the batch batch var batch = new BatchStatement()   .Add(profileStmt.Bind(emailAddress, ""hendrix""))   .Add(userTrackStmt.Bind(""hendrix"", ""You changed your email"", DateTime.Now)); //Execute the batch session.Execute(batch); Asynchronous API Session allows asynchronous execution of statements (for any type of statement: simple, bound or batch) by exposing the ExecuteAsync method. //Execute a statement asynchronously using await var rs = await session.ExecuteAsync(statement); Avoid boilerplate mapping code The driver features a built-in Mapper and Linq components that can use to avoid boilerplate mapping code between cql rows and your application entities. User user = mapper.Single<User>(""SELECT name, email FROM users WHERE id = ?"", userId); See the driver components documentation for more information. Automatic pagination of results You can iterate indefinitely over the RowSet, having the rows fetched block by block until the rows available on the client side are exhausted. var statement = new SimpleStatement(""SELECT * from large_table""); //Set the page size, in this case the RowSet will not contain more than 1000 at any time statement.SetPageSize(1000); var rs = session.Execute(statement); foreach (var row in rs) {   //The enumerator will yield all the rows from Cassandra   //Retrieving them in the back in blocks of 1000. } User defined types mapping You can map your Cassandra User Defined Types to your application entities. For a given udt CREATE TYPE address (   street text,   city text,   zip_code int,   phones set<text> ); For a given class public class Address {   public string Street { get; set; }   public string City { get; set; }   public int ZipCode { get; set; }   public IEnumerable<string> Phones { get; set;} } You can either map the properties by name //Map the properties by name automatically session.UserDefinedTypes.Define(   UdtMap.For<Address>() ); Or you can define the properties manually session.UserDefinedTypes.Define(   UdtMap.For<Address>()     .Map(a => a.Street, ""street"")     .Map(a => a.City, ""city"")     .Map(a => a.ZipCode, ""zip_code"")     .Map(a => a.Phones, ""phones"") ); You should map your UDT to your entity once and you will be able to use that mapping during all your application lifetime. var rs = session.Execute(""SELECT id, name, address FROM users where id = x""); var row = rs.First(); //You can retrieve the field as a value of type Address var userAddress = row.GetValue<Address>(""address""); Console.WriteLine(""user lives on {0} Street"", userAddress.Street); Setting cluster and statement execution options You can set the options on how the driver connects to the nodes and the execution options. //Example at cluster level var cluster = Cluster   .Builder()   .AddContactPoints(hosts)   .WithCompression(CompressionType.LZ4)   .WithLoadBalancingPolicy(new DCAwareRoundRobinPolicy(""west""));  //Example at statement (simple, bound, batch) level var statement = new SimpleStatement(query)   .SetConsistencyLevel(ConsistencyLevel.Quorum)   .SetRetryPolicy(DowngradingConsistencyRetryPolicy.Instance)   .SetPageSize(1000); Feedback Requested Help us focus our efforts! Provide your input on the Platform and Runtime Survey (we kept it short). Building and running the tests You can use Visual Studio or msbuild to build the solution. Check the documentation for building the driver from source and running the tests. License Copyright 2012-2015, DataStax. Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/datastax/csharp-driver"	"DataStax.NET Driver for Apache Cassandra"	"true"
"Database Drivers"	"Couchbase"	"https://github.com/couchbase/couchbase-net-client"	"Official couchbase.NET client library, based on the Enyim memcached client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"147"	"35"	"150"	"GitHub - couchbase/couchbase-net-client: Couchbase .NET client library (official), based on the Enyim memcached client Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 147 Fork 150 couchbase/couchbase-net-client Code Pull requests 0 Pulse Graphs Couchbase .NET client library (official), based on the Enyim memcached client http://www.couchbase.org 812 commits 4 branches 57 releases 31 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/CoreCLR master release11 release13 Nothing to show v1.2 Beta20 2.3.3 2.3.1 2.3.0 2.2.8 2.2.7 2.2.6 2.2.5 2.2.4 2.2.3 2.2.2 2.2.1 2.2.0 2.2.0-dp1 2.1.4 2.1.3 2.1.2 2.1.1 2.1.0 2.0.3 2.0.2 2.0.1 2.0ga 2.0-beta2 1.3.13 1.3.12 1.3.11 1.3.10 1.3.9 1.3.8 1.3.7 1.3.6 1.3.5 1.3.4 1.3.3 1.3.2 1.3.1 1.3.0 1.2.9 1.2.8 1.2.7 1.2.6 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2-DP4 1.2-DP3 1.2-Beta-2 1.1.6 1.1.5 1.1 1.0 0.9.1 0.9 Nothing to show New pull request Latest commit dfb55bf Jul 6, 2016 brantburnett committed with jeffrymorris Refactor SslConnection to use Async SslStream methods (NCBC-1125) … Motivation ---------- SslStream in .Net Core doesn't support the Begin/End async pattern. Instead, it expects the use of TPL-based Async methods.  Modifications ------------- Updated Send to use a TPL based pattern, including using SynchronizationContextExclusion to help prevent deadlocks during awaits.  Also updated Authenticate to use AuthenticateAsClientAsync instead of AuthenticateAsClient, which is also deprecated.  Send<T> was already non-functional, and analysis indicated it was unused, so updated it to throw a NotImplementedException.  Results ------- SslConnection continues to function as designed, but no longer uses the deprecated Begin/End async pattern.  Change-Id: I3e02d9c5aa749b84515588ee5c84cdac2894b38b Reviewed-on: http://review.couchbase.org/65445 Reviewed-by: Jeffry Morris <jeffrymorris@gmail.com> Tested-by: Jeffry Morris <jeffrymorris@gmail.com> Permalink Failed to load latest commit information. Src Refactor SslConnection to use Async SslStream methods (NCBC-1125) Jul 6, 2016 build-utils NCBC-334: Add a method of getting the version of the library programa… Jan 6, 2014 .gitignore Nuget updates of common.logging to 3.3.1 and log4net to match Feb 22, 2016 .gitmodules NCBC-265: Refactor solution to include directly the Enyim dependencies May 24, 2013 README.md Update README.md Jan 26, 2015 README.md Official Couchbase .NET SDK master is 2.0 development branch release13 is 1.3.X development branch Running the Unit Tests To run the unit tests (for master), the following are required: Couchbase Server >= 3.0 installed on localhost N1QL DP4 downloaded, copied to disk and connected to your localhost Couchbase Server: see here. The ""beer-sample"" sample Bucket and data set installed. This can be installed by logging into the Couchbase Console (http://localhost:8091) and then Settings->Sample Buckets. The following buckets installed on localhost: ""default"" - the standard default bucket ""authenticated"" - a Couchbase bucket with a password of ""secret"" ""memcached"" - a Memcached bucket with no password Install an SSL certificate (copied from the Couchbase console) if you wish to run the SSL/TLS tests Note that some tests require a cluster (Observe tests and Replica Read tests for example) and will fail if running on localhost. Pull Requests and Submissions Being an Open Source project, the Couchbase SDK depends upon feedback and submissions from the community. If you feel as if you want to submit a bug fix or a feature, please post a Pull Request. The Pull Request will go through a formal code review process and merged after being +2'd by a Couchbase Engineer. In order to accept a submission, Couchbase requires that all contributors sign the Contributor License Agreement (CLA). You can do this by creating an account in Gerrit, our official Code Review system. After you have created your account, login and check the CLA checkbox. Once the CLA is signed, a Couchbase engineer will push the pull request to Gerrit and one or more Couchbase engineers will review the submission. If it looks good they will then +2 the changeset and merge it with master. In addition, if the submission needs more work, you will need to amend the Changeset with another Patchset. Note that is strongly encouraged to submit a Unit Test with each submission and also include a description of the submission, what changed and what the result is. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/couchbase/couchbase-net-client"	"Official couchbase.NET client library, based on the Enyim memcached client"	"true"
"Database Drivers"	"Firebird.NET"	"https://sourceforge.net/projects/firebird/"	"The.NET Data provider is written in C# and provides a high-performance, native implementation of the Firebird API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Firebird download | SourceForge.net SourceForge Browse Enterprise Blog Deals Help Create Log In or Join Solution Centers Go Parallel Resources Newsletters Cloud Storage Providers Business VoIP Providers Call Center Providers Home Browse Development Database Engines/Servers Firebird Firebird A powerful, cross platform, SQL database system Brought to you by: alexpeshkoff, asfernandes, awharrison, cincura_net, and 6 others Summary Files Reviews Support Wiki Mailing Lists News Code Cvs Git ★ 4.9 Stars (96) 23,812 Downloads (This Week) Last Update: 2016-07-07 Download FirebirdCS-2.5.3-26780-i386.pkg.zip Browse All Files Windows BSD Mac Linux Description Firebird RDBMS offers ANSI SQL features & runs on Linux, Windows & several Unix platforms. Features excellent concurrency & performance & powerful stored procedure & trigger language. WEBSITE link is below, TRACKER is http://tracker.firebirdsql.org Firebird Web Site Follow @firebirdsql Categories Database Engines/Servers License Mozilla Public License 1.1 (MPL 1.1) Features Lightweight Install Embedded engine available KEEP ME UPDATED By clicking on ""Follow"" below, you are agreeing to the Terms of Use and the Privacy Policy. Get notifications on updates for this project. Get newsletters with site news, white paper/events resources, and sponsored content from our partners. Invalid email address. Please try again. Sent to None. Follow You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. User Ratings 4.9 out of 5 stars ★★★★★ ★★★★ ★★★ ★★ ★ 92 1 0 0 3 ease 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 features 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 design 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 support 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 Write a Review User Reviews Filter All All ★★★★★ ★★★★ ★★★ ★★ ★ szakilaci 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Very powerful engine. Especially for stand-alone Delphi programs. Using it since first (0.9) release. Many THANKS for continuously fine-tuning, upgrading and sharing it! Posted 01/07/2015 meanmail 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 I use it in my projects Posted 01/05/2015 taucoder 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 fast & simple Posted 08/20/2014 akozlowski 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 I use it with pleasure Posted 05/31/2014 guetlaur 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Powerfull and easy to use RDBMS. I use it since version 1.03. Posted 08/23/2013 Read more reviews Additional Project Details Intended Audience System Administrators, Developers, End Users/Desktop User Interface Non-interactive (Daemon) Programming Language C#, Python, C++, PHP, Delphi/Kylix, Java Awards Registered 2000-07-31 Recommended Projects FlameRobin FlameRobin is a management GUI for Firebird Unified Interbase ZeosLib Deals Top Searches firebird firebird embedded server kit interbase firebird odbc firebird visual studio 2015 complete website source code firebird client firebird embedded firebird ddex delphi Report inappropriate content Thanks for helping keep SourceForge clean. Screenshot instructions: Windows Mac Red Hat Linux   Ubuntu Click URL instructions: Right-click on ad, choose ""Copy Link"", then paste here → (This may not be possible with some types of ads) More information about our ad policies X You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. Briefly describe the problem (required): Upload screenshot of ad (required): Select a file, or drag & drop file here. ✔ ✘ Please provide the ad click URL, if possible: SourceForge About Site Status @sfnet_ops Find and Develop Software Create a Project Software Directory Top Downloaded Projects Community Blog @sourceforge Resources Help Site Documentation Support Request © 2016 Slashdot Media. All Rights Reserved. Terms Privacy Opt Out Choices Advertise Get latest updates about Open Source Projects, Conferences and News. Sign up for the SourceForge newsletter: I agree to receive quotes, newsletters and other information from sourceforge.net and its partners regarding IT services and products. I understand that I can withdraw my consent at any time. Please refer to our Privacy Policy or Contact Us for more details You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. No, thanks Screenshots can attract more users to your project. Features can attract more users to your project."	"null"	"null"	"The.NET Data provider is written in C# and provides a high-performance, native implementation of the Firebird API"	"true"
"Datetime"	"NodaTime"	"https://github.com/nodatime/nodatime"	"Noda Time is an alternative date and time API for.NET. It helps you to think about your data more clearly, and express operations on that data more precisely."	"null"	"null"	"null"	"null"	"null"	"http://nodatime.org/"	"null"	"389"	"50"	"69"	"GitHub - nodatime/nodatime: A better date and time API for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 389 Fork 69 nodatime/nodatime Code Issues 69 Pull requests 3 Pulse Graphs A better date and time API for .NET http://nodatime.org 3,293 commits 9 branches 18 releases Fetching contributors C# 77.2% Groff 16.6% Makefile 3.6% Awk 0.9% HTML 0.6% CSS 0.4% Other 0.7% C# Groff Makefile Awk HTML CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0.x 1.1.x 1.2.x 1.3.x CSharp6 Period ProtoBenchmarks master profile259 Nothing to show TeamCity_build_0.2.a09a64eb2cdc_configurator] TeamCity_build_0.1.7dfd3e715c91_configurator] 2.0.0-alpha20150718 1.3.2 1.3.1 1.3.0 1.3.0-beta1 1.2.0 1.2.0-rc2 1.2.0-rc1 1.1.1 1.1.0 1.1.0-rc1 1.0.1 1.0.0 1.0.0-rc1 1.0.0-beta2 1.0.0-beta1 Nothing to show New pull request Latest commit 6b04c40 Jul 15, 2016 jskeet committed on GitHub Merge pull request #551 from jskeet/webconfig … Update web.config Permalink Failed to load latest commit information. build Update build scripts for ASP.NET COre Jul 11, 2016 data Add CLDR v29 Windows mapping data Mar 17, 2016 docs First part of using docfx for the web site. Jun 18, 2016 lib/commandline Portable version of the CommandLine library May 21, 2016 src Update web.config Jul 15, 2016 www Update TZDB to 2016f Jul 5, 2016 .gitattributes First step of canonicalizing line endings - normalize all text Mar 18, 2015 .gitignore Update benchmark code May 24, 2016 .travis.yml Upgrade to .NET Core 1.0 RTM. Jul 1, 2016 AUTHORS.txt Add Andrey to AUTHORS.txt Feb 14, 2016 LICENSE.txt Normalise line-ending for all remaining files. Mar 18, 2015 Makefile For checkfakepcl, don't attempt to run tests we don't build. Apr 21, 2015 NOTICE.txt Normalise line-ending for all remaining files. Mar 18, 2015 NodaTime Release Public Key.snk Added a ""Signed Release"" configuration with strong naming. Oct 23, 2012 NodaTime Release.snk Add the snk ""private"" signing key to the public repo Feb 17, 2016 NodaTime.FxCop Normalise line-ending for all remaining files. Mar 18, 2015 README.md Add Travis badge for the front page readme Jun 3, 2015 global.json Upgrade to .NET Core 1.0 RTM. Jul 1, 2016 README.md Noda Time is an alternative date and time API for .NET. It helps you to think about your data more clearly, and express operations on that data more precisely. Most enquiries about the project are best Project web site - for documentation, installation, downloads etc Group/mailing list - for discussion of potential features Project source and issue site Stack Overflow tag - for specific ""How do I do X?"" questions The above links should be used for most interactions. The Gitter chat linked below is also available, but as Noda Time is a small project, there are rarely people actively watching the chat - most concerns are better handled on Stack Overflow, the mailing list, or as a GitHub issue. Public chat room Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nodatime/nodatime"	"Noda Time is an alternative date and time API for.NET. It helps you to think about your data more clearly, and express operations on that data more precisely."	"true"
"Datetime"	"DateTimeExtensions"	"https://github.com/kappy/DateTimeExtensions"	"Common Date Time operations on the form of extensions to System.DateTime, including holidays and working days calculations on several culture locales."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"61"	"8"	"24"	"GitHub - kappy/DateTimeExtensions: This project is a merge of several common DateTime operations on the form of  extensions to System.DateTime, including natural date difference text (precise and human rounded), holidays and working days calculations on several culture locales. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 61 Fork 24 kappy/DateTimeExtensions Code Issues 3 Pull requests 0 Wiki Pulse Graphs This project is a merge of several common DateTime operations on the form of extensions to System.DateTime, including natural date difference text (precise and human rounded), holidays and working days calculations on several culture locales. http://datetimeextensions.azurewebsites.net/ 264 commits 4 branches 2 releases Fetching contributors HTML 94.2% C# 5.1% PowerShell 0.5% CSS 0.1% F# 0.1% JavaScript 0.0% HTML C# PowerShell CSS F# JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags FixedHolidayDefered gh-pages master release Nothing to show v3.1.2 3.5 Nothing to show New pull request Latest commit e79c3d1 Mar 4, 2016 Joao Matos Silva force add FAKE Permalink Failed to load latest commit information. .fake updated FAKE Mar 4, 2016 .nuget tools updated Dec 23, 2013 .tools force add FAKE Mar 4, 2016 DateTimeExtensions.Tests Fixed conflits from cuongtranba-master Mar 4, 2016 DateTimeExtensions updated FAKE Mar 4, 2016 packages Inital Commit Aug 22, 2011 .gitignore Added Fake and base build script Nov 8, 2013 DateTimeExtensions.jmconfig Korean holiday strategy and tests Feb 5, 2015 DateTimeExtensions.sln Fixed tests Nov 28, 2015 DateTimeExtensions.sln.DotSettings fixin ar-sa Feb 24, 2016 LICENSE.txt Added Apache 2.0 License Aug 13, 2012 README.md bump to version 3.9 Mar 4, 2016 build.cmd Added FAKE and base build script Nov 8, 2013 build.fsx updated FAKE Mar 4, 2016 default.ps1 updated teamcity integration Sep 4, 2012 en_NZ.html added fixed en-NZ holidays and tests Oct 5, 2012 psake.ps1 updated psake Oct 10, 2012 psake.psm1 updated psake Oct 10, 2012 teamcity.psm1 updated psake Oct 10, 2012 README.md DateTime Extensions http://www.kspace.pt/DateTimeExtensions/ This project is a merge of several common DateTime operations in the form of extensions to System.DateTime, including natural date difference text (precise and human rounded), holidays and working days calculations on several culture locales. Feedback will be much appreciated. You can check out a sample (WIP) project online on http://datetimeextensions.azurewebsites.net/ Major Features The following major features are currently implemented: Add or subtract Working days using locale holidays Export Holidays to calendar format Dates Difference in Natural Time (localized) Time of day General ""goto"" dates Working Days Calculations These extensions for System.DateTime adds methods to make calculations based on working days. A working day is defined in IWorkingDayCultureInfo in two ways: IsWorkingDay(DayOfWeek dayOfWeek) IsWorkingDay(DateTime date)  The first defines which day of the week is a working day (by default, working days are all week days except weekends). The last does the same as the first, but it's also able to check for any holiday. By default, no holidays are defined, unless there is a IWorkingDayCultureInfo implemented for the current thread CultureInfo. Avaiable CultureInfo implementations: Culture Culture pt-PT da-DK pt-BR fi-FI en-US is-IS en-GB nb-NO fr-FR nl-NL de-DE sv-SE es-ES es-AR es-MX en-AU en-ZA fr-CA (en-CA) ar-SA it-IT en-NZ en-GD (gd-GD, not really sure about this locale) en-IE sl-SL kr-KR zh-CN If your culture is not listed here you can contribute it!!! Fork me, implement it and send me the pull request, or just create an issue on the project github site. Export Holidays to calendar format This feature allows you to export the holidays from a DateTimeCultureInfo (see above) and export it to Microsoft Office Outlook. The IExportHolidaysFormat interface exposes one simple method for it: void Export(DateTimeCultureInfo dateTimeCultureInfo, int year, TextWriter writer)  Example: var exporter = ExportHolidayFormatLocator.LocateByType(ExportType.OfficeHolidays); exporter.Export(new WorkingDayCultureInfo(""pt-PT""), 2012, textwriter);  Dates Diff in Natural Time These extensions can compare two dates in natural language based on the current locale on current thread CultureInfo. There are 2 API points for them: fromDate.ToNaturalText(toTime, bool round = true) fromDate.ToExactNaturalText(toTime)  The first will return the most valuable time component with value > 0. The round flag will try to round the most significant time component based on the next least significant. Also, the round flag will round minutes and seconds to quarters after the first one. Avaiable CultureInfo implementations: Culture pt-PT pt-BR en-US en-GB fr-FR de-DE es-ES nl-NL nl-BE kr-KR Time of Day These extensions allow easy parsing of time expressions and add the ability to check if a DateTime instance is after, before or inside a period. bool IsBetween(this DateTime dateTime, Time startTime, Time endTime) bool IsBefore(this DateTime dateTime, Time time) bool IsAfter(this DateTime dateTime, Time time)  Other Extensions: fromDate.FirstDayOfTheMonth() fromDate.LastDayOfTheMonth() fromDate.LastDayOfWeek(DayOfWeek) fromDate.NextDayOfWeek(DayOfWeek) fromDate.LastDayOfWeekOfTheMonth(DayOfWeek) fromDate.FirstDayOfWeekOfTheMonth(DayOfWeek) fromDate.GetDiff(DateTime toDate)  How to Contribute Feel free to fork the project, work on your fork and send me the pull requests. You can also create issues with the features or changes that you think important. Also, this repository is built with autocrlf = true. Holidays Names When adding holidays resources names, plase prefix the culture specific holidays with the country name to avoid name colisison. Example: Portugal_FreedomDay Version History v3.9 Added Vietnam Holidays (thanks @cuongtranba) v3.8 Added Chinese Holidays breaking change: NewYear is now a GlobalHoliday and not a Christian Holiday v3.7.2 Fixed ar-SA not able to generate holidays on some years Restoring pt-PT holidays from 2016 and on Fixed en-ZA and es-AR not generating holidays in 2016 v3.7.1 Fixed #42 - Getting key already added error when using en-CA culture? Fixed #41 - Fixed bugs with Australian public holiday calculation (thanks @TonyZhu2015) v3.7 Added kr-KR Holidays and Natural text locales (thanks @jaeseonc) v3.6 Removed St.Patricks day on en-GB (thanks @ConspiringWithTheDamned) Added en-IE Ireland locale v3.5 Reformated solution to BSD/Allman bracer style Reformated solution to use spaces instead of tabs Added kingsday on nl-NL locale (thanks @rickbeerendonk) v3.4 Added possibility to localize holidays names. v3.3 Added Round, Ceiling, Floor features (thanks @jbasinger) v3.2.1 fixed ar-SA non working days of the week (now friday and saturday, thanks @falsair) v3.1.2 Fixed the Portuguese abolished holidays v3.1.1 Fixed a bug that was causing the abolished holidays to still be listed as holidays v3.1 Added en-NZ working days culture (Thanks @snoopydo) Re-removed the 4 holidays that are abolished by the PT government v3.0.1 Safe Locales implementation discovery v3.0 Culture specific strategies are now decorated with a specific attribute to allow a better and dynamic discovery. The Locator classes and method are now obsolete. DateTimeCultureInfo have been split into specific contexts. This will improve the single responsibility of the classes. Added Time feature BreakingChanges: DateTimeCultureInfo is split in WorkingDayCultureInfo and NaturealTextCultureInfo A lot of classes were moved and namespaced properly v2.2.5 Added nl-NL and nl-BE Natural Text Cultures (Thanks @frankgeerlings) bugfix: Multiple Holidays on the same day caused an error building the holiday map (Thanks @frankgeerlings) v2.2.4 bugfix: Holidays on weekends weren't considered as holidays v2.2.3 fixed bugs: fixed Laborday on Canada (en-CA and fr-CA) fixed some mobile holidays on Argentina (es-AR) fix a bug on Australian (en-AU) holidays strategy when moving Easter holidays to the next Monday that was already an holiday v2.2.2 Added new extension IsHoliday. This extension should be similar to IsWorkingDay but in reverse and disregarding the day of the week. Internal Refactoring: Holidays strategies were refactored to allow holidays with multiple observances. v2.2.1 Added a few more cultures: en-AU, fr-CA (en-CA), ar-SA, en-ZA, es-AR, es-MX, it-IT v2.2 Added support for defining holidays on a different calendar Added Jewish holidays definitions as a proof of concept v2.1.1 Bugfix: header and date format corrected v2.1 Added Export Holidays feature v2.0.5 Minor internal change in adding a HolidayStrategy Superclass DateTimeCultureInfo has now access to all holidays not regarding to the year v2.0.4 Natural Text is now more human based on reporting months and days v2.0.3 bugfixes: fi-FI Holidays enumeration is throwing a Argument Out Of Range Exception da-DK holiday Strategy is missnamed is-IS SeamensDay is returning Commerce Day v2.0.2 Added Nordic holidays cultures Added new type of Holiday: NthDayOfWeekAfterDayHoliday bugfixes: Pentecost holiday was not calculated correctly v2.0.1 bugfixes: NthDayOfWeekInMonth Calculations were corrected v2.0 Added Natural Time conversions features breaking chances: WorkingDayCulture info was renamed to DateTimeCultureInfo since its purpose has now multiple contexts. v1.2.1 Reverted the holidays abolishment on pt-PT culture since 2012 introduced on v1.2 cause it's still being discussed in Parliament v1.2 Changed pt-PT culture to reflect the holidays abolishment since 2012 Added the year dependent holiday (holidays that were created since, removed since, or only verified on certain years) breaking changes: Holiday.GetInstance(int year) now returns DateTime? instead of DateTime IHolidayStrategy.GetHolidaysOfYear(int year) was created to replace the property Holidays to be year independent IHolidayStrategy.Holidays now return only the holidays of the current year v1.1 Added more cultures api refactoring v1.0.1 Added more cultures Added other general extension methods v1.0 Initial Version. The only supported Culture is pt-PT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kappy/DateTimeExtensions"	"Common Date Time operations on the form of extensions to System.DateTime, including holidays and working days calculations on several culture locales."	"true"
"Decompilation"	"ILSpy"	"http://ilspy.net/"	"ILSpy is the open-source.NET assembly browser and decompiler"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2658"	"404"	"771"	"GitHub - icsharpcode/ILSpy: .NET Decompiler Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 404 Star 2,658 Fork 771 icsharpcode/ILSpy Code Issues 189 Pull requests 6 Wiki Pulse Graphs .NET Decompiler http://www.ilspy.net/ 2,017 commits 5 branches 12 releases 43 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 gh-pages master newdecompiler revert-681-upstream Nothing to show v2.4 v2.3.2 2.3.1 2.3 2.2 2.1 2.0.0 1.0.0 1.0-M3 1.0-M2 1.0-M1 1.0-Beta Nothing to show New pull request Latest commit e2e952a Jun 8, 2016 EdHarvey Node text for cs/vb constructors … use type name rather than .ctor/,cctor Permalink Failed to load latest commit information. AvalonEdit @ 19611ad Add AvalonEdit, NRefactory, and cecil submodules. Dec 27, 2015 BuildTools Use proper naming convention so the build artefacts are picked up pro… May 19, 2016 ICSharpCode.Decompiler remove commented code in DecompilerContext Jun 6, 2016 ILSpy.AddIn Increment addin version Jun 5, 2016 ILSpy.BamlDecompiler Revert ""use mono.cecil nuget-package in all projects instead of git s… May 19, 2016 ILSpy Node text for cs/vb constructors Jun 8, 2016 NRefactory @ a2b55de Add AvalonEdit, NRefactory, and cecil submodules. Dec 27, 2015 NRefactory.VB Fix #716: OverflowException when converting System.Enum To System.Int… Jun 2, 2016 SharpTreeView (SharpTreeView) add LockUpdates method to SharpTreeView Apr 27, 2016 TestPlugin Revert ""use mono.cecil nuget-package in all projects instead of git s… May 19, 2016 cecil @ 53df0bc Revert ""use mono.cecil nuget-package in all projects instead of git s… May 19, 2016 doc Fixing SendMessage API example Aug 10, 2014 packages Update addin version, update decompiler package version Jul 13, 2015 .editorconfig change formatting settings to be consistent with the rest of ILSpy Nov 13, 2014 .gitattributes Add .gitattributes and normalize newlines Oct 1, 2013 .gitignore git: Ignore Roslyn temp files Nov 13, 2014 .gitmodules Add AvalonEdit, NRefactory, and cecil submodules. Dec 27, 2015 .tgitconfig Add tgit.icon project config Apr 6, 2014 ILSpy.sln Revert ""use mono.cecil nuget-package in all projects instead of git s… May 19, 2016 README.md Update README.md Jun 1, 2016 README.txt Set to version 2.3.2 and copyright years to 2016 Apr 9, 2016 Rebracer.xml fix #614 - Keyword ""ref"" used instead of ""out"" Jun 4, 2016 appveyor.yml Fix path to tidy.py Jan 7, 2016 clean.bat .bat files: initialize git submodules if necessary Dec 27, 2015 debugbuild.bat Update all batch files to use MSBuild 14 May 19, 2016 releasebuild.bat Update all batch files to use MSBuild 14 May 19, 2016 README.md ILSpy @ilspy | ilspy.net Downloads Xcopy-deployable binaries via ilspy.net Visual Studio extension via VS Gallery Decompiler NuGet package via NuGet Get a recent nightly build from here License ILSpy is distributed under the MIT License. Included open-source libraries: Mono.Cecil: MIT License (thanks to Jb Evain) AvalonEdit: LGPL SharpTreeView: LGPL ICSharpCode.Decompiler: MIT License (developed as part of ILSpy) Ricciolo.StylesExplorer: MS-PL (part of ILSpy.BamlDecompiler.Plugin) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/icsharpcode/ILSpy"	"ILSpy is the open-source.NET assembly browser and decompiler"	"true"
"Decompilation"	"JustDecompile Engine"	"https://github.com/telerik/JustDecompileEngine"	"The decompilation engine of"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"647"	"114"	"119"	"GitHub - telerik/JustDecompileEngine: The decompilation engine of Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 114 Star 647 Fork 119 telerik/JustDecompileEngine Code Issues 1 Pull requests 0 Pulse Graphs The decompilation engine of http://www.telerik.com/products/decompiler.aspx 305 commits 1 branch 9 releases 5 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show ReleaseQ32015(default) ReleaseQ32015SP1(default) ReleaseQ22016(default) ReleaseQ22015(default) ReleaseQ22015SP1(default) ReleaseQ12016(default) ReleaseQ12016SP2(default) ReleaseQ12016SP1(default) ReleaseQ12015SP3(default) Nothing to show New pull request Latest commit f9d6760 Jul 7, 2016 Telerik Build User Auto-Build: Version Update [***NO_CI***] …  git-tfs-id: [http://tfs:8082/]$/Behemoth/Trunk/Source/OpenSource;C945116 Permalink Failed to load latest commit information. Cecil.Decompiler Added support for empty string cases. Fixed and added new tests. Jul 7, 2016 ConsoleRunner Fixed JustDecompileEngine solution. Mar 13, 2016 EngineInfrastructure C# languages are now singleton and can be created only by using the L… Apr 11, 2016 JustDecompile.External.JustAssembly Fixed JustAssembly writers to use the new infrastructure for passing … Jun 20, 2016 JustDecompileCmdShell Refactored the infrastructure for passing settings to writers. Fixed … Jun 20, 2016 MSBuildProjectCreator Refactored the infrastructure for passing settings to writers. Fixed … Jun 20, 2016 Mono.Cecil Added support for modules in VB.NET Apr 22, 2016 .gitignore Added .gitignore Apr 28, 2015 CommonVersionAssemblyInfo.cs Auto-Build: Version Update [***NO_CI***] Jul 7, 2016 JustDecompile.External.JustAssembly.sln Build configurations fixes. Feb 12, 2016 JustDecompileEngine.sln Initial commit Apr 28, 2015 License Create License Apr 29, 2015 License.md Rename License to License.md Apr 29, 2015 NOTICE.txt Added Mono.Cecil license and NOTICE.txt May 14, 2015 README.md Update README.md Feb 3, 2016 README.md JustDecompile Engine This is the engine of the popular .NET decompiler JustDecompile. C# is the only programming language used. Copyright (c) 2011 - 2016 Telerik AD Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Getting Started Clone the repository and open JustDecompileEngine.sln in Microsoft (r) Visual Studio (r). Set your startup project to ConsoleRunner. Enjoy See this getting started post for more info. Working with JustDecompile Engine JustDecompile UI remains private at this time. JustDecompile, however, has rich console functionality and that has been opensourced here. One can use the console project generation feature to see the results of the changes made to the engine. The ConsoleRunner project is a console app that exposes that functionality and makes testing easy. When started it prints out all the available commands and switches. How to Contribute to JustDecompile Engine We encourage and support an active, healthy community that accepts contributions from the public. We'd like you to be a part of that community. Before submitting a pull request, please, read and sign the Contributors License Agreement How to Contribute to JustDecompile Feature Suggestions Bug Reports / Discussion Related The JustDecompile Plugins are also available on GitHub under various open source licenses. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/telerik/JustDecompileEngine"	"The decompilation engine of"	"true"
"Decompilation"	"JustDecompile"	"http://www.telerik.com/products/decompiler.aspx"	"The decompilation engine of"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"647"	"114"	"119"	"GitHub - telerik/JustDecompileEngine: The decompilation engine of Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 114 Star 647 Fork 119 telerik/JustDecompileEngine Code Issues 1 Pull requests 0 Pulse Graphs The decompilation engine of http://www.telerik.com/products/decompiler.aspx 305 commits 1 branch 9 releases 5 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show ReleaseQ32015(default) ReleaseQ32015SP1(default) ReleaseQ22016(default) ReleaseQ22015(default) ReleaseQ22015SP1(default) ReleaseQ12016(default) ReleaseQ12016SP2(default) ReleaseQ12016SP1(default) ReleaseQ12015SP3(default) Nothing to show New pull request Latest commit f9d6760 Jul 7, 2016 Telerik Build User Auto-Build: Version Update [***NO_CI***] …  git-tfs-id: [http://tfs:8082/]$/Behemoth/Trunk/Source/OpenSource;C945116 Permalink Failed to load latest commit information. Cecil.Decompiler Added support for empty string cases. Fixed and added new tests. Jul 7, 2016 ConsoleRunner Fixed JustDecompileEngine solution. Mar 13, 2016 EngineInfrastructure C# languages are now singleton and can be created only by using the L… Apr 11, 2016 JustDecompile.External.JustAssembly Fixed JustAssembly writers to use the new infrastructure for passing … Jun 20, 2016 JustDecompileCmdShell Refactored the infrastructure for passing settings to writers. Fixed … Jun 20, 2016 MSBuildProjectCreator Refactored the infrastructure for passing settings to writers. Fixed … Jun 20, 2016 Mono.Cecil Added support for modules in VB.NET Apr 22, 2016 .gitignore Added .gitignore Apr 28, 2015 CommonVersionAssemblyInfo.cs Auto-Build: Version Update [***NO_CI***] Jul 7, 2016 JustDecompile.External.JustAssembly.sln Build configurations fixes. Feb 12, 2016 JustDecompileEngine.sln Initial commit Apr 28, 2015 License Create License Apr 29, 2015 License.md Rename License to License.md Apr 29, 2015 NOTICE.txt Added Mono.Cecil license and NOTICE.txt May 14, 2015 README.md Update README.md Feb 3, 2016 README.md JustDecompile Engine This is the engine of the popular .NET decompiler JustDecompile. C# is the only programming language used. Copyright (c) 2011 - 2016 Telerik AD Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Getting Started Clone the repository and open JustDecompileEngine.sln in Microsoft (r) Visual Studio (r). Set your startup project to ConsoleRunner. Enjoy See this getting started post for more info. Working with JustDecompile Engine JustDecompile UI remains private at this time. JustDecompile, however, has rich console functionality and that has been opensourced here. One can use the console project generation feature to see the results of the changes made to the engine. The ConsoleRunner project is a console app that exposes that functionality and makes testing easy. When started it prints out all the available commands and switches. How to Contribute to JustDecompile Engine We encourage and support an active, healthy community that accepts contributions from the public. We'd like you to be a part of that community. Before submitting a pull request, please, read and sign the Contributors License Agreement How to Contribute to JustDecompile Feature Suggestions Bug Reports / Discussion Related The JustDecompile Plugins are also available on GitHub under various open source licenses. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/telerik/justdecompileengine"	"The decompilation engine of"	"true"
"Deployment"	"Unfold"	"https://github.com/thomasvm/unfold"	"Powershell-based deployment solution for.net web applications"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"96"	"13"	"11"	"GitHub - thomasvm/unfold: Powershell-based deployment solution for .net web applications Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 96 Fork 11 thomasvm/unfold Code Issues 1 Pull requests 0 Wiki Pulse Graphs Powershell-based deployment solution for .net web applications 203 commits 1 branch 0 releases 2 contributors PowerShell 100.0% PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit ba0462c Oct 7, 2014 thomasvm Don't fail first checkout on remote machines Permalink Failed to load latest commit information. examples more docs Sep 18, 2012 lib Don't fail first checkout on remote machines Oct 7, 2014 package update to nuget version 0.4.1 Jan 29, 2013 template Minor spelling amendmend Apr 29, 2013 .gitignore Ignore vim swp file Jul 30, 2012 readme.md Fix typo in readme Apr 16, 2014 tasks.ps1 Make code to link current folder easier to read May 14, 2014 unfold.psm1 Add out-of-the-box fluentmigrator support Nov 19, 2012 readme.md Unfold Unfold is a complete deployment solution for .net based web applications. It gives you the ability to easily create and customize your deployment scenario's without having to resort to complex tools that are hard to automate or difficult to setup. Unfold is only powershell, so there's very little magic going on under the hood. Check Getting Started wiki page for installation instructions and a quickstart For updates and info, please check my blog An introduction A full explanation of the deployment tasks An example extension: minifying css and javascript How unfold handles rollback Configuring local builds Example The code snippet below is the entire deployment script for RaccoonBlog, the blogging engine behind Ayende's blog. ## A deployment example for RaccoonBlog, the blog engine that's powering ## blogs like Ayende's  # Configuration Set-Config project ""raccoonblog""  Set-Config scm git Set-Config repository ""https://github.com/fitzchak/RaccoonBlog.git""  # Environment to use when not specified Set-Config default dev  Set-Config msbuild @('.\code\RaccoonBlog.Web\RaccoonBlog.Web.csproj')  # For custom apppool name Set-Config apppool ""raccoonblog""  # Environments Set-Environment dev {     Set-Config basePath ""c:\inetpub\wwwroot\raccoon""      # machine to deploy to     Set-Config machine ""localhost"" }  Set-Environment staging {     Set-Config basePath ""d:\sites\raccoon""     Set-Config machine ""122.123.124.125"" # ip address where WinRM is configured }  # Tasks Import-DefaultTasks  # Set deploy as default task task Default -depends ""deploy"" Executing a deployment is now simply a matter of executing the following PowerShell command in the folder where your deployment script resides .\unfold.ps1 deploy -to staging Features Can deploy to both local and remote machines Deployments are based on what's in source control (git, svn) not what's in your working copy Rollback Deployment flow can be extended and/or customized through task hooks in order to allow advanced scenarios like setting up a static website to server your images, js and css migrating the database modifying Web.config or other configuration files Dependencies There's nothing extra you need to install. Everything comes out-of-the-box. Unfold depends on the following technologies. They are included in the installation. For task configuration we depend on psake For access to remote machines we used powershell remoting, the SSH for windows. Check the wikifor instructions on how to set this up on the deployment target. TODO hg support, and other scms native support for database migration runners like FluentMigrator, DbUp or Entity Framework Migrations support for deploying to multiple machines. At the moment there can be only one target. Create-AssemblyInfo function for generating a shared assembmy info. Based on this Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thomasvm/unfold"	"Powershell-based deployment solution for.net web applications"	"true"
"Deployment"	"DbUp"	"https://github.com/DbUp/DbUp"	".NET library that helps you to deploy changes to SQL Server databases. It tracks which SQL scripts have been run already, and runs the change scripts that are needed to get your database up to date"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"347"	"50"	"177"	"GitHub - DbUp/DbUp: DbUp is a .NET library that helps you to deploy changes to SQL Server databases. It tracks which SQL scripts have been run already, and runs the change scripts that are needed to get your database up to date. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 347 Fork 177 DbUp/DbUp Code Issues 39 Pull requests 4 Pulse Graphs DbUp is a .NET library that helps you to deploy changes to SQL Server databases. It tracks which SQL scripts have been run already, and runs the change scripts that are needed to get your database up to date. http://dbup.github.io 440 commits 3 branches 26 releases 42 contributors C# 97.6% PowerShell 2.4% C# PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master netcore release/4.0.0 Nothing to show v3.0.6 v2.0.119 v2.0.115 v2.0.113 build-2.0.113 build-2.0.112 build-2.0.111 build-2.0.110 build-2.0.109 build-2.0.106 build-2.0.105 build-2.0.104 build-2.0.103 build-2.0.102 build-2.0.101 4.0.0-beta.1 3.3.3 3.3.2 3.3.1 3.3.0 3.2.1 3.2.0 3.1.2 3.1.1 3.1.0 3.0.2 Nothing to show New pull request Latest commit 4e9e067 Jun 20, 2016 JakeGinnivan committed on GitHub Merge pull request #200 from LRPalacios/patch-1 … Update index.md add note about EnsureDatabase Permalink Failed to load latest commit information. build Moving things around Aug 23, 2015 docs Update index.md add note about EnsureDatabase Jun 15, 2016 lib Moving things around Aug 23, 2015 src Fix for #188 Table '<schemaversions>' doesn't exist May 13, 2016 .gitattributes Remove the merge=union for csproj files.. causing too much pain Sep 10, 2015 .gitignore Updated to ignore packages folder Sep 10, 2015 GitVersionConfig.yaml Bumped Minor Sep 10, 2015 README.md Removed link to landing page Sep 11, 2015 appveyor.yml Build tweak Sep 11, 2015 license.txt Moving things around Aug 23, 2015 mkdocs.yml Fix typo trasactions to transactions Dec 10, 2015 README.md DbUp is a .NET library that helps you to deploy changes to SQL Server databases. It tracks which SQL scripts have been run already, and runs the change scripts that are needed to get your database up to date. Stable Prerelease Documentation DbUp DbUp-MySql DbUp-SQLite DbUp-SQLite-Mono DbUp-SqlCe DbUp-PostgreSQL DbUp-Firebird Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/DbUp/DbUp"	".NET library that helps you to deploy changes to SQL Server databases. It tracks which SQL scripts have been run already, and runs the change scripts that are needed to get your database up to date"	"true"
"DirectX"	"SlimDX"	"https://slimdx.org/"	"DirectX framework wrapper for.NET applications"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"SlimDX Homepage Home Features Download Documentation Tutorials Licensing Consulting What is SlimDX? SlimDX is a free open source framework that enables developers to easily build DirectX applications using .NET technologies such as C#, VB.NET, and IronPython. It is designed to be an efficient, simple, and lean wrapper that fully encompasses all of Microsoft's gaming and multimedia technologies and exposes them to managed code. All of the code is under the MIT/X11 license, and all content is under the Creative Commons Attribution-Share Alike license. Our latest release is March 2011, and can be found for users and developers on the Download page. All development is based in our Google Code homepage. You can use that site to report bugs (using our issues page), as well as download a complete copy of the source code. If you have questions to ask, or otherwise wish to discuss SlimDX, we ask that you use the DirectX forum on GameDev.Net. This is the only forum on which the developers are active; we do not use any other forums or mailing lists. Please prefix your thread subject with [SlimDX] if the question is reasonably specific to SlimDX. If it isn't, feel free to include or exclude the prefix as you like. You can also try and get a hold of us on IRC, in the #graphicsdev channel on AfterNET. Consulting Services SlimDX Consulting is now up and running to help you get the most of your applications. Our expertise in DirectX, SlimDX, and both managed and native code means getting things done in a fraction of the time and cost of an in house solution. That leaves you to focus on your application, instead of fighting with unfamiliar libraries and obscure bugs. SlimDX already powers a wide range of multimedia, from big budget games to large scale weather services to television. You deserve the same level of polish for your own projects. Visit our Consulting page for more information what we can do for you. Why use SlimDX? SlimDX is a highly polished, fully featured wrapper around almost all Microsoft multimedia and gaming APIs. There are however several other choices for managed game development. Follow the link below to our features page to get a list of notable SlimDX features, as well as comparison charts comparing the main players in the managed game development scene, both past and present: SlimDX, XNA, MDX, OpenTK, and the Windows API Code Pack. Read More... Getting Started Getting started is easy! Check out our tutorials page for an introduction to SlimDX and Direct3D 11, or follow the link below to read our documentation article on getting started with SlimDX development. While SlimDX doesn't have many samples and or in-depth documentation, concepts related by XNA, MDX, and DirectX tutorials on the web should translate easily to SlimDX. We recommend the DirectX SDK documentation as a particularly good source of explanatory material. Read More... Current Status SlimDX is currently rock solid, covers just about every multimedia API provided by Microsoft, and is stable enough to be used by commercial projects and companies, including several AAA game studios. Several companies and products using SlimDX: Spiderman: Web of Shadows Zipper Interactive LizardTech Star Wars: The Force Unleashed Copyright (c) 2009-2011 SlimDX Group. All Rights Reserved."	"null"	"null"	"DirectX framework wrapper for.NET applications"	"true"
"DirectX"	"SharpDX"	"https://github.com/sharpdx/SharpDX"	"SharpDX is an open-source project delivering the full DirectX API for.Net on all Windows platforms, allowing the development of high performance game, 2D and 3D graphics rendering as well as realtime sound application."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"597"	"107"	"259"	"GitHub - sharpdx/SharpDX: SharpDX GitHub Repository Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 107 Star 597 Fork 259 sharpdx/SharpDX Code Issues 81 Pull requests 3 Pulse Graphs SharpDX GitHub Repository http://sharpdx.org 2,618 commits 6 branches 18 releases 63 contributors C# 61.8% C++ 28.3% C 9.7% Groff 0.1% HTML 0.1% Batchfile 0.0% C# C++ C Groff HTML Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags diet effect_clone master new_comobject sharpgen_castxml toolkit-direct2d Nothing to show v3.0.2 v3.0.1 v3.0.0 v2.0 latest 2.6.3 2.6.2 2.6.0 2.5.0 2.4.2 2.4.1 2.4.0 2.3.1 2.3.0 2.2.0 2.1.0 2.0.4 2.0.3 Nothing to show New pull request Latest commit b61b86a Jul 6, 2016 xoofx [Build] Update MSDNDoc.zip Permalink Failed to load latest commit information. Build Fix issue with signing assemblies from PR. Remove SharpDXSign config … Jun 3, 2016 Documentation [Build] Update license date Jun 16, 2014 External [Direct2D] update mapping for Direct2D Jun 23, 2016 Images [Misc] Add logo-web Nov 7, 2013 Samples @ ed7e80c [Samples] Bump to latest samples Mar 16, 2016 Source [Build] Update MSDNDoc.zip Jul 6, 2016 .gitignore Effects11 @ x64 build Jan 18, 2015 .gitmodules [Samples] Add submodule Samples Apr 1, 2015 License.txt [Build] Update license Jul 9, 2014 Readme.md [Wiki] Fix wiki link Jan 4, 2016 ReleaseNotes.md [Build] Update release notes for final 3.0.0 Dec 25, 2015 SharpDX-Desktop.sln [Direct3D10] return source from [c6d8e45] Jun 16, 2016 SharpDX-Desktop.sln.DotSettings [Build] Update Resharper settings Aug 18, 2015 SharpDX-StoreApp.props [All] BREAKING CHANGES. Refactor whole building. The full list of cha… Apr 1, 2015 SharpDX-StoreApp.sln [Direct3D10] remove from StoreApp Jun 17, 2016 SharpDX-StoreApp.sln.DotSettings [All] BREAKING CHANGES. Refactor whole building. The full list of cha… Apr 1, 2015 Readme.md SharpDX Official web site: sharpdx.org SharpDX is an open-source project delivering the full DirectX API for .Net on all Windows platforms, allowing the development of high performance game, 2D and 3D graphics rendering as well as realtime sound application. Wiki Documentation You can find more documentation on the Wiki Build In order to compile SharpDX, you need to install the Windows 10 SDK 10.0.10586.0 Samples A collection of Samples using SharpDX exists as a separate github project. Licensing MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sharpdx/SharpDX"	"SharpDX is an open-source project delivering the full DirectX API for.Net on all Windows platforms, allowing the development of high performance game, 2D and 3D graphics rendering as well as realtime sound application."	"true"
"Distributed Computing"	"Akka.net"	"https://github.com/akkadotnet/akka.net"	"Akka.NET is a port of the popular Java/Scala framework Akka to.NET. This is a community driven port and is not affiliated with Typesafe who makes the original Java/Scala version."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1807"	"249"	"497"	"GitHub - akkadotnet/akka.net: Port of Akka actors for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 249 Star 1,807 Fork 497 akkadotnet/akka.net Code Issues 159 Pull requests 19 Pulse Graphs Port of Akka actors for .NET http://getakka.net 3,742 commits 7 branches 36 releases Fetching contributors C# 98.6% F# 1.1% Other 0.3% C# F# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags akka-streams ddata dev master netcore v1.1 v1.5 Nothing to show v1.1 v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0 v0.8 v0.7.1 v0.7.0 v0.6.4 v0.6.3 v0.6.2 v0.6.1 v0.6 v0.5.8 v0.5.4 v0.5.2 v0.5.1 v0.5.0 v0.2.1 v0.2.0-beta v0.1.4.4 v0.1.4.3 v0.1.4 v0.1.3 v0.1.2.2 v0.1.1.9 v0.1.1.4 v0.1.1.3 v0.1.1.2 v0.1.1.1 v0.1.1 Nothing to show New pull request Latest commit b3f0a18 Jul 15, 2016 Aaronontheweb committed on GitHub Merge pull request #2183 from Silv3rcircl3/fix_for_2179 … Use a unique file for every FilePublisherTest Permalink Failed to load latest commit information. documentation [api-docs] Updated Sandcastle build file Jul 7, 2016 src Merge pull request #2183 from Silv3rcircl3/fix_for_2179 Jul 15, 2016 tools fixed lightbend url Jul 7, 2016 .editorconfig Update .editorconfig May 1, 2015 .gitattributes API Approvals for Core Jan 13, 2016 .gitignore API Approvals for Core Jan 13, 2016 .travis.yml Per #62 update build.fsx for mono specific configuration. Add Travis … Aug 26, 2014 CONTRIBUTING.md added branch deletion section Mar 19, 2016 LICENSE Added LICENSE Feb 10, 2014 PersistenceTests.txt close #2024 - guaranteed that all children are terminated before pare… Jun 15, 2016 README.md Merge dev into akka-streams (#1988) May 28, 2016 RELEASE_NOTES.md placeholder for vnext Jul 6, 2016 build.cmd Ported TCK verification Jul 6, 2016 build.fsx Ported TCK verification Jul 6, 2016 build.sh Merge dev into akka-streams (#1988) May 28, 2016 README.md Akka.NET Akka.NET Current Roadmap Akka.NET is a community-driven port of the popular Java/Scala framework Akka to .NET. Subscribe to the Akka.NET dev feed: https://twitter.com/AkkaDotNet (@AkkaDotNet) Support forum: https://groups.google.com/forum/#!forum/akkadotnet-user-list Mail: hi@getakka.net Stack Overflow: http://stackoverflow.com/questions/tagged/akka.net Documentation and resources Akka.NET Community Site Install Akka.NET via NuGet If you want to include Akka.NET in your project, you can install it directly from NuGet To install Akka.NET Distributed Actor Framework, run the following command in the Package Manager Console PM> Install-Package Akka PM> Install-Package Akka.Remote  And if you need F# support: PM> Install-Package Akka.FSharp  Contributing Where Can I Contribute? Issues for the Next Release (v1.1) All contributions are welcome! Please consider the issues categorized in the Help! column first, as they are areas we could really use your help :) Contribution Guidelines If you are interested in helping porting Akka to .NET please take a look at Contributing to Akka.NET. Our docs are always a work in progress—to contribute to docs, please see the docs contribution guidelines here. Builds Please see Building Akka.NET. To access unstable nightly builds, please see the instructions here. Support Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/akkadotnet/akka.net"	"Akka.NET is a port of the popular Java/Scala framework Akka to.NET. This is a community driven port and is not affiliated with Typesafe who makes the original Java/Scala version."	"true"
"E-Commerce and Payments"	"Paypal Merchant SDK"	"https://github.com/paypal/merchant-sdk-dotnet"	"Official Paypal Merchant SDK for.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"40"	"32"	"55"	"GitHub - paypal/merchant-sdk-dotnet Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 40 Fork 55 paypal/merchant-sdk-dotnet Code Issues 0 Pull requests 0 Wiki Pulse Graphs No description or website provided. 180 commits 9 branches 19 releases 12 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dependency-fix enum-fix issue-20 master r113 rel-2.7.109 rel-2.10.116 stable v2.10.116 Nothing to show v2.16.117 v2.15.117 v2.14.117 v2.13.117 v2.12.117 v2.11.117 v2.10.116 v2.9.113 v2.8.113 v2.8.112 v2.7.109 v2.6.106 v2.5.103 v2.4.102 v2.4.101 v2.4.100 v2.3.98 v2.2.98 v2.1.96 Nothing to show New pull request Latest commit e2ddcf2 Jan 21, 2016 jaypatel512 Update License to 2016 Permalink Failed to load latest commit information. PayPalMerchantSDK Update Core SDK dependency Dec 14, 2015 Samples Minor fix to Core SDK Apr 2, 2015 docs Update for 116 Jul 28, 2014 .gitignore Update project to use VS 2015 Aug 5, 2015 Build.bat Update build script Dec 14, 2015 Changelog.txt Update Core SDK dependency Dec 15, 2015 DotNetSDK.SandcastleGUI Update for 117 Aug 21, 2014 LICENSE.txt Update License to 2016 Jan 21, 2016 README.md Update PCI Mandate Docs Jan 11, 2016 README.md PayPal Merchant SDK for .NET This Classic SDK is not actively supported and will be deprecated in the future. For full support on new integrations, please use the PayPal REST API SDK for .NET TLSv1.2 Update The Payment Card Industry (PCI) Council has mandated that early versions of TLS be retired from service. All organizations that handle credit card information are required to comply with this standard. As part of this obligation, PayPal is updating its services to require TLS 1.2 for all HTTPS connections. At this time, PayPal will also require HTTP/1.1 for all connections. Click here for more information A new mode has been created to test if your server/machine handles TLSv1.2 connections. Please use security-test-sandbox mode instead of sandbox to verify. You can return back to sandbox mode once you have verified. The repository contains the PayPal Merchant SDK C#.NET Class Library Application and the PayPalAPISample Sample ASP.NET C# Web Application. SDK Integration Integrate the PayPal Merchant SDK with an ASP.NET Web Application Use NuGet to install the 'PayPalMerchantSDK' package The NuGet package installs the dependencies to the solution and automatically updates the project Dependent library references: • 'log4net.dll' • 'PayPalCoreSDK.dll' • 'PayPalMerchantSDK.dll' • 'PayPalPermissionsSDK.dll' Namespaces: • PayPal • PayPal.PayPalAPIInterfaceService • PayPal.PayPalAPIInterfaceService.Model • PayPal.Util • PayPal.Exception Using Classic SDKs and PayPal .NET SDK If you need to use one of the Classic SDKs along with the PayPal .NET SDK (which uses PayPal's REST APIs), then you will need to do the following to your project to allow everything to work properly: Update your project's web.config to the following: <configuration> <configSections>   <section name=""paypal"" type=""PayPal.SDKConfigHandler, PayPal"" /> </configSections>  <!-- PayPal SDK settings --> <paypal>   <settings>     <add name=""mode"" value=""sandbox""/>      <!-- REST API credentials -->     <add name=""clientId"" value=""_client_Id_""/>     <add name=""clientSecret"" value=""_client_secret_""/>      <!-- Classic API credentials -->     <add name=""account1.apiUsername"" value=""_api_username_""/>     <add name=""account1.apiPassword"" value=""_api_password_""/>   </settings> </paypal> </configuration> When creating the main services object for any of the Classic SDKs, first create the config to be used by the service using the ConfigManager instance from the PayPal.Api namespace. Then pass that config object into the constructor for the Classic SDK service object: // Get the config properties from PayPal.Api.ConfigManager Dictionary<string, string> config = PayPal.Api.ConfigManager.Instance.GetProperties();  // Create the Classic SDK service instance to use. PayPalAPIInterfaceServiceService service = new PayPalAPIInterfaceServiceService(config); Help Upgrade Process from Legacy Merchant SDK Merchant.bat - Automation script that builds the PayPal Merchant SDK C#.NET Class Library Application in release mode and copies the built dlls to the lib folder in the PayPalAPISample Sample ASP.NET C# Web Application Changelog.txt - Release Notes DotNetSDK.SandcastleGUI - Tool to create the documentation of the PayPal Merchant SDK LICENSE.txt - PayPal, Inc. SDK License Installing NuGet in Visual Studio 2010 and 2012.pdf - Guide to Install NuGet in Visual Studio 2010 and 2012 Integrating NuGet with Visual Studio 2005 and 2008.pdf - Guide to Integrate NuGet with Visual Studio 2005 and 2008 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/paypal/merchant-sdk-dotnet"	"Official Paypal Merchant SDK for.NET"	"true"
"E-Commerce and Payments"	"NopCommerce"	"https://nopcommerce.codeplex.com/"	"nopCommerce. Free open-source ecommerce shopping cart (ASP.NET MVC)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"600"	"151"	"446"	"GitHub - nopSolutions/nopCommerce: Free open-source ecommerce shopping cart (ASP.NET MVC) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 151 Star 600 Fork 446 nopSolutions/nopCommerce Code Issues 1,153 Pull requests 14 Pulse Graphs Free open-source ecommerce shopping cart (ASP.NET MVC) http://www.nopcommerce.com 7,058 commits 8 branches 21 releases 24 contributors C# 85.4% CSS 6.2% JavaScript 6.1% PLpgSQL 1.2% PowerShell 1.0% HTML 0.1% C# CSS JavaScript PLpgSQL PowerShell HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags Issue-68-ups-account-specific Issue-73-google-analytics develop issue-117-use-paypal-rest-api issue-1097-Export-import-with-product-attributes issue-1340-Date-Of-Birth master #1464-simplify-admin-area Nothing to show release-3.70 release-3.60 release-3.50 release-3.40 release-3.30 release-3.20 release-3.10 release-3.00 release-2.80 release-2.70 release-2.65 release-2.60 release-2.50 release-2.40 release-2.30 release-2.20 release-2.10 release-2.00 release-1.90 release-1.80 release-1.70 Nothing to show New pull request Latest commit c2c5e9d Jul 15, 2016 AndreiMaz committed on GitHub Merge pull request #1572 from Xzelsius/develop …  #1456 Prevent double click on confirm. Permalink Failed to load latest commit information. src Merge pull request #1572 from Xzelsius/develop Jul 15, 2016 upgradescripts Allow a store owner to configure a pickup location Jul 14, 2016 .gitignore #1106 Allow a store owner to create database backups Mar 1, 2016 LICENSE.md Moved the license file to the root of the repository Jan 10, 2016 README.md Updated readme.md file Jan 11, 2016 README.md nopCommerce nopCommerce is the best open-source e-commerce shopping cart. nopCommerce is available for free. Today it's the best and most popular ASP.NET ecommerce software. It has been downloaded more than 1.5 million times! nopCommerce is a fully customizable shopping cart. It's stable and highly usable. nopCommerce is an open source ecommerce solution that is ASP.NET (MVC) based with a MS SQL 2008 (or higher) backend database. Our easy-to-use shopping cart solution is uniquely suited for merchants that have outgrown existing systems, and may be hosted with your current web host or our hosting partners. It has everything you need to get started in selling physical and digital goods over the internet. nopCommerce can be up-and-running in just a few minutes. Simply download the software, and follow the simple installation instructions. nopCommerce is developed to take full advantage of the latest technologies available. With its pluggable architecture, additional functionality and presentation elements can be dynamically added to the application at runtime. We have put a lot of effort into ensuring that nopCommerce is optimized for search engines. From search friendly URLs to properly structured content and products, you will find that nopCommerce was built to help your customers locate your content with ease. nopCommerce offers unprecedented flexibility and control. Since it is open-source, nopCommerce’s source code is available free for download. nopCommerce resources: nopCommerce Site: http://www.nopcommerce.com nopCommerce demo store: http://www.nopCommerce.com/demo.aspx Complete feature list: http://www.nopcommerce.com/featurelist.aspx Technology & System Requirements: http://www.nopcommerce.com/technologysystemrequirements.aspx Documentation: http://www.nopcommerce.com/documentation.asp Forums: http://www.nopcommerce.com/boards/ Store demo: Browse our shopping cart demo store to get a feel for nopCommerce shopping cart. Browse through the store from the customer's perspective and place an order. You won't be billed for or receive any products – the demo store examples are there only to show the extensive functionality of the shopping cart. Get a better feel for it by going through the admin panel and make changes. Front End: Admin area: Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nopSolutions/nopCommerce"	"nopCommerce. Free open-source ecommerce shopping cart (ASP.NET MVC)"	"true"
"E-Commerce and Payments"	"ServiceStack.Stripe"	"https://github.com/ServiceStack/Stripe"	"Typed.NET clients for stripe.com REST APIs"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"64"	"11"	"27"	"GitHub - ServiceStack/Stripe: Typed .NET clients for stripe.com REST APIs Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 64 Fork 27 ServiceStack/Stripe Code Issues 4 Pull requests 0 Pulse Graphs Typed .NET clients for stripe.com REST APIs 117 commits 1 branch 9 releases Fetching contributors C# 99.6% Batchfile 0.4% C# Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v4.0.60 v4.0.58 v4.0.56 v4.0.54 v4.0.52 v4.0.50 v4.0.48 v4.0.46 v4.0.44 Nothing to show New pull request Latest commit 055ff18 Jun 13, 2016 mythz Determine requestBody from HTTP Method Permalink Failed to load latest commit information. NuGet Upgrade SS dlls Mar 1, 2016 build Add CI build scripts Nov 14, 2014 lib Determine requestBody from HTTP Method Jun 13, 2016 src Determine requestBody from HTTP Method Jun 14, 2016 tests/Stripe.Tests Add support for Stripe's custom date options Mar 23, 2016 .gitignore Add CI build scripts Nov 14, 2014 README.md Update README.md Sep 25, 2015 README.md Stripe This project contains a Portable Class Library containing a typed .NET client gateway for accessing Stripe's REST API. Used by servicestack.net to process merhcant payments and recurring subcriptions online. Features Small, typed, message-based API uses only clean DTO's and fits in a single StripeGateway.cs Async every Stripe Service can be called via either Sync or Async methods Portable profile available supporting .NET 4.5, Xamarin.iOS, Xamarin.Android and Windows Store clients Open-ended, can use custom declarative DTO's defined in your own app to access new APIs Testable, implements the mockable IRestGateway, can return test data with a generic MockRestGateway See Stripe.Tests for more example usages. Install ServiceStack.Stripe Install from NuGet with: PM> Install-Package ServiceStack.Stripe  * depends on ServiceStack.Text commercial library, ServiceStack v4 free-quotas apply. Includes Portable Version (.NET 4.5, iOS, Android + Windows Store) Download from MyGet If you're having issues with the latest v4.0.42 release you can upgrade to the interim pre-release packages on MyGet. Usage Requires a registered Stripe API Key, e.g: var gateway = new StripeGateway(""sk_test_23KlmQohLKD4dfmAvxYESZ2z""); Request DTO's are just clean POCO's with [Route] attributes defined, e.g: [Route(""/customers/{Id}"")] public class GetStripeCustomer : IGet, IReturn<StripeCustomer> {     public string Id { get; set; } } The IGet interface marker indicates which HTTP Method Stripe expects, whilst IReturn<StripeCustomer> indicates what Stripe returns. The gateway uses this type information to provide its typed API, e.g: StripeCustomer customer = gateway.Get(new GetStripeCustomer { Id = customerId }); Async StripeCustomer customer = await gateway.GetAsync(new GetStripeCustomer { Id = customerId }); If you prefer, you can use the same gateway.Send() generic method for all messages as it is able to make use of the IVerb interface marker to control which HTTP method is used, e.g. StripeCustomer customer = gateway.Send(new GetStripeCustomer { Id = customerId }); Async StripeCustomer customer = await gateway.SendAsync(new GetStripeCustomer { Id = customerId }); Both of these calls translates to the Retrieving a Customer HTTP Request, Example in curl: curl https://api.stripe.com/v1/customers/cus_3552jPRgtQeRcK \    -u yDOr26HsxyhpuRB3qbG07qfCmDhqutnA:  Open-Ended, Declarative Message-based APIs The StripeGateway benefits from an Open Ended message-based API where you're also able to use own Request DTO's to call new Stripe Services that StripeGateway has no knowledge about. E.g. The only custom code required to implement the ChargeStripeCustomer is this single, clean, declarative Request DTO: [Route(""/charges"")] public class ChargeStripeCustomer : IPost, IReturn<StripeCharge> {     public int Amount { get; set; }     public string Currency { get; set; }     public string Customer { get; set; }     public string Card { get; set; }     public string Description { get; set; }     public bool? Capture { get; set; }     public int? ApplicationFee { get; set; } } Which contains all the information needed to call the Stripe Service including the /charges relative url, using the POST HTTP method and the typed StripeCharge DTO it returns. To charge a Customer the Request DTO can either use the explicit Post/PostAsync or universal Send/SendAsync StripeGateway methods. Documentation These API examples follows Stripe's API Documentation. Charges Creating a new charge (charging a credit card) var charge = gateway.Post(new ChargeStripeCustomer {     Amount = 100,     Customer = customer.Id,     Currency = ""usd"",     Description = ""Test Charge Customer"", }); Async var charge = await gateway.PostAsync(new ChargeStripeCustomer {     Amount = 100,     Customer = customer.Id,     Currency = ""usd"",     Description = ""Test Charge Customer"", }); Retrieving a Charge var charge = gateway.Get(new GetStripeCharge { ChargeId = charge.Id }); Updating a Charge var charge = gateway.Post(new UpdateStripeCharge  {     ChargeId = charge.Id,     Description = ""Updated Charge Description"" }); Refunding a Charge var refundCharge = gateway.Post(new RefundStripeCharge {     ChargeId = charge.Id, }); Capture a charge var charge = gateway.Post(new ChargeStripeCustomer {     Amount = 100,     Customer = customer.Id,     Currency = ""usd"",     Description = ""Test Charge Customer"",     Capture = false,  //Don't capture the charge immediately });  //Can capture charge later with an explicit call var captureCharge = gateway.Post(new CaptureStripeCharge {     ChargeId = charge.Id, }); List all Charges var charges = gateway.Get(new GetStripeCharges()); List all customer charges var charges = gateway.Get(new GetStripeCharges {     Customer = customer.Id, }); Customers Creating a New Customer var customer = gateway.Post(new CreateStripeCustomer {     AccountBalance = 10000,     Card = new StripeCard     {         Name = ""Test Card"",         Number = ""4242424242424242"",         Cvc = ""123"",         ExpMonth = 1,         ExpYear = 2015,         AddressLine1 = ""1 Address Road"",         AddressLine2 = ""12345"",         AddressZip = ""City"",         AddressState = ""NY"",         AddressCountry = ""US"",     },     Description = ""Description"",     Email = ""test@email.com"", }); Creating a New Customer with a Card Token  var cardToken = gateway.Post(new CreateStripeToken {     Card = new StripeCard     {         Name = ""Test Card"",         Number = ""4242424242424242"",         Cvc = ""123"",         ExpMonth = 1,         ExpYear = 2015,         AddressLine1 = ""1 Address Road"",         AddressLine2 = ""12345"",         AddressZip = ""City"",         AddressState = ""NY"",         AddressCountry = ""US"",     }, });  var customer = gateway.Post(new CreateStripeCustomerWithToken {     AccountBalance = 10000,     Card = cardToken.Id,     Description = ""Description"",     Email = ""test@email.com"", }); Retrieving a Customer var customer = gateway.Get(new GetStripeCustomer { Id = customerId }); Updating a Customer var updatedCustomer = gateway.Post(new UpdateStripeCustomer {     Id = customer.Id,     Card = new StripeCard     {         Id = customer.Cards.Data[0].Id,         Name = ""Updated Test Card"",         Number = ""4242424242424242"",         Cvc = ""123"",         ExpMonth = 1,         ExpYear = 2015,         AddressLine1 = ""1 Address Road"",         AddressLine2 = ""12345"",         AddressZip = ""City"",         AddressState = ""NY"",         AddressCountry = ""US"",     },     AccountBalance = 20000,     Description = ""Updated Description"",     Email = ""updated@email.com"", }); Deleting a Customer var deletedRef = gateway.Delete(new DeleteStripeCustomer { Id = customer.Id }); List all Customers var customers = gateway.Get(new GetStripeCustomers()); Cards Creating a new card var card = gateway.Post(new CreateStripeCard {     CustomerId = customer.Id,     Card = new StripeCard     {         Name = ""Test Card 2"",         Number = ""5555555555554444"",         Cvc = ""456"",         ExpMonth = 1,         ExpYear = 2016,         AddressLine1 = ""1 Address Road"",         AddressLine2 = ""12345"",         AddressZip = ""City"",         AddressState = ""NY"",         AddressCountry = ""US"",     }, }); Retrieving a customer's card var card = gateway.Get(new GetStripeCard {     CustomerId = customer.Id,     CardId = card.Id, }); Updating a card var card = gateway.Post(new UpdateStripeCard {     CustomerId = customer.Id,     CardId = customer.Cards.Data[0].Id,      Name = ""Test Card Updated"",      AddressLine1 = ""1 Address Updated"",     AddressLine2 = ""45321"",     AddressZip = ""City"",     AddressState = ""NY"",     AddressCountry = ""US"",      ExpMonth = 2,     ExpYear = 2020, }); Deleting cards var deletedRef = gateway.Delete(new DeleteStripeCard {     CustomerId = customer.Id,     CardId = customer.Cards.Data[0].Id, }); Listing cards var cards = gateway.Get(new GetStripeCards { CustomerId = customer.Id }); Subscriptions Updating the Customer's Active Subscription var subscription = gateway.Post(new SubscribeStripeCustomer {     CustomerId = customer.Id,     Plan = plan.Id,     Coupon = coupon.Id,     Quantity = 1, }); Canceling a Customer's Subscription var cancelled = gateway.Delete(new CancelStripeSubscription {     CustomerId = customer.Id,     AtPeriodEnd = false, }); Plans Creating plans var plan = gateway.Post(new CreateStripePlan {     Id = ""TEST-PLAN-01"",     Amount = 10000,     Currency = ""usd"",     Name = ""Test Plan"",     Interval = StripePlanInterval.month,     IntervalCount = 1, }); Retrieving a Plan var plan = gateway.Get(new GetStripePlan { Id = plan.Id });  Updating a plan var updatedPlan = gateway.Post(new UpdateStripePlan {     Id = ""TEST-PLAN-01"",     Name = ""NEW PLAN UPDATED!"", }); Deleting a plan var gateway.Delete(new DeleteStripePlan { Id = plan.Id }); List all Plans var plans = gateway.Get(new GetStripePlans { Count = 20 }); Coupons Creating coupons var coupon = gateway.Post(new CreateStripeCoupon {     Id = ""TEST-COUPON-01"",     Duration = StripeCouponDuration.repeating,     PercentOff = 20,     Currency = ""usd"",     DurationInMonths = 2,     RedeemBy = DateTime.UtcNow.AddYears(1),     MaxRedemptions = 10, }); Retrieving a Coupon var coupon = gateway.Get(new GetStripeCoupon { Id = coupon.Id }); Deleting a coupon var deletedRef = gateway.Delete(new DeleteStripeCoupon { Id = plan.Id }); List all Coupons var coupons = gateway.Get(new GetStripeCoupons { Count = 20 }); Discounts Deleting a Discount var deletedRef = gateway.Delete(new DeleteStripeDiscount { CustomerId = customer.Id }); Invoices Retrieving an Invoice var invoice = gateway.Get(new GetStripeInvoice { Id = invoice.Id }); Creating an invoice var stripeInvoice = gateway.Post(new CreateStripeInvoice {     Customer = customer.Id }); Paying an invoice var paidInvoice = gateway.Post(new PayStripeInvoice {     Id = invoice.Id }); Retrieving a List of Invoices var invoices = gateway.Get(new GetStripeInvoices { Count = 20 }); Get a list of customer invoices var invoices = gateway.Get(new GetStripeInvoices  {      Customer = customer.Id }); Retrieving a Customer's Upcoming Invoice var upcomingInvoice = gateway.Get(new GetUpcomingStripeInvoice {     Customer = customer.Id, }); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ServiceStack/Stripe"	"Typed.NET clients for stripe.com REST APIs"	"true"
"E-Commerce and Payments"	"SmartStoreNET"	"https://github.com/smartstoreag/SmartStoreNET"	"Free ASP.NET MVC Ecommerce Shopping Cart Solution"	"null"	"null"	"null"	"null"	"null"	"http://www.smartstore.com/net/en"	"null"	"572"	"165"	"409"	"GitHub - smartstoreag/SmartStoreNET: Open Source ASP.NET MVC Ecommerce Shopping Cart Solution Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 165 Star 572 Fork 409 smartstoreag/SmartStoreNET Code Issues 220 Pull requests 0 Pulse Graphs Open Source ASP.NET MVC Ecommerce Shopping Cart Solution http://www.smartstore.com/en/net 3,114 commits 13 branches 13 releases 8 contributors C# 82.8% JavaScript 11.0% CSS 4.2% PLpgSQL 1.0% SQLPL 0.7% HTML 0.3% C# JavaScript CSS PLpgSQL SQLPL HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 3.x Switch branches/tags Branches Tags 2.x 2.0.x 2.1.x 2.2.x 2.5.x 2.6.x 3.x feature/outputcache feature/paypal-plus feature/shipcloud master revert-907-patch-1 sass Nothing to show 2.6.0 2.5.0 2.2.2 2.2.1 2.2.0 2.1.1 2.1.0 2.1.0rc 2.0.2 2.0.1 2.0.0 1.2.1 1.2.0 Nothing to show New pull request Latest commit 8f30209 Jul 15, 2016 mgesing Minor change Permalink Failed to load latest commit information. assets Updated Readme.md Nov 28, 2014 lib Minor fix Jul 8, 2016 src Minor change Jul 15, 2016 .gitignore Updated gitignore Mar 2, 2016 CREDITS.txt Updated CREDITS.txt Jul 8, 2015 ClickToBuild.cmd Initial commit May 19, 2013 ClickToTest.cmd Optimized test fixtures and added ""Test"" target to MSBuild May 22, 2013 LICENSE.txt Changed license Aug 19, 2014 README.md Updated project status in readme.md Jul 1, 2016 SmartStoreNET.Tasks.Targets Increased ToolsVersion to 12.0 Jul 13, 2016 SmartStoreNET.proj Increased ToolsVersion to 12.0 Jul 13, 2016 build.bat build.bat: added new lookup folders for vcvarsall.bat May 11, 2016 changelog.md Resolves #999 Export: Projected customer id ignored during price calc… Jul 14, 2016 how-to-build.txt Minor fixes & cleanup Nov 24, 2014 README.md Overview SmartStore.NET is a free, open source, full-featured e-commerce solution for companies of any size. It is web standards compliant and incorporates the newest Microsoft web technology stack. SmartStore.NET includes all essential features to create multilingual and multi-currency stores targeting desktop or mobile devices and enabling SEO optimized rich product catalogs with support for an unlimited number of products and categories, variants, bundles, datasheets, ESD, discounts, coupons and many more. A comprehensive set of tools for CRM & CMS, sales, marketing, payment & shipping handling, etc. makes SmartStore.NET a powerful all-in-one solution fulfilling all your needs... totally FREE! SmartStore.NET delivers a beautiful and configurable shop front-end out-of-the-box, built with a design approach on the highest level, including components like Twitter Bootstrap, Less CSS and others. The innovative ShopBar, a powerful layered navigation, reviews & ratings, an optimized checkout process... they all provide a perfect shopping experience for your buyers. The state-of-the-art architecture of SmartStore.NET - with ASP.NET 4.5 + MVC 5, Entity Framework 6 and Domain Driven Design approach - makes it easy to extend, extremely flexible and essentially fun to work with ;-) Website: http://www.smartstore.com/en/net Forum: http://community.smartstore.com Marketplace: http://community.smartstore.com/marketplace Documentation: SmartStore.NET Documentation in English Highlights Technology & Design State of the art architecture thanks to ASP.NET 4.5, ASP.NET MVC 5, Entity Framework 6 and Domain Driven Design Easy to extend and extremely flexible thanks to modular design (NEW) A powerful theming engine lets you create themes & skins with minimum effort thanks to theme inheritance Consistent and sophisticated use of modern components such as jQuery, Twitter Bootstrap, LESS & more in the front and back end. Easy shop management thanks to modern and clean UI Out of the box shop design on the highest level Revolutionary Shopbar for the best shopping experience Point&Click Theme configuration Features Multi-Store support Unlimited number of products and categories Product Bundles RESTful WebApi Multi-language support 100% Mobile optimized Perfectly optimized for search engines Trusted Shops precertification 100% compliant with German jurisdiction Sales-, Customer- & Inventory-management Comprehensive CRM features Powerful Discount System Powerful layered navigation in the shop Numerous Payment and Shipping Providers and options Sophisticated Marketing & Promotion capabilities (Gift cards, Reward Points, discounts of any type and more) Reviews & Ratings CMS (Blog, Forum, custom pages & HTML content etc.) and many more... Project Status SmartStore.NET V2.6.0 has been released on June 23, 2016. The highlights are: Major improvements in Importer & Exporter: better field mapping, higher performance, bug fixes etc. 'PayPal PLUS' payment plugin 'paydirekt' payment plugin 'Viveum' payment plugin 'BeezUP' export provider (Dev) Publishing SmartStore.Web from within Visual Studio now deploys the project correctly. No need to execute ClickToBuild.cmd anymore. Just publish directly to any target, including Azure. Lots of bug fixes Try it online We have set up a live online demo for you so you are able to test SmartStore.NET without local installation. Get a first impression and test all available features in the front- and in the backend. Please keep in mind that the backend demo is shared and other testers can modify data at the same time. Frontend (User: demo, PWD: 1234) Backend (User: demo, PWD: 1234) How to install Download the latest stable release from the download tab and unzip it to your web folder Setup a website in IIS and point the file directory to your unzipped folder Fire up your browser and follow the installation instructions Enjoy ;-) System requirements IIS 7+ ASP.NET 4.5 ASP.NET MVC 5 MS SQL Server 2008 Express (or higher) OR MS SQL Server Compact 4 Full Trust License SmartStore.NET is released under the GPLv3 license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/smartstoreag/SmartStoreNET"	"Free ASP.NET MVC Ecommerce Shopping Cart Solution"	"true"
"E-Commerce and Payments"	"Stripe.Net"	"https://github.com/jaymedavis/stripe.net"	"Stripe.net is a full service.net api for"	"null"	"null"	"null"	"null"	"null"	"https://stripe.com/"	"null"	"496"	"87"	"291"	"GitHub - jaymedavis/stripe.net: Stripe.net is a sync/async .NET 4.5+ client, and a portable class library for stripe.com. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 87 Star 496 Fork 291 jaymedavis/stripe.net Code Issues 26 Pull requests 12 Pulse Graphs Stripe.net is a sync/async .NET 4.5+ client, and a portable class library for stripe.com. 533 commits 1 branch 46 releases 47 contributors C# 99.9% Other 0.1% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v6.3.5 v6.3.4 v6.3.3 v6.3.2 v6.3.0 v6.2.2 v6.2.1 v6.2.0 v6.1.1 v6.1.0 v6.0.1 v6.0.0 v5.3.0 v5.2.0 v5.1.3 v5.1.2 v5.1.1 v5.1.0 v5.0.1 v5.0.0 v4.2.1 v4.2.0 v4.1.0 v4.0.2 v4.0.1 v4.0.0 v3.0.2 v3.0.1 v3.0.0 v2.9.0 v2.8.0 v.2.7.2 v.2.7.1 v2.7.0 v.2.6.0 v2.5.1 v2.5.0 v2.4.1 v2.4.0 v2.3.5 v2.3.0 v2.2.6 2.3.4 2.3.3 2.3.2 2.3.1 Nothing to show New pull request Latest commit fd76596 Jul 7, 2016 jaymedavis committed on GitHub readme updates Permalink Failed to load latest commit information. build squashed oauth bug, bumped version Jul 6, 2016 src squashed oauth bug, bumped version Jul 6, 2016 .gitattributes normalize line endings Jan 30, 2015 .gitignore bumped version to 6.1.0 Mar 25, 2016 LICENSE normalize line endings Jan 31, 2015 build.cmd bumped version to 6.1.1 Apr 1, 2016 readme.md readme updates Jul 7, 2016 readme.md Notes on Naming The new BankAccountService does not have the usual name, StripeBankAccountService. I will slowly be moving from this method of always including the name Stripe, as class names are getting way too long (even for me). BankAccountCreateOptions is just a shorter name, for example. This service also returns a CustomerBankAccount, instead of the already built in StripeBankAccount. The reason is because Stripe wants to keep a clean separation between external account bank accounts, and customer bank accounts. The StripeBankAccount entity will eventually be renamed to ExternalAccountBankAccount. Support Search issues and pull requests to see if your issue/request already exists. If it does, please leave a comment or a reaction. This helps me priortize what I work on next. Create a new issue if you can't find what you're looking for. :) Quick Start It is recommended that you install Stripe.net via NuGet. Next you will need to provide Stripe.net with your api key. There are 4 ways to do this: a) Add an AppSetting with your api key to your config (this is the easiest way and will work throughout the app on every request) - will not work on portable platforms     <appSettings>     ...         <add key=""StripeApiKey"" value=""[your api key here]"" />     ...     </appSettings> b) In your application initialization, call this method (this is a programmatic way, but you only have to do it once during startup)     StripeConfiguration.SetApiKey(""[your api key here]""); c) In any of the service constructors, you can optionally pass the api key (will be assigned that apikey for the life of the service instance).     var planService = new StripePlanService(""[your api key here]""); d) In any of the service calls, you can pass a StripeRequestOptions object with the apikey specified.     var planService = new StripePlanService();     planService.Get(*planId*, new StripeRequestOptions() { ApiKey = ""[your api key here]"" }); Stripe API Version Stripe.net forces a version of the Stripe API for which it was designed. You can find out the latest version supported by viewing StripeConfiguration.cs under the src/Infrastructure folder. If you are not using webhooks, then you don't need to do anything for Stripe.net to be compatible with the Stripe API. If you are using webhooks from Stripe, then you will need to email Stripe support and ask them to set your API version (you can see this in your Stripe Dashboard) to the one specified in Stripe.net's StripeConfiguration.cs file. Examples Plans Creating a plan If your site has multiple offerings, plans are perfect. You can create as many plans as you want and then just assign customers to those plans later on.     var myPlan = new StripePlanCreateOptions();     myPlan.Id = ""hi, im unique!"";     myPlan.Amount = 1000;           // all amounts on Stripe are in cents, pence, etc     myPlan.Currency = ""usd"";        // ""usd"" only supported right now     myPlan.Interval = ""month"";      // ""month"" or ""year""     myPlan.IntervalCount = 1;       // optional     myPlan.Name = ""Bronze"";     myPlan.TrialPeriodDays = 30;    // amount of time that will lapse before the customer is billed      var planService = new StripePlanService();     StripePlan response = planService.Create(myPlan); The returned StripePlan entity above will have a unique Id. You will want to persist this for later. When you create a customer you will be able to assign them to a plan id (or not) Updating a plan     var myPlan = new StripePlanUpdateOptions();      myPlan.Name = ""NEW Plan YO!"";      var planService = new StripePlanService();     StripePlan response = planService.Update(*planId*, myPlan); Retrieving a plan     var planService = new StripePlanService();     StripePlan response = planService.Get(*planId*); Deleting a plan     var planService = new StripePlanService();     planService.Delete(*planId*); List all plans     var planService = new StripePlanService();     IEnumerable<StripePlan> response = planService.List(); // optional StripeListOptions StripeListOptions for paging Coupons (queue-pons not coo-pons) Creating a coupon     var myCoupon = new StripeCouponCreateOptions();     myCoupon.Id = ""HOLIDAY10OFF"";     myCoupon.PercentOff = ""10"";     myCoupon.Duration = ""repeating"";    // ""forever"", ""once"", or ""repeating""     myCoupon.DurationInMonths = 3;      // valid when ""repeating"" only      // set these if you want to     myCoupon.MaxRedemptions = 100;     myCoupon.RedeemBy = '12/31/2012';      var couponService = new StripeCouponService();     StripeCoupon response = couponService.Create(myCoupon); Retrieving a coupon     var couponService = new StripeCouponService();     StripeCoupon response = couponService.Get(*couponId*); Deleting a coupon     var couponService = new StripeCouponService();     couponService.Delete(*couponId*); List all coupons     var couponService = new StripeCouponService();     IEnumerable<StripeCoupon> response = couponService.List();  // optional StripeListOptions StripeListOptions for paging Tokens Creating a token A token can be used anywhere on Stripe where you would normally pass a card. Once it's created, it can be used on a customer or a charge, but only used once. For production usage, you'll almost always want to create tokens with either stripe.js or Checkout, but it can be useful to create tokens with Stripe.net for testing. You generally wouldn't want to use stripe.net to create tokens in production, since creating tokens with your server offers almost no security or compliance benefits - it still involves passing raw card data through your server. If you're OK with the additional compliance burden, it's usually still simpler to pass card data directly to the API. However, there are occasionally situations where it would make sense to create tokens on your server.     var myToken = new StripeTokenCreateOptions();      // if you need this...     myToken.Card = new StripeCreditCardOptions()     {         // set these properties if passing full card details (do not         // set these properties if you set TokenId)         Number = ""4242424242424242"",         ExpirationYear = ""2022"",         ExpirationMonth = ""10"",         AddressCountry = ""US"",                // optional         AddressLine1 = ""24 Beef Flank St"",    // optional         AddressLine2 = ""Apt 24"",              // optional         AddressCity = ""Biggie Smalls"",        // optional         AddressState = ""NC"",                  // optional         AddressZip = ""27617"",                 // optional         Name = ""Joe Meatballs"",               // optional         Cvc = ""1223""                          // optional     };      // set this property if using a customer (stripe connect only)     myToken.CustomerId = *customerId*;      var tokenService = new StripeTokenService();     StripeToken stripeToken = tokenService.Create(myToken); Retrieving a token     var tokenService = new StripeTokenService();     StripeToken stripeToken = tokenService.Get(*tokenId*); Customers Creating a customer When creating a customer, you can specify any plan they are on, any coupons that will apply, a credit card or token, and various meta data. With a token:     var myCustomer = new StripeCustomerCreateOptions();     myCustomer.Email = ""pork@email.com"";     myCustomer.Description = ""Johnny Tenderloin (pork@email.com)"";      myCustomer.SourceToken = *token*;      myCustomer.PlanId = *planId*;                          // only if you have a plan     myCustomer.TaxPercent = 20;                            // only if you are passing a plan, this tax percent will be added to the price.     myCustomer.Coupon = *couponId*;                        // only if you have a coupon     myCustomer.TrialEnd = DateTime.UtcNow.AddMonths(1);    // when the customers trial ends (overrides the plan if applicable)     myCustomer.Quantity = 1;                               // optional, defaults to 1      var customerService = new StripeCustomerService();     StripeCustomer stripeCustomer = customerService.Create(myCustomer); With a card:     var myCustomer = new StripeCustomerCreateOptions();     myCustomer.Email = ""pork@email.com"";     myCustomer.Description = ""Johnny Tenderloin (pork@email.com)"";      // setting up the card     myCustomer.SourceCard = new SourceCard()     {         Number = ""4242424242424242"",         ExpirationYear = ""2022"",         ExpirationMonth = ""10"",         AddressCountry = ""US"",                // optional         AddressLine1 = ""24 Beef Flank St"",    // optional         AddressLine2 = ""Apt 24"",              // optional         AddressCity = ""Biggie Smalls"",        // optional         AddressState = ""NC"",                  // optional         AddressZip = ""27617"",                 // optional         Name = ""Joe Meatballs"",               // optional         Cvc = ""1223""                          // optional     };      myCustomer.PlanId = *planId*;                          // only if you have a plan     myCustomer.TaxPercent = 20;                            // only if you are passing a plan, this tax percent will be added to the price.     myCustomer.Coupon = *couponId*;                        // only if you have a coupon     myCustomer.TrialEnd = DateTime.UtcNow.AddMonths(1);    // when the customers trial ends (overrides the plan if applicable)     myCustomer.Quantity = 1;                               // optional, defaults to 1      var customerService = new StripeCustomerService();     StripeCustomer stripeCustomer = customerService.Create(myCustomer); Don't let this be intimidating - all of these fields are optional. You could just create a customer with an email if you wanted. Updating a customer With a token:     var myCustomer = new StripeCustomerUpdateOptions();     myCustomer.Email = ""pork@email.com"";     myCustomer.Description = ""Johnny Tenderloin (pork@email.com)"";      myCustomer.SourceToken = *token*;      myCustomer.Coupon = *couponId*;    // only if you have a coupon      var customerService = new StripeCustomerService();     StripeCustomer stripeCustomer = customerService.Update(*customerId*, myCustomer); With a card:     var myCustomer = new StripeCustomerUpdateOptions();     myCustomer.Email = ""pork@email.com"";     myCustomer.Description = ""Johnny Tenderloin (pork@email.com)"";      // setting up the card     myCustomer.Source = new SourceCard()     {         // set these properties if passing full card details (do not         // set these properties if you set TokenId)         Object = ""card"",         Number = ""4242424242424242"",         ExpirationYear = ""2022"",         ExpirationMonth = ""10"",         AddressCountry = ""US"",                // optional         AddressLine1 = ""24 Beef Flank St"",    // optional         AddressLine2 = ""Apt 24"",              // optional         AddressCity = ""Biggie Smalls"",        // optional         AddressState = ""NC"",                  // optional         AddressZip = ""27617"",                 // optional         Name = ""Joe Meatballs"",               // optional         Cvc = ""1223""                          // optional     };      myCustomer.Coupon = *couponId*;    // only if you have a coupon      var customerService = new StripeCustomerService();     StripeCustomer stripeCustomer = customerService.Update(*customerId*, myCustomer); If you want to set the default source, just add:     myCustomer.DefaultSource = *sourceId*; Retrieving a customer     var customerService = new StripeCustomerService();     StripeCustomer stripeCustomer = customerService.Get(*customerId*); Deleting a customer See Stripe's documentation on deleting a customer for more information.      var customerService = new StripeCustomerService();     customerService.Delete(*customerId*); List all customers     var customerService = new StripeCustomerService();     IEnumerable<StripeCustomer> response = customerService.List(); // optional StripeCustomerListOptions StripeCustomerListOptions supports StripeListOptions for paging, and a StripeDateFilter for date filtering Subscriptions Creating a subscription     var subscriptionService = new StripeSubscriptionService();     StripeSubscription stripeSubscription = subscriptionService.Create(*customerId*, *planId*); // optional StripeSubscriptionCreateOptions Updating a subscription     var subscriptionService = new StripeSubscriptionService();     StripeSubscription stripeSubscription = subscriptionService.Update(*customerId*, *subscriptionId*); // optional StripeSubscriptionUpdateOptions Retrieving a subscription     var subscriptionService = new StripeSubscriptionService();     StripeSubscription stripeSubscription = subscriptionService.Get(*customerId*, *subscriptionId*); Canceling a subscription     var subscriptionService = new StripeSubscriptionService();     subscriptionService.Cancel(*customerId*, *subscriptionId*); // optional cancelAtPeriodEnd flag List all subscriptions for a customer     var subscriptionService = new StripeSubscriptionService();     IEnumerable<StripeSubscription> response = subscriptionService.List(*customerId*); // optional StripeListOptions StripeListOptions for paging Cards Creating a card When creating a card you can use either a card or a token With a token:     var myCard = new StripeCardCreateOptions();      myCard.SourceToken = *tokenId*;      var cardService = new StripeCardService();     StripeCard stripeCard = cardService.Create(*customerId*, myCard); // optional isRecipient With a card:     var myCard = new StripeCardCreateOptions();      // setting up the card     myCard.SourceCard = new SourceCard()     {         Number = ""4242424242424242"",         ExpirationYear = ""2022"",         ExpirationMonth = ""10"",         AddressCountry = ""US"",                // optional         AddressLine1 = ""24 Beef Flank St"",    // optional         AddressLine2 = ""Apt 24"",              // optional         AddressCity = ""Biggie Smalls"",        // optional         AddressState = ""NC"",                  // optional         AddressZip = ""27617"",                 // optional         Name = ""Joe Meatballs"",               // optional         Cvc = ""1223""                          // optional     };      var cardService = new StripeCardService();     StripeCard stripeCard = cardService.Create(*customerId*, myCard); // optional isRecipient Retrieving a card     var cardService = new StripeCardService();     StripeCard stripeCard = cardService.Get(*customerId*, *cardId*); // optional isRecipient Updating a card     var myCard = new StripeCardUpdateOptions();      myCard.Name = ""Cardy MyCardson""     myCard.ExpirationYear = ""2016"";     myCard.ExpirationMonth = ""10"";     myCard.AddressCountry = ""US"";     myCard.AddressLine1 = ""1234 ComeOnBabySayYouLoveMe St"";     myCard.AddressLine2 = """";     myCard.AddressState = ""NC"";     myCard.AddressCity = ""Raleigh""     myCard.AddressZip = ""27617"";      var cardService = new StripeCardService();     StripeCard stripeCard = cardService.Update(*customerId*, *cardId*, myCard); // optional isRecipient Deleting a card     var cardService = new StripeCardService();     cardService.Delete(*customerId*, *cardId*); // optional isRecipient List all cards     var cardService = new StripeCardService();     IEnumerable<StripeCard> response = cardService.List(*customerId*); // optional StripeListOptions and isRecipient StripeListOptions for paging Bank Accounts Creating a bank account When creating a bank account you can use either bank account details or a token (ONE OR THE OTHER, NOT BOTH) With a token:     var myBankAccount = new BankAccountCreateOptions();      myBankAccount.SourceToken = *tokenId*;      var bankAccountService = new BankAccountService();     CustomerBankAccount bankAccount = bankAccountService.Create(*customerId*, myBankAccount); With a bank account:     var myBankAccount = new BankAccountCreateOptions     {         SourceBankAccount = new SourceBankAccount()         {             AccountNumber = ""000123456789"",             Country = ""US"",             Currency = ""usd"",             AccountHolderName = ""Frank"",             AccountHolderType = BankAccountHolderType.Company,             RoutingNumber = ""110000000"",             Metadata = new Dictionary<string, string>             {                 { ""Name"", ""Ray Barone"" },                 { ""OftenSays"", ""Thatttttt's right"" }             }         }     };      var bankAccountService = new BankAccountService();     CustomerBankAccount bankAccount = bankAccountService.Create(*customerId*, myBankAccount); Retrieving a bank account     var bankAccountService = new BankAccountService();     CustomerBankAccount bankAccount = bankAccountService.Get(*customerId*, *bankAccountId*); Updating a bank account     var myBankAccount = new BankAccountUpdateOptions()     {         AccountHolderName = ""Robert"",         AccountHolderType = BankAccountHolderType.Individual,         Metadata = new Dictionary<string, string>()         {             { ""Name"", ""Frank Barone"" },             { ""OftenSays"", ""Holy Crap"" }         }     };      var bankAccountService = new BankAccountService();     CustomerBankAccount bankAccount = bankAccountService.Update(*customerId*, *bankAccountId*, myBankAccount); Deleting a bank account     var bankAccountService = new BankAccountService();     bankAccountService.Delete(*customerId*, *bankAccountId*); List all bank account     var bankAccountService = new BankAccountService();     IEnumerable<CustomerBankAccount> response = bankAccountService.List(*customerId*); // optional StripeListOptions StripeListOptions for paging Verify a bank account The Verify function is also available. Charges Creating a charge When creating a charge you can use either a card, customer, or a token/existing source. Only one is allowed. With a token (or an existing source):     var myCharge = new StripeChargeCreateOptions();      // always set these properties     myCharge.Amount = 5153;     myCharge.Currency = ""usd"";      // set this if you want to     myCharge.Description = ""Charge it like it's hot"";      myCharge.SourceTokenOrExistingSourceId = *tokenId or existingSourceId*;      // set this property if using a customer - this MUST be set if you are using an existing source!     myCharge.CustomerId = *customerId*;      // set this if you have your own application fees (you must have your application configured first within Stripe)     myCharge.ApplicationFee = 25;      // (not required) set this to false if you don't want to capture the charge yet - requires you call capture later     myCharge.Capture = true;      var chargeService = new StripeChargeService();     StripeCharge stripeCharge = chargeService.Create(myCharge); With a card:     // setting up the card     var myCharge = new StripeChargeCreateOptions();      // always set these properties     myCharge.Amount = 5153;     myCharge.Currency = ""usd"";      // set this if you want to     myCharge.Description = ""Charge it like it's hot"";      myCharge.SourceCard = new SourceCard()     {         Number = ""4242424242424242"",         ExpirationYear = ""2022"",         ExpirationMonth = ""10"",         AddressCountry = ""US"",                // optional         AddressLine1 = ""24 Beef Flank St"",    // optional         AddressLine2 = ""Apt 24"",              // optional         AddressCity = ""Biggie Smalls"",        // optional         AddressState = ""NC"",                  // optional         AddressZip = ""27617"",                 // optional         Name = ""Joe Meatballs"",               // optional         Cvc = ""1223""                          // optional     };      // set this property if using a customer     myCharge.CustomerId = *customerId*;      // set this if you have your own application fees (you must have your application configured first within Stripe)     myCharge.ApplicationFee = 25;      // (not required) set this to false if you don't want to capture the charge yet - requires you call capture later     myCharge.Capture = true;      var chargeService = new StripeChargeService();     StripeCharge stripeCharge = chargeService.Create(myCharge); Retrieving a charge     var chargeService = new StripeChargeService();     StripeCharge stripeCharge = chargeService.Get(*chargeId*); Capturing a charge If you set a charge to capture = false, you use this to capture the charge later. amount and applicationFee are not required.     var chargeService = new StripeChargeService();     StripeCharge stripeCharge = chargeService.Capture(*chargeId*, *amount*, *applicationFee*); List all charges     var chargeService = new StripeChargeService();     IEnumerable<StripeCharge> response = chargeService.List(); // optional StripeChargeListOptions StripeChargeListOptions supports a CustomerId, StripeListOptions for paging, and a StripeDateFilter for date filtering Invoices Retrieving an invoice     var invoiceService = new StripeInvoiceService();     StripeInvoice response = invoiceService.Get(*invoiceId*); Retrieving an upcoming invoice (for a single customer)     var invoiceService = new StripeInvoiceService();     StripeInvoice response = invoiceService.Upcoming(*customerId*); Create a customer invoice     var invoiceService = new StripeInvoiceService();     StripeInvoice response = invoiceService.Create(*customerId*); // optional StripeInvoiceCreateOptions Updating a customer invoice     var stripeInvoiceUpdateOptions = new StripeInvoiceUpdateOptions();     stripeInvoiceUpdateOptions.Closed = true;      var invoiceService = new StripeInvoiceService();     StripeInvoice response = invoiceService.Update(*invoiceId*, stripeInvoiceUpdateOptions); Paying an invoice     var invoiceService = new StripeInvoiceService();     StripeInvoice response = invoiceService.Pay(*invoiceId*); List all invoices     var invoiceService = new StripeInvoiceService();     IEnumerable<StripeInvoice> response = invoiceService.List(); // optional StripeInvoiceListOptions StripeInvoiceListOptions supports a CustomerId, StripeListOptions for paging, and a StripeDateFilter for date filtering Invoice Items Creating an invoice item Any invoice items you create for a customer will be added to their bill.     var myItem = new StripeInvoiceItemCreateOptions();     myItem.Amount = 1000;     myItem.Currency = ""usd"";            // ""usd"" only supported right now     myItem.CustomerId = *customerId*;     myItem.Description = ""na"";          // not required      var invoiceItemService = new StripeInvoiceItemService();     StripeInvoiceItem response = invoiceItemService.Create(myItem); Retrieving an invoice item     var invoiceItemService = new StripeInvoiceItemService();     StripeInvoiceItem response = invoiceItemService.Get(*invoiceItemId*); Updating an invoice item     var myUpdatedItem = new StripeInvoiceItemUpdateOptions();     myUpdatedItem.Amount = 1010;     myUpdatedItem.Currency = ""usd"";        // ""usd"" only supported right now     myUpdatedItem.Description = ""test"";    // not required      var invoiceItemService = new StripeInvoiceItemService();     StripeInvoiceItem response = invoiceItemService.Update(*invoiceItemId*, myUpdatedItem); Deleting an invoice item     var invoiceItemService = new StripeInvoiceItemService();     invoiceItemService.Delete(*invoiceItemId*); List all invoice items     var invoiceItemService = new StripeInvoiceItemService();     IEnumerable<StripeInvoiceItem> response = invoiceItemService.List(); // optional StripeInvoiceItemListOptions StripeInvoiceItemListOptions supports a CustomerId, StripeListOptions for paging, and a StripeDateFilter for date filtering Accounts Creating an account When creating an account, you can create a standalone or managed account. Standalone accounts are managed by Stripe and the account owner directly. Managed accounts are handled by your platform. See the Stripe documentation for more information. Since Stripe returns ExternalAccounts as a single array (contains StripeCard's and/or StripeBankAccount's), that type is a dynamic StripeList. These are split up as ExternalCards and ExternalBankAccounts for your convenience.     var account = new StripeAccountCreateOptions();     account.Email = ""jayme@yoyoyo.com""  // this is required if it is not a managed account. the user is emailed on standalone accounts,                                         // it's only used for reference on managed accounts     account.Managed = false;            // set this to true if you want a managed account (email is not required if this is set to true)      // a few optional settings     account.Country = ""US""                                 // defaults to your country     account.BusinessName = ""Jayme Davis' GitHub, Inc"";     account.BusinessUrl = ""http://github.com/jaymedavis"";      var accountService = new StripeAccountService();     StripeAccount response = accountService.Create(account); Retrieving an account     var accountService = new StripeAccountService();     StripeAccount response = accountService.Get(*accountId*); Updating an account Updating an account has almost all the same available properties as creating an account.     var myAccount = new StripeAccountUpdateOptions();     account.BusinessUrl = ""http://twitter.com/jaymed"";      var accountService = new StripeAccountService();     StripeAccount response = accountService.Update(*accountId*, myAccount); Deleting an account     var accountService = new StripeAccountService();     accountService.Delete(*accountId*); Balance Retrieving your account balance     var balanceService = new StripeBalanceService();     StripeBalance response = balanceService.Get(); Retrieving a specific balance transaction     var balanceService = new StripeBalanceService();     StripeBalanceTransaction transaction = balanceService.Get(*balanceTransactionId*); Listing balance transactions     var balanceService = new StripeBalanceService();     IEnumerable<StripeBalanceTransaction> balanceTransactions = balanceService.List(); // optional StripeBalanceTransactionListOptions StripeBalanceTransactionListOptions supports filtering by a StripeDateFilter for date created, a StripeDateFilter for date available, currency, source, transfer, type, and supports StripeListOptions for paging Disputes Updating a dispute     var disputeService = new StripeDisputeService();      // providing the dispute reason is optional     StripeDispute stripeDispute = disputeService.Update(*chargeId*, ""customer ate the donut before I charged them, so they said it was free""); Recipients Note: recipients have been deprecated by Stripe - please use Stripe Connnect instead Creating a recipient     var myRecipient = new StripeRecipientCreateOptions();     myRecipient.Name = ""Bacon Industries Limited"";     myRecipient.Type = ""individual"";                                        // ""corporation"" is also valid here.     myRecipient.TaxId = ""000000000"";                                        // optional     myRecipient.Email = ""bacon@example.com"";                                // optional     myRecipient.Description = ""Bacon Industries Ltd. (bacon@example.com)"";  //optional      // create a token OR card via SourceToken or SourceCard (see above examples)      var recipientService = new StripeRecipientService();     StripeRecipient stripeRecipient = recipientService.Create(myRecipient); Updating a recipient     var myRecipient = new StripeRecipientUpdateOptions();     myRecipient.Name = ""Bacon Industries Limited"";     myRecipient.TaxId = ""000000000"";                                        // optional     myRecipient.Email = ""bacon@example.com"";                                // optional     myRecipient.Description = ""Bacon Industries Ltd. (bacon@example.com)"";  // optional      // update a token OR card via SourceToken or SourceCard (see above examples)      var recipientService = new StripeRecipientService();     StripeRecipient stripeRecipient = recipientService.Update(*recipientId*, myRecipient); Retrieving a recipient     var recipientService = new StripeRecipientService();     StripeRecipient stripeRecipient = recipientService.Get(*recipientId*); Deleting a recipient     var recipientService = new StripeRecipientService();     recipientService.Deleted(*recipientId*); List all recipients     var recipientService = new StripeRecipientService();     IEnumerable<StripeRecipient> response = recipientService.List(); // optional StripeRecipientListOptions StripeRecipientListOptions supports a verified flag and StripeListOptions for paging Transfers Creating a transfer to a recipient     var myTransfer = new StripeTransferCreateOptions();     myTransfer.Amount = 100;     myTransfer.Currency = ""usd"";     myTransfer.Recipient = ""*recipientId*"";          // can also be ""self"" if you want to send to your own account     myTransfer.Description = ""Sales Week #42"";       // optional     myTransfer.StatementDescription = ""Commissions""; // optional      var transferService = new StripeTransferService();     StripeTransfer stripeTransfer = transferService.Create(myTransfer); Retrieving a transfer     var transferService = new StripeTransferService();     StripeTransfer stripeTransfer = transferService.Get(*transferId*); Cancel a transfer     var transferService = new StripeTransferService();     StripeTransfer stripeTransfer = transferService.Cancel(*transferId*); List all transfers     var transferService = new StripeTransferService();     IEnumerable<StripeTransfer> response = transferService.List(); // optional StripeTransferListOptions StripeTransferListOptions supports a RecipientId, Status ('pending', 'paid' or 'failed'), StripeListOptions for paging, and a StripeDateFilter for date filtering (on both the created and date fields) Application Fees If you do not specify an amount, the entire application fee is refunded. Retrieving an application fee     var feeService = new StripeApplicationFeeService();     StripeApplicationFee stripeApplicationFee = feeService.Get(*applicationFeeId*); Refunding an application fee     var feeService = new StripeApplicationFeeService();     StripeApplicationFee stripeApplicationFee = feeService.Refund(*applicationFeeId*, *amount*); StripeListOptions (paging) All Stripe List methods support paging, using limit, starting_after and ending_before properties. If you do not specify any options, limit will default to 10. Some examples of retrieving paged data from the StripeChargeService:     var chargeService = new StripeChargeService();      // get the first five results     IEnumerable<StripeCharge> firstPage = chargeService.List(new StripeChargeListOptions {         Limit = 5     });      // get the next five results     IEnumerable<StripeCharge> nextPage = chargeService.List(new StripeChargeListOptions {         Limit = 5,         StartingAfter = firstPage.Last().Id     });      // get the previous five results again     IEnumerable<StripeCharge> previousPage = chargeService.List(new StripeChargeListOptions {         Limit = 5,         EndingBefore = nextPage.First().Id     }); StripeDateFilter (date filtering) Many of the List methods support parameters to filter by date. To use this, use the StripeDateFilter class. You can combine the filters to make complex queries. Some examples are:     var chargeService = new StripeChargeService();      var chargesToday = chargeService.List(new StripeChargeListOptions {         Created = new StripeDateFilter { GreaterThanOrEqual = DateTime.UtcNow.Date }     });      var chargesYesterday = chargeService.List(new StripeChargeListOptions {         Created = new StripeDateFilter {             GreaterThanOrEqual = DateTime.Now.AddDays(-1).Date,             LessThan = DateTime.Now.Date         }     }); Expandable Properties Many of the services support expandable properties. Setting an expandable property to true means you want the entire object back instead of just the id. For example:     var chargeService = new StripeChargeService();     chargeService.ExpandBalanceTransaction = true;     chargeService.ExpandCustomer = true;     chargeService.ExpandInvoice = true;      StripeCharge stripeCharge = chargeService.Get(*chargeId*); When the StripeCharge is returned, the Customer, BalanceTransaction, and Invoice properties will be hydrated objects. Events Stripe sends Events (via webhooks) whenever an associated action occurs. The list of events Stripe sends is documented here: https://stripe.com/docs/api#event_types Receiving events from Stripe 1) In your application, create a handler that looks something like the below:     namespace TheBestApplicationEverCreated     {         public class StripeHandler : IHttpHandler         {             public bool IsReusable             {                 get { return true; }             }              public void ProcessRequest(HttpContext context)             {                 var json = new StreamReader(context.Request.InputStream).ReadToEnd();                  var stripeEvent = StripeEventUtility.ParseEvent(json);                  switch (stripeEvent.Type)                 {                     case StripeEvents.ChargeRefunded:  // all of the types available are listed in StripeEvents                         var stripeCharge = Stripe.Mapper<StripeCharge>.MapFromJson(stripeEvent.Data.Object.ToString());                         break;                 }             }         }     } 2) Create a StripeHandler.ashx in the root of your website (or wherever) that looks like this:     <%@ WebHandler Language=""C#"" Class=""StripeHandler"" CodeBehind=""StripeHandler.cs"" %> 3) Login to Stripe and go to Account Settings, webhooks - from here, you can setup the url that points to your StripeHandler.ashx for testing. Whenever an Event is received, StripeEventUtility.ParseEvent(json) will convert the response into a StripeEvent object. Retrieving an event If you have the id and you want to retrieve the event     var eventService = new StripeEventService();     StripeEvent response = eventService.Get(*eventId*) List all events You can list events in the same way everything else works in Stripe.net.     var eventService = new StripeEventService();     IEnumerable<StripeEvent> response = eventService.List(); // optional StripeEventListOptions StripeEventListOptions supports a type, StripeListOptions for paging, and a StripeDateFilter for date filtering Stripe Connect The Stripe Connect documentation can be a little intimidating, so I am going to try to break it down a little. Stripe Connect gives you the ability to accept money on behalf of other accounts, and access or modify connected accounts depending on permissions. 1) The first thing you need to do is register your platform with Stripe Connect. 2) The next thing to do, is have another party connect to your site. To do this, put a link on your site which will start the authorization process, or you can use a Stripe Connect Button. Your link will need to contain some querystring parameters: response_type: code client_id:     *your client id from the stripe connect dashboard* scope:         read_only (default), or read_write (lets you modify their data as well) // this is optional and defaults to read_only redirect_uri:  this is optional, and will return the user to this page when the connection is complete other options are available and you can learn more about them with the [Connect OAuth Reference](https://stripe.com/docs/connect/reference)  3) When the user clicks the link on your site, they will be prompted to authorize the connection. At this point, they can create a new Stripe account or setup the connection with an existing account. Your link will look something like this: https://connect.stripe.com/oauth/authorize?response_type=code&client_id=*your_client_id_from_the_stripe_connect_dashboard&scope=read_write  4) The link above will return a code when the setup is complete (and also return back to your redirect_uri if specified). With this code, you can make a request to Stripe to get the StripeUserId for accessing their account. In Stripe.net, you can accomplish this with the following code:     var stripeOAuthTokenService = new StripeOAuthTokenService();     var _stripeOAuthTokenCreateOptions = new StripeOAuthTokenCreateOptions()     {         ClientSecret = ConfigurationManager.AppSettings[""StripeApiKey""],         Code = *the code returned from above*,         GrantType = ""authorization_code""     };      StripeOAuthToken stripeOAuthToken = stripeOAuthTokenService.Create(_stripeOAuthTokenCreateOptions); 5) You're done! Whenever you need to access the connected account, you simply need the StripeUserId from the StripeOAuthToken to be passed as part of the StripeRequestOptions which all service calls now support as an optional parameter. For example, to get the plans on the connected account, you could run the following code:     var planService = new StripePlanService();     StripePlan response = planService.List(null /* StripeListOptions */, new StripeRequestOptions() { StripeConnectAccountId = *the StripeUserId on the StripeOAuthToken above* }); Depending on if your permissions are read_write or read_only, you can do anything on the connected account you can do on your own account just by passing the StripeUserId as part of StripeRequestOptions. StripeRequestOptions All of the service methods accept an optional StripeRequestOptions object. This is used if you need an Idempotency Key, if you are using Stripe Connect, or if you want to pass the ApiKey on each method.     var requestOptions = new StripeRequestOptions();     requestOptions.ApiKey = *optional*;              // this is not required unless you choose to pass the apikey on every service call     requestOptions.IdempotencyKey = ""some string"";   // this is for Idempotent Requests - https://stripe.com/docs/api?lang=curl#idempotent_requests     requestOptions.StripeConnectAccountId = ""acct_*"" // if you are using Stripe Connect and want to issue a request on the connected account Errors Any errors that occur on any of the services will throw a StripeException with the message returned from Stripe. It is a good idea to run your service calls in a try and catch StripeException. The StripeException contains and HttpStatusCode and a StripeError entity. The StripeError entity contains the type, message, code and param. For more infomation, review the Errors section of stripe here: https://stripe.com/docs/api#errors Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jaymedavis/stripe.net"	"Stripe.net is a full service.net api for"	"true"
"E-Commerce and Payments"	"BeYourMarket"	"https://github.com/beyourmarket/beyourmarket"	"BeYourMarket is a peer-to-peer marketplace framework"	"null"	"null"	"null"	"null"	"null"	"http://beyourmarket.com"	"null"	"124"	"50"	"74"	"GitHub - beyourmarket/beyourmarket: OpenSource ASP.NET to build your own marketplace Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 124 Fork 74 beyourmarket/beyourmarket Code Issues 26 Pull requests 2 Pulse Graphs OpenSource ASP.NET to build your own marketplace http://beyourmarket.com 250 commits 2 branches 3 releases Fetching contributors JavaScript 50.0% C# 36.1% CSS 12.2% ASP 1.0% HTML 0.7% PowerShell 0.0% JavaScript C# CSS ASP HTML PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master Nothing to show v.1.3.0-beta v1.1.0-beta 1.0.0-beta Nothing to show New pull request Latest commit 38291a0 Sep 23, 2015 kenyeung128 Merge remote-tracking branch 'origin/dev' Permalink Failed to load latest commit information. build add build folder Jul 10, 2015 src use EmailAddress instead o EmailContact as ""From"" to send email Sep 23, 2015 .gitignore move solution to folder src Jul 2, 2015 LICENSE Initial commit Jun 19, 2015 README.md Update README.md Sep 8, 2015 appveyor.yml update opencover version Aug 20, 2015 README.md BeYourMarket BeYourMarket is a free open source marketplace framework built on the ASP.NET platform. http://beyourmarket.com YouTube BeYourMarket Introduction Build status Master Branch (master) Development Branch (dev) Installation Running BeYourMarket with Visual Studio 2013 Quick Start Beauty and spa service Quick Start Demo Frontend: http://demo.beyourmarket.com/ Admin Panel: http://demo.beyourmarket.com/en/admin username: demo@beyourmarket.com password: Password RoadMap v. 1.31beta - Support Ratings/Comments/Mail Inbox (September/October 2015) Facebook authentication integration Support Cash on Delivery Release v. 1.3beta - Support Ratings/Comments/Mail Inbox (September 2015) Introducing Ratings/Comments system Integrated Mail Inbox v. 1.2beta - Support Custom Theme (August 2015) Develop your own theme Support Custom Listing Types (Offer, Rent, Request) v. 1.1beta - Support Plugin architecture development (July 2015) Create plugin for your own widget (e.g. add google analytics tracking) Create plugin for other marketplace payment API like Braintree We will build features based on community needs, please raise your suggestion Docs See Documentation Community Keep track of development and community news. Follow BeYourMarket on Facebook. Read and subscribe to the Newsletter. Translation The platform is by designed with support of multiple language with i18n easily. Smart internationalization for ASP.NET based on GetText / PO ecosystem is used. The only thing you would need is to translate into your own language. Translation Guide If you would like to contribute as a translator, please contact us at hello@beyourmarket.com Credits to Contributors Danish: Kenneth Mundt Contribute to BeYourMarket If you want to contribute back to BeYourMarket, please contact us at hello@beyourmarket.com Bugs and Feature Requests Another way you can contribute to BeYourMarket is by providing issue reports. Please open a new issue. License BeYourMarket is open source under MIT license. See LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/beyourmarket/beyourmarket"	"BeYourMarket is a peer-to-peer marketplace framework"	"true"
"E-Commerce and Payments"	"Virto Commerce"	"https://github.com/VirtoCommerce/vc-community"	"Virto Commerce is the second generation release and is the only enterprise level e-commerce product fully available under Open Source license. Virto Commerce is based on.NET 4.5 with extensive use of MVC, IoC, EF, Azure, Angular JS and many other cutting edge technologies. It can be deployed in Microsoft Cloud (Azure), Amazon Web Services (AWS) and on-premise."	"null"	"null"	"null"	"null"	"null"	"http://virtocommerce.com"	"null"	"381"	"111"	"288"	"GitHub - VirtoCommerce/vc-platform: Virto Commerce Platform repository Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 111 Star 381 Fork 288 VirtoCommerce/vc-platform Code Issues 183 Pull requests 0 Wiki Pulse Graphs Virto Commerce Platform repository http://virtocommerce.com 10,020 commits 9 branches 21 releases 19 contributors JavaScript 48.6% C# 33.6% HTML 9.7% CSS 8.0% Batchfile 0.1% PowerShell 0.0% JavaScript C# HTML CSS Batchfile PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags custom-modules dev-210 dev-aggregations dev-nest dev-uiGrid-infinite-scroll dev master-210 master punchout Nothing to show v2.11.3 v2.11.2 v2.11.1 v2.11 v2.10 v2.9 v2.8 v2.7.1 v2.7 v2.6 v2.5 v2.4 v2.3 v2.2 v2.1 v1.13 v1.12 v1.11 v1.10 v1.9.732 v1.9 Nothing to show New pull request Latest commit bb49d1f Jul 1, 2016 tatarincev 2.11.3 Permalink Failed to load latest commit information. Design Moved platform files to the root directory May 11, 2016 NuGet updated module version to 0.7.0 Jun 28, 2016 VirtoCommerce.Module fix issue with long user names in username when generating module con… Jun 28, 2016 VirtoCommerce.Platform.Client.Security FIxed links to GitHub Jun 20, 2016 VirtoCommerce.Platform.Client Updated VirtoCommerce.Platform.Client Jun 28, 2016 VirtoCommerce.Platform.Core.Web FIxed links to GitHub Jun 20, 2016 VirtoCommerce.Platform.Core Merge branch 'master' Jun 28, 2016 VirtoCommerce.Platform.Data.Azure FIxed links to GitHub Jun 20, 2016 VirtoCommerce.Platform.Data.Notifications FIxed links to GitHub Jun 20, 2016 VirtoCommerce.Platform.Data.Security FIxed links to GitHub Jun 20, 2016 VirtoCommerce.Platform.Data.Serialization FIxed links to GitHub Jun 20, 2016 VirtoCommerce.Platform.Data FIxed links to GitHub Jun 20, 2016 VirtoCommerce.Platform.Testing FIxed links to GitHub Jun 20, 2016 VirtoCommerce.Platform.Tests Added CommonAssemblyInfo.cs to every project Jun 7, 2016 VirtoCommerce.Platform.Web Merge branch 'dev' of https://github.com/VirtoCommerce/vc-community Jun 29, 2016 .deployment - removed unused file. added deployment file to the root Nov 11, 2014 .gitattributes Fix line endings for .config Mar 25, 2015 .gitignore Updated Azure deployment scripts Jun 3, 2016 .swagger-codegen-ignore Added VirtoCommerce.Platform.Client Jun 1, 2016 CommonAssemblyInfo.cs 2.11.3 Jul 1, 2016 CustomDictionary.xml Moved platform files to the root directory May 11, 2016 Jenkinsfile Create Jenkinsfile Jun 18, 2016 LICENSE git merge Mar 3, 2015 README.md Update README.md Jun 30, 2016 Settings.StyleCop git merge Mar 3, 2015 VirtoCommerce.Platform.sln Added VirtoCommerce.Platform.Client Jun 1, 2016 azuredeploy.json Added SearchConnectionString to azuredeploy.json Jun 7, 2016 deploy.cmd Updated Azure deployment scripts Jun 3, 2016 README.md Virto Commerce 2.x Branch Status Master Dev Virto Commerce is the second generation release and is the only enterprise level e-commerce product fully available under Open Source license. Virto Commerce is based on .NET 4.5 with extensive use of MVC, IoC, EF, Azure, Angular JS and many other cutting edge technologies. It can be deployed in Microsoft Cloud (Azure), Amazon Web Services (AWS) and on-premise. Mobile App Starter built using Ionic Framework is also available. Documentation: http://docs.virtocommerce.com Want to chat with other members of the Virto Commerce community? DEMO http://virtocommerce.com/try-now/online-demo Cloud Private Demo Setup your own private Microsoft Cloud environment and evaluate the latest version of Virto Commerce, read more. Developer resources Source Code Getting Started Platform settings Developing a custom solution Contributing We welcome & recognize contributors to Virto Commerce. There are many benefits available for our contributers, from special licensing to project involvement and access to private repositories. Follow the guide below to contribute: Before starting work on a new contribution, take a moment and search the commits and issues for similar proposals. Fork the Virto Commerce repository into your account according to GitHub Fork a Repo document. Make your changes. We also recommend you test your code before contributing. Once ready to commit your changes, create a pull request according to GitHub Create a Pull Request. Once received, the Virto Commerce development team will review your contribution and if approved, will pull your request to the appropriate branch. Note: You must agree to Virto Commerce Contributor License Agreement before pulling any requests. You only need to sign the agreement once. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/VirtoCommerce/vc-community"	"Virto Commerce is the second generation release and is the only enterprise level e-commerce product fully available under Open Source license. Virto Commerce is based on.NET 4.5 with extensive use of MVC, IoC, EF, Azure, Angular JS and many other cutting edge technologies. It can be deployed in Microsoft Cloud (Azure), Amazon Web Services (AWS) and on-premise."	"true"
"Environment Management"	"DNVM"	"https://github.com/aspnet/dnvm"	"The.NET SDK Manager, a set of command line utilities to update and configure which runtime (DNX) to use."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"193"	"88"	"78"	"GitHub - aspnet/dnvm: The .NET SDK Manager, a set of command line utilities to update and configure which runtime (DNX) to use. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 88 Star 193 Fork 78 aspnet/dnvm Code Issues 130 Pull requests 0 Pulse Graphs The .NET SDK Manager, a set of command line utilities to update and configure which runtime (DNX) to use. 392 commits 17 branches 9 releases 40 contributors PowerShell 57.3% Shell 41.7% Other 1.0% PowerShell Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags anurse/error-handling-and-install-alias anurse/fix-dnvm-feed anurse/fix-dnvm anurse/149-global-commands cesarbs/dnvm-setup-machine-dnx-home compressionLibLightup davidfowl/managed-dnvm dev feature-homebrew glennc/dnvmFeedChange glennc/managed-dnvm glennc/powershellversion glennc/ps2tests master release settingSource shirhatti/pushtoblob Nothing to show 1.0.0-rc1 1.0.0-beta8 1.0.0-beta7 1.0.0-beta6 1.0.0-beta5 1.0.0-beta4 1.0.0-beta3 1.0.0-beta2 1.0.0- Nothing to show New pull request Latest commit c058042 Mar 14, 2016 cesarbs ASP.NET 5 -> ASP.NET Core Permalink Failed to load latest commit information. build Push DNVM to blob storage Oct 16, 2015 src Fix space in username issue Nov 18, 2015 test Remove project name from output path Mar 2, 2016 .gitattributes new value in gitignore Mar 12, 2015 .gitignore add dnvm run and dnvm exec commands to ps1 Apr 4, 2015 .travis.yml Use Mono 4.0.5 Nov 17, 2015 CONTRIBUTING.md Update Home master -> Home dev May 12, 2015 LICENSE.txt Update LICENSE.txt and license header on files. May 1, 2015 NuGet.config React to aspnet/Universe#290 fix Oct 10, 2015 README.md ASP.NET 5 -> ASP.NET Core Mar 14, 2016 appveyor.yml Revert ""Update .travis.yml and appveyor.yml to build quietly."" Apr 8, 2015 build.cmd Fix local build break Oct 12, 2015 build.sh React to aspnet/Universe#290 fix Oct 11, 2015 makefile.shade Push DNVM to blob storage Oct 16, 2015 README.md dnvm AppVeyor: Travis: dnvm is the .NET Version Manager, a set of command line utilities to update and configure which .NET Runtime to use. This project is part of ASP.NET Core. You can find samples, documentation and getting started instructions for ASP.NET Core at the Home repo. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aspnet/dnvm"	"The.NET SDK Manager, a set of command line utilities to update and configure which runtime (DNX) to use."	"true"
"ETL"	"Reactive ETL"	"https://reactiveetl.codeplex.com/"	"Reactive ETL is a rewrite of Rhino ETL using the reactive extensions for.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ReactiveETL - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In ReactiveETL home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe Project Description Reactive ETL is a rewrite of Rhino ETL using the reactive extensions for .Net.   Rhino ETL is a great and easy to use ETL in C#. Rhino ETL rely on ""IEnumerable"" and ""yield return"" to provide ETL pipelines.   While Rhino ETL is great, the ""Enumerable"" pattern is a pulling technic, not really adapted to queues and pipelines. By using this pattern, you end writing too much code for simple operations. For an ETL the Observable pattern is more appropriate because it's a push technique. You define your queues and pipelines by chaining methods, in the same way you write Linq expressions, and then you tell your datasources to push data to the pipelines.   Here is an example of a simple pipeline that reads data from a table, transform the data, and insert the result in another table.   var result =           Input.Query(""input"", ""SELECT * FROM Users"")                 .Transform(                     row =>                         {                             string name = (string)row[""name""];                             row[""FirstName""] = name.Split()[0];                             row[""LastName""] = name.Split()[1];                             return row;                         }                 )                 .DbCommand(""output"", (cmd, row) =>                     {                         cmd.CommandText = @""INSERT INTO People (UserId, FirstName, LastName, Email) VALUES (@UserId, @FirstName, @LastName, @Email)"";                         cmd.AddParameter(""UserId"", row[""Id""]);                         cmd.AddParameter(""FirstName"", row[""FirstName""]);                         cmd.AddParameter(""LastName"", row[""LastName""]);                         cmd.AddParameter(""Email"", row[""Email""]);                     })                 .Execute();  Acknowledgments Reactive ETL is an adaptation of Rhino ETL, written by Ayende. Some parts of ReactiveETL's code came from Rhino ETL. As well as Rhino ETL, Reactive ETL use FileHelpers library from (www.filehelpers.com), written by Marcos Meli to work with files. Last edited Sep 18, 2010 at 1:40 PM by gleborgne, version 12 download Opera does not support ClickOnce X To install this application, save it and then open it. Opening it directly from Opera will not work correctly. current Reactive ETL Alpha 2 date Tue Jan 10, 2012 at 7:00 AM status Alpha downloads 832 rating       0 ratings Review this release activity downloads 0 Days: 7 7 30 30 All All Details © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"Reactive ETL is a rewrite of Rhino ETL using the reactive extensions for.NET"	"true"
"Game"	"MonoGame"	"https://github.com/mono/MonoGame"	"One framework for creating powerful cross-platform games"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3614"	"412"	"1807"	"GitHub - mono/MonoGame: One framework for creating powerful cross-platform games. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 412 Star 3,614 Fork 1,807 mono/MonoGame Code Issues 682 Pull requests 86 Wiki Pulse Graphs One framework for creating powerful cross-platform games. http://www.monogame.net 10,727 commits 9 branches 11 releases 217 contributors C# 98.0% HLSL 0.8% Smalltalk 0.4% XSLT 0.3% NSIS 0.3% Visual Basic 0.1% Other 0.1% C# HLSL Smalltalk XSLT NSIS Visual Basic Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags CartBlanche-AndroidFullScreenFix amazon_fire cpxbuild develop fullscreenfix master replace_opentk xamarin_forms xamarin Nothing to show v3.5.1 v3.5 v3.4 v3.3 v3.2 v3.0.1.0 v3.0.0.0 v2.5.0.0 2.5.1.0 2.1.0.0 2.0.0.0 Nothing to show New pull request Latest commit 883e723 Jul 13, 2016 tomspilman committed with KonajuGames Refactored audio processing for platform extensibility (#5001) … * Refactored the ShaderProfile enum into extensible class.  * Added Enumeration<T> for easier creation of enumeration types. Refactored shader creation into a single function call.  * Helper for deleting files without exceptions.  * Missed in previous commit.  * Added XB1 and Vita to platforms.  * Added new LoadedTypeCollection<T> helper. Refactor ShaderProfile to not try to mimic an Enum.  * Refactor of texture processing to a platform specific and extensible TextureProfile.  * Refactor of audio processing to use extensible AudioProfile class.  * Added new unit tests for audio content processing.  * Fixed misplaced header size writing.  * Fixed quality to sample rate conversion to be more accurate for PCM data.  * Added unit tests for WavImporter.  * Fixed attribute.  * More unit tests and fixes to audio content processing.  * Added missing files.  * Hack around stuff still not correct to XNA.  * Removed the unnessasary RawData property. Depend on the AudioContent.FileName to always provide a valid input file.  * Added tests for Mp3Importer and WmaImporter. Permalink Failed to load latest commit information. Build Refactored audio processing for platform extensibility (#5001) Jul 13, 2016 Documentation Hooked up changelog to docs. Apr 6, 2016 IDE/MonoDevelop [MD Addin] Fix Pipeline Tool command for Linux Jun 28, 2016 Installers [Linux Installer] Make scripts bash scripts Jun 28, 2016 MonoGame.Framework.Content.Pipeline Refactored audio processing for platform extensibility (#5001) Jul 13, 2016 MonoGame.Framework Added support for XACT reverb and filter effects (#4974) Jul 13, 2016 NuGetPackages Removed NVorbis and OpenTK from nuspec and XS add-in Jun 6, 2016 ProjectTemplates Merge pull request #4874 from cra0zy/NewSDL Jun 8, 2016 Test Refactored audio processing for platform extensibility (#5001) Jul 13, 2016 ThirdParty [Pipeline Tool] Use Wpf backend for Windows Jun 9, 2016 Tools Merge pull request #4966 from cra0zy/props Jul 8, 2016 .editorconfig Add a newline to the end of .editorconfig. Sep 28, 2013 .gitignore Fixed MacOS NugetPackage Jun 7, 2016 .gitmodules Add NVorbis submodule Apr 29, 2016 CHANGELOG.md Added change log with historical release information. Apr 6, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Feb 27, 2016 LICENSE.txt Updated copyright to 2016 Jan 1, 2016 Protobuild.exe The latest version of Protobuild. (#4964) Jun 29, 2016 README.md Fix README Mar 20, 2016 REQUIREMENTS.md Updated README Jan 25, 2016 default.build Use working directory to get Piranha to resolve assemblies correctly. Apr 24, 2016 README.md MonoGame One framework for creating powerful cross-platform games. The spiritual successor to XNA with 1000's of titles shipped across desktop, mobile, and console platforms. MonoGame is a fully managed .NET open source game framework without any black boxes. Create, develop and distribute your games your way. Build Status Supported Platforms Support and Contributions Source Code Helpful Links License Build Status Our build server builds, tests, and packages the latest MonoGame changes. The table below shows the current build status for the develop branch. Name Status Build Windows, Web, Android, and OUYA Build Mac, iOS, and Linux Generate Documentation Windows Tests Package NuGet Package Mac and Linux Package Windows Supported Platforms We support a growing list of platforms across the desktop, mobile, and console space. If there is a platform we don't support, please make a request or come help us add it. Desktop PCs Windows Store Apps (8, 8.1 and 10) Windows (OpenGL & DirectX) Linux (OpenGL) Mac OS X (OpenGL) Mobile Devices Android (OpenGL) iOS (OpenGL) Windows Phone (8, 8.1 and 10) Consoles (for registered developers) PlayStation 4 PlayStation Vita Xbox One (both UWP and XDK) OUYA Support and Contributions If you think you have found a bug or have a feature request, use our issue tracker. Before opening a new issue, please search to see if your problem has already been reported. Try to be as detailed as possible in your issue reports. If you need help using MonoGame or have other questions we suggest you post on our community forums. Please do not use the GitHub issue tracker for personal support requests. If you are interested in contributing fixes or features to MonoGame, please read our contributors guide first. Source Code The full source code is available here from GitHub: Clone the source: git clone https://github.com/mono/MonoGame.git Setup the submodules: git submodule update --init Run Protobuild.exe to generate project files and solutions. If on Linux or Mac, run it with mono: mono Protobuild.exe You can generate solutions for platforms that are not buildable from the current OS with: Windows: .\Protobuild.exe --generate $PLATFORM Linux or Mac: mono Protobuild.exe --generate $PLATFORM Open the solution for your target platform to build the game framework. Open the solution for your development platform for building the pipeline and content tools. For the prerequisites for building from source please look at the Requirements file. A high level breakdown of the components of the framework: The game framework is found in MonoGame.Framework. The content pipeline is located in MonoGame.Framework.Content.Pipeline. The MonoDevelop addin is in IDE/MonoDevelop. The Visual Studio templates are in ProjectTemplates. NuGet packages are located in NuGetPackages. See Test for the pipeline and framework unit tests. Tools/MGCB is the command line tool for content processing. Tools/2MGFX is the command line effect compiler tool. The Tools/Pipeline tool is a GUI frontend for content processing. Helpful Links The official website is monogame.net. Our issue tracker is on GitHub. Use our community forums for support questions. You can chat live with the core developers and other users. The official documentation is on our website. Download release and development installers and packages. Follow @MonoGameTeam on Twitter. License The MonoGame project is under the Microsoft Public License except for a few portions of the code. See the LICENSE.txt file for more details. Third-party libraries used by MonoGame are under their own licenses. Please refer to those libraries for details on the license they use. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mono/MonoGame"	"One framework for creating powerful cross-platform games"	"true"
"Game"	"CocosSharp"	"https://github.com/mono/CocosSharp"	"CocosSharp is a C# implementation of the Cocos2D and Cocos3D APIs that runs on any platform where MonoGame runs"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"355"	"151"	"105"	"GitHub - mono/CocosSharp: CocosSharp is a C# implementation of the Cocos2D and Cocos3D APIs that runs on any platform where MonoGame runs. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 151 Star 355 Fork 105 mono/CocosSharp Code Issues 34 Pull requests 1 Wiki Pulse Graphs CocosSharp is a C# implementation of the Cocos2D and Cocos3D APIs that runs on any platform where MonoGame runs. 4,414 commits 6 branches 14 releases Fetching contributors C# 99.8% Other 0.2% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop forms_support gh-pages master piranha tvos Nothing to show v1.7.1.0 v1.7.0.0 v1.6.2.0 v1.6.1.0 v1.6.0.0 v1.5.0.0 v1.4.0.0 v1.3.2.0 v1.3.1.0 v1.3.0.0 v1.2.1.0 v1.2.0.0 v1.1.0.0 v1.0.1.0 Nothing to show New pull request Latest commit 9346063 Feb 6, 2016 rtabbara CCGameView.iOS: Override iPhoneOSGameView WillMoveToWindow behaviour … * appears to unnecessarily destroy frame buffer * proposed fix for #355 Permalink Failed to load latest commit information. CocosSharp.Content.Pipeline.Importers Update Pipeline Importers project to 4.5 so it will compile against W… Oct 8, 2015 CocosSharp.Forms Update to version 1.7.1.0 Jan 9, 2016 Extensions Forms: Tests.WP8.1: Link up to use CCGameView Sep 19, 2015 MonoGame @ 2953aff Update MonoGame forms_support branch Nov 28, 2015 PCL Update to version 1.7.1.0 Jan 9, 2016 ProjectTemplates Close #351 New project game region can be difficult to see on iOS dev… Jan 27, 2016 ReleaseNotes Add v1.7.1.0 release notes Jan 9, 2016 TestWin8Phone Merge branch 'master' of https://github.com/mono/CocosSharp into text… Aug 7, 2015 box2d [project.json] Fix VS2015 compile problems. The issue is that even wh… Oct 25, 2015 docs Update CCNode documentation Aug 20, 2014 src CCGameView.iOS: Override iPhoneOSGameView WillMoveToWindow behaviour Feb 6, 2016 testWin81Store Add Windows8.1 XAML implementation as well as test solution tests/Coc… Oct 8, 2015 testWin8Store Merge branch 'master' of https://github.com/mono/CocosSharp into text… Aug 7, 2015 tests Close #288 Audio engine: Add ability to check if effects are playing Dec 19, 2015 tools Updating release version script to incorporate forms targets Oct 10, 2015 .gitattributes initial commit Oct 26, 2012 .gitignore Add /CocosSharp.Forms/packages to .gitignore to make sure the package… Oct 28, 2015 .gitmodules Add submodule ChipmunkSharp Aug 9, 2014 CocosSharp.Android.sln Fix for Android Linking Jul 8, 2015 CocosSharp.MacOS.sln Make sure we only reference CS objects and wrap others for the PCL in… Aug 10, 2014 CocosSharp.Windows.sln Fix Build Script - Remove content build project from CocosSharp.Windo… Jan 16, 2015 CocosSharp.Windows8.sln Fix windows 8 build process. Aug 29, 2014 CocosSharp.Windows81.sln Add Windows8.1 XAML implementation as well as test solution tests/Coc… Oct 8, 2015 CocosSharp.WindowsDX.sln Include CCNodeGrid in Windows projects. Feb 25, 2015 CocosSharp.WindowsGL.sln Fix references for WindowsGL projects - Need to reference Lidgren.xxx… Jan 22, 2015 CocosSharp.WindowsPhone.sln Make WP8 compile again due to regressions in the API Jul 30, 2014 CocosSharp.WindowsPhone81.sln Modify WindowsPhone81 to compile with Any CPU which matches MG project. Jul 31, 2015 CocosSharp.WindowsUWP.sln Rename Windows Universal projects to use UWP nomenclature which follo… Oct 15, 2015 CocosSharp.iOS.sln Project updates from Windows - iOS Unified API Jan 14, 2015 CocosSharp.sln Rename cocos2d.Content.Pipeline.Importers to CocosSharp.Content.Pipel… Nov 24, 2014 CocosSharpAPI.cs Add support to allow modifying of the LineHeight of the label SystemF… Mar 31, 2015 Contributing.md Update Jan 21, 2014 LicenseAndCredit.txt Update Jan 21, 2014 MonoGame.build Add CocosSharp Windows 8.1 project definition. Aug 19, 2015 README.md Fixed typographical error, changed aggresive to aggressive in README. Sep 30, 2015 default.build Fix XS templates build. Still referencing CocosSharp.PCL.Shared.*.nupkg Nov 9, 2015 README.md CocosSharp CocosSharp is an easy to use library for simple games using C# and F#. It is a .NET port of the popular Cocos2D engine, derived from the Cocos2D-X engine via Cocos2D-XNA. This library is MIT licensed. Forums Xamarin is hosting forums for CocosSharp here: http://forums.xamarin.com/categories/cocossharp Learn More To learn more, see the https://github.com/mono/CocosSharp/wiki License This project is open source, freely available, and free of royalties or encumberance. The software is released under the highly permissive MIT License. Git When you first check out, run git clone --recursive git@github.com:xamarin/CocosSharp so you will have all the submodules checked out for you. With existing checkouts, run git submodule update --init --recursive to make sure you get the latest changes in the submodules. Repos that were checked out recursively will do this automatically, but it doesn't hurt to run this manually. To pull external changes into a submodule cd <submodule>    git pull origin <branch>    cd <top-level>; git add <submodule>    git commit  To make changes in a submodule cd <submodule> By default, submodules are detached because they point to a specific commit. Use git-checkout to put yourself back on a branch. git checkout <branch> work as normal, the submodule is a normal repo git commit/push new changes to the repo (submodule) cd <top-level>; git add <submodule> # this will record the new commits to CocosSharp MonoGame submodule git commit  To switch the repo of a submodule edit '.gitmodules' to point to the new location git submodule sync -- <path of the submodule> # updates .git/config I think this will checkout from the new location, internally. It may take a while for big repos. git submodule update --recursive git checkout <desired new hash> # This changes the pointer of the submodule  The desired output diff is a change in .gitmodule to reflect the change in the remote URL, and a change in / where you see the desired change in the commit hash You now have everything you need to start start developing with CocosSharp Getting Started Solutions & Projects - MonoGame After clone you will need to generate the MonoGame projects. The solution and project files are generated by Protobuild when you double-click Protobuild.exe on Windows from or run mono Protobuild.exe under Mac OS or Linux. Note: that the previous needs to be done in the MonoGame directory. To modify the projects you must edit the .definition file in the Build/Projects/ folder and re-execute Protobuild. For more information and advanced usage, please refer to the Protobuild wiki. Test Bed We have created solutions for all the supported platforms that serves as our TestBed for each platform. You can find those in the tests directory CocosSharp.Tests.Android.sln     CocosSharp.Tests.Windows.sln     CocosSharp.Tests.Windows8.sln    CocosSharp.Tests.WindowsDX.sln   CocosSharp.Tests.WindowsGL.sln   CocosSharp.Tests.WindowsPhone.sln    CocosSharp.Tests.WindowsPhone7.sln   CocosSharp.Tests.iOS.sln CocosSharp.Tests.MacOS.sln    Samples As the saying goes ""A picture is worth a thousand words"" well sample code can be just as effective. So to get started we have placed a number of samples here: Samples Statistics There is a special case for Xamarin iOS MonoTouch running on the simulator where they aggressively call garbage collection themselves. This should not affect the devices though. On the Simulator the GC label will always be 0 (zero) History This project is a fork of the Cocos2D-XNA project, which is a port of the C++-based Cocos2D-X API, which in turn is a cross-platform port of the cocos2d-iphone project. The focus of this fork is to create a library that is idiomatically correct for C# and remove many of the historical warts inherited from the straight ports from C++ and Objective-C. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mono/CocosSharp"	"CocosSharp is a C# implementation of the Cocos2D and Cocos3D APIs that runs on any platform where MonoGame runs"	"true"
"Game"	"Duality"	"https://github.com/AdamsLair/duality"	"Duality is a 2D game development framework. Focused on modularity, comes with a visual editor."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"567"	"83"	"166"	"GitHub - AdamsLair/duality: a 2D Game Development Framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 83 Star 567 Fork 166 AdamsLair/duality Code Issues 84 Pull requests 0 Wiki Pulse Graphs a 2D Game Development Framework http://duality.adamslair.net 1,708 commits 4 branches 0 releases 16 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x gh-pages master release Nothing to show Nothing to show New pull request Latest commit 2be08d6 Jul 13, 2016 ilexp Package Update … #CHANGE: Updated Package Specs to AdamsLair.Duality.Editor.Plugins.Base 2.2.1 #CHANGE: Updated Package Specs to AdamsLair.Duality.Editor.Plugins.DynamicLighting 2.0.1 #CHANGE: Updated Package Specs to AdamsLair.Duality.Editor 2.6.1 Permalink Failed to load latest commit information. .github Create PULL_REQUEST_TEMPLATE.md Feb 19, 2016 .nuget NuGet Maintenance Jun 29, 2014 Backend Package Update Jul 2, 2016 Documentation Updated Docs Mar 9, 2015 Duality Package Update Jul 4, 2016 DualityEditor Package Update Jul 13, 2016 DualityEditorPlugins Package Update Jul 13, 2016 DualityLauncher Package Update Jul 2, 2016 DualityPlugins Added ""Create Tileset"" Action Jul 11, 2016 DualityPrimitives Package Update Sep 3, 2015 DualityUpdater Updater Package Tweaks Apr 19, 2016 NuGetPackageSpecs Package Update Jul 13, 2016 Other Version Updater Tweaks Feb 29, 2016 SampleProjects Package Update May 16, 2016 UnitTesting Moved Loaded Assembly Enumeration Jul 2, 2016 VisualStudio Maintenance Sep 1, 2015 .gitignore Merge branch 'master' into tilemap-wip Jun 16, 2016 ATTRIBUTION Flap-Or-Die Sample Tweaks Oct 25, 2015 Duality (Core).sln Solution Structure Nov 23, 2015 Duality (Editor).sln Solution Structure Nov 23, 2015 Duality.sln Merge branch 'master' into tilemap-wip Feb 7, 2016 LICENSE Updated Copyright Date May 1, 2015 README.md Update README.md Jan 16, 2016 appveyor.yml Automated Editor Testing Setup Feb 4, 2016 README.md Duality - A 2D GameDev Framework Duality is a plugin based 2D game development framework based on C# and OpenTK. To get a quick overview, please visit the project page. Besides the github project overview and documentation, there is also a developer blog. If you want to contribute to the project, be it by active development, documentation or testing, you should pay a visit to the community forums. The same applies to any questions or suggestions - feedback is always welcome! However, bugs and feature requests that do not require further discussion should be filed in the issue tracking system, directly here on github. Latest binary release: http://dualitybin.adamslair.net/ Fork / Contribution Guide: How to Contribute. Donate: via PayPal or on itch.io Build status: Branch Status master release 1.x Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/AdamsLair/duality"	"Duality is a 2D game development framework. Focused on modularity, comes with a visual editor."	"true"
"Game"	"Xenko"	"http://xenko.com/"	"Xenko is a 2D/3D cross-platform game engine featuring a scene editor, particles, physically based rendering (PBR), scripting, and much more"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"995"	"161"	"283"	"GitHub - SiliconStudio/xenko: Xenko Game Engine Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 161 Star 995 Fork 283 SiliconStudio/xenko Code Issues 122 Pull requests 0 Pulse Graphs Xenko Game Engine http://xenko.com 10,321 commits 6 branches 53 releases Fetching contributors C# 88.4% C++ 5.7% Pascal 4.8% HLSL 0.7% C 0.2% Python 0.1% Other 0.1% C# C++ Pascal HLSL C Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master-1.4 master-1.5 master-1.6 master-1.7 master old_master Nothing to show releases/1.7.4-beta releases/1.7.3-beta releases/1.7.2-beta releases/1.7.1-beta releases/1.7.0-beta releases/1.6.8-beta releases/1.6.7-beta releases/1.6.6-beta releases/1.6.5-beta releases/1.6.4-beta releases/1.6.3-beta releases/1.6.2-beta releases/1.6.1-beta releases/1.6.0-beta releases/1.5.4-beta releases/1.5.3-beta releases/1.5.2-beta releases/1.5.1-beta releases/1.5.1-alpha0016 releases/1.5.0-beta releases/1.5.0-alpha0015 releases/1.5.0-alpha0014 releases/1.5.0-alpha0013 releases/1.5.0-alpha0012 releases/1.5.0-alpha0011 releases/1.5.0-alpha0010 releases/1.5.0-alpha0009 releases/1.5.0-alpha0006 releases/1.4.2-beta releases/1.4.1-beta releases/1.4.0-beta releases/1.3.4-beta releases/1.3.3-beta releases/1.3.2-beta releases/1.3.1-beta releases/1.3.0-beta releases/1.2.2-beta releases/1.2.1-beta releases/1.2.0-beta releases/1.1.4-beta releases/1.1.3-beta releases/1.1.2-beta releases/1.1.1-beta releases/1.1.0-beta releases/1.0.0-beta10 releases/1.0.0-beta08 releases/1.0.0-beta07 releases/1.0.0-beta06 releases/1.0.0-beta05 releases/1.0.0-beta04 releases/1.0.0-beta03 releases/1.0.0-beta02 releases/1.0.0-beta01 Nothing to show New pull request Latest commit 0291d8f Jul 15, 2016 manu-silicon [Build] Use Choose node to avoid referencing non-used assemblies Permalink Failed to load latest commit information. Targets [Targets] Properly creates directory necessary for graphics platform … Jul 9, 2016 build [Build] Allow to override Store URL on Publish target Jul 5, 2016 deps Merge branch 'master-1.7' Jul 13, 2016 doc [Doc] Added info about Git LFS switch Jun 16, 2016 samples [Samples] Update remaining samples and regenerate effect logs Jul 1, 2016 sources [Build] Use Choose node to avoid referencing non-used assemblies Jul 15, 2016 .editorconfig Fix XK-3114 to properly read .editorconfig settings Mar 10, 2016 .gitattributes [Build] Removed submodule and use Git LFS Jun 15, 2016 .gitignore [Build] Removed submodule and use Git LFS Jun 15, 2016 LICENSE.GPL3.md Initial Commit Oct 17, 2014 LICENSE.md Add a disclaimer about inadequate submissions into the contribution t… Jan 14, 2016 README.md [Doc] Added info about Git LFS switch Jun 16, 2016 Xenko.xkpkg [Version] Bump to version 1.7.4 Jul 14, 2016 store.config [NuGet] Remove Paradox references from store.config. Keep support for… Nov 24, 2015 README.md Xenko This is the source code for Xenko Game Engine (http://xenko.com/). License Licensing and Contributions Community Chat with the community at Ask and answer questions on our QA website: http://answers.xenko.com/ Discuss on our forums: http://forums.xenko.com/ Documentation Build Instructions Git LFS: read about our recent switch to LFS (if you need to upgrade a non-LFS Xenko repository or an existing non-LFS Xenko branch) API Reference Documentation Assemblies Assembly diagram SiliconStudio.Xenko.Graphics: Platform-indepdenent D3D11-like rendering API. Implementations for Direct3D 11 (with feature levels 9.1 and 10), OpenGL 4 and OpenGL ES 2.0. SiliconStudio.Xenko.Games: Windows and game loop management. SiliconStudio.Xenko.Input: Input management, including keyboard, joystick, mouse, touch, gestures. SiliconStudio.Xenko.Engine: Effect system, entity system, particle system, high-level audio engine, etc... SiliconStudio.Xenko.UI: In-game UI library, similar to WPF (including many UI Controls). SiliconStudio.Xenko.Shaders: Xenko shader language, including many new language constructs to make shader programming much more easy/modular. SiliconStudio.Xenko.Audio: Low-level audio engine. SiliconStudio.Assets: Modular asset project management and pipeline system. SiliconStudio.Xenko.GameStudio: Asset editor for Xenko. Allow asset browsing and editing, and Xenko Asset project editing. We currently do not provide sources for: SiliconStudio.Xenko.GameStudio due to a licensed third party library that we use, Telerik. That might be lifted in the future. Autodesk Max and Maya plugin (which will be released in the future) due to SDK licensing restrictions. Silicon Studio .NET SiliconStudio .NET is a collection of shared C#/.NET code that is project independent. It is located inside sources/common subfolder. Folders and projects layout core SiliconStudio.Core: Reference counting, dependency property system (PropertyContainer/PropertyKey), low-level serialization, low-level memory operations (Utilities and NativeStream). SiliconStudio.Core.Mathematics: Mathematics library (despite its name, no dependencies on SiliconStudio.Core). SiliconStudio.Core.IO: Virtual File System. SiliconStudio.Core.Serialization: High-level serialization and git-like CAS storage system. SiliconStudio.MicroThreading: Micro-threading library based on C# 5.0 async (a.k.a. stackless programming) SiliconStudio.AssemblyProcessor: Internal tool used to patch assemblies to add various features, such as Serialization auto-generation, various memory/pinning operations, module initializers, etc... presentation SiliconStudio.Presentation: WPF UI library (themes, controls such as propertygrid, behaviors, etc...) SiliconStudio.SampleApp: Simple property grid example. SiliconStudio.Quantum: Advanced ViewModel library that gives ability to synchronize view-models over network (w/ diff), and at requested time intervals. That way, view models can be defined within engine without any UI dependencies. buildengine SiliconStudio.BuildEngine.Common: Common parts of the build engine. It can be reused to add new build steps, build commands, and also to build a new custom build engine client. SiliconStudio.BuildEngine: Default implementation of build engine tool (executable) SiliconStudio.BuildEngine.Monitor: WPF Display live results of build engine (similar to IncrediBuild) SiliconStudio.BuildEngine.Editor: WPF Build engine rules editor and used by most projects. shaders Irony: Parsing library, used by SiliconStudio.Shaders. Should later be replaced by ANTLR4. SiliconStudio.Shaders: Shader parsing, type analysis and conversion library (used by HLSL->GLSL and Xenko Shader Language) targets MSBuild target files to create easily cross-platform solutions (Android, iOS, WinRT, WinPhone, etc...), and define behaviors and targets globally. Extensible. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/SiliconStudio/xenko"	"Xenko is a 2D/3D cross-platform game engine featuring a scene editor, particles, physically based rendering (PBR), scripting, and much more"	"true"
"Game"	"Wave Engine"	"https://waveengine.net/Engine"	"Wave engine is a free c# component-based modern game engine which allows you to create cross-platform games supporting kinect, oculusrift, vuforia, cardboard, leapmotion and much more."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"WaveEngine Team · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization WaveEngine Team http://waveengine.net Repositories People 2 Filters Sources Forks HTML 21 30 QuickStarters The collection of University Tour quickstarters Updated Jul 14, 2016 HTML 75 117 Samples A collection of Wave engine sample projects Updated Jul 7, 2016 C# 2 4 Series Source code for all the video series of our video tutorials. Updated Jul 7, 2016 C# 0 2 Materials The complete source code for HLSL and GLSL of the defaults shaders. Updated Jun 14, 2016 C# 36 14 Components To make the creation of custom components a little easier, we will publish the source code of some of the internal components Updated Jun 14, 2016 C# 8 7 Extensions External sdk integrated in WaveEngine Updated Jun 14, 2016 27 5 Documentation Official Wave Engine's Documentation portal Updated Apr 12, 2016 C# 0 91 lidgren-network-gen3 forked from lidgren/lidgren-network-gen3 Lidgren Network Library Updated Mar 31, 2016 C# 1 1,187 spine-runtimes forked from EsotericSoftware/spine-runtimes 2D skeletal animation runtimes for Spine. Updated Feb 23, 2016 C# 1 43 TiledSharp forked from marshallward/TiledSharp C# library for parsing and importing TMX and TSX files generated by Tiled, a tile map generation tool Updated Feb 16, 2016 C# 0 10 play.billing.v3 forked from ddebilt/play.billing.v3 A C# Google Play client, for use with Xamarin.Android applications. Updated May 5, 2015 2 People davilovick David Ávila Jorgemagic Jorge Cantón Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/WaveEngine/"	"Wave engine is a free c# component-based modern game engine which allows you to create cross-platform games supporting kinect, oculusrift, vuforia, cardboard, leapmotion and much more."	"true"
"Gis"	"NetTopologySuite"	"https://github.com/NetTopologySuite/NetTopologySuite/"	"A.NET GIS solution that is fast and reliable for the.NET platform"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"151"	"44"	"77"	"GitHub - NetTopologySuite/NetTopologySuite: A .NET GIS solution that is fast and reliable for the .NET platform. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 44 Star 151 Fork 77 NetTopologySuite/NetTopologySuite Code Issues 10 Pull requests 0 Wiki Pulse Graphs A .NET GIS solution that is fast and reliable for the .NET platform. 1,187 commits 28 branches 12 releases 14 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags CoordinateModelRework GenericsWork PolygonBufferIssue RevSnipplets SharpMap master nts_pcl powercollections_pcl powercollections_pcl@1053 projnet_pcl projnet_pcl@1104 references tags/PowerCollections_v1.13.2 tags/PowerCollections_v1.13.2@1168 tags/ProjNet4GeoAPI_v1.3.0.3 tags/ProjNet4GeoAPI_v1.3.0.3@1166 tags/v2 tags/v2.0 trunk v1.9 v1.10 v1.11-GeoAPI-Coordinate v1.11-Performance v1.12 v1.12.1 v2.0 v2.11_cleanup v2.11 Nothing to show v1.13.3 v1.13.2 v1.13 v1.12.1 v1.12 v1.11 v1.10 v1.9.1 v1.9 v1.8 v1.7.3 v1.7.3+ Nothing to show New pull request Latest commit d0beedd Jul 5, 2016 DGuidi #108: updated xml test files from latest jts master Permalink Failed to load latest commit information. BuildTools Fix for #81 NuGet package restore Feb 1, 2016 NetTopologySuite.Converter Moved project in directory structure Mar 30, 2016 NetTopologySuite.CoordinateSystems.Transfromation/DotSpatial.Projections.Wrapper Fix for #81 NuGet package restore Feb 1, 2016 NetTopologySuite.IO #111: added more checks in other GeometryHandlers Jul 4, 2016 NetTopologySuite.Lab Fix for #81 NuGet package restore Feb 1, 2016 NetTopologySuite.Samples.Console #111: added more checks in other GeometryHandlers Jul 4, 2016 NetTopologySuite.Samples.Shapefiles applied patch #181 Apr 28, 2014 NetTopologySuite.TestRunner.Console Fix for #81 NuGet package restore Feb 1, 2016 NetTopologySuite.TestRunner.Tests #108: updated xml test files from latest jts master Jul 5, 2016 NetTopologySuite.TestRunner Fix for #81 NuGet package restore Feb 1, 2016 NetTopologySuite.Tests.NUnit making NearestNeighbor for kd tree search properly. Feb 27, 2016 NetTopologySuite.Tests.Vivid.XUnit Fix for #81 NuGet package restore Feb 1, 2016 NetTopologySuite.VersionComparisonTests git-svn-id: http://nettopologysuite.googlecode.com/svn/trunk@747 53ca… Oct 17, 2011 NetTopologySuite.Windows.Forms Fix for #81 NuGet package restore Feb 1, 2016 NetTopologySuite.Windows.Media Fix for #81 NuGet package restore Feb 1, 2016 NetTopologySuite #105: fixed project file for non-PCL build May 30, 2016 PortableClassLibrary Nearest neighbor May 30, 2016 Sandcastle Remove remaining mentions of PowerCollections Jan 31, 2016 .gitignore handled ""null bounds"" error when creating an empty shapefile Dec 22, 2014 .gitmodules Integrated ""snipplets"" code from @FObermaier in #77: Jan 27, 2016 .travis.yml Added ReleaseLinux configuration to exclude WPF projects Nov 9, 2015 LocalTestRun.testrunconfig trunk added NetTopologySuite.Silverlight (silverlight v4), this share… Mar 17, 2011 NTS.Converter.DotSpatial.nuspec Update GeoAPI reference to 1.7.4 Nov 16, 2015 NTS.IO.GeoJSON.nuspec Preparing 1.13.4 release Aug 6, 2015 NTS.IO.SpatiaLite.nuspec Preparing 1.13.4 release Aug 6, 2015 NTS.IO.SqlServer.nuspec #17: added xml docs to some nuget io packages Nov 11, 2014 NTS.IO.nuspec Fixed typo in fix for #67 Dec 2, 2015 NTS.nuspec Remove remaining mentions of PowerCollections Jan 31, 2016 NetTopologySuite.sln fixed last commit: sorry for the 'double commit' mistake Feb 27, 2016 NetTopologySuite.sln.DotSettings #89 added prototype stylesettings file Feb 28, 2016 NetTopologySuite.vsmdi [trunk] May 12, 2011 README.md Update README.md Nov 8, 2015 SharedAssemblyVersion.cs Update GeoAPI reference to 1.7.4 Nov 16, 2015 TeamCity.proj another change to teamcity settings Sep 17, 2013 TeamCity.targets Merge branch 'RevSnipplets' of https://github.com/NetTopologySuite/Ne… Feb 1, 2016 README.md NetTopologySuite A .NET GIS solution that is fast and reliable for the .NET platform. NetTopologySuite is a direct-port of all the functionalities offered by JTS Topology Suite: NTS expose JTS in a '.NET way', as example using Properties, Indexers etc... An excerpt from JTS website explains the capabilities of NTS too: ""The JTS Topology Suite is an API for modelling and manipulating 2-dimensional linear geometry. It provides numerous geometric predicates and functions. JTS conforms to the Simple Features Specification for SQL published by the Open GIS Consortium."" Enjoy using them! Install with NuGet package manager PM> Install-Package NetTopologySuite Clone When cloning make sure you also clone the submodules: git clone --recursive https://github.com/NetTopologySuite/NetTopologySuite Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/NetTopologySuite/NetTopologySuite/"	"A.NET GIS solution that is fast and reliable for the.NET platform"	"true"
"Gis"	"SharpMap"	"https://sharpmap.codeplex.com/"	"An easy-to-use mapping library for use in web and desktop applications"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"63"	"32"	"35"	"GitHub - SharpMap/SharpMap: An easy-to-use mapping library for use in web and desktop applications Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 63 Fork 35 SharpMap/SharpMap Code Issues 8 Pull requests 0 Pulse Graphs An easy-to-use mapping library for use in web and desktop applications 844 commits 6 branches 9 releases 14 contributors C# 99.0% Other 1.0% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: Branches/1.0 Switch branches/tags Branches Tags Branches/Trunk-Benjii Branches/Trunk_RenderingRefactoring Branches/0.9.5 Branches/1.0_WXS_Refactoring Branches/1.0 master Nothing to show v1.1 v1.0-RC3 v1.0-RC2 v1.0-RC1 v1.0-FINAL v0.9_2012-05-07 v0.9_2012-02-02 v0.9_2011-11-13 v0.9_2011-08-03 Nothing to show New pull request Latest commit 2c7808f Jul 15, 2016 becio Merge branch 'Branches/1.0' of https://github.com/SharpMap/SharpMap.git Permalink Failed to load latest commit information. BuildTools Update NuGet package restore approach (#8) Feb 2, 2016 Docs Remove ..svnbridge folders Oct 26, 2015 Examples Some perf. improvements when rendering geometries Jul 4, 2016 SharpMap.Converters.GeoJSON Update NuGet package restore approach (#8) Feb 2, 2016 SharpMap.Converters.Spatialite Factor out rarely used converter code into seperate projects Jan 31, 2016 SharpMap.Data.Providers.FileGdb Initial commit for #14 Feb 12, 2016 SharpMap.Data.Providers.GeoPackage Initial commit for #14 Feb 12, 2016 SharpMap.Data.Providers.Kml KmlFileFeaturesExporter uses SharpMap session now Jul 4, 2016 SharpMap.Data.Providers.OracleSpatial Initial commit for #14 Feb 12, 2016 SharpMap.Extensions.x86 Initial commit for #14 Feb 12, 2016 SharpMap.Extensions Fixed bug in ordinate association May 25, 2016 SharpMap.Layers.BruTile Initial commit for #14 Feb 12, 2016 SharpMap.Layers.HeatLayer Initial commit for #14 Feb 12, 2016 SharpMap.Layers.SharpDX Update NuGet package restore approach (#8) Feb 2, 2016 SharpMap.Serialization Update NuGet package restore approach (#8) Feb 2, 2016 SharpMap.SqlServerSpatialObjects Initial commit for #14 Feb 12, 2016 SharpMap.UI.WPF Update NuGet package restore approach (#8) Feb 2, 2016 SharpMap.UI Minimap crashed when resizing with no map; Refresh method now redraws… Jul 15, 2016 SharpMap.Utilities.Indexing.SbnTree Update NuGet package restore approach (#8) Feb 2, 2016 SharpMap.Web Update NuGet package restore approach (#8) Feb 2, 2016 SharpMap Correct computation of number of columns Jul 6, 2016 SharpMapServer Update NuGet package restore approach (#8) Feb 2, 2016 UnitTests Some perf. improvements when rendering geometries Jul 4, 2016 packages Initial commit for #14 Feb 12, 2016 .gitignore Added SharedAssemblyVersion.cs to .gitignore Nov 6, 2015 .travis.yml Fix for #6 Nov 11, 2015 README.md Update README.md Feb 10, 2016 SharpMap.Core.nuspec Splitting up nuget packages Nov 11, 2015 SharpMap.Data.Providers.GeoPackage.nuspec [Branches/1.0] Mar 6, 2015 SharpMap.Data.Providers.Kml.nuspec [Branches/1.0] Mar 6, 2015 SharpMap.Data.Providers.OracleSpatial.nuspec [Branches] Feb 11, 2014 SharpMap.Extensions.nuspec [Branches/1.0] Mar 6, 2015 SharpMap.Layers.BruTile.nuspec Splitting up nuget packages Nov 11, 2015 SharpMap.Layers.HeatLayer.nuspec [Branches] Feb 11, 2014 SharpMap.UI.nuspec [Branches/1.0] Feb 11, 2014 SharpMap.Web.nuspec [Branches] Feb 11, 2014 SharpMap.nuspec Splitting up nuget packages Nov 11, 2015 SharpMap.proj Update NuGet package restore approach (#8) Feb 2, 2016 SharpMap.sln Update NuGet package restore approach (#8) Feb 2, 2016 SharpMap.sln.DotSettings Feb 3, 2014 SharpMap.targets Update SharpMap.targets Nov 17, 2015 SharpMap.vssscc Add the SqLite data provider contributed by Bill Dollins to the Sharp… Sep 3, 2007 SharpMapServer.sln [Trunk] Mar 1, 2013 README.md SharpMap An easy-to-use mapping library for use in web and desktop applications Travis build status TeamCity build status: Teamcity coverage status: Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/SharpMap/SharpMap"	"An easy-to-use mapping library for use in web and desktop applications"	"true"
"Git Tools"	"Bonobo Git Server"	"https://github.com/jakubgarfield/Bonobo-Git-Server"	"Bonobo Git Server for Windows is a web application you can install on your IIS and easily manage and connect to your git repositories."	"null"	"null"	"null"	"null"	"null"	"https://bonobogitserver.com/"	"null"	"889"	"119"	"383"	"GitHub - jakubgarfield/Bonobo-Git-Server: Bonobo Git Server for Windows is a web application you can install on your IIS and easily manage and connect to your git repositories. Go to homepage for release and more info. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 119 Star 889 Fork 383 jakubgarfield/Bonobo-Git-Server Code Issues 48 Pull requests 6 Wiki Pulse Graphs Bonobo Git Server for Windows is a web application you can install on your IIS and easily manage and connect to your git repositories. Go to homepage for release and more info. http://bonobogitserver.com 986 commits 4 branches 21 releases 65 contributors C# 50.2% CSS 24.3% Tcl 23.7% Perl 0.8% Shell 0.7% HTML 0.2% Other 0.1% C# CSS Tcl Perl Shell HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master release/5 update-json woff2 Nothing to show v3.4.1 v3.4.0 v3.3.0 v3.2.0 v3.1.0 v3.0.0 v2.1 v2.0.1 v2.0 v1.3.0 v1.2.0 5.2 5.1.1 5.1 5.0.1 5.0.0 4.0.0 3.6.0 3.5.0 3.4.3 3.4.2 Nothing to show New pull request Latest commit 107f534 Jun 27, 2016 RedX2501 Fix #565 Back button broken for non-admins from Account/Details page … … …on read-only MembershipService. Permalink Failed to load latest commit information. Bonobo.Git.Server.Test Fixed navigating into folders in branches. Fix #541 Jun 21, 2016 Bonobo.Git.Server Fix #565 Back button broken for non-admins from Account/Details page … Jun 27, 2016 .gitattributes Updated .gitattributes Feb 10, 2014 .gitignore Removed and ignored .vs directory Feb 15, 2016 Bonobo.Git.Server.sln Added new necessary key to be able to reset the database on tests. Mar 9, 2016 Bonobo.Git.Server.sln.DotSettings Added Resharper settings to conform to existing Bonobo style / C# lan… Feb 21, 2016 CodeFormatting.vssettings Fix #183 Add code formatting settings file Dec 14, 2014 appveyor.yml Updated version to indicate this will be release 6.0.0 Apr 24, 2016 changelog.md Updated changelog. Jun 21, 2016 contributing.md Add contributing.md #196 Jan 27, 2015 get-git.msbuild Use the git self-extractor so that 7zip isn't needed Feb 23, 2016 license.md Add copyright to license. Jun 2, 2013 readme.md Readme badge should only show the master status. Mar 19, 2016 readme.md Bonobo Git Server Thank you for downloading Bonobo Git Server. For more information please visit http://bonobogitserver.com. Prerequisites Internet Information Services 7 and higher How to Install IIS 8 on Windows 8 Installing IIS 8 on Windows Server 2012 Installing IIS 7 on Windows Server 2008 or Windows Server 2008 R2 Installing IIS 7 on Windows Vista and Windows 7 .NET Framework 4.5 Windows Vista SP2, Windows 7, Windows 8 and higher Windows Server 2008 R2, Windows Server 2008 SP2, Windows Server 2012 and higher Don't forget to register .NET framework with your IIS Run %windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_regiis.exe -ir with administrator privileges Update Before each update please read carefully the information about compatibility issues between your version and the latest one in changelog. Delete all the files in the installation folder except App_Data. Default location is C:\inetpub\wwwroot\Bonobo.Git.Server. Copy the files from the downloaded archive to the server location. Installation These steps illustrate simple installation with Windows 2008 Server and IIS 7. They are exactly the same for higher platforms (Windows Server 2012 and IIS 8.0). Extract the files from the installation archive to C:\inetpub\wwwroot Allow IIS User to modify C:\inetpub\wwwroot\Bonobo.Git.Server\App_Data folder. To do so select Properties of App_Data folder, go to Security tab, click edit, select IIS user (in my case IIS_IUSRS) and add Modify and Write permission, confirm these settings with Apply button. Convert Bonobo.Git.Server to Application in IIS Run IIS Manager and navigate to Sites -> Default Web Site. You should see Bonobo.Git.Server. Right click on Bonobo Git Server and convert to application. Check if the selected application pool runs on .NET 4.0 and convert the site. Launch your browser and go to http://localhost/Bonobo.Git.Server. Now you can see the initial page of Bonobo Git Server and everything is working. Default credentials are username: admin password: admin Frequently Asked Questions How to clone a repository? Go to the Repository Detail. Copy the value in the Git Repository Location. It should look like http://servername/projectname.git. Go to your command line and run git clone http://servername/projectname.git. How do I change my password? Click on the account settings in the top right corner. Enter new password and confirmation. Save. How to backup data? Go to the installation folder of Bonobo Git Server on the server. Default location is C:\inetpub\wwwroot\Bonobo.Git.Server. Copy the content of App_Data folder to your backup directory. If you changed the location of your repositories, backup them as well. How to change repositories folder? Log in as an administrator. Go to Global Settings. Set the desired value for the Repository Directory. Directory must exist on the hard drive. IIS User must have proper permissions to modify the folder. Save changes. Can I allow anonymous access to a repository? Edit the desired repository (or do this when creating the repository). Check Anonymous check box. Save. For allowing anonymous push you have to modify global settings. Log in as an administrator. Go to Global Settings. Check the value Allow push for anonymous repositories Save changes. I'd like to use git hooks to restrict access. How do I access the web frontend usernam? Bonobo provides the following environment variables: AUTH_USER: The username used to login. Empty if it was an anonymous operation (clone/push/pull) REMOTE_USER: Same as AUTH_USER AUTH_USER_TEAMS: A comma-separated list containing all the teams the user belongs to. Commas in teams name are escaped with a backslash. Backslashes are also escaped with a \. Example: Teams 'Editors\ Architects', 'Programmers,Testers' will become Editors\\ Architects,Programmers\,Testers. AUTH_USER_ROLES: A comma-separated list containing all the roles the user belongs to. Commas in roles are escaped with a backslash. Backslashes are also escaped with a \. AUTH_USER_DISPLAYNAME: Given Name + Surname if available. Else the username. Beware that due to the way HTTP basic authentication works, if anonymous operations (push/pull) are enabled the variables above will always be empty! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jakubgarfield/Bonobo-Git-Server"	"Bonobo Git Server for Windows is a web application you can install on your IIS and easily manage and connect to your git repositories."	"true"
"Git Tools"	"GitExtensions"	"https://github.com/gitextensions/gitextensions"	"GitExtensions is a shell extension, a Visual Studio 2008/2010/2012/2013 plugin and a standalone Git repository tool."	"null"	"null"	"null"	"null"	"null"	"http://gitextensions.github.io/"	"null"	"1708"	"169"	"683"	"GitHub - gitextensions/gitextensions: GitExtensions is a shell extension, a Visual Studio 2008/2010/2012/2013 plugin and a standalone Git repository tool. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 169 Star 1,708 Fork 683 gitextensions/gitextensions Code Issues 630 Pull requests 64 Wiki Pulse Graphs GitExtensions is a shell extension, a Visual Studio 2008/2010/2012/2013 plugin and a standalone Git repository tool. http://gitextensions.github.io/ 7,593 commits 13 branches 111 releases 167 contributors C# 97.3% C++ 1.2% Batchfile 0.5% Visual Basic 0.5% JavaScript 0.3% Python 0.1% Other 0.1% C# C++ Batchfile Visual Basic JavaScript Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags LibGit2Sharp PR_PerformanceFix addin_installer configdata feature/LibGit2SharpPerformance feature/left-panel-filter feature/left-panel feature/perMonitorDPI feature/spellchecker master release/2.48 release/2.49 revert-3238-Eben_DontSetAsDefaultForPullMenu Nothing to show v2.48.05 v2.48.04 v2.48.03 v2.48.02 v2.48 v2.48RC1 master_Net2.0 2.47.3 2.47.2 2.47.1 2.47 2.46 2.45 2.44 2.43 2.42 2.41 2.40 2.33 2.32 2.31 2.30 2.29 2.28 2.27 2.25 2.24 2.23 2.22 2.17 2.16 2.15 2.12 2.11 2.10 2.09 2.08 2.07 2.06 2.05 2.04 2.03 2.02 2.01 2.00 1.99 1.98 1.97 1.96 1.95 1.93 1.92 1.91 1.90 1.89 1.88 1.87 1.86 1.85 1.84 1.83 1.82 1.77 1.75 1.74 1.73 1.72 1.71 1.70 1.69 1.68 1.67 1.65 1.64 1.63 1.62 1.61 1.60 1.59 1.58 1.57 1.56 1.55 1.54 1.53 1.52 1.51 1.50 1.49 1.48 1.46 1.45 1.44 1.43 1.42 1.41 1.40 1.38 1.37 1.36 Nothing to show New pull request Latest commit 6b99d98 Jul 15, 2016 jbialobr TableLayout used for placing controls inside groupboxes. Permalink Failed to load latest commit information. .nuget removing Nuget.sh as it is not needed anymore Dec 15, 2014 Bin Merge pull request #2979 from cristianst85/master Apr 30, 2016 Build Adding files and string constants and IFs for Visual Studio ""2015"" 14.0. Dec 12, 2015 Externals Mono warnings fixed Nov 27, 2015 GitCommands Merge branch 'pr/n3070_hypersw' Jul 14, 2016 GitExtSshAskPass Adding files and string constants and IFs for Visual Studio ""2015"" 14.0. Dec 11, 2015 GitExtUtils New project for common utility classes. Sep 4, 2014 GitExtensions No need to popup the settings dialog if we can resolve all settings a… Jul 6, 2016 GitExtensionsDoc @ eacec96 Update docs submodule Apr 19, 2016 GitExtensionsShellEx Merge remote-tracking branch 'refs/remotes/JohnstonJ/fix-shellex-leaks' Jan 6, 2016 GitExtensionsTest Showing real line num in diff view Nov 27, 2015 GitExtensionsVSIX Update GitExtensionsVSIX to work with VS2010+ Jul 27, 2015 GitPlugin Merge branch 'refs/heads/master' into vs14 Dec 12, 2015 GitUI TableLayout used for placing controls inside groupboxes. Jul 15, 2016 Gravatar Add TreatWarningsAsErrors to all projects Jun 24, 2015 NetSpell.SpellChecker Fix warn-as-errors which make solution status red to leave only real … Dec 12, 2015 Plugins Add a popup to easy finding a TeamCity build Jul 6, 2016 ResourceManager Fixed incorrect comparison of the value in the GetEmail method May 15, 2016 Setup Fix missing 7-Zip binary when building MonoArchive May 9, 2016 TranslationApp Add TreatWarningsAsErrors to all projects Jun 24, 2015 .editorconfig Buttons on FormPull fixed Aug 5, 2014 .gitattributes Let git normalize eol May 26, 2013 .gitignore VC.db is now used instead of the .sdf Jul 15, 2016 .gitmodules GitExtensionsTest moved from submodule Aug 25, 2014 .mailmap Use GitHub email address Aug 16, 2012 .travis.yml Mono warnings fixed Nov 26, 2015 CONTRIBUTING.md Adding files and string constants and IFs for Visual Studio ""2015"" 14.0. Dec 11, 2015 CommonAssemblyInfo.cs Version changed to 2.49a1 Jan 29, 2015 CustomDictionary.xml More spelling fun Nov 8, 2010 FxCop.targets Unify code analysis properties -> can be disabled/configured globally… Oct 29, 2010 FxCopRules.ruleset Several code analyzer warnings fixed Mar 21, 2013 GitExtensions.VS2012.build.cmd Remove rakefile.rb and add instead GitExtensions.VS2010.build.cmd and… Jan 22, 2013 GitExtensions.VS2012.sln Disabled GitExtensionsVSIX in configuration ReleaseTC Nov 25, 2015 GitExtensions.VS2013.build.cmd Support VS2013 build Nov 12, 2013 GitExtensions.VS2013.sln Disabled GitExtensionsVSIX in configuration ReleaseTC Nov 24, 2015 GitExtensions.VS2015.build.cmd Adding files and string constants and IFs for Visual Studio ""2015"" 14.0. Dec 11, 2015 GitExtensions.VS2015.sln Adding files and string constants and IFs for Visual Studio ""2015"" 14.0. Dec 11, 2015 GitExtensions.settings Make dictionary setting configurable for each repository separately. Sep 3, 2014 GitExtensionsMono.Csharp.targets Simple command line to build, targets as reference Mar 29, 2013 GitExtensionsMono.sln New project for common utility classes. Sep 4, 2014 LICENSE.md CONTRIBUTING.md added Aug 24, 2014 README.md Point downloads to the same place as homepage does Oct 23, 2015 README.md Git Extensions WARNING: Repository rewritten on 2014-08-24 to reduce its size. Please clone it again. Introduction GitExtensions is a standalone Git repository tool, a Visual Studio 2008 / 2010 / 2012 / 2013 plugin and a shell extension. Current status Build status: master Mono Build status: master Translation: The build is generously hosted and run on the CodeBetter TeamCity infrastructure. Special thanks to JetBRAINS for Resharper license. Links Download page: https://github.com/gitextensions/gitextensions/releases/latest Online manual: https://git-extensions-documentation.readthedocs.org/en/latest/ Issue tracker: http://github.com/gitextensions/gitextensions/issues Mailing list: http://groups.google.com/group/gitextensions ChangeLog: ChangeLog.md Source code: http://github.com/gitextensions/gitextensions Wiki: https://github.com/gitextensions/gitextensions/wiki Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gitextensions/gitextensions"	"GitExtensions is a shell extension, a Visual Studio 2008/2010/2012/2013 plugin and a standalone Git repository tool."	"true"
"Git Tools"	"GitLink"	"https://github.com/GitTools/GitLink"	"let's users step through their code hosted on GitHub or BitBucket"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"242"	"20"	"33"	"GitHub - GitTools/GitLink: Making .NET open source accessible! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 242 Fork 33 GitTools/GitLink Code Issues 25 Pull requests 1 Pulse Graphs Making .NET open source accessible! 187 commits 2 branches 9 releases 20 contributors C# 98.9% Batchfile 1.1% C# Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop master Nothing to show 2.3.0 2.2.0 2.1.0 2.0.0 1.5.0 1.4.0 1.3.0 1.1.0 1.0.0 Nothing to show New pull request Latest commit 884dabb May 13, 2016 GeertvanHorrik Merge pull request #86 from nopara73/develop … NBitcoin, NBitcoin.Indexer and QBitNinja added to the project list Permalink Failed to load latest commit information. deployment Updated chocolatey package Dec 1, 2014 design/logo Added script to generate logos Jul 8, 2014 doc #44 Added support for relative paths ($(MSBuildProjectDirectory)\..) … Nov 9, 2014 lib Renamed GitLink.Test to GitLink.Tests Nov 6, 2014 src Fixed resource location when GitLink isn't the entry assembly Jan 7, 2016 tools/NuGet (-) Removed GitHubLink and GitVersion tools (located on build agents … Jul 8, 2014 .gitignore Added build scripts and updated NuGet packages Dec 2, 2014 CONTRIBUTING.md #57 Added contributing Jun 1, 2015 GitVersionConfig.yaml Updated GitVersion mode to ContinuousDeployment May 27, 2015 LICENSE Updated copyright Oct 13, 2014 README.md NBitcoin, NBitcoin.Indexer and QBitNinja added to the project list May 13, 2016 scripts - Build - Debug.bat Added build scripts and updated NuGet packages Dec 2, 2014 scripts - Build - Release.bat Added build scripts and updated NuGet packages Dec 2, 2014 scripts - Clean all.bat Added scripts for solution maintenance Aug 11, 2014 scripts - Restore packages.bat Added scripts for solution maintenance Aug 11, 2014 README.md GitLink GitLink let's users step through your code hosted on GitHub! Help make .NET open source projects more accessible by enabling this for your .NET projects, it's just a single additional step in your build. See the list of projects using GitLink. Important note GitLink was formerly named GitHubLink. By adding support to more Git hosting services the name seemed not covering the whole package. The old GitHubLink packages on NuGet and Chocolatey will no longer be updated or maintained. GitLink makes symbol servers obsolete which saves you both time with uploading source files with symbols and the user no longer has to specify custom symbol servers (such as symbolsource.org). The advantage of GitLink is that it is fully customized for Git. It also works with GitHub or BitBucket urls so it does not require a local git repository to work. This makes it perfectly usable in continuous integration servers such as Continua CI. Updating all the pdb files is very fast. A solution with over 85 projects will be handled in less than 30 seconds. When using GitLink, the user no longer has to specify symbol servers. The only requirement is to ensure the check the Enable source server support option in Visual Studio as shown below: Troubleshooting Source Stepping isn't working Visual Studio 2012 needs to run elevated in order to download the source server files Specify a value for Visual Studio -> Options -> Debugging -> Symbols -> Cache Symbols in this directory Source Stepping returns HTML If your repository is private, you are likely seeing the logon HTML from your git host. Log onto your git host in Internet Explorer Purge your local symbol cache Supported git providers GitLink supports the following providers out of the box (will auto-detect based on the url): BitBucket GitHub Custom Provider (custom urls) Providers currently being worked on: Assembla Beanstalk CloudForge Codebase FogCreek Planio ProjectLocker RhodeCode Unfuddle It is also possible to specify a custom url provider. Using GitLink as command line tool Using GitLink via the command line is very simple: Build the solution - in release mode with pdb files enabled Run the console application with the right command line parameters Include the PDB in your nuget package See Oren Novotony's blog post for even more detail and examples on build integration. Most simple usage This is the most simple usage available starting from 2.2.0. It will automatically determine the url and commit based on a local .git directory. GitLink.exe c:\source\catel  Running for the default branch GitLink.exe c:\source\catel -u https://github.com/catel/catel   This will use the default branch (which is in most cases master). You can find out the default branch by checking what branch is loaded by default on the GitHub page. Running for a specific branch GitLink.exe c:\source\catel -u https://github.com/catel/catel -b develop  This will use the develop branch. Running for a specific branch and configuration GitLink.exe c:\source\catel -u https://github.com/catel/catel -b develop -c debug  This will use the develop branch and the debug configuration. Running for a specific solution only Sometimes a repository contains more than 1 solution file. By default, all solutions will be processed. To only process a single solution file, use the -f option: GitLink.exe c:\source\catel -u https://github.com/catel/catel -f Catel.sln  Ignoring projects and explicitly including them When specific projects should be ignored, use the -ignore option. This option accepts a comma separated list of patterns to ignore. Each pattern is either a literal project name (case-insensitive) or a regex enclosed in slashes. For example: GitLink.exe c:\source\catel -u https://github.com/catel/catel -f Catel.sln -ignore Catel.Core.WP80,Catel.MVVM.WP80 GitLink.exe c:\source\catel -u https://github.com/catel/catel -f Catel.sln -ignore /^.+\.WP80$/,Catel.Core  In case you want to ignore most of your projects, you can explicitly -include only the projects you need - others will be ignored automatically. Same as -ignore it accepts list of patterns. For example: GitLink.exe c:\source\catel -u https://github.com/catel/catel -f Catel.sln -include Catel.Core GitLink.exe c:\source\catel -u https://github.com/catel/catel -f Catel.sln -include /Catel\..*$/,SomeOtherProject  Finally, you can set both -ignore and -include options. In this case only projects matching one of -include patterns will be taken, but if and only if they don't match one of -ignores. For example, the following command line will include only Catel.* projects, except ""Catel.Core"": GitLink.exe c:\source\catel -u https://github.com/catel/catel -f Catel.sln -include /Catel\..*$/ -ignore Catel.Core  Running for an uncommon / customized URL When working with a repository using uncommon URL you can use placeholders to specifiy where the filename and revision hash should be, use -u parameter with the custom URL GitLink.exe c:\source\catel -u ""https://host/projects/catel/repos/catel/browse/{filename}?at={revision}&raw""  The custom url will be used to fill the placeholders with the relative file path and the revision hash. Running for a custom raw content URL When working with a content proxy or an alternative git VCS system that supports direct HTTP access to specific file revisions use the -u parameter with the custom raw content root URL GitLink.exe c:\source\catel -u https://raw.githubusercontent.com/catel/catel  The custom url will be used to fill in the following pattern {customUrl}/{revision}/{relativeFilePath} when generating the source mapping. Getting help When you need help about GitLink, use the following command line: GitLink.exe -help  Logging to a file When you need to log the information to a file, use the following command line: GitLink.exe c:\source\catel -u https://github.com/catel/catel -b develop -l GitLinkLog.log  Using GitLink in code GitLink is built with 2 usages in mind: command line and code reference. Though most people will use the command line version, it is possible to reference the executable and use the logic in code. The command line implementation uses the same available API. Creating a context To link files to a Git project, a context must be created. The command line version does this by using the ArgumentParser class. It is also possible to create a context from scratch as shown in the example below: var context = new GitLink.Context(new ProviderManager()); context.SolutionDirectory = @""c:\source\catel""; context.TargetUrl = ""https://github.com/catel/catel""; context.TargetBranch = ""develop"";  It is possible to create a context based on command line arguments: var context = ArgumentParser.Parse(@""c:\source\catel -u https://github.com/catel/catel -b develop"");  Linking a context Once a context is created, the Linker class can be used to actually link the files: Linker.Link(context);  How to get There are three general ways to get GitLink: Get it from GitHub The releases will be available as separate executable download on the releases tab of the project. Get it via Chocolatey If you want to install the tool on your (build) computer, the package is available via Chocolatey. To install, use the following command: choco install gitlink  Get it via NuGet If you want to reference the assembly to use it in code, the recommended way to get it is via NuGet. Note that getting GitLink via NuGet will add it as a reference to the project How does it work The SrcSrv tool (Srcsrv.dll) enables a client to retrieve the exact version of the source files that were used to build an application. Because the source code for a module can change between versions and over the course of years, it is important to look at the source code as it existed when the version of the module in question was built. For more information, see the official documentation of SrcSrv. GitLink creates a source index file and updates the PDB file so it will retrieve the files from the Git host file handler. Projects using GitLink Below is a list of projects already using GitLink (alphabetically ordered). Catel eXpand Fluent.Ribbon GitLink MahApps.Metro NBitcoin NBitcoin.Indexer NEST and Elasticsearch.NET Orc.Analytics Orc.AutomaticSupport Orc.CommandLine Orc.Controls Orc.CrashReporting Orc.CsvHelper Orc.Feedback Orc.FileAssociation Orc.FilterBuilder Orc.LicenseManager Orc.Metadata Orc.Notifications Orc.NuGetExplorer Orc.ProjectManagement Orc.Search Orc.Sort Orc.Squirrel Orc.SupportPackage Orc.SystemInfo Orc.WorkspaceManagement Orc.Wizard Orchestra OxyPlot QBitNinja ReactiveUI Romantic Web xUnit.net xUnit.net Visual Studio Runner Are you using GitLink in your projects? Let us know and we will add your project to the list. Note that you can also create a pull request on this document and add it yourself. Icon Link by Dominic Whittle from The Noun Project Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/GitTools/GitLink"	"let's users step through their code hosted on GitHub or BitBucket"	"true"
"Git Tools"	"GitVersion"	"https://github.com/GitTools/GitVersion"	"Generate a Semantic Version Number based on the state of your Git Repository"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"463"	"51"	"165"	"GitHub - GitTools/GitVersion: Easy Semantic Versioning (http://semver.org) for projects using Git Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 51 Star 463 Fork 165 GitTools/GitVersion Code Issues 78 Pull requests 5 Pulse Graphs Easy Semantic Versioning (http://semver.org) for projects using Git http://gitversion.readthedocs.org/en/latest/ 1,853 commits 3 branches 30 releases 71 contributors C# 96.0% PowerShell 2.0% Ruby 1.3% Shell 0.4% Groff 0.1% F# 0.1% Visual Basic 0.1% C# PowerShell Ruby Shell Groff F# Visual Basic Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags AssemblyInfoFix gh-pages master Nothing to show v3.6.0 v3.5.4 v3.5.3 v3.5.2 v3.5.1 v3.5.0 v3.4.1 v3.4.0 v3.3.0 v3.2.0 v3.1.1 v3.1.0 v3.0.2 v3.0.1 v3.0.0 v3.0.0-beta.4 3.1.2 3.0.0-Beta3 3.0.0-Beta2 3.0.0-Beta1 2.0.1 2.0.0 1.3.3 1.3.2 1.3.1 1.2.1 1.2.0 1.1.1 1.1.0 1.0.0 Nothing to show New pull request Latest commit 99e363e Jul 14, 2016 gep13 committed on GitHub Merge pull request #944 from pascalberger/BuildLogging … Set verbosity to minimal for all build environments Permalink Failed to load latest commit information. docs Fix dead link Jul 14, 2016 src Added branches in default config to GitVersion init branch list Jul 10, 2016 .gitattributes Initial Cake Build Script Jul 9, 2016 .gitignore Initial Cake Build Script Jul 9, 2016 .travis.yml Don't need travis workaround anymore Jul 9, 2016 BREAKING CHANGES.md better doco Jul 26, 2015 CONTRIBUTING.md Fix link to architecture documentation Sep 20, 2015 GitVersion.yml Add support for GitVersion.yml configuration file Feb 20, 2016 LICENSE license Sep 4, 2013 README.md Added build status badge for Travis May 13, 2016 appveyor.deploy.yml Setup deploy script Jul 9, 2016 appveyor.yml Make sure tfx is installed before build and only produce artifacts on… Jul 9, 2016 build.cake Set verbosity to minimal for all build environments Jul 14, 2016 build.ps1 Initial Cake Build Script Jul 9, 2016 build.sh Initial Cake Build Script Jul 9, 2016 deploy.cake Fixed deploy script issue Jul 10, 2016 deploy.ps1 Setup deploy script Jul 9, 2016 mkdocs.yml Have build server documentation together in the documentation Oct 17, 2015 README.md GitVersion Versioning when using git, solved. GitVersion looks at your git history and works out the semantic version (semver.org) of the commit being built. Stable Pre-release Docs GitHub Release - Chocolatey (GitVersion.Portable) NuGet (GitVersionTask) NuGet (GitVersion.CommandLine) Gem Quick Links Documentation Contributing Why GitVersion Usage How it works FAQ Who is using GitVersion GitVersion in action! You are seeing: Pull requests being built as pre-release builds A branch called release-1.0.0 producing beta v1 packages Icon Tree designed by David Chapman from The Noun Project Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/GitTools/GitVersion"	"Generate a Semantic Version Number based on the state of your Git Repository"	"true"
"Git Tools"	"LibGit2Sharp"	"https://github.com/libgit2/libgit2sharp"	"LibGit2Sharp brings all the might and speed of libgit2, a native Git implementation, to the managed world of.Net and Mono."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1023"	"91"	"423"	"GitHub - libgit2/libgit2sharp: Git + .NET/Mono = ❤ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 91 Star 1,023 Fork 423 libgit2/libgit2sharp Code Issues 85 Pull requests 41 Wiki Pulse Graphs Git + .NET/Mono = ❤ http://libgit2.github.com 2,099 commits 51 branches 31 releases Fetching contributors C# 99.9% Other 0.1% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags apply-filtering-on-top-of-vNext bording/dnx cmn/checkout cmn/delete-deprecations cmn/isolate cmn/leakscontainer-string cmn/merge-analysis cmn/object-peel cmn/obsolete-repo-config-paths cmn/prettify cmn/prune cmn/ref-wrapper cmn/refspec-transform cmn/travis-csharp cmn/treedef-tests cmn/unmock cmn/update-libgit2 dahlbyk/target-object dispose-of-remotes ethomson/coreobject_visibility ethomson/inmemory_repo fluent-packbuilder ghfw-stage-exclude-ignored index-updated-api indexer jamill/clone_recurse_submodule_alt jamill/refdb jamill/signature_spike maint/v0.22 master no-diff-notify-unless-necessary ntk/arguments ntk/concurrent_delete ntk/nix_autocrlf ntk/nuget ntk/parse ntk/revparse ntk/status ntk/strongnamesign ntk/travis-csharp ntk/xunit20 pointers portable-appveyor-shiftkey portable refdb rewritten-parent therzok/blame-options therzok/mdNext therzok/ssh vNext xs-5.10-v1 Nothing to show v0.22 v0.21.1 v0.21 v0.20.2 v0.20.1 v0.20 v0.19 v0.18.1 v0.18.0 v0.17.0 v0.16.0 v0.15.0 v0.14.1 v0.14.0 v0.13.0 v0.12.0 v0.11.0 v0.10.0 v0.9.5 v0.9.0 v0.8.0 v0.7.0 v0.6.2 v0.6.1 v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 3b99abf Jul 6, 2016 ethomson committed on GitHub Merge pull request #1323 from jkoritzinsky/CherryPick-Revert-BareRepo… … …sitory  Add Cherry-pick and Revert functionality to ObjectDatabase Permalink Failed to load latest commit information. .nuget Upgrade development dependencies Jul 4, 2015 CI Use Travis' csharp language setup Apr 13, 2016 Lib GenerateNativeDll task: use file name from nuget Aug 23, 2015 LibGit2Sharp.Tests Merge pull request #1323 from jkoritzinsky/CherryPick-Revert-BareRepo… Jul 6, 2016 LibGit2Sharp Merge pull request #1323 from jkoritzinsky/CherryPick-Revert-BareRepo… Jul 6, 2016 nuget.package Use NativeBinaries package for libgit2 dependency May 16, 2015 .editorconfig .editorconfig added to repository Sep 3, 2014 .gitattributes Remove union merge driver for sln, csproj files May 30, 2015 .gitignore Ignore .vs/ folder Mar 29, 2016 .mailmap Fix .mailmap Apr 28, 2014 .travis.yml Use Travis' csharp language setup Apr 13, 2016 CHANGES.md Update changelog with new native binary information Apr 3, 2016 CONTRIBUTING.md vNext -> master for CONTRIBUTING Apr 20, 2016 LICENSE.md Copyrights: update for 2015 Jan 19, 2015 LibGit2Sharp.sln Leverage NuGet restore for development dependencies Jan 5, 2015 LibGit2Sharp.sln.DotSettings Fix Resharper private member prefix setting May 15, 2015 LibGit2Sharp.v2.ncrunchsolution Sandbox every test Jan 4, 2015 README.md README: recommend 512MB ramdisk instead of 256MB Oct 24, 2015 acknowledgments.md Add tarring capabilities Dec 13, 2013 appveyor.yml Bump version number to 0.23 (prerelease) Mar 4, 2016 build.libgit2sharp.cmd Leverage NuGet restore for development dependencies Jan 5, 2015 build.libgit2sharp.sh Use Travis' csharp language setup Apr 13, 2016 square-logo.png Add libgit2 project logo May 27, 2012 README.md LibGit2Sharp LibGit2Sharp brings all the might and speed of libgit2, a native Git implementation, to the managed world of .NET and Mono. Prerequisites Windows: .NET 4.0+ Linux/Mac OS X: Mono 3.6+ Online resources NuGet package (Requires NuGet 2.7+) Source code Troubleshooting and support Usage or programming related question? Post it on StackOverflow using the tag libgit2sharp Found a bug or missing a feature? Feed the issue tracker Announcements and related miscellanea through Twitter (@libgit2sharp) Current project status The CI builds are generously hosted and run on the Travis and AppVeyor infrastructures. Windows (x86/amd64) Linux/Mac OS X master vNext The security-oriented static code analysis is kindly run through the Coverity service. Code coverage is kindly run through Coveralls.io. Static Analysis Code Coverage vNext Quick contributing guide Fork and clone locally Create a topic specific branch. Add some nice feature. Do not forget the tests ;-) Send a Pull Request to spread the fun! More thorough information available in the wiki. Optimizing unit testing LibGit2Sharp strives to have comprehensive and robust unit test suite to insure the quality of the software and to assist new contributors and users who can use the tests as sample to jump start development. There are over one-thousand unit-tests for LibGit2Sharp, this number will only grow as functionality is added. You can do a few things to optimize running unit-tests on Windows: Set the LibGit2TestPath environment variable to a path in your development environment. If the unit-test framework cannot find the specified folder at runtime, it will fall back to the default location. Configure your anti-virus software to ignore the LibGit2TestPath path. Install a RAM disk like IMDisk and set LibGit2TestPath to use it. Use imdisk.exe -a -s 512M -m X: -p ""/fs:fat /q /v:ramdisk /y"" to create a RAM disk. This command requires elevated privileges and can be placed into a scheduled task or run manually before you begin unit-testing. Authors Code: The LibGit2Sharp contributors Logo: Jason ""blackant"" Long License The MIT license (Refer to the LICENSE.md file) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/libgit2/libgit2sharp"	"LibGit2Sharp brings all the might and speed of libgit2, a native Git implementation, to the managed world of.Net and Mono."	"true"
"Git Tools"	"NGit"	"https://github.com/mono/ngit"	"NGit is a port of JGit to C#"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"220"	"46"	"139"	"GitHub - mono/ngit: Automated jgit port to c# Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 46 Star 220 Fork 139 mono/ngit Code Issues 19 Pull requests 4 Pulse Graphs Automated jgit port to c# 299 commits 1 branch 0 releases Fetching contributors C# 99.8% Other 0.2% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 292a4e4 Feb 6, 2014 Therzok Fix ParseException losing data. Permalink Failed to load latest commit information. NGit.Test Bump ngit to the latest jgit commit Nov 14, 2012 NGit [Transport] Fixed uncaught exceptions. Sep 24, 2013 NSch Fix the csproj Jul 3, 2012 Sharpen.Test [Build] Use nunit 2.6 by default Jul 9, 2012 Sharpen.Unix [Sharpen] SetReadOnly should return bool and catch all exceptions Nov 1, 2012 Sharpen Fix ParseException losing data. Feb 6, 2014 gen [Transport] Fixed uncaught exceptions. Sep 24, 2013 .gitignore Ignore .DS_Store files too Jul 21, 2013 NGit.license.txt Updated from JGit Jun 7, 2011 NSch.license.txt Updated from JGit Jun 7, 2011 README Update master Jul 9, 2012 ngit.sln [Build] Make the 'Debug' target include Sharpen.Unix Jul 9, 2012 README ABOUT NGIT ----------  NGit is a port of JGit [1] to C#. This port is generated semi-automatically using Sharpen [2], a Java-to-C# conversion utility.  NGit provides all functionality implemented by JGit, including all repository manipulation primitives and transport protocols. SSH support is provided by a port of jsch [3], included in the project.  The project is composed by 4 libraries: - NGit: The git library. - NGit.Test: Unit tests for NGit - NSch: The port of jsch. - Sharpen: Some support classes required by the above libraries.  The code included in this project is already converted, so to use it you just have to open the ngit.sln solution and build it.  Instructions and tools for updating and regenerating the NGit code from JGit are available in the 'gen' subdirectory.  COMPILING --------- The port depends on two external libraries:   - ICSharpCode.SharpZipLib   - Mono.Security   - Mono.Posix (optional)  If you are compiling with Mono then these libraries will be available in Mono's GAC. If you are compiling on Windows using the Microsoft .NET framework you can obtain these libraries by installing the Mono Libraries package:   http://monodevelop.com/files/Windows/MonoLibraries.msi  The optional Mono.Posix assembly can be gotten by installing Gtk# for windows. The latest installer can usually be found on the monodevelop site:   http://monodevelop.com/Download  Mono.Posix is only required when building the Sharpen.Unix assembly, and this assembly is only required when running NGit on MacOS or Linux operating system. If you are only running on Windows, then you do not need to compile this assembly. Sharpen.Unix only contains support code to correctly handle symlinks on Unix based systems.  CREDITS -------  Credits on the code should go to the authors of jgit, jsch and Sharpen (see links below).  The support Sharpen library has been implemented by Lluis Sanchez (lluis@novell.com)  [1] http://eclipse.org/jgit [2] http://developer.db4o.com/Projects/html/projectspaces/db4o_product_design/sharpen.html [3] http://www.jcraft.com/jsch  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mono/ngit"	"NGit is a port of JGit to C#"	"true"
"Git Tools"	"posh-git"	"https://github.com/dahlbyk/posh-git"	"A PowerShell environment for Git"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1828"	"160"	"438"	"GitHub - dahlbyk/posh-git: A PowerShell environment for Git Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 160 Star 1,828 Fork 438 dahlbyk/posh-git Code Issues 61 Pull requests 31 Wiki Pulse Graphs A PowerShell environment for Git http://dahlbyk.github.io/posh-git/ 370 commits 9 branches 6 releases 50 contributors PowerShell 100.0% PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags GitKTabCompletion ImportDebug gh-pages gh52 gh58 gh69 libgit2 master tfs Nothing to show v0.6.1 v0.6 v0.4 v0.3 v0.2 v0.1 Nothing to show New pull request Latest commit 5ed5c05 Jun 21, 2016 dahlbyk committed on GitHub Merge pull request #287 from rkeithhill/master … Adds help topic for module. Permalink Failed to load latest commit information. chocolatey Bump version to 0.6.1 Mar 30, 2016 en-US Adds help topic for module. May 29, 2016 .gitattributes Add .gitattributes/.gitignore Feb 18, 2013 .gitignore Ignore *.nupkg Aug 28, 2015 CheckVersion.ps1 Cast the output of git --version as a String Feb 2, 2016 GitPrompt.ps1 Changed variables, string concat to expansion. May 5, 2016 GitTabExpansion.ps1 Call gitTags to support tab completion tags in 'git push/pull' May 25, 2016 GitUtils.ps1 Fix multiple Pageant keys handling Feb 14, 2016 LICENSE.txt Updated copyright to 2016 Jan 1, 2016 TortoiseGit.ps1 Update path to TortoiseProc to reflect rename. Jan 29, 2013 Utils.ps1 LocalOrParentPath checks provider name Sep 18, 2014 install.ps1 Update install to create $PROFILE before checking if git command exis… Jan 26, 2012 posh-git.psd1 Update the exports to include the repo status call for prompts. May 24, 2016 posh-git.psm1 Update the exports to include the repo status call for prompts. May 24, 2016 profile.example.ps1 Remove DefaultForegroundColor reset from prompt May 16, 2015 readme.md Update readme status explanation with settings properties May 4, 2016 readme.md posh-git A set of PowerShell scripts which provide Git/PowerShell integration Prompt for Git repositories The prompt within Git repositories can show the current branch and the state of files (additions, modifications, deletions) within. Tab completion Provides tab completion for common commands when using git. E.g. git ch<tab> --> git checkout Usage See profile.example.ps1 as to how you can integrate the tab completion and/or git prompt into your own profile. Prompt formatting, among other things, can be customized using $GitPromptSettings, $GitTabSettings and $TortoiseGitSettings. Note on performance: displaying file status in the git prompt for a very large repo can be prohibitively slow. Rather than turn off file status entirely, you can disable it on a repo-by-repo basis by adding individual repository paths to $GitPromptSettings.RepositoriesInWhichToDisableFileStatus. Installing via PsGet If you have PsGet installed just run: Install-Module posh-git  Installing (manual) Pre-requisites: Verify you have PowerShell 2.0 or better with $PSVersionTable.PSVersion. PowerShell 3.0 is preferred as 2.0 support is deprecated. Verify execution of scripts is allowed with Get-ExecutionPolicy (should be RemoteSigned or Unrestricted). If scripts are not enabled, run PowerShell as Administrator and call Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Confirm. Verify that git can be run from PowerShell. If the command is not found, you will need to add a git alias or add %ProgramFiles(x86)%\Git\cmd (or %ProgramFiles%\Git\cmd if you're still on 32-bit) to your PATH environment variable. Then do this: git clone https://github.com/dahlbyk/posh-git.git cd posh-git .\install.ps1 . $PROFILE  And you're set! The Prompt PowerShell generates its prompt by executing a prompt function, if one exists. posh-git defines such a function in profile.example.ps1 that outputs the current working directory followed by an abbreviated git status: C:\Users\Keith [master ≡]>  By default, the status summary has the following format: [{HEAD-name} S +A ~B -C !D | +E ~F -G !H W]  [ (BeforeText) {HEAD-name} is the current branch, or the SHA of a detached HEAD Cyan means the branch matches its remote Green means the branch is ahead of its remote (green light to push) Red means the branch is behind its remote Yellow means the branch is both ahead of and behind its remote S represents the branch status in relation to remote (tracked origin) branch ≡ = The local branch in at the same commit level as the remote branch (BranchIdenticalStatus) ↑ = The local branch is ahead of the remote branch, a 'git push' is required to update the remote branch (BranchAheadStatus) ↓ = The local branch is behind the remote branch, a 'git pull' is required to update the local branch (BranchBehindStatus) ↕ = The local branch is both ahead and behind the remote branch, a rebase of the local branch is required before pushing local changes to the remote branch (BranchBehindAndAheadStatus) ABCD represent the index; | (DelimText); EFGH represent the working directory + = Added files ~ = Modified files - = Removed files ! = Conflicted files As in git status, index status is dark green and working directory status is dark red W represents the status of the working folder ! = There are untracked changes in the working tree (LocalStagedStatus) ~ = There are staged changes in the working tree waiting to be committed (LocalWorkingStatus) None = There are no uncommitted or unstaged changes to the working tree (LocalDefault) ] (AfterText) The symbols and surrounding text can be customized by the corresponding properties on $GitPromptSettings. For example, a status of [master ≡ +0 ~2 -1 | +1 ~1 -0] corresponds to the following git status: # On branch master # # Changes to be committed: #   (use ""git reset HEAD <file>..."" to unstage) # #        modified:   this-changed.txt #        modified:   this-too.txt #        deleted:    gone.ps1 # # Changed but not updated: #   (use ""git add <file>..."" to update what will be committed) #   (use ""git checkout -- <file>..."" to discard changes in working directory) # #        modified:   not-staged.ps1 # # Untracked files: #   (use ""git add <file>..."" to include in what will be committed) # #        new.file  Based on work by: Keith Dahlby, http://solutionizing.net/ Mark Embling, http://www.markembling.info/ Jeremy Skinner, http://www.jeremyskinner.co.uk/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dahlbyk/posh-git"	"A PowerShell environment for Git"	"true"
"Graphics"	"Oxyplot"	"https://github.com/oxyplot/"	"OxyPlot is a cross-platform plotting library for.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"OxyPlot · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization OxyPlot A cross-platform plotting library for .NET http://oxyplot.org/ Repositories People 0 Filters Sources Forks C# 627 353 oxyplot A cross-platform plotting library for .NET Updated Jul 15, 2016 C# 9 62 documentation-examples examples used in the documentation Updated Jun 15, 2016 C# 5 5 oxyplot-xamarin OxyPlot for Xamarin.* Updated Jun 14, 2016 Python 5 19 docs documentation Updated May 27, 2016 CSS 5 4 oxyplot.github.io web-site Updated May 26, 2016 C# 0 1 oxyplot-xwt OxyPlot for Xwt Updated Apr 22, 2016 C# 0 1 oxyplot-contrib OxyPlot user contributions Updated Apr 22, 2016 C# 0 0 oxyplot-fiddle A simple fiddle for OxyPlot Updated Mar 2, 2016 XML 1 4 xamarin-component OxyPlot Xamarin Component Updated Feb 17, 2015 C# 1 3 icon-generator generates the icon Updated Sep 26, 2014 0 People This organization has no public members. You must be a member to see who’s a part of this organization. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/oxyplot/"	"OxyPlot is a cross-platform plotting library for.NET"	"true"
"Graphics"	"OpenTK"	"http://www.opentk.com/"	"The Open Toolkit is an advanced, low-level C# library that wraps OpenGL, OpenCL and OpenAL"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"509"	"97"	"223"	"GitHub - opentk/opentk: This Open Toolkit library is a fast, low-level C# wrapper for OpenGL and OpenAL. It can be used standalone or inside a GUI on Windows, Linux, Mac, Android and iOS. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 97 Star 509 Fork 223 opentk/opentk Code Issues 91 Pull requests 20 Wiki Pulse Graphs This Open Toolkit library is a fast, low-level C# wrapper for OpenGL and OpenAL. It can be used standalone or inside a GUI on Windows, Linux, Mac, Android and iOS. http://www.opentk.com 6,523 commits 20 branches 13 releases Fetching contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags 1.1 android-bug18575 android develop es31 evdev func_not_found ios master modules nativewindow net45 nuget_deps scrollfix sdl_winforms warnings win_xinput x11_scrollfix xamarin xinput2 Nothing to show 1.1-rc2 1.1-rc1 1.1-b4 1.1-b3 1.1-b2 1.1-b1 1.1-4 1.1-4c 1.1-4b 1.1-3 1.1-2 1.1-1 1.1-0 Nothing to show New pull request Latest commit 253337a Jul 15, 2016 cra0zy committed on GitHub Merge pull request #413 from varon/remove_old_projects … Remove example and legacy code. Permalink Failed to load latest commit information. Dependencies [Bind] Replace copies of cecil with nuget links Oct 11, 2015 Documentation Fixed MINIMAL and NO_SYSDRAWING compilation Aug 12, 2015 Installers Updated OpenTK.Next.GLControl dependency version and name May 26, 2016 Source Removed OpenTK Samples Jul 15, 2016 .gitattributes [Build] Test build OpenTK with mono 3.2.6 and 2.10.11 Feb 24, 2014 .gitignore Ignore *.pidb files from MonoDevelop 2.x Dec 25, 2013 .travis.yml [travis] Remove mono 3.2.8 and 2.10.8 builds Oct 18, 2015 OpenTK.Android.sln Initial support for Android/iOS Jun 8, 2016 OpenTK.iOS.sln Initial support for Android/iOS Jun 8, 2016 OpenTK.sln Removed OpenTK Examples Jul 15, 2016 OpenTK.snk Added keyfile and strong-named all projects. Oct 4, 2010 README.md [readme] Update Tutorials for OpenGL link Mar 28, 2016 README.md OpenTK The Open Toolkit library is a fast, low-level C# binding for OpenGL, OpenGL ES and OpenAL. It runs on all major platforms and powers hundreds of apps, games and scientific research. Use OpenTK to add cross-platform 3d graphics, audio, compute and haptics to your C# application. Integrate it into your existing user interface or use it standalone without any external dependencies. Project website: http://www.opentk.com/ Official git repository: https://github.com/opentk/opentk Features Create cutting-edge graphics with OpenGL 4.4 and OpenGL ES 3.0 Spice up your GUI with 3d acceleration Improve your code flow with strong types and inline documentation Write once run everywhere OpenTK is available for Windows, Linux, Mac OS X, *BSD, SteamOS, Android and iOS. It can be used standalone or integrated into a GUI (Windows.Forms, WPF, GTK+, Qt, VTK, ...) Download binaries or NuGet packages Instructions The simplest way to use OpenTK in your project is to install the NuGet package. Note what installing NuGet package will add reference to OpenTK.dll, but OpenTK.dll.config will not be copied to the project output directory automatically, so you need to add it to your project and then enable the ""Copy to Output Directory"" option (as in step 3 below). Alternatively, download the OpenTK binaries and: Copy OpenTK.dll and OpenTK.dll.config to your project directory Use ""Add reference"" to add OpenTK.dll as a project reference Use ""Add files"" to add OpenTK.dll.config to your project, and enable the ""Copy to Output Directory"" option. To build OpenTK from source, simply double-click OpenTK.sln and build through your IDE. Alternatively, open a command prompt and type: git clone https://github.com/opentk/opentk   # Download source code from git cd opentk                                    # Enter the source directory msbuild /p:Configuration=Release OpenTK.sln  # Build on .Net (Windows) xbuild  /p:Configuration=Release OpenTK.sln  # Build on Mono (Linux / Mac OS X)  News OpenTK 1.1.4c was released on 24 July 2014. This is a hotfix release that improves stability on Mac OS X. Moreover, it synchronizes the GamePad configuration database with SDL 2.0.4 and fixes an invalid GUID introduced in 1.1.4b. OpenTK 1.1.4 was released on 21 July 2014. This release resolves a number of identified issues, adds experimental support for Linux/KMS and synchronizes the OpenGL and OpenGL ES bindings with the July 2014 Khronos specifications. Changelog: Fixed a memory leak in OpenGL functions accepting a string array. Fixed an issue where MakeCurrent() might fail on Linux/X11 when using the Nvidia closed-source drivers. Fixed an issue where GameWindow might remain open on Linux/X11 after calling Close() or Dispose(). Fixed a potential crash on Mac OS X systems without hardware acceleration (e.g. virtual machines). Fixed function parameters for the OES_byte_coordinates extension. Fixed an issue where OpenTK would always perform a full rebuild even when a partial rebuild could work. Fixed all compilation warnings on VS2013 and Mono 3.4.0. Improved OpenGL and OpenGL ES documentation on 'count' parameters. New platform: Linux/KMS. You can now run OpenTK applications on a Linux terminal without an X11 display server. New OpenGL ES extensions: ANDROID_extension_pack_es31a OpenTK 1.1.4 is backwards compatible with 1.1.3. Users of previous versions are strongly encouraged to upgrade. Known issues The SDL2 backend has a number of limitations compared to the native platform backends. In particular, SDL2 does not support: OpenTK.GLControl. OpenTK will automatically switch to a native platform backend instead. DisplayDevice.ChangeResolution() without a fullscreen INativeWindow. Switching between WindowBorder.Fixed and WindowBorder.Resizable. High-resolution mouse input. Additionally, it is limited to a single keyboard and mouse device. OpenTK.Input.GamePad.SetVibration is currently not implemented. This API will be implemented in a future release. Contributing Install git and a C# IDE (see requirements section below) Fork the develop branch of https://github.com/opentk/opentk Commit your changes in small, incremental steps with clear descriptions When ready, issue a Pull Request (PR) against the develop branch of https://github.com/opentk/opentk For details on coding style and best practices, refer to https://github.com/opentk/opentk/wiki/Contributing Some areas we could really use your help: Tutorials for OpenGL 3.x and 4.x. Inspiration here New platforms: Native Client (NaCL) Blackberry Wayland Mir WinRT (via ANGLE) New features: Multitouch Force feedback Improved joystick support (HID backend for Windows, Linux) Further ideas for improvement are always welcome! Requirements Windows (XP/Vista/7/8), Linux, Mac OS X, *BSD, SteamOS, Android or iOS For graphics, OpenGL drivers or a suitable emulator, such as ANGLE For audio, OpenAL drivers or OpenAL Soft To develop desktop applications: Visual Studio, Xamarin Studio, MonoDevelop or SharpDevelop To develop Android applications: Xamarin Studio or the Xamarin Extensions for Visual Studio To develop iOS applications: Xamarin Studio and XCode Documentation Your favorite IDE will display inline documentation for all OpenTK APIs. Additional information can be found in the OpenTK Manual and in the opentk/Documentation/ folder. Technical documentation about the implementation of OpenTK can be found in the Technical Wiki. Need Help? Post your questions at the OpenTK forums. Report bugs at https://github.com/opentk/opentk/issues License The Open Toolkit is distributed under the permissive MIT/X11 license and is absolutely free. http://www.opentk.com/project/license API compatibility OpenTK 1.1.4 is backwards compatible with 1.1.3. OpenTK 1.1.3 is backwards compatible with 1.1.2. OpenTK 1.1.2 is backwards compatible with 1.1.1. OpenTK 1.1.1 is backwards compatible with 1.1.0. OpenTK 1.1.0 is not backwards compatible with 1.0. Most projects will be able to upgrade without any modifications. Projects using the following signatures will have to implement the suggested changes: Namespace OpenTK.Graphics.OpenGL Change signature: GL.MultiDrawArrays (out -> ref) GL.Amd.DeletePerfMonitors (out -> ref) Change signature (may cause crash): GL.Apple.ObjectPurgeable (returns AppleObjectPurgeable instead of IntPtr) GL.Ext.SeparableFilter2D GL.Ibm.EdgeFlagPointerList (bool[] -> bool*[]) GL.NV.TransformFeedbackVaryings (string[] -> int[]) Change return type: GL.WaitSync (returns WaitSyncFlags instead of ArbSync) Namespace OpenTK.Graphics.ES11 Change return type: GL.GetError (ErrorCode instead of All) Change ref parameters to out: GL.GenBuffers GL.GenTextures GL.GetBoolean GL.GetBufferParameter GL.GetClipPlane GL.GetClipPlanex GL.GetFixed GL.GetFloat GL.GetInteger GL.GetLight GL.GetLightx GL.GetMaterial GL.GetMaterialx GL.GetTexEnv GL.GetTexEnvx GL.GetTexParameter GL.GetTexParameterx GL.Oes.GenFramebuffers GL.Oes.GetClipPlane GL.Oes.GetClipPlanex GL.Oes.GetFixed GL.Oes.GetFramebufferAttachmentParameter GL.Oes.GetLightx GL.Oes.GetMaterialx GL.Oes.GetRenderbufferParameter GL.Oes.GetTexEnvx GL.Oes.GetTexGen GL.Oes.GetTexGenx GL.Oes.GetTexParameterx GL.Oes.QueryMatrixx GL.NV.GenFences GL.NV.GetFence Change namespace: GL.ClipPlanefIMG -> GL.Img.ClipPlane GL.DisableDriverControlQCOM -> GL.Qcom.DisableDriverControl Namespace OpenTK.Graphics.ES20.GL Change signature (may cause crash): GL.NV.GetFence now takes three parameters instead of two Change ref parameters to out: GL.GetActiveAttrib GL.GetActiveUniform GL.GetAttachedShaders GL.GetProgramInfoLog GL.GetShaderInfoLog GL.GetShaderSource GL.Amd.GetPerfMonitorCounterData GL.Amd.GetPerfMonitorCounters GL.Amd.GetPerfMonitorCounterString GL.Amd.GetPerfMonitorGroup GL.Amd.GetPerfMonitorGroupString GL.Amd.SelectPerfMonitorCounters Change namespace: GL.DisableDriverControlQCOM -> GL.Qcom.DisableDriverControl GL.GetDriverControlsQCOM -> GL.Qcom.GetDriverControls GL.GetDriverControlStringQCOM -> GL.Qcom.GetDriverControlString See also Delta Engine, a high-level, open-source game engine. MonoGame, an open-source, cross-platform implementation of XNA. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/opentk/opentk"	"The Open Toolkit is an advanced, low-level C# library that wraps OpenGL, OpenCL and OpenAL"	"true"
"Graphics"	"NGraphics"	"https://github.com/praeclarum/NGraphics"	"NGraphics is a cross-platform library for rendering vector graphics on.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"264"	"42"	"58"	"GitHub - praeclarum/NGraphics: NGraphics is a cross platform library for rendering vector graphics on .NET. It provides a unified API for both immediate and retained mode graphics using high quality native renderers. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 42 Star 264 Fork 58 praeclarum/NGraphics Code Issues 30 Pull requests 5 Pulse Graphs NGraphics is a cross platform library for rendering vector graphics on .NET. It provides a unified API for both immediate and retained mode graphics using high quality native renderers. 276 commits 1 branch 5 releases 9 contributors C# 99.5% F# 0.5% C# F# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.4.0 v0.3.1 v0.3.0 v0.2.1 0.1.10 Nothing to show New pull request Latest commit 5a809fc Feb 10, 2016 praeclarum Merge pull request #50 from stevetsang/dotted_stippled_line_implement… … …ation  Implemented dotted/stipped line drawing functionality Permalink Failed to load latest commit information. Documentation Fix typos Mar 30, 2015 NGraphics.Editor Build 0.4.0 Dec 30, 2015 NGraphics.Test Make TextPlatform explicit Jan 11, 2016 NGraphics implemented dotted/stipped line drawing functionality for Net, iOS an… Feb 8, 2016 Platforms Moved dash reset logic into SetPen function when there is no dash pat… Feb 9, 2016 TestResults Make MeasureText report ascent and descent info Jan 11, 2016 .gitignore Stubbed out Windows Xaml support Mar 29, 2015 Contributing.md Add Contributing document Dec 30, 2015 LICENSE Add LICENSE Feb 2, 2015 NGraphics.Net.sln Fix version numbers and configs for Windows Mar 30, 2015 NGraphics.nuspec Upgraded to SharpDX 3.0.0 Jan 11, 2016 NGraphics.sln Build 0.4.0 Dec 30, 2015 README.md Fix typos Jun 4, 2015 README.md NGraphics NGraphics is a cross platform library for rendering vector graphics on .NET. It provides a unified API for both immediate and retained mode graphics using high quality native renderers. You can use it for cross platform rendering of UI widgets. Or as the basis for graphically rich interactive views. Or maybe you just want an easy way to import and export SVG and PNG files. Either way, I'm sure you'll find something interesting here. Installation Install NGraphics from nuget. Getting Started The most important class is ICanvas. Uses canvases to render vector graphics (rectangles, ellipses, paths) to ""something"". Sometimes canvases are views on the screen, sometimes they are images -- you never really know. We can draw a little house easily enough: var canvas = Platforms.Current.CreateImageCanvas (new Size (100), scale: 2);  var skyBrush = new LinearGradientBrush (Point.Zero, Point.OneY, Colors.Blue, Colors.White); canvas.FillRectangle (new Rect (canvas.Size), skyBrush); canvas.FillEllipse (10, 10, 30, 30, Colors.Yellow); canvas.FillRectangle (50, 60, 60, 40, Colors.LightGray); canvas.FillPath (new PathOp[] {      new MoveTo (40, 60),     new LineTo (120, 60),     new LineTo (80, 30),     new ClosePath () }, Colors.Gray);  canvas.GetImage ().SaveAsPng (GetPath (""Example1.png"")); Platforms.Current.CreateImageCanvas is just our tricky way to get a platform-specific ICanvas that we can rendered on. IImageCanvases are special because you can call GetImage to get an image of the drawing when you are done. We use a scale of 2 to render retina graphics and keep this README looking good. Paths are drawn using standard turtle graphics. Pens and Brushes When drawing, you have a choice of pens to stroke the object with or brushes to fill it with. Anyway. Pens can be any color and any width. var canvas = Platforms.Current.CreateImageCanvas (new Size (120*5, 120), scale: 2);  canvas.Translate (20, 20); for (var i = 0; i < 5; i++) {     canvas.DrawEllipse (         new Rect (new Size (80)),         pen: Pens.DarkGray.WithWidth (1 << i),         brush: Brushes.LightGray);     canvas.Translate (120, 0); }  canvas.GetImage ().SaveAsPng (GetPath (""PenWidths.png"")); Brushes can be solid colors or trippy multi-color gradients (linear and radial!) There is no multi-layering within elements, so you will have to draw them a few times with different brushes to get complex effects. Colors What would a graphics library be without a Color class? Well, this one is a struct. Colors are light-weight, have fun with them. Normally you will use the RGBA constructor of color: new Color (r, g, b, a) where each value can range from 0 to 1. If you're not normal, you might prefer the web notation: Color.FromRGB (0xBEEFEE). Retained Mode Sometimes it's nice to hang onto the graphical elements themselves so that you can change them later, or perhaps cache them from an expensive-to-compute draw operation, or maybe you just want to sing to them. Whatever your needs, NGraphics exposes the following graphical elements: Rectangles are best used for drawing rectangles. Ellipses can also be used to draw ovals and circles. Paths can draw anything that you can imagine, and more. Lines, curves, turtles, they're all for the taking. var circle = new Ellipse (new Rectangle (Point.Zero, new Size (10)));  ICanvas canvas = ...; circle.Draw (canvas);  Platforms Android (Xamarin) using Android.Graphics CanvasCanvas wraps a Android.Graphics.Canvas iOS (Xamarin) using CoreGraphics CGContextCanvas wraps a CoreGraphics.CGContext Mac (Xamarin) using CoreGraphics CGContextCanvas wraps a CoreGraphics.CGContext .NET 4.5 using System.Drawing GraphicsCanvas wraps a System.Drawing.Graphics Windows Store 8.1 using Direct2D RenderTargetCanvas wraps a SharpDX.Direct2D1.RenderTarget Windows Phone 8.1 using Direct2D RenderTargetCanvas wraps a SharpDX.Direct2D1.RenderTarget Editor To speed up the process of drawing with code, NGraphics ships with a code editor and live preview for OS X. Download the editor from the Releases page. Any C# file that can be independently compiled can be used. The advantage of this editor over Xamarin Studio is that you can work on your drawings without having to wait for your whole project to compile and run. Simply compile and run the project NGraphics.Editor or download the editor to get started. Examples For more examples, check out the images in the TestResults directory and the test code that generated them. Icon The NGraphics icon can be rendered using a simple repeating path: var size = new Size (64); var canvas = Platforms.Current.CreateImageCanvas (size, scale: 2); canvas.SaveState (); canvas.Scale (size); canvas.Translate (1 / 8.0, 0);  var p = new Path (); p.MoveTo (0, 1); p.LineTo (0, 0); p.LineTo (0.5, 1); p.LineTo (0.5, 0);  var colors = new [] {     ""#DCDCDD"",     ""#C5C3C6"",     ""#46494C"",     ""#4C5C68"",     ""#68A5E2"", }; foreach (var c in colors) {     p.Pen = new Pen (c, 1 / 4.0);     p.Draw (canvas);     canvas.Translate (1 / 16.0, 0); }  canvas.GetImage ().SaveAsPng (GetPath (""Icon.png"")); Cats NGraphics also supports scaling cats: var img = GetResourceImage (""cat.png""); var canvas = Platform.CreateImageCanvas (new Size (100, 200), transparency: true); canvas.DrawImage (img, new Rect (new Size (50))); canvas.DrawImage (img, new Rect (new Point (50, 0), new Size (50))); canvas.DrawImage (img, new Rect (new Point (0, 50), new Size (50, 150))); canvas.DrawImage (img, new Rect (new Point (50, 50), new Size (50, 150))); canvas.GetImage ().SaveAsPng (GetPath (""ImageCanvas.Cats"")); License The MIT License (MIT) See LICENSE for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/praeclarum/NGraphics"	"NGraphics is a cross-platform library for rendering vector graphics on.NET"	"true"
"GUI"	"MahApps.Metro"	"https://github.com/MahApps/MahApps.Metro"	"Toolkit for creating Metro styled WPF apps"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2479"	"322"	"1182"	"GitHub - MahApps/MahApps.Metro: A toolkit for creating Metro / Modern UI styled WPF apps. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 322 Star 2,479 Fork 1,182 MahApps/MahApps.Metro Code Issues 102 Pull requests 11 Wiki Pulse Graphs A toolkit for creating Metro / Modern UI styled WPF apps. http://mahapps.com 3,881 commits 10 branches 23 releases 123 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags ContextMenuHelper Glow-Window-Resizing-Bug SplitButton-Selector dev-v2.0.0 dev-vc2013 develop gh-pages headers master ribbon-menu-support Nothing to show 1.3.0-alpha164 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.1.2 1.1.1 1.1.0 1.0.0 0.14 0.13.1 0.13 0.12.1 0.12 0.11 0.10.1 0.9 0.8 0.7.1 0.6 0.5 0.4 Nothing to show New pull request Latest commit eff4521 Jul 12, 2016 punker76 Uniform is the way... Permalink Failed to load latest commit information. .github Update PULL_REQUEST_TEMPLATE.md Feb 23, 2016 .paket paket 2.64.3 May 16, 2016 Lib Update System.Windows.Interactivity.dll Nov 29, 2013 Licenses Delete panorama license Jan 21, 2014 MahApps.Metro.Resources dev 1.3.0 Jun 17, 2016 MahApps.Metro Collapse dialog title if it's empty #2498 Jul 9, 2016 Mahapps.Metro.Tests TC test for HotKeyBox test Jun 24, 2016 Tools add PackIconEntypo Jun 15, 2016 Visual Studio Templates update templates Nov 26, 2014 docs Collapse dialog title if it's empty #2498 Jul 8, 2016 paket-files/ControlzEx/ControlzEx/src/ControlzEx add KeyboardNavigationEx May 16, 2016 samples Uniform is the way... Jul 12, 2016 .editorconfig add default MahApps .editorconfig Sep 2, 2015 .gitattributes Because I'm an idiot and started merging pending PRs before this, it … Dec 22, 2012 .gitbugtraq [bugtraq] Fix issue where C#6 is seen as issue-id Jan 20, 2016 .gitignore Adding JetBrains Rider Mar 30, 2016 LICENSE I hate git Dec 28, 2012 MahApps.Metro.XAMLMagic.vssettings no Grid reordering Feb 9, 2016 MahApps.Metro.XAMLStyler.vssettings no Grid reordering Feb 9, 2016 MahApps.Metro.sln remove old release build stuff Mar 2, 2016 MahApps.Metro.sln.DotSettings Merge remote-tracking branch 'origin/develop' into feature/TimePicker May 18, 2016 mahapps.metro.logo2.png Fixed up localisation issue (. vs ,) - thanks @Soldierboy_P4F Nov 9, 2011 paket.dependencies add KeyboardNavigationEx May 16, 2016 paket.lock add KeyboardNavigationEx May 16, 2016 readme.md Update readme.md Jun 15, 2016 readme.md MahApps.Metro A toolkit for creating metro-style WPF applications. Lots of goodness out-of-the box. Want to say thanks? Hit the ⭐ Star ⭐ button, thx Documentation You can read the documentation on the web site: http://mahapps.com You can also help keep the documentation up to date by submitting a pull request on the mahapps.github.com repository. If you're unfamiliar with GitHub Pages, the help guides here are a good place to start. Release Notes current v1.2.4 all other Icons MahApps.Metro has a Material and Modern Icon pack for better usage (currently only available via pre-release). <metro:PackIconMaterial Kind=""EmoticonCool"" /> <metro:PackIconModern Kind=""FuturamaFry"" /> You can still download the old resources via Nuget package. Contributing to this project Did you stumble upon a bug? Before reporting it to us, please check out the FAQ to see if it is actually a bug. If you can not find anything related to your issue, feel free to report it to us in the issue tracker. If you've improved MahApps.Metro and think that other people would enjoy it, submit a pull request. Anyone and everyone is welcome to contribute. Please take a moment to review the guidelines for contributing. Bug reports Feature requests Pull requests You need Visual Studio 2015 Community Edition to build the solution (comes with #2330), so we can use the new C# 6 features. You can use the dev-vc2013 branch if you still have the Visual Studio 2013, but no new feature or fix will be added in this branch by me™. Styles CheckBox and RadioButton styles adapted from styles created by Brian Lagunas of Infragistics. Missing a control? If you're looking for a control that we don't have, we have some friends who have made MA.M compatible controls. Check them out: Loading indicators by @100GPing100 MahApps.Metro.SimpleChildWindow A simple child window for MahApps.Metro Dragablz Tearable tab control for WPF, which includes docking, tool windows and MDI. http://dragablz.net MaterialDesignInXamlToolkit Google Material Design in XAML & WPF, for C# & VB.Net http://materialdesigninxaml.net A short How To Or, how to create a simple MahApps.Metro Application and a Window... <Application x:Class=""WpfApplication.App""              xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""              xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""              StartupUri=""MainWindow.xaml"">   <Application.Resources>     <ResourceDictionary>       <ResourceDictionary.MergedDictionaries>         <ResourceDictionary Source=""pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml"" />         <ResourceDictionary Source=""pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml"" />         <ResourceDictionary Source=""pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml"" />         <ResourceDictionary Source=""pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml"" />         <ResourceDictionary Source=""pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml"" />       </ResourceDictionary.MergedDictionaries>     </ResourceDictionary>   </Application.Resources> </Application> <controls:MetroWindow x:Class=""WpfApplication.MainWindow""                       xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""                       xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""                       xmlns:controls=""http://metro.mahapps.com/winfx/xaml/controls""                       Title=""MainWindow""                       Height=""600""                       Width=""800"">   <Grid>      <!-- your content -->    </Grid> </controls:MetroWindow> namespace WpfApplication {   public partial class MainWindow : MetroWindow   {     public MainWindow()     {       InitializeComponent();     }   } } Awesome tools which MahApps can use Visual Studio Templates MahApps.Metro have 4 simple templates to start with the awesome MahApps.Metro library. WPF MahApps.Metro Application (.NET4) WPF MahApps.Metro Application (.NET45) Visual Basic WPF MahApps.Metro Application (.NET45) Window MahApps.Metro (WPF) Download this Templates.zip (templates are created with VS 2013) and extract it to your user template folder: c:\Users\<USER>\Documents\Visual Studio 201x\  Now you can choose the templates at the New Project dialog. Breaking Changes For version 0.11.3.1 For version 0.14 to 1.0.0 Licence Microsoft Public License (Ms-PL) This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software. Definitions The terms ""reproduce,"" ""reproduction,"" ""derivative works,"" and ""distribution"" have the same meaning here as under U.S. copyright law. A ""contribution"" is the original software, or any additions or changes to the software. A ""contributor"" is any person that distributes its contribution under this license. ""Licensed patents"" are a contributor's patent claims that read directly on its contribution. Grant of Rights (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create. (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software. Conditions and Limitations (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks. (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically. (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software. (D) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license. (E) The software is licensed ""as-is."" You bear the risk of using it. The contributors give no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MahApps/MahApps.Metro"	"Toolkit for creating Metro styled WPF apps"	"true"
"GUI"	"Callisto"	"https://github.com/timheuer/callisto"	"A control toolkit for Windows 8 XAML applications. Contains some UI controls to make it easier to create Windows UI style apps for the Windows Store in accordance with Windows UI guidelines."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"341"	"60"	"124"	"GitHub - timheuer/callisto: A control toolkit for Windows 8 XAML applications.  Contains some UI controls to make it easier to create Windows UI style apps for the Windows Store in accordance with Windows UI guidelines. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 60 Star 341 Fork 124 timheuer/callisto Code Issues 50 Pull requests 7 Wiki Pulse Graphs A control toolkit for Windows 8 XAML applications. Contains some UI controls to make it easier to create Windows UI style apps for the Windows Store in accordance with Windows UI guidelines. http://timheuer.com/blog/archive/2012/05/31/introducing-callisto-a-xaml-toolkit-for-metro-apps.aspx 210 commits 3 branches 0 releases 8 contributors C# 99.4% Shell 0.6% C# Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev gh-pages master Nothing to show Nothing to show New pull request Latest commit e92ca88 Jun 28, 2014 timheuer Merge pull request #249 from timheuer/dotMorten/BuildWarningFixes … Reduce build warnings Permalink Failed to load latest commit information. Tools/nuget VS Toolbox Icons; removed 2 step build process in batch files Oct 24, 2013 Win8-locked More design time for Dialog Oct 23, 2013 src Ignore obsolete warning Jun 27, 2014 .gitattributes Added xaml file to .gitattributes Aug 12, 2012 .gitignore added ignore for new VSIX dir Oct 24, 2013 CallistoLogo.png Fixing bad delete...argh May 11, 2012 CallistoMoon.png Fixing bad delete...argh May 11, 2012 License.txt Build changes due to XBF Issue Oct 23, 2013 SDKManifest.xml Designer changes to support re-templating and new icons for toolbox Oct 24, 2013 build.bat VS Toolbox Icons; removed 2 step build process in batch files Oct 24, 2013 changelog.md More design time for Dialog Oct 24, 2013 contributing.md Revising versions in deployable packages Mar 28, 2013 readme.md Update readme.md May 30, 2014 readme.md Callisto What Is It? Callisto is a library for use in Windows Store XAML applications (aka Metro style apps). The XAML framework in Windows.UI.Xaml is great, but has some functionality that isn't provided in-the-box in a few controls and APIs. Callisto provides added functionality on top of the XAML UI framework for Windows. You can also read more under Frequently Asked Questions. Documentation for each control is always an 'in progress' thing (contributions welcome) but is on the Wiki page here. What's In It? So far Callisto includes: Rating - a ratings control for Metro UI LiveTile - an in-app tile experience to give you animated or 'live' tiles Tilt - an effect to provide the tilt experience when clicked on edges/corners OAuth helpers - a set of helpers to create OAuth 1.0 signatures/headers for those sites that hate OAuth 2.0 :-) BooleanToVisibilityConverter - a converter to well, convert boolean to visibility, very common use LengthToBooleanConverter - a converter to examine a string length to convert to boolean (simple validation helper) RelativeTimeConverter - a converter to show time as relative string, i.e., 'about an hour ago' Extensions - some extension method helpers (i.e., bind html content to a WebView) What is in the plan (could always use the help): DatePicker and TimePicker - providing a globalized time/date picker control in Metro style Ratings - providing a rating control for Metro style Pivot - a UI interface for providing ""tabbed"" interface in a Metro style way Note the following have been deprecated in the most recent release as Windows 8.1 introduces proper controls for these: Flyout - a primitive that includes positioning and 'light dismiss' logic Menu - primarily to be used from AppBar, contains the base for providing, well, a Menu MenuItem - an item for a menu, including separators and contains the command point for the menu item SettingsFlyout - an item to create a custom settings pane UI How To Install It? There are two ways you can install the control. Visual Studio Extension SDK Install as an Extension SDK via the Visual Studio Gallery - available within VS as well as downloading from the gallery directly NuGet You can get the control via NuGet if you have the extension installed for Visual Studio or via the PowerShell package manager. This control is published via NuGet at Callisto. How To Use It? Controls are individually documented with examples for usage on the Wiki Documentation. I found an Issue Great, please log a bug so that it can be tracked. Credits and Acknowledgements Tim Heuer (@timheuer) - for the initial conception of the toolkit. Morten Nielsen (@dotMorten) - core contributor Unni Ravindranathan (@unnir) - For all the great guidance and always pushing for better designer integration! Moon logo from The Noun Project which is a great source for Metro style iconography Open Source Project Credits Some of the code represented in the toolkit is forks/ports of other Open Source libraries. Where used, their license is reprsented in the code files. Silverlight Toolkit - for providing the base of many ported concepts/code. Licensed under Ms-PL RestSharp - the OAuth helper file is a fork from the RestSharp project which uses this internally for some authenticators. Licensed under Apache 2.0 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/timheuer/callisto"	"A control toolkit for Windows 8 XAML applications. Contains some UI controls to make it easier to create Windows UI style apps for the Windows Store in accordance with Windows UI guidelines."	"true"
"GUI"	"ObjectListView"	"http://objectlistview.sourceforge.net/cs/index.html"	"ObjectListView is a C# wrapper around a.NET ListView. It makes the ListView much easier to use and teaches it some new tricks"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ObjectListView — ObjectListView 2.9.1 documentation ObjectListView .NET ListView on caffeine, guarana and steroids. Home What’s New? Features Getting Started Cookbook FAQ Blog Download Version 2.9.1 (2016-05-05) Discussion Samples Search   ObjectListView¶ ObjectListView is a C# wrapper around a .NET ListView. It makes the ListView much easier to use and teaches it some neat new tricks. Larry Wall, the author of Perl, once wrote that the three essential character flaws of any good programmer were sloth, impatience and hubris. Good programmers want to do the minimum amount of work (sloth). They want their programs to run quickly (impatience). They take inordinate pride in what they have written (hubris). ObjectListView encourages the vices of sloth and hubris, by allowing programmers to do far less work but still produce great looking results. I’m too impatient! Just show me what it can do!¶ Here is an example of what your ListView can look like with a few callbacks in place: Put pretty graphics, buttons and descriptions on your list, to make your users love your application: The TreeListView similarly make a tree structure look beautiful: Need to print a report? ListViewPrinter effortlessly produces reports from an ObjectListView: With a little work, you can even pretend to live in the halls of cool with something like this: Without wasting my time, just tell me what it does!¶ OK, here’s the bullet point feature list: Automatically transforms a list of model objects into a fully functional ListView, including automatically sorting and grouping rows. Easily edit cell values. Easily use drag and drop. Supports all ListView views (report, list, large and small icons). Supports owner drawing, including rendering animated graphics and images stored in a database. Supports automatic grouping. Supports sophisticated group formatting, including collapsible groups (Vista and later only). Columns can be fixed-width, have a minimum and/or maximum width, or be space-filling (Column Widths) Displays a “list is empty” message when the list is empty (obviously). Supports fancy tooltips for cells and for headers. Supports buttons in cells. Supports checkboxes in any column as well as tri-state checkboxes. Supports hierarchical checkboxes in TreeListView. Supports alternate rows background colors. Supports custom formatting of rows. Supports searching (by typing) on any column. Supports image and text overlays as well as arbitrary decorations. Supports hyperlinks. Supports hot tracking with text font/color changes and with decorations. Supports column header formatting including checkboxes, word wrapping and vertical text. Supports groups on virtual lists (Vista and later only). Supports transluscent hot item and selection like Vista even on XP. Supports filtering, including the very common iTunes-like text filtering. Supports animations on cells, row, and the entire list. Supports column selection through right-click on header. Supports Excel-like column filtering. Supports native background images with all their inherent limitations. Supports disabled rows Supports automatic updates via standard INotifyPropertyChanged. There are several flavours of ObjectListView: FastObjectListView can build a list of 10,000 objects in less than 0.1 seconds. TreeListView control combines an expandable tree structure with the columns of a ListView. There are data binding versions of each flavour. Seriously, after using an ObjectListView, you will never go back to using a plain ListView. OK, I’m interested. What do I do next?¶ The source code to ObjectListView can be downloaded here. You can also download a demonstration, documentation and unit tests on the same page. After that, you might want to look at the Getting Started and the Learning to cook sections. Please make sure you have read and understood these sections before asking questions in the Forum. There is also an article describing the ObjectListView at CodeProject. At some point, you will want to do something with an ObjectListView and it won’t be immediately obvious how to make it happen. After dutifully scouring the Getting Started and the Learning to cook sections, you decide that it is still not obvious. The Forum section is the place to find all your as-yet- unasked questions. It may even be possible that you might find some undocumented features in the code (also known as bugs). These “features” can be reported here and can be tracked on the project’s Issue Tracker. If you would like to ask me a question or suggest an improvement, you can contact me here: phillip.piper@gmail.com. Technical details¶ I’ve kept a technical blog documenting some of the efforts that were required to solve some of the problem encountered within the ObjectListView. Enabling disabling (20 May 2014) Creating hierarchical checkboxes (26 February 2014) Flickering on virtual lists and the .NET bug that causes it Lifting up the downtrodden ListViewGroup How can I make a rearrangeable TreeListView? Surely a little bug can’t cause too much trouble? This long article talks about the problems and solutions encountered when developing the overlay feature of v2.2. This article talks about the problems of trying to use a standard ToolTip class on a ListView. Samples¶ This page of samples shows what can be done with a little effort. Use it for inspiration. What people have said about ObjectListView¶ When thinking about using some new code, it’s always interesting to hear what others have said about it. I have to ask you where I should send the check! Your work is absolutely amazing! You have managed to create a control so powerful, so simple, and so useful that it boggles the mind. I can see this control in every forms application I create from this day forward. Thank you very much for sharing this. —thund3rstruck Thank you very much, this is a great piece of work. ... It is easy to work with, fast and it looks great! I will replace all lists and in my application with it, and I will have a lot of fun doing this :) —Jurgen Hansen I have been using your tool for over a year now and it is absolutely incredible. It has solved almost all of my problems with the listview and I can’t thank you enough for sharing this. —Statoon4200 This is a very impressive piece of work. I can now dispense with the existing .net list/grid controls and just use this control, plus get so much more easy to use functionality. Outstanding. Thanks! —Werner Neumann Just want to say thanks for such an amazing control. I’m blown away with the level and thought put into the documentation (as a developer, I personally hate documenting things). So thanks, awesome stuff :) —SourceForge reviewer Just a small THANK YOU for taking the time to code something as good as ObjectListView. It works extremely well, and is an absolute joy to work with, even for us beginners! Much appreciated. —Inztigator Easily the best ListView out there for C# —ezgar This is awesome. Definently one of the better articles here at CodeProject. Just gotta say ‘thanks for sharing this with the rest of the world’... —michael9000 I have been watching this control since 2007 and just checked the new features you’ve added recently and in the last couple of months. This has gotta be the best list control out there. You’ve done a brilliant job with this and I’m sure many others appreciate your work. Well done and keep it up! —Hakan I second that. This should be brought into the next version of the framework, it’s brillant work! —id2008 Superb job. Thanks for sharing this fantastic control. —Hamed Mosavi Never think your work goes unappreciated. This is the best project on CodeProject, by far. —dyster_ ObjectListView has got to be one of the slickest controls out there - simple, quick and powerful. —jake I’m using ObjectListView since one year now and it’s certainly one of the best ListView control I know. —Lionel Schiepers I wanted to say that your control, your code, and your support on the forums, has been one of the best experiences I have had with working with someone elses’ product. Great job man, and very nice programming. —Mike Coffey (in personal email) Thanks for this control, which I now use everywhere I can! It works great. —William Sauron Intelligent and Intuitive. Thanks. —Mike Hankey (4th Marines HQ) One of the guys over at the MSDN magazine is known as the Datagrid (ASP.Net) whisperer. You must be the Listview whisperer. DAMN! This is a sexy bunch of controls! —Jonathan C Dickinson What can I say? I have a file verification program, and I just replaced the listview with yours, and 150 lines of code was made obsolete, and very few lines were added, it also improved performance massively. The light shine upon you, MS should send you some sort of gift for removing the largest headache .NET ever contrived. —Johan Sonesson I’ve got to say, your code is amazing. It’s the only time in my life that I’ve looked at code and thought it was better than mine. Thanks for your great work (on many levels) and for sharing it. —Brian Perrin (in personal email) I think you should rename the control description to: “A ListView on Steroids”. Keep up the excellent work. —Michael (mpgjunky) Nice features added, especially the fast build speed and hidden columns, keep up the good work on this control! well done. —cinamon A VERY BIG “Thank you” for this wonderful control - it’s easy to handle once you got the idea, very good structured coding, just a jewel. It became soon one of my favourites. —Metze Great control. This solves a lot of problems. Thank you very much —merlin981 Thanks for a GREAT control, and also for your help —doncp I use this control in almost every project now.. amazing job. Thanks! —Chris Micali I’ve never posted before but this is so good, that I must say something... This is awesome!! Keep the good work! —OverlordHammer Thank you for opening your hard work to the community, it saved me hours or coding plus I learnt a few new techniques from your code. —cliftonarms Those years of experience and innate talent certainly show in this code; it’s a pleasure to read. Thanks much for a great example. —Steve Shaffer Very nice article and worthy of bookmarking —Paul Conrad That’s exactly what I have been finding for days. Thanks!!! —vcleak Future directions¶ v3.0 will be a big change. Until now, each version has strove to maintain strict backwards compatibility. v3.0 will not have this as a strict goal. It will be backwards compatible where possible, but will drop properties, events and methods where they do not fit within the new scheme. In particular, features that were a moment of design weakness (I’m looking at you AlwaysGroupByColumn and your friends) will disappear. Support for .NET 2.0 will be dropped. .NET 4.0 will become the minimum. Use IEnumerable whenever possible. SelectedObjects, CheckedObjects, AddObjects(), InsertObjects() RefreshObjects(), RemoveObjects(), and CopyObjectsToClipboard() will all be changed to use IEnumerable. This is with a view to using LINQ in future versions. All styling (cell, header, tool tips) will be unified, and will include custom renderers and hit detection. General cleanup/refactor There is no definite timetable for this version. Site contents¶ What’s New? Features of an ObjectListView Getting Started Frequently Asked Questions Learning to cook Recipe - Cell Editing Recipe - Owner Drawn Recipe - Drag and Drop Recipe - Overlays Filtering Downloads Technical Blog Change Log Samples Sparkle Animations ©2006-2016, Phillip Piper. | Powered by Sphinx 1.3.1 & Alabaster 0.7.6 | Page source"	"null"	"null"	"ObjectListView is a C# wrapper around a.NET ListView. It makes the ListView much easier to use and teaches it some new tricks"	"true"
"GUI"	"DockPanelSuite"	"http://dockpanelsuite.com/"	"The Visual Studio inspired docking library for.NET WinForms"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"492"	"153"	"303"	"GitHub - dockpanelsuite/dockpanelsuite: DockPanel Suite - The Visual Studio inspired docking library for .NET WinForms Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 153 Star 492 Fork 303 dockpanelsuite/dockpanelsuite Code Issues 62 Pull requests 3 Wiki Pulse Graphs DockPanel Suite - The Visual Studio inspired docking library for .NET WinForms 292 commits 13 branches 17 releases Fetching contributors C# 99.9% Batchfile 0.1% C# Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags development_2.3 development_2.3@52 development_2.4 development_2.5 development_3.0 docfx gh14 gh18 gh59 gh92 master setup vs2013blue Nothing to show Release_2.11_Alpha1 Release_2.10 Release_2.9 Release_2.8 Release_2.7 Release_2.6 Release_2.5_RC1 Release_2.4 Release_2.3.1 Release_2.3 Release_2.3_RC2 Release_2.3_RC1 Release_2.2 Release_2.1 Release_2.0 Release_2.0_RC2 Release_2.0_RC1 Nothing to show New pull request Latest commit 1694b47 Jul 11, 2016 lextm Updated README.md. Permalink Failed to load latest commit information. .nuget Updated NuGet to latest. Jul 9, 2016 DockSample Added theme NuGet package definitions. Created a 2.10.0 Beta 1 release. Oct 11, 2015 Tests Fixed unit testing. Jul 11, 2016 Tests2 Fixed unit testing. Jul 11, 2016 Tests3 Fixed unit testing. Jul 11, 2016 WinFormsUI Fixed unit testing. Jul 11, 2016 .gitattributes Normalized line endings Mar 24, 2013 .gitignore Added theme NuGet package definitions. Created a 2.10.0 Beta 1 release. Oct 11, 2015 README.md Updated README.md. Jul 11, 2016 WinFormsUI.Docking.sln Updated NuGet to latest. Jul 9, 2016 all.bat Merge branch 'master' into development_3.0 Dec 13, 2014 appveyor.yml Added appveyor.yml. Jul 11, 2016 clean.bat Update build scripts to point to new solution Nov 27, 2013 debug.bat Update build scripts to point to new solution Nov 27, 2013 license.txt Normalized line endings Mar 24, 2013 nuget.bat Updated NuGet to latest. Jul 9, 2016 release.bat Update build scripts to point to new solution Nov 27, 2013 release.net40.bat Update build scripts to point to new solution Nov 27, 2013 README.md DockPanel Suite DockPanel Suite - The Visual Studio inspired docking library for .NET WinForms For more details, check out http://dockpanelsuite.com. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dockpanelsuite/dockpanelsuite"	"The Visual Studio inspired docking library for.NET WinForms"	"true"
"GUI"	"AvalonEdit"	"https://github.com/icsharpcode/AvalonEdit"	"The WPF-based text editor component used in SharpDevelop"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"303"	"64"	"128"	"GitHub - icsharpcode/AvalonEdit: The WPF-based text editor component used in SharpDevelop Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 64 Star 303 Fork 128 icsharpcode/AvalonEdit Code Issues 41 Pull requests 5 Wiki Pulse Graphs The WPF-based text editor component used in SharpDevelop 834 commits 2 branches 3 releases 16 contributors C# 96.8% HTML 3.0% Other 0.2% C# HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 5.0.3 5.0.2 5.0.1 Nothing to show New pull request Latest commit 697ff0d Jun 19, 2016 dgrunwald C# syntax highlighting: support string interpolation syntax Permalink Failed to load latest commit information. Documentation Fix some XML documentation and adjust .shfbproj for SHFB 2014. Nov 14, 2014 ICSharpCode.AvalonEdit.Sample Enforce tabs for indentation. Dec 13, 2015 ICSharpCode.AvalonEdit.Tests Use '$(SolutionDir)\packages' so that NUnit NuGet package can be found Dec 25, 2015 ICSharpCode.AvalonEdit C# syntax highlighting: support string interpolation syntax Jun 19, 2016 packages Notes on the build and publish process of the AvalonEdit NuGet packages May 19, 2016 .editorconfig Add .editorconfig and appveyor.yml Dec 12, 2015 .gitattributes remove dependencies on NRefactory Apr 10, 2014 .gitignore Fix some XML documentation and adjust .shfbproj for SHFB 2014. Nov 14, 2014 ChangeLog.txt AvalonEdit 5.0.1-pre release Jun 28, 2014 ICSharpCode.AvalonEdit.sln introduce configurations as platforms: Net35, Net40 and WithNRefactory Apr 12, 2014 README.md Update README.md May 19, 2016 appveyor.yml Enforce tabs for indentation. Dec 13, 2015 README.md AvalonEdit AvalonEdit is the name of the WPF-based text editor in SharpDevelop 4.x ""Mirador"" and beyond. avalonedit.net Downloads AvalonEdit is available as NuGet package. Usage details, documentation and more can be found on the AvalonEdit homepage License AvalonEdit is distributed under the MIT License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/icsharpcode/AvalonEdit"	"The WPF-based text editor component used in SharpDevelop"	"true"
"GUI"	"XWT"	"https://github.com/mono/xwt"	"A cross-platform UI toolkit for creating desktop applications with.NET and Mono"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"758"	"120"	"165"	"GitHub - mono/xwt: A cross-platform UI toolkit for creating desktop applications with .NET and Mono Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 120 Star 758 Fork 165 mono/xwt Code Issues 86 Pull requests 35 Wiki Pulse Graphs A cross-platform UI toolkit for creating desktop applications with .NET and Mono 2,645 commits 30 branches 0 releases 56 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.1 add-toolkit-defaults alternate_build_config appveyor cairo-leak-fix corrado/ref-count-vector-data custom-image-to-bitmap cycle6 didMoveRename documentation expander-rewrite feature_richtextview_text_selection fix_exception_casting_windowbackend fixLeak gh-pages gtkmac-native-dialog icons image-loader listview-focus master mixed-toolkit monodevelop-5.7-branch no-eventbox node-ref size-allocation-fixes surfaces test-fixes virttreelistview wpf-fix xtookit-images Nothing to show Nothing to show New pull request Latest commit 6bd63c5 Jul 15, 2016 mkrueger committed with Therzok [Xwt] Optimized hsl color conversion. (#611) … Allocating arrays is not needed. Permalink Failed to load latest commit information. Test index on master: c769c7a Add GtkMac bridge (MonoMac hosted in Gtk) pr… Sep 27, 2012 TestApps Implemented folder selector May 31, 2016 Testing Reference the 64bit version of Xamarin.Mac Mar 16, 2016 Xwt.Gtk.Mac Add overridable that allows intercepting backend creation Jun 14, 2016 Xwt.Gtk.Windows Fixup release configs Sep 21, 2015 Xwt.Gtk [Xwt] Add HasCompletions property to TextEntry Jun 21, 2016 Xwt.Mac Add overridable that allows intercepting backend creation Jun 14, 2016 Xwt.WPF [Wpf] Add missing HasCompletions implementation Jun 23, 2016 Xwt.XamMac [Xwt] Add HasCompletions property to TextEntry Jun 21, 2016 Xwt [Xwt] Optimized hsl color conversion. (#611) Jul 15, 2016 docs/en Add API stubs Nov 12, 2012 .gitignore Update gitignore Apr 4, 2013 BuildHelpers.targets [Mac] Remove unused build code May 27, 2014 LICENSE.txt Add license file Jun 21, 2014 Makefile Add API stubs Nov 12, 2012 README.markdown Add Calendar Widget Jul 2, 2015 Xwt.sln [build] Remove more Mac projects from Windows build Mar 2, 2015 appveyor.yml Set AppVeyor master version to 0.2.x Feb 23, 2015 xwt.snk Sign XWT Mar 29, 2012 README.markdown This document is an introduction to XWT, a cross-platform UI toolkit for creating desktop applications. If you have any question about XWT or do you want to contribute a discussion group for XWT is available here: http://groups.google.com/group/xwt-list Introduction Xwt is a new .NET framework for creating desktop applications that run on multiple platforms from the same codebase. Xwt works by exposing one unified API across all environments that is mapped to a set of native controls on each platform. This means that Xwt tends to focus on providing controls that will work across all platforms. However, that doesn't mean that the functionality available is a common denominator of all platforms. If a specific feature or widget is not available in the native framework of a platform, it will be emulated or implemented as a set of native widgets. Xwt can be used as a standalone framework to power the entire application or it can be embedded into an existing host. This allows developers to develop their ""shell"" using native components (for example a Ribbon on Windows, toolbars on Linux) and use Xwt for specific bits of the application, like dialog boxes or cross platform surfaces. Xwt works by creating an engine at runtime that will map to the underlying platform. These are the engines that are supported on each platform: Windows: WPF engine, Gtk engine (using Gtk#) MacOS X: Cocoa engine (using MonoMac) and Gtk engine (using Gtk#) Linux: Gtk engine (using Gtk#) This means for example that you can write code for Xwt on Windows that can be hosted on an existing WPF application (like Visual Studio) or an existing Gtk# application (like MonoDevelop). Or on Mac, you can host Xwt on an existing Cocoa/MonoMac application or you can host it in our own MonoDevelop IDE. Getting Started Open the Xwt.sln with MonoDevelop (or VisualStudio on Windows) and build the solution. You should end up with the libraries that you can use in your project and a couple of sample applications. Using Xwt in your app Based on your platform and the backend that you want to use, you need to pick the libraries that you want to use in your project. Windows+WPF: Xwt.dll + Xwt.WPF.dll (requires WPF) Windows+Gtk: Xwt.dll + Xwt.Gtk.dll (requires Gtk#) Linux+Gtk: Xwt.dll + Xwt.Gtk.dll (requires Gtk#) Mac+Gtk: Xwt.dll + Xwt.Gtk.dll (requires Gtk#) Mac+Cocoa: Xwt.dll + Xwt.Mac.dll (requires MonoMac.dll) Hello World To write your first application, create an empty .NET project in your favorite language in MonoDevelop or Visual Studio and reference the Xwt.dll library. This is the only library that you need to reference at compile time. This is the simplest Xwt program you can write: using System; using Xwt;  class XwtDemo {     [STAThread]     static void Main ()     {         Application.Initialize (ToolkitType.Gtk);         var mainWindow = new Window (){             Title = ""Xwt Demo Application"",             Width = 500,             Height = 400         };         mainWindow.Show ();         Application.Run ();         mainWindow.Dispose ();     } }  You use the Application.Initialize() method to get the backend initialized. In this example we are using the Gtk backend. If you want to use another backend, just change the parameter provided to the Initialize() method. Also make sure the appropiate backend DLL is available in the application directory. Then we create an instance of the Window class, this class exposes two interesting properties, MainMenu which can be used to set the Window's main menu and ""Content"" which is of type ""Widget"" and allows you to add some content to the window. Finally, the Application.Run method is called to get the UI events processing going. Widget Class Hierarchy You will be using widgets to create the contents for your application. Xwt.Widget is the abstract base class from which all the other components are created. Some Widgets can contain other widgets, these are container widgets, and in Xwt those are Canvas, Paned, HBox, VBox and Table. The first two implement a box layout system, while the last one implements a Table layout that allows widgets to be attached to different anchor-points in a grid. The layout system uses an auto-sizing system similar to what is availble in Gtk and HTML allowing the user interface to grow or shrink based on the contents of the childrens on it. XwtComponent Menu MenuItem Widget Box (Container) HBox (Container) VBox (Container) Button MenuButton ToggleButton Calendar Canvas (Container) Checkbox ComboBox Frame ImageView Label ListView NoteBook Paned (Container) HPaned (Container) VPaned (Container) ProgressBar ScrollView Separator VSeparator HSeparator Table (Container) TextEntry TreeView WindowFrame Window Dialog For example, the following attaches various labels and data entries to a Table: t = new Table (); t.Attach (new Label (""One:""), 0, 1, 0, 1); t.Attach (new TextEntry (), 1, 2, 0, 1); t.Attach (new Label (""Two:""), 0, 1, 1, 2); t.Attach (new TextEntry (), 1, 2, 1, 2); t.Attach (new Label (""Three:""), 0, 1, 2, 3); t.Attach (new TextEntry (), 1, 2, 2, 3);  The Application Class The Application class is a static class that provides services to run your application. Initialization The Application.Initialize API will instruct Xwt to initialize its binding to the native toolkit. You can pass an optional parameter to this method that specifies the full type name to load as the backend. For example, you can force the initialization of the backend to be specifically Gtk+ or specifically MonoMac based on MacOS. This is currently done like this: Application.Initialize (""Xwt.GtkBackend.GtkEngine, Xwt.Gtk, Version=1.0.0.0"");  or: Application.Initialize (""Xwt.Mac.MacEngine, Xwt.Mac, Version=1.0.0.0"");  As you saw from the Hello World sample, toplevel windows are created by creating an instance of the ""Xwt.Window"" class. This class exposes a couple of properties that you can use to spice it up. The MainMenu property is used to control the contents of the application menus while the ""Content"" property is used to hold a Widget. Timers The Application.TimeoutInvoke method takes a timespan and a Func action method and invokes that method in the main user interface loop. If the provided function returns true, then the timer is restarted, otherwise the timer ends. Background Threads It is very common to perform tasks in the background and for those tasks in the background to later update the user interface. The Xwt API is not thread safe, which means that calls to the Xwt API must only be done from the main user interface thread. This is a trait from the underlying toolkits used by Xwt. If you want a background thread to run some code on the main loop, you use the Application.Invoke (Action action) method. The provided ""action"" method is guaranteed to run on the main loop. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mono/xwt"	"A cross-platform UI toolkit for creating desktop applications with.NET and Mono"	"true"
"GUI"	"Gtk#"	"https://github.com/mono/gtk-sharp"	"Gtk# is a Mono/.NET binding to the cross platform Gtk+ GUI toolkit and the foundation of most GUI apps built with Mono"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"203"	"72"	"91"	"GitHub - mono/gtk-sharp: Gtk# is a Mono/.NET binding to the cross platform Gtk+ GUI toolkit and the foundation of most GUI apps built with Mono Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 72 Star 203 Fork 91 mono/gtk-sharp Code Pull requests 13 Pulse Graphs Gtk# is a Mono/.NET binding to the cross platform Gtk+ GUI toolkit and the foundation of most GUI apps built with Mono http://www.mono-project.com/GtkSharp 3,666 commits 12 branches 84 releases 43 contributors C# 91.5% Perl 2.5% C 1.9% Makefile 1.8% XSLT 0.8% JavaScript 0.7% Other 0.8% C# Perl C Makefile XSLT JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Mainsoft.System.Data atsushi-200810 atsushi gtk-sharp-1-0-branch gtk-sharp-1-9-branch gtk-sharp-2-10-branch gtk-sharp-2-12-branch gtk-sharp-2-468-branch jeroen-gtk-2-4 master messaging-2008 mkestner Nothing to show start rel-1-9-0 rel-1-0 rel-1-0-4 rel-1-0-2 rel-0-99 rel-0-98 rel-0-97 rel-0-96 rel-0-93 rel-0-92 rel-0-91 rel-0-18 rel-0-17 rel-0-16 rel-0-15 rel-0-14 rel-0-13 rel-0-12 rel-0-11 rel-0-10 rel-0-9 rel-0-8 rel-0-7 rel-0-6 rel-0-5 rel-0-4 rel-0-3 rel-0-1 JEROEN_GTK24BRANCHPOINT GTK_SHARP_1_0_5 2.99.3 2.99.2 2.99.1 2.99.0 2.12.29 2.12.28 2.12.27 2.12.26 2.12.25 2.12.24 2.12.23 2.12.22 2.12.21 2.12.12 2.12.10 2.12.9 2.12.8 2.12.7 2.12.6 2.12.5 2.12.4 2.12.3 2.12.2 2.12.1 2.12.0 2.11.91 2.11.90 2.10.4 2.10.3 2.10.2 2.10.1 2.10.0 2.9.0 2.8.5 2.8.4 2.8.0 2.7.90 2.7.1 2.4.0_2.6.0 2.3.92_2.5.92 2.3.91_2.5.91 2.3.90_2.5.90 2.x.3 2.x.2 2.x.1 1.9.5_2.5.5 1.9.3.1 1.9.3 1.9.2 1.0.10 1.0.9 1.0.7 1.0.6 Nothing to show New pull request Latest commit 0f1a3e0 May 19, 2016 Therzok Merge pull request #142 from nacho/wip/pango-1-36-8 … Update pango API to version 1.36.8 Permalink Failed to load latest commit information. atk Update atk to version 2.14.0 Apr 16, 2016 audit Convert some source files to Unix line endings May 25, 2015 cairo Fixed a typo Nov 12, 2015 doc Convert some source files to Unix line endings May 25, 2015 gdk Update gdk-pixbuf to version 2.30.8 Apr 29, 2016 generator Fix exit codes in code generator Mar 27, 2016 gio Update glib API to version 2.42.2 Apr 30, 2016 glib glib: Check for self-assignment of Opaque.Raw property Sep 21, 2014 gtk Optimize TreeStore.AppendValues Mar 27, 2016 gtkdotnet gdk: Fix dll name and use a const for all DllImports in custom code May 4, 2014 msi build: Require GLib 2.32 or above Aug 10, 2014 pango Update pango API to version 1.36.8 May 1, 2016 parser parser: ignore GDK_PIXBUF_VAR Apr 29, 2016 sample Fix ambiguous references May 7, 2016 sources Update pango API to version 1.36.8 May 1, 2016 .gitattributes Add a .gitattributes file to have git keep CRLF endings in *.sln files May 25, 2015 .gitignore .gitignore: add autotools' `compile` May 29, 2014 AUTHORS release: Update AUTHORS for 2.99.1 Sep 22, 2013 AssemblyInfo.cs.in Remove ClassInitializer attributes. Feb 9, 2011 COPYING Replaced COPYING with LGPL2-only license Nov 17, 2012 ChangeLog.old Archive Changelog as Changelog.old Oct 14, 2012 HACKING Update various bits of documentation in READMEs and HACKING Oct 14, 2012 Makefile.am Update the Windows installer infrastructure for GTK+ 3 May 24, 2014 Makefile.include build: Fix opaquetest build on Windows May 24, 2014 NEWS release: Fix indentation of NEWS Jun 6, 2014 README Simplify instructions about choosing the installation prefix Nov 2, 2013 README.generator silly typo Apr 16, 2006 TODO Update TODO Oct 14, 2012 autogen.sh build: Make libtoolize quiet, it's not that interesting May 24, 2014 configure.ac build: Bump mono dependency to 3.2.8 May 10, 2015 gapi.xsd generator: Add support for fixed length arrays as method parameters Apr 21, 2014 gtk-sharp.sln Add an audit.csproj to the MonoDevelop solution Mar 29, 2013 gtk-sharp.snk Add gtk-sharp.snk Jun 8, 2004 policy.config.in 2005-09-21 Mike Kestner <mkestner@novell.com> Sep 22, 2005 README The Gtk# website can be found at: http://www.mono-project.com/GtkSharp  Gtk# is a .NET language binding for the GTK+ toolkit and assorted GNOME libraries. Gtk# is free software, licensed under the GNU LGPL.  Building & Installing Gtk#: ---------------------------      Install the gtk-3 development headers first. On Debian, this can be done using:     apt-get install libgtk-3-dev      The build is the traditional:          ./configure         make         make install      You may want to consider using configure's prefix option to install     Gtk# using the same prefix as Mono.  That way all of your .NET assemblies     get placed in the same place, and you don't need to do any extra ""configuring""     to make it so mono (and mint) can find your assemblies.  In other words,     doing something like:          ./configure --prefix=`pkg-config --variable=prefix mono`         make         make install      If you are compiling from GIT, you will need libtool and the auto* tools     and will need to replace the configure above with autogen.sh.   The gui-thread-check profiler module. -------------------------------------      Since version 3 of gtk# a profiler called ""gui-thread-check"" is included as     part of the install for debugging purposes. (It's located in the subfolder     gtk/gui-thread-check .)      This profiler module can be used to check if a GTK# application is trying to     invoke gtk or gdk methods from a thread which is not the main GUI thread.      To use it, run your application with the command:          mono --profile=gui-thread-check yourapp.exe      If the profiler is properly installed, you'll see an output like this:          *** Running with gui-thread-check ***         *** GUI THREAD INITIALIZED: 2861676352      While the application is running, if the profiler detects a non-gui thread     invoking gtk methods, it will print a warning message together with a     stack trace. For example:          *** GTK CALL NOT IN GUI THREAD: Widget.gtk_widget_get_parent            Widget.get_Parent            SourceEditorWidget.SetLastActiveEditor            SourceEditorWidget.get_TextEditor            SourceEditorWidget.get_Document            SourceEditorWidget.HandleParseInformationUpdaterWorkerThreadDoWork            BackgroundWorker.OnDoWork            BackgroundWorker.ProcessWorker   Discussion & Support: ---------------------      A mailing list for Gtk# discussion is available.      You can subscribe to the mailing list by visiting:          http://lists.ximian.com/mailman/listinfo/gtk-sharp-list      And following the instructions (on that page) to subscribe.     Messages are posted on this mailing list by sending them to:          gtk-sharp-list@ximian.com      (The mailing list requires you to subscribe in order to post     messages.)      An archive of this mailing list can be found at:          http://lists.ximian.com/archives/public/gtk-sharp-list/      Also, people can get help with and discuss Gtk# on IRC via the     #gtk# or #mono channels on the irc.gnome.org IRC server.      People looking for general help with C# should visit the     #c# channel on irc.freenode.net IRC server.   Developers: -----------      For developers wishing to ""get started"" with Gtk#, they are encouraged     to read the Mono Hand Book:          http://www.mono-project.com/Monkeyguide   Hackers: --------      For those who wish to help with the development of Gtk#, they should     read the file named: HACKING.      Also, anyone wishing to hack Gtk# is encouraged to join the Gtk#     mailing list. And to visit the #gtk# IRC channel (on irc.gnome.org).  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mono/gtk-sharp"	"Gtk# is a Mono/.NET binding to the cross platform Gtk+ GUI toolkit and the foundation of most GUI apps built with Mono"	"true"
"GUI"	"MaterialDesignInXamlToolkit"	"https://github.com/ButchersBoy/MaterialDesignInXamlToolkit"	"Toolkit for creating Material styled WPF apps"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1679"	"211"	"311"	"GitHub - ButchersBoy/MaterialDesignInXamlToolkit: Google's Material Design in XAML & WPF, for C# & VB.Net. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 211 Star 1,679 Fork 311 ButchersBoy/MaterialDesignInXamlToolkit Code Issues 83 Pull requests 7 Wiki Pulse Graphs Google's Material Design in XAML & WPF, for C# & VB.Net. http://materialdesigninxaml.net 871 commits 6 branches 10 releases 26 contributors C# 93.7% JavaScript 6.1% Other 0.2% C# JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags UWP gh-pages master net40 release snackbar Nothing to show v2.0.0 v1.5.0 v1.4.1 v1.4.0 v1.3.2 v1.3.1 v1.3.0 v1.2.0 v1.1.0 v1.0 Nothing to show New pull request Latest commit 6f43d13 Jul 12, 2016 ButchersBoy build ver Permalink Failed to load latest commit information. .nuget treeview Sep 9, 2015 .paket paket auto-restore on Jun 30, 2016 MahMaterialDragablzMashUp Merge branch 'More-paket-stuff' of https://github.com/punker76/Materi… Jul 5, 2016 MainDemo.Uwp toggle switch UWP [skip ci] Sep 27, 2015 MainDemo.Wpf paket auto-restore on Jun 30, 2016 MaterialDesignColors.Wpf.Tests paket auto-restore on Jun 30, 2016 MaterialDesignColors.Wpf * freeze palette brushes May 12, 2016 MaterialDesignThemes.MahApps nuget stuff [skip ci] Jul 5, 2016 MaterialDesignThemes.Uwp toggle switch UWP [skip ci] Sep 27, 2015 MaterialDesignThemes.Wpf.Tests paket auto-restore on Jun 30, 2016 MaterialDesignThemes.Wpf Improved background detection for combobox popup fixes #442 Jul 12, 2016 mdresgen * freeze palette brushes May 12, 2016 paket-files update Dragablz Jun 30, 2016 web fix transition speed on list toggle Jun 10, 2016 .gitattributes Added .gitattributes & .gitignore files Feb 7, 2015 .gitignore basic start of palette builder web, move a file arounf [ci skip] Mar 21, 2015 CONTRIBUTING.md add contribution guidelines [skip ci] Nov 23, 2015 Code readme stuff [skip ci] Oct 9, 2015 License add license [skip ci] Mar 23, 2015 MaterialDesignColors.nuspec update colors nuspec ver [skip ci] May 12, 2016 MaterialDesignThemes.MahApps.nuspec change nuget to paket Jun 30, 2016 MaterialDesignThemes.nuspec include .cs in nuget May 24, 2016 MaterialDesignToolkit.ResourceGeneration.sln Move mdresgen into it's own solution. Jan 4, 2016 MaterialDesignToolkit.Uwp.sln improvs around datagrid row Sep 22, 2015 MaterialDesignToolkit.Wpf.sln Move mdresgen into it's own solution. Jan 4, 2016 MaterialDesignToolkit.Wpf.sln.vsext.disable Fix some dpi bugs Dec 2, 2015 README.md update readme [skip ci] Jun 9, 2016 appveyor.yml build ver Jul 12, 2016 paket.dependencies update Moq, NSubstitute, RhinoMocks and Shouldly Jun 30, 2016 paket.lock update Moq, NSubstitute, RhinoMocks and Shouldly Jun 30, 2016 README.md Material Design In XAML Toolkit Comphrehensive and easy to use Material Design theme and control library for the Windows desktop. More screenshots below Summary Material Design styles for all major WPF Framework controls Additional controls to support the theme, including Multi Action Button, Cards, Dialogs, Clock Easy configuration of palette (at design and runtime), according to Google's guidelines Full Material Design Icons icon pack Easy transition effects Compatible with Dragablz, MahApps Demo applications included in the source project How Can I Use The Themes? Checkout the Super Quick Start Or, the more comprehensive Starting Guide guide. Source Code To load the source project you will need Visual Studio 2015. Don't worry if you have an earlier version, you can still use the compiled assemblies from NuGet (Install-Package MaterialDesignThemes). There are two demo projects in the solution, restore the NuGet packages and fire them both up. One is a ""pure"" Material Design project, the other illustrates how to combine with Dragablz & MahApps. See It Action Download the source and run the demo. Checkout F1ix. Checkout Motion List. Contribution Guidelines Before contributing code read the Contribution Guidelines Want to say thanks? Hit the ⭐ Star ⭐ button Mentions Logo courtesy of GitHub user Snalty, and you can see more of him; on his blog and on Twitter Marc Angers - I pulled some of his shadows straight in from this blog post Icon pack sourced from Material Design Icons Utilises ControlzEx Ignace Maes, whose Material Skin project inspired the original material design theme for Dragablz, which in turn led to me starting this project Contributors! Thanks for the PRs which have helped add some extra polish. Screenshots Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ButchersBoy/MaterialDesignInXamlToolkit"	"Toolkit for creating Material styled WPF apps"	"true"
"GUI"	"Eto.Forms"	"https://github.com/picoe/Eto"	"Cross platform GUI framework for desktop and mobile applications in.NET and Mono"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"671"	"90"	"89"	"GitHub - picoe/Eto: Cross platform GUI framework for desktop and mobile applications in .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 90 Star 671 Fork 89 picoe/Eto Code Issues 114 Pull requests 7 Wiki Pulse Graphs Cross platform GUI framework for desktop and mobile applications in .NET 3,487 commits 4 branches 13 releases 20 contributors C# 99.6% Visual Basic 0.2% F# 0.2% Pascal 0.0% Shell 0.0% Batchfile 0.0% C# Visual Basic F# Pascal Shell Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop feature/mdi gh-pages master Nothing to show 2.2.0 2.1.0 2.0.7 2.0.6 2.0.5 2.0.4 2.0.3 2.0.2 2.0 1.3 1.2.1 1.2 1.1 Nothing to show New pull request Latest commit 5cf181b Jul 11, 2016 cwensley Fix WinRT build Permalink Failed to load latest commit information. Libraries Add strong name to Interop.SHDocVw.dll to get rid of warning when str… May 10, 2016 Resources - Update to Portable.Xaml 0.13 May 28, 2016 Samples Fix samples to reference the newly renamed project files. Fixes #254 Jan 4, 2015 Source Fix WinRT build Jul 11, 2016 .gitattributes New attributes Apr 29, 2014 .gitignore Ignore VS2015 user directory Oct 19, 2015 LICENSE Update license year Jun 1, 2015 README.md Update appveyor badge to show only develop branch. Mar 23, 2016 addin-project.xml XS Addin requires XS 5.9 for wizard interfaces Aug 10, 2015 appveyor.yml AppVeyor: Update GTK# download location to use environment variable May 28, 2016 README.md Eto.Forms A cross platform desktop and mobile user interface framework Links Join the forums Chat in #eto.forms on irc.gimp.org Browse the wiki for quick start, tutorials, and API Download binaries using NuGet with Visual Studio or Xamarin Studio. For bleeding edge nuget packages, add the MyGet development feed to your sources list. Description This framework can be used to build applications that run across multiple platforms using their native toolkit, with an easy to use API. This will make your applications look and work as a native application on all platforms, using a single UI codebase. For advanced scenarios, you can take advantage of each platform's capabilities by wrapping your common UI in a larger application, or even create your own high-level controls with a custom implementations per platform. This framework currently supports creating Desktop applications that work across Windows Forms, WPF, MonoMac, and GTK#. There is a Mobile/iOS port in the works, but is considered incomplete. This framework was built so that using it in .NET is natural. For example, a simple hello-world application might look like: using Eto.Forms; using Eto.Drawing;  public class MyForm : Form {     public MyForm ()     {         Title = ""My Cross-Platform App"";         ClientSize = new Size(200, 200);         Content = new Label { Text = ""Hello World!"" };     }      [STAThread]     static void Main()     {         new Application().Run(new MyForm());     } } Getting Started To begin creating apps using Eto.Forms, follow the Quick Start Guide. To compile or contribute to Eto.Forms, read the Contributing Guide. Applications Manager - Accounting Software PabloDraw - Character based drawing application JabbR.Desktop - JabbR client Notedown - Note taking application Eto.Test - Application to test the functionality of each widget DotImaging.UI - Portable UI elements for DotImaging Assemblies Your project only needs to reference Eto.dll, and include the corresponding platform assembly that you wish to target. To run on a Mac platform, you need to bundle your app. Eto.dll - Eto.Forms (UI), Eto.Drawing (Graphics), and platform loading Eto.Mac.dll - MonoMac platform for OS X using 32-bit mono Eto.Mac64.dll - MonoMac platform for OS X using 64-bit mono Eto.XamMac.dll - Xamarin.Mac platform for OS X to embed mono Eto.WinForms.dll - Windows Forms platform using GDI+ for graphics Eto.Direct2D.dll - Windows Forms platform using Direct2D for graphics Eto.Wpf.dll - Windows Presentation Foundation platform Eto.Gtk2.dll - Gtk2 platform Eto.Gtk3.dll - Gtk3 platform Eto.iOS.dll - Xamarin.iOS platform Eto.Android.dll - Xamarin.Android platform Currently supported targets iOS using Xamarin.iOS OS X: MonoMac or Xamarin.Mac Linux: GTK# 2 or 3 Windows: Windows Forms (using GDI or Direct2D) or WPF Under development These platforms are currently in development. Any eager bodies willing to help feel free to do so! Android using Xamarin.Android (Eto.Android) Windows 8.x and Windows Phone (Eto.WinRT) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/picoe/Eto"	"Cross platform GUI framework for desktop and mobile applications in.NET and Mono"	"true"
"GUI"	"Dragablz"	"https://github.com/ButchersBoy/Dragablz"	"Dragable, tearable WPF tab control (similar to Chrome) which supports layouts and is full themeable, including themese compatible with MahApps and Material Design."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"422"	"48"	"59"	"GitHub - ButchersBoy/Dragablz: Dragable and tearable tab control for WPF Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 48 Star 422 Fork 59 ButchersBoy/Dragablz Code Issues 28 Pull requests 2 Wiki Pulse Graphs Dragable and tearable tab control for WPF http://dragablz.net 238 commits 2 branches 0 releases 9 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 5055a8d Jun 24, 2016 ButchersBoy ensure tooltips work when using standard TabItem syntax. fixes #102 Permalink Failed to load latest commit information. Dragablz.Test fix tiling algo Jan 26, 2015 Dragablz ensure tooltips work when using standard TabItem syntax. fixes #102 Jun 24, 2016 DragablzDemo Obsolete CustomHeaderItemTemplate Feb 17, 2016 DragablzModernUIDemo fix issue with tab not moving under mouse correctly when dragging int… Dec 22, 2014 Resources image/favicon resources [skip ci] Sep 18, 2015 .gitattributes I'll admit, this is the first time I've used git. Nov 16, 2014 .gitignore I'll admit, this is the first time I've used git. Nov 16, 2014 Dragablz.sln better handling if window stays open after losing a tab Sep 8, 2015 Dragablz.sln.DotSettings I'll admit, this is the first time I've used git. Nov 16, 2014 LICENSE add license Nov 20, 2014 README.md Update README URLs based on HTTP redirects Feb 5, 2016 README.md Tearable tab control for WPF, which includes docking, tool windows and MDI. Illustrates basic theme, more themes at end of page Docs 'n' help 'n' stuff: dragablz.net NuGet details here: http://www.nuget.org/packages/Dragablz/ You can criticise the developer here: @James_Willock or here: [james@dragablz.net] No, seriously, please get involved and give me a ping with any questions/requests. Minimal XAML: XAML as simple as this will give you a tab the tears out (using the basic theme). <dragablz:TabablzControl Margin=""8"">     <dragablz:TabablzControl.InterTabController>         <dragablz:InterTabController />     </dragablz:TabablzControl.InterTabController>     <TabItem Header=""Tab No. 1"" IsSelected=""True"">         <TextBlock>Hello World</TextBlock>     </TabItem>     <TabItem Header=""Tab No. 2"">         <TextBlock>We Have Tearable Tabs!</TextBlock>     </TabItem> </dragablz:TabablzControl> Features: Drag and tear tabs User friendly docking Floating tool windows & MDI Supports MVVM IE style transparent Windows Fully style-able, included styles: Basic MahApps: demo | theme | MahApps Material Design: tutorial | theme | guidelines | Material Design in XAML Toolkit Chrome style trapzoid tabs Custom (and optional) Window which supports transparency, resizing, snapping, full Window content. Miminal XAML required, but hooks provided for advanced control from client code Single light weight assembly targeting .net 4.* frameworks, no additional dependencies Demos in source (make sure you restore NuGet packages) Want to say thanks? Hit the ⭐ Star ⭐ button Getting Started: Here are some helpful blog posts to help you get started: Getting Started MDI MahApps Styles Material Design 1 Material Design 2 In the pipeline: Layout persistance and restore Extra themes Some examples: Material Design theme (see Material Design in XAML Toolkit): Docking: MDI: MahApps theme: Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ButchersBoy/Dragablz"	"Dragable, tearable WPF tab control (similar to Chrome) which supports layouts and is full themeable, including themese compatible with MahApps and Material Design."	"true"
"GUI"	"Fluent.Ribbon"	"https://github.com/fluentribbon/Fluent.Ribbon"	"Fluent Ribbon Control Suite is a library that implements an Office- and Windows 8-like Ribbon for WPF."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"368"	"91"	"140"	"GitHub - fluentribbon/Fluent.Ribbon: WPF Ribbon control like in Office 2010, 2013 and Windows 8 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 91 Star 368 Fork 140 fluentribbon/Fluent.Ribbon Code Issues 29 Pull requests 0 Wiki Pulse Graphs WPF Ribbon control like in Office 2010, 2013 and Windows 8 http://fluentribbon.github.io 1,739 commits 2 branches 14 releases 22 contributors C# 99.6% Other 0.4% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop master Nothing to show v4.0.3 v4.0.2 v4.0.1 v4.0.0 v3.6.1 v3.6.0 v3.5.1 v3.5.0 v3.4.2 v3.4.1 v3.4.0 v3.3.0 v3.2.0 v3.1.0 Nothing to show New pull request Latest commit e203780 Jul 8, 2016 batzen Fixing #329 by waiting for ItemContainerGenerator to finish Permalink Failed to load latest commit information. .github Adding template for issues Feb 29, 2016 Doc Fix typo in URL of linked screenshot May 23, 2015 Fluent.Ribbon.Showcase Defining .NET-Version compile constants for showcase application Jul 8, 2016 Fluent.Ribbon Fixing #329 by waiting for ItemContainerGenerator to finish Jul 8, 2016 Images Doc: Add screenshots of other themes Apr 19, 2015 Shared Bumping develop version to 5.0.0 Apr 14, 2016 Tools Updating nuget.exe Dec 16, 2015 .editorconfig Fixing window border in Office 2013 theme by updating ControlzEx to 2… Apr 12, 2016 .gitignore Removing exception for Generic.xaml from gitignore Apr 15, 2016 Build.ps1 Replacing batch files with powershell Dec 20, 2015 Changelog.md Fixing #329 by waiting for ItemContainerGenerator to finish Jul 8, 2016 Dev.NuGet.Config Updating nuspec and switching back to nuget as source for ControlzEx Feb 6, 2016 Fluent.Ribbon.msbuild Removing nuget update from msbuild file Dec 18, 2015 Fluent.Ribbon.nuspec Fixes #301 by removing Office 2010 and Windows 8 themes Apr 15, 2016 Fluent.Ribbon.ruleset Fixes #310 by moving localizations to separate classes Apr 23, 2016 Fluent.Ribbon.sln Fixes #310 by moving localizations to separate classes Apr 23, 2016 Fluent.Ribbon.sln.DotSettings ReSharper: Fixing line break settings for if Jan 10, 2016 License.txt Cleaning up files Dec 13, 2015 MSBuildHelper.ps1 Replacing batch files with powershell Dec 20, 2015 README.md Improving readme content May 26, 2016 ReleaseNotes.md Update ReleaseNotes.md Nov 3, 2014 appveyor.yml Bumping develop version to 5.0.0 Apr 14, 2016 README.md Fluent.Ribbon This project was previously hosted on CodePlex. Fluent.Ribbon is a library that implements an Office-like user interface for the Windows Presentation Foundation (WPF). It provides controls such as RibbonTabControl, Backstage, Gallery, QuickAccessToolbar, ScreenTip and so on. More Screenshots Contact If you wish to contact me (batzen) directly please use twitter or gitter. Access to preview versions You can access preview versions through the AppVeyor nuget feed. Contributing What you can do to help us We are accepting pull requests, so you are very welcome to create one Fix some bugs Help us translating Help us updating the documentation and walkthrough Development requirements Visual Studio 2015 Optional (but recommended) Editorconfig extension for Visual Studio 2015 Settings that should be used Visual Studio settings which should be used All languages Indentation: 4 spaces (please don't use tabs) XAML Position each attribute on a separate line Position first attribute on same line as start tag Documentation Please, download walkthrough This document covers the main features of this framework and highlights how to use it, but is pretty outdated right now. Almost all features are shown in the showcase application. If you think there is something missing in the showcase application feel free to create an issue for that. To be more familiar with the Ribbon concept see msdn article. History & roadmap A history of changes is maintained in the Changelog and the ReleaseNotes. The roadmap is done by milestones. Feature List Office UI Element Status Backstage Displaying the Backstage Button Full Support Backstage Menu Controls Partial Application Menu Displaying the Application Button Full Support Application Menu Styles Full Support Tabs Displaying Tabs Full Support Minimizing the Ribbon Full Support Tab Scrolling Full Support Groups Displaying Groups Full Support Group Size Reducing / Increesing Full Support Dialog Box Launchers Full Support Controls Button Full Support ToggleButton Full Support DropDownButton Full Support SplitButton Full Support TextBox Full Support CheckBox Full Support ComboBox Full Support Spinner Full Support Toolbar Full Support ColorGallery (ColorPicker) Full Support Ribbon Resizing Defining Groups for Ribbon Resizing Full Support Collapsed Group Behavior Full Support Defining Group Combinations for Ribbon Resizing Full Support Group Horizontal Scrolling Full Support Tabs Compression Full Support Quick Access Toolbar (QAT) Displaying QAT Full Support Ribbon right-click QAT support Full Support Position QAT below the Ribbon Full Support Displaying Many Controls in the QAT Full Support Keyboard Access Displaying KeyTips Full Support Dismissing KeyTips Full Support Keyboard Navigation Partial KeyTip Size and Positioning Full Support KeyTips for Collapsed Groups Full Support KeyTips for All Kind of Menu and Submenu Full Support KeyTips for Backstage Partial KeyTips custom placement Full Support KeyTips for Quick Access Toolbar Full Support Galleries Displaying Galleries Full Support Gallery inline/popup support Full Support In-Ribbon Galleries Full Support Resizing Expanded In-Ribbon Galleries Full Support Filtering Gallery Groups Full Support Mini-Toolbar Displaying the Mini Toolbar Not Implemented Dismissing the Mini Toolbar Not Implemented Controls Displayed on the Mini Toolbar Not Implemented Displaying the Mini Toolbar with Context Menus Not Implemented ScreenTips Displaying ScreenTips Full Support F1 help access Full Support Disable Reason Text Full Support Image in ScreenTip Full Support If you feel lack of some important features feel free to use issues to create an issue/feature request. Localizations Arabic Azerbaijani Catalan Chinese Chinese (Traditional) Czech Danish Dutch English Estonian Finnish French German Greek Hebrew Hungarian Italian Japanese Korean Lithuanian Norwegia Russian Persian Polish Portuguese Portuguese (Brazilian) Romanian Sinhala Slovak Slovenian Spanish Swedish Turkish Ukrainian Vietnamese Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fluentribbon/Fluent.Ribbon"	"Fluent Ribbon Control Suite is a library that implements an Office- and Windows 8-like Ribbon for WPF."	"true"
"GUI"	"Office Ribbon"	"http://officeribbon.codeplex.com/"	"A library that implements MS Office Ribbon for WinForms."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Office Ribbon Project (under active development) - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In Office Ribbon Project (under active development) home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe Orb Style 2007 Orb Style 2010 Orb Style 2013 Project News Highlight 07 Oct 2013 - Office 2013 Theme and several bug fixes 10 May 2013 - Ribbon can be worked with MDI Enabled WinForm (WindowState=Maximize) and inheritance of RibbonForm 10 Jan 2013 - ThemeBuilder released! Build and Load a Theme (Skin Color) Easily, See ThemeBuilderForm in the Demo App Themes for Office 2013, 2010, 2007 Support .NET 2.0, 3.5, 4.0, 4.5 Project Description This is the current project of Jose Menendez ribbon. Please Join! Coded in: C# Runs in: VB and C# Needs: Someone who will help develop! This ribbon is originally created by Jose Menendez Poo. Jose Menendez Poo has done a great job, many thanks and deep appreciation was given for his awesome work. However, the original author of the ribbon has stopped support of it. A group of fans of this ribbon re-host and continue to support and develop the ribbon here. Original Site: http://ribbon.codeplex.com (By original author) Below is the original introduction written by Jose Menedez Poo. The original content can still be found at the original site of this project. Introduction Written by Jose Menedez Poo - 10th May 2008 This is a Microsoft Office 2007 Ribbon Bar - like control for .NET, as all of the code in my site, is free and open source. At the time this is being written, is yet the best ribbon available for free. Please refer to my site/blog http://www.menendezpoo.com for more on usage, development and news about this project Because of the lack of good free Ribbon controls on the web, I decided to write one myself. I've analyzed previous work on ribbon-controls. Unfortunately, most existent controls are merely bad tries. Why? well, some lack nice rendering, some lack resizing features, some lack almost everything. Of course, well developed Ribbon controls are available at a price. This ribbon is free. Some of the design goals Performance - This ribbon is contained on a Control window, and every element inside of it is managed as a bunch of bounds inside the control, just as the ToolStrip control does. Altough this is difficult to manage from the ribboon's inside code, this is a way to keep it at the best performed ribbon. Believe me, download the demo, run it and resize the window. It peforms beautifully. Consistency with Office's ribbon - I read once about Jakob Nielsen saying that most users prefer the programs they use look just like word, excel or powerpoint. This is quite obvious, because people use this software every day. Providing visual consistency with the office's ribbon is very important because people already know what to expect from a ribbon-like interface. I've tried to every element in the ribbon look and behave exactly like it does in the Office's ribbon. Ease of use for programmers - The naming of components is consistent with most WinForms names, even more with the ToolStrip elements. Property, event and method names for similar elements are named just like in the ToolStrip technology items. Designer support - I will be adding more and more designer support so you can manage the ribbon 100% from the designer. Using the Ribbon The ribbon is located in the System.Windows.Forms namespace, just as every other control, I think it's annoying to use controls named as MyCoolFirm.MyCoolNameSpace.MyCoolSubNameSpace, and so on (Please do that only for bussiness objects). You can add a reference to the compiled dll: System.Windows.Forms.Ribbon.dll or you can directly copy the source files to a folder on your project. The code is currently designed so you can just copy the source files, it doesn't need any extra resources. Hands on: Quick Guide The ribbon is composed mainly by three kind of elements, the tabs, the panels on the tabs (other developers call them groups) and the items inside the panels. These elements are represented by RibbonTab, RibbonPanel and RibbonItem types. RibbonItem is an abstract class that provides basic functionality for any item hosted on a RibbonPanel or on a RibbonDropDown. You can add tabs from the smart tag of the Ribbon, you can add panels to the tab by selecting the tab and calling the ""AddPanel"" verb on the bottom part of the property grid. The elements on the ribbon are resized according to the available space for the ribbon. This is a key feature of the ribbon. It tries to bring all possible commands to the screen by resizing them, instead of hiding them on an overflow button like the old ToolStrip. I treat this as three kinds of sizes: Large, Medium and Compact. An additional size is used for panels because panels can be collapsed, and then they will adopt the Overflow size. Note: There's no way to directly affect the bounds of the elements on the ribbon, the size will always be determined the layout engine inside the ribbon. In fact, the layout depends on two factors: the available horizontal space on the ribbon and the size modes on the items. If there's no available space on the ribbon for a panel, panel will be collapsed. If all panels are collapsed and space is not available yet, a scroll button will appear so user can scroll the panels horizontally. Buttons There's only one type of button: RibbonButton. It can be set to four styles, three of which are shown below. The fourth style, DropDownListItem, is the same as normal but with no image. It is used in simple dropdown lists like Font Size that don't require icons. RibbonButton adds the SmallImage property so you can set the image shown when button is in medium or compact mode. Although it's not restricted by functionality, it's highly recommended to use just 32 x 32 pixels for Image property and 16 x 16 for SmallImage property. Results are unexpected when sizes are different. Note: Use the DropDownItems property to add items to the dropdown of the button. The appearance of the buttons vary through size modes. ItemGroups The buttons like those on the Font and Paragraph panels are RibbonButton buttons hosted inside a RibbonItemGroup group. Items added to RibbonItemGroup will always be measured and treated in compact size mode. Important: If a RibbonPanel will host RibbonItemGroup objects, you must set the RibbonPanel.FlowsTo property to Right. The layout on those items are treated differently because groups flow as rows. Lists Lists are represented by RibbonButtonList and provide two collections: Buttons and DropDownItems. This is because the list can be scrolled on the ribbon and can dropdown more items. The dropdown of list supports resizing by a grip on the south east corner. If you want the buttons on the list to be shown on the dropdown, you will have to explicitly add another list with those buttons to the DropDownItems property. Separators Separators are represented by RibbonButtonSeparator and provides the well known separator functionality. When in a dropdown, separators can actually contain text. When they contain text, they will be rendered differently. When they don't contain text, they will displayed as a line and can cover the full width of the dropdown to separate different controls, or partially cover the dropdown width to separate similar controls: Last edited Jan 28, 2015 at 2:45 AM by Stumpii, version 32 download Opera does not support ClickOnce X To install this application, save it and then open it. Opening it directly from Opera will not work correctly. current Ribbon (07. Oct. 2013) date Mon Oct 7, 2013 at 7:00 AM status Stable downloads 69,699 rating       24 ratings Review this release Most Helpful Reviews      1I like it a lot, good work and thanks for sharing!      very very good and thanks View all reviews join us Welcoming ANY C#/VB developer who is willing to help improve this project. Sign in to join this project. Request To Join Project X Complete this form to send a request to become a member of this project. Enter any comments that you wish for the project coordinators to see when approving your request, for example what role you would like to have in the project. 250 characters left Browse other openings: C# Ribbon VB visual basic activity downloads 485 Days: 7 7 30 30 All All Details © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"A library that implements MS Office Ribbon for WinForms."	"true"
"GUI"	"Perspex"	"https://github.com/Perspex/Perspex"	"A multi-platform.NET UI framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1422"	"152"	"138"	"GitHub - AvaloniaUI/Avalonia: A multi-platform .NET UI framework (formerly known as Perspex) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 152 Star 1,422 Fork 138 AvaloniaUI/Avalonia Code Issues 107 Pull requests 2 Wiki Pulse Graphs A multi-platform .NET UI framework (formerly known as Perspex) 2,932 commits 15 branches 2 releases 30 contributors C# 99.8% PowerShell 0.2% C# PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags assisted-designer binding-updates droid grid-tests indexer-bindings ios-dev issue-457 item-virtualization-avalonia itemspresenterbase master portable-xaml skiasharp tabcontrol-bound-items tinywm xsd-generator Nothing to show 0.1.0-alpha2 0.0.1-alpha Nothing to show New pull request Latest commit 6fece57 Jul 14, 2016 grokys committed on GitHub Merge pull request #584 from wieslawsoltes/FixSkiaSetFillRule … Fix Skia SetFillRule Permalink Failed to load latest commit information. docs Remove skia initialization. Jul 11, 2016 nuget Update nuget templates Jul 10, 2016 samples Updated Rx to 3.0 and fixed a failing test from a not fully set up mock. Jul 9, 2016 scripts Fix rename script. May 12, 2016 src Merge pull request #584 from wieslawsoltes/FixSkiaSetFillRule Jul 14, 2016 tests Move border object initialization Jul 10, 2016 .editorconfig Added editorconfig Sep 18, 2015 .gitattributes Initial commit Dec 5, 2013 .gitignore Added ncrunch project files. May 13, 2016 .gitmodules Updated submodule URLs. May 13, 2016 .travis.yml Changed travis notification settings Jul 5, 2016 Avalonia.mono.sln Added initial support for Travis CI Jul 5, 2016 Avalonia.sln Added source assembly information to designer Jun 16, 2016 Avalonia.sln.DotSettings Renamed Perspex -> Avalonia May 11, 2016 Avalonia.v2.ncrunchsolution Renamed Perspex -> Avalonia May 11, 2016 Settings.StyleCop Stylecop fixes. Dec 4, 2014 appveyor.yml Renamed Perspex -> Avalonia May 11, 2016 licence.md Added licence.md Dec 9, 2014 readme.md Added travis build status Jul 5, 2016 readme.md Avalonia A multi-platform .NET UI framework. It can run on Windows, Linux, Mac OS X, iOS and Android. Desktop platforms: Mobile platforms: NuGet Avalonia is delivered as a NuGet package. You can find the packages here: (stable(ish), nightly) You can install the package like this: Install-Package Avalonia -Pre Background Avalonia is a multi-platform windowing toolkit - somewhat like WPF - that is intended to be multi- platform. It supports XAML, lookless controls and a flexible styling system, and runs on Windows using Direct2D and other operating systems using Gtk & Cairo. Current Status Avalonia is now in alpha. What does ""alpha"" mean? Well, it means that it's now at a stage where you can have a play and hopefully create simple applications. There's now a Visual Studio Extension containing project and item templates that will help you get started, and there's an initial complement of controls. There's still a lot missing, and you will find bugs, and the API will change, but this represents the first time where we've made it somewhat easy to have a play and experiment with the framework. Documentation As mentioned above, Avalonia is still in alpha and as such there's not much documentation yet. You can take a look at the getting started page for an overview of how to get started but probably the best thing to do for now is to already know a little bit about WPF/Silverlight/UWP/XAML and ask questions in our Gitter room. There's also a high-level architecture document that is currently a little bit out of date, and I've also started writing blog posts on Avalonia at http://grokys.github.io/. Contributions are always welcome! Building and Using See the build instructions here Contributing Please read the contribution guidelines before submitting a pull request. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Perspex/Perspex"	"A multi-platform.NET UI framework."	"true"
"GUI"	"MaterialSkin"	"https://github.com/IgnaceMaes/MaterialSkin"	"Theming.NET WinForms, C# or VB.Net, to Google's Material Design Principles."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"650"	"112"	"199"	"GitHub - IgnaceMaes/MaterialSkin: Theming .NET WinForms, C# or VB.Net, to Google's Material Design Principles. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 112 Star 650 Fork 199 IgnaceMaes/MaterialSkin Code Issues 43 Pull requests 5 Pulse Graphs Theming .NET WinForms, C# or VB.Net, to Google's Material Design Principles. 134 commits 2 branches 0 releases 12 contributors C# 99.7% Smalltalk 0.3% C# Smalltalk Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 689a926 Jun 19, 2016 IgnaceMaes committed on GitHub Merge pull request #110 from SaitDev/fix-TextField-focus … Add method to focus on singleLine textField fix #108 Permalink Failed to load latest commit information. MaterialSkin method to focus on singleLine textField Jun 17, 2016 MaterialSkinExample Merge pull request #62 from salaros/master Nov 6, 2015 .gitattributes Initial publishement Dec 19, 2014 .gitignore Initial publishement Dec 19, 2014 LICENSE Filled in my name Dec 19, 2014 MaterialSkin.sln Initial publishement Dec 19, 2014 README.md Fixed typos in README.md Nov 26, 2015 README.md MaterialSkin for .NET WinForms Theming .NET WinForms, C# or VB.Net, to Google's Material Design Principles. High quality images can be found at the bottom of this page. Current state of the MaterialSkin components Supported Dark & light version Disabled mode Animated Checkbox Yes Yes Yes Yes Divider Yes Yes N/A N/A Flat Button Yes Yes Yes Yes Label Yes Yes N/A N/A Radio Button Yes Yes Yes Yes Raised Button Yes Yes Yes Yes Single-line text field Yes Yes No Yes TabControl Yes N/A N/A Yes ContextMenuStrip Yes Yes Yes Yes ListView Yes Yes No No ProgressBar Yes Yes No No FloatingActionButton No No No No Dialogs No No No No Switch No No No No More... No No No No Implementing MaterialSkin in your application 1. Add the library to your project You can do this on multiple ways. The easiest way would be adding the NuGet Package. Right click on your project and click 'Manage NuGet Packages...'. Search for 'MaterialSkin' and click on install. Once installed the library will be included in your project references. (Or install it through the package manager console: PM> Install-Package MaterialSkin) Another way of doing this step would be cloning the project from GitHub, compiling the library yourself and adding it as a reference. 2. Add the MaterialSkin components to your ToolBox If you have installed the NuGet package, the MaterialSkin.dll file should be in the folder //bin/Debug. Simply drag the MaterialSkin.dll file into your IDE's ToolBox and all the controls should be added there. 3. Inherit from MaterialForm Open the code behind your Form you wish to skin. Make it inherit from MaterialForm rather than Form. Don't forget to put the library in your imports, so it can find the MaterialForm class! C# (Form1.cs)   public partial class Form1 : MaterialForm VB.NET (Form1.Designer.vb)   Partial Class Form1     Inherits MaterialSkin.Controls.MaterialForm 4. Initialize your colorscheme Set your preferred colors & theme. Also add the form to the manager so it keeps updated if the color scheme or theme changes later on. C# (Form1.cs)   public Form1()   {       InitializeComponent();        var materialSkinManager = MaterialSkinManager.Instance;       materialSkinManager.AddFormToManage(this);       materialSkinManager.Theme = MaterialSkinManager.Themes.LIGHT;       materialSkinManager.ColorScheme = new ColorScheme(Primary.BlueGrey800, Primary.BlueGrey900, Primary.BlueGrey500, Accent.LightBlue200, TextShade.WHITE);   } VB.NET (Form1.vb) Imports MaterialSkin  Public Class Form1      Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load         Dim SkinManager As MaterialSkinManager = MaterialSkinManager.Instance         SkinManager.AddFormToManage(Me)         SkinManager.Theme = MaterialSkinManager.Themes.LIGHT         SkinManager.ColorScheme = New ColorScheme(Primary.BlueGrey800, Primary.BlueGrey900, Primary.BlueGrey500, Accent.LightBlue200, TextShade.WHITE)     End Sub End Class Material Design in WPF If you love .NET and Material Design, you should definitely check out Material Design Xaml Toolkit by ButchersBoy. It's a similar project but for WPF instead of WinForms. Contact If you wish to contact me for anything you can get in touch at: Twitter: https://twitter.com/Ignace_Maes Personal Website: http://ignacemaes.com Images A simple demo interface with MaterialSkin components. The MaterialSkin checkboxes. The MaterialSkin radiobuttons. The MaterialSkin ListView. MaterialSkin using a custom color scheme. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/IgnaceMaes/MaterialSkin"	"Theming.NET WinForms, C# or VB.Net, to Google's Material Design Principles."	"true"
"GUI"	"Xamarin.Forms"	"https://github.com/xamarin/Xamarin.Forms"	"Build native UIs for iOS, Android and Windows from a single, shared C# codebase."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"772"	"151"	"210"	"GitHub - xamarin/Xamarin.Forms: Xamarin.Forms official home Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 151 Star 772 Fork 210 xamarin/Xamarin.Forms Code Pull requests 27 Wiki Pulse Graphs Xamarin.Forms official home https://xamarin.com/forms 246 commits 43 branches 14 releases 19 contributors C# 99.9% PowerShell 0.1% Java 0.0% Makefile 0.0% Batchfile 0.0% HTML 0.0% C# PowerShell Java Makefile Batchfile HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.2.0 2.3.0 2.3.1 XamlCEventConnection bait-and-switch-fix bartext-win fix-33507 fix-39908 fix-41138 fix-42254 fix-bugzilla38189 fix-bugzilla39936 fix-bugzilla40161 fix-bugzilla40333 fix-bugzilla40485 fix-bugzilla40943 fix-bugzilla40955 fix-bugzilla41072 fix-bugzilla41078 fix-bugzilla41209 fix-bugzilla41717 fix-bugzilla41965 fix-bugzilla42074 fix-bugzilla42075 fix-bugzilla42188 fix-bugzilla42326 fix-build fix-bz41205 fix-grid-measure ivt mac master merged-implicit-style-support nativebinding pc-playground ps-drop-interfaces ps-sam-generics restore-invalidatemeasure templatebindattachedprop tvOS wae-pages windows-image-errorhandling xaml-werr Nothing to show release-2.3.0 release-2.3.0-hf1 release-2.2.0 release-2.2.0-hf1 beta-2.3.1-pre3 beta-2.3.1-pre2 beta-2.3.1-pre1 beta-2.3.0-pre3 beta-2.3.0-pre2 beta-2.3.0-pre1 beta-2.2.0-pre4 beta-2.2.0-pre3 beta-2.2.0-pre2 beta-2.2.0-pre1 Nothing to show New pull request Latest commit f7deeec Jul 13, 2016 rmarinho committed on GitHub [Android] Handle creating a default GroupHeader if no GroupHeaderTemp… … …late is provided (#248) Permalink Failed to load latest commit information. .nuget Initial import Mar 22, 2016 .nuspec Add .mdb files to nuget to enable iOS debugging using private packages ( May 24, 2016 AndroidNative/FormsViewGroup Initial import Mar 22, 2016 ICSharpCode.Decompiler Make resharper happier with comments Apr 12, 2016 PagesGallery [Pages] Add reference to Xamarin.Forms.Build.Tasks (#220) Jun 13, 2016 Stubs Carousel clean (#135) Apr 26, 2016 Xamarin.Forms.Build.Tasks Xaml werr (#191) Jun 1, 2016 Xamarin.Forms.ControlGallery.Android [Android] Memory leak when MasterDetailPage Detail set to NavigationP… Jun 27, 2016 Xamarin.Forms.ControlGallery.WP8 Enable warnings as errors in tests Apr 6, 2016 Xamarin.Forms.ControlGallery.Windows Enable warnings as errors in tests Apr 7, 2016 Xamarin.Forms.ControlGallery.WindowsPhone Enable warnings as errors in tests Apr 7, 2016 Xamarin.Forms.ControlGallery.WindowsUniversal Enable warnings as errors in tests Apr 7, 2016 Xamarin.Forms.ControlGallery.iOS [iOS] Default BarTextColor/BarBackgroundColor will no longer override… Jun 28, 2016 Xamarin.Forms.Controls.Issues/Xamarin.Forms.Controls.Issues.Shared [Android] Handle creating a default GroupHeader if no GroupHeaderTemp… Jul 13, 2016 Xamarin.Forms.Controls [iOS] Default BarTextColor/BarBackgroundColor will no longer override… Jun 28, 2016 Xamarin.Forms.Core.Android.UITests [UITest] Update to 1.3.8, remove old projects (#240) Jun 24, 2016 Xamarin.Forms.Core.Design Warnings as Errors in product projects Apr 6, 2016 Xamarin.Forms.Core.UnitTests Added PoppedToRootEventArgs to track popped pages when calling PopToR… Jul 11, 2016 Xamarin.Forms.Core.Windows.UITests [UITest] Update to 1.3.8, remove old projects (#240) Jun 24, 2016 Xamarin.Forms.Core.iOS.UITests [UITest] Update to 1.3.8, remove old projects (#240) Jun 24, 2016 Xamarin.Forms.Core Restore incorrectly renamed InvalidateMeasure method (#251) Jul 11, 2016 Xamarin.Forms.CustomAttributes Add TextColor Property to Picker, TimePicker, DatePicker (#84) Apr 19, 2016 Xamarin.Forms.Maps.Android Prepare Preserve attribute usage for removal of InternalsVisibleTo (#121 Apr 26, 2016 Xamarin.Forms.Maps.Design Warnings as Errors in product projects Apr 6, 2016 Xamarin.Forms.Maps.UWP Mop up enabling warnings as errors (#78) Apr 12, 2016 Xamarin.Forms.Maps.WP8 Maps.WP8 warning as error mop up (#79) Apr 13, 2016 Xamarin.Forms.Maps.WinRT.Phone Mop up enabling warnings as errors (#78) Apr 12, 2016 Xamarin.Forms.Maps.WinRT.Tablet Mop up enabling warnings as errors (#78) Apr 12, 2016 Xamarin.Forms.Maps.iOS [IOS] Update the current region of the MKMapView when visibility is c… Jun 16, 2016 Xamarin.Forms.Maps Prepare Preserve attribute usage for removal of InternalsVisibleTo (#121 Apr 26, 2016 Xamarin.Forms.Pages.Azure Azure support (#143) Apr 27, 2016 Xamarin.Forms.Pages.UnitTests Prep Cell & friends for removal of InternalsVisibleTo (#142) Jun 17, 2016 Xamarin.Forms.Pages XF.Pages MS.Bcl.Build v1.0.14 -> v1.0.21 (#187) May 26, 2016 Xamarin.Forms.Platform.Android.AppLinks Evolve feature branch (#117) Apr 24, 2016 Xamarin.Forms.Platform.Android.FormsViewGroup Warnings as Errors in product projects Apr 6, 2016 Xamarin.Forms.Platform.Android [Android] Handle creating a default GroupHeader if no GroupHeaderTemp… Jul 13, 2016 Xamarin.Forms.Platform.UAP Prep Cell & friends for removal of InternalsVisibleTo (#142) Jun 17, 2016 Xamarin.Forms.Platform.WP8 Prep Cell & friends for removal of InternalsVisibleTo (#142) Jun 17, 2016 Xamarin.Forms.Platform.WinRT.Phone Prep Cell & friends for removal of InternalsVisibleTo (#142) Jun 17, 2016 Xamarin.Forms.Platform.WinRT.Tablet Prep Cell & friends for removal of InternalsVisibleTo (#142) Jun 17, 2016 Xamarin.Forms.Platform.WinRT [All] Crash fixes for ListViews (#243) Jul 1, 2016 Xamarin.Forms.Platform.iOS [All] Crash fixes for ListViews (#243) Jul 1, 2016 Xamarin.Forms.Platform Remove ToolBar from Core; Remove ToolBar renderers and unit tests (#124) Apr 25, 2016 Xamarin.Forms.Xaml.Design Enable warnings as errors in XAML Apr 6, 2016 Xamarin.Forms.Xaml.UnitTests [Xaml] Fix MarkupExtension not found in default namespace (#183) May 27, 2016 Xamarin.Forms.Xaml.Xamlc Enable warnings as errors in XAML Apr 7, 2016 Xamarin.Forms.Xaml.Xamlg Enable warnings as errors in XAML Apr 7, 2016 Xamarin.Forms.Xaml [Xaml] Fix MarkupExtension not found in default namespace (#183) May 27, 2016 docs Update docs for PoppedToRootEventArgs (#253) Jul 12, 2016 tools/mdoc Add missing mdoc tooling Mar 22, 2016 .editorconfig Added .editorconfig (#192) May 26, 2016 .gitattributes Initial import Mar 22, 2016 .gitignore Ignore TabsStudio file Apr 25, 2016 LICENSE Fix license copy Apr 29, 2016 Makefile Initial import Mar 22, 2016 PULL_REQUEST_TEMPLATE.md Update PULL_REQUEST_TEMPLATE.md Mar 23, 2016 README.md Update README.md May 3, 2016 Xamarin.Forms.mdpolicy Add Xamarin.Forms code policy file for XamarinStudio Mar 28, 2016 Xamarin.Forms.sln # This is a combination of 5 commits. (#221) Jun 14, 2016 Xamarin.Forms.sln.DotSettings [Android] Memory leak when MasterDetailPage Detail set to NavigationP… Jun 27, 2016 Xamarin.Forms.vssettings Update vssettings file to turn on Wrapping_PreserveSingleLine (#115) Apr 24, 2016 debug.keystore Add missing debug.keystore Mar 22, 2016 update-docs-windows.bat Evolve feature branch (#117) Apr 24, 2016 update-docs.ps1 Normalize docs (#159) May 11, 2016 verify-nuspecs.ps1 Initial import Mar 22, 2016 README.md Xamarin.Forms Xamarin.Forms provides a way to quickly build native apps for iOS, Android, and Windows, completely in C#. Read more about the platform at https://www.xamarin.com/forms. Getting Started Install Visual Studio 2015 VS 2015 is required for developing Xamarin.Forms. If you do not already have it installed, you can download it here. VS 2015 Community is completely free. If you are installing VS 2015 for the first time, select the ""Custom"" installation type and select the following from the features list to install: C#/.NET (Xamarin v4.0.3) Universal Windows App Development Tools Windows 8.1 and Windows Phone 8.0/8.1 Tools We also recommend installing Microsoft Visual Studio Emulator for Android as well as Emulators for Windows Phone 8.1. If you already have VS 2015 installed, you can verify that these features are installed by modifying the VS 2015 installation via the Control Panel. Install Additional Features After installing VS 2015, you will also need to install the following: Bing Maps SDK for Windows 8.1 Store apps -- you can find this in Tools > Extensions and Updates and searching for ""bing"" in the Online pane. Android SDKs -- you can install these via Tools > Android > Android SDK Manager. Solution Configuration Upon opening the Xamarin.Forms solution, you will find that there are a number of errors and warnings under the Error List pane; you can resolve this by changing the filter of Build + IntelliSense to Build Only. At this point, you should be able to successfully build the solution. By default, the Xamarin.Forms.Controls project does not have a configuration for various API keys to access certain features on each platform (e.g. maps). When building the solution the first time, a controlgallery.config file will be generated inside that project, which looks like this: Win8MapsAuthKey: WinPhoneMapsAuthKey: UWPMapsAuthKey: InsightsApiKey: WP8AppId: WP8AuthToken:  You will have to obtain your own API keys for each of these services, inserted directly after the identifier (e.g. Win8MapsAuthKey:abcdefghijklmnopqrstuvwxyz). You can find out how to obtain each of these as follows: Win8MapsAuthKey, WinPhoneMapsAuthKey, and UWPMapsAuthKey at https://www.microsoft.com/maps/create-a-bing-maps-key.aspx InsightsApiKey at https://insights.xamarin.com/ WP8AppId and WP8AuthToken at https://dev.windows.com/. Due to the way that Android works, the maps API key cannot be injected at runtime. As a result, you will have to add this key to the MapsKey.cs file under Xamarin.Forms.ControlGallery.Android/Properties: [assembly: Android.App.MetaData(""com.google.android.maps.v2.API_KEY"", Value = ""INSERT_KEY_HERE"")]  You can find out how to obtain a Google Maps API key here. Coding Style We follow the style used by the .NET Foundation, with two primary exceptions: We do not use the private keyword as it is the default accessibility level in C#. We use hard tabs over spaces. You can change this setting in VS 2015 via Tools > Options and navigating to Text Editor > C# and selecting the ""Keep tabs"" radio option. Contributing How to Contribute Mailing Lists To discuss this project, and participate in the design, we use the forms-devel@lists.xamarin.com mailing list. Reporting Bugs We use Bugzilla to track issues. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/xamarin/Xamarin.Forms"	"Build native UIs for iOS, Android and Windows from a single, shared C# codebase."	"true"
"HTML and CSS"	"AngleSharp"	"https://github.com/AngleSharp/AngleSharp"	"Complete HTML5 DOM and CSS3 OM construction"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"840"	"92"	"98"	"GitHub - AngleSharp/AngleSharp: AngleSharp is the ultimate angle brackets parser library. It parses HTML5, MathML, SVG and CSS to construct a DOM based on the official W3C specification. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 92 Star 840 Fork 98 AngleSharp/AngleSharp Code Issues 22 Pull requests 0 Wiki Pulse Graphs 👼 AngleSharp is the ultimate angle brackets parser library. It parses HTML5, MathML, SVG and CSS to construct a DOM based on the official W3C specification. 5,395 commits 2 branches 8 releases 13 contributors C# 94.7% HTML 4.6% Other 0.7% C# HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags devel master Nothing to show v0.9 v0.8 v0.7 v0.6 v0.5 v0.4 v0.3 v0.2 Nothing to show New pull request Latest commit dc85fd5 May 6, 2016 FlorianRappl Changed version number Permalink Failed to load latest commit information. .github Updated missing base URL. Feb 17, 2016 src Changed version number May 6, 2016 tools Added cake as build system May 6, 2016 .editorconfig Add the .editorconfig file to enforce the coding style Feb 21, 2015 .gitattributes Initial commit Jun 5, 2013 .gitignore Added cake as build system May 5, 2016 CHANGELOG.md Restructured codebase May 5, 2016 LICENSE Added new license file Sep 24, 2015 README.md Restructured codebase May 5, 2016 build.cake Added cake as build system May 5, 2016 build.ps1 Added cake as build system May 5, 2016 build.sh Added cake as build system May 5, 2016 header.png Updated readme, added logo Aug 20, 2014 logo.png Added new logo Aug 13, 2014 README.md AngleSharp AngleSharp is a .NET library that gives you the ability to parse angle bracket based hyper-texts like HTML, SVG, and MathML. XML without validation is also supported by the library. An important aspect of AngleSharp is that CSS can also be parsed. The parser is built upon the official W3C specification. This produces a perfectly portable HTML5 DOM representation of the given source code. Also current features such as querySelector or querySelectorAll work for tree traversal. Key features Portable (designed as a portable class library) Standards conform (works exactly as in all modern browsers) Great performance (outperforms most other parsers in many cases) Extensible (extend with your own services) Useful abstractions (type helpers, jQuery like construction) Fully functional DOM (all the lists, iterators and events you love) Form submission (easily log in everywhere) Navigation (a BrowsingContext is like a tab - control it from .NET!). LINQ enhanced (use LINQ with DOM elements, naturally) The advantage over similar libraries like the HtmlAgilityPack is that e.g. CSS (including selectors) is already built-in. Also the parser uses the HTML 5.1 specification, which defines error handling and element correction. The AngleSharp library focuses on standards compliance, interactivity and extensibility. It is therefore giving web developers, who are working with C#, all possibilities as they know from using the DOM in any modern browser. The performance of AngleSharp is quite close to the performance of browsers. Even very large pages can be processed within milliseconds. AngleSharp tries to minimize memory allocations and reuses elements internally to avoid unnecessary object creation. Simple demo The simple example will use the website of Wikipedia for data retrieval. // Setup the configuration to support document loading var config = Configuration.Default.WithDefaultLoader(); // Load the names of all The Big Bang Theory episodes from Wikipedia var address = ""https://en.wikipedia.org/wiki/List_of_The_Big_Bang_Theory_episodes""; // Asynchronously get the document in a new context using the configuration var document = await BrowsingContext.New(config).OpenAsync(address); // This CSS selector gets the desired content var cellSelector = ""tr.vevent td:nth-child(3)""; // Perform the query to get all cells with the content var cells = document.QuerySelectorAll(cellSelector); // We are only interested in the text - select it with LINQ var titles = cells.Select(m => m.TextContent); Supported platforms AngleSharp has been created as a PCL (profile 259) that supports a wide range of platforms. The list includes, but is not limited to: .NET Framework 4.5 Silverlight 5 Windows 8 Windows Phone 8.1 / Windows Phone Silverlight Xamarin.Android Xamarin.iOS Additionally the NuGet package also comes with support for the following platforms: Silverlight 5 .NET 4.0 Please note, however, that those platforms have requirements (Microsoft.Bcl.Async), which are not needed by the platforms targeted from the original PCL version Every collection in AngleSharp supports LINQ statements. AngleSharp also provides many useful extension methods for element collections that cannot be found in the official DOM. Documentation Documentation is available in form of the public Wiki here at GitHub. Wiki Home Documentation API Examples Performance The project's timeline, upcoming implementations, (currently) missing features and milestones is published and maintained in the Wiki as well. Issues should be reported on the GitHub's project page. More information is also available by following some of the hyper references mentioned in the Wiki. In-depth articles will be published on the CodeProject, with links being placed in the Wiki at GitHub. Current status The project aims to bring a solid implementation of the W3C DOM for HTML, SVG, MathML and CSS to the CLR, written in C#. The idea is that you can basically do everything with the DOM in C# that you can do in JavaScript. Most parts of the DOM are included, even though some may still miss their (right) implementation. The goal for v1.0 is to have almost everything implemented according to the official W3C specification (with useful extensions by the WHATWG). The API is close to the DOM4 specification, however, the naming has been adjusted to apply with .NET conventions. Nevertheless, to make AngleSharp really useful for, e.g., a JavaScript engine, attributes have been placed on the corresponding interfaces (and methods, properties, ...) to indicate the status of the field in the official specification. This allows automatic generation of DOM objects with the official API. This is a long-term project which will eventually result in a state of the art parser for the most important angle bracket based hyper-texts (and related description languages like CSS). Change log A more detailed change log can be found in the wiki. 0.9.0 Improved DOM algorithms and performance Shadow DOM draft implemented The picture element is now support (with srcset) More neat helpers Custom MimeType DocumentBuilder removed AngleSharp events aggregated in IEventAggregator Non-validating XML parser reintegrated CSSOM improved (also allows round-trip) Included default cookie service Deployed with strong name Improved parser front-ends (HtmlParser, CssParser, ...) 0.8.0 New CSS value model integrated PseudoElement available Mutation records connected Encoding basically finished Memory leak fixed All CSS4 selectors (excluding ||) included Finished Url implementation HTML5 form validation Media features and CSS properties extended Namespace naming fix All HTML5 input types are supported 0.7.0 Native (callback based) async parsing Interfaces for resource loading defined Browsing context available / creation possible (if demanded) Event model included (addEventListener, ...) CSS property / value architecture finalized Sample JavaScript engine based on Jint included 0.6.0: Implemented parsing of CSS media queries Improved URL parsing according to RFC 3986 100% finished HTML5 parser 98% finished CSS3 parser CSS properties and values defined and implemented CSS model implemented (i.e. getComputedStyle works) Tree traversal included (NodeIterator and TreeWalker) Configuration model changed API changed (now interface driven) New source management for better handling and performance 0.5.0: Major API changes (DI is now the only singleton) 98% finished HTML5 parser 95% finished CSS3 parser 85% finished HTML DOM Included Submit() method for forms 0.4.0: Final alpha version 98% finished HTML5 parser 90% finished CSS3 parser 85% finished HTML DOM Removed XML parser (until HTML and CSS are finished) Included WebRequester 0.3.0: Alpha version 95% finished HTML5 parser 90% finished CSS3 parser 85% finished HTML DOM Includes non-validating XML parser QuerySelectors etc. are fully working DOMAttribute applied where possible 0.2.0: First released version (pre-alpha) 95% finished HTML5 parser 70% finished CSS3 parser 80% finished HTML DOM SVG and MathML DOM are not implemented yet Performance seems to be quite OK Roadmap The roadmap presents a draft on what is about to be implemented, and when. The priorities might change, which will affect the roadmap. Additionally the implementation speed will be impacted by factors like people participating in the project and design decisions. The time estimates are speculative, which means that the project could be totally off those predictions. Finding talented (and motivated) collaborators would certainly speed up the project. (December 2015) 1.0.0 Final release of the first version Split AngleSharp.Core into several libraries Provide internal / external communication channel (best flexibility) Provide Task based standard event loop Service model rethought / improved / finalized Most important SVG elements implemented Potential (simple?) XPath query support Interface for rendering defined CSS layout box => layout computation works with everything The current schedule seems to be rather defensive, which does not mean the project will be ""finished"", i.e. released in version 1.0.0, before the given date. If there is time left, more unit tests will be written and the general code quality will be increased. Use-cases Parsing HTML (incl. fragments) Parsing CSS (incl. selectors, declarations, ...) Constructing HTML (e.g., view-engine) Minifying CSS, HTML Querying document elements Crawling information Gathering statistics Web automation Tools with HTML / CSS support Connection to page analytics HTML / DOM Unit Tests Automated JavaScript interaction Testing other script engines ... Participating in the project If you know some feature that AngleSharp is currently missing, and you are willing to implement the feature, then your contribution is more than welcome! Also if you have a really cool idea - do not be shy, we'd like to hear it. If you have an idea how to improve the API (or what is missing) then posts / messages are also welcome. For instance there have been ongoing discussions about some styles that have been used by AngleSharp (e.g. HTMLDocument instead of HtmlDocument) in the past. In the end AngleSharp stopped using HTMLDocument (at least visible outside of the library). Now AngleSharp uses names like IDocument, IHtmlElement and so on. This change would not have been possible without fruitful discussions. The project is always searching for additional contributors. Even if you do not have any code to contribute, but rather an idea for improvement, a bug report or a mistake in the documentation. These are the contributions that keep this project active. License The MIT License (MIT) Copyright (c) 2013 - 2015 AngleSharp Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/AngleSharp/AngleSharp"	"Complete HTML5 DOM and CSS3 OM construction"	"true"
"HTML and CSS"	"CsQuery"	"https://github.com/jamietre/CsQuery"	"HTML5 parser with jQuery style DOM interaction"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"853"	"109"	"184"	"GitHub - jamietre/CsQuery: CsQuery is a complete CSS selector engine, HTML parser, and jQuery port for C# and .NET 4. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 109 Star 853 Fork 184 jamietre/CsQuery Code Issues 64 Pull requests 5 Pulse Graphs CsQuery is a complete CSS selector engine, HTML parser, and jQuery port for C# and .NET 4. 552 commits 3 branches 0 releases 10 contributors HTML 78.5% C# 21.5% HTML C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags csquery-xplatform master website Nothing to show Nothing to show New pull request Latest commit 5a22e28 Dec 15, 2015 jamietre Merge pull request #210 from coel/first-child … Fix and unit test for :first-child selector (Issue #208) Permalink Failed to load latest commit information. build Update build Jun 4, 2013 distribution Issue #134 Feb 1, 2014 documentation Fix Indexing Strategy link Dec 28, 2013 examples Another bugfix in WebFormsApp Jul 30, 2013 source Fix and unit test for :first-child selector (Issue #208) Dec 15, 2015 .gitattributes Clean up tests Jun 26, 2012 .gitignore Performance tweaks Mar 4, 2013 .gitmodules Fix submodule integration Sep 26, 2012 LICENSE.txt Cleanup in html parser Jun 25, 2012 README.md Update README.md Oct 30, 2015 README.md Not Actively Maintained Note from the author: CsQuery is not being actively maintained. I no longer use it in my day-to-day work, and indeed don't even work in .NET much these day! Therefore it is difficult for me to spend any time addressing problems or questions. If you post issues, I may not be able to respond to them, and it's very unlikely I will be able to make bug fixes. While the current release on NuGet (1.3.4) is stable, there are a couple known bugs (see issues) and there are many changes since the last release in the repository. However, I am not going to publish any more official releases, since I don't have time to validate the current code base and address the known issues, or support any unforseen problems that may arise from a new release. I would welcome any community involvement in making this project active again. If you use CsQuery and are interested in being a collaborator on the project please contact me directly. You should also consider using AngleSharp, which is a newer project that is being actively maintained. It's not a drop in replacement, but provides similar capabilities. CsQuery - .C# jQuery Port for .NET 4 CsQuery is a jQuery port for .NET 4. It implements all CSS2 & CSS3 selectors, all the DOM manipulation methods of jQuery, and some of the utility methods. The majority of the jQuery test suite (as of 1.6.2) has been ported to C#. Why CsQuery? CSS selectors and jQuery make it really easy to access and manipulate HTML on the client. There's no reason it should be any more difficult to do the same thing with some arbitrary HTML on the server. It's a simple as that. Use it in web projects to do post-processing on HTML pages before they're served, for web scraping, parsing templates, and more. Standards Compliant HTML parsing CsQuery uses a C# port of the validator.nu HTML parser. This is the same code used in the Gecko browser engine. CsQuery will create an identical DOM from the same source as any Gecko-based browser. You should expect excellent results for handling both valid and invalid markup. CSS3 Selectors and jQuery methods CsQuery implements all CSS2 and CSS3 selectors and filters, and a comprehensive DOM model. You can use all the same jQuery (and DOM element) methods you're familiar with to traverse and manipulate the DOM. Fast, indexed CSS selectors The CSS selector engine fully indexes each document on tag name, id, class, and attribute. The index is subselect-capable, meaning that complex selectors will still be able to take advantage of the index (for any part of the selector that's indexed). Performance of selectors compared to other existing C# HTML parsing libraries is orders of magnitude faster. What's more, the entire test suite from Sizzle (the jQuery CSS selector engine) and jQuery (1.6.2) has been ported from Javascript to C# to cover this project. It's incredibly easy Pretty much everything you need is in the CQ object, which is designed to work like a jQuery object. Assigning a string to a CQ object parses it. The property indexer ['...'] runs a CSS selector, and returns new CQ object, like $('...') using jQuery. Finally, the Render method writes the DOM back to a string. From a CQ object, you have access to the complete jQuery API to traverse and manipulate your document, as well as an extensive browser DOM model. Here's a basic example of parsing HTML, selecting something, altering it, and rendering it back to a string. CQ dom = ""<div>Hello world! <b>I am feeling bold!</b> What about <b>you?</b></div>"";   CQ bold = dom[""b""];               /// find all ""b"" nodes (there are two in this example)    > bold.ToList()   > Count = 2   > [0]: {<b>...</b>}   > [1]: {<b>...</b>}    > bold.First().RenderSelection()   > ""<b>I am feeling bold!</b>""  string boldText = bold.Text();        /// jQuery text method;    > boldText   > ""I am feeling bold! you?""  bold.Remove();                        /// jQuery Remove method  string html = dom.Render();               > html   > ""<div>Hello world!  What about </div>""  There are other ways to create CQ objects, run selectors, and change the DOM. You can also use the property indexer like an array indexer, e.g. dom[0] returns the first element in your selection. If there is one, that is! Using the LINQ method dom.FirstOrDefault() might be a better choice for many situations. In javascript, you'd often test the Length property of a selection to see if there were any results. The CQ object exposes an IEnumerable<IDomObject> interface, so you can use LINQ to simplify many operations. But you still have all the tools that you're used to from jQuery, too. Like in jQuery, each CQ object is made up of DOM elements. In CsQuery, the basic node is an IDomObject and is analagous to an HTML element or other node (like a text node or comment node). Most of the typical HTML element methods are available. So, using these alternatives, to obtain only the first bolded item from the example above: use CSS to choose first node only string bold = dom[""div > b:first-child""].Text();  use jQuery CSS filter extensions to return the first item in the selection string bold = dom[""b:first""].Text();  use LINQ First to get the first item, and the DOM node ""InnerText"" method string bold = dom[""b""].First().InnerText;  use indexer to get the first item, and ""Select"" instead of the indexer to make it more readable string bold = dom.Select(""b"")[0].InnerText;  Use jQuery ""contents"" method to return the text node children, the indexer to get the first, and the DOM node ""nodeValue"" method to get the contents of a text node string bold = dom[""b""].Contents()[0].NodeValue  Each of these returns the same thing: ""I am feeling bold!"" Installation Latest release: Version 1.3.4 (February 5, 2013) To install the latest release from NuGet package manager: PM> Install-Package CsQuery  To install manually, add a reference to CsQuery.DLL. There are no external dependencies. Compiling from Source This repository contains a submodule for HtmlParserSharp. This configuration has been chosen to allow the HTML parser project to be completely independent of CsQuery, while still allowing CsQuery to include it directly and compile to a single DLL. To clone the repostory with the submodule, you need to take an extra step. First create a clone as usual: git clone https://github.com/jamietre/CsQuery.git csquery  Next change to the repo folder, and initialize and clone the submodule. cd csquery git submodule update --init -f  You should be able to compile everything now. If you have any trouble initializing the submodule, just delete the submodule folder ../source/CsQuery/HtmlParserSharp and run the submodule init command again. Release Notes The current release is 1.3.4. This is a bug fix release: Handle out-of-bounds character set changes Allow changing character set via meta tag outside of HEAD Allow non-alpha ID selectors See the change log for details. The last major release is 1.3.0. This release implements a new HTML5-compliant parser. Release notes for 1.3: Read details on the new features and other changes. You can also see all CsQuery release notes at once. Detailed change log: see more more detail about specific changes, or notes on changes made to the source since the last release. Documentation Documentation is being moved from here to the documentation folder in the repository. There is detailed documentation for these topics: Create: Creating a new DOM from HTML in memory, a file, a stream, or a URL Render: Rendering your DOM back to HTML CreateFromUrl: Creating CsQuery objects from a remote source Promises: An overview of the CsQuery Promise API, which is useful for managing asynchronous events. This is useful when loading content from remote URLs without blocking execution while you're waiting for the response. How CsQuery handles character set encoding: Explanation of the different ways a character set encoding can be specified in an HTML document, and how CsQuery detects and prioritizes them. Everything else will be found here in the readme. It covers most common uses for reading HTML documents from files and URLS, and using it like jQuery. I also post about CsQuery on my blog from time to time. Here are a few tutorials from there: Using the CsQuery MVC framework from the 1.2 release notes Implementing a custom filter selector from the 1.1.3 release notes Creating documents from the 1.1.2 release notes Loading content from the web asynchronously using promises For methods ported from the jQuery API, in almost all cases it will function exactly as it does in jQuery. There are exceptions related to differences in the languages, but this should generally be obvious. You can also look through the unit tests, which cover pretty much everything at some level, for straightforward examples of use. Also be sure to look at the example applications under CsQuery.Examples. Contents Roadmap Usage Creating a new DOM Manipulate the DOM with jQuery methods Accessing DOM elements directly Output as HTML CsQuery vs. jQuery Creating a new DOM C# objects vs. Javascript objects Important nonstandard methods Utility methods Options Rendering Options HTTP request options The CsQuery Object Model Overview Creating a CQ object from HTML The DOM (Document Object Model) Overview Referencing the ""document"" equivalent or DOM Performance Features Shortcomings Missing CSS Selectors Acknowledgements Roadmap As of 6/12/2012, all CSS3 selectors that don't depend on browser state have been implemented, and all jQuery DOM selection/manipulation methods have been implemented. See shortcomings for the specific exceptions. The priorities for the future are, in this order: Writing documentation; and establishing a web site for the project. Implement style sheet parser and API, which will allow complete programmatic access to styles (beyond those on the style attribute) and access to computed styles Flesh out the DOM model (properties/methods of specific element types) according to HTML5 specs. (You can always access any attribute you want just as an attribute with a string value. This has to do with the actual implementation of specific DOM element interfaces, as you would access element properties in a browser DOM). Implement CSS4 selectors If you are interested in this project and want to contribute anything, let me know or just make a pull request! Usage Creating a new DOM Complete documentation: Create method Create from a string of HTML, a TextReader, a Stream, or an existing CQ object or DOM elements var dom = CQ.Create(html);     Create from a URL (synchronously) var dom = CQ.CreateFromUrl(""http://www.jquery.com"");  There are many other methods and options for creating a DOM from local sources, and from the web asynchronously. Create from a URL (asynchronously) IPromise promise = CQ.CreateFromUrl(""http://www.jquery.com"");  CQ.CreateFromUrl(""http://www.jquery.com"", successDelegate, failureDelegate);  The first method is preferred and returns an IPromise object, which can be used to manage resolution of deferred events without blocking the code flow. See Promises documentation for details. Output as HTML Complete documentation: Render method Render the entire DOM string html = dom.Render();  You can render any DOM element individually string elementHtml = dom[2].Render();  You can render just the elements that are part of the selection string selectionHtml = dom["".just-this-class""].RenderSelection();  Manipulate the DOM with jQuery methods dom.Select(""div > span"")     .Eq(1)     .Text(""Change the text content of the 2nd span child of each div"");  The default property indexer is equivalent to ""Select"" var rowsWithClass = dom["".targetClass""].Closest(""td"");  Use Find (like in jQuery) to access only child elements of a selection: // get all elements that are first children within 'body' (e.g. excluding 'head')  var childSpans = dom[""body""].Find("":first-child"");  Most methods are flexible with the kind of input they take to try to work as intutitively as they do in jQuery. Three ways to do the same thing: rowsWithClass.AddClass(""highlighted"")     .CssSet(new {             width=""100px"",             height=20         });   rowsWithClass.CssSet(""{ width: 100px; height: 20px; }"");  rowsWithClass.Css(""width"",100).Css(""height"",""20px"");  See below ""C# objects vs. jQuery objects"" for an explanation of CssSet vs. Css. Data will create ""data-xxx"" attributes that can be directly read by the jQuery data method Contact contact = GetContactInfo();  var newRow = rowsWithClass     .Clone()     .Data(""address"",contact);  rowsWithClass.Before(newRow);  Accessing DOM elements directly var sel = dom.Select(""a"");  The property indexer is overloaded as a simple list element indexer returning the DOM element at that position, just like $(...)[n]. IDomObject element = dom[0]; string id = element.Id; string classes = element.ClassName;  The property indexer for IDomObject returns attributes string href = dom[0][""href""];  Most DOM node methods are implemented too. These are equivalent. string html = Dom[""#my-link""].Html();  string html = Dom.Document.GetElementById(""my-link"").InnerHTML;  Some utility methods return nodes, same as jQuery dom.Each((i,e) => {     if (e.Id == ""remove-this-id"") {         e.Parent().RemoveChild(e);     } });  CsQuery vs. jQuery The primary goal of this project was to make it as familiar and portable as possible. There are some differences in usage that were necessary because of differences in strong typing and overloading in C#. This section covers what you need to know to get going with CsQuery. Everything else should work more or less the same as jQuery. Creating a new DOM Static methods are used to create a new DOM from an html string, a sequence of IDomObject elements, or another CQ object. CQ.Create(..)           // Create content. Missing tags will be generated, except for BODY and HTML CQ.CreateDocument(..)   // Create a document. Missing tags will be generated according to HTML5 specs; e.g, if there is no HTML or BODY tag, they will be created. CQ.CreateFragment(..)   // Create a fragment. No missing tag parsing will be done.  You don't need to do this in a browser. The ""document"" is already there. You can, however, create new fragments in jQuery: var frag = $('<div>This is a div</div').   There's not really a distinction between a true Document and a fragment in CsQuery; there's no actual browser involved, it's just a node tree. This doesn't mean that every CQ instance referes to its own DOM. Quite the opposite, the CQ object returned from most methods will be bound to the same DOM as it's parent. For example: CQ dom = CQ.Create(someHtml); CQ divs = dom.Select(""div""); divs.Empty();  this is about the same as: var dom = $(document); var divs = $(""div""); divs.empty();  Just like jQuery, some methods return a new instance of CQ, typically, when that method results in a different selection set. Other methods return the same instance. But either way, they are bound to the same DOM. The rules for whether a new instance is returned, or the existing one is altered, are the same as for each method in jQuery. C# objects vs. Javascript objects The object in Javascript is a fundamental language construct; it's amorphous, nonstatic nature and simple syntax makes it useful for lots of purposes. Some jQuery methods accept objects as a convenient way to define data structures. CsQuery uses reflection to allow C# objects in most of the same situations. It usually also will allow you to pass a string of JSON when an object structure would be expected, providing more syntax portability with Javascript (though you'lll have to use quotes in C#, of course). For example: var anchor = dom[""a""].Eq(0);  div.AttrSet(new {             href=""http://www.jquery.com"",             target=""_blank""         })    .Text(""Go to jQuery.com!"");  Alternatively: dynamic props = new ExpandoObject(); props.href=""http://www.jquery.com""; props.target=""_blank"";  div.AttrSet(props).Text(""Go to jQuery.com!"");  Using the Quick Setter syntax (which is sort of minimally documented by jQuery): div.AttrSet(new {              css = new {                  href=""http://www.jquery.com"",                 target=""_blank""             },             text = ""Go to jQuery.com!""         });  Using JSON:  div.AttrSet(""{ css: {                  href: 'http://www.jquery.com',                 target: '_blank'             },             text: 'Go to jQuery.com!'         }"");  There are a couple things to note here. 1) The method AttrSet. This is a special case where overloading didn't work out very well in C#. The basic ""get attribute"" method: public string Attr(string)  conflicts with the signature for a general-purpose set method: public CQ Attr(object map)  I chose this convention to resolve the conflict for Css and Attr setting methods. 2) The JSON string permits apostrophes in addition to quotes as a legal bounding character. While this makes it not legal JSON, it is much more convenient because you must use double-quotes to bound the string in C#. Important nonstandard methods CsQuery adds methods to return its contents (either the full DOM, or just the selection) as a string: Render()              Output the entire DOM as an html string  RenderSelection()     Output only the selection set as an html string  CsQuery contains a number of methods that are specific to its language implementation. Elements              Only the element results of the selection. New()                 Create a new, empty CQ object bound to the parent's DOM EnsureCsQuery(obj)    Return either obj, or a new CsQuery object based on obj (if a sequence of elements)  Elements is important because of strong typing in C# vs. Javascript. The default enumerator exposes interface IDomObject, an interface common to all node types. As such it has very few standard DOM node methods. Most of the time, you only care about element nodes; this method provides the results in that cast. Another thing that you do a lot in jQuery is this: var jqObject = $(domElement);  That is, you wrap a single DOM element in a jQuery object so you can use jQuery methods to manipulate it. The CsQuery way to do this is create a new CQ object, and pass in the element in the constructor: var csqObject = new CQ(domElement);  There is also a shortcut: var csqObject = domElement.Cq();  For example: bool visible = domElement.Cq().Is("":visible"");  These both produce the same result: A CQ object bound to the with domElement as the selection. Note that this is not the same as the very similar-looking Create method: var csqObject = CQ.Create(domElement);   // probably not what you want!!  The Create methods always create a new DOM. Calling the method above would result in a brand-new DOM with a single element. It's not bound to your original DOM any more; in fact, the element it contains is a clone of your original domElement. Utility Methods Map(..)                You probably don't need this because you can use LINQ Extend(..)             Return an expando object composed of properties from the source objects ParseJSON(..)          Return an expando object from JSON string ParseJSON<T>(..)       Return a strongly-typed object from JSON string ToJSON(..)             Return a json string from an object  These methods' purposes are straightforward. Extend tries to do a lot, allowing you to merge POCO and expando objects with properties of arbitrary types. It may not work in all situations, specifically, those involving deep-copying of list or enumerable types. This is a huge can of worms, and there are definitely some untested areas. Ideally, I will just replace the implementation with some other library that does a great job of complex type mapping. For the time being, though, it works well in most common situations and is useful for dealing with abitrary objects of the sort you get from a javascript application. The JSON handling uses the .NET framework JavaScriptSerializer along with some postprocessing to normalize object structures when returning expando objects. It also has some special treatment for dictionaries when serializing - that is, they are converted to objects (as if they were expando objects) rather than key/value arrays. This also works well enough but, again, would ideally be addressed using a more robust JSON parser. Options Rendering options There are a few options that affect HTML rendering. These are set on the Document property of a CQ object. The static property public static DomRenderingOptions CQ.DefaultDomRenderingOptions  defines default options set for each new CQ instance created. You can assign them to any object after creation. The options are all boolean flags and can be combined. var dom = CQ.Create(html); dom.Document.DomRenderingOptions = DomRenderingOptions.RemoveComments      | DomRenderingOptions.QuoteAllAttributes;  There options available are below. The default options are QuoteAllAttributes only. RemoveMismatchedCloseTags  When the HTML parser finds closing element tags that it cannot match to an element, this option causes them to be ignored. Otherwise, they will be rendered as-is, often resulting in the display of text that looks like an HTML tag, depending on the browser. This option is generally not safe, since it will basically make a decision about how to handle bad HTML that should probably be left up to the browser. It will, however, result in only valid HTML being produced by CsQuery regardless of input. RemoveComments  HTML comments are stripped from the output.  QuoteAllAttributes  HTML attributes (except those that are boolean properties, such as ""checked"") will quoted no matter what. When this is false, CsQuery will determine if an attribute value can be safely included without quotes. If so, no quotes will be used around the attribute value. When true, quotes are always used. Double-quotes are used by default, unless the content can be safely quoted without escaping using single-quotes but not using double-quotes. If escaping is required either way, double-quotes are also used. HTTP request options You can also pass options when making requests from remote servers. The global defaults are found in public static ServerConfig DefaultServerConfig  At this point there are only two options, but this will surely expand in the future as this functionality is more fully developed. int Timeout  A time (in milliseconds) after which the request should fail if it has not resolved. Default is 10000 (10 seconds). string UserAgent  The user agent string that should be reported to the remote server. The basics of the CsQuery object model This section is still very much a work in progress, but if you are familiar with jQuery, using CsQuery should feel very familiar. Overview The CQ object is the jQuery object. In inherits a single interface: public partial class CQ : IEnumerable<IDomObject>  IDomObject represents a DOM node (element or text), the same as a single item in a jQuery selection set. The base method of CQ is Select. Given a CQ instance dom: dom.Select(""div"")  <===>  $('div')  The CQ object, in addition to the familiar jQuery methods, uses the default property indexer for several purposes. Selectors: since there's no such thing as a default method in C#, we use the indexer to provide similar functionality. dom[""div""]  <===>  $('div')  Indexed access: jQuery objects are also array-like. So we expose the property indexer on CQ objects to provide indexed access to the results of a selection: dom[""div""][0]  <===>  dom.Select(""div"")[0]  <===>  $('div')[0]  Remember, though, that the only interface that CQ implements is IEnumerable<IDomObject>. The indexed access is just a property on the object; it doesn't use a standard interface such as IList. The .NET 4 framework doesn't include a IReadOnlyList<T> interface, and I didn't want to use the regular IList because it permits destructive actions. DOM Creation: Same as jQuery. If you pass what appears to be HTML to the indexer (or the Select method), it will return a new CQ object built from that HTML string: dom[""<div></div>""]  <===> $('<div></div>')  Selection set creation: Same as jQuery, you can build a selection set directly from another CsQuery object, or DOM elements. var copyOfDom2 = dom[dom2] <===> var copyOfDom2 = $(dom2);  var firstElementOfDom2 = dom[dom2[0]] <===> var firstElementOfDom2 = $(dom2[0]);  Creating a CQ object from HTML The Create method works like the default $ method. // get a new jQuery/CsQuery object representing the DOM var dom = $(document); -- CQ dom = CQ.Create(htmlString);  // create a new div element with some attributes using quickset  var dom = $(""<div />"",{      css: {          width: 500, height: 20     },     text: ""My new div"" }); --- var dom = CQ.Create(""<div />"",new {      css: new {          width: 500, height: 20     },     text: ""My new div"" });  Static methods work like utility methods in jQuery: var obj = $.parseJSON('{ ""key"": ""value"" }'); -- dynamic obj = CQ.parseJSON(""{ \""key\"": \""value\"" }"");  There's also a CQ.toJSON method (unlike jQuery) that converst objects to JSON. The DOM (Document Object Model) Caveats As I mentioned above, there are still some rough spots in the DOM model. This API may change slightly before the first formal release of CsQuery. However, any changes will almost certainly make it a more (not less) accurate representation of the true browser DOM model. Additionally, even though I am using interfaces to represent the DOM model, you are not free to substitute something else that implements this interface, or internal indexing operations will fail. The There are probably not many reasons why you would need to substitute implementations for the DOM entites without simply replacing the whole model, though. Finally, though it is safe to create new instances of DOM elements using new, there aren't really good reasons to do so. Rather, just use Document.CreateElement as if this were the browser DOM, or CQ.Create to create new nodes. This ensures that they are configured correctly with required data. I intend to clean up both of these situations. The breaking use of interfaces is only designed to hide indexing methods from clients but is not necessary. The elements just need constructors to ensure that they can't be created in a broken state. Overview CsQuery is built around an object model that mostly mimics the browser DOM. Every element in this model implements the most basic interface, IDomNode. The basic heirarchy looks like this: Note: As of 7/2012 this is outdated. There are derived types for specific HTML elements that inherit DomElement now. IDomNode     IDomObject         IDomContainer                           A node which has children             IDomElement: IDomIndexedNode        An element node             IDomDocument                        The root node for a DOM (the Document)          IDomText                                A text node             IDomInvalidElement                  A text node which is also invalid HTML          IDomInnerText*                          A special text node for handling raw text          IDomSpecialElement                      Node types that contain non-attribute data inside the tag itself             IDomDocumentType                    the DOCTYPE node             IDomComment                         A comment node             IDomCData                           a CDATA node      IDomIndexedNode                             A node which must be indexed  INodeList                                       A list of nodes, e.g. element.Children  ICssStyleDeclaration                            Style property for an element node  may be deprecated You will notice that there's no attribute node. Attributes are managed using a string dictionary. I might try to make this more consistent with the DOM model, but there will likely be a substantial performance hit to the HTML parser in order to implementing attributes as an object. I don't have a compelling reason, other than purity, to do so at this point. Methods from CsQuery return either IDomElement sequences or IDomObject sequences. In Javascript, the distinction between text nodes and element nodes is not important for the most part when dealing with jQuery output. Most methods return only element nodes, unless you've specifically asked for text nodes. However, if we used this approach with CsQuery, you would have to deal the more general interface of IDomObject all the time, when you really want to be dealing with IDomElement most of the time. To deal with this in a way that is the lease obtrusive, I decided to expose many methods that really only apply to IDomElement on IDomObject. This is pretty much how you think when working in javascript, anyway, since there is no type checking. This can result in exceptions if you try to operate on a text node as if it were an element. To help with this, CsQuery includs an Elements property that returns only elements. If you are unsure if a particular selector could return text nodes, use Elements to filter the results first (and cast them correctly). There Referencing the ""document"" equivalent or DOM he Document property of a CQ object represents the DOM. This is an object of type DomDocument. When you use a method that returns a new instance of CQ, its Document refers to the same actual object as the original. Using destructive methods will affect any CQ objects that are based on the same DOM. (More to come) Performance Selecting ""div span"" from the HTML5 spec (a 6 megabyte HTML file) is about 500 hundred times faster than HtmlAgilityPack + Fizzler. Simple selectors on medium to large documents can be hundreds or thousands of times faster -- the larger the document, the bigger the difference, since HAP must scan the entire tree for each selector. CsQuery takes a bit longer to parse the HTML in the first place (which is not unexpected, since it's building an index of everything at the same time). Without fizzler, the test case against the 6 megabyte HTML spec using a multipart XML selector with just HAP is unworkably slow so I haven't included that comparison. This blog post shows the results of some performance comparsions. You can run the performance tests yourself from the CsQuery.PerformanceTests project. Internally, tags, class, and attribute names are indexed using a subselect-capable index, meaning that unlike jQuery, even complex selectors still benefit from the index. Features CsQuery is a .NET 4 library that provides an implementation of the jQuery API and a document object model that simulates the browser DOM. It includes a complete HTML5 parser. All jQuery DOM manipulation methods have been implemented, and some utility methods like Extend and ToJSON have been implemented as well. It also includes other methods that are specific to CsQuery's server-based implementation for loading content from remote URLs and parsing HTTP POST data. All CSS2 & CSS3 selectors have been implemented: *                   Universal selector TAG                 element type selector .class              class name selector #id                 id selector [attr]              Attribute selector, with all matchers:                     CSS2: = | |= | ~=                     CSS3: ^= | $= ^ *=                     jQuery: !=  E, F#id             Selector grouping E F                 Descendant selector E>F                 Child selector E+F                 Adjacent sibling selector E~F                 General sibling selector  All pseudoclasses that do not depend on browser state except ""lang"" are implemented: :first-child                :last-child                  :first-of-type              :last-of-type                :only-child                 :only-of-type                    :nth-child(N)               :nth-of-type(N) :nth-last-child(N)          :nth-last-of-type(N) :enabled                    :disabled :empty                      :checked :root                       :not(S)  jQuery extensions: :first                      :last :odd                        :even :eq(N)                      :gt(N) :lt(N)                      :parent :visible                    :hidden :radio                      :button :file                       :text :image                      :reset :submit                     :password :selected                   :contains(T) :has(S)                     :input  Shortcomings The DOM model is not perfect. Mimicing the browser DOM would sacrifice the benefits of strong typing; I opted for a compromise that exposes some nonapplicable members on all node types. This probably could use some refactoring at this point, but it's perfectly workable. There are some minor API issues that need resolving. The DOM model has a few problem areas. Specifically, document fragments are not represented correctly, and it uses internal methods which means you can't substitute things that implement the same interface. In the early stages of this project I had not much time to get it working ""well enough"" to solve a particular problem.That resulted in a bit of regrettable code that needs cleaning up and some weak areas of test coverage. On the other hand, the nice thing about porting something is that you don't need to start from scratch with unit tests. The jQuery tests have the benefit of covering a lot of edge cases discovered over the years, but have the disavantage of being a bit messy and disorganized. Not that my own are a lot better! But as time permits I have been cleaning up and adding to the tests. While I think this project has pretty good test coverage for the vast majority of its features (selectors and DOM manipulation methods) some of the more complex features like Extend -- which, in particular, is difficult to test well - are not well covered. Missing CSS selectors Some parts of the CSS3 specification have not been implemented; in each case it's because the selector doesn't make sense without a browser UI context. The only exception is :lang(C)  ""lang"" may eventually be added, but it's unique in that it depends on environmental information in the browser. I am not planning to implement it at this time. You can still use the attribute selector to target nodes specifically identified with the ""lang"" attribute, e.g. [lang|='en'] which would match ""en-uk"" and ""en-us"", for example. It will only return nodes that actually have the attribute, though, and not nodes that inherit it. In the correct browser implementation of lang(C), every otherwise unmarked node would be returned for the default langauge of the document. Complete list of other unimplemented pseudoselectors: UI related :link     :hover :active :focus :visited :target  Pseudo-elements :first-letter (pseudoelement) :first-line (pseudoelement) :before (pseudoelement) :after (pseudoelement)  Everything else (both browser & jQuery extensions) has been implemented. CSS4 will be added at some point. Acknowledgements CsQuery is mostly original code, but I have either been influenced by, or included directly, code written by others. First and foremost, of course, is John Resig's jQuery, which changed the web forever. Patrick Reisert's HtmlParserSharp, a C# port of the validator.nu HTML5 parser Miron Abramson's fast version of Activator.CreateInstance for speeding up dynamic object instantiation Mauricio Scheffer's HttpWebRequestAdapters to make mocking HttpWebRequest objects possible. Roger Knapps' CombinedStream from his csharptest.net code library The API and operation for the when object was inspired by Brian Cavalier's excellent when.js project. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jamietre/CsQuery"	"HTML5 parser with jQuery style DOM interaction"	"true"
"HTML and CSS"	"dotless"	"https://github.com/dotless/dotless"	".NET Port of the ruby Less CSS lib"	"null"	"null"	"null"	"null"	"null"	"http://www.dotlesscss.org"	"null"	"634"	"56"	"222"	"GitHub - dotless/dotless: .NET Port of the ruby Less CSS lib Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 56 Star 634 Fork 222 dotless/dotless Code Issues 40 Pull requests 6 Wiki Pulse Graphs .NET Port of the ruby Less CSS lib http://www.dotlesscss.org 1,134 commits 9 branches 60 releases 49 contributors C# 86.4% HTML 3.5% CSS 3.2% Python 3.0% PowerShell 2.0% C 1.8% Other 0.1% C# HTML CSS Python PowerShell C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop features/import-options features/strict-math features/350-variable-interpolation-in-attribute-selectors features/353-variables-in-import-path features/363-css-lists-as-mixin-arguments gh-pages master release/1.4.3 Nothing to show v1.4.4 v1.4.3 v1.4.3-beta01 v1.4.3-alpha03 v1.4.3-alpha02 v1.4.3-alpha01 v1.4.2.0 v1.4.1.0 v1.4.0.0 v1.3.1.0 v1.3.0.5 v1.3.0.4 v1.3.0.3 v1.3.0.2 v1.3.0.1 v1.3.0.0 v1.2.4.0 v1.2.3.0 v1.2.2.0 v1.2.1.0 v1.2.0.0 v1.1.0.7 v1.1.0.6 v1.1.0.5 v1.1.0.4 v1.1.0.3 v1.1.0.2 v1.1.0.1 v1.1.0.0 v1.0.0.6 v1.0.0.5 v1.0.0.4 v1.0.0.3 v1.0.0.2 v1.0.0.1 v1.0.0.0 1.5.3-alpha2 1.5.3-alpha1 1.5.2 1.5.2-beta4 1.5.2-beta3 1.5.2-beta2 1.5.2-beta1 1.5.2-alpha2 1.5.2-alpha1 1.5.1 1.5.1-alpha2 1.5.1-alpha1 1.5.0 1.5.0-beta5 1.5.0-beta4 1.5.0-beta3 1.5.0-beta2 1.5.0-beta1 1.5.0-alpha6 1.5.0-alpha5 1.5.0-alpha4 1.5.0-alpha3 1.5.0-alpha2 1.5.0-alpha1 Nothing to show New pull request Latest commit 9b09404 Mar 30, 2016 rytmis Merge branch 'develop' Permalink Failed to load latest commit information. gems Finished ruby gem release through nu Aug 25, 2010 lib - Replace versioned libs and tools with equivalent nuget packages Feb 22, 2015 monobuild Fix CRLF Jun 8, 2011 src Support absolute paths in imports when CurrentDirectory isn't null Mar 29, 2016 t4less Add in code suggestions from @uirusan (from Alex Kwok) and @Sarkie Jan 21, 2012 .editorconfig - Added editorconfig Feb 25, 2015 .gitignore - Add .vs to .gitignore Jul 8, 2015 ClickToBuild.bat - Upgrade to psake 4.4.1 Mar 22, 2015 Rakefile.rb Added rakefile to more easily start default powershell build May 16, 2011 acknowledgements.txt Fixed line endings Mar 28, 2010 appveyor.yml - Another attempt at only deploying from master Jul 14, 2015 default.build Minor changes: Jun 14, 2012 default.ps1 Merge branch 'develop' Apr 17, 2015 how-to-build.txt Added note regarding path to Git bin Mar 23, 2014 license.txt Remove license statement from top of each file. Jun 11, 2010 psake_ext.ps1 Move dotless client only into its own nuget. Generate the nuspec file… Apr 22, 2012 readme.markdown Update readme.markdown May 5, 2015 teamcity.bat Testing something on the CI server Oct 27, 2009 readme.markdown Just Want a .dll? If you don't care about the source and just want a .dll you can get a compiled release from Github. Simply select for the latest successful build and click on the ""Artifacts"" section, here you'll find the latest compiler exe and any dll's required. Whats this all about? This is a project to port the hugely useful Less libary to the .NET world. It give variables, nested rules and operators to CSS. For more information about the original Less project see http://lesscss.org/. For more information about how to get started with the .NET version see http://www.dotlesscss.org/. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dotless/dotless"	".NET Port of the ruby Less CSS lib"	"true"
"HTML and CSS"	"ExCSS"	"https://github.com/TylerBrinks/ExCSS"	"CSS3 parser Library for C#"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"99"	"18"	"46"	"GitHub - TylerBrinks/ExCSS: A CSS Parser for .NET.  It's BADA55! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 99 Fork 46 TylerBrinks/ExCSS Code Issues 7 Pull requests 2 Wiki Pulse Graphs A CSS Parser for .NET. It's BADA55! 149 commits 1 branch 0 releases Fetching contributors C# 98.7% CSS 1.3% C# CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 4ea3ec3 Aug 7, 2015 TylerBrinks Addressing github issues Permalink Failed to load latest commit information. .nuget Changed the csproj files. Oct 15, 2012 ExCSS.Tests Addressing github issues Aug 7, 2015 ExCSS Addressing github issues Aug 8, 2015 NuSpec NuGet version updated with github patches and NuSpec auto generate ad… Jan 23, 2014 .gitattributes NuGet package 2.0.0 published. Dec 3, 2013 .gitignore Fixed filename case in RuleSet Feb 5, 2014 ExCSS.sln Updated parser blocks for closing parens inside a single value Aug 20, 2014 license.txt Updated license Jan 8, 2014 readme.md Update readme.md Jul 14, 2014 readme.md ExCSS StyleSheet Parser for .NET - It's #BADA55! ExCSS (Pronounced Excess) is a CSS 2.1 and CSS 3 parser for .NET. The goal of ExCSS is to make it easy to read and parse stylesheets into a friendly object model with full LINQ support. Version 2.0 Version 2 has been rewritten from the ground up! Unlike v1 which used Coco/r to generate a lexer and parser, version 2 is written entirely by hand. This gives the new parser an incredibly fine grained level of detail when parsing some of the more unusual edge cases for CSS 3 selectors. NuGet Install the pagckage from the NuGet Package Manager or via command line Install-Package ExCSS   Lexing and Parsing - How it all Works ExCSS uses a Lexer and a Parser based on a CSS3-specific grammar. The Lexer and Parser read CSS text and parse each character as individual tokens run against a complex set of rules that define what CSS segment each token represents. Once parsed, the input styles sheet is turned into a standard .NET object model. That means it's fully queryable using Linq to objects. A basic example: var parser = new Parser(); var stylesheet = parser.Parse("".someClass{color: red; background-image: url('/images/logo.png')"");  var imageUrl = stylesheet.Rulesets             .SelectMany(r => r.Declarations)             .FirstOrDefault(d => d.Name.Equals(""background-image"", StringComparison.InvariantCultureIgnoreCase))             .Term             .ToString(); // Finds the url('/images/logo.png') image url  CSS 3 Compatible The project has a growing suite of tests. Currently the tests account for and pass all CSS Level 3 selector definitions found in the W3 CSS 3 Release Candidate documentation Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TylerBrinks/ExCSS"	"CSS3 parser Library for C#"	"true"
"HTML and CSS"	"FluentBootstrap"	"http://fluentbootstrap.com"	"Makes the Bootstrap CSS framework easier to use from ASP.NET MVC or WebPages."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"127"	"30"	"47"	"GitHub - daveaglick/FluentBootstrap: Provides extensions, helper classes, model binding, and other goodies to help you use the Bootstrap CSS framework from .NET code. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 30 Star 127 Fork 47 daveaglick/FluentBootstrap Code Issues 22 Pull requests 0 Pulse Graphs Provides extensions, helper classes, model binding, and other goodies to help you use the Bootstrap CSS framework from .NET code. http://www.fluentbootstrap.com 261 commits 2 branches 14 releases Fetching contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop master Nothing to show v3.3.5.3 v3.3.5.2 v3.3.5.1 v3.3.5.0 v3.3.4.4 v3.3.4.3 v3.3.4.2 v3.3.4.1 v3.3.2.1 v3.3.1.5 v3.3.1.4 v3.3.1.3 v3.3.1.2 v3.3.1.1 Nothing to show New pull request Latest commit 4020b7b Jun 15, 2016 daveaglick Fixed a bug with MVC form lists due to content escaping Permalink Failed to load latest commit information. .vs/config List groups now support buttons, re #38 and twbs/bootstrap#16204 Jul 24, 2015 FluentBootstrap.Mvc.T4MVC Updating versions prior to release May 6, 2016 FluentBootstrap.Mvc Fixed a bug with MVC form lists due to content escaping Jun 15, 2016 FluentBootstrap.Tests.Web fix TagExtensions.AddContentAddEnd() to prevent XSS Apr 23, 2016 FluentBootstrap.Tests add unit tests Apr 23, 2016 FluentBootstrap.WebPages Updating versions prior to release May 6, 2016 FluentBootstrap.Wyam Updating the Wyam package to use new module library Jun 7, 2016 FluentBootstrap Updating versions prior to release May 6, 2016 packages Updating Wyam version Sep 25, 2015 .gitignore Ignore NCrunch config files Oct 16, 2015 FluentBootstrap.jmconfig Initial commit. Architecture is in place and a couple early component… Jun 5, 2014 FluentBootstrap.sln Implemented support for Wyam Jun 17, 2015 appveyor.yml Updating nuspec and appveyor config to get correct package references… Jun 19, 2015 license.txt Added the MIT license. Jul 22, 2014 readme.md Update readme.md Apr 7, 2015 readme.md FluentBootstrap Overview FluentBootstrap provides extensions, helper classes, model binding, and other goodies to help you use the Bootstrap CSS framework from .NET code. It enables using Bootstrap (and to some extent, regular HTML elements) in a variety of different ways without having to worry about HTML, CSS, etc. The goal is to have strongly-typed classes, methods, and extensions that cover as much of the Bootstrap library as possible. Support for generating HTML strings without a web framework, ASP.NET WebPages, ASP.NET MVC, and T4MVC is currently provided. Status Example FluentBootstrap lets you output this: <nav class=""navbar-static-top navbar-default navbar""   id=""navbar"" role=""navigation"">  <div class=""container-fluid"">   <div class=""navbar-header"">    <a class=""navbar-brand"" href=""#"">FluentBootstrap</a>    <button class=""collapsed navbar-toggle"" data-target=""#navbar-collapse""     data-toggle=""collapse"" type=""button"">     <span class=""sr-only"">Toggle Navigation</span>     <span class=""icon-bar""></span>     <span class=""icon-bar""></span>     <span class=""icon-bar""></span>    </button>   </div>   <div class=""collapse navbar-collapse"" id=""navbar-collapse"">    <div class=""navbar-left navbar-nav nav"">     <li><a href=""/"">Introduction</a></li>     <li><a href=""/Installation"">Installation</a></li>     <li><a href=""/Usage"">Usage</a></li>     <li><a href=""/Development"">Development</a></li>    </div>   </div>  </div> </nav>  By writing this (for example, if using from an ASP.NET MVC view): @using (var navbar = Html.Bootstrap().Navbar(""FluentBootstrap"")     .SetPosition(NavbarPosition.StaticTop).Begin()) {     @navbar.NavbarLink(""Introduction"", ""/"")     @navbar.NavbarLink(""Installation"", ""/Installation"")     @navbar.NavbarLink(""Usage"", ""/Usage"")     @navbar.NavbarLink(""Development"", ""/Development"") }  More Information Please see the project site at http://www.fluentbootstrap.com for more information, installation instructions, and code examples. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/daveaglick/FluentBootstrap"	"Makes the Bootstrap CSS framework easier to use from ASP.NET MVC or WebPages."	"true"
"HTML and CSS"	"HtmlAgilityPack"	"http://htmlagilitypack.codeplex.com/"	"an agile HTML parser that builds a read/write DOM and supports plain XPATH or XSLT"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Html Agility Pack - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In Html Agility Pack home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe Attention to get the latest Official Html Agility Pack releases please use the Nuget Package Get the latest Html Agility Pack updates at our new Twitter feed @htmlagilitypack What is exactly the Html Agility Pack (HAP)? This is an agile HTML parser that builds a read/write DOM and supports plain XPATH or XSLT (you actually don't HAVE to understand XPATH nor XSLT to use it, don't worry...). It is a .NET code library that allows you to parse ""out of the web"" HTML files. The parser is very tolerant with ""real world"" malformed HTML. The object model is very similar to what proposes System.Xml, but for HTML documents (or streams). Html Agility Pack now supports Linq to Objects (via a LINQ to Xml Like interface). Check out the new beta to play with this feature Sample applications: Page fixing or generation. You can fix a page the way you want, modify the DOM, add nodes, copy nodes, well... you name it. Web scanners. You can easily get to img/src or a/hrefs with a bunch XPATH queries. Web scrapers. You can easily scrap any existing web page into an RSS feed for example, with just an XSLT file serving as the binding. An example of this is provided. There is no dependency on anything else than .Net's XPATH implementation. There is no dependency on Internet Explorer's MSHTML dll or W3C's HTML tidy or ActiveX / COM object, or anything like that. There is also no adherence to XHTML or XML, although you can actually produce XML using the tool. The version posted here on CodePlex is for the .NET Framework 2.0. If you need the old version, please go to the old page or drop me a note. Examples - Code Examples If you want to participate to the project - because that's the whole purpose of putting the source there, right - use the forums or drop me a note (simon underscore mourier at hotmail dot com)! Happy coding, scraping, scanning, html-ing, xhtml-ing, etc... :^) Simon Mourier. Last edited Jul 11, 2012 at 2:30 AM by DarthObiwan, version 8 download current HAP 1.4.6 date Tue Jul 10, 2012 at 7:00 AM status Stable downloads 308,472 rating       78 ratings Review this release Most Helpful Reviews      Does not validate a simple html string, I opened a issue, let's see if they will work it around, then I change my rating! Tks      Great package of functions. Works lovely for my purposes. I used to get information from HTML and exported to a DataTable View all reviews Ads by Developer Media activity downloads 1320 Days: 7 7 30 30 All All Details © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"an agile HTML parser that builds a read/write DOM and supports plain XPATH or XSLT"	"true"
"HTTP"	"Http.fs"	"https://github.com/relentless/Http.fs"	"A functional HTTP client for."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"103"	"17"	"23"	"GitHub - relentless/Http.fs: A simple, functional HTTP client library for F# Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 103 Fork 23 relentless/Http.fs Code Issues 15 Pull requests 1 Pulse Graphs A simple, functional HTTP client library for F# 291 commits 2 branches 25 releases 12 contributors HTML 62.5% F# 36.0% Ruby 1.1% Other 0.4% HTML F# Ruby Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/alts master Nothing to show v3.0.5 v3.0.4 v3.0.3 v3.0.2 v3.0.1 v3.0.0 v2.4.4 v2.4.3 v2.4.2 v2.4.1 v2.4.0 v2.3.0 v2.2.2 v2.2.1 v2.2.0 v2.1.4 v2.1.3 v2.1.2 v2.1.1 v2.1.0 v2.0.0 v2.0.0-alpha.1 v1.5.1 v1.4.0 v1.3.0 Nothing to show New pull request Latest commit f531e67 Jul 15, 2016 haf [infra] rename from -prerelease to proper name Permalink Failed to load latest commit information. CodeCoverage Added tools back in Apr 6, 2015 HttpFs.IntegrationTests [refactor] Create -> create, Parse -> parse May 6, 2016 HttpFs.SampleApplication [client] moving Request methods to Request module May 6, 2016 HttpFs.SamplePostApplication Async -> Hopac, v3.0.0 May 6, 2016 HttpFs.UnitTests [infra] Fixed indentation of character encoding test Jul 15, 2016 HttpFs [infra] Fixed a bug that caused NameValue values to be incorrectly wr… Jul 15, 2016 Licence Moved licence files into folder May 10, 2014 Tools [infra] adding strong naming May 3, 2016 docs/files/img Made small logo smaller Oct 27, 2014 packages Updated NuGet packages Jan 15, 2015 .gitattributes Initial version for review Oct 17, 2013 .gitignore Async -> Hopac, v3.0.0 May 6, 2016 .semver [infra] bump version Jul 15, 2016 .travis.yml [infra] only do specific version May 19, 2016 Gemfile [infra] bump version Jul 15, 2016 Gemfile.lock [infra] bump version Jul 15, 2016 Http.fs.sln Save in VS2013 creating random formatting changes Oct 26, 2015 README.md [infra] correcting package names May 19, 2016 Rakefile [infra] rename from -prerelease to proper name Jul 15, 2016 appveyor.yml Fix build Aug 14, 2014 build.bat [infra] is AppVeyor happy now? Apr 7, 2015 build.fsx Add AssemblyInfo.fs to version control, Fix nuget build, don't publis… Oct 26, 2015 build.sh [infra] rebased against upstream/master Apr 7, 2015 paket.dependencies [infra] depend on lower F# May 6, 2016 paket.lock [infra] depend on lower F# May 6, 2016 README.md Http.fs A gloriously functional HTTP client library for F#! NuGet name: Http.fs-prerelease. .Net build (AppVeyor): Mono build (Travis CI): NuGet package: How do I use it? In it's simplest form, this will get you a web page: createRequest Get ""http://somesite.com"" |> getResponseBody To get into the details a bit more, there are two or three steps to getting what you want from a web page/HTTP response. 1 - A Request (an immutable record type) is built up in a Fluent Builder style as follows: open HttpFs.Client open System open System.Text  let request =     createRequest Post <| Uri(""https://example.com"")     |> Request.withQueryStringItem ""search"" ""jeebus""     |> Request.withBasicAuthentication ""myUsername"" ""myPassword"" // UTF8-encoded     |> Request.withHeader (UserAgent ""Chrome or summat"")     |> Request.withHeader (Custom (""X-My-Header"", ""hi mum""))     |> Request.withAutoDecompression DecompressionScheme.GZip      |> Request.withAutoFollowRedirectsDisabled     |> Request.withCookie (Cookie.Create(""session"", ""123"", path=""/""))     |> Request.withBodyString ""This body will make heads turn""     |> Request.withBodyStringEncoded ""Check out my sexy foreign body"" (Encoding.UTF8)     |> Request.withBody (BodyRaw [| 1uy; 2uy; 3uy |])     |> Request.withBody (BodyString ""this is a greeting from Santa"")      // if you submit a BodyForm, then Http.fs will also set the correct Content-Type, so you don't have to     |> Request.withBody (BodyForm [         // if you only have this in your form, it will be submitted as application/x-www-form-urlencoded         NameValue (""submit"", ""Hit Me!"")          // a single file form control, selecting two files from browser         FormFile (""file"", (""file1.txt"", ContentType.Create(""text"", ""plain""), Plain ""Hello World""))         FormFile (""file"", (""file2.txt"", ContentType.Create(""text"", ""plain""), Binary [|1uy; 2uy; 3uy|]))          // you can also use MultipartMixed for servers supporting it (this is not the browser-default)         MultipartMixed (""files"",           [ ""file1.txt"", firstCt, Plain ""Hello World"" // => plain             ""file2.gif"", secondCt, Plain ""Loopy"" // => plain             ""file3.gif"", thirdCt, Plain ""Thus"" // => base64             ""cute-cat.gif"", fourthCt, Binary (File.ReadAllBytes (pathOf ""cat-stare.gif"")) // => binary           ])     ])     |> Request.withResponseCharacterEncoding (Encoding.UTF8)     |> Request.withKeepAlive false     |> Request.withProxy {           Address = ""proxy.com"";           Port = 8080;           Credentials = ProxyCredentials.Custom { username = ""Tim""; password = ""Password1"" } } (with everything after createRequest being optional) 2 - The Http response (or just the response code/body) is retrieved using one of the following: job {   use! response = getResponse request // disposed at the end of async, don't                                       // fetch outside async body   // the above doesn't download the response, so you'll have to do that:   let! bodyStr = Response.readBodyAsString response   // OR:   //let! bodyBs = Response.readBodyAsBytes    // remember HttpFs doesn't buffer the stream (how would we know if we're   // downloading 3GiB?), so once you use one of the above methods, you can't do it   // again, but have to buffer/stash it yourself somewhere.   return bodyStr } 3 - If you get the full response (another record), you can get things from it like so: response.StatusCode response.Body // but prefer the above helper functions response.ContentLength response.Cookies.[""cookie1""] response.Headers.[ContentEncoding] response.Headers.[NonStandard(""X-New-Fangled-Header"")] So you can do the old download-multiple-sites-in-parallel thing: [ ""http://news.bbc.co.uk""   ""http://www.wikipedia.com""   ""http://www.stackoverflow.com""] |> List.map (createRequestSimple Get) |> List.map (Request.responseAsString) // this takes care to dispose (req, body) |> Job.conCollect |> Job.map (printfn ""%s"") |> start If you need direct access to the response stream for some reason (for example to download a large file), you need to write yourself a function and pass it to getResponseStream like so: open Hopac open System.IO  job {   use! resp = createRequest Get ""http://fsharp.org/img/logo.png""   use fileStream = new FileStream(""c:\\bigImage.png"", FileMode.Create)   do! resp.Body.CopyToAsync fileStream } Note because some of the request and response headers have the same names, to prevent name clashes, the response versions have 'Response' stuck on the end, e.g. response.Headers.[ContentTypeResponse] Building bundle exec rake or strongly named HTTPFS_STRONG_NAME=true bundle exec rake Examples Check out HttpClient.SampleApplication, which contains a program demonstrating the various functions of the library being used and (to a limited extent) unit tested. SamplePostApplication shows how you can create a post with a body containing forms. Cool! So how do I get it in my code? The easiest way, if you have a full-on project, is to us the NuGet package: PM> install-package Http.fs-prerelease Then just open the module and use as required: open HttpClient    printfn ""%s"" (createRequest Get ""http://www.google.com"" |> getResponseBody) If you can't use NuGet (perhaps you're writing a script), check out the Releases, where you should be able to find the latest version. To use it from a script, it would be this: #r ""HttpClient.dll""  open HttpClient    printfn ""%s"" (createRequestSimple Get ""http://www.google.com"" |> getResponseBody |> run) Version History Http.fs attempts to follow Semantic Versioning, which defines what the different parts of the version number mean and how they relate to backwards compatability of the API. In a nutshell, as long as the major version doesn't change, everything should still work. 0.X.X - Various. Thanks for code and suggestions from Sergeeeek, rodrigodival, ovatsus and more 1.0.0 - First stable API release. Changed how 'duplicated' DUs were named between request/response. 1.1.0 - Added withProxy, thanks to vasily-kirichenko 1.1.1 - Handles response encoding secified as 'utf8' (.net encoder only likes 'utf-8') 1.1.2 - Added utf16 to response encoding map 1.1.3 - Added XML comments to public functions, made a couple of things private which should always have been (technically a breaking change, but I doubt anybody was using them) 1.2.0 - Added withKeepAlive 1.3.0 - Added getResponseBytes, thanks to Sergeeeek 1.3.1 - Added project logo, thanks to sergey-tihon 1.4.0 - Added getResponseStream, with thanks to xkrt 1.5.0 - Added support for Patch method with help from haf, and xkrt fixed an issue with an empty response.CharacterSet 1.5.1 - Corrected the assembly version 2.0.0 - Production hardened, major release, major improvements 3.0.3 - Async -> Job, withXX -> Request.withXX FAQ How does it work? Http.fs currently uses HttpWebRequest/Response under the hood. Why are my cookies not getting set? Perhaps the response is a redirect (a 302 or similar) - unfortunately, although HttpWebRequest handles redirects automatically by default, it doesn't maintain the cookies set during the redirect. (See this CodeProject article about it). The solution is to set 'withAutoFollowRedirectsDisabled' on your request - although this does mean you'll have to handle the redirection yourself. Does it support proxies? Yes. By default it uses the proxy settings defined in IE, and as of 1.1.0 you can specify basic proxy settings separately using withProxy. Can I set KeepAlive? Yes, as of version 1.2.0. This actually sets the Connection header (to 'Keep-Alive' or 'Close'). Note that if this is set to true (which is the default), the Connection header will only be set on the first request, not subsequent ones. Why on earth would you make such a thing? This came out of a side project which involved working with HTTP, and I wasn't really enjoying using HttpWebRequest from F#, so I started making wrapper functions - which eventually turned into this. The sort of things I wanted my module to do differently from HttpWebRequest include: usable idiomatically from F#, e.g. immutable types consistent handling of headers (including all the standard ones) easier to use, e.g. no streams sensible defaults built-in async It isn't intended as a high-performance library, usability from F# has been the goal. It shouldn't be much worse than HttpWebRequest, but you'd have to test it if that was important. If you want to read a bit more about why using HttpWebRequest sucks, check out my blog entry introducing Http.fs. What other kick-ass open source libraries are involved? The only thing that's used in the HttpClient module itself is AsyncStreamReader.fs, a source file taken directly from the Fsharpx library. However, for testing a couple of other things are used: FsUnit for unit testing NancyFX to create a web server for integration testing Suave to create a web server for integration testing And for building, there's also: FAKE, the F# MAKE tool Albacore That's about it. Happy requesting! Grant Crofton @relentlessdev Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/relentless/Http.fs"	"A functional HTTP client for."	"true"
"HTTP"	"RestSharp"	"https://github.com/restsharp/RestSharp"	"Simple REST and HTTP API Client for.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3564"	"336"	"1227"	"GitHub - restsharp/RestSharp: Simple REST and HTTP API Client for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 336 Star 3,564 Fork 1,227 restsharp/RestSharp Code Issues 106 Pull requests 22 Wiki Pulse Graphs Simple REST and HTTP API Client for .NET http://restsharp.org 1,173 commits 4 branches 19 releases 144 contributors C# 99.4% Batchfile 0.6% C# Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master portable work_in_progress Nothing to show v103.1 v103.0 v102.7 v102.6 105.2.3 105.2.2 105.2.1 105.1.0 105.0.1 105.0 104.5.0 104.4.0 104.3.3 104.2 104.1 104.0 103.4 103.3 103.2 Nothing to show New pull request Latest commit e7c65df Apr 26, 2016 hallem Merge pull request #768 from MatthewKing/master … Fix RestRequest.RequestFormat documentation. Permalink Failed to load latest commit information. .nuget prepped a new version and fixed the build bat for monotouch and remov… Aug 26, 2015 RestSharp.Android Added nuget targets for windows phone 8 and 8.1, monotouch10, monoand… Aug 18, 2015 RestSharp.Build Added nuget targets for windows phone 8 and 8.1, monotouch10, monoand… Aug 19, 2015 RestSharp.IntegrationTests Merge pull request #825 from tecmobo/fix-810 Apr 26, 2016 RestSharp.MonoTouch Added nuget targets for windows phone 8 and 8.1, monotouch10, monoand… Aug 19, 2015 RestSharp.Net4.Client Added nuget targets for windows phone 8 and 8.1, monotouch10, monoand… Aug 19, 2015 RestSharp.Net4 Added nuget targets for windows phone 8 and 8.1, monotouch10, monoand… Aug 19, 2015 RestSharp.Net45 Added NET45 compile constants Feb 4, 2016 RestSharp.Net451 Added NET45 compile constants Feb 4, 2016 RestSharp.Net452 Added NET45 compile constants Feb 4, 2016 RestSharp.Net46 Added NET45 compile constants Feb 4, 2016 RestSharp.Silverlight Added nuget targets for windows phone 8 and 8.1, monotouch10, monoand… Aug 19, 2015 RestSharp.Tests Merge pull request #748 from mwereda/master Apr 26, 2016 RestSharp.UWP Added Restsharp.UWP project Nov 12, 2015 RestSharp.WindowsPhone.8.0 Added nuget targets for windows phone 8 and 8.1, monotouch10, monoand… Aug 19, 2015 RestSharp.WindowsPhone.8.1 Added nuget targets for windows phone 8 and 8.1, monotouch10, monoand… Aug 19, 2015 RestSharp.iOS Added nuget targets for windows phone 8 and 8.1, monotouch10, monoand… Aug 19, 2015 RestSharp Merge pull request #768 from MatthewKing/master Apr 26, 2016 Tools added this prefix to the compression library (missed before) and clea… Aug 15, 2015 .gitattributes Add gitattributes and fix line-endings Sep 6, 2013 .gitignore Add integration test for OAuth1 authentication against Twitter API Dec 8, 2014 CONTRIBUTING.markdown Converted tabs to spaces and corrected an error; Oct 25, 2014 LICENSE.txt Added license Nov 16, 2009 README.markdown It supports PATCH Apr 20, 2016 RestSharp.sln Added Restsharp.UWP project Nov 12, 2015 RestSharp.snk Added capability for strong naming on the core library. This was done… Nov 6, 2014 appveyor.yml updated appveyor.yml Aug 19, 2015 build.bat prepped a new version and fixed the build bat for monotouch and remov… Aug 26, 2015 readme.txt Added nuget targets for windows phone 8 and 8.1, monotouch10, monoand… Aug 19, 2015 releasenotes.markdown updated release notes Aug 18, 2015 restsharp.nuspec adding NuSpecUpdateTask to RestSharp.csproj Aug 27, 2013 README.markdown RestSharp - Simple .NET REST Client RestSharp is in need of more maintainers. Specifically ones who have more experience with PCL and UWP. If you're interested, please open an issue at RestSharp Maintainers. Official Site/Blog - @RestSharp License: Apache License 2.0 Features Supports .NET 3.5+, Silverlight 5, Windows Phone 8, Mono, MonoTouch, Mono for Android Easy installation using NuGet for most .NET flavors Supports strong naming using NuGet for most .NET flavors Automatic XML and JSON deserialization Supports custom serialization and deserialization via ISerializer and IDeserializer Fuzzy element name matching ('product_id' in XML/JSON will match C# property named 'ProductId') Automatic detection of type of content returned GET, POST, PUT, PATCH, HEAD, OPTIONS, DELETE supported Other non-standard HTTP methods also supported oAuth 1, oAuth 2, Basic, NTLM and Parameter-based Authenticators included Supports custom authentication schemes via IAuthenticator Multi-part form/file uploads T4 Helper to generate C# classes from an XML document var client = new RestClient(""http://example.com""); // client.Authenticator = new HttpBasicAuthenticator(username, password);  var request = new RestRequest(""resource/{id}"", Method.POST); request.AddParameter(""name"", ""value""); // adds to POST or URL querystring based on Method request.AddUrlSegment(""id"", ""123""); // replaces matching token in request.Resource  // add parameters for all properties on an object request.AddObject(object);  // or just whitelisted properties request.AddObject(object, ""PersonId"", ""Name"", ...);  // easily add HTTP Headers request.AddHeader(""header"", ""value"");  // add files to upload (works with compatible verbs) request.AddFile(""file"", path);  // execute the request IRestResponse response = client.Execute(request); var content = response.Content; // raw content as string  // or automatically deserialize result // return content type is sniffed but can be explicitly set via RestClient.AddHandler(); IRestResponse<Person> response2 = client.Execute<Person>(request); var name = response2.Data.Name;  // or download and save file to disk client.DownloadData(request).SaveAs(path);  // easy async support client.ExecuteAsync(request, response => {     Console.WriteLine(response.Content); });  // async with deserialization var asyncHandle = client.ExecuteAsync<Person>(request, response => {     Console.WriteLine(response.Data.Name); });  // abort the request on demand asyncHandle.Abort(); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/restsharp/RestSharp"	"Simple REST and HTTP API Client for.NET"	"true"
"HTTP"	"Flurl.Http"	"http://tmenier.github.io/Flurl/"	"Fluent, portable, testable REST/HTTP client library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"327"	"26"	"56"	"GitHub - tmenier/Flurl: Fluent URL builder and testable HTTP for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 327 Fork 56 tmenier/Flurl Code Issues 14 Pull requests 1 Wiki Pulse Graphs Fluent URL builder and testable HTTP for .NET http://tmenier.github.io/Flurl/ 186 commits 6 branches 18 releases 8 contributors C# 99.9% Batchfile 0.1% C# Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.3 codegen dev gh-pages http master Nothing to show Flurl.2.1.0-beta7 Flurl.2.0.0 Flurl.1.0.1 Flurl.1.0.0 Flurl.Http.1.0.0-beta8 Flurl.Http.1.0.0-beta7 Flurl.Http.0.10.1 Flurl.Http.0.2.1 Flurl.Http.0.2.0 Flurl.Http.0.2.0-pre Flurl.Http.0.1.3 Fllurl.Http.0.10.0 1.0.3 0.2.5 0.2.3 0.2.1 0.2.0 0.1.1 Nothing to show New pull request Latest commit a8c2001 Jun 25, 2016 tmenier committed on GitHub Merge pull request #73 from engenb/WithOauthBearerToken … convenience methods to pair with those provided by ClientConfigExtensions Permalink Failed to load latest commit information. Build DLL version fix (#90) May 24, 2016 Flurl.Http.CodeGen updated assembly copyrights Apr 10, 2016 Flurl.Http.NET45 Flurl 0.10.0-pre - lib updates to Flurl and Json.NET May 15, 2016 Flurl.Http.PCL additional lib updates, Flurl.Http 0.10.0-pre2 May 15, 2016 Flurl.Http.Shared Merge pull request #73 from engenb/WithOauthBearerToken Jun 25, 2016 Flurl Flurl 2.0 May 15, 2016 NETCore DLL version fix (#90) May 25, 2016 PackageTester.NET461 updated package testers for current versions May 15, 2016 PackageTesters updated package testers for current versions May 15, 2016 Test additional lib updates, Flurl.Http 0.10.0-pre2 May 15, 2016 wrap new package tester for .NET Core, moved package testers to solution f… Apr 11, 2016 .gitattributes This closes #61 Apr 6, 2016 .gitignore This closes #61 Apr 5, 2016 Flurl.sln stripping of -pre from version May 8, 2016 LICENSE Initial commit Feb 16, 2014 NuGet.Config additional lib updates, Flurl.Http 0.10.0-pre2 May 15, 2016 README.md twitter link on readme Dec 6, 2014 global.json This closes #61 Apr 5, 2016 README.md Flurl Flurl is a modern, fluent, asynchronous, testable, portable, buzzword-laden URL builder and HTTP client library. var result = await ""https://api.mysite.com""     .AppendPathSegment(""person"")     .SetQueryParams(new { api_key = ""xyz"" })     .WithOAuthBearerToken(""my_oauth_token"")     .PostJsonAsync(new { first_name = firstName, last_name = lastName })     .ReceiveJson<T>();  [Test] public void Can_Create_Person() {     // fake & record all http calls in the test subject     using (var httpTest = new HttpTest()) {         // arrange         httpTest.RespondWith(200, ""OK"");          // act         await sut.CreatePersonAsync(""Frank"", ""Underwood"");          // assert         httpTest.ShouldHaveCalled(""http://api.mysite.com/*"")             .WithVerb(HttpMethod.Post)             .WithContentType(""application/json"");     } } Get it on NuGet: PM> Install-Package Flurl.Http Or get just the stand-alone URL builder without the HTTP features: PM> Install-Package Flurl For updates and announcements, follow @FlurlHttp on Twitter. For detailed documentation, please visit the main site. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tmenier/Flurl"	"Fluent, portable, testable REST/HTTP client library"	"true"
"HTTP"	"EasyHttp"	"https://github.com/hhariri/EasyHttp"	"Http Library for C#"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"345"	"33"	"97"	"GitHub - hhariri/EasyHttp: Http Library for C# Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 33 Star 345 Fork 97 hhariri/EasyHttp Code Pull requests 2 Wiki Pulse Graphs Http Library for C# 252 commits 3 branches 0 releases 10 contributors C# 97.2% Batchfile 2.7% PowerShell 0.1% C# Batchfile PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags credentials master wp7 Nothing to show Nothing to show New pull request Latest commit a4855ad Mar 31, 2016 hhariri Ignoring test on Error due to site down … Not the best option but interim solution to get new package out. Permalink Failed to load latest commit information. build Content-Lenght is now set when body present. Also updated to MSPec .5.10 Jan 27, 2013 src Ignoring test on Error due to site down Mar 31, 2016 .gitignore Content-Lenght is now set when body present. Also updated to MSPec .5.10 Jan 27, 2013 LICENSE.TXT Content-Lenght is now set when body present. Also updated to MSPec .5.10 Jan 27, 2013 README.md Content-Lenght is now set when body present. Also updated to MSPec .5.10 Jan 27, 2013 README.md EasyHttp An easy to use HTTP client that supports: HEAD, PUT, DELETE, GET, POST Cookies Authentication Dynamic and Static Typing XML, JSON and WWW-Url form encoded encoding/decoding File upload both via PUT and POST (multipart/formdata) Some other neat little features.... License Licensed under Modified BSD (i.e. pretty much MIT). For full License and included software licenses please see LICENSE.TXT Please log all issues here: http://youtrack.codebetter.com/issues/EHTTP Installation You can either download the source and compile or use nuget at http://nuget.org. To install with nuget: Install-Package EasyHttp Documentation The documentation can be found on the wiki. Usage Using static types To post/put a customer to some service:     var customer = new Customer();      customer.Name = ""Joe"";      customer.Email = ""joe@smith.com"";     var http = new HttpClient();     http.Post(""url"", customer, HttpContentTypes.ApplicationJson);  To get some data in JSON format:     var http = new HttpClient();     http.Request.Accept = HttpContentTypes.ApplicationJson;     var response = http.Get(""url"");     var customer = response.StaticBody<Customer>();     Console.WriteLine(""Name: {0}"", customer.Name);  Using dynamic types To post/put a customer to some service:     var customer = new ExpandoObject(); // Or any dynamic type     customer.Name = ""Joe"";     customer.Email = ""joe@smith.com"";     var http = new HttpClient();     http.Post(""url"", customer, HttpContentTypes.ApplicationJson);  To get some data in JSON format:     var http = new HttpClient();     http.Request.Accept = HttpContentTypes.ApplicationJson;     var response = http.Get(""url"");     var customer = response.DynamicBody;     Console.WriteLine(""Name {0}"", customer.Name);  Both in Static and Dynamic versions, hierarchies are supported. Perform a get with parameters To get some data from a service     var http = new HttpClient();     http.Get(""url"", new {Name = ""test""});  Should translate to the following url being passed. url?Name=test the value will be urlencoded. To get some data in JSon format.     var http = new HttpClient();     http.Request.Accept = HttpContentTypes.ApplicationJson;     http.Get(""url"", new {Name = ""test""});  Serialization / Deserialization Conventions For serialization / deserialization, you can use pretty much any type of naming convention, be it Propercase, CamelCase, lowerCamelCase, with_underscores, etc. If for some reason, your convention is not picked up, you can always decorate the property with an attribute:     [JsonName(""mycustomname"")]     public string SomeWeirdCombination { get; set; }  Credits Copyright (c) 2010 - 2011 Hadi Hariri and Project Contributors JsonFX: Licensed under MIT. EasyHttp uses the awesome JsonFX library at http://github.com/jsonfx Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hhariri/EasyHttp"	"Http Library for C#"	"true"
"HTTP"	"Refit"	"https://github.com/paulcbetts/refit"	"The automatic type-safe REST library for Xamarin and.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"906"	"67"	"108"	"GitHub - paulcbetts/refit: The automatic type-safe REST library for Xamarin and .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 67 Star 906 Fork 108 paulcbetts/refit Code Issues 64 Pull requests 20 Pulse Graphs The automatic type-safe REST library for Xamarin and .NET http://paulcbetts.github.io/refit/ 394 commits 3 branches 13 releases 17 contributors C# 99.0% Other 1.0% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags custom-serializers gh-pages master Nothing to show 2.4.1 2.4.0 2.3.0 2.2.1 2.2.0 2.1.0 2.0.2 2.0.1 2.0.0 1.3.0 1.2.0 1.1.0 1.0.0 Nothing to show New pull request Latest commit 391e1cb Jan 22, 2016 paulcbetts Create CODE_OF_CONDUCT.md Permalink Failed to load latest commit information. .nuget update to latest nuget Aug 14, 2015 InterfaceStubGenerator Merge pull request #181 from paulcbetts/allow-reserved-words-in-param… Sep 29, 2015 Refit-Tests Added IUrlPathSegmentTransformer and two implementations, passthrough… Nov 4, 2015 Refit Tidying up Nov 9, 2015 .gitattributes Initial Import Jul 20, 2013 .gitignore Merge branch 'master' into auth Apr 16, 2015 CODE_OF_CONDUCT.md Create CODE_OF_CONDUCT.md Jan 22, 2016 COPYING Add a license Jul 30, 2013 Makefile Enable package restore in makefile Oct 11, 2014 README.md Updated README.md to reflect Multipart support. May 18, 2015 Rebracer.xml R# and Rebracer settings files Dec 20, 2014 Refit-VisualStudio.sln R# and Rebracer settings files Dec 19, 2014 Refit-VisualStudio.sln.DotSettings put output in obj dir and don't always rewrite file Jul 14, 2015 Refit-XamarinStudio.sln Updated README.md to reflect Multipart support. May 18, 2015 README.md Refit: The automatic type-safe REST library for Xamarin and .NET Refit is a library heavily inspired by Square's Retrofit library, and it turns your REST API into a live interface: public interface IGitHubApi {     [Get(""/users/{user}"")]     Task<User> GetUser(string user); } The RestService class generates an implementation of IGitHubApi that uses HttpClient to make its calls: var gitHubApi = RestService.For<IGitHubApi>(""https://api.github.com"");  var octocat = await gitHubApi.GetUser(""octocat""); Where does this work? Refit currently supports the following platforms: Xamarin.Android Xamarin.Mac Xamarin.iOS 64-bit (Unified API) Desktop .NET 4.5 Windows Phone 8 Windows Store (WinRT) 8.0/8.1 Windows Phone 8.1 Universal Apps The following platforms are not supported: Xamarin.iOS 32-bit - build system doesn't support targets files API Attributes Every method must have an HTTP attribute that provides the request method and relative URL. There are five built-in annotations: Get, Post, Put, Delete, and Head. The relative URL of the resource is specified in the annotation. [Get(""/users/list"")] You can also specify query parameters in the URL: [Get(""/users/list?sort=desc"")] A request URL can be updated dynamically using replacement blocks and parameters on the method. A replacement block is an alphanumeric string surrounded by { and }. If the name of your parameter doesn't match the name in the URL path, use the AliasAs attribute. [Get(""/group/{id}/users"")] Task<List<User>> GroupList([AliasAs(""id"")] int groupId); Parameters that are not specified as a URL substitution will automatically be used as query parameters. This is different than Retrofit, where all parameters must be explicitly specified. The comparison between parameter name and URL parameter is not case-sensitive, so it will work correctly if you name your parameter groupId in the path /group/{groupid}/show for example. [Get(""/group/{id}/users"")] Task<List<User>> GroupList([AliasAs(""id"")] int groupId, [AliasAs(""sort"")] string sortOrder);  GroupList(4, ""desc""); >>> ""/group/4/users?sort=desc"" Body content One of the parameters in your method can be used as the body, by using the Body attribute: [Post(""/users/new"")] Task CreateUser([Body] User user); There are four possibilities for supplying the body data, depending on the type of the parameter: If the type is Stream, the content will be streamed via StreamContent If the type is string, the string will be used directly as the content If the parameter has the attribute [Body(BodySerializationMethod.UrlEncoded)], the content will be URL-encoded (see form posts below) For all other types, the object will be serialized as JSON. JSON content JSON requests and responses are serialized/deserialized using Json.NET. By default, Refit will use the serializer settings that can be configured by setting Newtonsoft.Json.JsonConvert.DefaultSettings: JsonConvert.DefaultSettings =      () => new JsonSerializerSettings() {          ContractResolver = new CamelCasePropertyNamesContractResolver(),         Converters = {new StringEnumConverter()}     };  // Serialized as: {""day"":""Saturday""} await PostSomeStuff(new { Day = DayOfWeek.Saturday }); As these are global settings they will affect your entire application. It might be beneficial to isolate the settings for calls to a particular API. When creating a Refit generated live interface, you may optionally pass a RefitSettings that will allow you to specify what serializer settings you would like. This allows you to have different serializer settings for separate APIs: var gitHubApi = RestService.For<IGitHubApi>(""https://api.github.com"",     new RefitSettings {         JsonSerializerSettings = new JsonSerializerSettings {             ContractResolver = new SnakeCasePropertyNamesContractResolver()         }     });  var otherApi = RestService.For<IOtherApi>(""https://api.example.com"",     new RefitSettings {         JsonSerializerSettings = new JsonSerializerSettings {             ContractResolver = new CamelCasePropertyNamesContractResolver()         }     }); Property serialization/deserialization can be customised using Json.NET's JsonProperty attribute: public class Foo  {     // Works like [AliasAs(""b"")] would in form posts (see below)     [JsonProperty(PropertyName=""b"")]      public string Bar { get; set; } } Form posts For APIs that take form posts (i.e. serialized as application/x-www-form-urlencoded), initialize the Body attribute with BodySerializationMethod.UrlEncoded. The parameter can be an IDictionary: public interface IMeasurementProtocolApi {     [Post(""/collect"")]     Task Collect([Body(BodySerializationMethod.UrlEncoded)] Dictionary<string, object> data); }  var data = new Dictionary<string, object> {     {""v"", 1},      {""tid"", ""UA-1234-5""},      {""cid"", new Guid(""d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c"")},      {""t"", ""event""}, };  // Serialized as: v=1&tid=UA-1234-5&cid=d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c&t=event await api.Collect(data); Or you can just pass any object and all public, readable properties will be serialized as form fields in the request. This approach allows you to alias property names using [AliasAs(""whatever"")] which can help if the API has cryptic field names: public interface IMeasurementProtocolApi {     [Post(""/collect"")]     Task Collect([Body(BodySerializationMethod.UrlEncoded)] Measurement measurement); }  public class Measurement {     // Properties can be read-only and [AliasAs] isn't required     public int v { get { return 1; }      [AliasAs(""tid"")]     public string WebPropertyId { get; set; }      [AliasAs(""cid"")]     public Guid ClientId { get;set; }      [AliasAs(""t"")]      public string Type { get; set; }      public object IgnoreMe { private get; set; } }  var measurement = new Measurement {      WebPropertyId = ""UA-1234-5"",      ClientId = new Guid(""d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c""),      Type = ""event""  };   // Serialized as: v=1&tid=UA-1234-5&cid=d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c&t=event await api.Collect(measurement); Setting request headers Static headers You can set one or more static request headers for a request applying a Headers attribute to the method: [Headers(""User-Agent: Awesome Octocat App"")] [Get(""/users/{user}"")] Task<User> GetUser(string user); Static headers can also be added to every request in the API by applying the Headers attribute to the interface: [Headers(""User-Agent: Awesome Octocat App"")] public interface IGitHubApi {     [Get(""/users/{user}"")]     Task<User> GetUser(string user);      [Post(""/users/new"")]     Task CreateUser([Body] User user); } Dynamic headers If the content of the header needs to be set at runtime, you can add a header with a dynamic value to a request by applying a Header attribute to a parameter: [Get(""/users/{user}"")] Task<User> GetUser(string user, [Header(""Authorization"")] string authorization);  // Will add the header ""Authorization: token OAUTH-TOKEN"" to the request var user = await GetUser(""octocat"", ""token OAUTH-TOKEN""); Authorization (Dynamic Headers redux) The most common reason to use headers is for authorization. Today most API's use some flavor of oAuth with access tokens that expire and refresh tokens that are longer lived. One way to encapsulate these kinds of token usage, a custom HttpClientHandler can be inserted instead. For example: class AuthenticatedHttpClientHandler : HttpClientHandler {     private readonly Func<Task<string>> getToken;      public AuthenticatedHttpClientHandler(Func<Task<string>> getToken)     {         if (getToken == null) throw new ArgumentNullException(""getToken"");         this.getToken = getToken;     }      protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)     {         // See if the request has an authorize header         var auth = request.Headers.Authorization;         if (auth != null)         {             var token = await getToken().ConfigureAwait(false);             request.Headers.Authorization = new AuthenticationHeaderValue(auth.Scheme, token);         }          return await base.SendAsync(request, cancellationToken).ConfigureAwait(false);     } } This class is used like so (example uses the ADAL library to manage auto-token refresh but the principal holds for Xamarin.Auth or any other library: class LoginViewModel {     AuthenticationContext context = new AuthenticationContext(...);     private async Task<string> GetToken()     {         // The AquireTokenAsync call will prompt with a UI if necessary         // Or otherwise silently use a refresh token to return         // a valid access token          var token = await context.AcquireTokenAsync(""http://my.service.uri/app"", ""clientId"", new Uri(""callback://complete""));          return token;     }      public async void LoginAndCallApi()     {         var api = RestService.For<IMyRestService>(new HttpClient(new AuthenticatedHttpClientHandler(GetToken)) { BaseAddress = new Uri(""https://the.end.point/"") });          var location = await api.GetLocationOfRebelBase();     } }  interface IMyRestService {     [Get(""/getPublicInfo"")]     Task<Foobar> SomePublicMethod();      [Get(""/secretStuff"")]     [Headers(""Authorization: Bearer"")]     Task<Location> GetLocationOfRebelBase(); }  In the above example, any time a method that requires authentication is called, the AuthenticatedHttpClientHandler will try to get a fresh access token. It's up to the app to provide one, checking the expiration time of an existing access token and obtaining a new one if needed. Redefining headers Unlike Retrofit, where headers do not overwrite each other and are all added to the request regardless of how many times the same header is defined, Refit takes a similar approach to the approach ASP.NET MVC takes with action filters — redefining a header will replace it, in the following order of precedence: Headers attribute on the interface (lowest priority) Headers attribute on the method Header attribute on a method parameter (highest priority) [Headers(""X-Emoji: :rocket:"")] public interface IGitHubApi {     [Get(""/users/list"")]     Task<List> GetUsers();      [Get(""/users/{user}"")]     [Headers(""X-Emoji: :smile_cat:"")]     Task<User> GetUser(string user);      [Post(""/users/new"")]     [Headers(""X-Emoji: :metal:"")]     Task CreateUser([Body] User user, [Header(""X-Emoji"")] string emoji); }  // X-Emoji: :rocket: var users = await GetUsers();  // X-Emoji: :smile_cat: var user = await GetUser(""octocat"");  // X-Emoji: :trollface: await CreateUser(user, "":trollface:""); Removing headers Headers defined on an interface or method can be removed by redefining a static header without a value (i.e. without : <value>) or passing null for a dynamic header. Empty strings will be included as empty headers. [Headers(""X-Emoji: :rocket:"")] public interface IGitHubApi {     [Get(""/users/list"")]     [Headers(""X-Emoji"")] // Remove the X-Emoji header     Task<List> GetUsers();      [Get(""/users/{user}"")]     [Headers(""X-Emoji:"")] // Redefine the X-Emoji header as empty     Task<User> GetUser(string user);      [Post(""/users/new"")]     Task CreateUser([Body] User user, [Header(""X-Emoji"")] string emoji); }  // No X-Emoji header var users = await GetUsers();  // X-Emoji:  var user = await GetUser(""octocat"");  // No X-Emoji header await CreateUser(user, null);   // X-Emoji:  await CreateUser(user, """"); Multipart uploads Methods decorated with Multipart attribute will be submitted with multipart content type. At this time, multipart methods support the following parameter types: string (parameter name will be used as name and string value as value) byte array Stream FileInfo For byte array and Stream parameters, use AttachmentName parameter attribute to specify the name for the attachment. For FileInfo parameters, the file name will be used. public interface ISomeApi {     [Multipart]     [Post(""/users/{id}/photo"")]     Task UploadPhoto(int id, [AttachmentName(""photo.jpg"")] Stream stream); } Retrieving the response Note that in Refit unlike in Retrofit, there is no option for a synchronous network request - all requests must be async, either via Task or via IObservable. There is also no option to create an async method via a Callback parameter unlike Retrofit, because we live in the async/await future. Similarly to how body content changes via the parameter type, the return type will determine the content returned. Returning Task without a type parameter will discard the content and solely tell you whether or not the call succeeded: [Post(""/users/new"")] Task CreateUser([Body] User user);  // This will throw if the network call fails await CreateUser(someUser); If the type parameter is 'HttpResponseMessage' or 'string', the raw response message or the content as a string will be returned respectively. // Returns the content as a string (i.e. the JSON data) [Get(""/users/{user}"")] Task<string> GetUser(string user);  // Returns the raw response, as an IObservable that can be used with the // Reactive Extensions [Get(""/users/{user}"")] IObservable<HttpResponseMessage> GetUser(string user); Using generic interfaces When using something like ASP.NET Web API, it's a fairly common pattern to have a whole stack of CRUD REST services. Refit now supports these, allowing you to define a single API interface with a generic type: public interface IReallyExcitingCrudApi<T, in TKey> where T : class {     [Post("""")]     Task<T> Create([Body] T paylod);      [Get("""")]     Task<List<T>> ReadAll();      [Get(""/{key}"")]     Task<T> ReadOne(TKey key);      [Put(""/{key}"")]     Task Update(TKey key, [Body]T payload);      [Delete(""/{key}"")]     Task Delete(TKey key); } Which can be used like this: // The ""/users"" part here is kind of important if you want it to work for more  // than one type (unless you have a different domain for each type) var api = RestService.For<IReallyExcitingCrudApi<User, string>>(""http://api.example.com/users""); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/paulcbetts/refit"	"The automatic type-safe REST library for Xamarin and.NET"	"true"
"HTTP"	"RestEase"	"https://github.com/canton7/RestEase"	"Easy-to-use typesafe REST API client library, which is simple and customisable. Heavily inspired by Refit"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"41"	"3"	"4"	"GitHub - canton7/RestEase: Easy-to-use typesafe REST API client library, which is simple and customisable. Heavily inspired by refit Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 41 Fork 4 canton7/RestEase Code Issues 2 Pull requests 1 Pulse Graphs Easy-to-use typesafe REST API client library, which is simple and customisable. Heavily inspired by refit 200 commits 2 branches 16 releases 1 contributor C# 99.4% Ruby 0.6% C# Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show v1.0.11 v1.0.10 v1.0.9 v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.9.3 v0.9.2 v0.9.1 v0.9.0 Nothing to show New pull request Latest commit 0659333 Jun 9, 2016 canton7 Merge branch 'release/1.0.11' … * release/1.0.11:   Update changelog   Bleh, fix my test Permalink Failed to load latest commit information. NuGet Default local builds to version 0.0.0 Dec 23, 2015 src Bleh, fix my test Jun 9, 2016 .gitattributes Initial commit Apr 22, 2015 .gitignore Initial commit Apr 22, 2015 CHANGELOG.md Update changelog Jun 9, 2016 LICENSE.txt Correct license date May 19, 2015 README.md Add FAQ about thread safety. May 28, 2016 Rakefile Actually build the unit tests Dec 23, 2015 icon.png Add icon May 19, 2015 icon.svg Add icon May 19, 2015 README.md RestEase RestEase is a little type-safe REST API client library for .NET Framework 4.0 and higher, which aims to make interacting with remote REST endpoints easy, without adding unnecessary compexity. Almost every aspect of RestEase can be overridden and customized, leading to a large level of flexibility. To use it, you define an interface which represents the endpoint you wish to communicate with (more on that in a bit), where methods on that interface correspond to requests that can be made on it. RestEase will then generate an implementation of that interface for you, and by calling the methods you defined, the appropriate requests will be made. RestEase is built on top of HttpClient and is deliberately a ""leaky abstraction"": it is easy to gain access to the full capabilities of HttpClient, giving you control and flexibility, when you need it. RestEase is heavily inspired by Paul Betts' Refit, which in turn is inspired by Retrofit. Table of Contents Installation Quick Start Request Types Return Types Query Parameters Constant Query Parameters Variable Query Parameters Serialization of Variable Query Parameters Query Parameters Map Path Parameters Body Content URL Encoded Bodies Response Status Codes Cancelling Requests Headers Constant Interface Headers Variable Interface Headers Constant Method Headers Variable Method Headers Redefining Headers Controlling Serialization and Deserialization Custom JsonSerializerSettings Custom Serializers and Deserializers Deserializing responses: IResponseDeserializer Serializing request bodies: IRequestBodySerializer Serializing request parameters: IRequestQueryParamSerializer Controlling the Requests RequestModifier Custom HttpClient Customizing RestEase Interface Accessibility Using Generic Interfaces Interface Inheritance FAQs Comparison to Refit Installation RestEase is available on NuGet. Either open the package console and type: PM> Install-Package RestEase  Or right-click your project -> Manage NuGet Packages... -> Online -> search for RestEase in the top right. Symbols are available. In Visual Studio, go to Debug -> Options and Settings -> General, and make the following changes: Turn off ""Enable Just My Code"" Turn off ""Enable .NET Framework source stepping"". Yes, it is misleading, but if you don't, then Visual Studio will ignore your custom server order and only use its own servers. Turn on ""Enable source server support"". You may have to OK a security warning. Quick Start To start, first create an public interface which represents the endpoint you wish to make requests to. Please note that it does have to be public, or you must add RestEase as a friend assembly, see Interface Accessibility below. // Define an interface representing the API public interface IGitHubApi {     // All interface methods must return a Task or Task<T>. We'll discuss what sort of T in more detail below.      // The [Get] attribute marks this method as a GET request     // The ""users"" is a relative path the a base URL, which we'll provide later     [Get(""users"")]     Task<List<User>> GetUsersAsync(); }  // Create an implementation of that interface // We'll pass in the base URL for the API IGitHubApi api = RestClient.For<IGitHubApi>(""http://api.github.com"");  // Now we can simply call methods on it // Sends a GET request to http://api.github.com/users List<User> users = await api.GetUsersAsync(); Request Types See the [Get(""path"")] attribute used above? That's how you mark that method as being a GET request. There are a number of other attributes you can use here - in fact, there's one for each type of request: [Post(""path"")], [Delete(""path"")], etc. Use whichever one you need to. The argument to [Get] (or [Post], or whatever) is typically a relative path, and will be relative to the base uri that you provide to RestClient.For<T>. (You can specify an absolute path here if you need to, in which case the base uri will be ignored). Return Types Your interface methods may return one of the following types: Task: This method does not return any data, but the task will complete when the request has completed Task<T> (where T is not one of the types listed below): This method will deserialize the response into an object of type T, using Json.NET (or a custom deserializer, see Controlling Serialization and Deserialization below). Task<string>: This method returns the raw response, as a string Task<HttpResponseMessage>: This method returns the raw HttpResponseMessage resulting from the request. It does not do any deserialiation Task<Response<T>>: This method returns a Response<T>. A Response<T> contains both the deserialied response (of type T), but also the HttpResponseMessage. Use this when you want to have both the deserialized response, and access to things like the response headers Non-async methods are not supported (use .Wait() or .Result as appropriate if you do want to make your request synchronous). Query Parameters It is very common to want to include query parameters in your request (e.g. /foo?key=value), and RestEase makes this easy. Constant Query Parameters The most basic type of query parameter is a constant - the value never changes. For these, simply put the query parameter as part of the URL: public interface IGitHubApi {    [Get(""users/list?sort=desc"")]    Task<List<User>> GetUsersAsync(); } Variable Query Parameters Any parameters to a method which are: Decorated with the [Query] attribute, or Not decorated at all will be interpreted as query parameters. The name of the parameter will be used as the key, unless an argument is passed to [Query(""key"")], in which case that will be used instead. For example: public interface IGitHubApi {     [Get(""user"")]     Task<User> FetchUserAsync(int userid);      // Is the same as:      [Get(""user"")]     Task<User> FetchUserAsync([Query] int userid);      // Is the same as:     // (Note the casing of the parameter name)      [Get(""user"")]     Task<User> FetchUserAsync([Query(""userid"")] int userId); }  IGithubApi api = RestClient.For<IGithubApi>(""http://api.github.com"");  // Requests http://api.github.com/user?userId=3 await api.FetchUserAsync(3); You can have duplicate keys if you want: public interface ISomeApi {     [Get(""search"")]     Task<SearchResult> SearchAsync([Query(""filter"")] string filter1, [Query(""filter"")] string filter2); }  ISomeApi api = RestClient.For<ISomeApi>(""http://api.example.com"");  // Requests http://somenedpoint.com/search?filter=foo&filter=bar await api.SearchAsync(""foo"", ""bar""); You can also have an array of query parameters: public interface ISomeApi {     // You can use IEnumerable<T>, or any type which implements IEnumerable<T>      [Get(""search"")]     Task<SearchResult> SearchAsync([Query(""filter"")] IEnumerable<string> filters); }  ISomeApi api = RestClient.For<ISomeApi>(""http://api.example.com"");  // Requests http://api.exapmle.com/search?filter=foo&filter=bar&filter=baz await api.SearchAsync(new[] { ""foo"", ""bar"", ""baz"" }); Serialization of Variable Query Parameters By default, query parameter values will be serialized by calling ToString() on them. This means that the primitive types most often used as query parameters - string, int, etc - are serialized correctly. However, some APIs require that you send e.g. JSON as a query parameter. In this case, you can mark the parameter for custom serialization using QuerySerializationMethod.Serialized, and further control it by using a custom serializer. For example: public class SearchParams {     public string Term { get; set; }     public string Mode { get; set; } }  public interface ISomeApi {     [Get(""search"")]     Task<SearchResult> SearchAsync([Query(QuerySerializationMethod.Serialized)] SearchParams param); }  ISomeApi = RestClient.For<ISomeApi>(""http://api.example.com""); // Requests http://api.example.com/search?params={""Term"": ""foo"", ""Mode"": ""basic""} await api.SearchAsync(new SearchParams() { Term = ""foo"", Mode = ""basic"" }); You can also specify the default serialization method for an entire api by specifying [SerializationMethods(Query = QuerySerializationMethod.Serialized)] on the interface, or for all parameters in a given method by specifying it on the method, for example: [SerializationMethods(Query = QuerySerializationMethods.Serialized)] public interface ISomeApi {     [Get(""search"")]     [SerializationMethods(Query = QuerySerializationMethod.ToString)]     Task<SearchResult> SearchWithToStringAsync([Query] SearchParams param);      [Get(""search"")]     Task<SearchResult> SearchWithSerializedAsync([Query] SearchParams param); } Query Parameters Map Sometimes you have a load of query parameters, or they're generated dynamically, etc. In this case, you may want to supply a dictionary of query parameters, rather than specifying a load of method parameters. To facilitate this, you may decorate one or more method parameters with [QueryMap]. The parameter type must be an IDictionary<TKey, TValue>. Query maps are handled the same way as other query parameters: serialization, handling of enumerables, null values, etc, behave the same. You can control whether values are serialized using a custom serializer or ToString() using e.g. [QueryMap(QuerySerializationMethod.Serialized)]. For example: public interface ISomeApi {     [Get(""search"")]     // I've used IDictionary<string, string[]> here, but you can use whatever type parameters you like,     // or any type which implements IDictionary<TKey, TValue>     Task<SearchResult> SearchBlogPostsAsync([QueryMap] IDictionary<string, string[]> filters); }  var api = RestClient.For<ISomeApi>(""http://api.example.com""); var filters = new Dictionary<string, string[]>() {     { ""title"", new[] { ""bobby"" } },     { ""tag"", new[] { ""c#"", ""programming"" } } };  // Requests http://api.example.com/search?title=bobby&tag=c%23&tag=programming var searchResults = await api.SearchBlogPostsAsync(filters); Path Parameters Sometimes you also want to be able to control some parts of the path itself, rather than just the query parameters. This is done using placeholders in the path, and corresponding method parameters decorated with [Path]. For example: public interface ISomeApi {     [Get(""user/{userId}"")]     Task<User> FetchUserAsync([Path] string userId); }  ISomeApi api = RestClient.For<ISomeApi>(""http://api.example.com"");  // Requests http://api.example.com/user/fred await api.FetchUserAsync(""fred""); As with [Query], the name of the placeholder to substitute is determined by the name of the parameter. If you want to override this, you can pass an argument to [Path(""placeholder"")], e.g.: public interface ISomeApi {     [Get(""user/{userId}"")]     Task<User> FetchUserAsync([Path(""userId"")] string idOfTheUser); } Every placeholder must have a corresponding parameter, and every parameter must relate to a placeholder. Body Content If you're sending a request with a body, you can specify that one of the parameters to your method contains the body you want to send, using the [Body] attribute. public interface ISomeApi {     [Post(""users/new"")]     Task CreateUserAsync([Body] User user); } Exactly how this will be serialized depends on the type of parameters: If the type is Stream, then the content will be streamed via StreamContent. If the type is String, then the string will be used directly as the content (using StringContent). If the parameter has the attribute [Body(BodySerializationMethod.UrlEncoded)], then the content will be URL-encoded (see below). If the type is a HttpContent (or one of its subclasses), then it will be used directly. This is useful for advanced scenarios Otherwise, the parameter will be serialized as JSON (by default, or you can customize this if you want, see Controlling Serialization and Deserialization). URL Encoded Bodies For APIs which take form posts (i.e. serialized as application/x-www-form-urlencoded), initialize the [Body] attribute with BodySerializationMethod.UrlEncoded. This parameter must implement IDictionary or IDictionary<TKey, TValue>. If any of the values implement IEnumerable, then they will be serialized as an array of values. For example: public interface IMeasurementProtocolApi {     [Post(""collect"")]     Task CollectAsync([Body(BodySerializationMethod.UrlEncoded)] Dictionary<string, object> data); }  var data = new Dictionary<string, object> {     {""v"", 1},      {""tids"", new[] { ""UA-1234-5"", ""UA-1234-6"" },      {""cid"", new Guid(""d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c"")},      {""t"", ""event""}, };  // Serialized as: v=1&tids=UA-1234-5&tids=UA-1234-6&cid=d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c&t=event await api.CollectAsync(data); You can also control the default body serialization method for an entire API by specifying [SerializationMethods(BodySerializationMthod.UrlEncoded)] on the interface itself: [SerializationMethods(BodySerializationMethod.UrlEncoded)] public interface ISomeApi {     [Post(""collect"")]     Task CollectAsync([Body] Dictionary<string, object> data); } Response Status Codes By default, any response status code which does not indicate success (as indicated by HttpResponseMessage.IsSuccessStatusCode) will cause an ApiException to be thrown. This is usually what you want (you don't want to try and parse the result of a failed request), but sometimes you're expecting failure. In this case, you can apply [AllowAnyStatusCode] to you method, or indeed to the whole interface, to suppress this behaviour. If you do this, then you probably want to make your method return either a HttpResponseMessage or a Response<T> (see Return Types) so you can examine the response code yourself. For example: public interface ISomeApi {     [Get(""users/{userId}"")]     [AllowAnyStatusCode]     Task<Response<User>> FetchUserThatMayNotExistAsync([Path] int userId); }  ISomeApi api = RestClient.For<ISomeApi>(""http://api.example.com"");  var response = await api.FetchUserThatMayNotExistAsync(3); if (response.ResponseMessage.StatusCode == HttpStatusCode.NotFound) {     // User wasn't found } else {     var user = response.GetContent();     // ... } Cancelling Requests If you want to be able to cancel a request, pass a CancellationToken as one of the method paramters. public interface ISomeApi {     [Get(""very-large-response"")]     Task<LargeResponse> GetVeryLargeResponseAsync(CancellationToken cancellationToken); } Headers Specifying headers is actually a surprisingly large topic, and can be done in several ways, depending on the precise behaviour you want. Constant Interface Headers If you want to have a header that applies to every single request, and whose value is fixed, use a constant interface headers. These are specified as [Header(""Name"", ""Value"")] attributes on the interface. For example: [Header(""User-Agent"", ""RestEase"")] [Header(""Cache-Control"", ""no-cache"")] public interface IGitHubApi {     [Get(""users"")]     Task<List<User>> GetUsersAsync(); } Variable Interface Headers If you want to have a header that applies to every single request, and whose value is variable, then use a variable interface header. These are specifed using properties, using a [Header(""Name"")] attribute on that property. For example: public interface ISomeApi {     [Header(""X-API-Key"")]     string ApiKey { get; set; }      [Get(""users/{userId}"")]     Task<User> FetchUserId([Path] string userId); }  ISomeApi api = RestClient.For<ISomeApi>(""http://api.example.com"") api.ApiKey = ""The-API-KEY-value""; // ... For nullable property types, you can also specify a default (which will be used when the property is null): public interface ISomeApi {     [Header(""X-API-Key"", ""None"")]     string ApiKey { get; set; }      [Get(""users/{userId}"")]     Task<User> FetchUserId([Path] string userId); }  ISomeApi api = RestClient.For<ISomeApi>(""http://api.example.com"")  // ""X-API-Key: None"" var user = await api.FetchUserAsync(""bob""); Constant Method Headers If you want to have a header which only applies to a particular method, and whose value never changes, then use a constant method header. Like constant interface headers, these are defined in their entirety using an attribute. However, instead of applying the attribute to the interface, you apply it to the method. public interface IGitHubApi {     [Header(""User-Agent"", ""RestEase"")]     [Header(""Cache-Control"", ""no-cache"")]     [Get(""users"")]     Task<List<User>> GetUsersAsync();      // This method doesn't have any headers applied     [Get(""users/{userId}"")]     Task<User> GetUserAsync([Path] string userId); } Variable Method Headers Finally, you can have headers which only apply to a single method and whose values are variable. These consist of a [Header(""Name"")] attribute applied to a method parameter. public interface ISomeApi {     [Get(""users"")]     Task<List<User>> GetUsersAsync([Header(""Authorization"")] string authorization); } Redefining Headers You've probably noticed that there are 4 places you can define a header: on the interface, as a property, on a method, and as a parameter (or, Constant Interface Headers, Variable Interface Headers, Constant Method Headers, and Variable Method Headers, respectively). There are rules specifying how headers from different places are merged. Constant and Variable Interface headers are merged, as are Constant and Variable Method headers. That is, if a header is supplied both as an attribute on the interface, and as a property, that header will have multiple values. Method headers will replace Interface headers. If you have the same header on a method and on the interface, then the header on the method will replace the one on the interface. Another rule is that a header with a value of null will not be added, but can still replace a previously-defined header of the same name. Example time: [Header(""X-InterfaceOnly"", ""InterfaceValue"")] [Header(""X-InterfaceAndParamater"", ""InterfaceValue"")] [Header(""X-InterfaceAndMethod"", ""InterfaceValue""] [Header(""X-InterfaceAndParameter"", ""InterfaceValue""] [Header(""X-InterfaceAndMethod-ToBeRemoved"", ""InterfaceValue"")] public interface ISomeApi {     [Header(""X-ParameterOnly"")]     string ParameterOnlyHeader { get; set; }      [Header(""X-InterfaceAndParameter"")]     string InterfaceAndParameterHeader { get; set; }      [Header(""X-ParameterAndMethod"")]     string ParameterAndMethodHeader { get; set; }      [Get(""url"")]     [Header(""X-MethodOnly"", ""MethodValue"")]     [Header(""X-MethodAndParameter"", ""MethodValue"")]     [Header(""X-ParameterAndMethod"", ""MethodValue"")]     [Header(""X-InterfaceAndMethod-ToBeRemoved"", null)]     Task DoSomethingAsync(         [Header(""X-ParameterOnly"")] string parameterOnly,         [Header(""X-MethodAndParameter"")] string methodAndParameter,         [Header(""X-InterfaceAndParameter"")] string interfaceAndParameter     ); }  ISomeApi api = RestClient.For<ISomeApi>(""http://api.example.com"");  api.ParameterOnlyHeader = ""ParameterValue""; api.InterfaceAndParameterHeader = ""ParameterValue""; api.ParameterAndMethodHeader = ""ParameterValue"";  await api.DoSomethingAsync(""ParameterValue"", ""ParameterValue"", ""ParameterValue"");  // Has the following headers: // X-InterfaceOnly: InterfaceValue // X-InterfaceAndParameter: InterfaceValue, ParameterValue // X-InterfaceAndMethod: MethodValue // X-InterfaceAndParameter: ParameterValue  // X-ParameterAndMethod: MethodValue  // X-MethodOnly: MethodValue // X-MethodAndParameter: MethodValue, ParameterValue  // X-ParameterAndMethod-ToBeRemoved isn't set, because it was removed  Controlling Serialization and Deserialization By default, RestEase will use Json.NET to deserialize responses, and serialize request bodies and query parameters. However, you can change this, either by specifying custom JsonSerializerSettings, or by providing your own serializers / deserializers Custom JsonSerializerSettings If you want to specify your own JsonSerializerSettings, you can do this by constructing a new RestClient, assigning JsonSerializerSettings, then calling For<T>() to obtain an implementation of your interface, for example: var settings = new JsonSerializerSettings() {     ContractResolver = new CamelCasePropertyNamesContractResolver(),     Converters = { new StringEnumConverter() } };  var api = new RestClient(""http://api.example.com"") {     JsonSerializerSettings = settings }.For<ISomeApi>(); Custom Serializers and Deserializers You can completely customize how requests are serialized, and responses deserialized, by providing your own serializer/deserializer implementations: To control how responses are deserialized, implement IResponseDeserializer To control how request bodies are serialized, implement IRequestBodySerializer To control how request query parameters are serialized, implement IRequestQueryParamSerializer You can, of course, provide a custom implementation of only one of these, or all of them, or any number in between. Deserializing responses: IResponseDeserializer This class has a single method, which is called whenever a response is received which needs deserializing. It is passed the HttpResponseMessage (so you can read headers, etc, if you want) and its string content which has already been asynchronously read. For an example, see JsonResponseDeserializer. To tell RestEase to use it, you must create a new RestClient, assign its ResponseDeserializer property, then call For<T>() to get an implementation of your interface. // This API returns XML  public class XmlResponseDeserializer : IResponseDeserializer {     public T Deserialize<T>(string content, HttpResponseMessage response)     {         // Consider caching generated XmlSerializers         var serializer = new XmlSerializer(typeof(T));          using (var stringReader = new StringReader(content))         {             return (T)serializer.Deserialize(stringReader);         }     } }  // ...  var api = new RestClient(""http://api.example.com"") {     ResponseDeserializer = new XmlResponseDeserializer() }.For<ISomeApi>(); Serializing request bodies: IRequestBodySerializer This class has a single method, which is called whenever a request body requires serialization (i.e. is decorated with [Body(BodySerializationMethod.Serialized)]). It returns any HttpContent subclass you like, although StringContent is likely to be a common choice. When writing an IRequestBodySerializer's SerializeBody implementation, you may choose to provide some default headers, such as Content-Type. These will be overidden by any [Header] attributes. For an example, see JsonRequestBodySerializer. To tell RestEase to use it, you must create a new RestClient, assign its RequestBodySerializer property, then call For<T>() to get an implementation of your interface. For example: public class XmlRequestBodySerializer : IRequestBodySerializer {     public HttpContent SerializeBody<T>(T body)     {         if (body == null)             return null;          // Consider caching generated XmlSerializers         var serializer = new XmlSerializer(typeof(T));          using (var stringWriter = new StringWriter())         {             serializer.Serialize(stringWriter, body);             var content = new StringContent(stringWriter.ToString());             // Set the default Content-Type header to application/xml             content.Headers.ContentType.MediaType = ""application/xml"";             return content;         }     } }  // ...  var api = new RestClient(""http://api.example.com"") {     RequestBodySerializer = new XmlRequestBodySerializer() }.For<ISomeApi>(); Serializing request parameters: IRequestQueryParamSerializer This class has two methods: one is called whenever a scalar query parameter requires serialization (i.e. is decorated with [Query(QuerySerializationMethod.Serialized)]); the other is called whenever a collection of query parameters (that is, the query parameter has type IEnumerable<T> for some T) requires serialization. Both of these methods want you to return an IEnumerable<KeyValuePair<string, string>>, where each key corresponds to the name of a query name/value pair, and each value corresponds to the value. For example: return new[] {     new KeyValuePair<string, string>(""foo"", ""bar""),     new KeyValuePair<string, string>(""foo"", ""baz""),     new KeyValuePair<string, string>(""yay"", ""woo"") }  // Will get serialized to '...?foo=bar&foo=baz&yay=woo' It is unlikely that you will return more than one KeyValuePair from the method which serializes scalar query parameters, but the flexibility is there. For an example, see JsonRequestQueryParamSerializer. To tell RestEase to use it, you must create a new RestClient, assign its RequestQueryParamSerializer property, then call For<T>() to get an implementation of your interface. For example: // It's highly unlikely that you'll get an API which requires xml-encoded query // parameters, but for the sake of an example:  public class XmlRequestQueryParamSerializer : IRequestQueryParamSerializer {     public IEnumerable<KeyValuePair<string, string>> SerializeQueryParam<T>(string name, T value)     {         if (value == null)             yield break;          // Consider caching generated XmlSerializers         var serializer = new XmlSerializer(typeof(T));          using (var stringWriter = new StringWriter())         {             serializer.Serialize(stringWriter, value);             yield return new KeyValuePair<string, string>(name, stringWriter.ToString()));         }     }      public IEnumerable<KeyValuePair<string, string>> SerializeQueryCollectionParam<T>(string name, IEnumerable<T> values)     {         if (values == null)             yield break;          // Consider caching generated XmlSerializers         var serializer = new XmlSerializer(typeof(T));          foreach (var value in values)         {             if (value != null)             {                 using (var stringWriter = new StringWriter())                 {                     serializer.Serialize(stringWriter, value);                     yield return new KeyValuePair<string, string>(name, stringWriter.ToString()));                 }             }         }     } }  var api = new RestClient(""http://api.example.com"") {     RequestQueryParamSerializer = new XmlRequestQueryParamSerializer() }.For<ISomeApi>(); Controlling the Requests RestEase provides two ways for you to manipulate how exactly requests are made, before you need to resort to Customizing RestEase. RequestModifier The first is a RestClient.For<T> overload which lets you specify a delegate which is invoked whenever a request is made. This allows you to inspect and alter the request in any way you want: changing the content, changing the headers, make your own requests in the meantime, etc. For example, if you need to refresh an oAuth access token occasionally (using the ADAL library as an example): public interface IMyRestService {     [Get(""getPublicInfo"")]     Task<Foobar> SomePublicMethodAsync();      [Get(""secretStuff"")]     [Header(""Authorization"", ""Bearer"")]     Task<Location> GetLocationOfRebelBaseAsync(); }  AuthenticationContext context = new AuthenticationContext(...); IGitHubApi api = RestClient.For<IGitHubApi>(""http://api.github.com"", async (request, cancellationToken) => {     // See if the request has an authorize header     var auth = request.Headers.Authorization;     if (auth != null)     {         // The AquireTokenAsync call will prompt with a UI if necessary         // Or otherwise silently use a refresh token to return a valid access token          var token = await context.AcquireTokenAsync(""http://my.service.uri/app"", ""clientId"", new Uri(""callback://complete"")).ConfigureAwait(false);         request.Headers.Authorization = new AuthenticationHeaderValue(auth.Scheme, token);   } });  Custom HttpClient The second is a RestClient.For<T> overload which lets you specify a custom HttpClient to use. This lets you customize the HttpClient, e.g. to set the request timeout. It also lets you specify a custom HttpMessageHandler subclass, which allows you to control all sorts of things. For example, if you wanted to 1) adjust the request timeout, and 2) allow invalid certificates (although the same approach would apply if you wanted to customize how certificates are validated), you could do something like this. Note that WebRequestHandler is a HttpMessageHandler subclass which allows you to specify things like ServerCertificateValidationCallback. public class CustomHttpClientHandler : WebRequestHandler {     // Let's log all of our requests!     private static readonly Logger logger = LogManager.GetCurrentClassLogger();      public CustomHttpClientHandler()     {         // Allow any cert, valid or invalid         this.ServerCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) => true;     }      protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)     {         if (logger.IsTraceEnabled)         {             var response = await base.SendAsync(request, cancellationToken);             logger.Trace((await response.Content.ReadAsStringAsync()).Trim());             return response;         }         else         {             return await base.SendAsync(request, cancellationToken);         }     } }  var httpClient = new HttpClient(new CustomHttpClientHandler()) {     BaseAddress = new Uri(""https://secure-api.example.com""),     Timeout = TimeSpan.FromSeconds(3), // Very slow to respond, this server };  ISomeApi api = RestClient.For<ISomeApi>(httpClient); Customizing RestEase You've already seen how to specify custom Serializers and Deserializers, and control requests. RestEase has been written in a way which makes it very easy to customize exactly how it works. In order to describe this, I'm first going to have to outline its architecture. Given an API like: public interface ISomeApi {     [Get(""users/{userId}"")]     Task GetUserAsync([Path] string userId); } Calling RestClient.For<ISomeApi>(...) will cause a class like this to be generated: namespace RestEase.AutoGenerated {     public class ISomeApi     {         private readonly IRequester requester;          public ISomeApi(IRequester requester)         {             this.requester = requester;         }          public Task GetUserAsync(string userId)         {             var requestInfo = new RequestInfo(HttpMethod.Get, ""users/{userId}"");             requestInfo.AddPathParameter<string>(""userId"", userId);             return this.requester.RequestVoidAsync(requestInfo);         }     } } Now, you cannot customize what this generated class looks like, but you can see it doesn't actually do very much: it just builds up a RequestInfo object, then sends it off to the IRequester (which does all of the hard work). What you can do however is to provide your own IRequester implementation, and pass that to an appropriate overload of RestClient.For<T>. In fact, the default implementation of IRequester, Requester, has been carefully written so that it's easy to extend: each little bit of functionality is broken out into its own virtual method, so it's easy to replace just the behaviour you need. Have a read through Requester, figure out what you want to change, subclass it, and provide an instance of that subclass to RestClient.For<T>. Interface Accessibility Since RestEase generates an interface implementation in a separate assembly, the interface ideally needs to be public. If you don't want to do this, you'll need to mark RestEase as being a 'friend' assembly, which allows RestEase to see your internal types. Add the following line to your AssemblyInfo.cs: [assembly: InternalsVisibleTo(RestEase.RestClient.FactoryAssemblyName)]  Using Generic Interfaces When using something like ASP.NET Web API, it's a fairly common pattern to have a whole stack of CRUD REST services. RestEase supports these, allowing you to define a single API interface with a generic type: public interface IReallyExcitingCrudApi<T, TKey> {     [Post("""")]     Task<T> Create([Body] T paylod);      [Get("""")]     Task<List<T>> ReadAll();      [Get(""{key}"")]     Task<T> ReadOne(TKey key);      [Put(""{key}"")]     Task Update(TKey key, [Body]T payload);      [Delete(""{key}"")]     Task Delete(TKey key); } Which can be used like this: // The ""/users"" part here is kind of important if you want it to work for more  // than one type (unless you have a different domain for each type) var api = RestClient.For<IReallyExcitingCrudApi<User, string>>(""http://api.example.com/users""); Interface Inheritance You're allowed to use interface inheritance to share common properties and methods between different APIs. However, you are not allowed to put any attributes ([Header] or [AllowAnyStatusCode]) onto the child interfaces being inherited, just onto the parent-most interface. For example: public interface IAuthenticatedEndpoint {     [Header(""X-Api-Token"")]     string ApiToken { get; set; }     [Header(""X-Api-Username"")]     string ApiUsername { get; set; } }  public interface IDevicesEndpoint : IAuthenticatedEndpoint {     [Get(""/devices"")]     Task<IList<Device>> GetAllDevices([QueryMap] IDictionary<string, string> filters); }  public interface IUsersEndpoint : IAuthenticatedEndpoint {     [Get(""/user"")]     Task<User> FetchUserAsync(int userid) } FAQs I want to use Basic Authentication Something like this... public interface ISomeApi {     [Header(""Authorization"")]     AuthenticationHeaderValue Authorization { get; set; }      [Get(""foo"")]     Task DoSomethingAsync(); }  ISomeApi api = RestClient.For<ISomeApi>(""http://api.example.com""); var value = Convert.ToBase64String(Encoding.ASCII.GetBytes(""username:password1234"")); api.Authorization = new AuthenticationHeaderValue(""Basic"", value);  await api.DoSomethingAsync(); I need to request an absolute path Sometimes your API responses will contain absolute URLs, for example a ""next page"" link. Therefore you'll want a way to request a resource using an absolute URL which overrides the base URL you specified. Thankfully this is easy: if you give an absolute URL to e.g. [Get(""http://api.example.com/foo"")], then the base URL will be ignored. public interface ISomeApi {     [Get(""users"")]     Task<UsersResponse> FetchUsersAsync();      [Get(""{url}"")]     Task<UsersResponse> FetchUsersByUrlAsync([Path] string url); }  ISomeApi api = RestClient.For<ISomeApi(""http://api.example.com"");  var firstPage = await api.FetchUsersAsync(); // Actually put decent logic here... var secondPage = await api.FetchUsersByUrlAsync(firstPage.NextPage); I may get responses in both XML and JSON, and want to deserialize both Occasionally you get an API which can return both JSON and XML (apparently...). In this case, you'll want to auto-detect what sort of response you got, and deserialize with an appropriate deserializer. To do this, use a custom deserializer, which can do this detection. public class HybridResponseDeserializer : IResponseDeserializer {     private T DeserializeXml<T>(string content)     {         // Consider caching generated XmlSerializers         var serializer = new XmlSerializer(typeof(T));          using (var stringReader = new StringReader(content))         {             return (T)serializer.Deserialize(stringReader);         }     }      private T DeserializeJson<T>(string content)     {         return JsonConvert.Deserialize<T>(content);     }      public T Deserialize<T>(string content, HttpResponseMessage response)     {         switch (response.Content.Headers.ContentType.MediaType)         {             case ""application/json"":                 return this.DeserializeJson<T>(content);             case ""application/xml"":                 return this.DeserializeXml<T>(content);         }          throw new ArgumentException(""Response was not JSON or XML"");     } }  var api = RestClient.For<ISomeApi>(""http://api.example.com"", new HybridResponseDeserializer()); Is RestEase thread safe? Yes. It is safe to create implementations of interfaces from multiple threads at the same time (and to create multiple implementations of the same interface), and it is safe to use an implementation from multiple threads at the same time. I want to upload a file Let's assume you want to upload a file (from a stream), setting its name and content-type manually (skip these bits of not). There are a couple of ways of doing this, depending on your needs: public interface ISomeApi {     [Header(""Content-Disposition"", ""form-data; filename=\""somefile.txt\"""")]     [Header(""Content-Type"", ""text/plain"")]     [Post(""upload"")]     Task UploadFileVersionOneAsync([Body] Stream file);      [Post(""upload"")]     // You can use strings instead of strongly-typed header values, if you want     Task UploadFileVersionTwoAsync(         [Header(""Content-Disposition"")] ContentDispositionHeaderValue contentDisposition,         [Header(""Content-Type"")] MediaTypeHeaderValue contentType,         [Body] Stream file);      [Post(""upload"")]     Task UploadFileVersionThreeAsync([Body] HttpContent content); }  ISomeApi api = RestClient.For<ISomeApi>(""http://api.example.com"");  // Version one (constant headers) using (var fileStream = File.OpenRead(""somefile.txt"")) {     await api.UploadFileVersionOneAsync(fileStream); }  // Version two (variable headers) using (var fileStream = File.OpenRead(""somefile.txt"")) {     var contentDisposition = new ContentDispositionHeaderValue(""form-header"") { FileName = ""\""somefile.txt\"""" };     var contentType = new MediaTypeHeaderValue(""text/plain"");     await api.UploadFileVersionTwoAsync(contentDisposition, contentType, fileStream); }  // Version three (precise control over HttpContent) using (var fileStream = File.OpenRead(""somefile.txt"")) {     var fileContent = new StreamContent(fileStream);     fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue(""form-header"") { FileName = ""\""somefile.txt\"""" };     fileContent.Headers.ContentType = new MediaTypeHeaderValue(""text/plain"");     await api.UploadFileVersionThreeAsync(fileContent); } Obviously, set the headers you need - don't just copy me blindly. Comparison to Refit RestEase is very heavily inspired by Paul Betts' Refit. Refit is a fantastic library, and in my opinion does a lot of things very right. It was the first C# REST client library that I actually enjoyed using. I wrote RestEase for two reasons: 1) there were a couple of things about Refit which I didn't like, and 2) I thought it would be fun. Here's a brief summary of pros/cons, compared to Refit: Pros No autogenerated RefitStubs.cs Supports CancellationTokens for Task-based methods Supports method overloading Supports property-defined headers Better support for API calls which are expected to fail: [AllowAnyStatusCode] and Response<T> Easier to customize: Can specify custom response deserializer Can specify custom request serializer Can customize almost every aspect of setting up and creating the request (through implementing IRequester) Supports [QueryMap] Supports custom query parameter serialization Supports arrays of query parameters (and body parameters when serializing a body parameter as UrlEncoded) Supports IDictionary<TKey, TValue> as well as IDictionary types when serializing a body parameter as UrlEncoded. This allows e.g. ExpandoObject to be used here Cons Interfaces need to be public, or you need to add [assembly: InternalsVisibleTo(RestClient.FactoryAssemblyName)] to your AssemblyInfo.cs Only supports .NET Framework No IObservable support Slightly more work done at runtime (but not very much more) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/canton7/RestEase"	"Easy-to-use typesafe REST API client library, which is simple and customisable. Heavily inspired by Refit"	"true"
"IDE"	"SharpDevelop"	"https://github.com/icsharpcode/SharpDevelop"	"A free IDE for.NET programming languages"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"922"	"181"	"368"	"GitHub - icsharpcode/SharpDevelop: #develop (short for SharpDevelop) is a free IDE for .NET programming languages. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 181 Star 922 Fork 368 icsharpcode/SharpDevelop Code Issues 229 Pull requests 17 Wiki Pulse Graphs #develop (short for SharpDevelop) is a free IDE for .NET programming languages. http://www.icsharpcode.net/OpenSource/SD/ 15,059 commits 14 branches 59 releases 72 contributors C# 81.1% JavaScript 17.5% C++ 0.5% Visual Basic 0.5% HTML 0.2% Pascal 0.1% Other 0.1% C# JavaScript C++ Visual Basic HTML Pascal Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 4.x 4.0 4.1 4.2 addin-manager-package-subdirectories filemodels formsdesignerappdomain master newNR newNRILSpyDebugger newNRvisualizers nuget-3.0-ctp reports shortcuts Nothing to show 5.0.0 5.0-RC1 5.0-Beta5 5.0-Beta4 5.0-Beta3 5.0-Beta2 5.0-Beta1 4.4.1 4.4.0 4.3.3 4.3.2 4.3.1 4.3.0 4.3-Beta1 4.2.2 4.2.1 4.2.0 4.2-RC1 4.2-Beta2 4.2-Beta1 4.1.0 4.1-RC 4.1-Beta 4.0.0 4.0-RC2 4.0-RC1 4.0-Beta4 4.0-Beta3 4.0-Beta2 4.0-Beta1 3.2.1 3.2.0 3.2-RC2 3.2-RC1 3.1.1 3.1.0 3.1-RC2 3.1-RC1 3.1-Beta1 3.0.0 3.0-RC 3.0-Beta3 3.0-Beta2 3.0-Beta1 2.2.1 2.2.1b 2.2.0 2.1.0 2.1-RC1 2.1-Beta3 2.1-Beta2 2.1-Beta1 2.0.1 2.0.0 2.0-RC2 2.0-RC1 2.0-Beta3 2.0-Beta2 2.0-Beta1 Nothing to show New pull request Latest commit f75c839 Jun 19, 2016 dgrunwald C# syntax highlighting: support string interpolation syntax Permalink Failed to load latest commit information. data Updated resources from RFT. Oct 1, 2015 doc Remove RC designation, update years Apr 13, 2016 samples Use git submodule for WpfDesigner. Dec 25, 2015 src C# syntax highlighting: support string interpolation syntax Jun 19, 2016 .editorconfig Remove WpfDesigner Dependecy to SD Widgets Oct 5, 2015 .gitattributes Normalize newlines in *.cs Nov 5, 2013 .gitignore GitIgnore Vs2015 Files Dec 29, 2014 .gitmodules Use git submodule for WpfDesigner. Dec 25, 2015 .tgitconfig Update tgit.icon in .tgitconfig because path renamed Feb 2, 2014 CONTRIBUTING.md Add contributing document. Dec 13, 2015 README.md Windows SDK 7.1 is still necessary May 6, 2014 SharpDevelop.Tests.sln Use MSBuild 14.0 if available. Jun 5, 2016 SharpDevelop.sln Use MSBuild 14.0 if available. Jun 5, 2016 buildSetupAndRunTests.bat Use .NET 4 RTM (v4.0.30319) in .bat files and version check. Apr 12, 2010 clean.bat Add AvalonEdit, NRefactory, and Cecil submodules. Dec 25, 2015 debugbuild.bat Add AvalonEdit, NRefactory, and Cecil submodules. Dec 25, 2015 releasebuild.bat Add AvalonEdit, NRefactory, and Cecil submodules. Dec 25, 2015 README.md #develop (short for SharpDevelop) Overview #develop is a free Integrated Development Environment (IDE) for C#, VB.NET, Boo, IronPython, IronRuby and F# projects on Microsoft's .NET platform. It is written (almost) entirely in C#, and comes with features you would expect in an IDE plus a few more. The #develop project started on September 11th, 2000. The project was initiated by Mike Krüger. In the course of the project, several contributors joined in. If you want to contribute see ""Joining the team"". Official Website Forums Build Artefacts (Nightly Builds) How To Compile #Develop can be compiled using the supplied .bat files, or in #Develop itself. System Requirements (running #Develop) Windows Vista or higher. .NET 4.5 Visual C++ 2008 SP1 Runtime Extended Requirements (building #Develop) Microsoft Build Tools 2013 .NET 3.5 SP1 .NET 4.5 SDK (part of Windows SDK 8.0) Windows SDK 7.1 Windows SDK 7.0 (optional; C++ compiler needed for profiler) Windows PowerShell If you have cloned the SD git repository: git must be available on your PATH Libraries and Integrated tools: Avalon Dock : New BSD License (BSD) (thanks to Adolfo Marinucci) Graph# IQToolkit Irony ITextSharp log4Net Mono T4 Mono.Cecil: MIT License (thanks to Jb Evain) Sharp Svn SQLite WPFToolkit Integrated Tools (packaged with #Develop): IronPython IronRuby NuGet NUnit OpenCover WiX Reusable Libraries (Part of #Develop): AvalonEdit Debugger.Core ICSharpCode.Core ICSharpCode.Decompiler NRefactory SharpTreeView WPF Designer #Develop Contributors Developers Mike Krüger (Project Founder) Daniel Grunwald (Technical Lead) Andreas Weizel Matt Ward David Srbecky(Debugger) Siegfried Pammer Peter Forstmeier(#Develop Reports) Non-Developers Christoph Wille (PM) Bernhard Spuida (Kalfaktor) Past Developers (Non-Exhaustive List) Mike Krüger (Project Founder) Alexandre Semenov Andrea Paatz Christian Hornung David Alpert Denis ERCHOFF Dickon Field Georg Brandl Ifko Kovacka Itai Bar-Haim Ivan Shumilin John Reilly John Simons Justin Dearing Markus Palme Mathias Simmack Matt Everson Nathan Allan Nikola Kavaldjiev Philipp Maihart Poul Staugaard Robert Pickering Robert Zaunere Roman Taranchenko Russell Wilkins Scott Ferrett Sergej Andrejev Shinsaku Nakagawa Tomasz Tretkowski Troy Simpson Copyright 2014 AlphaSierraPapa for the SharpDevelop team. SharpDevelop is distributed under the MIT license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/icsharpcode/SharpDevelop"	"A free IDE for.NET programming languages"	"true"
"IDE"	"MonoDevelop"	"https://github.com/mono/monodevelop"	"MonoDevelop is a cross platform IDE mostly aimed at Mono/.NET developers"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1644"	"210"	"695"	"GitHub - mono/monodevelop: MonoDevelop is a cross platform IDE mostly aimed at Mono/.NET developers Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 210 Star 1,644 Fork 695 mono/monodevelop Code Pull requests 31 Pulse Graphs MonoDevelop is a cross platform IDE mostly aimed at Mono/.NET developers http://www.monodevelop.com 46,234 commits 198 branches 347 releases 234 contributors C# 99.2% Python 0.3% Makefile 0.2% JavaScript 0.1% Shell 0.1% Objective-C 0.1% C# Python Makefile JavaScript Shell Objective-C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3d_segues 5.9-new-project-win32-highdpi 64bit NotificationService Searchlight TypescriptBinding XMExtensions abock account-activation-transient add-custom-mac-editor-cursor add-restart-ide allow-overwrite-existing-files-when-adding-files android-resource-designer-cs aspnet-5.2-fixes better_resx bug20530 bug25586 cleanup cycle6-baseline cycle6-bug-34284 cycle6-bug-35042 cycle6-bug-35098 cycle6-bug-36421 cycle6-bug36774 cycle6-bug38345 cycle6-c6sr1 cycle6-c6sr2 cycle6-c6sr3 cycle6-c6sr4 cycle6-cocoaapp-fsharp-wizard-fix cycle6-fix-33965 cycle6-ipad-pro-images cycle6-ipad-pro cycle6-npd-disable-insights cycle6-sdkversions-fix cycle6 cycle7-alpha3 cycle7-android-http-handler cycle7-android-n cycle7-baseline cycle7-bug-40714 cycle7-copy-paste-fix cycle7-fix-40839 cycle7-fix-42284 cycle7-fix40504 cycle7-fix40710 cycle7-fix40770 cycle7-fix40875 cycle7-fix40892 cycle7-fix40893 cycle7-fix41245 cycle7-fix41253 cycle7-fix41694 cycle7-fix41795 cycle7-fix42011 cycle7-fix42575 cycle7-nuget-2.12 cycle7-removeunderlineerroroption cycle7-sku-simplification cycle7-sr0 cycle7-sr1-fix42575 cycle7-sr1 cycle7-svn-cli cycle7 cycle8-breadcrumb cycle8-bug-drag-and-drop-file-between-folders cycle8-fix-duplicate-vs-keybinding cycle8-fix42310 cycle8-navigateto cycle8-navigationrevamp cycle8-preview-fix-40825 cycle8-preview-fix-40839 cycle8-preview2 cycle8 dark-skin-black-toolbar dark-skin-gtk-experimental dark-skin-mac-toolbar debug-cycle7 device-hang-fix drop-sketches dynamic-channels editor-refactoring elcapitan-gtkrc extra-startup-debugging feature_methodinfo feature_pintabs fix-28033-tasks-localization fix-37189-floating-dock-position fix-42239 fix-hidpi-quicktasks fix-inactive-tree-selection-colors-40877 fix-runtime-panel-line-height fsharp-fix-shared-assets fsi-oop hdpi-win32 incremantalParsing ios-requires-fullscreen mac-binding-project maceditor master-fix-40379 master mono451 monodevelop-4.0.12-branch monodevelop-4.0.13-branch monodevelop-4.0.14-branch monodevelop-4.1.12-branch monodevelop-4.2.3-branch monodevelop-4.2.4-branch monodevelop-4.3.1-branch monodevelop-4.3.2-branch monodevelop-5.0-branch monodevelop-5.0.1-branch monodevelop-5.1-20402 monodevelop-5.1-branch monodevelop-5.1.1-branch monodevelop-5.1.2-branch monodevelop-5.1.4-branch monodevelop-5.2-branch monodevelop-5.3-branch monodevelop-5.4-branch monodevelop-5.5-branch monodevelop-5.6-branch monodevelop-5.6.1-branch monodevelop-5.7-branch monodevelop-5.8-branch monodevelop-5.9-branch-android-m-preview monodevelop-5.9-branch-bug-29676 monodevelop-5.9-branch-bug-30814 monodevelop-5.9-branch-bug-30847 monodevelop-5.9-branch-bug-32121 monodevelop-5.9-branch-c5sr2 monodevelop-5.9-branch-c5sr3 monodevelop-5.9-branch-c5sr4 monodevelop-5.9-branch-c5sr5 monodevelop-5.9-branch monodevelop-5.9-bug-30052 monodevelop-5.9.1-branch monodevelop-5.9.3-branch monodevelop-pr-1129 monodevelop-xpg msbuild-improvements multisessiondebugging native-xwt-windows new-changes-view new-color-scheme new-remote-builder newer_sdk_tools newstetic ng-assemblybrowser no-orig-files nuget-add-project-system-exception-tests nuget-package-compatibility-status-messages-not-displayed octokit offline-activation opengl profiler-0.20-args proxy-authentication-https-url proxy-support refactoring-tasks-not-cleared-on-solution-close refactoring_outlinepanel release-symbolication remove-highdpi-hacks remove-pixel-scale resolve-new-project-reference-hint-path roslyn-analyzers roslyn-aspnet-aspx-projections roslyn-aspnet-projections-wip roslyn-condprops roslyn-dark-skin roslyn-insights-integration-v1 roslyn-nuget roslyn-nunit3 roslyn-tarball-nuget-restore roslyn run-configurations selectUntilMatchingBrace shell-abstraction-aug spritesheet staging statusbar-cancellation svn-commandline-tools to-review treeOverlays uihang uitestdebug undo_redo_broken update-project-build-status-on-solution-config-change updater-work updaterMSBuild14 vaclav/font-sizes vcsUI watchkit welcome-page-remove win-fix-alt-input window-show-last-page-conditionally windowsToolbar2 xcode_provisioning xcode7.1 Nothing to show roslyn-preview-4 roslyn-preview-3 roslyn-preview-2 roslyn-preview-1 monodevelop-6.1.0.4963 monodevelop-6.1.0.817 monodevelop-6.0.2.41 monodevelop-6.0.1.9 monodevelop-6.0.1.8 monodevelop-6.0.1.6 monodevelop-6.0.0.5174 monodevelop-6.0.0.5166 monodevelop-6.0.0.5156 monodevelop-6.0.0.5104 monodevelop-6.0.0.4968 monodevelop-6.0.0.4801 monodevelop-6.0.0.4761 monodevelop-6.0.0.4520 monodevelop-5.10.3.51 monodevelop-5.10.3.27 monodevelop-5.10.3.26 monodevelop-5.10.2.56 monodevelop-5.10.2.55 monodevelop-5.10.2.53 monodevelop-5.10.2.49 monodevelop-5.10.2.26 monodevelop-5.10.1.6 monodevelop-5.10.1.3 monodevelop-5.10.1.1 monodevelop-5.10.0.871 monodevelop-5.10.0.870 monodevelop-5.10.0.860 monodevelop-5.10.0.811 monodevelop-5.10.0.803 monodevelop-5.10.0.800 monodevelop-5.10.0.799 monodevelop-5.10.0.704 monodevelop-5.10.0.609 monodevelop-5.9.8.0 monodevelop-5.9.7.22 monodevelop-5.9.7.12 monodevelop-5.9.7.9 monodevelop-5.9.7.2 monodevelop-5.9.6.65 monodevelop-5.9.6.23 monodevelop-5.9.6.20 monodevelop-5.9.5.10 monodevelop-5.9.5.9 monodevelop-5.9.5.6 monodevelop-5.9.5.5 monodevelop-5.9.4.5 monodevelop-5.9.3.1 monodevelop-5.9.2.4 monodevelop-5.9.2.2 monodevelop-5.9.2.0 monodevelop-5.9.1.4 monodevelop-5.9.1.3 monodevelop-5.9.0.464 monodevelop-5.9.0.431 monodevelop-5.9.0.427 monodevelop-5.9.0.426 monodevelop-5.9.0.388 monodevelop-5.8.3.1 monodevelop-5.8.2.8 monodevelop-5.8.2.7 monodevelop-5.8.2.5 monodevelop-5.8.1.8 monodevelop-5.8.0.463 monodevelop-5.8.0.443 monodevelop-5.7.2.7 monodevelop-5.7.2.2 monodevelop-5.7.1.47 monodevelop-5.7.1.17 monodevelop-5.7.1.14 monodevelop-5.7.0.661 monodevelop-5.7.0.660 monodevelop-5.7.0.657 monodevelop-5.7.0.652 monodevelop-5.7.0.646 monodevelop-5.6.3.3 monodevelop-5.6.2.5 monodevelop-5.6.1.5 monodevelop-5.6.1.4 monodevelop-5.6.0.273 monodevelop-5.5.4.15 monodevelop-5.5.4.14 monodevelop-5.5.4.13 monodevelop-5.5.3.6 monodevelop-5.5.2.3 monodevelop-5.5.2.0 monodevelop-5.5.0.227 monodevelop-5.5.0.225 monodevelop-5.5.0.223 monodevelop-5.5.0.222 monodevelop-5.5.0.198 monodevelop-5.4.0.240 monodevelop-5.4.0.239 monodevelop-5.4.0.236 monodevelop-5.4.0.216 monodevelop-5.4.0.212 Nothing to show New pull request Latest commit a10ae2a Jul 15, 2016 VincentDondain Updated reference to md-addins Permalink Failed to load latest commit information. .vscode Adding Visual Studio Code settings file Dec 11, 2015 extras [Ide] Korean translation korean for extras/database Mar 9, 2016 main [Refactoring] Turn on analyzation of c# in unknown projects. Jul 15, 2016 profiles [F#] Add F# projects to main sln May 19, 2016 scripts Specifying SourceUrl in version.config is optional Sep 24, 2015 setup Merge master into xs6-editor-roslyn Jan 12, 2015 .gitattributes Revert ""Update gitattributes to set crlf on proj and sln"" Mar 22, 2016 .gitignore Update .gitignore Feb 18, 2016 .gitmodules Updated submodule references Jun 27, 2016 Makefile [build] Bail out early if `git` is not installed May 9, 2016 MonoDevelop.mdw Revert ""[Ide] Bold active Dock Tab label"" Jan 18, 2016 NuGet.config [build] Don't change the restore location for our nugets Jul 15, 2016 README.md Fix: Part Packaging for OS X. Dec 29, 2015 code_of_conduct.md Update code_of_conduct.md Dec 3, 2015 configure [Mac] Fix wrong conditional for checking whether we should build 32bit. Feb 17, 2016 dependency_checker.rb [build] Fix a mistake in the previous commit Sep 29, 2015 top_level_monodevelop [tests] Capture the logging service output for our tests Feb 16, 2016 version-checks Updated reference to md-addins Jul 15, 2016 version.config Bump MD version Jul 7, 2016 README.md MonoDevelop is a full-featured integrated development environment (IDE) for mono using Gtk#. See http://www.monodevelop.com for more info. Directory organization There are two main directories: main: The core MonoDevelop assemblies and add-ins (all in a single tarball/package). extras: Additional add-ins (each add-in has its own tarball/package). Compiling If you are building from Git, make sure that you initialize the submodules that are part of this repository by executing: git submodule update --init --recursive If you are running a parallel mono installation, make sure to run all the following steps while having sourced your mono installation script. (source path/to/my-environment-script) See: http://www.mono-project.com/Parallel_Mono_Environments To compile execute: ./configure ; make There are two variables you can set when running configure: The install prefix: --prefix=/path/to/prefix To install with the rest of the assemblies, use: --prefix=""pkg-config --variable=prefix mono"" The build profile: --profile=profile-name stable: builds the MonoDevelop core and some stable extra add-ins. core: builds the MonoDevelop core only. all: builds everything mac: builds for Mac OS X You can also create your own profile by adding a file to the profiles directory containing a list of the directories to build. Disclaimer: Please be aware that the 'extras/JavaBinding' and 'extras/ValaBinding' packages do not currently work. When prompted or by manually selecting them during the './configure --select' step, make sure they stay deselected. (deselected by default) Running You can run MonoDevelop from the build directory by executing: make run Installing (Optional) You can install MonoDevelop by running: make install Bear in mind that if you are installing under a custom prefix, you may need to modify your /etc/ld.so.conf or LD_LIBRARY_PATH to ensure that any required native libraries are found correctly. (It's possible that you need to install for your locale to be correctly set.) Packaging for OS X To package MonoDevelop for OS X in a convenient MonoDevelop.app file, just do this after MonoDevelop has finished building (with make): cd main/build/MacOSX ; make app. You can run MonoDevelop: open MonoDevelop.app or build dmg package: ./make-dmg-bundle.sh Dependencies Windows Unix Special Environment Variables BUILD_REVISION If this environment variable exists we assume we are compiling inside wrench. We use this to enable raygun only for 'release' builds and not for normal developer builds compiled on a dev machine with 'make && make run'.  Known Problems ""The type `GLib.IIcon' is defined in an assembly that is not referenced"" This happens when you accidentally installed gtk-sharp3 instead of the 2.12.x branch version. Make sure to 'make uninstall' or otherwise remove the gtk-sharp3 version and install the older one. xbuild may still cache a reference to assemblies that you may have accidentally installed into your mono installation, like the gtk-sharp3 as described before. You can delete the cache in $HOME/.config/xbuild/pkgconfig-cache-2.xml References MonoDevelop website http://www.monodevelop.com Gnome Human Interface Guidelines (HIG) https://developer.gnome.org/hig/stable/ freedesktop.org standards http://freedesktop.org/Standards/ Integrating with GNOME (a little out of date) http://developers.sun.com/solaris/articles/integrating_gnome.html Bugzilla http://bugzilla.mozilla.org/bugwritinghelp.html http://bugzilla.mozilla.org/page.cgi?id=etiquette.html Discussion, Bugs, Patches monodevelop-list@lists.ximian.com (questions and discussion) monodevelop-patches-list@lists.ximian.com (track commits to MonoDevelop) monodevelop-bugs@lists.ximian.com (track MonoDevelop bugzilla component) http://bugzilla.xamarin.com (submit bugs and patches here) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mono/monodevelop"	"MonoDevelop is a cross platform IDE mostly aimed at Mono/.NET developers"	"true"
"IDE"	"Visual Studio Express"	"https://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx"	"The free lightweight version of Visual Studio for.NET programming."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Visual Studio Express https://www.visualstudio.com MSDN Subscriptions Sign in Products Top Products Visual Studio 2015 Products Visual Studio Enterprise Visual Studio Professional Visual Studio Community Visual Studio Code Visual Studio Team Services Team Foundation Server Other Products Visual Studio Test Professional Team Explorer Everywhere Application Insights MSDN Platforms HockeyApp Visual Studio Express How to Buy Visual Studio Visual Studio Team Services Compare Compare Visual Studio 2015 Offerings Visual Studio Team Services Feature Matrix Features Application Development Mobile Web Cloud Windows Office Tools Games Node.js Visual C++ Python .NET Lifecycle Management DevOps and ALM Agile Software Development Version Control Tools for Java teams Release Management Reporting Cloud-Based Load Testing Continuous Integration Testing Tools Extend and Integrate Visual Studio Visual Studio Team Services Visual Studio Code Downloads Top Downloads Visual Studio Enterprise Visual Studio Community Visual Studio Code Team Foundation Server Extensions and Integrations Visual Studio Tools for Apache Cordova Visual Studio Tools for Unity Node.js Tools for Visual Studio Python Tools for Visual Studio .NET Nuget Packages Visual Studio Gallery Visual Studio Team Services Integrations All Downloads News Support Marketplace Documentation Visual Studio on MSDN Visual Studio Team Services Visual Studio Code Free Visual Studio Visual Studio Express Visual Studio Express editions provide free tools to develop applications for a specific platform, such as Windows Universal Platform applications, web sites, and Windows desktop applications. New edition available Visual Studio Community has all the features of Express and more, and is still free for individual developers, open source projects, academic research, education, and small professional teams. Download Community 2015 Learn more Express editions Express for Desktop Supports the creation of desktop applications for Windows. Download Express for Web Create standards-based, responsive websites, web APIs, or real-time online experiences using ASP.NET. Download Express for Windows Provides the core tools for building compelling, innovative apps for Universal Windows Platform. Windows 10 is required. Download Team Foundation Server 2015 Express Free source-code-control, project-management, and team-collaboration platform. Download Commercial use of Express products Visual Studio Express products are available at no charge and may be used for commercial, production usage subject to the license terms provided with each product. For example, you can use Express for Windows to create apps that you can then submit for sale in the Windows Store. False             Is this page helpful? Your feedback about this content is important. Let us know what you think. Yes No Additional feedback? 1500 characters remaining Submit Skip this Thank you! We appreciate your feedback. Visual Studio My Visual Studio Manage Visual Studio Marketplace Integrate Related Sites Visual Studio documentation MSDN Home Channel 9 Azure Visual Studio Blog Products Visual Studio Visual Studio Team Services Visual Studio Code Download Compare How to Buy Support Get Support Submit a Bug Submit an Idea Forums United States (English) Contact us Jobs Privacy Terms of use Trademarks © 2016 Microsoft Third party scripts and code linked to or referenced from this website are licensed to you by the parties that own such code, not by Microsoft. See ASP.NET Ajax CDN Terms of Use – http://www.asp.net/ajaxlibrary/CDN.ashx."	"null"	"null"	"The free lightweight version of Visual Studio for.NET programming."	"true"
"IDE"	"Visual Studio Community"	"https://msdn.microsoft.com/en-us/visual-studio-community-vs.aspx"	"A full-Featured IDE - Free"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Free Dev Tools - Visual Studio Community 2015 Developer Network Developer Network Developer Sign in MSDN subscriptions Get tools Technologies App Development Cloud Web Data Gaming Internet of Things Downloads Visual Studio MSDN subscription access SDKs Trial software Free downloads Office resources SharePoint Server 2013 resources SQL Server 2014 Express resources Windows Server 2012 resources Programs MSDN subscriptions Overview Benefits Administrators Students Microsoft Imagine Microsoft Student Partners Architects Overview Case studies Blueprints Blog Forums ISV Startups TechRewards Events Community Magazine Forums Blogs Tech Advisors Channel 9 Documentation APIs and reference Dev centers Samples We’re sorry. The content you requested has been removed. You’ll be auto redirected in 1 second. Visual Studio Community A free, fully-featured, and extensible IDE for creating modern applications for Windows, Android, and iOS, as well as web applications and cloud services. Download Community 2015 Visual Studio Community is free for individual developers, open source projects, academic research, education, and small professional teams. Learn more Everything you need all in one place Flexibility Build apps for any platform Productivity Designers, editors, debuggers, profilers, in one single tool Ecosystem Access to thousands of extensions Languages Code in C#, Visual Basic, F#, C++, HTML, JavaScript, Python, and more Now with Xamarin Deliver great mobile apps Visual Studio Community now integrates Xamarin features that complete the out-of-the-box mobile application development experience for Android, iOS and Windows. Share code across devices while delivering apps with native performance and look & feel. Learn more Powerful coding tools Write code, navigate, and fix issues Code with confidence in your language, find and fix code issues quickly, and refactor with ease. Learn more about editing with Visual Studio Advanced debugging Debug, profile, and diagnose Debug cross language locally or remotely. Diagnose performance issues without leaving the debugger workflow. Learn more about debugging with Visual Studio Device apps Windows Desktop, Universal Windows Platform, iOS, and Android Tools for Apache Cordova, Xamarin, and Unity available for download to enable code, debug, test, share, and reuse for more platforms. Learn more about Universal Windows Platform development Learn more about cross-platform mobile development Web tools Create and deploy modern web applications Develop for the web with ASP.NET, Node.js, Python, and JavaScript. Use with powerful web frameworks such as AngularJS, jQuery, Bootstrap, Django, and Backbone.js. Learn more about web development in Visual Studio Multiple languages Use the language of your choice Multi-language support includes C#, Visual Basic, F#, C++, JavaScript, TypeScript, Python, and more. Visual Studio guides you as you write, debug, and test code — no matter what language you choose. Ecosystem Access to thousands of extensions Customize Visual Studio by taking advantage of the tools, controls, and templates available from partners and the community, or go further and build your own extensions. Learn more about customizing Visual Studio Learn more about Visual Studio Gallery Git integration Host code anywhere Manage your source code in Git repos hosted by any provider, including GitHub. Or use Visual Studio Team Services to manage code alongside bugs and work items for your whole project. Learn more about Visual Studio Team Services Learn more about GitHub extension for Visual Studio Exciting benefits Access to free tools and resources When you sign into Visual Studio Community, you get access to a broad set of free developer tools, selected Xamarin University courses on-demand, Pluralsight training, Azure credits, and more as part of Visual Studio Dev Essentials. Learn more about Visual Studio Dev Essentials Usage For individuals Any individual developer can use Visual Studio Community to create their own free or paid apps. For organizations An unlimited number of users within an organization can use Visual Studio Community for the following scenarios: in a classroom learning environment, for academic research, or for contributing to open source projects. For all other usage scenarios: In non-enterprise organizations, up to five users can use Visual Studio Community. In enterprise organizations (meaning those with >250 PCs or >$1 Million US Dollars in annual revenue), no use is permitted beyond the open source, academic research, and classroom learning environment scenarios described above. For more information, see the Visual Studio Community license terms. Learn more News and blogs Welcome to Visual Studio 2015 Cross-platform mobile development Web and Cloud development Resources System requirements Compare editions Related What are Visual Studio Team Services? Cloud services for development teams to collaborate and manage software projects. Read more False False             Follow us http://www.facebook.com/microsoftdeveloper https://twitter.com/msdev http://plus.google.com/111221966647232053570/ Sign up for the MSDN Newsletter Is this page helpful? Your feedback about this content is important. Let us know what you think. Yes No Additional feedback? 1500 characters remaining Submit Skip this Thank you! We appreciate your feedback. Dev centers Windows Office Visual Studio Microsoft Azure More... Learning resources Microsoft Virtual Academy Channel 9 MSDN Magazine Community Forums Blogs Codeplex Support Self support Programs BizSpark (for startups) DreamSpark Imagine Cup United States (English) Newsletter Privacy & cookies Terms of use Trademarks © 2016 Microsoft Third party scripts and code linked to or referenced from this website are licensed to you by the parties that own such code, not by Microsoft. See ASP.NET Ajax CDN Terms of Use – http://www.asp.net/ajaxlibrary/CDN.ashx."	"null"	"null"	"A full-Featured IDE - Free"	"true"
"IDE"	"Waf DotNetPad"	"http://dotnetpad.codeplex.com"	"A simple and fast code editor that makes fun program with C# or Visual Basic."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Waf DotNetPad - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In Waf DotNetPad home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe Moved to GitHub This project has moved to jbe2277.github.io/dotnetpad Project Description The Waf DotNetPad is a simple and fast code editor that makes fun to program with C# or Visual Basic. Features Code editor for C# 6 and Visual Basic 14. Supports auto completion during programming. Background compilation for immediate feedback in the Error List. Try out code with console Output window. Code Samples The application comes with code samples that shows new language features of C# 6 and Visual Basic 14. Null-conditional operator nameof operator Auto-property initializers & getter-only auto-properties String interpolation. Used Components The application utilizes the great components: Microsoft.CodeAnalysis (Roslyn) AvalonEdit Last edited Jan 1 at 3:37 PM by jbe2277, version 11 download Opera does not support ClickOnce X To install this application, save it and then open it. Opening it directly from Opera will not work correctly. current Waf DotNetPad 1.1.0.100 date Thu Dec 3, 2015 at 7:00 AM status Stable downloads 113 rating       0 ratings Review this release activity downloads 2 Days: 7 7 30 30 All All Details related projects WPF Application Framework (WAF) .NET Compiler Platform (""Roslyn"") © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"A simple and fast code editor that makes fun program with C# or Visual Basic."	"true"
"IDE"	"Visual Studio Code"	"https://code.visualstudio.com/"	"Excellent free editor from Microsoft, based on GitHub Atom."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"16037"	"996"	"2150"	"GitHub - Microsoft/vscode: Visual Studio Code Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 996 Star 16,037 Fork 2,150 Microsoft/vscode Code Issues 2,007 Pull requests 28 Wiki Pulse Graphs Visual Studio Code http://code.visualstudio.com 7,777 commits 31 branches 26 releases 133 contributors TypeScript 61.2% JavaScript 35.6% CSS 2.9% HTML 0.2% Shell 0.1% Groovy 0.0% TypeScript JavaScript CSS HTML Shell Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags aeschli/css-decorators-test aeschli/css-extension aeschli/external-injections alex/cursorHardHome andre/pickervariables aweinand/asyncsourcemaps ben/electron ben/tabsanimation cpp/customDebugViews dbaeumer/TS9125 dbaeumer/extensionLanguageCreation dbaeumer/localizationSupport dbaeumer/nls-package-json dbaeumer/nlsSupport dbaeumer/projectCompile dbaeumer/3849 dbaeumer/4613 dbaeumer/8509 joh/release/1.0.0 master noupdate release/1.2 release/1.3.0 sandy/workspace sandy081/editorCommands sandy081/errorlists standalone/0.1.1 tyriar/explorer_icons tyriar/launch_terminal_context_at tyriar/migrate-user-data-dir tyriar/run_selected_text_in_terminal Nothing to show 1.3.1 1.3.0 1.2.1 1.2.0 1.1.1 1.1.0 1.1.0-insider 1.0.0 0.10.15-insiders 0.10.14-insiders 0.10.13-insiders 0.10.12-insiders 0.10.11 0.10.11-insiders 0.10.10 0.10.10-insiders 0.10.9 0.10.8 0.10.8-insiders 0.10.7-insiders 0.10.6 0.10.5 0.10.3 0.10.2 0.10.1 0.10.1-extensionbuilders Nothing to show New pull request Latest commit 66f637a Jul 15, 2016 Tyriar Add note about Windows\sysnative in terminal settings … Part of #7095 Permalink Failed to load latest commit information. .vscode Revert ""revert changes to gulp files"" Jul 12, 2016 build Revert ""revert changes to gulp files"" Jul 12, 2016 extensions update node-debug Jul 15, 2016 i18n Import i18n files Jul 10, 2016 resources Add proper package replace metadata to deb control Jul 8, 2016 scripts back to ATOM_SHELL_INTERNAL_RUN_AS_NODE Jul 8, 2016 src Add note about Windows\sysnative in terminal settings Jul 15, 2016 test Revert recent wiki changes Apr 22, 2016 .editorconfig Add trim_trailing_whitespace to .editorconfig Apr 7, 2016 .eslintrc Revert ""revert changes to gulp files"" Jul 12, 2016 .gitignore Improve editor-distro gulp task May 31, 2016 .mention-bot update mention bot configuration Jul 11, 2016 .travis.yml travis: split compile & optimize Jun 16, 2016 CONTRIBUTING.md Fix typo Jul 15, 2016 LICENSE.txt Hello Code Nov 13, 2015 OSSREADME.json back to electron 0.37.6 Jul 8, 2016 README.md Replaced README image of product to reflect new UI Jul 6, 2016 ThirdPartyNotices.txt Clean extensions OSSREADME.json since the tool now can scan all npm-s… Jul 7, 2016 appveyor.yml back to ATOM_SHELL_INTERNAL_RUN_AS_NODE Jul 8, 2016 gulpfile.js Revert ""revert changes to gulp files"" Jul 12, 2016 issue_template.md Update issue_template.md Mar 14, 2016 npm-shrinkwrap.json fix version Jul 12, 2016 package.json fix 30% cpu spikes on OSX gulp watch Jul 12, 2016 product.json remove urls Jun 21, 2016 tslint.json Port noUnexternalizedStringsRule to TS 1.8.0. Add support to detect d… Feb 18, 2016 README.md Visual Studio Code - Open Source VS Code is a new type of tool that combines the simplicity of a code editor with what developers need for their core edit-build-debug cycle. Code provides comprehensive editing and debugging support, an extensibility model, and lightweight integration with existing tools. The vscode repository is where we do development and there are many ways you can participate in the project, for example: Submit bugs and feature requests and help us verify as they are checked in Review source code changes Review the documentation and make pull requests for anything from typos to new content Contributing If you are interested in fixing issues and contributing directly to the code base, please see the document How to Contribute, which covers the following: How to build and run from source The development workflow, including debugging and running tests Coding Guidelines Submitting pull requests This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Feedback Ask a question on Stack Overflow. Request a feature on User Voice. File a bug in GitHub Issues. Tweet us with other feedback. Related Projects Many of the core components and extensions to Code live in their own repositories on GitHub. For example, the node debug adapter and the mono debug adapter. For a complete list, please see the Related Projects page on our wiki. License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Microsoft/vscode"	"Excellent free editor from Microsoft, based on GitHub Atom."	"true"
"Image Processing"	"ImageResizer"	"http://imageresizing.net/"	"Add commands to image URLs to get altered versions in milliseconds. Resizing, editing etc of images in real-time."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"265"	"46"	"91"	"GitHub - imazen/resizer: The official repository for ImageResizer Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 46 Star 265 Fork 91 imazen/resizer Code Issues 32 Pull requests 1 Pulse Graphs The official repository for ImageResizer http://imageresizing.net/ 2,575 commits 10 branches 37 releases 22 contributors C# 85.4% C++ 9.5% C 4.0% F# 0.6% ASP 0.1% Ruby 0.1% Other 0.3% C# C++ C F# ASP Ruby Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop features/better-blur features/ibitmapframe features/requestsigning features/rewriting master support/backports/v3-advanced-filters support/v2 support/v3 support/v4 Nothing to show vWithUpscaleCavasSupport v4.0.5 v4.0.4 v4.0.3 v4.0.2 v4.0.1 v4.0.0 v4.0.0-preview.1 v2.6-release-nov-11-2010 v2.1b-Nov-13-2009 resizer3-alpha9.964 resizer3-alpha7.967 resizer3-alpha5 resizer3-alpha4 resizer3-alpha3 resizer3-alpha2 resizer3-alpha-10.740 resizer3-alpha-8.907 resizer3-4-3.103 resizer3-1-alpha-2.88 resizer3-1-alpha-1.391-hotfix resizer3-1-5.463 resizer3-1-4.545 resizer3-1-3.742 resizer3-1-3.683 resizer3-0-13.420 resizer3-0-12.720 resizer3-0-11.540 made-size-limits-default imageresizer3-alpha1 features/fastscaling2-vectorized features/fastscaling2-planar features/fastscaling2-dev SobelFilterHybridPluginTest LibCassini35-with-networking ImageResizer-mar-19-with-upscalecanvas 2011-batch-resize-zip Nothing to show New pull request Latest commit 11281d0 Jul 5, 2016 farmerajf committed with nathanaeljones Added argument to use AWS Profile if credentials are not set and prof… … …ile flag is set to true (#178) Permalink Failed to load latest commit information. .nuget Update nuget dependency version across the board. Newtonsoft, mongodb… Mar 31, 2015 .paket Add paket.bootstrapper.exe May 1, 2015 Contrib Update readme.md Mar 1, 2016 Core Added PreHandleImage EventHandler for the AsyncInterceptModule. Neede… Jul 3, 2016 Plugins Added argument to use AWS Profile if credentials are not set and prof… Jul 5, 2016 Releases Ignoring everything in the releases directory May 15, 2011 Samples Finish upgrading dependencies (mostly) Oct 24, 2015 Tests Add regression test for manual crop rounding (as it affects FastScaling) Jan 31, 2016 Tools Build.fsx - name zips correctly (drm_free) Oct 24, 2015 dlls Add gitattributes to force line-ending normalization. Normalize line … Oct 20, 2014 docs Update info about v4 plugins and FastScaling vcredist. Jul 6, 2015 nuget Bump opencvsharp version req. to fix leak Mar 17, 2016 .gitattributes From now on, don't fixup cr/lf on checkout, only on commit. Oct 20, 2014 .gitignore Ignore paket temp files Oct 24, 2015 .gitmodules Drop submodules Oct 24, 2015 .travis.yml FastScaling: run rake test_with_valgrind on travis Mar 19, 2015 AppVeyor.sln Remove Imazen.WebP as local project - just reference nuget Oct 24, 2015 BuilderExtensions.md Fixes #68 Nov 27, 2013 CHANGES.md Improve v4 change notes Aug 28, 2015 CONTRIBUTING.md Docs: Add link to clahub.com from CONTRIBUTING.md Nov 24, 2014 LICENSE.md Merge pull request #136 from pvginkel/features/pdfium Apr 30, 2015 NuGet.config Configure NuGet to use a single /packages/ folder at the root. Oct 16, 2013 Web.config Simplify some documentation Nov 7, 2014 appveyor.yml Bump AppVeyor number to 4.0.5, push to release demo server when tagged. Jan 31, 2016 benchmarking.md Add failures and benchmarking.md Nov 8, 2014 failures.md Add failures and benchmarking.md Nov 8, 2014 readme.md Update readme.md Jun 5, 2016 readme.txt Simplify some documentation Nov 8, 2014 readme.md ImageResizer - The Flexible Image Server   View ReadMe for latest (develop), stable (master), v2, v3 and v4. https://github.com/imazen/resizer We need your help to make ImageResizer 5 possible! Pledge to support the Imageflow Kickstarter today! More information on ImageResizer 5 here. What is it? An IIS/ASP.NET HttpModule & image server. On-demand image manipulation, delivery, and optimization — with low latency — makes responsive images easy An image processing library optimized and secured for server-side use A framework and collection of 40+ plugins to accomplish most common web imaging needs. ImageResizer has a very simple (and powerful) URL API. For more informaiton, check out our website. To contribute, see CONTRIBUTING. Changes We've made some major changes in V.4. Check out our changelog for more details. License Over half of ImageResizer's plugins are available under the Apache 2.0 license. See license.txt for details. Table of Contents Getting Started Basic Installation Guide Installing a Plugin Manually Reference List of Plugins Full Command Reference Managed API Examples Configuration Reference Nifty Tricks Watermark Images Based on Folder Name or Display Size Generate Thumbnails and Multiple Sizes to Disk Convert and Resize Images as They Are Uploaded Troubleshooting Accessing Self-Diagnostics Getting Detailed Error Messages What Might be Wrong Everything Else Licensing and Support Contract Information Contact Us Getting Started Below is a basic installation guide, although a more comprehensive one can be found on our website. Want the Source? We use submodules - clone with git clone -b develop --recursive https://github.com/imazen/resizer or run git submodule update --init --recursive afterwards. Make sure to add a project reference. Basic Installation Guide Install from NuGet Nearly all ImageResizer plugins are on NuGet (33+). You can enable source symbols from symbolsource.org for an enhanced debugging experience. Get the basics: PM> Install-Package ImageResizer.WebConfig PM> Install-Package ImageResizer.Plugins.DiskCache PM> Install-Package ImageResizer.Plugins.PrettyGifs  Manual Plugin Installation In your project, add a reference to the plugin DLL (or project, if you're using the source). Configure the plugin to be installed at startup via (i) or (ii). In the <plugins /> section of Web.config, insert <add name=""PluginName"" /> In Application_Start, create an instance of the plugin and install it.   new PluginName().Install(ImageResizer.Configuration.Config.Current); You will need to add the appropriate namespace reference to access the plugin. Most configuration and plugin installation issues can be resolved by checking ImageResizer’s self-diagnostics page. If your local website is running at http://localhost:5000/, then you should browse to http://localhost:5000/resizer.debug.ashx to access it. See the Troubleshooting for more details. Reference List of Plugins The following is a list of all plugins currently available on ImageResizer, and links to their more detailed documentation on our website. They are grouped according to the license necessary to access them. Higher level licenses include all plugins from lower level licenses. Their order, from lowest to highest, is Essential, Performance, Creative, Elite. If you have any further questions about ImageResizer licenses, we encourage you to look at our licenses page. Elite License Plugins CropAround plugin - Automatic cropping based on a set of areas to preserve specified areas. BatchZipper plugin - Asynchronously generated .zip archives of files and resized images. Great for providing customized downloads to customers. Faces plugin - Provides face detection. FFmpeg plugin - Extract frames from videos by time or percentage. Includes basic blank frame avoidance. Based on ffmpeg. MongoReader plugin - Allows GridFS files to be resized and served. PsdComposer - Dynamically edit and render PSD files - turn layers on and off, edit text layer contents, and apply certain effects. RedEye plugin - Provides sophisticated eye detection and red eye correction. WebP plugins - Decode and encode .webp images. Creative License Plugins AdvancedFilters plugin - Blur, sharpen, remove noise, and perform automatic histogram adjustment, plus several other cool effects. CopyMetadata plugin - Preserve metadata during image processing. WIC plugins (V3.1+)- 3 plugins: WicDecoder supports decoding images through WIC, and supports any image codecs installed on the computer. WicEncoder encodes jpeg, gif, and png images through WIC for better performance and more control. Adjust jpeg quality, subsampling, gif dithering, and palette size. WicBuilder provides a completely alternate pipeline, which supports most basic resize/crop/pad operations. 2-4x faster than the default pipeline. Enable on a per-request bass. FreeImage plugins - Includes 4 plugins: FreeImageDecoder adds support for RAW & HDR source images - over 20 formats supported. FreeImageEcoder provides 2-4x Faster jpeg encoding. FreeImageResizer adds support for Lanczos3 and CatmullRom scaling. FreeImageBuilder provides an alternate imaging pipeline. SeamCarving plugin - Content-aware image resizing (Fast C++ exe, requires Full Trust). SimpleFilters plugin - Adjust photo transparency, brightness, and apply sepia and B&W filters through the querystring. Nearly zero performance overhead - matrix-based. Watermark plugin(v3.1+) - Render multiple image & text overlays and background layers with incredible flexibility and great performance. WhitespaceTrimmer plugin - Automatically trims whitespace off an image using smart edge detection. Performance License Plugins AnimatedGifs plugin - Process and resize GIF animations like normal GIF images. Every frame is processed and re-encoded. AzureReader2 plugin - Allows blobstore images to be resized and served. Azure 2.0 compatible. CloudFront plugin - Allows you to use Amazon CloudFront with the resizer. Highly recommended - offers inexpensive worldwide edge caching and great scalability. DiskCache plugin - Makes dynamic image processing as responsive and scalable as static images - because they are! Suggested, nay, required for websites with significant traffic. Medium-trust compatible. S3Reader2 plugin - Process and resize images located on a remote Amazon S3 bucket. A VirtualPathProvider. Works best when combined with DiskCache. SQLReader plugin - Process and resize images located in a MS SQL database. Extremely configurable, can work with nearly any database schema. A VirtualPathProvider. PrettyGifs plugin - Get rid of ugly .NET GIFs, and get photoshop-like results for GIFs and 8-bit PNG images. Uses tuned octree quantization and smart, adjustable dithering. RemoteReader plugin - Allows images located on external servers to be securely resized and processed as if they existed locally. FastScaling plugin - Offers up to 30x faster image resizing, and much higher quality. Essential License Plugin ClientCache plugin - (default) - Sets Cache-control, Expires, and Last-modified headers for optimum performance. Custom Overlay plugin - Example plugin. It is not subject to the same standards of maintenance and backwards-compatibility that normal plugins are. This plugin is for drawing image overlays using pre-determined x1,y1,x2,y2,x3,y3,x4,y4 coordinates that are relative to the base file's width and height DefaultEncoder - (default) Adjustable jpeg compression, 24-bit PNG with transparency support, and standard .NET GIF encoding (which is very lousy). DefaultSettings plugin (V3.1+) - Allows you to configure the default setting values when commands (like scale) are omitted. DiagnosticJson plugin - Returns json information about the image layout. Diagnostics plugin - (default) - Whenever you have an issue, go to localhost/resizer.debug and you'll probably be told what is wrong. Drop Shadow plugin - Adds drop-shadow feature (shadowOffset, shadowWidth, shadowColor). FolderResizeSyntax plugin - Resize images without using the query string. Gradient plugin - Create gradients from css, js, or html: /gradient.png?color1=FFFFFFAA&color2=BBBBBB99&width=10&width=10&rotate=90. ImageHandlerSyntax plugin - Migrate websites from other image resizing handlers without breaking any URLs. IEPngFix plugin(New in V3.1.3) - Automatically serve GIF versions of PNG files to IE6 and below clients. Opt-in or opt-out, very configurable. Image404 plugin - Supply default images instead of a 404 when an image is missing. Logging plugin(v3.1+) - Allows logging through NLog. PdfRenderer (New in V3.1.3)- Render PDFs to images dynamically, then crop or process them as an image. Presets plugin (v3.1+)- Created named settings groups and and reference them with ?preset=name instead of specifying them all in the URL. SizeLimiting plugin - (default) - Limit maximum resolution of photos, or the total size of all processed images. SpeedOrQuality (v3.1+) - Gain a 15-30% speed boost by sacrificing rendering quality. VirtualFolder plugin - Create an IIS-like virtual folder that works in Cassini as well as IIS, and doesn't require IIS configuration. Deprecated Plugins AzureReader plugin - Allows blobstore images to be resized and served. (Azure 1.X compatible) Deprecated in favore of AzureReader2. Available at the Performance level. S3Reader plugin - Process and resize images located on a remote Amazon S3 bucket. A VirtualPathProvider. Works best when combined with DiskCache. Deprecated in favor of S3Reader2. Available at the Performance level. PsdReader plugin - Adds support for PSD source files. Deprecated in favor of FreeImageDecoder and PsdComposer. Available at the Elite level. AutoRotate plugin - Use the EXIF rotation data from the camera to auto-rotate your images. Now inlcuded in Core, not a plugin. Full Command Reference Selecting a frame or page frame=x – Choose which frame of an animated GIF to display. page=x– Choose which page of a multi-page TIFF document to display. Rotation & flipping autorotate=true Automatically rotates the image based on the EXIF info from the camera. autorotate.default=true will only autorotate if the image is processed. sflip=none|x|y|xy Flips the source image prior to processing (new in V3.1). srotate=0|90|180|270 Rotates the source image prior to processing (only 90 degree intervals) (new in V3.1). rotate=degrees – Rotates the image any arbitrary angle (occurs after cropping). flip=none|x|y|xy - Flips the image after everything is done. Manual cropping crop=(x1,y1,x2,y2) – Crop the image to the specified rectangle on the source image. You can use negative coordinates to specify bottom-right relative locations. cropxunits The width which the x1 and x2 coordinates are relative to, e.g., use '100' to make x1 and x2 percentages. Useful when you don't know the original image size. cropyunits The height which the y1 and y2 coordinates are relative to, e.g., use '100' to make y1 and y2 percentages. Useful when you don't know the original image size. Sizing (and padding, autocropping, carving and stretching) Please note that width/height/maxwidth/maxheight do NOT include border, margin, or padding widths, and do not include the extra space used by rotation. They constrain the image, not the canvas. maxwidth, maxheight – Fit the image within the specified bounds, preserving aspect ratio. width, height – Force the final width and/or height to certain dimensions. Whitespace will be added if the aspect ratio is different. mode=max|pad|crop|carve|stretch - How to handle aspect-ratio conflicts between the image and width+height. 'pad' adds whitespace, 'crop' crops minimally, 'carve' uses seam carving, 'stretch' loses aspect-ratio, stretching the image. 'max' behaves like maxwidth/maxheight (new in V3.1). anchor=topleft|topcenter|topright|middleleft|middlecenter|middleright|bottomleft|bottomcenter|bottomright How to anchor the image when padding or cropping (new in V3.1). scale=both|upscaleonly|downscaleonly|upscalecanvas – By default, images are never upscaled. Use &scale=both to upscale images if they are smaller than width and height. zoom=0..infinity - Scale the image by a multiplier. Useful for mobile devices and situations where you need to retain all the existing width/height/crop settings, but scale the result up or down. Defaults to 1. 0.5 produces a half-size image, 2 produces a double-size image. Border, padding, margins and background colors bgcolor=color name | hex code (6-char). Sets the background/whitespace color. paddingWidth=px & paddingColor=color|hex paddingColor defaults to bgcolor, which defaults to white. borderWidth=px, borderColor=color|hex borderColor defaults to transparent. margin=3 or margin=5,5,10,10 Specify a universal margin or left,top,right,bottom widths (new in V3.1. Output format format=jpg|png|gif - The output format to use. quality - Jpeg compression: 0-100 100=best, 90=very good balance, 0=ugly. colors=2-255 – Control the palette size of PNG and GIF images. If omitted, PNGs will be 24-bit (PrettyGifs plugin required). Misc ignoreicc - true|false. If true, the ICC profile embedded in the source image will be ignored. cache - always|no|default - Always forces the image to be cached even if it wasn't modified by the resizing module. Doesn't disable caching if it was modified. process - always|no|default - Always forces the image to be re-encoded even if it wasn't modified. Does not prevent the image from being modified. dpi=90|300|600 - The DPI at which the image should be printed. Ignored by all browsers, most operating systems, and most printers. Watermark plugin watermark - The name of one or more watermark layers (or layer groups) to render. Image404 plugin 404 - The path to the fallback image, or a named preset. Gradient plugin color1,color2 - 6 or 8 digit hex values specifying the start and end gradient colors. angle - 0 is horizontal. Degrees to rotate the gradient. width/height - The size of the gradient image. PrettyGifs plugin colors - 2 to 256 (the number of colors to allow in the output image palette). For Gifs and 8-bit PNGs. dither=true|false|4pass|30|50|79|[percentage] - How much to dither. SimpleFilters plugin &s.grayscale=true|y|ry|ntsc|bt709|flat (true, ntsc, and y produce identical results) &s.sepia=true &s.alpha= 0..1 &s.brightness=-1..1 &s.contrast=-1..1 &s.saturation=-1..1 &s.invert=true AdvancedFilters plugin &a.blur=radius - Gaussian blur with adjustable radius. &a.sharpen=radius - Gaussian sharpen with adjustable radius. &a.contrast=-1..1 &a.saturation=-1..1 &a.brightness=-1..1 &a.equalize=true - Adjusts contrast, saturation, and brightness with curves based on the histogram. Good for adjusting slightly foggy or dark daytime photos. &a.sepia=true - Sepia effect, slightly different from the one in SimpleFilters. &a.oilpainting=1..100 -Try 1 for impressionist, 100 for modern art :) &a.removenoise=1-100 - Not a blur effect - designed to remove color noise, 'pepper noise'. Very conservative, doesn't affect edges. DropShadow plugin shadowWidth - Width of the shadow. shadowOffset - (x,y) how to offset the drop shadow. shadowColor - Named or hex color of the shadow. SpeedOrQuality plugin speed=0..5 - The amount of quality to sacrifice for speed - each value uses different settings and techniques, and may not support all features. Presets plugin preset=name1,name2,name3 - A list of preset settings groups to apply. WhitespaceTrimmer plugin trim.threshold=80 - The threshold to use for trimming whitespace. trim.percentpadding=0.5 - The percentage of padding to restore after trimming. WicBuilder & FreeImageBuilder builder=freeimage|wic - Enables the FreeImage or Wic pipeline instead of the default GDI pipeline. Special effect plugins not supported. FreeImageDecoder, WicDecoder These act as fallback decoders, but you can tell them to try first by using decoder=wic|freeimage FreeImageEncoder, WicEncoder In addition to jpeg quality and gif/png colors, you can configure the jpeg subsampling for both Wic and FreeImage. subsampling==444|422|420 Managed API examples Most tasks with the managed API only require one line:   ImageResizer.ImageBuilder.Current.Build(object source, object dest, ResizeSettings settings)    or    Bitmap b = ImageResizer.ImageBuilder.Current.Build(object source, ResizeSettings settings)  Object Source May be a physical path (C:..), an app-relative virtual path (~/folder/image.jpg), an Image, Bitmap, Stream, VirtualFile, or HttpPostedFile instance. Object Dest May be a Stream instance, a physical path, or an app-relative virtual path. ResizeSetting Settings ResizeSettings is a friendly wrapper for a query string which provides named properties as well as the regular NameValueCollection interface. You can create one like so:   new ResizeSettings(""maxwidth=200&maxheight=200"")    //or   new ResizeSettings(Request.QueryString)    //or   var r = new ResizeSettings();   r.MaxWidth = 200;   r.MaxHeight = 300;  Examples   using ImageResizer;    //Converts a jpeg into a png    ImageBuilder.Current.Build(""~/images/photo.jpg"",""~/images/photo.png"",                               new ResizeSettings(""format=png""));    //Crops to a square (in place)   ImageBuilder.Current.Build(""~/images/photo.jpg"",""~/images/photo.jpg"",                               new ResizeSettings(""width=100&height=200&crop=auto"")); Using Variables in the Destination Path (3.1.3+) Variables include the correct extension , random GUID , source path , source filename , , , and any settings value . This makes many scenarios much easier to code, and reduces room for error. Many users make critical errors in their upload code, such as not sanitizing filenames, or using the original extension (immediate server highjacking, here we go). With the new feature, a proper upload system is 3 lines:     ImageJob i = new ImageJob(file,      ""~/uploads/<guid>.<ext>"",      new ResizeSettings(""width=1600""));      i.CreateParentDirectory = true;     i.Build(); You can also filter values. <filename:A-Za-z0-9> keeps only the alphanumeric characters from the original filename. Configuration Reference The following is a basic, typical configuration of v4.   <?xml version=""1.0"" encoding=""utf-8"" ?>   <configuration>     <configSections>       <section name=""resizer"" type=""ImageResizer.ResizerSection,ImageResizer""  requirePermission=""false"" />     </configSections>      <resizer>       <!-- Unless you (a) use Integrated mode, or (b) map all reqeusts to ASP.NET,             you'll need to add .ashx to your image URLs: image.jpg.ashx?width=200&height=20             Optional - this is the default setting -->       <pipeline fakeExtensions="".ashx"" defaultCommands=""autorotate.default=true"" />        <plugins>         <add name=""DiskCache"" />         <add name=""PrettyGifs"" />       </plugins>       </resizer>      <system.web>       <httpModules>         <!-- This is for IIS7/8 Classic and Cassini-->         <add name=""ImageResizingModule"" type=""ImageResizer.InterceptModule""/>       </httpModules>     </system.web>      <system.webServer>       <validation validateIntegratedModeConfiguration=""false""/>       <modules>         <!-- This is for IIS7/8 Integrated mode -->         <add name=""ImageResizingModule"" type=""ImageResizer.InterceptModule""/>       </modules>     </system.webServer>   </configuration> Nifty Tricks Watermark Images Based on Folder Name or Display Size The PostRewrite event is the last of the URL rewriting events, and can be used to enforce certain settings. You can add an event handler during the Application\Start method in Global.asax.cs. The following sample code applies a watermark to all images inside 'folder' that are probably above 100x100. I say probably, because the size estimation is based on the assumption that the original image is a 600x600 square. Given a 600x100 actual image size and the querystring ""?height=99"", the image could escape watermarking and display at 594x99. So, with this code, you can only know that one of the dimensions will be less than 100px - you can't know that both will be.   Config.Current.Pipeline.PostRewrite += delegate(IHttpModule sender, HttpContext context, IUrlEventArgs ev) {       //Check folder       string folder = VirtualPathUtility.ToAbsolute(""~/folder"");       if (ev.VirtualPath.StartsWith(folder, StringComparison.OrdinalIgnoreCase)) {           //Estimate final image size, based on the original image being 600x600.            Size estimatedSize = ImageBuilder.Current.GetFinalSize(new System.Drawing.Size(600,600),               new ResizeSettings(ev.QueryString));           if (estimatedSize.Width > 100 || estimatedSize.Height > 100){               //It's over 100px, apply watermark               ev.QueryString[""watermark""] = ""Sun_256.png"";           }       }   }; Important note While the above enforces watermarking on all processed images, the process=no command can disable processing of the image completely, avoiding all resizing and watermarking. To prevent this, you should add some more code inside PostRewrite   Config.Current.Pipeline.PostRewrite += delegate(IHttpModule sender, HttpContext context, IUrlEventArgs ev) {       //Check folder       string folder = VirtualPathUtility.ToAbsolute(""~/folder"");       if (ev.VirtualPath.StartsWith(folder, StringComparison.OrdinalIgnoreCase)) {           //Estimate final image size, based on the original image being 600x600.           Size estimatedSize = ImageBuilder.Current.GetFinalSize(new System.Drawing.Size(600,600),                           new ResizeSettings(ev.QueryString));           if (estimatedSize.Width > 100 || estimatedSize.Height > 100){               //It's over 100px, apply watermark               ev.QueryString[""watermark""] = ""Sun_256.png"";               //Force processing if it's an image               if (Config.Current.Pipeline.IsAcceptedImageType(ev.VirtualPath))                 ev.QueryString[""process""] = ""Always"";           }       }   }; Generate Thumbnails and Multiple Sizes to Disk While the ImageResizer shines at on-the-fly image processing, you can also use it to drastically simplify pre-processing and ahead-of-time resizing as well. We strongly recommend using the dynamic method instead of pre-generating your images, as pre-generating versions reduces agility and flexibility. In the examples below, only one line is required to perform all the image decoding, format conversion, processing, resizing, and re-encoding. The rest is path/filename logic. Two different solutions are presented - 1 for processing images as they are uploaded, and another for processing images that are already saved to disk. During Upload This method generates 3 versions of an image as it is uploaded, adding a _thumb, _medium, and _large suffix to each filename. Uploaded files are named using a generated GUID, as uploaded file names are never safe for use as-is. Even with proper sanitization (alphanumeric filtering AND length limiting), you will encounter duplicates using uploaded filenames on your server.   Dictionary<string, string> versions = new Dictionary<string, string>();   //Define the versions to generate   versions.Add(""_thumb"", ""width=100&height=100&crop=auto&format=jpg""); //Crop to square thumbnail   versions.Add(""_medium"", ""maxwidth=400&maxheight=400&format=jpg""); //Fit inside 400x400 area, jpeg   versions.Add(""_large"", ""maxwidth=1900&maxheight=1900&format=jpg""); //Fit inside 1900x1200 area    //Loop through each uploaded file   foreach (string fileKey in HttpContext.Current.Request.Files.Keys) {       HttpPostedFile file = HttpContext.Current.Request.Files[fileKey];       if (file.ContentLength <= 0) continue; //Skip unused file controls.        //Get the physical path for the uploads folder and make sure it exists       string uploadFolder = MapPath(""~/uploads"");       if (!Directory.Exists(uploadFolder)) Directory.CreateDirectory(uploadFolder);        //Generate each version       foreach (string suffix in versions.Keys) {           //Generate a filename (GUIDs are best).           string fileName = Path.Combine(uploadFolder, System.Guid.NewGuid().ToString() + suffix);            //Let the image builder add the correct extension based on the output file type           fileName = ImageBuilder.Current.Build(file, fileName, new ResizeSettings(versions[suffix]), false, true);       }    }  After Upload This example method generates 3 versions of the specified file, and returns a list of the final path names. For example,   GenerateVersions(""~/images/image.jpg"") Will generate /images/image\_thumb.jpg /images/image\_medium.jpg /images/image\_large.jpg  And will return a list of those paths.   public IList<string> GenerateVersions(string original) {       Dictionary<string, string> versions = new Dictionary<string, string>();       //Define the versions to generate and their filename suffixes.       versions.Add(""_thumb"", ""width=100&height=100&crop=auto&format=jpg""); //Crop to square        versions.Add(""_medium"", ""maxwidth=400&maxheight=400format=jpg""); //Fit inside 400x400       versions.Add(""_large"", ""maxwidth=1900&maxheight=1900&format=jpg""); //Fit inside 1900x1200         string basePath = ImageResizer.Util.PathUtils.RemoveExtension(original);        //To store the list of generated paths       List<string> generatedFiles = new List<string>();        //Generate each version       foreach (string suffix in versions.Keys)           //Let the image builder add the correct extension based on the output file type           generatedFiles.Add(ImageBuilder.Current.Build(original, basePath + suffix,              new ResizeSettings(versions[suffix]), false, true));        return generatedFiles;      } Convert and Resize Images as They Are Uploaded Resizing and processing images as they are uploaded is very straightforward. Most of the required code is about paths and directories. The following sample code generates a GUID filename for each upload, determines the appropriate file extension that is needed, then resizes/crops/formats the image according to the specified ResizeSettings.   //Loop through each uploaded file   foreach (string fileKey in HttpContext.Current.Request.Files.Keys)    {     HttpPostedFile file = HttpContext.Current.Request.Files[fileKey];     if (file.ContentLength <= 0) continue; //Skip unused file controls.      //The resizing settings can specify any of 30 commands.. See http://imageresizing.net for details.     //Destination paths can have variables like <guid> and <ext>, or      //even a santizied version of the original filename, like <filename:A-Za-z0-9>     ImageResizer.ImageJob i = new ImageResizer.ImageJob(file, ""~/uploads/<guid>.<ext>"", new ImageResizer.ResizeSettings(                  ""width=2000;height=2000;format=jpg;mode=max""));     i.CreateParentDirectory = true; //Auto-create the uploads directory.     i.Build();   } For VB.NET Users   'Loop through each uploaded file   For Each fileKey As String In HttpContext.Current.Request.Files.Keys       Dim file As HttpPostedFile = HttpContext.Current.Request.Files(fileKey)       If (file.ContentLength > 0) Then 'Skip unused file controls.         'The resizing settings can specify any of 30 commands.. See http://imageresizing.net for details.         'Destination paths can have variables like <guid> and <ext>, or          'even a santizied version of the original filename, like <filename:A-Za-z0-9>         Dim i As ImageResizer.ImageJob = New ImageResizer.ImageJob(file, ""~/uploads/<guid>.<ext>"", New ImageResizer.ResizeSettings(""width=2000;height=2000;format=jpg;mode=max""))         i.CreateParentDirectory = True 'Auto-create the uploads directory.         i.Build()       End If   Next Troubleshooting Getting Detailed Error Messages If some images are not displaying correctly, you must visit the image url directly to get the exact error message. The image URL is not the same as the page URL; viewing the broken image icons on the parent page doesn't tell us anything useful. How to Open the Image URL Directly In Chrome, right-click on the broken image and choose ""Open Image in New Tab"". In Firefox, right-click and choose ""View Image"". In IE, right-click the image and choose ""Properties"". Copy and paste the ""Address"" (URL) field contents into the address bar of a new window. Once You're Viewing the Image URL Directly If you do not get a specific error message, you must enable detailed error messages on your ASP.NET site. If you have local access to the server, you can set the customErrors mode to RemoteOnly and access the URLs using ""localhost"". Otherwise, you may need to temporarily set customErrors to ""Off"", so you can get error messages from a remote location. Temporarily is the key word! Detailed error messages are considered a security risk and have enabled certain types of attacks to function. They should not be enabled for more than a few hours at most on a publicly accessible server. You may also have to temporarily change <deployment retail to ""False"" for the customErrors setting to take effect. The customErrors setting is case-sensitive; use ""Off"", ""On"", and ""RemoteOnly"". Accessing Self-Diagnostics Most configuration and plugin installation issues can be resolved by checking ImageResizer’s self-diagnostics page. If your local website is running at http://localhost:5000/, then you can visit it at http://localhost:5000/resizer.debug.ashx. If you’re not using ImageResizer from a web app, you can access the page as a string via ImageResizer.Configuration.Config.Current.GetDiagnosticsPage() or write it to disk with ImageResizer.Configuration.Config.Current.WriteDiagnosticsTo(string path). Diagnostics Page Not Working? By default, the Diagnostics plugin uses the same setting as customErrors (which defaults to Localhost). Thus, if you can see ASP.NET error messages, you will also be able to get the diagnostics page. This ensures that the diagnostics page never exposes data to a host that doesn't already have access to detailed error messages. To override, add one of the following to the <resizer> section.   <diagnostics enableFor=""AllHosts"" />   <diagnostics enableFor=""Localhost"" />   <diagnostics enableFor=""None"" />  What Might Be Wrong To get support or use this guide, make sure you get the detailed error message from visiting the image URL directly. This guide cannot offer a solution to a generic 500 error, 404 error, or a ""broken image icon"", as those symptoms are far too generic to be useful. The troubleshooting tips presented here are specific to v4. Switch to the v3 troubleshooting page if you are using v3. If this page doesn't resolve your issue, visit the Support page for information about the bug bounty and free support requirements. Server Error in '/' Application. Out of memory. You might be trying to resize certain large images for the first time. Even a 15MB jpg, however, uncompresses to about 80MB in bitmap form (depending on the compression level). If you are resizing to a 2MB jpg (15MB BMP), memory requirements for the operation are roughly 110MB (15 + 80 + 15). If you plan on using ImageResizer for very high-resolution photos (above 8MP), we suggest making sure you have ample amounts of RAM. 400MB to 1GB is usually plenty for the average web site with disk caching enabled. Could not load type 'ImageResizer.InterceptModule' Potential causes: Your website has a 'sub-site' (Application Folder) inside it. Application Folders inherit all Web.config settings from their parent sites, yet expect to have their own copies of all the dlls referenced by those settings in their own /bin folder. You can resolve this problem by (a) changing the app folder to a virtual folder, (b) adding a copy of ImageResizer.dll and plugins into the /bin folder inside that application also, or (c) using <remove /> statements in the child Web.config to cancel out the inherited <add /> statements from the parent Web.config. Option (c) will disable image resizing within the sub-application. You didn't copy ImageResizer.dll into the /bin folder. The ImageResizer.dll file in /bin is corrupt. Verify it has the correct file size and version number, or re-copy it from the download. The type or namespace name ""ImageResizer"" could not be found When using the ImageResizer from a .NET project that is not a web project you may get the following build error: The type or namespace name ""ImageResizer"" could not be found (are you missing a using directive or assembly reference?) This is caused by using a Client Profile version of .NET instead of the Full version. You can change this in Project Properties -> Application -> Target Framework. The ImageResizer requires the full version, as it is also designed to support ASP.NET usage and references the System.Web assembly (which is not part of the client profile version of .NET). Image appears original size Potential causes: You did not register the HttpModule properly in both places of your Web.config file. Verify you can access /resizer.debug. If not, this is the problem. You are the IIS Classic Pipeline, and are not using the .jpg.ashx syntax, and you have not mapped all requests to the ASP.NET runtime. You are mistyping the querystring commands. The original image is smaller than the size you are requesting, and you are not using &scale=both (The default behavior is to never upscale images, but this can be changed). File not found Potential causes: You did not register the HttpModule properly in both places of your Web.config file. Verify you can access /resizer.debug. If not, this is the problem. You (a) aren't specifying a command string, (b) have Precompilation enabled, and (c) are using an image provider. This is caused by a long-standing bug in the .NET framework. You have a URL rewriting event that is affecting path names. This type of page is not served. (HTTP 403 error) Description: The type of page you have requested is not served because it has been explicitly forbidden. The extension '.jpg' may be incorrect. Please review the URL below and make sure that it is spelled correctly. Possible causes You aren't logged in. ImageResizer obeys your URL Authorization rules, so don't expect to view images where you can't visit .aspx pages. You are trying to access a S3 bucket or Remote URL that is not authorized. This generic error message often hides a more descriptive message, but that message is always guaranteed to be a ""Not Authorized To View this Content"" kind of error. Server object error 'ASP 0178 : 80070005' Server object error 'ASP 0178 : 80070005' Server.CreateObject Access Error The call to Server.CreateObject failed while checking permissions. Access is denied to this object. This error usually means that the user that the ASP website is running under does not have NTFS permissions to the ImageResizer dlls. Right click the C:\Program Files\ImageResizingNet\v3 folder and choose Properties, Security, hit Edit, then click Add, type in the user name your website is running under, hit OK, then check Read & Execute, and hit OK, then Apply. On IIS6, this account is typically IUSR_ComputerName, but on IIS7, the account is usually NETWORK SERVICE or (if you're not use a default app pool), a custom user account. You'll need to open IIS and inspect the appropriate Application Pool to find out which account you need to give permissions to. If that fails, providing Readonly access to the Everyone group should work, but that may not be acceptable if you have highly-isolated application pools which you don't want to be able to access the ImageResizer dlls files. If you still encounter issues, perform a reinstall with COMInstaller.exe, and save the install log. If the reinstall doesn't fix the problem, send the install log to support@imageresizing.net to get help with your issue. Quality loss when resizing 8-bit Grayscale Jpeg images This is a known bug in GDI+. GDI+ opens 8-bit grayscale Jpeg images as 4-bit images. Here's the bug report at Microsoft Connect. The workaround is to use WIC or FreeImage for these requests. Any of the following plugins will solve the problem WicDecoder - Install, then add &decoder=wic to affected URLs. (best quality) WicBuilder - Install, then add &builder=wic to affected URLs. Faster, but slightly lower quality than #1 (nearly imperceptible) FreeImageDecoder - Install, then add &decoder=freeimage FreeImageBuilder - Install, then add &builder=freeimage. Slowest, but highest quality. with builder=freeimage or builder=wic Performance issues or error messages when using a SAN. This is tricky to get right - read the full article here. Losing transparency when working with GIF images You must have the PrettyGifs plugin installed to get high-quality, transparent GIF and 8-bit PNG results. You may also want the AnimatedGifs plugin. SizeLimitException - The dimensions of the output image (4800x2700) exceed the maximum permitted dimensions of 3200x3200. By default, ImageResizer limits the output size of images to 3200x3200. This can be changed by configuring (or removing) the SizeLimiting plugin. Everything Else Licensing and Support Contract Information Licenses The short version: ImageResizer has several license packages that have different tiers of access to our plugins, including free packages in our essential and trial packages. To find out about our license packages, visit our website. Support Contracts For those times when (not if) everything breaks all at once, it's good to have us in your corner. Our support contracts come with architecture planning, hot-fixes, guaranteed rapid-response, emergency telephone numbers, and lots of other cool stuff. Furthermore, you can customize your plan to get just the right amount of support that you need. Remember: contracts can save money in the long-term, and we do our best to make sure our support contract customers get maximum bang for minimal buck. All ImageResizer support contracts come with a non-expiring Elite license, and free major upgrades for the duration of the contract. To see the different options available, check out our support contracts page. Contact Us We can be reached at support@imageresizing.net. We usually respond within 2 or 3 business days. Of course, you could also leave comments on our website, tag issues, or send smoke signals (Note: We do not actually advise sending smoke signals. Terrible waste of firewood, and bad for asthmatics to boot). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/imazen/resizer"	"Add commands to image URLs to get altered versions in milliseconds. Resizing, editing etc of images in real-time."	"true"
"Image Processing"	"ImageProcessor"	"http://imageprocessor.org/"	"Open-source.NET library to manipulate images on-the-fly."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1135"	"117"	"281"	"GitHub - JimBobSquarePants/ImageProcessor: A cross-platform library for processing of image files written in C# Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 117 Star 1,135 Fork 281 JimBobSquarePants/ImageProcessor Code Issues 21 Pull requests 4 Wiki Pulse Graphs 📷 A cross-platform library for processing of image files written in C# http://imageprocessor.org 2,240 commits 8 branches 12 releases 30 contributors C# 99.8% Other 0.2% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: Core Switch branches/tags Branches Tags Core-Flava Core-Lock Core-Web Core Framework gh-pages jpeg master Nothing to show 2.3.0 2.2.3 2.2.0 2.1.2 2.1.0 2.0.1 2.0.0 1.3.0 1.2.0 1.1.0 1.0.2 1.0.0 Nothing to show New pull request Latest commit a1f0b1c Jul 8, 2016 JimBobSquarePants No need to store the firstpass image as a variable. Permalink Failed to load latest commit information. build Add icons May 12, 2016 src/ImageProcessorCore No need to store the firstpass image as a variable. Jul 8, 2016 tests No need to store the firstpass image as a variable. Jul 8, 2016 .editorconfig Sanitation [skip ci] May 29, 2016 .gitattributes First Commit May 28, 2012 .gitignore Add icons May 12, 2016 APACHE-2.0-LICENSE.txt Async optimisation complete. Mar 24, 2013 ImageProcessorCore.sln Test script for grabbing latest dotnet cli May 19, 2016 ImageProcessorCore.sln.DotSettings Rename to Core Jan 29, 2016 NuGet.config Attempt fix build Nov 20, 2015 README.md Add warning [skip ci] Jul 7, 2016 Rebracer.xml Use direct access to Color to get/set pixels. Jul 5, 2016 Settings.StyleCop Update StyleCop nag May 22, 2016 appveyor.yml Use MyGet symbol server for now. May 20, 2016 contributing.md Adding contributing guidelines [skip ci] Jun 28, 2016 dotnet-latest.ps1 Trigger build May 19, 2016 global.json Remove SDK restraints. [skip ci] Jun 29, 2016 README.md ImageProcessorCore ImageProcessorCore is a new cross-platform 2D graphics API designed to allow the processing of images without the use of System.Drawing. It's still in early stages (alpha) but progress has been pretty quick. Please do not use on production environments until the library reaches release candidate status. For the older ImageFactory based API that uses System.Drawing please check out the Framework branch. ImageProcessor Needs Your Help ImageProcessor is the work of a very, very, small number of developers who struggle balancing time to contribute to the project with family time and work commitments. If the project is to survive we need more contribution from the community at large. There are several issues, most notably #264 and #347 that we cannot possibly solve on our own. We, and we believe many others in the community at large want a first-class 2D imaging library with a simple API that is not simply a wrapper round an existing library. We want it to have a low contribution bar which we believe can only happen if the library is written in C#. We want it to be written to cover as many use cases as possible. We want to write the same code once and have it work on any platform supporting .NET Core. With your help we can make all that a reality. If you can donate any time to improve on the project, be it helping with documentation, tests or contributing code please do. Thankyou for reading this Installation At present the code is pre-release but when ready it will be available on Nuget. Pre-release downloads We already have a MyGet package repository - for bleeding-edge / development NuGet releases. Manual build If you prefer, you can compile ImageProcessorCore yourself (please do and help!), you'll need: Visual Studio 2015 with Update 3 (or above) The .NET Core 1.0 SDK Installer - Non VSCode link. To clone it locally click the ""Clone in Windows"" button above or run the following git commands. git clone https://github.com/JimBobSquarePants/ImageProcessor What works so far/ What is planned? Encoding/decoding of image formats (plugable). Jpeg (Includes Subsampling. Progressive writing required) Bmp (Read: 32bit, 24bit, 16 bit. Write: 32bit, 24bit just now) Png (Read: TrueColor, Grayscale, Indexed. Write: True color, Indexed just now) Gif (Includes animated) Tiff Quantizers (IQuantizer with alpha channel support + thresholding) Octree Xiaolin Wu Palette Basic color structs with implicit operators. Vector backed. #260 Color - Float based, premultiplied alpha, No limit to r, g, b, a values allowing for a fuller color range. BGRA32 CIE Lab CIE XYZ CMYK HSV HSL YCbCr Basic shape primitives (Vector backed) Rectangle (Doesn't contain all System.Drawing methods) Size Point Ellipse Resampling algorithms. (Optional gamma correction, resize modes, Performance improvements?) Box Bicubic Lanczos3 Lanczos5 Lanczos8 MitchelNetravali Nearest Neighbour Robidoux Robidoux Sharp Robidoux Soft Spline Triangle Welch Padding Pad ResizeMode.Pad ResizeMode.BoxPad Cropping Rectangular Crop Elliptical Crop Entropy Crop ResizeMode.Crop Rotation/Skew Flip (90, 270, FlipType etc) Rotate by angle and center point (Expandable canvas). Skew by x/y angles and center point. ColorMatrix operations (Uses Matrix4x4) BlackWhite Greyscale BT709 Greyscale BT601 Hue Saturation Lomograph Polaroid Kodachrome Sepia Achromatomaly Achromatopsia Deuteranomaly Deuteranopia Protanomaly Protanopia Tritanomaly Tritanopia Edge Detection Kayyali Kirsch Laplacian3X3 Laplacian5X5 LaplacianOfGaussian Prewitt RobertsCross Scharr Sobel Blurring/Sharpening Gaussian blur Gaussian sharpening Box Blur Filters Alpha Contrast Invert BackgroundColor Brightness Pixelate Blend Mask Vignette Glow Threshold Effects Path brush (Need help) #264 Pattern brush (Need help) #264 Elliptical brush (Need help) #264 Gradient brush (vignette? Need help) #264 Metadata EXIF (In progress but there's a lot of quirks in parsing EXIF. #78) Other stuff I haven't thought of. What might never happen Font support (Depends on new System.Text stuff) I don't know where to start coding this so if you have any pointers please chip in. API Changes With this version the API will change dramatically. Without the constraints of System.Drawing I have been able to develop something much more flexible, easier to code against, and much, much less prone to memory leaks. Gone are system wide proces locks with Images and processors thread safe usable in parallel processing utilizing all the availables cores. Image methods are also fluent which allow chaining much like the ImageFactory class in the Framework version. Here's an example of the code required to resize an image using the default Bicubic resampler then turn the colors into their greyscale equivalent using the BT709 standard matrix. using (FileStream stream = File.OpenRead(""foo.jpg"")) using (FileStream output = File.OpenWrite(""bar.jpg"")) {     Image image = new Image(stream);     image.Resize(image.Width / 2, image.Height / 2)          .Greyscale()          .Save(output); } It will also be possible to pass collections of processors as params to manipulate images. For example here I am applying a Gaussian blur with a sigma of 5 to an image, then detecting the edges using a Sobel operator working in greyscale mode. using (FileStream stream = File.OpenRead(""foo.jpg"")) using (FileStream output = File.OpenWrite(""bar.jpg"")) {     Image image = new Image(stream);     List<IImageProcessor> processors = new List<IImageProcessor>()     {         new GuassianBlur(5),         new Sobel { Greyscale = true }     };      foreach (IImageProcessor processor in processors){          image.Process(processor)              .Save(output);     } } Individual processors can be initialised and apply processing against images. This allows nesting which will allow the powerful combination of processing methods: new Brightness(50).Apply(sourceImage, targetImage, sourceImage.Bounds); All in all this should allow image processing to be much more accessible to developers which has always been my goal from the start. How can you help? Please... Spread the word, contribute algorithms, submit performance improvements, unit tests. Help me set up CI for nightly releases. Performance is a biggie, if you know anything about the new vector types and can apply some fancy new stuff with that it would be awesome. There's a lot of developers out there who could write this stuff a lot better and faster than I and I would love to see what we collectively can come up with so please, if you can help in any way it would be most welcome and benificial for all. The ImageProcessor Team Grand High Eternal Dictator James Jackson-South Core Team Yufeih Huang Thomas Broust Christopher Bauer Jeavon Leopold Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/JimBobSquarePants/ImageProcessor"	"Open-source.NET library to manipulate images on-the-fly."	"true"
"Image Processing"	"DynamicImage"	"http://dynamicimage.apphb.com/"	"High-performance open-source image manipulation library for ASP.NET."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"131"	"13"	"38"	"GitHub - tgjones/dynamic-image: DynamicImage is a high-performance image manipulation library for ASP.NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 131 Fork 38 tgjones/dynamic-image forked from sitdap/dynamic-image Code Issues 8 Pull requests 2 Wiki Pulse Graphs DynamicImage is a high-performance image manipulation library for ASP.NET http://dynamicimage.apphb.com/ 192 commits 1 branch 0 releases Fetching contributors C# 86.1% PowerShell 8.2% CSS 3.2% FLUX 1.7% JavaScript 0.6% Shell 0.1% Other 0.1% C# PowerShell CSS FLUX JavaScript Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Pull request Compare This branch is 90 commits ahead, 1 commit behind sitdap:master. Latest commit 1622277 Dec 20, 2014 tgjones Don't use LayerBlenderEffect is BlendMode=Normal for all layers … As discovered by @geo242, creating a new ImageBrush when compositing each layer can result in high memory usage (for compositions with many layers), which is completely unnecessary for the most common case where BlendMode=Normal for all layers. Permalink Failed to load latest commit information. lib Moved build system to psake Feb 12, 2012 nuget/DynamicImage/content/App_Start Update nuget content file path Apr 30, 2013 src Don't use LayerBlenderEffect is BlendMode=Normal for all layers Dec 20, 2014 .gitignore Add DLLs required for Rendered3D layer Apr 30, 2013 CHANGELOG.markdown Fix dates in changelog May 13, 2014 LICENSE.txt Initial commit Aug 18, 2010 README.markdown Add build status to readme Jun 1, 2014 appveyor.yml Add appveyor.yml Sep 12, 2014 README.markdown DynamicImage This is the source code repository for DynamicImage, an open source image manipulation library for ASP.NET. DynamicImage helps you simplify the way you deal with images in your ASP.NET websites. Links DynamicImage Website and Documentation Getting Started Layers Filters DynamicImage NuGet packages DynamicImage Google Group API DynamicImage allows images to be created in two ways: Programmatically, using the object model: Composition composition = new Composition(); composition.Layers.Add(new ImageLayer {     SourceFileName = ""~/Assets/Images/AutumnLeaves.jpg"",     Filters =     {         new ResizeFilter { Width = Unit.Pixel(800), Mode = ResizeMode.UseWidth }     } }); composition.Layers.Add(new TextLayer {     Text = ""Hello World"",     Filters =     {         new OuterGlowFilter()     } }); string url = ImageUrlGenerator.GetImageUrl(composition);  Programmatically, using a fluent interface: string imageUrl = new CompositionBuilder()     .WithLayer(LayerBuilder.Image.SourceFile(""myimage.png"")         .WithFilter(FilterBuilder.Resize.ToWidth(800))     )     .WithLayer(LayerBuilder.Text.Text(""Hello World"")         .WithFilter(FilterBuilder.OuterGlow)     ).Url;  Layers Images in DynamicImage are composed of one or more layers, and each layer can have zero or more filters applied. DynamicImage includes several built-in layer types, and it is straightforward to create your own. Image Layer Fractal Layer (Julia and Mandelbrot) Polygon Shape Layer Rectangle Shape Layer Text Layer Image Sources Image Layers accept input from a variety of sources, and it is also straightforward to write your own ImageSource. The image sources included with DynamicImage let you load images from: Raw bytes Binary database field File Remote URL System.Windows.Media.Imaging.BitmapSource object Filters Filters are applied to layers to modify them in some way. DynamicImage provides more than 15 filters you can apply to your images, including: Brightness Adjustment Clipping Mask Colour Key Colour Tint Contrast Adjustment Crop Distort Corners Drop Shadow Emboss Feather Gaussian Blur Grayscale Inversion Opacity Adjustment Outer Glow Resize Rotation Sepia Shiny Floor Caching Output images can be cached, based on settings in web.config. You can write your own cache provider, and the built-in cache providers are: In-memory XML file Underpinnings DynamicImage uses Windows Presentation Foundation (WPF) internally for bitmap manipulation. Most of the filters are written as WPF shader effects, which are compiled into fast SSE instructions, and run with good performance in a server environment. More information The DynamicImage website includes a getting started guide, as well as examples of every layer and filter. If you get stuck, you can try: asking on StackOverflow, and then tweeting me a link to the question asking a question on the Google Group tweeting me emailing me Preferably in that order, please :) Acknowledgements DynamicImage was created by Sound in Theory Ltd, a web design company based in Exeter, United Kingdom. Sound in Theory Ltd Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tgjones/dynamic-image"	"High-performance open-source image manipulation library for ASP.NET."	"true"
"Image Processing"	"MetadataExtractor"	"https://github.com/drewnoakes/metadata-extractor-dotnet"	"Extracts Exif, IPTC, XMP, ICC and other metadata from image files."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"45"	"7"	"11"	"GitHub - drewnoakes/metadata-extractor-dotnet: Extracts Exif, IPTC, XMP, ICC and other metadata from image and movie files Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 45 Fork 11 drewnoakes/metadata-extractor-dotnet Code Issues 9 Pull requests 2 Pulse Graphs Extracts Exif, IPTC, XMP, ICC and other metadata from image and movie files 782 commits 2 branches 8 releases 4 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master new-api Nothing to show portable-1.1.1-beta2 1.4.0 1.3.0 1.2.0 1.1.1-beta3 1.1.0 1.0.0 1.0.0-rc3 Nothing to show New pull request Latest commit 153a77b Apr 30, 2016 drewnoakes Document the StringValue type. Permalink Failed to load latest commit information. MetadataExtractor.Tests Hold original string byte arrays to allow variable encoding (second try) Apr 30, 2016 MetadataExtractor.Tools.FileProcessor Remove unused using directive. Apr 30, 2016 MetadataExtractor.Tools.JpegSegmentExtractor Bump copyright year. Mar 24, 2016 MetadataExtractor Document the StringValue type. Apr 30, 2016 docs Add and use SVG version of project logo. Nov 25, 2015 .gitattributes Add .gitattributes. Sanitise EOL whitespace and line endings. Jun 8, 2015 .gitignore Add .vs folder to .gitignore. Feb 14, 2016 CONTRIBUTING.md Add details on contributing to the project. Jun 21, 2015 LICENSE Bump copyright year. Mar 24, 2016 MetadataExtractor.sln Add more solution items. Feb 14, 2016 MetadataExtractor.sln.DotSettings Add AE to list of abbreviations. Mar 28, 2016 README.md Add support for Apple makernotes. Apr 23, 2016 SharedAssemblyInfo.cs Version 1.4.0 Apr 20, 2016 README.md MetadataExtractor is a straightforward .NET library for reading metadata from image and movie files. Installation The easiest way to use this library is via its NuGet package: PM> Install-Package MetadataExtractor  Usage IEnumerable<Directory> directories = ImageMetadataReader.ReadMetadata(imagePath); The resulting directories sequence holds potentially many different directories of metadata, depending upon the input image. To print out all values from all directories: foreach (var directory in directories) foreach (var tag in directory.Tags)     Console.WriteLine($""{directory.Name} - {tag.Name} = {tag.Description}""); Producing: Exif SubIFD - Exposure Time = 1/60 sec Exif SubIFD - F-Number = f/8.0 ... Exif IFD0 - Make = NIKON CORPORATION Exif IFD0 - Model = NIKON D70 ... IPTC - Credit = Drew Noakes IPTC - City = London ...  Access a specific value, in this case the Exif DateTime tag: var subIfdDirectory = directories.OfType<ExifSubIfdDirectory>().FirstOrDefault(); var dateTime = subIfdDirectory?.GetDescription(ExifDirectoryBase.TagDateTime); Features The library understands several formats of metadata, many of which may be present in a single image: Exif IPTC XMP JFIF / JFXX ICC Profiles Photoshop fields WebP properties PNG properties BMP properties GIF properties ICO properties PCX properties It will process files of type: JPEG TIFF WebP PSD PNG BMP GIF ICO PCX Camera Raw NEF (Nikon) CR2 (Canon) ORF (Olympus) ARW (Sony) RW2 (Panasonic) RWL (Leica) SRW (Samsung) Camera-specific ""makernote"" data is decoded for cameras manufactured by: Agfa Apple Canon Casio Epson Fujifilm Kodak Kyocera Leica Minolta Nikon Olympus Panasonic Pentax Sanyo Sigma/Foveon Sony Supported Frameworks Multiple target frameworks are supported via the single NuGet package. This allows supports Xamarin for Android and iOS, as well as: .NET Framework 3.5 .NET Framework 4.5 .NET Framework 4.5 (Portable) Silverlight 5.0 Windows 8.0 Windows Phone 8.1 Windows Phone Silverlight 8.0 Note that the PCL version does not support file-system metadata due to restricted IO APIs. Mailing List The metadata-extractor-dev Google Group is for discussion about the development of the library and questions about its usage. Feedback Have questions or ideas? Try the mailing list or open an issue. GitHub's issue tracker accepts attachments, and sample images are often crucial in debugging problems. Contribute If you want to get your hands dirty, clone this repository, enhance the library and submit a pull request. Review the issue list and ask around on the mailing list to avoid duplication of work. An easier way to help is to contribute to the sample image file library used for research and testing. Credits This library is developed by Drew Noakes and contributors. Thanks are due to the many users who sent in suggestions, bug reports, sample images from their cameras as well as encouragement. Wherever possible, they have been credited in the source code and commit logs. This library was originally written in Java in 2002. In 2014, Yakov Danilov (for Imazen LLC) converted the code to C# using Sharpen. Both projects are now developed in unison and aim to be functionally equivalent. License Copyright 2002-2016 Drew Noakes Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. More information about this project is available at: https://drewnoakes.com/code/exif/ https://github.com/drewnoakes/metadata-extractor-dotnet/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/drewnoakes/metadata-extractor-dotnet"	"Extracts Exif, IPTC, XMP, ICC and other metadata from image files."	"true"
"Image Processing"	"Emgu CV"	"http://www.emgu.com/wiki/index.php/Main_Page"	"Cross-platform.NET wrapper for the OpenCV library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Emgu CV: OpenCV in .NET (C#, VB, C++ and more) Main Page From Emgu CV: OpenCV in .NET (C#, VB, C++ and more) Jump to: navigation, search Emgu CV is a cross platform .Net wrapper to the OpenCV image processing library. Allowing OpenCV functions to be called from .NET compatible languages such as C#, VB, VC++, IronPython etc. The wrapper can be compiled by Visual Studio, Xamarin Studio and Unity, it can run on Windows, Linux, Mac OS X, iOS, Android and Windows Phone. Contents 1 Latest News 2 Platform Features 2.1 Windows 2.2 Mobile Devices 2.3 OSX, Linux, Unix 3 Advantage of Emgu CV 3.1 Cross Platform 3.2 Cross Language and comes with example code 3.3 Other Advantages 4 Architecture Overview Latest News 2016-05-01 Emgu.CV-3.1.0 for Xamarin is now also available to be purchased in Xamarin Component Store. Demo version that supports Android x86 and iOS simulator can be downloaded for free. 2016-02-06 Emgu.CV-3.1.0 final release is available in sourceforge. This version added 64 bit Android (x86_64, arm64_v8) support for Xamarin. See change log and known issues. 2015-07-12 Emgu.CV-3.0.0 final release is available in sourceforge. This is the first stable release based on Open CV 3.0 final. See change log and known issues. 2015-05-17 Emgu.CV-3.0.0-rc1 is available in sourceforge. This version adds support for Windows Phone (8.1 is required) and Unity 5.0. See change log and known issues. 2015-03-08 Added support for Raspberry Pi 2. Build instruction is available here. Happy hacking with this credit card size quad-core computer for only $35 !!! 2015-01-17 Added 64bit iOS support (through Xamarin iOS unified SDK). The iOS packages (2.4.10-unified & 3.0.0-beta-unified) are available for download for Emgu CV iOS commercial license owners. 2014-12-06 Emgu.CV-3.0.0-alpha is available in sourceforge. See change log and known issues. 2014-12-06 Emgu.CV-2.4.10 is available in sourceforge. See change log and known issues. 2013-08-31 Added support to Windows 8 Store App (x86, x64) as part of Windows commercial release. Android version is now stable for commercial release. 2012-09-16 Emgu.CV-2.4.2 is available in sourceforge. See change log and known issues. 2012-05-26 Emgu.CV-2.4.0 is available in sourceforge. This version adds support for iOS and Android. See change log and known issues. 2011-08-20 Emgu.CV-2.3.0 is available in sourceforge. See change log and known issues. 2011-02-05 Emgu.CV-2.2.1.1150 is available in sourceforge. See change log and known issues. 2010-12-15 Emgu.CV-2.2.0.1010 is available in sourceforge. See change log and known issues. 2010-04-06 Emgu.CV-2.1.0.0 is available in sourceforge. It is released on the same day as OpenCV 2.1! In this release we have keep up our cross platform promise and release binaries for 64-bit windows, as well as 32 & 64 bit debian package for Unbuntu and 32 bit rpm package for Fedora 12! See change log and known issues. 2009-10-25 Emgu.CV-2.0.1.0 is available in sourceforge. Welcome to the first .NET wrapper that is compatible with OpenCV 2.0! See change log and known issues. 2009-07-12 Emgu.CV-2.0.0.0 Alpha is available in sourceforge. This version is built with OpenCV SVN 1918 and is not recommend for production environment. See change log and known issues. 2009-02-25 Emgu.CV-1.5.0.0 is available in sourceforge. See change log and known issues. 2008-11-24 Emgu.CV-1.4.0.0 is available in sourceforge. See change log and known issues. 2008-09-02 Emgu.CV-1.3.0.0 is available in sourceforge. See change log. 2008-05-24 Emgu.CV-1.2.2.0 is available in sourceforge. See change log. 2008-05-10 Emgu CV Discussion Forum is available at http://www.emgu.com/forum Platform Features Windows Name Emgu CV (Open Source) Emgu CV for Windows (Commercial Optimized) Emgu CV for Unity Development tools Visual Studio 2010 and up Visual Studio 2010 and up Visual Studio 2013 and up Unity 3D Pro v5.1 and up Platform Windows Windows Windows 8.1 Store app * Windows Desktop Standalone Supported CPU Architecture i386, x64 i386, x64 i386, x64 i386 (Editor & Standalone), x64 (Standalone) CUDA GPU Processing X X OpenCL (GPU&CPU) X Tesseract OCR Compiled with Intel C++ Compiler,TBB & IPP X X X Exception Handling Debugger Visualizer X X Emgu.CV.UI X X License GPL Commercial License Commercial License Windows 8.1 Store App version is included in the Windows Commercial release Windows RT is currently NOT supported Mobile Devices Name Emgu CV for Xamarin iOS Bussiness Version+ Emgu CV for Xamarin Android Bussiness Version+ Emgu CV for Windows Phone Emgu CV for Unity Requirement Xamarin iOS Bussiness Version+ Xamarin Android Bussiness Version+ Visual Studio 2013 and Windows Phone 8.1 Unity 3D v5.1 Pro / Free version Platform iOS (iPhone, IPad, IPod Touch) Android Windows Phone 8.1 iOS (iPhone, IPad, IPod Touch) Android Windows Phone 8.1 Supported Device armv7, armv7a, arm64 armeabi, armeabi-v7a, arm64-v8a, x86, x86_64 arm armv7, armv7a, arm64 armeabi-v7a, x86 arm Supported Simulator i386, x64 armeabi, armeabi-v7a, arm64-v8a, x86, x86_64 x86 i386 armeabi-v7a, x86 x86 CUDA GPU Processing X X X X X X OpenCL 1.2 (GPU&CPU) X (on supported devices) X X (on supported devices) X Tesseract OCR Exception Handling License Commercial License Commercial License Commercial License Commercial License OSX, Linux, Unix For OSX, Linux and Unix platform, you need to compile the binary from source. Name Emgu CV (Open Source) Emgu CV for OSX, Linux Unix(Commercial License) Emgu CV for Unity Development Tools Xamarin Studio or MonoDevelop Xamarin Studio or MonoDevelop Unity 3D Pro v5.1 OSX x86 & x64 (Editor & Standalone) Linux, Unix X CUDA GPU Processing X OpenCL (GPU&CPU) Tesseract OCR Exception Handling Emgu.CV.UI X License GPL Commercial License Commercial License Advantage of Emgu CV Cross Platform Emgu CV is written entirely in C#. The benefit is that it can be compiled in Mono and therefore is able to run on any platform Mono supports, including iOS, Android, Windows Phone, Mac OS X and Linux. A lot of efforts has been spent to have a pure C# implementation since the headers have to be ported, compared with managed C++ implementation where header files can simply be included. But it is well worth it if you see Emgu CV running on Fedora 10! Plus it always gives you the comfort knowing that your code is cross-platform. Cross Language and comes with example code Emgu CV can be used from several different languages, including C#, VB.NET, C++ and IronPython. On this wiki, we provide examples for all those languages, which are available from the Examples section on Tutorial page. Our Discussion Forum is also available if you have any questions related to your favourite programming language. Other Advantages Image class with Generic Color and Depth Automatic garbage collection XML Serializable Image XML Documentation and intellisense support The choice to either use the Image class or direct invoke functions from OpenCV Generic operations on image pixels Architecture Overview Emgu CV has two layers of wrapper as shown below The basic layer (layer 1) contains function, structure and enumeration mappings which directly reflect those in OpenCV. The second layer (layer 2) contains classes that mix in advantanges from the .NET world. Retrieved from ""http://www.emgu.com/wiki/index.php?title=Main_Page&oldid=1988"" Navigation menu Personal tools Create account Log in Namespaces Page Discussion Variants Views Read View source View history More Search Navigation Main Page Tutorial API Documentation Version History Download and Installation Support and Services Discussion Forum Bug Tracking Code Gallery Licensing: others GIT SourceForge Recent Changes Tools What links here Related changes Special pages Printable version Permanent link Page information This page was last modified on 1 May 2016, at 22:39. Content is available under GNU Free Documentation License 1.2 unless otherwise noted. Privacy policy About Emgu CV: OpenCV in .NET (C#, VB, C++ and more) Disclaimers"	"null"	"null"	"Cross-platform.NET wrapper for the OpenCV library."	"true"
"Image Processing"	"DotImaging"	"https://github.com/dajuric/dot-imaging"	"Minimalistic.NET imaging portable platform"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"154"	"13"	"9"	"GitHub - dajuric/dot-imaging: Minimalistic  .NET imaging portable platform Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 154 Fork 9 dajuric/dot-imaging Code Issues 0 Pull requests 0 Pulse Graphs Minimalistic .NET imaging portable platform 75 commits 1 branch 7 releases 1 contributor C# 99.8% Batchfile 0.2% C# Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v4.7.5 v4.7.0 v4.5.0 v4.0.1 v3.0.0 v2.5.6 v2.5.0 Nothing to show New pull request Latest commit 320d2cf Jul 12, 2016 dajuric Merge branch 'master' of https://github.com/dajuric/dot-imaging.git Permalink Failed to load latest commit information. .nuget Intial commit Jun 20, 2015 Deployment Merge branch 'master' of https://github.com/dajuric/dot-imaging.git Jul 12, 2016 Samples Fixing non-readable 'avi' Jul 12, 2016 Source Fixing non-readable 'avi' Jul 12, 2016 Test Fixing UI.GetRectangle() Jan 31, 2016 .gitignore Intial commit Jun 20, 2015 DotImaging.sln Updating UI, Primitives2D, renaming samples. Updating README. Jan 28, 2016 README.md Fixing non-readable 'avi' Jul 12, 2016 README.md DotImaging - .NET array as imaging object The framework sets focus on .NET native array as primary imaging object, offers extensibility support via extensions, and provides unified platform-abstract imaging IO API. So why DotImaging ? leverages existing .NET structures portable* lightweight so simple, you don't need a help file *IO and Drawing assemlies depend on OpenCV Libraries / NuGet packages Core .NET image array extensions. Color and depth conversions. Slim unmanaged structure for fast pixel manipulation. Tutorial: Portable Generic Image //convert to grayscale and flip Bgr<byte>[,] image = ImageIO.LoadColor(""sample.jpg"").Clone(); //IO package Gray<byte>[,] grayIm = image.ToGray()                             .Flip(FlipDirection.Horizontal); Portable 2D drawing primitives (Point, Size, Rectangle, ...) IO A unified API for IO image access (camera, file, image directory). Portable image loading/saving. Tutorial: Portable Imaging IO var reader = new FileCapture(""sample.mp4""); reader.Open();  Bgr<byte>[,] frame = null; while(true) {    reader.ReadTo(ref frame);    if (frame == null)       break;     frame.Show(scaleForm: true); //UI package }  reader.Close(); Image or video download/streaming (direct video link or Youtube links). //------get an image from the Web new Uri(""http://vignette3.wikia.nocookie.net/disney/images/5/5d/Lena_headey_.jpg"")  .GetBytes().DecodeAsColorImage().Show(); //(Show - UI package)  //------stream a video from Youtube var pipeName = new Uri(""https://www.youtube.com/watch?v=Vpg9yizPP_g"").NamedPipeFromYoutubeUri(); //Youtube var reader = new FileCapture(String.Format(@""\\.\pipe\{0}"", pipeName)) //IO package  //... (regular stream reading - see IO package sample) Interoperability Interoperability extensions between .NET array and Bitmap (WinForms). var image = new Gray<byte>[240, 320]; var bmp = image.ToBitmap(); //to Bitmap  var imageFromBmp = bmp.ToArray() as Bgr<byte>[,]; //from Bitmap Interoperability extensions between .NET array and BitmapSource (WPF). var bmp = new BitmapImage(new Uri(""<path>"")); Bgra<byte>[,] colorImg = bmp.ToArray<Bgra<byte>>(); //to bitmap  var imageFromBitmap = colorImg.ToBitmapSource(); //from bitmap Extensions Portable UI elements (image display, progress bar, file/folder dialogs, color-picker, image annotation input). Bgr<byte>[,] image = new Bgr<byte>[480, 640]; image.Show(); //show image (non-blocking)  (0.4d).Progress(); //progress bar - 40% (non-blocking)  string fileName = UI.OpenFile(); //open-file dialog  Bgr<byte> color = UI.PickColor(); //color-picker dialog  Gray<byte>[,] mask = image.GetMask(); //draw-mask dialog   RectangleF rect = image.GetRectangle(); //draw-rectangle dialog (blocking and non-blocking)  var num = -1; UI.ShowMenu(itemNames: new string[] { ""2"", ""3"" },             actions: new Action[] { () => num = 2, () => num = 3 }); //menu-dialog .NET image drawing array extensions. //create a managed image var image = new Bgr<byte>[480, 640];  //draw something image.Draw(new Rectangle(50, 50, 200, 100), Bgr<byte>.Red, -1); image.Draw(new Circle(50, 50, 25), Bgr<byte>.Blue, 5); 2D array Linq extensions //create a managed image Bgr<byte>[,] image = ...;   //get the modified blue channel  var modifiedImage = image.AsEnumerable()                          .Select(x => x.B / 2)                          .ToArray2D(image.Size()); Provides a portable way to determine the execution platform + interoperability functions. Console.WriteLine(Platform.RunningPlatform); //Windows, Linux, MacOS  //add the ""UnmanagedLibraries/<OS>/<platform>/"" to the path Platform.AddDllSearchPath(); Getting started Just pick what you need. An appropriate readme file will be shown upon selected NuGet package installation. Samples Want image processing algorithms ? The framework is the foundation of Accord.NET Extensions which exposes a full power of Accord.NET through extensions! How to Engage, Contribute and Provide Feedback Remember: Your opinion is important and will define the future roadmap. questions, comments - message on Github, or write to: darko.juric2 [at] gmail.com spread the word Final word If you like the project please star it in order to help to spread the word. That way you will make the framework more significant and in the same time you will motivate me to improve it, so the benefit is mutual. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dajuric/dot-imaging"	"Minimalistic.NET imaging portable platform"	"true"
"Install tools"	"Wix Toolset"	"http://wixtoolset.org/"	"The most powerful set of tools available to create your Windows installation experience"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"WiX Toolset · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization WiX Toolset The most powerful set of tools available to create your Windows installation experience. Free and Open Source since 2004! http://wixtoolset.org/ wix@wixtoolset.org Repositories People 3 Filters Sources Forks C# 189 65 wix4 WiX Toolset v4.x Updated Jul 13, 2016 C# 238 150 wix3 WiX Toolset v3.x Updated Jul 11, 2016 CSS 2 9 web WiX Toolset Website Updated Jul 6, 2016 9 7 issues WiX Toolset Issues Tracker Updated Jun 2, 2016 2 3 icebreaker The ICE Breaker project to replace and improve Windows Installer ICEs Updated Sep 18, 2014 3 People barnson Bob Arnson robmen Rob Mensching rseanhall Sean Hall Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/wixtoolset/"	"The most powerful set of tools available to create your Windows installation experience"	"true"
"Install tools"	"Squirrel"	"https://github.com/squirrel/squirrel.windows"	"Squirrel is both a set of tools and a library, to completely manage both installation and updating your Desktop Windows application."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2050"	"167"	"292"	"GitHub - Squirrel/Squirrel.Windows: An installation and update framework for Windows desktop apps Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 167 Star 2,050 Fork 292 Squirrel/Squirrel.Windows Code Issues 202 Pull requests 20 Wiki Pulse Graphs An installation and update framework for Windows desktop apps 988 commits 13 branches 44 releases 60 contributors C++ 67.6% C# 28.9% C 3.1% Objective-C 0.4% C++ C# C Objective-C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags delete-stuff-i-dont-like env-vars-are-all-lies fix-up-docs get-shortcuts implement-more-tests master nothing-to-do-means-run-firstrun paulcbetts-patch-1 remove-ionic run-on-install setup-create shortcut-fixes update-bzip2 Nothing to show 1.4.1 1.4.0 1.3.0 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.1.2 1.1.1 1.1.0 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 0.99.3 0.99.2 0.99.1 0.99.0 0.9.5 0.9.4 0.9.3 0.9.2 0.9.1 0.9.0 0.8.5 0.8.4 0.8.3 0.8.2 0.8.1 0.8.0 0.7.2 0.7.1 0.7.0 0.6.1 0.6.0 0.5.4 0.5.3 0.5.2 0.5.1 0.5.0 Nothing to show New pull request Latest commit aae890e Jul 14, 2016 paulcbetts Version bump to 1.4.1 Permalink Failed to load latest commit information. .nuget Remove duplicates May 6, 2015 docs Fixed typo May 28, 2016 ext Update to icsharpcode/SharpZipLib@e012155 Sep 4, 2015 src Version bump to 1.4.1 Jul 14, 2016 test Fix a test Jul 14, 2016 vendor Instead of using random GUIDs, use ones that will stay the same throu… Apr 8, 2016 .gitattributes Treat UTF-16 files in src/Setup as binary Oct 28, 2014 .gitignore Ignore *.sln.ide directories Dec 8, 2014 .gitmodules Add NuGet.Core as a submodule Aug 5, 2015 COPYING Add a License Aug 29, 2014 README.md Add missing cd command to the general readme.md file to be consistent… Feb 17, 2016 Squirrel.sln Add WiX template to SolutionItems Apr 12, 2016 README.md README.md Squirrel: It's like ClickOnce but Works™ Squirrel is both a set of tools and a library, to completely manage both installation and updating your Desktop Windows application, written in either C# or any other language (i.e., Squirrel can manage native C++ applications). Squirrel uses NuGet packages to create installation and update packages, which means that you probably already know most of what you need to create an installer. What Do We Want? Windows apps should be as fast and as easy to install and update as apps like Google Chrome. From an app developer's side, it should be really straightforward to create an installer for my app, and publish updates to it, without having to jump through insane hoops. Integrating an app to use Squirrel should be extremely easy, provide a client API, and be developer friendly. Packaging is really easy, can be automated, and supports delta update packages. Distributing should be straightforward, use simple HTTP updates, and provide multiple ""channels"" (a-la Chrome Dev/Beta/Release). Installing is Wizard-Free™, with no UAC dialogs, does not require reboot, and is .NET Framework friendly. Updating is in the background, doesn't interrupt the user, and does not require a reboot. Refer to our full list of goals for integrating, packaging, distributing, installing, and updating. Documentation See the documentation Table of Contents for an overview of the available documentation for Squirrel.Windows. It includes a Getting Started Guide as well as additional topics related to using Squirrel in your applications. Building Squirrel For the impatient: git clone https://github.com/squirrel/squirrel.windows cd squirrel.windows git submodule update --init --recursive       ## THIS IS THE PART YOU PROBABLY FORGOT .\.NuGet\NuGet.exe restore msbuild /p:Configuration=Release See Contributing for additional information on building and contributing to Squirrel. License and Usage See COPYING for details on copyright and usage of the Squirrel.Windows software. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/squirrel/squirrel.windows"	"Squirrel is both a set of tools and a library, to completely manage both installation and updating your Desktop Windows application."	"true"
"Install tools"	"Chocolatey"	"https://github.com/chocolatey/choco"	"like yum or apt-get, but for Windows."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2136"	"135"	"256"	"GitHub - chocolatey/choco: Chocolatey CLI Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 135 Star 2,136 Fork 256 chocolatey/choco Code Issues 277 Pull requests 12 Wiki Pulse Graphs Chocolatey CLI https://chocolatey.org 1,861 commits 3 branches 31 releases 30 contributors C# 86.3% PowerShell 12.6% Other 1.1% C# PowerShell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.9.9.x master stable Nothing to show versioning.for.uc 0.9.10.3 0.9.10.2 0.9.10.1 0.9.10 0.9.10-rc1 0.9.10-beta1 0.9.10-alpha1 0.9.9.12 0.9.9.11 0.9.9.10 0.9.9.9 0.9.9.8 0.9.9.7 0.9.9.6 0.9.9.5 0.9.9.4 0.9.9.3 0.9.9.2 0.9.9.1 0.9.9 0.9.9-rc9 0.9.9-rc8 0.9.9-rc7 0.9.9-rc6 0.9.9-rc5 0.9.9-rc4 0.9.9-rc3 0.9.9-rc2 0.9.9-rc1 0.9.9-beta3 Nothing to show New pull request Latest commit 252f1a3 Jun 29, 2016 ferventcoder committed on GitHub Merge pull request #832 from asizikov/patch-1 … Typo fixed in a readme.md Permalink Failed to load latest commit information. .build.custom (doc) update generated docs / add download Jun 9, 2016 .build (GH-501) allow shutting off sign when no network Apr 9, 2016 .github (doc) No really, ALL the output please Mar 21, 2016 .nuget adding solution Dec 13, 2013 docs (legal) add logo use policy Jun 16, 2016 lib (maint) licensing updates Jun 11, 2016 nuget update CHANGELOG/nuspec Jun 23, 2016 src (maint) match casing for directory override args Jun 23, 2016 .editorconfig (maint) legal and notices Dec 14, 2013 .gitignore (maint) ignore .vscode folder Apr 21, 2016 .travis.yml (maint) Specify mono version for Travis-CI Jul 30, 2015 .uppercut (version) 0.9.10.3 Jun 23, 2016 CHANGELOG.md update CHANGELOG/nuspec Jun 23, 2016 COMMITTERS.md (doc) Committers - Add branch targeting Mar 1, 2015 CONTRIBUTING.md Merge branch 'stable' Jun 11, 2016 LICENSE (maint) legal and notices Dec 14, 2013 NOTICE (doc) correct license notice for new choco Jan 14, 2015 README.md (doc) fix typo in Readme Jun 29, 2016 Scenarios.md (specs) update scenarios Apr 10, 2016 appveyor.yml (build) configure coveralls.io Feb 6, 2015 build.bat (doc) attempt to document scenarios every run Jun 1, 2015 build.sh (build) update uc Aug 26, 2015 chocolatey.snk adding solution Dec 13, 2013 documentscenarios.bat (doc) update scenarios Jun 1, 2015 setup.cmd (maint) bringing in chocolatey nuspec Dec 14, 2013 setup.ps1 (maint) bringing in chocolatey nuspec Dec 15, 2013 test.bat (build) test.bat not quiet, no results Feb 16, 2015 zip.bat (build) upgrade to uc v1.4.5 Jan 24, 2015 zip.sh (build) update uc Aug 27, 2015 README.md Chocolatey - like yum or apt-get, but for Windows You can just call me choco. Build Status TeamCity AppVeyor Travis Chat Room Come join in the conversation about Chocolatey in our Gitter Chat Room Or, you can find us in IRC at #chocolatey on freenode. IRC is not as often checked by committers, so it is recommended you stick to Gitter if you need more timely assistance. Please make sure you've read over and agree with the etiquette regarding communication. Support Chocolatey! Purchase Chocolatey Pro / Chocolatey for Business Donate See Chocolatey In Action Chocolatey FOSS install showing tab completion and refreshenv (a way to update environment variables without restarting your shell): Chocolatey Pro showing private CDN download cache and virus scan protection: Etiquette Regarding Communication When requesting support, try to remember that we are all volunteers that have lives outside of open source and none of us are paid to ensure things work for you, so please be considerate of others' time when you are asking for things. Many of us have families that also need time as well and only have so much time to give on a daily basis. In the future, we hope that some of us are paid to do this full time and can provide better support when folks are running into issues, but until then a little consideration and patience can go a long way. After all, you are using a pretty good tool without cost. It may not be perfect (yet), and we know that. Information Chocolatey site Community Package Repository aka Chocolatey.org Mailing List/Forum Twitter Build Status Email List Join the newsletter and stay up to date with the latest happenings! Documentation Please see the docs Give choco.exe /? a shot (or choco.exe -h). For specific commands, add the command and then the help switch e.g. choco.exe install -h. Requirements .NET Framework 4.0 PowerShell 2.0+ Windows Server 2003+ / Windows 7+ License / Credits Apache 2.0 - see LICENSE and NOTICE files. Submitting Issues If you are having issue with a package, please see Request Package Fixes or Updates / Become a maintainer of an existing package. If you are looking for packages to be added to the community feed (aka https://chocolatey.org/packages), please see Package Requests. If it is an issue with the website (the community feed aka https://chocolatey.org), please submit the issue to the Chocolatey.org repo. If you have found an issue with the GUI (Chocolatey GUI), please see the ChocolateyGUI repository. If you have found an issue with the client (choco.exe), you are in the right place. Keep reading below. Observe the following help for submitting an issue: Prerequisites: The issue has to do with choco itself and is not a package or website issue. Please check to see if your issue already exists with a quick search of the issues. Start with one relevant term and then add if you get too many results. You are not submitting an ""Enhancement"". Enhancements should observe CONTRIBUTING guidelines. You are not submitting a question - questions are better served as emails or gitter chat questions. Please make sure you've read over and agree with the etiquette regarding communication. Submitting a ticket: We'll need debug and verbose output, so please run and capture the log with -dv or --debug --verbose. You can submit that with the issue or create a gist and link it. Please note that the debug/verbose output for some commands may have sensitive data (passwords or apiKeys) related to Chocolatey, so please remove those if they are there prior to submitting the issue. choco.exe logs to a file in $env:ChocolateyInstall\log\. You can grab the specific log output from there so you don't have to capture or redirect screen output. Please limit the amount included to just the command run (the log is appended to with every command). Please save the log output in a gist (save the file as log.sh) and link to the gist from the issue. Feel free to create it as secret so it doesn't fill up against your public gists. Anyone with a direct link can still get to secret gists. If you accidentally include secret information in your gist, please delete it and create a new one (gist history can be seen by anyone) and update the link in the ticket (issue history is not retained except by email - deleting the gist ensures that no one can get to it). Using gists this way also keeps accidental secrets from being shared in the ticket in the first place as well. We'll need the entire log output from the run, so please don't limit it down to areas you feel are relevant. You may miss some important details we'll need to know. This will help expedite issue triage. It's helpful to include the version of choco, the version of the OS, and the version of PowerShell (Posh) - the debug script should capture all of those pieces of information. Include screenshots and/or animated gifs whenever possible, they help show us exactly what the problem is. Contributing If you would like to contribute code or help squash a bug or two, that's awesome. Please familiarize yourself with CONTRIBUTING. Committers Committers, you should be very familiar with COMMITTERS. Compiling / Building Source There is a build.bat/build.sh file that creates a necessary generated file named SolutionVersion.cs. It must be run at least once before Visual Studio will build. Windows Prerequisites: .NET Framework 4+ Visual Studio is helpful for working on source. ReSharper is immensely helpful (and there is a .sln.DotSettings file to help with code conventions). Build Process: Run build.bat. Running the build on Windows should produce an artifact that is tested and ready to be used. Other Platforms Prerequisites: Install and configure Mono 3.12.0 (3.8.0 should also work). Debian based # add the key  sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF # add the package repository echo ""deb http://download.mono-project.com/repo/debian wheezy main"" | sudo tee /etc/apt/sources.list.d/mono-xamarin.list # Ubuntu 12.10/12.04 - add this deb as well echo ""deb http://download.mono-project.com/repo/debian wheezy-libtiff-compat main"" | sudo tee -a /etc/apt/sources.list.d/mono-xamarin.list  # update package indexes sudo apt-get update # install sudo apt-get install mono-devel -y RPM Based ### NOT FULLY TESTED AND WORKING ### # add the EPEL sudo yum install epel-release -y # Add the key sudo rpm --import ""http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF""  # Add the package repository sudo yum-config-manager --add-repo http://download.mono-project.com/repo/centos/  # update your system sudo yum update -y  # Install mono-devel sudo yum install mono-devel -y   Xamarin Studio is helpful for working on source. Consider adding the following to your ~/.profile (or other relevant dot source file): # mono # http://www.michaelruck.de/2010/03/solving-pkg-config-and-mono-35-profile.html # http://cloudgen.wordpress.com/2013/03/06/configure-nant-to-run-under-mono-3-06-beta-for-mac-osx/ export PKG_CONFIG_PATH=/opt/local/lib/pkgconfig:/Library/Frameworks/Mono.framework/Versions/Current/lib/pkgconfig:$PKG_CONFIG_PATH Set your permissions correctly: chmod +x build.sh chmod +x zip.sh Build Process: Run ./build.sh. Running the build on Mono produces an artifact similar to Windows but may have more rough edges. You may get a failure or two in the build script that can be safely ignored. Credits Chocolatey is brought to you by quite a few people and frameworks. See CREDITS (just LEGAL/Credits.md in the zip folder) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/chocolatey/choco"	"like yum or apt-get, but for Windows."	"true"
"Internationalization"	"i18n"	"https://github.com/turquoiseowl/i18n"	"Smart internationalization for ASP.NET MVC"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"336"	"49"	"102"	"GitHub - turquoiseowl/i18n: Smart internationalization for ASP.NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 49 Star 336 Fork 102 turquoiseowl/i18n Code Issues 33 Pull requests 2 Pulse Graphs Smart internationalization for ASP.NET 517 commits 3 branches 2 releases 21 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master v2.0 Nothing to show rev1 2.1.1.0_release Nothing to show New pull request Latest commit 345eaee Jun 15, 2016 turquoiseowl committed on GitHub Merge pull request #276 from joero4/master … Moved to Contains for apps that don't start at root Permalink Failed to load latest commit information. .nuget NuGet prep May 27, 2015 src Moved to Contains for apps that don't start at root Jun 14, 2016 .gitattributes Added settings and code to VisualizeMessages Jan 21, 2015 .gitignore New .NET 4.5 project supporting Owin.Host.SystemWeb Jan 4, 2016 LICENSE.md Version number bumped to 2.1.7.0 Mar 21, 2016 README.md Version number bumped to 2.1.7.0 Mar 21, 2016 README.md i18n (v2) Smart internationalization for ASP.NET     PM> Install-Package i18N  Introduction The i18n library is designed to replace the use of .NET resources in favor of an easier, globally recognized standard for localizing ASP.NET-based web applications. Platforms Supported i18n itself targets .NET Framework 4, and works with websites and web applications based on ASP.NET v4 and above, including: ASP.NET MVC ASP.NET Web API ASP.NET WebMatrix / Web Pages ASP.NET Web Forms Features Leverages the GetText / PO ecosystem: localize like the big kids Localize everything: HTML, Razor, C#, VB, JavaScript, .NET attributes and data annotations, ... SEO-friendly: language selection varies the URL, and Content-Language is set appropriately Automatic: no URL/routing changes required in the app High performance, minimal overhead and minimal heap allocations Unit testing support Smart: knows when to hold them, fold them, walk away, or run, based on i18n best practices Project Configuration The i18n library works by modifying your HTTP traffic to perform string replacement and patching of URLs with language tags (URL Localization). The work is done by an HttpModule called i18n.LocalizingModule which should be enabled in your web.config file as follows:   <system.web>     <httpModules>       <add name=""i18n.LocalizingModule"" type=""i18n.LocalizingModule, i18n"" />     </httpModules>   </system.web>   <system.webServer> <!-- IIS7 'Integrated Mode'-specific config -->     <modules>       <add name=""i18n.LocalizingModule"" type=""i18n.LocalizingModule, i18n"" />     </modules>   </system.webServer> Note: The <system.web> element is added for completeness and may not be required. The following <appSettings> are then required to specify the type and location of your application's source files:   <appSettings>     <add key=""i18n.DirectoriesToScan"" value="".."" /> <!-- Rel to web.config file -->     <add key=""i18n.WhiteList"" value=""*.cs;*.cshtml;*.sitemap"" />     <add key=""i18n.BlackList"" value="".\js\kendo;.\js\angular"" />   </appSettings> Certain behaviours of i18n may be altered at runtime on application startup. The following code shows the most common options:     public class MvcApplication : System.Web.HttpApplication     {         protected void Application_Start()         {             // Change from the default of 'en'.             i18n.LocalizedApplication.Current.DefaultLanguage = ""fr"";              // Change from the of temporary redirects during URL localization             i18n.LocalizedApplication.Current.PermanentRedirects = true;              // This line can be used to disable URL Localization.             //i18n.UrlLocalizer.UrlLocalizationScheme = i18n.UrlLocalizationScheme.Void;              // Change the URL localization scheme from Scheme1.             i18n.UrlLocalizer.UrlLocalizationScheme = i18n.UrlLocalizationScheme.Scheme2;              // Blacklist certain URLs from being 'localized' via a callback.             i18n.UrlLocalizer.IncomingUrlFilters += delegate(Uri url) {                 if (url.LocalPath.EndsWith(""sitemap.xml"", StringComparison.OrdinalIgnoreCase)) {                     return false; }                 return true;             };              // Blacklist certain URLs from being translated using a regex pattern. The default setting is:             //i18n.LocalizedApplication.Current.UrlsToExcludeFromProcessing = new Regex(@""(?:\.(?:less|css)(?:\?|$))|(?i:i18nSkip|glimpse|trace|elmah)"");              // Whitelist content types to translate. The default setting is:             //i18n.LocalizedApplication.Current.ContentTypesToLocalize = new Regex(@""^(?:(?:(?:text|application)/(?:plain|html|xml|javascript|x-javascript|json|x-json))(?:\s*;.*)?)$"");              // Change the types of async postback blocks that are localized             //i18n.LocalizedApplication.Current.AsyncPostbackTypesToTranslate = ""updatePanel,scriptStartupBlock,pageTitle"";         }     } Usage To localize text in your application, surround your strings with [[[ and ]]] markup characters to mark them as translatable. That's it. Here's an example of localizing text in a Razor view:     <div id=""content"">         <h2>[[[Welcome to my web app!]]]</h2>         <h3><span>[[[Amazing slogan here]]]</span></h3>         <p>[[[Ad copy that would make Hiten Shah fall off his chair!]]]</p>         <span class=""button"" title=""[[[Click to see plans and pricing]]]"">             <a href=""@Url.Action(""Plans"", ""Home"", new { area = """" })"">                 <strong>[[[SEE PLANS & PRICING]]]</strong>                 <span>[[[Free unicorn with all plans!]]]</span>             </a>         </span>     </div> And here's an example in an MVC controller:     using i18n;      namespace MyApplication     {         public class HomeController : Controller         {             public ActionResult Index()             {                 ViewBag.Message = ""[[[Welcome to ASP.NET MVC!]]]"";                  return View();             }         }     } At last, you can localize your data annotations as easy as this:     public class PasswordResetViewModel     {         [Required(ErrorMessage=""[[[Please fill in this field]]]"")]         [Email(ErrorMessage = ""[[[Email not yet correct]]]"")]         [Display(Name = ""[[[Email Address]]]"")]         public string Email         {             get;             set;         }     } And localize arguments passed to MVC URL-Helpers or other functions that require a plain string: @Html.LabelFor(m => m.Name, ""[[[First Name]]]"") And for Javascript:     <script type=""text/javascript"">         $(function () {             alert(""[[[Hello world!]]]"");         });     </script> Nuggets In PO terminology, strings you want to be translatable are known as messages. In i18n, messages are 'marked-up' in your source code as 'Nuggets'. The nugget markup allows i18n to filter the HTTP response looking for the message strings which are replaced with translated strings, where available. They also allow message strings to be located by the PostBuild PO file generator. A simple nugget looks like this: [[[translate me]]]  This defines a message with the key (aka msgid) of ""translate me"". Nugget markup supports formated messages as follows: string.Format(""[[[welcome %1, today is %0|||{0}|||{1}]]]"", day, name)  where the %0 and %1 tokens are replaced by the strings that replace the {0} and {1} items, respectively. (The reason for the extra level of redirection here is to facilitate the translator rearranging the order of the tokens for different languages.) Nugget transformation supports translation of the arguments as follows: [DisplayName(""[[[CountryCode]]]"")] [MaxLength(20, ErrorMessage=""[[[%0 must be %1 characters or less|||(((CountryCode)))|||20]]]"")] public string CountryCode { get; set; }  where the Nugget markup will first replace (((CountryCode)) with the translated text and then merge the translated value into the main message. Nugget markup supports comments (extracted comments in PO terminology) to be passed to the translator like so: [[[translate me///this is an extracted comment]]]  And if you need to include the markup characters themselves within a message, you can HTML-escape them, for example: [[[Please don't forget to add GoogleAd tags: [googleadsmall&#93;]]]  where &#93; is the HTML escape sequence for ]. The relevant escape sequences are: / = &#47; [ = &#91; ] = &#93; | = &#124; See Issue #50 for more on Nuggets and why we have chosen to replace the GetText / _() style of marking-up messages. Nugget markup customization The character sequences for marking-up nuggets ([[[, ]]], |||, (((, ))) and ///) were chosen on the basis that they were unlikely to clash with common character sequences in HTML markup while at the same time being convenient for the programmer to enter (on most keyboards). However, recognizing that a clash remains possible and nuggets thereby being falsely detected in source code or the HTML response, i18n allows you to define your own sequences for the markup which you know are not going to clash. You can configure these in web.config as follows:   <appSettings>     ...     <add key=""i18n.NuggetBeginToken"" value=""[&["" />     <add key=""i18n.NuggetEndToken"" value=""]&]"" />     <add key=""i18n.NuggetDelimiterToken"" value=""||||"" />     <add key=""i18n.NuggetCommentToken"" value=""////"" />     <add key=""i18n.NuggetParameterBeginToken"" value=""((("" />     <add key=""i18n.NuggetParameterEndToken"" value="")))"" />     ...   </appSettings> Message Visualization i18n can be configured to visualize all processed messages. This is useful when testing your app to verify that all messages are tagged correctly. To enable this feature:   <appSettings>     ...     <add key=""i18n.VisualizeMessages"" value=""true"" />     <add key=""i18n.NuggetVisualizeToken"" value=""!"" />     ...   </appSettings> When VisualizeMessages is active the NuggetVisualizeToken will be inserted at start and end of each translated message. Two more optional parameters can be used to further customize the message visualization. i18n.VisualizeLanguageSeparator This enables display of the language tag that was use to localize each message. The language tag will be shown before each message, separated from the message by this parameter value. If the value is a blank string or the parameter is not present then language tags are not shown in message visualizations. i18n.NuggetVisualizeEndToken This allows for using different start and end tokens for visualizing messages. When this value is specified then the NuggetVisualizeToken will be inserted at start of each translated message and the NuggetVisualizeEndToken will be inserted at end of each translated message. For example, to display language tags separated from messages by a colon, and add brackets to enclose the visualized messages, use the following message visualization configuration.   <appSettings>     ...     <add key=""i18n.VisualizeMessages"" value=""true"" />     <add key=""i18n.VisualizeLanguageSeparator"" value="":"" />     <add key=""i18n.NuggetVisualizeToken"" value=""!["" />     <add key=""i18n.NuggetVisualizeEndToken"" value=""]!"" />     ...   </appSettings> Message Context Support i18n allows you to assign a msgctxt value to each message. The value of the msgctxt is taken from any comment you have defined in the nugget. This feature is optional and disabled by default. To enable this feature:   <appSettings>     ...     <add key=""i18n.MessageContextEnabledFromComment"" value=""true"" />     ...   </appSettings> Note that note all PO editors support msgctxt and indeed may be thrown by the value when present in .PO files. See Issue #90 for more details. Multi-line messages The PO spec supports messages that span multiple lines. i18n provides full support for these, simply by spreading the nugget over several lines. For example, the following nugget is perfectly legal and should appear in your PO editor as a multi-line message: [[[This is a message spread over three lines]]]  Static File Compression and i18n The i18n module localizes nuggets in the HTTP response by modifying the response stream using a response filter (see the .NET Framework documentation for more info about the HttpResponse.Filter property). If the response stream is compressed before it reaches the i18n module then the module does not modify the stream. Currently the module is not designed to intercept static file requests before compression happens. Two checks are implemented to ensure that the module does not modify compressed response streams: 1. In i18n.LocalizingModule there is a check to see if the response Content-Encoding header is set to ""gzip"" and if it is then the module does not install the response filter. 2. In i18n.ResponseFilter the stream content is checked for the presence of the gzip file format magic number (the first two bytes of a gzip file are set to 1F 8B). If the magic number is found at the beginning of the stream then the content is passed through without modification by the filter. Because of the way that static file compression works in IIS, some responses to static files requests do not get compressed, so if you have static file compression enabled (it is enabled by default) AND you have nuggets within the content of a static file, then the response received by a client will be localized when the response is not compressed and it will not be localized when the response is compressed. In order to prevent this, it is important that you decide whether or not you will localize static files on your site because you need to do one of the following: 1. If you want to use nuggets and localize static files - disable static file compression. This means that you will not get the benefit of the bandwidth savings of compressing static files, but if you are localizing static files then you have essentially taken the decision to make the static files dynamic. 2. If you do not need to use nuggets and localize static files - leave static file compression enabled. You will now get the benefit of the bandwidth savings of compressing static files, but it is important that you must not put nuggets in the static files. Note: Refer to Issue #163 for more on IIS compression settings. Note: The Microsoft ScriptManager compresses responses to requests for ScriptResource.axd so these responses will always be compressed and the script that is returned by the ScriptManager will not be localized even if you disable static file compression. Building PO databases To set up automatic PO database building, add the following post-build task to your project, after adding i18n.PostBuild.exe as a project reference:     ""$(TargetDir)i18n.PostBuild.exe"" ""$(ProjectDir)\web.config""  Alternatively, you may choose to install the i18n.POTGenerator.vsix Visual Studio extension (2012/2013). This installs an i18n button in the Solution Window for manual triggering of PO generation. Note that it is necessary to highlight the project in question within the Solution Window before pressing the button. The PO generator will rip through your source code (as defined by the i18n.DirectoriesToScan and i18n.WhiteList settings in web.config), finding every nugget, and uses this to build a master .POT template file located at locale/messages.pot relative to your web application folder. After the new template is constructed, any locales that exist inside the locale folder (or as defined by the i18n.AvailableLanguages semi-colon-delimited web.config setting) are automatically merged with the template, so that new strings can be flagged for further translation. From here, you can use any of the widely available PO editing tools (like POEdit) to provide locale-specific text and place them in your locale folder relative to the provided language, e.g. locale/fr. If you change a PO file on the fly, i18n will update accordingly; you do not need to restart your application. Note that the locale-specific file must be named messages.po. For example, your locale folder structure will be similar to (three languages, fr, es, and es-MX are defined): locale/messages.pot locale/fr/messages.po locale/es/messages.po locale/es-MX/messages.po  URL Localization In keeping with emerging standards for internationalized web applications, i18n provides support for localized URLs. For example, www.example.com/de or www.example.com/en-us/signin. Out of the box, i18n will attempt to ensure the current language for any request is shown correctly in the address box of the user's browser, redirecting from any non-localized URL if necessary to a localized one. This is known as Early URL Localization. See also Principal Application Language. While URLs from the user-agent perspective are localized, from the app's perspective they are nonlocalized. Thus you can write your app without worrying about the language tag in the URL. The default URL Localization scheme (Scheme1) will show the language tag in the URL always; an alternative scheme, Scheme2, will show the language tag only if it is not the default. Disabling URL Localization URL localization can be disabled by setting the scheme to i18n.UrlLocalizationScheme.Void in Application_Start:     protected void Application_Start()     {         ...         // Disable URL Localization.         i18n.UrlLocalizer.UrlLocalizationScheme = i18n.UrlLocalizationScheme.Void;     }  Exclude URLs from being localized URLs to non-internationalized resources need not be localized. Typically, there is no harm in them being localized as i18n will route the request approriately either way. However, where the Principal Application Language for a request is not required, such as for when reading a CSS file or font file, it can save a redirection round trip by instructing i18n NOT to localize the URL. There are two ways to instruct i18n NOT to localize a URL: Firstly, you can set a RegEx pattern to match against the localpath part of the URLs to be excluded. For instance:     protected void Application_Start()     {         ...         // Blacklist certain URLs from being 'localized'.         i18n.UrlLocalizer.QuickUrlExclusionFilter = new System.Text.RegularExpressions.Regex(@""(?:sitemap\.xml|\.css|\.less|\.jpg|\.jpeg|\.png|\.gif|\.ico|\.svg|\.woff|\.woff2|\.ttf|\.eot)$"", RegexOptions.IgnoreCase);     }  Indeed, the default value for the QuickUrlExclusionFilter settings is as shown above however feel free to override or set to null to disable. For finer control, the second method is to define filter delegates that are passed the URL and return true if the URL is to be localized, otherwise false. For example:     protected void Application_Start()     {         ...         // Blacklist certain URLs from being 'localized'.         i18n.UrlLocalizer.IncomingUrlFilters += delegate(Uri url) {             if (url.LocalPath.EndsWith(""sitemap.xml"", StringComparison.OrdinalIgnoreCase)) {                 return false; }             return true;         };         i18n.UrlLocalizer.OutgoingUrlFilters += delegate(string url, Uri currentRequestUrl) {             Uri uri;             if (Uri.TryCreate(url, UriKind.Absolute, out uri)                 || Uri.TryCreate(currentRequestUrl, url, out uri)) {                 if (uri.LocalPath.EndsWith(""sitemap.xml"", StringComparison.OrdinalIgnoreCase)) {                     return false; }             }             return true;         };     }  Conditionally ignore localization for a specific URL There are very rare cases where you need to conditionally bypass the URL localization for a specific URL. One example is when generating hreflang tags when using i18n with Scheme2. You can do this by prefixing the URL like so:     <link rel=""alternate"" hreflang=""en"" href=""@(EarlyUrlLocalizer.IgnoreLocalizationUrlPrefix)http://mysite.com"" />     <link rel=""alternate"" hreflang=""fr"" href=""http://mysite.com/fr"" />     <link rel=""alternate"" hreflang=""es"" href=""http://mysite.com/es"" />  When i18n goes through the process for localizing outgoing URLs, this prefix will be stripped and the rendered URL will be left non-localized. Note that this method of ignoring URL localization should not be widespread and is included to address edge cases. Most use cases that require ignoring URL localization can be solved more eloquently by making use of the UrlLocalizer filters. Principal Application Language During startup of your ASP.NET application, i18n determines the set of application languages for which one or more translated messages exist. Then, on each request, one of these languages is selected as the Principal Application Language (PAL) for the request. The PAL for the request is determined by the first of the following conditions that is met: For i18n.UrlLocalizationScheme.Scheme1: The path component of the URL is prefixed with a language tag that matches exactly one of the application languages. E.g. ""example.com/fr/account/signup"". The path component of the URL is prefixed with a language tag that matches loosely one of the application languages (see below). The request contains a cookie called ""i18n.langtag"" with a language tag that matches (exactly or loosely) one of the application languages. The request contains an Accept-Language header with a language that matches (exactly or loosely) one of the application languages. The default application language is selected (see also Per-Request Default Language Determination). For i18n.UrlLocalizationScheme.Scheme2: The path component of the URL is prefixed with a language tag that matches exactly one of the application languages. E.g. ""example.com/fr/account/signup"". The path component of the URL is prefixed with a language tag that matches loosely one of the application languages (see below). The default application language is selected (see also Per-Request Default Language Determination). Where a loose match is made above, the URL is updated with the matched application language tag and a redirect is issued. E.g. ""example.com/fr-CA/account/signup"" -> ""example.com/fr/account/signup"". By default this is a temporary 302 redirect, but you can choose for it to be a permanent 301 one by setting i18n.LocalizedApplication.Current.PermanentRedirects = true in Application_Start. The GetPrincipalAppLanguageForRequest extension method to HttpContext can be called to access the PAL of the current request. For example, it may be called in a Razor view as follows to display the current langue to the user:     @using i18n      <div>         <p id=""lang_cur"" title=""@Context.GetPrincipalAppLanguageForRequest()"">             @Context.GetPrincipalAppLanguageForRequest().GetNativeNameTitleCase()         </p>     </div> Similarly, the HTML lang attribute can be set as follows:     @using i18n      <html lang=""@Context.GetPrincipalAppLanguageForRequest()"">         ...     </html> Per-Request Default Language Determination When the PAL algorithm falls back on the default language for the application, i18n supports a simple delegate-based hook for providing the default language based on the current request, typically based on the URL. For example, suppose you wish the default language to vary as follows: mydomain.co.uk -> 'en' mydomain.fr -> 'fr' This can be achieved as follows:     protected void Application_Start()     {         ...         i18n.LocalizedApplication.Current.DefaultLanguage = ""en"";         i18n.UrlLocalizer.UrlLocalizationScheme = i18n.UrlLocalizationScheme.Scheme2;         i18n.UrlLocalizer.DetermineDefaultLanguageFromRequest = delegate(HttpContextBase context)         {             if (context != null && context.Request.Url.Host.EndsWith("".fr"", StringComparison.OrdinalIgnoreCase)) {                 return i18n.LanguageTag.GetCachedInstance(""fr""); }             return i18n.LocalizedApplication.Current.DefaultLanguageTag;         };     }  Notice how the URL localization scheme has been switched to Scheme2 which allows the URL to be without any language tag. The default scheme (Scheme1) would enforce a redirection so that the URL always contains the current language tag. Explicit User Language Selection You can provide a language selection feature in your application using i18n. There are two parts to implementing this feature which revolve around the setting of a cookie called i18n.langtag. Firstly, provide HTML that displays the current language and allows the user to explicitly select a language (from those application languages available). An example of how to do that in ASP.NET MVC and Razor follows: @using i18n ... <div id=""language"">   <div>     <p id=""lang_cur"" title=""@Context.GetPrincipalAppLanguageForRequest()"">@Context.GetPrincipalAppLanguageForRequest().GetNativeNameTitleCase()</p>   </div>   <div id=""lang_menu"" style=""display: none;"">     <table class=""table_grid"">       <tbody>         @{           int i;           int maxcols = 3;           KeyValuePair<string, i18n.LanguageTag>[] langs = LanguageHelpers.GetAppLanguages().OrderBy(x => x.Key).ToArray();           int cellcnt = langs.Length +1;           for (i = 0; i < cellcnt;) {             bool lastRow = i + maxcols >= cellcnt;             <tr class=""@(Html.Raw((i % 2) == 0 ? ""even"":""odd"")) @(Html.Raw(lastRow ? ""last"":""""))"">               @for (int j = 0; j < maxcols && i < cellcnt; ++i, ++j) {                 string langtag;                 string title;                 string nativelangname;                 if (i == 0) {                   langtag = """";                   title = ""[[[Browser default language setting]]]"";                   nativelangname = ""[[[Auto]]]"";                 }                 else {                   i18n.LanguageTag lt = langs[i -1].Value;                   title = langtag = lt.ToString();                   nativelangname = lt.NativeNameTitleCase;                 }                 <td>                   @Html.ActionLink(                     linkText: nativelangname,                      actionName: ""SetLanguage"",                      controllerName: ""Account"",                      routeValues: new { langtag = langtag, returnUrl = Request.Url },                     htmlAttributes: new { title = title } )                 </td>               }               @* Fill last row with empty cells if ness, so that borders are added and balanced out. *@               @if (lastRow) {                 for (; i % maxcols != 0; ++i) {                   <td></td>                 }               }             </tr>           }         }       </tbody>     </table>   </div> </div> On selection of a language in the above code, the AccountController.SetLanguage method is called. For example:     using i18n;     ...      //     // GET: /Account/SetLanguage      [AllowAnonymous]     public ActionResult SetLanguage(string langtag, string returnUrl)     {         // If valid 'langtag' passed.         i18n.LanguageTag lt = i18n.LanguageTag.GetCachedInstance(langtag);         if (lt.IsValid()) {             // Set persistent cookie in the client to remember the language choice.             Response.Cookies.Add(new HttpCookie(""i18n.langtag"")             {                 Value = lt.ToString(),                 HttpOnly = true,                 Expires = DateTime.UtcNow.AddYears(1)             });         }         // Owise...delete any 'language' cookie in the client.         else {             var cookie = Response.Cookies[""i18n.langtag""];             if (cookie != null) {                 cookie.Value = null;                 cookie.Expires = DateTime.UtcNow.AddMonths(-1);             }         }         // Update PAL setting so that new language is reflected in any URL patched in the          // response (Late URL Localization).         HttpContext.SetPrincipalAppLanguageForRequest(lt);         // Patch in the new langtag into any return URL.         if (returnUrl.IsSet()) {             returnUrl = LocalizedApplication.Current.UrlLocalizerForApp.SetLangTagInUrlPath(HttpContext, returnUrl, UriKind.RelativeOrAbsolute, lt == null ? null : lt.ToString()).ToString(); }         // Redirect user agent as approp.         return this.Redirect(returnUrl);     }  How to get a translation of a nugget in your C# code With i18n you can access the translation for a given nugget msgid from any code that is handling an ASP.NET request. There is a GetText extension method to HttpContextBase provided for this. For example, you can do the following from within an MVC controller action: using System; using System.Web.Mvc; using i18n;  namespace MyWebSite.Controllers {     public class MyController : Controller     {         public ActionResult Welcome()         {             string welcomeMessage = HttpContext.GetText(""Welcome to the my website."", """");              // Do something with the string...              return View();         }     } }   Essentially, anywhere you have access to an HttpContextBase or HttpContext instance, you can get a correct translation for a given nugget msgid / msgcomment combo. The msgcomment is relevant only when i18n.Domain.Concrete.i18nSettings.MessageContextEnabledFromComment is set to true; by default it is false and so msgcomment argument should be passed as null or empty. Furthermore, you can access the translation of a complete body of text containing zero or more nuggets that require parsing using the ParseAndTranslate extension method to HttpContextBase, as follows:     string entity = HttpContext.ParseAndTranslate(""Hi - [[[Sign in]]]"");  Language Matching Language matching is performed when a list of one or more user-preferred languages is matched against a list of one or more application languages, the goal being to choose the application languages which the user is most likely to understand. The algorithm for this is multi-facted and multi-pass and takes the Language, Script and Region subtags into account. Matching is performed once per-request to determine the Principal Application Language for the request, and also once per message to be translated (aka GetText call). The multi-pass approach ensures a thorough attempt is made at matching a user's list of preferred languages (from their Accept-Language HTTP header). E.g. in the context of the following request: User Languages: fr-CH, fr-CA   Application Languages: fr-CA, fr, en  fr-CA will be matched first, and if no resource exists for that language, fr is tried, and failing that, the default language en is fallen back on. In recognition of the potential bottleneck of the GetText call (which typically is called many times per-request), the matching algorithm is efficient for managed code (lock-free and essentially heap-allocation free). Note that the following Chinese languages tags are normalized: zh-CN to zh-Hans, and zh-TW to zh-Hant. It is still safe to use zh-CN and zh-TW, but internally they will be treated as equivalent to their new forms. Private Use Subtag The w3c language tag spec includes a provision for an additional subtag for private use. This is now supported and can be used to provide a different translation for specific scenarios, such as a tenant on a multi-tenant application. The format is: en-GB-x-Tenant123, en-x-Tenant99 etc. Note the -x-, after which you can add four or more alphanumeric characters to specify your custom translation. There must be an exact match for all subtags for this translation to be returned. If the module can't find a translation for the tenant, it will match the remaining subtags according to the algorithm described above. Microsoft Pseudo-Locales and App Testing As an aid to testing the localization of you app, Microsoft have added some 'pseudo-locales' to Windows. Specifically, these are identified by the following special language tags qps-ploc, qps-plocm and  i18n supports the use of these special locales. See [Issue #195](https://github.com/turquoiseowl/i18n/issues/195) for further details.  ##### Language Matching Update  The latest refinement to the language matching algoritm:  ```csharp // Principle Application Language (PAL) Prioritization: //   User has selected an explicit language in the webapp e.g. fr-CH (i.e. PAL is set to fr-CH). //   Their browser is set to languages en-US, zh-Hans. //   Therefore, UserLanguages[] equals fr-CH, en-US, zh-Hans. //   We don't have a particular message in fr-CH, but have it in fr and fr-CA. //   We also have message in en-US and zh-Hans. //   We presume the message from fr or fr-CA is better match than en-US or zh-Hans. //   However, without PAL prioritization, en-US is returned and failing that, zh-Hans. //   Therefore, for the 1st entry in UserLanguages (i.e. explicit user selection in app) //   we try all match grades first. Only if there is no match whatsoever for the PAL //   do we move no to the other (browser) languages, where return to prioritizing match grade //   i.e. loop through all the languages first at the strictest match grade before loosening  //   to the next match grade, and so on. // Refinement to PAL Prioritization: //   UserLanguages (UL) = de-ch,de-at (PAL = de-ch) //   AppLanguages  (AL) = de,de-at,en //   There is no exact match for PAL in AppLanguages. //   However: //    1. the second UL (de-at) has an exact match with an AL //    2. the parent of the PAL (de) has an exact match with an AL. //   Normally, PAL Prioritization means that 2. takes preference. //   However, that means choosing de over de-at, when the user //   has said they understand de-at (it being preferable to be //   more specific, esp. in the case of different scripts under  //   the same language). //   Therefore, as a refinement to PAL Prioritization, before selecting //   'de' we run the full algorithm again (without PAL Prioritization)  //   but only considering langtags related to the PAL.  UpdatePanel / Async Postbacks / Partial Page Rendering Responses to UpdatePanel async postback requests are handled as a special case because the content of the response is a set of formatted blocks, which may or may not contain partial segments of text or HTML that need to be localized. Each formatted block has the following structure length|type|id|content| By default, only blocks with a type of updatePanel, scriptStartupBlock, or pageTitle get localized. You can localize segments in other block types by changing the value of AsyncPostbackTypesToTranslate in Application_Start. For example, to include the hiddenField blocks, add the following to Application_Start i18n.LocalizedApplication.Current.AsyncPostbackTypesToTranslate = ""updatePanel,scriptStartupBlock,pageTitle,hiddenField"";  OWIN support Support for OWIN is available to a limited extent. See Issue #241 for more details. i18n is created based on HttpContextBase in System.Web assembly, which means the foundation was built on IIS pipeline. Currently we support OWIN hosted in IIS only, so it is still dependent on System.Web. Self-hosted OWIN is not supported. Here is how to use i18n in OWIN Web API projects: Add reference to i18n.Adapter.OwinSystemWeb (available on NuGet as well) Add reference to Microsoft.Owin.Host.SystemWeb. If you add i18n.Adapter.OwinSystemWeb from NuGet it should automatically add this for you. No need to register HttpModule in web.config file. Add the following middleware registration into your startup sequence. public partial class Startup {     public void Configuration(IAppBuilder app)     {         ...          // i18n middlewares         app.Use(typeof(i18n.Adapter.OwinSystemWeb.UrlLocalizationMiddleware));         app.Use(typeof(i18n.Adapter.OwinSystemWeb.EntityLocalizationMiddleware));          // i18n config         i18n.LocalizedApplication.Current.DefaultLanguage = ""en"";         ...     } }  A reminder about folders in a web application Your locale folder is exposed to HTTP requests as-is, just like a typical log directory, so remember to block all requests to this folder by adding a Web.config file.     <?xml version=""1.0""?>     <configuration>             <system.web>             <httpHandlers>                 <add path=""*"" verb=""*"" type=""System.Web.HttpNotFoundHandler""/>             </httpHandlers>         </system.web>         <system.webServer>             <handlers>                 <remove name=""BlockViewHandler""/>                 <add name=""BlockViewHandler"" path=""*"" verb=""*"" preCondition=""integratedMode"" type=""System.Web.HttpNotFoundHandler""/>             </handlers>         </system.webServer>     </configuration> Unit Testing With i18n i18n provides the i18n.ITranslateSvc interface that abstracts the basic operation of parsing and translating a string entity that may contain one or more nuggets:     public interface ITranslateSvc     {         string ParseAndTranslate(string entity);     }  The following stock implementations of i18n.ITranslateSvc are provided by the library: TranslateSvc_Invariant - ITranslateSvc implementation that simply passes through the entity (useful for testing). TranslateSvc_HttpContextBase - ITranslateSvc implementation based on an given HttpContextBase instance. TranslateSvc_HttpContext - ITranslateSvc implementation based on an given HttpContext instance. TranslateSvc_HttpContextCurrent - ITranslateSvc implementation based on the static HttpContext.Current instance (obtained at the time of calling the interface). Build Notes The i18n project at present targets Visual Studio 2013 / .NET Framework 4 and requires the Visual Studio 2013 SDK libraries installed to build. Contributing There's lot of room for further enhancements and features to this library, and you are encouraged to fork it and contribute back anything new. Specifically, these would be great places to add more functionality: Full OWIN support (see Issue #241) Input and ideas on a safe universal nugget syntax (see issue #69). Plurals support. Help me fix the bugs! Chances are I don't ship in your language. Fix what hurts. Please? Line Endings The i18n project has adopted the GitHub recommendation with regard to standardized line endings in text files. Specifically, text files are stored in the Git index with line endings respresented by the single LF character (not CR/LF). That means that, for Windows clients, you will probably want Git to convert line endings to CR/LF when checking text files out of the index, and converting them back to LF line endings when committing in. This behaviour is controlled via Git's core.autocrlf setting, which in this case would be set to true. See Dealing with line endings for more information. Acknowledgments Among the many contributors to the i18n library, a special acknowledgement is due to Daniel Crenna who originated this project. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/turquoiseowl/i18n"	"Smart internationalization for ASP.NET MVC"	"true"
"Interoperability"	"CefSharp"	"https://github.com/cefsharp/CefSharp"	".NET (WPF and Windows Forms) bindings for the Chromium Embedded Framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2202"	"277"	"979"	"GitHub - cefsharp/CefSharp: .NET (WPF and Windows Forms) bindings for the Chromium Embedded Framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 277 Star 2,202 Fork 979 cefsharp/CefSharp Code Issues 56 Pull requests 4 Wiki Pulse Graphs .NET (WPF and Windows Forms) bindings for the Chromium Embedded Framework http://cefsharp.github.io/ 4,135 commits 10 branches 56 releases 86 contributors C# 58.5% C++ 29.5% CSS 5.8% HTML 5.4% PowerShell 0.6% JavaScript 0.2% C# C++ CSS HTML PowerShell JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags CefSharp1 cefsharp/37 cefsharp/39 cefsharp/41 cefsharp/43 cefsharp/45 cefsharp/47 cefsharp/49 cefsharp/51 master Nothing to show v51.0.0 v51.0.0-pre02 v51.0.0-pre01 v49.0.1 v49.0.0 v49.0.0-pre02 v49.0.0-pre01 v47.0.4 v47.0.3 v47.0.2 v47.0.0 v47.0.0-pre01 v45.0.0 v45.0.0-pre01 v43.0.1 v43.0.0 v43.0.0-pre02 v43.0.0-pre01 v41.0.1 v41.0.0 v41.0.0-pre01 v39.0.2 v39.0.1 v39.0.0 v39.0.0-pre03 v39.0.0-pre02 v39.0.0-pre01 v37.0.3 v37.0.1 v37.0.0 v37.0.0-pre02 v37.0.0-pre01 v33.1.0-pre01 v33.0.2 v33.0.0 v31.0.0-pre1 v3.29.0-pre.0 v3.27.0-a0 v1.25.8 v1.25.7 v1.25.6 v1.25.5 v1.25.4 v1.25.3 v1.25.2-perlun.0 v1.25.1-perlun.0 v1.25.0 v1.21.0 v1.19.0 v0.12 v0.11 v0.10 v0.9 v0.3 v0.2 v0.1 Nothing to show New pull request Latest commit f05dd32 Jul 15, 2016 amaitland Update README.md for 51.0.0 release Permalink Failed to load latest commit information. CefSharp.BrowserSubprocess.Core Fix TypeUtils.cpp formatting - should have had braces for all if stat… Jul 6, 2016 CefSharp.BrowserSubprocess Set per monitor DPI aware attribute in app.manifest Jul 13, 2016 CefSharp.Core Add IBrowserHost.HasDevTools Jul 15, 2016 CefSharp.Example Change TestCallbackFromObject to use new DynamicDictionary helper class Jul 6, 2016 CefSharp.OffScreen.Example Set per monitor DPI aware attribute in app.manifest Jul 12, 2016 CefSharp.OffScreen OffScreen - Allow for retrieval of main, popup or blended bitmap Jul 6, 2016 CefSharp.Test Upgrade to 3.2526.1347 Oct 30, 2015 CefSharp.WinForms.Example Set per monitor DPI aware attribute in app.manifest Jul 12, 2016 CefSharp.WinForms.Test 1.25.2 coming up. Jun 17, 2013 CefSharp.WinForms Add a more detailed description of what thread events are executed on Jun 15, 2016 CefSharp.Wpf.Example Set per monitor DPI aware attribute in app.manifest Jul 12, 2016 CefSharp.Wpf Add a more detailed description of what thread events are executed on Jun 15, 2016 CefSharp Add IBrowserHost.HasDevTools Jul 14, 2016 NuGet Re-add PlatformCheck to CefSharp.Common.targets - as AnyCPU won't wor… Jun 20, 2016 old move current tests into old/ Feb 16, 2012 .gitattributes add *.vcproj to .gitattributes Mar 6, 2013 .gitignore Update CefSharp.shfbproj project to get a basic API doc package building Jun 15, 2016 Build.bat Added build.bat script for slightly more convenient NuGet compiling Jan 7, 2015 CONTRIBUTING.md Update CONTRIBUTING.md Jul 1, 2016 CefSharp.Native.props Upgrade to 3.2704.1429 - Required for following changes as cef.redist… Jun 17, 2016 CefSharp.props Remove VS2010/2012 as CEF no longer builds on those older versions Sep 1, 2015 CefSharp.shfbproj Add header text and link to license Jun 15, 2016 CefSharp.snk - BrowserControl now derived from Control. Dec 9, 2010 CefSharp3.sln Upgrade to 3.2704.1429 - Required for following changes as cef.redist… Jun 17, 2016 CefSharp3.sln.DotSettings Add new Resharper settings (upgraded to new version) May 21, 2015 ISSUE_TEMPLATE.md Update ISSUE_TEMPLATE.md May 5, 2016 LICENSE Update copyright to 2016 Jan 11, 2016 NuGet.config Change new paramAray test methods in BindingTest.html to execute imme… Apr 5, 2016 README.WPF.md correction -> new CefSettings not new Settings Dec 12, 2014 README.md Update README.md for 51.0.0 release Jul 15, 2016 afterbuild.example.ps1 add after build script example that shows how to automatically upload… Oct 14, 2014 appveyor.yml Update appveyor.yml build version (51.0.0) May 30, 2016 build.ps1 Update build.ps1 to extract the cef.redist version from the CefSharp.… Jun 7, 2016 logo.png fix documentation links Dec 9, 2015 README.md Got a quick question? Jump on CefSharp lets you embed Chromium in .NET apps. It is a lightweight .NET wrapper around the Chromium Embedded Framework (CEF) by Marshall A. Greenblatt. About 30% of the bindings are written in C++/CLI with the majority of code here is C#. It can be used from C# or VB, or any other CLR language. CefSharp provides both WPF and WinForms web browser control implementations. CefSharp is BSD licensed, so it can be used in both proprietary and free/open source applications. For the full details, see the LICENSE file. Releases Stable binaries are released on NuGet, and contain everything you need to embed Chromium in your .Net/CLR application. For usage see the Quick Start guide or FAQ #8. CefSharp.WinForms CefSharp.Wpf CefSharp.OffScreen Documentation See the CefSharp.Wpf.Example or CefSharp.WinForms.Example projects for example web browsers built with CefSharp. They demo most of the available features. See the CefSharp.MinimalExample project for a basic demo of using the CefSharp NuGet packages. See the Wiki for work-in-progress documentation See the FAQ for help with common issues Upgrading from an earlier version of CefSharp? See the ChangeLog for breaking changes and upgrade tips. Contact If you have a simple question please start by asking it on . Before opening an issue or submitting a PR please read CONTRIBUTING Stackoverflow as always is a useful resource. The CefSharp Google Group is no longer active. It is however a useful resource for archived questions/answers. Branches & Forks This is the official CefSharp fork, as maintained by the CefSharp community. You can also view the entire network of public forks/branches. Development is done in the master branch. New features are preferably added in feature branches, if the changes are more than trivial. New PR's should be targeted against master. When a new release is imminent a release branch is created. We try to avoid making public facing API changes in release branches (Adding new features is fine, just not breaking changes). Build Status CI Builds Every commit on master produces a Nuget package. Use at your own risk! CefSharp MyGet Feed Pre-release Stable for either WPF or WinForms or OffScreen. Release Branches Branch CEF Version VC++ Version .Net Version Status master 2704 2013 4.5.2 Development cefsharp/51 2704 2013 4.5.2 Release cefsharp/49 2623 2013 4.0 Unsupported cefsharp/47 2526 2013 4.0 Unsupported cefsharp/45 2454 2013 4.0 Unsupported cefsharp/43 2357 2012 4.0 Unsupported cefsharp/41 2272 2012 4.0 Unsupported cefsharp/39 2171 2012 4.0 Unsupported cefsharp/37 2062 2013 4.0 Unsupported Links CefGlue: An alternative .NET CEF wrapper built using P/Invoke. ChromiumFx : Another P/Invoke .Net CEF wrapper CEF Forum : The official CEF Forum CEF API Docs : Well worth a read if your implementing a new feature Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cefsharp/CefSharp"	".NET (WPF and Windows Forms) bindings for the Chromium Embedded Framework"	"true"
"Interoperability"	"CppSharp"	"https://github.com/mono/CppSharp"	"Tools to surface C++ APIs to C#"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"529"	"100"	"115"	"GitHub - mono/CppSharp: Tools and libraries to glue C/C++ APIs to high-level languages Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 100 Star 529 Fork 115 mono/CppSharp Code Issues 86 Pull requests 5 Wiki Pulse Graphs Tools and libraries to glue C/C++ APIs to high-level languages 3,335 commits 7 branches 2 releases 27 contributors C# 88.1% C++ 11.3% Lua 0.6% Ruby 0.0% Batchfile 0.0% C 0.0% C# C++ Lua Ruby Batchfile C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cpp_module_crash crash_MI_virtual_from_secondary get_MSVC_UCRTVersion_from_VS_batch_script incorrect_trunit_test master roslyn wrong_tr_unit Nothing to show CppSharp 0.9.0 Nothing to show New pull request Latest commit 7f93b4a Jul 15, 2016 ddobrev Marked incomplete declarations even if their completions cannot be fo… … …und.  Signed-off-by: Dimitar Dobrev <dpldobrev@protonmail.com> Permalink Failed to load latest commit information. .github Created a template for new issues. Apr 10, 2016 build Made the C# end always generate one file per module. Jul 12, 2016 deps Added missing unit testing dependencies. Mar 2, 2013 docs Documentation updates. Feb 29, 2016 examples Added support for directly wrapping entire sets of interdependent lib… Jun 2, 2016 include Added a cast to get rid of a warning. May 10, 2014 patches Removed outdated patches. Oct 4, 2014 src Marked incomplete declarations even if their completions cannot be fo… Jul 15, 2016 tests Avoided naming conflicts between methods of different specialisations… Jul 14, 2016 .gitattributes Add .gitattributes May 12, 2014 .gitignore Updated Git ignore patterns. Nov 29, 2015 .travis.yml Switched to the latest at present stable Mono (4.2.1) for the OS X bu… Jan 25, 2016 LICENSE Clarified that the license of CppSharp is MIT. Jun 12, 2016 README.md Documented the support for default parameters. May 29, 2016 appveyor.yml Fix AppVeyor builds by invoking VS 2013 command prompt environment. Feb 17, 2016 README.md CppSharp is a collection of libraries for working with C++ code from high-level languages. It has multiple use cases, from parsing C++ code to automatically generating bindings for wrapping C/C++ native code allowing interoperability with high-level languages. The supported target languages at present are C# (hence the name of the project) and C++/CLI. This can be used to consume an existing native library in your high-level code or add scripting support to a native codebase. Libraries Documentation Community Support Users Build Status windows-vs-x86 linux-gcc-x86_64 osx-clang-x86 Libraries Generator Multiple backends: C++/CLI and C# P/Invoke Multiple ABIs: Itanium, MS, ARM, iOS and iOS64 Multiple platforms: Windows, OS X and Linux Virtual table overriding support Multiple inheritance support Easily extensible semantics via user passes Work-in-progress support for STL (C++/CLI only) Strongly-typed customization APIs and type maps Default values of parameters (for target languages which support them) AST Mirrors the Clang's C++ AST and type system classes in C# APIs. Check out Clang's AST introduction docs for more details about its architecture. C++ declarations C++ types Class object layout Declaration visitors Type visitors Parser Provides APIs for parsing C++ source code. Parsing of C++ source code Parsing of libraries archives symbols Parsing of shared libraries symbols Based on the very accurate Clang C++ parser. Documentation Please see the following resources for more information: Getting Started User's Manual Developer's Manual Community Feel free to open up issues on Github with any questions Mailing list: Google group Support For building wrappers and priority support please contact @ddobrev <dpldobrev@protonmail.com>. Users CppSharp is used by the following projects: QtSharp MonoGame LLDBSharp Xamarin FFMPEG.net FFmpeg bindings Tizen bindings libgd bindings Please feel free to send us a pull request adding your own projects to the list above. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mono/CppSharp"	"Tools to surface C++ APIs to C#"	"true"
"Interoperability"	"Sharpen"	"https://github.com/mono/sharpen"	"Sharpen is an Eclipse plugin created by db4o that allows you to convert your Java project into C#"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"182"	"58"	"77"	"GitHub - mono/sharpen: Sharpen is an Eclipse plugin created by db4o that allows you to convert your Java project into c# Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 58 Star 182 Fork 77 mono/sharpen Code Issues 26 Pull requests 4 Pulse Graphs Sharpen is an Eclipse plugin created by db4o that allows you to convert your Java project into c# 335 commits 3 branches 0 releases 8 contributors Java 99.9% Shell 0.1% Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master monodevelop Nothing to show Nothing to show New pull request Latest commit d6ea952 Apr 29, 2015 nathanaeljones Merge remote-tracking branch 'upstream/master' Permalink Failed to load latest commit information. src flat namespace directory structure support, backport from ngit's sharper Apr 6, 2015 travis Travis: Fix bug preventing versions from being detected. Jan 23, 2015 .gitignore Travis: Add code_quality_report.txt to every release. AppVeyor: fix l… Jan 27, 2015 .travis.yml Travis: Add code_quality_report.txt to every release. AppVeyor: fix l… Jan 27, 2015 LICENSE.txt Rename LICENSE.txt to make qulice happy Jan 27, 2015 README.md Readme: Fix badges. Apr 13, 2015 appveyor.yml Travis: Add code_quality_report.txt to every release. AppVeyor: fix l… Jan 27, 2015 pom.xml pom.xml: Fix source directories to match new layout; correct contribu… Jan 27, 2015 README.md Sharpen - Automated Java->C# coversion imazen/sharpen mono/sharpen Sharpen is a library and command-line tool for automating Java to C# code conversion. You can provide configuration classes to control a wide range of class and functionality mapping. Sharpen doesn’t provide a compatibility runtime (i.e, an implementation of all java functionality on top of .NET), but it does provide some utility classes to meet the most common needs. It’s likely that you will need to create a configuration class to customize and perfect your conversion, and you may need to apply patches to the result as well. Sharpen was originally created by db40 svn source here in the format of an Eclipse plugin, but it has since been refactored to work from the command line and on build servers. Building and testing sharpen itself Clone this repository Install Java 7 and maven. Java 6 and 8 aren’t supported. Run ‘mvn clean test’ to test Run ‘mvn install ’ to generate .jar files in /sharpen.core/target Running sharpen mvn install should have created a file named sharpencore-0.0.1-SNAPSHOT-jar-with-dependencies.jar. This is a self-contained copy of sharpen that can be run anywhere. Run java -jar sharpencore-0.0.1-SNAPSHOT-jar-with-dependencies.jar SOURCEPATH -cp JAR_DEPENDENCY_A JAR_DEPENDENCY_B Each dependecy needed by the java source should be specified as a full path to the jar file. SOURCEPATH should also be a full path. Run -help for syntax Sharpen allows for configuration through code Sharpen’s command-line options don’t let you fully override all conversion options and behaviour. For example if you need to change mapping of primitive types or allow/deny mapping between iterators and enumerators, ... Creating external config class Your external configuration class must: inherit Configuration class; must be publicly visible; must have a public constructor; An example configuration project can be found here https://github.com/ydanila/sharpen_imazen_config. Using your custom config class Name your jar file <configuration class name>.sharpenconfig.jar in the sharpen directory. Then specify the full configuration name via the command line parameter -configurationClass (or via the options file). For example, for the XMP core port with this prebuilt Sharpen configuration could be used as follows. java -jar sharpen-jar-with-dependencies.jar C:/java_src/ -configurationClass sharpen.config.MEConfiguration @sharpen-all-options-without-configuration  Configuration also could be specified in an options file. In this case, for the XMP core port with this prebuilt Sharpen configuration it could be used like this: java -jar sharpen-jar-with-dependencies.jar C:/java_src/ @sharpen-all-options  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mono/sharpen"	"Sharpen is an Eclipse plugin created by db4o that allows you to convert your Java project into C#"	"true"
"Interoperability"	"CXXI"	"https://github.com/mono/cxxi"	"C++ interop framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"153"	"60"	"30"	"GitHub - mono/cxxi: C++ interop framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 60 Star 153 Fork 30 mono/cxxi Code Issues 3 Pull requests 2 Pulse Graphs C++ interop framework http://groups.google.com/group/mono-cxxi 167 commits 2 branches 0 releases Fetching contributors C# 95.6% C++ 3.8% Other 0.6% C# C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master static-mode Nothing to show Nothing to show New pull request Latest commit b079651 Dec 17, 2011 chkn Apply Miguel's patch to fix the build Permalink Failed to load latest commit information. examples Apply Miguel's patch to fix the build Dec 17, 2011 m4 Clean up makefiles a bit. Add pkg-config macros needed to build on Mac Jul 6, 2011 src [generator] Get correct native layout size when a field is typed as a… Dec 15, 2011 tests Move qt into examples directory and don't build examples by default. … Dec 15, 2011 .gitignore Fix wrong directory case in makefile. Fix building from monodevelop. … Jul 6, 2011 LICENSE Add license and license headers Mar 8, 2011 Makefile.am Move qt into examples directory and don't build examples by default. … Dec 15, 2011 Makefile.include reorganize Dec 28, 2010 README Sexy new name, cxxi Jun 28, 2011 autogen.sh Hack up the build Aug 15, 2011 configure.ac Move qt into examples directory and don't build examples by default. … Dec 15, 2011 cxxi.sln Sexy new name, cxxi Jun 28, 2011 README Directory structure -------------------  src/   Mono.Cxxi     The runtime library   generator     The binding generator   qt     Auto generated Qt bindings + test program  tests/   Regression tests  examples/   Hello     Small, Hello, World! example  Inlining --------  Inline methods are mapped to a shared library name libFoo-inline.so where libFoo.so is the original shared library we are binding to. This library should be compiled using gcc's  -fkeep-inline-functions option:  g++ `pkg-config --cflags QtCore QtGui` --shared -fPIC -o libQtGui-inline.so -fkeep-inline-functions qt-gui.cpp `pkg-config --libs QtCore QtGui`          Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mono/cxxi"	"C++ interop framework"	"true"
"IoC"	"Castle Windsor"	"https://github.com/castleproject/Windsor"	"Castle Windsor is best of breed, mature Inversion of Control container available for.NET and Silverlight"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"425"	"79"	"224"	"GitHub - castleproject/Windsor: Castle Windsor is a best of breed, mature Inversion of Control container available for .NET and Silverlight Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 79 Star 425 Fork 224 castleproject/Windsor Code Issues 44 Pull requests 5 Pulse Graphs Castle Windsor is a best of breed, mature Inversion of Control container available for .NET and Silverlight http://www.castleproject.org/ 8,421 commits 3 branches 22 releases 60 contributors C# 99.9% Other 0.1% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.5.x 3.0.x master Nothing to show windsor-2.0 v3.3 emailcomponent-1.1.0 dynamicproxy-2.1.0 core-1.1.0 checkout Release-Jan-06 3.2.1 3.2.0 3.1.0 3.1-rc 3.0.0 3.0.0beta1 3.0.0-RC1 2.5.4 2.5.3 2.5.2 2.5.1 2.5.0 2.5.0-beta2 2.5.0-beta1 2.1.1 Nothing to show New pull request Latest commit 2f56a8e Jun 27, 2016 hammett committed on GitHub Merge pull request #137 from ivan-danilov/gitlink … Added PDB source indexing step to the build. Permalink Failed to load latest commit information. buildscripts Added PDB source indexing step to the build. Jun 27, 2016 docs Merge pull request #91 from petersmax/patch-1 Jun 19, 2016 lib missed one more Core v 3.2 dependency May 17, 2014 src Fixed test with weak reference Jun 27, 2016 tools Added PDB source indexing step to the build. Jun 27, 2016 .gitignore - fixed IOC-319 - Concurrency problem when child container is used Nov 19, 2011 BreakingChanges.txt added version info to change files Feb 16, 2013 CONTRIBUTING.md Import docs from the wiki Jun 10, 2015 Castle.Windsor-SL.sln Renamed project and solution names. Sep 2, 2010 Castle.Windsor.5.0.ReSharper Renamed project and solution names. Sep 2, 2010 Castle.Windsor.5.1.ReSharper upgraded R# style WRT private constants, to make them camelCase rathe… Jan 8, 2011 Castle.Windsor.6.0.ReSharper - typo fix Oct 31, 2011 Castle.Windsor.sln removed Remoting facility from the solution. It's an old obsolete tec… Mar 2, 2014 Castle.Windsor.sln.DotSettings Update to fix from comments May 18, 2014 Changes.txt preparing for v3.3 release May 18, 2014 ClickToBuild.cmd updated license headers Aug 21, 2012 License.txt 57 - add nuspecs and other files to support building NuGet packages Apr 27, 2014 README.md Replace README with something more useful Jun 10, 2015 Settings.proj bumping build number, to prepare for CI builds May 23, 2014 TODO.txt fixed FACILITIES-160 Oct 10, 2012 build.cmd added support for SL5 and NET45 to the build scripts Feb 6, 2013 README.md Castle Windsor Castle Windsor is a best of breed, mature Inversion of Control container available for .NET and Silverlight. See the documentation. Releases See the releases. Copyright Copyright 2004-2015 Castle Project License Castle Windsor is licensed under the Apache 2.0 license. Refer to license.txt for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/castleproject/Windsor"	"Castle Windsor is best of breed, mature Inversion of Control container available for.NET and Silverlight"	"true"
"IoC"	"Unity"	"https://github.com/unitycontainer/unity"	"Lightweight extensible dependency injection container with support for constructor, property, and method call injection"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"371"	"83"	"94"	"GitHub - unitycontainer/unity Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 83 Star 371 Fork 94 unitycontainer/unity Code Issues 49 Pull requests 5 Pulse Graphs No description or website provided. 111 commits 5 branches 3 releases 8 contributors C# 91.8% Visual Basic 8.2% C# Visual Basic Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Unity.Mvc Unity4 core-clr master xUnit Nothing to show Unity-3.5.1-RC Unity-3.5-RTW Unity-3.5-RC3 Nothing to show New pull request Latest commit c15bfc4 Mar 18, 2016 woodp Sytem.Runtime nuget error Permalink Failed to load latest commit information. BVT Updated assembly version and added key to strong naming assemblies Sep 30, 2015 build Updated assembly version and added key to strong naming assemblies Sep 30, 2015 quickstarts Unity Core Mar 3, 2016 source Sytem.Runtime nuget error Mar 18, 2016 .gitattributes repo setup Nov 21, 2013 .gitignore gitignore updated Mar 3, 2016 .mailmap Add .mailmap file to correct author email addresses Aug 24, 2015 LICENSE.txt update headers, add windows phone projects, add build scripts Nov 21, 2013 README.md Create README.md Sep 24, 2015 README.md Overview The Unity Container (Unity) is a lightweight, extensible dependency injection container. It facilitates building loosely coupled applications and provides developers with the following advantages: Simplified object creation, especially for hierarchical object structures and dependencies Abstraction of requirements; this allows developers to specify dependencies at run time or in configuration and simplify management of crosscutting concerns Increased flexibility by deferring component configuration to the container Service location capability; this allows clients to store or cache the container Instance and type interception Registration by convention Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/unitycontainer/unity"	"Lightweight extensible dependency injection container with support for constructor, property, and method call injection"	"true"
"IoC"	"Autofac"	"https://github.com/autofac/Autofac"	"An addictive.NET IoC container"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1078"	"162"	"374"	"GitHub - autofac/Autofac: An addictive .NET IoC container Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 162 Star 1,078 Fork 374 autofac/Autofac Code Issues 30 Pull requests 3 Wiki Pulse Graphs An addictive .NET IoC container http://autofac.org 1,888 commits 2 branches 13 releases 33 contributors C# 99.4% PowerShell 0.6% C# PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop master Nothing to show v4.0.0-rc3-309 v4.0.0-rc3-293 v4.0.0-rc3-286 v4.0.0-rc3-280 v4.0.0-rc2-240 v4.0.0-rc1-177 v4.0.0-beta8-157 v4.0.0-beta7-130 v4.0.0-beta6-110 v4.0.0-beta5-90 v4.0.0-alpha2 v4.0.0-alpha1 v3.5.2 Nothing to show New pull request Latest commit 92434c1 Jul 15, 2016 tillig committed on GitHub Added member access modifier Permalink Failed to load latest commit information. build Updates for .NET Core 1.0 and Preview 2 tooling. Jun 28, 2016 samples/AutofacWebApiSample Updated sample Startup to show how to dispose of the app container at… Jul 12, 2016 src Merge pull request #772 from enkafan/AsImplementedInterfacesShouldRet… Jul 15, 2016 test Added member access modifier Jul 15, 2016 .editorconfig Sorted/tidied JSON files for easier diff across files and conflict re… Jun 7, 2016 .gitattributes Brought over scripts for k build. Feb 4, 2015 .gitignore Cleaned up gitignore. Jun 8, 2016 .mailmap Mailmap update for Ivan Feric Jun 2, 2014 Autofac.sln Added a fixture to run the NET46 specific tests while dotnet CLI/xuni… Jul 12, 2016 Autofac.sln.DotSettings Update to ASP.NET 5 Beta 4 and VS 2015 RC May 1, 2015 Autofac.snk Rename .snk file and move to root folder. Dec 20, 2015 CONTRIBUTING.md Added contributor's guide documentation. Jan 7, 2016 ISSUE_TEMPLATE.md Added note about StackOverflow and docs to issue template. Jun 14, 2016 LICENSE Brought over scripts for k build. Feb 4, 2015 NuGet.Config Removed commented nuget sources. Jun 28, 2016 README.md Updated readthedocs URLs. Apr 28, 2016 appveyor.yml Trying symbol publishing to MyGet. Jun 28, 2016 build.ps1 Ignoring the scanned assembly during tests. Jun 7, 2016 global.json Updates for .NET Core 1.0 and Preview 2 tooling. Jun 28, 2016 README.md Autofac Autofac is an IoC container for Microsoft .NET. It manages the dependencies between classes so that applications stay easy to change as they grow in size and complexity. This is achieved by treating regular .NET classes as components. Get Packages You can get Autofac by grabbing the latest NuGet packages or using our NuGet script builder to get exactly what you need. If you're feeling adventurous, continuous integration builds are on MyGet. Release notes are available on the wiki. Get Help Need help with Autofac? We have a documentation site as well as API documentation. We're ready to answer your questions on Stack Overflow or check out the discussion forum. Get Started Our Getting Started tutorial walks you through integrating Autofac with a simple application and gives you some starting points for learning more. Super-duper quick start: Register components with a ContainerBuilder and then build the component container. var builder = new ContainerBuilder();  builder.Register(c => new TaskController(c.Resolve<ITaskRepository>())); builder.RegisterType<TaskController>(); builder.RegisterInstance(new TaskController()); builder.RegisterAssemblyTypes(controllerAssembly);  var container = builder.Build(); Resolve services from a lifetime scope - either the container or a nested scope: var taskController = container.Resolve<TaskController>(); There is a growing number of application integration libraries that make using Autofac with your application a snap. Support for several popular frameworks is also available through the ""Extras"" packages. Intrigued? Check out our Getting Started walkthrough! Project Autofac is licensed under the MIT license, so you can comfortably use it in commercial applications (we still love contributions though). File issues in the repo with the associated feature/code. Autofac - Core dependency resolution and common functions (this repo). Autofac.Configuration - JSON/XML file-based configuration support. Autofac.Extras.AggregateService - Dynamic aggregate service implementation generation. Autofac.Extras.AttributeMetadata - Metadata scanning/filtering through attributes. Autofac.Extras.CommonServiceLocator - Common Service Locator implementation backed by Autofac. Autofac.Extras.DomainServices - RIA/domain services support. Autofac.Extras.DynamicProxy - Decorators and interceptors. Autofac.Extras.EnterpriseLibraryConfigurator - Enterprise Library 5 configuration support. Autofac.Extras.FakeItEasy - FakeItEasy mocking framework integration. Autofac.Extras.Moq - Moq mocking framework integration. Autofac.Extras.MvvmCross - MvvmCross integration. Autofac.Extras.NHibernate - NHibernate integration. Autofac.Mef - MEF catalog integration. Autofac.Multitenant.Wcf - Multitenant WCF service hosting. Autofac.Multitenant - Multitenant dependency resolution support. Autofac.Mvc.Owin - OWIN support for ASP.NET MVC. Autofac.Owin - Core OWIN support - shared middleware for request lifetime integration. Autofac.SignalR - Application integration for SignalR. Autofac.Wcf - WCF service hosting. Autofac.Web - ASP.NET web forms integration. Autofac.WebApi.Owin - OWIN support for Web API. Autofac.WebApi - Application integration for Web API. Contributing / Pull Requests Refer to the Readme for Autofac Developers for setting up and building Autofac source. We also have a contributors guide to help you get started. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/autofac/Autofac"	"An addictive.NET IoC container"	"true"
"IoC"	"Ninject"	"https://github.com/ninject/ninject"	"The ninja of.net dependency injectors"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1506"	"166"	"431"	"GitHub - ninject/Ninject: the ninja of .net dependency injectors Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 166 Star 1,506 Fork 431 ninject/Ninject Code Issues 44 Pull requests 10 Wiki Pulse Graphs the ninja of .net dependency injectors http://ninject.org/ 609 commits 15 branches 16 releases 25 contributors C# 98.2% Batchfile 1.8% C# Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 4.0.0 Issue97 Maintenance_V2.2 MediumTrust PerformanceTryouts ReadonlyKernel Release40 WinRT activation bindingmods help impliedresolution master resolutionext rubification Nothing to show v4.0-alpha 3.2.3 3.2.2 3.2.2-final 3.2.1 3.2.0-final 3.0.2 3.0.1 3.0.0 3.0.0-rc2 3.0.0-rc1 2.3.0.0 2.2.1.0 2.2.0.0 2.0.1.0 2.0.0.0 Nothing to show New pull request Latest commit 7a9c7a9 Nov 24, 2015 onovotny Set prerelease tag to alpha Permalink Failed to load latest commit information. .nuget Update nuget and android pkgs Nov 27, 2014 RemotingServer Changed the InstanceReference to look for interfaces based on type if… Mar 21, 2014 RemotingTestClient Changed the InstanceReference to look for interfaces based on type if… Mar 21, 2014 lib Use Nuget packages instead of lib folder Jul 1, 2013 logos Updated to the latest build scripts Apr 26, 2011 nuget Update Ninject.nuspec Nov 2, 2014 packages Update to latest Fluent Assertions; add Android test project Aug 2, 2014 src update output path Nov 24, 2015 tools Convert to .net 4.5.1, win 8.1; remove sl5 and wp8 Jun 6, 2015 .gitignore Convert to .net 4.5.1, win 8.1; remove sl5 and wp8 Jun 7, 2015 Build-NinjectAndExtensions.bat Improved releasing scripts Mar 26, 2012 Build-NinjectAndExtensionsWithReleaseTag.bat Added .Net 4.5, SL5 and WP 7.1 builds Jan 10, 2012 GitVersionConfig.yaml Set prerelease tag to alpha Nov 24, 2015 HowToBuild.txt Removed target which are not supported anymore. Apr 16, 2014 LICENSE.txt Updated licensing terms to reflect dual-license with Ms-PL Mar 23, 2009 Ninject.build Removed target which are not supported anymore. Apr 16, 2014 Ninject.include Removed target which are not supported anymore. Apr 16, 2014 Ninject.sln add fa as nuget ref Nov 24, 2015 Ninject.sln.DotSettings Added StyleCop settings file and resharper solution settings file. Apr 24, 2014 Portable.CommonServiceLocator.NinjectAdapter.nuspec fix nuspecs Nov 24, 2015 Portable.Ninject.nuspec fix nuspecs Nov 24, 2015 PushAllGoogleCode.build Added NuGet only push Nuget and Google code scripts May 23, 2012 PushAllNuget.build Added NuGet only push Nuget and Google code scripts May 23, 2012 PushGoogleCode.build Added NuGet only push Nuget and Google code scripts May 23, 2012 PushNuGet.build Added NuGet only push Nuget and Google code scripts May 23, 2012 README.md Fix appveyor and update CI badge Nov 24, 2015 ReleaseNotes.md Merge branch 'readonlykernel' Jun 6, 2015 appveyor.yml Set prerelease tag to alpha Nov 24, 2015 build.cmd Make it build again using script Jul 24, 2014 nuget.config remove old build scripts Nov 24, 2015 README.md Ninject Ninject is a lightning-fast, ultra-lightweight dependency injector for .NET applications. It helps you split your application into a collection of loosely-coupled, highly-cohesive pieces, and then glue them back together in a flexible manner. By using Ninject to support your software's architecture, your code will become easier to write, reuse, test, and modify. Write your code so it's flexible... public class Samurai {     public IWeapon Weapon { get; private set; }     public Samurai(IWeapon weapon)      {         this.Weapon = weapon;     } } ...and let Ninject glue it together for you. public class WarriorModule : NinjectModule {     public override void Load()      {         this.Bind<IWeapon>().To<Sword>();     } } Features: Focused. Too many existing dependency injection projects sacrifice usability for features that aren't often necessary. Each time a feature is added to Ninject, its benefit is weighed against the complexity it adds to everyday use. Our goal is to keep the barrier to entry - the baseline level of knowledge required to use Ninject - as low as possible. Ninject has many advanced features, but understanding them is not required to use the basic features. Sleek. Framework bloat is a major concern for some projects, and as such, all of Ninject's core functionality is in a single assembly with no dependencies outside the .NET base class library. This single assembly's footprint is approximately 85KB when compiled for release. Fast. Instead of relying on reflection for invocation, Ninject takes advantage of lightweight code generation in the CLR. This can result in a dramatic (8-50x) improvement in performance in many situations. Precise. Ninject helps developers get things right the first time around. Rather than relying on XML mapping files and string identifiers to wire up components, Ninject provides a robust domain-specific language. This means that Ninject takes advantage of the capabilities of the language (like type-safety) and the IDE (like IntelliSense and code completion). Agile. Ninject is designed around a component-based architecture, with customization and evolution in mind. Many facets of the system can be augmented or modified to fit the requirements of each project. Stealthy. Ninject will not invade your code. You can easily isolate the dependency on Ninject to a single assembly in your project. Powerful. Ninject includes many advanced features. For example, Ninject is the first dependency injector to support contextual binding, in which a different concrete implementation of a service may be injected depending on the context in which it is requested. Everything else is in Extensions Yes, sounds slim and focused, but where is the support for all the features that the competitors have? Generally, they are maintained as specific focused extensions with owners who keep them in sync and pull in new ideas and fixes fast. These are summarized on the extensions section of the project website. Most are hosted alongside the core project right here. License Ninject is intended to be used in both open-source and commercial environments. To allow its use in as many situations as possible, Ninject is dual-licensed. You may choose to use Ninject under either the Apache License, Version 2.0, or the Microsoft Public License (Ms-PL). These licenses are essentially identical, but you are encouraged to evaluate both to determine which best fits your intended use. Refer to LICENSE.txt for detailed information. CI build status Changes history Changes in Ninject 3 Changes in Ninject 2 Detailed release notes Resources Project website Documentation Wiki Nate's blog Ian's blog Remo's blog Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ninject/ninject"	"The ninja of.net dependency injectors"	"true"
"IoC"	"StructureMap"	"https://structuremap.github.io/"	"The original IoC/DI Container for.Net"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"604"	"70"	"209"	"GitHub - structuremap/structuremap: A Dependency Injection/Inversion of Control tool for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 70 Star 604 Fork 209 structuremap/structuremap Code Issues 12 Pull requests 3 Wiki Pulse Graphs A Dependency Injection/Inversion of Control tool for .NET http://structuremap.github.com 1,306 commits 9 branches 10 releases Fetching contributors C# 58.2% HTML 41.6% Other 0.2% C# HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.1 exceptions gh-pages issue-1 jekyll master sean-gilliam-fix-typos three twosix Nothing to show v2.6.3 v2.6.2 v2.6.1 v2.6 v2.5.4 v2.5.3 v2.5.2 v2.5 v2.0 v1.1 Nothing to show New pull request Latest commit 1cf1684 Jul 5, 2016 jeremydmiller committed on GitHub Merge pull request #479 from tharax/patch-1 … Correct a spelling mistake in documentation. Permalink Failed to load latest commit information. documentation Merge pull request #480 from JosephWoodward/patch-1 Jul 5, 2016 src lifecycle_creation.cs - fixed typo May 29, 2016 .gitignore working nuspec for the CoreCLR support. Nov 16, 2015 Gemfile converted the build to ripple2 and FubuRake. Jun 5, 2013 LICENSE.TXT Added LICENSE.TXT Feb 24, 2009 README.markdown Updated the building the source instructions Jan 23, 2016 RunBuild.BAT Added a :version task to rake. Cleaned out unnecessary files Jul 2, 2015 nuget.exe working nuspec for the CoreCLR support. Nov 16, 2015 nunitTests.config Initial import of release StructureMap_v1.1_win32_net2_0.zip Jul 7, 2006 paket.dependencies Converted tests from Fixie to xUnit Mar 15, 2016 paket.exe Upgrading paket.exe, eliminating the .gitattributes Nov 13, 2015 paket.lock little cleanup of nuget references and tests after the big switch to … Mar 20, 2016 publish-docs.cmd updated release notes for 4.1.2 Mar 20, 2016 rakefile.rb put in the new DisposalLock semantics on the StructureMap container May 3, 2016 structuremap-signed.paket.template correcting the path to the StructureMap.Net4 dll in the nuget creation Jul 6, 2015 structuremap-web-signed.paket.template Parallel, signed nugets for StructureMap.dll and StructureMap.Web.dll Jul 2, 2015 README.markdown Welcome to StructureMap, the oldest Inversion of Control container for .Net. Getting StructureMap StructureMap is available via NuGet: Install-Package StructureMap If you want to fix a bug or just want to tinker with an idea, we love receiving pull requests! Building the Source Clone the repository: git clone git://github.com/structuremap/structuremap.git From the command line, run paket restore once to resolve and fetch the nuget dependencies. I disabled the ""auto-restore"" feature because I felt like it was too slow in normal development. I apologize for the problems that has caused folks in pulling down the code. Open the solution at src/StructureMap.sln and go to town! Note: The StructureMap team uses Rake internally and on the CI server, but Rake is no longer necessary in any way for developing with the StructureMap codebase. Please post any questions or bugs to the StructureMap Users mailing list. The latest documentation is available at http://structuremap.github.io. Thanks for trying StructureMap. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/structuremap/structuremap"	"The original IoC/DI Container for.Net"	"true"
"IoC"	"LightInject"	"https://github.com/seesharper/LightInject"	"A ultra lightweight IoC container"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"185"	"26"	"65"	"GitHub - seesharper/LightInject: An ultra lightweight IoC container Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 185 Fork 65 seesharper/LightInject Code Issues 48 Pull requests 12 Wiki Pulse Graphs An ultra lightweight IoC container http://www.lightinject.net 556 commits 4 branches 9 releases 9 contributors C# 98.6% HTML 1.2% Other 0.2% C# HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Next gh-pages master vs2015 Nothing to show v4.0.11 v4.0.10 v4.0.10-rc2 v4.0.10-rc2-2 v4.0.9 v4.0.8 v4.0.7 v4.0.6 v4.0.4 Nothing to show New pull request Latest commit 429f2c3 Jul 4, 2016 seesharper fixes #290 Permalink Failed to load latest commit information. build fixes #270 #278 May 25, 2016 oldsource fixed #253 Jan 26, 2016 src fixes #290 Jul 4, 2016 .gitattributes Infrastructure for binary build Oct 24, 2013 .gitignore Make it possible to set a default lifetime for registrations without … Dec 2, 2015 appveyor.yml added appveyor file Jan 26, 2016 contributing.md Update contributing.md Feb 18, 2016 designpatterns.md Added design patterns doc May 11, 2016 readme.md update readme file Jan 14, 2016 readme.md Installing LightInject provides two distribution models via NuGet Binary PM> Install-Package LightInject This adds a reference to the LightInject.dll in the target project. Source PM> Install-Package LightInject.Source This will install a single file (LightInject.cs) into the current project. Creating a container var container = new LightInject.ServiceContainer();  The container implements IDisposable and should be disposed after usage has completed. It can also be used inside of a using statement for a constrained scope. Default services public interface IFoo {} public class Foo : IFoo {}  container.Register<IFoo, Foo>(); var instance = container.GetInstance<IFoo>(); Assert.IsInstanceOfType(instance, typeof(Foo));  Named services public class Foo : IFoo {} public class AnotherFoo : IFoo {}  container.Register<IFoo, Foo>(); container.Register<IFoo, AnotherFoo>(""AnotherFoo""); var instance = container.GetInstance<IFoo>(""AnotherFoo""); Assert.IsInstanceOfType(instance, typeof(AnotherFoo));  If only one named registration exists, LightInject is capable of resolving this as the default service. container.Register<IFoo, AnotherFoo>(""AnotherFoo""); var instance = container.GetInstance<IFoo>(); Assert.IsInstanceOfType(instance, typeof(AnotherFoo));  Unresolved services LightInject can resolve services that are not registered with the container using the RegisterFallback method. var container = new ServiceContainer(); container.RegisterFallback((type, s) => true, request => new Foo()); var foo = container.GetInstance<IFoo>();  The first argument to the RegisterFallback method makes it possible to possible to decide if the service can be ""late-resolved"". The second argument is a ServiceRequest instance that provides the requested service type and service name. IEnumerable<T> When we register multiple services with the same service type, LightInject is capable of resolving these services as an IEnumerable<T>. public class Foo : IFoo {} public class AnotherFoo : IFoo {}  container.Register<IFoo, Foo>(); container.Register<IFoo, AnotherFoo>(""AnotherFoo""); var instances = container.GetInstance<IEnumerable<IFoo>>() Assert.AreEqual(2, instances.Count());  Alternatively using the GetAllInstances method. var instances = container.GetAllInstances<IFoo>(); Assert.AreEqual(2, instances.Count());  In addition, LightInject supports the following IEnumerable<T> sub-types. Array ICollection<T> IList<T> IReadOnlyCollection<T> (Net 4.5 and Windows Runtime); IReadOnlyList<T> (Net 4.5 and Windows Runtime) By default, LightInject will resolve all services that are compatible with the requested element type. container.Register<Foo>(); container.Register<DerivedFoo>(); var instances = container.GetAllInstances<Foo>(); Assert.AreEqual(2, instances.Count());  This behavior can be overridden using the EnableVariance container option. var container = new ServiceContainer(new ContainerOptions { EnableVariance = false }); container.Register<Foo>(); container.Register<DerivedFoo>(); var instances = container.GetAllInstances<Foo>(); Assert.AreEqual(1, instances.Count());  Values Registers the value as a constant. container.RegisterInstance<string>(""SomeValue""); var value = container.GetInstance<string>(); Assert.AreEqual(""SomeValue, value);  Lifetime The default behavior in LightInject is to treat all objects as transients unless otherwise specified. container.Register<IFoo,Foo>(); var firstInstance = container.GetInstance<IFoo>(); var secondInstance = container.GetInstance<IFoo>(); Assert.AreNotSame(firstInstance, secondInstance);  PerScopeLifetime Ensures that only one instance of a given service can exists within a scope. The container will call the Dispose method on all disposable objects created within the scope. container.Register<IFoo,Foo>(new PerScopeLifetime()); using(container.BeginScope()) {      var firstInstance = container.GetInstance<IFoo>();     var secondInstance = container.GetInstance<IFoo>();     Assert.AreSame(firstInstance, secondInstance); }  Note: An *InvalidOperationException** is thrown if a service registered with the PerScopeLifetime is requested outside the scope.* PerContainerLifetime Ensures that only one instance of a given service can exist within the container. The container will call the Dispose method on all disposable objects when the container itself is disposed. using(container = new ServiceContainer()) {     container.Register<IFoo,Foo>(new PerContainerLifetime());        var firstInstance = container.GetInstance<IFoo>();     var secondInstance = container.GetInstance<IFoo>();     Assert.AreSame(firstInstance, secondInstance); }  PerRequestLifeTime A new instance is created for each request and the container calls Dispose when the scope ends. This lifetime is used when the conrete class implements IDisposable. container.Register<IFoo,Foo>(new PerRequestLifeTime()); using(container.BeginScope()) {            var firstInstance = container.GetInstance<IFoo>();     var secondInstance = container.GetInstance<IFoo>();     Assert.AreNotSame(firstInstance, secondInstance); }     Note: An *InvalidOperationException** is thrown if a service registered with the PerRequestLifeTime is requested outside the scope.* Custom lifetime A custom lifetime is created by implementing the ILifetime interface internal interface ILifetime {     object GetInstance(Func<object> instanceFactory, Scope currentScope);         }  The following example shows to create a custom lifetime that ensures only one instance per thread. public class PerThreadLifetime : ILifetime {     ThreadLocal<object> instances = new ThreadLocal<object>();        public object GetInstance(Func<object> instanceFactory, Scope currentScope)     {         if (instances.value == null)         {             instances.value = instanceFactory();         }         return instances.value;     } }  That is all it takes to create a custom lifetime, but what about disposable services? public class PerThreadLifetime : ILifetime {     ThreadLocal<object> instances = new ThreadLocal<object>();        public object GetInstance(Func<object> instanceFactory, Scope currentScope)     {                    if (instances.value == null)         {                            object instance = instanceFactory();                             IDisposable disposable = instance as IDisposable;                            if (disposable != null)             {                 if (currentScope == null)                 {                     throw new InvalidOperationException(""Attempt to create an disposable object                                                          without a current scope."")                 }                 currentScope.TrackInstance(disposable);             }              instances.value = instance;         }         return instance.value;     } }  Important A lifetime object controls the lifetime of a single service and can never be shared for multiple service registrations. Wrong ILifetime lifetime = new PerContainerLifeTime(); container.Register<IFoo,Foo>(lifetime); container.Register<IBar,Bar>(lifetime);  Right container.Register<IFoo,Foo>(new PerContainerLifeTime()); container.Register<IBar,Bar>(new PerContainerLifeTime());  A lifetime object is also shared across threads and that is something we must take into consideration when developing new lifetime implementations. Async and Await By default scopes are managed per thread which means that when the container looks for the current scope, it will look for a scope that is associated with the current thread. With the introduction of the async/await pattern chances are that the code that is requesting a service instance is running on another thread. To illustrate this lets consider an example that is going to cause an instance to be resolved on another thread. We start of by creating an interface that returns a Task<IBar> public interface IAsyncFoo {     Task<IBar> GetBar(); }  Next we implement this interface in such a way that the IBar instance is requested on another thread. public class AsyncFoo : IAsyncFoo {     private readonly Lazy<IBar> lazyBar;      public AsyncFoo(Lazy<IBar> lazyBar)     {         this.lazyBar = lazyBar;     }      public async Task<IBar> GetBar()     {         await Task.Delay(10);         return lazyBar.Value; <--This code is executed on another thread (continuation).     } }  The we register the dependency (IBar) with the PerScopeLifetime that is going to cause the container to ask for the current scope so that the instance can be registered with that scope. var container = new ServiceContainer(); container.Register<IBar, Bar>(new PerScopeLifetime()); container.Register<IAsyncFoo, AsyncFoo>();  using (container.BeginScope()) {     var instance = container.GetInstance<IAsyncFoo>();     ExceptionAssert.Throws<AggregateException>(() => instance.GetBar().Wait());                 }  This will throw an exception that states the following: Attempt to create a scoped instance without a current scope.    The reason that this is happening is that the current scope is associated with the thread that created it and when the continuation executes, we are essentially requesting an instance on another thread. To deal with this issue, LightInject now supports scopes across the logical CallContext. var container = new ServiceContainer(); container.ScopeManagerProvider = new PerLogicalCallContextScopeManagerProvider(); container.Register<IBar, Bar>(new PerScopeLifetime()); container.Register<IAsyncFoo, AsyncFoo>();  using (container.BeginScope()) {     var instance = container.GetInstance<IAsyncFoo>();     var bar = instance.GetBar().Result;     Assert.IsInstanceOfType(bar, typeof(IBar)); }  Note that the PerLogicalCallContextScopeManagerProvider is only available when running under .Net 4.5. For more information, please refer to the following article by Stephen Cleary. Dependencies Constructor Injection public interface IFoo {}         public interface IBar {}  public class Foo : IFoo {     public Foo(IBar bar)      {         Bar = bar;     }      public IBar Bar { get; private set; }  }  public class Bar : IBar {}  Implicit service registration Registers a service without specifying any information about how to resolve the constructor dependencies of the implementing type. container.Register<IFoo, Foo>(); container.Register<IBar, Bar>(); var foo = (Foo)container.GetInstance<IFoo>(); Assert.IsInstanceOfType(foo.Bar, typeof(Bar));   Note: In the case where the implementing type(Foo) has more than one constructor, LightInject will choose the constructor with the most parameters. For fine grained control of the injected constructor dependencies, we can provide a factory that makes it possible to create an instance of a given constructor dependency. container.RegisterConstructorDependency<IBar>((factory, parameterInfo) => new Bar());  This tells the container to inject a new Bar instance whenever it sees an IBar constructor dependency. Explicit service registration Registers a service by providing explicit information about how to create the service instance and how to resolve the constructor dependencies. container.Register<IBar, Bar>(); container.Register<IFoo>(factory => new Foo(factory.GetInstance<IBar>)); var foo = (Foo)container.GetInstance<IFoo>(); Assert.IsNotNull(foo.Bar);              Parameters Parameters are used when we want to supply one or more values when the service is resolved. public class Foo : IFoo {     public Foo(int value)     {         Value = value;     }      public int Value { get; private set; } }     container.Register<int, IFoo>((arg, factory) => new Foo(arg)); var foo = (Foo)container.GetInstance<int, IFoo>(42); Assert.AreEqual(42,foo.Value);  We can also do a combination of supplied values and dependencies. public class Foo : IFoo {     public Foo(int value, IBar bar)     {         Value = value;     }      public int Value { get; private set; }     public IBar Bar { get; private set; } }      container.Register<IBar, Bar>(); container.Register<int, IFoo>((factory, value) => new Foo(value, factory.GetInstance<IBar>())); var foo = (Foo)container.GetInstance<int, IFoo>(); Assert.AreEqual(42, foo.Value); Assert.IsNotNull(foo.Bar);  Property Injection public interface IFoo {}  public interface IBar {}  public class Foo : IFoo {     public IBar Bar { get; set; } }  public class Bar : IBar {}  Implicit service registration Registers the service without specifying any information about how to resolve the property dependencies. container.Register<IFoo, Foo>(); container.Register<IBar, Bar>(); var foo = (Foo)container.GetInstance<IFoo>(); Assert.IsNotNull(foo.bar);  Note: **LightInject* considers all read/write properties a dependency, but implements a loose strategy around property dependencies, meaning that it will NOT throw an exception in the case of an unresolved property dependency.* For fine grained control of the injected property dependencies, we can provide a factory that makes it possible to create an instance of a given property dependency. container.RegisterPropertyDependency<IBar>((factory, propertyInfo) => new Bar());  This tells the container to inject a new Bar instance whenever it sees an IBar property dependency. Explicit service registration Registers a service by providing explicit information about how to create the service instance and how to resolve the property dependencies. container.Register<IBar, Bar>(); container.Register<IFoo>(factory => new Foo() {Bar = factory.GetInstance<IBar>()})  var foo = (Foo)container.GetInstance<IFoo>(); Assert.IsNotNull(foo.bar);  Property injection on existing instances. In the cases where we don't control the creation of the service instance, LightInject can inject property dependencies into an existing instance. container.Register<IBar, Bar>(); var foo = new Foo(); container.InjectProperties(foo); Assert.IsNotNull(foo);  Initializers Use the Initialize method to perform service instance initialization/post-processing. container.Register<IFoo, FooWithPropertyDependency>(); container.Initialize(registration => registration.ServiceType == typeof(IFoo),      (factory, instance) => ((FooWithPropertyDependency)instance).Bar = new Bar()); var foo = (FooWithProperyDependency)container.GetInstance<IFoo>(); Assert.IsInstanceOfType(foo.Bar, typeof(Bar));  Assembly Scanning LightInject is capable of registering services by looking at the types of a given assembly. container.RegisterAssembly(typeof(IFoo).Assembly)  To filter out the services to be registered with the container, we can provide a predicate that makes it possible to inspect the service type and the implementing type. container.RegisterAssembly(typeof(IFoo).Assembly, (serviceType, implementingType) => serviceType.NameSpace == ""SomeNamespace"");  It is also possible to scan a set assembly files based on a search pattern. container.RegisterAssembly(""SomeAssemblyName*.dll"");    Composition Root When LightInject scans an assembly it will look for an implementation of the ICompositionRoot interface. public class SampleCompositionRoot : ICompositionRoot {                    public void Compose(IServiceRegistry serviceRegistry)     {              serviceRegistry.Register(typeof(IFoo),typeof(Foo));     } }  If one or more implementations of the ICompositionRoot interface is found, they will be created and executed. Note: Any other services contained within the target assembly that is not registered in the composition root, will *NOT** be registered.* Rather that having a single composition root that basically needs to reference all other assemblies, having multiple composition roots makes it possible to group services naturally together. Another advantage of registering services in a ICompositionRoot, is that they can easily be reused in automated tests. Lazy Composition Roots LightInject is capable of registering services on a need to have basis. For a large application that has a lot of services, it might not be the best solution to register all these services up front as this could seriously hurt the startup time of our application due to extensive assembly loading. If an unregistered service is requested, LightInject will scan the assembly where this service is contained. CompositionRootAttribute When an assembly is being scanned, LightInject will look for implementations of the ICompositionRoot interface. For large assemblies that contains many type, this might be an expensive operation. The CompositionRootAttribute is an assembly level attribute that simply helps LightInject to locate the compostion root. [assembly: CompositionRootType(typeof(SampleCompositionRoot))]  RegisterFrom Allows explicit execution of a composition root. container.RegisterFrom<SampleCompositionRoot>();  Generics public interface IFoo<T> {}; public class Foo<T> : IFoo<T> {};  The container creates the closed generic type based on the service request. container.Register(typeof(IFoo<>), typeof(Foo<>)); var instance = container.GetInstance(typeof(IFoo<int>)); Assert.IsInstanceOfType(instance, typeof(Foo<int>));  Constraints LightInject enforces generic constrains Lazy<T> LightInject can resolve a service as an instance of Lazy<T> when we want to postpone resolving the underlying service until it is needed. public interface IFoo {} public class Foo : IFoo {}  container.Register<IFoo, Foo>(); var lazyFoo = container.GetInstance<Lazy<IFoo>>(); Assert.IsNotNull(lazyFoo.Value);  Function Factories Function factories allows services to resolved as a function delegate that in turn is capable of returning the underlying service instance. We can think of this as an alternative to the Service Locator (anti)pattern. public interface IFoo {} public class Foo : IFoo {}  container.Register<IFoo,Foo>(); var func = container.GetInstance<Func<IFoo>>(); var foo = func(); Assert.IsNotNull(foo);   Note: A function factory is effectively a delegate that redirects back to the corresponding *GetInstance** method on the service container.* Named Factories The container returns a function delegate that represents calling the GetInstance method with ""SomeFoo"" as the service name argument. container.Register<IFoo, Foo>(""SomeFoo""); var func = container.GetInstance<Func<IFoo>>(""SomeFoo"");    var foo = func(); Assert.IsNotNull(foo);  Parameters Function factories can also take parameters that will be used create the service instance. public class Foo : IFoo {     public Foo(int value)     {         Value = value;     }      public int Value { get; private set; } }  container.Register<int, IFoo>((factory, value) => new Foo(value)); var fooFactory = container.GetInstance<Func<int, IFoo>>(); var foo = (Foo)fooFactory(42);  Assert.AreEqual(foo.Value, 42);  Note : The service must be explicitly registered in order for the container to resolve it as a parameterized function factory. IDisposable The only way to deal with disposable objects when using function factories, is to let the service type inherit from IDisposable. public interface IFoo : IDisposable {} public class Foo : IFoo {}  container.Register<IFoo, Foo>(); var fooFactory = container.GetInstance<Func<IFoo>>();  using(IFoo foo = fooFactory()) {  } <--Instance is disposed here            Note: Although this is common practice even in the BCL, this kind of interfaces are often referred to as leaky abstractions. Typed Factories A typed factory is a class that wraps the function factory that is used to create the underlying service instance. As opposed to just function factories, typed factories provides better expressiveness to the consumer of the factory. public interface IFooFactory {     IFoo GetFoo(); }  public class FooFactory : IFooFactory {     private Func<IFoo> createFoo;      public FooFactory(Func<IFoo> createFoo)     {         this.createFoo = createFoo;     }      public IFoo GetFoo()     {         return createFoo();     } }   container.Register<IFoo, Foo>(); container.Register<IFooFactory, FooFactory>(new PerContainerLifetime()); var fooFactory = container.GetInstance<IFooFactory>(); var foo = fooFactory.GetFoo(); Assert.IsNotNull(foo);  Note: Register typed factories with the *PerContainerLifetime** unless a compelling reason exists to choose a different lifetime.* Parameters Types factories can also wrap a parameterized function factory and allows us to pass arguments. public class Foo : IFoo {     public Foo(int value)     {         Value = value;     }      public int Value { get; private set; } }  public interface IFooFactory {     IFoo GetFoo(int value); }   public class FooFactory : IFooFactory {     private Func<int, IFoo> createFoo;      public FooFactory(Func<int, IFoo> createFoo)     {         this.createFoo = createFoo;     }      public IFoo GetFoo(int value)     {         return createFoo(value);     } }   container.Register<int, IFoo>((factory, value) => new Foo(value)); container.Register<IFooFactory, FooFactory>(new PerContainerLifetime()); var typedFooFactory = container.GetInstance<IFooFactory>(); var foo = typedFooFactory.GetFoo(42); Assert.AreEqual(foo.Value, 42);  IDisposable Working with typed factories gives us the possibility to release disposable services registered as transients without exposing a leaky abstraction. public interface IFooFactory {     IFoo GetFoo(int value);     void Release(IFoo foo); }   public class FooFactory : IFooFactory {     private Func<IFoo> createFoo;      public FooFactory(Func<IFoo> createFoo)     {         this.createFoo = createFoo;     }      public IFoo GetFoo(int value)     {         return createFoo(value);     }      public void Release(IFoo foo)     {         var disposable = foo as IDisposable;         if (disposable != null)         {             disposable.Dispose();         }     } }      Recursive dependency detection A recursive dependency graph is when a service depends directly or indirectly on itself. public class FooWithRecursiveDependency : IFoo {     public FooWithRecursiveDependency(IFoo foo)     {     } }  The following code will throw an InvalidOperationException stating that there are existing recursive dependencies. container.Register(typeof(IFoo), typeof(FooWithRecursiveDependency)); container.GetInstance<IFoo>()  Internals When running under the .Net platform, LightInject is capable of creating instances of classes that has the internal modifier. The only requirement is that the internal class exposes a public constructor. internal class InternalFooWithPublicConstructor : IFoo {     public InternalFooWithPublicConstructor () {} }  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/seesharper/LightInject"	"A ultra lightweight IoC container"	"true"
"IoC"	"TinyIoC"	"https://github.com/grumpydev/TinyIoC"	"Single-file, easy and cross-platform IoC container"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"433"	"50"	"152"	"GitHub - grumpydev/TinyIoC: An easy to use, hassle free, Inversion of Control Container for small projects, libraries and beginners alike. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 433 Fork 152 grumpydev/TinyIoC Code Issues 34 Pull requests 16 Wiki Pulse Graphs An easy to use, hassle free, Inversion of Control Container for small projects, libraries and beginners alike. 229 commits 4 branches 0 releases 23 contributors C# 97.5% ASP 1.4% Other 1.1% C# ASP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags OpenGenerics Unregister WinRT master Nothing to show Nothing to show New pull request Latest commit c706619 Jun 24, 2016 grumpydev committed on GitHub Merge pull request #96 from niemyjski/master … Added support for NETSTANDARD 1.0+ and PCL Profile 151 Permalink Failed to load latest commit information. art Added logo art, nuspecs for aspnetextensions and tiny messenger Apr 6, 2011 platformtests Platform test fixes Jun 8, 2012 src Update TinyIoC.cs Jun 23, 2016 tools/nuget update nuget Dec 17, 2014 .gitignore updated the ncrunch ignore Jan 21, 2013 README.md Updated readme Jan 31, 2011 TinyIoC.nuspec Updated licenseUrl to new license file location. Jun 10, 2015 TinyIoCAspNetExtensions.nuspec Updated licenseUrl to new license file location. Jun 10, 2015 TinyIoCWinRT.nuspec Updated licenseUrl to new license file location. Jun 10, 2015 TinyMessenger.nuspec Updated licenseUrl to new license file location. Jun 10, 2015 build.ps1 Fix for new nuget commandline Dec 2, 2012 licence.txt Updated license to MIT Feb 2, 2016 README.md Welcome to TinyIoC Overview Welcome to TinyIoC - an easy to use, hassle free, Inversion of Control Container. TinyIoC has been designed to fulfil a single key requirement - to lower the ""level of entry"" for using an IoC container; both for small projects, and developers who are new to IoC who might be ""scared"" of the ""big boys""! To that end, TinyIoC attempts to stick to the following core principals: Simplfied Inclusion - No assembly to reference, no binary to worry about, just a single cs file you can include in your project and you're good to go. It even works with both Mono and MonoTouch for iPhone development! Simplified Setup - With auto-resolving of concrete types and an ""auto registration"" option for interfaces setup is a piece of cake. It can be reduced to 0 lines for concrete types, or 1 line if you have any interface dependencies! Simple, ""Fluent"" API - Just because it's ""Tiny"", doesn't mean it has no features. A simple ""fluent"" API gives you access to the more advanced features, like specifying singleton/multi-instance, strong or weak references or forcing a particular constructor. In addition to this, TinyIoC's ""simplified inclusion"" makes it useful for providing DI for internal library classes, or providing your library the ability to use DI without the consuming developer having to specify a container (although it's useful to provide the option to do so). Note For ASP.Net per-request lifetime support you will need to also include TinyIoCAspNetExtensions.cs, and the TinyIoC namespace. This provides an extension method for supporting per-request registrations. It's an extra file, but it's preferable to taking a dependency on Asp.Net in the main file, which then requires users to setup #DEFINEs for non-asp.net platforms. Key Features Simple inclusion - just add the CS file (or VB file coming soon!) and off you go. Wide platform support - actively tested on Windows, Mono, MonoTouch, PocketPC and Windows Phone 7. Also works just fine on MonoDroid. Simple API for Register, Resolve, CanResolve and TryResolve. Supports constructor injection and property injection. Constructors are selected automatically but can be overridden using a ""fluent"" API. Lifetime management - including singletons, multi-instance and ASP.Net per-request singletons. Automatic lazy factories - a Func dependency will automatically create a factory. RegisterMultiple/ResolveAll/IEnumerable support - multiple implementations of an interface can be registered and resolved to an IEnumerable using ResolveAll, or taking a dependency on IEnumerable. Child containers - lifetime can be managed using child containers, with automatic ""bubbling"" of resolving to parent containers where required. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/grumpydev/TinyIoC"	"Single-file, easy and cross-platform IoC container"	"true"
"IoC"	"Simple Injector"	"https://github.com/simpleinjector/SimpleInjector"	"Simple Injector is an easy-to-use Dependency Injection (DI) library for.NET 4+ that supports Silverlight 4+, Windows Phone 8, Windows 8 including Universal apps and Mono."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"265"	"41"	"43"	"GitHub - simpleinjector/SimpleInjector Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 41 Star 265 Fork 43 simpleinjector/SimpleInjector Code Issues 24 Pull requests 0 Pulse Graphs No description or website provided. 1,323 commits 5 branches 12 releases 3 contributors C# 98.8% Other 1.2% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature-226 master v2.5.x v3.0.x v3.1.x Nothing to show v3.2 v3.1.4 v3.1.3 v3.1.2 v3.1.1 v3.1 v3.0.7 v3.0.6 v3.0.5 v3.0.4 v3.0.3 v3.0 Nothing to show New pull request Latest commit 5e395d8 Jul 14, 2016 dotnetjunkie Added msbuild for Integration.Web.Mvc project. Permalink Failed to load latest commit information. src Revert ""Removed nuget restore from appveyor.yml"" Jul 14, 2016 .gitattributes Added gitaatributes for proper line endings May 1, 2016 README.md Update README.md Jul 14, 2016 Simple Injector Contributor License Agreement.docx Updated CLA. Apr 9, 2016 Simple Injector Contributor License Agreement.pdf Updated CLA. Apr 9, 2016 appveyor.bat Added msbuild for Integration.Web.Mvc project. Jul 14, 2016 appveyor.yml Updated appfayor to OpenCover 4.6.519 Jul 14, 2016 licence.txt Added CLA file. Dec 13, 2015 README.md Simple Injector To get a high level overview of Simple Injector, please visit our website. And did you know there's a Simple Injector blog? The goal of Simple Injector is to provide .NET application developers with an easy, flexible, and fast Dependency Injection library that promotes best practice to steer developers towards the pit of success. Many of the existing DI libraries have a big complicated legacy API or are new, immature, and lack features often required by large scale development projects. Simple Injector fills this gap by supplying a simple implementation with a carefully selected and complete set of features. File and attribute based configuration methods have been abandoned (they invariably result in brittle and maintenance heavy applications), favoring simple code based configuration instead. This is enough for most applications, requiring only that the configuration be performed at the start of the program. The core library contains many features for all your advanced needs. The following platforms are supported: .NET 4.0 and up. Silverlight 4 and up. Windows Phone 8. Windows Store Apps. Mono. .NET Core. Simple Injector is carefully designed to run in partial / medium trust, and it is fast; blazingly fast. Getting started The easiest way to get started is by installing the available NuGet packages and if you're not a NuGet fan then follow these steps: Download the latest runtime library from: https://simpleinjector.org/download; Unpack the downloaded .zip file; Add the SimpleInjector.dll to your start-up project by right-clicking on a project in the Visual Studio solution explorer and selecting 'Add Reference...'. Add the using SimpleInjector; directive on the top of the code file where you wish to configure the application. Look at the Using section in the documentation for how to configure and use Simple Injector. Look at the More Information section to learn more or if you have any questions. A Quick Example Dependency Injection The general idea behind Simple Injector (or any DI library for that matter) is that you design your application around loosely coupled components using the dependency injection pattern while adhering to the Dependency Inversion Principle. Take for instance the following UserController class in the context of an ASP.NET MVC application: Note: Simple Injector works for many different technologies and not just MVC. Please see the integration for help using Simple Injector with your technology of choice. public class UserController : Controller {     private readonly IUserRepository repository;     private readonly ILogger logger;      // Use constructor injection for the dependencies     public UserController(IUserRepository repository, ILogger logger) {         this.repository = repository;         this.logger = logger;     }      // implement UserController methods here:     public ActionResult Index() {         this.logger.Log(""Index called"");         return View(this.repository.GetAll());     } }  public class SqlUserRepository : IUserRepository {     private readonly ILogger logger;      // Use constructor injection for the dependencies     public SqlUserRepository(ILogger logger) {         this.logger = logger;     }      public User GetById(Guid id) {         this.logger.Log(""Getting User "" + id);         // retrieve from db.     } } The UserController class depends on the IUserRepository and ILogger interfaces. By not depending on concrete implementations, we can test UserController in isolation. But ease of testing is only one of a number of things that Dependency Injection gives us. It also enables us, for example, to design highly flexible systems that can be completely composed in one specific location (often the startup path) of the application. Introducing Simple Injector Using Simple Injector, the configuration of the application using the UserController and SqlUserRepository classes shown above, might look something like this: protected void Application_Start(object sender, EventArgs e) {     // 1. Create a new Simple Injector container     var container = new Container();      // 2. Configure the container (register)     container.Register<IUserRepository, SqlUserRepository>(Lifestyle.Transient);      container.Register<ILogger, MailLogger>(Lifestyle.Singleton);      // 3. Optionally verify the container's configuration.     container.Verify();      // 4. Register the container as MVC3 IDependencyResolver.     DependencyResolver.SetResolver(new SimpleInjectorDependencyResolver(container)); } Tip: If you start with a MVC application, use the NuGet Simple Injector MVC Integration Quick Start package. The given configuration registers implementations for the IUserRepository and ILogger interfaces. The code snippet shows a few interesting things. First of all, you can map concrete instances (such as SqlUserRepository) to an interface or base type. In the given example, every time you ask the container for an IUserRepository, it will always create a new SqlUserRepository on your behalf (in DI terminology: an object with a Transient lifestyle). The seconds registration maps the ILogger interface to a MailLogger implementation. This MailLogger is registered with the Singleton lifestyle; only one instance of MailLogger will ever be created by the Container. Note: We did not register the UserController, because the UserController is a concrete type, Simple Injector can implicitly create it (as long as its dependencies can be resolved). Using this configuration, when a UserController is requested, the following object graph is constructed: new UserController(     new SqlUserRepository(         logger),     logger); Note that object graphs can become very deep. What you can see is that not only UserController contains dependencies, so does SqlUserRepository. In this case SqlUserRepository itself contains an ILogger dependency itself. Simple Injector will not only resolve the dependencies of UserController but will instead build a whole tree structure of any level deep for you. And this is all it takes to start using Simple Injector. Design your classes around the SOLID principles and the dependency injection pattern (which is actually the hard part) and configure them during application initialization. Some frameworks (such as ASP.NET MVC) will do the rest for you, other frameworks (like ASP.NET Web Forms) will need a little bit more work. See the integration guide for examples of many common frameworks. Please go to the using section in the documentation to see more examples. More information For more information about Simple Injector please visit the following links: using will guide you through the Simple Injector basics. The lifetimes page explains how to configure lifestyles such as transient, singleton, and many others. See the Reference library for the complete API documentation of the latest version. See the integration guide for more information about how to integrate Simple Injector into your specific application framework. For more information about dependency injection in general, please visit this page on Stackoverflow. If you have any questions about how to use Simple Injector or about dependency injection in general, the experts at Stackoverflow.com are waiting for you. For all other Simple Injector related question and discussions, such as bug reports and feature requests, the Simple Injector discussion forum will be the place to start. Happy injecting! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/simpleinjector/SimpleInjector"	"Simple Injector is an easy-to-use Dependency Injection (DI) library for.NET 4+ that supports Silverlight 4+, Windows Phone 8, Windows 8 including Universal apps and Mono."	"true"
"Logging"	"Essential Diagnostics"	"http://essentialdiagnostics.codeplex.com/"	"Extends the inbuilt features of System.Diagnostics namespace to provide flexible logging"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Essential Diagnostics - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In Essential Diagnostics home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe Using and extending System.Diagnostics trace logging Download | FAQ | Examples | Guidance | Listeners | Filters | Extensions   Essential.Diagnostics contains additional trace listeners, filters and utility classes for the .NET Framework System.Diagnostics trace logging. Included are colored console (that allows custom formats), SQL database (including a tool to create tables), formatted rolling file trace listener, rolling XML trace listener and in-memory trace listeners, simple property and expression filters, activity and logical operation scopes, and configuration file monitoring. Download The preferred method to integrate Essential.Diagnostics with your project is via the Essential.Diagnostics Configuration NuGet package, which contains sample config file sections plus includes the binaries needed to use the extensions (the binary files are also in the Binaries only download on CodePlex). For the example project, which runs using Visual Web Developer 2010 Express, download the Essential.Diagnostics Complete package from CodePlex. The examples project contains a reference to the NuGet package. Background The .NET Framework System.Diagnostics provides powerful, flexible, high performance logging for applications -- and the core capabilities are already built into the .NET Framework! This project uses the inbuilt features of the System.Diagnostics namespace, and shows how logging and tracing can be integrated into a client application by taking advantage of existing .NET Framework features. This project also provides a library that enhances System.Diagnostics through it's numerous built-in extension points, but shouldn't require any changes to existing code (that uses the .NET Framework logging) to use some or all of the features. Extension features provided by this project are marked -- other features are already provided by the .NET Framework you are using right now. To see how you can use System.Diagnostics and the Essential.Diagnostics extensions see Getting Started and the Logging Primer. Features The .NET Framework System.Diagnostics, along with the extensions here, provides the following key features, or see a comparison with other logging frameworks. Multiple logging sources. Output to multiple trace listeners with different filtering. Logical operation context and activity correlation. Multiple levels of event types including activity tracing. Integration with existing .NET Framework tracing (such as WCF). Proven architecture. Flexible and extensible design. High performance. No change required to existing .NET Framework trace statements. The Framework and extensions can be used to write information to any of the following Listeners: A text file The command console or colored console The event log ASP.NET tracing An XML file (viewable using the Service Trace Viewer) Event Tracing for Windows (Vista ETW) A database Log information can be custom formatted and include context information such as: Event id, type, and message Source - allows you to partition your logs Event time and date Thread id, process id and call stack Logical operation stack, activity id, and correlation Machine name, user name and Windows Identity About Last edited Apr 18, 2013 at 8:07 AM by sgryphon, version 20 download Opera does not support ClickOnce X To install this application, save it and then open it. Opening it directly from Opera will not work correctly. current Release 1.2.501 date Wed May 1, 2013 at 7:00 AM status Stable downloads 2,005 rating       0 ratings Review this release activity downloads 4 Days: 7 7 30 30 All All Details related projects UdpPocketTrace Ukadc.Diagnostics Azure Trace Listener © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"Extends the inbuilt features of System.Diagnostics namespace to provide flexible logging"	"true"
"Logging"	"NLog"	"https://github.com/nlog/NLog/"	"NLog - Advanced.NET and Silverlight Logging"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1750"	"229"	"622"	"GitHub - NLog/NLog: NLog - Advanced .NET, Silverlight and Xamarin Logging Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 229 Star 1,750 Fork 622 NLog/NLog Code Issues 172 Pull requests 11 Wiki Pulse Graphs NLog - Advanced .NET, Silverlight and Xamarin Logging http://nlog-project.org 3,788 commits 49 branches 42 releases 97 contributors C# 99.8% Other 0.2% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1006-mono4 1029-Writing-to-the-same-file-from-multiple-processes 1038-Performance-problem-when-thread-number-is-big 1070-FindCallingMethodOnStackTrace-v2 1071-test-program-diag-tryouts Overhaul-contexts ReloadTests-mono TypeInitializationException-tester UWP autoload-ext-from-current-dir callsite-filter-namespacce coreCLR-json coreCLR-test3 coreCLR+test coreCLR coreclr-artifacts+codecov coreclr-artifacts example extra-test-fluent-ex-only feature/inject-possible-filepaths fix-android-errors fix-mono-reload-tests fix-xamarin-warning generate-markdown-docs ilogger2 interpolated-string-support interpolated-string-support2 list-from-comma-separated-string master mmono4-LogFactoryTests.cs new-restore nlog-config-dnx pr-1194 pr-1222-mono pr-1370 pr-1400 pr-1419 pr/915 test this.getLogger uwp-appveyor working-dir-xml-config-candidate xamarin-appveyor-new xamarin4 xml-layout xunit2-backup xunit2 xunit2.1-tryout xunit2.1 Nothing to show v4.3.5 v4.3.4 v4.3.3 v4.3.2 v4.3.1 v4.3.0 v4.3.0-rc3 v4.3.0-rc2 v4.3.0-rc1 v4.3.0-beta2 v3.2.1 v3.2.0.0 v3.1.0 v3.0 v2.0.1 NLog-2.0-RC NLog-1.0 NLog-1.0-Refresh NLog-1.0-RC1 NLog-0.9 Build-2.0.0.2007 Build-2.0.0.2006 Build-2.0.0.2005 Build-2.0.0.2004 Build-2.0.0.2003 Build-2.0.0.2002 Build-2.0.0.2001 Build-2.0.0.2000 Build-2.0.0.1928 4.3.0-beta1 4.2.3 4.2.2 4.2.1 4.2.1-RC1 4.2.0 4.1.2 4.1.1 4.1.0 4.0.1 4.0.0 4.0-RC 2.1.0 Nothing to show New pull request Latest commit 72bfc70 Jul 3, 2016 304NotModified committed on GitHub Merge pull request #1520 from NLog/extra-test-fluent-ex-only … Added extra test after bug report Permalink Failed to load latest commit information. examples Update sample EventLogTarget to include OnOverflow options. Nov 14, 2015 external Fix WP7 test references Oct 28, 2013 src Support for Android 4.4 (was 5.0) Jul 2, 2016 tests Merge pull request #1520 from NLog/extra-test-fluent-ex-only Jul 3, 2016 tools Update license Apr 9, 2016 .editorconfig Add .editorconfig Jan 5, 2015 .gitattributes Specified in .gitattributes which files should be considered as text … Feb 14, 2015 .gitignore Ignore .vs folder May 31, 2016 .travis.yml Revert ""Test - run Travis in Debug mode"" Mar 13, 2016 CHANGELOG.md Update changelog Jun 13, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Feb 14, 2016 ISSUE_TEMPLATE.md Update ISSUE_TEMPLATE.md Mar 5, 2016 LICENSE.txt Update license Apr 9, 2016 Makefile Update license Apr 9, 2016 README-developers.md move sections Jan 13, 2016 README.md Update README.md Jun 27, 2016 appveyor.yml Remove test dependency on existing machine users Apr 24, 2016 codecov.yml Create codecov.yml (#1433) May 31, 2016 issue-labeling.md Merge master Apr 24, 2015 README.md Vote or submit ideas on UserEcho! NLog is a free logging platform for .NET with rich log routing and management capabilities. It makes it easy to produce and manage high-quality logs for your application regardless of its size or complexity. It can process diagnostic messages emitted from any .NET language, augment them with contextual information, format them according to your preference and send them to one or more targets such as file or database. For more information, see the website nlog-project.org or just get started with the tutorials on the NLog wiki. Project news - including RSS feed Packages & Status NLog consists of multiple packages. Most of the functionality is inside the NLog (core) package. What's inside the packages? See targets and layout renderers overview! Package Build status NuGet NLog (.Net / Silverlight 4+5 / Xamarin iOS / Xamarin Android / Windows Phone 8) NLog (.NET Core) - coreCLR branch NLog (Microsoft Logging Platform) NLog (Mono) NLog.Config NLog.Contrib.ActiveMQ NLog.Extended NLog.Elmah NLog.Etw NLog.InstallNLogConfig NLog.ManualFlush NLog.Schema NLog.Web NLog.Web for ASP.NET Core NLog.Windows.Forms NLog.Owin.Logging Questions, bug reports or feature requests? Do you have feature requests, questions or would you like to report a bug? Please post them on the issue list and follow these guidelines. Please also post or vote features requests on UserEcho. Frequently Asked Questions (FAQ) What is NLog? NLog is a free and open source library which helps to write log messages. Why should I use a log libary? I can just do file.WriteLine() Beside writing to files, you can write to many different targets, like databases, event viewer, trace etc. The output is templatable with many predefined template values. With a simple configuration file you can decide runtime (after deployment), what to log and where! No need to restart the program or recyle the app pool! Why should I use NLog? NLog is fully written in C#, has many years of experience and is easy to extend! Is it free? It's licensed under the BSD license, so you can use it in commercial (closed sourse) programs without problems. Show me the magic! Check the tutorial to get started! I can't see anything?! NLog not working as expected? Check the troubleshooting guide. If you think it's a bug, please check contributing.md and create a GitHub issue! I'm missing important stuff! You can send a feature request, but do you know you can extend NLog with a few lines of code? How do I upgrade to NLog 4.x? Check the 4.0 release post, there are some breaking changes. Update all the NLog packages. The latest stable version is recommend. When upgrading from NLog 4.1.0, please the next question. I have trouble updating NLog from 4.1.0 We take semver very serious! Because NLog is strong named, it's important to keep the assembly version of all major versions the same, otherwise every library build on 4.0.0 should be reompiled for every other 4.x release (4.1, 4.2 etc) - which is unwanted because of semver. In NLog 4.1.0 there was a mistake in the assembly version, which has been fixed in 4.1.1. Upgrading from NLog 4.1.0 to another version can give issues when using NuGet. This will result in the following error: Could not load file or assembly 'NLog' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040) If you upgrade, remove or alter the <assemblybinding>, as explained at the 4.1.1 news post. Should I use Common Logging? That's up to you. It has it pros and cons. The greatest advantage is that you can easily switch between logging implementations (NLog, Log4Net, EntLib). This can be very important if you’re writing a library yourself, then the user who's using your library can choose which implementation to use. There are some downsides: You are limited in some features, or some features aren't available at all (like context classes or event properties) The performance is a bit lower. The platform support is lower. For example, there is no Xamarin support or a specialized .Net 4.5 build The progress is limited by NLog and Common logging. Which Common Logging version should I use? As you may have noticed the latest version of Common Logging doesn't match the latest version of NLog - the latest Common Logging is build to NLog 4.1. But that is not a problem! Since NLog 4.0 the assembly version is fixed to 4.0.0.0 and because follow semver, you can use the latest version of NLog with Common.Logging.NLog41. I'm writing a library who's using NLog. Should I update when NLog has an update? If you don't use the latest additions, then you should only update every NLog major version. As mentioned at the Common Logging version, we will keep the assembly version fixed. The end-user don't need <assemblybinding>-magic! So in short: your library should target NLog 4.0 and in the future NLog 5.0. Contributing As the current NLog team is a small team, we cannot fix every bug or implement every feature on our own. So contributions are really appreciated! If you like to start with a small task, then up-for-grabs are nice to start with. A good way to get started (flow) Fork the NLog repos. Create a new branch in you current repos from the 'master' branch. 'Check out' the code with Git or GitHub Desktop Check contributing.md push commits and create a Pull Request (PR) to NLog License NLog is open source software, licensed under the terms of BSD license. See LICENSE.txt for details. How to build Use Visual studio 2012/2013/2015 and open solution file in the 'src' folder, like 'NLog.netfx45.sln' For building in the cloud we use: AppVeyor for Windows builds, including Silverlight and Xamarin. Travis for Mono builds. CodeCov for code coverage How to build your fork in the cloud Steps to set up AppVeyor/Travis/CodeCov for your own fork. AppVeyor: Login with your Github account to https://ci.appveyor.com Choose ""projects"" Select your fork and press ""+"" button Done. All config is in appveyor.yml already Travis: Login with your Github account to https://travis-ci.org/ Select your fork Push and wait CodeCov: (AppVeyor needed) Login with your Github account to https://codecov.io/ Press ""+ Add new repository to Codecov"" button Select your fork Wait for a build on AppVeyor. All the config is already in appveyor.yml. The first report can take some minutes after the first build. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nlog/NLog/"	"NLog - Advanced.NET and Silverlight Logging"	"true"
"Logging"	"Logazmic"	"https://github.com/ihtfw/Logazmic"	"Open source nlog viewer for Windows"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9"	"4"	"2"	"GitHub - ihtfw/Logazmic: Windows log viewer for log4j Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 9 Fork 2 ihtfw/Logazmic Code Issues 0 Pull requests 0 Pulse Graphs Windows log viewer for log4j 128 commits 2 branches 2 releases 2 contributors C# 98.7% PowerShell 1.3% C# PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags integration master Nothing to show 2015.12.12.6 2015.11.14.5 Nothing to show New pull request Latest commit 7cc7cc0 Dec 12, 2015 ihtfw Crashed on search if nothing was found Permalink Failed to load latest commit information. docs Updated screenshots Nov 13, 2015 nuget again Nov 13, 2015 squirrel Setup appveyor deployment Nov 11, 2015 src Crashed on search if nothing was found Dec 12, 2015 .gitattributes Initial commit Jul 2, 2014 .gitignore again Nov 13, 2015 License.txt Update License.txt Jul 26, 2015 README.md Link to nupkg Nov 13, 2015 appveyor.yml Fixed hack. Nov 14, 2015 integration_appveyor.yml Fixed hack. Nov 14, 2015 README.md Logazmic Minimalistic log viewer for nlog. Supports only log4j xml layout yet. Core is based on Log2console. UI is rewritten in WPF with usage of MahApps.Metro Supports: Listening on tcp/udp Opening *.log4j files Drag-and-drop files Download https://github.com/ihtfw/Logazmic/releases/latest/ Screenshots: Setup NLog (http://nlog-project.org/): Xml configuration <?xml version=""1.0"" encoding=""utf-8"" ?> <nlog xmlns=""http://www.nlog-project.org/schemas/NLog.xsd""       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">     <targets>         <target name=""logfile""  layout=""${log4jxmlevent}""  xsi:type=""File"" fileName=""file.txt"" />     </targets>      <rules>         <logger name=""*"" minlevel=""Info"" writeTo=""logfile"" />     </rules> </nlog> Code configuration var config = new LoggingConfiguration();   #region file var ftXml = new FileTarget                         {                             FileName = XmlLogPath,                             Layout = "" ${log4jxmlevent}"",                             Encoding = Encoding.UTF8,                             ArchiveEvery = FileArchivePeriod.Day,                             ArchiveNumbering = ArchiveNumberingMode.Rolling                         };  var asXml = new AsyncTargetWrapper(ftXml); var ruleXml = new LoggingRule(""*"", LogLevel.Trace, asXml); config.LoggingRules.Add(ruleXml); #endregion  #region tcp var tcpNetworkTarget = new NLogViewerTarget                                    {                                        Address = ""tcp4://127.0.0.1:4505"",                                        Encoding = Encoding.UTF8,                                        Name = ""NLogViewer"",                                        IncludeNLogData = false                                    }; var tcpNetworkRule = new LoggingRule(""*"", LogLevel.Trace, tcpNetworkTarget); config.LoggingRules.Add(tcpNetworkRule); #endregion  LogManager.Configuration = config; Logazmic.Integration Install nuget package Logazmic.Integration. In your code to install, run and open log file  var runner = new Logazmic.Integration.Runner();  runner.Run(pathToLogFile); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ihtfw/Logazmic"	"Open source nlog viewer for Windows"	"true"
"Logging"	"ELMAH"	"https://elmah.github.io/"	"Official ELMAH site"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ELMAH—Home Home Download Sources Help View on GitHub ELMAH Home Download Sources Help View on GitHub  Improve this page Home ELMAH (Error Logging Modules and Handlers) is an application-wide error logging facility that is completely pluggable. It can be dynamically added to a running ASP.NET web application, or even all ASP.NET web applications on a machine, without any need for re-compilation or re-deployment. Once ELMAH has been dropped into a running web application and configured appropriately, you get the following facilities without changing a single line of your code: Logging of nearly all unhandled exceptions. A web page to remotely view the entire log of recoded exceptions. A web page to remotely view the full details of any one logged exception, including colored stack traces. In many cases, you can review the original yellow screen of death that ASP.NET generated for a given exception, even with customErrors mode turned off. An e-mail notification of each error at the time it occurs. An RSS feed of the last 15 errors from the log. ELMAH 1.2 Service Pack (SP) 2 now available See also: What’s new and fixed in 1.2 What’s fixed in 1.2 SP1 What’s fixed in 1.2 SP2 More Features Log errors to several back-end storages: Microsoft SQL Server Oracle (OracleErrorLog) SQLite (version 3) database file Microsoft Access (AccessErrorLog) VistaDB (VistaDBErrorLog); deprecated in release 1.2 Loose XML files RAM (in-memory) SQL Server Compact Edition MySQL PostgreSQL Supports ASP.NET 1.x, 2.0 and later versions. Supports medium trust under ASP.NET 2.0 and later versions. Filter unwanted exceptions, programmatically and via configuration. Get a digest RSS feed that lists errors by day and up to last 15 days. Programmatically and explicitly signal exceptions that, although handled in some way, should still be logged. Download the whole error log into a single CSV file for analysis, filtering and charting using Microsoft Excel or Microsoft Log Parser. Send error notifications/tweets to your iPhone, iPad or a custom application. Access the raw XML behind any logged error from its details page, making it easier to get to information (like form data, including View State) that, until now, had to be grabbed directly out of the error log’s backing store. Supports ASP.NET web application root operator (~) in paths for file-based error log implementations. Check if any ELMAH installation is up to date through its about page. Run a self-contained demo Web site showing error logging and mailing in action right out of the box. Run demo.cmd in the root of the distribution. Use MsAjaxDeltaErrorLogModule to log errors during partial updates enabled by UpdatePanel in Microsoft ASP.NET AJAX Use ErrorLogDataSourceAdapter together with ObjectDataSource from ASP.NET to create your own custom views of the error log, almost purely in server-side markup and without a line of code! Get error data in JSON (in addition to XML) from the detail page of an error. Supports the |DataDirectory| macro to avoid absolute paths in connection strings. Use JavaScript to express complex conditions for filtering exceptions in a more concise and familiar manner. See sample web.config for examples. Compiled for .NET 1.x and 2.0; run on .NET 1.x, 2.0. 3.x and 4.0. Sources include solution files for Visual Studio 2002, 2003 and 2010. And, of course, lots of fixes from field testing. Yep, that’s a feature too! ELMAH in Action Following is a screenshot of Firefox displaying the error log page as provided by ELMAH: To learn more about ELMAH, see the MSDN article “Using HTTP Modules and Handlers to Create Pluggable ASP.NET Components” by Scott Mitchell and Atif Aziz. © 2004 Atif Aziz under the terms of the ALv2. Portions © 2008 Tom Preston-Werner under MIT License. Published: 2016-03-16 21:44 CET"	"null"	"null"	"Official ELMAH site"	"true"
"Logging"	"Elmah MVC"	"https://github.com/alexbeletsky/elmah-mvc"	"Elmah for MVC"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"223"	"25"	"59"	"GitHub - alexbeletsky/elmah-mvc: Painless integration of ELMAH into ASP.NET MVC application Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 223 Fork 59 alexbeletsky/elmah-mvc Code Issues 27 Pull requests 3 Wiki Pulse Graphs Painless integration of ELMAH into ASP.NET MVC application http://nuget.org/packages/Elmah.MVC 135 commits 1 branch 1 release 14 contributors C# 99.2% Batchfile 0.8% C# Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2.1.2 Nothing to show New pull request Latest commit 274cd74 Jul 2, 2015 issafram Merge pull request #68 from vkairys/master … fix broken link in README Permalink Failed to load latest commit information. db Added elmah schema database script, to have all stuff in place Dec 11, 2011 src Add unit test ElmahResult_ExecuteResult_ResourceNull May 13, 2015 .gitignore made dependency on elmah.corelibrary + corrected package description Jun 13, 2012 COPYING.txt copyright information updated Jun 16, 2012 README.md fix broken link in README Jul 2, 2015 pack.cmd Simplify to just pack.cmd Apr 27, 2015 README.md ELMAH.MVC For painless integration of ELMAH into ASP.NET MVC application. What's changed in 2.0 version? For details, please follow that blog post - ELMAH.MVC v.2.0 - Release Candidate What's the goal? With ELMAH.MVC you got nice and clear MVC style routing to ELMAH error page. ELMAH can be accessed by: http://yourapp.com/elmah  By doing that, you can apply any authorization strategies or routes. In short, no more http://yourapp.com/elmah.axd  That could be used for ASP.NET session hijacking with Google and ELMAH. How to use in my application? Easy. Install ELMAH by NuGet, in package console Install-Package Elmah.MVC  For further ELMAH configuration please check the documentation. Should I use HandleErrorAttribute? If you tried to use ELMAH in ASP.NET MVC, you are probably implemented your own HandleErrorAttribute, as it's shown in this example. You no longer need to apply this custom code with Elmah.MVC. As soon you installed package, so can safely remove your HandleError attribute, since it's already included into package. Will exceptions being logged in ""customError='On'"" mode? Yes, even in you configured application to use custom error pages, the exception will be logged. How can I configure Elmah.MVC? There is a simple configuration section in web.config file. <appSettings>     <add key=""elmah.mvc.disableHandler"" value=""false"" />     <add key=""elmah.mvc.disableHandleErrorFilter"" value=""false"" />     <add key=""elmah.mvc.requiresAuthentication"" value=""false"" />     <add key=""elmah.mvc.IgnoreDefaultRoute"" value=""false"" />     <add key=""elmah.mvc.allowedRoles"" value=""*"" />     <add key=""elmah.mvc.allowedUsers"" value=""*"" />     <add key=""elmah.mvc.route"" value=""elmah"" />     <add key=""elmah.mvc.UserAuthCaseSensitive"" value=""true"" /> </appSettings>  elmah.mvc.disableHandler - turn on/off ELMAH.MVC handler elmah.mvc.disableHandleErrorFilter - by default HandleErrorAttribute() is set as global filter, to disable it, set value to ""true"" elmah.mvc.requiresAuthentication - secure /elmah route with authentication elmah.mvc.allowedRoles - in case of authentication is turned on, you can specify exact roles of user that have access (eg. ""Admins"") elmah.mvc.allowedUsers - in case of authentication is turned on, you can specify exact users that have access (eg. ""johndoe"") elmah.mvc.route - configure ELMAH.MVC access route You can either disable handler or apply authentication, based on application roles. You can also tweek the ELMAH default route. If you just install the package, ELMAH will be availabled at /elmah, howether if you would like to change that, change elmah.mvc.route, this setting is a MVC route prefix, used during ELMAH routes registration. For instance, if you change that to secure/admin/errors you will get ELMAH at http://yourapp.com/secure/admin/errors. Default route issue You might change the elmah.mvc.route to a custom one, but still able to see ELMAH reports at /elmah. This issue is caused by the way how ASP.NET MVC matches controllers in separate namespaces. There are no good workaround for that (at least one I know), so if I makes a trouble to you, I recommend to reconsider the application, without using default route. UPDATE: You might also consider ignoring /elmah route explicitly as described here. UPDATE 2: @chaoaretasty has added an option, to allow ignoring default role. Set elmah.mvc.IgnoreDefaultRoute setting option to true. Related articles and posts ELMAH.MVC 2.0.1 Update is Out ELMAH.MVC v.2.0.0 - Release Candidate ELMAH.MVC v2.0 is coming Slides of ELMAH.MVC talk ELMAH MVC controller released on NuGet Integrating ELMAH to ASP.NET MVC in right way Recent changes 30-Apr-2015 - v.2.1.2 Added UserAuthCaseSensitive setting by @issafram. IgnoreDefaultRoute now works for subfolders by @DavidDeSloovere. 09-Jul-2013 - v.2.1.1 fixes by @papci 01-Jul-2013 - v.2.1.0 user based authentication by @papci 02-Jun-2013 - v.2.0.3 ignoring default role by @chaoaretasty 06-Nov-2012 - v.2.0.2 flag to turn on/off default HandleErrorAttribute() 16-Aug-2012 - v.2.0.1 custom routes, VB.NET support 13-Jun-2012 - v.2.0 major changes, packed to class library, HandleError attribute etc. 11-Jan-2012 - minor style changes and readme correction 29-Aug-2011 - nuget package created 29-Aug-2011 - reimplemented controller to avoid usage of additional routing instructions Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/alexbeletsky/elmah-mvc"	"Elmah for MVC"	"true"
"Logging"	"Logary"	"http://logary.github.io/"	"Logary is a high performance, multi-target logging, metric, tracing and health-check library for mono and.Net..Net's answer to DropWizard. Supports many targets, built for micro-services."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Logary - Logging for .NET Toggle navigation Logary Home API Targets Overview TextWriter Console Debugger File Logstash Graphite ElmahIO Logentries Loggr Riemann DB Nimrod Dash Zipkin Adapters Overview EventStore Suave Topshelf log4net Advanced Overview v2.0-refactor Reservoirs Writing a Target Writing a Metric Thinking About Time Contributing About Previous Next GitHub Logary Why? Release Notes License Logary Logary is a high performance, multi-target logging, metric, tracing and health-check library for mono and .Net. Follow Logary at twitter: @logarylib Chat and support and get support: If you like the code, buy me a beer! Logary v4.0 aims to be compatible with the latest Mono and .Net 4.0. It is compiled with open source F# 4.0. Logary is continously built on CentOS. Install-Package Logary  Why? Logary is the next generation logging framework. It observes some facts that it successfully builds its conceptual model from! It's written using functional programming in F# with only a single field 'global state' to facilitate logging with initialise-once static readonly fields. It never throws runtime exceptions if the configuration validates and never blocks the call-site. What now? Have a look at the overview of the targets, to get an idea about what you can log to! You can read up on the thinking behind logary. You can also watch a presentation in Swedish about how business should log semantically and not just dump it all into a text file! Release Notes v4.0 Still Alpha... v3.0 Improved naming; 'Logary.Suave' -> 'Logary.Adapters.Suave' -- makes it easier to find what you're after now that we have many adapters and targets. Moved some adapter types around (see Obsoletes) and made all adapters have the same naming standard. v2.6 Fixed a filtering bug that meant you'd get more logs sent to your Targets than you wanted. v2.1 FSharp.Core.3 -> FSharp.Core Bumped all nuget versions to latest v2.0.2 Support CommonLogging fully New Logary.Adapters.EventStore New function LogLine.createf License Apache 2.0"	"null"	"null"	"Logary is a high performance, multi-target logging, metric, tracing and health-check library for mono and.Net..Net's answer to DropWizard. Supports many targets, built for micro-services."	"true"
"Logging"	"Log4Net"	"https://logging.apache.org/log4net/"	"The Apache log4net library is a tool to help the programmer output log statements to a variety of output targets"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache log4net – Apache log4net: Home Last Published: 2015-12-05  | Version: 1.2.15 | Apache > Logging Services > log4net > Apache log4net – Apache log4net: Home Apache log4net About Download Release Notes License Documentation Features Supported Frameworks Example Apps Config Examples Building FAQ How Tos SDK Reference Manual Introduction Configuration Contexts Plugins Repositories Internals Community Mailing Lists Issue Tracking Development Repository Continuous Integration Project Documentation Project Information Project Reports Apache Home License Sponsorship Thanks Security Conferences What is Apache log4net™ The Apache log4net library is a tool to help the programmer output log statements to a variety of output targets. log4net is a port of the excellent Apache log4j™ framework to the Microsoft® .NET runtime. We have kept the framework similar in spirit to the original log4j while taking advantage of new features in the .NET runtime. For more information on log4net see the features document. The Apache log4net project log4net is part of the Apache Logging Services project at the Apache Software Foundation. The Logging Services project is intended to provide cross-language logging services for purposes of application debugging and auditing. Copyright © 2004-2015 Apache Software Foundation. Licensed under the Apache Software License, Version 2.0. Apache log4net, Apache, log4net, the Apache feather logo, the Apache Logging Services project logo and the Built by Maven logo are trademarks of The Apache Software Foundation."	"null"	"null"	"The Apache log4net library is a tool to help the programmer output log statements to a variety of output targets"	"true"
"Logging"	"Serilog"	"https://github.com/serilog/serilog"	"A no-nonsense logging library for the NoSQL era. Combines the best of traditional and structured diagnostic logging in an easy-to-use package."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"888"	"81"	"266"	"GitHub - serilog/serilog: Simple .NET logging with fully-structured events Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 81 Star 888 Fork 266 serilog/serilog Code Issues 12 Pull requests 1 Wiki Pulse Graphs Simple .NET logging with fully-structured events http://serilog.net 1,210 commits 5 branches 12 releases 73 contributors C# 99.6% Other 0.4% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags dev feature-auditing gh-pages master staging-2.0 Nothing to show v2.0.0 v1.5.14 v1.5.12 v1.5.11 v1.5.10 v1.5.9 v1.5.8 v1.5.7 v1.5.6 v1.5.5 v1.5.1 v1.4.214 Nothing to show New pull request Latest commit 1ad746e Jul 8, 2016 nblumhardt committed on GitHub Minor README formatting tweak [Skip CI] Permalink Failed to load latest commit information. assets Removed CommonAssemblyInfo, it's not used anymore Dec 2, 2015 src/Serilog Select configuration methods based on matched parameter count, not ju… Jul 6, 2016 test Select configuration methods based on matched parameter count, not ju… Jul 6, 2016 .editorconfig Some cleanup Jun 2, 2016 .gitattributes Added gitattributes to set CRLF to auto. Apr 8, 2013 .gitignore Initial RC2 perf tests for MinLevel and ForContext Jun 11, 2016 .travis.yml CLI preview2-003121 Jun 26, 2016 Build.ps1 Select configuration methods based on matched parameter count, not ju… Jul 6, 2016 CHANGES.md Added to 2.1 changelist [Skip CI] Jul 6, 2016 LICENSE GitHub Apache 2 licence template Oct 11, 2013 NuGet.config Some cleanup Jun 2, 2016 README.md Minor README formatting tweak [Skip CI] Jul 8, 2016 RunPerfTests.ps1 Moved to isolated perf test scripts Jun 15, 2016 Serilog.sln Include changelist in solution Jun 21, 2016 Serilog.sln.DotSettings `Serilog.Data` visitor type for dealing with `LogEventPropertyValue` … Jun 13, 2016 appveyor.yml Common build script, updated release tagging key. Jul 5, 2016 build.sh Moved to isolated perf test scripts Jun 14, 2016 global.json CLI preview2-003121 Jun 26, 2016 run_perf_tests.sh Moved to isolated perf test scripts Jun 14, 2016 README.md Serilog Serilog combines the best features of traditional and structured diagnostic logging in an easy-to-use package. 2.0 Upgrade Guide and Release Notes Homepage Documentation Would you like to help make Serilog even better? We keep a list of issues that are approachable for newcomers under the up-for-grabs label! Branch AppVeyor Travis dev master Copyright © 2013-2016 Serilog Contributors - Provided under the Apache License, Version 2.0. Needle and thread logo a derivative of work by Kenneth Appiah. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/serilog/serilog"	"A no-nonsense logging library for the NoSQL era. Combines the best of traditional and structured diagnostic logging in an easy-to-use package."	"true"
"Logging"	"StackExchange.Exceptional"	"https://github.com/NickCraver/StackExchange.Exceptional"	"Error handler used for the Stack Exchange network"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"424"	"39"	"94"	"GitHub - NickCraver/StackExchange.Exceptional: Error handler used for the Stack Exchange network Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 39 Star 424 Fork 94 NickCraver/StackExchange.Exceptional Code Issues 7 Pull requests 3 Wiki Pulse Graphs Error handler used for the Stack Exchange network 107 commits 2 branches 0 releases 11 contributors C# 93.2% CSS 6.3% Other 0.5% C# CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master v2 Nothing to show Nothing to show New pull request Latest commit 9ce9321 Apr 7, 2016 NickCraver Merge pull request #70 from johnboker/master … Change casing of 'exceptions' to 'Exceptions' Permalink Failed to load latest commit information. DbScripts Tidied MySQL script. Aug 1, 2014 Samples.Console Email (doh) and Procedure cleanup Jun 25, 2014 Samples.MVC4 C#6 Upgrade and cleanup & Dapper to NuGet May 26, 2015 StackExchange.Exceptional.MySQL Change casing of 'exceptions' to 'Exceptions' Mar 28, 2016 StackExchange.Exceptional Allow setting the DataIncludeRegex in code Oct 22, 2015 packages MySQL .nuspec and Dapper NuGet ref Aug 3, 2015 .gitattributes Initial Commit Aug 22, 2012 .gitignore VS 2015 compatibility May 2, 2015 LICENSE License change to Apache 2.0, nuspec update Aug 22, 2012 Readme.md Tidied MySQL script. Aug 1, 2014 StackExchange.Exceptional.sln VS 2015 compatibility May 2, 2015 StackExchange.Exceptional.sln.DotSettings Simplify the duplicate check to be based on GUID providers are alread… Oct 12, 2015 Readme.md StackExchange.Exceptional is the error handler used internally by Stack Exchange and Stack Overflow for logging to SQL (SQL Server and MySQL are both supported). It also supports JSON and memory error stores, filtering of exceptions before logging, and fail/retry mechanisms for storing errors if there's an interruption in connecting to the error store. See the wiki for how to get configured and logging in just a few minutes. While having some features centered around logging/showing exceptions from web applications, it can be used with either web or console applications. HttpContext is optional when logging exceptions. An example use of this at Stack Exchange is windows services logging to SQL and viewed elsewhere in a central dashboard (I'm working on open sourcing this as well). About: This project was inspired by ELMAH, but it didn't suit our particular needs for very, very high volume error logging when a network-level event occurs. Stack Exchange needed a handful things in an error handler/logger: High speed/capacity logging (on the order of 100,000/min) Handling the connection to a central error store being interrupted (without losing the errors) Add custom data to exceptions Rolling up of duplicate errors Given the above needs, StackExchange.Exceptional was created. It's as lightweight as possible to suit the needs of the network, but if there are compelling features I'll definitely look at adding them to the main repo here and NuGet soon. This project is licensed under the Apache 2.0 license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/NickCraver/StackExchange.Exceptional"	"Error handler used for the Stack Exchange network"	"true"
"Logging"	"Semantic Logging Application Block (SLAB)"	"http://slab.codeplex.com/"	"Extends the inbuilt features of System.Diagnostics.Tracing namespace (EventSource class) to log to several sinks including Azure Tables, Databases, files (JSON, XML, text). Supports in-process and out-of-process logging through ETW, and Rx for real-time filtering/aggregating of events."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Semantic Logging - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In Semantic Logging home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe We've moved to GitHub The new home for Semantic Logging is now GitHub. https://github.com/mspnp/semantic-logging Last edited Mar 30, 2015 at 8:42 PM by bennage, version 23 download Opera does not support ClickOnce X To install this application, save it and then open it. Opening it directly from Opera will not work correctly. current Semantic Logging Out-of-process Service 2.0.1406.1 date Mon Jul 7, 2014 at 7:00 AM status Stable downloads 1,660 rating       1 rating Review this release Most Helpful Reviews      Simple to configure and use in development. I did not use it in production yet since no app with semantic logging has been released ... (more) View all reviews activity downloads 6 Days: 7 7 30 30 All All Details © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"Extends the inbuilt features of System.Diagnostics.Tracing namespace (EventSource class) to log to several sinks including Azure Tables, Databases, files (JSON, XML, text). Supports in-process and out-of-process logging through ETW, and Rx for real-time filtering/aggregating of events."	"true"
"Machine Learning and Data Science"	"Infer.NET"	"http://research.microsoft.com/en-us/um/cambridge/projects/infernet/default.aspx"	"A framework for running Bayesian inference in graphical models. It can also be used for probabilistic programming."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Infer.NET Home Download Job openings Documentation User Guide Tutorials & Examples Learners API Documentation Resources & References Introduction Infer.NET 101 Case Studies Childhood Asthma Genetic Causes of Disease Papers using Infer.NET Extensions KJIT Support FAQ Forum Blog Contact Us Team Meet the Team MLP Group MSR Cambridge Infer.NET Infer.NET is a framework for running Bayesian inference in graphical models. It can also be used for probabilistic programming as shown in this video.  You can use Infer.NET to solve many different kinds of machine learning problems, from standard problems like classification, recommendation or clustering through to customised solutions to domain-specific problems. Infer.NET has been used in a wide variety of domains including information retrieval, bioinformatics, epidemiology, vision, and many others. Infer.NET 2.6 is now available [November 25, 2014]. See the release change history for details. Download Infer.NET Questions? Suggestions? Please use the forum to provide feedback and to share the ways in which you are using Infer.NET (or send e-mail to infersup@microsoft.com). Citing Infer.NET If you use Infer.NET as part of your research, please cite us as detailed in the FAQ. ©2009-2015 Microsoft Corporation. All rights reserved.  Terms of Use | Trademarks | Privacy Statement"	"null"	"null"	"A framework for running Bayesian inference in graphical models. It can also be used for probabilistic programming."	"true"
"Machine Learning and Data Science"	"Proprietary"	"http://research.microsoft.com/en-us/um/cambridge/projects/infernet/docs/Frequently%20Asked%20Questions.aspx"	"A framework for running Bayesian inference in graphical models. It can also be used for probabilistic programming."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Infer.NET Home Download Job openings Documentation User Guide Tutorials & Examples Learners API Documentation Resources & References Introduction Infer.NET 101 Case Studies Childhood Asthma Genetic Causes of Disease Papers using Infer.NET Extensions KJIT Support FAQ Forum Blog Contact Us Team Meet the Team MLP Group MSR Cambridge Infer.NET user guide Frequently Asked Questions Common questions and answers about the Infer.NET framework. General What is Infer.NET? Infer.NET is a framework for running Bayesian inference in graphical models.  If you don't know what that means, but would like to, take a look at the Resources and References page.  Infer.NET provides the state-of-the-art message-passing algorithms, graph algorithms, and linear algebra routines needed by modern machine learning applications (read more). Who is behind Infer.NET? Infer.NET is being developed in the Machine Learning and Perception group at Microsoft Research Cambridge. The framework was conceived and designed by Tom Minka and John Winn who remain technical leaders, principal researchers, and key developers on the project. Early contributors include John Guiver, Anitha Kannan, and David Knowles. The current team consists of Tom Minka, John Winn, John Guiver, Sam Webster, Yordan Zaykov, Boris Yangel, and John Bronskill. How do I cite Infer.NET? Please cite using the following text: T. Minka, J. Winn, J. Guiver, S. Webster, Y. Zaykov, B. Yangel, A. Spengler, and J. Bronskill Infer.NET 2.6, Microsoft Research Cambridge, 2014. http://research.microsoft.com/infernet or using the following BibTeX: @misc{InferNET14,  author = ""Minka, T. and Winn, J.M. and Guiver, J.P. and Webster, S. and Zaykov, Y. and Yangel, B. and Spengler, A. and  Bronskill, J."", title = {{Infer.NET 2.6}}, year = 2014, note = {Microsoft Research Cambridge. http://research.microsoft.com/infernet} } Do I have to use C#? No.  You can use Infer.NET from any .NET language such as C#, C++/CLI, F#, IronPython, and others.  Examples of using Infer.NET from several of these languages are included in the user guide. The code generated by Infer.NET is in C#, but it can be invoked from any .NET language. Can I use Infer.NET in a commercial application? At this time, commercial use of Infer.NET is limited to Microsoft. No other commercial licenses are available. Where can I learn about graphical models and Bayesian inference? We have a list of resources relevant to Infer.NET here. Running the examples I get a Security Exception when running the example solutions. This happens when the example solutions are on a network drive. The easiest solution is to copy the example folders to a local drive. Security exceptions can also be avoided by setting the compiler's GenerateInMemory flag to true as described in Inference engine settings (this is the default setting). Modelling What models can Infer.NET handle? Infer.NET can handle Bayesian networks and undirected models (Markov Random Fields) containing both discrete and continuous variables. What models can Infer.NET not handle? Non-parametric models, e.g. Dirichlet processes (except for Gaussian Processes which are supported). Inference What inference algorithms does Infer.NET support? Infer.NET supports expectation propagation (including belief propagation as a special case), variational message passing (also known as variational Bayes), max product (for discrete models), and block Gibbs sampling. How can I improve the speed/accuracy of inference with Infer.NET? Read the section on improving the speed and accuracy of inference. How can I change the inference schedule? At present, the only supported mechanism for changing the automatically generated inference schedule is to provide initial values for particular messages which will then indirectly affect the schedule.  If you have examples where the scheduler is giving a poor schedule, please let us know. It is also possible to change the schedule manually by editing the generated code to re-order the message computations. You can also affect the schedule by partitioning your model and using the concept of shared variables. The automatic schedule will run on each piece, but you have control over scheduling the submodels. Finally, you can bypass the Infer.NET schedule altogether and call directly into the operator message methods.   Does Infer.NET scale to large models/data sets? Infer.NET has been designed from the ground up to be computationally efficient.  The compiler architecture means that the generated inference code often approaches the efficiency of hand-written code.  Infer.NET also supports batch-processing of large datasets by sharing variables between models and you can implement customised message operators to overcome particular performance bottlenecks.  However, there will always be cases where hand-coded solutions can exploit special cases to improve efficiency.  If you have an example where Infer.NET generated code is significantly less efficient than hand-written code, please let us know. Note that the model compiler is not itself particularly efficient.  We have focused our efforts so far on making the generated code efficient, rather than the generation process itself.  Hence you should ensure that you are only invoking the compiler once or, at most, a small number of times (i.e. not inside a loop).  Methods for doing this are presented in the tutorials. Troubleshooting Inference is running very slowly This is normally caused by the inference compiler running inside a loop.  You can avoid recompilation using observed values as described in this tutorial.  If this does not help, try reading the section on improving the speed and accuracy of inference. Another common reason for slow inference is that you are hitting memory limits on your system. Refer to the earlier bullet on memory efficiency for strategies to deal with that. OutOfMemoryException during inference Infer.NET pre-allocates memory for all messages being passed during inference. This can be particularly severe when running models with large message types such as Dirichlet or Discrete messages, especially in cases where arrays of Discrete variables, each with a large value range, are used to switch on and off parts of a model - for example LDA models. All messages for all data instances for all values of the switch variable are stored, and the messages themselves are large, so such models quickly consume all available memory. To reduce memory consumption, see the section on how to build scalable applications. IndexOutOfRangeException during inference The most common cause of this is setting the ObservedValue of an array variable to an array of the wrong length.  If you attach names to your arrays and enable debugging of generated code, then the line in the generated code where the exception is raised will tell you which array is the wrong size. ImproperMessageException during inference To avoid this, depending on your model, use initialization (for an example of initialization, see the Mixture of Gaussians tutorial),  try changing priors or reorder the data. AllZeroException during inference A current limitation of Infer.NET is that this exception will be thrown if any branch in your model is impossible.  For example, if your model has an If statement that makes x equal to true in one case and false in the other, and you observe that x is false, then you will get an AllZeroException when the first branch is visited.  To workaround this, avoid using point masses in your model definition.  For example, the first branch can generate x from a Bernoulli(0.99999) distribution, which is effectively equivalent to true but avoids the exception. Inferred marginals are far from exact, even for a simple model All of the inference algorithms in Infer.NET will degrade if your model translates to a factor graph with a loop of strongly coupled variables, especially a deterministic loop.  If your model contains such a loop, try to rewrite it using some of the other factors available in Infer.NET.  See forum thread XOR Inference for an example.  A related issue is that Gibbs sampling requires a certain amount of stochasticity in the model, even without loops.  If the variables are too strongly coupled, then the sampler won't mix. Results are bad and I don't know why First determine if the problem is due to inference or modelling.  Generate a dataset by sampling from the model and see if you can recover the generating parameters, as done in the examples.  If you can recover them, then it is probably a modelling issue.  If not, check the following: Is there enough data? Does the model have a strong enough link between the parameters and the data for them to be recovered?  For example, is the noise level too high? Does the model have parameter symmetries, i.e. different settings of the parameters that produce the same data distribution?  See the Recommender System example. Has the inference algorithm converged?  You can determine this by running for different numbers of iterations. Try initializing the algorithm near the true values. If this helps, then the problem may have multiple solutions. Try a different inference algorithm. Try simplifying the model by observing some of the parameters to their true values. false,false,1 ©2009-2015 Microsoft Corporation. All rights reserved.  Terms of Use | Trademarks | Privacy Statement"	"null"	"null"	"A framework for running Bayesian inference in graphical models. It can also be used for probabilistic programming."	"true"
"Machine Learning and Data Science"	"Accord.NET"	"http://accord-framework.net/"	"Machine learning framework combined with audio and image processing libraries (computer vision, computer audition, signal processing and statistics)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1140"	"204"	"559"	"GitHub - accord-net/framework: Machine learning, computer vision, statistics and general scientific computing for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 204 Star 1,140 Fork 559 accord-net/framework Code Issues 150 Pull requests 7 Wiki Pulse Graphs Machine learning, computer vision, statistics and general scientific computing for .NET http://accord-framework.net 1,027 commits 13 branches 8 releases 31 contributors C# 96.8% C++ 1.5% Smalltalk 0.9% C 0.8% Batchfile 0.0% F# 0.0% C# C++ Smalltalk C Batchfile F# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: development Switch branches/tags Branches Tags DiegoCatalano GC-91 GH-23 GH-24 GH-68 GH-70 GH-267 anders9ustafsson-development development fo40225-development master mthmn20-random_forest stbentia-patch-3 Nothing to show v3.0.0 v2.15.0 v2.14.0 v2.13.1 v2.12.0 v2.11.0 v2.10.0 v2.10.rc1 Nothing to show New pull request Latest commit 933838e Jul 1, 2016 cesarsouza Fixing some code analysis warnings. Permalink Failed to load latest commit information. Externals Adding NUnit to the External folders. Jun 19, 2015 Samples Fixing sample applications. Jun 5, 2016 Setup Small fixes. Jul 1, 2016 Sources Fixing some code analysis warnings. Jul 1, 2016 Tools Adding a separate application to provide benchmarks between the curre… May 20, 2016 Unit Tests Adding some unit tests. Jul 1, 2016 .gitattributes Temporarily instructing git to never convert end-of-lines. Feb 7, 2015 .gitignore Small fixes. Jun 19, 2015 .travis.yml Updating Travis build scripts. Jun 19, 2015 Build.cmd Updating Travis build scripts. Jun 19, 2015 Build.sh Adding mono-specific target for sample solution. Jun 19, 2015 Contributors.txt Updating copyright notices and authorship information after the merge. May 10, 2015 Copyright.txt Updating copyright headers. Jun 1, 2016 License.txt Updating copyright headers. Jun 1, 2016 README.md Merge branch 'gitter-badge' of https://github.com/gitter-badger/frame… Jan 5, 2016 Release notes.txt Temptative release notes for release 3.1 Jun 5, 2016 Tests.cmd Updating unit tests script for Mono. Jun 19, 2015 Tests.sh Updating Linux unit tests. Jul 30, 2015 README.md The Accord.NET Framework http://accord-framework.net The Accord.NET Framework provides machine learning, mathematics, statistics, computer vision, computer audition, and several scientific computing related methods and techniques to .NET. The project extends the popular AForge.NET Framework providing a more complete scientific computing environment. The GitHub repository at https://github.com/accord-net/framework is the official home of the project after release 2.10 was finished. As such, new releases will only be made available on this repository. Installing the framework 1) Download the framework through NuGet: https://www.nuget.org/packages?q=accord.net 2) Follow the Getting Started Guide http://accord-framework.net/get-started.html 3) Check the sample applications and find one that is related to what you need. http://accord-framework.net/samples.html If you have installed the framework using the installer, the samples will be at  C:\Program Files (x86)\Accord.NET\Framework\Samples  You can open the Samples.sln solution on Visual Studio and check the sample applications for examples. Complete documentation is also available online at  http://accord-framework.net/docs/Index.html  Building with Visual Studio 1) Clone the repository (SmartGit is the best Git tool available for Windows) 2) Open Sources/Accord.NET.sln in Visual Studio (works with Express versions) Building in Linux with Mono Install Mono sudo apt-get install mono-complete monodevelop monodevelop-nunit Clone the repository git clone https://github.com/accord-net/framework.git Enter the directory cd framework Build the framework solution using Mono mdtool build -c:""NET40"" Sources/Accord.NET.Mono.sln Join the chat at https://gitter.im/accord-net/framework Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/accord-net/framework"	"Machine learning framework combined with audio and image processing libraries (computer vision, computer audition, signal processing and statistics)."	"true"
"Machine Learning and Data Science"	"Accord.NET Extensions"	"https://github.com/dajuric/accord-net-extensions"	"Advanced image processing and computer vision algorithms made as fluent extensions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"142"	"38"	"140"	"GitHub - dajuric/accord-net-extensions: Advanced image processing and computer vision algorithms made as fluent extensions and built for portability Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 38 Star 142 Fork 140 dajuric/accord-net-extensions Code Issues 2 Pull requests 0 Pulse Graphs Advanced image processing and computer vision algorithms made as fluent extensions and built for portability 323 commits 1 branch 5 releases Fetching contributors C# 98.9% Other 1.1% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2.0.1 v2.0 v1.2-rc v1.1-rc v1.0-rc Nothing to show New pull request Latest commit d63c007 Oct 28, 2015 dajuric Fixing some samples Permalink Failed to load latest commit information. .nuget Added point transfromations, Canny (call), bug fixing Dec 15, 2013 Applications/ObjectAnnotator Fixing some samples Oct 28, 2015 Deployment Updating to Accord 3.0.2 Oct 9, 2015 Samples Fixing some samples Oct 28, 2015 Source Fixing some samples Oct 28, 2015 Test Updating to Accord 3.0.2 Oct 9, 2015 packages Updating to Accord 3.0.2 Oct 9, 2015 .gitignore Fixing references Apr 30, 2015 Accord.Extensions.sln Moving LazyCache to MoreCollections library Sep 13, 2015 README.md Update README.md Oct 10, 2015 README.md Accord.NET Extensions is an extension framework for Accord.NET and AForge.NET. The framework sets focus on .NET native array as primary imaging object and offers computer-vision algorithms mostly build as extensions. The libraries can be grouped as following: Image processing Accord.Extensions.Imaging.Algorithms package Implements image processing algorithms as .NET array extensions including the Accord.NET algorithms. Accord.Extensions.Imaging.Algorithms.LINE2D package Implements template matching algorithm (~20x faster than conventional sliding window approach). Tutorials: Fast template matching Accord.Extensions.Vision package Pyramidal KLT tracker, Camshift, Meanshift Tutorials: Object Feature Tracking Math libraries Accord.Extensions.Math package Fluent matrix extensions. Geometry and graph structures and extensions. Accord.Extensions.Statistics package Object tracking algorithms: Kalman filter, particle filter, Joint Probability Data Association Filter (JPDAF). Tutorials: Kalman filter, Particle filter Support libraries Accord.Extensions.Imaging.AForgeInterop package Interoperability extensions between .NET array and AForge's UnmanagedImage. Accord.Extensions.Core package Element caching, parallel extensions, shared structures. Getting started Browse through some included samples, install NuGet packages and enjoy! Take a look at: DotImaging - a portable imaging library - the foundation of Accord.NET Extensions MoreCollections - a set of portable collections installable as source files via NuGet. How to Engage, Contribute and Provide Feedback The best ways to contribute and provide feedback is to try things out, file bugs and propose enhancements. Your opinion is important and will define the future roadmap. If you have any questions, comments or you would like to propose an enhancement please leave the message on Github, or write to: darko.juric2 [at] gmail.com. Final word If you like the project please star it in order to help to spread the word. That way you will make the framework more significant and in the same time you will motivate me to improve it, so the benefit is mutual. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dajuric/accord-net-extensions"	"Advanced image processing and computer vision algorithms made as fluent extensions."	"true"
"Machine Learning and Data Science"	"AForge.NET"	"http://www.aforgenet.com/"	"Framework for developers and researchers in the fields of Computer Vision and Artificial Intelligence (image processing, neural networks, genetic algorithms, machine learning, robotics)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"AForge.NET :: Computer Vision, Artificial Intelligence, Robotics   :: AForge.NET Framework :: Articles :: Forums :: AForge.NET is a C# framework designed for developers and researchers in the fields of Computer Vision and Artificial Intelligence - image processing, neural networks, genetic algorithms, machine learning, robotics, etc. 2.2.5 version is available! Computer Vision Sandbox is targeted as a software package, which aims to allow solving different tasks related to computer vision areas, like, for example, video surveillance, vision based automation, different sorts of image/video processing, etc. 1.2.2 version is available! GRATF stands for Glyph Recognition And Tracking Framework. The project is aimed to provide a library which does localization, recognition and pose estimation of optical glyphs in still images and video streams and files. 2.0.1 version is available! Image Processing Lab is an image processing application written in C#, which includes different image processing filters and tools available in AForge.NET framework to analyze images. 2.8.0 version is available! Latest Articles [ September 20, 2011 ] 3D Augmented Reality The article describes an approach of making 3D augmented reality based on glyph recognition. [>] [ July 26, 2011 ] 3D Pose Estimation The article describes application of POSIT algorithm for object's 3D pose estimation. [>] [ November 5, 2010 ] Glyphs' recognition The article describes glyphs' recognition algorithm and its application in 2D augmented reality. [>] Project News [ July 17, 2013 ] AForge.NET Framework 2.2.5 is now available. [>] [ March 26, 2012 ] Image Processing Lab 2.8.0 is now available. [>] [ March 6, 2012 ] GRATF 2.0.1 is now available. [>] [ News Archive ]     AForge.NET © 2008-2012 :: Contacts  "	"null"	"null"	"Framework for developers and researchers in the fields of Computer Vision and Artificial Intelligence (image processing, neural networks, genetic algorithms, machine learning, robotics)."	"true"
"Machine Learning and Data Science"	"Deedle"	"http://bluemountaincapital.github.io/Deedle/"	"Data frame and (time) series library for exploratory data manipulation with C# and F# support"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"292"	"55"	"88"	"GitHub - BlueMountainCapital/Deedle: Easy to use .NET library for data and time series manipulation and for scientific programming Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 55 Star 292 Fork 88 BlueMountainCapital/Deedle Code Issues 92 Pull requests 3 Pulse Graphs Easy to use .NET library for data and time series manipulation and for scientific programming http://bluemountaincapital.github.io/Deedle/ 763 commits 3 branches 18 releases 14 contributors F# 96.1% HTML 2.9% Other 1.0% F# HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master release Nothing to show v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.6 v1.1.5 v1.1.4-beta v1.1.3-beta v1.1.2-beta v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.2 v1.0.1 v1.0.0 v0.9.12 Nothing to show New pull request Latest commit d4acfa5 Jun 6, 2016 adamklein Release notes update Permalink Failed to load latest commit information. .paket Update Paket bootstrapper (fix #350) Jun 2, 2016 docs Fix docs tests (world bank removed our indicator...) Jan 21, 2016 lib Make evaluation tests work in NUnit Aug 24, 2014 misc Updated logo Oct 2, 2014 nuget Fix remaining build and release issues & release Jan 19, 2015 src Release notes update Jun 6, 2016 tests Fix broken test (DateTime now parsed as DateTime) Jun 2, 2016 .gitattributes Update version, finish rename Oct 23, 2013 .gitignore Merge changes Feb 10, 2015 .travis.yml Update Mono version & cleans up and aggregates fixes #279 and #278 Nov 2, 2014 Deedle.Core.sln Fix R provider test issue after Paket conversion Dec 8, 2014 Deedle.Tests.nunit Return df.Columns as virtual boxed vector (fix #91), (related #100) Feb 22, 2014 Deedle.Tests.sln Starting Paket conversion Nov 27, 2014 Deedle.sln Finish cleanup, add some design note comments Jul 9, 2015 LICENSE.md Use BM license (not a copy from F# Data!) Sep 17, 2013 README.md Trigger build Sep 2, 2015 RELEASE_NOTES.md Release notes update Jun 6, 2016 build.cmd Starting Paket conversion Nov 27, 2014 build.fsx Fix remaining build and release issues & release Jan 19, 2015 build.sh Do not use prerelease Paket Jan 21, 2016 paket.dependencies Update dependencies Jun 14, 2015 paket.lock Update version and release Aug 3, 2015 README.md Deedle Deedle is an easy to use library for data and time series manipulation and for scientific programming. It supports working with structured data frames, ordered and unordered data, as well as time series. Deedle is designed to work well for exploratory programming using F# and C# interactive console, but can be also used in efficient compiled .NET code. The library implements a wide range of operations for data manipulation including advanced indexing and slicing, joining and aligning data, handling of missing values, grouping and aggregation, statistics and more. Documentation More information can be found in the documentation. Quick start tutorial shows how to use the most important features of Deedle. Start here for a 10 minute intro! Data frame features provides more examples of using data frames including slicing, joining, grouping and aggregation. Time series features discusses data and time-series manipulation, such as sliding windows, sampling and statistics. Using Deedle from C# shows the idiomatic C# API for working with Deedle. Automatically generated documentation for all types, modules and functions in the library is available in the API Reference: Series module for working with data and time-series values Frame module for data frame manipulation Stats module for statistical functions, moving windows and a lot more. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BlueMountainCapital/Deedle"	"Data frame and (time) series library for exploratory data manipulation with C# and F# support"	"true"
"Machine Learning and Data Science"	"FsLab"	"http://fslab.org/"	"A collection of data science and machine learning libraries for F# and.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"80"	"12"	"29"	"GitHub - fslaborg/FsLab: FsLab and FsLab.Runner packages and Journal template Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 80 Fork 29 fslaborg/FsLab Code Issues 23 Pull requests 0 Pulse Graphs FsLab and FsLab.Runner packages and Journal template http://www.fslab.org 206 commits 2 branches 0 releases Fetching contributors F# 80.2% CSS 6.7% HTML 4.8% JavaScript 2.3% C# 2.2% TeX 2.1% Other 1.7% F# CSS HTML JavaScript C# TeX Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master release Nothing to show Nothing to show New pull request Latest commit 7c7c2ec Jul 6, 2016 tpetricek 1.0 release Permalink Failed to load latest commit information. .paket Add FsLab.Formatters dependency Jun 2, 2016 misc Updated logo Oct 2, 2014 src 1.0 release Jul 6, 2016 .gitattributes Update FsLab, build using FAKE Apr 21, 2014 .gitignore Reference template via Paket Nov 13, 2015 FsLab.sln Fix dependencies Jun 3, 2016 LICENSE.md Update release Apr 21, 2014 README.md Update README.md May 5, 2015 RELEASE_NOTES.md 1.0 release Jul 6, 2016 build.cmd Add FsLab.Formatters dependency Jun 2, 2016 build.fsx More preview releases Jul 6, 2016 build.sh Add FsLab.Formatters dependency Jun 2, 2016 paket.dependencies More preview releases Jul 6, 2016 paket.lock More preview releases Jul 6, 2016 publish.cmd fix NuGet tools path Jan 7, 2015 README.md FsLab FsLab is a single package that gives you all you need for doing data science with F#. FsLab includes an explorative data manipulation library, type providers for easy data access, a simple charting library and support for integration with R and numerical computing libraries. All available in a single package and ready to use! Developer notes Project structure The project produces three things: FsLab NuGet package with references to all FsLab libraries and FsLab.fsx load script FsLab.Runner NuGet package that is used by the Journal template and contains formatters (for embedding output into HTML), Journal generation code & styles and build scripts for Journals FsLab Journal Template for Visual Studio (which is a simple wrapper for the above) The source files in the repository are organized as follows: Directory or file Comment misc Icons and other non-source-code things src/FsLab.Runner Source for the DLL in the FsLab.Runner NuGet package src/misc Other files included in the FsLab.Runner NuGet package src/experiments Item templates for Visual Studio template src/journal Project template for Visual Studio template src/template Build files for Visual Studio template src/FsLab.fsx Script included in the FsLab NuGet package src/*.nuspec NuGet files for building the packages build.fsx FAKE script that does all the magic (below) Building FsLab If you want to be able to build FsLab Journal template, you'll need Visual Studio 2013 SDK. To update one or more dependencies, use the following steps: Run build Clean to make sure that there are only source files around Run .paket/paket.exe update to update the dependencies Run build to build everything or build NuGet to build everything except for the FsLab Journal template (useful if you don't have the SDK installed) Add new line with version information to RELEASE_NOTES.md! Run publish from command line to upload NuGet package (if you have the rights) After running build NuGet for the first time, you can also edit the extensions in src/FsLab.fsx. If there were any changes in the Journal template, you also need to update the journal template in the FsLab.Templates repository. At some point, these should be generated automatically too! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tpetricek/FsLab"	"A collection of data science and machine learning libraries for F# and.NET"	"true"
"Machine Learning and Data Science"	"numl"	"https://github.com/sethjuarez/numl"	"Designed to include the most popular supervised and unsupervised learning algorithms while minimizing the friction involved with creating the predictive models."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"260"	"70"	"78"	"GitHub - sethjuarez/numl: Machine Learning for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 70 Star 260 Fork 78 sethjuarez/numl Code Issues 8 Pull requests 1 Wiki Pulse Graphs Machine Learning for .NET http://numl.net 166 commits 3 branches 0 releases Fetching contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master portable Nothing to show Nothing to show New pull request Latest commit 143b367 Nov 24, 2015 sethjuarez added CI on tags only Permalink Failed to load latest commit information. lib more work on LU decomposition Jan 23, 2014 numl.Tests Various speed improvements and additional work on GMM Apr 3, 2015 numl Removed the changed .Select().Max() b/c the way it was written, it'd … Oct 2, 2015 .gitattributes dev merge Aug 15, 2013 .gitignore added CI on tags only Nov 24, 2015 LICENSE.md Update LICENSE.md Dec 29, 2014 README.md Add Gitter badge Sep 24, 2015 appveyor.yml added CI on tags only Nov 25, 2015 numl.sln removal of extra proj Jan 2, 2015 README.md Project Description This library is designed to assist in the use of common Machine Learning Algorithms in conjunction with the .NET platform. It is designed to include the most popular supervised and unsupervised learning algorithms while minimizing the friction involved with creating the predictive models. Contributing I would love to take contributions! Please read this. The key is cloning from the dev branch (and not the master branch) and then creating a new branch for your edits. The master branch is hooked up to an automatic build process which fires off on every commit. Learn More More details can be found at the project website: http://numl.net. Documentation can be found here: http://numl.net/docs/webframe.html Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sethjuarez/numl"	"Designed to include the most popular supervised and unsupervised learning algorithms while minimizing the friction involved with creating the predictive models."	"true"
"Machine Learning and Data Science"	"R Provider"	"http://bluemountaincapital.github.io/FSharpRProvider/"	"Type provider that exposes R packages and functions in a type-safe way to F# callers"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"137"	"31"	"56"	"GitHub - BlueMountainCapital/FSharpRProvider: An F# Type Provider to interop with R Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 137 Fork 56 BlueMountainCapital/FSharpRProvider Code Issues 29 Pull requests 1 Pulse Graphs An F# Type Provider to interop with R http://bluemountaincapital.github.io/FSharpRProvider/ 302 commits 6 branches 25 releases Fetching contributors F# 98.4% Other 1.6% F# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fixes gh-pages hmansell.multiVersionAssemResolve master release xchen.RInstallPath Nothing to show v1.1.20 v1.1.19-alpha v1.1.16-alpha v1.1.15 v1.1.14 v1.1.13 v1.1.12 v1.1.11 v1.1.10 v1.1.9 v1.1.8 v1.1.7 v1.1.6 v1.1.5-alpha v1.1.3-alpha v1.0.17 v1.0.16 v1.0.15 v1.0.14 v1.0.13 v1.0.12 v1.0.11 v1.0.10 v0.5 help Nothing to show New pull request Latest commit c56341e Apr 19, 2016 tpetricek Merge branch 'master' of github.com:BlueMountainCapital/FSharpRProvider Permalink Failed to load latest commit information. .paket Update R provider to use Paket & try fix Travis Jan 13, 2015 docs Fixing instructions for setting up on a mac Apr 8, 2016 nuget Fix FSharp.Core.dll packaged in NuGet Apr 16, 2016 src Update ignore file Apr 19, 2016 tests/Test.RProvider Update dependencies and release notes Apr 5, 2016 tools/ILRepack Address paket-files, FSharp.Core and NuGet commands Jan 13, 2015 .gitattributes Initial version Jul 26, 2012 .gitignore Update ignore file Apr 19, 2016 .travis.yml Update R provider to use Paket & try fix Travis Jan 13, 2015 LICENSE.md Include RDotNet binaries, as I have now verified that this is allowed… Jul 27, 2012 README.md Add more links to readme Jul 14, 2015 RELEASE_NOTES.md Release non-alpha version Apr 19, 2016 RProvider.Tests.sln Update R provider to use Paket & try fix Travis Jan 13, 2015 RProvider.sln Finish Paket conversion improvements Jan 13, 2015 build.cmd Fix build.cmd to use paket Jun 8, 2015 build.fsx Fix build script (remove merging) Apr 5, 2016 build.sh Update R provider to use Paket & try fix Travis Jan 13, 2015 paket.dependencies Fix FSharp.Core.dll packaged in NuGet Apr 16, 2016 paket.lock Fix FSharp.Core.dll packaged in NuGet Apr 16, 2016 README.md F# R Provider An F# type provider for interoperating with R. For more information, see detailed documentation with tutorials, examples and more. The following tutorials are a good place to start: Quickstart: Using Statistical Packages Quickstart: Creating Charts Tutorial: Analysing Stock Prices What does it do? The R Provider discovers R packages that are available in your R installation and makes them available as .NET namespaces underneath the parent namespace RProvider. For example, the stats package is available as RProvider.stats. If you open the namespaces you want to use, functions and values will be available as R.name. For example, consider this F# interactive script: #r ""RProvider.dll""  open RProvider open RProvider.``base``  let v = R.c(1,2,3) This creates an R numeric vector containing 1,2,3, and names it v. Note that we had to open the base namespace, since the function 'c' is part of that namespace. You should also open namespace RProvider, because it contains some helper functions. And because type providers are used by Visual Studio, Xamaring Studio and other IDEs, you will get intellisense for R functions. You will also get compile-time type-checking that the function exists. How to use it Install using the NuGet package. Many thanks to Mathias Brandewinder for producing the FAKE script to build the NuGet package, and to Steffen Forkmann for writing FAKE. There is a lot of info on how to use the provider on our documentation page License FSharpRProvider is covered by the BSD license. The library uses RDotNet which is also covered by the BSD license. Pre-requisites The R Provider requires an installation of R, downloadable from here. On Windows, RProvider uses the R registry key SOFTWARE\R-core to locate the R binary directory, in order to load R.dll. It will also locate R.dll if it is on the path. If run from a 32-bit process, RProvider will use the 32-bit R.DLL, and if run from a 64-bit process, it will load the 64-bit version. On Mac and Linux, you need to install 64 bit version of Mono, setup Xamarin Studio to run F# Interactive in 64 bit and create a configuration file ~/.rprovider.conf to tell the R provider how to start its server process in 64 bit mode. For detailed documentation see the R provider Mac/Linux page. If you are using R 2.15 or later, you should not try to load the RProvider inside a script that is passed to FSI via the --use flag. It seems that something about the way R initializes causes it to hang in that context. Works fine if you load later. For compilation you will need VS2012 / F# 3.0 or later. For runtime you'll need .NET 4.5. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BlueMountainCapital/FSharpRProvider"	"Type provider that exposes R packages and functions in a type-safe way to F# callers"	"true"
"Serialization"	"F# Data"	"http://fsharp.github.io/FSharp.Data/"	"F# type providers for accessing XML, JSON, CSV and HTML files (based on sample documents) and for accessing WorldBank data"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"307"	"43"	"174"	"GitHub - fsharp/FSharp.Data: F# Data: Library for Data Access Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 43 Star 307 Fork 174 fsharp/FSharp.Data Code Issues 80 Pull requests 3 Pulse Graphs F# Data: Library for Data Access http://fsharp.github.io/FSharp.Data 1,936 commits 5 branches 42 releases 51 contributors HTML 87.1% F# 12.3% Other 0.6% HTML F# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags HttpAuthentication XsdProvider gh-pages master release Nothing to show v2.1.1 v2.1.0 v2.1.0-beta2 v2.1.0-beta v2.0.15 v2.0.14 v2.0.13 v2.0.10 v2.0.9 v2.0.8 v2.0.7 v2.0.6 v2.0.5 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v1.1.10 v1.1.9 v1.1.8 v1.1.7 v1.0.13 v1.0.12 v1.0.11 v1.0.10 v1.0.9 v1.0.8 v1.0.5 v1.0.4 2.3.1 2.3.1-beta2 2.3.1-beta1 2.3.0 2.3.0-beta2 2.3.0-beta1 2.2.5 2.2.4 2.2.3 2.2.2 2.2.1 2.2.0 Nothing to show New pull request Latest commit 45ca385 Jul 8, 2016 ovatsus committed on GitHub Merge pull request #961 from juicelink/cookies-with-wrong-url … [Http] don't produce cookies from response header if associated uri is not valid Permalink Failed to load latest commit information. .paket update paket.bootstrapper.exe from v0.37 to v3.4 Jul 1, 2016 docs Fix documentation example for css selectors May 1, 2016 misc Updated logo Oct 2, 2014 nuget Add LINQPad samples to NuGet package Apr 22, 2016 src don't produce cookies from request header if associated uri is not valid Jul 8, 2016 tests Merge remote-tracking branch 'origin/master' May 29, 2016 .gitattributes Update .gitattributes Mar 12, 2014 .gitignore Fix runtime parsing of optional records with empty strings in JsonPro… May 1, 2016 .travis.yml Trying to fix Travis builds Apr 25, 2016 CONTRIBUTING.md Update docs with new supported PCLs Oct 11, 2015 FSharp.Data.Tests.sln begin to document CSS selectors Oct 19, 2015 FSharp.Data.sln add profile 259 Sep 23, 2015 LICENSE.md Update year to 2016 May 21, 2016 README.md updated travis badge to support retina Jul 4, 2016 RELEASE_NOTES.md Fix tests and prepare release Jun 19, 2016 TestApps.Console.sln update solution Sep 24, 2015 TestApps.Windows.sln Windows 8 fixes Mar 29, 2014 appveyor.yml So Long, and Thanks for All the Fish, Freebase Feb 14, 2015 build.cmd Documentation fixes Nov 1, 2014 build.fsx Update release notes, add CSS to the nuget tags, a bit of cleanup May 1, 2016 build.sh Update TP starter pack and make build run in Git shell Apr 25, 2016 paket.dependencies Use TypeProviderTesting from Starter Pack Apr 25, 2016 paket.lock Fix tests and prepare release Jun 19, 2016 performanceAnalysis.fsx Update fsx files to new paths (#679) Sep 20, 2014 updateDocTools.cmd Update release notes Oct 12, 2014 README.md F# Data: Library for Data Access The F# Data library (FSharp.Data.dll) implements everything you need to access data in your F# applications and scripts. It implements F# type providers for working with structured file formats (CSV, HTML, JSON and XML) and for accessing the WorldBank data. It also includes helpers for parsing CSV, HTML and JSON files and for sending HTTP requests. We're open to contributions from anyone. If you want to help out but don't know where to start, you can take one of the Up-For-Grabs issues, or help to improve the documentation. You can see the version history here. Building Simply build FSharp.Data.sln in Visual Studio 2015, Mono Develop, or Xamarin Studio. You can also use the FAKE script: Windows: Run build.cmd Mono: Run build.sh Supported F# Runtimes FSharp.Core 4.3.0.0 (F# 3.0) FSharp.Core 4.3.1.0 (F# 3.1) FSharp.Core 4.4.0.0 (F# 4.0) Supported platforms .NET Framework 4.0 PCL profile 7 (.NET Framework 4.5, Windows 8) PCL profile 47 (.NET Framework 4.5, Silverlight 5, Windows 8) PCL profile 259 (.NET Framework 4.5, Windows 8, Windows Phone 8.1, Windows Phone Silverlight 8) Documentation This library is that it comes with comprehensive documentation. The documentation is automatically generated from *.fsx files in the content folder and from the comments in the code. If you find a typo, please submit a pull request! F# Data Library home page with more information about the library, contributions, etc. The samples from the documentation are included as part of FSharp.Data.Tests.sln, make sure you build the solution before trying out the samples to ensure that all needed packages are installed. Support and community If you have a question about FSharp.Data, ask at StackOverflow and mark your question with the f#-data tag. If you want to submit a bug, a feature request or help with fixing bugs then look at issues and read contributing to F# Data. To discuss more general issues about F# Data, its goals and other open-source F# projects, join the fsharp-opensource mailing list Library license The library is available under Apache 2.0. For more information see the License file in the GitHub repository. Maintainers Although this project is hosted in the fsharp repository for historical reasons, it is not maintained and managed by the F# Core Engineering Group. The F# Core Engineering Group acknowledges that the independent owners and maintainers of this project are Gustavo Guerra and Tomas Petricek. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fsharp/FSharp.Data"	"F# type providers for accessing XML, JSON, CSV and HTML files (based on sample documents) and for accessing WorldBank data"	"true"
"Markdown Processors"	"MarkdownSharp"	"https://code.google.com/archive/p/markdownsharp"	"Open source C# implementation of Markdown processor, as featured on Stack Overflow."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Google Code Archive - Long-term storage for Google Code Project Hosting. Code Archive Skip to content Search Google About Google Privacy Terms"	"null"	"null"	"Open source C# implementation of Markdown processor, as featured on Stack Overflow."	"true"
"Markdown Processors"	"F# Formatting"	"http://tpetricek.github.io/FSharp.Formatting/"	"Tools for documenting F# and C# projects. The library contains extensible Markdown parser as a core component."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"225"	"31"	"98"	"GitHub - tpetricek/FSharp.Formatting: F# tools for generating documentation (Markdown processor and F# code formatter) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 225 Fork 98 tpetricek/FSharp.Formatting Code Issues 62 Pull requests 1 Pulse Graphs F# tools for generating documentation (Markdown processor and F# code formatter) http://tpetricek.github.com/FSharp.Formatting/ 953 commits 15 branches 21 releases 52 contributors F# 40.3% C# 21.8% HTML 17.8% Perl 7.5% TeX 6.4% PHP 5.8% Other 0.4% F# C# HTML Perl TeX PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cache close_331 codeblocks codesnip.bug dogfood_commandtool fcspin fix_crash_with_empty_lines fix_380 follow_commonMark_spec forki-patch-1 gh-pages master pre_code release test_362 Nothing to show 2.14.5-alpha1 2.14.4 2.14.3 2.14.2 2.14.1 2.14.0 2.13.6 2.13.5 2.13.4 2.13.2 2.13.1 2.13.0 2.12.1 2.12.1-alpha3 2.12.1-alpha2 2.12.1-alpha1 2.12.0 2.11.1-alpha1 2.11.0 2.11.0-alpha2 2.11.0-alpha1 Nothing to show New pull request Latest commit 9eb689f Jun 6, 2016 tpetricek Merge pull request #404 from theprash/master … Enabled and fixed 3 CommonMark test sections Permalink Failed to load latest commit information. .paket updated bootstrapper Feb 26, 2016 csharp paket update Sep 28, 2015 docs Fix tooltip flickering in CSS May 15, 2016 lib Update to the latests FCS and fix tests Aug 11, 2014 misc Removed JQuery-UI because it is not used Feb 2, 2016 nuget bundle sigdata and optdata with commandtool Dec 19, 2015 packages/FSharp.Formatting Release 2.14.1 Apr 5, 2016 src Merge pull request #404 from theprash/master Jun 6, 2016 tests Merge pull request #404 from theprash/master Jun 5, 2016 .gitattributes Add gitattributes and update version Mar 28, 2013 .gitignore Update Yaaf.FSharp.Scripting (now uses the 4.5 reference assemblies).… Sep 20, 2015 .travis.yml Update to latest FSharp.Compiler.Service Jan 3, 2015 FSharp.Formatting.nunit Cleanup templates and fix #49 Nov 27, 2013 FSharp.Formatting.sln Add commonmark_spec.json to the solution May 14, 2016 LICENSE.md Adding license file (Apache 2.0) Nov 12, 2012 README.md Add Gitter badge Sep 20, 2015 RELEASE_NOTES.md Release notes May 26, 2016 appveyor.yml Update Yaaf.FSharp.Scripting (now uses the 4.5 reference assemblies).… Sep 20, 2015 build.cmd Do not paket install during build Oct 28, 2014 build.fsx Update build.fsx Apr 5, 2016 build.sh Do not paket install during build Oct 28, 2014 paket.dependencies Update paket.dependencies Apr 5, 2016 paket.lock Update paket.lock Apr 5, 2016 README.md F# Formatting The F# Formatting libraries (FSharp.CodeFormat.dll and FSharp.Markdown.dll) include an F# implementation of a Markdown parser and an F# code formatter that can be used to tokenize F# code and obtain information about tokens including tool-tips (as in Visual Studio and MonoDevelop) with type information. The library also comes with a sample that implements literate programming for F#. Documentation The documentation for this library is automatically generated (using the literate programming tools based on the library) from *.fsx and *.md files in the docs folder. If you find a typo, please submit a pull request! F# Formatting: Documentation tools provides more information about the library, how to contribute, etc. It also includes links to tutorials showing how to use the Markdown parser and F# code formatter. F# Formatting: Literate programming documents the most interesting part of the package - script that can be used to generate documentation for F# projects from commented F# script files and Markdown documents. Who Uses F# Formatting? The library is used by a number of F# projects. Most prominently, the F# snippets web site uses it to format snippets shared by the F# community. The following sample scripts use the library to generate documentation and might be a useful inspiration: The generate.fsx script in FSharp.ProjectScaffold shows a recommended way for adding F# Formatting docs to your project. Library license The library is available under Apache 2.0. For more information see the License file in the GitHub repository. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tpetricek/FSharp.Formatting"	"Tools for documenting F# and C# projects. The library contains extensible Markdown parser as a core component."	"true"
"Markdown Processors"	"CommonMark.NET"	"https://github.com/Knagis/CommonMark.NET"	"Implementation of CommonMark specification in C# for converting Markdown documents to HTML. Optimized for maximum performance and portability."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"451"	"47"	"76"	"GitHub - Knagis/CommonMark.NET: Implementation of CommonMark specification in C# for converting Markdown documents to HTML. Optimized for maximum performance and portability. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 47 Star 451 Fork 76 Knagis/CommonMark.NET Code Issues 10 Pull requests 1 Wiki Pulse Graphs Implementation of CommonMark specification in C# for converting Markdown documents to HTML. Optimized for maximum performance and portability. 347 commits 3 branches 34 releases 8 contributors C# 99.6% Perl 0.4% C# Perl Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master md-writer parallel Nothing to show v1.13.3 v1.13.1 v0.13.4 v0.13.2 v0.13.0 v0.12.0 v0.11.0 v0.10.0 v0.9.1 v0.9.0 v0.8.5 v0.8.4 v0.8.3 v0.8.2 v0.8.1 v0.8.0 v0.7.0 v0.6.1 v0.6.0 v0.5.2 v0.5.1 v0.5.0 v0.4.4 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.0 v0.2.1 v0.2.0 v0.1.3 v0.1.2 v0.1.1 v0.1.0-beta Nothing to show New pull request Latest commit 57dc048 Jul 13, 2016 Knagis Version number increase Permalink Failed to load latest commit information. CommonMark.Console Increased package version. Nuget now includes console app in the tool… Mar 21, 2015 CommonMark.NETCore Version number increase Jul 13, 2016 CommonMark.Tests Fixed unhandled exception #87 Jul 13, 2016 CommonMark Fixed unhandled exception #87 Jul 13, 2016 .gitattributes Added .gitattributes Sep 8, 2014 .gitignore Added .vs/ to .gitignore. Oct 6, 2015 CommonMark.NET.nuspec Version number increase Jul 13, 2016 CommonMark.sln Rename .Portable45 to .Profile259 Dec 29, 2015 LICENSE.md Changed encoding to UTF-8 Sep 11, 2014 README.md Added NuGet command Jun 12, 2016 appveyor.yml Add appveyor.yml Dec 23, 2015 global.json Increased version number, fixed .NET Core .dll generation. Oct 24, 2015 runtests.pl Normalizing newlines around <li> in runtests.pl. This now matches the… Jan 17, 2015 README.md CommonMark.NET Implementation of CommonMark specification (passes tests from version 0.25) in C# for converting Markdown documents to HTML. The current version of the library is also available on NuGet. Usage To convert Markdown data in a stream or file: using (var reader = new System.IO.StreamReader(""source.md"")) using (var writer = new System.IO.StreamWriter(""result.html"")) {   CommonMark.CommonMarkConverter.Convert(reader, writer); } To convert data stored in a string: var result = CommonMark.CommonMarkConverter.Convert(""**Hello world!**""); See wiki for an example how the parser can be extended with additional logic. Important: The converter does not include any HTML sanitizing. Installation via NuGet Install-Package CommonMark.NET Compatibility The library uses no references except for System - it has no external dependencies. It is cross compiled to: .NET Framework 2.0 .NET Framework 3.5 Client Profile .NET Framework 4.0 Client Profile .NET 4.0 Portable Class Library .NET Framework 4.0 Client Profile Silverlight 5 Windows 8 Windows Phone 8.1 Windows Phone Silverlight 8 Xamarin.Android Xamarin.iOS .NET 4.5 Portable Class Library (Optimized) .NET Framework 4.5 Windows 8 Windows Phone 8.1 Windows Phone Silverlight 8 Xamarin.Android Xamarin.iOS .NET Framework 4.5 (Optimized) .NET Framework 5.0 Core (also known as ASP.NET vNext Core CLR) For working with the source code you will need Visual Studio 2015 or newer (Community edition is supported). Performance Using a simple tool to compare the performance of various Markdown implementations for .NET yields the following results:  CommonMark.NET 0.4.1      4 ms   7%        CommonMarkSharp 0.3.2     30 ms   46%    MarkdownSharp 1.13     55 ms   84%     (might not conform to CommonMark specification)      MarkdownDeep 1.5      7 ms   11%     (might not conform to CommonMark specification)   MoonShine (sundown)      3 ms    6%     (wrapper for a native x86 .dll)              Baseline     65 ms   100%    (used to compare results on different machines)  This benchmark is very simple and tests the processing of the CommonMark specification document itself (a 115 KB file). The results are provided just for a high-level comparison. Reliability The parser uses algorithms that completely avoid recursion so even specifically crafted input documents will not cause exceptions and will be rendered correctly. This is important because a StackOverflowException cannot be caught and will bring down the entire process. References This library is based on a port of the reference implementation in C, available on jgm/cmark repo. It follows the same approach - the source is parsed into a syntax tree that can be used to add custom processing if the application needs it and then formatted into HTML. Running tests All tests from spec.txt are merged into the unit testing project and can be executed from within Visual Studio. The project also includes a slightly modified version of runtests.pl for compatibility with the original implementation. Use CommonMark.Console.exe --perltest as the argument to runtests.pl so that the application can correctly handle input from the Perl script. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Knagis/CommonMark.NET"	"Implementation of CommonMark specification in C# for converting Markdown documents to HTML. Optimized for maximum performance and portability."	"true"
"Mail"	"FluentEmail"	"https://github.com/lukencode/FluentEmail"	"A Fluent Wrapper for System.Net.Mail with razor templating support."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"139"	"19"	"58"	"GitHub - lukencode/FluentEmail: .net fluent email class Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 139 Fork 58 lukencode/FluentEmail Code Issues 6 Pull requests 4 Wiki Pulse Graphs .net fluent email class http://lukencode.com/2011/04/30/fluent-email-now-supporting-razor-syntax-for-templates/ 69 commits 1 branch 0 releases 8 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit f99ac88 Jul 30, 2015 lukencode updated nuget package Permalink Failed to load latest commit information. .nuget updated nuget May 21, 2013 FluentEmail updated nuget package Jul 30, 2015 FluentEmailTests Converted Send and SendAsync methods to be virtual. Jul 30, 2015 packages Fixed RazorEngine and FluentEmail to use the System.Web.Razor RC from… Jun 22, 2012 .gitattributes added interface for template rendering Jun 10, 2012 .gitignore added interface for template rendering Jun 10, 2012 FluentEmail.sln added interface for template rendering Jun 10, 2012 README.markdown Fence code block as 'csharp' Aug 9, 2011 license.txt Added license Apr 29, 2014 README.markdown Playing around with a fluent email class in c# Example usage from: var email = Email         .From(""john@email.com"")         .To(""bob@email.com"", ""bob"")         .Subject(""hows it going bob"")         .Body(""yo dawg, sup?""); Templates usage: var template = ""Dear @Model.Name, You are totally @Model.Compliment."";  var email = Email     .From(""bob@hotmail.com"")     .To(""somedude@gmail.com"")     .Subject(""woo nuget"")     .UsingTemplate(template, new { Name = ""Luke"", Compliment = ""Awesome"" }); Sending: //send normally email.Send();  //send asynchronously email.Sendsync(MailDeliveredCallback); http://lukencode.com/2011/04/30/fluent-email-now-supporting-razor-syntax-for-templates/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lukencode/FluentEmail"	"A Fluent Wrapper for System.Net.Mail with razor templating support."	"true"
"Mail"	"MailKit"	"https://github.com/jstedfast/MailKit"	"A complete cross-platform mail stack including IMAP, POP3, SMTP, authentication and more. Built on top of MimeKit."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"929"	"108"	"163"	"GitHub - jstedfast/MailKit: A cross-platform .NET library for IMAP, POP3, and SMTP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 108 Star 929 Fork 163 jstedfast/MailKit Code Issues 3 Pull requests 1 Pulse Graphs A cross-platform .NET library for IMAP, POP3, and SMTP. http://www.mimekit.net 1,416 commits 3 branches 42 releases 13 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags async gh-pages master Nothing to show 1.4.0 1.2.24 1.2.23 1.2.22 1.2.20 1.2.18 1.2.17 1.2.16 1.2.15 1.2.14 1.2.13 1.2.12 1.2.11.1 1.2.11 1.2.10 1.2.9 1.2.8 1.2.7 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.0.17 1.0.16 1.0.15 1.0.14 1.0.13 1.0.12 1.0.11 1.0.10 1.0.9 1.0.8 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit f63db9d Jul 15, 2016 jstedfast Encode the Windows OS version in the NTLM response if requested Permalink Failed to load latest commit information. .nuget updated opencover and coveralls nugets Aug 14, 2015 Documentation Update BodyBuilder.cs Jun 20, 2016 MailKit Encode the Windows OS version in the NTLM response if requested Jul 15, 2016 UnitTests Don't send the optional CHARSET search param if the charset is US-ASCII Jun 5, 2016 component bumped version to 1.4.0 Jul 1, 2016 nuget bumped version to 1.4.0 Jul 1, 2016 rfc Added rfc5321 Mar 11, 2016 samples updated samples Jul 1, 2016 submodules bumped MimeKit Jul 14, 2016 .gitattributes Updated .gitattributes Jul 9, 2015 .gitignore Added initial files needed for CoreCLR support Dec 4, 2015 .gitmodules Updated to use submodules and hooked up automated builds Jun 30, 2015 .travis.yml Restore the nuget packages for MimeKit as well May 4, 2016 FAQ.md Update FAQ.md Jun 15, 2016 License.md Updated License.md Jan 1, 2016 MailKit.Documentation.sln Improved docs Dec 16, 2015 MailKit.Mobile.sln Updated to use submodules and hooked up automated builds Jun 30, 2015 MailKit.Net40.sln Use official BouncyCastle packages from NuGet.org May 4, 2016 MailKit.Net45.sln Use official BouncyCastle packages from NuGet.org May 4, 2016 MailKit.Win.sln Updated samples Jul 5, 2015 MailKit.sln Added the WindowsUniversal81 projects to MailKit.sln May 22, 2016 Makefile Filled in missing docs Jul 9, 2014 README.md Update README.md Jun 15, 2016 ReleaseNotes.md bumped version to 1.4.0 Jul 1, 2016 TODO.md Implemented support for the LIST-STATUS IMAP extension Dec 20, 2015 appveyor.yml bumped version to 1.4.0 Jul 1, 2016 cov-build.bat Fixed cov-build.bat May 31, 2015 global.json Added global.json Dec 4, 2015 release.bat Bumped version to 1.2.3 Jun 1, 2015 README.md MailKit Build Status Code Coverage Static Analysis Linux/Mac Windows What is MailKit? MailKit is a cross-platform mail client library built on top of MimeKit. Features SASL Authentication CRAM-MD5 DIGEST-MD5 LOGIN NTLM PLAIN SCRAM-SHA-1 SCRAM-SHA-256 XOAUTH2 (partial support - you need to fetch the auth tokens yourself) SMTP Client Supports all of the SASL mechanisms listed above. Supports SSL-wrapped connections via the ""smtps"" protocol. Supports client SSL/TLS certificates. Supports the following extensions: STARTTLS, SIZE, DSN, 8BITMIME, PIPELINING, BINARYMIME, SMTPUTF8 All APIs are cancellable. Async APIs are available. POP3 Client Supports all of the SASL mechanisms listed above. Also supports authentication via APOP and USER/PASS. Supports SSL-wrapped connections via the ""pops"" protocol. Supports client SSL/TLS certificates. Supports the following extensions: STLS, UIDL, PIPELINING, UTF8, LANG All APIs are cancellable. Async APIs are available. IMAP4 Client Supports all of the SASL mechanisms listed above. Supports SSL-wrapped connections via the ""imaps"" protocol. Supports client SSL/TLS certificates. Supports the following extensions: ACL QUOTA LITERAL+ IDLE NAMESPACE ID CHILDREN LOGINDISABLED STARTTLS MULTIAPPEND UNSELECT UIDPLUS CONDSTORE ESEARCH SASL-IR COMPRESS WITHIN ENABLE QRESYNC SORT THREAD ESORT (partial) METADATA LIST-STATUS SPECIAL-USE CREATE-SPECIAL-USE SEARCH=FUZZY (partial) MOVE UTF8=ACCEPT UTF8=ONLY XLIST X-GM-EXT1 (X-GM-MSGID, X-GM-THRID, X-GM-RAW and X-GM-LABELS) All APIs are cancellable. Async APIs are available. Client-side sorting and threading of messages. Goals The main goal of this project is to provide the .NET world with robust, fully featured and RFC-compliant SMTP, POP3, and IMAP client implementations. All of the other .NET IMAP client implementations that I could find suffer from major architectural problems such as ignoring unexpected untagged responses, assuming that literal string tokens will never be used for anything other than message bodies (when in fact they could be used for pretty much any string token in a response), assuming that the way to find the end of a message body in a FETCH response is by scanning for "") UID"", and not properly handling mailbox names with international characters to simply name a few. IMAP requires a LOT of time spent laboriously reading and re-reading the IMAP specifications (as well as the MIME specifications) to understand all of the subtleties of the protocol and most (all?) of the other Open Source .NET IMAP libraries, at least, were written by developers that only cared enough that it worked for their simple needs. There's nothing necessarily wrong with doing that, but the web is full of half-working, non-RFC-compliant IMAP implementations out there that it was finally time for a carefully designed and implemented IMAP client library to be written. For POP3, libraries such as OpenPOP.NET are actually fairly decent, although the MIME parser is far too strict - throwing exceptions any time it encounters a Content-Type or Content-Disposition parameter that it doesn't already know about, which, if you read over the mailing-list, is a problem that OpenPOP.NET users are constantly running into. MailKit's Pop3Client, of course, doesn't have this problem. It also parses messages directly from the socket instead of downloading the message into a large string buffer before parsing it, so you'll probably find that not only is MailKit faster (MailKit's MIME parser, MimeKit, parses messages from disk 25x faster than OpenPOP.NET's parser), but also uses far less memory. For SMTP, most developers use System.Net.Mail.SmtpClient which suits their needs more-or-less satisfactorily and so is probably not high on their list of needs. However, the SmtpClient implementation included with MailKit is a much better option if cross-platform support is needed or if the developer wants to be able to save and re-load MIME messages before sending them via SMTP. MailKit's SmtpClient also supports PIPELINING which should improve performance of sending messages (although might not be very noticeable). License Information MailKit is Copyright (C) 2013-2016 Xamarin Inc. and is licensed under the MIT license: Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  Installing via NuGet The easiest way to install MailKit is via NuGet. In Visual Studio's Package Manager Console, simply enter the following command: Install-Package MailKit  Building First, you'll need to clone MailKit from my GitHub repository: git clone https://github.com/jstedfast/MailKit.git cd MailKit git submodule update --init --recursive  In the top-level MailKit source directory, there are three solution files: MailKit.sln, MailKit.Net40.sln and MailKit.Mobile.sln. MailKit.sln includes the projects for .NET 4.5, .NET 4.0, Xamarin.Android, and Xamarin.iOS. MailKit.Net45.sln includes the .NET 4.5 project and the unit tests. MailKit.Net40.sln just includes the .NET 4.0 project. MailKit.Mobile.sln just includes the Xamarin.iOS and Xamarin.Android projects. MailKit.Win.sln just includes the Windows 8.1 Universal project (aka wpa81). If you don't have the Xamarin products, you'll probably want to open the MailKit.Net45.sln instead of MailKit.sln. Once you've opened the appropriate MailKit solution file in either Xamarin Studio or Visual Studio 2010+ (either will work), you can simply choose the Debug or Release build configuration and then build. Note: The Release build will generate the xml API documentation, but the Debug build will not. Using MailKit Sending Messages One of the more common operations that MailKit is meant for is sending email messages. using System;  using MailKit.Net.Smtp; using MailKit; using MimeKit;  namespace TestClient {     class Program     {         public static void Main (string[] args)         {             var message = new MimeMessage ();             message.From.Add (new MailboxAddress (""Joey Tribbiani"", ""joey@friends.com""));             message.To.Add (new MailboxAddress (""Mrs. Chanandler Bong"", ""chandler@friends.com""));             message.Subject = ""How you doin'?"";              message.Body = new TextPart (""plain"") {                 Text = @""Hey Chandler,  I just wanted to let you know that Monica and I were going to go play some paintball, you in?  -- Joey""             };              using (var client = new SmtpClient ()) {                 client.Connect (""smtp.friends.com"", 587, false);                  // Note: since we don't have an OAuth2 token, disable                 // the XOAUTH2 authentication mechanism.                 client.AuthenticationMechanisms.Remove (""XOAUTH2"");                  // Note: only needed if the SMTP server requires authentication                 client.Authenticate (""joey"", ""password"");                  client.Send (message);                 client.Disconnect (true);             }         }     } } Retrieving Messages (via Pop3) One of the other main uses of MailKit is retrieving messages from pop3 servers. using System;  using MailKit.Net.Pop3; using MailKit; using MimeKit;  namespace TestClient {     class Program     {         public static void Main (string[] args)         {             using (var client = new Pop3Client ()) {                 client.Connect (""pop.friends.com"", 110, false);                  // Note: since we don't have an OAuth2 token, disable                 // the XOAUTH2 authentication mechanism.                 client.AuthenticationMechanisms.Remove (""XOAUTH2"");                  client.Authenticate (""joey"", ""password"");                  for (int i = 0; i < client.Count; i++) {                     var message = client.GetMessage (i);                     Console.WriteLine (""Subject: {0}"", message.Subject);                 }                  client.Disconnect (true);             }         }     } } Using IMAP More important than POP3 support is the IMAP support. Here's a simple use-case of retreiving messages from an IMAP server: using System;  using MailKit.Net.Imap; using MailKit.Search; using MailKit; using MimeKit;  namespace TestClient {     class Program     {         public static void Main (string[] args)         {             using (var client = new ImapClient ()) {                 client.Connect (""imap.friends.com"", 993, true);                  // Note: since we don't have an OAuth2 token, disable                 // the XOAUTH2 authentication mechanism.                 client.AuthenticationMechanisms.Remove (""XOAUTH2"");                  client.Authenticate (""joey"", ""password"");                  // The Inbox folder is always available on all IMAP servers...                 var inbox = client.Inbox;                 inbox.Open (FolderAccess.ReadOnly);                  Console.WriteLine (""Total messages: {0}"", inbox.Count);                 Console.WriteLine (""Recent messages: {0}"", inbox.Recent);                  for (int i = 0; i < inbox.Count; i++) {                     var message = inbox.GetMessage (i);                     Console.WriteLine (""Subject: {0}"", message.Subject);                 }                  client.Disconnect (true);             }         }     } } However, you probably want to do more complicated things with IMAP such as fetching summary information so that you can display a list of messages in a mail client without having to first download all of the messages from the server: foreach (var summary in inbox.Fetch (0, -1, MessageSummaryItems.Full | MessageSummaryItems.UniqueId)) {     Console.WriteLine (""[summary] {0:D2}: {1}"", summary.Index, summary.Envelope.Subject); } The results of a Fetch command can also be used to download individual MIME parts rather than downloading the entire message. For example: foreach (var summary in inbox.Fetch (0, -1, MessageSummaryItems.Full | MessageSummaryItems.UniqueId)) {     var text = summary.Body as BodyPartText;      if (text == null) {         var multipart = summary.Body as BodyPartMultipart;          if (multipart != null)             text = multipart.BodyParts.OfType<BodyPartText> ().FirstOrDefault ();     }      if (text == null)         continue;      // this will download *just* the text part     var part = inbox.GetBodyPart (summary.UniqueId.Value, text); } You may also be interested in sorting and searching... // let's search for all messages received after Jan 12, 2013 with ""MailKit"" in the subject... var query = SearchQuery.DeliveredAfter (DateTime.Parse (""2013-01-12""))     .And (SearchQuery.SubjectContains (""MailKit"")).And (SearchQuery.Seen);  foreach (var uid in inbox.Search (query)) {     var message = inbox.GetMessage (uid);     Console.WriteLine (""[match] {0}: {1}"", uid, message.Subject); }  // let's do the same search, but this time sort them in reverse arrival order var orderBy = new [] { OrderBy.ReverseArrival }; foreach (var uid in inbox.Search (query, orderBy)) {     var message = inbox.GetMessage (uid);     Console.WriteLine (""[match] {0}: {1}"", uid, message.Subject); }  // you'll notice that the orderBy argument is an array... this is because you // can actually sort the search results based on multiple columns: orderBy = new [] { OrderBy.ReverseArrival, OrderBy.Subject }; foreach (var uid in inbox.Search (query, orderBy)) {     var message = inbox.GetMessage (uid);     Console.WriteLine (""[match] {0}: {1}"", uid, message.Subject); } Of course, instead of downloading the message, you could also fetch the summary information for the matching messages or do any of a number of other things with the UIDs that are returned. How about navigating folders? MailKit can do that, too: // Get the first personal namespace and list the toplevel folders under it. var personal = client.GetFolder (client.PersonalNamespaces[0]); foreach (var folder in personal.GetSubfolders (false))     Console.WriteLine (""[folder] {0}"", folder.Name); If the IMAP server supports the SPECIAL-USE or the XLIST (GMail) extension, you can get ahold of the pre-defined All, Drafts, Flagged (aka Important), Junk, Sent, Trash, etc folders like this: if ((client.Capabilities & (ImapCapabilities.SpecialUse | ImapCapabilities.XList)) != 0) {     var drafts = client.GetFolder (SpecialFolder.Drafts); } else {     // maybe check the user's preferences for the Drafts folder? } In cases where the IMAP server does not support the SPECIAL-USE or XLIST extensions, you'll have to come up with your own heuristics for getting the Sent, Drafts, Trash, etc folders. For example, you might use logic similar to this: static string[] CommonSentFolderNames = { ""Sent Items"", ""Sent Mail"", /* maybe add some translated names */ };  static IFolder GetSentFolder (ImapClient client, CancellationToken cancellationToken) {     var personal = client.GetFolder (client.PersonalNamespaces[0]);      foreach (var folder in personal.GetSubfolders (false, cancellationToken)) {         foreach (var name in CommonSentFolderNames) {             if (folder.Name == commonName)                 return folder;         }     }      return null; } Using LINQ, you could simplify this down to something more like this: static string[] CommonSentFolderNames = { ""Sent Items"", ""Sent Mail"", /* maybe add some translated names */ };  static IFolder GetSentFolder (ImapClient client, CancellationToken cancellationToken) {     var personal = client.GetFolder (client.PersonalNamespaces[0]);      return personal.GetSubfolders (false, cancellationToken).FirstOrDefault (x => CommonSentFolderNames.Contains (x.Name)); } Another option might be to allow the user of your application to configure which folder he or she wants to use as their Sent folder, Drafts folder, Trash folder, etc. How you handle this is up to you. Contributing The first thing you'll need to do is fork MailKit to your own GitHub repository. Once you do that, git clone git@github.com/<your-account>/MailKit.git  If you use Xamarin Studio or MonoDevelop, all of the solution files are configured with the coding style used by MailKit. If you use Visual Studio or some other editor, please try to maintain the existing coding style as best as you can. Once you've got some changes that you'd like to submit upstream to the official MailKit repository, simply send me a Pull Request and I will try to review your changes in a timely manner. If you'd like to contribute but don't have any particular features in mind to work on, check out the issue tracker and look for something that might pique your interest! Donate MailKit is a personal open source project that I have put thousands of hours into perfecting with the goal of making it not only the very best email framework for .NET, but the best email framework for any programming language. I need your help to achieve this. Reporting Bugs Have a bug or a feature request? Please open a new issue. Before opening a new issue, please search for existing issues to avoid submitting duplicates. If MailKit does not work with your mail server, please include a protocol log in your bug report, otherwise there is nothing I can do to fix the problem. Documentation API documentation can be found at http://mimekit.net/docs. A copy of the xml formatted API documentation is also included in the NuGet and/or Xamarin Component package. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jstedfast/MailKit"	"A complete cross-platform mail stack including IMAP, POP3, SMTP, authentication and more. Built on top of MimeKit."	"true"
"Mail"	"MimeKit"	"https://github.com/jstedfast/MimeKit"	"A cross-platform.NET MIME creation and parser library with support for S/MIME, PGP, TNEF and Unix mbox spools."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"450"	"56"	"98"	"GitHub - jstedfast/MimeKit: A cross-platform .NET MIME creation and parser library with support for S/MIME, PGP, DKIM, TNEF and Unix mbox spools. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 56 Star 450 Fork 98 jstedfast/MimeKit Code Issues 0 Pull requests 1 Pulse Graphs A cross-platform .NET MIME creation and parser library with support for S/MIME, PGP, DKIM, TNEF and Unix mbox spools. http://www.mimekit.net 1,970 commits 2 branches 43 releases 13 contributors C# 81.7% HTML 18.3% C# HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 1.4.0 1.2.25 1.2.24 1.2.23 1.2.22 1.2.21 1.2.20 1.2.19 1.2.18 1.2.17 1.2.16 1.2.15 1.2.14 1.2.13 1.2.12 1.2.11 1.2.10 1.2.9 1.2.8 1.2.7 1.2.6 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.0.15 1.0.14 1.0.13 1.0.12 1.0.11 1.0.10 1.0.9 1.0.8 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit f1a582b Jul 13, 2016 jstedfast Fixed QuotedPrintableDecoder to handle soft breaks that fall on a buf… … …fer boundary Permalink Failed to load latest commit information. .nuget Updated opencover and coveralls nugets Aug 14, 2015 Documentation Fixed MimeKit.Documentation.sln Jun 30, 2015 MimeKit Fixed QuotedPrintableDecoder to handle soft breaks that fall on a buf… Jul 13, 2016 Mono.Data.Sqlite Bumped Mono.Data.Sqlite TargetFrameworkVersion to .NET 4.5 Aug 11, 2015 UnitTests Make sure to skip LWSP following the '<' token in a mailbox address Jun 12, 2016 component bumped version to 1.4.0 Jun 30, 2016 lib Moved the sqlite3.dll back to lib Jan 5, 2014 nuget updated samples Jul 1, 2016 rfc Added rfc1892.txt for multipart/report Feb 11, 2016 samples updated samples Jul 1, 2016 submodules Fixed .gitmodules Jan 6, 2016 .gitattributes Fixed .gitattributes Jul 9, 2015 .gitignore Ignore the .user files used by VS2015 Dec 4, 2015 .gitmodules Fixed .gitmodules Jan 7, 2016 .travis.yml Added MimeKit.Net45.sln and MimeKit.Documentation.sln May 31, 2015 FAQ.md Update FAQ.md Mar 30, 2016 License.md Updated License.md Jan 1, 2016 Makefile Updated documentation Jul 11, 2014 MimeKit.Documentation.sln Fixed MimeKit.Documentation.sln Jun 30, 2015 MimeKit.Mobile.sln Updated to use submodules and hooked up automated builds Jun 29, 2015 MimeKit.Net40.sln Use official BouncyCastle packages from NuGet.org May 4, 2016 MimeKit.Net45.sln Use official BouncyCastle packages from NuGet.org May 4, 2016 MimeKit.sln Use official BouncyCastle packages from NuGet.org May 4, 2016 MimeKitLite.sln Updated to use submodules and hooked up automated builds Jun 29, 2015 README.md Update README.md Jun 20, 2016 RFCs.md Added rfc1892.txt for multipart/report Feb 11, 2016 ReleaseNotes.md bumped version to 1.4.0 Jun 30, 2016 appveyor.yml bumped version to 1.4.0 Jun 30, 2016 cov-build.bat Added cov-build.bat May 31, 2015 disposable.patch Added disposable.patch to make MimeMessage disposable Aug 14, 2015 release.bat Fixed release.bat Jun 1, 2015 README.md MimeKit Build Status Code Coverage Static Analysis Linux/Mac Windows What is MimeKit? MimeKit is a C# library which may be used for the creation and parsing of messages using the Multipurpose Internet Mail Extension (MIME), as defined by numerous IETF specifications. History As a developer and user of email clients, I had come to realize that the vast majority of email client (and server) software had less-than-satisfactory MIME implementations. More often than not these email clients created broken MIME messages and/or would incorrectly try to parse a MIME message thus subtracting from the full benefits that MIME was meant to provide. MimeKit is meant to address this issue by following the MIME specification as closely as possible while also providing programmers with an extremely easy to use high-level API. This led me, at first, to implement another MIME parser library called GMime which is implemented in C and later added a C# binding called GMime-Sharp. Now that I typically find myself working in C# rather than lower level languages like C, I decided to begin writing a new parser in C# which would not depend on GMime. This would also allow me to have more flexibility in that I'd be able to use Generics and create a more .NET-compliant API. Performance While mainstream beliefs may suggest that C# can never be as fast as C, it turns out that with a bit of creative parser design and a few clever optimizations [1] [2], MimeKit's performance is actually on par with GMime. Since GMime is pretty well-known as a high-performance native MIME parser and MimeKit more-or-less matches GMime's performance, it stands to reason that MimeKit is likely unsurpassed in performance in the .NET MIME parser space. For a comparison, as I blogged here (I have since optimized MimeKit by at least another 30%), MimeKit is more than 25x faster than OpenPOP.NET, 75x faster than SharpMimeTools, and 65x faster than regex-based parsers. Even the commercial MIME parser offerings such as LimiLabs' Mail.dll and NewtonIdeas' Mime4Net cannot even come close to matching MimeKit's performance (they are both orders of magnitude slower than MimeKit). For comparison purposes, I've published a MIME parser benchmark to make it easier for anyone else to compare the performance of MimeKit to their favourite MIME parser. Here are the results: Parsing startrek.msg (1000 iterations): MimeKit:        0.6989221 seconds OpenPop:        25.3056064 seconds AE.Net.Mail:    17.5971438 seconds MailSystem.NET: 26.3891218 seconds MIMER:          76.4538978 seconds  Parsing xamarin3.msg (1000 iterations): MimeKit:        3.4215505 seconds OpenPop:        159.3308053 seconds AE.Net.Mail:    132.3044291 seconds MailSystem.NET: 133.5832078 seconds MIMER:          784.433441 seconds  How does your MIME parser compare? License Information MimeKit is Copyright (C) 2012-2016 Xamarin Inc. and is licensed under the MIT license: Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  Installing via NuGet The easiest way to install MimeKit is via NuGet. In Visual Studio's Package Manager Console, simply enter the following command: Install-Package MimeKit  Building First, you'll need to clone MimeKit from my GitHub repository: git clone https://github.com/jstedfast/MimeKit.git cd MimeKit git submodule update --init --recursive  In the top-level MimeKit source directory, there are several solution files: MimeKit.sln includes projects for .NET 3.5, .NET 4.0, .NET 4.5, PCL (Profile7 and Profile111), Xamarin.Android, and Xamarin.iOS as well as the unit tests. MimeKit.Mobile.sln just includes the Xamarin.Android and Xamarin.iOS projects. MimeKit.Net40.sln just includes the .NET 4.0 project. MimeKit.Net45.sln includes the .NET 4.5 project and the unit tests. If you don't have the Xamarin products, you'll probably want to open the MimeKit.Net45.sln instead of MimeKit.sln. Once you've opened the appropriate MimeKit solution file in either Xamarin Studio or Visual Studio 2010+ (either will work), you can simply choose the Debug or Release build configuration and then build. Note: The Release build will generate the xml API documentation, but the Debug build will not. Using MimeKit Parsing Messages One of the more common operations that MimeKit is meant for is parsing email messages from arbitrary streams. There are two ways of accomplishing this task. The first way is to use one of the Load() methods on MimeKit.MimeMessage: // Load a MimeMessage from a stream var message = MimeMessage.Load (stream); The second way is to use the MimeParser class. For the most part, using the MimeParser directly is not necessary unless you wish to parse a Unix mbox file stream. However, this is how you would do it: // Load a MimeMessage from a stream var parser = new MimeParser (stream, MimeFormat.Entity); var message = parser.ParseMessage (); For Unix mbox file streams, you would use the parser like this: // Load every message from a Unix mbox var parser = new MimeParser (stream, MimeFormat.Mbox); while (!parser.IsEndOfStream) {     var message = parser.ParseMessage ();      // do something with the message } Getting the Body of a Message A common misunderstanding about email is that there is a well-defined message body and then a list of attachments. This is not really the case. The reality is that MIME is a tree structure of content, much like a file system. Luckily, MIME does define a set of general rules for how mail clients should interpret this tree structure of MIME parts. The Content-Disposition header is meant to provide hints to the receiving client as to which parts are meant to be displayed as part of the message body and which are meant to be interpreted as attachments. The Content-Disposition header will generally have one of two values: inline or attachment. The meaning of these value should be fairly obvious. If the value is attachment, then the content of said MIME part is meant to be presented as a file attachment separate from the core message. However, if the value is inline, then the content of that MIME part is meant to be displayed inline within the mail client's rendering of the core message body. If the Content-Disposition header does not exist, then it should be treated as if the value were inline. Technically, every part that lacks a Content-Disposition header or that is marked as inline, then, is part of the core message body. There's a bit more to it than that, though. Modern MIME messages will often contain a multipart/alternative MIME container which will generally contain a text/plain and text/html version of the text that the sender wrote. The text/html version is typically formatted much closer to what the sender saw in his or her WYSIWYG editor than the text/plain version. The reason for sending the message text in both formats is that not all mail clients are capable of displaying HTML. The receiving client should only display one of the alternative views contained within the multipart/alternative container. Since alternative views are listed in order of least faithful to most faithful with what the sender saw in his or her WYSIWYG editor, the receiving client should walk over the list of alternative views starting at the end and working backwards until it finds a part that it is capable of displaying. Example: multipart/alternative   text/plain   text/html  As seen in the example above, the text/html part is listed last because it is the most faithful to what the sender saw in his or her WYSIWYG editor when writing the message. To make matters even more complicated, sometimes modern mail clients will use a multipart/related MIME container instead of a simple text/html part in order to embed images and other content within the HTML. Example: multipart/alternative   text/plain   multipart/related     text/html     image/jpeg     video/mp4     image/png  In the example above, one of the alternative views is a multipart/related container which contains an HTML version of the message body that references the sibling video and images. Now that you have a rough idea of how a message is structured and how to interpret various MIME entities, the next step is learning how to traverse the MIME tree using MimeKit. Note: For your convenience, MimeKit's MimeMessage class has two properties that can help you get the text/plain or text/html version of the message body. These are TextBody and HtmlBody, respectively. Keep in mind, however, that at least with the HtmlBody property, it may be that the HTML part is a child of a multipart/related, allowing it to refer to images and other types of media that are also contained within that multipart/related entity. This property is really only a convenience property and is not a really good substitute for traversing the MIME structure yourself so that you may properly interpret related content. Traversing a MimeMessage The MimeMessage.Body is the top-level MIME entity of the message. Generally, it will either be a TextPart or a Multipart. As an example, if you wanted to rip out all of the attachments of a message, your code might look something like this: var attachments = new List<MimePart> (); var multiparts = new List<Multipart> (); var iter = new MimeIterator (message);  // collect our list of attachments and their parent multiparts while (iter.MoveNext ()) {     var multipart = iter.Parent as Multipart;     var part = iter.Current as MimePart;      if (multipart != null && part != null && part.IsAttachment) {         // keep track of each attachment's parent multipart         multiparts.Add (multipart);         attachments.Add (part);     } }  // now remove each attachment from its parent multipart... for (int i = 0; i < attachments.Count; i++)     multiparts[i].Remove (attachments[i]); Quick and Dirty Enumeration of Message Body Parts If you would rather skip the proper way of traversing a MIME tree, another option that MimeKit provides is a simple enumerator over the message's body parts in a flat (depth-first) list. You can access this flat list via the BodyParts property, like so: foreach (var part in message.BodyParts) {    // do something } Another helper property on the MimeMessage class is the Attachments property which works much the same way as the BodyParts property except that it will only contain MIME parts which have a Content-Disposition header value that is set to attachment. Getting the Decoded Content of a MIME Part At some point, you're going to want to extract the decoded content of a MimePart (such as an image) and save it to disk or feed it to a UI control to display it. Once you've found the MimePart object that you'd like to extract the content of, here's how you can save the decoded content to a file: // This will get the name of the file as specified by the sending mail client. // Note: this value *may* be null, so you'll want to handle that case in your code. var fileName = part.FileName;  using (var stream = File.Create (fileName)) {     part.ContentObject.DecodeTo (stream); } You can also get access to the original raw content by ""opening"" the ContentObject. This might be useful if you want to pass the content off to a UI control that can do its own loading from a stream. using (var stream = part.ContentObject.Open ()) {     // At this point, you can now read from the stream as if it were the original,     // raw content. Assuming you have an image UI control that could load from a     // stream, you could do something like this:     imageControl.Load (stream); } There are a number of useful filters that can be applied to a FilteredStream, so if you find this type of interface appealing, I suggest taking a look at the available filters in the MimeKit.IO.Filters namespace or even write your own! The possibilities are limited only by your imagination. Creating a Simple Message Creating MIME messages using MimeKit is really trivial. var message = new MimeMessage (); message.From.Add (new MailboxAddress (""Joey"", ""joey@friends.com"")); message.To.Add (new MailboxAddress (""Alice"", ""alice@wonderland.com"")); message.Subject = ""How you doin?"";  message.Body = new TextPart (""plain"") {     Text = @""Hey Alice,  What are you up to this weekend? Monica is throwing one of her parties on Saturday and I was hoping you could make it.  Will you be my +1?  -- Joey "" }; A TextPart is a leaf-node MIME part with a text media-type. The first argument to the TextPart constructor specifies the media-subtype, in this case, ""plain"". Another media subtype you are probably familiar with is the ""html"" subtype. Some other examples include ""enriched"", ""rtf"", and ""csv"". The Text property is the easiest way to both get and set the string content of the MIME part. Creating a Message with Attachments Attachments are just like any other MimePart, the only difference is that they typically have a Content-Disposition header with a value of ""attachment"" instead of ""inline"" or no Content-Disposition header at all. Typically, when a mail client adds attachments to a message, it will create a multipart/mixed part and add the text body part and all of the file attachments to the multipart/mixed. Here's how you can do that with MimeKit: var message = new MimeMessage (); message.From.Add (new MailboxAddress (""Joey"", ""joey@friends.com"")); message.To.Add (new MailboxAddress (""Alice"", ""alice@wonderland.com"")); message.Subject = ""How you doin?"";  // create our message text, just like before (except don't set it as the message.Body) var body = new TextPart (""plain"") {     Text = @""Hey Alice,  What are you up to this weekend? Monica is throwing one of her parties on Saturday and I was hoping you could make it.  Will you be my +1?  -- Joey "" };  // create an image attachment for the file located at path var attachment = new MimePart (""image"", ""gif"") {     ContentObject = new ContentObject (File.OpenRead (path), ContentEncoding.Default),     ContentDisposition = new ContentDisposition (ContentDisposition.Attachment),     ContentTransferEncoding = ContentEncoding.Base64,     FileName = Path.GetFileName (path) };  // now create the multipart/mixed container to hold the message text and the // image attachment var multipart = new Multipart (""mixed""); multipart.Add (body); multipart.Add (attachment);  // now set the multipart/mixed as the message body message.Body = multipart; Of course, that is just a simple example. A lot of modern mail clients such as Outlook or Thunderbird will send out both a text/html and a text/plain version of the message text. To do this, you'd create a TextPart for the text/plain part and a TextPart for the text/html part and then add them to a multipart/alternative like so: var attachment = CreateAttachment (); var plain = CreateTextPlainPart (); var html = CreateTextHtmlPart ();  // Note: it is important that the text/html part is added second, because it is the // most expressive version and (probably) the most faithful to the sender's WYSIWYG  // editor. var alternative = new Multipart (""alternative""); alternative.Add (plain); alternative.Add (html);  // now create the multipart/mixed container to hold the multipart/alternative // and the image attachment var multipart = new Multipart (""mixed""); multipart.Add (alternative); multipart.Add (attachment);  // now set the multipart/mixed as the message body message.Body = multipart; Creating a Message Using a BodyBuilder (not Arnold Schwarzenegger) If you are used to System.Net.Mail's API for creating messages, you will probably find using a BodyBuilder much more friendly than manually creating the tree of MIME parts. Here's how you could create a message body using a BodyBuilder: var message = new MimeMessage (); message.From.Add (new MailboxAddress (""Joey"", ""joey@friends.com"")); message.To.Add (new MailboxAddress (""Alice"", ""alice@wonderland.com"")); message.Subject = ""How you doin?"";  var builder = new BodyBuilder ();  // Set the plain-text version of the message text builder.TextBody = @""Hey Alice,  What are you up to this weekend? Monica is throwing one of her parties on Saturday and I was hoping you could make it.  Will you be my +1?  -- Joey "";  // generate a Content-Id for the image we'll be referencing var contentId = MimeUtils.GenerateMessageId ();  // Set the html version of the message text builder.HtmlBody = string.Format (@""<p>Hey Alice,<br> <p>What are you up to this weekend? Monica is throwing one of her parties on Saturday and I was hoping you could make it.<br> <p>Will you be my +1?<br> <p>-- Joey<br> <center><img src=""""cid:{0}"""" alt=""""selfie.jpg""""></center>"", contentId);  // Since selfie.jpg is referenced from the html text, we'll need to add it // to builder.LinkedResources and then set the Content-Id header value builder.LinkedResources.Add (@""C:\Users\Joey\Documents\Selfies\selfie.jpg""); builder.LinkedResources[0].ContentId = contentId;  // We may also want to attach a calendar event for Monica's party... builder.Attachments.Add (@""C:\Users\Joey\Documents\party.ics"");  // Now we just need to set the message body and we're done message.Body = builder.ToMessageBody (); Preparing to use MimeKit's S/MIME support Before you can begin using MimeKit's S/MIME support, you will need to decide which database to use for certificate storage. If you are targetting any of the Xamarin platforms (or Linux), you won't need to do anything (although you certainly can if you want to) because, by default, I've configured MimeKit to use the Mono.Data.Sqlite binding to SQLite. If you are, however, on any of the Windows platforms, you'll need to pick a System.Data provider such as System.Data.SQLite. Once you've made your choice and installed it (via NuGet or however), you'll need to implement your own SecureMimeContext subclass. Luckily, it's very simple to do. Assuming you've chosen System.Data.SQLite, here's how you'd implement your own SecureMimeContext class: using System.Data.SQLite; using MimeKit.Cryptography;  using MyAppNamespace {     class MySecureMimeContext : DefaultSecureMimeContext     {         public MySecureMimeContext () : base (OpenDatabase (""C:\\wherever\\certdb.sqlite""))         {         }          static IX509CertificateDatabase OpenDatabase (string fileName)         {             var builder = new SQLiteConnectionStringBuilder ();             builder.DateTimeFormat = SQLiteDateFormats.Ticks;             builder.DataSource = fileName;              if (!File.Exists (fileName))                 SQLiteConnection.CreateFile (fileName);              var sqlite = new SQLiteConnection (builder.ConnectionString);             sqlite.Open ();              return new SqliteCertificateDatabase (sqlite, ""password"");         }     } } Now that you've implemented your own SecureMimeContext, you'll want to register it with MimeKit: CryptographyContext.Register (typeof (MySecureMimeContext)); Now you are ready to encrypt, decrypt, sign and verify S/MIME messages! Preparing to use MimeKit's PGP/MIME support Like with S/MIME support, you also need to register your own OpenPgpContext. Unlike S/MIME, however, you don't need to choose a database if you subclass GnuPGContext because it uses GnuPG's PGP keyrings to load and store public and private keys. If you choose to subclass GnuPGContext, the only thing you you need to do is implement a password callback method: using MimeKit.Cryptography;  namespace MyAppNamespace {     class MyGnuPGContext : GnuPGContext     {         public MyGnuPgContext () : base ()         {         }          protected override string GetPasswordForKey (PgpSecretKey key)         {             // prompt the user (or a secure password cache) for the password for the specified secret key.             return ""password"";         }     } } Once again, to register your OpenPgpContext, you can use the following code snippet: CryptographyContext.Register (typeof (MyGnuPGContext)); Now you are ready to encrypt, decrypt, sign and verify PGP/MIME messages! Encrypting Messages with S/MIME S/MIME uses an application/pkcs7-mime MIME part to encapsulate encrypted content (as well as other things). var joey = new MailboxAddress (""Joey"", ""joey@friends.com""); var alice = new MailboxAddress (""Alice"", ""alice@wonderland.com"");  var message = new MimeMessage (); message.From.Add (joey); message.To.Add (alice); message.Subject = ""How you doin?"";  // create our message body (perhaps a multipart/mixed with the message text and some // image attachments, for example) var body = CreateMessageBody ();  // now to encrypt our message body using our custom S/MIME cryptography context using (var ctx = new MySecureMimeContext ()) {     // Note: this assumes that ""Alice"" has an S/MIME certificate with an X.509     // Subject Email identifier that matches her email address. If she doesn't,     // try using a SecureMailboxAddress which allows you to specify the     // fingerprint of her certificate to use for lookups.     message.Body = ApplicationPkcs7Mime.Encrypt (ctx, message.To.Mailboxes, body); } Decrypting S/MIME Messages As mentioned earlier, S/MIME uses an application/pkcs7-mime part with an ""smime-type"" parameter with a value of ""enveloped-data"" to encapsulate the encrypted content. The first thing you must do is find the ApplicationPkcs7Mime part (see the section on traversing MIME parts). if (entity is ApplicationPkcs7Mime) {     var pkcs7 = (ApplicationPkcs7Mime) entity;      if (pkcs7.SecureMimeType == SecureMimeType.EnvelopedData)         return pkcs7.Decrypt (); } Encrypting Messages with PGP/MIME Unlike S/MIME, PGP/MIME uses multipart/encrypted to encapsulate its encrypted data. var joey = new MailboxAddress (""Joey"", ""joey@friends.com""); var alice = new MailboxAddress (""Alice"", ""alice@wonderland.com"");  var message = new MimeMessage (); message.From.Add (joey); message.To.Add (alice); message.Subject = ""How you doin?"";  // create our message body (perhaps a multipart/mixed with the message text and some // image attachments, for example) var body = CreateMessageBody ();  // now to encrypt our message body using our custom PGP/MIME cryptography context using (var ctx = new MyGnuPGContext ()) {     // Note: this assumes that ""Alice"" has a public PGP key that matches her email     // address. If she doesn't, try using a SecureMailboxAddress which allows you     // to specify the fingerprint of her public PGP key to use for lookups.     message.Body = MultipartEncrypted.Encrypt (ctx, message.To.Mailboxes, body); } Decrypting PGP/MIME Messages As mentioned earlier, PGP/MIME uses a multipart/encrypted part to encapsulate the encrypted content. A multipart/encrypted contains exactly 2 parts: the first MimeEntity is the version information while the second MimeEntity is the actual encrypted content and will typically be an application/octet-stream. The first thing you must do is find the MultipartEncrypted part (see the section on traversing MIME parts). if (entity is MultipartEncrypted) {     var encrypted = (MultipartEncrypted) entity;      return encrypted.Decrypt (); } Digitally Signing Messages with S/MIME or PGP/MIME Both S/MIME and PGP/MIME use a multipart/signed to contain the signed content and the detached signature data. Here's how you might digitally sign a message using S/MIME: var joey = new MailboxAddress (""Joey"", ""joey@friends.com""); var alice = new MailboxAddress (""Alice"", ""alice@wonderland.com"");  var message = new MimeMessage (); message.From.Add (joey); message.To.Add (alice); message.Subject = ""How you doin?"";  // create our message body (perhaps a multipart/mixed with the message text and some // image attachments, for example) var body = CreateMessageBody ();  // now to digitally sign our message body using our custom S/MIME cryptography context using (var ctx = new MySecureMimeContext ()) {     // Note: this assumes that ""Joey"" has an S/MIME signing certificate and private key     // with an X.509 Subject Email identifier that matches Joey's email address.     message.Body = MultipartSigned.Create (ctx, joey, DigestAlgorithm.Sha1, body); } For S/MIME, if you have a way for the user to configure which S/MIME certificate to use as their signing certificate, you could also do something more like this: // now to digitally sign our message body using our custom S/MIME cryptography context using (var ctx = new MySecureMimeContext ()) {     var certificate = GetJoeysX509Certificate ();     var signer = new CmsSigner (certificate);     signer.DigestAlgorithm = DigestAlgorithm.Sha1;      message.Body = MultipartSigned.Create (ctx, signer, body); } If you'd prefer to use PGP instead of S/MIME, things work almost exactly the same except that you would use an OpenPGP cryptography context. For example, you might use a subclass of the GnuPGContext that comes with MimeKit if you want to re-use the user's GnuPG keyrings (you can't use GnuPGContext directly because it has no way of prompting the user for their passphrase). For the sake of this example, let's pretend that you've written a minimal subclass of MimeKit.Cryptography.GnuPGContext that simply overrides the GetPassword() method and that this subclass is called MyGnuPGContext. // now to digitally sign our message body using our custom OpenPGP cryptography context using (var ctx = new MyGnuPGContext ()) {     // Note: this assumes that ""Joey"" has a PGP key that matches his email address.     message.Body = MultipartSigned.Create (ctx, joey, DigestAlgorithm.Sha1, body); } Just like S/MIME, however, you can also do your own PGP key lookups instead of relying on email addresses to match up with the user's private key. // now to digitally sign our message body using our custom OpenPGP cryptography context using (var ctx = new MyGnuPGContext ()) {     var key = GetJoeysPrivatePgpKey ();     message.Body = MultipartSigned.Create (ctx, key, DigestAlgorithm.Sha1, body); } Verifying S/MIME and PGP/MIME Digital Signatures As mentioned earlier, both S/MIME and PGP/MIME typically use a multipart/signed part to contain the signed content and the detached signature data. A multipart/signed contains exactly 2 parts: the first MimeEntity is the signed content while the second MimeEntity is the detached signature and, by default, will either be an ApplicationPgpSignature part or an ApplicationPkcs7Signature part (depending on whether the sending client signed using OpenPGP or S/MIME). Because the multipart/signed part may have been signed by multiple signers, it is important to verify each of the digital signatures (one for each signer) that are returned by the MultipartSigned.Verify() method: if (entity is MultipartSigned) {     var signed = (MultipartSigned) entity;      foreach (var signature in signed.Verify ()) {         try {             bool valid = signature.Verify ();              // If valid is true, then it signifies that the signed content has not been             // modified since this particular signer signed the content.             //             // However, if it is false, then it indicates that the signed content has             // been modified.         } catch (DigitalSignatureVerifyException) {             // There was an error verifying the signature.         }     } } It should be noted, however, that while most S/MIME clients will use the preferred multipart/signed approach, it is possible that you may encounter an application/pkcs7-mime part with an ""smime-type"" parameter set to ""signed-data"". Luckily, MimeKit can handle this format as well: if (entity is ApplicationPkcs7Mime) {     var pkcs7 = (ApplicationPkcs7Mime) entity;      if (pkcs7.SecureMimeType == SecureMimeType.SignedData) {         // extract the original content and get a list of signatures         MimeEntity extracted;          // Note: if you are rendering the message, you'll want to render the         // extracted mime part rather than the application/pkcs7-mime part.         foreach (var signature in pkcs7.Verify (out extracted)) {             try {                 bool valid = signature.Verify ();                  // If valid is true, then it signifies that the signed content has not                 // been modified since this particular signer signed the content.                 //                 // However, if it is false, then it indicates that the signed content                 // has been modified.             } catch (DigitalSignatureVerifyException) {                 // There was an error verifying the signature.             }         }     } } Contributing The first thing you'll need to do is fork MimeKit to your own GitHub repository. Once you do that, git clone git@github.com/<your-account>/MimeKit.git  If you use Xamarin Studio or MonoDevelop, all of the solution files are configured with the coding style used by MimeKit. If you use Visual Studio or some other editor, please try to maintain the existing coding style as best as you can. Once you've got some changes that you'd like to submit upstream to the official MimeKit repository, simply send me a Pull Request and I will try to review your changes in a timely manner. If you'd like to contribute but don't have any particular features in mind to work on, check out the issue tracker and look for something that might pique your interest! Donate MimeKit is a personal open source project that I have put thousands of hours into perfecting with the goal of making it not only the very best MIME parser framework for .NET, but the best MIME parser framework for any programming language. I need your help to achieve this. Donating helps pay for things such as web hosting and licenses for developer tools such as a performance profiler, memory profiler, a static code analysis tool, and more. Reporting Bugs Have a bug or a feature request? Please open a new issue. Before opening a new issue, please search for existing issues to avoid submitting duplicates. Documentation API documentation can be found at http://mimekit.net/docs. A copy of the xml formatted API documentation is also included in the NuGet and/or Xamarin Component package. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jstedfast/MimeKit"	"A cross-platform.NET MIME creation and parser library with support for S/MIME, PGP, TNEF and Unix mbox spools."	"true"
"Mail"	"PreMailer.Net"	"https://github.com/milkshakesoftware/PreMailer.Net"	"C# library that moves your stylesheets to inline style attributes, for maximum compatibility with E-mail clients."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"243"	"33"	"60"	"GitHub - milkshakesoftware/PreMailer.Net: C# library that moves your stylesheets to inline style attributes, for maximum compatibility with E-mail clients. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 33 Star 243 Fork 60 milkshakesoftware/PreMailer.Net Code Issues 27 Pull requests 1 Pulse Graphs C# library that moves your stylesheets to inline style attributes, for maximum compatibility with E-mail clients. http://milkshakesoftware.github.com/PreMailer.Net/ 197 commits 4 branches 21 releases 16 contributors C# 99.7% Batchfile 0.3% C# Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dotnet-core gh-pages master truncate-issue Nothing to show v1.5.3 v1.5.2 v1.5.1 v1.5.0 v1.4.3 v1.4.2 v1.4.1 v1.4.0 v1.3.1 v1.3.0 v1.2.9 v1.2.8 v1.2.7 v1.2.6 v1.2.5 v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.3 Nothing to show New pull request Latest commit dfa7469 Jun 8, 2016 martinnormark Merge pull request #112 from dotmailer/master … Fix for occasional crash due to unsupported URI schemes Permalink Failed to load latest commit information. PreMailer.Net Re-tabifying documents to match project style Jun 8, 2016 .gitignore Ignore opencover's report file Feb 24, 2016 LICENSE Add license Jun 11, 2013 README.md Fix typos May 19, 2016 icon.png Added icon for NU Get package Sep 12, 2011 README.md PreMailer.Net C# Library for moving CSS to inline style attributes, to gain maximum E-mail client compatibility. Usage Static method on PreMailer class string htmlSource = File.ReadAllText(@""C:\Workspace\testmail.html"");  var result = PreMailer.MoveCssInline(htmlSource);  result.Html         // Resultant HTML, with CSS in-lined. result.Warnings     // string[] of any warnings that occurred during processing. Set up PreMailer instance string htmlSource = File.ReadAllText(@""C:\Workspace\testmail.html"");  var pm = new PreMailer(htmlSource); pm.AddAnalyticsTags(source, medium, campaign, content, domain = null); // Optional to add analytics tags  var result = pm.MoveCssInline(...);  result.Html         // Resultant HTML, with CSS in-lined. result.Warnings     // string[] of any warnings that occurred during processing. Options The following options can be passed to the PreMailer.MoveCssInline method to configure it's behaviour: baseUri(Uri = null) - Base URL to apply to link elements with href values ending with .css. removeStyleElements(bool = false) - Removes elements that were used to source CSS (currently, only style is supported). ignoreElements(string = null) - CSS selector of element(s) not to inline. Useful for mobile styles (see below). css(string = null) - A string containing a style-sheet for inlining. stripIdAndClassAttributes(bool = false) - True to strip ID and class attributes. removeComments(bool = false) - True to remove comments, false to leave them intact. External style sheets Sometimes it's handy to reference external style sheets with a <link href=""..."" /> element. PreMailer will download and use external style sheets as long as the value of href ends with .css. Both absolute and relative URLs are supported. If the URL is relative, you must specify the baseUri parameter in either the constructor, or when calling the static MoveCssInline method. <link /> elements that match the ignoreElements selector won't be downloaded. Media queries If you want to apply mobile styles to your e-mail, you should put your mobile specific styles in its own style block that targets the appropriate devices using media queries. But since you cannot know by the time of sending an e-mail whether or not it will be viewed on a mobile device, the style block that targets mobile devices should not be inlined! To ignore a style block, you need to specify an ignore selector when calling the MoveCssInline method, like this: var result = PreMailer.MoveCssInline(input, false, ignoreElements: ""#ignore""); And your mobile specific style block should have an ID of ignore: <style type=""text/css"" id=""ignore"">.target { width: 1337px; }</style> Premailer specific CSS becomes HTML attributes Premailer looks for the use of CSS attributes prefixed with -premailer and will proxy the value through to the DOM element as an attribute. For example table {     -premailer-cellspacing: 5;     -premailer-width: 500; } will make a table element render as <table cellspacing=""5"" width=""500""> Custom DOM Processing using(var pm = new PreMailer(html)){    var document = pm.Document;    // use AngleSharp to process document before moving css inline ...    var result = pm.MoveCssInline(); } Notes Pseudo classes/elements which not supported by external dependencies, or doesn't make sense in email, will be ignored and logged to the InlineResult.Warnings collection. Installation NuGet: PreMailer.Net Contributors martinnormark robcthegeek Among others License PreMailer.Net is available under the MIT license. See the LICENSE file for more info. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/milkshakesoftware/PreMailer.Net"	"C# library that moves your stylesheets to inline style attributes, for maximum compatibility with E-mail clients."	"true"
"Mathematics"	"MathNet"	"http://www.mathdotnet.com/"	"Math.NET is an opensource initiative to build and maintain toolkits covering fundamental mathematics, targetting advanced but also every day needs of.Net developers"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Math.NET Math.NET Math.NET is an opensource initiative to build and maintain toolkits covering fundamental mathematics, targetting advanced but also every day needs of .Net developers. GitHub NuGet Discussions @MathDotNet Numerical Computing Math.NET Numerics aims to provide methods and algorithms for numerical computations in science, engineering and every day use. Covered topics include special functions, linear algebra, probability models, random numbers, interpolation, integral transforms and more. Computer Algebra Math.NET Symbolics is a basic opensource computer algebra library for .Net and Mono, written entirely in F#. Signal Processing Math.NET Filtering (previously Neodym) aims to provide a toolkit for digital signal processing, offering an infrastructure for digital filter design, applying those filters to data streams using data converters, as well as digital signal generators. Geometry Math.NET Spatial aims to become a geometry library for .Net and Mono. Archived Projects Math.NET Iridium Math.NET Classic Math.NET Linq Algebra Math.NET Yttrium  "	"null"	"null"	"Math.NET is an opensource initiative to build and maintain toolkits covering fundamental mathematics, targetting advanced but also every day needs of.Net developers"	"true"
"Mathematics"	"Microsoft Automatic Graph Layout"	"https://github.com/Microsoft/automatic-graph-layout"	"A set of tools for graph layout and viewing."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"340"	"76"	"75"	"GitHub - Microsoft/automatic-graph-layout: A set of tools for graph layout and viewing Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 76 Star 340 Fork 75 Microsoft/automatic-graph-layout Code Issues 19 Pull requests 0 Wiki Pulse Graphs A set of tools for graph layout and viewing 137 commits 1 branch 0 releases 12 contributors JavaScript 58.0% C# 35.2% GLSL 6.3% TypeScript 0.4% CSS 0.1% Yacc 0.0% JavaScript C# GLSL TypeScript CSS Yacc Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit b85b869 Jun 21, 2016 levnach update readme … Signed-off-by: Lev Nachmanson <levnach@hotmail.com> Permalink Failed to load latest commit information. GraphLayout rename MSTOverlapRemoval to GTree Jun 16, 2016 .gitattributes first push of the sources, add reference to MSAGL to license Feb 25, 2015 .gitignore ignore VS LocalHistory extension's folder Jun 4, 2015 LICENSE first push of the sources, add reference to MSAGL to license Feb 26, 2015 README.md update readme Jun 21, 2016 README.md Microsoft Automatic Graph Layout A set of tools for graph layout and viewing The simplest way to start with MSAGL in C# is to open GraphLayout.sln in Visual Studio 2013, and have a look at Samples there. MSAGL is a .NET tool for graph layout and viewing. It was developed in Microsoft by Lev Nachmanson, Sergey Pupyrev, Tim Dwyer, Ted Hart, and Roman Prutkin. MSAGL is available as open source at https://github.com/Microsoft/automatic-graph-layout.git. The Distribution Content and Important Features The package contains the following: Layout engine (Microsoft.MSAGL.dll) - The core layout functionality. This component can be used directly in cases when visualization is handled by a tool other than MSAGL. Drawing module (Microsoft.MSAGL.Drawing.dll) - The Definitions of different drawing attributes like colors, line styles, etc. It also contains definitions of a node class, an edge class, and a graph class. By using these classes a user can create a graph object and use it later for layout, and rendering. Viewer control (Microsoft.MSAGL.GraphViewerGDIGraph.dll) - The viewer control, and some other rendering functionality. Some important features of the viewer are: Pan and Zoom of the graph. Forward and Backward navigation. Ability to configure tooltips and highlighting of graph entities. Ability to search for and focus on entities of the graph. Code Samples The code snippet demonstrates the basic usage of the viewer. It uses the C# language. The Viewer sample Drawing of the graph from the sampleDrawing of the graph from the sample using System; using System.Collections.Generic;  using System.Windows.Forms;  class ViewerSample {      public static void Main() {      //create a form          System.Windows.Forms.Form form = new System.Windows.Forms.Form();     //create a viewer object          Microsoft.Msagl.GraphViewerGdi.GViewer viewer = new Microsoft.Msagl.GraphViewerGdi.GViewer();     //create a graph object          Microsoft.Msagl.Drawing.Graph graph = new Microsoft.Msagl.Drawing.Graph(""graph"");     //create the graph content          graph.AddEdge(""A"", ""B"");         graph.AddEdge(""B"", ""C"");         graph.AddEdge(""A"", ""C"").Attr.Color = Microsoft.Msagl.Drawing.Color.Green;         graph.FindNode(""A"").Attr.FillColor = Microsoft.Msagl.Drawing.Color.Magenta;         graph.FindNode(""B"").Attr.FillColor = Microsoft.Msagl.Drawing.Color.MistyRose;         Microsoft.Msagl.Drawing.Node c = graph.FindNode(""C"");         c.Attr.FillColor = Microsoft.Msagl.Drawing.Color.PaleGreen;         c.Attr.Shape = Microsoft.Msagl.Drawing.Shape.Diamond;     //bind the graph to the viewer          viewer.Graph = graph;     //associate the viewer with the form          form.SuspendLayout();         viewer.Dock = System.Windows.Forms.DockStyle.Fill;         form.Controls.Add(viewer);         form.ResumeLayout();     //show the form          form.ShowDialog();     }  } More code samples… GraphMaps This functionality allows viewing a large graph in the online map fashion. Here is a video demoing GraphMaps. To see the system in action please open Lg.sln, build it, and run TestGraphMaps. The configuration Release/x64 needs to be used to load a large graph. The graph from the video can be found in GraphLayout/graphs/composers.zip. Please load composers.msagl to avoid the preprocessing step. If composers.dot is loaded then composers.msagl and the tiles directory composers.msagl_tiles will be regenerated. GraphMaps ideas, design, and the mathematics are described in a paper. Layouts Created by MSAGL This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Microsoft/automatic-graph-layout"	"A set of tools for graph layout and viewing."	"true"
"Media"	"TagLib#"	"https://github.com/mono/taglib-sharp"	"TagLib# (aka taglib-sharp) is a library for reading and writing metadata in media files, including video, audio, and photo formats"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"320"	"86"	"137"	"GitHub - mono/taglib-sharp: LIbrary for reading and writing metadata in media files Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 86 Star 320 Fork 137 mono/taglib-sharp Code Pull requests 6 Pulse Graphs LIbrary for reading and writing metadata in media files http://developer.novell.com/wiki/index.php/TagLib_Sharp 612 commits 3 branches 15 releases 30 contributors C# 99.2% Other 0.8% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags atsushi-200810 master messaging-2008 Nothing to show taglib-sharp-banshee-0.13.2 taglib-sharp-banshee-0.13.1 taglib-sharp-banshee-0.13.0 taglib-sharp-banshee-0.11.7 taglib-sharp-2.1.0.0 taglib-sharp-2.0.5.0 taglib-sharp-2.0.4.0 taglib-sharp-2.0.3.7 taglib-sharp-2.0.3.6 taglib-sharp-2.0.3.5 taglib-sharp-2.0.3.4 taglib-sharp-2.0.3.3 taglib-sharp-2.0.3.2 taglib-sharp-2.0.3.1 taglib-sharp-1-1-final Nothing to show New pull request Latest commit bf4181c Apr 19, 2016 decriptor Merge pull request #33 from Rrivera5127/master … do not require GPSAltitudeRef to return altitude Permalink Failed to load latest commit information. docs Fix monodocdir Feb 6, 2012 examples Extend fixture generator for XmpBag with multiple items. Oct 27, 2010 src Merge pull request #33 from Rrivera5127/master Apr 19, 2016 tests Changed Case in filename, since compile failed in Mono Apr 20, 2016 .editorconfig Editor config Apr 13, 2016 .gitignore Include the AssemblyInfo.cs file Oct 10, 2013 .gitmodules Remove raw-samples Jan 9, 2016 .travis.yml Print out test names Jan 14, 2016 AUTHORS Add Opus support and tests Jan 9, 2016 COPYING Initial import of taglib-sharp; moved from forge Aug 26, 2006 ChangeLog build: Prepare for 2.1.0.0 release Jul 3, 2012 Makefile.am build: Don't need the MONO_USER Jul 1, 2012 NEWS build: Prepare for 2.1.0.0 release Jul 3, 2012 README Update NEWS etc for 2.0.4.0 release Apr 13, 2011 autogen.sh Initial import of taglib-sharp; moved from forge Aug 26, 2006 configure.ac Merge branch 'inflateWithDeflateStream' of https://github.com/JohnTho… Jan 9, 2016 taglib-sharp.pc.in Initial import of taglib-sharp; moved from forge Aug 26, 2006 taglib-sharp.sln Solution code formatting policy Jun 30, 2012 taglib-sharp.snk Initial import of taglib-sharp; moved from forge Aug 26, 2006 README TagLib# (aka taglib-sharp) is a library for reading and writing metadata in media files, including video, audio, and photo formats.  It is API stable, with only API additions (not changes or removals) occuring in the 2.0 series.   * Bugs:     http://bugzilla.gnome.org/browse.cgi?product=taglib-sharp  * Tarballs: http://download.banshee.fm/taglib-sharp/  * IRC:      Several TagLib# developers are often in #banshee on irc.gnome.org  * Git:      http://github.com/mono/taglib-sharp              git://github.com/mono/taglib-sharp.git  TagLib# is free/open source software, released under the LGPL. We welcome contributions!  Please try to match our coding style, and include unit tests with any patches.  Patches can be submitted by filing a bug and attaching the diff to it.  To Build From Git: git clone git://github.com/mono/taglib-sharp.git cd taglib-sharp ./autogen.sh && make  To Build From Tarball: ./configure && make  You can also build from MonoDevelop or Visual Studio using taglib-sharp.sln  To Test: make test  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mono/taglib-sharp"	"TagLib# (aka taglib-sharp) is a library for reading and writing metadata in media files, including video, audio, and photo formats"	"true"
"Metrics"	"C# StatsD Client"	"https://github.com/Pereingo/statsd-csharp-client"	"C# client for Etsy's StatsD"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"71"	"16"	"57"	"GitHub - Pereingo/statsd-csharp-client: Statsd C# Client Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 71 Fork 57 Pereingo/statsd-csharp-client Code Issues 5 Pull requests 2 Pulse Graphs Statsd C# Client 230 commits 1 branch 0 releases 16 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 6b56175 May 18, 2016 DarrellMozingo Merge pull request #60 from Suhvan/master … example fix Permalink Failed to load latest commit information. src Updated readme and smoke test with setup/teardown Apr 28, 2016 .gitignore Ignoring the NuGet packages folder Apr 6, 2014 CHANGELOG.md Update CHANGELOG.md Apr 28, 2016 MIT-LICENCE.md Create MIT-LICENCE.md Jun 21, 2013 README.md example fix May 18, 2016 StatsdClient.sln Moved solution file to the top level Oct 9, 2015 appveyor.yml Bumping minor version for new TCP functionality. Apr 28, 2016 README.md Statsd Client A C# client to interface with Etsy's excellent statsd server. Install the client via NuGet with the StatsdClient package. Usage At app startup, configure the Metrics class (other options are documented on MetricsConfig): Advices It's advisable to use UDP over TCP socket protocol (default is UDP). If you need TCP protocol maybe it's better to split that responsibility out to another app. (ie. have a statsd relay running on each server that you'd send UDP stats to, and it would then relay them in TCP) Examples Metrics.Configure(new MetricsConfig {   StatsdServerName = ""hostname"",   Prefix = ""myApp.prod"" }); Then start measuring all the things! Metrics.Counter(""stat-name""); Metrics.Time(() => myMethod(), ""stat-name""); Metrics.GaugeAbsoluteValue(""gauge-name"", 35); Metrics.GaugeDelta(""gauge-name"", -5); Metrics.Set(""something-special"", ""3""); You can also time with the disposable overload: using (Metrics.StartTimer(""stat-name"")) {   // Lots of code here } Including functions that return a value: var result = Metrics.Time(() => GetResult(), ""stat-name""); Development Please have a chat about any big features before submitting PR's NuGet is packaged as an artefact on AppVeyor above. Grab that *.nupkg and upload it to NuGet.org Change major/minor versions in appveyor.yml Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Pereingo/statsd-csharp-client"	"C# client for Etsy's StatsD"	"true"
"Micro Framework"	".NET Micro Framework Interpreter"	"https://github.com/NETMF/netmf-interpreter"	"Microsoft®.NET Micro Framework (NETMF) for developing embedded applications on small devices using Visual Studio"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"252"	"82"	"142"	"GitHub - NETMF/netmf-interpreter: .NET Micro Framework Interpreter Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 82 Star 252 Fork 142 NETMF/netmf-interpreter Code Issues 120 Pull requests 5 Wiki Pulse Graphs .NET Micro Framework Interpreter http://netmf.github.io/netmf-interpreter/ 659 commits 5 branches 3 releases 16 contributors C# 38.2% C++ 34.7% C 17.1% Perl 5.0% Makefile 2.0% Assembly 1.0% Other 2.0% C# C++ C Perl Makefile Assembly Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags Free-RTOS alljoyn dev gh-pages master Nothing to show v4.4-RTW-20-Oct-2015 v4.4-Beta-2015-JUL-06 NETMFCryptoLibraries Nothing to show New pull request Latest commit 513f5ae Jul 9, 2016 smaillet-ms committed on GitHub Merge pull request #469 from techcap/support_I2C2 … support I2C2 Permalink Failed to load latest commit information. Application Use UINT32 to avoid signed/unsigned mismatch in ConfigurationSectorMa… May 22, 2016 Assets/Logos change color May 18, 2016 CLR Merge pull request #456 from doingnz/OneWire Jul 9, 2016 CMSIS - moved/renamed CMSIS installation script to root as Install-cmsis.ps… Feb 28, 2016 DeviceCode Merge pull request #469 from techcap/support_I2C2 Jul 9, 2016 Fonts Initial commit Mar 9, 2015 Framework Change OneWire API to use a logical port number in the range 0..MAX_P… May 22, 2016 Product - Added Debug configuration suport to WinUSB to allow building Debug Feb 19, 2016 ProjectTemplates Cleanup: Deleted unused <CustomSpecific> tag from .proj files Aug 15, 2015 Solutions Merge pull request #424 from cw2/dev-cw2-stm32f429idiscovery Jul 9, 2016 Support split use of PLATFORM_WINDOWS into _MSC_VER, _WIN32, and PLATFORM_WIN… May 7, 2016 Test - Fixed Test Framework MSI generation so it builds for the correct ve… May 15, 2016 crypto - reverts FLAVOR_WIN changes from #399 to fix build targeting windows… Feb 27, 2016 setup - adding in support for legacy crypto, which was removed previously. … Sep 14, 2015 tools - added more comments Jun 19, 2016 .gitattributes Initial commit Mar 9, 2015 .gitignore - Refactored headers and code to allow SDK to build using new _WIN32,… May 8, 2016 BuildEnv.props Build SDK using only VS14 May 20, 2015 Install-BinTools.ps1 Added checks for an existing installation to Install-Tools.ps1 and In… May 12, 2016 Install-CMSIS.ps1 Added checks for an existing installation to Install-Tools.ps1 and In… May 13, 2016 License.txt Initial commit Mar 9, 2015 PK.proj - Set default for solution builds to Release Mar 19, 2015 README.md Add Gitter badge Apr 26, 2016 ReleaseInfo.settings Initial commit Mar 9, 2015 TinyCLR.sln Initial commit Mar 9, 2015 TinyCLR_server.sln Initial commit Mar 9, 2015 Update-DeviceSdkAssembly.ps1 split use of PLATFORM_WINDOWS into _MSC_VER, _WIN32, and PLATFORM_WIN… May 7, 2016 build.dirproj Initial commit Mar 9, 2015 build_sdk.cmd - Fixed handling of BuildShare and BuildBranch to strip off quotes pr… Feb 28, 2016 build_solution.cmd fixed build_solution.cmd so it uses call to call set_env and, therefo… Feb 29, 2016 dotNetMF.proj Initial commit Mar 9, 2015 mscorlibtests.txt - Fixed Test Framework MSI generation so it builds for the correct ve… May 15, 2016 run_tests.cmd - Fixed Test Framework MSI generation so it builds for the correct ve… May 15, 2016 sdk.dirproj removing legacy build infrastrucutre Mar 12, 2015 setenv_base.cmd - Update build scripts to support standard distribution from Launchpa… Jun 11, 2015 setenv_gcc.cmd - Update build scripts to support standard distribution from Launchpa… Jun 11, 2015 setenv_mdk.cmd - removed RVDS targets and settings as MDK and RVDS now share the sam… May 21, 2015 setenv_vs.cmd changed setenv_vs to use VS2015 as the default. May 19, 2015 std_vcxproj.props Initial commit Mar 9, 2015 README.md .NET Micro Framework Interpreter Welcome to the .NET Micro Framework interpreter GitHub repository. The Microsoft® .NET Micro Framework combines the reliability and efficiency of managed code with the premier development tools of Microsoft Visual Studio® to deliver exceptional productivity for developing embedded applications on small devices. The Microsoft .NET Micro Framework SDK supports development of code, including device I/O, in the C# language using a subset of the .NET libraries, and is fully integrated with the Microsoft Visual Studio® development environment. The .NET Micro Framework class library supports all major namespaces and types from the desktop framework, managed drivers support, Remote Firmware Updates and Cryptographic functions for Secure Devices. This GitHub project allows building the full SDK and device Firmware images including the lwIP open source TCP/IP stack and the OpenSSL distribution. Wiki Docs Information on building the framework and internal development guides will appear on the wiki. If you have content that is relevant to the NETMF development community that you would like to contribute feel free to join in and participate in the future of the .NET Micro Framework. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/NETMF/netmf-interpreter"	"Microsoft®.NET Micro Framework (NETMF) for developing embedded applications on small devices using Visual Studio"	"true"
"Minification"	"Microsoft Ajax Minifier"	"http://ajaxmin.codeplex.com/"	"Contains JS and CSS minifiers which have a highest performance, because its have been specifically designed for.NET. Optionally produce Source Maps for JS code."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Microsoft Ajax Minifier - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In Microsoft Ajax Minifier home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe Project Description The Microsoft Ajax Minifier enables you to improve the performance of your web applications by reducing the size of your Cascading Style Sheet and JavaScript files. Minify both JS and CSS files, and now optionally produce Source Maps for JavaScript files. Use the -analyze option on the command-line to provide lint-style syntax checking and variable analysis of your code. Use the -pretty option on the command-line to output in a nice, easy-to-read multi-line format (good for un-minifying minified code). This project is the active source project for the Microsoft Ajax Minifier tool, and contains the latest version of the AjaxMin tool -- both binary drops and the source code, released under the Apache 2.0 Open Source License. External entities may not use the sources except in compliance with the License agreement, which can be found at http://www.apache.org/licenses/LICENSE-2.0. Should you choose to download the sources and build them yourself, you will need to provide your own AjaxMin.snk cryptographic key-pair to sign the assemblies or you will get a build error. The Ajax Minifier project does not accept external submissions into the project codebase. JavaScript and CSS files minified with Ajax Minifier should work as-is; you shouldn’t have to do anything special in your code to get good results. If your file doesn’t work after minification, first check to see if your JavaScript code contains eval statements that might require you to use a different –evals switch. If your file still doesn’t work, please file a report on the “Issue Tracker” page so I can get Ajax Minifier fixed.  If you have any new feature requests, please feel free to bring them up on the ""Discussions"" page. We cannot guarantee feature requests will make it into the code.     There is an official NuGet package for the DLL version of Microsoft Ajax Minifier, if you prefer to manage your C# projects in that manner: http://nuget.org/packages/AjaxMin AjaxMin was created and is maintained by Ron Logan, with contributions from Eugene Chigirinskiy, Rafael Correa, Kristoffer Henriksson, and Marcin Dobosz. Last edited Oct 24, 2012 at 12:05 AM by ronlo, version 19 download Opera does not support ClickOnce X To install this application, save it and then open it. Opening it directly from Opera will not work correctly. current Microsoft Ajax Minifier 5.14 date Wed Jan 28, 2015 at 7:00 AM status Stable downloads 11,410 rating       3 ratings Review this release Most Helpful Reviews      Hands down the best JavaScript minifier!      Simple command line tool that just minifies, Using a lot of libraries, Google Closure, and UglifyJS crash. This one does not. View all reviews activity downloads 157 Days: 7 7 30 30 All All Details © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"Contains JS and CSS minifiers which have a highest performance, because its have been specifically designed for.NET. Optionally produce Source Maps for JS code."	"true"
"Minification"	"Web Markup Minifier"	"http://webmarkupmin.codeplex.com/"	".NET library that contains a set of markup minifiers. The objective of this project is to improve the performance of web applications by reducing the size of HTML, XHTML and XML code."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"32"	"3"	"3"	"GitHub - Taritsyn/WebMarkupMin: The Web Markup Minifier (abbreviated WebMarkupMin) - a .NET library that contains a set of markup minifiers. The objective of this project is to improve the performance of web applications by reducing the size of HTML, XHTML and XML code. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 32 Fork 3 Taritsyn/WebMarkupMin Code Issues 1 Pull requests 0 Wiki Pulse Graphs The Web Markup Minifier (abbreviated WebMarkupMin) - a .NET library that contains a set of markup minifiers. The objective of this project is to improve the performance of web applications by reducing the size of HTML, XHTML and XML code. 72 commits 1 branch 19 releases 1 contributor C# 98.7% Other 1.3% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2.0.2 v2.0.1 v2.0.0 v2.0.0-rc.9 v2.0.0-rc.8 v2.0.0-rc.7 v2.0.0-rc.6 v2.0.0-rc.5 v2.0.0-rc.4 v2.0.0-rc.3 v2.0.0-rc.2 v2.0.0-rc.1 v2.0.0-beta.5 v2.0.0-beta.4 v2.0.0-beta.3 v2.0.0-beta.2 v2.0.0-beta.1 v2.0.0-alpha.2 v2.0.0-alpha.1 Nothing to show New pull request Latest commit 0a6e9d5 Jul 12, 2016 Taritsyn Version 2.0.2 Permalink Failed to load latest commit information. .nuget Added support of .NET Core and ASP.NET Core 1.0 RTM Jun 28, 2016 licenses 1. Added module based on the NUglify; Jul 12, 2016 nuget Version 2.0.2 Jul 12, 2016 samples Version 2.0.2 Jul 12, 2016 src Version 2.0.2 Jul 12, 2016 test/WebMarkupMin.Core.Test Version 2.0.1 Jul 9, 2016 tools Added support of .NET Core and ASP.NET Core 1.0 RC2 May 18, 2016 .gitignore Version 2.0.0 Alpha 1 Jul 17, 2015 CHANGELOG.md Version 2.0.2 Jul 12, 2016 LICENSE Version 2.0.0 RC 3 Feb 23, 2016 README.md Version 2.0.2 Jul 12, 2016 WebMarkupMin.DotNet.sln 1. Added module based on the NUglify; Jul 12, 2016 WebMarkupMin.Net4.sln 1. Added module based on the NUglify; Jul 12, 2016 _generate-resx.shade Added support of .NET Core and ASP.NET Core 1.0 RTM Jun 28, 2016 build.cmd Added support of .NET Core and ASP.NET Core 1.0 RTM Jun 28, 2016 build.ps1 Added support of .NET Core and ASP.NET Core 1.0 RTM Jun 28, 2016 build.sh Added support of .NET Core and ASP.NET Core 1.0 RTM Jun 28, 2016 global.json Added support of .NET Core and ASP.NET Core 1.0 RTM Jun 28, 2016 logo.png Version 2.0.0 Alpha 1 Jul 17, 2015 makefile.shade During build of .NET 4.X projects again generates `*.Designer.cs` fil… May 26, 2016 README.md The Web Markup Minifier (abbreviated WebMarkupMin) - a .NET library that contains a set of markup minifiers. The objective of this project is to improve the performance of web applications by reducing the size of HTML, XHTML and XML code. WebMarkupMin absorbed the best of existing solutions from non-microsoft platforms: Juriy Zaytsev's Experimental HTML Minifier (written in JavaScript) and Sergiy Kovalchuk's HtmlCompressor (written in Java). Minification of markup produces by removing extra whitespace, comments and redundant code (only for HTML and XHTML). In addition, HTML and XHTML minifiers supports the minification of CSS code from style tags and attributes, and minification of JavaScript code from script tags, event attributes and hyperlinks with javascript: protocol. WebMarkupMin.Core contains built-in JavaScript minifier based on the Douglas Crockford's JSMin and built-in CSS minifier based on the Mads Kristensen's Efficient stylesheet minifier. The above mentioned minifiers produce only the most simple minifications of CSS and JavaScript code, but you can always install additional modules that support the more powerful algorithms of minification: WebMarkupMin.MsAjax (contains minifier-adapters for the Microsoft Ajax Minifier), WebMarkupMin.Yui (contains minifier-adapters for YUI Compressor for .Net) and WebMarkupMin.NUglify (contains minifier-adapters for the NUglify). Also supports minification of views of popular JavaScript template engines: KnockoutJS, Kendo UI MVVM and AngularJS 1.X. In addition, there are several modules that integrate this library into ASP.NET: WebMarkupMin.AspNet4.HttpModules (for ASP.NET 4.X and ASP.NET Web Pages), WebMarkupMin.AspNet4.Mvc (for ASP.NET MVC 3, 4 or 5), WebMarkupMin.AspNet4.WebForms (for ASP.NET Web Forms 4.X) and WebMarkupMin.AspNetCore1 (for ASP.NET Core 1.X). You can try WebMarkupMin in action and experiment with different minification settings live on the WebMarkupMin Online site. NuGet Packages Core WebMarkupMin: Core (supports .NET Framework 4.X and .NET Standard 1.3) External JS and CSS minifiers WebMarkupMin: MS Ajax (supports .NET Framework 4.X) WebMarkupMin: YUI (supports .NET Framework 4.X) WebMarkupMin: NUglify (supports .NET Framework 4.X and .NET Standard 1.3) ASP.NET Extensions WebMarkupMin: ASP.NET 4.X HTTP modules (supports .NET Framework 4.X) WebMarkupMin: ASP.NET 4.X MVC (supports .NET Framework 4.X) WebMarkupMin: ASP.NET 4.X Web Forms (supports .NET Framework 4.X) WebMarkupMin: ASP.NET Core 1.X (supports .NET Framework 4.5.X and .NET Standard 1.3) Requires NuGet Package Manager version 2.8.6 or higher. Documentation Documentation is located on the wiki of this Repo. Previous Versions Source code and documentation for previous versions of WebMarkupMin are located on CodePlex. If you have used old versions of WebMarkupMin, then I recommend to first read “How to upgrade applications to version 2.X” section of the documentation. Who's Using WebMarkupMin If you use WebMarkupMin in some project, please send me a message so I can include it in this list: Software Blog-Umbraco by Ernesto Chavez Sanchez Constellation.Sitecore.Presentation.Mvc by Rick Cabral File Sharing Application by Artur N Html Markup Minifier (Orchard Module) by Liam 'Xeevis' Aqil Media Browser by Luke Pulverenti MiniBlog by Mads Kristensen Minit by Joan Caron StaticWebHelper by Mads Kristensen Web Essentials 2013 by Mads Kristensen Wyam Websites AutoThivolle.com BaixakiJogos.com.br DamBeton.nl DocShell.ru EmResumo.com.br E-Pacientas.lt Futuromelhor.Unilever.com.br HHDSoftware.com HiHoliday.ir HospOnline.ru iStaff.ru KKBruce.tw LogixSuite.it music2me.de NovalandGroup.net.vn nu.Faqtz.com Oostwoud.com Oostwoud.de Quickportal.it ReXposta.com.br ScoreYourBoss.com SkyPrimeAv.com Speak.nl StranaGruzov.ru TecMundo.com.br togofogo.com Ujat.mx WomensHealthNetwork.com XemLichAm.com Zemana.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Taritsyn/WebMarkupMin"	".NET library that contains a set of markup minifiers. The objective of this project is to improve the performance of web applications by reducing the size of HTML, XHTML and XML code."	"true"
"Misc"	".NET Fiddle"	"https://dotnetfiddle.net/"	"Write, compile and run C# code in the browser. The C# equivalent of JSFiddle."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Home | .NET Fiddle × Log in Twitter Gmail Facebook .NET Fiddle and .NET Academy shared account Remember me Log in Sign up or Reset password Back To Editor New Save Fork      Run      Share Collaborate      Tidy Up View IL Log in Sign up      About Twitter .NET Academy Chrome Ext User Voice Support Change Log Contact Us Share Link Copied to clipboard Embed on Your Page Copied to clipboard Preview Advanced Widget Builder Access: Public  Public Only With Link   0   0   0 Loading packages and dependencies Advanced Widget Builder × View IL Code"	"null"	"null"	"Write, compile and run C# code in the browser. The C# equivalent of JSFiddle."	"true"
"Misc"	"CSharp Pad"	"http://csharppad.com"	"A web based C# REPL with awesome code completion."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"C# Pad: Run C# Code Online Getting Started Libraries Send Feedback Instructions Enter some code and click Go to evaluate it. Keyboard Shortcuts Ctrl-Enter Evaluate code (same as clicking Go). Alt-UpArrow Paste previous submission, cycle through history. Alt-DownArrow Paste next submission, cycle through history. For more information, see the Author's Introducing C# Pad blog post. The following libraries are referenced: System System.Core System.Xml System.Xml.Linq System.Numerics System.Collections.Immutable MathNet.Numerics Newtonsoft.Json NodaTime NodaTime.Serialization.JsonNet The following namespaces are automatically imported: System System.Linq System.Collections.Generic System.Text Use the using directive to import other namespaces. NOTE: To ensure stability of the system, use of some types have been blocked. If you think a harmless type has been blacklisted, contact me and I'll whitelist it. Your Name: Your Email (If you wish to be contacted): Subject: Bug Report Feature Request Type Whitelist Request Other Message: Are you human? What's nine + 1? Send C# Pad New Window Follow @csharppad Help"	"null"	"null"	"A web based C# REPL with awesome code completion."	"true"
"Misc"	"AzureCrawler"	"https://github.com/yagopv/AzureCrawler"	"Take HTML Snapshots for your Angular, Ember, Durandal or any JavaScript applications"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"39"	"3"	"6"	"GitHub - yagopv/AzureCrawler: Take HTML Snapshots for your Angular, Ember, Durandal or any JavaScript applications Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 39 Fork 6 yagopv/AzureCrawler Code Issues 0 Pull requests 0 Pulse Graphs Take HTML Snapshots for your Angular, Ember, Durandal or any JavaScript applications 5 commits 1 branch 0 releases 1 contributor C# 91.4% JavaScript 8.6% C# JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit f9b3430 Mar 23, 2014 yagopv Use dev storage string Permalink Failed to load latest commit information. AzureCrawler Use dev storage string Mar 23, 2014 AzureCrawlerRole Upgraded to latest nuget Mar 23, 2014 packages initial commit Oct 8, 2013 .gitattributes initial commit Oct 8, 2013 .gitignore initial commit Oct 8, 2013 AzureCrawler.sln Upgraded to latest nuget Mar 23, 2014 license.txt initial commit Oct 8, 2013 readme.html Upgraded to latest nuget Mar 23, 2014 readme.md Upgraded to latest nuget Mar 23, 2014 readme.md What´s this? If you are developing applications using new modern JavaScript frameworks like Angular, Ember, Durandal ... etc. you probably already know that this type of applications are not crawlable by search engine robots without a couple of extra steps. SEO according to Google If you want your JavaScript application to be crawlable, you need to implement some steps on your own. You can find information about the process on this Google document. Take a look to it in order to understand better what is required both client and server side. What is AzureCrawler about? AzureCrawler helps with taking HTML Snapshots of your dynamically generated content. This project is specific to Azure and is ready to be deployed as a Cloud Service. AzureCrawler is a Worker Role that uses OWIN to Self-Host a Web API. Said that, it´s easy to bring the code to your own solution if you don´t want to use it as a separate Cloud Service. As well, if you are not using .NET and Azure it´s not complicated to port it to another platform like Amazon Web Services. How AzureCrawler works? The self-hosted Web API contained in AzureCrawler exposes a resource with an endpoint in: POST api/snapshot   If you make a api call there, a PhantomJS process will run and take care of the HTML Snapshot against the provided url. You can pass some parameters in the body of the POST call string ApiId (required). The application identification string Application (required). The application name string Url (required). The url to crawl bool Store (optional). If you want to store the snapshot for future calls DateTime ExpirationDate (optional). The expiration of  the stored snapshot string UserAgent (optional). The user agent of the bot crawling your application   ApiId and Application fields are required and will be validated together. There isn´t any special mechanism for doing this validation more than the following private method: /// <summary> /// Validate ApiKey. In the real world you should this against a custom store /// </summary> /// <param name=""apiKey"">The api key</param> /// <param name=""apiKey"">The application</param> /// <returns>bool</returns> private bool ValidateCredentials(string apiKey, string application) {     if (apiKey == ""Any ApiId"" && application == ""Any Application name"")     {         return true;     }     return false; }  So you can supply a new mechanism, use your own keys or use a database to store application credentials. The Url is the resource you want to crawl. The PhantomJS process will take care of the snapshot and will wait until all the dynamically generated content will be loaded. The latest fields are about providing information for storing the HTML Snapshot in the store you prefer to. By default, AzureCrawler will store the snapshots in Azure Storage within a blob container with the name of the Application field. If you do this, next time a bot requests the same Url, the snapshot will be provided from the storage. When the snapshot stored expires, a new crawl will be done and a new snapshot will be stored. Know issues There is a incompatibility between the Azure Compute Emulator included in the SDK 2.2. and the latest 3.x Storage assemblies so you should test with live containers until next Azure toolkit will be released. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/yagopv/AzureCrawler"	"Take HTML Snapshots for your Angular, Ember, Durandal or any JavaScript applications"	"true"
"Misc"	"BitSharp"	"https://github.com/pmlyon/BitSharp"	"C# Bitcoin Node"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"64"	"18"	"24"	"GitHub - pmlyon/BitSharp: C# Bitcoin Node Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 64 Fork 24 pmlyon/BitSharp Code Issues 27 Pull requests 0 Wiki Pulse Graphs C# Bitcoin Node 1,785 commits 3 branches 0 releases 3 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags main-LevelDB.Net-leveldb-sharp main-LevelDB.Net master Nothing to show Nothing to show New pull request Latest commit 2e55ee7 Jan 24, 2016 pmlyon add initial ini config Permalink Failed to load latest commit information. BitSharp.BlockHelper split network code out of node project, preparing to make node proper… Jan 24, 2016 BitSharp.Client.Test cleanup unused hashcode overrides, use a proper hash code generating … Jan 23, 2016 BitSharp.Client wire up initial command line parsing Jan 24, 2016 BitSharp.Common.Test cleanup unused hashcode overrides, use a proper hash code generating … Jan 23, 2016 BitSharp.Common usings cleanup Jan 24, 2016 BitSharp.Core.Test.Storage usings cleanup Jan 24, 2016 BitSharp.Core.Test usings cleanup Jan 24, 2016 BitSharp.Core usings cleanup Jan 24, 2016 BitSharp.Esent.Test cleanup unused hashcode overrides, use a proper hash code generating … Jan 23, 2016 BitSharp.Esent usings cleanup Jan 24, 2016 BitSharp.Examples split network code out of node project, preparing to make node proper… Jan 24, 2016 BitSharp.IntegrationTest split network code out of node project, preparing to make node proper… Jan 24, 2016 BitSharp.LevelDb.Test cleanup unused hashcode overrides, use a proper hash code generating … Jan 23, 2016 BitSharp.LevelDb add initial ini config Jan 24, 2016 BitSharp.Network.Test split network code out of node project, preparing to make node proper… Jan 24, 2016 BitSharp.Network split network code out of node project, preparing to make node proper… Jan 24, 2016 BitSharp.Node.Test split network code out of node project, preparing to make node proper… Jan 24, 2016 BitSharp.Node add initial ini config Jan 25, 2016 BitSharp.Wallet.Test cleanup unused hashcode overrides, use a proper hash code generating … Jan 23, 2016 BitSharp.Wallet cleanup unused hashcode overrides, use a proper hash code generating … Jan 23, 2016 .gitignore add ncrunch configuration to source Jul 9, 2015 .runsettings add timeouts to tests for tfs build Dec 24, 2015 .testsettings limit overall test run to 10 minutes instead of 30 for tfs Dec 24, 2015 BitSharp.sln split network code out of node project, preparing to make node proper… Jan 24, 2016 BitSharp.v2.ncrunchsolution add ncrunch configuration to source Jul 9, 2015 LICENSE update public domain license using the unlicense text Aug 14, 2014 README.md add missing braces Jul 1, 2015 clean.bat add bitcoinj repo to clean script Aug 10, 2014 ignore.conf reference leveldb source directly Jan 3, 2016 README.md BitSharp BitSharp intends to be a fully validating Bitcoin node written in C#. This project is currently being prototyped and should be considered alpha software. Please refer to the BitSharp wiki for all information. License BitSharp is free and unencumbered software released into the public domain. See LICENSE. Examples Examples can be found in the BitSharp.Examples project. ExampleDaemon Source public void ExampleDaemon() {     // create example core daemon     BlockProvider embeddedBlocks; IStorageManager storageManager;     using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks, out storageManager, maxHeight: 99))     using (embeddedBlocks)     using (storageManager)     {         // report core daemon's progress         logger.Info(string.Format(""Core daemon height: {0:N0}"", coreDaemon.CurrentChain.Height));     } }  private CoreDaemon CreateExampleDaemon(out BlockProvider embeddedBlocks, out IStorageManager storageManager, int? maxHeight = null) {     // retrieve first 10,000 testnet3 blocks     embeddedBlocks = new BlockProvider(""BitSharp.Examples.Blocks.TestNet3.zip"");      // initialize in-memory storage     storageManager = new MemoryStorageManager();      // intialize testnet3 rules (ignore script errors, script engine is not and is not intended to be complete)     var rules = new Testnet3Rules { IgnoreScriptErrors = true };      // initialize & start core daemon     var coreDaemon = new CoreDaemon(rules, storageManager) { MaxHeight = maxHeight, IsStarted = true };      // add embedded blocks     coreDaemon.CoreStorage.AddBlocks(embeddedBlocks.ReadBlocks());      // wait for core daemon to finish processing any available data     coreDaemon.WaitForUpdate();      return coreDaemon; } Output Core daemon height: 99  ChainStateExample Source public void ChainStateExample() {     // create example core daemon     BlockProvider embeddedBlocks; IStorageManager storageManager;     using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks, out storageManager, maxHeight: 999))     using (embeddedBlocks)     using (storageManager)     // retrieve an immutable snapshot of the current chainstate, validation won't be blocked by an open snapshot     using (var chainState = coreDaemon.GetChainState())     {         // retrieve unspent transactions         var unspentTxes = chainState.ReadUnspentTransactions().ToList();          // report counts         logger.Info(string.Format(""Chain.Height:                      {0,9:N0}"", chainState.Chain.Height));         logger.Info(string.Format(""ReadUnspentTransactions().Count(): {0,9:N0}"", unspentTxes.Count));         logger.Info(string.Format(""UnspentTxCount:                    {0,9:N0}"", chainState.UnspentTxCount));         logger.Info(string.Format(""UnspentOutputCount:                {0,9:N0}"", chainState.UnspentOutputCount));         logger.Info(string.Format(""TotalTxCount:                      {0,9:N0}"", chainState.TotalTxCount));         logger.Info(string.Format(""TotalInputCount:                   {0,9:N0}"", chainState.TotalInputCount));         logger.Info(string.Format(""TotalOutputCount:                  {0,9:N0}"", chainState.TotalOutputCount));          // look up genesis coinbase output (will be missing)         UnspentTx unspentTx;         chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(0).Transactions[0].Hash, out unspentTx);         logger.Info(string.Format(""Gensis coinbase UnspentTx present? {0,9}"", unspentTx != null));          // look up block 1 coinbase output         chainState.TryGetUnspentTx(embeddedBlocks.GetBlock(1).Transactions[0].Hash, out unspentTx);         logger.Info(string.Format(""Block 1 coinbase UnspenTx present? {0,9}"", unspentTx != null));         logger.Info(string.Format(""Block 1 coinbase output states:    [{0}]"", string.Join("","", unspentTx.OutputStates.Select(x => x.ToString()))));          // look up block 381 list of spent txes         IImmutableList<UInt256> spentTxes;         chainState.TryGetBlockSpentTxes(381, out spentTxes);         logger.Info(string.Format(""Block 381 spent txes count:        {0,9:N0}"", spentTxes.Count));     } } Output Chain.Height:                            999  ReadUnspentTransactions().Count():     1,154  UnspentTxCount:                        1,154  UnspentOutputCount:                    1,196  TotalTxCount:                          1,940  TotalInputCount:                       2,918  TotalOutputCount:                      3,115  Gensis coinbase UnspentTx present?     False  Block 1 coinbase UnspenTx present?      True  Block 1 coinbase output states:    [Unspent]  Block 381 spent txes count:               21  ReplayBlockExample Source public void ReplayBlockExample() {     // create example core daemon     BlockProvider embeddedBlocks; IStorageManager storageManager;     using (var coreDaemon = CreateExampleDaemon(out embeddedBlocks, out storageManager, maxHeight: 999))     using (embeddedBlocks)     using (storageManager)     {         // start a chain at the genesis block to represent the processed progress         var processedChain = Chain.CreateForGenesisBlock(coreDaemon.Rules.GenesisChainedHeader).ToBuilder();          // a dictionary of public key script hashes can be created for any addresses of interest, allowing for quick checking         var scriptHashesOfInterest = new HashSet<UInt256>();          // retrieve a chainstate to replay blocks with         using (var chainState = coreDaemon.GetChainState())         {             // enumerate the steps needed to take the currently processed chain towards the current chainstate             foreach (var pathElement in processedChain.NavigateTowards(chainState.Chain))             {                 // retrieve the next block to replay and whether to replay forwards, or backwards for a re-org                 var replayForward = pathElement.Item1 > 0;                 var replayBlock = pathElement.Item2;                  // begin replaying the transactions in the replay block                 // if this is a re-org, the transactions will be replayed in reverse block order                 using (var replayTxesQueue = BlockReplayer.ReplayBlock(coreDaemon.CoreStorage, chainState, replayBlock.Hash, replayForward).LinkToQueue())                 {                     foreach (var loadedTx in replayTxesQueue.GetConsumingEnumerable())                     {                         // the transaction being replayed                         var tx = loadedTx.Transaction;                          // the previous transactions for each of the replay transaction's inputs                         var inputTxes = loadedTx.InputTxes;                          // scan the replay transaction's inputs                         if (!loadedTx.IsCoinbase)                         {                             for (var inputIndex = 0; inputIndex < tx.Inputs.Length; inputIndex++)                             {                                 var input = tx.Inputs[inputIndex];                                 var inputPrevTx = inputTxes[inputIndex];                                 var inputPrevTxOutput = inputPrevTx.Outputs[(int)input.PreviousTxOutputKey.TxOutputIndex];                                  // check if the input's previous transaction output is of interest                                 var inputPrevTxOutputPublicScriptHash = new UInt256(SHA256Static.ComputeHash(inputPrevTxOutput.ScriptPublicKey));                                 if (scriptHashesOfInterest.Contains(inputPrevTxOutputPublicScriptHash))                                 {                                     if (replayForward)                                     { /* An output for an address of interest is being spent. */ }                                     else                                     { /* An output for an address of interest is being ""unspent"", on re-org. */}                                 }                             }                         }                          // scan the replay transaction's outputs                         for (var outputIndex = 0; outputIndex < tx.Outputs.Length; outputIndex++)                         {                             var output = tx.Outputs[outputIndex];                              // check if the output is of interest                             var outputPublicScriptHash = new UInt256(SHA256Static.ComputeHash(output.ScriptPublicKey));                             if (scriptHashesOfInterest.Contains(outputPublicScriptHash))                             {                                 if (replayForward)                                 { /* An output for an address of interest is being minted. */ }                                 else                                 { /* An output for an address of interest is being ""unminted"", on re-org. */}                             }                         }                     }                 }                  // a wallet would now commit its progress                 /*                 walletDatabase.CurrentBlock = replayBlock.Hash;                 walletDatabase.Commit();                 */                  // TODO: after successfully committing, a wallet would notify CoreDaemon of its current progress                 // TODO: CoreDaemon will use this information in order to determine how far in the current chainstate it is safe to prune                 // TODO: with this in place, if a wallet suffers a failure to commit it can just replay the block                 // TODO: wallets can also remain disconnected from CoreDaemon, and just replay blocks to catch up when they are reconnected                  // update the processed chain so that the next step towards the current chainstate can be taken                 if (replayForward)                     processedChain.AddBlock(replayBlock);                 else                     processedChain.RemoveBlock(replayBlock);             }         }          logger.Info(""Processed chain height: {0:N0}"", processedChain.Height);     } } Output Processed chain height: 999  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pmlyon/BitSharp"	"C# Bitcoin Node"	"true"
"Misc"	"CSScript"	"http://www.csscript.net/"	"CS-Script is a CLR based scripting system which usesC# as a programming language. CS-Script currently targets Microsoft implementation of CLR (.NET 2.0/3.0/3.5/4.0/4.5) with full support on Mono. Comes with many additional features, such as script hosting."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"CS-Script Home Online Help Licence Contact WixSharp  Notepad++ Integration  Support CS-Script   CS-Script - The C# Script Engine C# Script execution engine version 3.9.16 - Copyright (C) 2004-2015 Oleg Shilo. Customer Testimonials   What a masterful piece of work.  Rarely do we find a piece of ""technical art"" that is hand-crafted any more in this field. Steve N. Why use Roslyn when CSScript has been providing great scripting capability for my projects for over 7 years. David R. Download the latest release    Features Download  Documentation/FAQs Tutorials Online Samples Feedback Support Discussions  CS-Script is now fully supported by Notepad++ (intellisense, execution...)  What is CS-Script? CS-Script is a CLR (Common Language Runtime) based scripting system which uses ECMA-compliant C# as a programming language. CS-Script currently targets Microsoft implementation of CLR (.NET 2.0/3.0/3.5/4.0/4.5) with full support on Mono.  CS-Script is an open-source (MIT) initiative that is distributed under the license agreement, which can be found here.  CS-Script combines the power and richness of C# and FCL with the flexibility of a scripting system. CS-Script can be useful for system and network administrators, developers and testers. For any one who needs an automation for solving variety of programming tasks.  CS-Script has started as an article at CodeProject but quickly it has grown past the scale of a single publication. Currently it is used world wide for extending the applications functionality with scripting and as a general purpose scripting environment. It is used by both enthusiasts and by professional programmers. It found its way to non-profit organizations (e.g. educational institutes) as well as to commercial organizations. These are just a few examples: MediaPortal, FlashDevelop, K2 API, SF.net (""WinTin""), BonSAI, AyaNova (service management software). The main idea of CS-Script is to allow ""plain vanilla"" C# code execution from both command-prompt and form any CLR application hosting the script engine.  CS-Script comes with the full integration with Visual Studio as well as with Notepad++. CSScript.Npp plugin for Notepad++ converts this great people's editor into a full scale CS-Script IDE with Intellisense, execution and even debugging support. Command-prompt execution: Explorer view: hello.cs: using System; using System.Windows.Forms;  class Script {      static void Main()     {         MessageBox.Show( ""Hello World!"");      } } Script hosting execution: A. Execution of the script containing class definition:   dynamic script = CSScript.Evaluator                          .LoadCode(@""using System;                                      public class Script                                      {                                          public int Sum(int a, int b)                                          {                                              return a+b;                                          }                                      }""); int result = script.Sum(1, 2); B. Execution of the script containing method definition only: dynamic script = CSScript.Evaluator                          .LoadMethod(@""void SayHello(string greeting)                                        {                                            Console.WriteLine(greeting);                                        }""); script.SayHello(""Hello World!""); or var Product = CSScript.Evaluator                       .CreateDelegate(@""int Product(int a, int b)                                         {                                             return a * b;                                         }""); int result = (int)Product(1, 2); or int result = (int)CSScript.Evaluator.Evaluate(""1 + 2"");      CSScript.Evaluator.Run(""using System;"");      CSScript.Evaluator.Run(""Console.WriteLine(\""Hello World\\"")"");  C. Execution of the script by ""aligning"" it to the appropriate interface (DuckTyping). Important aspect of such hosting model that the script execution is completely typesafe and IDEs like VisualStudio can provide full Intellisense support: 1. Script HelloScript.cs 2. Complete script hosting code using CSScriptLibrary; public interface IScript {     void Hello(string greeting); } class Host {     static void Main()     {         IScript script = CSScript.Evaluator                                  .LoadFile<IScript>(""HelloScript.cs"");         script.Hello(""Hi there..."");     }     } Note practicaly all code above is available in CodeDOM version. Just replace 'CSScript.Eveluator' with 'CSScript' and all calls will be redirected to CodeDOM API (more details here). CS-Script comes with the complete integration with MS Visual Studio 2010 (CS-Script Visual Studio Tools). Because of the clever loading model CLR Debuggers do not differentiate between static and dynamic code (script). You can debug your script with the same debugger as your host application. CS-Script can be hosted in NAnt environment. You can execute of both script files and embedded C# code (CDATA) from NAnt build scripts.  The unrestricted bi-directional data exchange between NAnt runtime and CS-Script script code (e.g. C# code) can be achieved due to the advanced CS-Script hosting architecture. CS-Script also brings you Dynamic Code Generation. The concept, which allows you to define C++ style macros in C#. CS-Script comes with the full set of comprehensive documentation (tutorials, help in both CHM and PDF format, API reference guide). Why CS-Script? - read about the difference between CS-Script and other CLR based scripting solutions. This is what you need to know before making a decision on using the CS-Script. Benefits of C# Scripting System: Simple deployment approach: just bring both script and engine file (about 100 K size) on the system that has .NET runtime installed and script can be run. Portability: Scripts can be run on any system, which has CLR installed (including Mono). Base language is a truly OO language: CS-Script uses full featured C# and also supports VB.NET, C++/CLI and J#.  All .NET functionality is available (FCL, COM Interop, Remoting, WPF, WCF etc.). Easily available Debugger and rich IDE (MS .NET Visual Studio or third-party IDEs). Execution model within the script is the same as for any .NET application: static void Main(). Any script can be easily converted into application and vice versa. Optimised interpretation: interpretation of any statement in the script is done only once even if the statement is frequently used throughout the code. Script language is type safe (strongly typed): strong typing is a luxury not available for the most of the scripting languages. All SW development tasks can be done in the same language. GUI development for script application becomes easy. Extensibility: scripting system can be extended by using new assemblies written in any .NET languages or COM components. Script hosting: functionality of any CLR application can be extended with scripting. See Features for more details. Copyright (C) 2004-2015 Oleg Shilo"	"null"	"null"	"CS-Script is a CLR based scripting system which usesC# as a programming language. CS-Script currently targets Microsoft implementation of CLR (.NET 2.0/3.0/3.5/4.0/4.5) with full support on Mono. Comes with many additional features, such as script hosting."	"true"
"Misc"	"CsvHelper"	"https://github.com/JoshClose/CsvHelper"	"Library to help reading and writing CSV files"	"null"	"null"	"null"	"null"	"null"	"https://github.com/JoshClose/CsvHelper"	"null"	"962"	"93"	"371"	"GitHub - JoshClose/CsvHelper: Library to help reading and writing CSV files Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 93 Star 962 Fork 371 JoshClose/CsvHelper Code Issues 108 Pull requests 22 Wiki Pulse Graphs Library to help reading and writing CSV files http://csvhelper.com 397 commits 4 branches 80 releases 27 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags async gh-pages master mattleibow-xamarin-support Nothing to show 2.16 2.15.0.2 2.15 2.14.3 2.14.2 2.14.1 2.14 2.13.5 2.13.4 2.13.3 2.13.2 2.13.1 2.13 2.12 2.11.1.1 2.11.1 2.11 2.10 2.9.1 2.9 2.8.4 2.8.3 2.8.2 2.8.1 2.8 2.7.1 2.7 2.6.1 2.6 2.5 2.4.1 2.4 2.3 2.2.2 2.2.1 2.2 2.1.1 2.1 2.0.1 2.0 1.17 1.16 1.15 1.14 1.13 1.12.1 1.12 1.11 1.10 1.9.2 1.9.1 1.9 1.8 1.7 1.6 1.5 1.4 1.3 1.2 1.1.2 1.1.1 1.1 1.0 0.16 0.15 0.14 0.13 0.12 0.11 0.10 0.9.1 0.9 0.8.1 0.8 0.7 0.6 0.5.1 0.5 0.4 0.3 Nothing to show New pull request Latest commit 68712c6 Jul 13, 2016 JoshClose Added CsvReader.ReadHeader so headers can be read without reading the… … … first row. Permalink Failed to load latest commit information. docs Fixed bug in parser when a quoted field was empty, or a field contain… Feb 25, 2010 lib Added support for Silverlight 4 and 5. Feb 16, 2013 logo Added logo files Sep 9, 2011 src Added CsvReader.ReadHeader so headers can be read without reading the… Jul 13, 2016 .gitignore Updated project to .NET Core RC2. Fixed issue with assembly not being… Jun 8, 2016 LICENSE.txt Updated licensing to dual Apache 2.0 and MS-PL licenses. Updated copy… Jan 9, 2015 Pack NuGet Packages.bat Updated project to .NET Core RC2. Fixed issue with assembly not being… Jun 8, 2016 Push NuGet Packages.bat Added CsvReader.ReadHeader so headers can be read without reading the… Jul 14, 2016 README.markdown Added a way for people to gift. Apr 27, 2016 README.markdown CsvHelper A library for reading and writing CSV files. Extremely fast, flexible, and easy to use. Supports reading and writing of custom class objects. Install To install CsvHelper, run the following command in the Package Manager Console PM> Install-Package CsvHelper  Documentation http://joshclose.github.io/CsvHelper/ License Dual licensed Microsoft Public License (MS-PL) http://www.opensource.org/licenses/MS-PL Apache License, Version 2.0 http://opensource.org/licenses/Apache-2.0 Contribution Want to contribute? Great! Here are a few guidelines. If you want to do a feature, post an issue about the feature first. Some features are intentionally left out, some features may already be in the works, or I may have some advice on how I think it should be done. I would feel bad if time was spent on some code that won't be used. If you want to do a bug fix, it might not be a bad idea to post about it too. I've had the same bug fixed by multiple people at the same time before. All code should a unit test. If you make a feature, there should be significant tests around the feature. If you do a bug fix, there should be a test specific to that bug so it doesn't happen again. Pull requests should have a single commit. If you have multiple commits, squash them into a single commit before requesting a pull. Try and follow the code styling already in place. If you have ReSharper there is a dotsettings file included and things should automatically be formatted for you. Gifts * Several people have asked me to give them a way to gift money for working on the project, so I have made a public Amazon wish list. In the future I may add a way to gift money through paypal or something similar, but for now I'd rather not recieve cash gifts. Any gifts are greatly appreciated and I'm still very shocked that people are asking for this. I'm just glad CsvHelper has helped make working with CSV files easier for people. Amazon Wish List * Disclaimer: All gifts go directly to Josh Close and are not considered compensation in any form. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/JoshClose/CsvHelper"	"Library to help reading and writing CSV files"	"true"
"Misc"	"FlatMapper"	"https://github.com/kappy/FlatMapper"	"A library to import and export data from and to plain text files in a Linq compatible way."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"16"	"5"	"5"	"GitHub - kappy/FlatMapper: FlatMapper is a library to import and export data from and to plain text files. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 16 Fork 5 kappy/FlatMapper Code Issues 1 Pull requests 0 Wiki Pulse Graphs FlatMapper is a library to import and export data from and to plain text files. 45 commits 4 branches 0 releases Fetching contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dnx-project field-value-converters master unquoted-and-empty-fields Nothing to show Nothing to show New pull request Latest commit c220948 Feb 19, 2016 Joao Matos Silva remove symbols from deployment Permalink Failed to load latest commit information. .nuget FlatMapper.Tests FlatMapper .gitignore FlatMapper.sln LICENSE.txt README.md appveyor.yml README.md FlatMapper FlatMapper is a library to import and export data from and to plain text files in a Linq compatible way. Features Fast - Only uses Static Reflection and Dynamic methods LINQ Compatible It supports character delimited and fixed length files Non intrusive - You don't have to change your code. Any POCO will work No external Dependencies Iterative reads - Doesn't need to load the entire file into memory Multi-line support (Only on character delimited and quoted) Nullables support Vitually any type support with FieldValueConverters Fluent Interface Per line/record Error handling Simple to use How to use Fixed Length Layout var layout = new Layout<TestObject>.FixedLengthLayout()                 .HeaderLines(1)                 .WithMember(o => o.Id, set => set.WithLength(5).WithLeftPadding('0'))                 .WithMember(o => o.Description, set => set.WithLength(25).WithRightPadding(' '))                 .WithMember(o => o.NullableInt, set => set.WithLength(5).AllowNull(""=Null"").WithLeftPadding('0'))                 .WithMember(o => o.NullableEnum, set => set.WithLength(10).AllowNull(""======NULL"").WithLeftPadding(' '))                 .WithMember(o => o.Date, set => set.WithLength(19).WithFormat(new CultureInfo(""pt-PT""))); //PT-pt default dates are always fixed 19 chars ""13-12-2015 23:41:41""  Delimited Layout var layout = new Layout<TestObject>.DelimitedLayout()                 .WithDelimiter("";"")                 .WithQuote(""\"""")                 .HeaderLines(1)                 .WithMember(o => o.Id, set => set.WithLength(5).WithLeftPadding('0'))                 .WithMember(o => o.Description, set => set.WithLength(25).WithRightPadding(' '))                 .WithMember(o => o.NullableInt, set => set.WithLength(5).AllowNull(""=Null"").WithLeftPadding('0'))                 .WithMember(o => o.NullableEnum, set => set.WithLength(10).AllowNull("""").WithLeftPadding(' '))                 .WithMember(o => o.Date, set => set.WithFormat(new CultureInfo(""pt-PT"")));  Reading and Writing //Reading data using (var fileStream = File.OpenRead(""c:\temp\data.txt"")) {     var flatfile = new FlatFile<TestObject>(layout, fileStream);     foreach(var objectInstance in flatfile.Read())     {         //Do Somethig....     } }  //Writing data using (var fileStream = File.OpenWrite(""c:\temp\data.txt"")) {     var flatfile = new FlatFile<TestObject>(layout, fileStream)     flatfile.Write(listOfObjects); }  For more detailed information please check the wiki Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kappy/FlatMapper"	"A library to import and export data from and to plain text files in a Linq compatible way."	"true"
"Misc"	"FluentValidation"	"https://github.com/JeremySkinner/FluentValidation"	"A small validation library for.NET that uses a fluent interface and lambda expressions for building validation rules."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1474"	"161"	"345"	"GitHub - JeremySkinner/FluentValidation: A small validation library for .NET that uses a fluent interface and lambda expressions for building validation rules. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 161 Star 1,474 Fork 345 JeremySkinner/FluentValidation Code Issues 46 Pull requests 10 Wiki Pulse Graphs A small validation library for .NET that uses a fluent interface and lambda expressions for building validation rules. 818 commits 3 branches 34 releases Fetching contributors C# 99.4% Other 0.6% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master stable Nothing to show 6.2.1 6.2 6.1 6.0.2 6.0.1 6.0 5.6.2 5.6.1 5.6.0 5.5.0 5.4 5.3.0 5.2.0 5.1.0 5.1 5.0.0.1 5.0 4.0.0.1 4.0 3.4.6 3.4 3.3.1 3.3.0 3.2 3.1 3.0.0.1 3.0 2.0 2.0rc1 2.0b2 2.0b1 1.3 1.2 1.2rc1 Nothing to show New pull request Latest commit 403e2b1 Jul 14, 2016 JeremySkinner committed on GitHub Merge pull request #298 from agehrke/feature/solution-tweaks … Tweaks to the FluentValidation solution Permalink Failed to load latest commit information. .build Begin cleanup of async code path Jul 8, 2016 .nuget Include official NuGet feed in NuGet.config. Jul 14, 2016 src Begin cleanup of async code path Jul 8, 2016 .editorconfig Use editorconfig to define indentation rules. Jul 14, 2016 .gitattributes Preserve autocrlf=false for other repos May 26, 2012 .gitignore Update gitignore Feb 26, 2016 Build.cmd Support net451 for FV.AspNetCore Jul 4, 2016 Changelog.txt Support net451 for FV.AspNetCore Jul 4, 2016 FluentValidation-vs2015.sln.DotSettings Clean up new test projects Sep 23, 2015 FluentValidation.sln Use editorconfig to define indentation rules. Jul 14, 2016 FluentValidation.sln.DotSettings r# settings May 29, 2015 License.txt Fixing line endings - repository now requires core.autocrlf set to fa… Apr 29, 2010 README.md Update README.md Aug 21, 2015 README.txt Update link Jan 13, 2016 fv.png Import FluentValidation source from svn. Dec 20, 2009 global.json Add a unit test project for .NET Core May 16, 2016 README.md Full Documentation A small validation library for .NET that uses a fluent interface and lambda expressions for building validation rules. Written by Jeremy Skinner (http://www.jeremyskinner.co.uk) and licensed under Apache 2. NuGet Packages Install-Package FluentValidation  For ASP.NET MVC integration: Install-Package FluentValidation.MVC5  Example using FluentValidation;  public class CustomerValidator: AbstractValidator<Customer> {   public CustomerValidator() {     RuleFor(customer => customer.Surname).NotEmpty();     RuleFor(customer => customer.Forename).NotEmpty().WithMessage(""Please specify a first name"");     RuleFor(customer => customer.Discount).NotEqual(0).When(customer => customer.HasDiscount);     RuleFor(customer => customer.Address).Length(20, 250);     RuleFor(customer => customer.Postcode).Must(BeAValidPostcode).WithMessage(""Please specify a valid postcode"");   }    private bool BeAValidPostcode(string postcode) {     // custom postcode validating logic goes here   } }  Customer customer = new Customer(); CustomerValidator validator = new CustomerValidator(); ValidationResult results = validator.Validate(customer);  bool validationSucceeded = results.IsValid; IList<ValidationFailure> failures = results.Errors; Further Documentation Documentation can be found here. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/JeremySkinner/FluentValidation"	"A small validation library for.NET that uses a fluent interface and lambda expressions for building validation rules."	"true"
"Misc"	"Humanizer"	"https://github.com/Humanizr/Humanizer"	"Humanizer meets all your.NET needs for manipulating and displaying strings, enums, dates, times, timespans, numbers and quantities"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2111"	"142"	"372"	"GitHub - Humanizr/Humanizer: Humanizer meets all your .NET needs for manipulating and displaying strings, enums, dates, times, timespans, numbers and quantities Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 142 Star 2,111 Fork 372 Humanizr/Humanizer Code Issues 46 Pull requests 9 Pulse Graphs Humanizer meets all your .NET needs for manipulating and displaying strings, enums, dates, times, timespans, numbers and quantities 1,413 commits 10 branches 49 releases 111 contributors C# 99.9% Other 0.1% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags dev english features/device-runner features/ios-tests features/uwp-test-fixing gh-pages lionbridge master netstandard-support tests/localization-uwp-repro Nothing to show v2.1 v2.0.1 v2.0.0-beta0002 v2.0.0-beta02 v2.0.0-beta01 v2.0 v1.37.7 v1.37.0 v1.36.0 v1.35.0 v1.34.0 v1.33.7 v1.33.0 v1.32.0 v1.31.0 v1.30.0 v1.21.1 v1.20.15 v1.20.2 v1.19.1 v1.18.1 v1.17.1 v1.16.4 v1.15.1 v1.14.1 v1.13.2 v1.12.4 v1.11.3 v1.10.1 v1.9.1 v1.8.16 v1.8.1 v1.5.1 v1.4.2 v1.4.1 v1.3.1 v1.1.0 v1.0.29 v1.0.0 V1.7.1 V1.6.1 V1.2 V0.6 1.4 1.3.1 1.2.2 1.2.1 1.2.0 1.1.0 Nothing to show New pull request Latest commit a056d05 Jul 3, 2016 onovotny update nuget location Permalink Failed to load latest commit information. .github Create PULL_REQUEST_TEMPLATE.md Apr 28, 2016 NuSpecs Workaround dotnet/cli#3396 Jul 3, 2016 samples/Humanizer.MvcSample Upgraded packages for Humanizer.MvcSample project. Fixes #470. Nov 2, 2015 src Add integration project to test xproj Jul 3, 2016 .editorconfig Add editorconfig Nov 16, 2015 .gitattributes adding gitattributes Aug 27, 2013 .gitignore migrate to netstandard Jul 2, 2016 CNAME added CNAME for custom domain for gh-pages Feb 4, 2014 CONTRIBUTING.md Update GitHub urls to reflect current location Dec 12, 2015 GitVersionConfig.yaml Update configs Dec 30, 2015 LICENSE Cleaned up license headers Apr 9, 2014 appveyor.yml update nuget location Jul 3, 2016 build.cmd remove non-portable Oct 19, 2015 build.proj Fix AssemblyFile for DownloadNuGet task Nov 30, 2015 build.ps1 consolidate local build script Oct 24, 2015 logo.png replaced the logo with the transparent one Apr 21, 2014 readme.md Update readme Jul 3, 2016 release_notes.md Update release notes Jul 3, 2016 readme.md Humanizer meets all your .NET needs for manipulating and displaying strings, enums, dates, times, timespans, numbers and quantities. Table of contents Install Specifying Languages (Optional) Known Installation Issues Use in ASP.NET 4.x MVC Views Features Humanize String Dehumanize String Transform String Truncate String Format String Humanize Enums Dehumanize Enums Humanize DateTime Humanize TimeSpan Humanize Collections Inflector methods Pluralize Singularize Adding Words ToQuantity Ordinalize Titleize Pascalize Camelize Underscore Dasherize & Hyphenate Fluent date Number to Numbers Number to words Number to ordinal words Roman numerals Metric numerals ByteSize Mix this into your framework to simplify your life - How to contribute? Continuous Integration from AppVeyor Related Projects Humanizer ReSharper Annotations PowerShell Humanizer Humanizer JVM Humanizer.JS Main contributors License Icon Install You can install Humanizer as a nuget package: XPROJ / project.json: Humanizer.xproj English only: Humanizer.Core All languages: Humanizer Humanizer is a .NET Standard Class Library with support for .NET Standard 1.0+ (.Net 4.5+, Windows Phone 8, Win Store, and .NET Core). Also Humanizer symbols are source indexed with GitLink and are included in the package so you can step through Humanizer code while debugging your code. For pre-release builds, MyGet feed is available where you can pull down CI packages from the latest codebase. The feed URL is: https://www.myget.org/F/humanizer/api/v2 for VS 2012+ https://www.myget.org/F/humanizer/api/v3/index.json for VS 2015+ Note: Humanizer requires at least NuGet 2.12 when on VS 2012/2013 and 3.4+ on VS 2015. Specify Languages (Optional) New in Humanizer 2.0 is the option to choose which localization packages you wish to use. You choose which packages based on what NuGet package(s) you install. By default, the main Humanizer 2.0 package installs all supported languages exactly like it does in 1.x. If you're not sure, then just use the main Humanizer package. Here are the options: All languages: use the main Humanizer package. This pulls in Humanizer.Core and all language packages. English: use the Humanizer.Core package. Only the English language resources will be available Specific languages: Use the language specific packages you'd like. For example for French, use Humanizer.Core.fr. You can include multiple languages by installing however many language packages you want. XPROJ / project.json: Due to a bug in the CLI tools, the main Humanizer package and it's language packages will fail to install. As temporary workaround, until that bug is fixed, use Humanizer.xproj instead. It contains all of the languages. The detailed explanation for how this works is in the comments here. Features Humanize String Humanize string extensions allow you turn an otherwise computerized string into a more readable human-friendly one. The foundation of this was set in the BDDfy framework where class names, method names and properties are turned into human readable sentences. ""PascalCaseInputStringIsTurnedIntoSentence"".Humanize() => ""Pascal case input string is turned into sentence""  ""Underscored_input_string_is_turned_into_sentence"".Humanize() => ""Underscored input string is turned into sentence""  ""Underscored_input_String_is_turned_INTO_sentence"".Humanize() => ""Underscored input String is turned INTO sentence"" Note that a string that contains only upper case letters, and consists only of one word, is always treated as an acronym (regardless of its length). To guarantee that any arbitrary string will always be humanized you must use a transform (see Transform method below): // acronyms are left intact ""HTML"".Humanize() => ""HTML""  // any unbroken upper case string is treated as an acronym ""HUMANIZER"".Humanize() => ""HUMANIZER"" ""HUMANIZER"".Transform(To.LowerCase, To.TitleCase) => ""Humanizer"" You may also specify the desired letter casing: ""CanReturnTitleCase"".Humanize(LetterCasing.Title) => ""Can Return Title Case""  ""Can_return_title_Case"".Humanize(LetterCasing.Title) => ""Can Return Title Case""  ""CanReturnLowerCase"".Humanize(LetterCasing.LowerCase) => ""can return lower case""  ""CanHumanizeIntoUpperCase"".Humanize(LetterCasing.AllCaps) => ""CAN HUMANIZE INTO UPPER CASE"" The LetterCasing API and the methods accepting it are legacy from V0.2 era and will be deprecated in the future. Instead of that, you can use Transform method explained below. Dehumanize String Much like you can humanize a computer friendly into human friendly string you can dehumanize a human friendly string into a computer friendly one: ""Pascal case input string is turned into sentence"".Dehumanize() => ""PascalCaseInputStringIsTurnedIntoSentence"" Transform String There is a Transform method that supersedes LetterCasing, ApplyCase and Humanize overloads that accept LetterCasing. Transform method signature is as follows: string Transform(this string input, params IStringTransformer[] transformers) And there are some out of the box implementations of IStringTransformer for letter casing: ""Sentence casing"".Transform(To.LowerCase) => ""sentence casing"" ""Sentence casing"".Transform(To.SentenceCase) => ""Sentence casing"" ""Sentence casing"".Transform(To.TitleCase) => ""Sentence Casing"" ""Sentence casing"".Transform(To.UpperCase) => ""SENTENCE CASING"" LowerCase is a public static property on To class that returns an instance of private ToLowerCase class that implements IStringTransformer and knows how to turn a string into lower case. The benefit of using Transform and IStringTransformer over ApplyCase and LetterCasing is that LetterCasing is an enum and you're limited to use what's in the framework while IStringTransformer is an interface you can implement in your codebase once and use it with Transform method allowing for easy extension. Truncate String You can truncate a string using the Truncate method: ""Long text to truncate"".Truncate(10) => ""Long text…"" By default the '…' character is used to truncate strings. The advantage of using the '…' character instead of ""..."" is that the former only takes a single character and thus allows more text to be shown before truncation. If you want, you can also provide your own truncation string: ""Long text to truncate"".Truncate(10, ""---"") => ""Long te---"" The default truncation strategy, Truncator.FixedLength, is to truncate the input string to a specific length, including the truncation string length. There are two more truncator strategies available: one for a fixed number of (alpha-numerical) characters and one for a fixed number of words. To use a specific truncator when truncating, the two Truncate methods shown in the previous examples all have an overload that allow you to specify the ITruncator instance to use for the truncation. Here are examples on how to use the three provided truncators: ""Long text to truncate"".Truncate(10, Truncator.FixedLength) => ""Long text…"" ""Long text to truncate"".Truncate(10, ""---"", Truncator.FixedLength) => ""Long te---""  ""Long text to truncate"".Truncate(6, Truncator.FixedNumberOfCharacters) => ""Long t…"" ""Long text to truncate"".Truncate(6, ""---"", Truncator.FixedNumberOfCharacters) => ""Lon---""  ""Long text to truncate"".Truncate(2, Truncator.FixedNumberOfWords) => ""Long text…"" ""Long text to truncate"".Truncate(2, ""---"", Truncator.FixedNumberOfWords) => ""Long text---"" Note that you can also use create your own truncator by implementing the ITruncator interface. There is also an option to choose whether to truncate the string from the beginning (TruncateFrom.Left) or the end (TruncateFrom.Right). Default is the right as shown in the examples above. The examples below show how to truncate from the beginning of the string: ""Long text to truncate"".Truncate(10, Truncator.FixedLength, TruncateFrom.Left) => ""… truncate"" ""Long text to truncate"".Truncate(10, ""---"", Truncator.FixedLength, TruncateFrom.Left) => ""---runcate""  ""Long text to truncate"".Truncate(10, Truncator.FixedNumberOfCharacters, TruncateFrom.Left) => ""…o truncate"" ""Long text to truncate"".Truncate(16, ""---"", Truncator.FixedNumberOfCharacters, TruncateFrom.Left) => ""---ext to truncate""  ""Long text to truncate"".Truncate(2, Truncator.FixedNumberOfWords, TruncateFrom.Left) => ""…to truncate"" ""Long text to truncate"".Truncate(2, ""---"", Truncator.FixedNumberOfWords, TruncateFrom.Left) => ""---to truncate"" Format String You can format a string using the FormatWith() method: ""To be formatted -> {0}/{1}."".FormatWith(1, ""A"") => ""To be formatted -> 1/A."" This is an extension method based on String.Format, so exact rules applies to it. If format is null, it'll throw ArgumentNullException. If passed a fewer number for arguments, it'll throw String.FormatException exception. You also can specify the culture to use explicitly as the first parameter for the FormatWith() method: ""{0:N2}"".FormatWith(new CultureInfo(""ru-RU""), 6666.66) => ""6 666,66"" If a culture is not specified, current thread's current culture is used. Humanize Enums Calling ToString directly on enum members usually results in less than ideal output for users. The solution to this is usually to use DescriptionAttribute data annotation and then read that at runtime to get a more friendly output. That is a great solution; but more often than not we only need to put some space between words of an enum member - which is what String.Humanize() does well. For an enum like: public enum EnumUnderTest {     [Description(""Custom description"")]     MemberWithDescriptionAttribute,     MemberWithoutDescriptionAttribute,     ALLCAPITALS } You will get: // DescriptionAttribute is honored EnumUnderTest.MemberWithDescriptionAttribute.Humanize() => ""Custom description""  // In the absence of Description attribute string.Humanizer kicks in EnumUnderTest.MemberWithoutDescriptionAttribute.Humanize() => ""Member without description attribute""  // Of course you can still apply letter casing EnumUnderTest.MemberWithoutDescriptionAttribute.Humanize().Transform(To.TitleCase) => ""Member Without Description Attribute"" You are not limited to DescriptionAttribute for custom description. Any attribute applied on enum members with a string Description property counts. This is to help with platforms with missing DescriptionAttribute and also for allowing subclasses of the DescriptionAttribute. You can even configure the name of the property of attibute to use as description. Configurator.EnumDescriptionPropertyLocator = p => p.Name == ""Info"" If you need to provide localised descriptions you can use DisplayAttribute data annotation instead. public enum EnumUnderTest {     [Display(Description = ""EnumUnderTest_Member"", ResourceType = typeof(Project.Resources))]     Member } You will get: EnumUnderTest.Member.Humanize() => ""content"" // from Project.Resources found under ""EnumUnderTest_Member"" resource key Hopefully this will help avoid littering enums with unnecessary attributes! Dehumanize Enums Dehumanizes a string into the Enum it was originally Humanized from! The API looks like: public static TTargetEnum DehumanizeTo<TTargetEnum>(this string input) And the usage is: ""Member without description attribute"".DehumanizeTo<EnumUnderTest>() => EnumUnderTest.MemberWithoutDescriptionAttribute And just like the Humanize API it honors the Description attribute. You don't have to provide the casing you provided during humanization: it figures it out. There is also a non-generic counterpart for when the original Enum is not known at compile time: public static Enum DehumanizeTo(this string input, Type targetEnum, NoMatch onNoMatch = NoMatch.ThrowsException) which can be used like: ""Member without description attribute"".DehumanizeTo(typeof(EnumUnderTest)) => EnumUnderTest.MemberWithoutDescriptionAttribute By default both methods throw a NoMatchFoundException when they cannot match the provided input against the target enum. In the non-generic method you can also ask the method to return null by setting the second optional parameter to NoMatch.ReturnsNull. Humanize DateTime You can Humanize an instance of DateTime or DateTimeOffset and get back a string telling how far back or forward in time that is: DateTime.UtcNow.AddHours(-30).Humanize() => ""yesterday"" DateTime.UtcNow.AddHours(-2).Humanize() => ""2 hours ago""  DateTime.UtcNow.AddHours(30).Humanize() => ""tomorrow"" DateTime.UtcNow.AddHours(2).Humanize() => ""2 hours from now""  DateTimeOffset.AddHours(1).Humanize() => ""an hour from now"" Humanizer supports both local and UTC dates as well as dates with offset (DateTimeOffset). You could also provide the date you want the input date to be compared against. If null, it will use the current date as comparison base. Also, culture to use can be specified explicitly. If it is not, current thread's current UI culture is used. Here is the API signature: public static string Humanize(this DateTime input, bool utcDate = true, DateTime? dateToCompareAgainst = null, CultureInfo culture = null) public static string Humanize(this DateTimeOffset input, DateTimeOffset? dateToCompareAgainst = null, CultureInfo culture = null) Many localizations are available for this method. Here is a few examples: // In ar culture DateTime.UtcNow.AddDays(-1).Humanize() => ""أمس"" DateTime.UtcNow.AddDays(-2).Humanize() => ""منذ يومين"" DateTime.UtcNow.AddDays(-3).Humanize() => ""منذ 3 أيام"" DateTime.UtcNow.AddDays(-11).Humanize() => ""منذ 11 يوم""  // In ru-RU culture DateTime.UtcNow.AddMinutes(-1).Humanize() => ""минуту назад"" DateTime.UtcNow.AddMinutes(-2).Humanize() => ""2 минуты назад"" DateTime.UtcNow.AddMinutes(-10).Humanize() => ""10 минут назад"" DateTime.UtcNow.AddMinutes(-21).Humanize() => ""21 минуту назад"" DateTime.UtcNow.AddMinutes(-22).Humanize() => ""22 минуты назад"" DateTime.UtcNow.AddMinutes(-40).Humanize() => ""40 минут назад"" There are two strategies for DateTime.Humanize: the default one as seen above and a precision based one. To use the precision based strategy you need to configure it: Configurator.DateTimeHumanizeStrategy = new PrecisionDateTimeHumanizeStrategy(precision = .75); Configurator.DateTimeOffsetHumanizeStrategy = new PrecisionDateTimeOffsetHumanizeStrategy(precision = .75); // configure when humanizing DateTimeOffset The default precision is set to .75 but you can pass your desired precision too. With precision set to 0.75: 44 seconds => 44 seconds ago/from now 45 seconds => one minute ago/from now 104 seconds => one minute ago/from now 105 seconds => two minutes ago/from now  25 days => a month ago/from now No dehumanization for dates as Humanize is a lossy transformation and the human friendly date is not reversible Humanize TimeSpan You can call Humanize on a TimeSpan to a get human friendly representation for it: TimeSpan.FromMilliseconds(1).Humanize() => ""1 millisecond"" TimeSpan.FromMilliseconds(2).Humanize() => ""2 milliseconds"" TimeSpan.FromDays(1).Humanize() => ""1 day"" TimeSpan.FromDays(16).Humanize() => ""2 weeks"" There is an optional precision parameter for TimeSpan.Humanize which allows you to specify the precision of the returned value. The default value of precision is 1 which means only the largest time unit is returned like you saw in TimeSpan.FromDays(16).Humanize(). Here is a few examples of specifying precision: TimeSpan.FromDays(1).Humanize(precision:2) => ""1 day"" // no difference when there is only one unit in the provided TimeSpan TimeSpan.FromDays(16).Humanize(2) => ""2 weeks, 2 days""  // the same TimeSpan value with different precision returns different results TimeSpan.FromMilliseconds(1299630020).Humanize() => ""2 weeks"" TimeSpan.FromMilliseconds(1299630020).Humanize(3) => ""2 weeks, 1 day, 1 hour"" TimeSpan.FromMilliseconds(1299630020).Humanize(4) => ""2 weeks, 1 day, 1 hour, 30 seconds"" TimeSpan.FromMilliseconds(1299630020).Humanize(5) => ""2 weeks, 1 day, 1 hour, 30 seconds, 20 milliseconds"" By default when using precision parameter empty time units are not counted towards the precision of the returned value. If this behavior isn't desired for you, you can use the overloaded TimeSpan.Humanize method with countEmptyUnits parameter. Leading empty time units never count. Here is an example showing the difference of counting empty units: TimeSpan.FromMilliseconds(3603001).Humanize(3) => ""1 hour, 3 seconds, 1 millisecond"" TimeSpan.FromMilliseconds(3603001).Humanize(3, countEmptyUnits:true) => ""1 hour, 3 seconds"" Many localizations are available for this method: // in de-DE culture TimeSpan.FromDays(1).Humanize() => ""Ein Tag"" TimeSpan.FromDays(2).Humanize() => ""2 Tage""  // in sk-SK culture TimeSpan.FromMilliseconds(1).Humanize() => ""1 milisekunda"" TimeSpan.FromMilliseconds(2).Humanize() => ""2 milisekundy"" TimeSpan.FromMilliseconds(5).Humanize() => ""5 milisekúnd"" Culture to use can be specified explicitly. If it is not, current thread's current UI culture is used. Example: TimeSpan.FromDays(1).Humanize(culture: ""ru-RU"") => ""один день"" In addition, a minimum unit of time may be specified to avoid rolling down to a smaller unit. For example:   TimeSpan.FromMilliseconds(122500).Humanize(minUnit: TimeUnit.Second) => ""2 minutes, 2 seconds""    // instead of 2 minutes, 2 seconds, 500 milliseconds   TimeSpan.FromHours(25).Humanize(minUnit: TimeUnit.Day) => ""1 Day""   //instead of 1 Day, 1 Hour In addition, a maximum unit of time may be specified to avoid rolling up to the next largest unit. For example: TimeSpan.FromDays(7).Humanize(maxUnit: TimeUnit.Day) => ""7 days""    // instead of 1 week TimeSpan.FromMilliseconds(2000).Humanize(maxUnit: TimeUnit.Millisecond) => ""2000 milliseconds""    // instead of 2 seconds When there are multiple time units, they are combined using the "", "" string: TimeSpan.FromMilliseconds(1299630020).Humanize(3) => ""2 weeks, 1 day, 1 hour"" Using the collectionSeparator parameter, you can specify your own separator string: TimeSpan.FromMilliseconds(1299630020).Humanize(3, collectionSeparator: "" - "") => ""2 weeks - 1 day - 1 hour"" It is also possible to use the current culture's collection formatter to combine the time units. To do so, specify null as the collectionSeparator parameter: // in en-US culture TimeSpan.FromMilliseconds(1299630020).Humanize(3, collectionSeparator: null) => ""2 weeks, 1 day, and 1 hour""  // in de-DE culture TimeSpan.FromMilliseconds(1299630020).Humanize(3, collectionSeparator: null) => ""2 Wochen, Ein Tag und Eine Stunde"" Humanize Collections You can call Humanize on any IEnumerable to get a nicely formatted string representing the objects in the collection. By default ToString() will be called on each item to get its representation but a formatting function may be passed to Humanize instead. Additionally, a default separator is provided (""and"" in English), but a different separator may be passed into Humanize. For instance: class SomeClass {     public string SomeString;     public int SomeInt;     public override string ToString()     {         return ""Specific String"";     } }  string FormatSomeClass(SomeClass sc) {     return string.Format(""SomeObject #{0} - {1}"", sc.SomeInt, sc.SomeString); }  var collection = new List<SomeClass> {     new SomeClass { SomeInt = 1, SomeString = ""One"" },     new SomeClass { SomeInt = 2, SomeString = ""Two"" },     new SomeClass { SomeInt = 3, SomeString = ""Three"" } };  collection.Humanize()                                    // ""Specific String, Specific String, and Specific String"" collection.Humanize(""or"")                                // ""Specific String, Specific String, or Specific String"" collection.Humanize(FormatSomeClass)                     // ""SomeObject #1 - One, SomeObject #2 - Two, and SomeObject #3 - Three"" collection.Humanize(sc => sc.SomeInt.Ordinalize(), ""or"") // ""1st, 2nd, or 3rd"" Items are trimmed and blank (NullOrWhitespace) items are skipped. This results in clean comma punctuation. (If there is a custom formatter function, this applies only to the formatter's output.) You can provide your own collection formatter by implementing ICollectionFormatter and registering it with Configurator.CollectionFormatters. Inflector methods There are also a few inflector methods: Pluralize Pluralize pluralizes the provided input while taking irregular and uncountable words into consideration: ""Man"".Pluralize() => ""Men"" ""string"".Pluralize() => ""strings"" Normally you would call Pluralize on a singular word but if you're unsure about the singularity of the word you can call the method with the optional inputIsKnownToBeSingular argument: ""Men"".Pluralize(inputIsKnownToBeSingular: false) => ""Men"" ""Man"".Pluralize(inputIsKnownToBeSingular: false) => ""Men"" ""string"".Pluralize(inputIsKnownToBeSingular: false) => ""strings"" The overload of Pluralize with plurality argument is obsolete and was removed in version 2.0. Singularize Singularize singularizes the provided input while taking irregular and uncountable words into consideration: ""Men"".Singularize() => ""Man"" ""strings"".Singularize() => ""string"" Normally you would call Singularize on a plural word but if you're unsure about the plurality of the word you can call the method with the optional inputIsKnownToBePlural argument: ""Men"".Singularize(inputIsKnownToBePlural: false) => ""Man"" ""Man"".Singularize(inputIsKnownToBePlural: false) => ""Man"" ""strings"".Singularize(inputIsKnownToBePlural: false) => ""string"" The overload of Singularize with plurality argument is obsolete and was removed in version 2.0. Adding Words Sometimes, you may need to add a rule from the singularization/pluralization vocabulary (the examples below are already in the DefaultVocabluary used by Inflector): // Adds a word to the vocabulary which cannot easily be pluralized/singularized by RegEx. // Will match both ""salesperson"" and ""person"". Vocabularies.Default.AddIrregular(""person"", ""people"");  // To only match ""person"" and not ""salesperson"" you would pass false for the 'matchEnding' parameter. Vocabularies.Default.AddIrregular(""person"", ""people"", matchEnding: false);  // Adds an uncountable word to the vocabulary.  Will be ignored when plurality is changed: Vocabularies.Default.AddUncountable(""fish"");  // Adds a rule to the vocabulary that does not follow trivial rules for pluralization: Vocabularies.Default.AddPlural(""bus"", ""buses"");  // Adds a rule to the vocabulary that does not follow trivial rules for singularization // (will match both ""vertices"" -> ""vertex"" and ""indices"" -> ""index""): Vocabularies.Default.AddSingular(""(vert|ind)ices$"", ""$1ex"");  ToQuantity Many times you want to call Singularize and Pluralize to prefix a word with a number; e.g. ""2 requests"", ""3 men"". ToQuantity prefixes the provided word with the number and accordingly pluralizes or singularizes the word: ""case"".ToQuantity(0) => ""0 cases"" ""case"".ToQuantity(1) => ""1 case"" ""case"".ToQuantity(5) => ""5 cases"" ""man"".ToQuantity(0) => ""0 men"" ""man"".ToQuantity(1) => ""1 man"" ""man"".ToQuantity(2) => ""2 men"" ToQuantity can figure out whether the input word is singular or plural and will singularize or pluralize as necessary: ""men"".ToQuantity(2) => ""2 men"" ""process"".ToQuantity(2) => ""2 processes"" ""process"".ToQuantity(1) => ""1 process"" ""processes"".ToQuantity(2) => ""2 processes"" ""processes"".ToQuantity(1) => ""1 process"" You can also pass a second argument, ShowQuantityAs, to ToQuantity to specify how you want the provided quantity to be outputted. The default value is ShowQuantityAs.Numeric which is what we saw above. The other two values are ShowQuantityAs.Words and ShowQuantityAs.None. ""case"".ToQuantity(5, ShowQuantityAs.Words) => ""five cases"" ""case"".ToQuantity(5, ShowQuantityAs.None) => ""cases"" There is also an overload that allows you to format the number. You can pass in the format and the culture to be used. ""dollar"".ToQuantity(2, ""C0"", new CultureInfo(""en-US"")) => ""$2 dollars"" ""dollar"".ToQuantity(2, ""C2"", new CultureInfo(""en-US"")) => ""$2.00 dollars"" ""cases"".ToQuantity(12000, ""N0"") => ""12,000 cases"" Ordinalize Ordinalize turns a number into an ordinal string used to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th: 1.Ordinalize() => ""1st"" 5.Ordinalize() => ""5th"" You can also call Ordinalize on a numeric string and achieve the same result: ""21"".Ordinalize() => ""21st"" Ordinalize also supports grammatical gender for both forms. You can pass an argument to Ordinalize to specify which gender the number should be outputted in. The possible values are GrammaticalGender.Masculine, GrammaticalGender.Feminine and GrammaticalGender.Neuter: // for Brazilian Portuguese locale 1.Ordinalize(GrammaticalGender.Masculine) => ""1º"" 1.Ordinalize(GrammaticalGender.Feminine) => ""1ª"" 1.Ordinalize(GrammaticalGender.Neuter) => ""1º"" ""2"".Ordinalize(GrammaticalGender.Masculine) => ""2º"" ""2"".Ordinalize(GrammaticalGender.Feminine) => ""2ª"" ""2"".Ordinalize(GrammaticalGender.Neuter) => ""2º"" Obviously this only applies to some cultures. For others passing gender in or not passing at all doesn't make any difference in the result. Titleize Titleize converts the input words to Title casing; equivalent to ""some title"".Humanize(LetterCasing.Title) Pascalize Pascalize converts the input words to UpperCamelCase, also removing underscores: ""some_title"".Pascalize() => ""SomeTitle"" Camelize Camelize behaves identically to Pascalize, except that the first character is lower case: ""some_title"".Camelize() => ""someTitle"" Underscore Underscore separates the input words with underscore: ""SomeTitle"".Underscore() => ""some_title"" Dasherize & Hyphenate Dasherize and Hyphenate replace underscores with dashes in the string: ""some_title"".Dasherize() => ""some-title"" ""some_title"".Hyphenate() => ""some-title"" Fluent Date Humanizer provides a fluent API to deal with DateTime and TimeSpan as follows: TimeSpan methods: 2.Milliseconds() => TimeSpan.FromMilliseconds(2) 2.Seconds() => TimeSpan.FromSeconds(2) 2.Minutes() => TimeSpan.FromMinutes(2) 2.Hours() => TimeSpan.FromHours(2) 2.Days() => TimeSpan.FromDays(2) 2.Weeks() => TimeSpan.FromDays(14) There are no fluent APIs for month or year as a month could have between 28 to 31 days and a year could be 365 or 366 days. You could use these methods to, for example, replace DateTime.Now.AddDays(2).AddHours(3).AddMinutes(-5) with DateTime.Now + 2.Days() + 3.Hours() - 5.Minutes() There are also three categories of fluent methods to deal with DateTime: In.TheYear(2010) // Returns the first of January of 2010 In.January // Returns 1st of January of the current year In.FebruaryOf(2009) // Returns 1st of February of 2009  In.One.Second //  DateTime.UtcNow.AddSeconds(1); In.Two.SecondsFrom(DateTime dateTime) In.Three.Minutes // With corresponding From method In.Three.Hours // With corresponding From method In.Three.Days // With corresponding From method In.Three.Weeks // With corresponding From method In.Three.Months // With corresponding From method In.Three.Years // With corresponding From method  On.January.The4th // Returns 4th of January of the current year On.February.The(12) // Returns 12th of Feb of the current year and some extension methods: var someDateTime = new DateTime(2011, 2, 10, 5, 25, 45, 125);  // Returns new DateTime(2008, 2, 10, 5, 25, 45, 125) changing the year to 2008 someDateTime.In(2008)  // Returns new DateTime(2011, 2, 10, 2, 25, 45, 125) changing the hour to 2:25:45.125 someDateTime.At(2)  // Returns new DateTime(2011, 2, 10, 2, 20, 15, 125) changing the time to 2:20:15.125 someDateTime.At(2, 20, 15)  // Returns new DateTime(2011, 2, 10, 12, 0, 0) changing the time to 12:00:00.000 someDateTime.AtNoon()  // Returns new DateTime(2011, 2, 10, 0, 0, 0) changing the time to 00:00:00.000 someDateTime.AtMidnight() Obviously you could chain the methods too; e.g. On.November.The13th.In(2010).AtNoon + 5.Minutes() Number to numbers Humanizer provides a fluent API that produces (usually big) numbers in a clearer fashion: 1.25.Billions() => 1250000000 3.Hundreds().Thousands() => 300000 Number to words Humanizer can change numbers to words using the ToWords extension: 1.ToWords() => ""one"" 10.ToWords() => ""ten"" 11.ToWords() => ""eleven"" 122.ToWords() => ""one hundred and twenty-two"" 3501.ToWords() => ""three thousand five hundred and one"" You can also pass a second argument, GrammaticalGender, to ToWords to specify which gender the number should be outputted in. The possible values are GrammaticalGender.Masculine, GrammaticalGender.Feminine and GrammaticalGender.Neuter: // for Russian locale 1.ToWords(GrammaticalGender.Masculine) => ""один"" 1.ToWords(GrammaticalGender.Feminine) => ""одна"" 1.ToWords(GrammaticalGender.Neuter) => ""одно"" // for Arabic locale 1.ToWords(GrammaticalGender.Masculine) => ""واحد"" 1.ToWords(GrammaticalGender.Feminine) => ""واحدة"" 1.ToWords(GrammaticalGender.Neuter) => ""واحد"" Obviously this only applies to some cultures. For others passing gender in doesn't make any difference in the result. Also, culture to use can be specified explicitly. If it is not, current thread's current UI culture is used. Here's an example: 11.ToWords(new CultureInfo(""en"")) => ""eleven"" 1.ToWords(GrammaticalGender.Masculine, new CultureInfo(""ru"")) => ""один"" Number to ordinal words This is kind of mixing ToWords with Ordinalize. You can call ToOrdinalWords on a number to get an ordinal representation of the number in words! For example: 0.ToOrdinalWords() => ""zeroth"" 1.ToOrdinalWords() => ""first"" 2.ToOrdinalWords() => ""second"" 8.ToOrdinalWords() => ""eighth"" 10.ToOrdinalWords() => ""tenth"" 11.ToOrdinalWords() => ""eleventh"" 12.ToOrdinalWords() => ""twelfth"" 20.ToOrdinalWords() => ""twentieth"" 21.ToOrdinalWords() => ""twenty first"" 121.ToOrdinalWords() => ""hundred and twenty first"" ToOrdinalWords also supports grammatical gender. You can pass a second argument to ToOrdinalWords to specify the gender of the output. The possible values are GrammaticalGender.Masculine, GrammaticalGender.Feminine and GrammaticalGender.Neuter: // for Brazilian Portuguese locale 1.ToOrdinalWords(GrammaticalGender.Masculine) => ""primeiro"" 1.ToOrdinalWords(GrammaticalGender.Feminine) => ""primeira"" 1.ToOrdinalWords(GrammaticalGender.Neuter) => ""primeiro"" 2.ToOrdinalWords(GrammaticalGender.Masculine) => ""segundo"" 2.ToOrdinalWords(GrammaticalGender.Feminine) => ""segunda"" 2.ToOrdinalWords(GrammaticalGender.Neuter) => ""segundo"" // for Brazilian Portuguese locale 1.ToOrdinalWords(GrammaticalGender.Masculine) => ""الأول"" 1.ToOrdinalWords(GrammaticalGender.Feminine) => ""الأولى"" 1.ToOrdinalWords(GrammaticalGender.Neuter) => ""الأول"" 2.ToOrdinalWords(GrammaticalGender.Masculine) => ""الثاني"" 2.ToOrdinalWords(GrammaticalGender.Feminine) => ""الثانية"" 2.ToOrdinalWords(GrammaticalGender.Neuter) => ""الثاني"" Obviously this only applies to some cultures. For others passing gender in doesn't make any difference in the result. Also, culture to use can be specified explicitly. If it is not, current thread's current UI culture is used. Here's an example: 10.ToOrdinalWords(new CultureInfo(""en-US"")) => ""tenth"" 1.ToOrdinalWords(GrammaticalGender.Masculine, new CulureInfo(""pt-BR"")) => ""primeiro"" Roman numerals Humanizer can change numbers to Roman numerals using the ToRoman extension. The numbers 1 to 10 can be expressed in Roman numerals as follows: 1.ToRoman() => ""I"" 2.ToRoman() => ""II"" 3.ToRoman() => ""III"" 4.ToRoman() => ""IV"" 5.ToRoman() => ""V"" 6.ToRoman() => ""VI"" 7.ToRoman() => ""VII"" 8.ToRoman() => ""VIII"" 9.ToRoman() => ""IX"" 10.ToRoman() => ""X"" Also the reverse operation using the FromRoman extension. ""I"".FromRoman() => 1 ""II"".FromRoman() => 2 ""III"".FromRoman() => 3 ""IV"".FromRoman() => 4 ""V"".FromRoman() => 5 Metric numerals Humanizer can change numbers to Metric numerals using the ToMetric extension. The numbers 1, 1230 and 0.1 can be expressed in Metric numerals as follows: 1d.ToMetric() => ""1"" 1230d.ToMetric() => ""1.23k"" 0.1d.ToMetric() => ""100m"" Also the reverse operation using the FromMetric extension. 1d.ToMetric() => ""1"" 1230d.ToMetric() => ""1.23k"" 0.1d.ToMetric() => ""100m""  ""1"".FromMetric() => 1 ""1.23k"".FromMetric() => 1230 ""100m"".FromMetric() => 0.1 ByteSize Humanizer includes a port of the brilliant ByteSize library. Quite a few changes and additions are made on ByteSize to make the interaction with ByteSize easier and more consistent with the Humanizer API. Here is a few examples of how you can convert from numbers to byte sizes and between size magnitudes: var fileSize = (10).Kilobytes();  fileSize.Bits      => 81920 fileSize.Bytes     => 10240 fileSize.Kilobytes => 10 fileSize.Megabytes => 0.009765625 fileSize.Gigabytes => 9.53674316e-6 fileSize.Terabytes => 9.31322575e-9 There are a few extension methods that allow you to turn a number into a ByteSize instance: 3.Bits(); 5.Bytes(); (10.5).Kilobytes(); (2.5).Megabytes(); (10.2).Gigabytes(); (4.7).Terabytes(); You can also add/subtract the values using +/- operators and Add/Subtract methods: var total = (10).Gigabytes() + (512).Megabytes() - (2.5).Gigabytes(); total.Subtract((2500).Kilobytes()).Add((25).Megabytes()); A ByteSize object contains two properties that represent the largest metric prefix symbol and value: var maxFileSize = (10).Kilobytes();  maxFileSize.LargestWholeNumberSymbol;  // ""KB"" maxFileSize.LargestWholeNumberValue;   // 10 If you want a string representation you can call ToString or Humanize interchangeably on the ByteSize instance: 7.Bits().ToString();         // 7 b 8.Bits().ToString();         // 1 B (.5).Kilobytes().Humanize();   // 512 B (1000).Kilobytes().ToString(); // 1000 KB (1024).Kilobytes().Humanize(); // 1 MB (.5).Gigabytes().Humanize();   // 512 MB (1024).Gigabytes().ToString(); // 1 TB You can also optionally provide a format for the expected string representation. The formatter can contain the symbol of the value to display: b, B, KB, MB, GB, TB. The formatter uses the built in double.ToString method with #.## as the default format which rounds the number to two decimal places: var b = (10.505).Kilobytes();  // Default number format is #.## b.ToString(""KB"");         // 10.52 KB b.Humanize(""MB"");         // .01 MB b.Humanize(""b"");          // 86057 b  // Default symbol is the largest metric prefix value >= 1 b.ToString(""#.#"");        // 10.5 KB  // All valid values of double.ToString(string format) are acceptable b.ToString(""0.0000"");     // 10.5050 KB b.Humanize(""000.00"");     // 010.51 KB  // You can include number format and symbols b.ToString(""#.#### MB"");  // .0103 MB b.Humanize(""0.00 GB"");    // 0 GB b.Humanize(""#.## B"");     // 10757.12 B There isn't a Dehumanize method to turn a string representation back into a ByteSize instance; but you can use Parse and TryParse on ByteSize to do that. Like other TryParse methods, ByteSize.TryParse returns boolean value indicating whether or not the parsing was successful. If the value is parsed it is output to the out parameter supplied: ByteSize output; ByteSize.TryParse(""1.5mb"", out output);  // Invalid ByteSize.Parse(""1.5 b"");   // Can't have partial bits  // Valid ByteSize.Parse(""5b""); ByteSize.Parse(""1.55B""); ByteSize.Parse(""1.55KB""); ByteSize.Parse(""1.55 kB ""); // Spaces are trimmed ByteSize.Parse(""1.55 kb""); ByteSize.Parse(""1.55 MB""); ByteSize.Parse(""1.55 mB""); ByteSize.Parse(""1.55 mb""); ByteSize.Parse(""1.55 GB""); ByteSize.Parse(""1.55 gB""); ByteSize.Parse(""1.55 gb""); ByteSize.Parse(""1.55 TB""); ByteSize.Parse(""1.55 tB""); ByteSize.Parse(""1.55 tb"");  Finally, if you need to calculate the rate at which a quantity of bytes has been transferred, you can use the Per method of ByteSize. The Per method accepts one argument - the measurement interval for the bytes; this is the amount of time it took to transfer the bytes. The Per method returns a ByteRate class which has a Humanize method. By default, rates are given in seconds (eg, MB/s). However, if desired, a TimeUnit may be passed to Humanize for an alternate interval. Valid intervals are TimeUnit.Second, TimeUnit.Minute, and TimeUnit.Hour. Examples of each interval and example byte rate usage is below. var size = ByteSize.FromMegabytes(10); var measurementInterval = TimeSpan.FromSeconds(1);  var text = size.Per(measurementInterval).Humanize(); // 10 MB/s  text = size.Per(measurementInterval).Humanize(TimeUnit.Minute); // 600 MB/min  text = size.Per(measurementInterval).Humanize(TimeUnit.Hour); // 35.15625 GB/hour  You can specify a format for the bytes part of the humanized output: 19854651984.Bytes().Per(1.Seconds()).Humanize(""#.##""); // 18.49 GB/s  Mix this into your framework to simplify your life This is just a baseline and you can use this to simplify your day to day job. For example, in Asp.Net MVC we keep chucking Display attribute on ViewModel properties so HtmlHelper can generate correct labels for us; but, just like enums, in vast majority of cases we just need a space between the words in property name - so why not use ""string"".Humanize for that?! You may find an Asp.Net MVC sample in the code that does that (although the project is excluded from the solution file to make the nuget package available for .Net 3.5 too). This is achieved using a custom DataAnnotationsModelMetadataProvider I called HumanizerMetadataProvider. It is small enough to repeat here; so here we go: using System; using System.Collections.Generic; using System.ComponentModel; using System.ComponentModel.DataAnnotations; using System.Linq; using System.Web.Mvc; using Humanizer;  namespace YourApp {     public class HumanizerMetadataProvider : DataAnnotationsModelMetadataProvider     {         protected override ModelMetadata CreateMetadata(             IEnumerable<Attribute> attributes,             Type containerType,             Func<object> modelAccessor,             Type modelType,             string propertyName)         {             var propertyAttributes = attributes.ToList();             var modelMetadata = base.CreateMetadata(propertyAttributes, containerType, modelAccessor, modelType, propertyName);              if (IsTransformRequired(modelMetadata, propertyAttributes))                 modelMetadata.DisplayName = modelMetadata.PropertyName.Humanize();              return modelMetadata;         }          private static bool IsTransformRequired(ModelMetadata modelMetadata, IList<Attribute> propertyAttributes)         {             if (string.IsNullOrEmpty(modelMetadata.PropertyName))                 return false;              if (propertyAttributes.OfType<DisplayNameAttribute>().Any())                 return false;              if (propertyAttributes.OfType<DisplayAttribute>().Any())                 return false;              return true;         }     } } This class calls the base class to extract the metadata and then, if required, humanizes the property name. It is checking if the property already has a DisplayName or Display attribute on it in which case the metadata provider will just honor the attribute and leave the property alone. For other properties it will Humanize the property name. That is all. Now you need to register this metadata provider with Asp.Net MVC. Make sure you use System.Web.Mvc.ModelMetadataProviders, and not System.Web.ModelBinding.ModelMetadataProviders: ModelMetadataProviders.Current = new HumanizerMetadataProvider(); ... and now you can replace: public class RegisterModel {     [Display(Name = ""User name"")]     public string UserName { get; set; }      [Display(Name = ""Email address"")]     public string EmailAddress { get; set; }      [Display(Name = ""Confirm password"")]     public string ConfirmPassword { get; set; } } with: public class RegisterModel {     public string UserName { get; set; }     public string EmailAddress { get; set; }     public string ConfirmPassword { get; set; } } ... and the ""metadata humanizer"" will take care of the rest. No need to mention that if you want title casing for your labels you can chain the method with Transform: modelMetadata.DisplayName = modelMetadata.PropertyName.Humanize().Transform(To.TitleCase); Known installation issues and workarounds Due to a bug in the CLI tools, the main Humanizer package and it's language packages will fail to install. As temporary workaround, until that bug is fixed, use Humanizer.xproj instead. It contains all of the languages. Use in ASP.NET 4.x MVC Views Humanizer is a Portable Class Library. There is currently an issue if you try to use PCL's in an MVC view since the MVC views do not share the same build system as the regular project. You must specify all references in the web.config file, including ones the project system normally automatically adds. If you encounter errors saying that you must add a reference to either System.Runtime or System.Globalization, this applies to you. The solution is to add the contract references to your web.config as listed here. Note that this applies to any PCL you use in an MVC view, not just Humanizer. How to contribute? Please see CONTRIBUTING.md. Continuous Integration from AppVeyor Humanizer project is built & tested continuously by AppVeyor (more details here). That applies to pull requests too. Shortly after you submit a PR you can check the build and test status notification on your PR. Feel free to jump in and contribute some green PRs! The current build status on the CI server is Related projects Below is a list of related open source projects: Humanizer ReSharper Annotations If you use ReSharper, annotations for Humanizer are available in the Humanizer.Annotations package, which you can obtain via the ReSharper Extension Manager. These annotations do not yet cover the entire library, but pull requests are always welcome!. PowerShell Humanizer PowerShell Humanizer is a PowerShell module that wraps Humanizer. Humanizer JVM Humanizer.jvm is an adaptation of the Humanizer framework for .Net which is made for the jvm and is written in Kotlin. Humanizer.jvm meets all your jvm needs for manipulating and displaying strings, enums, dates, times, timespans, numbers and quantities. Humanizer.JS Humanizer.JS is a TypeScript port of the Humanizer framework. Main contributors Mehdi Khalili (@MehdiKhalili) Oren Novotny (@onovotny) Alexander I. Zaytsev (@hazzik) Max Malook (@mexx) License Humanizer is released under the MIT License. See the bundled LICENSE file for details. Icon Icon created by Tyrone Rieschiek Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Humanizr/Humanizer"	"Humanizer meets all your.NET needs for manipulating and displaying strings, enums, dates, times, timespans, numbers and quantities"	"true"
"Misc"	"LINQPad"	"http://www.linqpad.net"	"a C#/VB/F# scratchpad that instantly executes any expression, statement block or program with rich output formatting and a wealth of features. Also lets you interactively query databases in LINQ. [$]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"LINQPad - The .NET Programmer's Playground  LINQPad Home Download Purchase Upgrade FAQ Resources Resellers Support The .NET Programmer’s Playground Instantly test any C#/F#/VB snippet or program Query databases in LINQ (or SQL) — SQL/CE/Azure, Oracle, SQLite & MySQL Enjoy rich output formatting, optional autocompletion and integrated debugging Script and automate in your favorite .NET language Super lightweight — single 15MB executable! Standard edition free, with no expiry 1.5 million downloads Download LINQPad The Ultimate Scratchpad for C#, F# and VB LINQPad is not just for LINQ queries, but any C#/F#/VB expression, statement block or program. Put an end to those hundreds of Visual Studio Console projects cluttering your source folder and join the revolution of LINQPad scripters and incremental developers. Reference your own assemblies and NuGet packages. Prototype your ideas in LINQPad and then paste working code into Visual Studio. Or call your scripts directly from the command-line. Experience LINQPad’s rich output formatting, optional debugger and autocompletion, and the magic of dynamic development and instant feedback! Learn more Tired of Querying in Antiquated SQL? “ Fantastic Learning Tool” Scott Hanselman, Principal Program Manager, Microsoft Full support for C# 6 and VB 14 in LINQPad 5. Well, you don’t have to! With LINQPad, you can interactively query databases in a modern query language: LINQ. LINQPad includes an optimized engine to build typed data contexts on the fly, and includes drivers and formatters for: SQL Server, SQL Azure, SQL CE, Oracle, SQLite and MySQL Azure Table Storage & Azure Metadata OData / WCF Data Services, SharePoint, and Windows DataMarket Microsoft’s StreamInsight, ubercool Reactive Extensions and LINQ to Logs & Traces Third-party ORMs including Mindscape LightSpeed, DevArt’s LinqConnect, LLBLGen, DevExpress eXpress Persistent Objects and DevForce LINQPad also supports all the LINQ APIs in the .NET Framework, including LINQ to XML, PLINQ, LINQ to SQL and Entity Framework. “This is one of those useful tools you just should always have around and ‘linqed’ to a hotkey” Rick Strahl, West Wind Technologies And when you need to, you can still query in good old-fashioned SQL — even if your back-end is SQLite, Oracle or MySQL. Without any heavy installations or oppressive EULAs! LINQPad is also a great way to learn LINQ: it comes loaded with 500 examples from the book, C# 6.0 in a Nutshell. There’s no better way to experience the coolness of LINQ and functional programming. Experience the Legendary Dump! LINQPad’s Dump method is famous for its capacity to eat almost anything! Tuned with numerous heuristics, it intelligently walks object graphs for the best possible output. It even turns lazy objects into hyperlinks and asynchronous values into placeholders whose content materializes in the future! Images and bitmaps render as images and bitmaps, and types from Reactive Extensions and Dataflow fully animate. Dump any WPF or Windows Forms object and it will actually render. And when you need a traditional data grid or debugger watch window, it’s there, too. Download LINQPad Back to Top follow @linqpad Twitter Follow LINQPad on Facebook Make a Feature Request Visit the LINQPad Forum Contact Customer Support © Joseph Albahari 2007-2015"	"null"	"null"	"a C#/VB/F# scratchpad that instantly executes any expression, statement block or program with rich output formatting and a wealth of features. Also lets you interactively query databases in LINQ. [$]"	"true"
"Misc"	"Polly"	"https://github.com/App-vNext/Polly"	"Express transient exception handling policies such as Retry, Retry Forever, Wait andRetry or Circuit Breaker in a fluent manner. (.NET 3.5 / 4.0 / 4.5 / PCL / Xamarin)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1517"	"117"	"145"	"GitHub - App-vNext/Polly: Polly is a .NET 3.5 / 4.0 / 4.5 / PCL library that allows developers to express transient exception and fault handling policies such as Retry, Retry Forever, Wait and Retry or Circuit Breaker in a fluent manner. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 117 Star 1,517 Fork 145 App-vNext/Polly Code Issues 17 Pull requests 1 Wiki Pulse Graphs Polly is a .NET 3.5 / 4.0 / 4.5 / PCL library that allows developers to express transient exception and fault handling policies such as Retry, Retry Forever, Wait and Retry or Circuit Breaker in a fluent manner. 428 commits 3 branches 2 releases 21 contributors C# 99.7% Other 0.3% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master net40async-nuget-package-fix Nothing to show v1.1.0 v1.0.0 Nothing to show New pull request Latest commit 544d108 Jun 30, 2016 joelhulen committed on GitHub Merge pull request #130 from reisenberger/PolicyTResultGenericClass … Allow policies to handle return results / unblock forward roadmap Permalink Failed to load latest commit information. src Fix circuit-breaker consecutive count issue Jun 30, 2016 .gitattributes Update gitattributes to ignore md line end changes Jan 1, 2016 .gitignore Use NuSpec refgen to put correct dotnet targets Dec 4, 2015 CHANGELOG.md Fix circuit-breaker consecutive count issue Jun 29, 2016 GitVersionConfig.yaml Documentation for policies handling results Jun 29, 2016 LICENSE.txt Update LICENSE.txt Dec 9, 2015 Polly.png Move image back to the repo root Oct 6, 2015 README.md Fix circuit-breaker consecutive count issue Jun 29, 2016 appveyor.yml Add appveyor configuration Oct 6, 2015 build.bat [WIP] Move from psake to cake Oct 6, 2015 build.cake Update build.cake Jun 3, 2016 build.ps1 Use Nuget v3 and remove refgen from cake (handled by build) Dec 4, 2015 README.md Polly Polly is a .NET 3.5 / 4.0 / 4.5 / PCL (Profile 259) library that allows developers to express transient exception- and fault-handling policies such as Retry, Retry Forever, Wait and Retry or Circuit Breaker in a fluent manner. Installing via NuGet Install-Package Polly  You can install the Strongly Named version via: Install-Package Polly-Signed  There are now .NET 4.0 Async versions (via Microsoft.Bcl.Async) of the signed and unsigned NuGet packages, which can be installed via: Install-Package Polly.Net40Async Install-Package Polly.Net40Async-Signed  Please note: The Polly.Net40Async package is only needed if you are targeting .NET 4.0 and need async capabilities. If you are targeting .NET 4.5 or greater, please use the standard Polly package. Usage Step 1 : Specify the type of exceptions you want the policy to handle // Single exception type Policy   .Handle<DivideByZeroException>()  // Single exception type with condition Policy   .Handle<SqlException>(ex => ex.Number == 1205)  // Multiple exception types Policy   .Handle<DivideByZeroException>()   .Or<ArgumentException>()  // Multiple exception types with condition Policy   .Handle<SqlException>(ex => ex.Number == 1205)   .Or<ArgumentException>(ex => ex.ParamName == ""example"") Step 1b: (optionally) Specify return results you want to handle From Polly v4.3.0 onwards, policies wrapping calls returning a TResult can also handle TResult return values: // Handle return value with condition  Policy   .HandleResult<HttpResponse>(r => r.StatusCode == 404)  // Handle multiple return values  Policy   .HandleResult<HttpResponse>(r => r.StatusCode == 500)   .OrResult<HttpResponse>(r => r.StatusCode == 502)  // Handle primitive return values (implied use of .Equals()) Policy   .HandleResult<HttpStatusCode>(HttpStatusCode.InternalServerError)   .OrResult<HttpStatusCode>(HttpStatusCode.BadGateway)  // Handle both exceptions and return values in one policy int[] httpStatusCodesWorthRetrying = {408, 500, 502, 503, 504};  HttpResponse result = Policy   .Handle<HttpException>()   .OrResult<HttpResponse>(r => httpStatusCodesWorthRetrying.Contains(r.StatusCode)) For more information, see Handling Return Values at foot of this readme. Step 2 : Specify how the policy should handle those faults Retry // Retry once Policy   .Handle<DivideByZeroException>()   .Retry()  // Retry multiple times Policy   .Handle<DivideByZeroException>()   .Retry(3)  // Retry multiple times, calling an action on each retry  // with the current exception and retry count Policy     .Handle<DivideByZeroException>()     .Retry(3, (exception, retryCount) =>     {         // do something      });  // Retry multiple times, calling an action on each retry  // with the current exception, retry count and context  // provided to Execute() Policy     .Handle<DivideByZeroException>()     .Retry(3, (exception, retryCount, context) =>     {         // do something      }); Retry forever // Retry forever Policy   .Handle<DivideByZeroException>()   .RetryForever()  // Retry forever, calling an action on each retry with the  // current exception Policy   .Handle<DivideByZeroException>()   .RetryForever(exception =>   {         // do something          });  // Retry forever, calling an action on each retry with the // current exception and context provided to Execute() Policy   .Handle<DivideByZeroException>()   .RetryForever((exception, context) =>   {         // do something          }); Retry and Wait // Retry, waiting a specified duration between each retry Policy   .Handle<DivideByZeroException>()   .WaitAndRetry(new[]   {     TimeSpan.FromSeconds(1),     TimeSpan.FromSeconds(2),     TimeSpan.FromSeconds(3)   });  // Retry, waiting a specified duration between each retry,  // calling an action on each retry with the current exception // and duration Policy   .Handle<DivideByZeroException>()   .WaitAndRetry(new[]   {     TimeSpan.FromSeconds(1),     TimeSpan.FromSeconds(2),     TimeSpan.FromSeconds(3)   }, (exception, timeSpan) => {     // do something       });   // Retry, waiting a specified duration between each retry,  // calling an action on each retry with the current exception,  // duration and context provided to Execute() Policy   .Handle<DivideByZeroException>()   .WaitAndRetry(new[]   {     TimeSpan.FromSeconds(1),     TimeSpan.FromSeconds(2),     TimeSpan.FromSeconds(3)   }, (exception, timeSpan, context) => {     // do something       });  // Retry, waiting a specified duration between each retry,  // calling an action on each retry with the current exception,  // duration, retry count, and context provided to Execute() Policy   .Handle<DivideByZeroException>()   .WaitAndRetry(new[]   {     TimeSpan.FromSeconds(1),     TimeSpan.FromSeconds(2),     TimeSpan.FromSeconds(3)   }, (exception, timeSpan, retryCount, context) => {     // do something       });  // Retry a specified number of times, using a function to  // calculate the duration to wait between retries based on  // the current retry attempt (allows for exponential backoff) // In this case will wait for //  2 ^ 1 = 2 seconds then //  2 ^ 2 = 4 seconds then //  2 ^ 3 = 8 seconds then //  2 ^ 4 = 16 seconds then //  2 ^ 5 = 32 seconds Policy   .Handle<DivideByZeroException>()   .WaitAndRetry(5, retryAttempt =>      TimeSpan.FromSeconds(Math.Pow(2, retryAttempt))    );  // Retry a specified number of times, using a function to  // calculate the duration to wait between retries based on  // the current retry attempt, calling an action on each retry  // with the current exception, duration and context provided  // to Execute() Policy   .Handle<DivideByZeroException>()   .WaitAndRetry(     5,      retryAttempt => TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)),      (exception, timeSpan, context) => {       // do something     }   );  // Retry a specified number of times, using a function to  // calculate the duration to wait between retries based on  // the current retry attempt, calling an action on each retry  // with the current exception, duration, retry count, and context  // provided to Execute() Policy   .Handle<DivideByZeroException>()   .WaitAndRetry(     5,      retryAttempt => TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)),      (exception, timeSpan, retryCount, context) => {       // do something     }   ); Wait and retry forever // Wait and retry forever Policy   .Handle<DivideByZeroException>()   .WaitAndRetryForever(retryAttempt =>      TimeSpan.FromSeconds(Math.Pow(2, retryAttempt))     );  // Wait and retry forever, calling an action on each retry with the  // current exception and the time to wait Policy   .Handle<DivideByZeroException>()   .WaitAndRetryForever(     retryAttempt => TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)),         (exception, timespan) =>     {         // do something            });  // Wait and retry forever, calling an action on each retry with the // current exception, time to wait, and context provided to Execute() Policy   .Handle<DivideByZeroException>()   .WaitAndRetryForever(     retryAttempt => TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)),         (exception, timespan, context) =>     {         // do something            }); For further information on the operation of retry policies, see also the wiki. Circuit Breaker // Break the circuit after the specified number of exceptions // and keep circuit broken for the specified duration. Policy     .Handle<DivideByZeroException>()     .CircuitBreaker(2, TimeSpan.FromMinutes(1));  // Break the circuit after the specified number of exceptions // and keep circuit broken for the specified duration, // calling an action on change of circuit state. Action<Exception, TimeSpan> onBreak = (exception, timespan) => { ... }; Action onReset = () => { ... }; CircuitBreakerPolicy breaker = Policy     .Handle<DivideByZeroException>()     .CircuitBreaker(2, TimeSpan.FromMinutes(1), onBreak, onReset);  // Break the circuit after the specified number of exceptions // and keep circuit broken for the specified duration, // calling an action on change of circuit state, // passing a context provided to Execute(). Action<Exception, TimeSpan, Context> onBreak = (exception, timespan, context) => { ... }; Action<Context> onReset = context => { ... }; CircuitBreakerPolicy breaker = Policy     .Handle<DivideByZeroException>()     .CircuitBreaker(2, TimeSpan.FromMinutes(1), onBreak, onReset);  // Monitor the circuit state, for example for health reporting. CircuitState state = breaker.CircuitState;  /* CircuitState.Closed - Normal operation. Execution of actions allowed. CircuitState.Open - The automated controller has opened the circuit. Execution of actions blocked. CircuitState.HalfOpen - Recovering from open state, after the automated break duration has expired. Execution of actions permitted. Success of subsequent action/s controls onward transition to Open or Closed state. CircuitState.Isolated - Circuit held manually in an open state. Execution of actions blocked. */  // Manually open (and hold open) a circuit breaker - for example to manually isolate a downstream service. breaker.Isolate();  // Reset the breaker to closed state, to start accepting actions again. breaker.Reset();   For further information on the operation of circuit breaker, see also the wiki. Advanced Circuit Breaker // Break the circuit if, within any period of duration samplingDuration,  // the proportion of actions resulting in a handled exception exceeds failureThreshold,  // provided also that the number of actions through the circuit in the period // is at least minimumThroughput.  Policy     .Handle<DivideByZeroException>()     .AdvancedCircuitBreaker(         failureThreshold: 0.5, // Break on >=50% actions result in handled exceptions...         samplingDuration: TimeSpan.FromSeconds(10), // ... over any 10 second period         minimumThroughput: 8, // ... provided at least 8 actions in the 10 second period.         durationOfBreak: TimeSpan.FromSeconds(30) // Break for 30 seconds.                 );  // Configuration overloads taking state-change delegates are // available as described for CircuitBreaker above.  // Circuit state monitoring and manual controls are // available as described for CircuitBreaker above. For further information on the operation of Advanced Circuit Breaker, see the Wiki For more information on the Circuit Breaker pattern in general see: Making the Netflix API More Resilient Circuit Breaker (Martin Fowler) Circuit Breaker Pattern (Microsoft) Circuit breaking with Polly Original Circuit Breaking Link Step 3 : Execute the policy // Execute an action var policy = Policy               .Handle<DivideByZeroException>()               .Retry();  policy.Execute(() => DoSomething());  // Execute an action passing arbitrary context data var policy = Policy     .Handle<DivideByZeroException>()     .Retry(3, (exception, retryCount, context) =>     {         var methodThatRaisedException = context[""methodName""];         Log(exception, methodThatRaisedException);     });  policy.Execute(     () => DoSomething(),     new Dictionary<string, object>() {{ ""methodName"", ""some method"" }} );  // Execute a function returning a result var policy = Policy               .Handle<DivideByZeroException>()               .Retry();  var result = policy.Execute(() => DoSomething());  // Execute a function returning a result passing arbitrary context data var policy = Policy     .Handle<DivideByZeroException>()     .Retry(3, (exception, retryCount, context) =>     {         object methodThatRaisedException = context[""methodName""];         Log(exception, methodThatRaisedException)     });  var result = policy.Execute(     () => DoSomething(),     new Dictionary<string, object>() {{ ""methodName"", ""some method"" }} );  // You can of course chain it all together Policy   .Handle<SqlException>(ex => ex.Number == 1205)   .Or<ArgumentException>(ex => ex.ParamName == ""example"")   .Retry()   .Execute(() => DoSomething()); Post Execution Steps Using the ExecuteAndCapture method you can capture the result of executing a policy. var policyResult = Policy               .Handle<DivideByZeroException>()               .Retry()               .ExecuteAndCapture(() => DoSomething()); /*               policyResult.Outcome - whether the call succeeded or failed          policyResult.FinalException - the final exception captured, will be null if the call succeeded policyResult.ExceptionType - was the final exception an exception the policy was defined to handle (like DivideByZeroException above) or an unhandled one (say Exception). Will be null if the call succeeded. policyResult.Result - if executing a func, the result if the call succeeded or the type's default value */ Asynchronous Support (.NET 4.5, PCL and .NET4.0) You can use Polly with asynchronous functions by using the asynchronous methods RetryAsync RetryForeverAsync WaitAndRetryAsync WaitAndRetryForeverAsync CircuitBreakerAsync AdvancedCircuitBreakerAsync ExecuteAsync ExecuteAndCaptureAsync In place of their synchronous counterparts Retry RetryForever WaitAndRetry WaitAndRetryForever CircuitBreaker AdvancedCircuitBreaker Execute ExecuteAndCapture For example await Policy   .Handle<SqlException>(ex => ex.Number == 1205)   .Or<ArgumentException>(ex => ex.ParamName == ""example"")   .RetryAsync()   .ExecuteAsync(() => DoSomethingAsync());  SynchronizationContext Async continuations and retries by default do not run on a captured synchronization context. To change this, use .ExecuteAsync(...) overloads taking a boolean continueOnCapturedContext parameter. Cancellation support Async policy execution supports cancellation via .ExecuteAsync(...) overloads taking a CancellationToken. Cancellation cancels Policy actions such as further retries and waits between retries. The delegate taken by the relevant .ExecuteAsync(...) overloads also takes a cancellation token input parameter, to support cancellation during delegate execution. // Try several times to retrieve from a uri, but support cancellation at any time. CancellationToken cancellationToken = // ... var policy = Policy     .Handle<WebException>()     .Or<HttpRequestException>()     .WaitAndRetryAsync(new[] {          TimeSpan.FromSeconds(1),          TimeSpan.FromSeconds(2),          TimeSpan.FromSeconds(4)      }); var response = await policy.ExecuteAsync(ct => httpClient.GetAsync(uri, ct), cancellationToken); .NET4.0 Async support The .NET4.0 Async support uses Microsoft.Bcl.Async to add async support to a .NET4.0 package. To minimise extra dependencies on the main Polly nuget package, the .NET4.0 async version is available as separate Nuget packages Polly.Net40Async and Polly.Net40Async-signed. Handing return values, and Policy<TResult> As described at step 1b, from Polly v4.3.0 onwards, policies can handle return values and exceptions in combination: // Handle both exceptions and return values in one policy int[] httpStatusCodesWorthRetrying = {408, 500, 502, 503, 504};  HttpResponse result = Policy   .Handle<HttpException>()   .OrResult<HttpResponse>(r => httpStatusCodesWorthRetrying.Contains(r.StatusCode))   .Retry(...)   .Execute( /* some Func<HttpResponse> */ ) The exceptions and return results to handle can be expressed fluently in any order. Strongly-typed Policy<TResult> Configuring a policy with .HandleResult<TResult>(...) or .OrResult<TResult>(...) generates a strongly-typed Policy<TResult> of the specific policy type, eg Retry<TResult>, AdvancedCircuitBreaker<TResult>. These policies must be used to execute delegates returning TResult, ie: Execute(Func<TResult>) (and related overloads) ExecuteAsync(Func<CancellationToken, Task<TResult>>) (and related overloads) ExecuteAndCapture<TResult>() .ExecuteAndCapture(...) on non-generic policies returns a PolicyResult with properties: policyResult.Outcome - whether the call succeeded or failed          policyResult.FinalException - the final exception captured; will be null if the call succeeded policyResult.ExceptionType - was the final exception an exception the policy was defined to handle (like DivideByZeroException above) or an unhandled one (say Exception)? Will be null if the call succeeded. policyResult.Result - if executing a func, the result if the call succeeded or the type's default value  .ExecuteAndCapture<TResult>(Func<TResult>) on strongly-typed policies adds two properties: policyResult.FaultType - was the final fault handled an exception or a result handled by the policy? Will be null if the delegate execution succeeded.  policyResult.FinalHandledResult - the final result handled; will be null if the call succeeded or the type's default value  State-change delegates on Policy<TResult> policies In non-generic policies handling only exceptions, state-change delegates such as onRetry and onBreak take an Exception parameter. In generic-policies handling TResult return values, state-change delegates are identical except they take a DelegateResult<TResult> parameter in place of Exception. DelegateResult<TResult> has two properties: Exception // The exception just thrown if policy is in process of handling an exception (otherwise null) Result // The TResult just raised, if policy is in process of handling a result (otherwise default(TResult)) BrokenCircuitException<TResult> Non-generic CircuitBreaker policies throw a BrokenCircuitException when the circuit is broken. This BrokenCircuitException contains the last exception (the one which caused the circuit to break) as the InnerException. For CircuitBreakerPolicy<TResult> policies: A circuit broken due to an exception throws a BrokenCircuitException with InnerException set to the exception which triggered the break (as previously). A circuit broken due to handling a result throws a BrokenCircuitException<TResult> with the Result property set to the result which caused the circuit to break. 3rd Party Libraries Fluent Assertions - A set of .NET extension methods that allow you to more naturally specify the expected outcome of a TDD or BDD-style test | Apache License 2.0 (Apache) xUnit.net - Free, open source, community-focused unit testing tool for the .NET Framework | Apache License 2.0 (Apache) Ian Griffith's TimedLock Steven van Deursen's ReadOnlyDictionary Acknowledgements lokad-shared-libraries - Helper assemblies for .NET 3.5 and Silverlight 2.0 that are being developed as part of the Open Source effort by Lokad.com (discontinued) | New BSD License @michael-wolfenden - The creator and mastermind of Polly! @ghuntley - Portable Class Library implementation. @mauricedb - Async implementation. @robgibbens - Added existing async files to PCL project Hacko - Added extra NotOnCapturedContext call to prevent potential deadlocks when blocking on asynchronous calls @ThomasMentzel - Added ability to capture the results of executing a policy via ExecuteAndCapture @yevhen - Added full control of whether to continue on captured synchronization context or not @reisenberger - Added full async cancellation support @reisenberger - Added async support for ContextualPolicy @reisenberger - Added ContextualPolicy support for circuit-breaker @reisenberger - Extended circuit-breaker for public monitoring and control @reisenberger - Added ExecuteAndCapture support with arbitrary context data @kristianhald and @reisenberger - Added AdvancedCircuitBreaker @reisenberger - Allowed async onRetry delegates to async retry policies @Lumirris - Add new Polly.Net40Async project/package supporting async for .NET40 via Microsoft.Bcl.Async @SteveCote - Added overloads to WaitAndRetry and WaitAndRetryAsync methods that accept an onRetry delegate which includes the attempt count. @reisenberger - Allowed policies to handle returned results; added strongly-typed policies Policy<TResult>;. @christopherbahr - Added optimisation for circuit-breaker hot path. @Finity - Fixed circuit-breaker threshold bug. Sample Projects Polly-Samples contains practical examples for using various implementations of Polly. Please feel free to contribute to the Polly-Samples repository in order to assist others who are either learning Polly for the first time, or are seeking advanced examples and novel approaches provided by our generous community. Instructions for Contributing Please check out our Wiki for contributing guidelines. We are following the excellent GitHub Flow process, and would like to make sure you have all of the information needed to be a world-class contributor! License Licensed under the terms of the New BSD License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/App-vNext/Polly"	"Express transient exception handling policies such as Retry, Retry Forever, Wait andRetry or Circuit Breaker in a fluent manner. (.NET 3.5 / 4.0 / 4.5 / PCL / Xamarin)"	"true"
"Misc"	"Rant"	"https://github.com/TheBerkin/Rant"	"The Rant Procedural Text Generation DSL"	"null"	"null"	"null"	"null"	"null"	"http://berkin.me/rant/"	"null"	"1443"	"57"	"50"	"GitHub - TheBerkin/Rant: The versatile procedural text generation engine Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 57 Star 1,443 Fork 50 TheBerkin/Rant Code Issues 17 Pull requests 0 Pulse Graphs The versatile procedural text generation engine http://berkin.me/rant 691 commits 4 branches 1 release 6 contributors C# 99.7% Other 0.3% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags german gotta-query-fast master v3 Nothing to show v2.0.0 Nothing to show New pull request Latest commit 3c38201 Jun 4, 2016 TheBerkin Add function for channel length … The [len] function allows the user to retrieve the length, in characters, of any existing channel, printing it to the active output(s). This can be useful for determining the length of specific areas of output that vary in size, allowing the user to later make modifications to specific sections of output in later postprocessing. Permalink Failed to load latest commit information. Rant.Console Start work on new queries Dec 5, 2015 Rant.Tests Module loading from packages. Dec 5, 2015 Rant Add function for channel length Jun 4, 2016 Rave Fix the Rave output path for Release config Nov 15, 2015 .gitattributes Added .gitattributes & .gitignore files Aug 3, 2014 .gitignore Fixed improper [last] behavior inside [after] Oct 15, 2014 CmdLine.cs Command processing bugfix, add -out to rantpkg Mar 27, 2015 LICENSE Create LICENSE Sep 11, 2014 README.md Merge remote-tracking branch 'refs/remotes/origin/master' into v3 Dec 5, 2015 Rant.sln Fix the Rave output path for Release config Nov 15, 2015 Rebracer.xml Add function for channel length Jun 4, 2016 README.md What is Rant? Rant is a language for procedurally generating text, written in C#. It combines a markup language with functional and imperative programming concepts to deliver a powerful, but easy-to-use tool for adding rich variations to your text. The ultimate goal of Rant is to augment your creativity with the boundless potential of randomness, helping you consider your next great idea as not just a static concept, but a seed for countless possibilities. berkin.me/rant Features of Rant Recursive, weighted branching with customizable selection strategies Dictionary queries Automation for capitalization, rhyming, and indefinite articles Multiple output support Richard, an experimental embedded scripting language Probability modifiers Loops, conditionals, and subroutines Package loader for easy resource management Unmanaged function exports for use in C/C++ applications (Windows only, sorry!) Compatible with Unity And a whole lot more! Examples Fill in the blanks <name-male> likes to <verb-transitive> <noun.s> with <pron.poss-male> pet <noun-animal> on <timenoun.s-dayofweek>.  Alick likes to mount shuttlecocks with his pet bat on Mondays.  Generate ten random numbers between 1 and 50 and spell them out [case:sentence][numfmt:verbal-en][rep:10][sep:\s]{[num:1;50].}  Four. Ten. Thirteen. Fifteen. Eighteen. Twenty four. Seven. Forty eight. Nineteen. Twenty five.  Write a poem [rhyme:perfect] The <noun(1)::&a> <verb.ed(1)-transitive::&a> the <adj::&a> <noun(1)::&a>.  The bread fed the red head.  The drug dug the smug plug.  ????? [rs:16;\N] {     [r:50]{([rr])\u2593|([re])\s} }  ▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓ ▓▓▓▓   ▓    ▓       ▓ ▓           ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓ ▓ ▓▓▓ ▓            ▓          ▓▓▓▓▓▓ ▓▓▓▓▓ ▓ ▓▓▓ ▓ ▓  ▓ ▓▓▓▓ ▓▓ ▓   ▓            ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓ ▓  ▓  ▓    ▓▓   ▓▓  ▓▓          ▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓ ▓ ▓▓ ▓ ▓ ▓  ▓ ▓ ▓▓▓▓   ▓           ▓▓▓▓▓▓▓▓▓▓ ▓▓▓ ▓▓▓▓▓▓ ▓  ▓  ▓▓                     ▓▓▓▓▓▓ ▓▓▓  ▓▓▓  ▓▓ ▓▓ ▓ ▓▓  ▓▓▓ ▓  ▓ ▓ ▓      ▓   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓    ▓▓  ▓▓ ▓▓▓▓ ▓▓▓  ▓             ▓▓▓▓▓▓▓▓▓▓ ▓▓▓   ▓▓▓▓▓▓▓ ▓▓                 ▓      ▓▓▓▓▓▓▓▓ ▓▓ ▓▓▓▓      ▓ ▓  ▓ ▓  ▓  ▓   ▓  ▓▓       ▓▓▓▓▓▓▓▓▓▓ ▓ ▓ ▓▓ ▓ ▓▓▓▓▓▓▓ ▓      ▓   ▓           ▓▓▓▓▓▓▓▓▓▓ ▓  ▓▓   ▓▓▓   ▓▓▓▓▓     ▓ ▓▓            ▓▓▓▓ ▓▓▓▓▓▓▓ ▓▓▓ ▓  ▓▓▓ ▓    ▓     ▓    ▓          ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓ ▓▓▓   ▓ ▓▓ ▓▓▓   ▓▓        ▓      ▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓  ▓▓▓ ▓▓ ▓▓   ▓      ▓ ▓ ▓         ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ▓▓     ▓    ▓       ▓▓▓ ▓        NuGet Rant is also available as a NuGet package. Punch the following into your package manager console and smash the Enter key enthusiastically to get it: PM> Install-Package Rant  Or if development builds are your thing: PM> Install-Package Rant -Pre  But remember, the latest version will always be available on the repository first. License Rant is provided under The MIT License. Improve Rant If there is something you want fixed, added, or changed, feel free to submit an issue/pull request. You are welcome to help with any of the following: Documentation Fixing bugs Optimization New functions New language features Improving old language features New API features Formatting support for other cultures Learn Rant See berkin.me/rantdocs for full documentation of the API and Rant language, as well as additional example code. Support Rant If you love my work and want to support it by donating, you can do so here. Donating isn't required, but it's much appreciated! Other projects If you like Rant, you may also like these other, Rant-related projects: RIDE: The official (and highly WIP) Rant IDE Rantionary: The official Rant dictionary Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TheBerkin/Rant"	"The Rant Procedural Text Generation DSL"	"true"
"Misc"	"ScriptCS"	"https://github.com/scriptcs/scriptcs"	"Write C# apps with a text editor, nuget and the power of Roslyn!"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1588"	"154"	"301"	"GitHub - scriptcs/scriptcs: Write C# apps with a text editor, nuget and the power of Roslyn! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 154 Star 1,588 Fork 301 scriptcs/scriptcs Code Issues 181 Pull requests 12 Wiki Pulse Graphs Write C# apps with a text editor, nuget and the power of Roslyn! http://scriptcs.net 1,724 commits 5 branches 24 releases 58 contributors C# 99.6% Other 0.4% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags dev gh-pages master support-0 wordcompletion-spike Nothing to show v0.16.1 v0.15.0 v0.14.1 v0.14.0 v0.13.3 v0.13.2 v0.13.1 v0.13 v0.12 v0.11 v0.10.2 v0.10.1 v0.10 v0.9 v0.8.1 v0.8 v0.7.0 v0.6.0 v0.5.1 v0.5 v0.4 v0.3.2 v0.3.0 0.16.0 Nothing to show New pull request Latest commit a252cd4 Apr 19, 2016 glennblock Merge pull request #1156 from gregoryyoung/printer … Pretty Printing Permalink Failed to load latest commit information. .nuget updated NuGet.exe Jul 29, 2015 build version bump Apr 5, 2016 common Reverting Feb 28, 2016 lib removed VB dlls Apr 5, 2016 src Merge pull request #1156 from gregoryyoung/printer Apr 19, 2016 test Merge pull request #1156 from gregoryyoung/printer Apr 19, 2016 .gitattributes Merge remote-tracking branch 'dpen2000/FixLineEndings' into dev Mar 3, 2013 .gitignore removed scriptcs_packages Apr 5, 2016 .mailmap add .mailmap May 12, 2014 .travis.yml refactor: switch to travis csharp docker container Mar 4, 2015 CONTRIBUTING.md CONTRIBUTING.md - fixed typos and clarified bug handling Apr 6, 2015 LICENSE.md update copyright year Oct 17, 2015 README.md Merge pull request #1125 from gep13/ReadmeCorrection Dec 8, 2015 ScriptCs.Test.ruleset added missing null checks Oct 3, 2013 ScriptCs.ruleset added missing null checks Oct 3, 2013 ScriptCs.sln killed ScriptCs.Engine.Common Apr 5, 2016 ScriptCs.sln.DotSettings various refactorings: Feb 5, 2015 Settings.StyleCop switch from Common.Logging to LibLog Mar 24, 2015 build.cmd build: removed legacy package restore artifacts and updated to NuGet.… May 31, 2014 build.sh change binary artifacts folder to Release/bin for *nix Mar 3, 2015 edit-stylecop-settings.cmd #428 green: added ScriptExecution.HelloWorld May 27, 2014 README.md scriptcs What is it? scriptcs makes it easy to write and execute C# with a simple text editor. While Visual Studio, and other IDEs, are powerful tools, they can sometimes hinder productivity more than they promote it. You don’t always need, or want, the overhead of a creating a new solution or project. Sometimes you want to just type away in your favorite text editor. scriptcs frees you from Visual Studio, without sacrificing the advantages of a strongly-typed language. Write C# in your favorite text editor. Use NuGet to manage your dependencies. The relaxed C# scripting syntax means you can write and execute an application with only one line of code. Script Packs allow you to bootstrap the environment for new scripts, further reduces the amount of code necessary to take advantage of your favorite C# frameworks. Getting scriptcs Releases and nightly builds should be installed using Chocolatey. To install Chocolatey, execute the following command in your command prompt: @powershell -NoProfile -ExecutionPolicy Unrestricted -Command ""iex ((New-Object Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"" && SET PATH=%PATH%;%systemdrive%\chocolatey\bin  If the above fails with the error indicating that proxy authentication is required (i.e. HTTP 407) then try again with the following on the command prompt that uses your default credentials: @powershell -NoProfile -ExecutionPolicy Unrestricted -Command ""[Net.WebRequest]::DefaultWebProxy.Credentials = [Net.CredentialCache]::DefaultCredentials; iex ((New-Object Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"" && SET PATH=%PATH%;%systemdrive%\chocolatey\bin  Note: If you are using a version of Chocolatey > 0.9.9.0 you can pass the -y into the install and upgrade commands to prevent the confirmation that will appear. Installing scriptcs Once Chocolatey has been installed, you can install the latest stable version of scriptcs from your command prompt: choco install scriptcs  Chocolatey will install scriptcs to %LOCALAPPDATA%\scriptcs\ and update your PATH accordingly. Note: You may need to restart your command prompt after the installation completes. Staying up-to-date With Chocolatey, keeping scriptcs updated is just as easy: choco upgrade scriptcs  Note: If you are using a version of Chocolatey < 0.9.0.0 you will need to use choco update scriptcs, but also think about updating Chocolatey itself. Nightly builds Nightly builds are hosted on MyGet, and can also be installed through with Chocolatey: choco install scriptcs -pre -source https://www.myget.org/F/scriptcsnightly/   Building from source Windows Ensure you have .NET Framework 4.5 installed. Execute the build script. build.cmd Linux Ensure you have Mono development tools 3.0 or later installed. sudo apt-get install mono-devel Ensure your mono instance has root SSL certificates mozroots --import --sync Execute the build script ./build.sh Getting Started Using the REPL The scriptcs REPL can be started by running scriptcs without any parameters. The REPL allows you to execute C# statements directly from your command prompt. C:\> scriptcs scriptcs (ctrl-c or blank to exit)  > var message = ""Hello, world!""; > Console.WriteLine(message); Hello, world! >   C:\> REPL supports all C# language constructs (i.e. class definition, method definition), as well as multi-line input. For example: C:\> scriptcs scriptcs (ctrl-c or blank to exit)  > public class Test {     public string Name { get; set; }   } > var x = new Test { Name = ""Hello"" }; > x {Name: ""Hello""}  C:\> Writing a script In an empty directory, create a new file named app.csx: using Raven.Client; using Raven.Client.Embedded; using Raven.Client.Indexes;  Console.WriteLine(""Starting RavenDB server..."");  EmbeddableDocumentStore documentStore = null; try {     documentStore = new EmbeddableDocumentStore { UseEmbeddedHttpServer = true };     documentStore.Initialize();      var url = string.Format(""http://localhost:{0}"", documentStore.Configuration.Port);     Console.WriteLine(""RavenDB started, listening on {0}."", url);      Console.ReadKey(); } finally {     if (documentStore != null)         documentStore.Dispose(); } Install the RavenDB.Embedded package from NuGet using the install command. scriptcs -install RavenDB.Embedded Execute your script. Note that listening on a port requires that the command prompt be launched using the Run as Administrator option. > scriptcs app.csx INFO : Starting to create execution components INFO : Starting execution Starting RavenDB server... .. snip .. RavenDB started, listening on http://localhost:8080. Navigating to the URL that Raven is listening on will now bring up the RavenDB management studio. Bootstrap scripts with Script Packs Script Packs can be used to further reduce the amount of code you need to write when working with common frameworks. In an empty directory, install the ScriptCs.WebApi script pack from NuGet. The script pack automatically imports the Web API namespaces and provides a convenient factory method for initializing the Web API host. It also replaces the default ControllerResolver with a custom implementation that allows Web API to discover controllers declared in scripts. scriptcs -install ScriptCs.WebApi Script packs can be imported into a script by calling Require<TScriptPack>(). Create a file named server.csx that contains the following code: public class TestController : ApiController {     public string Get() {         return ""Hello world!"";     } }  var webApi = Require<WebApi>(); var server = webApi.CreateServer(""http://localhost:8888""); server.OpenAsync().Wait();  Console.WriteLine(""Listening...""); Console.ReadKey(); server.CloseAsync().Wait(); In a command prompt running as administrator, execute the server.csx file. scriptcs server.csx Browse to http://localhost:8888/test/ to see the result of the TestController.Get method. <string xmlns=""http://schemas.microsoft.com/2003/10/Serialization/"">Hello world!</string> Referencing scripts Move the TestController class from the previous example into a new file named controller.csx with the following content. On the first line of server.csx, reference controller.csx using the #load directive. Note: #load directives must be placed at the top of a script, otherwise they will be ignored. #load ""controller.csx"" In a command prompt running as administrator, execute the server.csx file. scriptcs server.csx Browse to http://localhost:8888/test/ to see the result of the TestController.Get method. <string xmlns=""http://schemas.microsoft.com/2003/10/Serialization/"">Hello world!</string> Referencing assemblies You can reference additional assemblies from the GAC or from the bin folder in your script's directory using the #r directive: #r ""nunit.core.dll"" #r ""nunit.core.interfaces.dll""  var path = ""UnitTests.dll""; var runner = TestSetup.GetRunner(new[] {path}); var result = runner.Run(new ConsoleListener(msg => Console.WriteLine(msg)), TestFilter.Empty, true,     LoggingThreshold.All);  Console.ReadKey(); Debugging Instructions for debugging scripts using Visual Studio can be found on the wiki. Package installation You can install any NuGet packages directly from the scriptcs CLI. This will pull the relevant packages from NuGet, and install them in the scriptcs_packages folder. Once the packages are installed, you can simply start using them in your script code directly (just import the namespaces - no additional bootstrapping or DLL referencing is needed). The install command will also create a scriptcs_packages.config file if you don't have one - so that you can easily redistribute your script (without having to copy the package binaries). scriptcs -install {package name} will install the desired package from NuGet. For example: scriptcs -install ServiceStack  scriptcs -install (without package name) will look for the scriptcs_packages.config file located in the current execution directory, and install all the packages specified there. You only need to specify top level packages. For example, you might create the following scriptcs_packages.config: <?xml version=""1.0"" encoding=""utf-8""?> <packages>     <package id=""Nancy.Hosting.Self"" version=""0.16.1"" targetFramework=""net40"" />     <package id=""Nancy.Bootstrappers.Autofac"" version=""0.16.1"" targetFramework=""net40"" />     <package id=""Autofac"" version=""2.6.3.862"" targetFramework=""net40"" /> </packages>  And then just call: scriptcs -install  As a result, all packages specified in the scriptcs_packages.config, including all dependencies, will be downloaded and installed in the scriptcs_packages folder. Contributing Read our Contribution Guidelines. Samples and Documentation Additional samples can be contributed to our samples repository. Documentation can be found on our wiki. Community Want to chat? In addition to Twitter, you can find us on Google Groups and JabbR! Coordinators Glenn Block (@gblock) Justin Rusbatch (@jrusbatch) Filip Wojcieszyn (@filip_woj) Core Committers Damian Schenkelman (@dschenkelman) Kristian Hellang (@khellang) Adam Ralph (@adamralph) Paul Bouwer (@pbouwer) Credits Check out the list of developers responsible for getting scriptcs to where it is today! Special thanks to Filip Wojcieszyn for being the inspiration behind this with his Roslyn Web API posts. Thanks to the Roslyn team who helped point me in the right direction. License Apache 2 License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/scriptcs/scriptcs"	"Write C# apps with a text editor, nuget and the power of Roslyn!"	"true"
"Misc"	"Shielded"	"https://github.com/jbakic/Shielded"	"Software Transactional Memory (STM) implementation for.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"100"	"10"	"8"	"GitHub - jbakic/Shielded: A strict and mostly lock-free Software Transactional Memory (STM) for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 100 Fork 8 jbakic/Shielded Code Issues 0 Pull requests 0 Wiki Pulse Graphs A strict and mostly lock-free Software Transactional Memory (STM) for .NET 378 commits 4 branches 0 releases 2 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags BackingStorage LockFree master v2.0.0 Nothing to show Nothing to show New pull request Latest commit 32183bc Jul 2, 2016 jbakic Small improvement re. exception safety Permalink Failed to load latest commit information. ConsoleTests Improvements to the CommitContinuation Dec 25, 2015 Shielded Small improvement re. exception safety Jul 2, 2016 ShieldedTests Minor - NUnit NuGet package added to Tests Jun 26, 2016 .gitignore Improvements to the CommitContinuation Dec 25, 2015 LICENSE.txt Added LICENSE.txt Aug 17, 2013 README.md Fixed link for .NET Immutable Collections Mar 26, 2016 Trans.sln Smaller fixes Jul 2, 2016 README.md Shielded Available on NuGet. Shielded is a full-featured implementation of Software Transactional Memory in .NET. It provides a system (the Shield static class) for running in-memory transactions, and data structures which are aware of transactions. It can also generate transaction-aware proxy subclasses based on a POCO class type. The implementation is strict, with strong guarantees on safety. It is mostly lock-free, using only one major lock which is held during the pre-commit check. Here is a small example: var n = new Shielded<int>(); int a = n; Shield.InTransaction(() =>     n.Value = n + 5); Shielded fields are thread-safe. You can read them out of transaction, but changes must be done inside. While inside, the library guarantees a consistent view of all shielded fields. Another example, the STM version of ""Hello world!"" - parallel addition in an array. Here, in a dictionary: var dict = new ShieldedDict<int, int>(); ParallelEnumerable.Range(0, 100000)     .ForAll(i => Shield.InTransaction(() =>         dict[i % 100] = dict.ContainsKey(i % 100) ? dict[i % 100] + 1 : 1)); Shielded works with value types, and the language automatically does the needed cloning. For ref types, it only makes the reference itself transactional. The class should then be immutable, or, if you have a class you want to make transactional: public class TestClass {     public virtual Guid Id { get; set; }     public virtual string Name { get; set; } } Then you create instances like this: using Shielded.ProxyGen; ... var t = Factory.NewShielded<TestClass>(); The Factory creates a proxy sub-class, using CodeDom, which will have transactional overrides for all virtual properties of the base class that are public or protected. Due to CodeDom limitations, the getter and setter must have the same accessibility! The proxy objects are thread-safe (or, at least their virtual properties are), and can only be changed inside transactions. Usage is simple: var id = t.Id; Shield.InTransaction(() =>     t.Name = ""Test object""); It is safe to execute any number of concurrent transactions that are reading from or writing into the same shielded fields - each transaction will complete correctly. This is accomplished by: ensuring that in one transaction you read a consistent state of all shielded fields buffering writes into storage which is local for each thread Your changes are commited and made visible to other threads only if all the shielded fields you read or wrote into have not changed since you started. If any have new changes, your transaction is retried from the beginning, but this time reading the new data. Though it may seem so, this cannot create an infinite loop since for any conflict to occur at least one transaction must successfully commit. Overall, the system must make progress. This quality would place Shielded in the lock-free class of non-blocking concurrency mechanisms, according to academic classification. However, this is not accurate since the commit check gets done under a lock. Hence the word ""mostly"" in the short description. Features MVCC: Each transaction reads a consistent snapshot of the state without the need for locking, since updates just create new versions. Old versions are dropped soon after no one is capable of reading them any more. Read-only transactions always complete without any repetitions and without entering the global lock! Strictness: If a write is made anywhere, the system will insist that all touched locations, read or written, still contain the same version of data that they had when the transaction opened. This means it does not suffer from the Write Skew issue. Transactional collections: Included in the library are ShieldedDict<> (dictionary), ShieldedSeq<> (singly linked list) and ShieldedTree<> (a red-black tree implementation). It is possible to use this library with immutable collections from System.Collections.Immutable. To perform side-effects (IO, and most other operations which are not shielded) you use the SideEffect method of the Shield class, which takes optional onCommit and onRollback lambdas. Conditional transactions: Method Shield.Conditional allows you to define something similar to a database AFTER trigger. It receives a test, and an action to perform, both lambdas. It runs the test, makes a note of all shielded objects that the test had accessed, and later re-executes the test when any of those objects is committed into. If test passes, the action is called. Implemented transactionally, so can be called from transactions, and can be triggered by the transaction that created it. Returns an IDisposable for deactivating the subscription, also transactionally. It may even deactivate itself, e.g. to guarantee one-time execution. Pre-commit checks: Shield.PreCommit is very similar to Shield.Conditional, but executes the test within a transaction that changes one of the fields it is interested in, just before that transaction will commit. Can be used to ensure certain invariants are held, or to implement thread prioritization by allowing only some threads which access a field to commit into it. Custom commit operations: You can integrate your own code into the commit process, to execute while the shielded fields, that are being written, are held locked. Using Shield.WhenCommitting, you subscribe for any commit, or based on the type of field being written. These subscriptions should never throw! Shield.RunToCommit runs a transaction just up to commit, and allows you to commit/rollback later, or from another thread. This is useful for asynchronous programming. Commutables: operations which can be performed without conflict, because they can be reordered in time and have the same net effect, i.e. they are commutable (name borrowed from Clojure). Incrementing an int is an example - if you don’t care what the int’s value is, you can increment it without conflict by simply incrementing whatever value you encounter there at commit time. Using commutes, when appropriate, reduces conflicts and improves concurrency. Incrementing an int, conflict-free: n.Commute((ref int a) => a++); Commutes are not performed under any lock, but rather in a special commute subtransaction, which reads the latest data, and tries to commit with the same stamp as your main transaction. If only the commutes fail, then only the commutes get retried. If, in the example above, your main transaction has already (or perhaps will later) read the n field or written to it (non-commutatively), the commute “degenerates” - it gets executed in place, in your transaction, and you can see it’s effect. This means consistency - if you read it, it will stay as read when you commit. But, it is now a potential conflict. Shield has various commutable operations defined in it. Appending to a sequence is commutable - if you do not touch the seq, it never conflicts. Collection Count fields are comuted over, to avoid unnecessary conflicts. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jbakic/Shielded"	"Software Transactional Memory (STM) implementation for.NET"	"true"
"Misc"	"TinyMapper"	"https://github.com/TinyMapper/TinyMapper"	"a tiny and quick object mapper for.Net."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"224"	"32"	"43"	"GitHub - TinyMapper/TinyMapper: A quick object-object mapper for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 224 Fork 43 TinyMapper/TinyMapper Code Issues 13 Pull requests 0 Wiki Pulse Graphs A quick object-object mapper for .NET http://tinymapper.net 293 commits 3 branches 12 releases Fetching contributors C# 88.7% HTML 8.9% PowerShell 1.6% Other 0.8% C# HTML PowerShell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags CustomTypeMapping EmitForeach master Nothing to show v2.0.8 v2.0.6 v2.0.5 v2.0.3 v2.0.1 v2.0.0 v1.0.22 v1.0.20 v1.0.18 v1.0.6 v1.0.4 v1.0.2 Nothing to show New pull request Latest commit 5b51ea0 Jun 5, 2016 GSerjo removed gg Permalink Failed to load latest commit information. .nuget * nuget updated Apr 11, 2015 Site * index updated measurements Sep 26, 2015 Source collection test May 20, 2016 Tools + tools Mar 4, 2015 packages - TargetTypeMarker Jan 15, 2015 .gitignore + tinymapper.nuspec Mar 5, 2015 CONTRIBUTING.markdown removed gg Jun 5, 2016 FactTest.msbuild * xunit -> 1.9.2. 2.0 doesn't work with .net 3.5 Apr 12, 2015 GlobalAssemblyInfo.cs * All added support .Net 3.0 Jun 24, 2015 LICENSE + tinymapper.nuspec Mar 4, 2015 NuGet.msbuild * All added support .Net 3.0 Jun 24, 2015 README.md fixed nuget image May 3, 2016 Root.msbuild * fixed target Depends Jun 25, 2015 TinyMapper.sln * All added support .Net 3.0 Jun 24, 2015 TinyMapper.sln.DotSettings * Option class -> struct Apr 17, 2016 restore.cmd + tinymapper.nuspec Mar 4, 2015 README.md TinyMapper - a quick object mapper for .Net Performance Comparison Installation Available on nuget PM> Install-Package TinyMapper  Getting Started TinyMapper.Bind<Person, PersonDto>();  var person = new Person {     Id = Guid.NewGuid(),     FirstName = ""John"",     LastName = ""Doe"" };  var personDto = TinyMapper.Map<PersonDto>(person); Ignore mapping source members and bind members with different names/types TinyMapper.Bind<Person, PersonDto>(config => {     config.Ignore(x => x.Id);     config.Ignore(x => x.Email);     config.Bind(source => source.LastName, target => target.Surname);     config.Bind(target => source.Emails, typeof(List<string>)); });  var person = new Person {     Id = Guid.NewGuid(),     FirstName = ""John"",     LastName = ""Doe"",     Emails = new List<string>{""support@tinymapper.net"", ""MyEmail@tinymapper.net""} };  var personDto = TinyMapper.Map<PersonDto>(person); TinyMapper supports the following platforms: .Net 3.0+ Mono What to read TinyMapper: yet another object to object mapper for .net Complex mapping How to create custom mapping Contributors A big thanks to all of TinyMapper's contributors: iEmiya lijaso nomailme Skaiol Sufflavus qihangnet teknogecko Samtrion Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TinyMapper/TinyMapper"	"a tiny and quick object mapper for.Net."	"true"
"Misc"	"Jint"	"https://github.com/sebastienros/jint"	"Javascript interpreter for.NET which provides full ECMA 5.1 compliance and can run on any.NET plaftform."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"548"	"96"	"156"	"GitHub - sebastienros/jint: Javascript Interpreter for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 96 Star 548 Fork 156 sebastienros/jint Code Issues 76 Pull requests 16 Pulse Graphs Javascript Interpreter for .NET 563 commits 8 branches 7 releases 30 contributors JavaScript 74.5% C# 25.5% JavaScript C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bug/228 dnx localeDateFormat master perf/arguments perf/arrays perf/jsvalue pr/272 Nothing to show 2.8 2.7 2.6 2.5.0 2.4.0 2.3.0 2.2.0 Nothing to show New pull request Latest commit a21f7f9 May 11, 2016 eamodio committed with sebastienros Support JsValue.ToObject on Arguments Permalink Failed to load latest commit information. .nuget Adding xUnit console runner for the CI May 26, 2015 Jint.Benchmark Improving parser performance Aug 15, 2014 Jint.Repl Fixing version numbers Feb 29, 2016 Jint.Tests.CommonScripts Upgrading XUnit 2.0 May 25, 2015 Jint.Tests.Ecma Upgrading XUnit 2.0 May 25, 2015 Jint.Tests.Scaffolding Adding Ecma 262 tests Aug 8, 2013 Jint.Tests Fix for JSON.parse handling non-string values May 11, 2016 Jint Support JsValue.ToObject on Arguments May 11, 2016 .gitignore Bumping nuget version May 25, 2015 CREDITS.txt Using FastDtoa to serialize numbers Mar 1, 2014 Jint.sln Improving parser performance Aug 16, 2014 Jint.sln.DotSettings Refactoring Date to reflect specifications Feb 7, 2014 LICENSE.txt Adding license information Jan 9, 2014 README.md Typo May 11, 2016 buildnuget.cmd Fixing nuget command line build Sep 23, 2015 README.md Jint Jint is a Javascript interpreter for .NET which provides full ECMA 5.1 compliance and can run on any .NET platform. Because it doesn't generate any .NET bytecode nor use the DLR it runs relatively small scripts faster. It's available as a PCL on Nuget at https://www.nuget.org/packages/Jint. Features Full support for ECMAScript 5.1 - http://www.ecma-international.org/ecma-262/5.1/ .NET Portable Class Library - http://msdn.microsoft.com/en-us/library/gg597391(v=vs.110).aspx .NET Interoperability Discussion Or post your questions with the jint tag on stackoverflow. Examples This example defines a new value named log pointing to Console.WriteLine, then executes a script calling log('Hello World!').     var engine = new Engine()         .SetValue(""log"", new Action<object>(Console.WriteLine))         ;      engine.Execute(@""       function hello() {          log('Hello World');       };        hello();     ""); Here, the variable x is set to 3 and x * x is executed in JavaScript. The result is returned to .NET directly, in this case as a double value 9.     var square = new Engine()         .SetValue(""x"", 3) // define a new variable         .Execute(""x * x"") // execute a statement         .GetCompletionValue() // get the latest statement completion value         .ToObject() // converts the value to .NET         ; You can also directly pass POCOs or anonymous objects and use them from JavaScript. In this example for instance a new Person instance is manipulated from JavaScript.     var p = new Person {         Name = ""Mickey Mouse""     };      var engine = new Engine()         .SetValue(""p"", p)         .Execute(""p.Name === 'Mickey Mouse'"")         ; You can invoke JavaScript function reference     var add = new Engine()         .Execute(""function add(a, b) { return a + b; }"")         .GetValue(""add"")         ;      add.Invoke(1, 2); // -> 3 or directly by name     var engine = new Engine()         .Execute(""function add(a, b) { return a + b; }"")         ;      engine.Invoke(""add"", 1, 2); // -> 3 Accessing .NET assemblies and classes You can allow an engine to access any .NET class by configuring the engine instance like this:     var engine = new Engine(cfg => cfg.AllowClr()); Then you have access to the System namespace as a global value. Here is how it's used in the context on the command line utility:     jint> var file = new System.IO.StreamWriter('log.txt');     jint> file.WriteLine('Hello World !');     jint> file.Dispose(); And even create shortcuts to common .NET methods     jint> var log = System.Console.WriteLine;     jint> log('Hello World !');     => ""Hello World !"" When allowing the CLR, you can optionally pass custom assemblies to load types from.     var engine = new Engine(cfg => cfg         .AllowClr(typeof(Bar).Assembly)     ); and then to assign local namespaces the same way System does it for you, use importNamespace     jint> var Foo = importNamespace('Foo');     jint> var bar = new Foo.Bar();     jint> log(bar.ToString()); Generic types are also supported. Here is how to declare, instantiate and use a List<string>:     jint> var ListOfString = System.Collections.Generic.List(System.String);     jint> var list = new ListOfString();     jint> list.Add('foo');     jint> list.Add(1); // automatically converted to String     jint> list.Count; // 2 Internationalization You can enforce what Time Zone or Culture the engine should use when locale JavaScript methods are used if you don't want to use the computer's default values. This example forces the Time Zone to Pacific Standard Time.     var PST = TimeZoneInfo.FindSystemTimeZoneById(""Pacific Standard Time"");     var engine = new Engine(cfg => cfg.LocalTimeZone(PST));      engine.Execute(""new Date().toString()""); // Wed Dec 31 1969 16:00:00 GMT-08:00 This example is using French as the default culture.     var FR = CultureInfo.GetCultureInfo(""fr-FR"");     var engine = new Engine(cfg => cfg.Culture(FR));      engine.Execute(""new Number(1.23).toString()""); // 1.23     engine.Execute(""new Number(1.23).toLocaleString()""); // 1,23 Implemented features: ECMAScript 5.1 test suite (http://test262.ecmascript.org/) Manipulate CLR objects from JavaScript, including: Single values Objects Properties Methods Delegates Anonymous objects Convert JavaScript values to CLR objects Primitive values Object -> expando objects (IDictionary<string, object> and dynamic) Array -> object[] Date -> DateTime number -> double string -> string boolean -> bool Regex -> RegExp Function -> Delegate Continuous Integration kindly provided by Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sebastienros/jint"	"Javascript interpreter for.NET which provides full ECMA 5.1 compliance and can run on any.NET plaftform."	"true"
"Misc"	"MSBuild ILMerge task"	"https://ilmergemsbuild.codeplex.com/"	"MSBuild ILMerge task is a NuGet package allows you to use the famous ILMerge utility in automated builds and/or Visual Studio projects."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ILMerge MSBuild task NuGet package - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In ILMerge MSBuild task NuGet package home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe Project Description MSBuild ILMerge task allows you to use the famous ILMerge utility in automated builds and/or Visual Studio 2013/2015 projects. MSBuild ILMerge task allows you to use the famous ILMerge utility (see http://research.microsoft.com/en-us/people/mbarnett/ILMerge.aspx) in automated builds and/or Visual Studio 2013/2015 projects. It is similar to the ILMerge.MSBuild.Tasks nuget package, originally published by neoeinstein@gmail.com (that seems to be abandoned) with the following additional features: It supports all the latest ILMerge options; ILMerge.exe is discovered as package dependency; The .targets file overrides the CopyFilesToOutputDirectory build target, leaving the AfterBuild target free for further customizaton; It attempts to guess the reasonable merge order for the included assemblies and lets you to finetune it with a configuration file. ILMerge.exe is not included into this package because its license prohibits redistribution. Referencing it as package dependency and loading it from its package location ensures that the latest ILMerge version is always used. Last edited Today at 8:05 AM by archnae, version 7 download Opera does not support ClickOnce X To install this application, save it and then open it. Opening it directly from Opera will not work correctly. current Version 1.0.5 final date Mon Jul 11, 2016 at 7:00 AM status Stable downloads 20 rating       0 ratings Review this release activity downloads 19 Days: 7 7 30 30 All All Details © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"MSBuild ILMerge task is a NuGet package allows you to use the famous ILMerge utility in automated builds and/or Visual Studio projects."	"true"
"Misc"	"ReactJS.NET"	"https://github.com/reactjs/React.NET"	"ReactJS.NET is a library that makes it easier to use Babel along with Facebook's React and JSX from C#."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"721"	"79"	"178"	"GitHub - reactjs/React.NET: .NET library for JSX compilation and server-side rendering of React components Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 79 Star 721 Fork 178 reactjs/React.NET Code Issues 39 Pull requests 2 Pulse Graphs .NET library for JSX compilation and server-side rendering of React components http://reactjs.net/ 423 commits 3 branches 26 releases 30 contributors C# 87.4% CSS 5.1% JavaScript 4.3% HTML 1.6% Ruby 0.4% PowerShell 0.4% Other 0.8% C# CSS JavaScript HTML Ruby PowerShell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags aspnetbeta8 master teamcity-default-dummy Nothing to show release-2.4.0 release-2.3.0 release-2.2.1 release-2.2.0 release-2.1.2 release-2.1.1 release-2.1.0 release-2.0.1 release-2.0.0 release-1.5.5 release-1.5.4 release-1.5.3 release-1.5.2 release-1.5.1 release-1.5.0 release-1.4.0 release-1.3.0 release-1.2.0 release-1.1.3 release-1.1.2 release-1.1.1 release-1.1.0 release-1.0.1 release-1.0.0 release-0.2.0 release-0.1.0 Nothing to show New pull request Latest commit 4f1628a Jun 28, 2016 Daniel15 committed on GitHub Remove broken NuGet download badge Permalink Failed to load latest commit information. lib Explicitly use V8 3.17.16.2, and add missing cstring include to Vroom… Nov 29, 2015 site Clarify ASP.NET Core RC2 support Jun 15, 2016 src Updating .NET Core libraries from 1.0 RC2 to 1.0 RTM Jun 29, 2016 tools Upgrade NuGet.exe to fix build issues. Closes #265 May 20, 2016 .gitignore Use React from NPM. Closes #197 Nov 30, 2015 .gitmodules Redirect /packages/ to AppVeyor NuGet feed. Nov 15, 2015 LICENSE Rename React.NET to ReactJS.NET Mar 29, 2014 PATENTS Update Patent Grant Apr 10, 2015 README.md Remove broken NuGet download badge Jun 28, 2016 appveyor.yml Making React.AspNet compatible with ASP.NET Core RC2 (#271) May 23, 2016 build.proj Updating .NET Core libraries from 1.0 RC2 to 1.0 RTM Jun 28, 2016 dev-build-push.bat Add ASP.NET 5 project to build script Feb 27, 2015 dev-build.bat Fix fresh build and add AppVeyor config Oct 11, 2015 release-build-push.bat Add ASP.NET 5 project to build script Feb 28, 2015 release-build.bat Add ASP.NET 5 project to build script Feb 28, 2015 README.md ReactJS.NET ReactJS.NET is a library that makes it easier to use Babel along with Facebook's React and JSX from C#.   Features On-the-fly JSX to JavaScript compilation via Babel JSX to JavaScript compilation via popular minification/combination libraries: ASP.NET Bundling and Minification Cassette Webpack MSBuild Server-side component rendering to make your initial render super-fast (experimental!) Runs on Linux via Mono and V8 Supports both ASP.NET 4.0/4.5 and ASP.NET 5 Quick Start Install the package Install-Package React.Web.Mvc4 # For ASP.NET MVC 4 or 5 Install-Package React.AspNet   # For ASP.NET MVC 6 (ASP.NET 5)  Create JSX files // /Scripts/HelloWorld.jsx var HelloWorld = React.createClass({     render: function () {         return (             <div>Hello {this.props.name}</div>         );     } }); Reference the JSX files from your HTML <script src=""@Url.Content(""~/Scripts/HelloWorld.jsx"")""></script> Now you can use the HelloWorld component. For information on more advanced topics (including precompilation and server-side rendering), check out the documentation Building Manually and Contributing When building your own copy of ReactJS.NET (for example, if implementing a new feature or fixing a bug), your first build always needs to be done using the build script (dev-build.bat) as this generates a few files required by the build (such as SharedAssemblyVersionInfo.cs). Once this build is completed, you can open React.sln in Visual Studio and compile directly from Visual Studio. Please refer to the documentation page on contributing for more information on contributing to ReactJS.NET. Note that the build requires you to have Git installed. If you do not want to install Git, you may remove the GitVersion task from build.proj. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/reactjs/React.NET"	"ReactJS.NET is a library that makes it easier to use Babel along with Facebook's React and JSX from C#."	"true"
"MVVM"	"Caliburn.Micro"	"https://github.com/Caliburn-Micro/Caliburn.Micro"	"A small, yet powerful framework, designed for building applications across all XAML platforms. Its strong support for MV* patterns will enable you to build your solution quickly, without the need to sacrifice code quality or testability."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"990"	"160"	"372"	"GitHub - Caliburn-Micro/Caliburn.Micro: A small, yet powerful framework, designed for building applications across all XAML platforms. Its strong support for MV* patterns will enable you to build your solution quickly, without the need to sacrifice code quality or testability. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 160 Star 990 Fork 372 Caliburn-Micro/Caliburn.Micro Code Issues 34 Pull requests 1 Pulse Graphs A small, yet powerful framework, designed for building applications across all XAML platforms. Its strong support for MV* patterns will enable you to build your solution quickly, without the need to sacrifice code quality or testability. http://caliburnmicro.com/ 1,068 commits 3 branches 10 releases 23 contributors C# 99.1% Other 0.9% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags build master samples Nothing to show 3.0.1 3.0.0 3.0.0-beta2 3.0.0-beta1 3.0.0-alpha 2.0.2 2.0.1 2.0.0 2.0.0-beta2 2.0.0-beta Nothing to show New pull request Latest commit 5d10b3e May 31, 2016 nigel-sampson UWP Sample checks for running state Permalink Failed to load latest commit information. nuget Increment version to 3.0.1 May 6, 2016 samples UWP Sample checks for running state May 31, 2016 src Resolve inconsistency in GetOrCreateViewType. Resolves #326 May 16, 2016 .gitattributes UWP Library Layout and Sample Aug 7, 2015 .gitignore Move UWP project back into main folder Feb 10, 2016 CONTRIBUTING.md Added contributing.md Sep 19, 2014 CaliburnIcon.png Update icon Mar 14, 2016 License.txt Moved the license file. Apr 7, 2011 README.md Update README.md Mar 13, 2016 README.md Caliburn.Micro Caliburn.Micro is a small, yet powerful framework, designed for building applications across all XAML platforms. With strong support for MVVM and other proven UI patterns, Caliburn.Micro will enable you to build your solution quickly, without the need to sacrifice code quality or testability. Packages are available on Nuget Caliburn.Micro.Core - The Portable Class Library (PCL) portion of Caliburn.Micro. Caliburn.Micro - The platform-specific adapters for Caliburn.Micro. Caliburn.Micro.Start - Includes a starting bootstrapper, view model and view. Questions For non bug related questions see Stack Overflow Sponsoring The Caliburn.Micro team uses ReSharper by JetBrains. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Caliburn-Micro/Caliburn.Micro"	"A small, yet powerful framework, designed for building applications across all XAML platforms. Its strong support for MV* patterns will enable you to build your solution quickly, without the need to sacrifice code quality or testability."	"true"
"MVVM"	"MVVM Light Toolkit"	"https://mvvmlight.codeplex.com/"	"The main purpose of the toolkit is to accelerate the creation and development of MVVM applications in WPF, Silverlight, Windows Store (RT) and for Windows Phone"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"MVVM Light Toolkit - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In MVVM Light Toolkit home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe Project Description The main purpose of the toolkit is to accelerate the creation and development of MVVM applications in WPF, Silverlight, Windows Store, Windows Phone and Xamarin Get started More information about the MVVM Light Toolkit can be found on http://www.mvvmlight.net. Documentation See http://www.mvvmlight.net/doc Donate If you are so enclined, you can donate to MVVM Light Toolkit. Or, if you prefer, you can pay me a beer next time we're in the same vicinity. Really, it is OK too :) Latest news: The latest news about MVVM Light are available from the MVVM feed on my blog at http://blog.galasoft.ch/posts/category/mvvm/. Last edited Nov 17, 2014 at 12:19 PM by lbugnion, version 18 download current MVVM Light V5.2.0 date Tue Sep 1, 2015 at 7:00 AM status Stable downloads 15,515 rating       1 rating Review this release Most Helpful Reviews      mvvmlight is such a great framework! View all reviews Ads by Developer Media activity downloads 440 Days: 7 7 30 30 All All Details © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"The main purpose of the toolkit is to accelerate the creation and development of MVVM applications in WPF, Silverlight, Windows Store (RT) and for Windows Phone"	"true"
"MVVM"	"Catel"	"https://catel.codeplex.com/"	"Catel is an application development platform with the focus on MVVM (WPF, Silverlight, Windows Phone and WinRT) and MVC (ASP.NET MVC). The core of Catel contains an IoC container, models, validation, memento, message mediator, argument checking, etc."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Catel - application development platform with MVVM support (WPF, SL, WP, WinRT) - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In Catel - application development platform with MVVM support (WPF, SL, WP, WinRT) home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe Moved to CatelProject.com On April 18th, 2013 we moved to GitHub because it provides better support for pull requests and has better integration with our issue tracker. For the latest information, please visit http://www.catelproject.com Introduction Catel is an application development platform with the focus on MVVM (WPF, Silverlight, Windows Phone and WinRT) and MVC (ASP.NET MVC). The core of Catel contains an IoC container, models, validation, memento, message mediator, argument checking, etc. Catel.MVVM contains all the MVVM classes such as ViewModelBase, Command, services, etc. Catel.MVC contains all the MVC classes. Catel also provides the following extensions: Controls CSLA.NET Data Entity Framework FluentValidation Prism The release cycle is very short (4 weeks), so all found features and bugs are solved within 4 weeks. If you are not convinced yet, take a look at the MVVM comparison sheet and you will be convinced. External Issue tracker Note that we no longer use the issue tracker of codeplex as from March 8, 2013, but JIRA. Donations are welcome Writing and supporting Catel takes time, lots of time. To thank the team, you can donate some money which we will use to buy a beer in the weekends: YES, I WOULD LIKE TO MAKE A DONATION Need help or consultancy? If you need help, don't hesitate to create a new discussion. If you need more advanced help, we are also available for consultancy! Follow us on Twitter You can follow us on twitter for the latest news and notifications about new releases (both official and betas/nightly builds): @CatelProject Latest blog posts by Geert van Horrik  Geert van Horrik News Feed  Hyper-V: improve your I/O performance Tuesday, December 22, 2015  |  From Geert van Horrik Improving the performance of Windows Hyper-V 2016 Thursday, December 10, 2015  |  From Geert van Horrik Migrating from ESXi 5.5 to Hyper-V 2016 Thursday, December 3, 2015  |  From Geert van Horrik  Geert van Horrik News Feed  Latest blog posts by Alexánder Fernández Saúco  like was told to me News Feed  Introducing SharePoint Package Manager Thursday, January 28, 2016  |  From like was told to me 'The Force Awakens' or How awake the communication channels on a development team? Tuesday, January 12, 2016  |  From like was told to me Simplest way to implement a state machine approach for SharePoint list items Thursday, August 13, 2015  |  From like was told to me  like was told to me News Feed  Looking for examples? The examples are located in a separate repository at http://catelexamples.codeplex.com. Core The core library of Catel contains some very useful classes, even when not developing anything with MVVM (but, for example, a website): Argument class (always check your input, now easy with Argument.IsNotNull(""argument"", argument), etc) IoC container (with extented support for Unity, MEF, Ninject, Windsor, etc) Memento pattern MessageMediator (mediator pattern) WeakEventListener (no more memory leaks, works for all target frameworks) MVVM The MVVM framework includes the following features that differs this project from other frameworks: Communication with other view models via simple attributes, no messengers needed (but still, a MessageMediator is available) Solves the nested user controls problem in MVVM, view models are created on the fly when needed based on the datacontext UserControl<TViewModel> and DataWindow<TViewModel> that are fully compatible with the MVVM framework and easy to use Of course, the framework also implements the features you can find in any MVVM framework: ViewModelBase with INotifyPropertyChanged, IDataErrorInfo, INotifyDataErrorInfo support Command (a.k.a. RelayCommand) EventToCommand and lots of other behaviors View Model Services such as the IMessageService, IPleaseWaitService, IUIVisualizerService, etc Design-time data support Articles and blog posts There are several article s available about Catel. The articles are posted on The Code Project: Catel - part 0 of n: why choose Catel? Catel - part 1 of n: data handling the way it should Catel - part 2 of n: using WPF controls and themes Catel - part 3 of n: the MVVM Framework Catel - part 4 of n: unit testing with Catel Catel - part 5 of n: building a WPF example application in 1 hour Catel - part 6 of n: Bing maps application for Windows Phone 7 Catel - part 7 of n: What's new in Catel 2.x Catel creates perfect combination with Prism Accelerating Catel coding workflow with CatelR# Sponsors CatenaLogic (development time) JetBrains (Resharper) BugAid Red Gate (ANTS Performance Profiler Professional) VSoft Technologies Pty Ltd (FinalBuilder) EC Software (Help & Manual) Available languages English (default language) Chinese (simplified) Dutch French (thanks to Rajiv Mounguengue) German Italian (thanks to Luigi Bellanca) Spanish (thanks to Miguel Tamarit) Turkish (thanks to Ibrahim Demirel) Last edited Feb 5, 2014 at 7:24 PM by GeertvanHorrik, version 184 current 4.4.0 date Fri Nov 27, 2015 at 7:00 AM status Stable downloads 0 rating       3 ratings Review this release Ads by Developer Media activity downloads 4 Days: 7 7 30 30 All All Details related projects MyMediaStuff - Catel demo app Catel articles Catel examples Catel fody plugin Catel ReSharper plugin © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"Catel is an application development platform with the focus on MVVM (WPF, Silverlight, Windows Phone and WinRT) and MVC (ASP.NET MVC). The core of Catel contains an IoC container, models, validation, memento, message mediator, argument checking, etc."	"true"
"MVVM"	"UpdateControls"	"http://updatecontrols.net/cs/"	"Update Controls does not require that you implement INotifyPropertyChanged or declare a DependencyProperty. It connects controls directly to CLR properties. This makes it perfect for the Model/View/ViewModel pattern."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Update Controls .NET - WPF Update Controls .NET VBC# WPF Silverlight Winforms Download Documentation Videos Contact Us Next Steps Not a WPF developer? Update Controls also works in Winforms. Download the library. Learn techniques by watching Videos. Data binding without INotifyPropertyChanged Update Controls does not require that you implement INotifyPropertyChanged or declare a DependencyProperty. It connects controls directly to CLR properties. It discovers dependencies upon data through layers of intermediate code. This makes it perfect for the Model/View/ViewModel pattern; no extra code is needed in the ViewModel, which sits between the Model and the View. Wrap the DataContext of your Window. The wrapper not only implements INotifyPropertyChanged for all of your object's properties, it also automatically detects their dependencies on other properties. There is no base class or interface to implement. public partial class Window1 : Window {     public Window1()     {         InitializeComponent();         DataContext = ForView.Wrap(new PersonPresentation(new Person()));     } }  public class PersonPresentation {  private Person _person;      public PersonPresentation(Person person)     {         _person = person;     }      public Person Person     {         get { return _person; }     }      public string FirstLast     {         get { return _person.FirstName + "" "" + _person.LastName; }     }      public string LastFirst     {         get { return _person.LastName + "", "" + _person.FirstName; }     }      public string Title     {         get { return ""Person - "" +             (_person.DisplayStrategy == 0 ? FirstLast : LastFirst); }     } }  When you add a field to a data object, select the field and press Ctrl+D, G. The Update Controls Visual Studio add-in creates a property to wrap the field. It adds the code required to keep track of changes to the data field. public class Person {     private string _firstName;     private string _lastName;     private int _displayStrategy;      #region Independent properties     // Generated by Update Controls --------------------------------     private Independent _indDisplayStrategy = new Independent();     private Independent _indFirstName = new Independent();     private Independent _indLastName = new Independent();      public string FirstName     {         get { _indFirstName.OnGet(); return _firstName; }         set { _indFirstName.OnSet(); _firstName = value; }     }      public string LastName     {         get { _indLastName.OnGet(); return _lastName; }         set { _indLastName.OnSet(); _lastName = value; }     }      public int DisplayStrategy     {         get { _indDisplayStrategy.OnGet(); return _displayStrategy; }         set { _indDisplayStrategy.OnSet(); _displayStrategy = value; }     }     // End generated code --------------------------------     #endregion }  The rest is taken care of. As the user changes the independent properties in the underlying data object, Update Controls refreshes the dependent properties in the presentation object. © 2009 Mallard Software Designs, Inc."	"null"	"null"	"Update Controls does not require that you implement INotifyPropertyChanged or declare a DependencyProperty. It connects controls directly to CLR properties. This makes it perfect for the Model/View/ViewModel pattern."	"true"
"MVVM"	"ReactiveUI"	"https://github.com/reactiveui/reactiveui/"	"An MVVM framework for.NET that integrates the Reactive Extensions (Rx) framework, enabling developers to build elegant, testable applications using WPF, Windows Store Apps, WP8 or Xamarin."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2415"	"288"	"520"	"GitHub - reactiveui/ReactiveUI: A MVVM framework that integrates with the Reactive Extensions for .NET to create elegant, testable User Interfaces that run on any mobile or desktop platform. Supports Xamarin.iOS, Xamarin.Android, Xamarin.Mac, Xamarin Forms, WPF, Windows Forms, Windows Phone 8, Windows Store and Universal Windows Platform (UWP). Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 288 Star 2,415 Fork 520 reactiveui/ReactiveUI Code Issues 114 Pull requests 13 Pulse Graphs A MVVM framework that integrates with the Reactive Extensions for .NET to create elegant, testable User Interfaces that run on any mobile or desktop platform. Supports Xamarin.iOS, Xamarin.Android, Xamarin.Mac, Xamarin Forms, WPF, Windows Forms, Windows Phone 8, Windows Store and Universal Windows Platform (UWP). http://www.reactiveui.net 3,581 commits 69 branches 82 releases Fetching contributors C# 99.6% Other 0.4% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: rxui7-master Switch branches/tags Branches Tags Change-Xam.Mac-to-2.0 activation add_ireactivecommand add_list_combine add_reactive_page_view_controller add_rx_collection_view add_uitextview_binding android-reactive-pageradapter binding-enhancements bitmaps change-log-level ci common-version-location control-fetcher-fix death-to-implicit-observeons delete-old-stuff derived-collection-delete-fix derived-collection-linq docs enable-strict-mode etw-logging fill-in-values fix-debuglogger fix-ios-build fix-monodroid fix-winrt-mobilesample fix-wp8-mobilesample fixup_rxui_xsios_sln foo fucking-stop-bothering-me-visual-studio granular-recyclerview-updates haacked/set-test-scheduler-correctly ios-device-crash-investigation issue/610 issues/513/BindWithFuncConverters json-net-references listadapter-observer logging-init-crash-fix make_derived_collection_schedulable master myget-with-xamarin-mac myget no-more-getall-dependency-locator no-more-scheduling nsview-activation obsaspropertyhelper-notifications per-binding-converter-override prep-6.0-alpha race-fix rdc-move-fixes-rxui4 reactive.input readthedocs recursive-activation rxcoll-must-be-scheduled rxui-net40 rxui4 rxui5-master rxui5-validation rxui6-master rxui7-master-backup rxui7-master snippets support_string_headers use-splat whenany-collections winrt-tests xaml-memleaks zip-test zip-test2 Nothing to show 6.5.0 6.4.0.1 6.4.0 6.3.1 6.3.0 6.2.1 6.2.0 6.1.0 6.0.7 6.0.6 6.0.5 6.0.4 6.0.3 6.0.2 6.0.1 6.0.0 5.99.6 5.99.5 5.99.4 5.99.3 5.99.2 5.99.1 5.99.0 5.5.1 5.5.0 5.4.0 5.3.0 5.2.0 5.1.2 5.1.0 5.0.1 5.0.0.20130424-alpha 4.6.5 4.6.4 4.6.3 4.6.2 4.6.1 4.6.0 4.5.0 4.4.3 4.4.2 4.4.1 4.4.0 4.3.2 4.3.1 4.3.0 4.2.2 4.2.1 4.2.0 4.1.0 4.0.3 4.0.2 4.0.1 4.0.0 3.2.0 3.1.3 3.1.2 3.1.1 3.1.0 3.0.0 2.5.2 2.5.1 2.5.0.0 2.4.5.0 2.4.0.0 2.3.2.0 2.3.0.0 2.3.0.0-pre 2.2.1.0 2.2.1.0-pre 2.2.0.0 2.2.0.0-pre 2.1.0.1 2.1.0.0 2.0.0.2 2.0.0.1 2.0.0.0 2.0.0.0-pre 1.4.1.0 1.4.0.0 1.3.0.0 1.2.0.0 Nothing to show New pull request Latest commit 97631cd Jun 30, 2016 ghuntley committed on GitHub strict mode enabled, fail the build on any powershell error (#1128) Permalink Failed to load latest commit information. docs Mention ToCommand in migration docs. Jan 3, 2016 packages eventbuilder.exe is now xplat (tm) and always uses the latest SDK's. Jan 26, 2016 script Add script to nuke remote branches Dec 12, 2012 src unship RELEASENOTES.MD as part of package due to XS + NuGet issue (#1126 Jun 28, 2016 tools/nuget added bootstrap Mar 27, 2016 .gitattributes updated .gitignore/.gitattributes from latest at github/gitignore Jan 23, 2016 .gitignore impl reactiveui-events nuget package creation Mar 27, 2016 .hgeol Merge (again). Jan 13, 2016 CONTRIBUTING.md Update release script to optionally bump NuGet version numbers for pa… Dec 23, 2013 LICENSE impl reactiveui-events nuget package creation Mar 27, 2016 README.md added Erik Meijer rx intro whiteboarding videos Apr 27, 2016 RELEASENOTES.md adelaide isn't a real city Jan 27, 2016 appveyor.yml updated appveyor configuration Jun 28, 2016 bootstrap.ps1 strict mode enabled, fail the build on any powershell error (#1128) Jun 30, 2016 build.cake Merge branch 'myget' of https://github.com/reactiveui/ReactiveUI into… Jun 27, 2016 build.cmd added bootstrap Mar 27, 2016 build.sh added bootstrap Mar 27, 2016 README.md ReactiveUI Use the Reactive Extensions for .NET to create elegant, testable User Interfaces that run on any mobile or desktop platform. Supports Xamarin.iOS, Xamarin.Android, Xamarin.Mac, Xamarin Forms, WPF, Windows Forms, Windows Phone 8, Windows Store and Universal Windows Platform (UWP). If you’re already familiar with functional reactive programming or what ReactiveUI is about, check out the documentation for more in-depth information about how it all works or our comprehensive collection of samples. If you have a question, please see if any discussions in our GitHub issues or Stack Overflow have already answered it. If not, please feel free to file your own! We have our very own Slack organization which contains some of the best user interface/reactive extension developers in the industry. All software engineers, young and old, regardless of experience are welcome to join our campfire but you'll need to send an email to paul@paulbetts.org with the email address you'd like to be invited, and we'll send you an invite. Sit tight, it's worth it. Introduction ReactiveUI is inspired by functional reactive programming and is the father of the ReactiveCocoa (Cocoa/Swift) framework. Rather than using mutable variables which are replaced and modified in-place, ReactiveUI offers ""event streams"", represented by the IObserver and IObservable types, that send values over time. If you are new to these concepts then we highly recommend watching the following videos before progressing too far: Rx Under the Hood (Video #1) by Erik Meijer (Inventor of Reactive Extensions/Microsoft Research) Rx Under the Hood (Video #2) by Erik Meijer (Inventor of Reactive Extensions/Microsoft Research) Controlling Time and Space: understanding the many formulations of FRP by Evan Czaplicki (Elm language designer/Prezi) FRP In Practice: Taking a look at Reactive[UI/Cocoa] by Paul Betts (Slack/GitHub) ReactiveUI - It's pretty neat by Brendan Forster (GitHub) ReactiveUI - Turning MVVM up to 11 by Brendan Forster (GitHub) Let Me Tell You About Our Lord And Saviour FRP by Brendan Forster (GitHub) Fundamentals One of the most confusing aspects of the Reactive Extensions is that of ""hot"" and ""cold"" observables (event streams). In short, given just a method or function declaration like this: IObservable<string> Search(string query)  It is impossible to tell whether subscribing to (observing) that IObservable will involve side effects. If it does involve side effects, it’s also impossible to tell whether each subscription has a side effect, or if only the first one does. Whilst this example is contrived, it demonstrates a real, pervasive problem that makes it harder at first for newcomers to understand Rx code at first glance. As such we also recommend watching this video, reading our documentation and playing with the marbles to familiarize yourself with the fundamentals. A Compelling Example Let’s say you have a text field, and whenever the user types something into it, you want to make a network request which searches for that query. public interface ISearchViewModel {     ReactiveList<SearchResults> SearchResults { get; }     string SearchQuery { get; }       ReactiveCommand<List<SearchResults>> Search { get; }     ISearchService SearchService { get; } } Define under what conditions a network request will be made // Here we're describing here, in a *declarative way*, the conditions in // which the Search command is enabled.  Now our Command IsEnabled is // perfectly efficient, because we're only updating the UI in the scenario // when it should change. var canSearch = this.WhenAny(x => x.SearchQuery, x => !String.IsNullOrWhiteSpace(x.Value)); Make the network connection // ReactiveCommand has built-in support for background operations and // guarantees that this block will only run exactly once at a time, and // that the CanExecute will auto-disable and that property IsExecuting will // be set accordingly whilst it is running. Search = ReactiveCommand.CreateAsyncTask(canSearch, async _ => {     return await searchService.Search(this.SearchQuery); }); Update the user interface // ReactiveCommands are themselves IObservables, whose value are the results // from the async method, guaranteed to arrive on the UI thread. We're going // to take the list of search results that the background operation loaded,  // and them into our SearchResults. Search.Subscribe(results => {     SearchResults.Clear();     SearchResults.AddRange(results); });  Handling failures // ThrownExceptions is any exception thrown from the CreateAsyncTask piped // to this Observable. Subscribing to this allows you to handle errors on // the UI thread.  Search.ThrownExceptions     .Subscribe(ex => {         UserError.Throw(""Potential Network Connectivity Error"", ex);     }); Throttling network requests and automatic search execution behaviour // Whenever the Search query changes, we're going to wait for one second // of ""dead airtime"", then automatically invoke the subscribe command. this.WhenAnyValue(x => x.SearchQuery)     .Throttle(TimeSpan.FromSeconds(1), RxApp.MainThreadScheduler)     .InvokeCommand(this, x => x.Search); Slack We have our very own Slack organization which contains some of the best user interface/reactive extension developers in the industry. All software engineers, young and old, regardless of experience are welcome to join our campfire but you'll need to send an email to paul@paulbetts.org with the Email address you'd like to be invited, and we'll send you an invite. Sit tight, it's worth it. Support ReactiveUI is an open source project that is community supported by people just like you. We keep a bunch of curated tasks specifically for new contributors which are a great way to get started with open source. They also provide a fantastic avenue for getting to know the ReactiveUI maintainers. If you have a question, please see if any discussions in our GitHub issues or Stack Overflow have already answered it. If not, please feel free to file your own! Contribute Here are some pointers for anyone looking for mini-features and work items that would make a positive contribution to ReactiveUI. Let us know if (and how) you are using ReactiveUI in production. We keep a bunch of curated tasks specifically for new contributors, which are a great way to get started with open source and provide a fantastic avenue for getting to know the ReactiveUI maintainers. Write a blog post about #ReactiveUI and then tweet the link to our twitter account. We will retweet you. Contribute a repro case or help resolve known issues. Help flesh out and improve our documentation by providing content writing, structure enforcement or editing services. We try not to be too OCD about coding style wars, but we do have our own convention and best design practices documented - please respect them and your pull-request experience will be much smoother. If you are using Visual Studio, please install the rebracer plugin which will automatically apply the correct source formatting settings. We're also looking for people to assist with code reviews of ReactiveUI contributions. If you're experienced with any of the below technologies, you can join the team and receive notifications: Android reviewers Core reviewers iOS reviewers Mac reviewers UWP reviewers WinForms reviewers WPF reviewers Xamarin Forms reviewers Showcase We encourage our community to showcase where and how they have used ReactiveUI in their applications, some members have even gone as far as open-sourcing their app and sharing their entire codebase. You are of course under no-obligation share these insights (or code) with us but it is greatly appreciated by the project maintainers and you'll usually get a retweet out of it. Licensing The ReactiveUI project is licensed under the MS-PL license. Acknowledgements Thanks to our awesome contributors and our community for sharing the source code behind their beautiful apps and how/where they are using our framework. Thanks to Xamarin for providing business edition licenses under their open-source program to the project maintainers. Thanks to JetBrains for providing community licenses to the project maintainers. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/reactiveui/reactiveui/"	"An MVVM framework for.NET that integrates the Reactive Extensions (Rx) framework, enabling developers to build elegant, testable applications using WPF, Windows Store Apps, WP8 or Xamarin."	"true"
"MVVM"	"Okra App Framework"	"http://okraframework.github.io"	"An app centric MVVM framework for Windows 8.1 built with dependency injection in mind, including a full set of Visual Studio MVVM templates."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Okra App Framework · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization Okra App Framework http://okraframework.github.io Repositories People 1 Filters Sources Forks C# 0 0 Okra.DependencyInjection.MEF Okra App Framework - The Okra.MEF package allows the use of the MEF dependency injection container in Okra App Framework based applications Updated Jul 14, 2016 C# 9 4 Okra.Core Okra App Framework - The Okra App Framework is designed to support the development of .Net Windows Store applications, in particular those following the MVVM pattern. Updated Jul 13, 2016 PowerShell 0 0 Okra-Docs Documentation for the Okra App Framework Updated Jul 10, 2016 C# 0 0 Okra.Platform.UniversalWindows Okra App Framework - The Okra.Platform.UniversalWindows package provides platform specific code for developing Okra App Framework based UWP applications Updated Jul 9, 2016 C# 0 1 MEFExtensions.DependencyInjection Dependency Injection adapter to allow the use of MEF containers in .Net Core applications Updated Jul 6, 2016 PowerShell 0 0 Okra-Build Shared Okra build system Updated Jun 12, 2016 0 0 Okra.Platform.XamarinForms Okra App Framework - The Okra.Platform.XamarinForms package provides platform specific code for developing Okra App Framework based Xamarin Forms applications Updated Jun 5, 2016 CSS 1 0 OkraFramework.github.io Okra Framework Website Updated May 11, 2016 C# 1 0 Okra-Todo Sample 'Todo List' project demonstrating the Okra App Framework Updated Aug 27, 2015 C# 1 1 Okra-Samples Sample code for the Okra App Framework Updated Aug 27, 2015 C# 1 2 Okra.Data Okra App Framework - Data Framework Updated Jan 5, 2015 1 People Andy-Wilkinson Andrew Wilkinson Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/OkraFramework/"	"An app centric MVVM framework for Windows 8.1 built with dependency injection in mind, including a full set of Visual Studio MVVM templates."	"true"
"MVVM"	"Prism"	"https://github.com/PrismLibrary/Prism"	"A cross-platform desktop and mobile MVVM development framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"900"	"248"	"322"	"GitHub - PrismLibrary/Prism: Prism is a framework for building loosely coupled, maintainable, and testable XAML applications in WPF, Windows 10 UWP, and Xamarin Forms. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 248 Star 900 Fork 322 PrismLibrary/Prism Code Issues 30 Pull requests 5 Wiki Pulse Graphs Prism is a framework for building loosely coupled, maintainable, and testable XAML applications in WPF, Windows 10 UWP, and Xamarin Forms. 908 commits 2 branches 4 releases 39 contributors C# 99.6% Other 0.4% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master v6.2-Preview Nothing to show WPFv6.0.1 Prismv6.1.0 Prism.Windows6.0.1 Prism.Formsv6.0.1 Nothing to show New pull request Latest commit 897c2e2 Jul 15, 2016 brianlagunas committed on GitHub Merge pull request #670 from joacar/uriparsinghelper-cleanup … Simplified method GetUriSegments Permalink Failed to load latest commit information. .github Added an issue template May 15, 2016 Documentation updated readme to include Xamarin Studio May 26, 2016 Extensibility fixed project type for XS 6.0 Jun 20, 2016 Sandbox added INavigationPageOptions for #675 Jul 13, 2016 Source Merge pull request #670 from joacar/uriparsinghelper-cleanup Jul 15, 2016 .editorconfig Add basic .editorconfig for .NET Nov 21, 2015 .gitattributes added gitatributes Feb 25, 2015 .gitignore Re-added sample app key Dec 10, 2015 LICENSE Update LICENSE Aug 27, 2015 README.md Adds Prism.Ninject.Forms to ReadMe Jun 22, 2016 README.md Prism Prism is a framework for building loosely coupled, maintainable, and testable XAML applications in WPF, Windows 10 UWP, and Xamarin Forms. Separate releases are available for each platform and those will be developed on independent timelines. Prism provides an implementation of a collection of design patterns that are helpful in writing well-structured and maintainable XAML applications, including MVVM, dependency injection, commands, EventAggregator, and others. Prism's core functionality is a shared code base in a Portable Class Library targeting these platforms. Those things that need to be platform specific are implemented in the respective libraries for the target platform. Prism also provides great integration of these patterns with the target platform. For example, Prism for UWP and Xamarin Forms allows you to use an abstraction for navigation that is unit testable, but that layers on top of the platform concepts and APIs for navigation so that you can fully leverage what the platform itself has to offer, but done in the MVVM way. Prism 6 is a fully open source version of the Prism guidance originally produced by Microsoft patterns & practices. The core team members were all part of the p&p team that developed Prism 1 through 5, and the effort has now been turned over to the open source community to keep it alive and thriving to support the .NET community. There are thousands of companies who have adopted previous versions of Prism for WPF, Silverlight, and Windows Runtime, and we hope they will continue to move along with us as we continue to evolve and enhance the framework to keep pace with current platform capabilities and requirements. At the current time we have no plans to create new versions of the library for Silverlight or for Windows 8/8.1/WP8.1. For those you can still use the previous releases from Microsoft p&p here and here. If there is enough interest and contributors to do the work, we can consider it, but it is not on our roadmap for now. Build Status Status Prism Prism.Wpf Prism.Windows Prism.Forms Help Support Prism As most of you know, it takes a lot of time and effort for our small team to manage and maintain Prism in our spare time. Even though Prism is open source and hosted on GitHub, there are a number of costs associated with maintaining a project such as Prism. If you would like to help support us, the easiest thing you can do is watch our Pluralsight courses on Prism. By watching our courses, not only do you help support the project financially, but you might also learn something along the way. We believe this is a win-win for everyone. Building Windows Store Business Apps with Prism Introduction to Prism What's New in Prism 5.0 Prism Problems & Solutions: Showing Multiple Shells Prism Problems & Solutions: Mastering TabControl Prism Problems & Solutions: Loading Modules Based on User Roles Prism Problems & Solutions: Loading Dependent Views We appreciate your support. NuGet Packages Core Packages These are the base packages for each platform, together with the Prism's Core assembly as a cross-platform PCL. Platform Assembly Package Version PCL Prism.dll Prism.Core WPF Prism.Wpf.dll Prism.Wpf Xamarin.Forms Prism.Forms.dll Prism.Forms Windows 10 UWP Prism.Windows.dll Prism.Windows Container-specific packages Each supported IoC container has its own package assisting in the setup and usage of that container together with Prism. The assembly is named using this convention: Prism.Container.Platform.dll, e.g. Prism.Unity.Wpf.dll. Following matrix shows the platform specific support currently available. Package Version WPF Win10 UWP Xamarin.Forms Prism.Unity (*) X X Prism.Unity.Forms X Prism.Mef (**) X - - Prism.Autofac X X Prism.StructureMap X Prism.Ninject (*) X Prism.Ninject.Forms X (*) As Xamarin Forms also supports UWP now, adding Prism.Unity or Prism.Ninject puts in some incorrect dependencies. Therefore we created a new package for Xamarin Forms projects. (**) MEF is supported with WPF for compatibility with previous versions. It will not be added to Windows 10 UWP or Xamarin Forms. Note that adding the container-specific package to your project, will also pull in the correct platform-specific package and the core PCL library. E.g. when you'd like to use Unity in a WPF project, add the Prism.Unity package and the rest will be pulled in as well. A detailed overview of each assembly per package is available here. Prism Template Pack Prism now integrates with Visual Studio and Xamarin Studio to enable a highly productive developer workflow for creating WPF, UWP, and native iOS and Android applications using Xamarin.Forms. Jump start your Prism apps with code snippets, item templates, and project templates for your IDE of choice. Visual Studio Gallery The Prism Template Pack is available on the Visual Studio Gallery. To install, just go to Visual Studio -> Tools -> Extensions and Updates... then search for Prism in the online gallery: Xamarin Studio Addin Installation is straightforward if you've installed Xamarin Add-ins before, just go to Xamarin Studio -> Add-In Manager... from the Menu and then search for Prism from the Gallery: Samples We have both a development sandbox (frequently changing) and stable samples for using Prism with WPF, UWP and Xamarin Forms. An overview of the samples can be found here. Roadmap/Milestones You can check out our milestones for coming releases here. Support For general questions and support, post your questions on StackOverflow You can enter bugs and feature requests in our Issues. Contributing We strongly encourage you to get involved and help us evolve the code base. You can see what our expectations are for pull requests here. Moving to Prism 6 from Previous Releases As part of taking over the code base from Microsoft and moving towards Prism 6, there are a number of breaking changes users of Prism 5 or Prism for Windows Runtime will have to deal with. Those changes are summarized below. Current Release Notes Breaking Changes Removed all types that were marked as ""Obsolete"" in Prism 5 Removed IView interface Changed namespaces to remove Microsoft namespaces Moved a number of types around to better organize and to get as much into a single Portable Class Library as possible ViewModelLocator naming convention changes: [Name]View now requires [Name]ViewModel. No longer [Name]ViewViewModel Prism for UWP Preview Prism for UWP is a port of the Prism for Windows Runtime 2.0 release Removed SettingsPane functionality from PrismApplication because it is deprecated in UWP Visual State management parts of VisualStateAwarePage were removed and it is now renamed to SessionStateAwarePage. Prism for Xamarin.Forms Preview Check out the new Prism for Xamarin.Forms Preview: Prism.Forms 5.7.0 Preview - http://brianlagunas.com/first-look-at-the-prism-for-xamarin-forms-preview/ Prism.Forms 6.2.0 Preview - http://brianlagunas.com/prism-for-xamarin-forms-6-2-0-preview/ Prism.Forms 6.2.0 Preview 3 - http://brianlagunas.com/prism-for-xamarin-forms-6-2-0-preview-3/ .NET Foundation This project is part of the .NET Foundation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PrismLibrary/Prism"	"A cross-platform desktop and mobile MVVM development framework."	"true"
"MVVM"	"WPF Application Framework (WAF)"	"http://waf.codeplex.com"	"A lightweight Framework that helps you to create well structured WPF Applications. It supports you in applying a Layered Architecture and the Model-View-ViewModel pattern."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"24"	"1"	"0"	"GitHub - jbe2277/waf: Win Application Framework (WAF) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 24 Fork 0 jbe2277/waf Code Issues 0 Pull requests 0 Wiki Pulse Graphs Win Application Framework (WAF) 171 commits 2 branches 4 releases Fetching contributors C# 97.4% Smalltalk 2.4% Batchfile 0.2% C# Smalltalk Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master wiki Nothing to show v4.0.0-alpha4 v4.0.0-alpha3 v4.0.0-alpha2 v4.0.0-alpha1 Nothing to show New pull request Latest commit 1991f69 Jul 15, 2016 jbe2277 Improve visualization of unread feed items Permalink Failed to load latest commit information. pkg WAF Change version number to 4.0.0.5 May 14, 2016 src Improve visualization of unread feed items Jul 15, 2016 .gitignore Initial commit of the Jbe NewsReader Apr 26, 2016 CONTRIBUTING.md Add CONTRIBUTING.md Jan 27, 2016 LICENSE Add nuspec files Mar 3, 2016 README.md Update README.md May 10, 2016 README.md Win Application Framework (WAF) Successor of the WPF Application Framework The Win Application Framework (WAF) is a lightweight Framework that helps you to create well structured XAML Applications. It supports you in applying a Layered Architecture and the Model-View-ViewModel (aka MVVM, M-V-VM, PresentationModel) pattern. Version 4 Starting with version 4 the framework comes with the new name Win Application Framework instead of WPF Application Framework. This rename shows that the framework supports now various application types: WPF (Windows Presentation Foundation) UWP (Universal Windows Platform) Basic support for all .NET Core based applications Pre-release Version 4 is still under development and not production ready yet. At the moment it is recommended to use an older stable version of this framework. You will find these versions on CodePlex: http://waf.codeplex.com NuGet Packages Package Usage Successor of System.Waf.Wpf For WPF applications waf System.Waf.Uwp For Universal Windows Apps System.Waf.Core For .NET Core based applications . System.Waf.UnitTesting.Wpf For unit testing of WPF applications waf.testing System.Waf.UnitTesting.Core For unit testing of .NET Core based applications Sample Applications Name Type Description Links Jbe NewsReader UWP A simple and fast RSS and ATOM news feed reader. Windows Store Waf Music Manager WPF Fast application that makes fun to manage the local music collection. WinRT, Async, Await, Drag & Drop Waf DotNetPad WPF Code editor to program with C# or Visual Basic. .NET Compiler Platform, Roslyn, AvalonEdit, Auto completion Waf Information Manager WPF A modular application that comes with a fake email client and an address book. Modular Architecture, UI Wizard, DataContractSerializer Doc Waf Book Library WPF Supports the user to manage his books. Borrowed books can be tracked by this application. Entity Framework, Validation, Sort & Filter, Reporting Doc Waf Writer WPF A simplified word processing application. Ribbon, Tabbed MDI, Recent files, Print, Localization Doc License The license of this framework has been changed from the Microsoft Public License (Ms-PL) to the MIT License with version 4. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jbe2277/waf"	"A lightweight Framework that helps you to create well structured WPF Applications. It supports you in applying a Layered Architecture and the Model-View-ViewModel pattern."	"true"
"MVVM"	"MVVMCross"	"https://github.com/MvvmCross/MvvmCross"	"Cross-platform mvvm mobile development framework for WPF, Silverlight for WP7 and WP8, Mono for Android, MonoTouch for iOS, Windows Universal projects (WPA8.1 and Windows 8.1 Store apps). Makes extensive use of Portable Class Libraries (PCL) to provide maintainable cross platform C# native applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1621"	"264"	"624"	"GitHub - MvvmCross/MvvmCross: The .NET MVVM framework for cross-platform solutions, including Xamarin.iOS, Xamarin.Android, Windows and Mac. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 264 Star 1,621 Fork 624 MvvmCross/MvvmCross Code Issues 149 Pull requests 11 Wiki Pulse Graphs The .NET MVVM framework for cross-platform solutions, including Xamarin.iOS, Xamarin.Android, Windows and Mac. http://mvvmcross.com 3,066 commits 13 branches 62 releases 115 contributors C# 98.7% Other 1.3% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 4.0 Switch branches/tags Branches Tags 3.2 3.5 4.0-uwp 4.0 master noyield parent-binding-experiment speedystartup v3+Mac v3 v3.1 vnext withevent_propertyinfo_targetbindings Nothing to show v3_5_alpha0 Release-3.0.8.1 FullFragging_4.1.1 DroidShared_4.1.2 Binding_4.1.1 4.2.2 4.2.1 4.2.0 4.1.6 4.1.5 4.1.4 4.1.0 4.0.0 4.0.0-beta8 4.0.0-beta7 4.0.0-beta5 4.0.0-beta4 4.0.0-beta3 4.0.0-beta2 4.0.0-beta1 4.0.0-alpha9 4.0.0-alpha8 4.0.0-alpha4 4.0.0-alpha3 4.0.0-alpha2 4.0.0-alpha1 3.51-beta1 3.5.2-alpha2 3.5.2-alpha1 3.5.1 3.5.1-alpha1 3.5.0 3.5.0-beta2 3.5.0-beta1 3.5.0-alpha2 3.2.2 3.2.2-beta1 3.2.1-beta3 3.2.1-beta2 3.2.1-beta1 3.1.2-beta1 3.1.1 3.1.1-beta5 3.1.1-beta5-attempt2 3.1.1-beta4 3.1.1-beta3 3.1.1-beta2 3.1.1-beta1 3.0.14 3.0.14-beta3 3.0.14-beta2 3.0.14-beta2-real 3.0.14-beta1 3.0.13 3.0.13-beta4 3.0.13-beta3 3.0.12 3.0.11 3.0.11-final 3.0.11-beta1 3.0.10 3.0.9 Nothing to show New pull request Latest commit f6813f9 Jul 12, 2016 martijn00 committed on GitHub Merge pull request #1394 from martijn00/4.0 … Fix linker include errors Permalink Failed to load latest commit information. .nuget Migrate to Automatic Package Restore Apr 30, 2015 CodeAnalysis Merge pull request #1312 from azchohfi/fixAnalyzersTestsProj May 1, 2016 CrossUI Null-propogation for event handlers Jun 10, 2016 MvvmCross Thanks line endings... Jul 11, 2016 PortableSupport More cleanup. Jan 3, 2016 nuspec Fix linker include errors Jul 12, 2016 .gitignore Fix droid output path and remove designer files Apr 11, 2016 .mailmap add .mailmap file so 'git shortlog' shows sane output Apr 14, 2016 ISSUE_TEMPLATE.md Highlighted where to put repro samples Mar 14, 2016 LICENSE Rename license.txt to LICENSE Aug 9, 2015 MvvmCross_All.sln Nothing much May 24, 2016 MvvmCross_Mac.sln Include Mac nugets. Jan 4, 2016 MvvmCross_Windows.sln More cleanup Nov 19, 2015 README.md Update README.md May 6, 2016 code_of_conduct.md Added Code of Conduct based on contributor-covenant May 12, 2016 README.md MvvmCross MvvmCross is a cross-platform mvvm framework that enables developers to create cross platform apps. Additional support is available for Xamarin.Forms and the Android support library. Lots of plugins are available as well. Documentation & blog See our official website for an extensive set of documentation! To stay up-to-date with the latest news go to the MvvmCross blog! Get started A quick way to get started is to use the Visual Studio MvvmCross Ninja Coder Extension - download it from Visual Studio Gallery For manual project creation install the necessary packages from Nuget Questions & support StackOverflow Xamarin forums Slack join the mvvmcross channel after you are in Documentation and Examples The MvvmCross-Samples repo contains the latest samples. See the MvvmCross Wiki for additional articles and information. Samples and Videos: N Plus 1 Videos Of MvvmCross MvvmCross Tutorials Evolve 2013 talk NDC 2013 talk Xaminar - 2012 MvvmCross and Azure - 2012 The Tip Calc tutorial: A first app The Core Project A Xamarin.Android UI project A Xamarin.iOS UI project A Universal Windows App UI Project A Windows Phone UI Project A Windows Store UI Project A Wpf UI Project Tip Calculator - A recap General articles: The MvvmCross Manifesto High Level MvvmCross Objects Databinding Value Converters View Model Lifecycle ViewModel to ViewModel navigation Customising App and Setup Service Location and Inversion of Control Assemblies Plugins Testing Dialog - very draft iOS Articles: Tables and Cells in iOS Map Annotation Data-Binding For more information please also see: the N+1 video series - N Plus 1 Videos Of MvvmCross Stuart's blog Cheesebaron's blog DeapSquatter's blog Odenaxos's blog Greg's blog Kerry's blog Jammer's blog others? Get in touch if you think your blog should be here...... Contribute! Some of the best ways to contribute are to try things out, file bugs, and join conversations. Pull requests: Open/Closed Issues: Open/Closed If you would like to help make MvvmCross even better, then please do: new code - including pull requests via GitHub - or you can fork the project and build your own extensions new plugins - can be hosted in your own repositories please do blog about your adventures with MvvmCross - we're currently light on documentation! if you use the framework, then please let me know - we love to see what people are doing with it Licensing MvvmCross is licensed under the MS-PL License MonoCross was the original starting point for this project, and was used as a reference under MIT Phone7.Fx is redistributed and modified under MS-PL Tiny bits of MvvmLight are redistributed and modified under MIT NewtonSoft.Json is redistributed and modified here under MIT The original work on the JSON.Net port to MonoTouch and MonoDroid was done by @ChrisNTR Sqlite-net - custom license MonoTouch.Dialog - MIT X11 MonoDroid.Dialog - MIT X11 Messenger ideas from JonathanPeppers/XPlatUtils under Apache License Version 2.0, and from GrumpyDev/TinyMessenger under simple license of ""THIS CODE AND INFORMATION IS PROVIDED ""AS IS"" WITHOUT WARRANTY"" Color codes under MIT License Acknowledgements Thanks to McCannLondon for sponsoring the initial part of this work Thanks to JetBrains for a community Resharper license to use on this project Thanks to Infragistics for a control license for Nuclios and .Net Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MvvmCross/MvvmCross"	"Cross-platform mvvm mobile development framework for WPF, Silverlight for WP7 and WP8, Mono for Android, MonoTouch for iOS, Windows Universal projects (WPA8.1 and Windows 8.1 Store apps). Makes extensive use of Portable Class Libraries (PCL) to provide maintainable cross platform C# native applications."	"true"
"MVVM"	"Stylet"	"https://github.com/canton7/stylet/"	"Minimal MVVM framework inspired by Caliburn Micro, with good documentation, high test coverage, and its own IoC container"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"35"	"5"	"5"	"GitHub - canton7/Stylet: Minimal MVVM framework inspired by Caliburn Micro, with good documentation, high test coverage, and its own IoC container Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 35 Fork 5 canton7/Stylet Code Issues 1 Pull requests 0 Wiki Pulse Graphs Minimal MVVM framework inspired by Caliburn Micro, with good documentation, high test coverage, and its own IoC container 676 commits 2 branches 35 releases 3 contributors C# 97.4% PowerShell 1.8% Ruby 0.8% C# PowerShell Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop master Nothing to show v1.1.15 v1.1.14 v1.1.13 v1.1.12 v1.1.11 v1.1.10 v1.1.9 v1.1.8 v1.1.7 v1.1.6 v1.1.5 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.9.11 v0.9.10 v0.9.9 v0.9.8 v0.9.7 v0.9.6 v0.9.5 v0.9.4 v0.9.3 v0.9.2 v0.9.1 Nothing to show New pull request Latest commit b6b9811 Jul 9, 2016 canton7 Conductors, which override CanCloseAsync, must call CanClose … Otherwise subclasses which override CanClose but not CanCloseAsync won't work as expected.  Fixes #10 Permalink Failed to load latest commit information. Bootstrappers Fix up the Bootstrappers project Jul 9, 2016 NuGet Recreate App.xaml if NuGet removed it Apr 5, 2016 Samples Move to automatic nuget package restore Jul 9, 2016 Stylet Conductors, which override CanCloseAsync, must call CanClose Jul 9, 2016 StyletIntegrationTests Freeze BitmapSources before returning them Oct 8, 2015 StyletUnitTests Conductors, which override CanCloseAsync, must call CanClose Jul 9, 2016 .gitattributes Use powershell, and powershell only, for Stylet.Start Apr 4, 2016 .gitignore Add rake task to generate code coverage report May 6, 2014 CHANGELOG.txt Update changelog Apr 5, 2016 LICENSE.txt Actually fill in the blanks in the license May 23, 2014 README.md Fixed link to caliburn micro project May 10, 2016 Rakefile Fix cover report generation Jan 19, 2016 Stylet.sln Move to automatic nuget package restore Jul 9, 2016 Stylet.sln.DotSettings Align style with ReSharper Jan 14, 2015 StyletIcon.png First attempt at an icon Apr 19, 2014 StyletIcon.svg First attempt at an icon Apr 18, 2014 README.md Stylet Introduction Stylet is a small but powerful ViewModel-first MVVM framework for WPF, which allows you to write maintainable and extensible code in a way which is easy to test. Stylet's aims to: Solve the blockers, niggles, and annoyances which hamper MVVM development without a framework, using simple but powerful concepts. Be obvious to people picking up your project for the first time: there's very little magic Be easy to verify/validate. The LOC count is low, and it comes with a very comprehensive test suite. The code is well-written and well-documented. Be flexible while providing sensible defaults. Almost any part of the framework can be overridden if you wish, but you probably won't want to. It is inspired by Caliburn.Micro, and shares many of its concepts, but removes most of the magic (replacing it with more powerful alternatives), and simplifies parts considerably by targeting only MVVM, WPF and .NET 4.5. Getting Started The quickest way to get started is to create a new WPF Application project, then install the NuGet package Stylet.Start. This will install Stylet, and set up a simple skeleton project. See Quick Start for more details. If you want to set up your project manually, install the Stylet package, then follow the instructions in the Quick Start. Stylet requires .NET 4.5 (Visual Studio 2012 or higher). Documentation The Wiki is the documentation source. There's loads of information there - go and have a look, or start with the Quick Start. Symbols The source is also available when you are debugging, using GitLink. Go to Debug -> Options and Settings -> General, and make the following changes: Turn off ""Enable Just My Code"" Turn off ""Enable .NET Framework source stepping"". Yes, it is misleading, but if you don't, then Visual Studio will ignore your custom server order and only use its own servers. Turn on ""Enable source server support"". You may have to OK a security warning. See also GitLink troubleshooting. Contributing Contributions are always welcome. If you've got a problem or a question, raise an issue. If you've got code you want to contribute, please read the Contributing guidelines first of all. Create a feature branch off the develop branch, add your changes there, and submit it as a pull request. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/canton7/stylet/"	"Minimal MVVM framework inspired by Caliburn Micro, with good documentation, high test coverage, and its own IoC container"	"true"
"MVVM"	"Gemini"	"https://github.com/tgjones/gemini"	"IDE framework similar in concept to the Visual Studio Shell. Built on WPF, AvalonDock, and Caliburn Micro."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"305"	"60"	"114"	"GitHub - tgjones/gemini: Gemini is an IDE framework similar in concept to the Visual Studio Shell. It uses AvalonDock and has an MVVM architecture based on Caliburn Micro. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 60 Star 305 Fork 114 tgjones/gemini Code Issues 15 Pull requests 7 Pulse Graphs Gemini is an IDE framework similar in concept to the Visual Studio Shell. It uses AvalonDock and has an MVVM architecture based on Caliburn Micro. http://documentup.com/tgjones/gemini 456 commits 1 branch 3 releases 13 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.6.2 v0.2.1 v0.2.0 Nothing to show New pull request Latest commit 98afdcb Jul 6, 2016 tgjones committed on GitHub Merge pull request #213 from EchterAgo/undo_reset … Inspector: Add reset object action to undo redo manager Permalink Failed to load latest commit information. doc Update docs and screenshots Sep 9, 2015 lib Update Extended.Wpf.Toolkit to 2.6 Jan 13, 2016 src Inspector: Add reset object action to undo redo manager Jul 6, 2016 .editorconfig Add a .editorconfig file for consistent formatting Jun 8, 2016 .gitignore Remove packages folder from git, now that we're using NuGet package r… May 29, 2013 CHANGELOG.markdown Update changelog for 0.6.0 release Sep 11, 2015 LICENCE.txt Added licence, readme, and slightly better demo Jul 24, 2012 README.markdown README: Fix demo link Jun 24, 2016 appveyor.yml Don't publish symbol package Sep 20, 2015 README.markdown Gemini What is this? Gemini is a WPF framework designed specifically for building IDE-like applications. It builds on some excellent libraries: AvalonDock Caliburn Micro MEF Gemini ships with two themes: a Light theme and a Blue theme. There is also an in-development Dark theme. Getting started If you are creating a new WPF application, follow these steps: Install the Gemini NuGet package. Delete MainWindow.xaml - you don't need it. Open App.xaml and delete the StartupUri=""MainWindow.xaml"" attribute. Add xmlns:gemini=""http://schemas.timjones.tw/gemini"" to App.xaml. Add <gemini:AppBootstrapper x:Key=""bootstrapper"" /> to a ResourceDictionary within <Application.Resources>. So the whole App.xaml should look something like this: <Application x:Class=""Gemini.Demo.App""              xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""              xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""               xmlns:gemini=""http://schemas.timjones.tw/gemini"">     <Application.Resources>         <ResourceDictionary>             <ResourceDictionary.MergedDictionaries>                 <ResourceDictionary>                     <gemini:AppBootstrapper x:Key=""bootstrapper"" />                 </ResourceDictionary>             </ResourceDictionary.MergedDictionaries>         </ResourceDictionary>     </Application.Resources> </Application> Now hit F5 and see a very empty application! By far the easiest way to get started with Gemini is to use the various NuGet packages. First, install the base Gemini package (note that the package ID is GeminiWpf, to distinguish it from another NuGet package with the same name): Gemini Then add any other modules you are interested in (note that some modules have dependencies on other modules, but this is taken care of by the NuGet package dependency system): Gemini.Modules.CodeCompiler Gemini.Modules.CodeEditor Gemini.Modules.ErrorList Gemini.Modules.GraphEditor Gemini.Modules.Inspector Gemini.Modules.Inspector.MonoGame Gemini.Modules.Inspector.Xna Gemini.Modules.MonoGame Gemini.Modules.Output Gemini.Modules.PropertyGrid Gemini.Modules.SharpDX Gemini.Modules.Xna Continuous builds We use AppVeyor to build Gemini after every commit to the master branch, and also to generate pre-release NuGet packages so you can try out new features immediately. To access the pre-release NuGet packages, you'll need to add a custom package source in Visual Studio, pointing to this URL: https://ci.appveyor.com/nuget/gemini-g84phgw340sm Make sure you select ""Include Prerelease"" when searching for NuGet packages. What does it do? Gemini allows you to build your WPF application by composing separate modules. This provides a nice way of separating out the code for each part of your application. For example, here is a very simple module: [Export(typeof(IModule))] public class Module : ModuleBase {     [Import]     private IPropertyGrid _propertyGrid;      public override IEnumerable<Type> DefaultTools     {         get { yield return typeof(IInspectorTool); }     }      public override void Initialize()     {         var homeViewModel = IoC.Get<HomeViewModel>();         Shell.OpenDocument(homeViewModel);          _propertyGrid.SelectedObject = homeViewModel;     }      private IEnumerable<IResult> OpenHome()     {         yield return Show.Document<HomeViewModel>();     } } Documents Documents are (usually) displayed in the main area in the middle of the window. To create a new document type, simply inherit from the Document class: public class SceneViewModel : Document {     public override string DisplayName     {         get { return ""3D Scene""; }     }      private Vector3 _position;     public Vector3 Position     {         get { return _position; }         set         {             _position = value;             NotifyOfPropertyChange(() => Position);         }     } } To open a document, call OpenDocument on the shell (Shell is defined in ModuleBase, but you can also retrieve it from the IoC container with IoC.Get<IShell>()): Shell.OpenDocument(new SceneViewModel()); You can then create a SceneView view, and Caliburn Micro will use a convention-based lookup to find the correct view. Persisted documents If you have a document that needs to be loaded from, and saved to, a file, you can use the PersistedDocument base class, to remove a lot of the boilerplate code that you would usually have to write. You only need to implement the DoNew, DoLoad, and DoSave methods. public class EditorViewModel : PersistedDocument {     private EditorView _view;     private string _originalText;      protected override Task DoNew()     {         _originalText = string.Empty;         ApplyOriginalText();         return TaskUtility.Completed;     }      protected override Task DoLoad(string filePath)     {         _originalText = File.ReadAllText(filePath);         ApplyOriginalText();         return TaskUtility.Completed;     }      protected override Task DoSave(string filePath)     {         var newText = _view.textBox.Text;         File.WriteAllText(filePath, newText);         _originalText = newText;         return TaskUtility.Completed;     }      private void ApplyOriginalText()     {         _view.textBox.Text = _originalText;          _view.textBox.TextChanged += delegate         {             IsDirty = string.Compare(_originalText, _view.textBox.Text) != 0;         };     }      protected override void OnViewLoaded(object view)     {         _view = (EditorView) view;     } } Tools Tools are usually docked to the sides of the window, although they can also be dragged free to become floating windows. Most of the modules (ErrorList, Output, Toolbox, etc.) primarily provide tools. For example, here is the property grid tool class: [Export(typeof(IPropertyGrid))] public class PropertyGridViewModel : Tool, IPropertyGrid {     public PropertyGridViewModel()     {         DisplayName = ""Properties"";     }      public override PaneLocation PreferredLocation     {         get { return PaneLocation.Right; }     }      private object _selectedObject;     public object SelectedObject     {         get { return _selectedObject; }         set         {             _selectedObject = value;             NotifyOfPropertyChange(() => SelectedObject);         }     } } For more details on creating documents and tools, look at the demo program and the source code for the built-in modules. Commands Commands are one of the core concepts in Gemini. Commands help you to avoid duplicating code by letting you define command handlers in a single place, regardless of whether the command is invoked through a menu item, toolbar item, or other trigger. Gemini's commands are conceptually similar to WPF commands, but they are more powerful. First, create a command definition. Here's Gemini command definition for opening files: [CommandDefinition] public class OpenFileCommandDefinition : CommandDefinition {     public const string CommandName = ""File.OpenFile"";      public override string Name     {         get { return CommandName; }     }      public override string Text     {         get { return ""_Open""; }     }      public override string ToolTip     {         get { return ""Open""; }     }      public override Uri IconSource     {         get { return new Uri(""pack://application:,,,/Gemini;component/Resources/Icons/Open.png""); }     }      [Export]     public static CommandKeyboardShortcut KeyGesture = new CommandKeyboardShortcut<OpenFileCommandDefinition>(new KeyGesture(Key.O, ModifierKeys.Control)); } Then, provide a command handler. You can do this in one of two ways. For global commands, that don't depend on a document context, create a global handler: [CommandHandler] public class OpenFileCommandHandler : CommandHandlerBase<OpenFileCommandDefinition> {     public override void Update(Command command)     {         // You can enable / disable the command here with:         // command.Enabled = true;          // You can also modify the command text / icon, which will affect         // any menu items or toolbar items bound to this command.     }      public override async Task Run(Command command)     {         // ... implement command handling here     } } For commands that depend on a document context, and should be disabled when there is no active document or the active document is not of the correct type, define the command in the document class: public class MyDocument : Document, ICommandHandler<ClearTextCommandDefinition> {     void ICommandHandler<ClearTextCommandDefinition>.Update(Command command)     {         command.Enabled = this.Text.Any();     }      Task ICommandHandler<ClearTextCommandDefinition>.Run(Command command)     {         this.Text = string.Empty;         return TaskUtility.Completed;     } } To remove built-in keyboard shortcuts, you can exclude them declaratively: [Export] public static ExcludeCommandKeyboardShortcut ExcludeFileOpenShortcut = new ExcludeCommandKeyboardShortcut(OpenFileCommandDefinition.KeyGesture); To find out how to bind commands to menus or toolbars, see the ""MainMenu"" and ""ToolBars"" modules below. What modules are built-in? Gemini itself is built out of seven core modules: MainWindow Shell MainMenu StatusBar ToolBars Toolbox UndoRedo Several more modules ship with Gemini, and are available as NuGet packages as described above: CodeCompiler CodeEditor ErrorList GraphEditor Inspector Inspector.MonoGame Inspector.Xna MonoGame Output PropertyGrid SharpDX Xna For more information about these modules, see below. In general, each module adds some combination of menu items, tool window, document types and services. MainWindow module The main window module: manages the overall window Provides IMainWindow interface NuGet package Gemini Dependencies None Usage The IMainWindow interface exposes a number of useful properties to control aspects of the main application window. public interface IMainWindow {     WindowState WindowState { get; set; }     double Width { get; set; }     double Height { get; set; }      string Title { get; set; }     ImageSource Icon { get; set; }       IShell Shell { get; } } Shell module The shell module: manages placement of the document and tool windows persists and loads the size and position of tool windows manages the links between AvalonDock and Caliburn.Micro Provides IShell interface NuGet package Gemini Dependencies None Usage The IShell interface exposes a number of useful properties and methods. It is the main way to control Gemini's behaviour. public interface IShell {     event EventHandler ActiveDocumentChanging;     event EventHandler ActiveDocumentChanged;      bool ShowFloatingWindowsInTaskbar { get; set; }      IMenu MainMenu { get; }     IToolBars ToolBars { get; }     IStatusBar StatusBar { get; }      IDocument ActiveItem { get; }      IObservableCollection<IDocument> Documents { get; }     IObservableCollection<ITool> Tools { get; }      void ShowTool<TTool>() where TTool : ITool;     void ShowTool(ITool model);      void OpenDocument(IDocument model);     void CloseDocument(IDocument document);      void Close(); } MainMenu module Adds a main menu to the top of the window. NuGet package Gemini Dependencies None Usage First, create commands, as described above in the ""Commands"" section. Then declare menus, menu item groups, and menu items. This is how the built-in File menu and menu items are declared; you can create your own menus in the same way. public static class MenuDefinitions {     [Export]     public static MenuDefinition FileMenu = new MenuDefinition(MainMenuBar, 0, Resources.FileMenuText);      [Export]     public static MenuItemGroupDefinition FileNewOpenMenuGroup = new MenuItemGroupDefinition(FileMenu, 0);      [Export]     public static MenuItemDefinition FileNewMenuItem = new TextMenuItemDefinition(         MenuDefinitions.FileNewOpenMenuGroup, 0, ""_New""); } You can either use an existing menu or menu item group as a parent for your menu items, or create your own. To remove an existing menu item (such as a built-in menu item that you don't want), you can exclude it declaratively: [Export] public static ExcludeMenuItemDefinition ExcludeOpenMenuItem = new ExcludeMenuItemDefinition(Gemini.Modules.Shell.MenuDefinitions.FileOpenMenuItem);  [Export] public static ExcludeMenuItemGroupDefinition ExcludeWindowMenuItemGroup = new ExcludeMenuItemGroupDefinition(Gemini.Modules.MainMenu.MenuDefinitions.ViewToolsMenuGroup);  [Export] public static ExcludeMenuDefinition ExcludeWindowMenuDefinition = new ExcludeMenuDefinition(Gemini.Modules.MainMenu.MenuDefinitions.WindowMenu); StatusBar module Adds a status bar to the bottom of the window. Provides IStatusBar StatusBarItemViewModel class NuGet package Gemini Dependencies None Usage var statusBar = IoC.Get<IStatusBar>(); statusBar.AddItem(""Hello world!"", new GridLength(1, GridUnitType.Star)); statusBar.AddItem(""Ln 44"", new GridLength(100)); statusBar.AddItem(""Col 79"", new GridLength(100)); ToolBars module Adds a toolbar tray to the top of the window. By default, the toolbar tray is hidden - use Shell.ToolBars.Visible = true to show it. NuGet package Gemini Dependencies None Usage First, create commands, as described above in the ""Commands"" section. Then declare toolbars, toolbar item groups, and toolbar items. This is how the standard toolbar and toolbar items are declared; you can create your own toolbars in the same way. internal static class ToolBarDefinitions {     [Export]     public static ToolBarDefinition StandardToolBar = new ToolBarDefinition(0, ""Standard"");      [Export]     public static ToolBarItemGroupDefinition StandardOpenSaveToolBarGroup = new ToolBarItemGroupDefinition(         ToolBars.ToolBarDefinitions.StandardToolBar, 8);      [Export]     public static ToolBarItemDefinition OpenFileToolBarItem = new CommandToolBarItemDefinition<OpenFileCommandDefinition>(         StandardOpenSaveToolBarGroup, 0); }  // ...  Shell.ToolBars.Visible = true; Toolbox module Reproduces the toolbox tool window from Visual Studio. Use the [ToolboxItem] attribute to provide available items for listing in the toolbox. You specify the document type for each toolbox item. When the user switches to a different document, Gemini manages showing only the toolbox items that are supported for the active document type. Items are listed in categories. The toolbox supports drag and drop. Provides IToolbox tool window ToolboxItemAttribute attribute ToolboxDragDrop utility class NuGet package Gemini Dependencies None Usage [ToolboxItem(typeof(GraphViewModel), ""Image Source"", ""Generators"")] public class ImageSource : ElementViewModel {     // ... } Handling dropping onto a document (this code is from GraphView.xaml.cs): private void OnGraphControlDragEnter(object sender, DragEventArgs e) {     if (!e.Data.GetDataPresent(ToolboxDragDrop.DataFormat))         e.Effects = DragDropEffects.None; }  private void OnGraphControlDrop(object sender, DragEventArgs e) {     if (e.Data.GetDataPresent(ToolboxDragDrop.DataFormat))     {         var mousePosition = e.GetPosition(GraphControl);          var toolboxItem = (ToolboxItem) e.Data.GetData(ToolboxDragDrop.DataFormat);         var element = (ElementViewModel) Activator.CreateInstance(toolboxItem.ItemType);         element.X = mousePosition.X;         element.Y = mousePosition.Y;          ViewModel.Elements.Add(element);     } } UndoRedo module Provides a framework for adding undo/redo support to your application. An undo/redo stack is maintained separately for each document. The screenshot above shows the history tool window. You can drag the slider to move forward or backward in the document's history. Provides IHistoryTool tool window IUndoableAction interface UndoRedoToolbarItems utility class NuGet package Gemini Dependencies None Usage First, define an action. The action needs to implement IUndoableAction: public class MyAction : IUndoableAction {     public string Name     {         get { return ""My Action""; }     }      public void Execute()     {         // Do something     }      public void Undo()     {         // Put it back     } } Then execute the action: var undoRedoManager = IoC.Get<IShell>().ActiveItem.UndoRedoManager; undoRedoManager.ExecuteAction(new MyAction()); Now the action will be shown in the history tool window. If you are using the Undo or Redo menu items or toolbar buttons, they will also react appropriately to the action. CodeCompiler module Uses Roslyn to compile C# code. Currently, ICodeCompiler exposes a very simple interface: public interface ICodeCompiler {     Assembly Compile(         IEnumerable<SyntaxTree> syntaxTrees,          IEnumerable<MetadataReference> references,         string outputName); } An interesting feature, made possible by Roslyn, is that the compiled assemblies are garbage-collectible. This means that you can compile C# source code, run the resulting assembly in the same AppDomain as your main application, and then unload the assembly from memory. This would be very useful, for example, in a game editor where you want the game preview window to update as soon as the user modifies a script source file. Provides ICodeCompiler service NuGet package Gemini.Modules.CodeCompiler Dependencies Roslyn Usage This example is from HelixViewModel in one of the sample applications. var newAssembly = _codeCompiler.Compile(     new[] { SyntaxTree.ParseText(_helixView.TextEditor.Text) },     new[]     {         MetadataReference.CreateAssemblyReference(""mscorlib""),         MetadataReference.CreateAssemblyReference(""System""),         MetadataReference.CreateAssemblyReference(""PresentationCore""),         new MetadataFileReference(typeof(IResult).Assembly.Location),         new MetadataFileReference(typeof(AppBootstrapper).Assembly.Location),         new MetadataFileReference(GetType().Assembly.Location)     },     ""GeminiDemoScript""); Once there are no references to newAssembly, it will be eligible for garbage collection. CodeEditor module Uses AvalonEdit to provide syntax highlighting and other features for editing C# source files. Provides EditorProvider for C# source files CodeEditor control NuGet package Gemini.Modules.CodeEditor Dependencies AvalonEdit Usage Opening a file with a .cs extension will automatically use the CodeEditor module to display the document. You can also use the CodeEditor control in your own views: <codeeditor:CodeEditor SyntaxHighlighting=""C#"" /> ErrorList module Reproduces the error list tool window from Visual Studio. Can be used to show errors, warning, or information. Provides IErrorList tool window NuGet package Gemini.Modules.ErrorList Dependencies None Usage var errorList = IoC.Get<IErrorList>(); errorList.Clear(); errorList.AddItem(     ErrorListItemType.Error,     ""Description of the error"",     @""C:\MyFile.txt"",     1,   // Line     20); // Column You can optionally provide a callback that will be executed when the user double-clicks on an item: errorList.AddItem(     ErrorListItemType.Error,     ""Description of the error"",     @""C:\MyFile.txt"",     1, // Line     20, // Character     () =>     {         var openDocumentResult = new OpenDocumentResult(@""C:\MyFile.txt"");         IoC.BuildUp(openDocumentResult);         openDocumentResult.Execute(null);     }); GraphEditor module Implements a general purpose graph / node editing UI. This module provides the UI controls - the logic and view models are usually specific to your application, and are left to you. The FilterDesigner sample application (in the screenshot above) is one example of how it can be used. Although I implemented it slightly differently, I got a lot of inspiration and some ideas for the code from Ashley Davis's CodeProject article. Provides GraphControl control ConnectorItem control BezierLine control ZoomAndPanControl control from this CodeProject article NuGet package Gemini.Modules.GraphEditor Dependencies None Usage You'll need to create view models to represent: the graph itself elements connectors connections. I suggest looking at the FilterDesigner sample application to get an idea of what's involved. Inspector module Similar in purpose to the property grid, but the Inspector module takes a more flexible approach. Instead of the strict ""two-column / property per row"" layout used in the standard PropertyGrid, the Inspector module allows each editor to customise its own view. It comes with the following editors: BitmapSource CheckBox CollapsibleGroup Color (WPF) Enum Point3D (WPF) Range TextBox Provides IInspectorTool tool window InspectableObjectBuilder class NuGet package Gemini.Modules.Inspector Dependencies Extended WPF Toolkit (for the colour picker) Usage You can build up the inspector for an object in two ways: Convention-based. The Inspector module can reflect over an object and create editors for the properties whose types it recognises. It comes with built-in editors for int, string, Enum, etc. Manually. Use the fluent interface on InspectableObjectBuilder to create editors. You can also mix and match these approaches. var inspectorTool = IoC.Get<IInspectorTool>(); inspectorTool.SelectedObject = new InspectableObjectBuilder()     .WithCollapsibleGroup(""My Group"", b => b         .WithColorEditor(myObject, x => x.Color))     .WithObjectProperties(Shell.ActiveItem, pd => true) // Automatically adds browsable properties.     .ToInspectableObject(); Inspector.Xna module Adds editors for XNA types (Vector3, Color, etc.) to the Inspector module. MonoGame module Provides a number of utilities and controls for working with MonoGame content in WPF. Provides GraphicsDeviceService service that implements MonoGame's IGraphicsDeviceService DrawingSurface control that uses D3DImage as described here. NuGet package Gemini.Modules.MonoGame Dependencies MonoGame Usage public class MyDrawingSurface : DrawingSurface {     protected override RaiseDraw(DrawEventArgs args)     {         args.GraphicsDevice.Clear(Color.LightGreen);         base.RaiseDraw(args);     } } Output module Much like the output tool window from Visual Studio. Provides IOutput tool window NuGet package Gemini.Modules.Output Dependencies None Usage var output = IoC.Get<IOutput>(); output.AppendLine(""Started up""); PropertyGrid module Pretty much does what it says on the tin. It uses the PropertyGrid control from the Extended WPF Toolkit. Provides IPropertyGrid tool window NuGet package Gemini.Modules.PropertyGrid Dependencies Extended WPF Toolkit Usage var propertyGrid = IoC.Get<IPropertyGrid>(); propertyGrid.SelectedObject = myObject; Xna module Provides a number of utilities and controls for working with XNA content in WPF. In the screenshot above, the document on the left uses DrawingSurface, and the tool window on the right uses GraphicsDeviceControl. Note that the GraphicsDeviceControl is clipped correctly against its parent ScrollViewer bounds. Provides GraphicsDeviceService service that implements XNA's IGraphicsDeviceService ClippingHwndHost control that clips hosted Win32 content to a WPF control's bounds The Xna module includes 2 alternatives for hosting XNA content in WPF: DrawingSurface control that uses D3DImage as described here. GraphicsDeviceControl control that implements Nick Gravelyn's technique for hosting WPF content using an HwndHost, described here NuGet package Gemini.Modules.Xna Dependencies XNA 4.0 Usage Both DrawingSurface and GraphicsDeviceControl provide similar APIs, but they are subtly different. DrawingSurface works seamlessly with WPF mouse and keyboard input, but GraphicsDeviceControl routes mouse input through its own set of methods (RaiseHwndLButtonDown etc.). public class MyDrawingSurface : DrawingSurface {     protected override RaiseDraw(DrawEventArgs args)     {         args.GraphicsDevice.Clear(Color.LightGreen);         base.RaiseDraw(args);     } } public class MyGraphicsDeviceControl : GraphicsDeviceControl {     protected override void RaiseRenderXna(GraphicsDeviceEventArgs args)     {         args.GraphicsDevice.Clear(Color.LightGreen);         base.RaiseRenderXna(args);     } } Sample applications Gemini includes three sample applications: Gemini.Demo Showcases many of the available modules. The screenshot below shows the interactive script editor in action - as you type, the code will be compiled in real-time into a dynamic assembly and then executed in the same AppDomain. It also includes a very basic example of a filter designer, built on the GraphEditor module. Source code Gemini.Demo.MonoGame Showcases the MonoGame module. Source code Gemini.Demo.SharpDX Showcases the SharpDX module. Source code Gemini.Demo.Xna Showcases the Xna module. Source code What projects use Gemini? I've used Gemini on several of my own projects: Meshellator Rasterizr SlimShader coming soon... Development dependencies To build the XNA module and demo on your own machine, you'll need to install XNA 4.0 Game Studio. Acknowledgements Many of the original ideas, and much of the early code came from Rob Eisenberg, creator of the Caliburn Micro framework. I have extended and modified his code to integrate better with AvalonDock 2.0, which natively supports MVVM-style binding. I used the VS2010 theme from Edi. Gemini is not the only WPF framework for building IDE-like applications. Here are some others: SoapBox Core - source here, but I think this project might be dead. Wide - looks promising, and has a CodeProject article. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tgjones/gemini"	"IDE framework similar in concept to the Visual Studio Shell. Built on WPF, AvalonDock, and Caliburn Micro."	"true"
"Office"	"ExcelDna"	"https://github.com/Excel-DNA/ExcelDna"	"ExcelDna makes it easier to create and deploy Excel Add-Ins using C#, F# or VB.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"138"	"41"	"59"	"GitHub - Excel-DNA/ExcelDna: Excel-DNA - Free and easy .NET for Excel. This repository contains the core Excel-DNA library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 41 Star 138 Fork 59 Excel-DNA/ExcelDna Code Issues 25 Pull requests 1 Wiki Pulse Graphs Excel-DNA - Free and easy .NET for Excel. This repository contains the core Excel-DNA library. https://excel-dna.net 356 commits 1 branch 7 releases Fetching contributors C# 56.6% Assembly 29.9% C++ 11.9% PowerShell 0.6% Visual Basic 0.5% C 0.3% Batchfile 0.2% C# Assembly C++ PowerShell Visual Basic C Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.33.9 v0.33.8-rc2 v0.33.7-rc1 v0.33-b3 v0.33-b2 v0.33-b1 v0.32 Nothing to show New pull request Latest commit a2a4d25 May 5, 2016 govert Merge pull request #78 from kchen0723/master … Remove ExcelAsyncUtil obsolete method from samples Permalink Failed to load latest commit information. Build Add ExcelDnaPack.exe.config to NuGet package to allow running without… Mar 24, 2016 Distribution Remove ExcelAsyncUtil obsolete method May 4, 2016 Package Add ExcelDnaPack.exe.config to NuGet package to allow running without… Mar 24, 2016 Source Handle error from syncMacro Apr 22, 2016 .gitattributes Add .gitXXX configuration files Mar 21, 2015 .gitignore Add new VS cache file to .gitignore Mar 21, 2016 .mailmap Add .mailmap to root, to fix committers identities Sep 5, 2015 CONTRIBUTING.md Change to CLA assistant Sep 27, 2015 LICENSE.txt Fix zlib license formatting Aug 30, 2015 README.md Update build badge url Aug 30, 2015 README.md Excel-DNA - Free and easy .NET for Excel This repository contains the core Excel-DNA library. See the Excel-DNA home page and old CodePlex project pages for more details. Support is on the Excel-DNA Google group. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Excel-DNA/ExcelDna"	"ExcelDna makes it easier to create and deploy Excel Add-Ins using C#, F# or VB.NET"	"true"
"Office"	"ClosedXML"	"https://closedxml.codeplex.com/"	"ClosedXML makes it easier for developers to create Excel 2007/2010 files"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ClosedXML - The easy way to OpenXML - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In ClosedXML - The easy way to OpenXML home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe Project Description ClosedXML makes it easier for developers to create Excel 2007/2010 files. It provides a nice object oriented way to manipulate the files (similar to VBA) without dealing with the hassles of XML Documents. It can be used by any .NET language like C# and Visual Basic (VB). What can you do with this? ClosedXML allows you to create Excel 2007/2010 files without the Excel application. The typical example is creating Excel reports on a web server. If you've ever used the Microsoft Open XML Format SDK you know just how much code you have to write to get the same results as the following 4 lines of code.             var workbook = new XLWorkbook();             var worksheet = workbook.Worksheets.Add(""Sample Sheet"");             worksheet.Cell(""A1"").Value = ""Hello World!"";             workbook.SaveAs(""HelloWorld.xlsx"");  Something more elaborate: The Documentation page has an example of how to create the following table (Showcase) as well as many other examples:    Sponsors: E-iceblue is a community sponsor of ClosedXML. E-iceblue components enable developers to Open, Create, Modify, Convert, Print, View MS Word, Excel, PowerPoint, PDF documents.   Automated code refactorings for C#, VB.NET, ASP.NET & XAML work across languages Proud to use       Last edited Aug 18, 2014 at 3:59 AM by MDeLeon, version 58 download current ClosedXML 0.76.0 date Tue Dec 16, 2014 at 7:00 AM status Stable downloads 44,350 rating       23 ratings Review this release Most Helpful Reviews      This was exactly what I was looking for, and worked exactly as I expected it to the first time I wrote the code and compiled. Thanks!      Wow! After knocking my head against the wall with the open doc libs for a few hours i found this. Life is good again! View all reviews Ads by Developer Media activity downloads 1293 Days: 7 7 30 30 All All Details © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"ClosedXML makes it easier for developers to create Excel 2007/2010 files"	"true"
"Office"	"NPOI"	"http://npoi.codeplex.com/"	"This project is the.NET version of POI Java project at."	"null"	"null"	"null"	"null"	"null"	"http://poi.apache.org/"	"null"	"null"	"null"	"null"	"NPOI - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe .NET技术 QQ联盟群： 上海 343027179 （已转实践营） 北京 124527967 深圳 297128022 广州 550850466 西安 136569834 武汉 52997745 成都 136569750 天津 541104478 （周边城市请就近添加，谢谢）   Who are We Neuzilla is the studio behind NPOI. For detail, you can check http://blog.neuzilla.com/.     What's NPOI This project is the .NET version of POI Java project at http://poi.apache.org/. POI is an open source project which can help you read/write xls, doc, ppt files. It has a wide application.   For example, you can use it to a. generate a Excel report without Microsoft Office suite installed on your server and more efficient than call Microsoft Excel ActiveX at background; b. extract text from Office documents to help you implement full-text indexing feature (most of time this feature is used to create search engines). c. extract images from Office documents d. generate Excel sheets that contains formulas   Our Sponsor （赞助商）   E-iceblue is a community sponsor of NPOI. 提供中文技术支持 Don't forget to have a try on Free Spire.XLS     Donate NPOI 支付宝捐款账号: tonyqus@163.com Paypal: tonyqus@gmail.com     Advantage of NPOI a. It's totally free to use b. Cover most features of Excel (cell style, data format, formula and so on) c. Support xls, xlsx, docx. d. Designed to be interface-oriented (take a look at NPOI.SS namespace) e. Support not only export but also import f. .Net 2.0 based even for xlsx and docx (though we also support .NET 4.0) g. Successful cases from all over the world h. huge amout of basic examples i. No dependency on isolated storage   To get the latest code, please visit https://github.com/tonyqus/npoi.     Comments from NPOI users     Tutorial 中文教程 English Tutorial NPOI on SNS 中文 QQ群: 189925337 新浪微博: http://t.sina.com.cn/npoi 博客：http://blog.sina.com.cn/tonyqus   English NPOI User Group: http://www.linkedin.com/groups/NPOI-User-Group-6655065 Twitter: http://twitter.com/tonyqus  System Requirement VS2010 with .NET 4.0 runtime VS2005 or VS2008 with .NET 2.0 Runtime (SP1) vs2003 with .NET 1.1 Mono medium trust environment in ASP.NET       Extensions NPOI.CSS   Last edited Jul 9 at 6:13 AM by tonyqus, version 199 downloads Ads by Developer Media join us We needs someone who is familiar with OOXML or BIFF to develop NPOI. Sign in to join this project. Request To Join Project X Complete this form to send a request to become a member of this project. Enter any comments that you wish for the project coordinators to see when approving your request, for example what role you would like to have in the project. 250 characters left Browse other openings: BIFF C# OLE2 openxml activity downloads 1741 Days: 7 7 30 30 All All Details related projects EPPlus-Create advanced Excel spreadsheets on the server SuperSocket, an extensible socket server framework Toxy - .NET Text/Data Extraction Framework © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"This project is the.NET version of POI Java project at."	"true"
"Office"	"EPPlus"	"http://epplus.codeplex.com/"	"EPPlus is a.net library that reads and writes Excel 2007/2010 files using the Open Office Xml format (xlsx)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"EPPlus-Create advanced Excel spreadsheets on the server - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In EPPlus-Create advanced Excel spreadsheets on the server home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe Create advanced Excel 2007/2010 spreadsheets on the server EPPlus is a .net library that reads and writes Excel 2007/2010 files using the Open Office Xml format (xlsx).   EPPlus supports: Cell Ranges Cell styling (Border, Color, Fill, Font, Number, Alignments) Charts Pictures Shapes Comments Tables Protection Encryption Pivot tables Data validation Conditional formatting VBA Formula calculation Many more... Overview This project started with the source from ExcelPackage. It was a great project to start from. It had the basic functionality needed to read and write a spreadsheet. Advantages over other: Totally rewritten using dictionaries Can now load 50 000 cells in seconds Complete integration with .NET Donate to EPPlus   Examples To see how this works let’s do a short walkthrough of sample 6 that creates a report on a directory in the file system.  The spreadsheet is created without any template.  First sheet is a list of subdirectories and files, with an icon, name, size, and dates. The second sheet contains some statistics... Content sheet Statistics sheet EPPlus also supports enumeration of cells.... EPPlus and Linq  Heres an example how you can use EPPlus in a webapplication... Web Applications  Here's a few screenshots from the sample project... Screenshots   License The project is licensed under the GNU Library General Public License (LGPL). Last edited Jan 15, 2015 at 4:32 AM by swmal, version 61 download current EPPlus 4.1 date Thu Jul 14, 2016 at 7:00 AM status Stable downloads 324 rating       1 rating Review this release Ads by Developer Media activity downloads 1706 Days: 7 7 30 30 All All Details related projects NPOI © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"EPPlus is a.net library that reads and writes Excel 2007/2010 files using the Open Office Xml format (xlsx)."	"true"
"Office"	"Open XML SDK"	"https://github.com/officedev/open-xml-sdk"	"The Open XML SDK provides open-source libraries for working with Open XML Documents (DOCX, XLSX, and PPTX)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"966"	"163"	"165"	"GitHub - OfficeDev/Open-XML-SDK: Open XML SDK by Microsoft Open Technologies, Inc. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 163 Star 966 Fork 165 OfficeDev/Open-XML-SDK Code Issues 52 Pull requests 4 Pulse Graphs Open XML SDK by Microsoft Open Technologies, Inc. http://msopentech.com 98 commits 5 branches 3 releases 6 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: vNext Switch branches/tags Branches Tags Office2016 SystemIOPackaging development master vNext Nothing to show v2.5.1 v2.5 V2.6 Nothing to show New pull request Latest commit 515cbde Mar 2, 2016 EricWhiteDev Merge pull request #78 from Numpsy/vNext … fix case sensitivity issue in tests Permalink Failed to load latest commit information. .nuget Enable AppVeyor and Travis CI Jul 20, 2015 DocumentFormat.OpenXml.Tests fix case sensitivity issue in tests Mar 1, 2016 DocumentFormat.OpenXml.WB.Tests fix case sensitivity issue in tests Mar 1, 2016 DocumentFormat.OpenXml.WB New XUnit tests Dec 1, 2015 DocumentFormat.OpenXml New XUnit tests Dec 1, 2015 System.IO.Packaging.Tests New XUnit tests Jan 15, 2016 System.IO.Packaging Add and fix resources and fix CLS compliance warning Jul 27, 2015 TestDataStorage New XUnit tests Jan 15, 2016 TestFiles New XUnit tests Jan 15, 2016 TestUtil New XUnit tests Jan 15, 2016 .gitattributes Re-add Makefile-Linux-Mono so that it is in the object repo as text p… Jul 16, 2015 .gitignore Enable AppVeyor and Travis CI Jul 20, 2015 .travis.yml Enable AppVeyor and Travis CI Jul 20, 2015 Clean.ps1 New XUnit tests Jan 15, 2016 LICENSE.txt Add BOM to file - we want BOMs on every file for consistence Jan 16, 2015 Open-XML-SDK.sln New XUnit tests Jan 15, 2016 README.md Update README.md to inform about the Office2016 branch Feb 12, 2016 RunXUnitTests.ps1 New XUnit tests Jan 15, 2016 appveyor.yml Enable AppVeyor and Travis CI Jul 20, 2015 build.open-xml-sdk.cmd Enable AppVeyor and Travis CI Jul 20, 2015 build.open-xml-sdk.sh Add Mono build script Jul 20, 2015 README.md Open-XML-SDK Release Version 2.6.1 News: The Office2016 branch on this repo contains a preview of the Open-Xml-Sdk v3.0, which supports the Office 2016 extensions in the file format.  The biggest change to the markup was the introduction of the ExtendedChartPart, which support the new chart types, such as Waterfall, Box and Whisker, and Sunburst.  You can specify FileFormatVersions.Office2016 to validate this markup.  This version of the SDK also supports using the strongly-typed OM to access the markup in the new parts.  We will merge the Office2016 branch into vNext at some point in the future, after receiving feedback.  The Open XML SDK provides open-source libraries for working with Open XML Documents (DOCX, XLSX, and PPTX). It supports scenarios such as: High-performance generation of word-processing documents, spreadsheets, and presentations. Populating content in DOCX files from an XML data source. Splitting up (shredding) a DOCX or PPTX file into multiple files, and combining multiple DOCX / PPTX files into a single file. High fidelity conversion of DOCX => HTML/CSS and HTML/CSS => DOCX. Extraction of data from XLSX. Searching and replacing content in DOCX / PPTX using regular expressions. Updating cached data and embedded spreadsheets for charts in DOCX / PPTX. Document modification, such as removing tracked revisions or removing unacceptable content from documents. Open-Xml-PowerTools provides example code and guidance for implementing many of the above important Open XML scenarios. Be sure to check it out before re-inventing your own solutions. The Open-Xml-Sdk relies on the System.IO.Packaging namespace. There is an implementation of System.IO.Packaging in the WindowsBase assembly, and there is a new, open source implementation of System.IO.Packaging that is included with version 2.6 of the Open-Xml-Sdk. Because of this, there are six projects in the Visual Studio solution. This screen-cast describes the six projects, and explains the purpose behind each. Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information. Portions of this project are licensed under the MIT license. See MIT-License.txt in the project root for license information. News The most recent release of the Open XML SDK is Version 2.6.1, which includes a total of 1333 XUnit tests. We are also happy to announce the release of Open-Xml-PowerTools on GitHub. Open-Xml-PowerTools provides example code and guidance for implementing a wide range of Open XML scenarios. You can find PowerTools for Open XML, which previously lived at PowerTools.CodePlex.com at github.com/OfficeDev/Open-Xml-PowerTools. Change Log Version 2.6.1 : January 15, 2016 Added hundreds of XUnit tests. There are now a total of 1333 tests. They take about 20 minutes to run, so be patient. Version 2.6.0 : June 29, 2015 The big feature in 2.6 is the inclusion of a replacement for System.IO.Packaging, which has a serious bug that causes it (albeit rarely and in specific circumstances) to throw exceptions (ObjectDisposedException and NullReferenceException). You can find out more about this bug and whether it affects you in the blog post that announces the release of the new System.IO.Packaging. Going forward, the Open XML SDK will be based on this new implementation of System.IO.Packaging. Documentation The functionality of the specific classes in Open XML SDK Version 2.6.0 is the same as for version 2.5, therefore the documentation available on MSDN is still accurate. Open XML SDK 2.5 for Office In addition to open sourcing of the SDK, Microsoft has opened up the conceptual documentation for public review / contributions. A copy of the documentation is now in GitHub for you to edit and review. Build Instructions Note: for this first release, you must have some version of Visual Studio installed. Visual Studio 2015 Community Edition will work just fine: https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs To build the Open XML SDK: Clone the repo at https://github.com/OfficeDev/Open-XML-SDK Open the solution using Visual Studio 2013 or 2015. Community Edition of VS2015 works just fine. Build the solution (using either Debug or Release configuration) Run the Xunit tests to verify the installation If you want to use a command line approach: Start a Visual Studio command prompt, and change into the directory that contains the repo Use MSBUILD to build the SDK (C:> MSBUILD Open-Xml-Sdk.sln) You can also use MSBUILD to build the individual projects. To use the SDK: In your program that uses the Open XML SDK, add references to the newly built libraries in DocumentFormat.OpenXml/bin/Debug (or in DocumentFormat.OpenXml/bin/Release) Previously, we were using PowerShell to generate a new version number for each build. This is no longer required, and it is more convenient to build the SDK using MSBUILD, therefore I have removed the instructions for building using the PowerShell script. Building with Mono First, ensure you have mono installed in a manner appropriate to your linux/unix distribution. make -f Makefile-Linux-Mono build Find libraries in the folder: ./build/OpenXmlSdkLib Screen-Cast: Using the Open XML SDK on Linux using Mono Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/officedev/open-xml-sdk"	"The Open XML SDK provides open-source libraries for working with Open XML Documents (DOCX, XLSX, and PPTX)."	"true"
"ORM"	"Entity Framework"	"https://github.com/aspnet/EntityFramework"	"Object-relational mapper that enables.NET developers to work with relational data using domain-specific objects"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3508"	"730"	"1052"	"GitHub - aspnet/EntityFramework: Entity Framework Core is a lightweight and extensible version of the popular Entity Framework data access technology Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 730 Star 3,508 Fork 1,052 aspnet/EntityFramework Code Issues 474 Pull requests 4 Wiki Pulse Graphs Entity Framework Core is a lightweight and extensible version of the popular Entity Framework data access technology https://docs.efproject.net 3,100 commits 37 branches 14 releases 70 contributors C# 99.7% Other 0.3% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags 160630-lajones_5593_SeparateSequenceTest_01 BadOrders0705 CallTheCops0615 CommandLoggin0630 DA0624 DarkMaster0706 Flappy0629 Format0629 FuncyFind0714 GetBack0608 Glob5765 GoToUni0628 HashBrowns0614 Inconceivable0630 Linbux0712 LoadMe0712 NoNoNo0608 NonVar0706 NummyNummy0613 PropInfo0706 QTB0620 Splot0629 TM0627 TellMeMore0623 UpAndOver0711 ValGen0630 WetNose0706 dev feature/ef.exe fix5738_draft fix5738_take1 fix5738_take2 fix5738_wip hotfix-1.0.1 master productversion release Nothing to show 7.0.0-rc1 7.0.0-beta8 7.0.0-beta7 7.0.0-beta6 7.0.0-beta5 7.0.0-beta4 7.0.0-beta3 7.0.0-beta2 7.0.0-beta1 7.0.0-alpha4 7.0.0-alpha3 7.0.0-alpha2 1.0.0 1.0.0-rc2 Nothing to show New pull request Latest commit db35ace Jul 15, 2016 anpete Fix warnings in InMemoryQueryModelVisitor Permalink Failed to load latest commit information. .github Add issue and PR templates May 24, 2016 src Fix warnings in InMemoryQueryModelVisitor Jul 15, 2016 test Update database model factory to allow running with existing collection Jul 15, 2016 tools Fixup csproj to handle *.Sources packages Jun 9, 2016 .gitattributes Force LF line-endings in *.sh files Nov 24, 2015 .gitignore Fix #5640 - Only block composed async queries at the top level. Jul 5, 2016 .travis.yml Remove Microbenchmarks projects Jun 24, 2016 CONTRIBUTING.md Update Home master -> Home dev May 12, 2015 EntityFramework-xproj.sln Remove Microbenchmarks projects Jul 6, 2016 EntityFramework.sln Remove Microbenchmarks projects Jul 6, 2016 EntityFramework.sln.DotSettings Fixes #5333 - More generic solution for severity level of warnings (t… May 30, 2016 LICENSE.txt Update LICENSE.txt and license header on files. May 1, 2015 NuGet.config Revive the *.csproj solution Mar 1, 2016 NuGetPackageVerifier.json Rename Microsoft.EntityFrameworkCore{.Tools.Core} => {.Design.Core} a… Jun 14, 2016 README.md Update README.md Jun 27, 2016 appveyor.yml Remove Microbenchmarks projects Jul 6, 2016 build.cmd Return the error code from build.cmd Feb 28, 2016 build.ps1 Update the build scripts to the latest version Mar 7, 2016 build.sh Update the build scripts to the latest version Mar 8, 2016 global.json Add an *.xproj solution for dogfooding Mar 3, 2016 makefile.shade Fix bug in build script Jun 22, 2016 README.md Entity Framework Core Documentation on using EF Core is available at https://docs.efproject.net. EF Core here, EF6 on CodePlex This project is for Entity Framework Core. Entity Framework 6.x is still under active development on CodePlex at http://entityframework.codeplex.com/. What is EF Core? Entity Framework (EF) Core is a lightweight and extensible version of the popular Entity Framework data access technology. EF Core is an object-relational mapper (O/RM) that enables .NET developers to work with a database using .NET objects. It eliminates the need for most of the data-access code that developers usually need to write. Database Providers The source for SQL Server, SQLite, and InMemory providers are included in this project. Additional providers are available. For a complete list, see https://docs.efproject.net/en/latest/providers/. Provider Package name Stable (master branch) Nightly (dev branch) SQL Server Microsoft.EntityFrameworkCore.SqlServer SQLite Microsoft.EntityFrameworkCore.SQLite InMemory (for testing) Microsoft.EntityFrameworkCore.InMemory Roadmap For more details on the release schedule, see the Roadmap article in the wiki. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aspnet/EntityFramework"	"Object-relational mapper that enables.NET developers to work with relational data using domain-specific objects"	"true"
"ORM"	"BL Toolkit"	"https://github.com/igor-tkachev/bltoolkit"	"Business Logic Toolkit for.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"224"	"46"	"102"	"GitHub - igor-tkachev/bltoolkit: Business Logic Toolkit for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 46 Star 224 Fork 102 igor-tkachev/bltoolkit Code Issues 51 Pull requests 2 Wiki Pulse Graphs Business Logic Toolkit for .NET 2,740 commits 4 branches 24 releases 33 contributors C# 94.8% HTML 1.5% ASP 0.9% XSLT 0.7% Visual Basic 0.6% SQLPL 0.6% Other 0.9% C# HTML ASP XSLT Visual Basic SQLPL Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev fb master nugetUpdate Nothing to show Version.4.1.21 Version.4.1.20 Version.4.1.12 Version.4.1.11 Version.4.1.10 Version.4.1.9 Version.4.1.8.3 Version.4.1.8.2 Version.4.1.8.1 Version.4.1.8 Version.4.1.7 Version.4.1.6 Version.4.1.5 Version.4.1.4 Version.4.1.3 Version.4.1.2 Version.4.1.1 Version.4.1 Version.4.0 Release.4.2 RFD OldTests FW2.0-3.5 FW1.1-2.0 Nothing to show New pull request Latest commit ff59d7e May 21, 2016 igor-tkachev Update README.md Permalink Failed to load latest commit information. Data clean up Jun 28, 2015 DataProviders dotConnect.Express.for.Oracle.8.5.602.nupkg Mar 3, 2016 Demo lost reference Aug 26, 2015 Documentation Move BLToolkit one level up Dec 19, 2007 Examples Updated NUnit nuget. Feb 2, 2015 Extensions/JointureAddOn warnings Jun 27, 2015 HowTo Merge remote-tracking branch 'origin/dev_providerVersionResolve' Feb 2, 2015 Mono Fixed mono isuue. Feb 10, 2012 NuGet Version 4.3.4 Mar 3, 2016 Redist fb tests Jun 25, 2015 Source Version 4.3.4 Mar 3, 2016 Tools nuget packages update Aug 26, 2015 UnitTests dotConnect.Express.for.Oracle.8.5.602.nupkg Mar 3, 2016 packages dotConnect.Express.for.Oracle.8.5.602.nupkg Mar 3, 2016 .editorconfig added EditorConfig configuration file for source files formatting Feb 13, 2013 .gitignore Updated nugets. Jul 10, 2014 BLToolkit.2008.6.0.ReSharper Fixed enum conversion bug. Aug 9, 2011 BLToolkit.2008.6.1.ReSharper Updated NuGet packages. Feb 10, 2012 BLToolkit.2008.sln Fixed FW 3. Jan 30, 2013 BLToolkit.2010.sln Added support for SqlServer 2000. Fixed #180. Mar 14, 2013 BLToolkit.2012.sln changing build configuration for ci Jun 28, 2015 README.md Update README.md May 21, 2016 Snapshot.cmd Merge branch 'master' into LinqRefactoring Mar 28, 2011 Snapshot.ps1 New BLToolkit.Data project. Oct 25, 2011 README.md Business Logic Toolkit for .NET Build status Master status Business Logic Toolkit is a set of components to simplify .NET application development. BLToolkit is provided as source code that you can use ""as is"" or customize for your applications. It is written in C# and compatible with .NET Frameworks 3.5 and 4.0, Silverlight 4, and Mono. See wiki for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/igor-tkachev/bltoolkit"	"Business Logic Toolkit for.NET"	"true"
"ORM"	"Dapper"	"https://github.com/StackExchange/dapper-dot-net"	"A simple object mapper for.NET by"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4642"	"649"	"1423"	"GitHub - StackExchange/dapper-dot-net: Dapper - a simple object mapper for .Net Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 649 Star 4,642 Fork 1,423 StackExchange/dapper-dot-net Code Issues 124 Pull requests 12 Pulse Graphs Dapper - a simple object mapper for .Net 1,124 commits 9 branches 50 releases 98 contributors C# 99.5% Other 0.5% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags DapperTable IgnoreDuplicatedCols Issue281 QueryFirstOrDefault TimeSpanParsing UseSingleResultSingleRow gh-pages master netstandard Nothing to show 1.50.0-beta4 1.50 1.50-rc3 1.50-rc2.1 1.50-rc2 1.50-rc2b 1.50-rc2a 1.50-beta9 1.50-beta8 1.50-beta7 1.50-beta6 1.50-beta5 1.50-beta3 1.50-beta2 1.50-beta1 1.42 1.41-beta5 1.41-beta4 1.41-beta 1.41-alpha 1.40 1.39 1.38 1.37 1.36 1.35 1.34 1.33 1.32 1.31 1.30 1.29 1.28 1.27 1.26 1.25 1.24 1.23 1.22 1.21 1.20 1.13 1.12.1 1.12 1.11 1.10 1.9 1.8 1.6 1.5 Nothing to show New pull request Latest commit 1690df1 Jul 8, 2016 mgravell Rename DataTable=>DapperTable; fix #549 Permalink Failed to load latest commit information. .nuget Update 3rd party libs; package for 1.39 Mar 18, 2015 Dapper.Contrib Merge pull request #538 from cremor/fix-syntax-errors Jun 29, 2016 Dapper.EntityFramework.StrongName Dapper.EF.StrongName: should snk for *all* builds! Jun 15, 2016 Dapper.EntityFramework This .0 addition happens automatically...make it explicit instead. May 24, 2016 Dapper.Rainbow Merge pull request #538 from cremor/fix-syntax-errors Jun 29, 2016 Dapper.SqlBuilder .Net Core 1.0 RTM update Jun 28, 2016 Dapper.StrongName 1.50.1 deploy Jul 8, 2016 Dapper.Tests.Contrib Merge pull request #538 from cremor/fix-syntax-errors Jun 29, 2016 Dapper.Tests .Net Core 1.0 RTM update Jun 28, 2016 Dapper Rename DataTable=>DapperTable; fix #549 Jul 8, 2016 tools .Net Core 1.0 RTM update Jun 28, 2016 .gitattributes .gitattributes: * text=auto Oct 15, 2015 .gitignore Update .gitgnore for build pathing Apr 17, 2016 Dapper.sln This .0 addition happens automatically...make it explicit instead. May 24, 2016 Dapper.sln.DotSettings Core: peripheral cleanup Nov 24, 2015 Dapper.snk Added Dapper.StrongName Sep 29, 2014 License.txt added license and github info Apr 14, 2011 NuGet.Config net451 test prep (not quite ready - SQL Geo and interop failing) May 23, 2016 Readme.md Readme.md: update performance tests link Feb 20, 2016 appveyor.yml It's time for appveyor.yml May 19, 2016 build.ps1 Switch version suffix to be a build parameter May 24, 2016 build.sh Bash build: fix test runner on OS X Apr 17, 2016 game git blame game May 24, 2016 global.json .Net Core 1.0 RTM update Jun 28, 2016 Readme.md Dapper - a simple object mapper for .Net Release Notes link Features Dapper is a NuGet library that you can add in to your project that will extend your IDbConnection interface. It provides 3 helpers: Execute a query and map the results to a strongly typed List Note: all extension methods assume the connection is already open, they will fail if the connection is closed. public static IEnumerable<T> Query<T>(this IDbConnection cnn, string sql, object param = null, SqlTransaction transaction = null, bool buffered = true) Example usage: public class Dog {     public int? Age { get; set; }     public Guid Id { get; set; }     public string Name { get; set; }     public float? Weight { get; set; }      public int IgnoredProperty { get { return 1; } } }              var guid = Guid.NewGuid(); var dog = connection.Query<Dog>(""select Age = @Age, Id = @Id"", new { Age = (int?)null, Id = guid });  dog.Count()     .IsEqualTo(1);  dog.First().Age     .IsNull();  dog.First().Id     .IsEqualTo(guid); Execute a query and map it to a list of dynamic objects public static IEnumerable<dynamic> Query (this IDbConnection cnn, string sql, object param = null, SqlTransaction transaction = null, bool buffered = true) This method will execute SQL and return a dynamic list. Example usage: var rows = connection.Query(""select 1 A, 2 B union all select 3, 4"");  ((int)rows[0].A)    .IsEqualTo(1);  ((int)rows[0].B)    .IsEqualTo(2);  ((int)rows[1].A)    .IsEqualTo(3);  ((int)rows[1].B)     .IsEqualTo(4); Execute a Command that returns no results public static int Execute(this IDbConnection cnn, string sql, object param = null, SqlTransaction transaction = null) Example usage: connection.Execute(@""   set nocount on    create table #t(i int)    set nocount off    insert #t    select @a a union all select @b    set nocount on    drop table #t"", new {a=1, b=2 })    .IsEqualTo(2); Execute a Command multiple times The same signature also allows you to conveniently and efficiently execute a command multiple times (for example to bulk-load data) Example usage: connection.Execute(@""insert MyTable(colA, colB) values (@a, @b)"",     new[] { new { a=1, b=1 }, new { a=2, b=2 }, new { a=3, b=3 } }   ).IsEqualTo(3); // 3 rows inserted: ""1,1"", ""2,2"" and ""3,3"" This works for any parameter that implements IEnumerable for some T. Performance A key feature of Dapper is performance. The following metrics show how long it takes to execute 500 SELECT statements against a DB and map the data returned to objects. The performance tests are broken in to 3 lists: POCO serialization for frameworks that support pulling static typed objects from the DB. Using raw SQL. Dynamic serialization for frameworks that support returning dynamic lists of objects. Typical framework usage. Often typical framework usage differs from the optimal usage performance wise. Often it will not involve writing SQL. Performance of SELECT mapping over 500 iterations - POCO serialization Method Duration Remarks Hand coded (using a SqlDataReader) 47ms Can be faster Dapper ExecuteMapperQuery 49ms ServiceStack.OrmLite (QueryById) 50ms PetaPoco 52ms BLToolkit 80ms SubSonic CodingHorror 107ms NHibernate SQL 104ms Linq 2 SQL ExecuteQuery 181ms Entity framework ExecuteStoreQuery 631ms Performance of SELECT mapping over 500 iterations - dynamic serialization Method Duration Remarks Dapper ExecuteMapperQuery (dynamic) 48ms   Massive 52ms Simple.Data 95ms Performance of SELECT mapping over 500 iterations - typical usage Method Duration Remarks Linq 2 SQL CompiledQuery 81ms Not super typical involves complex code NHibernate HQL 118ms   Linq 2 SQL 559ms   Entity framework 859ms   SubSonic ActiveRecord.SingleOrDefault 3619ms   Performance benchmarks are available here. Feel free to submit patches that include other ORMs - when running benchmarks, be sure to compile in Release and not attach a debugger (ctrl F5). Alternatively, you might prefer Frans Bouma's RawDataAccessBencher test suite. Parameterized queries Parameters are passed in as anonymous classes. This allow you to name your parameters easily and gives you the ability to simply cut-and-paste SQL snippets and run them in Query analyzer. new {A = 1, B = ""b""} // A will be mapped to the param @A, B to the param @B List Support Dapper allow you to pass in IEnumerable and will automatically parameterize your query. For example: connection.Query<int>(""select * from (select 1 as Id union all select 2 union all select 3) as X where Id in @Ids"", new { Ids = new int[] { 1, 2, 3 }); Will be translated to: select * from (select 1 as Id union all select 2 union all select 3) as X where Id in (@Ids1, @Ids2, @Ids3)"" // @Ids1 = 1 , @Ids2 = 2 , @Ids2 = 3 Buffered vs Unbuffered readers Dapper's default behavior is to execute your sql and buffer the entire reader on return. This is ideal in most cases as it minimizes shared locks in the db and cuts down on db network time. However when executing huge queries you may need to minimize memory footprint and only load objects as needed. To do so pass, buffered: false into the Query method. Multi Mapping Dapper allows you to map a single row to multiple objects. This is a key feature if you want to avoid extraneous querying and eager load associations. Example: var sql =  @""select * from #Posts p  left join #Users u on u.Id = p.OwnerId  Order by p.Id"";  var data = connection.Query<Post, User, Post>(sql, (post, user) => { post.Owner = user; return post;}); var post = data.First();  post.Content.IsEqualTo(""Sams Post1""); post.Id.IsEqualTo(1); post.Owner.Name.IsEqualTo(""Sam""); post.Owner.Id.IsEqualTo(99); important note Dapper assumes your Id columns are named ""Id"" or ""id"", if your primary key is different or you would like to split the wide row at point other than ""Id"", use the optional 'splitOn' parameter. Multiple Results Dapper allows you to process multiple result grids in a single query. Example: var sql =  @"" select * from Customers where CustomerId = @id select * from Orders where CustomerId = @id select * from Returns where CustomerId = @id"";  using (var multi = connection.QueryMultiple(sql, new {id=selectedId})) {    var customer = multi.Read<Customer>().Single();    var orders = multi.Read<Order>().ToList();    var returns = multi.Read<Return>().ToList();    ... } Stored Procedures Dapper fully supports stored procs: var user = cnn.Query<User>(""spGetUser"", new {Id = 1},          commandType: CommandType.StoredProcedure).SingleOrDefault(); If you want something more fancy, you can do: var p = new DynamicParameters(); p.Add(""@a"", 11); p.Add(""@b"", dbType: DbType.Int32, direction: ParameterDirection.Output); p.Add(""@c"", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue);  cnn.Execute(""spMagicProc"", p, commandType: CommandType.StoredProcedure);   int b = p.Get<int>(""@b""); int c = p.Get<int>(""@c""); Ansi Strings and varchar Dapper supports varchar params, if you are executing a where clause on a varchar column using a param be sure to pass it in this way: Query<Thing>(""select * from Thing where Name = @Name"", new {Name = new DbString { Value = ""abcde"", IsFixedLength = true, Length = 10, IsAnsi = true }); On SQL Server it is crucial to use the unicode when querying unicode and ansi when querying non unicode. Limitations and caveats Dapper caches information about every query it runs, this allow it to materialize objects quickly and process parameters quickly. The current implementation caches this information in a ConcurrentDictionary object. The objects it stores are never flushed. If you are generating SQL strings on the fly without using parameters it is possible you will hit memory issues. We may convert the dictionaries to an LRU Cache. Dapper's simplicity means that many feature that ORMs ship with are stripped out, there is no identity map, there are no helpers for update / select and so on. Dapper does not manage your connection's lifecycle, it assumes the connection it gets is open AND has no existing datareaders enumerating (unless MARS is enabled) Will Dapper work with my DB provider? Dapper has no DB specific implementation details, it works across all .NET ADO providers including SQLite, SQL CE, Firebird, Oracle, MySQL, PostgreSQL and SQL Server. Do you have a comprehensive list of examples? Dapper has a comprehensive test suite in the test project Who is using this? Dapper is in production use at: Stack Overflow, helpdesk (if you would like to be listed here let me know) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/StackExchange/dapper-dot-net"	"A simple object mapper for.NET by"	"true"
"ORM"	"StackExchange"	"http://stackexchange.github.io/"	"A simple object mapper for.NET by"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Stack Exchange OSS Stack Exchange Stack Exchange Open Source Git Repos: Dapper MiniProfiler Exceptional Sigil Jil Opserver Bosun BlackBox Data Explorer StackExchange.Redis StackID PageDown StackExchange.Precompilation Hg Repos: MarkdownSharp This site is for hosting git-based open-source projects initially started by Stack Exchange. site design / logo © 2014 stack exchange inc"	"null"	"null"	"A simple object mapper for.NET by"	"true"
"ORM"	"Dapper Extensions"	"https://github.com/tmsmith/Dapper-Extensions"	"Small library that complements Dapper by adding basic CRUD operations (Get, Insert, Update, Delete) for your POCOs"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"513"	"67"	"207"	"GitHub - tmsmith/Dapper-Extensions: Dapper Extensions is a small library that complements Dapper by adding basic CRUD operations (Get, Insert, Update, Delete) for your POCOs. For more advanced querying scenarios, Dapper Extensions provides a predicate system. The goal of this library is to keep your POCOs pure by not requiring any attributes or base class inheritance. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 67 Star 513 Fork 207 tmsmith/Dapper-Extensions Code Issues 32 Pull requests 18 Wiki Pulse Graphs Dapper Extensions is a small library that complements Dapper by adding basic CRUD operations (Get, Insert, Update, Delete) for your POCOs. For more advanced querying scenarios, Dapper Extensions provides a predicate system. The goal of this library is to keep your POCOs pure by not requiring any attributes or base class inheritance. 223 commits 3 branches 1 release 7 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags MaxLengthValidator develop master Nothing to show v1.4 Nothing to show New pull request Latest commit 314793a Aug 5, 2014 tmsmith package 1.4.4 Permalink Failed to load latest commit information. .nuget added Database class to allow connection using multiple dialects Nov 27, 2012 DapperExtensions.Test.Entities added ability to define external assemblies to search for maps. Jul 5, 2012 DapperExtensions.Test.Maps added ability to define external assemblies to search for maps. Jul 5, 2012 DapperExtensions.Test.SQLite merge in Sqlite Dialect from danielcrenna Oct 1, 2012 DapperExtensions.Test added GetSet method Sep 19, 2013 DapperExtensions package 1.4.4 Aug 5, 2014 nuget package 1.4.4 Aug 5, 2014 packages added postgresql dialect. upgraded to latest dapper Aug 6, 2013 .gitignore updated .gitignore Jan 12, 2012 DapperExtensions.sln added postgresql dialect. upgraded to latest dapper Aug 6, 2013 DapperExtensions.sln.DotSettings updated version and nuget package Mar 19, 2013 readme.md Update readme.md Mar 20, 2012 readme.md Introduction Dapper Extensions is a small library that complements Dapper by adding basic CRUD operations (Get, Insert, Update, Delete) for your POCOs. For more advanced querying scenarios, Dapper Extensions provides a predicate system. The goal of this library is to keep your POCOs pure by not requiring any attributes or base class inheritance. Customized mappings are achieved through ClassMapper. Important: This library is a separate effort from Dapper.Contrib (a sub-system of the Dapper project). Features Zero configuration out of the box. Automatic mapping of POCOs for Get, Insert, Update, and Delete operations. GetList, Count methods for more advanced scenarios. GetPage for returning paged result sets. Automatic support for Guid and Integer primary keys (Includes manual support for other key types). Pure POCOs through use of ClassMapper (Attribute Free!). Customized entity-table mapping through the use of ClassMapper. Composite Primary Key support. Singular and Pluralized table name support (Singular by default). Easy-to-use Predicate System for more advanced scenarios. Properly escapes table/column names in generated SQL (Ex: SELECT [FirstName] FROM [Users] WHERE [Users].[UserId] = @UserId_0) Unit test coverage (150+ Unit Tests) Naming Conventions POCO names should match the table name in the database. Pluralized table names are supported through the PlurizedAutoClassMapper. POCO property names should match each column name in the table. By convention, the primary key should be named Id. Using another name is supported through custom mappings. Installation For more information, please view our Getting Started guide. http://nuget.org/List/Packages/DapperExtensions PM> Install-Package DapperExtensions  Examples The following examples will use a Person POCO defined as: public class Person {     public int Id { get; set; }     public string FirstName { get; set; }     public string LastName { get; set; }     public bool Active { get; set; }     public DateTime DateCreated { get; set; } } Get Operation using (SqlConnection cn = new SqlConnection(_connectionString)) {     cn.Open();     int personId = 1;     Person person = cn.Get<Person>(personId);        cn.Close(); } Simple Insert Operation using (SqlConnection cn = new SqlConnection(_connectionString)) {     cn.Open();     Person person = new Person { FirstName = ""Foo"", LastName = ""Bar"" };     int id = cn.Insert(person);     cn.Close(); } Advanced Insert Operation (Composite Key) public class Car {     public int ModelId { get; set; }     public int Year { get; set; }     public string Color { get; set; } }  ...  using (SqlConnection cn = new SqlConnection(_connectionString)) {     cn.Open();     Car car = new Car { Color = ""Red"" };     var multiKey = cn.Insert(car);     cn.Close();      int modelId = multiKey.ModelId;     int year = multiKey.Year; } Simple Update Operation using (SqlConnection cn = new SqlConnection(_connectionString)) {     cn.Open();     int personId = 1;     Person person = _connection.Get<Person>(personId);     person.LastName = ""Baz"";     cn.Update(person);     cn.Close(); } Simple Delete Operation using (SqlConnection cn = new SqlConnection(_connectionString)) {     cn.Open();     Person person = _connection.Get<Person>(1);     cn.Delete(person);     cn.Close(); } GetList Operation (with Predicates) using (SqlConnection cn = new SqlConnection(_connectionString)) {     cn.Open();     var predicate = Predicates.Field<Person>(f => f.Active, Operator.Eq, true);     IEnumerable<Person> list = cn.GetList<Person>(predicate);     cn.Close(); } Generated SQL SELECT     [Person].[Id]  , [Person].[FirstName]  , [Person].[LastName]  , [Person].[Active]  , [Person].[DateCreated]  FROM [Person]  WHERE ([Person].[Active] = @Active_0)  More information on predicates can be found in our wiki. Count Operation (with Predicates) using (SqlConnection cn = new SqlConnection(_connectionString)) {     cn.Open();     var predicate = Predicates.Field<Person>(f => f.DateCreated, Operator.Lt, DateTime.UtcNow.AddDays(-5));     int count = cn.Count<Person>(predicate);     cn.Close(); }            Generated SQL SELECT     COUNT(*) Total  FROM [Person]  WHERE ([Person].[DateCreated] < @DateCreated_0)  More information on predicates can be found in our wiki. License Copyright 2011 Thad Smith, Page Brooks and contributors Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tmsmith/Dapper-Extensions"	"Small library that complements Dapper by adding basic CRUD operations (Get, Insert, Update, Delete) for your POCOs"	"true"
"ORM"	"NHibernate"	"https://github.com/nhibernate"	"NHibernate Object Relational Mapper"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"NHibernate · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization NHibernate http://nhibernate.info Repositories People 9 Filters Sources Forks C# 972 632 nhibernate-core NHibernate Object Relational Mapper Updated Jul 13, 2016 C# 19 33 NHibernate.Spatial NHibernate.Spatial is a library of spatial extensions for NHibernate, and allows you to connect NHibernate to a spatially enabled database and manipulate geometries in Linq or HQL using NetTopologySuite, providing you with a fully integrated GIS programming experience. Updated Jul 13, 2016 HTML 3 8 nhibernate.github.io Updated Jul 2, 2016 C# 1 4 NHibernate.JetDriver Jet Driver for NHibernate Updated Mar 21, 2016 C# 5 21 NHibernate-Validator forked from darioquintana/NHibernate-Validator NHibernate Validator is a powerful and extensible framework to validate objects using the .Net Platform Updated Mar 3, 2016 C# 0 1 NHibernate.Oracle Updated Jan 18, 2016 C# 16 14 NHibernate-Search NHibernate-Search Updated Dec 28, 2015 C# 76 45 NHibernate.AspNet.Identity ASP.NET Identity Provider for NHibernate Updated Nov 30, 2015 C# 32 12 iesi.collections Updated Aug 30, 2015 C# 2 3 NHibernate.ProxyGenerators Updated Aug 30, 2015 C# 5 5 NHibernate.Mapping.Attributes With NHibernate.Mapping.Attributes, you can use .NET attributes to decorate your entities and these attributes will be used to generate the mapping information. So you will no longer have to bother with these nasty XML files ;). Updated Aug 30, 2015 C# 9 5 Visual-NHibernate Updated Aug 30, 2015 C# 9 9 NHibernate-Caches Updated Oct 12, 2014 C# 15 19 nhibernate-core-testcase forked from stuartcarnie/nhibernate-test Simple test framework to submit bugs for NHibernate 3.2+ Updated Jun 2, 2013 C# 6 647 fluent-nhibernate-unofficial forked from jagregory/fluent-nhibernate Fluent NHibernate! Updated May 12, 2013 9 People Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nhibernate"	"NHibernate Object Relational Mapper"	"true"
"ORM"	"Fluent NHibernate"	"https://github.com/jagregory/fluent-nhibernate"	"Fluent, XML-less, compile safe, automated, convention-based mappings for NHibernate."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1273"	"130"	"668"	"GitHub - jagregory/fluent-nhibernate: Fluent NHibernate! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 130 Star 1,273 Fork 668 jagregory/fluent-nhibernate Code Issues 119 Pull requests 14 Wiki Pulse Graphs Fluent NHibernate! http://fluentnhibernate.org 1,461 commits 6 branches 17 releases 80 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fixingBuildScript gh-pages master net35-dev net35 v1.x Nothing to show v2.0.3 v2.0.2 v2.0.1.0 v2.0.1-alpha v1.5.3 v1.5.2 v1.5.1.0 v1.5.1-alpha release-1.3 release-1.2 release-1.1 release-1.0RTM release-1.0RC last-good-pre-1.0 1.4.0.1 1.0-testers-2 1.0-testers-1 Nothing to show New pull request Latest commit 1dff2ab May 4, 2016 chester89 Merge pull request #345 from samiraguiar/patch-1 … Updates README.md with build instructions for Windows Permalink Failed to load latest commit information. buildsupport removed lots of unused files Jun 17, 2015 docs * Imported source from ShadeTree. Jul 26, 2008 src bumped to 2.0.3 - wrong version number Oct 7, 2015 tools Merge branch 'pr-307' into docu-update Jun 17, 2015 .gitattributes Fix line endings, I hope. Aug 3, 2011 .gitignore rake task to update NH version across solution; update to 4.0.3.4000 … Jun 17, 2015 Gemfile trying to overcome ssl connection problem Mar 2, 2015 InstallGems.bat Switched to using bundler for gem management Apr 27, 2012 LICENSE.txt Added explicit license Jan 28, 2009 README.md Update README.md Apr 28, 2016 RakeFile remove Clean target from MSBuild step Aug 12, 2015 config.json bumped to 2.0.3 - wrong version number Oct 6, 2015 ripple.cmd added ripple to pull nuget dependencies, edited Rake build script to … Feb 19, 2013 ripple.config removed lots of unused files Jun 16, 2015 README.md Fluent, XML-less, compile safe, automated, convention-based mappings for NHibernate. Get your fluent on. Getting started Read the introduction. Get latest binaries from NuGet (we support both .NET 4.0 with NHibernate 4.x and .NET 3.5 with NHibernate 3 if you like it vintage) Create your first project. Further reading Once you've followed the above, you can compare our auto mapping to our fluent interface to see which suits your application, read through our API documentation, or just see what's available for reading in our wiki. Building Follow the instructions from the wiki page to build the project. Contributors Fluent NHibernate wouldn't be possible without the time and effort of its contributors. The team comprises of James Gregory, Paul Batum, Andrew Stewart, and Hudson Akridge. Our valued committers are: Aaron Jensen, Alexander Gross, Andrew Stewart, Barry Dahlberg, Bobby Johnson, Brian Donahue, Cameron Harris, Chad Myers, Chris Chilvers, Craig Neuwirt, Dan Malcolm, Daniel Mirapalheta, David Archer, David Longnecker, David R. Longnecker, Derick Bailey, Erik Ojebo, Firo, Hudson Akridge, Ivan Zlatev, James Freiwirth, James Gregory, James Kovacs, Jeremy Skinner, Lee Henson, Louis DeJardin, Patric Forsgard, Paul Batum, Roelof Blom, Stuart Childs, Tom Janssens, Tuna Toksoz, U-BSOD\pruiz, di97mni, dschilling, felixg, jeremydmiller, kevm, leebrandt, maxild, and robsosno. Thanks goes to Jeremy Miller for the original idea and implementation. Fluent NHibernate is © 2008-2015 James Gregory and contributors under the BSD license Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jagregory/fluent-nhibernate"	"Fluent, XML-less, compile safe, automated, convention-based mappings for NHibernate."	"true"
"ORM"	"FluentMigrator"	"https://github.com/schambers/fluentmigrator"	"Fluent Migrations framework for.net"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1229"	"106"	"413"	"GitHub - schambers/fluentmigrator: Fluent Migrations framework for .net Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 106 Star 1,229 Fork 413 schambers/fluentmigrator Code Issues 78 Pull requests 29 Wiki Pulse Graphs Fluent Migrations framework for .net http://www.github.com/schambers/fluentmigrator 1,627 commits 1 branch 21 releases 118 contributors C# 99.7% Other 0.3% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.6.2 1.6.1 1.6.0 1.5.1 1.5.0 1.4.0 1.3.1 1.3.0 1.2.1 1.2.0 1.1.2.1 1.1.2 1.1.1 1.1.0 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0 Nothing to show New pull request Latest commit f17dca3 May 31, 2016 fubar-coder Bumped version and copyright Permalink Failed to load latest commit information. doc added file in the migration class Dec 31, 2014 lib Bridge NUnit.Should to Shouldly Jun 8, 2015 packages Bumped version and copyright May 31, 2016 src Bumped version and copyright May 31, 2016 tools upgrades rake script for Albacore v2 Jan 2, 2015 .editorconfig Added .editorconfig for sharing formatting Oct 15, 2012 .gitattributes Add .gitattributes and fix line endings Sep 29, 2012 .gitignore Revert ""Add SqlServerCompact package to make unit tests work, when no… May 30, 2016 .travis.yml Make sure travis does not hang waiting for user-input (related to #601) Jun 26, 2015 CI.proj Changes for TravisCI Feb 2, 2013 CONTRIBUTING.md Specify tab size for Ruby code Aug 25, 2013 FluentMigrator (2010).sln Revert 2010 Solution version change Feb 5, 2015 FluentMigrator (2010).sln.DotSettings Added transaction handling to Jet, and corrected some typos Feb 18, 2013 FluentMigrator.sln add support vor vs2012 Mar 25, 2015 Gemfile Added Gemfile to better manage gem dependencies. Aug 23, 2013 Gemfile.lock Merge pull request #565 of daniellee/albacore_upgrade Feb 5, 2015 LICENSE.txt linking assemblyinfos into solutioninfo to get version numbers aligned Mar 31, 2010 README.textile Build instructions May 31, 2016 VERSION Bumped version and copyright May 31, 2016 build.bat Changes to build script to zip up sample into artifacts and setting u… Jun 20, 2010 default.build set CLS compliance to true Sep 18, 2013 default.msbuild Done necessary config and package changes closes #258 May 6, 2012 fluentmigrator.vssettings Added vssettings and ReSharper settings Jan 3, 2012 rakefile.rb Rake script now adds CLSCompliant attribute Jan 2, 2015 README.textile FluentMigrator Fluent Migrator is a migration framework for .NET much like Ruby on Rails Migrations. Migrations are a structured way to alter your database schema and are an alternative to creating lots of sql scripts that have to be run manually by every developer involved. Migrations solve the problem of evolving a database schema for multiple databases (for example, the developer’s local database, the test database and the production database). Database schema changes are described in classes written in C# that can be checked into a version control system. Project Info Documentation: http://wiki.github.com/schambers/fluentmigrator/ Discussions: fluentmigrator-google-group@googlegroups.com Bug/Feature Tracking: http://github.com/schambers/fluentmigrator/issues TeamCity sources: http://teamcity.codebetter.com/viewType.html?buildTypeId=bt82&tab=buildTypeStatusDiv Click the “Login as guest” link in the footer of the page. Build Status The build is generously hosted and run on the CodeBetter TeamCity infrastructure. Latest build status: Our Mono build is hosted on Travis CI. Latest Mono build status: Build instructions Prerequisites Ruby 2.2.4 Gems: Rake 10.5.0 albacore version_bumper Creating the nuget packages tools\NuGet.exe restore FluentMigrator.sln rake nuget:create_nugets This will also build the whole solution. Powered by Contributors A long list of everyone that has contributed to FluentMigrator. Thanks for all the Pull Requests! License Apache 2 License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/schambers/fluentmigrator"	"Fluent Migrations framework for.net"	"true"
"ORM"	"ServiceStack.OrmLite"	"https://github.com/ServiceStack/ServiceStack.OrmLite"	"Light, simple and fast convention-based POCO ORM"	"null"	"null"	"null"	"Free for OSS"	"https://github.com/ServiceStack/ServiceStack.OrmLite/blob/master/license.txt"	"null"	"null"	"748"	"125"	"491"	"GitHub - ServiceStack/ServiceStack.OrmLite: Fast, Simple, Typed ORM for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 125 Star 748 Fork 491 ServiceStack/ServiceStack.OrmLite Code Pull requests 1 Wiki Pulse Graphs Fast, Simple, Typed ORM for .NET https://servicestack.net/ormlite 2,404 commits 5 branches 28 releases 99 contributors C# 57.0% PLpgSQL 33.1% SQLPL 9.7% Other 0.2% C# PLpgSQL SQLPL Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master netcore nullable-enum-int v3 vs2012 Nothing to show v4.0.60 v4.0.58 v4.0.56 v4.0.54 v4.0.52 v4.0.50 v4.0.48 v4.0.46 v4.0.44 v4.0.42 v4.0.40 v4.0.38 v4.0.36 v4.0.35 v4.0.34 v4.0.33 v4.0.32 v4.0.31 v4.0.30 v4.0.24 v4.0.23 v4.0.22 v4.0.21 v4.0.20 v4.0.19 v4.0.18 v4.0.17 v3-snapshot Nothing to show New pull request Latest commit 795bc73 Jul 12, 2016 mythz Make modelDef, tableDefs and IsFieldName() protected Permalink Failed to load latest commit information. NuGet.Signed Update year to 2016 Feb 18, 2016 NuGet Upgrade to npgsql 3.1.2 Jun 12, 2016 build Upgrade Npgsql dep to .NET 4.5 only 3.0.4 - .NET 4.0 projects will ne… Dec 20, 2015 lib Update SS dls Jul 12, 2016 src Make modelDef, tableDefs and IsFieldName() protected Jul 12, 2016 tests Add new sub expression with custom sql expression test Jul 4, 2016 .gitignore Fix SQL Server UTC Tests Aug 5, 2015 CONTRIBUTING.md Add a Contributing.md Oct 13, 2013 README.md move dynamic result sets under select multiple columns Jun 20, 2016 license.txt Add v4 readme, licensing and NuGet changes Sep 18, 2013 README.md Join the ServiceStack Google+ Community or follow @ServiceStack for updates. Fast, Simple, Typed ORM for .NET OrmLite's goal is to provide a convenient, DRY, config-free, RDBMS-agnostic typed wrapper that retains a high affinity with SQL, exposing intuitive APIs that generate predictable SQL and maps cleanly to (DTO-friendly) disconnected POCO's. This approach makes easier to reason-about your data access making it obvious what SQL is getting executed at what time, whilst mitigating unexpected behavior, implicit N+1 queries and leaky data access prevalent in Heavy ORMs. OrmLite was designed with a focus on the core objectives: Provide a set of light-weight C# extension methods around .NET's impl-agnostic System.Data.* interfaces Map a POCO class 1:1 to an RDBMS table, cleanly by conventions, without any attributes required. Create/Drop DB Table schemas using nothing but POCO class definitions (IOTW a true code-first ORM) Simplicity - typed, wrist friendly API for common data access patterns. High performance - with support for indexes, text blobs, etc. Amongst the fastest Micro ORMs for .NET (just behind Dapper). Expressive power and flexibility - with access to IDbCommand and raw SQL Cross platform - supports multiple dbs (currently: Sql Server, Sqlite, MySql, PostgreSQL, Firebird) running on both .NET and Mono platforms. In OrmLite: 1 Class = 1 Table. There should be no surprising or hidden behaviour, the Typed API that produces the Query doesn't impact how results get intuitvely mapped to the returned POCO's which could be different to the POCO used to create the query, e.g. containing only a subset of the fields you want populated. Any non-scalar properties (i.e. complex types) are text blobbed by default in a schema-less text field using any of the avilable pluggable text serializers. Support for POCO-friendly references is also available to provide a convenient API to persist related models. Effectively this allows you to create a table from any POCO type and it should persist as expected in a DB Table with columns for each of the classes 1st level public properties. Download 8 flavours of OrmLite is on NuGet: ServiceStack.OrmLite.SqlServer ServiceStack.OrmLite.PostgreSQL ServiceStack.OrmLite.MySql ServiceStack.OrmLite.Sqlite.Mono - Compatible with Mono / Windows (x86) ServiceStack.OrmLite.Sqlite.Windows - 32/64bit Mixed mode .NET for Windows only ServiceStack.OrmLite.Oracle (unofficial) ServiceStack.OrmLite.Firebird (unofficial) ServiceStack.OrmLite.VistaDb (unofficial) Latest v4+ on NuGet is a commercial release with free quotas. Getting Started with OrmLite and AWS RDS OrmLite has great support AWS's managed RDS Databases, follow these getting started guides to help getting up and running quickly: PostgreSQL Aurora MySQL MariaDB SQL Server Docs and Downloads for older v3 BSD releases Copying Since September 2013, ServiceStack source code is available under GNU Affero General Public License/FOSS License Exception, see license.txt in the source. Alternative commercial licensing is also available. Contributing Contributors need to approve the Contributor License Agreement before submitting pull-requests, see the Contributing wiki for more details. Usage First Install the NuGet package of the RDBMS you want to use, e.g: PM> Install-Package ServiceStack.OrmLite.SqlServer  Each RDBMS includes a specialized dialect provider that encapsulated the differences in each RDBMS to support OrmLite features. The available Dialect Providers for each RDBMS is listed below: SqlServerDialect.Provider      // Any SQL Server Version SqlServer2012Dialect.Provider  // SQL Server 2012+ SqliteDialect.Provider         // Sqlite PostgreSqlDialect.Provider     // PostgreSQL  MySqlDialect.Provider          // MySql OracleDialect.Provider         // Oracle FirebirdDialect.Provider       // Firebird VistaDbDialect.Provider        // Vista DB  To configure OrmLite you need the DB Connection string along the Dialect Provider of the RDBMS you're connecting to, e.g: var dbFactory = new OrmLiteConnectionFactory(     connectionString,       SqlServerDialect.Provider); If you're using an IOC you can register OrmLiteConnectionFactory as a singleton, e.g: container.Register<IDbConnectionFactory>(c =>      new OrmLiteConnectionFactory("":memory:"", SqliteDialect.Provider)); //InMemory Sqlite DB You can then use the dbFactory to open ADO.NET DB Connections to your database. If connecting to an empty database you can use OrmLite's Create Table API's to create any tables you need based solely on the Schema definition of your POCO and populate it with any initial seed data you need, e.g: using (var db = dbFactory.Open()) {     if (db.CreateTableIfNotExists<Poco>())     {         db.Insert(new Poco { Id = 1, Name = ""Seed Data""});     }      var result = db.SingleById<Poco>(1);     result.PrintDump(); //= {Id: 1, Name:Seed Data} } Type Converters You can customize, enhance or replace how OrmLite handles specific .NET Types with the new OrmLite Type Converters. There's also support for SQL Server-specific SqlGeography, SqlGeometry and SqlHierarchyId Types, See docs on SQL Server Types for instructions on how to enable them. Async API Overview A quick overview of Async API's can be seen in the class diagram below: Essentially most of OrmLite public API's now have async equivalents of the same name and an additional conventional *Async suffix. The Async API's also take an optional CancellationToken making converting sync code trivial, where you just need to add the Async suffix and await keyword, as can be seen in the Customer Orders UseCase upgrade to Async diff , e.g: Sync: db.Insert(new Employee { Id = 1, Name = ""Employee 1"" }); db.Save(product1, product2); var customer = db.Single<Customer>(new { customer.Email }); Async: await db.InsertAsync(new Employee { Id = 1, Name = ""Employee 1"" }); await db.SaveAsync(product1, product2); var customer = await db.SingleAsync<Customer>(new { customer.Email }); Effectively the only Data Access API's that doesn't have async equivalents are *Lazy APIs yielding a lazy sequence (incompatible with async) as well as Schema DDL API's which are typically not used at runtime. For a quick preview of many of the new Async API's in action, checkout ApiSqlServerTestsAsync.cs. Async RDBMS Providers Currently only a limited number of RDBMS providers offer async API's which are only available in their .NET 4.5 builds, which at this time are only: SQL Server .NET 4.5+ PostgreSQL .NET 4.5+ MySQL .NET 4.5+ We've also added a .NET 4.5 build for Sqlite as it's a common use-case to swapout to use Sqlite's in-memory provider for faster tests. But as Sqlite doesn't provide async API's under-the-hood we fallback to pseudo async support where we just wrap its synchronous responses in Task results. Nested Typed Sub SqlExpressions The Sql.In() API supports nesting and combining of multiple Typed SQL Expressions together in a single SQL Query, e.g: var usaCustomerIds = db.From<Customer>(c => c.Country == ""USA"").Select(c => c.Id); var usaCustomerOrders = db.Select(db.From<Order>()     .Where(x => Sql.In(x.CustomerId, usaCustomerIds))); API Examples OrmLite provides terse and intuitive typed API's for database querying from simple lambda expressions to more complex LINQ-Like Typed SQL Expressions which you can use to construct more complex queries. To give you a flavour here are some examples: Querying with SELECT int agesAgo = DateTime.Today.AddYears(-20).Year; db.Select<Author>(x => x.Birthday >= new DateTime(agesAgo, 1, 1)                      && x.Birthday <= new DateTime(agesAgo, 12, 31)); db.Select<Author>(x => Sql.In(x.City, ""London"", ""Madrid"", ""Berlin"")); db.Select<Author>(x => x.Earnings <= 50); db.Select<Author>(x => x.Name.StartsWith(""A"")); db.Select<Author>(x => x.Name.EndsWith(""garzon"")); db.Select<Author>(x => x.Name.Contains(""Benedict"")); db.Select<Author>(x => x.Rate == 10 && x.City == ""Mexico""); Convenient common usage data access patterns OrmLite also includes a number of convenient API's providing DRY, typed data access for common queries: Person person = db.SingleById<Person>(1); Person person = db.Single<Person>(x => x.Age == 42); var q = db.From<Person>()           .Where(x => x.Age > 40)           .Select(Sql.Count(""*""));  int peopleOver40 = db.Scalar<int>(q); int peopleUnder50 = db.Count<Person>(x => x.Age < 50); bool has42YearOlds = db.Exists<Person>(new { Age = 42 }); int maxAgeUnder50 = db.Scalar<Person, int>(x => Sql.Max(x.Age), x => x.Age < 50); var q = db.From<Person>()     .Where(x => x.Age == 27)     .Select(x => x.LastName);  List<string> results = db.Column<string>(q); var q = db.From<Person>()           .Where(x => x.Age < 50)           .Select(x => x.Age);  HashSet<int> results = db.ColumnDistinct<int>(q); var q = db.From<Person>()           .Where(x => x.Age < 50)           .Select(x => new { x.Id, x.LastName });  Dictionary<int,string> results = db.Dictionary<int, string>(q); var q = db.From<Person>()           .Where(x => x.Age < 50)           .Select(x => new { x.Age, x.LastName });  Dictionary<int, List<string>> results = db.Lookup<int, string>(q); INSERT, UPDATE and DELETEs To see the behaviour of the different APIs, all examples uses this simple model public class Person {     public int Id { get; set; }     public string FirstName { get; set; }     public string LastName { get; set; }     public int? Age { get; set; } } UPDATE In its most simple form, updating any model without any filters will update every field, except the Id which is used to filter the update to this specific record: db.Update(new Person { Id = 1, FirstName = ""Jimi"", LastName = ""Hendrix"", Age = 27}); If you supply your own where expression, it updates every field (inc. Id) but uses your filter instead: db.Update(new Person { Id = 1, FirstName = ""JJ"" }, p => p.LastName == ""Hendrix""); One way to limit the fields which gets updated is to use an Anonymous Type: db.Update<Person>(new { FirstName = ""JJ"" }, p => p.LastName == ""Hendrix""); Or by using UpdateNonDefaults which only updates the non-default values in your model using the filter specified: db.UpdateNonDefaults(new Person { FirstName = ""JJ"" }, p => p.LastName == ""Hendrix""); UpdateOnly As updating a partial row is a common use-case in Db's, we've added a number of methods for just this purpose, named UpdateOnly. The lambda syntax lets you update only the fields listed in property initializers, e.g: db.UpdateOnly(() => new Person { FirstName = ""JJ"" }); The second argument lets you specify a filter for updates: db.UpdateOnly(() => new Person { FirstName = ""JJ"" }, where: p => p.LastName == ""Hendrix""); Alternatively you can pass in a POCO directly, in which case the first expression in an UpdateOnly statement is used to specify which fields should be updated: db.UpdateOnly(new Person { FirstName = ""JJ"" }, onlyFields: p => p.FirstName); db.UpdateOnly(new Person { FirstName = ""JJ"", Age = 12 },      onlyFields: p => new { p.FirstName, p.Age }); When present, the second expression is used as the where filter: db.UpdateOnly(new Person { FirstName = ""JJ"" },      onlyFields: p => p.FirstName,      where: p => p.LastName == ""Hendrix""); Instead of using the expression filters above you can choose to use an SqlExpression builder which provides more flexibility when you want to programatically construct the update statement: var q = db.From<Person>()     .Update(p => p.FirstName);  db.UpdateOnly(new Person { FirstName = ""JJ"", LastName = ""Hendo"" }, onlyFields: q); Using a typed SQL Expression: var q = db.From<Person>()     .Where(x => x.FirstName == ""Jimi"")     .Update(p => p.FirstName);  db.UpdateOnly(new Person { FirstName = ""JJ"" }, onlyFields: q); Updating existing values The UpdateAdd API provides several Typed API's for updating existing values: //Increase everyone's Score by 3 points db.UpdateAdd(() => new Person { Score = 3 });  db.UpdateAdd(new Person { Score = 3 }, updateFields: x => x.Score);   //Remove 5 points from Jackson Score db.UpdateAdd(() => new Person { Score = -5 }, x => where: x.LastName == ""Jackson""); db.UpdateAdd(new Person { Score = -5 }, x => x.Score, x => where: x.LastName == ""Jackson"");  //Graduate everyone and increase everyone's Score by 2 points  var q = db.From<Person>().Update(x => new { x.Points, x.Graduated }); db.UpdateAdd(new Person { Points = 2, Graduated = true }, q);  //Add 10 points to Michael's score var q = db.From<Person>()     .Where(x => x.FirstName == ""Michael"")     .Update(x => x.Points); db.UpdateAdd(new Person { Points = 10 }, q); Note: Any non-numeric values in an UpdateAdd statement (e.g. strings) are replaced as normal. INSERT Insert's are pretty straight forward since in most cases you want to insert every field: db.Insert(new Person { Id = 1, FirstName = ""Jimi"", LastName = ""Hendrix"", Age = 27 }); Partial Inserts You can use InsertOnly for the rare cases you don't want to insert every field db.InsertOnly(() => new Person { FirstName = ""Amy"" }); Alternative API using an SqlExpression var q = db.From<Person>()     .Insert(p => new { p.FirstName });  db.InsertOnly(new Person { FirstName = ""Amy"" }, onlyFields: q) DELETE Like updates for DELETE's we also provide APIs that take a where Expression: db.Delete<Person>(p => p.Age == 27); Or an SqlExpression: var q = db.From<Person>()     .Where(p => p.Age == 27);  db.Delete<Person>(q); As well as un-typed, string-based expressions: db.Delete<Person>(where: ""Age = @age"", new { age = 27 }); API Overview The API is minimal, providing basic shortcuts for the primitive SQL statements: Notes OrmLite Extension methods hang off ADO.NET's IDbConnection. CreateTable<T> and DropTable<T> create and drop tables based on a classes type definition (only public properties used). If your SQL doesn't start with a SELECT statement, it is assumed a WHERE clause is being provided, e.g: var tracks = db.Select<Track>(""Artist = @artist AND Album = @album"",     new { artist = ""Nirvana"", album = ""Heart Shaped Box"" }); Which is equivalent to: var tracks = db.Select<Track>(""SELECT * FROM track WHERE Artist = @artist AND Album = @album"",      new { artist = ""Nirvana"", album = ""Heart Shaped Box"" }); Use Sql* APIs for when you want to query custom SQL that is not a SELECT statement, e.g: var tracks = db.SqlList<Track>(""EXEC GetArtistTracks @artist, @album"",     new { artist = ""Nirvana"", album = ""Heart Shaped Box"" }); Select returns multiple records: List<Track> tracks = db.Select<Track>() Single returns a single record: Track track = db.Single<Track>(x => x.RefId == refId) Dictionary returns a Dictionary made from the first two columns: Dictionary<int, string> trackIdNamesMap = db.Dictionary<int, string>(     db.From<Track>().Select(x => new { x.Id, x.Name }))  Dictionary<int, string> trackIdNamesMap = db.Dictionary<int, string>(     ""select Id, Name from Track"") Lookup returns an Dictionary<K, List<V>> made from the first two columns: Dictionary<int, List<string>> albumTrackNames = db.Lookup<int, string>(     db.From<Track>().Select(x => new { x.AlbumId, x.Name }))  Dictionary<int, List<string>> albumTrackNames = db.Lookup<int, string>(     ""select AlbumId, Name from Track"") Column returns a List of first column values: List<string> trackNames = db.Column<string>(db.From<Track>().Select(x => x.Name))  List<string> trackNames = db.Column<string>(""select Name from Track"") HashSet returns a HashSet of distinct first column values: HashSet<string> uniqueTrackNames = db.ColumnDistinct<string>(     db.From<Track>().Select(x => x.Name))  HashSet<string> uniqueTrackNames = db.ColumnDistinct<string>(""select Name from Track"") Scalar returns a single scalar value: var trackCount = db.Scalar<int>(db.From<Track>().Select(Sql.Count(""*"")))  var trackCount = db.Scalar<int>(""select count(*) from Track"") Anonymous types passed into Where are treated like an AND filter: var track3 = db.Where<Track>(new { AlbumName = ""Throwing Copper"", TrackNo = 3 }) SingleById(s), SelectById(s), etc provide strong-typed convenience methods to fetch by a Table's Id primary key field. var track = db.SingleById<Track>(1); var tracks = db.SelectByIds<Track>(new[]{ 1,2,3 }); Lazy Queries API's ending with Lazy yield an IEnumerable sequence letting you stream the results without having to map the entire resultset into a disconnected List of POCO's first, e.g: var lazyQuery = db.SelectLazy<Person>(""Age > @age"", new { age = 40 }); // Iterate over a lazy sequence  foreach (var person in lazyQuery) {    //...   } Other examples var topVIPs = db.WhereLazy<Person>(new { Age = 27 }).Where(p => IsVip(p)).Take(5) Other Notes All Insert, Update, and Delete methods take multiple params, while InsertAll, UpdateAll and DeleteAll take IEnumerables. Save and SaveAll will Insert if no record with Id exists, otherwise it Updates. Methods containing the word Each return an IEnumerable and are lazily loaded (i.e. non-buffered). Features Whilst OrmLite aims to provide a light-weight typed wrapper around SQL, it offers a number of convenient features that makes working with RDBMS's a clean and enjoyable experience: Typed SqlExpression support for JOIN's Starting with the most basic example you can simply specify the table you want to join with: var q = db.From<Customer>()           .Join<CustomerAddress>();  var dbCustomers = db.Select<Customer>(q); This query rougly maps to the following SQL: SELECT Customer.*    FROM Customer         INNER JOIN         CustomerAddress ON (Customer.Id == CustomerAddress.Id) Just like before q is an instance of SqlExpression<Customer> which is bounded to the base Customer type (and what any subsequent implicit API's apply to). To better illustrate the above query, lets expand it to the equivalent explicit query: SqlExpression<Customer> q = db.From<Customer>(); q.Join<Customer,CustomerAddress>((cust,address) => cust.Id == address.CustomerId);  List<Customer> dbCustomers = db.Select(q); Reference Conventions The above query implicitly joins together the Customer and CustomerAddress POCO's using the same {ParentType}Id property convention used in OrmLite's support for References, e.g: class Customer {     public int Id { get; set; }     ... } class CustomerAddress {     public int Id { get; set; }     public int CustomerId { get; set; }  // Reference based on Property name convention } References based on matching alias names is also supported, e.g: [Alias(""LegacyCustomer"")] class Customer {     public int Id { get; set; }     ... } class CustomerAddress {     public int Id { get; set; }      [Alias(""LegacyCustomerId"")]             // Matches `LegacyCustomer` Alias     public int RenamedCustomerId { get; set; }  // Reference based on Alias Convention } Self References Self References are also supported for 1:1 relations where the Foreign Key can instead be on the parent table: public class Customer {     ...     public int CustomerAddressId { get; set; }      [Reference]     public CustomerAddress PrimaryAddress { get; set; } } Foreign Key and References Attributes References that don't follow the above naming conventions can be declared explicitly using the [References] and [ForeignKey] attributes: public class Customer {     [References(typeof(CustomerAddress))]     public int PrimaryAddressId { get; set; }      [Reference]     public CustomerAddress PrimaryAddress { get; set; } } Reference Attributes take precedence over naming conventions Multiple Self References The example below shows a customer with multiple CustomerAddress references which are able to be matched with the {PropertyReference}Id naming convention, e.g: public class Customer {     [AutoIncrement]     public int Id { get; set; }     public string Name { get; set; }      [References(typeof(CustomerAddress))]     public int? HomeAddressId { get; set; }      [References(typeof(CustomerAddress))]     public int? WorkAddressId { get; set; }      [Reference]     public CustomerAddress HomeAddress { get; set; }      [Reference]     public CustomerAddress WorkAddress { get; set; } } Once defined, it can be saved and loaded via OrmLite's normal Reference and Select API's, e.g: var customer = new Customer {     Name = ""The Customer"",     HomeAddress = new CustomerAddress {         Address = ""1 Home Street"",         Country = ""US""     },     WorkAddress = new CustomerAddress {         Address = ""2 Work Road"",         Country = ""UK""     }, };  db.Save(customer, references:true);  var c = db.LoadSelect<Customer>(x => x.Name == ""The Customer""); c.WorkAddress.Address.Print(); // 2 Work Road  var ukAddress = db.Single<CustomerAddress>(x => x.Country == ""UK""); ukAddress.Address.Print();     // 2 Work Road Implicit Reference Conventions are applied by default The implicit relationship above allows you to use any of these equilvalent APIs to JOIN tables: q.Join<CustomerAddress>(); q.Join<Customer,CustomerAddress>(); q.Join<Customer,CustomerAddress>((cust,address) => cust.Id == address.CustomerId); Selecting multiple columns across joined tables The SelectMulti API lets you select from multiple joined tables into a typed tuple var q = db.From<Customer>()     .Join<Customer, CustomerAddress>()     .Join<Customer, Order>()     .Where(x => x.CreatedDate >= new DateTime(2016,01,01))     .And<CustomerAddress>(x => x.Country == ""Australia"");  var results = db.SelectMulti<Customer, CustomerAddress, Order>(q);  foreach (var tuple in results) {     Customer customer = tuple.Item1;     CustomerAddress custAddress = tuple.Item2;     Order custOrder = tuple.Item3; } Thanks to Micro ORM's lightweight abstractions over ADO.NET that maps to clean POCOs, we can also use OrmLite's embedded version of Dapper's QueryMultiple: var q = db.From<Customer>()     .Join<Customer, CustomerAddress>()     .Join<Customer, Order>()     .Select(""*"");  using (var multi = db.QueryMultiple(q.ToSelectStatement())) {     var results = multi.Read<Customer, CustomerAddress, Order,          Tuple<Customer,CustomerAddress,Order>>(Tuple.Create).ToList();      foreach (var tuple in results)     {         Customer customer = tuple.Item1;         CustomerAddress custAddress = tuple.Item2;         Order custOrder = tuple.Item3;     } } Select data from multiple tables into a Custom POCO Another implicit behaviour when selecting from a typed SqlExpression is that results are mapped to the Customer POCO. To change this default we just need to explicitly specify what POCO it should map to instead: List<FullCustomerInfo> customers = db.Select<FullCustomerInfo>(     db.From<Customer>().Join<CustomerAddress>()); Where FullCustomerInfo is any POCO that contains a combination of properties matching any of the joined tables in the query. The above example is also equivalent to the shorthand db.Select<Into,From>() API: var q = db.From<Customer>()           .Join<CustomerAddress>();  var customers = db.Select<FullCustomerInfo,Customer>(q); Rules for how results are mapped is simply each property on FullCustomerInfo is mapped to the first matching property in any of the tables in the order they were added to the SqlExpression. The mapping also includes a fallback for referencing fully-qualified names in the format: {TableName}{FieldName} allowing you to reference ambiguous fields, e.g: CustomerId => ""Customer"".""Id"" OrderId => ""Order"".""Id"" CustomerName => ""Customer"".""Name"" OrderCost => ""Order"".""Cost"" Dynamic Result Sets There's new support for returning unstructured resultsets letting you Select List<object> instead of having results mapped to a concrete Poco class, e.g: db.Select<List<object>>(db.From<Poco>()   .Select(""COUNT(*), MIN(Id), MAX(Id)""))[0].PrintDump(); Output of objects in the returned List<object>: [     10,     1,     10 ]  You can also Select Dictionary<string,object> to return a dictionary of column names mapped with their values, e.g: db.Select<Dictionary<string,object>>(db.From<Poco>()   .Select(""COUNT(*) Total, MIN(Id) MinId, MAX(Id) MaxId""))[0].PrintDump(); Output of objects in the returned Dictionary<string,object>: {     Total: 10,     MinId: 1,     MaxId: 10 }  and can be used for API's returning a Single row result: db.Single<List<object>>(db.From<Poco>()   .Select(""COUNT(*) Total, MIN(Id) MinId, MAX(Id) MaxId"")).PrintDump(); or use object to fetch an unknown Scalar value: object result = db.Scalar<object>(db.From<Poco>().Select(x => x.Id)); Select data from multiple tables into Dynamic ResultSets You can also select data from multiple tables into dynamic result sets which provide several Convenience APIs for accessing data from an unstructured queries. Using dynamic: var q = db.From<Employee>()     .Join<Department>()     .Select<Employee, Department>((e, d) => new { e.FirstName, d.Name });  List<dynamic> results = db.Select<dynamic>(q); foreach (dynamic result in results) {     string firstName = result.FirstName;     string deptName = result.Name; } Dictionary of Objects: List<Dictionary<string,object>> rows = db.Select<Dictionary<string,object>>(q); List of Objects: List<List<object>> rows = db.Select<Dictionary<string,object>>(q); Custom Key/Value Dictionary: Dictionary<string,string> rows = db.Dictionary<string,string>(q); BelongsTo Attribute The [BelongTo] attribute can be used for specifying how Custom POCO results are mapped when the resultset is ambiguous, e.g: class A {      public int Id { get; set; } } class B {     public int Id { get; set; }     public int AId { get; set; } } class C {     public int Id { get; set; }     public int BId { get; set; } } class Combined {     public int Id { get; set; }     [BelongTo(typeof(B))]     public int BId { get; set; } }  var q = db.From<A>()     .Join<B>()     .LeftJoin<B,C>();  var results = db.Select<Combined>(q); //Combined.BId = B.Id Advanced Example Seeing how the SqlExpression is constructed, joined and mapped, we can take a look at a more advanced example to showcase more of the new API's available: List<FullCustomerInfo> rows = db.Select<FullCustomerInfo>(  // Map results to FullCustomerInfo POCO   db.From<Customer>()                                       // Create typed Customer SqlExpression     .LeftJoin<CustomerAddress>()                            // Implict left join with base table     .Join<Customer, Order>((c,o) => c.Id == o.CustomerId)   // Explicit join and condition     .Where(c => c.Name == ""Customer 1"")                     // Implicit condition on base table     .And<Order>(o => o.Cost < 2)                            // Explicit condition on joined Table     .Or<Customer,Order>((c,o) => c.Name == o.LineItem));    // Explicit condition with joined Tables The comments next to each line document each Type of API used. Some of the new API's introduced in this example include: Usage of LeftJoin for specifying a LEFT JOIN, RightJoin and FullJoin also available Usage of And<Table>(), to specify an AND condition on a Joined table Usage of Or<Table1,Table2>, to specify an OR condition against 2 joined tables More code examples of References and Joined tables are available in: LoadReferencesTests.cs LoadReferencesJoinTests.cs Reference Support, POCO style OrmLite lets you Store and Load related entities in separate tables using [Reference] attributes in primary tables in conjunction with {Parent}Id property convention in child tables, e.g: public class Customer {     [AutoIncrement]     public int Id { get; set; }     public string Name { get; set; }      [Reference] // Save in CustomerAddress table     public CustomerAddress PrimaryAddress { get; set; }      [Reference] // Save in Order table     public List<Order> Orders { get; set; } }  public class CustomerAddress {     [AutoIncrement]     public int Id { get; set; }     public int CustomerId { get; set; } //`{Parent}Id` convention to refer to Customer     public string AddressLine1 { get; set; }     public string AddressLine2 { get; set; }     public string City { get; set; }     public string State { get; set; }     public string Country { get; set; } }  public class Order {     [AutoIncrement]     public int Id { get; set; }     public int CustomerId { get; set; } //`{Parent}Id` convention to refer to Customer     public string LineItem { get; set; }     public int Qty { get; set; }     public decimal Cost { get; set; } } With the above structure you can save a POCO and all its entity references with db.Save(T,references:true), e.g: var customer =  new Customer {     Name = ""Customer 1"",     PrimaryAddress = new CustomerAddress {         AddressLine1 = ""1 Australia Street"",         Country = ""Australia""     },     Orders = new[] {         new Order { LineItem = ""Line 1"", Qty = 1, Cost = 1.99m },         new Order { LineItem = ""Line 2"", Qty = 2, Cost = 2.99m },     }.ToList(), };  db.Save(customer, references:true); This saves the root customer POCO in the Customer table, its related PrimaryAddress in the CustomerAddress table and its 2 Orders in the Order table. Querying POCO's with References The Load* API's are used to automatically load a POCO and all it's child references, e.g: var customer = db.LoadSingleById<Customer>(customerId); Using Typed SqlExpressions: var customers = db.LoadSelect<Customer>(x => x.Name == ""Customer 1""); More examples available in LoadReferencesTests.cs Unlike normal complex properties, references: Doesn't persist as complex type blobs Doesn't impact normal querying Saves and loads references independently from itself Are serializable with Text serializers (only populated are visible). Loads related data only 1-reference-level deep Basically they provides a better story when dealing with referential data that doesn't impact the POCO's ability to be used as DTO's. Merge Disconnected POCO Result Sets The Merge extension method can stitch disconnected POCO collections together as per their relationships defined in OrmLite's POCO References. For example you can select a collection of Customers who've made an order with quantities of 10 or more and in a separate query select their filtered Orders and then merge the results of these 2 distinct queries together with: //Select Customers who've had orders with Quantities of 10 or more var q = db.From<Customer>()           .Join<Order>()           .Where<Order>(o => o.Qty >= 10)           .SelectDistinct();  List<Customer> customers = db.Select<Customer>(q);  //Select Orders with Quantities of 10 or more List<Order> orders = db.Select<Order>(o => o.Qty >= 10);  customers.Merge(orders); // Merge disconnected Orders with their related Customers  customers.PrintDump();   // Print merged customers and orders datasets Custom Load References You can selectively specifying which references you want to load using the include parameter, e.g: var customerWithAddress = db.LoadSingleById<Customer>(customer.Id, include: new[] { ""PrimaryAddress"" });  //Alternative var customerWithAddress = db.LoadSingleById<Customer>(customer.Id, include: x => new { x.PrimaryAddress }); Optimistic Concurrency Optimistic concurrency can be added to any table by adding the ulong RowVersion { get; set; } property, e.g: public class Poco {     ...     public ulong RowVersion { get; set; } } RowVersion is implemented efficiently in all major RDBMS's, i.e: Uses rowversion datatype in SqlServer Uses PostgreSql's xmin system column (no column on table required) Uses UPDATE triggers on MySql, Sqlite and Oracle whose lifetime is attached to Create/Drop tables APIs Despite their differing implementations each provider works the same way where the RowVersion property is populated when the record is selected and only updates the record if the RowVersion matches with what's in the database, e.g: var rowId = db.Insert(new Poco { Text = ""Text"" }, selectIdentity:true);  var row = db.SingleById<Poco>(rowId); row.Text += "" Updated""; db.Update(row); //success!  row.Text += ""Attempting to update stale record"";  //Can't update stale record Assert.Throws<OptimisticConcurrencyException>(() =>     db.Update(row));  //Can update latest version var updatedRow = db.SingleById<Poco>(rowId);  // fresh version updatedRow.Text += ""Update Success!""; db.Update(updatedRow);  updatedRow = db.SingleById<Poco>(rowId); db.Delete(updatedRow);                        // can delete fresh version Optimistic concurrency is only verified on API's that update or delete an entire entity, i.e. it's not enforced in partial updates. There's also an Alternative API available for DELETE's: db.DeleteById<Poco>(id:updatedRow.Id, rowversion:updatedRow.RowVersion) Modify Custom Schema OrmLite provides Typed APIs for modifying Table Schemas that makes it easy to inspect the state of an RDBMS Table which can be used to determine what modifications you want on it, e.g: class Poco  {     public int Id { get; set; }     public string Name { get; set; }     public string Ssn { get; set; } }  db.DropTable<Poco>(); db.TableExists<Poco>(); //= false  db.CreateTable<Poco>();  db.TableExists<Poco>(); //= true  db.ColumnExists<Poco>(x => x.Ssn); //= true db.DropColumn<Poco>(x => x.Ssn); db.ColumnExists<Poco>(x => x.Ssn); //= false In a future version of your Table POCO you can use ColumnExists to detect which columns haven't been added yet, then use AddColumn to add it, e.g: class Poco  {     public int Id { get; set; }     public string Name { get; set; }      [Default(0)]     public int Age { get; set; } }  if (!db.ColumnExists<Poco>(x => x.Age)) //= false     db.AddColumn<Poco>(x => x.Age);  db.ColumnExists<Poco>(x => x.Age); //= true DB Parameter API's To enable even finer-grained control of parameterized queries we've added new overloads that take a collection of IDbDataParameter's: List<T> Select<T>(string sql, IEnumerable<IDbDataParameter> sqlParams) T Single<T>(string sql, IEnumerable<IDbDataParameter> sqlParams) T Scalar<T>(string sql, IEnumerable<IDbDataParameter> sqlParams) List<T> Column<T>(string sql, IEnumerable<IDbDataParameter> sqlParams) IEnumerable<T> ColumnLazy<T>(string sql, IEnumerable<IDbDataParameter> sqlParams) HashSet<T> ColumnDistinct<T>(string sql, IEnumerable<IDbDataParameter> sqlParams) Dictionary<K, List<V>> Lookup<K, V>(string sql, IEnumerable<IDbDataParameter> sqlParams) List<T> SqlList<T>(string sql, IEnumerable<IDbDataParameter> sqlParams) List<T> SqlColumn<T>(string sql, IEnumerable<IDbDataParameter> sqlParams) T SqlScalar<T>(string sql, IEnumerable<IDbDataParameter> sqlParams) Including Async equivalents for each of the above Sync API's. The new API's let you execute parameterized SQL with finer-grained control over the IDbDataParameter used, e.g: IDbDataParameter pAge = db.CreateParam(""age"", 40, dbType:DbType.Int16); db.Select<Person>(""SELECT * FROM Person WHERE Age > @pAge"", new[] { pAge }); The new CreateParam() extension method above is a useful helper for creating custom IDbDataParameter's. Customize null values The new OrmLiteConfig.OnDbNullFilter lets you to replace DBNull values with a custom value, so you could convert all null strings to be populated with ""NULL"" using: OrmLiteConfig.OnDbNullFilter = fieldDef =>      fieldDef.FieldType == typeof(string)         ? ""NULL""         : null; Exec, Result and String Filters OrmLite's core Exec filters makes it possible to inject your own behavior, tracing, profiling, etc. It's useful in situations like wanting to use SqlServer in production but use an in-memory Sqlite database in tests and being able to emulate any missing SQL Server Stored Procedures in code: public class MockStoredProcExecFilter : OrmLiteExecFilter {     public override T Exec<T>(IDbConnection dbConn, Func<IDbCommand, T> filter)     {         try         {             return base.Exec(dbConn, filter);         }         catch (Exception ex)         {             if (dbConn.GetLastSql() == ""exec sp_name @firstName, @age"")                 return (T)(object)new Person { FirstName = ""Mocked"" };             throw;         }     } }  OrmLiteConfig.ExecFilter = new MockStoredProcExecFilter();  using (var db = OpenDbConnection()) {     var person = db.SqlScalar<Person>(""exec sp_name @firstName, @age"",         new { firstName = ""aName"", age = 1 });      person.FirstName.Print(); //Mocked } Results filters makes it trivial to implement the CaptureSqlFilter which allows you to capture SQL Statements without running them, e.g: CaptureSqlFilter CaptureSqlFilter is an simple Results Filter which can be used to quickly found out what SQL your DB calls generate by surrounding DB access in a using scope like: using (var captured = new CaptureSqlFilter()) using (var db = OpenDbConnection()) {     db.Where<Person>(new { Age = 27 });      captured.SqlStatements[0].PrintDump(); } Emits the Executed SQL along with any DB Parameters: {     Sql: ""SELECT """"Id"""", """"FirstName"""", """"LastName"""", """"Age"""" FROM """"Person"""" WHERE """"Age"""" = @Age"",     Parameters:      {         Age: 27     } }  Replay Exec Filter Or if you want to do things like executing each operation multiple times, e.g: public class ReplayOrmLiteExecFilter : OrmLiteExecFilter {     public int ReplayTimes { get; set; }      public override T Exec<T>(IDbConnection dbConn, Func<IDbCommand, T> filter)     {         var holdProvider = OrmLiteConfig.DialectProvider;         var dbCmd = CreateCommand(dbConn);         try         {             var ret = default(T);             for (var i = 0; i < ReplayTimes; i++)             {                 ret = filter(dbCmd);             }             return ret;         }         finally         {             DisposeCommand(dbCmd);             OrmLiteConfig.DialectProvider = holdProvider;         }     } }  OrmLiteConfig.ExecFilter = new ReplayOrmLiteExecFilter { ReplayTimes = 3 };  using (var db = OpenDbConnection()) {     db.DropAndCreateTable<PocoTable>();     db.Insert(new PocoTable { Name = ""Multiplicity"" });      var rowsInserted = db.Count<PocoTable>(x => x.Name == ""Multiplicity""); //3 } Mockable extension methods The Result Filters also lets you easily mock results and avoid hitting the database, typically useful in Unit Testing Services to mock OrmLite API's directly instead of using a repository, e.g: using (new OrmLiteResultsFilter {     PrintSql = true,     SingleResult = new Person {        Id = 1, FirstName = ""Mocked"", LastName = ""Person"", Age = 100      }, }) {     db.Single<Person>(x => x.Age == 42).FirstName // Mocked     db.Single(db.From<Person>().Where(x => x.Age == 42)).FirstName // Mocked     db.Single<Person>(new { Age = 42 }).FirstName // Mocked     db.Single<Person>(""Age = @age"", new { age = 42 }).FirstName // Mocked } More examples showing how to mock different API's including support for nesting available in MockAllApiTests.cs String Filter There's also a specific filter for strings available which allows you to apply custom sanitization on String fields, e.g. you can ensure all strings are right trimmed with: OrmLiteConfig.StringFilter = s => s.TrimEnd();  db.Insert(new Poco { Name = ""Value with trailing   "" }); db.Select<Poco>().First().Name // ""Value with trailing"" Pluggable Complex Type Serializers Pluggable serialization lets you specify different serialization strategies of Complex Types for each available RDBMS provider, e.g: //ServiceStack's JSON and JSV Format SqliteDialect.Provider.StringSerializer = new JsvStringSerializer();        PostgreSqlDialect.Provider.StringSerializer = new JsonStringSerializer(); //.NET's XML and JSON DataContract serializers SqlServerDialect.Provider.StringSerializer = new DataContractSerializer(); MySqlDialect.Provider.StringSerializer = new JsonDataContractSerializer(); //.NET XmlSerializer OracleDialect.Provider.StringSerializer = new XmlSerializableSerializer(); You can also provide a custom serialization strategy by implementing IStringSerializer. By default all dialects use the existing JsvStringSerializer, except for PostgreSQL which due to its built-in support for JSON, uses the JSON format by default. Global Insert / Update Filters Similar to interceptors in some heavy ORM's, Insert and Update filters get fired just before any INSERT or UPDATE operation using OrmLite's typed API's (i.e. not dynamic SQL or partial updates using anon types). This functionality can be used for easily auto-maintaining Audit information for your POCO data models, e.g: public interface IAudit  {     DateTime CreatedDate { get; set; }     DateTime ModifiedDate { get; set; }     string ModifiedBy { get; set; } }  OrmLiteConfig.InsertFilter = (dbCmd, row) => {     var auditRow = row as IAudit;     if (auditRow != null)         auditRow.CreatedDate = auditRow.ModifiedDate = DateTime.UtcNow; };  OrmLiteConfig.UpdateFilter = (dbCmd, row) => {     var auditRow = row as IAudit;     if (auditRow != null)         auditRow.ModifiedDate = DateTime.UtcNow; }; Which will ensure that the CreatedDate and ModifiedDate fields are populated on every insert and update. Validation Example The filters can also be used for validation where throwing an exception will prevent the operation and bubble the exception, e.g: OrmLiteConfig.InsertFilter = OrmLiteConfig.UpdateFilter = (dbCmd, row) => {     var auditRow = row as IAudit;     if (auditRow != null && auditRow.ModifiedBy == null)         throw new ArgumentNullException(""ModifiedBy""); };  try {     db.Insert(new AuditTable()); } catch (ArgumentNullException) {    //throws ArgumentNullException }  db.Insert(new AuditTable { ModifiedBy = ""Me!"" }); //succeeds Custom SQL Customizations A number of new hooks are available to provide more flexibility when creating and dropping your RDBMS tables. CustomSelect Attribute The new [CustomSelect] can be used to define properties you want populated from a Custom SQL Function or Expression instead of a normal persisted column, e.g: public class Block {     public int Id { get; set; }     public int Width { get; set; }     public int Height { get; set; }      [CustomSelect(""Width * Height"")]     public int Area { get; set; }      [Default(OrmLiteVariables.SystemUtc)]     public DateTime CreatedDate { get; set; }      [CustomSelect(""FORMAT(CreatedDate, 'yyyy-MM-dd')"")]     public string DateFormat { get; set; } }  db.Insert(new Block { Id = 1, Width = 10, Height = 5 });  var block = db.SingleById<Block>(1);  block.Area.Print(); //= 50  block.DateFormat.Print(); //= 2016-06-08 (SQL Server) Custom Field Declarations The [CustomField] attribute can be used for specifying custom field declarations in the generated Create table DDL statements, e.g: public class PocoTable {     public int Id { get; set; }      [CustomField(""CHAR(20)"")]     public string CharColumn { get; set; }      [CustomField(""DECIMAL(18,4)"")]     public decimal? DecimalColumn { get; set; } }  db.CreateTable<PocoTable>(); Generates and executes the following SQL: CREATE TABLE ""PocoTable""  (   ""Id"" INTEGER PRIMARY KEY,    ""CharColumn"" CHAR(20) NULL,    ""DecimalColumn"" DECIMAL(18,4) NULL  );  Pre / Post Custom SQL Hooks when Creating and Dropping tables Pre / Post Custom SQL Hooks allow you to inject custom SQL before and after tables are created or dropped, e.g: [PostCreateTable(""INSERT INTO TableWithSeedData (Name) VALUES ('Foo');"" +                  ""INSERT INTO TableWithSeedData (Name) VALUES ('Bar');"")] public class TableWithSeedData {     [AutoIncrement]     public int Id { get; set; }     public string Name { get; set; } } Which like other ServiceStack attributes, can also be added dynamically, e.g: typeof(TableWithSeedData)     .AddAttributes(new PostCreateTableAttribute(         ""INSERT INTO TableWithSeedData (Name) VALUES ('Foo');"" +         ""INSERT INTO TableWithSeedData (Name) VALUES ('Bar');"")); Custom SQL Hooks also allow executing custom SQL before and after a table has been created or dropped, i.e: [PreCreateTable(runSqlBeforeTableCreated)] [PostCreateTable(runSqlAfterTableCreated)] [PreDropTable(runSqlBeforeTableDropped)] [PostDropTable(runSqlAfterTableDropped)] public class Table {} Untyped API support The IUntypedApi interface is useful for when you only have access to a late-bound object runtime type which is accessible via db.CreateTypedApi, e.g: public class BaseClass {     public int Id { get; set; } }  public class Target : BaseClass {     public string Name { get; set; } }  var row = (BaseClass)new Target { Id = 1, Name = ""Foo"" };  var useType = row.GetType(); var typedApi = db.CreateTypedApi(useType);  db.DropAndCreateTables(useType);  typedApi.Save(row);  var typedRow = db.SingleById<Target>(1); typedRow.Name //= Foo  var updateRow = (BaseClass)new Target { Id = 1, Name = ""Bar"" };  typedApi.Update(updateRow);  typedRow = db.SingleById<Target>(1); typedRow.Name //= Bar  typedApi.Delete(typedRow, new { Id = 1 });  typedRow = db.SingleById<Target>(1); //= null T4 Template Support OrmLite's T4 Template are useful in database-first development or when wanting to use OrmLite with an existing RDBMS by automatically generating POCO's and strong-typed wrappers for executing stored procedures. OrmLite's T4 support can be added via NuGet with: PM> Install-Package ServiceStack.OrmLite.T4  Typed SqlExpressions with Custom SQL APIs OrmLite's Expression support satisfies the most common RDBMS queries with a strong-typed API. For more complex queries you can easily fall back to raw SQL where the Custom SQL API's let you to map custom SqlExpressions into different responses: var q = db.From<Person>()           .Where(x => x.Age < 50)           .Select(""*""); List<Person> results = db.SqlList<Person>(q);  List<Person> results = db.SqlList<Person>(     ""SELECT * FROM Person WHERE Age < @age"", new { age=50});  List<string> results = db.SqlColumn<string>(db.From<Person>().Select(x => x.LastName)); List<string> results = db.SqlColumn<string>(""SELECT LastName FROM Person"");  HashSet<int> results = db.ColumnDistinct<int>(db.From<Person>().Select(x => x.Age)); HashSet<int> results = db.ColumnDistinct<int>(""SELECT Age FROM Person"");  var q = db.From<Person>()           .Where(x => x.Age < 50)           .Select(Sql.Count(""*"")); int result = db.SqlScalar<int>(q); int result = db.SqlScalar<int>(""SELCT COUNT(*) FROM Person WHERE Age < 50""); Custom Insert and Updates Db.ExecuteSql(""INSERT INTO page_stats (ref_id, fav_count) VALUES (@refId, @favCount)"",               new { refId, favCount })  //Async: Db.ExecuteSqlAsync(""UPDATE page_stats SET view_count = view_count + 1 WHERE id = @id"", new { id }) Stored Procedures using Custom Raw SQL API's The Raw SQL API's provide a convenient way for mapping results of any Custom SQL like executing Stored Procedures: List<Poco> results = db.SqlList<Poco>(""EXEC GetAnalyticsForWeek 1""); List<Poco> results = db.SqlList<Poco>(     ""EXEC GetAnalyticsForWeek @weekNo"", new { weekNo = 1 });  List<int> results = db.SqlList<int>(""EXEC GetTotalsForWeek 1""); List<int> results = db.SqlList<int>(     ""EXEC GetTotalsForWeek @weekNo"", new { weekNo = 1 });  int result = db.SqlScalar<int>(""SELECT 10""); Stored Procedures with output params The SqlProc API provides even greater customization by letting you modify the underlying ADO.NET Stored Procedure call by returning a prepared IDbCommand allowing for advanced customization like setting and retriving OUT parameters, e.g: string spSql = @""DROP PROCEDURE IF EXISTS spSearchLetters;     CREATE PROCEDURE spSearchLetters (IN pLetter varchar(10), OUT pTotal int)     BEGIN         SELECT COUNT(*) FROM LetterFrequency WHERE Letter = pLetter INTO pTotal;         SELECT * FROM LetterFrequency WHERE Letter = pLetter;     END"";  db.ExecuteSql(spSql);  using (var cmd = db.SqlProc(""spSearchLetters"", new { pLetter = ""C"" })) {     var pTotal = cmd.AddParam(""pTotal"", direction: ParameterDirection.Output);      var results = cmd.ConvertToList<LetterFrequency>();     var total = pTotal.Value; } An alternative approach is to use SqlList which lets you use a filter to customize a Stored Procedure or any other command type, e.g: IDbDataParameter pTotal = null; var results = db.SqlList<LetterFrequency>(""spSearchLetters"", cmd => {         cmd.CommandType = CommandType.StoredProcedure;         cmd.AddParam(""pLetter"", ""C"");         pTotal = cmd.AddParam(""pTotal"", direction: ParameterDirection.Output);     }); var total = pTotal.Value; More examples can be found in SqlServerProviderTests. New Foreign Key attribute for referential actions on Update/Deletes Creating a foreign key in OrmLite can be done by adding [References(typeof(ForeignKeyTable))] on the relation property, which will result in OrmLite creating the Foreign Key relationship when it creates the DB table with db.CreateTable<Poco>. @brainless83 has extended this support further by adding more finer-grain options and behaviours with the new [ForeignKey] attribute which will now let you specify the desired behaviour when deleting or updating related rows in Foreign Key tables. An example of a table with all the different options: public class TableWithAllCascadeOptions {     [AutoIncrement] public int Id { get; set; }      [References(typeof(ForeignKeyTable1))]     public int SimpleForeignKey { get; set; }      [ForeignKey(typeof(ForeignKeyTable2), OnDelete = ""CASCADE"", OnUpdate = ""CASCADE"")]     public int? CascadeOnUpdateOrDelete { get; set; }      [ForeignKey(typeof(ForeignKeyTable3), OnDelete = ""NO ACTION"")]     public int? NoActionOnCascade { get; set; }      [Default(typeof(int), ""17"")]     [ForeignKey(typeof(ForeignKeyTable4), OnDelete = ""SET DEFAULT"")]     public int SetToDefaultValueOnDelete { get; set; }      [ForeignKey(typeof(ForeignKeyTable5), OnDelete = ""SET NULL"")]     public int? SetToNullOnDelete { get; set; } } System Variables and Default Values To provide richer support for non-standard default values, each RDBMS Dialect Provider contains a OrmLiteDialectProvider.Variables placeholder dictionary for storing common, but non-standard RDBMS functionality. We can use this to declaratively define non-standard default values that works across all supported RDBMS's like automatically populating a column with the RDBMS UTC Date when Inserted with a default(T) Value: public class Poco {     [Default(OrmLiteVariables.SystemUtc)]  //= {SYSTEM_UTC}     public DateTime CreatedTimeUtc { get; set; } } OrmLite variables need to be surrounded with {} braces to identify that it's a placeholder variable, e.g {SYSTEM_UTC}. The ForeignKeyTests show the resulting behaviour with each of these configurations in more detail. Note: Only supported on RDBMS's with foreign key/referential action support, e.g. Sql Server, PostgreSQL, MySQL. Otherwise they're ignored. Multi nested database connections We now support multiple nested database connections so you can now trivially use OrmLite to access multiple databases on different connections. The OrmLiteConnectionFactory class has been extended to support named connections which allows you to conveniently define all your db connections when you register it in your IOC and access them with the named property when you use them. A popular way of scaling RDBMS's is to create a Master / Shard setup where datasets for queries that span entire system are kept in the master database, whilst context-specific related data can be kept together in an isolated shard. This feature makes it trivial to maintain multiple separate db shards with a master database in a different RDBMS. Here's an (entire source code) sample of the code needed to define, and populate a Master/Shard setup. Sqlite can create DB shards on the fly so only the blank SqlServer master database needed to be created out-of-band: Sharding 1000 Robots into 10 Sqlite DB shards - referencing each in a Master SqlServer RDBMS public class MasterRecord {     public Guid Id { get; set; }     public int RobotId { get; set; }     public string RobotName { get; set; }     public DateTime? LastActivated { get; set; } }  public class Robot {     public int Id { get; set; }     public string Name { get; set; }     public bool IsActivated { get; set; }     public long CellCount { get; set; }     public DateTime CreatedDate { get; set; } }  const int NoOfShards = 10; const int NoOfRobots = 1000;  var dbFactory = new OrmLiteConnectionFactory(     ""Data Source=host;Initial Catalog=RobotsMaster;Integrated Security=SSPI"",  //Connection String     SqlServerDialect.Provider);   dbFactory.Run(db => db.CreateTable<MasterRecord>(overwrite:false));  NoOfShards.Times(i => {     var namedShard = ""robots-shard"" + i;     dbFactory.RegisterConnection(namedShard,          ""~/App_Data/{0}.sqlite"".Fmt(shardId).MapAbsolutePath(),                //Connection String         SqliteDialect.Provider);      dbFactory.OpenDbConnection(namedShard).Run(db => db.CreateTable<Robot>(overwrite:false)); });  var newRobots = NoOfRobots.Times(i => //Create 1000 Robots     new Robot { Id=i, Name=""R2D""+i, CreatedDate=DateTime.UtcNow, CellCount=DateTime.Now.ToUnixTimeMs() % 100000 });  foreach (var newRobot in newRobots)  {     using (IDbConnection db = dbFactory.OpenDbConnection()) //Open Connection to Master DB      {         db.Insert(new MasterRecord { Id = Guid.NewGuid(), RobotId = newRobot.Id, RobotName = newRobot.Name });         using (IDbConnection robotShard = dbFactory.OpenDbConnection(""robots-shard""+newRobot.Id % NoOfShards)) //Shard         {             robotShard.Insert(newRobot);         }     } } Using the SQLite Manager Firefox extension we can peek at one of the created shards to see 100 Robots in each shard. This is the dump of robots-shard0.sqlite: As expected each shard has every 10th robot inside. Code-first Customer & Order example with complex types on POCO as text blobs Below is a complete stand-alone example. No other config or classes is required for it to run. It's also available as a stand-alone unit test. public enum PhoneType {     Home,     Work,     Mobile, }  public enum AddressType {     Home,     Work,     Other, }  public class Address {     public string Line1 { get; set; }     public string Line2 { get; set; }     public string ZipCode { get; set; }     public string State { get; set; }     public string City { get; set; }     public string Country { get; set; } }  public class Customer {     public Customer() {         this.PhoneNumbers = new Dictionary<PhoneType, string>();         this.Addresses = new Dictionary<AddressType, Address>();     }      [AutoIncrement] // Creates Auto primary key     public int Id { get; set; }      public string FirstName { get; set; }     public string LastName { get; set; }      [Index(Unique = true)] // Creates Unique Index     public string Email { get; set; }      public Dictionary<PhoneType, string> PhoneNumbers { get; set; }  //Blobbed     public Dictionary<AddressType, Address> Addresses { get; set; }  //Blobbed     public DateTime CreatedAt { get; set; } }  public class Order {      [AutoIncrement]     public int Id { get; set; }      [References(typeof(Customer))]      //Creates Foreign Key     public int CustomerId { get; set; }      [References(typeof(Employee))]      //Creates Foreign Key     public int EmployeeId { get; set; }      public Address ShippingAddress { get; set; } //Blobbed (no Address table)      public DateTime? OrderDate { get; set; }     public DateTime? RequiredDate { get; set; }     public DateTime? ShippedDate { get; set; }     public int? ShipVia { get; set; }     public decimal Freight { get; set; }     public decimal Total { get; set; } }  public class OrderDetail {      [AutoIncrement]     public int Id { get; set; }      [References(typeof(Order))] //Creates Foreign Key     public int OrderId { get; set; }      public int ProductId { get; set; }     public decimal UnitPrice { get; set; }     public short Quantity { get; set; }     public decimal Discount { get; set; } }  public class Employee {     public int Id { get; set; }     public string Name { get; set; } }  public class Product {     public int Id { get; set; }     public string Name { get; set; }     public decimal UnitPrice { get; set; } }  //Setup SQL Server Connection Factory var dbFactory = new OrmLiteConnectionFactory(     @""Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\App_Data\Database1.mdf;Integrated Security=True;User Instance=True"",     SqlServerDialect.Provider);  //Use in-memory Sqlite DB instead //var dbFactory = new OrmLiteConnectionFactory( //    "":memory:"", false, SqliteDialect.Provider);  //Non-intrusive: All extension methods hang off System.Data.* interfaces using (IDbConnection db = Config.OpenDbConnection()) {   //Re-Create all table schemas:   db.DropTable<OrderDetail>();   db.DropTable<Order>();   db.DropTable<Customer>();   db.DropTable<Product>();   db.DropTable<Employee>();    db.CreateTable<Employee>();   db.CreateTable<Product>();   db.CreateTable<Customer>();   db.CreateTable<Order>();   db.CreateTable<OrderDetail>();    db.Insert(new Employee { Id = 1, Name = ""Employee 1"" });   db.Insert(new Employee { Id = 2, Name = ""Employee 2"" });   var product1 = new Product { Id = 1, Name = ""Product 1"", UnitPrice = 10 };   var product2 = new Product { Id = 2, Name = ""Product 2"", UnitPrice = 20 };   db.Save(product1, product2);    var customer = new Customer {       FirstName = ""Orm"",       LastName = ""Lite"",       Email = ""ormlite@servicestack.net"",       PhoneNumbers =       {           { PhoneType.Home, ""555-1234"" },           { PhoneType.Work, ""1-800-1234"" },           { PhoneType.Mobile, ""818-123-4567"" },       },       Addresses =       {           { AddressType.Work, new Address {              Line1 = ""1 Street"", Country = ""US"", State = ""NY"", City = ""New York"", ZipCode = ""10101"" }            },       },       CreatedAt = DateTime.UtcNow,   };    var customerId = db.Insert(customer, selectIdentity: true); //Get Auto Inserted Id   customer = db.Single<Customer>(new { customer.Email }); //Query   Assert.That(customer.Id, Is.EqualTo(customerId));    //Direct access to System.Data.Transactions:   using (IDbTransaction trans = db.OpenTransaction(IsolationLevel.ReadCommitted))   {       var order = new Order {           CustomerId = customer.Id,           EmployeeId = 1,           OrderDate = DateTime.UtcNow,           Freight = 10.50m,           ShippingAddress = new Address {              Line1 = ""3 Street"", Country = ""US"", State = ""NY"", City = ""New York"", ZipCode = ""12121"" },       };       db.Save(order); //Inserts 1st time        //order.Id populated on Save().        var orderDetails = new[] {           new OrderDetail {               OrderId = order.Id,               ProductId = product1.Id,               Quantity = 2,               UnitPrice = product1.UnitPrice,           },           new OrderDetail {               OrderId = order.Id,               ProductId = product2.Id,               Quantity = 2,               UnitPrice = product2.UnitPrice,               Discount = .15m,           }       };        db.Save(orderDetails);        order.Total = orderDetails.Sum(x => x.UnitPrice * x.Quantity * x.Discount) + order.Freight;        db.Save(order); //Updates 2nd Time        trans.Commit();   } } Running this against a SQL Server database will yield the results below: Notice the POCO types are stored in the very fast and Versatile JSV Format which although hard to do - is actually more compact, human and parser-friendly than JSON :) Ignoring DTO Properties You may use the [Ignore] attribute to denote DTO properties that are not fields in the table. This will force the SQL generation to ignore that property. More Examples In its simplest useage, OrmLite can persist any POCO type without any attributes required: public class SimpleExample {     public int Id { get; set; }     public string Name { get; set; } }  //Set once before use (i.e. in a static constructor). OrmLiteConfig.DialectProvider = SqliteDialect.Provider;  using (IDbConnection db = ""/path/to/db.sqlite"".OpenDbConnection()) {     db.CreateTable<SimpleExample>(true);     db.Insert(new SimpleExample { Id=1, Name=""Hello, World!""});     var rows = db.Select<SimpleExample>();      Assert.That(rows, Has.Count(1));     Assert.That(rows[0].Id, Is.EqualTo(1)); } To get a better idea of the features of OrmLite lets walk through a complete example using sample tables from the Northwind database. _ (Full source code for this example is available here.) _ So with no other configuration using only the classes below: [Alias(""Shippers"")] public class Shipper     : IHasId<int> {     [AutoIncrement]     [Alias(""ShipperID"")]     public int Id { get; set; }      [Required]     [Index(Unique = true)]     [StringLength(40)]     public string CompanyName { get; set; }      [StringLength(24)]     public string Phone { get; set; }      [References(typeof(ShipperType))]     public int ShipperTypeId { get; set; } }  [Alias(""ShipperTypes"")] public class ShipperType     : IHasId<int> {     [AutoIncrement]     [Alias(""ShipperTypeID"")]     public int Id { get; set; }      [Required]     [Index(Unique = true)]     [StringLength(40)]     public string Name { get; set; } }  public class SubsetOfShipper {     public int ShipperId { get; set; }     public string CompanyName { get; set; } }  public class ShipperTypeCount {     public int ShipperTypeId { get; set; }     public int Total { get; set; } } Creating tables Creating tables is a simple 1-liner: using (IDbConnection db = "":memory:"".OpenDbConnection()) {     db.CreateTable<ShipperType>();     db.CreateTable<Shipper>(); }  /* In debug mode the line above prints: DEBUG: CREATE TABLE ""ShipperTypes""  (   ""ShipperTypeID"" INTEGER PRIMARY KEY AUTOINCREMENT,    ""Name"" VARCHAR(40) NOT NULL  ); DEBUG: CREATE UNIQUE INDEX uidx_shippertypes_name ON ""ShipperTypes"" (""Name"" ASC); DEBUG: CREATE TABLE ""Shippers""  (   ""ShipperID"" INTEGER PRIMARY KEY AUTOINCREMENT,    ""CompanyName"" VARCHAR(40) NOT NULL,    ""Phone"" VARCHAR(24) NULL,    ""ShipperTypeId"" INTEGER NOT NULL,     CONSTRAINT ""FK_Shippers_ShipperTypes"" FOREIGN KEY (""ShipperTypeId"") REFERENCES ""ShipperTypes"" (""ShipperID"")  ); DEBUG: CREATE UNIQUE INDEX uidx_shippers_companyname ON ""Shippers"" (""CompanyName"" ASC); */ Transaction Support As we have direct access to IDbCommand and friends - playing with transactions is easy:   var trainsType = new ShipperType { Name = ""Trains"" };   var planesType = new ShipperType { Name = ""Planes"" };    //Playing with transactions   using (IDbTransaction dbTrans = db.OpenTransaction())   {       db.Save(trainsType);       db.Save(planesType);        dbTrans.Commit();   }    using (IDbTransaction dbTrans = db.OpenTransaction(IsolationLevel.ReadCommitted))   {       db.Insert(new ShipperType { Name = ""Automobiles"" });       Assert.That(db.Select<ShipperType>(), Has.Count.EqualTo(3));   }     Assert.That(db.Select<ShipperType>(), Has.Count(2)); CRUD Operations No ORM is complete without the standard crud operations:     //Performing standard Insert's and Selects   db.Insert(new Shipper { CompanyName = ""Trains R Us"", Phone = ""555-TRAINS"", ShipperTypeId = trainsType.Id });   db.Insert(new Shipper { CompanyName = ""Planes R Us"", Phone = ""555-PLANES"", ShipperTypeId = planesType.Id });   db.Insert(new Shipper { CompanyName = ""We do everything!"", Phone = ""555-UNICORNS"", ShipperTypeId = planesType.Id });    var trainsAreUs = db.Single<Shipper>(""ShipperTypeId = @Id"", new { trainsType.Id });   Assert.That(trainsAreUs.CompanyName, Is.EqualTo(""Trains R Us""));   Assert.That(db.Select<Shipper>(""CompanyName = @company OR Phone = @phone"",          new { company = ""Trains R Us"", phone = ""555-UNICORNS"" }), Has.Count.EqualTo(2));   Assert.That(db.Select<Shipper>(""ShipperTypeId = @Id"", new { planesType.Id }), Has.Count.EqualTo(2));    //Lets update a record   trainsAreUs.Phone = ""666-TRAINS"";   db.Update(trainsAreUs);           Assert.That(db.SingleById<Shipper>(trainsAreUs.Id).Phone, Is.EqualTo(""666-TRAINS""));    //Then make it dissappear   db.Delete(trainsAreUs);           Assert.That(db.SingleById<Shipper>(trainsAreUs.Id), Is.Null);    //And bring it back again   db.Insert(trainsAreUs); Performing custom queries And with access to raw sql when you need it - the database is your oyster :)     var partialColumns = db.Select<SubsetOfShipper>(typeof(Shipper),          ""ShipperTypeId = @Id"", new { planesType.Id });     Assert.That(partialColumns, Has.Count.EqualTo(2));      //Select into another POCO class that matches sql     var rows = db.Select<ShipperTypeCount>(       ""SELECT ShipperTypeId, COUNT(*) AS Total FROM Shippers GROUP BY ShipperTypeId ORDER BY COUNT(*)"");      Assert.That(rows, Has.Count.EqualTo(2));     Assert.That(rows[0].ShipperTypeId, Is.EqualTo(trainsType.Id));     Assert.That(rows[0].Total, Is.EqualTo(1));     Assert.That(rows[1].ShipperTypeId, Is.EqualTo(planesType.Id));     Assert.That(rows[1].Total, Is.EqualTo(2));       //And finally lets quickly clean up the mess we've made:     db.DeleteAll<Shipper>();     db.DeleteAll<ShipperType>();      Assert.That(db.Select<Shipper>(), Has.Count.EqualTo(0));     Assert.That(db.Select<ShipperType>(), Has.Count.EqualTo(0)); Limitations Single Primary Key For simplicity, and to be able to have the same POCO class persisted in db4o, memcached, redis or on the filesystem (i.e. providers included in ServiceStack), each model must have a single primary key, by convention OrmLite expects it to be Id although you use [Alias(""DbFieldName"")] attribute it map it to a column with a different name or use the [PrimaryKey] attribute to tell OrmLite to use a different property for the primary key. You can still SELECT from these tables, you will just be unable to make use of APIs that rely on it, e.g. Update or Delete where the filter is implied (i.e. not specified), all the APIs that end with ById, etc. Optimize LIKE Searches One of the primary goals of OrmLite is to expose and RDBMS agnostic Typed API Surface which will allow you to easily switch databases, or access multiple databases at the same time with the same behavior. One instance where this can have an impact is needing to use UPPER() in LIKE searches to enable case-insensitive LIKE queries across all RDBMS. The drawback of this is that LIKE Queries are not able to use any existing RDBMS indexes. We can disable this feature and return to the default RDBMS behavior with: OrmLiteConfig.StripUpperInLike = true; Allowing all LIKE Searches in OrmLite or AutoQuery to use any available RDBMS Index. Oracle Provider Notes The Oracle provider requires an installation of Oracle's ODP.NET. It has been tested with Oracle 11g but should work with 10g and perhaps even older versions. It has not been tested with Oracle 12c and does not support any new 12c features such as AutoIncrement keys. It also does not support the new Oracle fully-managed client. By default the Oracle provider stores Guids in the database as character strings and when generating SQL it quotes only table and column names that are reserved words in Oracle. That requires that you use the same quoting if you code your own SQL. Both of these options can be overridden, but overriding them will cause problems: the provider can store Guids as raw(16) but it cannot read them. The Oracle provider uses Oracle sequences to implement AutoIncrement columns and it queries the sequence to get a new value in a separate database call. You can override the automatically generated sequence name with a [Sequence(""name"")] attribute on a field. The Sequence attribute implies [AutoIncrement], but you can use both on the same field. Since Oracle has a very restrictive 30 character limit on names, it is strongly suggested that you use short entity class and field names or aliases, remembering that indexes and foreign keys get compound names. If you use long names, the provider will squash them to make them compliant with the restriction. The algorithm used is to remove all vowels (""aeiouy"") and if still too long then every fourth letter starting with the third one and finally if still too long to truncate the name. You must apply the same squashing algorithm if you are coding your own SQL. The previous version of ServiceStack.OrmLite.Oracle used System.Data.OracleClient to talk to the database. Microsoft has deprecated that client, but it does still mostly work if you construct the Oracle provider like this: OracleOrmLiteDialectProvider.Instance = new OracleOrmLiteDialectProvider( compactGuid: false, quoteNames: false, clientProvider: OracleOrmLiteDialectProvider.MicrosoftProvider);   DateTimeOffset fields and, in locales that use a comma to separate the fractional part of a floating point number, some aspects of using floating point numbers, do not work with System.Data.OracleClient. Community Resources OrmLite and Redis: New alternatives for handling db communication by @abtosoftware Object Serialization as Step Towards Normalization by @ 82unpluggd Creating a Data Access Layer using OrmLite by Lydon Bergin Code Generation using ServiceStack.OrmLite and T4 Text templates by @jokecamp Simple ServiceStack OrmLite Example by @robrtc OrmLite Blobbing done with NHibernate and Serialized JSON by @philliphaydon Creating An ASP.NET MVC Blog With ServiceStack.OrmLite by @peterbromberg Other notable Micro ORMs for .NET Many performance problems can be mitigated and a lot of use-cases can be simplified without the use of a heavyweight ORM, and their config, mappings and infrastructure. As performance is the most important feature we can recommend the following list, each with their own unique special blend of features. Dapper - by @samsaffron and @marcgravell The current performance king, supports both POCO and dynamic access, fits in a single class. Put in production to solve StackOverflow's DB Perf issues. Requires .NET 4. PetaPoco - by @toptensoftware Fast, supports dynamics, expandos and typed POCOs, fits in a single class, runs on .NET 3.5 and Mono. Includes optional T4 templates for POCO table generation. Massive - by @robconery Fast, supports dynamics and expandos, smart use of optional params to provide a wrist-friendly api, fits in a single class. Multiple RDBMS support. Requires .NET 4. Simple.Data - by @markrendle A little slower than above ORMS, most wrist-friendly courtesy of a dynamic API, multiple RDBMS support inc. Mongo DB. Requires .NET 4. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ServiceStack/ServiceStack.OrmLite"	"Light, simple and fast convention-based POCO ORM"	"true"
"ORM"	"Massive"	"https://github.com/FransBouma/Massive"	"A small, happy, data access tool that will love you forever."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1547"	"113"	"318"	"GitHub - FransBouma/Massive: A small, happy, dynamic MicroORM for .NET that will love you forever. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 113 Star 1,547 Fork 318 FransBouma/Massive Code Issues 7 Pull requests 0 Wiki Pulse Graphs A small, happy, dynamic MicroORM for .NET that will love you forever. 177 commits 4 branches 0 releases 32 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: v2.0 Switch branches/tags Branches Tags Oracle_CommandPropertyControl pr/260 v1.0 v2.0 Nothing to show Nothing to show New pull request Latest commit 9e77757 Jan 27, 2016 FransBouma Merge pull request #261 from FransBouma/pr/260 … Pr 260 Permalink Failed to load latest commit information. src Updated code with better type handling Jan 27, 2016 tests Updated code with better type handling Jan 27, 2016 .gitattributes Create .gitattributes Apr 24, 2013 .gitignore Forgot 2 files, updated gitignore. Mar 13, 2015 LICENSE.txt Added license to all code files, updated license.txt with a bit more … Dec 28, 2015 README.markdown Updated readme with npsql info. Corrections to code from #254 Jan 15, 2016 README.markdown Masssive, a small, happy, dynamic MicroORM for .NET that will love you forever Massive was started by Rob Conery and has been transfered to Frans Bouma on March 4th, 2015. It's a small MicroORM based on the Expando or dynamic type and allows you to work with your database with almost no effort. The design is based on the idea that the code provided to you in this repository is a start: you get up and running in no-time and from there edit and alter it as you see fit. Current Status Massive is currently on v2.0. To obtain the old v1.0 code, please select the v1.0 branch in the GitHub menu or click here. Installation To use Massive in your project simply download the following files from the repository's src folder: Massive.Shared.cs Massive.YourDatabase.cs, e.g. Massive.SqlServer.cs for SQL Server Massive.Shared.Async.cs, if you want to use the Massive API asynchronously. Requires .NET 4.5 or higher. Due to its design, all files share the same namespace. If you need to use more than one database in your project, you have to change the namespace of the files and use per database a version of the Massive.Shared.* files. Requirements Massive has no external direct dependencies, just get the code, compile it with your project and enjoy. It does have an indirect dependency, namely on the ADO.NET provider of the database used. The ADO.NET provider is obtained through .NET's DbProviderFactory system. This requires that the ADO.NET provider has been setup properly so .NET can find the factory needed. The following ADO.NET providers are supported out of the box. SQL Server. The ADO.NET provider ships with .NET. Oracle: ODP.NET. The installer for ODP.NET v12c installs both a full managed ADO.NET provider and a wrapper around its Java based Client Level Interface (CLI). By default Massive uses the latter, using the factory name Oracle.DataAccess.Client. If you want to use the Managed provider, please change the value in property DbProviderFactoryName in the Massive.Oracle.cs file around line 297 to Oracle.ManagedDataAccess.Client. This requires .NET 4.0 or higher. PostgreSQL: Npgsql. The Npgsql distribution contains an installer, offered at the 'releases' section. This installer will add the required DbProviderFactory reference and will add the npgsql dll to the gac. SQLite: Massive uses the official SQLite .NET provider. Please read the official documentation on that provider to get started. Migrating from v1.0 to v2.0 If you're using v1.0 currently and want to migrate to v2.0, please take a look at What's new in v2.0 page for more details about whether you'll run into the changes made. In general the breaking changes will be minor, if any. What's new in v2.0 Besides some changes as documented in the What's new in v2.0, the following features / additions are new: Async / Await support. Not all supported databases support asynchronous data-access under the hood, but the Massive API at least allows you to work with the code asynchronously. Full Async is supported by the ADO.NET providers of SQL Server and Npgsql (3.x). ODP.NET (Oracle) doesn't support async under the hood so using the Async API with Oracle will still use synchronous data-access under the hood (through the default DbCommand fall back code). SQLite's ADO.NET provider does support async using specific types but Massive doesn't support these. Shared code. In v1.0 code which was effectively the same among all supported databases was copy/pasted, in v2.0 Massive uses partial classes and shares as much code as possible among all supported databases. Unit Tests. In v1.0 there were no tests but in v2.0 we properly implemented a series of tests to see whether things indeed work the way they do. They can also be used as an example how to get started. Culling of dead code. Usage Note, the following is a work in progress and doesn't contain all the new API methods. It is primarily the original text written by Conery, and I'll update it when I have time. If you're unsure how to use a given method, please look at the tests. Massive is a ""wrapper"" for your DB tables and uses System.Dynamic extensively. If you try to use this with C# 3.5 or below, it will explode and you will be sad. Me too honestly - I like how this doesn't require any DLLs other than what's in the GAC. Yippee. Get a Database. Northwind will work nicely. Add a connection to your database in your web.config (or app.config). Don't forget the providerName! If you don't know what that is - just add providerName = 'System.Data.SqlClient' right after the whole connectionString stuff. Create a class that wraps a table. You can call it whatever you like, but if you want to be cool just name it the same as your table. Query away and have fun Code Please Let's say we have a table named ""Products"". You create a class like this: public class Products:DynamicModel {     //you don't have to specify the connection - Massive will use the first one it finds in your config     public Products():base(""northwind"", ""products"",""productid"") {} } You could also just instantiate it inline, as needed: var tbl = new DynamicModel(""northwind"", tableName:""Products"", primaryKeyField:""ProductID""); Or ignore the object hierarchy altogether: Massive.DB.Current.Query(...); Now you can query thus: var table = new Products(); //grab all the products var products = table.All(); //just grab from category 4. This uses named parameters var productsFour = table.All(columns: ""ProductName as Name"", where: ""WHERE categoryID=@0"",args: 4); That works, but Massive is ""dynamic"" - which means that it can figure a lot of things out on the fly. That query above can be rewritten like this: dynamic table = new Products(); //""dynamic"" is important here - don't use ""var""! var productsFour = table.Find(CategoryID:4,columns:""ProductName""); The ""Find"" method doesn't exist, but since Massive is dynamic it will try to infer what you mean by using DynamicObject's TryInvokeMember. See the source for more details. There's more on the dynamic query stuff down below. You can also run ad-hoc queries as needed: var result = tbl.Query(""SELECT * FROM Categories""); This will pull categories and enumerate the results - streaming them as opposed to bulk-fetching them (thanks to Jeroen Haegebaert for the code). If you want to have a paged result set - you can: var result = tbl.Paged(where: ""UnitPrice > 20"", currentPage:2, pageSize: 20); In this example, ALL of the arguments are optional and default to reasonable values. CurrentPage defaults to 1, pageSize defaults to 20, where defaults to nothing. What you get back is a Dynamic with three properties: Items, TotalPages and TotalRecords. Items is a Query which is lazily evaluated and you can enumerate it after casting it to IEnumerable<dynamic>. TotalPages is the total number of pages in the complete result set and TotalRecords is the total number of records in the result set. What's in the Items collection is totally up to you, it's dynamic: meaning that it's malleable and exciting. It will take the shape of whatever you return in your query, and it will have properties and so on. You can assign events to it, you can create delegates on the fly. You can give it chocolate, and it will kiss you. That's pretty much it. One thing I really like is the groovy DSL that Massive uses - it looks just like SQL. If you want, you can use this DSL to query the database: var table = new Products(); var productsThatILike = table.Query(""SELECT ProductName, CategoryName FROM Products INNER JOIN Categories ON Categories.CategoryID = Products.CategoryID WHERE CategoryID = @0"",5); //get down! Some of you might look at that and think it looks suspiciously like inline SQL. It does look sort of like it doesn't it! But I think it reads a bit better than Linq to SQL - it's a bit closer to the mark if you will. Inserts and Updates Massive is built on top of dynamics - so if you send an object to a table, it will get parsed into a query. If that object has a property on it that matches the primary key, Massive will think you want to update something. Unless you tell it specifically to update it. You can send just about anything into the MassiveTransmoQueryfier and it will magically get turned into SQL: var table = new Products(); var poopy = new {ProductName = ""Chicken Fingers""}; //update Product with ProductID = 12 to have a ProductName of ""Chicken Fingers"" table.Update(poopy, 12); This also works if you have a form on your web page with the name ""ProductName"" - then you submit it: var table = new Products(); //update Product with ProductID = 12 to have a ProductName of whatever was submitted via the form table.Update(poopy, Request.Form); Insert works the same way: //pretend we have a class like Products but it's called Categories var table = new Categories(); //do it up - the inserted object will be returned from the query as expando  var inserted = table.Insert(new {CategoryName = ""Buck Fify Stuff"", Description = ""Things I like""}); // the new PK value is in the field specified as PrimaryKeyField in the constructor of Categories.  var newID = inserted.CategoryID; Yippee Skippy! Now we get to the fun part - and one of the reasons I had to spend 150 more lines of code on something you probably won't care about. What happens when we send a whole bunch of goodies to the database at once! var table = new Products(); //OH NO YOU DIDN't just pass in an integer inline without a parameter!  //I think I might have... yes var drinks = table.All(""WHERE CategoryID = 8""); //what we get back here is an IEnumerable < ExpandoObject > - we can go to town foreach(var item in drinks.ToArray()){     //turn them into Haack Snacks     item.CategoryID = 12; } //Let's update these in bulk, in a transaction shall we? table.Save(drinks.ToArray()); Named Argument Query Syntax I recently added the ability to run more friendly queries using Named Arguments and C#4's Method-on-the-fly syntax. Originally this was trying to be like ActiveRecord, but I figured ""C# is NOT Ruby, and Named Arguments can be a lot more clear"". In addition, Mark Rendle's Simple.Data is already doing this so ... why duplicate things? If your needs are more complicated - I would suggest just passing in your own SQL with Query(). //important - must be dynamic dynamic table = new Products();  var drinks = table.FindBy(CategoryID:8); //what we get back here is an IEnumerable < ExpandoObject > - we can go to town foreach(var item in drinks){     Console.WriteLine(item.ProductName); } //returns the first item in the DB for category 8 var first = table.First(CategoryID:8);  //you dig it - the last as sorted by PK var last = table.Last(CategoryID:8);  //you can order by whatever you like var firstButReallyLast = table.First(CategoryID:8,OrderBy:""PK DESC"");  //only want one column? var price = table.First(CategoryID:8,Columns:""UnitPrice"").UnitPrice;  //Multiple Criteria? var items = table.Find(CategoryID:5, UnitPrice:100, OrderBy:""UnitPrice DESC""); Aggregates with Named Arguments You can do the same thing as above for aggregates: var sum = table.Sum(columns:""Price"", CategoryID:5); var avg = table.Avg(columns:""Price"", CategoryID:3); var min = table.Min(columns:""ID""); var max = table.Max(columns:""CreatedOn""); var count = table.Count(); Metadata If you find that you need to know information about your table - to generate some lovely things like ... whatever - just ask for the Schema property. This will query INFORMATION_SCHEMA for you, and you can take a look at DATA_TYPE, DEFAULT_VALUE, etc for whatever system you're running on. In addition, if you want to generate an empty instance of a column - you can now ask for a ""Prototype()"" - which will return all the columns in your table with the defaults set for you (getdate(), raw values, newid(), etc). Factory Constructor One thing that can be useful is to use Massive to just run a quick query. You can do that now by using ""Open()"" which is a static builder on DynamicModel: var db = Massive.DynamicModel.Open(""myConnectionStringName""); You can execute whatever you like at that point. Validations One thing that's always needed when working with data is the ability to stop execution if something isn't right. Massive now has Validations, which are built with the Rails approach in mind: public class Productions:DynamicModel {     public Productions():base(""MyConnectionString"",""Productions"",""ID"") {}     public override void Validate(dynamic item) {         ValidatesPresenceOf(""Title"");         ValidatesNumericalityOf(item.Price);         ValidateIsCurrency(item.Price);         if (item.Price <= 0)             Errors.Add(""Price can't be negative"");     } } The idea here is that Validate() is called prior to Insert/Update. If it fails, an Error collection is populated and an InvalidOperationException is thrown. That simple. With each of the validations above, a message can be passed in. CallBacks Need something to happen after Update/Insert/Delete? Need to halt before save? Massive has callbacks to let you do just that: public class Customers:DynamicModel {     public Customers():base(""MyConnectionString"",""Customers"",""ID"") {}      //Add the person to Highrise CRM when they're added to the system...     public override void Inserted(dynamic item) {         //send them to Highrise         var svc = new HighRiseApi();         svc.AddPerson(...);     } } The callbacks you can use are: Inserted Updated Deleted BeforeDelete BeforeSave Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/FransBouma/Massive"	"A small, happy, data access tool that will love you forever."	"true"
"ORM"	"LINQ to DB"	"https://github.com/linq2db/linq2db"	"The fastest LINQ database access library offering a simple, light, fast, and type-safe layer between your POCO objects and your database."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"448"	"108"	"133"	"GitHub - linq2db/linq2db: Linq to database provider. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 108 Star 448 Fork 133 linq2db/linq2db Code Issues 125 Pull requests 18 Wiki Pulse Graphs Linq to database provider. 1,396 commits 6 branches 15 releases Fetching contributors C# 98.5% PLpgSQL 0.6% PLSQL 0.5% F# 0.2% SQLPL 0.1% Batchfile 0.1% C# PLpgSQL PLSQL F# SQLPL Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bug-assosiation-union bug-group-by-date bug-group-join-count-where join-condition linq master Nothing to show nemerle nemerle-master Release.1.0.7.4 Release.1.0.7.3 Release.1.0.7.2 Release.1.0.7.1 Release.1.0.7 Release.1.0.6 Release.1.0.5 Release.1.0.4.1 Release.1.0.4 Release.1.0.3 Release.1.0.2 Release.1.0.1.1 Release.1.0.0.0 Nothing to show New pull request Latest commit 0485a5a Jun 28, 2016 igor-tkachev committed on GitHub Update README.md Permalink Failed to load latest commit information. Data Added JOIN LITERAL support for PostgreSQL. May 2, 2016 NuGet Added JOIN LITERAL support for PostgreSQL. May 2, 2016 Redist Updated Sybase driver. Mar 14, 2016 Source Fixed SqlServer.Types resolcer. Jun 14, 2016 Tests Updated appveyor.yml. May 14, 2016 packages Update PostgreSQL nuget. May 1, 2016 .editorconfig Copy editorconfig config from bltoolkit Dec 15, 2015 .gitignore Update tests. Nov 1, 2015 MIT-LICENSE.txt Updated license. Mar 16, 2016 Packages.dgml Initialize project. Dec 12, 2011 README.md Update README.md Jun 28, 2016 appveyor.yml Updated appveyor.yml. May 15, 2016 linq2db.4.5.sln Updated test. Apr 4, 2016 linq2db.4.5.sln.DotSettings Implemented QueryHints. Jun 3, 2015 linq2db.Mono.sln Working on Mono support. May 8, 2015 linq2db.Mono.userprefs Working on Mono support. May 8, 2015 linq2db.sln Updated NUnit nuget. May 1, 2016 linq2db.sln.DotSettings Added OracleXmlTable method. Apr 20, 2015 README.md LINQ to DB LINQ to DB is the fastest LINQ database access library offering a simple, light, fast, and type-safe layer between your POCO objects and your database. Architecturally it is one step above micro-ORMs like Dapper, Massive, or PetaPoco, in that you work with LINQ expressions, not with magic strings, while maintaining a thin abstraction layer between your code and the database. Your queries are checked by the C# compiler and allow for easy refactoring. However, it's not as heavy as LINQ to SQL or Entity Framework. There is no change-tracking, so you have to manage that yourself, but on the plus side you get more control and faster access to your data. Visit our blog and see Wiki for more details. Code examples and demos can be found here. Project Build Status Let's get started From NuGet: Install-Package linq2db In your web.config or app.config make sure you have a connection string: <connectionStrings>   <add name=""Northwind""      connectionString = ""Server=.\;Database=Northwind;Trusted_Connection=True;Enlist=False;""      providerName     = ""SqlServer"" /> </connectionStrings> Now let's create a POCO class: using System; using LinqToDB.Mapping;  [Table(Name = ""Products"")] public class Product {   [PrimaryKey, Identity]   public int ProductID { get; set; }    [Column(Name = ""ProductName""), NotNull]   public string Name { get; set; }    // ... other columns ... } At this point LINQ to DB doesn't know how to connect to our database or which POCOs go with what database. All this mapping is done through a DataConnection class: public class DbNorthwind : LinqToDB.Data.DataConnection {   public DbNorthwind() : base(""Northwind"") { }    public ITable<Product> Product { get { return GetTable<Product>(); } }   public ITable<Category> Category { get { return GetTable<Category>(); } }    // ... other tables ... } We call the base constructor with the ""Northwind"" parameter. This parameter has to match the name=""Northwind"" we defined above in our connection string. We also have to register our Product class we defined above to allows us to write LINQ queries. And now let's get some data: using LinqToDB; using LinqToDB.Common;  public static List<Product> All() {   using (var db = new DbNorthwind())   {     var query = from p in db.Product                 where p.ProductID > 25                 orderby p.Name descending                 select p;     return query.ToList();   } } Make sure you always wrap your DataConnection class (in our case DbNorthwind) in a using statement. This is required for proper resource management, like releasing the database connections back into the pool. Selecting Columns Most times we get the entire row from the database: from p in db.Product where p.ProductID == 5 select p; However, sometimes getting all the fields is too wasteful so we want only certain fields, but still use our POCOs; something that is challenging for libraries that rely on object tracking, like LINQ to SQL. from p in db.Product orderby p.Name descending select new Product {   Name = p.Name }; Composing queries Rather than concatenating strings we can 'compose' LINQ expressions. In the example below the final SQL will be different if onlyActive is true or false, or if searchFor is not null. public static List<Product> All(bool onlyActive, string searchFor) {   using (var db = new DbNorthwind())   {     var products = from p in db.Product                     select p;      if (onlyActive)     {       products = from p in products                   where !p.Discontinued                   select p;     }      if (searchFor != null)     {       products = from p in products                   where p.Name.Contains(searchFor)                   select p;     }      return products.ToList();   } } Paging A lot of times we need to write code that returns only a subset of the entire dataset. We expand on the previous example to show what a product search function could look like. Keep in mind that the code below will query the database twice. Once to find out the total number of records, something that is required by many paging controls, and once to return the actual data. public static List<Product> Search(string searchFor, int currentPage, int pageSize, out int totalRecords) {   using (var db = new DbNorthwind())   {     var products = from p in db.Product                     select p;      if (searchFor != null)     {       products = from p in products                   where p.Name.Contains(searchFor)                   select p;     }      totalRecords = products.Count();      return products.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();   } } Joins This assumes we added a Category class, just like we did with the Product class, defined all the fields, and registered it in our DbNorthwind data access class. We can now write an INNER JOIN query like this: from p in db.Product join c in db.Category on p.CategoryID equals c.CategoryID select new Product {   Name = p.Name,   Category = c }; and a LEFT JOIN query like this: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select new Product {   Name = p.Name,   Category = c }; Creating your POCOs In the previous example we assign an entire Category object to our product, but what if we want all the fields in our Product class, but we don't want to specify every field by hand? Unfortunately, we cannot write this: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select new Product(c); The query above assumes the Product class has a constructor that takes in a Category object. The query above won't work, but we can work around that with the following query: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select Product.Build(p, c); For this to work, we need a function in the Product class that looks like this: public static Product Build(Product product, Category category) {   if (product != null)   {     product.Category = category;   }   return product; } One caveat with this approach is that if you're using it with composed queries (see example above) the select Build part has to come only in the final select. Insert At some point we will need to add a new Product to the database. One way would be to call the Insert extension method found in the LinqToDB namespace; so make sure you import that. using (var db = new DbNorthwind()) {   db.Insert(product); } This inserts all the columns from our Product class, but without retrieving the generated identity value. To do that we can use InsertWithIdentity, like this: using (var db = new DbNorthwind()) {   product.ProductID = Convert.ToInt32(db.InsertWithIdentity(product)); } We need to convert the returned value to an integer since an identity field could be something other than an integer, like a GUID for example. There is also InsertOrReplace that updates a database record if found or adds it otherwise. If you need to insert only certain fields, or use values generated by the database, you could write: using (var db = new DbNorthwind()) {   db.Product     .Value(p => p.Name, product.Name)     .Value(p => p.UnitPrice, 10.2m)     .Value(p => p.Added, () => Sql.CurrentTimestamp)     .Insert(); } Using this method also allows us to build insert statements like this: using (var db = new DbNorthwind()) {   var statement = db.Product                     .Value(p => p.Name, product.Name)                     .Value(p => p.UnitPrice, 10.2m);    if (storeAdded) statement.Value(p => p.Added, () => Sql.CurrentTimestamp);    statement.Insert(); } Update Updating records follows a similar pattern to Insert. We have an extension method that updates all the columns in the database: using (var db = new DbNorthwind()) {   db.Update(product); } And we also have a lower level update mechanism: using (var db = new DbNorthwind()) {   db.Product     .Where(p => p.ProductID == product.ProductID)     .Set(p => p.Name, product.Name)     .Set(p => p.UnitPrice, product.UnitPrice)     .Update(); } Similarly, we can break an update query into multiple pieces if needed: using (var db = new DbNorthwind()) {   var statement = db.Product                     .Where(p => p.ProductID == product.ProductID)                     .Set(p => p.Name, product.Name);    if (updatePrice) statement = statement.Set(p => p.UnitPrice, product.UnitPrice);    statement.Update(); } You're not limited to updating a single field. For example, we could discontinue all the products that are no longer in stock: using (var db = new DbNorthwind()) {   db.Product     .Where(p => p.UnitsInStock == 0)     .Set(p => p.Discontinued, true)     .Update(); } Delete Similar to how you update records, you can also delete records: using (var db = new DbNorthwind()) {   db.Product     .Where(p => p.Discontinued)     .Delete(); } Bulk Copy Bulk copy feature supports the transfer of large amounts of data into a table from another data source. For faster data inserting DO NOT use a transaction. If you use a transaction an adhoc implementation of the bulk copy feature has been added in order to insert multiple lines at once. You get faster results then inserting lines one by one, but it's still slower than the database provider bulk copy. So, DO NOT use transactions whenever you can (Take care of unicity constraints, primary keys, etc. since bulk copy ignores them at insertion) [Table(Name = ""ProductsTemp"")] public class ProductTemp {   public int ProductID { get; set; }    [Column(Name = ""ProductName""), NotNull]   public string Name { get; set; }    // ... other columns ... }  list = List<ProductTemp>  using (var db = new DbNorthwind()) {   db.BulkCopy(list); } Transactions Using database transactions is easy. All you have to do is call BeginTransaction() on your DataConnection, run one or more queries, and then commit the changes by calling CommitTransaction(). If something happened and you need to roll back your changes you can either call RollbackTransaction() or throw an exception. using (var db = new DbNorthwind()) {   db.BeginTransaction();    // ... select / insert / update / delete ...    if (somethingIsNotRight)   {     db.RollbackTransaction();   }   else   {     db.CommitTransaction();   } } Also, you can use .NET built-in TransactionScope class: // don't forget isolation level is serializable by default using (var transaction = new TransactionScope())  {   using (var db = new DbNorthwind())   {     ...   }   transaction.Complete(); } MiniProfiler If you would like to use MiniProfiler from StackExchange you'd need to wrap ProfiledDbConnection around our regular DataConnection. public class DbDataContext : DataConnection { #if !DEBUG   public DbDataContext() : base(""Northwind"") { } #else   public DbDataContext() : base(GetDataProvider(), GetConnection()) { }    private static IDataProvider GetDataProvider()   {     return new SqlServerDataProvider("""", SqlServerVersion.v2012);   }    private static IDbConnection GetConnection()   {     LinqToDB.Common.Configuration.AvoidSpecificDataProviderAPI = true;      var dbConnection = new SqlConnection(@""Server=.\SQL;Database=Northwind;Trusted_Connection=True;Enlist=False;"");     return new StackExchange.Profiling.Data.ProfiledDbConnection(dbConnection, MiniProfiler.Current);   } #endif } This assumes that you only want to use MiniProfiler while in DEBUG mode and that you are using SQL Server for your database. If you're using a different database you would need to change GetDataProvider() to return the appropriate IDataProvider. For example, if using MySql you would use: private static IDataProvider GetDataProvider() {   return new LinqToDB.DataProvider.MySql.MySqlDataProvider(); } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/linq2db/linq2db"	"The fastest LINQ database access library offering a simple, light, fast, and type-safe layer between your POCO objects and your database."	"true"
"ORM"	"MicroLite ORM"	"https://github.com/TrevorPilley/MicroLite"	"MicroLite ORM is a micro Object Relational Mapper for the.NET framework. It is designed to be easy to use, extensible and testable."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"58"	"11"	"21"	"GitHub - TrevorPilley/MicroLite: MicroLite ORM framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 58 Fork 21 TrevorPilley/MicroLite Code Issues 18 Pull requests 0 Wiki Pulse Graphs MicroLite ORM framework http://microliteorm.wordpress.com 1,187 commits 1 branch 41 releases Fetching contributors C# 99.7% PowerShell 0.3% C# PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v4.0.1 v3.1.0 v3.0.3 v3.0.2 v3.0.1 v3.0.0 v2.1.0 v2.0.2 v2.0.1 v2.0.0 v1.2.2 v1.2.1 v1.2.0 v1.1.0 v1.0.0 6.2.9 6.2.8 6.2.7 6.2.6 6.2.5 6.2.4 6.2.3 6.2.2 6.2.1 6.2.0 6.1.4 6.1.3 6.1.2 6.1.1 6.1.0 6.0.0 5.3.1 5.3.0 5.2.0 5.1.0 5.0.4 5.0.3 5.0.2 5.0.1 5.0.0 4.0.0 Nothing to show New pull request Latest commit f1e1a20 Mar 24, 2016 TrevorPilley Updated to psake 4.6.0 Permalink Failed to load latest commit information. .nuget Updated nuget.exe Mar 22, 2016 MicroLite.Tests Updated to Moq 4.2.1510.2205 Mar 24, 2016 MicroLite Updated to psake 4.6.0 Mar 24, 2016 tools Updated NDepend Logo Oct 19, 2013 .gitattributes Normalized line endings Jul 26, 2013 .gitignore Ignore the GhostDoc xml file Dec 31, 2014 Build - Read.Me.txt Updated to SHFB 2014.11.22 Dec 12, 2014 CONTRIBUTING.md Updated contribution guidelines Mar 18, 2016 CustomDictionary.xml Added en-GB to the dictionary Jul 2, 2015 License.txt Added License Jun 3, 2012 MicroLite.NET35.sln Corrected package reference to xunit.runners Mar 18, 2016 MicroLite.NET40.sln Corrected package reference to xunit.runners Mar 18, 2016 MicroLite.NET45.sln Corrected package reference to xunit.runners Mar 18, 2016 MicroLite.NET46.sln Added a .NET 4.6 build Mar 24, 2016 MicroLite.ndproj Updated ndepend project Aug 20, 2014 MicroLite.nuspec Added a .NET 4.6 build Mar 24, 2016 MicroLite.ruleset Changed CA2000 to a warning Sep 17, 2014 MicroLite.shfbproj Added a .NET 4.6 build Mar 24, 2016 MicroLite.snk Added MicroLite projects May 24, 2012 README.md Added a .NET 4.6 build Mar 24, 2016 Settings.StyleCop Re-enabled header rules for StyleCop Jun 18, 2013 build.ps1 Updated to psake 4.6.0 Mar 24, 2016 default.ps1 Added a .NET 4.6 build Mar 24, 2016 README.md MicroLite ORM Framework MicroLite is a small lightweight or ""micro"" object relational mapping (ORM) framework written in C# for the Microsoft .NET framework. Its purpose is to provide a flexible and powerful feature set whilst maintaining a simple and concise API. Headline Features It only references the .NET base class libraries (no dependencies outside the .NET framework itself). Extensions to allow MicroLite log messages to be logged via log4net or NLog Extension support to quickly develop applications using ASP.NET MVC and WebApi Native support for Enum, Uri, and XDocument properties on mapped classes An extensible pipeline which allows 'plugging in' custom Type Converters or Session Listeners Easily managed by IOC containers Fluent configuration API Fluent SQL Builder which makes it easier to create more complex queries Interface based API which makes unit testing easy Supported .NET Framework Versions The NuGet Package contains binaries compiled against: .NET 3.5 (Client Profile) .NET 4.0 (Client Profile) .NET 4.5 .NET 4.6 SQL Support Microsoft SQL Server 2005 or newer MySql 5.5 or newer SQLite 3.7 or newer PostgreSQL 9.2 or newer Firebird 2.5 or newer SQL Server Compact Edition 4.0 or newer To find out more, head over to the Getting Started guide on the wiki and see how easy it is to use! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TrevorPilley/MicroLite"	"MicroLite ORM is a micro Object Relational Mapper for the.NET framework. It is designed to be easy to use, extensible and testable."	"true"
"ORM"	"PetaPoco"	"http://www.toptensoftware.com/petapoco/"	"A tiny ORM-ish thing for your POCOs"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"886"	"131"	"392"	"GitHub - CollaboratingPlatypus/PetaPoco: Official PetaPoco, A tiny ORM-ish thing for your POCO's Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 131 Star 886 Fork 392 CollaboratingPlatypus/PetaPoco Code Issues 33 Pull requests 5 Wiki Pulse Graphs Official PetaPoco, A tiny ORM-ish thing for your POCO's 411 commits 2 branches 9 releases 14 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: development Switch branches/tags Branches Tags development master Nothing to show v4.0.3 v4.0.1 v3.0.2 v3.0.1 v3.0.0 v2.1.1 v2.1.0 semver 4.0.2 Nothing to show New pull request Latest commit 7de7e03 Jul 15, 2016 pleb committed on GitHub Removes extra line breaks at end of Database.tt file Permalink Failed to load latest commit information. Media Add logo size 256 Dec 13, 2015 Nuget Updates PP's nuget logo Dec 12, 2015 Output Updates ignore file and adds placeholder file Dec 5, 2015 PetaPacked Updates project files and paths in prep for automated builds Dec 5, 2015 PetaPoco.Cs.Joiner Updates PetaPoco single file to suppress a few common warnings #245 Jan 30, 2016 PetaPoco.Tests.Dep Adds missing file Dec 8, 2015 PetaPoco.Tests.Docker Updates docker to Windows beta version (+1 squashed commits) May 26, 2016 PetaPoco.Tests.Integration.SingleFile Merge branch 'development' of https://github.com/CollaboratingPlatypu… Dec 28, 2015 PetaPoco.Tests.Integration.x86 Adds integration tests for PR #288 (Fixing byte based enums) May 27, 2016 PetaPoco.Tests.Integration Adds integration tests for PR #288 (Fixing byte based enums) May 27, 2016 PetaPoco.Tests.Unit add Set function in Sql class Apr 13, 2016 PetaPoco Removes extra line breaks at end of Database.tt file Jul 15, 2016 Tools Removes files that shouldn't be included in the source Dec 5, 2015 .gitignore Adds missing file Dec 7, 2015 LICENSE.txt Moved readme/license to root folder Mar 24, 2011 PetaPoco.sln Adds support for MS Access databases Jan 30, 2016 PetaPoco.sln.DotSettings Adds support for MS Access databases Jan 30, 2016 README.markdown Fixes build badges in readme Apr 13, 2016 appveyor.yml Forces a build of PetaPoco single file using tools version 4.0 Jan 10, 2016 contributing.md Update contributing.md Dec 16, 2015 honourRoll.md Adds @LankyPaddy to the honour roll May 26, 2016 README.markdown Master Development Nuget Nuget Core Nuget Core Compiled Release Notifications Welcome to the official PetaPoco repository Originally the brainchild of Brad Robinson, PetaPoco is a tiny, fast, single-file micro-ORM for .NET and Mono Like Dapper, it's fast because it uses dynamic method generation (MSIL) to assign column values to properties Like Massive it's available as single file that you easily add to any project or complied. Like Massive, it now also supports dynamic Expandos too - read more Unlike Massive it works with strongly typed POCO's Like ActiveRecord, it supports a close relationship between object and database table Like SubSonic, it supports generation of poco classes with T4 templates Features at a Glance Tiny, and absolutely no dependencies! Works with strictly undecorated POCOs, or attributed almost-POCOs. Easy to configure and includes fluent configuration out of the box. Helper methods for Insert/Delete/Update/Save and IsNew Paged requests automatically work out total record count and fetch a specific page. Easy transaction support. Better parameter replacement support, including grabbing named parameters from object properties. Great performance by eliminating Linq and fast property assignment with DynamicMethod generation. The query language is good ole SQL. Includes a low friction SQL builder class that makes writing inline SQL much easier. Includes T4 templates to automatically generate POCO classes for you. Hooks for logging exceptions, installing value converters and mapping columns to properties without attributes. Works with SQL Server, SQL Server CE, MS Access, SQLite, MySQL, MariaDB, Firebird, and PostgreSQL. (Oracle supported but does not have integration tests). Works under .NET 4.0/4.5/4.6 or Mono 2.8 and later. Has Xunit unit tests. Has supported DBs integration tests. OpenSource (Apache License) All of this in about 1,500 lines of code Super easy use and configuration Save an entity     db.Save(article);     db.Save(new Article { Title = ""Super easy to use PetaPoco"" });     db.Save(""Articles"", ""Id"", { Title = ""Super easy to use PetaPoco"", Id = Guid.New() }); Get an entity     var article = db.Single<Article>(123);     var article = db.Single<Article>(""WHERE ArticleKey = @0"", ""ART-123""); Delete an entity     db.Delete(article);     db.Delete<Article>(123);     db.Delete(""Articles"", ""Id"", 123);     db.Delete(""Articles"", ""ArticleKey"", ""ART-123""); Plus much much more. Documentation For configuration, code examples and other general information See the docs Download PetaPoco is available from: NuGet Peta - https://www.nuget.org/packages/PetaPoco/ - A single file include with T4 text templates to automatically build your pocos for you. NuGet Peta Core - https://www.nuget.org/packages/PetaPoco.Core/ - A single file include. NuGet Peta Core Compiled - https://www.nuget.org/packages/PetaPoco.Core.Compiled/ - A compiled version which your project references. Contributing PetaPoco welcomes input from the community. After all, what is a product without users? If you’d like to contribute, please take the time to read the contribution guide. We would also suggest you have a quick read of Contributing to Open Source on GitHub. Contributions Honour Roll A product like PetaPoco isn't the effort of one person, but rather a combined effort of many. For those individuals who rise above and beyond we have a special place to honour them. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/toptensoftware/PetaPoco"	"A tiny ORM-ish thing for your POCOs"	"true"
"ORM"	"AsyncPoco"	"https://github.com/tmenier/AsyncPoco"	"A long-""awaited"" fully asynchronous PetaPoco fork"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"76"	"20"	"392"	"GitHub - tmenier/AsyncPoco: A long-""awaited"" fully asynchronous PetaPoco fork Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 76 Fork 392 tmenier/AsyncPoco forked from CollaboratingPlatypus/PetaPoco Code Issues 5 Pull requests 2 Pulse Graphs A long-""awaited"" fully asynchronous PetaPoco fork 232 commits 4 branches 12 releases Fetching contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags MultiPoco dynamic master patch-1 Nothing to show v4.0.3 v4.0.1 v3.0.2 v3.0.1 v3.0.0 v2.1.1 v2.1.0 semver 4.0.2 1.1.0 1.0.1 1.0.0 Nothing to show New pull request #24 Compare This branch is 45 commits ahead, 223 commits behind CollaboratingPlatypus:master. Latest commit 5f20d95 Mar 15, 2015 tmenier up'd version to 1.1.2 Permalink Failed to load latest commit information. .nuget .net 4.5 + nuget package restore Jan 15, 2014 AsyncPoco.DevBed .net 4.5 + nuget package restore Jan 16, 2014 AsyncPoco.Tests Revert previous PR Nov 2, 2014 AsyncPoco up'd version to 1.1.2 Mar 15, 2015 Output Unit tests Mar 23, 2011 csj ignore csj binaries Jan 21, 2014 .gitignore ignore csj binaries Jan 22, 2014 AsyncPoco.Tests110716.vsp mass renames Jan 15, 2014 AsyncPoco.sln VS2013 Jun 12, 2014 LICENSE.txt licensing notes Feb 1, 2014 Performance1.psess Switched to PetaTest Jul 31, 2011 README.markdown more readme twerks Oct 14, 2014 README.markdown AsyncPoco A tiny async-y ORM-ish thing for your POCOs AsyncPoco is a fork of the popular PetaPoco micro-ORM for .NET, with a fully asynchronous API and support for the async/await keywords in C# 5.0 and VB 11. It does not supercede PetaPoco; the two can peacefully co-exist in the same project. When making the decision to go asynchronous, it's generally best to go ""all in"", but keeping both around can be helpful while making a gradual transition. How do I use it? If you're familiar with PetaPoco and the TAP pattern for asynchronous programming in .NET 4.5, you should easily be able to figure out how to use AsyncPoco. If you're new to PetaPoco, I highly recommend reading the excellent tutorial first. Then just note that the TAP pattern was followed consistently in porting PetaPoco's synchronous public methods to their async equivalents. In other words, all public methods that interact with the database were suffixed with Async, and instead of returning void or T, they return Task or Task<T>, respectively. Here are some examples taken directly from the PetaPoco tutorial and converted to their AsyncPoco equivalent: var db = new AsyncPoco.Database(""connectionStringName"");  var count = await db.ExecuteScalarAsync<long>(""SELECT Count(*) FROM articles""); var a = await db.SingleOrDefaultAsync<Article>(""SELECT * FROM articles WHERE article_id=@0"", 123); var result = await db.PageAsync<Article>(1, 20, // <-- page number and items per page         ""SELECT * FROM articles WHERE category=@0 ORDER BY date_posted DESC"", ""coolstuff"");  await db.ExecuteAsync(""DELETE FROM articles WHERE draft<>0""); await db.DeleteAsync<Article>(""WHERE article_id=@0"", 123); await db.UpdateAsync<Article>(""SET title=@0 WHERE article_id=@1"", ""New Title"", 123); await db.SaveAsync(a); There is one case where the port from sync to async was not so straightforward: the Query method. In PetaPoco, Query<T> and its various overloads return IEnumerable<T>, and its implementation yield returns POCOs as it streams results from the underlying DataReader. But AsyncPoco's QueryAsync<T> methods do not return Task<IEnumerable<T>>. The reason is that if you await a method with that signature, you will not have results to work with until the Task completes, meaning all results are pulled into memory, at which point you may as well Fetch a List<T>. Ideally, you want to be able to process the results asynchronously as they become available. So instead of returning a result that can be enumerated, QueryAsync<T> accepts a callback that is invoked for each poco in the result set as it becomes available. Example: await db.QueryAsync<Article>(""SELECT * FROM articles"", a => {     Console.WriteLine(""{0} - {1}"", a.article_id, a.title); }); What if you want to stop processing results before you reach the end of the DataReader's stream? There is a set of QueryAsync<T> overloads that take a Func<T, bool> callback; simply return false from the callback to hault the iteration immediately and close/dispose the DataReader. await db.QueryAsync<Article>(""SELECT * FROM articles"", a => {     if (IsWhatIWant(a))     {         Console.WriteLine(""Found it! {0} - {1}"", a.article_id, a.title);         return false; // stop iterating and close/dispose the DataReader     }     else     {         return true; // continue iterating     } }); What databases are supported? All PetaPoco tests have been ported to their async equivalents and are passing when run against SQL Server 2008 R2, SQL Server CE, MySQL, and PostgreSQL. Why should I use it? If you're finding that threads in your application are spending a significant percentage of CPU time waiting for database calls to complete, you should notice big improvements with AsyncPoco. If you're already writing asynchronous code on .NET 4.5 and using a supported database platform, there's virtually no reason to prefer PetaPoco over AsyncPoco. Why shouldn't I use it? If you're not on .NET 4.5 or one of the supported database platforms, you're out of luck. Also bear in mind that if you're not already coding against asynchronous APIs using async/await and the TAP pattern, You may be committing yourself to a substantial number of changes to your code base. Going only partially async is an invitation for deadlocks; you'll want to use async all the way up and down your call stack. If you're dealing with legacy code and don't have the time or resources to make that leap, AsyncPoco is probably not a good fit. Besides async, are there any other functional differences between PetaPoco and AsyncPoco? As of version 1.1, I've begun implementing a few features not found in PetaPoco, including support for nullable enums, composite primary keys (ported from NPoco), and the [ComputedColumn] marker attribute. Is it faster than PetaPoco? No. But that's not the point of asynchronous code. The point is to free up threads while waiting on I/O-bound work to complete, making desktop and mobile apps more responsive and web applications more scalable. The context switching magic wired up by the compiler when async/await are used actually adds a small amount of overhead to the running code, though I've done some informal benchmarking and saw no significant performance differences between PetaPoco and AsyncPoco. I'd be happy to publish links to independent benchmarks if any exist. Where do I get it? The recommended way to install AsyncPoco is via the NuGet package. PM> Install-Package AsyncPoco Note that while the single file approach and T4 templates have been carried over from PetaPoco and are supported, neither is currently installed via NuGet, so you'll need to grab them directly from the source code for now. I don't know if these are things that people want, so I encourage you to create an issue to request them and I'll consider adding them. How do I get help? Ask specific programming questions on Stack Overflow. I'll answer personally (unless someone beats me to it). For announcements and (light) discussions, follow @AsyncPoco on Twitter. To report bugs or suggest improvements, no matter how opinionated, create an issue. To contact me personally, email tmenier at that google mail service dot com. How do I contribute? I'll gladly accept pull requests that address issues and implement cool features. I'd also be grateful for your help spreading the word via Twitter, blog posts, etc. Credit where credit is due Well over 90% of this code is the brainchild of Brad Robinson (@toptensoftware); I'm merely riding the coattails of PetaPoco's success. Brad in turn credits Rob Conery (@robconery) for original inspiration (ie: Massive) and for use of Subsonic's T4 templates, Rob Sullivan (@DataChomp) for hard core DBA advice, and Adam Schroder (@schotime) for lots of suggestions, improvements and Oracle support. Adam's excellent NPoco (another PetaPoco fork) was also the source of inspiration and code for some of the new 1.1 features. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tmenier/AsyncPoco"	"A long-""awaited"" fully asynchronous PetaPoco fork"	"true"
"ORM"	"NPoco"	"https://github.com/schotime/NPoco"	"Simple microORM that maps the results of a query onto a POCO object. Based on Schotime's branch of PetaPoco"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"353"	"75"	"165"	"GitHub - schotime/NPoco: Simple microORM that maps the results of a query onto a POCO object. Project based on Schotime's branch of PetaPoco Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 75 Star 353 Fork 165 schotime/NPoco Code Issues 14 Pull requests 12 Wiki Pulse Graphs Simple microORM that maps the results of a query onto a POCO object. Project based on Schotime's branch of PetaPoco 461 commits 13 branches 23 releases Fetching contributors C# 99.9% Other 0.1% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags DbFactory ReferenceProperties ResultAutoQuery beta compiled_linq_queries dev-feature dev2.0 dev3.0 dev3.1 insert_batch jsonnet_fastjson master pocodata_refactor Nothing to show rel-3.4.0 rel-2.10.11 rel-2.10.9 rel-2.8.102 rel-2.6.88 rel-2.4.72 rel-2.4.71 rel-2.4.70 rel-2.4.69 rel-2.4.67 rel-2.2.40 rel-2.1.30 rel-2.1.28 rel-2.0.18 rel-2.0.15 beta-2.10.1 beta-2.7.91 beta-2.5.53 beta-2.4.66 beta-2.4.62 alpha-2.4.59 alpha-2.4.57 30alpha1 Nothing to show New pull request Latest commit dfc5e15 Jul 2, 2016 schotime Bump to 3.4.1 Permalink Failed to load latest commit information. src Bump to 3.4.1 Jul 2, 2016 test/NPoco.Tests Fix stored procedure support Jul 2, 2016 tools/PSake Added PSake build script Apr 20, 2012 .gitattributes Add .gitattributes Mar 23, 2013 .gitignore Remove lock files add ignore them Mar 10, 2016 NPoco.sln Use the fastJSON library as default and have json.net package Apr 13, 2016 NuGet.Config Initial changes to support CoreCLR Nov 21, 2015 README.md Modify readme to include more info Apr 29, 2012 build.cmd Added PSake build script Apr 20, 2012 build.ps1 Upgrade to dotnet core RC2 May 20, 2016 global.json Upgrade to .net core 1.0 Jun 28, 2016 README.md NPoco Welcome to the NPoco! NPoco is a fork of PetaPoco based on Schotime's branch with a handful of extra features. Getting Started: Your first query public class User  {     public int UserId { get;set; }     public string Email { get;set; } }  IDatabase db = new Database(""connStringName""); List<User> users = db.Fetch<User>(""select userId, email from users""); This works by mapping the column names to the property names on the User object. This is a case-insensitive match. There is no mapping setup needed for this (query only) scenario. Checkout the Wiki for more documentation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/schotime/NPoco"	"Simple microORM that maps the results of a query onto a POCO object. Based on Schotime's branch of PetaPoco"	"true"
"Package Management"	"NuGet"	"https://www.nuget.org/"	"THE.NET Package Manager"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"763"	"121"	"437"	"GitHub - NuGet/NuGetGallery: The NuGet Gallery Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 121 Star 763 Fork 437 NuGet/NuGetGallery Code Issues 212 Pull requests 10 Wiki Pulse Graphs The NuGet Gallery http://www.nuget.org 4,228 commits 12 branches 47 releases 78 contributors C# 77.5% JavaScript 15.0% CSS 3.5% PowerShell 2.1% ASP 0.8% HTML 0.8% Other 0.3% C# JavaScript CSS PowerShell ASP HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev feature/delegated issue-3105 johtaylo-LastUpdateIntercept maballia-consistency master remove-cloud-service revert-3111-fix-3107 ryuyu-fix-issue2252 sblom/activedirectory-client scottbom/packagemanagerouting xadeco/gallerycore-cleanup Nothing to show iters/8/dev iters/7/start iters/6/start iters/6/qa iters/5/qa iters/5/prod iters/4/start iters/3/qa iters/zold/2013Mar28@1638 iters/zold/2013Mar06@1412 iters/zold/2013Jul19 iters/zold/2013Jan22@1653 iters/zold/2013Apr25 iters/zold/2013Apr11 iters/zold/2012Jun04@0000 iters/zold/2012Dec12@1645 iters/zold/2012Dec03@1624 iters/zold/2.0 iters/zold/1.8 iters/zold/Jan22@1653 iters/zold/Dec12@1645 iters/zold/Dec03@1624 3.0.624-r-master 3.0.623-r-master 3.0.621-r-master-ApiApps 3.0.610-r-master-ApiApps 3.0.608-r-master-ApiApps 3.0.606-r-master-ApiApps 3.0.601-r-master-ApiApps 3.0.578-r-master-NuGet 3.0.576-r-master-NuGet 3.0.570-r-master-NuGet 3.0.554-r-master-NuGet 3.0.543-r-master-NuGet 3.0.540-r-master-NuGet 3.0.525-r-master-NuGet 3.0.524-r-master-NuGet 3.0.514-r-master-NuGet 3.0.510-r-master-NuGet 3.0.507-r-master-NuGet 3.0.506-r-master-NuGet 3.0.501-r-master-NuGet 3.0.490-r-master-NuGet 3.0.474-r-master-NuGet 3.0.434-r4-master-NuGet 3.0.393-r-master 3.0.269-r-develop-octov3-1-ApiApps Nothing to show New pull request Latest commit e687bb1 Jul 6, 2016 shishirx34 committed with maartenba Fix test … change the redirecting url to static one Permalink Failed to load latest commit information. .github clean up root folder Mar 31, 2016 .nuget Injected Glimpse runtime policies again Aug 7, 2015 .vs/config Revert changes in applicationhost.config Oct 9, 2015 build Removing obsolete Kudu deploy scripts Feb 29, 2016 content Fixed typo (#3003) Apr 22, 2016 docs correct list formating Jun 9, 2014 ops update copyright info May 27, 2015 src don't return MvcHtmlString in TruncateAtWordBoundary Jul 14, 2016 tests Fix test Jul 14, 2016 tools Fixing typo in makecert path May 13, 2016 .gitattributes Trying out a new gitattributes... Dec 9, 2013 .gitignore Add auditing for all user actions #3078 (#3083) Jun 22, 2016 CONTRIBUTING.md Update CONTRIBUTING.md May 21, 2014 COPYRIGHT.txt update copyright info May 27, 2015 CREDITS.txt update copyright info May 27, 2015 Changelog.md Update Changelog.md Mar 7, 2014 LICENSE.txt Update LICENSE.txt Jun 4, 2015 NuGet.Cloud.targets Added Octopus Packaging Apr 11, 2014 NuGet.config Upgrade to Azure SDK 2.7 & VS2015 Jul 29, 2015 NuGetGallery.sln Injected Glimpse runtime policies again Aug 7, 2015 NuGetGallery.sln.DotSettings minor formatting cleanup + ensure controllers are all partial (requir… Jun 24, 2015 README.md Update README.md Jun 22, 2016 Repository.props Renamed some things for consistency and added new Repository boilerplate Apr 11, 2014 appveyor.yml Add AppVeyor CI config #2715 Oct 6, 2015 build.cmd target msbuild.exe directly May 29, 2016 build.msbuild Compile Razor views during build to trap compilation errors Dec 23, 2015 ops.cmd Restored Gallery Operations to working order Aug 5, 2013 README.md NuGet Gallery — Where packages are found This is an implementation of the NuGet Gallery and API. This serves as the back-end and community website for the NuGet client. For information about the NuGet project, visit the Home repository. This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Build and Run the Gallery in (arbitrary number) easy steps Prerequisites. Install these if you don't already have them: Visual Studio 2015 - Custom install so that you may also install Microsoft SQL Server Data Tools. This will provide the LocalDB that Windows Azure SDK requires. PowerShell 2.0 (comes with Windows 7+) NuGet Windows Azure SDK - Note that you may have to manually upgrade the "".Cloud"" projects in the solution if a different SDK version is used. Clone it! git clone git@github.com:NuGet/NuGetGallery.git Build it! cd NuGetGallery .\build  Set up the website in IIS Express! We highly recommend using IIS Express. Use the Web Platform Installer to install it if you don't have it already (it comes with recent versions of VS and WebMatrix though). Make sure to at least once run IIS Express as an administrator. In an ADMIN powershell prompt, run the .\tools\Enable-LocalTestMe.ps1 file. It allows non-admins to host websites at: http(s)://nuget.localtest.me, it configures an IIS Express site at that URL and creates a self-signed SSL certificate. For more information on localtest.me, check out readme.localtest.me. If you're having trouble, go to the Project Properties for the Website project, click on the Web tab and change the URL to localhost:port where port is some port number above 1024. When running the application using the Azure Compute emulator, you may have to edit the .\src\NuGetGallery.Cloud\ServiceConfiguration.Local.cscfg file and set the certificate thumbprint for the setting SSLCertificate to the certificate thumbprint of the generated nuget.localtest.me certificate from step 2. You can get a list of certificates and their thumbprints using PowerShell, running Get-ChildItem -path cert:\LocalMachine\My. Create the Database! Open Visual Studio 2015 Open the Package Manager Console window Ensure that the Default Project is set to NuGetGallery Open the NuGetGallery.sln solution from the root of this repository. Important: Make sure the Package Manager Console has been opened once before you open the solution. If the solution was already open, open the package manager console and then close and re-open the solution (from the file menu) Run the following command in the Package Manager Console: Update-Database -StartUpProjectName NuGetGallery -ConfigurationTypeName MigrationsConfiguration  If this fails, you are likely to get more useful output by passing -Debug than -Verbose. When working with the gallery, e-mail messages are saved to the file system (under ~/App_Data). To change this to use an SMTP server, edit src\NuGetGallery\Web.Config and add a Gallery.SmtpUri setting. Its value should be an SMTP connection string, for example smtp://user:password@smtpservername:25. To turn off e-mail confirmations, edit src\NuGetGallery\Web.Config and change the value of Gallery.ConfirmEmailAddresses to false. Ensure the 'NuGetGallery' project (under the Frontend folder) is set to the Startup Project That's it! You should now be able to press Ctrl-F5 to run the site! Contribute If you find a bug with the gallery, please visit the Issue tracker and create an issue. If you're feeling generous, please search to see if the issue is already logged before creating a new one. When creating an issue, clearly explain What you were trying to do. What you expected to happen. What actually happened. Steps to reproduce the problem. Also include any information you think is relevant to reproducing the problem such as the browser version you used. Does it happen when you switch browsers. And so on. Submit a patch Before starting work on an issue, either create an issue or comment on an existing issue to ensure that we're all communicating. We have a list of items that are up for grabs and you can start working on (but always ping us beforehand). To contribute to the gallery, make sure to create a fork first. Make your changes in the fork following the Git Workflow. When you are done with your changes, send us a pull request. Copyright and License Copyright .NET Foundation Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this work except in compliance with the License. You may obtain a copy of the License in the LICENSE file, or at: http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. The Git Workflow This is the Git workflow we're currently using: Setting up Clone and checkout the following branches (to make sure local copies are made): ' '. When starting a new feature/unit of work. Pull the latest. Begin by pulling to make sure you are up-to-date before creating a branch to do your work This assumes you have no local commits that haven't yet been pushed (i.e., that you were previously up-to-date with origin). git checkout dev git pull dev  Create a topic branch to do your work. You must work in topic branches, in order to help us keep our features isolated and easily moved between branches. Our policy is to start all topic branches off of the 'dev' branch. Branch names should use the following format '[user]-[bugnumber]-[shortdescription]'. If there is no bug yet, create one and assign it to yourself! git checkout dev git checkout -b anurse-123-makesuckless  Do your work. Now, do your work using the following highly accurate and efficient algorithm :) Make changes. Test your changes (you're practicing TDD, right?) Add your changes to git's index. git add -A  Commit your changes. git commit -m ""<description of work>""  if (moreWorkToDo) go to #3.1 else go to #4. Start a code review. Start a code review by pushing your branch up to GitHub (git push origin anurse-123-makesuckless) and creating a Pull Request from your branch to dev. Wait for at least someone on the team to respond with: """" (that's called the ""Ship-It Squirrel"" and you can put it in your own comments by typing :shipit:). Merge your changes in to dev. Click the bright green ""Merge"" button on your pull request! NOTE: DO NOT DELETE THE TOPIC BRANCH!! If there isn't a bright green button... well, you'll have to do some more complicated merging: git checkout dev git pull origin dev git merge anurse-123-makesuckless ... resolve conflicts ... git push origin dev  Be ready to guide your change through QA, Staging and Prod Your change will make its way through the QA, Staging and finally Prod branches as it's deployed to the various environments. Be prepared to fix additional bugs! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/NuGet/NuGetGallery.git"	"THE.NET Package Manager"	"true"
"Package Management"	"Paket"	"https://github.com/fsprojects/Paket"	"A package dependency manager for.NET with support for NuGet packages and GitHub repositories."	"null"	"null"	"null"	"null"	"null"	"http://fsprojects.github.io/Paket/"	"null"	"676"	"60"	"219"	"GitHub - fsprojects/Paket: A dependency manager for .NET with support for NuGet packages and Git repositories. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 60 Star 676 Fork 219 fsprojects/Paket Code Issues 127 Pull requests 3 Pulse Graphs A dependency manager for .NET with support for NuGet packages and Git repositories. http://fsprojects.github.io/Paket/ 7,390 commits 65 branches 1,500 releases 155 contributors F# 87.4% C# 12.1% PowerShell 0.3% C++ 0.1% Shell 0.1% Objective-C 0.0% F# C# PowerShell C++ Shell Objective-C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ILRepack Lint Redirect Redirects Reffind Remove V3API VersionInPath WIP asmloader autodetectframework await bclbuild bootstrapper caches cachesecond clear-cache config conflict-reporting convertdocs copylocal depsets downloadfail fake4 firstarg fixbindings fixgetversions fsharp4 fsprojectsgit-patch-1 gh-pages groups i1178 lock locked logfile master monobug monohash newbindings newinstall norefmagic nospecs nunit-discovery pack-deps pathissue prerelease projectjson props proxy redirects revert-700-master silverlight skipunchangedgroups stablelock strict targets testversion theimowski-patch-1 transitive tuple twitter-badge update v3 warn-if-empty zip Nothing to show 3.7.3 3.7.2 3.7.1 3.7.0 3.6.1 3.6.0 3.5.0 3.5.0-alpha002 3.5.0-alpha001 3.4.0 3.4.0-alpha004 3.4.0-alpha003 3.4.0-alpha002 3.4.0-alpha001 3.3.6 3.3.5 3.3.4 3.3.3 3.3.2 3.3.1 3.3.0 3.2.3 3.2.2 3.2.1 3.2.0 3.2.0-alpha006 3.2.0-alpha005 3.2.0-alpha004 3.2.0-alpha003 3.2.0-alpha002 3.2.0-alpha001 3.1.9 3.1.8 3.1.7 3.1.6 3.1.5 3.1.4 3.1.3 3.1.2 3.1.1 3.1.0 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 3.0.0-rc003 3.0.0-rc002 3.0.0-rc001 3.0.0-beta062 3.0.0-beta061 3.0.0-beta060 3.0.0-beta059 3.0.0-beta058 3.0.0-beta057 3.0.0-beta056 3.0.0-beta055 3.0.0-beta054 3.0.0-beta053 3.0.0-beta052 3.0.0-beta051 3.0.0-beta050 3.0.0-beta049 3.0.0-beta048 3.0.0-beta047 3.0.0-beta046 3.0.0-beta045 3.0.0-beta044 3.0.0-beta042 3.0.0-beta041 3.0.0-beta040 3.0.0-beta039 3.0.0-beta038 3.0.0-beta037 3.0.0-beta036 3.0.0-beta035 3.0.0-beta034 3.0.0-beta033 3.0.0-beta032 3.0.0-beta031 3.0.0-beta030 3.0.0-beta028 3.0.0-beta027 3.0.0-beta026 3.0.0-beta025 3.0.0-beta024 3.0.0-beta023 3.0.0-beta022 3.0.0-beta021 3.0.0-beta020 3.0.0-beta019 3.0.0-beta018 3.0.0-beta017 3.0.0-beta016 3.0.0-beta015 3.0.0-beta014 3.0.0-beta013 3.0.0-beta012 3.0.0-beta011 3.0.0-beta010 Nothing to show New pull request Latest commit d986576 Jul 15, 2016 forki fix test Permalink Failed to load latest commit information. .github Create ISSUE_TEMPLATE.md Apr 4, 2016 .paket Dogfood new bootstrapper Apr 17, 2016 docs fixing docs Jul 15, 2016 integrationtests fix test Jul 15, 2016 nuget Reference git repos Apr 12, 2016 nupkgs Update dependencies Jul 12, 2016 src fixing docs Jul 15, 2016 tests Revert ""Pack localized assemblies."" Jul 14, 2016 tools/SignTool Use ILRepack 1.25 from nuget.org Jan 19, 2015 .gitattributes Add *.vb files to .gitattributes Aug 26, 2015 .gitignore fix tests Apr 11, 2016 .travis.yml Initial Integration tests - closes #894 Oct 29, 2015 LICENSE.txt Update LICENSE.txt Jan 13, 2015 Paket.PowerShell.sln added Chocolatey support for Paket.PowerShell Jun 13, 2015 Paket.sln fix test Jul 15, 2016 README.md Reference git repos Apr 12, 2016 RELEASE_NOTES.md Do not scan node_modules path for project files - closes #1782 Jul 14, 2016 appveyor.yml Initial Integration tests - closes #894 Oct 29, 2015 build.cmd Use prerelease paket for dogfooding Mar 30, 2016 build.fsx PublishChocolatey again May 17, 2016 build.sh If Paket bootstrapper fails, suggest common fix Jan 23, 2016 install.sh changed from wget to curl in install.sh script Apr 7, 2016 paket.dependencies update to latest Argu Jul 11, 2016 paket.lock Update dependencies Jul 12, 2016 README.md Paket A dependency manager for .NET with support for NuGet packages and git repositories. Why Paket? NuGet does not separate out the concept of transitive dependencies. If you install a package into your project and that package has further dependencies then all transitive packages are included in the packages.config. There is no way to tell which packages are only transitive dependencies. Even more importantly: If two packages reference conflicting versions of a package, NuGet will silently take the latest version (read more). You have no control over this process. Paket on the other hand maintains this information on a consistent and stable basis within the paket.lock file in the solution root. This file, together with the paket.dependencies file enables you to determine exactly what's happening with your dependencies. Paket also enables you to reference files directly from git repositories or any http-resource. For more reasons see the FAQ. Online resources Source code Documentation Getting started guide Download paket.exe Download paket.bootstrapper.exe Troubleshooting and support Found a bug or missing a feature? Feed the issue tracker. Announcements and related miscellanea through Twitter (@PaketManager) Quick contributing guide Fork and clone locally. Build the solution with Visual Studio, build.cmd or build.sh. Create a topic specific branch in git. Add a nice feature in the code. Do not forget to add tests and/or docs. Run build.cmd (build.sh on Mono) to make sure all tests are still passing. Send a Pull Request. If you want to contribute to the docs then please modify the markdown files in /docs/content and send a pull request. Note, that short description and syntax for each command is generated automatically from the Paket.Commands module. License The MIT license Maintainer(s) @forki @agross @mavnn @mexx @isaacabraham @theimowski The default maintainer account for projects under ""fsprojects"" is @fsprojectsgit - F# Community Project Incubation Space (repo management) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fsprojects/Paket"	"A package dependency manager for.NET with support for NuGet packages and GitHub repositories."	"true"
"PDF"	"ITextSharp"	"https://github.com/itext/itextsharp"	"iText is a PDF library that allows you to CREATE, ADAPT, INSPECT and MAINTAIN documents in the Portable Document Format (PDF)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"222"	"46"	"113"	"GitHub - itext/itextsharp: .NET port of the iText library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 46 Star 222 Fork 113 itext/itextsharp Code Pull requests 4 Pulse Graphs .NET port of the iText library http://itextpdf.com 1,145 commits 2 branches 36 releases 12 contributors C# 92.2% HTML 6.9% Other 0.9% C# HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop master Nothing to show iTextSharp_5_5_6 iTextSharp_5_5_5 iTextSharp_5_5_4 iTextSharp_5_5_3 iTextSharp_5_5_2 iTextSharp_5_5_1 iTextSharp_5_5_0 iTextSharp_5_4_5 iTextSharp_5_4_4 iTextSharp_5_4_3 iTextSharp_5_4_2 iTextSharp_5_4_1 iTextSharp_5_4_0 iTextSharp_5_3_5 iTextSharp_5_3_4 iTextSharp_5_3_3 iTextSharp_5_3_2 iTextSharp_5_3_0 iTextSharp_5_2_1 iTextSharp_5_2_0 iTextSharp_5_1_3 iTextSharp_5_1_2 iTextSharp_5_1_1 iTextSharp_5_1_0 iTextSharp_5_0_6 iTextSharp_5_0_5 iTextSharp_5_0_4 iTextSharp_5_0_2 iTextSharp_5_0_1_1 iTextSharp_5_0_1 iTextSharp_5_0_0 iTextSharp_4_2_0 iTextSharp_4_1_6 5.5.9 5.5.8 5.5.7 Nothing to show New pull request Latest commit deae65a Jul 8, 2016 pavel-morozov-duallab port: Fix XFAForm data retrieval from datasets: skip dataDescriptions… … … and add non-leaf nodes to the search map  Commits: itext/itextpdf [2f9ce400e8] Resolved: DEV-1722 Ported: DEV-1768 Permalink Failed to load latest commit information. src port: Fix XFAForm data retrieval from datasets: skip dataDescriptions… Jul 8, 2016 .gitattributes add src/core/iTextSharp.xml to gitignore Jun 16, 2015 .gitignore add src/core/iTextSharp.xml to gitignore Jun 16, 2015 BUILDING.md update docs May 6, 2015 CONTRIBUTING.md update docs May 6, 2015 EXTRAJARS.md update docs May 6, 2015 LICENSE.md update docs May 6, 2015 README.md update docs May 6, 2015 gnu-agpl-v3.0.md AGPLv3 in MarkDown format Apr 5, 2016 sonar-project.properties normalize line endings Jun 16, 2015 README.md iText consists of several jars. The main iText release contains: itextpdf-x.y.z.jar: the core library itext-xtra-x.y.z.jar: extra functionality (PDF 2!) itext-pdfa-x.y.z.jar: PDF/A-related functionality This project is hosted on https://github.com/itext You can find the latest releases here: https://github.com/itext/itextpdf https://github.com/itext/xtra https://github.com/itext/pdfa You can also build iText from source. In some cases, you'll need extra jars. These jars are bundled in a zip file here: http://sourceforge.net/projects/itext/files/extrajars/ For XML (and HTML) functionality, you need this jar: xmlworker-x.y.z.jar This project is hosted on https://github.com/itext/xmlworker Finally, we also have a tool that can help you debug PDFs: itext-rups-x.y.z.jar This project is hosted on https://github.com/itext/rups If you have an idea on how to improve iText and you want to submit code, please read our Contribution Guidelines. iText is licensed as AGPL software. AGPL is a free / open source software license. This doesn't mean the software is gratis! Buying a license is mandatory as soon as you develop commercial activities distributing the iText software inside your product or deploying it on a network without disclosing the source code of your own applications under the AGPL license. These activities include: offering paid services to customers as an ASP serving PDFs on the fly in the cloud or in a web application shipping iText with a closed source product Contact sales for more info: http://itextpdf.com/sales Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/itext/itextsharp"	"iText is a PDF library that allows you to CREATE, ADAPT, INSPECT and MAINTAIN documents in the Portable Document Format (PDF)"	"true"
"Profiler"	"MiniProfiler"	"https://github.com/MiniProfiler/dotnet"	"A simple but effective mini-profiler for ASP.NET websites"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"656"	"81"	"216"	"GitHub - MiniProfiler/dotnet: A simple but effective mini-profiler for ASP.NET websites Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 81 Star 656 Fork 216 MiniProfiler/dotnet Code Issues 22 Pull requests 6 Pulse Graphs A simple but effective mini-profiler for ASP.NET websites 1,147 commits 3 branches 6 releases 91 contributors C# 95.9% ASP 1.8% CSS 1.7% Other 0.6% C# ASP CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags issues74 master v3.1 Nothing to show v3.2.0 v3.1 v3.0.12 v3.0.11 v3.0.10 v3.0.10-beta Nothing to show New pull request Latest commit 21a52c5 Jul 12, 2016 yellis committed on GitHub Merge pull request #133 from TheCloudlessSky/auth … Make use of AuthorizeRequest to ensure a 401 status code for single profiler result Permalink Failed to load latest commit information. .nuget NuGet package for MiniProfiler.WCF with EF6 Support Apr 10, 2014 MiniProfiler.MVC3.Package Change MVC3 sample back to jquery 1.5.1 Jan 29, 2014 MiniProfiler.MVC3.Sample.Package Goodby MvcMiniProfiler ... hello MiniProfiler Jan 27, 2012 Sample.Console Update SQLite packages so we can build Jul 14, 2015 Sample.Mvc.Mongo Depricate ProfiledMongoServer constructors, setting for max instances (… Aug 27, 2014 Sample.Mvc Update SQLite packages so we can build Jul 14, 2015 Sample.Wcf Update SQLite packages so we can build Jul 14, 2015 Sample.WebForms massive refactoring to add CustomTimings and remove unneeded serializ… Sep 19, 2013 StackExchange.Profiling.EntityFramework Update nuspec files and AssemblyInfo for v3.0.11 May 27, 2014 StackExchange.Profiling.EntityFramework6 Update nuspec files and AssemblyInfo for v3.0.11 May 27, 2014 StackExchange.Profiling.Linq2Sql Revert ""Revert ""moving helper into separate project"""" Nov 1, 2012 StackExchange.Profiling.MongoDB Move MongoDB specific settings to MongoDB project Aug 29, 2014 StackExchange.Profiling.Mvc Update nuspec files and AssemblyInfo for v3.0.11 May 27, 2014 StackExchange.Profiling.RavenDb Fix an issue where two events from separate contexts would accidental… Jan 20, 2016 StackExchange.Profiling.Tests Fix for (max) parameters in SqlServerFormatter Jun 8, 2016 StackExchange.Profiling.Wcf Update nuspec files and AssemblyInfo for v3.0.11 May 27, 2014 StackExchange.Profiling Merge pull request #133 from TheCloudlessSky/auth Jul 12, 2016 packages Remove packages files (#52) May 11, 2014 .gitattributes hopefully this fixes git merge issues Sep 19, 2012 .gitignore Ignore VS 2015 .vs/* files Jul 14, 2015 .gitmodules add https://github.com/MiniProfiler/ui.git submodule Sep 10, 2013 LICENSE.txt remove dotless.Compiler.exe; change something else trivial to test in… Sep 30, 2013 MiniProfiler.EF.nuspec Nuget Updates Jan 26, 2014 MiniProfiler.EF5.nuspec Update nuspec files and AssemblyInfo for v3.0.11 May 27, 2014 MiniProfiler.EF6.nuspec Update nuspec files and AssemblyInfo for v3.0.11 May 27, 2014 MiniProfiler.MVC3.nuspec nuspec versions to 3.0.10-beta1 Feb 5, 2014 MiniProfiler.MVC4.nuspec Update nuspec files and AssemblyInfo for v3.0.11 May 27, 2014 MiniProfiler.MongoDb.nuspec mongo nuget to 3.0.12 Jun 11, 2014 MiniProfiler.Raven.nuspec Update nuspec files and AssemblyInfo for v3.0.11 May 27, 2014 MiniProfiler.WCF.nuspec Update nuspec files and AssemblyInfo for v3.0.11 May 27, 2014 MiniProfiler.nuspec update nuget for release version Aug 26, 2015 MiniProfiler.sln MiniProfiler.MongoDb nuspec and AseemblyInfo May 27, 2014 Readme.md Update Readme.md Sep 4, 2015 pack NuGet package for MiniProfiler.WCF with EF6 Support Apr 10, 2014 Readme.md MiniProfiler for .NET See the home page at: miniprofiler.com for more info on how to set things up. We accept pull requests here. Any issues can be reported in GitHub Issues or on the Community Site. Questions on StackOverflow are welcome using the Mvc-Mini-Profiler tag. Be sure to git submodule init and git submodule update after cloning to pull down the ui repo! Nuget Packages Available: MiniProfiler - The core functionality MiniProfiler.EF6 - Entity Framework 6+ Integration MiniProfiler.MVC4 - ASP.net MVC 4 and 5 Integration MiniProfiler.Raven - RavenDb Integration MiniProfiler.WCF - WCF Integration MiniProfiler.MongoDb - MongoDB Integration MiniProfiler.EF5 - Entity Framework 4 and 5 Integration (The following packages are no longer being actively worked on): MiniProfiler.MVC3 - ASP.net MVC 3 Integration Still on v2, being kept around for those who are still on MVC3 (sorry). May have issues working with the EF6 nuget or other nugets requiring MiniProfiler v3 (like Raven and Mongo). Licensed under Apache 2.0 license Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MiniProfiler/dotnet"	"A simple but effective mini-profiler for ASP.NET websites"	"true"
"Profiler"	"Glimpse"	"https://github.com/glimpse/glimpse"	"The open source diagnostics platform for the web"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1749"	"169"	"401"	"GitHub - Glimpse/Glimpse: The open source diagnostics platform for the web Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 169 Star 1,749 Fork 401 Glimpse/Glimpse Code Issues 6 Pull requests 24 Wiki Pulse Graphs The open source diagnostics platform for the web http://getGlimpse.com 2,591 commits 12 branches 29 releases 43 contributors C# 87.3% JavaScript 6.8% ASP 2.3% CSS 1.9% PowerShell 1.1% HTML 0.6% C# JavaScript ASP CSS PowerShell HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 502-async-issues-with-preSendRequestHeaders 596-add-support-for-webmethods-and-prg Instance-Based-Framework-Provider SerializationImprovements aspnet-vnext-spike cgijbels-onflush-spike glimpse-configuration-system-refactoring improved-persistence-store master no341-fix-for-double-event-handling remove-net35 version-2 Nothing to show v1.8.4 v1.7.0 1.9.2-aspnet 1.8.6 1.8.5 1.8.3 1.8.2 1.8.1 1.8.0 1.7.3-ado 1.6.1 1.6.0 1.5.0 1.4.2 1.4.1 1.4.0 1.4.0-ef 1.3.3 1.3.2 1.3.1 1.3.0 1.2.0 1.1.0 1.0.1 1.0.1-WebForms 1.0.0 1.0.0-RC2 1.0.0-RC1 1.0.0-CTP1 Nothing to show New pull request Latest commit 97ac70d Jul 1, 2016 nikmd23 committed on GitHub Added MS OSS CoC link Permalink Failed to load latest commit information. .nuget Updated Nuget.exe to latest version 2.8 Feb 19, 2014 Doco Added documentation of alternate strategies Dec 5, 2012 Glimpse.Test.Ado Added tests, including failing test for #800 May 29, 2014 builds Use default box-sizing for glimpse Jun 25, 2013 design/font Added fonts used for Glimpse logo Nov 29, 2012 hosted Adding icon for NuGet Apr 9, 2011 source Merge pull request #894 from kendallb/master Jun 16, 2015 tools Update path of mock tests for client build tool Nov 12, 2013 .gitattributes Fix up line endings and add .gitattributes Oct 12, 2012 .gitignore Use DateTimeOffset and obtain full time zone offset (include minutes … Jun 5, 2015 Glimpse.All.sln Added tests, including failing test for #800 May 28, 2014 Glimpse.All.sln.DotSettings Added inspection for TableOperation.EchoContent to Glimpse.WindowsAzu… Dec 4, 2013 Glimpse.All.sln.GhostDoc.user.dic Update dictionary May 14, 2013 Glimpse.Integration.sln Updated Glimpse.Integration solution to make use of automatic package… Feb 20, 2014 Glimpse.Integration.sln.DotSettings First hack at the test harness described in #213. Still missing auto-… Dec 19, 2012 ILMergeInternalize.txt Preparing for RC release Dec 5, 2012 MyGet.bat Added MyGet.bat for building on www.myget.org Dec 24, 2013 README.markdown Added MS OSS CoC link Jul 1, 2016 contributing.md Add Project Governance Model link Apr 9, 2014 default.ps1 Updated build script to build Glimpse.WindowsAzure and Glimpse.Window… Dec 24, 2013 integration.xunit First hack at the test harness described in #213. Still missing auto-… Dec 19, 2012 license.txt Fixed license file Jan 18, 2012 psake.bat Updated psake build script to work with automatic package restore Feb 19, 2014 tests.xunit Remove Glimpse.Test.AspNet.Net35.dll from test runner since those tes… Sep 11, 2013 README.markdown NOTE: Work on v2 of Glimpse has shifted to Glimpse/Glimpse.Prototype The Diagnostics platform of the web Providing real time diagnostics & insights to the fingertips of hundreds of thousands of developers daily How does Glimpse help? Once installed, Glimpse inspects web requests as they happen, providing insights and tooling that reduce debugging time and empower every developer to improve their web applications. Visual Profiling - Glimpse profiles key server side activities and displays the timing of each in an easy to understand Gantt chart. Transparent Data Access - Out of process database calls are expensive. Glimpse lists each of them, so excessive or under-performant queries can be reigned in. View Rendering & Resolution - Glimpse provides complete visibility into ASP.NET MVC's view resolution process, including file access paths. Route Debugging - ASP.NET routing is a powerful, and sometimes maddening, feature. Glimpse cracks into the black box and exposes how routes are matched. Server Configuration - Know everything necessary about a request's origin server including: timezone, patch version, process ID and pertinent web.config entries. Works For All Requests - Glimpse provides insights for not only the originating request, but also for AJAX requests, historical requests from the past and even requests made from other users. ASP.NET WebForms Too - Glimpse ❤'s ASP.NET WebForms with the best View State decoder available embedded directly into the server control tree. Improved Tracing - Glimpse automatically displays trace statements, eliminating the headache of digging through log files. Popular logging frameworks can be integrated with some slight configuration as well! Where Does it Fit Glimpse works where you need it to, how you want it to. Insights are presented in digestable summaries, with the ability to drill down to tackle tough problems. Install via NuGet - Glimpse is installed with one simple NuGet command (Install-Package Glimpse) or with Visual Studio's manager package dialog. Extensible & Configurable - Extend Glimpse via simple APIs and our 3rd party NuGet package ecosystem. Configure it on a whim with the ~/Glimpse.axd configuration builder and web.config. Web Native - Glimpse is built with web technologies that you love: HTML, CSS & JS. It requires no proprietary browser plugin and works everywhere you do. Hardened Security - Hardened by default, only you get to choose who can see what Glimpse data and when. Check out GlimpseSecurityPolicy.cs, already in your project, for more information and samples. Lightweight & Fast - Glimpse's unique architecture makes it faster and less resource intensive than traditional profilers so you never have to sacrifice performance. Unique Perspective - While F12 tools like Firebug and proxy debuggers like Fiddler are extremely useful, only Glimpse provides diagnostics from the perspective of your server. Free & Open Source Thanks to community contributions, Glimpse is thriving and growing. Glimpse is free and available under the Apache 2.0 license. The source code is available, so feel free to jump in and contribute! Getting involved Glimpse wouldn't be what it is today without the love and support of some awesome people from around the world. These contributions have ranged from simple bug fixes to fully fledged features, and from as far afield as South Africa and South East Asia. If you would like to get involved, there are plenty of things that you can do. There are issues that are good for first-timers ringfenced and tagged Jump In in GitHub. If you'd rather start off on something more self-contained, why not write an extension? Issues - Glimpse maintains several issues that are good for first-timers tagged as Jump In on GitHub. If one piques your interest, feel free to work on it and let us know if you need any help doing so. Learn more about how ""Jump In"" issues work New Features - For those looking to get more deeply involved, reach out to find out about our current efforts and how you can help. Learn more about contributing to Glimpse core Share Glimpse - If you love Glimpse, tell others about it! Present Glimpse at a company tech talk, your local user group or submit a proposal to a conference about how you are using Glimpse or any extensions you may have written. Need inspiration? Watch some of the talks that we have given Create an Extension - Get the best out of Glimpse by writing your own extension to expose diagnostic data that is meaningful for your applications. Creating extensions is easy, check the docs or reference an open source extension to get started. Documentation - Documentation is a key differentiator between good projects and great ones. Whether you’re a first time OSS contributor or a veteran, documentation is a great stepping stone to learn our contribution process. Contributing to Glimpse documentation is dead simple. To make it so easy, we're using Glimpse’s GitHub Wiki as the entry point for documentation - each page within the docs section of the site has a link to take you straight to the page where you can make changes directly. GitHub Wikis provide an online WYSIWYG interface for adding and editing the docs, completely in browser, using Markdown. For more on getting involved see our contributor guidelines. Need Help? Issue List - Have you found a bug or something misbehaving? Tell us about it on our GitHub issue list and someone will help you as soon as possible. Stack Overflow - Got general questions or just need a little support? Anything related to using, configuring or extending Glimpse can be asked at StackOverflow. View already answered questions for even faster support. Mailing List - Got questions about how to extend or work on Glimpse, or just want to discuss a new feature idea? Shoot it through to the developers mailing list. More information about Glimpse can be found at getGlimpse.com This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/glimpse/glimpse"	"The open source diagnostics platform for the web"	"true"
"Push Notifications"	"PushSharp"	"https://github.com/Redth/PushSharp"	"A server-side library for sending Push Notifications to iOS, OSX, Android, Chrome, Windows Phone, Windows 8, Blackberry, and Amazon devices."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3271"	"497"	"1333"	"GitHub - Redth/PushSharp: A server-side library for sending Push Notifications to iOS (iPhone/iPad APNS), Android (C2DM and GCM - Google Cloud Message), Windows Phone, Windows 8, Amazon, Blackberry, and (soon) FirefoxOS devices! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 497 Star 3,271 Fork 1,333 Redth/PushSharp Code Issues 51 Pull requests 6 Wiki Pulse Graphs A server-side library for sending Push Notifications to iOS (iPhone/iPad APNS), Android (C2DM and GCM - Google Cloud Message), Windows Phone, Windows 8, Amazon, Blackberry, and (soon) FirefoxOS devices! 525 commits 3 branches 6 releases 29 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.0-dev apns-http2 master Nothing to show v2.2.1.0 v2.2.0.0 4.0.10 4.0.4 4.0.0.0 3.0.1.15 Nothing to show New pull request Latest commit 5abac61 Apr 7, 2016 Redth Ignore the Tag property from GcmNotification serialization … Fixes #678 Permalink Failed to load latest commit information. .github Update CONTRIBUTING.md Feb 20, 2016 HttpTwo @ 7ba7b0e Bump HttpTwo submodule for a fix Jan 15, 2016 PushSharp.Amazon Fix still throwing old typo'd exception for DeviceSubscriptionExpired Mar 30, 2016 PushSharp.Apple Update ApnsNotification.cs Mar 29, 2016 PushSharp.Blackberry Fix still throwing old typo'd exception for DeviceSubscriptionExpired Mar 30, 2016 PushSharp.Core Added properly spelled `DeviceSubscriptionExpiredException` class Mar 23, 2016 PushSharp.Firefox Improved Exception inheritance chain and consistency Mar 16, 2016 PushSharp.Google Ignore the Tag property from GcmNotification serialization Apr 7, 2016 PushSharp.Tests Change Serialization of GcmNotification Priority Apr 7, 2016 PushSharp.Windows Fix still throwing old typo'd exception for DeviceSubscriptionExpired Mar 30, 2016 Resources Added images for new APNS setup guide Mar 16, 2016 .gitattributes Added .gitattributes to help with line endings Jun 22, 2012 .gitignore Ignore .vs folders Jan 5, 2016 .gitmodules Added HttpTwo submodule Dec 26, 2015 LICENSE.md Begin anew, all the things Oct 26, 2015 PushSharp-Signing.snk Added Code Signing Fixes #46 Oct 5, 2012 PushSharp.nuspec Remove APNS-HTTP/2 and GCM-XMPP (will track in another branch for now) Feb 20, 2016 PushSharp.sln Remove HttpTwo from .sln since t's not yet used Mar 15, 2016 README.md Update README.md Mar 25, 2016 README.md PushSharp v4.0 PushSharp is a server-side library for sending Push Notifications to iOS/OSX (APNS), Android/Chrome (GCM), Windows/Windows Phone, Amazon (ADM) and Blackberry devices! PushSharp v3.0+ is a complete rewrite of the original library, aimed at taking advantage of things like async/await, HttpClient, and generally a better infrastructure using lessons learned from the old code. PushSharp will now follow semver versioning, so major version numbers will go up as there are any breaking api changes. Read more on my blog http://redth.codes/pushsharp-3-0-the-push-awakens/ Join the Gitter.im channel with questions/feedback Sample Usage The API in v3.x+ series is quite different from 2.x. The goal is to simplify things and focus on the core functionality of the library, leaving things like constructing valid payloads up to the developer. APNS Sample Usage Here is an example of how you would send an APNS notification: // Configuration (NOTE: .pfx can also be used here) var config = new ApnsConfiguration (ApnsConfiguration.ApnsServerEnvironment.Sandbox,      ""push-cert.p12"", ""push-cert-pwd"");  // Create a new broker var apnsBroker = new ApnsServiceBroker (config);  // Wire up events apnsBroker.OnNotificationFailed += (notification, aggregateEx) => {      aggregateEx.Handle (ex => {          // See what kind of exception it was to further diagnose         if (ex is ApnsNotificationException) {             var notificationException = (ApnsNotificationException)ex;              // Deal with the failed notification             var apnsNotification = notificationException.Notification;             var statusCode = notificationException.ErrorStatusCode;              Console.WriteLine ($""Apple Notification Failed: ID={apnsNotification.Identifier}, Code={statusCode}"");          } else {             // Inner exception might hold more useful information like an ApnsConnectionException                        Console.WriteLine ($""Apple Notification Failed for some unknown reason : {ex.InnerException}"");         }          // Mark it as handled         return true;     }); };  apnsBroker.OnNotificationSucceeded += (notification) => {     Console.WriteLine (""Apple Notification Sent!""); };  // Start the broker apnsBroker.Start ();  foreach (var deviceToken in MY_DEVICE_TOKENS) {     // Queue a notification to send     apnsBroker.QueueNotification (new ApnsNotification {         DeviceToken = deviceToken,         Payload = JObject.Parse (""{\""aps\"":{\""badge\"":7}}"")     }); }  // Stop the broker, wait for it to finish    // This isn't done after every message, but after you're // done with the broker apnsBroker.Stop (); Apple Notification Payload More information about the payload sent in the ApnsNotification object can be found here. Apple APNS Feedback Service For APNS you will also need to occasionally check with the feedback service to see if there are any expired device tokens you should no longer send notifications to. Here's an example of how you would do that: var config = new ApnsConfiguration (     ApnsConfiguration.ApnsServerEnvironment.Sandbox,      Settings.Instance.ApnsCertificateFile,      Settings.Instance.ApnsCertificatePassword);  var fbs = new FeedbackService (config); fbs.FeedbackReceived += (string deviceToken, DateTime timestamp) => {     // Remove the deviceToken from your database     // timestamp is the time the token was reported as expired }; fbs.Check (); GCM Sample Usage Here is how you would send a GCM Notification: // Configuration var config = new GcmConfiguration (""GCM-SENDER-ID"", ""AUTH-TOKEN"", null);  // Create a new broker var gcmBroker = new GcmServiceBroker (config);  // Wire up events gcmBroker.OnNotificationFailed += (notification, aggregateEx) => {      aggregateEx.Handle (ex => {          // See what kind of exception it was to further diagnose         if (ex is GcmNotificationException) {             var notificationException = (GcmNotificationException)ex;              // Deal with the failed notification             var gcmNotification = notificationException.Notification;             var description = notificationException.Description;              Console.WriteLine ($""GCM Notification Failed: ID={gcmNotification.MessageId}, Desc={description}"");         } else if (ex is GcmMulticastResultException) {             var multicastException = (GcmMulticastResultException)ex;              foreach (var succeededNotification in multicastException.Succeeded) {                 Console.WriteLine ($""GCM Notification Failed: ID={succeededNotification.MessageId}"");             }              foreach (var failedKvp in multicastException.Failed) {                 var n = failedKvp.Key;                 var e = failedKvp.Value;                  Console.WriteLine ($""GCM Notification Failed: ID={n.MessageId}, Desc={e.Description}"");             }          } else if (ex is DeviceSubscriptionExpiredException) {             var expiredException = (DeviceSubscriptionExpiredException)ex;              var oldId = expiredException.OldSubscriptionId;             var newId = expiredException.NewSubscriptionId;              Console.WriteLine ($""Device RegistrationId Expired: {oldId}"");              if (!string.IsNullOrWhitespace (newId)) {                 // If this value isn't null, our subscription changed and we should update our database                 Console.WriteLine ($""Device RegistrationId Changed To: {newId}"");             }         } else if (ex is RetryAfterException) {             var retryException = (RetryAfterException)ex;             // If you get rate limited, you should stop sending messages until after the RetryAfterUtc date             Console.WriteLine ($""GCM Rate Limited, don't send more until after {retryException.RetryAfterUtc}"");         } else {             Console.WriteLine (""GCM Notification Failed for some unknown reason"");         }          // Mark it as handled         return true;     }); };  gcmBroker.OnNotificationSucceeded += (notification) => {     Console.WriteLine (""GCM Notification Sent!""); };  // Start the broker gcmBroker.Start ();  foreach (var regId in MY_REGISTRATION_IDS) {     // Queue a notification to send     gcmBroker.QueueNotification (new GcmNotification {         RegistrationIds = new List<string> {              regId         },         Data = JObject.Parse (""{ \""somekey\"" : \""somevalue\"" }"")     }); }  // Stop the broker, wait for it to finish    // This isn't done after every message, but after you're // done with the broker gcmBroker.Stop (); Components of a GCM Notification GCM notifications are much more customizable than Apple Push Notifications. More information about the messaging concepts and options can be found here. WNS Sample Usage Here's how to send WNS Notifications: // Configuration var config = new WnsConfiguration (""WNS_PACKAGE_NAME"", ""WNS_PACKAGE_SID"", ""WNS_CLIENT_SECRET"");  // Create a new broker var wnsBroker = new WnsServiceBroker (config);  // Wire up events wnsBroker.OnNotificationFailed += (notification, aggregateEx) => {      aggregateEx.Handle (ex => {          // See what kind of exception it was to further diagnose         if (ex is WnsNotificationException) {             var notificationException = (WnsNotificationException)ex;             Console.WriteLine ($""WNS Notification Failed: {notificationException.Message}"");         } else {             Console.WriteLine (""WNS Notification Failed for some (Unknown Reason)"");         }          // Mark it as handled         return true;     }); };  wnsBroker.OnNotificationSucceeded += (notification) => {     Console.WriteLine (""WNS Notification Sent!""); };  // Start the broker wnsBroker.Start ();  foreach (var uri in MY_DEVICE_CHANNEL_URIS) {     // Queue a notification to send     wnsBroker.QueueNotification (new WnsToastNotification {         ChannelUri = uri,         Payload = XElement.Parse (@""             <toast>                 <visual>                     <binding template=""""ToastText01"""">                         <text id=""""1"""">WNS_Send_Single</text>                     </binding>                   </visual>             </toast>"")     }); }  // Stop the broker, wait for it to finish    // This isn't done after every message, but after you're // done with the broker wnsBroker.Stop (); How to Migrate from PushSharp 2.x to 3.x and higher Please see this Wiki page for more information: https://github.com/Redth/PushSharp/wiki/Migrating-from-PushSharp-2.x-to-3.x- Roadmap APNS - Apple Push Notification Service Finish HTTP/2 support (currently in another branch) GCM - Google Cloud Messaging XMPP transport still under development Other More NUnit tests to be written, with a test GCM Server, and eventually Test servers for other platforms New Xamarin Client samples (how to setup each platform as a push client) will be built and live in a separate repository to be less confusing License Copyright 2012-2016 Jonathan Dick Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Redth/PushSharp"	"A server-side library for sending Push Notifications to iOS, OSX, Android, Chrome, Windows Phone, Windows 8, Blackberry, and Amazon devices."	"true"
"Queue"	"NServiceBus"	"https://github.com/Particular/NServiceBus"	"The most popular service bus for.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"941"	"133"	"508"	"GitHub - Particular/NServiceBus: The most popular service bus for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 133 Star 941 Fork 508 Particular/NServiceBus Code Issues 229 Pull requests 11 Pulse Graphs The most popular service bus for .NET http://particular.net/nservicebus 9,487 commits 34 branches 188 releases 94 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags BehaviorInstance RecoverabilityOverride SettingsPerSerializer avoid-assembly-get-types detect-message-id-header-change develop distribution-strategy-per-endpoint filebased-transport fix-polymophic-routing fix-sla-counter fix-sla-perf-improvement fixing-acceptance-tests-excludes headers-performance improve-sla-perf make-argument-tests-mandatory master pubsub-to-self-6.0.0-Beta4 pubsub-to-self-beta2 pubsub-to-self-v6 pubsub-to-self refactor-unicast-router release-6.0.0 rename-add-dynamic support-3.3 support-4.0 support-4.1 support-4.2 support-4.3 support-4.4 support-4.5 support-4.6 support-4.7 support-5.0 support-5.1 Nothing to show untagged-55b12755dac7a8afa94a untagged-23d1257584c15c11ccb2 untagged-7c5bd0c9038ac437119c 6.0.0-Beta5 6.0.0-Beta4 6.0.0-Beta3 6.0.0-Beta2 6.0.0-Beta1 5.2.18 5.2.14 5.2.13 5.2.12 5.2.11 5.2.10 5.2.9 5.2.8 5.2.7 5.2.6 5.2.5 5.2.4 5.2.3 5.2.2 5.2.0 5.2.0-beta1 5.1.9 5.1.8 5.1.7 5.1.6 5.1.5 5.1.4 5.1.3 5.1.2 5.1.1 5.1.0 5.0.11 5.0.10 5.0.9 5.0.8 5.0.7 5.0.6 5.0.5 5.0.4 5.0.3 5.0.2 5.0.1 5.0.0 5.0.0-beta6 5.0.0-beta5 5.0.0-beta4 5.0.0-beta3 5.0.0-beta2 5.0.0-beta1 4.7.12 4.7.11 4.7.10 4.7.9 4.7.8 4.7.7 4.7.6 4.7.5 4.7.4 4.7.3 4.7.2 4.7.1 4.7.0 4.6.10 4.6.9 4.6.8 4.6.7 4.6.6 4.6.5 4.6.4 4.6.3 4.6.2 4.6.1 4.6.1-alpha1 4.6.0 4.5.7 4.5.6 4.5.5 4.5.4 4.5.3 4.5.2 4.5.1 4.5.0 4.4.8 4.4.7 4.4.6 4.4.5 4.4.4 4.4.3 4.4.2 4.4.2-alpha1 4.4.1 4.4.1-alpha1 4.4.0 4.4.0-alpha1 4.3.10 4.3.9 4.3.8 Nothing to show New pull request Latest commit 4d9c771 Apr 27, 2016 timbussmann Merge pull request #3676 from Particular/timeout-dispatch-flaky-test-fix … Timeout dispatch tests: potentially flaky assert fixed Permalink Failed to load latest commit information. Octopus SyncOMatic update Nov 7, 2014 lib Removing all host releated files Oct 10, 2014 packaging/nuget put sources in App_Packages folder Mar 31, 2016 src Merge pull request #3676 from Particular/timeout-dispatch-flaky-test-fix Apr 27, 2016 tools/IlMerge remove redundant tools Mar 13, 2014 .gitattributes SyncOMatic update Oct 6, 2015 .gitignore Adding JetBrains Rider (.NET IDE) specific files to .gitignore Feb 21, 2016 CONTRIBUTING.md Updated link to create a new issue Oct 3, 2013 GitVersionConfig.yaml Updated NuGetPackager 0.6.0 and GitVersion 3.4.1 Apr 6, 2016 LICENSE.md Updated license.md to point to new licensing on the particular site. Oct 15, 2013 README.md Updating README license details to reflect what's actually used Jul 30, 2015 acknowledgements.txt CRLF issues Sep 27, 2012 README.md Building To build NServiceBus just open NServiceBus.sln in Visual Studio. Note that the debug build doesn't ilmerge and if you plan to use the binaries in test/production you need to do a release build. You'll find the built assemblies in /binaries. If you see the build failing, check that you haven't put the source of NServiceBus in a deep subdirectory since long path names (greater than 248 characters) aren't supported by MSBuild. Running To run NServiceBus, please download and install the setup file from http://particular.net/downloads Licenses Autofac Autofac is licensed under the MIT license as described here. Autofac binaries are linked into the NServiceBus distribution allowed under the license terms found here. Json.NET Json.NET is licensed under the MIT license as described here. Json.NET binaries are linked into the NServiceBus distribution allowed under the license terms found here. RijndaelEncryptionService Taken from rhino-esb under this license Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Particular/NServiceBus"	"The most popular service bus for.NET"	"true"
"Queue"	"Hangfire"	"https://github.com/HangfireIO/Hangfire"	"Incredibly easy way to perform fire-and-forget, delayed and recurring tasks inside ASP.NET applications"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1704"	"167"	"481"	"GitHub - HangfireIO/Hangfire: An easy way to perform fire-and-forget, delayed and recurring tasks inside ASP.NET apps Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 167 Star 1,704 Fork 481 HangfireIO/Hangfire Code Issues 113 Pull requests 18 Pulse Graphs An easy way to perform fire-and-forget, delayed and recurring tasks inside ASP.NET apps http://hangfire.io 2,466 commits 3 branches 62 releases 63 contributors C# 97.0% PLpgSQL 1.5% Other 1.5% C# PLpgSQL Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master sql-oracle Nothing to show v1.6.0 v1.6.0-beta3 v1.6.0-beta2 v1.6.0-beta1 v1.5.9 v1.5.8 v1.5.7 v1.5.6 v1.5.5 v1.5.4 v1.5.3 v1.5.2 v1.5.1 v1.5.0 v1.5.0-beta4 v1.5.0-beta3 v1.5.0-beta2 v1.5.0-beta1 v1.4.7 v1.4.6 v1.4.5 v1.4.4 v1.4.3 v1.4.2 v1.4.1 v1.4.0 v1.4.0-rc2 v1.4.0-rc1 v1.4.0-beta1 v1.3.4 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.2 v1.2.1 v1.2.0 v1.1.1 v1.1.0 v1.1.0-alpha3 v1.1.0-alpha2 v1.1.0-alpha1 v1.0.2 v1.0.0-alpha1 v1.0 v0.9.1 v0.9.0 v0.8.3 v0.8.2 v0.8.1 v0.8 v0.7.5 v0.7.4 v0.7.3 v0.7.1 v0.7.0 v0.7.0-beta.2 v0.7.0-beta.1 v0.6.2 v0.6 v0.6-alpha v0.5 Nothing to show New pull request Latest commit 4dec643 Jul 15, 2016 odinserj committed on GitHub Merge pull request #614 from HangfireIO/dev … Release 1.6.0 Permalink Failed to load latest commit information. .nuget Update Hangfire.Build to 0.2.5 Jul 7, 2016 content Add sample ASP.NET Core Startup.cs Jul 15, 2016 nuspecs Update release notes for 1.6.0 Jul 15, 2016 samples Remove diffs with `dev` branch that don't make sense Jul 1, 2016 src Add `GetHttpContext` and `GetOwinEnvironment` extension methods for D… Jul 15, 2016 tests Update Dapper to 1.50.1 in net45 projects Jul 12, 2016 .editorconfig Replace tabs with spaces in psake-project.ps1 Mar 19, 2015 .gitattributes * Sep 6, 2013 .gitignore Update gitignore and remove .lock.json files (#610) Jul 13, 2016 .travis.yml Export HOSTNAME variable on Travis CI Jul 5, 2016 COPYING LGPL v3 license text Nov 10, 2013 COPYING.LESSER LGPL v3 license text Nov 10, 2013 EULA Create EULA Dec 24, 2014 Hangfire.Mono.sln Remove Hangfire.SqlServer.RabbitMQ from Hangfire.Mono Jan 21, 2016 Hangfire.sln Add support for .NET Framework 4.5.1 in Hangfire.AspNetCore Jul 12, 2016 Hangfire.sln.DotSettings Change filename casing Jun 30, 2014 LICENSE.md Update copyright year Feb 19, 2016 README.md Update copyright year Mar 22, 2016 appveyor.yml Build PR packages, but with the same build number Jul 7, 2016 build.bat Lower the verbosity of NuGet install command Jul 1, 2016 global.json Add MvcCoreSample project based on ASP.NET Core Jun 29, 2016 psake-project.ps1 Add support for .NET Framework 4.5.1 in Hangfire.AspNetCore Jul 12, 2016 README.md Hangfire Incredibly easy way to perform fire-and-forget, delayed and recurring jobs inside ASP.NET applications. CPU and I/O intensive, long-running and short-running jobs are supported. No Windows Service / Task Scheduler required. Backed by Redis, SQL Server, SQL Azure and MSMQ. Hangfire provides a unified programming model to handle background tasks in a reliable way and run them on shared hosting, dedicated hosting or in cloud. You can start with a simple setup and grow computational power for background jobs with time for these scenarios: mass notifications/newsletters batch import from xml, csv or json creation of archives firing off web hooks deleting users building different graphs image/video processing purging temporary files recurring automated reports database maintenance …and so on Hangfire is a .NET Framework alternative to Resque, Sidekiq, delayed_job, Celery. Installation Hangfire is available as a NuGet package. You can install it using the NuGet Package Console window: PM> Install-Package Hangfire  After installation, update your existing OWIN Startup file with the following lines of code. If you do not have this class in your project or don't know what is it, please read the Quick start guide to learn about how to install Hangfire. public void Configuration(IAppBuilder app) {     GlobalConfiguration.Configuration.UseSqlServerStorage(""<connection string or its name>"");      app.UseHangfireServer();     app.UseHangfireDashboard(); } Usage This is an incomplete list of features; to see all of them, check the official site and the documentation. Fire-and-forget tasks Dedicated worker pool threads execute queued background jobs as soon as possible, shortening your request's processing time. BackgroundJob.Enqueue(() => Console.WriteLine(""Simple!"")); Delayed tasks Scheduled background jobs are executed only after a given amount of time. BackgroundJob.Schedule(() => Console.WriteLine(""Reliable!""), TimeSpan.FromDays(7)); Recurring tasks Recurring jobs have never been simpler; just call the following method to perform any kind of recurring task using the CRON expressions. RecurringJob.AddOrUpdate(() => Console.WriteLine(""Transparent!""), Cron.Daily); Continuations Continuations allow you to define complex workflows by chaining multiple background jobs together. var id = BackgroundJob.Enqueue(() => Console.WriteLine(""Hello, "")); BackgroundJob.ContinueWith(id, () => Console.WriteLine(""world!"")); Process background tasks inside a web application… You can process background tasks in any OWIN-compatible application framework, including ASP.NET MVC, ASP.NET Web API, FubuMvc, Nancy, etc. Forget about AppDomain unloads, Web Garden & Web Farm issues – Hangfire is reliable for web applications from scratch, even on shared hosting. app.UseHangfireServer(); … or anywhere else In console applications, Windows Service, Azure Worker Role, etc. using (new BackgroundJobServer()) {     Console.WriteLine(""Hangfire Server started. Press ENTER to exit..."");     Console.ReadLine(); } Questions? Problems? Open-source projects develop more smoothly when discussions are public. If you have any questions, problems related to Hangfire usage or if you want to discuss new features, please visit the discussion forum. You can sign in there using your existing Google or GitHub account, so it's very simple to start using it. If you've discovered a bug, please report it to the Hangfire GitHub Issues. Detailed reports with stack traces, actual and expected behavours are welcome. Related Projects Please see the Extensions page on the official site. Building the sources To build a solution and get assembly files, just run the following command. All build artifacts, including *.pdb files, will be placed into the build folder. Before proposing a pull request, please use this command to ensure everything is ok. Btw, you can execute this command from the Package Manager Console window. build  To build NuGet packages as well as an archive file, use the pack command as shown below. You can find the result files in the build folder. build pack  To see the full list of avalable commands, pass the -docs switch: build -docs  Hangfire uses psake build automation tool. All psake tasks and functions defined in psake-build.ps1 (for this project) and psake-common.ps1 (for other Hangfire projects) files. Thanks to the psake project, they are very simple to use and modify! License Copyright © 2013-2016 Sergey Odinokov. This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with this program. If not, see http://www.gnu.org/licenses/. Legal By submitting a Pull Request, you disavow any rights or claims to any changes submitted to the Hangfire project and assign the copyright of those changes to Sergey Odinokov. If you cannot or do not want to reassign those rights (your employment contract for your employer may not allow this), you should not submit a PR. Open an issue and someone else can do the work. This is a legal way of saying ""If you submit a PR to us, that code becomes ours"". 99.9% of the time that's what you intend anyways; we hope it doesn't scare you away from contributing. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/HangfireIO/Hangfire"	"Incredibly easy way to perform fire-and-forget, delayed and recurring tasks inside ASP.NET applications"	"true"
"Queue"	"RabbitMQ.NET"	"http://hg.rabbitmq.com/rabbitmq-dotnet-client/"	"Implementation of an AMQP client library for C#, and a binding exposing AMQP services via WCF"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"rabbitmq-dotnet-client: Summary Mercurialrabbitmq-dotnet-client / summary summary | shortlog | changelog | graph | tags | bookmarks | branches | files | bz2 | zip | gz | help   description RabbitMQ .NET client owner info@rabbitmq.com last change Tue, 17 Feb 2015 17:45:34 +0100 changes Tue, 17 Feb 2015 17:45:34 +0100 Jean-Sebastien Pedron stable to default default tip changeset | files Tue, 17 Feb 2015 17:45:18 +0100 Jean-Sebastien Pedron README.md: Warn about the move to GitHub stable changeset | files Thu, 12 Feb 2015 12:53:44 +0300 Michael Klishin .msi package is no longer provided, don't expect .msm to be built changeset | files Thu, 12 Feb 2015 12:07:05 +0300 Michael Klishin This doc is now part of the .NET guide in the site repo changeset | files Thu, 12 Feb 2015 12:06:05 +0300 Michael Klishin There is no Makefile in ./docs any more changeset | files Wed, 11 Feb 2015 20:08:32 +0300 Michael Klishin merge stable into default changeset | files Wed, 11 Feb 2015 19:14:26 +0300 Michael Klishin Added tag rabbitmq_v3_4_4 for changeset 03002419df2f stable changeset | files Wed, 11 Feb 2015 11:32:43 +0300 Michael Klishin merge stable into bug26283 bug26283 changeset | files Wed, 11 Feb 2015 09:10:10 +0100 Jean-Sebastien Pedron Merge stable into default changeset | files Wed, 11 Feb 2015 09:07:38 +0100 Jean-Sebastien Pedron Merge bug26590 into stable stable rabbitmq_v3_4_4 changeset | files Tue, 10 Feb 2015 18:16:49 +0100 Jean-Sebastien Pedron Update installer files to work with WiX 4.0 bug26590 changeset | files Mon, 09 Feb 2015 19:26:32 +0300 Michael Klishin merge stable into default changeset | files Mon, 09 Feb 2015 19:18:22 +0300 Michael Klishin merge bug26588 into stable stable changeset | files Mon, 09 Feb 2015 17:12:40 +0100 Jean-Sebastien Pedron Don't use /nosubtypes flag, NDocProc doesn't know it bug26588 changeset | files Mon, 09 Feb 2015 17:12:11 +0100 Jean-Sebastien Pedron Update NDocProc bug26588 changeset | files Mon, 02 Feb 2015 15:39:56 +0300 Michael Klishin merge bug26483 into default changeset | files Mon, 02 Feb 2015 15:39:11 +0300 Michael Klishin Extract IQueueingBasicConsumer bug26483 changeset | files Mon, 02 Feb 2015 14:50:09 +0300 Michael Klishin Extract ISubscription from Subscription bug26483 changeset | files Thu, 29 Jan 2015 11:04:07 +0300 Michael Klishin merge heads changeset | files Thu, 29 Jan 2015 11:01:11 +0300 Michael Klishin merge stable into default changeset | files Thu, 29 Jan 2015 10:06:04 +0300 Michael Klishin Port a test from default stable changeset | files Thu, 29 Jan 2015 08:47:35 +0300 Michael Klishin Add a test for ConnectionFactory properties changeset | files Wed, 28 Jan 2015 04:56:11 +0300 Michael Klishin Try bumping these to improve CI stability changeset | files Fri, 23 Jan 2015 02:02:05 +0300 Michael Klishin merge bug26550 into default changeset | files Fri, 23 Jan 2015 01:18:05 +0300 Michael Klishin Handle a case when no client is certificate provided bug26550 changeset | files Fri, 23 Jan 2015 01:17:36 +0300 Michael Klishin This should be under RabbitMQ.Client.Unit like other test cases bug26550 changeset | files Fri, 23 Jan 2015 01:17:14 +0300 Michael Klishin Explain bug26550 changeset | files Wed, 14 Jan 2015 04:16:16 +0300 Michael Klishin merge bug26534 into default (again) changeset | files Wed, 14 Jan 2015 04:15:29 +0300 Michael Klishin Remove more WiX code bug26534 changeset | files Tue, 13 Jan 2015 20:34:30 +0300 Michael Klishin merge bug26534 into default changeset | files Tue, 13 Jan 2015 20:29:27 +0300 Michael Klishin Rip out MSI installer files bug26534 changeset | files Tue, 13 Jan 2015 19:46:59 +0300 Michael Klishin merge bug26420 into default changeset | files Tue, 13 Jan 2015 18:56:53 +0300 Michael Klishin merge default into bug26420 bug26420 changeset | files Tue, 13 Jan 2015 18:42:54 +0300 Michael Klishin Upgrade NDocProc changeset | files Sat, 10 Jan 2015 21:38:09 +0300 Michael Klishin merge bug26530 into default changeset | files Sat, 10 Jan 2015 21:33:59 +0300 Michael Klishin Replace ndocproc.exe with a version re-compiled for .NET 4.0 bug26530 changeset | files Fri, 09 Jan 2015 18:44:15 +0300 Michael Klishin merge default into bug26420 bug26420 changeset | files Fri, 09 Jan 2015 18:41:59 +0300 Michael Klishin Make sure ToolsVersion=""4.0"" for now changeset | files Fri, 09 Jan 2015 18:35:23 +0300 Michael Klishin Make sure ToolsVersion=""4.0"" for now bug26420 changeset | files Wed, 07 Jan 2015 14:24:41 +0100 Jean-Sebastien Pedron stable to default changeset | files Wed, 07 Jan 2015 10:21:54 +0000 Jean-Sebastien Pedron Added tag rabbitmq_v3_4_3 for changeset f02c15ab7b30 stable changeset | files Sat, 03 Jan 2015 19:23:09 +0300 Michael Klishin merge default into bug26420 bug26420 changeset | files Sat, 03 Jan 2015 07:56:49 -0800 Michael Klishin merge bug26505 into default changeset | files Sat, 03 Jan 2015 07:55:55 -0800 Michael Klishin merge default into bug26505 bug26505 changeset | files Sat, 03 Jan 2015 17:18:11 +0300 GSerjo * PrimitiveParser removed spaces.. (Resharper's bug :((() changeset | files Sat, 03 Jan 2015 17:04:51 +0300 GSerjo Merge changeset | files Sat, 03 Jan 2015 14:41:48 +0300 GSerjo * PrimitiveParse replaced Parse with TryParse changeset | files Sat, 03 Jan 2015 01:51:20 +0300 GSerjo * All replaced delegates on Func and Action changeset | files Sat, 03 Jan 2015 01:48:49 +0300 GSerjo + resharper settings changeset | files Fri, 02 Jan 2015 23:20:09 +0300 GSerjo * ConnectionFactory removed IList<string> casting changeset | files Fri, 02 Jan 2015 22:16:48 +0300 GSerjo * All improved logging changeset | files Fri, 02 Jan 2015 20:17:04 +0300 GSerjo * fixed EventHandler changeset | files Fri, 02 Jan 2015 19:54:00 +0300 GSerjo * RabbitMQ.Cleint added files changeset | files Fri, 02 Jan 2015 19:53:30 +0300 GSerjo * All delegates were changed on EventHandler<T> changeset | files Sun, 28 Dec 2014 21:59:40 +0300 GSerjo * CallbackExceptionEventHandler, ConsumerCancelledEventHandler, ConsumerShutdownEventHandler, ConsumerEventHandler were changed on EventHandler<T> changeset | files Sun, 28 Dec 2014 21:53:09 +0300 GSerjo * RabbitMQ.Client remove handlers changeset | files Sun, 28 Dec 2014 21:42:29 +0300 GSerjo * hgignore added GhostDoc changeset | files Sun, 28 Dec 2014 01:51:49 +0300 GSerjo * All improved documentation changeset | files Sat, 27 Dec 2014 16:51:19 +0300 GSerjo + Resharper settings changeset | files Sat, 03 Jan 2015 13:12:52 +0300 Michael Klishin Better ways to compare authentication method names and URI schemas changeset | files Sat, 03 Jan 2015 13:07:15 +0300 Michael Klishin Assorted API reference documentation updates changeset | files Fri, 02 Jan 2015 12:17:47 -0800 Michael Klishin merge default into bug26505 bug26505 changeset | files Fri, 02 Jan 2015 22:21:45 +0300 Michael Klishin merge default into bug26420 bug26420 changeset | files Fri, 02 Jan 2015 22:20:03 +0300 Michael Klishin merge default into bug26420 bug26420 changeset | files Fri, 02 Jan 2015 22:20:38 +0300 Michael Klishin .NET 3.5 properties file can now go changeset | files Fri, 02 Jan 2015 22:05:20 +0300 Michael Klishin Add a way to skip fetching repository README with Links changeset | files Fri, 02 Jan 2015 21:56:49 +0300 Michael Klishin Use .NET 4.0 properties file in dist.sh changeset | files Fri, 02 Jan 2015 22:07:31 +0300 Michael Klishin Remove more code related to Pyle-based doc guide bug26420 changeset | files Fri, 02 Jan 2015 22:05:20 +0300 Michael Klishin Add a way to skip fetching repository README with Links bug26420 changeset | files Fri, 02 Jan 2015 21:58:47 +0300 Michael Klishin Remove PDF guide sources that are no longer needed bug26420 changeset | files Fri, 02 Jan 2015 21:56:49 +0300 Michael Klishin Use .NET 4.0 properties file in dist.sh bug26420 changeset | files Fri, 02 Jan 2015 21:42:25 +0300 Michael Klishin Remove PDF guides directory from Wix metadata bug26420 changeset | files Tue, 30 Dec 2014 00:36:40 +0300 Michael Klishin merge default into bug26420 bug26420 changeset | files Tue, 30 Dec 2014 00:33:34 +0300 Michael Klishin Update Wix version detection for 4.0 changeset | files Tue, 30 Dec 2014 00:26:54 +0300 Michael Klishin Add .NET 4.0 properties file changeset | files Fri, 02 Jan 2015 21:12:38 +0300 Michael Klishin Don't include PDF guides into the release bug26420 changeset | files Mon, 29 Dec 2014 23:37:04 +0300 Michael Klishin Another warning changeset | files Mon, 29 Dec 2014 23:36:51 +0300 Michael Klishin Ditto changeset | files Mon, 29 Dec 2014 23:35:18 +0300 Michael Klishin Squash a warning changeset | files Mon, 29 Dec 2014 11:50:23 -0800 Michael Klishin merge default into bug26505 bug26505 changeset | files Mon, 29 Dec 2014 11:37:59 -0800 Michael Klishin Make this test more resilient to environment differences changeset | files Mon, 29 Dec 2014 11:37:59 -0800 Michael Klishin Make this test more resilient to environment differences bug26505 changeset | files Mon, 29 Dec 2014 10:29:47 -0800 Michael Klishin merge default into bug26505 bug26505 changeset | files Mon, 29 Dec 2014 07:50:42 -0800 Michael Klishin Re-work periodic connection recovery, make related tests more robust changeset | files Mon, 29 Dec 2014 07:50:42 -0800 Michael Klishin Re-work periodic connection recovery, make related tests more robust bug26505 changeset | files Mon, 29 Dec 2014 01:29:46 +0300 Michael Klishin This test doesn't really test much changeset | files Mon, 29 Dec 2014 01:29:33 +0300 Michael Klishin Simplify a bit changeset | files Mon, 29 Dec 2014 01:29:03 +0300 Michael Klishin Drop NUnit framework DLLs in changeset | files Mon, 29 Dec 2014 01:28:34 +0300 Michael Klishin Update reference to upgraded NUnit changeset | files Mon, 29 Dec 2014 01:06:11 +0300 Michael Klishin Bump ToolsVersion here, too changeset | files Sun, 28 Dec 2014 13:44:13 -0800 Michael Klishin merge default into bug26505 bug26505 changeset | files Sun, 28 Dec 2014 06:07:52 -0800 Michael Klishin merge bug26511 into default changeset | files Sun, 28 Dec 2014 16:49:59 +0300 Michael Klishin Remove old NUnit files bug26511 changeset | files Sun, 28 Dec 2014 16:45:34 +0300 Michael Klishin Upgrade NUnit to 2.6.4 bug26511 changeset | files Sun, 28 Dec 2014 16:27:26 +0300 Michael Klishin merge heads of bug26511 bug26511 changeset | files Sun, 28 Dec 2014 16:26:56 +0300 Michael Klishin System.String.IsNullOrWhiteSpace seems to have incorrect accessibility on Mono bug26511 changeset | files Sun, 28 Dec 2014 05:19:59 -0800 Michael Klishin Local.props.example should target .NET 4.0 now bug26511 changeset | files Sun, 28 Dec 2014 16:18:00 +0300 Michael Klishin Ditto bug26511 changeset | files Sun, 28 Dec 2014 16:15:39 +0300 Michael Klishin Ditto bug26511 changeset | files Sun, 28 Dec 2014 16:15:27 +0300 Michael Klishin Ditto bug26511 changeset | files Sun, 28 Dec 2014 16:15:14 +0300 Michael Klishin Ditto bug26511 changeset | files Sun, 28 Dec 2014 16:14:35 +0300 Michael Klishin Ditto bug26511 changeset | files Sun, 28 Dec 2014 16:14:18 +0300 Michael Klishin Bump ToolsVersion to 4.0 bug26511 changeset | files Sun, 28 Dec 2014 15:54:16 +0300 Michael Klishin Assorted doc string and member name prefix changes bug26511 changeset | files Sat, 27 Dec 2014 03:08:54 -0800 Michael Klishin merge default into bug26505 bug26505 changeset | files Sat, 27 Dec 2014 13:56:49 +0300 Michael Klishin merge bug26510 into default changeset | files Sat, 27 Dec 2014 13:55:59 +0300 Michael Klishin Use a separate lock object in BlockingCell bug26510 changeset | files Sat, 27 Dec 2014 13:51:02 +0300 Michael Klishin merge bug26508 into default changeset | files Sat, 27 Dec 2014 13:50:37 +0300 Michael Klishin Synchronise one more method in SessionManager bug26508 changeset | files Sat, 27 Dec 2014 13:49:04 +0300 Michael Klishin merge bug26509 into default changeset | files Sat, 27 Dec 2014 13:29:27 +0300 Michael Klishin Switch to auto-properties, lots of cosmetic changes bug26509 changeset | files Thu, 25 Dec 2014 12:52:43 +0300 Michael Klishin merge bug26507 into default changeset | files Thu, 25 Dec 2014 12:48:24 +0300 Michael Klishin Cache known exchange types bug26507 changeset | files Thu, 25 Dec 2014 01:39:51 -0800 Michael Klishin Upgrade project files to VS 2013 (Community) bug26505 changeset | files Fri, 19 Dec 2014 17:06:13 +0300 Michael Klishin merge stable into default changeset | files Fri, 19 Dec 2014 17:05:36 +0300 Michael Klishin merge bug26501 into stable stable rabbitmq_v3_4_3 changeset | files Fri, 19 Dec 2014 16:00:43 +0300 Michael Klishin More recovery tests bug26501 changeset | files Thu, 18 Dec 2014 17:55:55 +0300 Michael Klishin Make AutorecoveringConnection#BeginAutomaticRecovery non-blocking bug26501 changeset | files Wed, 26 Nov 2014 13:09:30 +0000 Simon MacMullen stable to default changeset | files Wed, 26 Nov 2014 12:52:19 +0000 Simon MacMullen Added tag rabbitmq_v3_4_2 for changeset e7df9b9c7893 stable changeset | files Wed, 26 Nov 2014 11:51:56 +0000 Simon MacMullen Removed tag rabbitmq_v3_4_2 changeset | files Wed, 26 Nov 2014 11:43:21 +0000 Simon MacMullen Added tag rabbitmq_v3_4_2 for changeset bbf655363f77 changeset | files Mon, 10 Nov 2014 14:19:40 +0300 Michael Klishin merge stable into default changeset | files Mon, 10 Nov 2014 14:19:07 +0300 Michael Klishin Remove a test that doesn't test much stable rabbitmq_v3_4_2 changeset | files Fri, 07 Nov 2014 15:57:36 +0300 Michael Klishin merge bug26459 into default changeset | files Fri, 07 Nov 2014 15:55:01 +0300 Michael Klishin Adapt this test since connections now use less memory bug26459 changeset | files Fri, 07 Nov 2014 15:08:56 +0300 Michael Klishin Use timers for heartbeats bug26459 changeset | files Wed, 29 Oct 2014 15:03:59 +0000 Simon MacMullen stable to default changeset | files Wed, 29 Oct 2014 14:12:47 +0000 Simon MacMullen Added tag rabbitmq_v3_4_1 for changeset a15a2336093f stable changeset | files Wed, 29 Oct 2014 15:01:04 +0300 Michael Klishin merge stable into default changeset | files Wed, 29 Oct 2014 14:53:57 +0300 Michael Klishin merge bug26439 into stable stable rabbitmq_v3_4_1 changeset | files Wed, 29 Oct 2014 14:53:27 +0300 Michael Klishin Make sure attempts to open a channel on a closed connection fail immediately bug26439 changeset | files Wed, 29 Oct 2014 10:32:51 +0300 Michael Klishin merge stable into default changeset | files Wed, 29 Oct 2014 10:32:21 +0300 Michael Klishin merge bug26435 into stable stable changeset | files Wed, 29 Oct 2014 10:31:44 +0300 Michael Klishin Don't mention the immediate flag bug26435 changeset | files Wed, 29 Oct 2014 10:30:54 +0300 Michael Klishin Typo bug26435 changeset | files Wed, 22 Oct 2014 10:55:26 +0100 Simon MacMullen stable to default changeset | files Wed, 22 Oct 2014 10:54:57 +0100 Simon MacMullen default to stable stable changeset | files Tue, 21 Oct 2014 14:59:00 +0100 Simon MacMullen Added tag rabbitmq_v3_4_0 for changeset 5d5be1046728 changeset | files Mon, 20 Oct 2014 16:12:28 +0100 Simon MacMullen Merge bug26419 rabbitmq_v3_4_0 changeset | files Mon, 20 Oct 2014 18:07:44 +0400 Michael Klishin dist-msi tweaks changeset | files Mon, 20 Oct 2014 17:59:43 +0400 Michael Klishin More Wix file updates changeset | files Mon, 20 Oct 2014 17:51:29 +0400 Michael Klishin Make tmp/unzip first changeset | files Mon, 20 Oct 2014 17:07:05 +0400 Michael Klishin Unzip binaries, correct their locations in Wix files changeset | files Mon, 20 Oct 2014 16:29:38 +0400 Michael Klishin 2.0 => 3.5 in Wix files changeset | files Mon, 20 Oct 2014 16:21:04 +0400 Michael Klishin Build the project before running src-dist changeset | files Mon, 20 Oct 2014 16:20:41 +0400 Michael Klishin 2.0 => 3.5 changeset | files Mon, 20 Oct 2014 15:16:36 +0400 Michael Klishin Bring back erroneously removed gendoc call changeset | files Mon, 20 Oct 2014 14:37:53 +0400 Michael Klishin We no longer build for .NET 2.0 changeset | files Mon, 20 Oct 2014 14:15:42 +0400 Michael Klishin Correct a TODO changeset | files Mon, 20 Oct 2014 14:14:58 +0400 Michael Klishin Remove 2.0 and 3.0 bootstrapper package info changeset | files Mon, 20 Oct 2014 14:13:13 +0400 Michael Klishin Update build documentation changeset | files Mon, 20 Oct 2014 14:13:07 +0400 Michael Klishin Build WCF bindings when no targeting Mono changeset | files Mon, 20 Oct 2014 13:36:43 +0400 Michael Klishin merge bug26130 into default (again) changeset | files Mon, 20 Oct 2014 13:35:21 +0400 Michael Klishin Simplify WCF build condition bug26130 changeset | files Mon, 20 Oct 2014 13:35:21 +0400 Michael Klishin Simplify WCF build condition changeset | files Mon, 20 Oct 2014 12:16:06 +0400 Michael Klishin Use TLSv1 by default bug26419 changeset | files Sun, 19 Oct 2014 23:22:41 +0400 Michael Klishin merge bug26130 into default (again) changeset | files Sun, 19 Oct 2014 23:22:17 +0400 Michael Klishin 3.0 => 3.5 bug26130 changeset | files Sun, 19 Oct 2014 23:17:56 +0400 Michael Klishin merge bug26130 into default changeset | files Sun, 19 Oct 2014 23:16:06 +0400 Michael Klishin Use 3.5 is distributed archive name bug26130 changeset | files Sun, 19 Oct 2014 23:05:12 +0400 Michael Klishin Don't count .NET 2.0 build as a deliverable bug26130 changeset | files Sun, 19 Oct 2014 23:04:49 +0400 Michael Klishin One more test bug26130 changeset | files Sun, 19 Oct 2014 10:09:27 -0700 Michael Klishin Ignore docs/api-guide.pdf bug26130 changeset | files Sun, 19 Oct 2014 10:08:47 -0700 Michael Klishin Fix a code formatting issue bug26130 changeset | files Sun, 19 Oct 2014 10:03:08 -0700 Michael Klishin Reduce duplication bug26130 changeset | files Sun, 19 Oct 2014 20:43:11 +0400 Michael Klishin Use the anonymous authenticator bug26130 changeset | files Sun, 19 Oct 2014 20:19:17 +0400 Michael Klishin Just use the anonymous authenticator bug26130 changeset | files Sun, 19 Oct 2014 20:18:31 +0400 Michael Klishin Upgrade Pyle2, fix a few code formatting issues bug26130 changeset | files Sun, 19 Oct 2014 20:07:54 +0400 Michael Klishin Mention anonymous authenticator bug26130 changeset | files Sun, 19 Oct 2014 19:15:55 +0400 Michael Klishin Typo bug26130 changeset | files Sun, 19 Oct 2014 19:15:17 +0400 Michael Klishin Initial attempt at automatic connection recovery section bug26130 changeset | files Sun, 19 Oct 2014 07:55:34 -0700 Michael Klishin Network failure recovery section stub bug26130 changeset | files Sun, 19 Oct 2014 07:53:22 -0700 Michael Klishin Remove QPid compatibility section bug26130 changeset | files Sun, 19 Oct 2014 07:51:13 -0700 Michael Klishin Multi-protocol support is gone bug26130 changeset | files Sun, 19 Oct 2014 07:50:27 -0700 Michael Klishin Ignore doc/pyle* bug26130 changeset | files Sat, 18 Oct 2014 18:20:51 +0400 Michael Klishin Trim the value we convert to a number bug26130 changeset | files Sat, 18 Oct 2014 18:17:39 +0400 Michael Klishin Add assertions since parsing shellout output is quite fragile bug26130 changeset | files Sat, 18 Oct 2014 18:16:02 +0400 Michael Klishin Windows-specific fixes bug26130 changeset | files Fri, 17 Oct 2014 14:24:40 +0400 Michael Klishin Provide an example of property configuration for RunSingleUnitTest bug26130 changeset | files Fri, 17 Oct 2014 12:55:00 +0400 Michael Klishin The v0_9_1 namespace suffix is gone, remove it from WCF bindings bug26130 changeset | files Fri, 17 Oct 2014 12:49:52 +0400 Michael Klishin Ignore VS backup directory bug26130 changeset | files Fri, 17 Oct 2014 12:48:03 +0400 Michael Klishin 0.8 and 0.9 support is gone bug26130 changeset | files Fri, 17 Oct 2014 12:47:45 +0400 Michael Klishin Reference System.Xml.Linq here bug26130 changeset | files Fri, 17 Oct 2014 12:44:32 +0400 Michael Klishin Ignore tmp/* bug26130 changeset | files Thu, 16 Oct 2014 13:35:04 +0400 Michael Klishin Save WCF guide as .docx that can actually be opened bug26130 changeset | files Thu, 16 Oct 2014 13:34:47 +0400 Michael Klishin Don't generate .NET 2.0 docs bug26130 changeset | files Tue, 14 Oct 2014 15:53:57 +0400 Michael Klishin Prevent concurrent recoveries and extra connections after recovery bug26130 changeset | files Tue, 14 Oct 2014 01:24:01 +0400 Michael Klishin Doco bug26130 changeset | files Tue, 14 Oct 2014 01:22:23 +0400 Michael Klishin Separate recovery exception event class bug26130 changeset | files Tue, 14 Oct 2014 00:25:21 +0400 Michael Klishin Trigger connection recovery when initiator is Library bug26130 changeset | files Mon, 13 Oct 2014 20:03:37 +0400 Michael Klishin Continue to attempt recovery every [configured time span] bug26130 changeset | files Mon, 13 Oct 2014 13:35:57 +0400 Michael Klishin More tests bug26130 changeset | files Mon, 13 Oct 2014 13:34:35 +0400 Michael Klishin More tests bug26130 changeset | files Mon, 13 Oct 2014 07:30:59 +0400 Michael Klishin Add a test for consumer recovery between delivery and attempted basic.ack bug26130 changeset | files Mon, 13 Oct 2014 07:30:20 +0400 Michael Klishin Ditto bug26130 changeset | files Mon, 13 Oct 2014 07:29:44 +0400 Michael Klishin Ack realTag here bug26130 changeset | files Mon, 13 Oct 2014 06:59:38 +0400 Michael Klishin Make consumer state fields accessible to sub-classes bug26130 changeset | files Sun, 12 Oct 2014 21:35:36 +0400 Michael Klishin Typo bug26130 changeset | files Sun, 12 Oct 2014 21:35:25 +0400 Michael Klishin Remove an attribute that's no longer relevant bug26130 changeset | files ... tags Wed, 11 Feb 2015 09:07:38 +0100 rabbitmq_v3_4_4 changeset | changelog | files Fri, 19 Dec 2014 17:05:36 +0300 rabbitmq_v3_4_3 changeset | changelog | files Mon, 10 Nov 2014 14:19:07 +0300 rabbitmq_v3_4_2 changeset | changelog | files Wed, 29 Oct 2014 14:53:57 +0300 rabbitmq_v3_4_1 changeset | changelog | files Mon, 20 Oct 2014 16:12:28 +0100 rabbitmq_v3_4_0 changeset | changelog | files Fri, 04 Jul 2014 15:24:46 +0400 rabbitmq_v3_3_5 changeset | changelog | files Tue, 17 Jun 2014 11:09:03 +0100 rabbitmq_v3_3_4 changeset | changelog | files Mon, 09 Jun 2014 11:28:37 +0100 rabbitmq_v3_3_3 changeset | changelog | files Tue, 29 Apr 2014 13:40:51 +0100 rabbitmq_v3_3_2 changeset | changelog | files Thu, 10 Apr 2014 11:14:54 +0100 rabbitmq_v3_3_1 changeset | changelog | files ... bookmarks ... branches Tue, 17 Feb 2015 17:45:34 +0100 e3c75c0fc269 default changeset | changelog | files Tue, 17 Feb 2015 17:45:18 +0100 cf59159f7db9 stable changeset | changelog | files Wed, 11 Feb 2015 11:32:43 +0300 fae3672732dc bug26283 changeset | changelog | files Tue, 10 Feb 2015 18:16:49 +0100 185d866911c4 bug26590 changeset | changelog | files Mon, 09 Feb 2015 17:12:40 +0100 dbfc02fb8311 bug26588 changeset | changelog | files Mon, 02 Feb 2015 15:39:11 +0300 61bf84f3246c bug26483 changeset | changelog | files Fri, 23 Jan 2015 01:18:05 +0300 5bfb628f8e9b bug26550 changeset | changelog | files Wed, 14 Jan 2015 04:15:29 +0300 4676ab760fa1 bug26534 changeset | changelog | files Tue, 13 Jan 2015 18:56:53 +0300 7a9f6cf0d1b5 bug26420 changeset | changelog | files Sat, 10 Jan 2015 21:33:59 +0300 e3bad9c5257d bug26530 changeset | changelog | files Sat, 03 Jan 2015 07:55:55 -0800 39d0499e23c8 bug26505 changeset | changelog | files Sun, 28 Dec 2014 16:49:59 +0300 fdc72ebe739e bug26511 changeset | changelog | files Sat, 27 Dec 2014 13:55:59 +0300 9ea71b1f22bb bug26510 changeset | changelog | files Sat, 27 Dec 2014 13:50:37 +0300 bc50909d056b bug26508 changeset | changelog | files Sat, 27 Dec 2014 13:29:27 +0300 5f6682f69a11 bug26509 changeset | changelog | files Thu, 25 Dec 2014 12:48:24 +0300 5f8949582432 bug26507 changeset | changelog | files Fri, 19 Dec 2014 16:00:43 +0300 caccd1f44219 bug26501 changeset | changelog | files Fri, 07 Nov 2014 15:55:01 +0300 130185f11232 bug26459 changeset | changelog | files Wed, 29 Oct 2014 14:53:27 +0300 6f668baca713 bug26439 changeset | changelog | files Wed, 29 Oct 2014 10:31:44 +0300 6eea74636817 bug26435 changeset | changelog | files Mon, 20 Oct 2014 13:35:21 +0400 a60f6568d15e bug26130 changeset | changelog | files Mon, 20 Oct 2014 12:16:06 +0400 e4ae44ab5aeb bug26419 changeset | changelog | files Mon, 11 Aug 2014 18:22:39 +0400 a9a15e653a4f bug26334 changeset | changelog | files Thu, 07 Aug 2014 19:09:55 +0400 cd468df9977d bug26324 changeset | changelog | files Fri, 20 Jun 2014 03:58:50 +0400 80f72a552a44 bug26199 changeset | changelog | files Sun, 08 Jun 2014 23:35:32 +0400 144c36685178 bug26208 changeset | changelog | files Tue, 22 Apr 2014 17:01:09 +0400 d420b7a7dedd bug26175 changeset | changelog | files Tue, 13 May 2014 19:34:45 +0400 91a8c82c3ce1 bug26135 changeset | changelog | files Tue, 13 May 2014 19:33:05 +0400 ac3c0c2b735b bug26133 changeset | changelog | files Wed, 23 Apr 2014 04:30:54 +0400 131126ae14cd bug26131 changeset | changelog | files Tue, 22 Apr 2014 17:01:09 +0400 55c4791d98ed bug26080 changeset | changelog | files Fri, 18 Apr 2014 16:41:11 +0400 81ec9c1075c5 junk changeset | changelog | files Thu, 17 Apr 2014 16:20:03 +0400 3c506f0cd008 bug26122 changeset | changelog | files Wed, 16 Apr 2014 15:48:52 +0100 2917784747e7 bug26097 changeset | changelog | files Wed, 16 Apr 2014 18:02:24 +0400 e420f115eb5d bug26075 changeset | changelog | files Fri, 04 Apr 2014 16:44:34 +0400 157e8265ea8b bug25525 changeset | changelog | files Tue, 01 Apr 2014 12:43:29 +0100 cced2645aa06 bug26079 changeset | changelog | files Fri, 28 Mar 2014 12:52:25 +0400 d8ace8e0f302 bug25082 changeset | changelog | files Mon, 24 Mar 2014 14:45:00 +0400 f2ce4f846e8b bug25911 changeset | changelog | files Mon, 24 Mar 2014 12:25:23 +0400 3032fd482da4 bug25278 changeset | changelog | files Mon, 24 Mar 2014 12:02:32 +0400 e4410ae8dfe6 bug25046 changeset | changelog | files Mon, 24 Mar 2014 11:33:33 +0400 d03b395d3322 bug25895 changeset | changelog | files Mon, 24 Mar 2014 10:39:51 +0400 06c3c4841ec6 bug26071 changeset | changelog | files Wed, 19 Mar 2014 20:35:15 +0400 12f0a29e8750 bug26068 changeset | changelog | files Wed, 19 Mar 2014 20:12:04 +0400 9b4aacf6c8b6 bug26070 changeset | changelog | files Mon, 17 Mar 2014 17:25:21 +0000 74bc314da182 bug25940 changeset | changelog | files Mon, 17 Mar 2014 14:41:12 +0000 07001ba6be3a bug25374 changeset | changelog | files Fri, 28 Feb 2014 22:35:15 +0400 a94d57f367a5 bug26047 changeset | changelog | files Mon, 17 Feb 2014 14:17:02 +0400 49cfdfd34e15 bug26016 changeset | changelog | files Wed, 15 Jan 2014 17:44:38 +0000 9c1fec35f91d bug25962 changeset | changelog | files Tue, 26 Nov 2013 14:47:55 +0000 95ec2021cbe0 bug25765 changeset | changelog | files Wed, 02 Oct 2013 16:13:35 +0100 cb8983d7ddab bug24094 changeset | changelog | files Thu, 29 Aug 2013 16:56:56 +0100 9a2b03fb815b bug25595 changeset | changelog | files Thu, 15 Aug 2013 17:55:30 +0100 e194f5697bc8 bug25717 changeset | changelog | files Tue, 13 Aug 2013 22:33:29 +0400 4823047addf4 bug25256 changeset | changelog | files Tue, 13 Aug 2013 11:22:03 +0100 335b2c30946a bug25706 changeset | changelog | files Wed, 07 Aug 2013 13:16:06 +0100 021d99882a04 bug25552 changeset | changelog | files Fri, 02 Aug 2013 20:35:44 +0400 255a81f71c85 bug25695 changeset | changelog | files Fri, 02 Aug 2013 11:14:54 +0400 c7424239aa8b bug25191 changeset | changelog | files Fri, 28 Jun 2013 03:33:48 -0700 920f84af1560 depreciate1_1 changeset | changelog | files Tue, 07 May 2013 20:23:51 -0700 25988f1d5bea nb_fix1 changeset | changelog | files Mon, 01 Jul 2013 10:49:11 +0100 4cd7f080c261 bug25538 changeset | changelog | files Mon, 20 May 2013 14:26:51 +0100 270d4044b70c bug25558 changeset | changelog | files Tue, 09 Apr 2013 17:10:23 +0100 a75e848891cc bug25509 changeset | changelog | files Fri, 08 Mar 2013 17:51:03 +0000 ba755f2dc1f1 bug24965 changeset | changelog | files Wed, 06 Feb 2013 07:26:38 -0500 7287688f799d bug25002 changeset | changelog | files Wed, 23 Jan 2013 11:07:10 +0000 7055dee9136b bug25343 changeset | changelog | files Fri, 18 Jan 2013 16:15:15 +0000 7979e8e21c49 bug25389 changeset | changelog | files Thu, 20 Dec 2012 15:48:37 +0000 25e0b8ade8ed bug25356 changeset | changelog | files Thu, 15 Nov 2012 14:59:01 +0000 b2d527a0d26b bug23747 changeset | changelog | files Mon, 29 Oct 2012 11:39:19 +0000 1abeb73e5670 bug25255 changeset | changelog | files Thu, 25 Oct 2012 20:35:57 +0100 8effbdd12804 bug24991 changeset | changelog | files Thu, 27 Sep 2012 15:23:03 +0100 0037c3b3fa8d rabbitmq_v2_8_x changeset | changelog | files Fri, 21 Sep 2012 12:18:20 +0100 3d25915fd9c8 bug23896 changeset | changelog | files Wed, 22 Aug 2012 12:20:58 +0100 2fcb2e175b2c bug25092 changeset | changelog | files Fri, 27 Apr 2012 15:29:10 +0100 26aec7e2af4a bug24907 changeset | changelog | files Fri, 20 Apr 2012 13:33:37 +0100 ec875118af4c bug24866 changeset | changelog | files Fri, 10 Feb 2012 09:26:01 +0000 661028b92514 bug24530 changeset | changelog | files Thu, 02 Feb 2012 13:54:45 +0000 075aa3206f0a bug24606 changeset | changelog | files Wed, 18 Jan 2012 12:21:48 +0000 3b5005bef85c bug24650 changeset | changelog | files Fri, 06 Jan 2012 11:11:34 +0000 559015309bf8 bug24538 changeset | changelog | files Wed, 30 Nov 2011 17:46:44 +0000 881f7f557972 bug24590 changeset | changelog | files Tue, 29 Nov 2011 11:32:42 +0000 3b331b120763 bug24464 changeset | changelog | files Fri, 04 Nov 2011 10:50:33 +0000 7164e25dc28d bug24529 changeset | changelog | files Mon, 31 Oct 2011 10:49:35 +0000 766316369f5b bug24501 changeset | changelog | files Wed, 19 Oct 2011 13:30:47 +0100 25325e503d51 bug24495 changeset | changelog | files Tue, 18 Oct 2011 11:51:38 +0100 77c80f756263 bug24453 changeset | changelog | files Fri, 30 Sep 2011 17:51:42 +0100 da7e471f2bff bug24443 changeset | changelog | files Wed, 07 Sep 2011 10:53:40 +0100 35fc4d52d1b6 bug24412 changeset | changelog | files Thu, 11 Aug 2011 14:02:54 +0100 9c9c872574ff bug24281 changeset | changelog | files Mon, 01 Aug 2011 17:36:09 +0100 ec7abf566c46 bug24247 changeset | changelog | files Mon, 01 Aug 2011 11:24:20 +0100 cb46ef206f24 bug24080 changeset | changelog | files Fri, 29 Jul 2011 11:27:38 +0100 defecdf5c03a bug24284 changeset | changelog | files Thu, 28 Jul 2011 17:46:56 +0100 c3748a06315c bug24266 changeset | changelog | files Wed, 27 Jul 2011 11:53:12 +0100 68e85031b2fa bug23099 changeset | changelog | files Thu, 14 Jul 2011 10:28:08 +0100 f8c945dcbfff bug24229 changeset | changelog | files Tue, 05 Jul 2011 15:39:32 +0100 c3e4a852f309 bug24216 changeset | changelog | files Tue, 28 Jun 2011 11:45:18 +0100 0ddc6af45f0f bug24222 changeset | changelog | files Mon, 27 Jun 2011 12:27:24 +0100 71b717f3ab4a 24222 changeset | changelog | files Mon, 27 Jun 2011 11:11:36 +0100 9bca0cba2784 v2_5 changeset | changelog | files Thu, 09 Jun 2011 11:23:20 +0100 3fe891ab207c bug24134 changeset | changelog | files Wed, 08 Jun 2011 10:46:08 +0100 7a8f824d3091 bug24160 changeset | changelog | files Fri, 03 Jun 2011 14:02:03 +0100 6188a5ca729a bug24149 changeset | changelog | files Thu, 02 Jun 2011 15:47:23 +0100 e5088ec2b745 bug24131 changeset | changelog | files Wed, 01 Jun 2011 13:34:20 +0100 3c2c3f242b67 bug24143 changeset | changelog | files Wed, 18 May 2011 11:42:13 +0100 761239efb371 bug24113 changeset | changelog | files Tue, 17 May 2011 18:03:19 +0100 83bcd0e9266d bug24100 changeset | changelog | files Thu, 12 May 2011 12:50:24 +0100 2bcc243bfd52 bug24079 changeset | changelog | files Wed, 11 May 2011 16:33:05 +0100 93414e4919eb bug24085 changeset | changelog | files Mon, 11 Apr 2011 15:37:07 +0100 10e424362760 bug24036 changeset | changelog | files Fri, 01 Apr 2011 12:48:02 +0100 a9c83693bd56 bug23996 changeset | changelog | files Fri, 25 Mar 2011 11:44:11 +0000 f82642bfc927 bug23990 changeset | changelog | files Thu, 24 Mar 2011 13:52:18 +0000 d264ab440aed bug23980 changeset | changelog | files Wed, 23 Mar 2011 16:35:49 +0000 12b13df04360 bug23975 changeset | changelog | files Mon, 14 Mar 2011 14:12:48 +0000 e5361486168d bug23887 changeset | changelog | files Fri, 04 Mar 2011 17:14:34 +0000 59c3d69434d5 bug21647 changeset | changelog | files Fri, 25 Feb 2011 14:46:56 +0000 d9e142b6aef6 bug22539 changeset | changelog | files Thu, 24 Feb 2011 14:53:57 +0000 7e234064ec46 bug23837 changeset | changelog | files Mon, 14 Feb 2011 17:39:43 +0000 52f1bbe1037c bug23839 changeset | changelog | files Wed, 26 Jan 2011 12:35:02 +0000 a155638ab094 bug23410 changeset | changelog | files Thu, 20 Jan 2011 14:52:49 +0000 f7feba153a2c bug23256 changeset | changelog | files Wed, 19 Jan 2011 15:44:17 +0000 5054212f9c94 bug23715 changeset | changelog | files Mon, 17 Jan 2011 18:26:47 +0000 f10fbe83f1ac bug23659 changeset | changelog | files Mon, 17 Jan 2011 12:34:35 +0000 9d871a4f78ec bug23065 changeset | changelog | files Fri, 14 Jan 2011 15:45:41 +0000 5bf3ae1f32e0 bug23675 changeset | changelog | files Wed, 12 Jan 2011 14:55:04 +0000 d4790a069adb bug22942 changeset | changelog | files Tue, 11 Jan 2011 11:20:55 +0000 0e227c1164ab bug23616 changeset | changelog | files Tue, 11 Jan 2011 06:57:57 +0000 8c93095c1c31 bug23660 changeset | changelog | files Mon, 10 Jan 2011 16:49:09 +0000 1129b34cb409 bug23541 changeset | changelog | files Thu, 30 Dec 2010 00:13:44 +0000 6ee4891c824e bug23593 changeset | changelog | files Tue, 04 Jan 2011 17:51:58 +0000 ac9e1b51c669 bug23646 changeset | changelog | files Mon, 13 Dec 2010 11:59:40 +0000 b15e6269c6f5 bug23467 changeset | changelog | files Tue, 07 Dec 2010 23:54:00 +0000 ea08fdb846d9 bug23574 changeset | changelog | files Wed, 01 Dec 2010 09:53:00 +0000 83bd13ea0f0c bug20284 changeset | changelog | files Thu, 11 Nov 2010 11:17:06 +0000 812d7923c434 bug23486 changeset | changelog | files Tue, 26 Oct 2010 11:24:31 +0100 b9b41a240e8e bug23337 changeset | changelog | files Thu, 30 Sep 2010 15:57:31 +0100 2909cc6b2a2a bug23320 changeset | changelog | files Tue, 14 Sep 2010 15:53:38 +0100 b7e176d67bbf bug23043 changeset | changelog | files Sun, 12 Sep 2010 19:39:18 +0100 af9c15a3fd34 bug21377 changeset | changelog | files Thu, 09 Sep 2010 16:17:10 +0100 d048a32dac82 bug22967 changeset | changelog | files Fri, 03 Sep 2010 16:54:40 +0100 64cb82887db6 bug23116 changeset | changelog | files Wed, 01 Sep 2010 06:53:32 +0100 ed8a88f03816 bug23214 changeset | changelog | files Tue, 31 Aug 2010 13:23:18 +0100 f92b6704f1d2 bug22814 changeset | changelog | files Fri, 27 Aug 2010 15:20:00 +0100 2de6b5d5feb6 bug23194 changeset | changelog | files Tue, 10 Aug 2010 10:08:03 +0100 bc101e5f88c7 bug23013 changeset | changelog | files Wed, 04 Aug 2010 16:34:27 +0100 fe5ec80f70a7 amqp_0_9_1 changeset | changelog | files Wed, 04 Aug 2010 15:29:24 +0100 db81d46047ae bug22986 changeset | changelog | files Wed, 04 Aug 2010 15:08:21 +0100 add92770d467 bug22999 changeset | changelog | files Wed, 04 Aug 2010 12:01:06 +0100 7c37eb0feb73 bug22772 changeset | changelog | files Wed, 04 Aug 2010 09:11:34 +0100 8163018e46a2 bug23014 changeset | changelog | files Thu, 22 Jul 2010 14:06:07 +0100 6ce3987a5518 bug22940 changeset | changelog | files Fri, 16 Jul 2010 13:24:02 +0100 05f2e2ae5e61 bug22974 changeset | changelog | files Mon, 05 Jul 2010 14:16:40 +0100 46754f5f48f6 bug22922 changeset | changelog | files Thu, 01 Jul 2010 16:14:37 +0100 f921ef358200 bug22880 changeset | changelog | files Wed, 30 Jun 2010 14:01:54 +0100 6481990d5978 bug22587 changeset | changelog | files Fri, 25 Jun 2010 10:36:39 +0100 ab835f8476c2 bug22895 changeset | changelog | files Tue, 22 Jun 2010 14:53:04 +0100 d780499cf467 bug22864 changeset | changelog | files Mon, 21 Jun 2010 13:45:10 +0100 70f9e05c3b4f bug21848 changeset | changelog | files Fri, 18 Jun 2010 13:13:52 +0100 eb71d1b9e13f bug21849 changeset | changelog | files Thu, 10 Jun 2010 17:34:14 +0100 55ecb5a3f066 bug22840 changeset | changelog | files Fri, 04 Jun 2010 17:05:43 +0100 4850488357a7 bug21201 changeset | changelog | files Thu, 03 Jun 2010 17:17:30 +0100 9a34d291abcf bug22815 changeset | changelog | files Wed, 02 Jun 2010 12:00:24 +0100 b12a34591dfb bug22829 changeset | changelog | files Tue, 25 May 2010 13:39:45 +0100 a57579c68ee0 bug21238 changeset | changelog | files Thu, 06 May 2010 12:33:52 +0100 b56d09873b6d bug22548 changeset | changelog | files Wed, 05 May 2010 10:44:04 +0100 25a386a2f352 bug22653 changeset | changelog | files Mon, 15 Mar 2010 15:18:44 +1300 75072074fd77 bug21949 changeset | changelog | files Wed, 03 Mar 2010 18:58:08 +0000 47f11cdfdc01 bug21967 changeset | changelog | files Fri, 19 Feb 2010 13:40:39 +0000 5d1c313e4aeb bug21899 changeset | changelog | files Sat, 13 Feb 2010 20:57:52 +0000 318e2ad18d66 bug21939 changeset | changelog | files Wed, 10 Feb 2010 12:55:33 +0000 ddf2bf220ab4 bug22334 changeset | changelog | files Tue, 09 Feb 2010 11:10:23 +0000 584531d49c3c bug22312 changeset | changelog | files Wed, 03 Feb 2010 14:52:06 +0000 62b53c32f162 bug22298 changeset | changelog | files Fri, 22 Jan 2010 11:45:23 +0000 46c30c4769ff bug22243 changeset | changelog | files Thu, 21 Jan 2010 15:12:10 +0000 df519fd73ed3 bug21817 changeset | changelog | files Fri, 15 Jan 2010 08:47:19 +0000 2b7192adb01d bug19111 changeset | changelog | files Tue, 15 Dec 2009 16:30:47 +0000 42659e3938c9 bug22142 changeset | changelog | files Wed, 09 Dec 2009 22:34:57 +0000 5cb149628725 bug22087 changeset | changelog | files Wed, 09 Dec 2009 22:04:14 +0000 2a227fcb6202 bug22114 changeset | changelog | files Wed, 09 Dec 2009 18:38:49 +0000 39f185e3d0c3 bug22089 changeset | changelog | files Mon, 07 Dec 2009 17:58:17 +0000 f9f91974d5c6 bug22100 changeset | changelog | files Wed, 25 Nov 2009 17:48:00 +0000 4def852523e2 bug21965 changeset | changelog | files Thu, 12 Nov 2009 22:58:54 +0000 60e3f7be8c55 bug21468 changeset | changelog | files Tue, 03 Nov 2009 12:09:11 +0000 73370192139b bug21873 changeset | changelog | files Tue, 27 Oct 2009 17:16:22 +0000 8d299393c339 bug21343 changeset | changelog | files Tue, 06 Oct 2009 09:11:33 +0100 749b25adbef4 bug21750 changeset | changelog | files Mon, 05 Oct 2009 18:43:30 +0100 c4a3613fa049 bug21707 changeset | changelog | files Mon, 05 Oct 2009 10:24:56 +0100 8a0031a4b9cf bug21220 changeset | changelog | files Tue, 29 Sep 2009 10:43:31 +0100 978b0cea2bff bug21476 changeset | changelog | files Mon, 31 Aug 2009 16:29:56 +0100 4736756a57cf bug21531 changeset | changelog | files Sat, 29 Aug 2009 17:09:39 +0100 fe0cd30ddb50 bug21507 changeset | changelog | files Sat, 29 Aug 2009 05:39:50 +0100 9ff44d7128a4 bug19356 changeset | changelog | files Thu, 27 Aug 2009 17:18:51 +0100 96c35064da20 bug21149 changeset | changelog | files Mon, 24 Aug 2009 14:57:23 +0100 39f0fcb08b57 bug21465 changeset | changelog | files Fri, 14 Aug 2009 10:08:33 +0100 e3873de373e5 bug21286 changeset | changelog | files Mon, 03 Aug 2009 15:13:00 +0100 25886d4201e8 bug21271 changeset | changelog | files Mon, 27 Jul 2009 15:01:22 +0100 d163e761b6a6 bug20945 changeset | changelog | files Fri, 24 Jul 2009 17:44:34 +0100 bd60227d9a3f bug21095 changeset | changelog | files Thu, 18 Jun 2009 10:04:46 +0100 43c0bbddae9d bug21043 changeset | changelog | files Tue, 09 Jun 2009 12:58:40 +0100 052a858374f9 bug20456 changeset | changelog | files Mon, 08 Jun 2009 13:01:31 +0100 64a4a282e460 bug20855 changeset | changelog | files Thu, 04 Jun 2009 16:56:26 +0100 d91036843533 20855 changeset | changelog | files Tue, 19 May 2009 10:15:16 +0100 56741de86173 v1_5 changeset | changelog | files Mon, 18 May 2009 10:41:30 +0100 6e8e0b4be8b8 bug20553 changeset | changelog | files Fri, 15 May 2009 15:14:05 +0100 d9bd507a6808 bug20564 changeset | changelog | files Wed, 06 May 2009 19:29:22 +0100 2cd586623ff0 bug20681 changeset | changelog | files Fri, 20 Feb 2009 10:24:28 +0000 adc0e56712dc bug20349 changeset | changelog | files Mon, 09 Feb 2009 13:16:50 +0000 16485fee1b21 bug18581 changeset | changelog | files Mon, 19 Jan 2009 16:56:51 +0000 346b2f8d8ee2 v1_5_1 changeset | changelog | files Thu, 15 Jan 2009 17:06:26 +0000 0fd8991214c2 bug19122 changeset | changelog | files Thu, 15 Jan 2009 15:39:56 +0000 4d76237198cf bug20064 changeset | changelog | files Wed, 14 Jan 2009 16:55:15 +0000 fd9dd23d14bb bug20124 changeset | changelog | files Wed, 14 Jan 2009 16:22:17 +0000 15f285adee05 bug20150 changeset | changelog | files Tue, 09 Dec 2008 17:01:26 +0000 0bbea32b6946 bug19970 changeset | changelog | files Tue, 09 Dec 2008 16:27:55 +0000 0918edcfd265 bug19974 changeset | changelog | files Thu, 27 Nov 2008 17:51:40 +0000 6189c1fc7f12 bug19793 changeset | changelog | files Thu, 27 Nov 2008 17:10:18 +0000 978d7b9f08d5 bug19896 changeset | changelog | files Thu, 27 Nov 2008 13:09:31 +0000 0ca4435d766e bug19130 changeset | changelog | files Thu, 13 Nov 2008 17:24:42 +0000 6f19b4a396e2 bug19561 changeset | changelog | files Tue, 07 Oct 2008 12:46:41 +0100 80ad465fb834 bug19389 changeset | changelog | files Fri, 03 Oct 2008 15:37:04 +0100 c432f9cc9963 bug19457 changeset | changelog | files Fri, 03 Oct 2008 15:14:23 +0100 e34b1e78df3a bug19290 changeset | changelog | files Fri, 12 Sep 2008 15:17:28 +0100 fc389466de8b bug19384 changeset | changelog | files Thu, 04 Sep 2008 10:20:50 +0100 ac04db0a9b0e bug19127 changeset | changelog | files Wed, 03 Sep 2008 08:44:48 +0100 8f200d8a1edd bug19190 changeset | changelog | files Tue, 02 Sep 2008 18:00:31 +0100 a60bcb0322bf bug19125 changeset | changelog | files Tue, 19 Aug 2008 17:32:01 +0100 f1128c7d0dcd bug19230 changeset | changelog | files Tue, 05 Aug 2008 11:18:29 +0100 88b0305c8ec0 bug18793 changeset | changelog | files Mon, 14 Jul 2008 11:40:12 +0100 3386c5d7dc1b bug18976 changeset | changelog | files Tue, 08 Jul 2008 14:24:27 +0100 7d29ec684d05 bug18957 changeset | changelog | files Sat, 09 Aug 2008 10:32:13 +0100 dcdc4019898b bug18676 changeset | changelog | files ... rabbitmq-dotnet-client RSS Atom"	"null"	"null"	"Implementation of an AMQP client library for C#, and a binding exposing AMQP services via WCF"	"true"
"Queue"	"NetMQ"	"https://github.com/zeromq/netmq"	"NetMQ is 100% native C# port of ZeroMQ"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"757"	"168"	"309"	"GitHub - zeromq/netmq: A 100% native C# implementation of ZeroMQ for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 168 Star 757 Fork 309 zeromq/netmq Code Issues 69 Pull requests 0 Wiki Pulse Graphs A 100% native C# implementation of ZeroMQ for .NET 1,689 commits 3 branches 3 releases 58 contributors C# 99.8% Other 0.2% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags UpdateVersion master somdoron-patch-1 Nothing to show 4.0.0.2-rc2 4.0.0.1-rc1 4.0.0.0-beta Nothing to show New pull request Latest commit dd31163 Jul 14, 2016 somdoron committed on GitHub Merge pull request #583 from masaeedu/relaxnetstandard … Relax netstandard platform requirement Permalink Failed to load latest commit information. .github Add ISSUE_TEMPLATE file to encourage more detail in error reports Jun 24, 2016 docs Fix small issue in docs Jul 10, 2016 img Add square versions of logo. Feb 7, 2016 src Relax netstandard platform requirement Jul 14, 2016 .gitattributes Fixed line endings and added .gitattributes Nov 11, 2012 .gitignore add dotnet core support Jul 11, 2016 AUTHORS.md Forgot to add myself to AUTHORS.md Mar 18, 2016 CONTRIBUTING.md Add CONTRIBUTING.md Feb 28, 2015 COPYING.LESSER Create COPYING.LESSER Jun 21, 2013 README.md Update README.md Jul 10, 2016 mkdocs.yml add docs of cleanup process Jul 9, 2016 patch-version.js add patch version script to patch project json version Jul 13, 2016 README.md NetMQ is a 100% native C# port of the lightweight messaging library ZeroMQ. NetMQ extends the standard socket interfaces with features traditionally provided by specialised messaging middleware products. NetMQ sockets provide an abstraction of asynchronous message queues, multiple messaging patterns, message filtering (subscriptions), seamless access to multiple transport protocols, and more. Installation You can download NetMQ via NuGet. Versions Currently two versions are maintained Version 3 which is the stable version of NetMQ and version 4, version 4 is same as version 3 without obsolete code. You can find both version on Nuget, for more information read the Migrating-to-v4. This repository is for version 4, for version 3 go to: https://github.com/NetMQ/NetMQ3-x. Using / Documentation Before using NetMQ, make sure to read the ZeroMQ Guide. The NetMQ documentation can be found at netmq.readthedocs.org. Thanks to Sacha Barber who agreed to do the documentation. You can find NetMQ samples contributed by various users here: https://github.com/NetMQ/Samples There are also a few blog posts available, which you can read about here: Somdoron's blog Hello World The Socket Types Socket Options/Identity and SendMore Multiple Socket Polling Sending From Multiple Sockets Divide And Conquer Here is a simple example: using (var server = new ResponseSocket(""@tcp://localhost:5556"")) // bind using (var client = new RequestSocket("">tcp://localhost:5556""))  // connect {     // Send a message from the client socket     client.SendFrame(""Hello"");      // Receive the message from the server socket     string m1 = server.ReceiveFrameString();     Console.WriteLine(""From Client: {0}"", m1);      // Send a response back from the server     server.SendFrame(""Hi Back"");      // Receive the response from the client socket     string m2 = client.ReceiveFrameString();     Console.WriteLine(""From Server: {0}"", m2); } Contributing We need help, so if you have good knowledge of C# and ZeroMQ just grab one of the issues and add a pull request. We are using C4.1 process, so make sure you read this before. Regarding coding standards, we are using C# coding styles, to be a little more specific: we are using camelCase for variables and fields (with m_ prefix for instance members and s_ for static fields) and PascalCase for methods, classes and constants. Make sure you are using 'Insert Spaces' and 4 for tab and indent size. You can also help us by: Joining our mailing list and be an active member Writing tutorials in the github wiki Writing about the project in your blog (and add a pull request with a link to your blog at the bottom of this page) Consulting and Support Name Email Website Info Doron Somech somdoron@gmail.com http://somdoron.com Founder and maintainer of NetMQ, expertise in Fintech and high performance scalable systems. If you are providing support and consulting for NetMQ please make a pull request and add yourself to the list. Important note on backward compatibility Since version 3.3.07 NetMQ changed the number serialization from Little Endian to Big Endian to be compatible with ZeroMQ. Any NetMQ version prior to 3.3.0.7 is not compatible with the new version. To support older versions you can set Endian option on a NetMQ socket to Little Endian, however doing so will make it incompatible with ZeroMQ. We recommend to update to the latest version and use Big Endian which is now the default behavior. Mailing list You can join our mailing list here. Who owns NetMQ? NetMQ is owned by all its authors and contributors. This is an open source project licensed under the LGPLv3. To contribute to NetMQ please read the C4.1 process, it's what we use. There are open issues in the issues tab that still need to be taken care of, feel free to pick one up and submit a patch to the project. Build Server TeamCity at CodeBetter YouTrack by JetBrains - keyboard-centric bug tracker TeamCity by JetBrains - continuous integration server Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zeromq/netmq"	"NetMQ is 100% native C# port of ZeroMQ"	"true"
"Queue"	"MassTransit"	"https://github.com/MassTransit/MassTransit"	"MassTransit is lean service bus implementation for building loosely coupled applications using the.NET Framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"786"	"117"	"525"	"GitHub - MassTransit/MassTransit: Distributed Application Framework for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 117 Star 786 Fork 525 MassTransit/MassTransit Code Issues 46 Pull requests 4 Wiki Pulse Graphs Distributed Application Framework for .NET http://masstransit-project.com/ 3,629 commits 11 branches 55 releases 84 contributors C# 99.6% Other 0.4% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags autofacextensions develop gh-pages iso_formatted_dates_serialization master mt3-docs mt3 pr538 updating-starbucks-demo-to-rabbit-with-proper-line-endings v2-develop v2-master Nothing to show versioning.for.uc v3.3.5 v3.3.4 v3.3.3 v3.3.2 v3.3.1 v3.3.0 v3.2.4 v3.2.3 v3.2.2 v3.2.0 v3.1.2 v3.1.1 v3.1.0 v3.0.16 v3.0.15 v3.0.14 v3.0.13 v3.0.12-beta v3.0.11-beta v3.0.10-beta v3.0.9-alpha v3.0.8-alpha v3.0.7-alpha v3.0.6-alpha v3.0.5-alpha v3.0.4-alpha v3.0.3-alpha v3.0.2-alpha v3.0.0-alpha v2.50-prerelease v2.10.2 v2.10.1 v2.10.0 v2.9.9 v2.9.8 v2.8.0 v2.7.2 v2.6.5 v2.6.3 v2.6.2 v2.6 v2.5.3-prerelease v2.5.2-prerelease v2.1.0 v2.0.1 v2.0.0.2 v2.0b5 v2.0b2 v2.0b1 v2.0-GA v1.0RC0 v1.0RC v1.x.eol ActiveMQ-EOL Nothing to show New pull request Latest commit 8614733 Jul 15, 2016 phatboyg Cleaned up logic to avoid duplicate calls Permalink Failed to load latest commit information. doc Correct example code. Jul 6, 2016 host Enable logging output and set project startup when installing MassTra… Feb 17, 2016 src Cleaned up logic to avoid duplicate calls Jul 15, 2016 .gitignore Initial support for NUnit3 Jul 12, 2016 LICENSE License Information Jan 10, 2008 MassTransit.snk adding snk Sep 29, 2009 NOTICE Header Start Jan 10, 2008 README.md Specify that .net 4.5.2 is required to install MassTransit package. Jul 4, 2016 build.bat Updated dependencies to all 4.5.2 packages, including Topshelf 4 May 3, 2016 build.fsx Updated version Jun 9, 2016 sourcebrowser.lst Cleanup and awaitable actions Dec 15, 2015 template.nuspec Using FAKE to build NuGet packages Jul 21, 2015 README.md MassTransit MassTransit is a free, open-source distributed application framework for .NET. MassTransit makes it easy to create applications and services that leverage message-based, loosely-coupled asynchronous communication for higher availability, reliabililty, and scalability. MassTransit is Apache 2.0 licensed. Getting started with MassTransit In order to get started with MassTransit, you can have a look at the documentation, which is located at http://docs.masstransit-project.com/. Simplest possible thing: install-package MassTransit.RabbitMq then; // Message Definition class MyMessage {     public string Value { get; set; } }  // Code Snippet for Console Application  var bus = Bus.Factory.CreateUsingRabbitMq(sbc => {     var host = sbc.Host(new Uri(""rabbitmq://localhost/""), h =>     {         h.Username(""guest"");         h.Password(""guest"");     });      sbc.ReceiveEndpoint(host, ""my_queue"", endpoint =>     {         endpoint.Handler<MyMessage>(async context =>         {             await Console.Out.WriteLineAsync($""Received: {context.Message.Value}"");         });     }); });  using(bus.Start()) {     bus.Publish(new MyMessage{Value = ""Hello, World.""});      Console.ReadLine(); }  You will also need to set up RabbitMQ; Install Erlang using the installer. (Next -> Next ...) Install RabbitMQ using the installer. (Next -> Next ...) You now have a RabbitMQ broker (look in services.msc for it) that you can log into using guest, guest. You can see message rates, routings and active consumers using this interface. Please note You need to add the management interface before you can login. First, from an elevated command prompt, change directory to the sbin folder within the RabbitMQ Server installation directory e.g. %PROGRAMFILES%\RabbitMQ Server\rabbitmq_server_3.5.3\sbin\ Next, run the following command to enable the rabbitmq management plugin: rabbitmq-plugins.bat enable rabbitmq_management   Downloads Download from NuGet 'MassTransit' Search NuGet for MassTransit Download the continuously integrated Nuget packages from AppVeyor. Supported transports We support RabbitMQ and Azure Service Bus message brokers. Mailing list MassTransit Discuss Gitter Chat While attendence is pretty light, there is a Gitter chat room available: Building from Source Clone the source down to your machine. git clone git://github.com/MassTransit/MassTransit.git Run build.bat Contributing git config --global core.autocrlf false Hack! Make a pull request. Builds MassTransit is built on AppVeyor REQUIREMENTS .Net 4.5.2 CREDITS Logo Design by The Agile Badger Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MassTransit/MassTransit"	"MassTransit is lean service bus implementation for building loosely coupled applications using the.NET Framework."	"true"
"Queue"	"Rebus"	"https://github.com/rebus-org/Rebus"	"Rebus is a lean service bus implementation for.NET, similar in nature to NServiceBus and MassTransit, only leaner"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"388"	"50"	"151"	"GitHub - rebus-org/Rebus: Rebus is a lean service bus implementation for .NET, similar in nature to NServiceBus and MassTransit, only leaner. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 388 Fork 151 rebus-org/Rebus Code Issues 12 Pull requests 0 Wiki Pulse Graphs 🚌 Rebus is a lean service bus implementation for .NET, similar in nature to NServiceBus and MassTransit, only leaner. http://mookid.dk/oncode/rebus 2,495 commits 12 branches 242 releases 46 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags FleetKeeper FleetKeeper61Revisited feature/distributed-saga-lock feature/playing-with-tasks feature/postgres feature/ravendb-sagas feature/ringbuffer-sql-transport feature/sqlperf feature/stage-markers feature/sync-request-reply master snoop-editable-messages Nothing to show 0.99.67 0.99.66 0.99.65 0.99.64 0.99.63 0.99.62 0.99.61 0.99.60 0.99.59 0.99.58 0.99.57 0.99.56 0.99.55 0.99.54 0.99.53 0.99.52 0.99.51 0.99.50 0.99.48 0.99.47 0.99.46 0.99.45 0.99.44 0.99.43 0.99.42 0.99.41 0.99.40 0.99.39 0.99.38 0.99.37 0.99.36 0.99.35 0.99.34 0.99.33 0.99.32 0.99.31 0.99.30 0.99.29 0.99.27 0.99.26 0.99.25 0.99.24 0.99.23 0.99.22 0.99.21 0.99.20 0.99.19 0.99.18 0.99.17 0.99.16 0.99.14 0.99.13 0.99.12 0.99.11 0.99.10 0.99.9 0.99.8 0.99.7 0.99.5 0.99.4 0.99.2 0.99.1 0.98.12 0.98.11 0.98.10 0.98.9 0.98.8 0.98.7 0.98.6 0.98.5 0.98.4 0.98.3 0.98.2 0.98.1 0.98.0 0.97.0 0.96.0 0.95.0 0.94.0 0.93.0 0.92.4 0.92.3 0.92.2 0.92.1 0.92.0 0.91.0 0.90.9 0.90.8 0.90.7 0.90.6 0.90.5 0.90.4 0.90.3 0.90.2 0.90.1 0.84.0 0.83.0 0.82.1 0.80.1 0.80.0 Nothing to show New pull request Latest commit 4ed1df9 Jul 15, 2016 mookid8000 remove Rune's reproduction project :) Permalink Failed to load latest commit information. .github Update PULL_REQUEST_TEMPLATE.md Feb 26, 2016 Rebus.AmazonSQS.Tests updated amazon sdk dep May 21, 2016 Rebus.AmazonSQS merged cancellation support Jun 3, 2016 Rebus.Async.Tests Clean-up solution + Use feature ""String Interpolation"" May 17, 2016 Rebus.Async updated amazon sdk dep May 21, 2016 Rebus.Autofac.Tests downgraded NUnit to 2.6.4 because 3 has bugs Jan 21, 2016 Rebus.Autofac updated nuspecs Feb 10, 2016 Rebus.AzureServiceBus.Tests updated newtonsoft to 9.0.1 Jun 29, 2016 Rebus.AzureServiceBus accept almost infinite deviation when working with Azure Service Bus Jun 17, 2016 Rebus.AzureStorage.Tests updated newtonsoft to 9.0.1 Jun 29, 2016 Rebus.AzureStorage fix subtle saga data type mismatch bug Jul 15, 2016 Rebus.CastleWindsor.Tests cleaned up windsor code Jan 23, 2016 Rebus.CastleWindsor cleaned up after PR running a tool May 18, 2016 Rebus.DryIoc.Tests updated container dependencies May 24, 2016 Rebus.DryIoc updated container dependencies May 24, 2016 Rebus.Forklift.AzureServiceBus found a way to cancel pending receive operation with Azure Service Bus May 18, 2016 Rebus.Forklift.AzureStorageQueues updated newtonsoft to 9.0.1 Jun 29, 2016 Rebus.Forklift.Common Clean-up + use the c#6 function ""nameof()"". So if you change the vari… May 18, 2016 Rebus.Forklift.Msmq Remove some unused ""Using"" statements Nov 9, 2015 Rebus.Forklift.RabbitMq Remove some unused ""Using"" statements Nov 9, 2015 Rebus.Jil.Tests disabled JIL test case May 21, 2016 Rebus.Jil add jil customization Jul 14, 2016 Rebus.LightInject.Tests updated lightinject to 4.0.9 May 24, 2016 Rebus.LightInject updated lightinject to 4.0.9 May 24, 2016 Rebus.Log4net updated log libs May 24, 2016 Rebus.MongoDb.Tests fix subtle saga data type mismatch bug Jul 15, 2016 Rebus.MongoDb fixed mongodb serialization error May 19, 2016 Rebus.MsgPack.Tests added msgpack serializer Jun 29, 2016 Rebus.MsgPack comments! Jun 29, 2016 Rebus.NLog.Tests updated log libs May 24, 2016 Rebus.NLog updated log libs May 24, 2016 Rebus.NewtonsoftJson add jil customization Jul 14, 2016 Rebus.Ninject.Tests ability to configure centralized in-mem subscription storage May 24, 2016 Rebus.Ninject ability to configure centralized in-mem subscription storage May 24, 2016 Rebus.Owin.Tests Clean-up solution + Use feature ""String Interpolation"" May 17, 2016 Rebus.Owin Clean-up solution + Use feature ""String Interpolation"" May 17, 2016 Rebus.PostgreSql.Tests fix subtle saga data type mismatch bug Jul 15, 2016 Rebus.PostgreSql fix subtle saga data type mismatch bug Jul 15, 2016 Rebus.Protobuf.Tests added serialization speed test Jun 22, 2016 Rebus.Protobuf made DataBusAttachment serializable across the board Jun 21, 2016 Rebus.RabbitMq.Tests additional defensive RabbitMQ measures Jun 16, 2016 Rebus.RabbitMq updated changelog Jul 14, 2016 Rebus.RavenDb.Tests fix subtle saga data type mismatch bug Jul 15, 2016 Rebus.RavenDb fix subtle saga data type mismatch bug Jul 15, 2016 Rebus.Recipes.Test identity tests Jun 24, 2016 Rebus.Recipes XML comments Jun 28, 2016 Rebus.Serilog updated log libs May 24, 2016 Rebus.SimpleInjector.Tests downgraded NUnit to 2.6.4 because 3 has bugs Jan 21, 2016 Rebus.SimpleInjector updated nuspecs Feb 10, 2016 Rebus.StructureMap.Tests updated StructureMap to 4.2.0.402 May 24, 2016 Rebus.StructureMap updated changelog and added some comments Jun 24, 2016 Rebus.Tests fix subtle saga data type mismatch bug Jul 15, 2016 Rebus.TransactionScopes.Tests cleaned up in some tests Mar 31, 2016 Rebus.TransactionScopes updated target fx for transaction scope support May 21, 2016 Rebus.UnitOfWork.Tests Clean-up solution + Use feature ""String Interpolation"" May 17, 2016 Rebus.UnitOfWork Clean-up solution + Use feature ""String Interpolation"" May 17, 2016 Rebus.Unity.Tests tried to update Unity May 24, 2016 Rebus.Unity tried to update Unity May 24, 2016 Rebus.Wire.Tests added serialization speed test Jun 22, 2016 Rebus.Wire added Wire serializer proper Mar 1, 2016 Rebus.XmlConfig.Tests cleaned up in some tests Mar 31, 2016 Rebus.XmlConfig updated nuspecs Feb 10, 2016 Rebus fix subtle saga data type mismatch bug Jul 15, 2016 artwork added fm logo files Feb 4, 2016 packages updated newtonsoft to 9.0.1 Jun 29, 2016 scripts updated changelog + fixed build script to work with C#6 Nov 24, 2015 tools maybe it'll help updating nuget Aug 2, 2015 .gitignore explicitly un-ignore packages folder May 18, 2016 CHANGELOG.md fix subtle saga data type mismatch bug Jul 15, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Oct 18, 2015 LICENSE.md fixed license Feb 4, 2016 README.md Update README.md Mar 17, 2016 Rebus2.sln remove Rune's reproduction project :) Jul 15, 2016 README.md Rebus 2 ""As friendly as machinely possible."" NOTE: This is Rebus2 - if you've used Rebus before up until version 0.84.0, you will experience a minor bump in the road when you update to 0.90.0, which functions as the beta versions until Rebus 2.0.0 is ready! Moreover - since the wiki actually contains quite a bit of content - please be patient until the content has been updated to reflect Rebus 2 :) What? Rebus is a lean service bus implementation for .NET, similar in nature to NServiceBus and MassTransit, only leaner. These are the goals - Rebus should have: a simple and intuitive configuration story a few well-selected options no doodleware dependency only on .NET 4.5 integration with external dependencies via small and dedicated projects the best error messages a frictionless getting-up-and-running-experience and in doing this, Rebus should align very well with the NServiceBus way of doing things, which I like, thus allowing users (myself included) to easily migrate to NServiceBus at some point in a project's lifetime if Rebus for some reason falls short (which I don't think it will). Oh, and Rebus is free as in beer and speech. Why? Because I wanted to build the .NET service bus that I would have the patience to work with every day, probably for several years to come. And I can be very impatient with my tools, so the most solemn goal of Rebus is that it should stay out of my way - and I think it does that just right! If you want to read more, check out the official Rebus documentation wiki or check out my blog. One day, maybe I'll tweet something as well... @mookid8000 How? Rebus is a simple .NET library, and everything revolves around the RebusBus class. One way to get Rebus up and running, is to manually go var bus = new RebusBus(...); bus.Start(1); //< 1 worker thread  // use the bus for the duration of the application lifetime  // remember to dispose the bus when your application exits bus.Dispose();  where ... is a bunch of dependencies that vary depending on how you want to send/receive messages etc. Another way is to use the configuration API, in which case you would go var someContainerAdapter = new BuiltinHandlerActivator();  for the built-in container adapter, or var someContainerAdapter = new AdapterForMyFavoriteIocContainer(myFavoriteIocContainer);  to integrate with your favorite IoC container, and then Configure.With(someContainerAdapter)     .Logging(l => l.Serilog())     .Transport(t => t.UseMsmq(""myInputQueue""))     .Routing(r => r.TypeBased().MapAssemblyOf<SomeMessageType>(""anotherInputQueue""))     .Start();  // have IBus injected in application services for the duration of the application lifetime  // let the container dispose the bus when your application exits myFavoriteIocContainer.Dispose();  which will stuff the resulting IBus in the container as a singleton and use the container to look up message handlers. Check out the Configuration section on the official Rebus documentation wiki for more information on how to do this. License Rebus is licensed under The MIT License (MIT). Basically, this license grants you the right to use Rebus in any way you see fit. See LICENSE.md for more info. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rebus-org/Rebus"	"Rebus is a lean service bus implementation for.NET, similar in nature to NServiceBus and MassTransit, only leaner"	"true"
"Queue"	"RestBus"	"https://github.com/tenor/RestBus"	"A service oriented.NET messaging library for RabbitMQ."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"162"	"22"	"22"	"GitHub - tenor/RestBus: Easy, Service Oriented, Asynchronous Messaging and Queueing for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 162 Fork 22 tenor/RestBus Code Issues 2 Pull requests 0 Wiki Pulse Graphs Easy, Service Oriented, Asynchronous Messaging and Queueing for .NET http://restbus.org 315 commits 2 branches 11 releases 1 contributor C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show RestBus.WebAPI_v0.5.8 RestBus.WebAPI_v0.5.7 RestBus.ServiceStack_v0.5.7 RestBus.ServiceStack_v0.5.5 RestBus.RabbitMQ_v0.6.9 RestBus.RabbitMQ_v0.6.8 RestBus.Common_v0.6.3 RestBus.Common_v0.6.2 RestBus.Client_v0.5.2 RestBus.AspNet_v0.6.2-rc2 RestBus.AspNet_v0.6.1 Nothing to show New pull request Latest commit 283671e Jan 27, 2016 tenor Update README.md Permalink Failed to load latest commit information. src Updated versions for R.AspNet, R.ServiceStack and R.WebApi Jan 25, 2016 tools Made logo green. Jan 15, 2016 .gitattributes Added Nuget packages for all four projects Jan 5, 2014 .gitignore Removed packages folder from repo. Dec 6, 2015 LICENSE Bumped version number and added Nuget pack script Jan 9, 2014 README.md Update README.md Jan 27, 2016 README.md Easy, Service Oriented, Asynchronous Messaging and Queueing for .NET RestBus is a high performance library for RabbitMQ that lets you consume ASP.NET Core (ASP.NET 5), Web API and ServiceStack service endpoints via RabbitMQ. Sending a message is as easy as: var amqpUrl = ""amqp://localhost:5672""; //AMQP URI for RabbitMQ server var serviceName = ""samba""; //The unique identifier for the target service  var client = new RestBusClient(new BasicMessageMapper(amqpUrl, serviceName));  //Call the /hello/random endpoint var response = await client.GetAsync(""/hello/random""); where /hello/random is an ordinary web service endpoint in an ASP.NET Core, Web API or ServiceStack service. RestBus routes the request over RabbitMQ, invokes the endpoint and returns the response, without ever hitting the HTTP transport. Home page Documentation Example Projects Getting Started You can: Use the Getting Started Guide. or Clone this repo. Open RestBus.sln in Visual Studio 2015. Restore Nuget packages. Run the Examples project. Benchmarks For more benchmarks, see the RestBus.Benchmarks project. License Apache License, Version 2.0 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tenor/RestBus"	"A service oriented.NET messaging library for RabbitMQ."	"true"
"Queue"	"EasyNetQ"	"https://github.com/EasyNetQ/EasyNetQ"	"An easy to use.NET API for RabbitMQ"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"783"	"112"	"351"	"GitHub - EasyNetQ/EasyNetQ: An easy to use .NET API for RabbitMQ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 112 Star 783 Fork 351 EasyNetQ/EasyNetQ Code Issues 67 Pull requests 14 Wiki Pulse Graphs An easy to use .NET API for RabbitMQ http://easynetq.com 1,373 commits 3 branches 0 releases Fetching contributors C# 99.7% Other 0.3% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags consume-single gh-pages master Nothing to show Nothing to show New pull request Latest commit e88366e Jun 6, 2016 micdenny Merge pull request #495 from tkirill/message-priority … Message priority in IBus Permalink Failed to load latest commit information. Build Adds support for LightInject DI Jan 31, 2016 DatabaseScripts/EasyNetQ.Scheduler Added support for the new properties in ScheduleMe properties in the … Oct 17, 2015 Package Updated EasyNetQ.DI.StructureMap.nuspec Mar 29, 2016 Source Add note about 0.59.0.0 version Jun 6, 2016 Tools Update nuget.exe Nov 10, 2015 .gitattributes Removed Hosepipe setup project. Unsupported on VS2012 Mar 20, 2013 .gitignore Ignore NuGet binary May 21, 2014 README.md Update README URLs based on HTTP redirects Apr 25, 2016 build.bat Added nuget package with serilog support (not a lot in there yet, but… Oct 21, 2015 hall_of_fame.md Fix #520 Marked Rpc.Respond overload as virtual Mar 16, 2016 licence.txt Updated nuspec and licence copyright year and urls to point towards n… Mar 28, 2015 README.md A Nice .NET API for RabbitMQ Initial development was sponsored by travel industry experts 15below Homepage Documentation NuGet Discussion Group Goals: To make working with RabbitMQ on .NET as easy as possible. To connect to a RabbitMQ broker... var bus = RabbitHutch.CreateBus(""host=localhost"");  To publish a message... bus.Publish(message);  To subscribe to a message... bus.Subscribe<MyMessage>(""my_subscription_id"", msg => Console.WriteLine(msg.Text));  Remote procedure call... var request = new TestRequestMessage {Text = ""Hello from the client! ""}; bus.Request<TestRequestMessage, TestResponseMessage>(request, response =>      Console.WriteLine(""Got response: '{0}'"", response.Text));  RPC server... bus.Respond<TestRequestMessage, TestResponseMessage>(request =>      new TestResponseMessage{ Text = request.Text + "" all done!"" });  Management API EasyNetQ also has a client-side library for the RabbitMQ Management HTTP API. This lets you control all aspects for your RabbitMQ broker from .NET code, including creating virtual hosts and users; setting permissions; monitoring queues, connections and channels; and setting up exchanges, queues and bindings. See the documentation. The annoucement blog post is here Some blog posts about EasyNetQ ... http://mikehadlow.blogspot.co.uk/search/label/EasyNetQ Getting started Just open EasyNetQ.sln in VisualStudio 2015 and build. All the required dependencies for the solution file to build the software are included. To run the explicit tests that send messages you will have to be running the EasyNetQ.Tests.SimpleService application and have a working local RabbitMQ server (see http://www.rabbitmq.com/ for more details). Mono specific If you are building the software in monodevelop under Linux you will have to change the active solution configuration to 'Debug|Mixed platforms' to build all the included projects and set the 'Copy to output directory' property on the app.config files to something other then 'Do not copy'. Most of the example programs will not run since they utilise the TopShelf assembly to run as a windows service. The basic tests and Tests.SimpleServer seem to behave correctly. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/EasyNetQ/EasyNetQ"	"An easy to use.NET API for RabbitMQ"	"true"
"Queue"	"Warewolf ESB"	"https://github.com/Warewolf-ESB/Warewolf-ESB"	"An easy to use service bus and microservices platform. Easily build applications and services in a visual IDE."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"110"	"37"	"68"	"GitHub - Warewolf-ESB/Warewolf: Effortless Microservice Design and Integration. This repository includes the code-base for the Warewolf Studio and Server. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 37 Star 110 Fork 68 Warewolf-ESB/Warewolf Code Issues 5 Pull requests 0 Wiki Pulse Graphs Effortless Microservice Design and Integration. This repository includes the code-base for the Warewolf Studio and Server. 4,105 commits 3 branches 0 releases 9 contributors C# 89.4% Cucumber 8.0% F# 1.1% JavaScript 0.7% CSS 0.3% HTML 0.3% Other 0.2% C# Cucumber F# JavaScript CSS HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: development Switch branches/tags Branches Tags Release_1.0 development master Nothing to show Nothing to show New pull request Latest commit 0f049c4 Jul 15, 2016 SalamiArmy giving smtp email ui test a name Permalink Failed to load latest commit information. Dev giving smtp email ui test a name Jul 15, 2016 .gitattributes add trivial coded ui testing solution to test something Jul 4, 2016 .gitignore add server decrypt script Jul 4, 2016 README.md Update README.md Jun 15, 2016 Resharper.AutoLoad.DotSettings reduce torance for cyclomatic complexity from 20 to 15 Jul 6, 2016 README.md What is Warewolf all about? Service oriented architecture has finally entered the 21st century. Warewolf allows developers to use a visual, flow-based, drag and drop environment to design and create microservices, and then call those microservices from directly within their applications. The end result is months of programming accomplished in days and a total revolution in how we think about and use the SOA framework. Who can help? Everyone! But it really helps if you’re a C# developer, or a WPF expert. You could be recognised as a top contributor, and even get an original Warewolf T-shirt for your contribution. See the list of open issues and bugs here to get started right away. You can also help by voting for Warewolf training on Pluralsight. Need more info? Use the Knowledge Base site for: Technical Documentation Getting started quickly - Branching, building etc. Contributing, Pull Requests and more Warewolf User Guides System Requirements Roadmap Get Community Help, Support and Info Release notes are available at http://warewolf.io/release-notes.php You can download the latest compiled release from https://warewolf.io Please note that Warewolf is built for Windows 7, Windows 8.1, Windows 10, Windows Server 2008 and Windows Server 2012. This repo includes an F# project which requires Visual FSharp LICENCE: Licensed under GNU Affero General Public License 3.0 or later Developed with the help of ReSharper Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Warewolf-ESB/Warewolf-ESB"	"An easy to use service bus and microservices platform. Easily build applications and services in a visual IDE."	"true"
"Reactive Programming"	"Rx.NET"	"https://github.com/Reactive-Extensions/Rx.NET"	"The Reactive Extensions (Rx) is a library for composing asynchronous and event-based programs using observable sequences and LINQ-style query operators"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1115"	"159"	"203"	"GitHub - Reactive-Extensions/Rx.NET: The Reactive Extensions for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 159 Star 1,115 Fork 203 Reactive-Extensions/Rx.NET Code Issues 57 Pull requests 14 Wiki Pulse Graphs The Reactive Extensions for .NET http://reactivex.io 535 commits 5 branches 3 releases 31 contributors C# 99.9% PowerShell 0.1% C# PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags BetterErrors develop-old fix-deps gh-pages master Nothing to show v3.0.0 v2.2.5 v2.2.4 Nothing to show New pull request Latest commit 53f52f9 Jul 14, 2016 onovotny update test to use types from diff libs Permalink Failed to load latest commit information. Ix.NET Made Ix-Async factory methods public Jul 11, 2016 Rx.NET update test to use types from diff libs Jul 14, 2016 .gitattributes Rename Ix/NET/** to Ix.NET/**. Rename Rx/NET/** to Rx.NET/** Sep 3, 2013 .gitignore go away nuget.exe May 27, 2016 AUTHORS.txt Update AUTHORS.txt Apr 14, 2015 GitVersion.yml Update GV config and scripts for assembly versioning Jul 10, 2016 LICENSE Update main project license for .NET Foundation Jun 16, 2016 NuGet.Config ensure correct feeds are used for ci build Jul 2, 2016 README.md Strong name key breaking change. Fix spelling and format Jul 6, 2016 appveyor.yml build config tuning Jun 22, 2016 build.ps1 Ensure git tree has no dirty commits from AssemblyInfo Jun 20, 2016 README.md Reactive Extensions Channel Rx Ix AppVeyor (home) NuGet.org MyGet (gallery) Join the conversation Catch us in the #rx and #ix channels over in the .NET Slack. Get nightly builds NuGet v3 feed url (VS 2015+): https://dotnet.myget.org/F/rx/api/v3/index.json NuGet v2 feed url (VS 2012+): https://dotnet.myget.org/F/rx/ Symbol server url: https://dotnet.myget.org/F/rx/symbols/ Breaking changes The NuGet packages have changed their package naming in the move from v2.x.x to v3.0.0 Rx-Main is now System.Reactive Rx-Core is now System.Reactive.Core Rx-Interfaces is now System.Reactive.Interfaces Rx-Linq is now System.Reactive.Linq Rx-PlatformServices is now System.Reactive.PlatformServices Rx-Testing is now Microsoft.Reactive.Testing This brings the NuGet package naming in line with NuGet guidelines and also the dominant namespace in each package. The strong name key has also changed, which is considered a breaking change. However, there are no expected API changes, therefore, once you make the NuGet change, no code changes should be necessary. A Brief Intro The Reactive Extensions (Rx) is a library for composing asynchronous and event-based programs using observable sequences and LINQ-style query operators. Using Rx, developers represent asynchronous data streams with Observables, query asynchronous data streams using LINQ operators, and parameterize the concurrency in the asynchronous data streams using Schedulers. Simply put, Rx = Observables + LINQ + Schedulers. Whether you are authoring a traditional desktop or web-based application, you have to deal with asynchronous and event-based programming from time to time. Desktop applications have I/O operations and computationally expensive tasks that might take a long time to complete and potentially block other active threads. Furthermore, handling exceptions, cancellation, and synchronization is difficult and error-prone. Using Rx, you can represent multiple asynchronous data streams (that come from diverse sources, e.g., stock quote, tweets, computer events, web service requests, etc.), and subscribe to the event stream using the IObserver<T> interface. The IObservable<T> interface notifies the subscribed IObserver<T> interface whenever an event occurs. Because observable sequences are data streams, you can query them using standard LINQ query operators implemented by the Observable extension methods. Thus you can filter, project, aggregate, compose and perform time-based operations on multiple events easily by using these standard LINQ operators. In addition, there are a number of other reactive stream specific operators that allow powerful queries to be written. Cancellation, exceptions, and synchronization are also handled gracefully by using the extension methods provided by Rx. Rx complements and interoperates smoothly with both synchronous data streams (IEnumerable<T>) and single-value asynchronous computations (Task<T>) as the following diagram shows: Single return value Multiple return values Pull/Synchronous/Interactive T IEnumerable<T> Push/Asynchronous/Reactive Task<T> IObservable<T> Additional documentation, video, tutorials and HOL are available on MSDN. Flavors of Rx Rx.NET: (this repository) The Reactive Extensions (Rx) is a library for composing asynchronous and event-based programs using observable sequences and LINQ-style query operators. RxJS 4 / RxJS 5 beta: The Reactive Extensions for JavaScript (RxJS) is a library for composing asynchronous and event-based programs using observable sequences and LINQ-style query operators in JavaScript which can target both the browser and Node.js. RxJava: Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM. RxScala: Reactive Extensions for Scala – a library for composing asynchronous and event-based programs using observable sequences RxCpp: The Reactive Extensions for Native (RxCpp) is a library for composing asynchronous and event-based programs using observable sequences and LINQ-style query operators in both C and C++. Rx.rb: A prototype implementation of Reactive Extensions for Ruby (Rx.rb). RxPy: The Reactive Extensions for Python 3 (Rx.Py) is a set of libraries to compose asynchronous and event-based programs using observable collections and LINQ-style query operators in Python 3. Interactive Extensions Ix.NET: (included in this repository) The Interactive Extensions (Ix) is a .NET library which extends LINQ to Objects to provide many of the operators available in Rx but targeted for IEnumerable. IxJS: An implementation of LINQ to Objects and the Interactive Extensions (Ix) in JavaScript. IxCpp: An implantation of LINQ for Native Developers in C++ Applications Tx: a set of code samples showing how to use LINQ to events, such as real-time standing queries and queries on past history from trace and log files, which targets ETW, Windows Event Logs and SQL Server Extended Events. LINQ2Charts: an example for Rx bindings. Similar to existing APIs like LINQ to XML, it allows developers to use LINQ to create/change/update charts in an easy way and avoid having to deal with XML or other underneath data structures. We would love to see more Rx bindings like this one. Contributing Source code Clone the sources: git clone https://github.com/Reactive-Extensions/Rx.NET.git Building, testing and debugging the sources Contribute! Some of the best ways to contribute are to try things out, file bugs, and join in design conversations. How to Contribute Pull requests: Open/Closed Looking for something to work on? The list of up for grabs issues is a great place to start. This project has adopted a code of conduct adapted from the Contributor Covenant to clarify expected behavior in our community. This code of conduct has been adopted by many other projects. For more information see the Code of conduct. .NET Foundation This project is part of the .NET Foundation along with other projects like the class libraries for .NET Core. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Reactive-Extensions/Rx.NET"	"The Reactive Extensions (Rx) is a library for composing asynchronous and event-based programs using observable sequences and LINQ-style query operators"	"true"
"Reactive Programming"	"Dynamic Data"	"https://github.com/RolandPheasant/DynamicData"	"Reactive Extensions (Rx) for collections"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"254"	"37"	"26"	"GitHub - RolandPheasant/DynamicData: Reactive collections based on Rx.Net Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 37 Star 254 Fork 26 RolandPheasant/DynamicData Code Issues 7 Pull requests 0 Wiki Pulse Graphs Reactive collections based on Rx.Net http://dynamic-data.org 408 commits 5 branches 0 releases Fetching contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3_2 UpgradeToRx3.0 VirtualisationFixes develop master Nothing to show Nothing to show New pull request Latest commit 61e3e4c Jul 11, 2016 RolandPheasant Expose paged parameters Permalink Failed to load latest commit information. .nuget Rebuid repo Nov 21, 2014 Docs Fixed ForEach unit test Aug 8, 2015 DynamicData.PLinq Include source in nuget Apr 26, 2016 DynamicData.Tests Start adding virtual parameters to List.Virtualise() Jul 5, 2016 DynamicData Expose paged parameters Jul 11, 2016 .gitignore Ignore ghostdoc file Jan 16, 2015 DynamicData.1.2.3.nupkg Updated nuspec to include source code Apr 26, 2016 DynamicData.Plinq.1.2.3.4.nupkg Updated nuspec to include source code Apr 26, 2016 DynamicData.Portable.csproj Make portable Dec 29, 2014 DynamicData.build Optimise unified changes May 9, 2015 DynamicData.sln Create seperate package for Plinq Feb 6, 2016 DynamicData.v2.ncrunchsolution Code formatting/style Apr 21, 2016 Info.txt Limit which branch is built when there is a check in Mar 10, 2015 LICENSE Update LICENSE Feb 17, 2015 Packages.dgml Rebuid repo Nov 21, 2014 README.md Dynamic logical operators for the observable cache Apr 3, 2016 ToDo.txt Rebuid repo Nov 21, 2014 README.md Dynamic Data Dynamic Data is a portable class library which brings the power of Reactive Extensions (Rx) to collections. Managing asynchronous collections can be very difficult. Mutable collections frequently experience additions, updates, and removals (among other changes). Dynamic Data provides two collection implementations, ISourceCache<T,K> and ISourceList<T>, that expose changes to the collection via an observable change set. The resulting observable change sets can be manipulated and transformed using Dynamic Data's robust and powerful array of change set operators. These operators receive change notifications, apply some logic, and subsequently provide their own change notifications. Because of this, operators are fully composable and can be chained together to perform powerful and very complicated operations while maintaining simple, fluent code. Using Dynamic Data's collections and change set operators make in-memory data management extremely easy and can reduce the size and complexity of your code base by abstracting complicated and often repetitive operations. Some links Downloading the latest release of Dynamic Data from Dynamic Data on nuget Sample wpf project https://github.com/RolandPheasant/Dynamic.Trader Blog at http://dynamic-data.org/ You can contact me on twitter @RolandPheasant or email at [roland@dynamic-data.org] Create Dynamic Data Collections The Observable List Create an observable list like this: var myInts = new SourceList<int>(); The observable list provides the direct edit methods you would expect. For example: myInts.AddRange(Enumerable.Range(0, 10000));  myInts.Add(99999);  myInts.Remove(99999); The AddRange, Add and Remove methods above will each produce a distinct change notification. In order to increase efficiency when making multiple amendments, the list provides a means of batch editing. This is achieved using the .Edit method which ensures only a single change notification is produced. myInts.Edit(innerList => {    innerList.Clear();    innerList.AddRange(Enumerable.Range(0, 10000)); }); If myInts is to be exposed publicly it can be made read only using .AsObservableList IObservableList<int> readonlyInts = myInts.AsObservableList(); which hides the edit methods. The list's changes can be observed by calling myInts.Connect() like this: IObservable<IChangeSet<int>> myIntsObservable = myInts.Connect(); This creates an observable change set for which there are dozens of operators. The changes are transmitted as an Rx observable, so they are fluent and composable. The Observable Cache Create an observable cache like this: var myCache = new SourceCache<TObject,TKey>(t => key); There are direct edit methods, for example myCache.Clear(); myCache.AddOrUpdate(myItems); The Clear and AddOrUpdate methods above will each produce a distinct change notification. In order to increase efficiency when making multiple amendments, the cache provides a means of batch editing. This is achieved using the .BatchUpdate method which ensures only a single change notification is produced. myCache.BatchUpdate(innerCache =>               {                   innerCache.Clear();                   innerCache.AddOrUpdate(myItems);               }); If myCache is to be exposed publicly it can be made read only using .AsObservableCache IObservableCache<TObject,TKey> readonlyCache = myCache.AsObservableCache(); which hides the edit methods. The cache is observed by calling myCache.Connect() like this: IObservable<IChangeSet<TObject,TKey>> myCacheObservable = myCache.Connect(); This creates an observable change set for which there are dozens of operators. The changes are transmitted as an Rx observable, so they are fluent and composable. Creating Observable Change Sets As stated in the introduction of this document, Dynamic Data is based on the concept of creating and manipulating observable change sets. The primary method of creating observable change sets is to connect to instances of ISourceCache<T,K> and ISourceList<T>. There are alternative methods to produce observables change sets however, depending on the data source. Connect to a Cache or List Calling Connect() on a ISourceList<T> or ISourceCache<T,K> will produce an observable change set. var myObservableChangeSet = myDynamicDataSource.Connect(); Create an Observable Change Set from an Rx Observable Given either of the following observables: IObservable<T> myObservable; IObservable<IEnumerable<T>> myObservable; an observable change set can be created like by calling .ToObservableChangeSet like this: var myObservableChangeSet = myObservable.ToObservableChangeSet(t=> t.key); Create an Observable Change Set from an Rx Observable with an Expiring Cache The problem with the example above is that the internal backing cache of the observable change set will grow in size forever. To counter this behavior, there are overloads of .ToObservableChangeSet where a size limitation or expiry time can be specified for the internal cache. To create a time expiring cache, call .ToObservableChangeSet and specify the expiry time using the expireAfter argument: var myConnection = myObservable.ToObservableChangeSet(t=> t.key, expireAfter: item => TimeSpan.FromHours(1)); To create a size limited cache, call .ToObservableChangeSet and specify the size limit using the limitSizeTo argument: var myConnection = myObservable.ToObservableChangeSet(t=> t.key, limitSizeTo:10000); There is also an overload to specify expiration by both time and size. Create an Observable Change Set from an Observable Collection var myObservableCollection = new ObservableCollection<T>(); To create a cache based observable change set, call .ToObservableChangeSet and specify a key selector for the backing cache var myConnection = myObservableCollection.ToObservableChangeSet(t => t.Key); or to create a list based observable change set call .ToObservableChangeSet with no arguments var myConnection = myObservableCollection.ToObservableChangeSet(); This method is only recommended for simple queries which act only on the UI thread as ObservableCollection is not thread safe. Consuming Observable Change Sets The examples below illustrate the kind of things you can achieve after creating an observable change set. No you can create an observable cache or an observable list, here are a few quick fire examples to illustrated the diverse range of things you can do. In all of these examples the resulting sequences always exactly reflect the items is the cache i.e. adds, updates and removes are always propagated. Bind a Complex Stream to an Observable Collection This example first filters a stream of trades to select only live trades, then creates a proxy for each live trade, and finally orders the results by most recent first. The resulting trade proxies are bound on the dispatcher thread to the specified observable collection. var list = new ObservableCollectionExtended<TradeProxy>();  var myTradeCache = new SourceCache<Trade, long>(trade => trade.Id);  var myTradeCacheObservable = myTradeCache.Connect();  var myOperation = myTradeCacheObservable                      .Filter(trade=>trade.Status == TradeStatus.Live)                      .Transform(trade => new TradeProxy(trade))                     .Sort(SortExpressionComparer<TradeProxy>.Descending(t => t.Timestamp))                     .ObserveOnDispatcher()                     .Bind(list)                      .DisposeMany()                     .Subscribe() Since the TradeProxy object is disposable, the DisposeMany operator ensures that the proxies objects are disposed when they are no longer part of this observable stream. Note that ObservableCollectionExtended<T> is provided by Dynamic Data and is more efficient than the standard ObservableCollection<T>. Create a Derived List or Cache This example shows how you can create derived collections from an observable change set. It applies a filter to a collection, and then creates a new observable collection that only contains items from the original collection that pass the filter. This pattern is incredibly useful when you want make modifications to an existing collection and then expose the modified collection to consumers. Even though the code in this example is very simple, this is one of the most powerful aspects of Dynamic Data. Given a SourceList var myList = new SourceList<People>(); You can apply operators, in this case the Filter() operator, and then create a new observable list with AsObservableList() var oldPeople = myList.Connect().Filter(person => person.Age > 65).AsObservableList(); The resulting observable list, oldPeople, will only contain people who are older than 65. The same pattern can be used with SourceCache by using .AsObservableCache() to create derived caches. Filtering Filter the observable change set by using the Filter operator var myPeople = new SourceList<People>(); var myPeopleObservable = myPeople.Connect();  var myFilteredObservable = myPeopleObservable.Filter(person => person.Age > 50); or to filter a change set dynamically IObservable<Func<Person,bool>> observablePredicate=...; var myFilteredObservable = myPeopleObservable.Filter(observablePredicate); Sorting Sort the observable change set by using the Sort operator var myPeople = new SourceList<People>(); var myPeopleObservable = myPeople.Connect(); var mySortedObservable = myPeopleObservable.Sort(SortExpressionComparer.Ascending(p => p.Age); or to dynamically change sorting IObservable<IComparer<Person>> observableComparer=...; var mySortedObservable = myPeopleObservable.Sort(observableComparer); Grouping The GroupOn operator pre-caches the specified groups according to the group selector. var myOperation = personChangeSet.GroupOn(person => person.Status) Transformation The Transform operator allows you to map objects from the observable change set to another object var myPeople = new SourceList<People>(); var myPeopleObservable = myPeople.Connect(); var myTransformedObservable = myPeopleObservable.Transform(person => new PersonProxy(person)); The TransformToTree operator allows you to create a fully formed reactive tree var myPeople = new SourceList<People>(); var myPeopleObservable = myPeople.Connect(); var myTransformedObservable = myPeopleObservable.TransformToTree(person => person.BossId); Flatten a child enumerable var myOperation = personChangeSet.TransformMany(person => person.Children) Aggregation The Count, Max, Min, Avg, and StdDev operators allow you to perform aggregate functions on observable change sets var myPeople = new SourceList<People>(); var myPeopleObservable = myPeople.Connect();  var countObservable =    myPeopleObservable.Count(); var maxObservable =      myPeopleObservable.Max(p => p.Age); var minObservable =      myPeopleObservable.Min(p => p.Age); var stdDevObservable =   myPeopleObservable.StdDev(p => p.Age); var avgObservable =      myPeopleObservable.Avg(p => p.Age); More aggregating operators will be added soon. Logical Operators The And, Or, Xor and Except operators allow you to perform logical operations on observable change sets var peopleA = new SourceCache<Person,string>(p => p.Name); var peopleB = new SourceCache<Person,string>(p => p.Name);  var observableA = peopleA.Connect(); var observableB = peopleB.Connect();  var inBoth = observableA.And(observableB); var inEither= observableA.Or(observableB); var inOnlyOne= observableA.Xor(observableB); var inAandNotinB = observableA.Except(observableB); A recent and very powerful feature is dynamic logical operators. From version 4.6 onwards you can dynamically include and exclude collections from the resulting list. var list1 = new SourceList<int>(); var list2 = new SourceList<int>(); var list3  = new SourceList<int>();  var combined = new SourceList<ISourceList<int>>();  //child lists can be added or removed any time combined.Add(list1); combined.Add(list2); combined.Add(list3);  //The operators look after themselves  var inAll = combined.And(); var inAny = combined.Or(); var inOnlyOne= combined.Xor(); var inFirstAndNotAnyOther = combined.Except(); Disposal The DisposeMany operator ensures that objects are disposed when removed from an observable stream var myPeople = new SourceList<People>(); var myPeopleObservable = myPeople.Connect(); var myTransformedObservable = myPeopleObservable.Transform(person => new DisposablePersonProxy(person))                                                 .DisposeMany(); The DisposeMany operator is typically used when a transform function creates disposable objects. Distinct Values The DistinctValues operator will select distinct values from the underlying collection var myPeople = new SourceList<People>(); var myPeopleObservable = myPeople.Connect(); var myDistinctObservable = myPeopleObservable.DistinctValues(person => person.Age); Virtualisation Visualise data to restrict by index and segment size IObservable<IVirtualRequest> request; //request stream var virtualisedStream = someDynamicDataSource.Virtualise(request) Visualise data to restrict by index and page size IObservable<IPageRequest> request; //request stream var pagedStream = someDynamicDataSource.Page(request) In either of the above, the result is re-evaluated when the request stream changes Top is an overload of Virtualise() and will return items matching the first 'n' items. var topStream = someDynamicDataSource.Top(10) Observing Properties of Objects in a Collection If the collection is made up of objects that implement INotifyPropertyChanged then the following operators are available The WhenValueChanged operator returns an observable of the value of the specified property when it has changed var ageChanged = peopleDataSource.Connect().WhenValueChanged(p => p.Age) The WhenPropertyChanged operator returns an observable made up of the value of the specified property as well as it's parent object when the specified property has changed var ageChanged = peopleDataSource.Connect().WhenPropertyChanged(p => p.Age) The WhenAnyPropertyChanged operator returns an observable of objects when any of their properties have changed var personChanged = peopleDataSource.Connect().WhenAnyPropertyChanged() Observing item changes Binding is a very small part of Dynamic Data. The above notify property changed overloads are just an example when binding. If you have a domain object which has children observables you can use MergeMany() which subscribes to and unsubscribes from items according to collection changes. var myoperation = somedynamicdatasource.Connect()              .MergeMany(trade => trade.SomeObservable()); This wires and unwires SomeObservable as the collection changes. History of Dynamic Data Even before Rx existed I had implemented a similar concept using old f ashioned events but the code was very ugly and my implementation full of race conditions so it never existed outside of my own private sphere. My second attempt was a similar implementation to the first but using Rx when it first came out. This also failed as my understanding of Rx was flawed and limited and my design forced consumers to implement interfaces. Then finally I got my design head on and in 2011-ish I started writing what has become dynamic data. No inheritance, no interfaces, just the ability to plug in and use it as you please. All along I meant to open source it but having so utterly failed on my first 2 attempts I decided to wait until the exact design had settled down. The wait lasted longer than I expected and end up taking over 2 years but the benefit is it has been trialled for 2 years on a very busy high volume low latency trading system which has seriously complicated data management. And what's more that system has gathered a load of attention for how slick and cool and reliable it is both from the user and IT point of view. So I present this library with the confidence of it being tried, tested, optimised and mature. I hope it can make your life easier like it has done for me. Want to know more? I could go on endlessly but this is not the place for full documentation. I promise this will come but for now I suggest downloading my WPF sample app (links at top of document) as I intend it to be a 'living document' and I promise it will be continually maintained. Also if you following me on Twitter you will find out when new samples or blog posts have been updated. Additionally if you have read up to here and not pressed star then why not? Ha. A star may make me be more responsive to any requests or queries. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/RolandPheasant/DynamicData"	"Reactive Extensions (Rx) for collections"	"true"
"Scheduling"	"FluentScheduler"	"https://github.com/fluentscheduler/FluentScheduler"	"Task scheduler with fluent interface that runs automated jobs from your application"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"490"	"68"	"109"	"GitHub - fluentscheduler/FluentScheduler: Automated job scheduler with fluent interface. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 68 Star 490 Fork 109 fluentscheduler/FluentScheduler Code Issues 6 Pull requests 1 Pulse Graphs Automated job scheduler with fluent interface. 133 commits 2 branches 22 releases 9 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master small-fixes Nothing to show 4.1.2 4.1.1 4.1.0 4.0.1 4.0.0 3.1.46 3.1.45 3.1.43 3.1.42 3.0.41 2.1.40 2.0.39 2.0.37 1.1.36 1.1.32 1.1.31 1.1.30 1.1.29 1.1.28 1.0.24 1.0.23 1.0.21 Nothing to show New pull request Latest commit b1f240e Jul 7, 2016 tallesl 4.1.2 Permalink Failed to load latest commit information. Assets Updated call graph May 13, 2016 Library 4.1.2 Jul 7, 2016 PortableLibrary 4.1.2 Jul 7, 2016 TestApplication closes #65 May 13, 2016 UnitTests Closes #38 Apr 17, 2016 .gitignore Updated .gitignore Oct 25, 2015 FluentScheduler.sln Using only AnyCPU Mar 18, 2016 LICENSE Updated LICENSE Oct 25, 2015 Package.nuspec 4.1.2 Jul 7, 2016 README.md Fixed typo in readme May 9, 2016 README.md FluentScheduler Automated job scheduler with fluent interface. Usage The job configuration is handled in a Registry class. A job is either an Action or a class that inherits IJob: using FluentScheduler;  public class MyRegistry : Registry {     public MyRegistry()     {         // Schedule an IJob to run at an interval         Schedule<MyJob>().ToRunNow().AndEvery(2).Seconds();          // Schedule an IJob to run once, delayed by a specific time interval         Schedule<MyJob>().ToRunOnceIn(5).Seconds();          // Schedule a simple job to run at a specific time         Schedule(() => Console.WriteLine(""It's 9:15 PM now.""))             .ToRunEvery(1).Days().At(21, 15);          // Schedule a more complex action to run immediately and on an monthly interval         Schedule(() =>         {             Console.WriteLine(""Complex job started at "" + DateTime.Now);             Thread.Sleep(10000);             Console.WriteLine(""Complex job ended at"" + DateTime.Now);         }).ToRunNow().AndEvery(1).Months().OnTheFirst(DayOfWeek.Monday).At(3, 0);          // Schedule multiple jobs to be run in a single schedule         Schedule<MyJob>().AndThen<MyOtherJob>().ToRunNow().AndEvery(5).Minutes();     } } To check all possible options of scheduling you can use IntelliSense on the go or check this daunting call graph (click to enlarge): With the registry ready you then need to initialize the JobManager. This is usually done as soon as your application is loaded (in the Application_Start method of a web application for example): protected void Application_Start() {     JobManager.Initialize(new MyRegistry());  } It's also possible to schedule jobs after initialization: JobManager.AddJob(() => Console.WriteLine(""Late job!""), (s) => s.ToRunEvery(5).Seconds()); Using it with ASP.NET When using it with ASP.NET consider implementing IRegisteredObject in your job and registering it itself on HostingEnvironment (here's a great explanation on it), like: public class SampleJob : IJob, IRegisteredObject {     private readonly object _lock = new object();      private bool _shuttingDown;      public SampleJob()     {         // Register this job with the hosting environment.         // Allows for a more graceful stop of the job, in the case of IIS shutting down.         HostingEnvironment.RegisterObject(this);     }      public void Execute()     {         lock (_lock)         {             if (_shuttingDown)                 return;              // Do work, son!         }     }      public void Stop(bool immediate)     {         // Locking here will wait for the lock in Execute to be released until this code can continue.         lock (_lock)         {             _shuttingDown = true;         }          HostingEnvironment.UnregisterObject(this);     } } Dependency Injection FluentScheduler makes it easy to use your IoC tool of choice to create job instances. Simply implement IJobFactory. An example using StructureMap: using FluentScheduler; using StructureMap;  public class StructureMapJobFactory : IJobFactory {     public IJob GetJobInstance<T>() where T : IJob     {         return ObjectFactory.Container.GetInstance<T>();     } }  public class MyRegistry : Registry {     public MyRegistry()     {         // Schedule an IJob to run at an interval         Schedule<MyJob>().ToRunNow().AndEvery(2).Seconds();     } } Register the new job factory with the JobManager: protected void Application_Start() {     JobManager.JobFactory = new StructureMapJobFactory();     JobManager.Initialize(new MyRegistry());  } Unexpected exceptions To observe unhandled exceptions from your scheduled jobs, you will need to hook the JobException event on JobManager. That event will give you access to the underlying System.Threading.Tasks.Task and thrown exception details. protected void Application_Start() {     JobManager.JobException += JobExceptionHandler;     JobManager.Initialize(new JobRegistry()); }  static void JobExceptionHandler(Task sender, UnhandledExceptionEventArgs e) {     Log.Fatal(""An error happened with a scheduled job: "" + e.ExceptionObject); } Daylight Saving Time Unfortunately, not unlike many schedulers, there is no Daylight Saving Time support yet. If you are worried about your jobs not running or running twice due to that, the suggestion is to avoid troublesome time ranges or just UseUtcTime() in your registry. Upgrading from version 3 Since the Task class is becoming ubiquitous in .NET (specially because async and await), the old ITask, TaskManager and ITaskFactory are now IJob, JobManager and IJobFactory. It's just a rename, they work just as before. Contributing Feel free to open an issue or submit a pull request. When sending a patch remember to Run All Tests (Ctrl + R, A) and Run Code Analysis on Solution (Alt + F11) if possible. And, of course, be consistent with the existing code! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fluentscheduler/FluentScheduler"	"Task scheduler with fluent interface that runs automated jobs from your application"	"true"
"Scheduling"	"NCrontab"	"https://github.com/atifaziz/NCrontab"	"Class library for parsing & formatting expressions as well as calculating occurrences of time based on a crontab schedule"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"42"	"10"	"16"	"GitHub - atifaziz/NCrontab: Crontab for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 42 Fork 16 atifaziz/NCrontab Code Issues 1 Pull requests 1 Wiki Pulse Graphs Crontab for .NET 110 commits 1 branch 5 releases 2 contributors C# 97.9% Batchfile 2.1% C# Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v3.1 v3.0 v2.0 v1.0 v0.2 Nothing to show New pull request Latest commit a6e6429 Jun 14, 2016 atifaziz README sample code in C# Permalink Failed to load latest commit information. NCrontab.Tests Test packages.config targetFramework fix Mar 11, 2016 NCrontab Strong-name; closes issue #8 Mar 14, 2016 NCrontabConsole Use Func instead of Converter & so target .NET 3.5 Mar 11, 2016 NCrontabViewer Use Func instead of Converter & so target .NET 3.5 Mar 11, 2016 lic Fixed OpenSymphony Software License file. Oct 25, 2009 .gitattributes Initial directory structure. Jun 20, 2008 .gitignore PCL version Mar 11, 2016 COPYING.txt Switched license to Apache License 2.0. Feb 5, 2009 NCrontab.Signed.nuspec Strong-name; closes issue #8 Mar 14, 2016 NCrontab.nuspec Strong-name; closes issue #8 Mar 14, 2016 NCrontab.sln Reference NCrontab.Signed.nuspec in VS solution file Mar 14, 2016 README.md README sample code in C# Jun 14, 2016 SolutionInfo.cs Simpler and flatter dir structure Aug 19, 2015 build.cmd Strong-name; closes issue #8 Mar 14, 2016 buildw.cmd Upgraded VS solution and project files to 2010 and batch scripts to u… Jan 26, 2011 clean.cmd Clean script can simply delegate to build script Dec 9, 2013 pack.cmd Strong-name; closes issue #8 Mar 14, 2016 packw.cmd Added packing scripts. Jan 29, 2011 README.md NCrontab: Crontab for .NET NCrontab is a library written in C# 6.0 that provides the following facilities: Parsing of crontab expressions Formatting of crontab expressions Calculation of occurrences of time based on a crontab schedule This library does not provide any scheduler or is not a scheduling facility like cron from Unix platforms. What it provides is parsing, formatting and an algorithm to produce occurrences of time based on a give schedule expressed in the crontab format: * * * * * - - - - - | | | | | | | | | +----- day of week (0 - 6) (Sunday=0) | | | +------- month (1 - 12) | | +--------- day of month (1 - 31) | +----------- hour (0 - 23) +------------- min (0 - 59)  Star (*) in the value field above means all legal values as in parentheses for that column. The value column can have a * or a list of elements separated by commas. An element is either a number in the ranges shown above or two numbers in the range separated by a hyphen (meaning an inclusive range). For more, see CrontabExpression. Below is an example in IronPython of how to use CrontabSchedule class from NCrontab to generate occurrences of the schedule 0 12 * */2 Mon (meaning, 12:00 PM on Monday of every other month, starting with January) throughout the year 2000: IronPython 1.1 (1.1) on .NET 2.0.50727.1434 Copyright (c) Microsoft Corporation. All rights reserved. >>> import clr >>> clr.AddReferenceToFileAndPath(r'C:\NCrontab\bin\Release\NCrontab.dll') >>> from System import DateTime >>> from NCrontab import CrontabSchedule >>> s = CrontabSchedule.Parse('0 12 * */2 Mon') >>> start = DateTime(2000, 1, 1) >>> end = start.AddYears(1) >>> occurrences = s.GetNextOccurrences(start, end) >>> print '\n'.join([t.ToString('ddd, dd MMM yyyy HH:mm') for t in occurrences]) Mon, 03 Jan 2000 12:00 Mon, 10 Jan 2000 12:00 Mon, 17 Jan 2000 12:00 Mon, 24 Jan 2000 12:00 Mon, 31 Jan 2000 12:00 Mon, 06 Mar 2000 12:00 Mon, 13 Mar 2000 12:00 Mon, 20 Mar 2000 12:00 Mon, 27 Mar 2000 12:00 Mon, 01 May 2000 12:00 Mon, 08 May 2000 12:00 Mon, 15 May 2000 12:00 Mon, 22 May 2000 12:00 Mon, 29 May 2000 12:00 Mon, 03 Jul 2000 12:00 Mon, 10 Jul 2000 12:00 Mon, 17 Jul 2000 12:00 Mon, 24 Jul 2000 12:00 Mon, 31 Jul 2000 12:00 Mon, 04 Sep 2000 12:00 Mon, 11 Sep 2000 12:00 Mon, 18 Sep 2000 12:00 Mon, 25 Sep 2000 12:00 Mon, 06 Nov 2000 12:00 Mon, 13 Nov 2000 12:00 Mon, 20 Nov 2000 12:00 Mon, 27 Nov 2000 12:00  Below is the same example in F# Interactive (fsi.exe): Microsoft (R) F# 2.0 Interactive build 4.0.40219.1 Copyright (c) Microsoft Corporation. All Rights Reserved.  For help type #help;;  > #r ""NCrontab.dll"" - - open NCrontab - open System - - let schedule = CrontabSchedule.Parse(""0 12 * */2 Mon"") - let startDate = DateTime(2000, 1, 1) - let endDate = startDate.AddYears(1) - - let occurrences = schedule.GetNextOccurrences(startDate, endDate) - occurrences |> Seq.map (fun t -> t.ToString(""ddd, dd MMM yyy HH:mm"")) -             |> String.concat ""\n"" -             |> printfn ""%s"";;  --> Referenced 'C:\NCrontab\bin\Release\NCrontab.dll'  Mon, 03 Jan 2000 12:00 Mon, 10 Jan 2000 12:00 Mon, 17 Jan 2000 12:00 Mon, 24 Jan 2000 12:00 Mon, 31 Jan 2000 12:00 Mon, 06 Mar 2000 12:00 Mon, 13 Mar 2000 12:00 Mon, 20 Mar 2000 12:00 Mon, 27 Mar 2000 12:00 Mon, 01 May 2000 12:00 Mon, 08 May 2000 12:00 Mon, 15 May 2000 12:00 Mon, 22 May 2000 12:00 Mon, 29 May 2000 12:00 Mon, 03 Jul 2000 12:00 Mon, 10 Jul 2000 12:00 Mon, 17 Jul 2000 12:00 Mon, 24 Jul 2000 12:00 Mon, 31 Jul 2000 12:00 Mon, 04 Sep 2000 12:00 Mon, 11 Sep 2000 12:00 Mon, 18 Sep 2000 12:00 Mon, 25 Sep 2000 12:00 Mon, 06 Nov 2000 12:00 Mon, 13 Nov 2000 12:00 Mon, 20 Nov 2000 12:00 Mon, 27 Nov 2000 12:00  Below is the same example in C# Interactive (csi.exe): Microsoft (R) Visual C# Interactive Compiler version 1.2.0.60317 Copyright (C) Microsoft Corporation. All rights reserved.  Type ""#help"" for more information. > #r ""NCrontab.dll"" > using NCrontab; > var s = CrontabSchedule.Parse(""0 12 * */2 Mon""); > var start = new DateTime(2000, 1, 1); > var end = start.AddYears(1); > var occurrences = s.GetNextOccurrences(start, end); > Console.WriteLine(string.Join(Environment.NewLine,  .     from t in occurrences .     select $""{t:ddd, dd MMM yyyy HH:mm}"")); Mon, 03 Jan 2000 12:00 Mon, 10 Jan 2000 12:00 Mon, 17 Jan 2000 12:00 Mon, 24 Jan 2000 12:00 Mon, 31 Jan 2000 12:00 Mon, 06 Mar 2000 12:00 Mon, 13 Mar 2000 12:00 Mon, 20 Mar 2000 12:00 Mon, 27 Mar 2000 12:00 Mon, 01 May 2000 12:00 Mon, 08 May 2000 12:00 Mon, 15 May 2000 12:00 Mon, 22 May 2000 12:00 Mon, 29 May 2000 12:00 Mon, 03 Jul 2000 12:00 Mon, 10 Jul 2000 12:00 Mon, 17 Jul 2000 12:00 Mon, 24 Jul 2000 12:00 Mon, 31 Jul 2000 12:00 Mon, 04 Sep 2000 12:00 Mon, 11 Sep 2000 12:00 Mon, 18 Sep 2000 12:00 Mon, 25 Sep 2000 12:00 Mon, 06 Nov 2000 12:00 Mon, 13 Nov 2000 12:00 Mon, 20 Nov 2000 12:00 Mon, 27 Nov 2000 12:00  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/atifaziz/NCrontab"	"Class library for parsing & formatting expressions as well as calculating occurrences of time based on a crontab schedule"	"true"
"Scheduling"	"crontab"	"http://crontab.org/"	"Class library for parsing & formatting expressions as well as calculating occurrences of time based on a crontab schedule"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"crontab.org - CRONTAB(5)        CRONTAB(5)                                             CRONTAB(5)        NAME              crontab - tables for driving cron        DESCRIPTION              A crontab file contains instructions to the cron(8) daemon              of the general form: ``run this command at  this  time  on              this  date''.   Each  user has their own crontab, and com-              mands in any given crontab will be executed  as  the  user              who  owns  the  crontab.   Uucp and News will usually have              their own crontabs, eliminating the  need  for  explicitly              running su(1) as part of a cron command.               Blank  lines  and  leading  spaces  and  tabs are ignored.              Lines whose first non-space character is a pound-sign  (#)              are comments, and are ignored.  Note that comments are not              allowed on the same line as cron commands, since they will              be  taken  to be part of the command.  Similarly, comments              are not allowed on the same line as  environment  variable              settings.               An  active line in a crontab will be either an environment              setting or a cron command.  An environment setting  is  of              the form,                   name = value               where  the  spaces around the equal-sign (=) are optional,              and any subsequent non-leading spaces  in  value  will  be              part  of the value assigned to name.  The value string may              be placed in quotes (single or double,  but  matching)  to              preserve leading or trailing blanks.               Several  environment variables are set up automatically by              the cron(8) daemon.  SHELL is set to /bin/sh, and  LOGNAME              and  HOME  are  set  from  the  /etc/passwd  line  of  the              crontab's owner.  HOME and SHELL may be overridden by set-              tings in the crontab; LOGNAME may not.               (Another  note:  the  LOGNAME variable is sometimes called              USER on BSD systems...  on these systems, USER will be set              also.)               In addition to LOGNAME, HOME, and SHELL, cron(8) will look              at MAILTO if it has any reason to send mail as a result of              running  commands  in  ``this''  crontab.   If  MAILTO  is              defined (and non-empty), mail  is  sent  to  the  user  so              named.   If  MAILTO  is  defined but empty (MAILTO=""""), no              mail will be sent.  Otherwise mail is sent to the owner of              the  crontab.   This  option  is  useful  if you decide on              /bin/mail instead of /usr/lib/sendmail as your mailer when              you  install  cron  --  /bin/mail doesn't do aliasing, and              UUCP usually doesn't read its mail.               The format of a cron command is very much the V7 standard,              with  a number of upward-compatible extensions.  Each line              has five time and date fields, followed by a user name  if              this  is  the  system crontab file, followed by a command.              Commands are executed by cron(8) when  the  minute,  hour,              and  month of year fields match the current time, and when              at least one of the two day fields (day of month,  or  day              of  week)  match  the  current  time (see ``Note'' below).              Note that this means  that  non-existant  times,  such  as              ""missing  hours""  during daylight savings conversion, will              never match, causing jobs scheduled  during  the  ""missing              times""  not  to  be run.  Similarly, times that occur more              than once (again, during daylight savings conversion) will              cause matching jobs to be run twice.               cron(8) examines cron entries once every minute.               The time and date fields are:                      field          allowed values                     -----          --------------                     minute         0-59                     hour           0-23                     day of month   0-31                     month          0-12 (or names, see below)                     day of week    0-7 (0 or 7 is Sun, or use names)               A  field  may  be an asterisk (*), which always stands for              ``first-last''.               Ranges of numbers are allowed.   Ranges  are  two  numbers              separated  with  a  hyphen.  The specified range is inclu-              sive.  For example, 8-11 for an ``hours'' entry  specifies              execution at hours 8, 9, 10 and 11.               Lists are allowed.  A list is a set of numbers (or ranges)              separated by commas.  Examples: ``1,2,5,9'', ``0-4,8-12''.               Step  values can be used in conjunction with ranges.  Fol-              lowing a range with ``/<number>'' specifies skips  of  the              number's value through the range.  For example, ``0-23/2''              can be used in the hours field to specify  command  execu-              tion  every other hour (the alternative in the V7 standard              is ``0,2,4,6,8,10,12,14,16,18,20,22'').   Steps  are  also              permitted after an asterisk, so if you want to say ``every              two hours'', just use ``*/2''.               Names can also be used for  the  ``month''  and  ``day  of              week'' fields.  Use the first three letters of the partic-              ular day or month (case doesn't matter).  Ranges or  lists              of names are not allowed.               The  ``sixth''  field (the rest of the line) specifies the              command to be run.  The  entire  command  portion  of  the              line,  up to a newline or % character, will be executed by              /bin/sh or by the shell specified in the SHELL variable of              the  cronfile.   Percent-signs  (%) in the command, unless              escaped with backslash (\), will be changed  into  newline              characters, and all data after the first % will be sent to              the command as standard input.               Note: The day of a command's execution can be specified by              two  fields  --  day  of  month, and day of week.  If both              fields are restricted (ie, aren't *), the command will  be              run when either field matches the current time.  For exam-              ple,              ``30 4 1,15 * 5'' would cause a command to be run at  4:30              am on the 1st and 15th of each month, plus every Friday.        EXAMPLE CRON FILE              # use /bin/sh to run commands, no matter what /etc/passwd says              SHELL=/bin/sh              # mail any output to `paul', no matter whose crontab this is              MAILTO=paul              #              # run five minutes after midnight, every day              5 0 * * *       $HOME/bin/daily.job >> $HOME/tmp/out 2>&1              # run at 2:15pm on the first of every month -- output mailed to paul              15 14 1 * *     $HOME/bin/monthly              # run at 10 pm on weekdays, annoy Joe              0 22 * * 1-5   mail -s ""It's 10pm"" joe%Joe,%%Where are your kids?%              23 0-23/2 * * * echo ""run 23 minutes after midn, 2am, 4am ..., everyday""              5 4 * * sun     echo ""run at 5 after 4 every sunday""        SEE ALSO              cron(8), crontab(1)        EXTENSIONS              When  specifying day of week, both day 0 and day 7 will be              considered Sunday.  BSD and ATT  seem  to  disagree  about              this.               Lists  and  ranges  are  allowed  to  co-exist in the same              field.  ""1-3,7-9"" would be rejected by ATT or BSD cron  --              they want to see ""1-3"" or ""7,8,9"" ONLY.               Ranges  can  include  ""steps"",  so  ""1-9/2"" is the same as              ""1,3,5,7,9"".               Names of months or days of the week can  be  specified  by              name.               Environment  variables  can be set in the crontab.  In BSD              or ATT, the environment handed to child processes is basi-              cally the one from /etc/rc.               Command  output  is mailed to the crontab owner (BSD can't              do this), can be mailed to a person other than the crontab              owner  (SysV  can't do this), or the feature can be turned              off and no mail will be sent at all (SysV  can't  do  this              either).        AUTHOR              Paul Vixie <paul@vix.com>                                 24 January 1994                        1        --       crontab.org is maintained by Ilya Sukhar"	"null"	"null"	"Class library for parsing & formatting expressions as well as calculating occurrences of time based on a crontab schedule"	"true"
"Scheduling"	"QuartzNet"	"https://github.com/quartznet/quartznet"	"Quartz Enterprise Scheduler.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1373"	"186"	"467"	"GitHub - quartznet/quartznet: Quartz Enterprise Scheduler .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 186 Star 1,373 Fork 467 quartznet/quartznet Code Issues 59 Pull requests 9 Pulse Graphs Quartz Enterprise Scheduler .NET http://www.quartz-scheduler.net/ 895 commits 6 branches 16 releases 34 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.2.x features/quartz-scheduler-inheritance gh-pages master quartznet-3 revert-367-TaskAPISpike Nothing to show v2.3.3 v2.3.2 v2.3.1 v2.3 v2.2.4 v2.2.3 v2.2.2 v2.2.1 v2.2 v2.1.2 v2.1.1 v2.1.0 v2.0.1 v2.0.0 v2.0.0b2 v2.0.0b1 Nothing to show New pull request Latest commit d25a5fe Jun 5, 2016 lahma fixes #378 batch trigger acquisition logic to prevent early firing of… … … trigger Permalink Failed to load latest commit information. database fixes #184 add FirebirdDelegate, Firebird DDL script, update Firebird… Aug 3, 2014 doc add API documentation support using sandcastle Feb 2, 2014 lib/2.0 remove obsolete Anakia libs Nov 8, 2014 server fixes #273 QuartzServerFactory is not used Jul 8, 2015 src fixes #378 batch trigger acquisition logic to prevent early firing of… Jun 5, 2016 tools fix XMLSchedulingDataProcessorTest.TestRemoveJobTypeNotFound May 25, 2016 .gitattributes Add .gitattributes Aug 18, 2012 .gitignore #353 add misfire retrieval limits to other delegate types too, update… Apr 24, 2016 Build.cmd fix build issues as Barrier is .NET 4 only, add shorthand Build.cmd f… Jun 30, 2013 Quartz.2010.5.1.ReSharper Remove DateBuilder.IntervalUnit and use general IntervalUnit instead,… Dec 28, 2011 Quartz.2010.sln tweaking for easier mono testing Apr 26, 2014 Quartz.FxCop Fix crlf issues Dec 30, 2010 Quartz.Server.2010.sln QRTZNET-240: Simplify Quartz Server with Topshelf Jan 9, 2011 Quartz.build Using Oracle.ManagedDataAccess Mar 25, 2016 Quartz.nuspec fixes #226 upgrade to Common.Logging 3.0.0 Jan 14, 2015 changelog.txt 2.3.3 release preparations Jul 9, 2015 license.txt Fix crlf issues Dec 30, 2010 quartz.public.snk support building with public key file (public CI builds) Jan 17, 2015 readme.txt 2.3.3 release preparations Jul 9, 2015 readme.txt QUARTZ JOB SCHEDULER .NET, 2.3.3, Jul 9, 2015 -----------------------------------------------------------------  http://www.quartz-scheduler.net/  1. INTRODUCTION ----------------  This is the README file for Quartz.NET, .NET port of Java Quartz.  Quartz.NET is an opensource project aimed at creating a free-for-commercial use Job Scheduler, with 'enterprise' features.  Licensed under the Apache License, Version 2.0 (the ""License""); you may not  use this file except in compliance with the License. You may obtain a copy  of the License at        http://www.apache.org/licenses/LICENSE-2.0   Also, to keep the legal people happy:      This product includes software developed by the     Apache Software Foundation (http://www.apache.org/)   2. KNOWN ISSUES ---------------  No known issues at the moment.   3. RELEASE INFO ----------------  This release corresponds to Java Quartz version 2.2.  For API documentation, please refer to Quartz.NET site:      http://apidoc.quartz-scheduler.net/  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/quartznet/quartznet"	"Quartz Enterprise Scheduler.NET"	"true"
"SDK and API Clients"	"AWS SDK"	"https://github.com/aws/aws-sdk-net"	"The AWS SDK for.NET enables.NET developers to easily work with Amazon Web Services"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"449"	"154"	"240"	"GitHub - aws/aws-sdk-net: Official mirror of the AWS SDK for .NET. For more information on the AWS SDK for .NET, see our web site: Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 154 Star 449 Fork 240 aws/aws-sdk-net Code Issues 48 Pull requests 7 Pulse Graphs Official mirror of the AWS SDK for .NET. For more information on the AWS SDK for .NET, see our web site: http://aws.amazon.com/sdkfornet/ 1,462 commits 9 branches 249 releases 26 contributors C# 100.0% HTML 0.0% PowerShell 0.0% CSS 0.0% JavaScript 0.0% XSLT 0.0% C# HTML PowerShell CSS JavaScript XSLT Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags aws-sdk-net-v1 aws-sdk-net-v2 dnxcore-development master modularization netcore-development resourceAPI-preview unityv3 v2-preview Nothing to show v3.0.0.0-preview nuget-release-2015-05-15-00-19 3.1.84.0 3.1.83.0 3.1.82.0 3.1.81.0 3.1.80.0 3.1.79.0 3.1.78.0 3.1.77.0 3.1.76.0 3.1.75.1 3.1.75.0 3.1.74.0 3.1.73.0 3.1.72.0 3.1.71.1 3.1.71.0 3.1.70.0 3.1.69.0 3.1.68.0 3.1.67.0 3.1.66.0 3.1.65.0 3.1.64.0 3.1.63.0 3.1.62.0 3.1.61.0 3.1.60.2 3.1.60.1 3.1.60.0 3.1.59.0 3.1.58.0 3.1.57.0 3.1.56.0 3.1.55.0 3.1.54.0 3.1.53.0 3.1.52.0 3.1.51.0 3.1.50.0 3.1.49.0 3.1.48.0 3.1.47.1 3.1.47.0 3.1.46.0 3.1.45.0 3.1.44.1 3.1.44.0 3.1.43.0 3.1.42.0 3.1.41.3 3.1.41.2 3.1.41.1 3.1.41.0 3.1.40.0 3.1.39.0 3.1.38.0 3.1.37.0 3.1.36.1 3.1.36.0 3.1.35.1 3.1.35.0 3.1.34.0 3.1.33.0 3.1.32.1 3.1.32.0 3.1.31.0 3.1.30.0 3.1.29.1 3.1.29.0 3.1.28.1 3.1.28.0 3.1.27.0 3.1.26.1 3.1.26.0 3.1.25.0 3.1.24.0 3.1.23.3 3.1.23.2 3.1.23.1 3.1.23.0 3.1.22.0 3.1.21.0 3.1.20.1 3.1.19.1 3.1.19.0 3.1.18.0 3.1.17.1 3.1.17.0 3.1.16.0 3.1.15.0 3.1.14.1 3.1.14.0 3.1.13.0 3.1.12.0 3.1.11.0 3.1.10.0 3.1.9.0 3.1.8.0 Nothing to show New pull request Latest commit 13582b7 Jul 13, 2016 normj Commit version number update changes Permalink Failed to load latest commit information. buildtools Added 'nuget restore TestAnalyzer.sln' to build.proj Jun 29, 2016 docgenerator Merge branch 'docgeneration-bug' Jul 12, 2016 generator Commit version number update changes Jul 13, 2016 sdk Commit version number update changes Jul 13, 2016 .gitignore Updated .gitignore and deleted unity test DLLs and Xamarin component … Feb 23, 2016 .travis.yml Update .travis.yml Jan 27, 2016 FEATURE_REQUESTS.md Update FEATURE_REQUESTS.md Mar 22, 2016 License.AMAZON.txt updated license file for Dual License Jan 18, 2016 License.APACHE.txt updated license file for Dual License Jan 19, 2016 License.txt updated license file for Dual License Jan 19, 2016 Notice.txt updated notice file Nov 13, 2015 README.md Added support for AWS Service Catalog. This service allows organizati… Jul 7, 2016 SDK.CHANGELOG.md Commit version number update changes Jul 13, 2016 Unity.README.md Merge from GitHub master Mar 24, 2016 README.md AWS SDK for .NET The AWS SDK for .NET enables .NET developers to easily work with Amazon Web Services and build scalable solutions with Amazon S3, Amazon DynamoDB, Amazon Glacier, and more. API Docs AWS .NET Developer Blog SDK Homepage Forum GitHub Issues SDK Samples SDK Change Log The change log for the SDK can be found in the SDK.CHANGELOG.md file. Looking for Version 2? In anticipation of the GA release for version 3 we have merged it to master. We did this before GA to signify that version 3 is ready for production use and to help us with some of the final release and build automation tasks we are working on. To find the current version 2 source checkout the version 2 branch. Modularization With version 3 of the AWS SDK for .NET the SDK has been modularized. This means a separate NuGet package is created for each service as well as a core project. To use this branch compile the solution in the sdk folder that matches the desired platform and then include the assemblies for the services needed as well as the core assembly. Portable Class Library This release of the AWS SDK for .NET adds support for Portable Class Library projects, which allow you to target multiple platforms including Windows Store, Windows Phone, and Xamarin on iOS and Android. More information on this can be found here. Unity Support This release of AWS SDK for .NET adds support for generating Assemblies for Unity. More information can be found here Silverlight support Due to Silverlight HTTP Caching, AWS SDK for .NET is not fully supported on Silverlight-based platforms such as Windows Phone 8.0. Some HTTP GET calls (such as S3's ListBuckets or ListObjects) will return the same results when called multiple times. Tests Important: Do not run the integration tests on a production account. Integration tests can be found in the AWSSDK.IntegrationTests project. These test assume that a default profile has been configured for credentials. For information about setting up a default profile read the Developer Guide. The tests are designed to create and delete the resources needed for testing but it is important to keep your data safe. Do not run these tests on accounts that contain production data or resources. Since AWS resources are created and deleted during the running of these tests, charges can occur. To reduce charges occurred by running the tests the test focus on AWS resources that have minimal cost. Unit tests can be found in the AWSSDK.UnitTests project. NuGet Packages AWSSDK.APIGateway Amazon API Gateway helps developers deliver robust, secure and scalable mobile and web application backends. Amazon API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS. AWSSDK.ApplicationAutoScaling Application Auto Scaling is a general purpose Auto Scaling service for supported elastic AWS resources. With Application Auto Scaling, you can automatically scale your AWS resources, with an experience similar to that of Amazon EC2 Auto Scaling. AWSSDK.ApplicationDiscoveryService AWS Application Discovery Service helps Systems Integrators quickly and reliably plan application migration projects by automatically identifying applications running in your data center, their associated dependencies, and their performance profile. AWSSDK.AutoScaling Auto Scaling helps you maintain application availability and allows you to scale your capacity up or down automatically according to conditions you define. AWSSDK.AWSMarketplaceCommerceAnalytics The AWS Marketplace Commerce Analytics service allows marketplace partners to programmatically request business intelligence data from AWS Marketplace. This service provides the same data that was previously only available through the AWS Marketplace Management Portal, but offers the data in a fully-machine-readable format and available in fine-grained data sets rather than large reports. AWSSDK.AWSMarketplaceMetering The AWS Marketplace Metering Service enables sellers to price their products along new pricing dimensions. After a integrating their product with the AWS Marketplace Metering Service, that product will emit an hourly record capturing the usage of any single pricing dimension. Buyers can easily subscribe to software priced by this new dimension on the AWS Marketplace website and only pay for what they use. AWSSDK.AWSSupport The AWS Support API provides methods for creating and managing AWS Support cases and for retrieving the results of AWS Trusted Advisor checks. AWSSDK.CertificateManager AWS Certificate Manager (ACM) is an AWS service that makes it easier for you to deploy secure SSL based websites and applications on the AWS platform. AWSSDK.CloudFormation AWS CloudFormation gives developers and systems administrators an easy way to create and manage a collection of related AWS resources, provisioning and updating them in an orderly and predictable fashion. AWSSDK.CloudFront Amazon CloudFront is a content delivery web service. It integrates with other Amazon Web Services products to give developers and businesses an easy way to distribute content to end users with low latency, high data transfer speeds, and no minimum usage commitments. AWSSDK.CloudHSM The AWS CloudHSM service helps you meet corporate, contractual and regulatory compliance requirements for data security by using dedicated Hardware Security Module (HSM) appliances within the AWS cloud. With CloudHSM, you control the encryption keys and cryptographic operations performed by the HSM. AWSSDK.CloudSearch Amazon CloudSearch is a managed service in the AWS Cloud that makes it simple and cost-effective to set up, manage, and scale a search solution for your website or application. AWSSDK.CloudSearchDomain Amazon CloudSearch is a managed service in the AWS Cloud that makes it simple and cost-effective to set up, manage, and scale a search solution for your website or application. AWSSDK.CloudTrail AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. AWSSDK.CloudWatch Amazon CloudWatch is a monitoring service for AWS cloud resources and the applications you run on AWS. You can use Amazon CloudWatch to collect and track metrics, collect and monitor log files, and set alarms. AWSSDK.CloudWatchEvents Amazon CloudWatch Events helps you to respond to state changes in your AWS resources. When your resources change state they automatically send events into an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a pre-determined schedule. AWSSDK.CloudWatchLogs Amazon CloudWatch is a monitoring service for AWS cloud resources and the applications you run on AWS. You can use Amazon CloudWatch to collect and track metrics, collect and monitor log files, and set alarms. AWSSDK.CodeCommit AWS CodeCommit is a fully-managed source control service that makes it easy for companies to host secure and highly scalable private Git repositories. AWSSDK.CodeDeploy AWS CodeDeploy is a service that automates code deployments. AWS CodeDeploy makes it easier for you to rapidly release new features, helps you avoid downtime during deployment, and handles the complexity of updating your applications. AWSSDK.CodePipeline AWS CodePipeline is a continuous delivery service for fast and reliable application updates. AWSSDK.CognitoIdentity Amazon Cognito is a service that makes it easy to save user data, such as app preferences or game state, in the AWS Cloud without writing any backend code or managing any infrastructure. With Amazon Cognito, you can focus on creating great app experiences instead of having to worry about building and managing a backend solution to handle identity management, network state, storage, and sync. AWSSDK.CognitoIdentityProvider You can create a user pool in Amazon Cognito Identity to manage directories and users. You can authenticate a user to obtain tokens related to user identity and access policies. This API reference provides information about user pools in Amazon Cognito Identity, which is a new capability that is available as a beta. AWSSDK.CognitoSync Amazon Cognito is a service that makes it easy to save user data, such as app preferences or game state, in the AWS Cloud without writing any backend code or managing any infrastructure. With Amazon Cognito, you can focus on creating great app experiences instead of having to worry about building and managing a backend solution to handle identity management, network state, storage, and sync. AWSSDK.ConfigService AWS Config is a fully managed service that provides you with an AWS resource inventory, configuration history, and configuration change notifications to enable security and governance. AWSSDK.DatabaseMigrationService AWS Database Migration Service (AWS DMS) can migrate your data to and from most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Aurora, MariaDB, and MySQL. The service supports homogeneous migrations such as Oracle to Oracle, and also heterogeneous migrations between different database platforms, such as Oracle to MySQL or MySQL to Amazon Aurora. AWSSDK.DataPipeline AWS Data Pipeline is a managed extract-transform-load (ETL) service that helps you reliably and cost-effectively move and process data across your on-premise data stores and AWS services. AWSSDK.DeviceFarm AWS Device Farm is an app testing service that enables you to test your Android and Fire OS apps on real, physical phones and tablets that are hosted by AWS. The service allows you to upload your own tests or use built-in, script-free compatibility tests. AWSSDK.DirectConnect AWS Direct Connect makes it easy to establish a dedicated network connection from your premises to AWS. Using AWS Direct Connect, you can establish private connectivity between AWS and your datacenter, office, or colocation environment, which in many cases can reduce your network costs, increase bandwidth throughput, and provide a more consistent network experience than Internet-based connections. AWSSDK.DirectoryService AWS Directory Service is a managed service that allows you to connect your AWS resources with an existing on-premises Microsoft Active Directory or to set up a new, stand-alone directory in the AWS Cloud. AWSSDK.DynamoDBv2 Amazon DynamoDB is a fast and flexible NoSQL database service for all applications that need consistent, single-digit millisecond latency at any scale. AWSSDK.EC2 Amazon Elastic Compute Cloud (Amazon EC2) is a web service that provides resizable compute capacity in the cloud. It is designed to make web-scale cloud computing easier for developers. AWSSDK.ECR Amazon EC2 Container Registry (Amazon ECR) is a managed AWS Docker registry service. Customers can use the familiar Docker CLI to push, pull, and manage images. AWSSDK.ECS Amazon EC2 Container Service is a highly scalable, high performance container management service that supports Docker containers and allows you to easily run distributed applications on a managed cluster of Amazon EC2 instances. AWSSDK.ElastiCache ElastiCache is a web service that makes it easy to deploy, operate, and scale an in-memory cache in the cloud. The service improves the performance of web applications by allowing you to retrieve information from fast, managed, in-memory caches, instead of relying entirely on slower disk-based databases. AWSSDK.ElasticBeanstalk AWS Elastic Beanstalk is an easy-to-use service for deploying and scaling web applications and services developed with Java, .NET, PHP, Node.js, Python, Ruby, Go, and Docker on familiar servers such as Apache, Nginx, Passenger, and IIS. AWSSDK.ElasticFileSystem Amazon Elastic File System (Amazon EFS) is a file storage service for Amazon Elastic Compute Cloud (Amazon EC2) instances. AWSSDK.ElasticLoadBalancing Elastic Load Balancing automatically distributes incoming application traffic across multiple compute instances in the cloud. AWSSDK.ElasticMapReduce Amazon Elastic MapReduce (Amazon EMR) is a web service that makes it easy to quickly and cost-effectively process vast amounts of data. AWSSDK.Elasticsearch Use the Amazon Elasticsearch configuration API to create, configure, and manage Elasticsearch domains. AWSSDK.ElasticTranscoder Amazon Elastic Transcoder is media transcoding in the cloud. It is designed to be a highly scalable, easy to use and a cost effective way for developers and businesses to convert (or 'transcode') media files from their source format into versions that will playback on devices like smartphones, tablets and PCs. AWSSDK.GameLift Amazon GameLift Service is a managed AWS service for developers who need a scalable, server-based solution for multiplayer games. AWSSDK.Glacier Amazon Glacier is a secure, durable, and extremely low-cost storage service for data archiving and online backup. AWSSDK.IdentityManagement AWS Identity and Access Management (IAM) enables you to securely control access to AWS services and resources for your users. Using IAM, you can create and manage AWS users and groups, and use permissions to allow and deny their access to AWS resources. AWSSDK.ImportExport AWS Import/Export accelerates moving large amounts of data into and out of the AWS cloud using portable storage devices for transport. AWSSDK.Inspector Amazon Inspector identifies security issues in your application deployments. AWSSDK.IoT AWS IoT allows you to leverage AWS to build your Internet of Things. AWSSDK.IotData AWS IoT-Data enables secure, bi-directional communication between Internet-connected things (such as sensors, actuators, embedded devices, or smart appliances) and the AWS cloud. It implements a broker for applications and things to publish messages over HTTP (Publish) and retrieve, update, and delete thing shadows. A thing shadow is a persistent representation of your things and their state in the AWS cloud. AWSSDK.KeyManagementService AWS Key Management Service (KMS) is a managed service that makes it easy for you to create and control the encryption keys used to encrypt your data, and uses Hardware Security Modules (HSMs) to protect the security of your keys. AWSSDK.Kinesis Amazon Kinesis is a fully managed, cloud-based service for real-time processing of large, distributed data streams. AWSSDK.KinesisFirehose Amazon Kinesis Firehose is a fully managed service for ingesting data streams directly into AWS data services such as Amazon S3 and Amazon Redshift. AWSSDK.Lambda AWS Lambda is a compute service that runs your code in response to events and automatically manages the compute resources for you, making it easy to build applications that respond quickly to new information. AWSSDK.MachineLearning Amazon Machine Learning is a service that makes it easy for developers of all skill levels to use machine learning technology. AWSSDK.MobileAnalytics Amazon Mobile Analytics is a service that lets you simply and cost effectively collect and analyze your application usage data. In addition to providing usage summary charts that are available for quick reference, Amazon Mobile Analytics enables you to set up automatic export of your data to Amazon S3 for use with other data analytics tools such as Amazon Redshift, Amazon Elastic MapReduce (EMR), Extract, Transform and Load (ETL) software, or your own data warehouse. AWSSDK.OpsWorks AWS OpsWorks is an application management service that makes it easy to deploy and operate applications of all shapes and sizes. You can define the application's architecture and the specification of each component including package installation, software configuration and resources such as storage. AWSSDK.RDS Amazon Relational Database Service (Amazon RDS) is a web service that makes it easy to set up, operate, and scale a relational database in the cloud. It provides cost-efficient and resizable capacity while managing time-consuming database management tasks, freeing you up to focus on your applications and business. AWSSDK.Redshift Amazon Redshift is a fast, fully managed, petabyte-scale data warehouse solution that makes it simple and cost-effective to efficiently analyze all your data using your existing business intelligence tools. AWSSDK.Route53 Amazon Route 53 is a highly available and scalable cloud Domain Name System (DNS) web service. AWSSDK.Route53Domains Amazon Route 53 is a highly available and scalable cloud Domain Name System (DNS) web service. AWSSDK.S3 Amazon Simple Storage Service (Amazon S3), provides developers and IT teams with secure, durable, highly-scalable object storage. AWSSDK.SecurityToken The AWS Security Token Service (AWS STS) enables you to provide trusted users with temporary credentials that provide controlled access to your AWS resources. AWSSDK.ServiceCatalog AWS Service Catalog allows organizations to create and manage catalogs of IT services that are approved for use on AWS. AWSSDK.SimpleDB Amazon SimpleDB is a highly available, scalable, and flexible non-relational data store that enables you to store and query data items using web services requests. AWSSDK.SimpleEmail Amazon SES is an outbound-only email-sending service that provides an easy, cost-effective way for you to send email. AWSSDK.SimpleNotificationService Amazon Simple Notification Service (Amazon SNS) is a fast, flexible, fully managed push messaging service. Amazon SNS makes it simple and cost-effective to push notifications to Apple, Google, Fire OS, and Windows devices, as well as Android devices in China with Baidu Cloud Push. You can also use SNS to push notifications to internet connected smart devices, as well as other distributed services. AWSSDK.SimpleSystemsManagement Amazon EC2 Simple Systems Manager (SSM) enables you to manage a number of administrative and configuration tasks on your instances. AWSSDK.SimpleWorkflow Amazon SWF helps developers build, run, and scale background jobs that have parallel or sequential steps. You can think of Amazon SWF as a fully-managed state tracker and task coordinator in the Cloud. AWSSDK.SQS Amazon Simple Queue Service (SQS) is a fast, reliable, scalable, fully managed message queuing service. SQS makes it simple and cost-effective to decouple the components of a cloud application. AWSSDK.StorageGateway The AWS Storage Gateway is a service connecting an on-premises software appliance with cloud-based storage to provide seamless and secure integration between an organization's on-premises IT environment and AWS's storage infrastructure. AWSSDK.WAF AWS WAF (Web Application Firewall) protects web applications from attack by allowing customers to block bad actors and provides filters against common web exploits like SQL injection. AWSSDK.WorkSpaces Amazon WorkSpaces is a managed desktop computing service in the cloud. Code Generator All low-level service clients are created using the code generator found in the generator folder. The code generator uses the service models defined in the generator\ServiceModels folder. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aws/aws-sdk-net"	"The AWS SDK for.NET enables.NET developers to easily work with Amazon Web Services"	"true"
"SDK and API Clients"	"Azure PowerShell"	"https://github.com/Azure/azure-powershell"	"A set of PowerShell cmdlets for developers and administrators to develop, deploy and manage Microsoft Azure applications"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"503"	"475"	"476"	"GitHub - Azure/azure-powershell: Microsoft Azure PowerShell Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 475 Star 503 Fork 476 Azure/azure-powershell Code Issues 413 Pull requests 10 Wiki Pulse Graphs Microsoft Azure PowerShell 11,249 commits 6 branches 82 releases 228 contributors C# 90.3% PowerShell 9.7% Batchfile 0.0% XSLT 0.0% JavaScript 0.0% HTML 0.0% C# PowerShell Batchfile XSLT JavaScript HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags clu dev hotfix master release-1.2.4 update-tags Nothing to show v1.6.0-July2016 v1.5.1-June2016 v1.5.0-June2016 v1.4.0-May2016 v1.3.2-April2016 v1.3.0-March2016 v.1.2.6-AzureRM.Compute v.1.2.3-AzureRM.Compute v1.2.2-March2016 v1.2.1-February2016 v1.2.0-February2016 v1.1.0-January2016 v1.0.2-December2015 v1.0.1-November2015 v1.0.0-preview2-October2015 v1.0.0-preview-gallery-October2015 v1.0.0-November2015 v0.9.8.1-October2015 v0.9.8-September2015 v0.9.7-August2015 v0.9.6-August2015 v0.9.5-July2015 v0.8.16-March2015 v0.8.15-March2015 v0.8.14-February2015 v0.8.13-January2015 v0.8.12-December2014 clu-2016012142 clu-20160301.85 clu-20160229.84 clu-20160228.83 clu-20160227.82 clu-20160226.81 clu-20160225.80 clu-20160224.79 clu-20160223.78 clu-20160222.77 clu-20160221.76 clu-20160220.75 clu-20160219.74 clu-20160218.73 clu-20160217.72 clu-20160216.71 clu-20160215.70 clu-20160214.69 clu-20160213.68 clu-20160212.67 clu-20160211.66 clu-20160210.65 clu-20160209.64 clu-20160208.63 clu-20160207.62 clu-20160206.61 clu-20160205.60 clu-20160204.59 clu-20160203.58 clu-20160202.57 clu-20160201.56 clu-20160131.55 clu-20160130.54 clu-20160129.53 clu-20160128.52 clu-20160127.51 clu-20160126.50 clu-20160125.49 clu-20160125.48 clu-20160125.47 clu-20160124.46 clu-20160123.45 clu-20160122.44 clu-20160121.43 clu-20160121 clu-20160120 AzureRMv1.1.0-Jan2016 AzureRMv1.0.4-December2015 AzureRM.SiteRecoveryv1.1.0-November2015 AzureRM.HDInsightv1.0.2-November2105 0.9.4-June2015 0.9.3-June2015 0.9.2-May2015 0.9.1-May2015 0.9.0-April2015 Nothing to show New pull request Latest commit 72a137d Jul 13, 2016 gandhiniraj committed with hovsepm Fix New and Set ResourceLock issue by using Scope level parameter set (… … …#2607)  * Fix the parameter set for New And Set Resource Lock cmdlet * Instead of using subscription level parameter set use scope level Permalink Failed to load latest commit information. setup Updated package and assembly versions for release 1.6.0 (#2557) Jul 5, 2016 src Fix New and Set ResourceLock issue by using Scope level parameter set (… Jul 13, 2016 tools Updated package and assembly versions for release 1.6.0 (#2557) Jul 5, 2016 .gitattributes initial commit Nov 18, 2014 .gitignore remove localfeed from gitignore Jun 20, 2016 AzurePowershell.Test.targets [RS Backup] Azure SQL workload support and new features in Azure VM w… Jul 1, 2016 CONTRIBUTING.md Resolved merge conflicts Mar 30, 2016 ChangeLog.md Azure PowerShell cmdlet changes for ShouldProcess, ShouldContinue, an… Jul 11, 2016 LICENSE.txt initial commit Nov 18, 2014 README.md Update README.md Jul 12, 2016 build.proj Update nuget and build infrastructure to accept CoreCLR RC2 packages Jun 14, 2016 packages.config Resolved merge conflicts Mar 30, 2016 README.md Microsoft Azure PowerShell This repository contains a set of PowerShell cmdlets for developers and administrators to develop, deploy and manage Microsoft Azure applications. For documentation on how to build and deploy applications to Microsoft Azure please see the Microsoft Azure Documentation Center. For comprehensive documentation on the developer cmdlets see How to install and configure Azure PowerShell. For comprehensive documentation on the full set of Microsoft Azure cmdlets see Microsoft Azure Management Center. Features Account management Login with Microsoft account, Organizational account, or Service Principal through Microsoft Azure Active Directory Save Credentials to disk with Save-AzureRmProfile and load saved credentials using Select-AzureRmProfile Environment Get the different out-of-box Microsoft Azure environments Add/Set/Remove customized environments (like your Azure Stack or Windows Azure Pack environments) Management and data plane cmdlets for Azure services in ARM and RDFE VM Storage Network App Service (Websites) SQL Database KeyVault Operational Insights Automation Batch Backup RecoveryServices and SiteRecovery Stream Analytics Traffic Manager DataFactories DNS HDInsight Express Route Scheduler StorSimple Redis Cache Windows Azure Pack Web Site: CRUD web site, deployment, configure and get log, start/stop/restart/show web site Service Bus: CRD namespace VM: CRUD VM, get OS disk, size profile and VM template, start/stop/restart/suspend/resume VM VNET: CRUD VNET and subnet. Cloud Service: CRUD cloud service. Windows Azure Stack Azure Stack Administration Storage Service Management For detail descriptions and examples of the cmdlets, type help azure to get all the cmdlets. help azurerm to get all the Azure Resource Manager (ARM) cmdlets. help <cmdlet name> to get the details of a specific cmdlet. Supported Environments Microsoft Azure Azure Stack Windows Azure Pack Microsoft Azure China Microsoft Azure US Government Installation Microsoft Web Platform Installer Install Microsoft Web Platform Installer. Open Microsoft Web Platform Installer and search for Microsoft Azure PowerShell. Install. You can also find the standalone installers for all the versions at Downloads PowerShell Gallery Install Windows Management Framework 5 with PowerShellGet cmdlets In an elevated PowerShell session, run Install-Module AzureRM Run Install-AzureRm To install RDFE cmdlets, run Install-Module Azure Source Code Download the source code from GitHub repo Follow the Microsoft Azure PowerShell Developer Guide Supported PowerShell Versions Windows Management Framework 3 Windows Management Framework 4 Windows Management Framework 5 Get Started In general, follow these steps to start using Microsoft Azure PowerShell Get yourself authenticated with Microsoft Azure. For details, please check out this article. Option 1: Login with your Microsoft account or Organizational account directly from PowerShell. Microsoft Azure Active Directory authentication is used in this case. No management certificate is needed. Starting from 1.0.0, you can use Add-AzureRmAccount -Credential to avoid the browser pop up for Organizational account. To use RDFE cmdlets, use Add-AzureAccount Use the cmdlets The first step can be different for different environment you are targeting. Following are detail instructions for each supported environment. Microsoft Azure If you use both mechanisms on the same subscription, Microsoft Azure Active Directory authentication always wins. If you want to go back to management certificate authentication, please use Remove-AzureAccount, which will remove the Microsoft Azure Active Directory information and bring management certificate authentication back in. Login directly from PowerShell (Microsoft Azure Active Directory authentication) # Pop up an embedded browser control for you to login Add-AzureRmAccount  # use the cmdlets to manage your services/applications New-AzureRmResourceGroup -Name myresourceGroup -Location ""West US"" Microsoft Azure China Add-AzureRmAccount -EnvironmentName AzureChinaCloud  # use the cmdlets to manage your services/applications New-AzureRmResourceGroup -Name myresourceGroup -Location ""China East"" Microsoft Azure US Government Add-AzureRmAccount -EnvironmentName AzureUSGovernment  # use the cmdlets to manage your services/applications New-AzureRmResourceGroup -Name myresourceGroup -Location ""US Gov Virginia"" Windows Azure Pack # Add your Windows Azure Pack environment to your Microsoft Azure PowerShell installation. # You will need to know the following information of your Windows Azure Pack environment. # 1. URL to download the publish settings file    Mandatory # 2. Management service endpoint                  Optional # 3. Management Portal URL                        Optional # 4. Storage service endpoint                     Optional Add-WAPackEnvironment -Name ""MyWAPackEnv"" `     -PublishSettingsFileUrl ""URL to download the publish settings file>"" `     -ServiceEndpoint ""<Management service endpoint>"" `     -ManagementPortalUrl ""<Storage service endpoint>"" `     -StorageEndpoint ""<Management Portal URL>""  # Download a file which contains the publish settings information of your subscription. # Use the -Environment parameter to target your Windows Azure Pack environment. # This will open a browser window and ask you to log in to get the file. Get-WAPackPublishSettingsFile -Environment ""MyWAPackEnv""  # Import the file you just downloaded. # Notice that the file contains credential of your subscription so you don't want to make it public # (like check in to source control, etc.). Import-WAPackPublishSettingsFile ""<file location>""  # Use the cmdlets to manage your services/applications New-WAPackWebsite -Name mywebsite Find Your Way All the cmdlets can be put into 3 categories: ARM management cmdlets use the 'AzureRm' prefix (New-AzureRmResourceGroup, Get-AzureRmVM) Legacy RDFE management cmdlets use the 'Azure' prefix (Get-AzureVM) Data plane cmdlets that work in ARM or RDFE use the 'Azure' prefix (Get-AzureBlob) You can use the following cmdlet to find out all the cmdlets for your environment # Return all the cmdlets for Azure Resource Manager (ARM) Get-Command *AzureRm* # Return all the cmdlets for Microsoft Azure Get-Command *Azure*  # Return all the cmdlets for Windows Azure Pack Get-Command *WAPack* If you want to migrate some scripts from Microsoft Azure to Windows Azure Pack or vice versa, as long as the cmdlets you are using are in category 1, you should be able to migrate smoothly. Need Help? Be sure to check out the Microsoft Azure Developer Forums on Stack Overflow if you have trouble with the provided code. Contribute Code or Provide Feedback If you would like to become an active contributor to this project please follow the instructions provided in Microsoft Azure Projects Contribution Guidelines. If you encounter any bugs with the library please file an issue in the Issues section of the project. Learn More Microsoft Azure Script Center This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Azure/azure-powershell"	"A set of PowerShell cmdlets for developers and administrators to develop, deploy and manage Microsoft Azure applications"	"true"
"SDK and API Clients"	"Octokit.NET"	"https://github.com/octokit/octokit.net"	"A GitHub API client library for.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1000"	"118"	"501"	"GitHub - octokit/octokit.net: A GitHub API client library for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 118 Star 1,000 Fork 501 octokit/octokit.net Code Issues 97 Pull requests 12 Pulse Graphs A GitHub API client library for .NET 4,372 commits 17 branches 44 releases 116 contributors C# 99.7% Other 0.3% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags api-paging-part-deux audit-api-changes auto-wireup-proxy await-audit cleanup-tests consolidate-types enterprise-probe-take-two enterprise-probe experimental-dnx-support http-client-define-interface http-client-milestone master new-authorization-api niik/support-etags-through-wininet shiftkey-code-of-conduct target-the-coreclr update-issues-client Nothing to show v0.20.0 v0.19.0 v0.18.0 v0.17.0 v0.16.0 v0.15.0 v0.14.0 v0.13.0 v0.12.0 v0.11.0 v0.10.0 v0.9.0 v0.8.0 v0.7.3 v0.7.2 v0.7.1 v0.7.0 v0.6.2 v0.6.1 v0.6.0 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.1 v0.4.0 v0.3.5 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.2 v0.2.1 v0.2.0 v0.1.9 v0.1.8 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit b47b054 Jul 14, 2016 shiftkey committed with ryangribble Fix #1406 searching repos with underscore in name (#1418) Permalink Failed to load latest commit information. Octokit.Reactive Merge pull request #1360 from dampir/add-repo-id-commit-status-client Jul 14, 2016 Octokit.Tests.Conventions add convention test to ensure all response models have a public param… Jul 5, 2016 Octokit.Tests.Integration Fix #1406 searching repos with underscore in name (#1418) Jul 15, 2016 Octokit.Tests Merge pull request #1360 from dampir/add-repo-id-commit-status-client Jul 14, 2016 Octokit Fix #1406 searching repos with underscore in name (#1418) Jul 14, 2016 docs add some examples to pagination docs (#1378) Jun 14, 2016 ext Add Xamarin component store versions of Octokit.Reactive Oct 30, 2013 packages cleanup packages folder Dec 20, 2015 samples/linqpad-samples Fixed reference of SignatureResponse Dec 9, 2015 script Made change in configure-integration-tests Mar 7, 2016 tools Fixes for mono Dec 11, 2015 .gitattributes putting this back, just in case Dec 11, 2014 .gitignore Merge branch 'master' into documentation Jan 27, 2016 .travis.yml lock to an earlier version of mono (#1376) Jun 14, 2016 CONTRIBUTING.md Fix a broken link Apr 7, 2016 CustomDictionary.xml Updated git data commit response with signature verification object (#… Jun 27, 2016 DEPLOYMENT.md Update DEPLOYMENT.md Mar 31, 2014 LICENSE.txt Adding README, CONTRIBUTING, LICENSE Jan 9, 2013 OVERVIEW.md extract OVERVIEW.md document which introduces the overall Octokit cod… Mar 14, 2016 Octokit-Mono.sln Fixes for mono Dec 12, 2015 Octokit-XamarinStudio.sln Add VS-style code formatting settings into Xam Studio sln Apr 30, 2014 Octokit.Reactive.nuspec The nuget package includes the samples Oct 5, 2015 Octokit.nuspec Merge pull request #921 from naveensrinivasan/samples Nov 4, 2015 Octokit.ruleset Creates constructors for all Models.Response. Jan 24, 2015 Octokit.sln Remove vestigial solution folder Dec 10, 2015 Octokit.sln.DotSettings oops, corrected the test Jun 5, 2015 Octokit.vssettings Added VS settings file that contains the current project coding conve… Apr 22, 2014 README.md Updated the ReadTheDocs link to .io (#1289) May 5, 2016 ReleaseNotes.md one last typo Jun 15, 2016 SolutionInfo.cs update FAKE.Core to latest version Jun 16, 2016 appveyor.yml corrected path to assets Dec 14, 2015 build.cmd update FAKE.Core to latest version Jun 16, 2016 build.fsx point to new issue Feb 2, 2016 build.sh bump FAKE to latest version Mar 16, 2016 mkdocs.yml added tests for new behaviour within pagination Feb 14, 2016 octokit-dotnet_2.png Changed the octokit logo to smaller size Oct 6, 2015 README.md Octokit - GitHub API Client Library for .NET Octokit is a client library targeting .NET 4.5 and above that provides an easy way to interact with the GitHub API. Usage examples Get public info on a specific user. var github = new GitHubClient(new ProductHeaderValue(""MyAmazingApp"")); var user = await github.User.Get(""half-ogre""); Console.WriteLine(user.Followers + "" folks love the half ogre!""); Supported Platforms .NET 4.5 (Desktop / Server) Xamarin.iOS / Xamarin.Android / Xamarin.Mac Mono 3.x Windows 8 / 8.1 Store Apps Getting Started Octokit is available on NuGet. Install-Package Octokit  or an IObservable based GitHub API client library for .NET using Reactive Extensions Install-Package Octokit.Reactive  Beta packages Unstable NuGet packages that track the master branch of this repository are available at https://ci.appveyor.com/nuget/octokit-net In Xamarin Studio you can find this option under the project's context menu: Add | Add Packages...*. Documentation Documentation is available at http://octokitnet.readthedocs.io/en/latest/. Build Octokit is a single assembly designed to be easy to deploy anywhere. If you prefer to compile it yourself, you’ll need: Visual Studio 2015 or Xamarin Studio Windows 8.1 or higher to build and test the WinRT projects To clone it locally click the ""Clone in Desktop"" button above or run the following git commands. git clone git@github.com:octokit/Octokit.net.git Octokit cd Octokit .\build.cmd  Contribute Visit the Contributor Guidelines for more details. Problems? Octokit is 100% certified to be bug free. If you find an issue with our certification, please visit the issue tracker and report the issue. Please be kind and search to see if the issue is already logged before creating a new one. If you're pressed for time, log it anyways. When creating an issue, clearly explain What you were trying to do. What you expected to happen. What actually happened. Steps to reproduce the problem. Also include any other information you think is relevant to reproduce the problem. Related Projects ScriptCs.OctoKit - a script pack to use Octokit in scriptcs ScriptCs.OctokitLibrary - a script library to use Octokit in scriptcs Copyright and License Copyright 2013 GitHub, Inc. Licensed under the MIT License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/octokit/octokit.net"	"A GitHub API client library for.NET"	"true"
"SDK and API Clients"	"DropNet"	"https://github.com/DropNet/DropNet"	"Client Library for the Dropbox API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"411"	"57"	"175"	"GitHub - DropNet/DropNet: Client Library for the Dropbox API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 57 Star 411 Fork 175 DropNet/DropNet Code Issues 26 Pull requests 1 Wiki Pulse Graphs Client Library for the Dropbox API http://dropnet.github.io/dropnet.html 210 commits 1 branch 0 releases 31 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 6b1d4a3 Apr 16, 2015 dkarzon updated readme with links and badge Permalink Failed to load latest commit information. DropNet.MonoTouch Updating MonoTouch solution to actually build Aug 5, 2013 DropNet.Tests Unified MetaData methods, added optional parameters 'hash', 'list' an… Mar 3, 2015 DropNet.WindowsPhone Updated Windows Phone library to 8.0 because RestSharp is only wp8 Mar 15, 2015 DropNet Make the proxy parameter optional for all constructors Mar 26, 2015 Lib Updated RestSharp to 105 Mar 14, 2015 .gitignore Cleaned up the interface and exceptions, removed packages, fixed up s… Jan 24, 2015 DropNet.sln Lets require Restsharp 105 then. Mar 15, 2015 DropNet.vsmdi First Commit... Login, AccountInfo, DeleteFile and GetMetaData are wo… May 21, 2010 LICENSE.txt Added LICENSE info. Mar 31, 2011 README.markdown updated readme with links and badge Apr 16, 2015 appveyor.yml Updated Windows Phone library to 8.0 because RestSharp is only wp8 Mar 15, 2015 README.markdown .NET Client library for the Dropbox API Full documentation here: http://dropnet.github.io/dropnet.html How do I use it? The Client: To use DropNet you need an instance of the DropNetClient class, this class does everything for DropNet. This class takes the API Key and API Secret (These must be obtained from Dropbox to access the API).     _client = new DropNetClient(""API KEY"", ""API SECRET""); Login/Tokens: Dropbox now requires a web authentication to get a usable token/secret, so this is a 3 step process. Step 1. Get Request Token - This step gets an oauth token from dropbox (NOTE: the token must pass the other steps before it can be used)     // Sync     _client.GetToken();      // Async     _client.GetTokenAsync((userLogin) =>         {             //Dont really need to do anything with userLogin, DropNet takes care of it for now         },         (error) =>         {             //Handle error         }); Step 2. Authorize App with Dropbox - This step involves sending the user to a login page on the dropbox site and having them authenticate there. The DropNet client has a function to return the url for you but the rest must be handled in app, this function also takes a callback url for redirecting the user to after they have logged in. (NOTE: The token still cant be used yet.)     var url = _client.BuildAuthorizeUrl();     //Use the url in a browser so the user can login Open a browser with the url returned by BuildAuthorizeUrl - After we have the authorize url we need to direct the user there (use some sort of browser here depending on the platform) and navigate the user to the url. This will prompt them to login and authorize your app with the API. Step 3. Get an Access Token from the Request Token - This is the last stage of the process, converting the oauth request token into a usable dropbox API token. This function will use the clients stored Request Token but this can be overloaded if you need to specify a token to use.     // Sync     var accessToken = _client.GetAccessToken(); //Store this token for ""remember me"" function      // Async     _client.GetAccessTokenAsync((accessToken) =>         {             //Store this token for ""remember me"" function         },         (error) =>         {             //Handle error         }); Best Practices: Dropbox's Developer page states several times in bold red font that applications should not store a users Dropbox password and to help enforce this DropNet allows you to manually set a users Token and Secret on the client.     _client = new DropNetClient(""API KEY"", ""API SECRET"", ""USER TOKEN"", ""USER SECRET"");     // OR     _client = new DropNetClient(""API KEY"", ""API SECRET"");     _client.UserLogin = new UserLogin { Token = ""USER TOKEN"", Secret = ""USER SECRET"" }; Questions? http://stackoverflow.com/questions/tagged/dropnet Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/DropNet/DropNet"	"Client Library for the Dropbox API"	"true"
"Search"	"Elasticsearch .NET"	"https://github.com/elastic/elasticsearch-net"	"Elasticsearch.Net & NEST"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1096"	"182"	"546"	"GitHub - elastic/elasticsearch-net: Elasticsearch.Net & NEST Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 182 Star 1,096 Fork 546 elastic/elasticsearch-net Code Issues 40 Pull requests 4 Wiki Pulse Graphs Elasticsearch.Net & NEST 4,822 commits 15 branches 75 releases 117 contributors C# 94.4% HTML 5.2% Other 0.4% C# HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x 2.x feature/aggs-metadata feature/bulk-helper feature/machine-api feature/profiling-benchmarkdotnet feature/profiling-nbench feature/profiling feature/xpack-watcher feature/2.x-emptystring-index fix/bulk-response-timings fix/master-get-mappings fix/reindex-helper fix/2163 master Nothing to show 5.0.0-alpha3 5.0.0-alpha2 5.0.0-alpha1 2.4.1 2.4.0 2.3.3 2.3.2 2.3.1 2.3.0 2.2.0 2.1.1 2.1.0 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 2.0.0-rc1 2.0.0-alpha2 2.0.0-alpha1 1.9.0 1.8.3 1.8.2 1.8.1 1.8.0 1.7.2 1.7.1 1.7.0 1.6.1 1.6.0 1.5.1 1.5.0 1.4.3 1.4.2 1.4.1 1.4.0 1.3.1 1.3.0 1.2.3 1.2.2 1.2.1 1.2.0 1.1.2 1.1.1 1.1.0 1.0.2 1.0.1 1.0.0 1.0.0-rc1 1.0.0-beta1 0.12.0.0 0.11.7.0 0.11.5.0 0.11.4.0 0.11.3.0 0.11.2.0 0.11.1.0 0.9.24.0 0.9.23.0 0.9.22.0 0.9.21.0 0.9.20.0 0.9.19.0 0.9.17.0 0.9.16.0 0.9.14.0 0.9.13.0 0.9.12.0 0.9.10.0 0.9.8.0 0.9.7.0 0.9.5.0 0.9.4.0 0.9.3.0 Nothing to show New pull request Latest commit 18c32cd Jul 14, 2016 Mpdreamz committed on GitHub Return of the reindex helper, this was partially removed in the alpha… … …s while we figured out how it interacted with the new reindex api's (#2160)  Fixed CountRequest for 5.0 alpha we now default to an explicit match_all query  pending elastic/elasticsearch#19422 Permalink Failed to load latest commit information. .paket add new nuget icon Jan 5, 2016 build Fix path to npm tooling Jul 11, 2016 docs Remove link to removed fielddata_fields page Jun 23, 2016 src Return of the reindex helper, this was partially removed in the alpha… Jul 14, 2016 .deployment Update new_docs -> docs everywhere Jul 22, 2014 .editorconfig added reproduce test to showcase #1906 Mar 14, 2016 .gitignore remove .vs folders and added them to ignore' Jul 13, 2016 .travis.yml doc gen changes Jan 15, 2016 NuGet.config Cherry pick changes from 2.x Apr 5, 2016 build.bat Updated build to only restore paket prior Apr 28, 2016 build.sh add new nuget icon Jan 5, 2016 contributing.md Update contributing guide to point master to 5.x Mar 30, 2016 issue_template.md Update issue_template.md Jul 7, 2016 license.txt moved from MIT to Apache2 license. Apr 7, 2014 paket.bat relying on paket.bootstrapper.exe and the new paket groups for build … Oct 12, 2015 paket.dependencies Update xunit dotnet runner to .NET core compatible version Jul 7, 2016 paket.lock Bump Bogus to 7.1.4 Jul 7, 2016 readme.md fix #1748 started a new blog post section in the readme Jul 13, 2016 readme.md Repository for both NEST and Elasticsearch.Net, the two official elasticsearch .NET clients. Compatibility Matrix Elasticsearch .NET clients Supported Build Status Myget Feed Nuget Feed 0.x 0.x ❌ ➖ ➖ ➖ 1.x 1.x ✅ 2.x 2.x ✅ 5.x 5.x ✅ Upgrading from 1.x to 2.x Take a look at the blog post for details around the evolution of NEST 2.x, in addition to the list of breaking changes for NEST and Elasticsearch.Net. NEST NEST is the official high-level .NET client of elasticsearch. It aims to be a solid, strongly typed client with a very concise API. High-level client that internally uses the low-level Elasticsearch.Net client Maps requests and responses to strongly typed objects with a fluent interface and object initializer syntax to build them Comes with a very powerful query DSL that maps one-to-one with Elasticsearch Takes advantage of .NET features where they make sense (i.e., covariant IEnumerable<T> result types, type and index inference) All calls have async variants Getting Started Installing From the package manager console: PM> Install-Package NEST  or by simply searching for NEST in the package manager UI. Connecting You can connect to your Elasticsearch cluster via a single node, or by specifying multiple nodes using a connection pool. Using a connection pool has a few advantages over a single node connection, such as load balancing and cluster fail over support. Connecting to a single node var node = new Uri(""http://myserver:9200""); var settings = new ConnectionSettings(node); var client = new ElasticClient(settings); Using a connection pool var nodes = new Uri[] {     new Uri(""http://myserver1:9200""),     new Uri(""http://myserver2:9200""),     new Uri(""http://myserver3:9200"") };  var pool = new StaticConnectionPool(nodes); var settings = new ConnectionSettings(pool); var client = new ElasticClient(settings); Indexing Indexing a document is as simple as: var tweet = new Tweet {     Id = 1,     User = ""kimchy"",     PostDate = new DateTime(2009, 11, 15),     Message = ""Trying out NEST, so far so good?"" };  var response = client.Index(tweet, idx => idx.Index(""mytweetindex"")); //or specify index via settings.DefaultIndex(""mytweetindex""); All the calls have async variants: var response = client.IndexAsync(tweet, idx => idx.Index(""mytweetindex"")); // returns a Task<IndexResponse> Getting a document var response = client.Get<Tweet>(1, idx => idx.Index(""mytweetindex"")); // returns an IGetResponse mapped 1-to-1 with the Elasticsearch JSON response var tweet = response.Source; // the original document Searching for documents NEST exposes a fluent interface and a powerful query DSL var response = client.Search<Tweet>(s => s     .From(0)     .Size(10)     .Query(q =>             q.Term(t => t.User, ""kimchy"")             || q.Match(mq => mq.Field(f => f.User).Query(""nest""))         )     ); As well as an object initializer syntax if lambdas aren't your thing: var request = new SearchRequest {     From = 0,     Size = 10,     Query = new TermQuery { Field = ""user"", Value = ""kimchy"" }          || new MatchQuery { Field = ""description"", Query = ""nest"" } };  var response = client.Search<Tweet>(request); Falling back to Elasticsearch.Net NEST also includes and exposes the low-level Elasticsearch.Net client that you can fall back to incase anything is missing: //.LowLevel is of type IElasticLowLevelClient var response = client.LowLevel.SearchPost(""myindex"",""elasticsearchprojects"", new {     from = 0,     size = 10,     fields = new [] {""id"", ""name""},     query = new {         term = new {             name = new {                 value= ""NEST"",                 boost = 2.0             }         }     } }); Read the full documentation here Elasticsearch.Net A low-level, dependency free, client that has no opinions how you build and represent your requests and responses. Low-level client that provides a one-to-one mapping with the Elasticsearch REST API No dependencies Almost completely generated from the official REST API spec which makes it easy to keep up to date Comes with an integration test suite that can be generated from the YAML test definitions that the Elasticsearch core team uses to test their REST API Has no opinions on how you create or consume requests and responses Load balancing and cluster failover support All calls have async variants Installing From the package manager console: PM> Install-Package Elasticsearch.Net  or by searching for Elastcsearch.Net in the package manager UI. Connecting Connecting using the low-level client is very similar to how you would connect using NEST. In fact, the connection constructs that NEST use are actually Elasticsearch.Net constructs. Thus, single node connections and connection pooling still apply when using Elasticsearch.Net. var node = new Uri(""http://myserver:9200""); var config = new ConnectionConfiguration(node); var client = new ElasticLowLevelClient(config); Note the main difference here is that we are instantiating an ElasticLowLevelClient rather than ElasticClient, and ConnectionConfiguration instead of ConnectionSettings. Calling an API endpoint Elasticsearch.Net is generated from the the official REST specification, and thus maps to all Elasticsearch API endpoints. client.GetSource(""myindex"",""mytype"",""1"",qs=>qs     .Routing(""routingvalue"") ); will execute a GET to /myindex/mytype/1/_source?routing=routingvalue. All the methods and arguments are fully documented based on the documentation of the specification. As you can see, Elasticsearch.Net also strongly types the query string parameters that it knows exist on an endpoint with full Intellisense documentation. However, unknown query string parameters can still be added: client.GetSource(""myindex"",""mytype"",""1"",qs=>qs     .Routing(""routingvalue"")     .Add(""key"",""value"") ); The query string parameter is always optional. Providing a request body You can specify a request body directly with a string: var myJson = @""{ """"hello"""" : """"world"""" }""; client.Index(""myindex"",""mytype"",""1"", myJson); This will execute a POST to /myindex/mytype/1 with the provided string myJson passed verbatim as the request body. Alternatively, you can specify an anonymous object: var myJson = new { hello = ""world"" }; client.Index(""myindex"",""mytype"",""1"", myJson); This will execute the same request, but this time myJson will be serialized by the registered ISerializer. Contributing Pull requests and issues are very much welcomed and appreciated. If you'd like to report a bug or submit a feature/bug fix then please read our contributing guide first! Blog posts Starting this section (2016) to list blogposts from our users that might be super helpful in your journey to learn Elasticsearch from a .NET perspective Read how buildclassifieds are using ElasticSearch with ServiceStack (.NET) in helping build a Classifieds Site. Many thanks to: Q42 for supporting the development of NEST redgate for supplying @Mpdreamz with an ANTS Memory Profiler 8 & ANTS Performance Profiler 8 licenses jetBrains for supplying @Mpdreamz with a dotTrace profiler and Resharper license CodeBetter for hosting the continuous integration for NEST Everyone who has been awesome enough to contribute back to NEST (You're listed automatically on the documentation page) Copyright and License This software is Copyright (c) 2014-2015 by Elasticsearch BV. This is free software, licensed under: The Apache License Version 2.0. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/elastic/elasticsearch-net"	"Elasticsearch.Net & NEST"	"true"
"Search"	"PlainElastic.Net"	"https://github.com/Yegoroff/PlainElastic.Net"	"Plain.Net client for ElasticSearch"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"98"	"28"	"62"	"GitHub - Yegoroff/PlainElastic.Net: Plain .Net client for ElasticSearch Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 98 Fork 62 Yegoroff/PlainElastic.Net Code Issues 10 Pull requests 2 Pulse Graphs Plain .Net client for ElasticSearch 492 commits 1 branch 1 release 10 contributors C# 99.9% Batchfile 0.1% C# Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.48/es0.90 Nothing to show New pull request Latest commit fb50c18 May 10, 2016 Yegoroff Merge pull request #99 from benfranklin79/master … version 1.1.55 Permalink Failed to load latest commit information. NuGet version 1.1.55 May 10, 2016 packages updated package dependencies Dec 12, 2014 src version 1.1.55 May 10, 2016 tools/T4Generators Fixed type members order in IndexSettings builders. May 25, 2012 .gitattributes Fixed EOL issues Jan 29, 2013 .gitignore remove WeightFunction class, since it duplicates FucntionScoreQuery.W… Dec 12, 2014 LICENSE.txt Fixed EOL issues Jan 29, 2013 NuGet Publish.bat version 1.1.55 May 10, 2016 NuGet.bat version 1.1.50 Dec 17, 2014 PlainElastic.Net.sln Cleanup after merging RangeFacet pull request Jan 29, 2013 ReadMe.md Update ReadMe.md Apr 11, 2014 ReadMe.md PlainElastic.Net The really plain Elastic Search .Net client. Idea Installation How its works Concepts Command building Indexing Bulk operations Queries Condition less queries Facets Highlighting Scrolling Mapping Index Settings If something is missed Samples License Plain Idea Usually connectivity clients built using BLACK BOX principle: there is a client interface and some unknown magic behind it. (call of the client method internally generate some commands and queries to external system, get responses, somehow process them and then retrieve result to user) As the result user hardly can debug connectivity issues or extend client functional with missed features. The main Idea of PlainElastic.Net is to be a GLASS BOX. e.g. provide a full control over connectivity process to user. Installation NuGet support You can find PlainElastic.Net in NuGet Gallery or just install it using VS NuGet Packages Manager. Or just type Install-Package PlainElastic.Net in Package Manager Console. Building from Source The easiest way to build PlainElastic.Net from source is to clone the git repository on GitHub and build the PlainElastic.Net solution. git clone git://github.com/Yegoroff/PlainElastic.Net.git The solution file PlainElastic.Net.sln is located in the root of the repo. How Its works 1) The only thing you need to connect to ES is a HTTP connection.   var connection  = new ElasticConnection(); 2) Than you can declare sting with ES command   string command = ""http://localhost:9200/twitter/user/test""; 3) And JSON string with data   string jsonData = ""{ \""name\"": \""Some Name\"" }""; 4) And pass them using connection to ES.   string response = connection.Put(command, jsonData); 5) Get JSON string response and analyze it.   if(response.Contains(""\""ok\"":true"")) {    ... // do something useful   } So, how PlainElastic can help you here?   // 1. It provides ES HTTP connection   var connection  = new ElasticConnection(""localhost"", 9200);    // 2. And sophisticated ES command builders:   string command = Commands.Index(index: ""twitter"", type: ""user"", id: test)    // 3. And gives you the ability to serialize your objects to JSON:     var serializer = new JsonNetSerializer();   var tweet = new Tweet { Name = ""Some Name"" };   string jsonData = serializer.ToJson(tweet);    // 4. Then you can use appropriate HTTP verb to execute ES command:   string response = connection.Put(command, jsonData);    // 5. And then you can deserialize operation response to typed object to easily analyze it:   IndexResult indexResult = serializer.ToIndexResult(result);   if(indexResult.ok) {      ... // do something useful.   }    // 6. And even more: Typed mapping and condition-less query builders. Concepts No addition abstraction upon native Elastic Search query and mapping syntax. This eliminates requirements to read both ES and driver's manuals, and also it allows you not to guess how driver will generate actual ES query when you construct it using driver's Query DSL. So if you want to apply some ES query - all you need is to read ES Query DSL documentation All you need is strings. Let's take some ES query sample in a format that you will see in ES documentation: $ curl -XGET http://localhost:9200/twitter/tweet/_search -d '{      ""query"" : {          ""term"" : { ""User"": ""somebody"" }      } }'  In PlainElastic.Net this could be done using: var connection  = new ElasticConnection(""localhost"", 9200); string command = new SearchCommand(""twitter"", ""tweet""); // This will generate: twitter/tweet/_search string query = new QueryBuilder<Tweet>()        // This will generate:            .Query(q => q                         // { ""query"": { ""term"": { ""User"": ""somebody"" } } }             .Term(t => t               .Field(tweet=> tweet.User).Value(""somebody"")             )           ).Build(); string result = connection.Get( command, query);  // Than we can convert search results to typed results var serializer = new JsonNetSerializer(); var foundTweets = serializer.ToSearchResults<Tweet>(result); foreach (Tweet tweet in  foundTweets.Documents) {   ... } As you can see all parameters passed to and returned from Get HTTP verb execution are just strings. This gives us complete control over generated commands and queries. You can copy/paste and debug them in any ES tool that allows to execute JSON queries (e.g. CURL or ElasticHead ). Command building PlainElastic.Net commands represent URL part of ElasticSearch requests. All commands have corresponding links to ES documentation in their XML comments, so you can use these links to access detailed command description. Most of the commands have Index ,Type and Id constructor parameters, (these parameters forms address part) all other options could be set using fluent builder interface. string indexCommand = new IndexCommand(index: ""twitter"", type: ""tweet"", id: ""10"")                .Routing(""route_value"")                .Refresh(); There is also a Commands class that represents a command registry and allows you to easily build commands, without necessity to remember command class name. string searchCommand = Commands.Index(index: ""twitter"", type: ""tweet"", id: ""10"")                .Routing(""route_value"")                .Refresh(); Indexing ES documentation: http://www.elasticsearch.org/guide/reference/api/index_.html The easiest way to index document is to serialize your document object to JSON and pass it to PUT index command: var connection  = new ElasticConnection(""localhost"", 9200); var serializer = new JsonNetSerializer();  var tweet = new Tweet { User = ""testUser"" }; string tweetJson = serializer.ToJson(tweet);  string result = connection.Put(new IndexCommand(""twitter"", ""tweet"", id: ""10""), tweetJson);  // Convert result to typed index result object.  var indexResult = serializer.ToIndexResult(result); Note: You can specify additional indexing parameters such as Parent or Refresh in IndexCommand builder. string indexCommand = new IndexCommand(""twitter"", ""tweet"", id: ""10"").Parent(""5"").Refresh(); Bulk Operations ES documentation: http://www.elasticsearch.org/guide/reference/api/bulk.html There are two options to build Bulk operations JSONs. First is to build all Bulk operations at once: IEnumerable<Tweet> tweets = new List<Tweet>();  string bulkCommand = new BulkCommand(index: ""twitter"", type: ""tweet"");  string bulkJson =      new BulkBuilder(serializer)        .BuildCollection(tweets,             (builder, tweet) => builder.Index(data: tweet,  id: tweet.Id)                        // You can apply any custom logic here                        // to generate Indexes, Creates or Deletes. );  string result = connection.Post(bulkCommand, bulkJson);  //Parse bulk result; BulkResult bulkResult = serializer.ToBulkResult(result); ... Second allows you to build Bulk operations in batches of desired size. This will prevent from constructing huge in-memory strings, and allows to process input collection on-the-fly, without enumerating them to the end. IEnumerable<Tweet> tweets = new List<Tweet>();  string bulkCommand = new BulkCommand(index: ""twitter"", type: ""tweet"");  IEnumerable<string> bulkJsons =      new BulkBuilder(serializer)         .PipelineCollection(tweets,             (builder, tweet) => builder.Index(data: tweet,  id: myObject.Id))         .JoinInBatches(batchSize: 10); // returns deferred IEnumerable of JSONs                               // with at most 10 bulk operations in each element,                             // this will allow to process input elements on-the-fly                             // and not to generate all bulk JSON at once  foreach(string bulk in bulkJsons ) {   // Send bulk batch.   string result = connection.Post(bulkCommand, bulk);    // Parse bulk batch result.   BulkResult bulkResult = serializer.ToBulkResult(result);   ... } Note: You can build not only Index Bulk operations but also Create and Delete. IEnumerable<string> bulkJsons =    new BulkBuilder(serializer)      .PipelineCollection(tweets,             (builder, tweet) => {               switch (tweet.State) {                 case State.Added:                    builder.Create(data: tweet,  id: myObject.Id))                 case State.Updated:                    builder.Index(data: tweet,  id: myObject.Id))                 case State.Deleted:                   builder.Delete(id: myObject.Id))               }             }); Queries ES documentation: http://www.elasticsearch.org/guide/reference/query-dsl/ The main idea of QueryBuilder is to repeat JSON syntaxes of ES queries. Besides this it provides intellisense with fluent builder interface and property references: for single property .Field(tweet => tweet.Name) for collection type property .FieldOfCollection(collection: user => user.Tweets, field: tweet => tweet.Name) So let’s see how it works. We have http://localhost:9200/twitter index with type user. Below we add sample ""user"" document to it: PUT http://localhost:9200/twitter/user/1 {     ""Id"": 1,     ""Active"": true,     ""Name"": ""John Smith"",     ""Alias"": ""Johnnie"" } Now let's create some synthetic JSON query to get this document: POST http://localhost:9200/twitter/user/_search {     ""query"": {         ""bool"": {             ""must"": [                 {                    ""query_string"": {                       ""fields"": [""Name"",""Alias""], ""query"" : ""John""                      }                 },                 {                    ""prefix"" : {                       ""Alias"": { ""prefix"": ""john"" }                     }                 }             ]         }     },     ""filter"": {         ""term"": { ""Active"": ""true"" }     } } Assuming that we have defined class User: class User {     public int Id { get; set; }     public bool Active { get; set; }     public string Name { get; set; }     public string Alias { get; set; } } This query could be constructed using: string query = new QueryBuilder<User>()     .Query(q => q         .Bool(b => b            .Must(m => m                .QueryString(qs => qs                    .Fields(user => user.Name, user => user.Alias).Query(""John"")                )                .Prefix(p => p                     .Field(user => user.Alias).Prefix(""john"")                )            )         )     )     .Filter(f => f         .Term(t => t              .Field(user=> user.Active).Value(""true"")         )     )     .BuildBeautified(); And then to execute this query we can use the following code: var connection = new ElasticConnection(""localhost"", 9200); var serializer = new JsonNetSerializer();  string result = connection.Post(Commands.Search(""twitter"", ""user""), query); User foundUser = serializer.ToSearchResult<User>(result).Documents.First(); See Query Builder Gist for complete sample. Condition-less Queries: Its usual case when you have a bunch of UI filters to define full-text query, price range filter, category filter etc. None of these filters are mandatory, so when you construct final query you should use only defined filters. This brings ugly conditional logic to your query-building code. So how PlainElastic.Net addresses this? The idea behind is really simple: If provided condition value is null or empty - the corresponding query or filter will not be generated. Expression string query = new QueryBuilder<User>()     .Query(q => q         .QueryString(qs => qs            .Fields(user => user.Name, user => user.Alias).Query("""")         )     )     .Filter(f => f         .Term(t => t              .Field(user=> user.Active).Value(null)         )     )     .Build(); will generate ""{}"" string that will return all documents from the index. The real life usage sample: Let's say we have criterion object that represents UI filters: class Criterion {     public string FullText { get; set; }     public double? MinPrice { get; set; }     public double? MaxPrice { get; set; }     public bool? Active { get; set; } } So our query builder could look like this: public string BuildQuery(Criterion criterion) {     string query = new QueryBuilder<Item>()         .Query(q => q             .QueryString(qs => qs                 .Fields(item => item.Name, item => item.Description)                 .Query(criterion.FullText)             )         )         .Filter(f => f             .And(a => a                 .Range(r => r                     .Field(item => item.Price)                                                // AsString extension allows to convert nullable values to string or null                     .From(criterion.MinPrice.AsString())                     .To(criterion.MaxPrice.AsString())                 )                 .Term(t => t                     .Field(user => user.Active).Value(criterion.Active.AsString())                 )             )         ).BuildBeautified(); } And that's all - no ugly ifs or switches. You just write query builder using most complex scenario, and then it will build only defined criterions. If we call this function with BuildQuery( new Criterion { FullText = ""text"" }) then it will generate: {     ""query"": {         ""query_string"": {             ""fields"": [""Name"", ""Description""],             ""query"": ""text""         }     } } so it omits all not defined filters. See Condion-less Query Builder Gist for complete sample. Facets ES documentation: http://www.elasticsearch.org/guide/reference/api/search/facets/index.html For now only Terms facet, Terms Stats facet, Statistical facet, Range facet and Filter Facet supported. You can construct facet queries using the following syntax: public string BuildFacetQuery(Criterion criterion) {   return new QueryBuilder<Item>()         .Query(q => q             .QueryString(qs => qs                 .Fields(item => item.Name, item => item.Description)                 .Query(criterion.FullText)             )         )          // Facets Part         .Facets(facets => facets             .Terms(t => t                 .FacetName(""ItemsPerCategoryCount"")                 .Field(item => item.Category)                 .Size(100)                 )         )         .BuildBeautified(); } To read facets result you need to deserialize it to SearchResults and access its .facet property:   // Build faceted query with FullText criterion defined.   string query = BuildFacetQuery(new Criterion { FullText = ""text"" });   string result = connection.Post(Commands.Search(""store"", ""item""), query);    // Parse facets query result    var searchResults = serializer.ToSearchResult<Item>(result);   var itemsPerCategoryTerms = searchResults.facets.Facet<TermsFacetResult>(""ItemsPerCategoryCount"").terms;    foreach (var facetTerm in itemsPerCategoryTerms)   {       Console.WriteLine(""Category: {0}  Items Count: {1}"".F(facetTerm.term, facetTerm.count));   } See Facet Query Builder Gist for complete sample. Highlighting ES documentation: http://www.elasticsearch.org/guide/reference/api/search/highlighting/ You can construct highlighted queries using the following syntax: string query = new QueryBuilder<Note>()     .Query(q => q         .QueryString(qs => qs             .Fields(c => c.Caption)             .Query(""Note"")         )      )      .Highlight(h => h         .PreTags(""<b>"")         .PostTags(""</b>"")         .Fields(              f => f.FieldName(n => n.Caption).Order(HighlightOrder.score),              f => f.FieldName(""_all"")         )      )     .BuildBeautified(); To get highlighted fragments you need to deserialize results to SearchResult<T> and access highlight property of each hit: // Execute query and deserialize results. string results = connection.Post(Commands.Search(""notes"", ""note""), query); var noteResults = serializer.ToSearchResult<Note>(results);  // Array of higlighted fragments for Caption field for the first hit. var hit = noteResults.hits.hits[0]; string[] fragments = hit.highlight[""Caption""]; See Highlighting Gist for complete sample. Scrolling ES documentation: http://www.elasticsearch.org/guide/reference/api/search/scroll/ You can construct scrolling search request by specifing scroll keep alive time in SearchCommand: string scrollingSearchCommand = new SearchCommand(index:""notes"", type:""note"")                                       .Scroll(""5m"")                                       .SearchType(SearchType.scan);  To scroll found documents you need to deserialize results to SearchResult<T> and get the _scroll_id field. Then you should execute SearchScrollCommand with acquired scroll_id // Execute query and deserialize results. string results = connection.Post(scrollingSearchCommand, queryJson); var noteResults = serializer.ToSearchResult<Note>(results);  // Get the initial scroll ID string scrollId = scrollResults._scroll_id;  // Execute SearchScroll request to scroll found documents. results = connection.Get(Commands.SearchScroll(scrollId).Scroll(""5m""));  See Scrolling Gist for complete sample. Mapping ES documentation: http://www.elasticsearch.org/guide/reference/mapping/ Mapping of core and object types could be performed in the following manner: private static string BuildCompanyMapping()     {         return new MapBuilder<Company>()             .RootObject(typeName: ""company"",                         map: r => r                 .All(a => a.Enabled(false))                 .Dynamic(false)                 .Properties(pr => pr                     .String(company => company.Name, f => f.Analyzer(DefaultAnalyzers.standard).Boost(2))                     .String(company => company.Description, f => f.Analyzer(DefaultAnalyzers.standard))                     .String(company => company.Fax, f => f.Analyzer(DefaultAnalyzers.keyword))                      .Object(company => company.Address, address => address                         .Properties(ap => ap                             .String(addr => addr.City)                             .String(addr => addr.State)                             .String(addr => addr.Country)                         )                     )                      .NestedObject(company => company.Contacts, o => o                         .Properties(p => p                             .String(contact => contact.Name)                             .String(contact => contact.Department)                             .String(contact => contact.Email)                              // It's unnecessary to specify opt.Type(NumberMappingType.Integer)                             // cause it will be inferred from property type.                             // Showed here only for educational purpose.                             .Number(contact => contact.Age, opt => opt.Type(NumberMappingType.Integer))                              .Object(ct => ct.Address, oa => oa                                 .Properties( pp => pp                                     .String(a => a.City)                                     .String(a => a.State)                                     .String(a => a.Country)                                 )                             )                         )                     )                 )           )           .BuildBeautified(); To apply mapping you need to use PutMappingCommand: var connection = new ElasticConnection(""localhost"", 9200); string jsonMapping = BuildCompanyMapping();  connection.Put(new PutMappingCommand(""store"", ""company""), jsonMapping); See Mapping Builder Gist for complete sample. Index Settings ES documentation: http://www.elasticsearch.org/guide/reference/api/admin-indices-update-settings.html You can build index settings by using IndexSettinsBuilder: private static string BuildIndexSettings() {     return new IndexSettingsBuilder()         .Analysis(als => als             .Analyzer(a => a                 .Custom(""lowerkey"", custom => custom                     .Tokenizer(DefaultTokenizers.keyword)                     .Filter(DefaultTokenFilters.lowercase)                 )                 .Custom(""fulltext"", custom => custom                     .CharFilter(DefaultCharFilters.html_strip)                     .Tokenizer(DefaultTokenizers.standard)                     .Filter(DefaultTokenFilters.word_delimiter,                             DefaultTokenFilters.lowercase,                             DefaultTokenFilters.stop,                             DefaultTokenFilters.standard)                 )             )         )         .BuildBeautified(); } You can put index settings to index by UpdateSettingsCommand or by passing settings to index creation command: var connection = new ElasticConnection(""localhost"", 9200);  var settings = BuildIndexSettings();  if (IsIndexExists(""store"", connection)) {     // We can't update settings on active index.     // So we need to close it, then update settings and then open index back.     connection.Post(new CloseCommand(""store""));      connection.Put(new UpdateSettingsCommand(""store""), settings);      connection.Post(new OpenCommand(""store"")); } else {     // Create Index with settings.     connection.Put(Commands.Index(""store"").Refresh(), settings); } See Index Settings Gist for complete sample. Special thanks to devoyster (Andriy Kozachuk) for providing Index Settings support. Samples Date Histogram Facet sample Parent/Child sample Random Sort sample And Or filtering sample Query Scrolling sample ES Mapping and MongoDb river configuration Complex MoreLikeThis sample MoreLikeThis sample Highlighting sample Query builder using JSON query as pattern Index Settings sample Mapping sample Facet query builder sample Condition-less query builder sample Query builder sample Bulk sample If something is missed In case you need ElasticSearch feature that not yet covered by PlainElastic.Net, just remember that everything passed to ES connection is a string, so you can add missed functionality using .Custom(string) function, that exists in every builder. return new QueryBuilder<Item>()     .Query(q => q         .Term(t => t               .Field(user => user.Active)               .Value(true.ToString())                // Custom string representing boost part.               .Custom(""\""boost\"": 3"")           )     )     .BuildBeautified(); or even more - just pass you string with JSON to ES connection. Also don't forget to add an issue to PlainElastic.Net github repository PlainElastic Issues so I can add this functionality to the future builds. License PlainElastic.Net is free software distributed under the terms of MIT License (see LICENSE.txt) these terms don’t apply to other 3rd party tools, utilities or code which may be used to develop this application. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Yegoroff/PlainElastic.Net"	"Plain.Net client for ElasticSearch"	"true"
"Search"	"SolrNet"	"https://github.com/mausch/SolrNet"	"Solr client for.Net"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"545"	"110"	"471"	"GitHub - mausch/SolrNet: Solr client for .Net Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 110 Star 545 Fork 471 mausch/SolrNet Code Issues 63 Pull requests 23 Pulse Graphs Solr client for .Net https://github.com/mausch/SolrNet/blob/master/Documentation/README.md 1,426 commits 13 branches 15 releases 44 contributors C# 88.0% HTML 6.0% XSLT 3.2% JavaScript 1.1% F# 0.7% CSS 0.5% Other 0.5% C# HTML XSLT JavaScript F# CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.3.x 0.4.x DataImportHandler ExtractingRequestHandler cursormark debug-explain document-model javabin linq master mlthandler pivot-fields solrcoreadmin-ioc Nothing to show BasicAuth 0.5.0a2 0.5.0a1 0.4.0 0.4.0b2 0.4.0b1 0.4.0a1 0.3.1 0.3.0 0.3.0b1 0.2.3 0.2.3b1 0.2.2 0.2.1 0.2.0 Nothing to show New pull request Latest commit 9c64895 Apr 27, 2016 Christoph U Parse Start attribute in result. Permalink Failed to load latest commit information. .nuget Don't require restore consent Apr 27, 2013 AutofacContrib.SolrNet.Tests Issue 129: Support for providing a custom IHttpWebRequestFactory when… Mar 21, 2014 AutofacContrib.SolrNet Bump version to 0.5.0-alpha2 Aug 21, 2015 Castle.Facilities.SolrNetIntegration.Tests Upgrade to Windsor 3.2 Apr 16, 2013 Castle.Facilities.SolrNetIntegration Bump version to 0.5.0-alpha2 Aug 20, 2015 Documentation Include explanation on Facet Limits in Facets.md and update link to C… Jan 18, 2016 HttpWebAdapters Bump version to 0.5.0-alpha2 Aug 20, 2015 NHibernate.SolrNet.Tests Revert ""test projects in .net 4.0"". May 16, 2012 NHibernate.SolrNet Bump version to 0.5.0-alpha2 Aug 20, 2015 Ninject.Integration.SolrNet.Tests Upgrade to Ninject 3.0.1.10 Apr 16, 2013 Ninject.Integration.SolrNet Bump version to 0.5.0-alpha2 Aug 20, 2015 SampleSolrApp.Tests Updated SolrField.cs & SolrSchemaParser.cs Jan 16, 2014 SampleSolrApp Include original exception Aug 20, 2015 SolrNet.DSL.Tests Performance improvement on SolrQueryInList Oct 1, 2012 SolrNet.DSL Bump version to 0.5.0-alpha2 Aug 20, 2015 SolrNet.Tests.Integration Corrected a copy/paste mistake on class being renamed. Jun 12, 2014 SolrNet.Tests Test #211 Aug 13, 2015 SolrNet Parse Start attribute in result. Apr 27, 2016 StructureMap.SolrNetIntegration.Tests Moved SolrNet integration tests to separate project. Dec 26, 2012 StructureMap.SolrNetIntegration Bump version to 0.5.0-alpha2 Aug 20, 2015 Unity.SolrNetIntegration.Tests Moved SolrNet integration tests to separate project. Dec 26, 2012 Unity.SolrNetIntegration Bump version to 0.5.0-alpha2 Aug 20, 2015 lib Update msbuild path May 4, 2015 packages Add all collapse localparams parameters. Extract Expand parameters to… Sep 19, 2014 solr Money integration tests Jul 26, 2012 tools can't redistribute hhc binaries, and it doesn't work like this anyway… Nov 14, 2010 .gitignore Include original exception Aug 20, 2015 Build.bat using fake.exe Nov 6, 2010 Doxyfile forgot to update the version number in docs Sep 11, 2011 InsertLicenseTask.boo don't apply license to AssemblyInfo.cs Feb 11, 2009 README.md Update README.md Aug 20, 2015 ReSharper.CodingStyle.xml CRLF Mar 13, 2010 Release.bat can't redistribute hhc binaries, and it doesn't work like this anyway… Nov 14, 2010 SampleSolrApp.sln Upgrade sample app project to VS2012 Jan 3, 2014 SolrNet.5.1.ReSharper Implemented add parameters when adding/updating the index (issue 85) Jan 4, 2011 SolrNet.6.0.ReSharper resharper stuff Jul 13, 2011 SolrNet.6.1.ReSharper ReSharper 6.1 styles Feb 8, 2012 SolrNet.ndproj adjustments to default NDepend queries May 30, 2010 SolrNet.sln Run tests from fsi May 13, 2013 Test.bat forgot the build script filename Nov 6, 2010 Tests.fsx Minor refactor towards more functional code Apr 27, 2015 build.fsx Bump version to 0.5.0-alpha2 Aug 20, 2015 changelog.txt Bump version to 0.5.0-alpha2 Aug 20, 2015 fake.fsx Fix Nuget package URLs May 4, 2015 ilmerge.exclude excluding unity and autofac integrations from internalization Apr 21, 2011 license.txt CRLF Mar 14, 2010 notice.txt CRLF Mar 14, 2010 pingsolr.js replaced pinging script May 29, 2010 runsample.bat New Solr directory Jul 26, 2012 README.md SolrNet is an Apache Solr client for .NET See documentation here. Special thanks to JetBrains for providing this project with a license for ReSharper! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mausch/SolrNet"	"Solr client for.Net"	"true"
"Search"	"Lucene.net"	"http://lucenenet.apache.org/"	"Lucene.Net is a port of the Lucene search engine library, written in C# and targeted at.NET runtime users"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Lucene.Net Apache.org Wiki Issue Tracker (JIRA) Source Lucene Project News Download Getting Started Community Useful Links Lucene.Net is a port of the Lucene search engine library, written in C# and targeted at .NET runtime users. The Lucene search library is based on an inverted index. Lucene.Net has three primary goals: Maintain the existing line-by-line port from Java to C#, fully automating and commoditizing the process such that the project can easily synchronize with the Java Lucene release schedule; Maintaining the high-performance requirements expected of a first class C# search engine library; Maximize usability and power when used within the .NET runtime. To that end, it will present a highly idiomatic, carefully tailored API that takes advantage of many of the special features of the .NET runtime. Recent News Lucene.Net 3.0.3 Released Apache Lucene.Net 3.0.3 just passed a vote for release - our first official release since graduating from the incubator in August. A lot of work was put into porting and testing the code. We've brought back .Net 3.5 support and added an entirely new Spatial Contrib project. Files can be downloaded from a number of places: SVN Source: https://svn.apache.org/repos/asf/lucene.net/tags/Lucene.Net_3_0_3_RC2_final/ Downloads: http://lucenenet.apache.org/download.cgi Nuget Lucene.Net 3.0.3 Lucene.Net 3.0.3 Contrib Lucene.Net 3.0.3 Contrib Spatial Lucene.Net 3.0.3 Contrib Spatial.NTS Apache Lucene.Net Graduates! Congratulations to the Apache Lucene.Net Developers and Community! We've made it out of incubation.  Seems like a relatively quick road; About a year an a half ago the Lucene.Net project was in danger of being retired. A few people brought it back and Lucene.Net entered the Apache Incubator. We've had a couple of releases, 2.9.2, 2.9.4, 2.9.4g and we're nearly ready to release big changes with 3.0.3. We've added new committers and have worked toward rebuilding our community. At the August 15th board meeting, the board voted unanimously to accept our graduation resolution, officially moving us out of the Incubator. Over the next couple of weeks, we've be moving all of our resources out of the incubator into our new permanent home, mailing lists will be updated, website update, svn repositories, etc. ~Prescott  Apache Lucene.Net 2.9.4g Incubating released It took about two months to fully roll out the 2.9.4g branch out the door. This release mostly replaces the plumbing of 2.9.4 with the .NET generic classes. One of the many benefits is the ability to use more .NET like code such as foreach (instead of GetEnumerator/MoveNext). There are a couple of API changes to be aware of: StopAnalyzer(List stopWords) Query.ExtractTerms(ICollection) TopDocs.TotalHits, TopDocs.ScoreDocsv Apache Lucene.Net 2.9.4 Incubating released We finally got it out the door, it took a lot longer than we expected. However, we have a ton of bug fixes rolled into this relase as well as a number of new features. Some of the bug fixes include: concurrency issues, mono compilation issues, and memory leaks. A lot of work has been done to clean up the code base, refactoring the code and project files, and providing build scripts A couple of new features: Search.Regex, Simple Faceted Search, and simple phrase analysis in the Fast Vector Highlighter Download it now on our downloads page Just around the corner is a 2.9.4g release (early January), that has been substantially refactored and uses generics across the board. Who Uses Lucene.Net? Open Source Initiatives iReaper Linq to Lucene Lucandra.NET MindTouch Orchard RavenDB Stackoverflow SubText Umbraco Commercial Products Autodesk BBC UK Top Gear site Epro, Bluewire Technologies IntelliEnterprise Intranet Suite Koders.com, Black Duck Software Oxford Analytica Paradigm PowerSearch ...and many many more Copyright 2013 The Apache Software Foundation, Licensed under the Apache License, Version 2.0. Apache Lucene.Net, Lucene.Net, Apache, the Apache feather logo, and the Apache Lucene.Net project logo are trademarks of The Apache Software Foundation. All other marks mentioned may be trademarks or registered trademarks of their respective owners."	"null"	"null"	"Lucene.Net is a port of the Lucene search engine library, written in C# and targeted at.NET runtime users"	"true"
"Serialization"	"Protobuf.NET"	"https://github.com/mgravell/protobuf-net"	"Protocol buffers is the name of the binary serialization format used by Google for much of their data communications"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"891"	"129"	"339"	"GitHub - mgravell/protobuf-net: Protocol Buffers library for idiomatic .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 129 Star 891 Fork 339 mgravell/protobuf-net Code Issues 117 Pull requests 16 Wiki Pulse Graphs Protocol Buffers library for idiomatic .NET 662 commits 1 branch 11 releases 10 contributors C# 90.9% XSLT 4.6% Protocol Buffer 1.4% JavaScript 0.9% Visual Basic 0.6% ASP 0.5% Other 1.1% C# XSLT Protocol Buffer JavaScript Visual Basic ASP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2.1.0-alpha-1 r668 r663 r662 r651 r638 r470 r450 2.1.0-alpha-5 2.1.0-alpha-4 2.1.0-alpha-3 Nothing to show New pull request Latest commit 0d0bb40 Jul 8, 2016 mgravell Fix #167; cyclic types should not resolve as list types of themselves… … … (stack-overflow) Permalink Failed to load latest commit information. .nuget Package and deploy: r580 Aug 17, 2012 BasicHttp Before compile, attempt to explore all required types, by requesting … Jun 20, 2010 DAL git-svn-id: http://protobuf-net.googlecode.com/svn/trunk@201 b72047a4… Nov 11, 2008 DataPipeline Code generator: command line options; xslt options; xml/binary/dataco… Oct 27, 2008 DataTableSerializer Initial cut of WinRT changes (may be unstable) Oct 25, 2011 Examples Fix #167; cyclic types should not resolve as list types of themselves… Jul 8, 2016 FX11 Fixing CoreCLR / ""unittest"": Tests.Dnx Total: 86, Errors: 0, Failed: … Nov 20, 2015 LateLoaded Build kit improved; now builds Nuget and \Package; the latter include… Aug 3, 2012 MetroDto FIX: WinRT enums have an instance field; crazy, yes? Jul 17, 2012 Metro_DevRig FIX: WinRT enums have an instance field; crazy, yes? Jul 17, 2012 MonoDroid_DevRig let MD run the full thing.. Sep 24, 2010 MonoDto let MD run the full thing.. Sep 24, 2010 MonoSerBuilder Implemented: mapped enums; expose pass-thru option on model Sep 22, 2010 Net11_Poco precompile now works for .NET 1.1 Aug 17, 2012 Net11_Runner precompile now works for .NET 1.1 Aug 17, 2012 Net45Dto fix: some incorrect Type vs System.Type, in particular with precompil… Feb 6, 2013 Nuget FIX: ProtoReader not resetting position in Init Sep 30, 2013 Phone8Dto ADD: Phone8 support Nov 1, 2012 Phone8_DevRig Support for BCL immutable collections Sep 8, 2013 PhoneDto Build kit improved; now builds Nuget and \Package; the latter include… Aug 3, 2012 Phone_DevRig FIX: SO11895998 - portable framework shouldn't try using Activator.Cr… Aug 10, 2012 ProtoBufGenerator Added: Byte/SByte May 3, 2010 ProtoGen Merge pull request #2 from kmitrovic/master Nov 3, 2015 QuickStart all.build not builds *all* frameworks (added NET11, CF20, CF35, WINRT) Aug 16, 2012 SO11895998 FIX SO11895998 and SO11892791 Aug 10, 2012 SO11895998_Portable FIX: SO11895998 - portable framework shouldn't try using Activator.Cr… Aug 10, 2012 SampleDto Build kit improved; now builds Nuget and \Package; the latter include… Aug 3, 2012 SignedDto Support for BCL immutable collections Sep 8, 2013 SilverDto Precompile - holy crap! it works! Jul 14, 2012 SilverlightExtended WinRT (runtime only, not fully working library) Jun 20, 2012 SilverlightExtended_HttpHandler provides the core pieces of the web application side of things. Still… Aug 11, 2008 SilverlightExtended_Web provides the core pieces of the web application side of things. Still… Aug 11, 2008 Spikes Better support for ""naked enumerables"" (IEnumerable<T> instead of ILi… Apr 17, 2013 SqlClr git-svn-id: http://protobuf-net.googlecode.com/svn/trunk@125 b72047a4… Aug 4, 2008 TestWcfClient all.build not builds *all* frameworks (added NET11, CF20, CF35, WINRT) Aug 16, 2012 TestWcfDto Build kit improved; now builds Nuget and \Package; the latter include… Aug 3, 2012 TestWcfServer Detect framework version from the image version; less specific to 1.1 Aug 17, 2012 Tests.Dnx Fix #167; cyclic types should not resolve as list types of themselves… Jul 8, 2016 Tools Precompile: support strong names; support internalvisibleto against t… Jun 20, 2013 VBTestRig Include Extensible on CoreOnly Aug 8, 2012 WcfPerfTest Incomplete attempt to integrate endpoint-behaviour Oct 8, 2009 demo-rpc-client-silverlight WinRT (runtime only, not fully working library) Jun 20, 2012 demo-rpc-server-mvc Callbacks and default values; callbacks now work alongside inheritanc… Apr 9, 2010 precompile.tests Support for BCL immutable collections Sep 8, 2013 precompile FIX: ProtoReader not resetting position in Init Sep 30, 2013 protobuf-net-CF20 Fix for deferred-objects regression Sep 2, 2013 protobuf-net-CF35 Build 662 Sep 2, 2013 protobuf-net-VS9 all.build not builds *all* frameworks (added NET11, CF20, CF35, WINRT) Aug 16, 2012 protobuf-net-mono Snk for CF20/CF35/Mono Mar 2, 2009 protobuf-net.Enyim FIX: Issue356; also minor tweaks / test for Enyim Feb 15, 2013 protobuf-net.Extensions-CF35 all.build not builds *all* frameworks (added NET11, CF20, CF35, WINRT) Aug 16, 2012 protobuf-net.Extensions all.build not builds *all* frameworks (added NET11, CF20, CF35, WINRT) Aug 16, 2012 protobuf-net.unittest More fixups for core-clr release (mostly tooling changes; some behavi… Jul 6, 2016 protobuf-net Fix #167; cyclic types should not resolve as list types of themselves… Jul 8, 2016 protobuf-net_IKVM Build kit improved; now builds Nuget and \Package; the latter include… Aug 3, 2012 protobuf-net_MonoDroid Build kit improved; now builds Nuget and \Package; the latter include… Aug 3, 2012 protobuf-net_Phone7 Optional (opt-in) DateTime.Kind serialization May 26, 2015 protobuf-net_Phone8 Nuget package for phone 8 and netcore Nov 6, 2012 protobuf-net_Portable Support for BCL immutable collections Sep 8, 2013 protobuf-net_Silverlight Support for BCL immutable collections Sep 8, 2013 protobuf-net_WinRT all.build not builds *all* frameworks (added NET11, CF20, CF35, WINRT) Aug 16, 2012 .gitignore Investigating JIT / invalid IL issue re ""constrained"" use of list API Jul 5, 2016 Info.txt Example for WCF usage in configuration Nov 11, 2009 Licence.txt License: Google's version=>BSD; fixed typo Nov 6, 2008 NuGet.Config Make if compile for rc1 Nov 19, 2015 Proto 2008.sln all.build not builds *all* frameworks (added NET11, CF20, CF35, WINRT) Aug 16, 2012 Proto 2010.sln FIX: SO11895998 - portable framework shouldn't try using Activator.Cr… Aug 10, 2012 Proto 2012.sln Precompile: support strong names; support internalvisibleto against t… Jun 20, 2013 Proto 2013.sln Optional (opt-in) DateTime.Kind serialization May 26, 2015 Proto.sln.cache git-svn-id: http://protobuf-net.googlecode.com/svn/trunk@200 b72047a4… Nov 7, 2008 ProtoBuf.snk git-svn-id: http://protobuf-net.googlecode.com/svn/trunk@3 b72047a4-3… Jul 17, 2008 README.md Update README.md Sep 18, 2015 StartHere.txt Sockets (simple data messaging; not RPC) Sep 25, 2008 What Files Do I Need.txt all.build not builds *all* frameworks (added NET11, CF20, CF35, WINRT) Aug 16, 2012 all.build Deploy 2.0.0.611 Dec 5, 2012 build.bat git-svn-id: http://protobuf-net.googlecode.com/svn/trunk@201 b72047a4… Nov 11, 2008 build_cf20.bat Lots of core fixes; attempt (failed) to use MF; revised build files; … Mar 1, 2010 build_fx11.bat Lots of core fixes; attempt (failed) to use MF; revised build files; … Mar 1, 2010 build_fx20.bat Really ugly hack to the test rig to get some NetDataContractSerialize… Mar 2, 2010 build_gmcs.bat Remove some additional allocations (IPredicate) Sep 3, 2013 build_gmcs_basic.bat Fixup build for iDevice and gmcs; this is a bit hacky, bug suffices f… Mar 30, 2011 build_mcs.bat bytes; fixed for clean build Mar 1, 2010 build_mf30.bat Lots of core fixes; attempt (failed) to use MF; revised build files; … Mar 1, 2010 buildkit20.build git-svn-id: http://protobuf-net.googlecode.com/svn/trunk@201 b72047a4… Nov 11, 2008 buildkit35.build memcached transcoder; interner; allow duplicated enums; general bug f… Jan 28, 2010 buildpack.cmd Additional build scripts May 29, 2013 global.json working through rtm core-clr fun Jul 4, 2016 nugetpush.cmd Add nugetpush.cmd utility cmd Jan 11, 2013 proto_dnx.sln Fix #167; cyclic types should not resolve as list types of themselves… Jul 8, 2016 push.cmd Additional build scripts May 29, 2013 README.md protobuf-net protobuf-net is a contract based serializer for .NET code, that happens to write data in the ""protocol buffers"" serialization format engineered by Google. The API, however, is very different to Google's, and follows typical .NET patterns (it is broadly comparable, in usage, to XmlSerializer, DataContractSerializer, etc). It should work for most .NET languages that write standard types and can use attributes. Supported Runtimes : .net 2.0/3.0/3.5/4.0 Compact Framework 2.0/3.5 Mono 2.x Silverlight, Windows Phone 7&8 Windows 8 apps Under investigation CoreClr/DNX install Nuget : Install-Package protobuf-net Basic usage 1 First Decorate your classes [ProtoContract] class Person {     [ProtoMember(1)]     public int Id {get;set;}     [ProtoMember(2)]     public string Name {get;set:}     [ProtoMember(3)]     public Address Address {get;set;} } [ProtoContract] class Address {     [ProtoMember(1)]     public string Line1 {get;set;}     [ProtoMember(2)]     public string Line2 {get;set;} } Note that unlike XmlSerializer, the member-names are not encoded in the data - instead, you must pick an integer to identify each member. Additionally, to show intent it is necessary to show that we intend this type to be serialized (i.e. that it is a data contract). 2 Serialize your data This writes a 32 byte file to ""person.bin"" : var person = new Person {     Id = 12345, Name = ""Fred"",     Address = new Address {         Line1 = ""Flat 1"",         Line2 = ""The Meadows""     } }; using (var file = File.Create(""person.bin"")) {     Serializer.Serialize(file, person); } 3 Deserialize your data This reads the data back from ""person.bin"" : Person newPerson; using (var file = File.OpenRead(""person.bin"")) {     newPerson = Serializer.Deserialize<Person>(file); } Notes Notes for Identifiers they must be positive integers they must be unique within a single type but the same numbers can be re-used in sub-types if inheritance is enabled the identifiers must not conflict with any inheritance identifiers (discussed later) lower numbers take less space - don't start 100,000,000 the identifier is important; you can change the member-name, or shift it between a property and a field, but changing the identifier changes the data Notes on types supported: custom classes that: are marked as data-contract have a parameterless constructor for Silverlight: are public many common primitives etc single dimension arrays: T[] List / IList Dictionary / IDictionary any type which implements IEnumerable and has an Add(T) method The code assumes that types will be mutable around the elected members. Accordingly, custom structs are not supported, since they should be immutable. Advanced subjects Inheritance Inheritance must be explicitly declared, in a similar way that if must for XmlSerializer and DataContractSerializer. This is done via [ProtoInclude(...)] on each type with known sub-types: [ProtoContract] [ProtoInclude(7, typeof(SomeDerivedType)] class SomeBaseType {...}  [ProtoContract] class SomeDerivedType {...} There is no special significance in the 7 above; it is an integer key, just like every [ProtoMember(...)]. It must be unique in terms of SomeBaseType (no other [ProtoInclude(...)] or [ProtoMember(...)] in SomeBaseType can use 7), but does not need to be unique globally. .proto file As an alternative to writing your classes and decorating them, You can generate your types and serializer from a .proto schema. This done using the precompiler. Additional guidance can be found here. Alternative to attributes In v2, everything that can be done with attributes can also be configured at runtime via RuntimeTypeModel. The Serializer.* methods are basically just shortcuts to RuntimeTypeModel.Default., so to manipulate the behaviour of Serializer., you must configure RuntimeTypeModel.Default. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mgravell/protobuf-net"	"Protocol buffers is the name of the binary serialization format used by Google for much of their data communications"	"true"
"Serialization"	"Json.NET"	"https://github.com/JamesNK/Newtonsoft.Json"	"Popular high-performance JSON framework for.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3274"	"358"	"1357"	"GitHub - JamesNK/Newtonsoft.Json: Json.NET is a popular high-performance JSON framework for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 358 Star 3,274 Fork 1,357 JamesNK/Newtonsoft.Json Code Issues 74 Pull requests 20 Pulse Graphs Json.NET is a popular high-performance JSON framework for .NET http://www.newtonsoft.com/json 1,201 commits 8 branches 54 releases 41 contributors C# 98.1% PowerShell 1.9% C# PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags JonHanna-refactor_repeated_code dotnet-cli-test dotnet-cli formatting json-reader-boxing jsonreader-refactor location-reference-resolver master Nothing to show 9.0.1 8.0.3 8.0.2 8.0.1 7.0.1 6.0.8 6.0.7 6.0.6 6.0.5 6.0.4 6.0.3 6.0.2 6.0.1 5.0.8 5.0.7 5.0.6 5.0.5 5.0.4 5.0.3 5.0.2 5.0.1 4.5.11 4.5.10 4.5.9 4.5.8 4.5.7 4.5.6 4.5.5 4.5.4 4.5.3 4.5.2 4.5.1 4.0.8 4.0.7 4.0.6 4.0.5 4.0.4 4.0.3 4.0.2 4.0.1 3.5.8 3.5.7 3.5.6 3.5.5 3.5.4 3.5.3 3.5.2 3.5.1 3.0.1 2.0.4 2.0.3 2.0.2 2.0.1 1.3.1 Nothing to show New pull request Latest commit 7f6a010 Jul 15, 2016 JamesNK -Fixed StringEnumConverter reading specified enum names that contain … … …a comma Permalink Failed to load latest commit information. Build -Build Jul 5, 2016 Doc -Documentation Jun 28, 2016 Src -Fixed StringEnumConverter reading specified enum names that contain … Jul 15, 2016 Tools -Build Jul 5, 2016 .gitattributes -Fixed WinRT build Sep 12, 2014 .gitignore -Fixed converting JSON to XML with invalid XML name characters Dec 6, 2015 CONTRIBUTING.md -Updated CONTRIBUTING.md Jul 1, 2014 LICENSE.md Create LICENSE.md Jul 25, 2013 README.md -Updated README.md Jan 17, 2016 README.md Json.NET Homepage Documentation NuGet Package Release Notes Contributing Guidelines License Stack Overflow Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/JamesNK/Newtonsoft.Json"	"Popular high-performance JSON framework for.NET"	"true"
"Serialization"	"ServiceStack.Text"	"https://github.com/ServiceStack/ServiceStack.Text"	"JSON, JSV and CSV Text Serializers used in servicestack.net"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"716"	"75"	"506"	"GitHub - ServiceStack/ServiceStack.Text: .NET's fastest JSON, JSV and CSV Text Serializers Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 75 Star 716 Fork 506 ServiceStack/ServiceStack.Text Code Pull requests 0 Wiki Pulse Graphs .NET's fastest JSON, JSV and CSV Text Serializers https://servicestack.net/text 1,754 commits 4 branches 28 releases 107 contributors C# 99.3% Other 0.7% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master netcore v3 vs2012 Nothing to show v4.0.60 v4.0.58 v4.0.56 v4.0.54 v4.0.52 v4.0.50 v4.0.48 v4.0.46 v4.0.44 v4.0.42 v4.0.40 v4.0.38 v4.0.36 v4.0.35 v4.0.34 v4.0.33 v4.0.32 v4.0.31 v4.0.30 v4.0.24 v4.0.23 v4.0.22 v4.0.21 v4.0.20 v4.0.19 v4.0.18 v4.0.17 v3-snapshot Nothing to show New pull request Latest commit 403491d Jul 12, 2016 mythz Also call InitStatics() on RegisterLicense() Permalink Failed to load latest commit information. NuGet.Pcl/ServiceStack.Text.Pcl Also change summary to make deprecated package id visible Nov 14, 2014 NuGet.Signed/ServiceStack.Text.Signed update to use new icon urls Dec 2, 2013 NuGet Update nuspec Nov 16, 2015 build Change to use PCL StringComparer Mar 16, 2016 lib Add fix for Dump on cyclical refs with IEnumerables Jul 10, 2016 src Also call InitStatics() on RegisterLicense() Jul 12, 2016 tests Add fix for Dump on cyclical refs with IEnumerables Jul 10, 2016 .gitattributes merge Oct 8, 2012 .gitignore Use JSV for to or from string ValueType conversions Aug 2, 2015 CONTRIBUTING.md Add a Contributing.md Oct 13, 2013 README.md Update SS .dlls May 3, 2016 build.cmd Make build files consistent across all projs Sep 14, 2013 license.txt Add v4 readme, licensing and NuGet changes Sep 26, 2013 README.md Join the ServiceStack Google+ Community or follow @ServiceStack for updates. JSON, JSV and CSV Text Serializers used in servicestack.net. ServiceStack.Text is an independent, dependency-free serialization library that contains ServiceStack's text processing functionality, including: JsonSerializer TypeSerializer (JSV-Format) CsvSerializer T.Dump extension method StringExtensions - Xml/Json/Csv/Url encoding, BaseConvert, Rot13, Hex escape, etc. Stream, Reflection, List, DateTime, etc extensions and utils Simple API Like most of the interfaces in Service Stack, the API is simple. Methods that you would commonly use include: string TypeSerializer.SerializeToString<T>(T value) void TypeSerializer.SerializeToWriter<T>(T value, TextWriter writer)  T TypeSerializer.DeserializeFromString<T>(string value) T TypeSerializer.DeserializeFromReader<T>(TextReader reader) Where T can be any .NET POCO type. That's all there is - the API was intentionally left simple :) Dynamic JSON parsing API JsonObject.Parse() JsonArrayObjects.Parse() Extension Methods T FromJson() string ToJson(T)  T FromJsv() string ToJsv(T) Dump / Diagnostic Extensions: T Dump() T Print() T PrintDump() string Fmt(args) URL Extensions: string GetStringFromUrl() string GetJsonFromUrl() string GetResponseStatus() string UrlEncode() / UrlDecode() string HexEscape() / HexUnescape() string UrlFormat() / AppendPath() / AppendPaths() / WithTrailingSlash()     string WithoutExtension() / ParentDirectory() / ReadAllText() Stream Extensions: Stream WriteTo(Stream) / CopyTo() Stream ReadLines() Stream ReadFully() / ReadExactly() String Utils: string SplitOnFirst() / SplitOnLast() string IndexOfAny() string StripHtml() / ToCamelCase() string SafeSubstring() string ToUtf8Bytes() / FromUtf8Bytes() more String, Reflection, List, Dictionary, DateTime extensions... Supports Dynamic JSON Although usually used to (de)serialize C#/.NET POCO types, it also includes a flexible API allowing you to deserialize any JSON payload without it's concrete type, see these real-world examples: Parsing GitHub's v3 API with typed DTOs Parsing GitHub's JSON response Parsing Google Maps JSON Response Parsing Centroid Also a thin .NET 4.0 Dynamic JSON wrapper around ServiceStack's JSON library is included in the ServiceStack.Razor project. It provides a dynamic, but more succinct API than the above options. Install ServiceStack.Text PM> Install-Package ServiceStack.Text  Latest v4+ on NuGet is a commercial release with free quotas. Docs and Downloads for older v3 BSD releases Copying Since September 2013, ServiceStack source code is available under GNU Affero General Public License/FOSS License Exception, see license.txt in the source. Alternative commercial licensing is also available, contact team@servicestack.net for details. Contributing Commits can be made to either the master (v4) or v3 release branches. Contributors need to approve the Contributor License Agreement before any code will be reviewed, see the Contributing wiki for more details. ServiceStack.JsonSerializer For reasons outlined in this blog post I decided to re-use TypeSerializer's text processing-core to create ServiceStack.JsonSerializer - the fastest JSON Serializer for .NET. Based on the Northwind Benchmarks it's 3.6x faster than .NET's BCL JsonDataContractSerializer and 3x faster then the previous fastest JSON serializer benchmarked - JSON.NET. A comprehensive set of other .NET benchmarks are maintained at servicestack.net/benchmarks and in the wiki. ServiceStack.CsvSerializer As CSV is an important format in many data access and migration scenarios, it became the latest format included in ServiceStack which allows all your existing web services to take advantage of the new format without config or code-changes. As its built using the same tech that makes the JSON and JSV serializers so fast, we expect it to be the fastest POCO CSV Serializer for .NET. ServiceStack.TypeSerializer and the JSV-format Included in this project is TypeSerializer - A fast and compact text-based serializer for .NET. It's a light-weight compact Text Serializer which can be used to serialize .NET data types inc custom POCO's and DataContract's. More info on its JSV Format can be found on the introductory post. T.Dump() Extension method Another useful library to have in your .NET toolbox is the T.Dump() Extension Method. Under the hood it uses a Pretty Print Output of the JSV Format to recursively dump the contents of any .NET object. Example usage and output: var model = new TestModel(); model.PrintDump();  //Example Output {     Int: 1,     String: One,     DateTime: 2010-04-11,     Guid: c050437f6fcd46be9b2d0806a0860b3e,     EmptyIntList: [],     IntList:     [         1,         2,         3     ],     StringList:     [         one,         two,         three     ],     StringIntMap:     {         a: 1,         b: 2,         c: 3     } } ServiceStack's JsonSerializer ServiceStack's JsonSerializer is optimized for serializing C# POCO types in and out of JSON as fast, compact and cleanly as possible. In most cases C# objects serializes as you would expect them to without added json extensions or serializer-specific artefacts. JsonSerializer provides a simple API that allows you to serialize any .NET generic or runtime type into a string, TextWriter/TextReader or Stream. Serialization API string SerializeToString<T>(T) void SerializeToWriter<T>(T, TextWriter) void SerializeToStream<T>(T, Stream) string SerializeToString(object, Type) void SerializeToWriter(object, Type, TextWriter) void SerializeToStream(object, Type, Stream) Deserialization API T DeserializeFromString<T>(string) T DeserializeFromReader<T>(TextReader) object DeserializeFromString(string, Type) object DeserializeFromReader(reader, Type) object DeserializeFromStream(Type, Stream) T DeserializeFromStream<T>(Stream) Extension methods string ToJson<T>(this T) T FromJson<T>(this string) Convenient ToJson/FromJson extension methods are also included reducing the amount of code required, e.g: new []{ 1, 2, 3 }.ToJson()   //= [1,2,3] ""[1,2,3]"".FromJson<int[]>()  //= int []{ 1, 2, 3 } JSON Format JSON is a lightweight text serialization format with a spec that's so simple that it fits on one page: http://www.json.org. The only valid values in JSON are: string number object array true false null Where most allowed values are scalar and the only complex types available are objects and arrays. Although limited, the above set of types make a good fit and can express most programming data structures. number, true, false types All C# boolean and numeric data types are stored as-is without quotes. null type For the most compact output null values are omitted from the serialized by default. If you want to include null values set the global configuration: JsConfig.IncludeNullValues = true; string type All other scalar values are stored as strings that are surrounded with double quotes. C# Structs and Value Types Because a C# struct is a value type whose public properties are normally just convenience properties around a single scalar value, they are ignored instead the TStruct.ToString() method is used to serialize and either the static TStruct.ParseJson()/static TStruct.ParseJsv() methods or new TStruct(string) constructor will be used to deserialize the value type if it exists. array type Any List, Queue, Stack, Array, Collection, Enumerables including custom enumerable types are stored in exactly the same way as a JavaScript array literal, i.e: [1,2,3,4,5]  All elements in an array must be of the same type. If a custom type is both an IEnumerable and has properties it will be treated as an array and the extra properties will be ignored. object type The JSON object type is the most flexible and is how most complex .NET types are serialized. The JSON object type is a key-value pair JavaScript object literal where the key is always a double-quoted string. Any IDictionary is serialized into a standard JSON object, i.e: {""A"":1,""B"":2,""C"":3,""D"":4}  Which happens to be the same as C# POCO types (inc. Interfaces) with the values: new MyClass { A=1, B=2, C=3, D=4 } {""A"":1,""B"":2,""C"":3,""D"":4}  Only public properties on reference types are serialized with the C# Property Name used for object key and the Property Value as the value. At the moment it is not possible to customize the Property Name. JsonSerializer also supports serialization of anonymous types in much the same way: new { A=1, B=2, C=3, D=4 } {""A"":1,""B"":2,""C"":3,""D"":4}  Custom Serialization Although JsonSerializer is optimized for serializing .NET POCO types, it still provides some options to change the convention-based serialization routine. Using Structs to Customize JSON This makes it possible to customize the serialization routine and provide an even more compact wire format. E.g. Instead of using a JSON object to represent a point { Width=20, Height=10 }  You could use a struct and reduce it to just: ""20x10""   By overriding ToString() and providing a static Size ParseJson() method: public struct Size {     public double Width { get; set; }     public double Height { get; set; }      public override string ToString()     {         return Width + ""x"" + Height;     }      public static Size ParseJson(string json)     {         var size = json.Split('x');         return new Size {              Width = double.Parse(size[0]),              Height = double.Parse(size[1])          };     } } Which would change it to the more compact JSON output:     new Size { Width = 20, Height = 10 }.ToJson() // = ""20x10"" That allows you to deserialize it back in the same way:     var size = ""20x10"".FromJson<Size>(); Using Custom IEnumerable class to serialize a JSON array In addition to using a Struct you can optionally use a custom C# IEnumerable type to provide a strong-typed wrapper around a JSON array: public class Point : IEnumerable {     double[] points = new double[2];      public double X      {         get { return points[0]; }         set { points[0] = value; }     }      public double Y     {         get { return points[1]; }         set { points[1] = value; }     }      public IEnumerator GetEnumerator()     {         foreach (var point in points)              yield return point;     } } Which serializes the Point into a compact JSON array:     new Point { X = 1, Y = 2 }.ToJson() // = [1,2] Custom Serialization Routines If you can't change the definition of a ValueType (e.g. because its in the BCL), you can assign a custom serialization / deserialization routine to use instead. E.g. here's how you can add support for System.Drawing.Color: JsConfig<System.Drawing.Color>.SerializeFn = c => c.ToString().Replace(""Color "","""").Replace(""["","""").Replace(""]"",""""); JsConfig<System.Drawing.Color>.DeSerializeFn = System.Drawing.Color.FromName; Custom Deserialization Because the same wire format shared between Dictionaries, POCOs and anonymous types, in most cases what you serialize with one type can be deserialized with another, i.e. an Anonymous type can be deserialized back into a Dictionary which can be deserialized into a strong-typed POCO and vice-versa. Although the JSON Serializer is best optimized for serializing and deserializing .NET types, it's flexible enough to consume 3rd party JSON apis although this generally requires custom de-serialization to convert it into an idiomatic .NET type. GitHubRestTests.cs Using JsonObject Using Generic .NET Collection classes Using Customized DTO's in the shape of the 3rd party JSON response CentroidTests is another example that uses the JsonObject to parse a complex custom JSON response. TypeSerializer Details (JSV Format) Out of the box .NET provides a fairly quick but verbose Xml DataContractSerializer or a slightly more compact but slower JsonDataContractSerializer. Both of these options are fragile and likely to break with any significant schema changes. TypeSerializer addresses these shortcomings by being both smaller and significantly faster than the most popular options. It's also more resilient, e.g. a strongly-typed POCO object can be deserialized back into a loosely-typed string Dictionary and vice-versa. With that in mind, TypeSerializer's main features are: Fastest and most compact text-serializer for .NET Human readable and writeable, self-describing text format Non-invasive and configuration-free Resilient to schema changes Serializes / De-serializes any .NET data type (by convention) Supports custom, compact serialization of structs by overriding ToString() and static T Parse(string) methods Can serialize inherited, interface or 'late-bound objects' data types Respects opt-in DataMember custom serialization for DataContract dto types. These characteristics make it ideal for use anywhere you need to store or transport .NET data-types, e.g. for text blobs in a ORM, data in and out of a key-value store or as the text-protocol in .NET to .NET web services. As such, it's utilized within ServiceStack's other components: OrmLite - to store complex types on table models as text blobs in a database field and ServiceStack.Redis - to store rich POCO data types into the very fast redis instances. You may also be interested in the very useful T.Dump() extension method for recursively viewing the contents of any C# POCO Type. Performance Type Serializer is actually the fastest and most compact text serializer available for .NET. Out of all the serializers benchmarked, it is the only one to remain competitive with protobuf-net's very fast implementation of Protocol Buffers - google's high-speed binary protocol. Below is a series of benchmarks serialize the different tables in the Northwind database (3202 records) with the most popular serializers available for .NET: Combined results for serializing / deserialzing a single row of each table in the Northwind database 1,000,000 times view the detailed benchmarks Serializer Size Peformance Microsoft DataContractSerializer 4.68x 6.72x Microsoft JsonDataContractSerializer 2.24x 10.18x Microsoft BinaryFormatter 5.62x 9.06x NewtonSoft.Json 2.30x 8.15x ProtoBuf.net 1x 1x ServiceStack TypeSerializer 1.78x 1.92x number of times larger in size and slower in performance than the best - lower is better Microsoft's JavaScriptSerializer was also benchmarked but excluded as it was up to 280x times slower - basically don't use it, ever. JSV Text Format (JSON + CSV) Type Serializer uses a hybrid CSV-style escaping + JavaScript-like text-based format that is optimized for both size and speed. I'm naming this JSV-format (i.e. JSON + CSV) In many ways it is similar to JavaScript, e.g. any List, Array, Collection of ints, longs, etc are stored in exactly the same way, i.e: [1,2,3,4,5]  Any IDictionary is serialized like JavaScript, i.e: {A:1,B:2,C:3,D:4}  Which also happens to be the same as C# POCO class with the values new MyClass { A=1, B=2, C=3, D=4 } {A:1,B:2,C:3,D:4}  JSV is white-space significant, which means normal string values can be serialized without quotes, e.g: new MyClass { Foo=""Bar"", Greet=""Hello World!""} is serialized as: {Foo:Bar,Greet:Hello World!}  CSV escaping Any string with any of the following characters: []{},"" is escaped using CSV-style escaping where the value is wrapped in double quotes, e.g: new MyClass { Name = ""Me, Junior"" } is serialized as: {Name:""Me, Junior""}  A value with a double-quote is escaped with another double quote e.g: new MyClass { Size = ""2\"" x 1\"""" } is serialized as: {Size:""2"""" x 1""""""}  Rich support for resilience and schema versioning To better illustrate the resilience of TypeSerializer and the JSV Format check out a real world example of it when it's used to Painlessly migrate between old and new types in Redis. Support for dynamic payloads and late-bound objects is explained in the post Versatility of JSV Late-bound objects. Community Resources ServiceStack.Text has nice extension method called Dump and has a few friends - web archive by @chrissie1 JSON.NET vs ServiceStack - web archive GithubSharp with ServiceStack.Text by @XTZGZoReX Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ServiceStack/ServiceStack.Text"	"JSON, JSV and CSV Text Serializers used in servicestack.net"	"true"
"Serialization"	"Msgpack-Cli"	"https://github.com/msgpack/msgpack-cli"	"MessagePack implementation for Common Language Infrastructure"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"356"	"42"	"81"	"GitHub - msgpack/msgpack-cli: MessagePack implementation for Common Language Infrastructure / msgpack.org[C#] Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 42 Star 356 Fork 81 msgpack/msgpack-cli Code Issues 37 Pull requests 0 Wiki Pulse Graphs MessagePack implementation for Common Language Infrastructure / msgpack.org[C#] http://msgpack.org 2,829 commits 7 branches 49 releases 32 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.4 0.5 0.6 0.7 gh-pages master wip-dictionary-enhancements Nothing to show 0.7.1 0.7.0 0.7.0-rc1 0.7.0-beta2 0.7.0-beta1 0.7.0-alpha3 0.7.0-alpha2 0.7.0-alpha1 0.6.8 0.6.7 0.6.6 0.6.5.1 0.6.5 0.6.4 0.6.3 0.6.2 0.6.1.1 0.6.1 0.6.0 0.6.0-beta5 0.6.0-beta4 0.6.0-beta3 0.6.0-beta2 0.6.0-beta1 0.6.0-alpha1 0.5.11 0.5.10 0.5.9 0.5.8 0.5.7 0.5.6 0.5.5 0.5.4 0.5.3 0.5.2 0.5.1 0.5.0 0.5.0-beta1 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 0.4.0-beta3 0.4.0-beta2 0.4.0-beta1 0.3.2.1 0.3.1 0.3 Nothing to show New pull request Latest commit 0b903a7 Jul 10, 2016 yfakariya Fix appveyor settings. Permalink Failed to load latest commit information. .nuget update nuget.exe May 22, 2016 assets Add small icon image. Sep 6, 2014 build Fix nightly (dev) package versioning. Jul 10, 2016 samples Remove NUnit3TestAdapter Jun 18, 2016 src Merge branch '0.7' Jul 10, 2016 test Fix (temporary) assembly dependency paths. Jun 29, 2016 tools Relax target framework versions. #176 Jul 8, 2016 .editorconfig Add contribution notes. Apr 26, 2015 .gitignore Exclude AppPackages/ subdirectory. Jun 4, 2016 AUTHORS.txt Restructure directories to bring up CLI tree as top. May 24, 2012 BuildNote.txt Update API documentation related notes. Oct 6, 2013 CHANGES.txt Update change log. Jul 10, 2016 CONTRIBUTIONS.md Add contribution notes. Apr 26, 2015 LICENSE.txt Restructure directories to bring up CLI tree as top. May 23, 2012 MsgPack.Windows.sln Merge netstandard projects. Jun 26, 2016 MsgPack.Xamarin.sln Update Visual Studio version for solutions. Jun 10, 2016 MsgPack.compats.sln Fix code analysis settings. Jun 11, 2016 MsgPack.mono.sln Unify .NET build and Mono build. Nov 24, 2013 MsgPack.nuspec Update change log. Jul 9, 2016 MsgPack.shfbproj Update help file build configuration. Aug 16, 2015 MsgPack.sl5.shfbproj Add Sandcastle files. Aug 16, 2012 MsgPack.sln Fix code analysis settings. Jun 11, 2016 README.md Update versions, notes, and tools. Mar 10, 2016 SOURCES.txt Fix txt file encodings. May 4, 2013 Sync.Test.xml Fix Xamarin iOS related tests. Jun 26, 2016 Sync.xml Update project synchronization. May 19, 2016 SyncProjects.bat Update project synchronization tool settings and synchronize projects. Sep 23, 2014 TODO.md Add documents. Jul 20, 2015 appveyor-debug.yml Fix versioning scheme. Jun 26, 2016 appveyor-release.yml Fix appveyor settings. Jul 10, 2016 global.json Add CoreCLR unit test project w/ NUnit. Jun 26, 2016 msgpack.ico Add icon. Jul 21, 2013 README.md MessagePack for CLI What is it? This is MessagePack serialization/deserialization for CLI (Common Language Infrastructure) implementations such as .NET Framework, Silverlight, Mono (including Moonlight.) This library can be used from ALL CLS compliant languages such as C#, F#, Visual Basic, Iron Python, Iron Ruby, PowerShell, C++/CLI or so. Usage You can serialize/deserialize objects as following: 1. Create serializer via MessagePackSerializer.Create generic method. This method creates dependent types serializers as well. 1. Invoke serializer as following: ** Pack method with destination Stream and target object for serialization. ** Unpack method with source Stream. // Creates serializer. var serializer = SerializationContext.Default.GetSerializer<T>(); // Pack obj to stream. serializer.Pack(stream, obj); // Unpack from stream. var unpackedObject = serializer.Unpack(stream); ' Creates serializer. Dim serializer = SerializationContext.Default.GetSerializer(Of T)() ' Pack obj to stream. serializer.Pack(stream, obj) ' Unpack from stream. Dim unpackedObject = serializer.Unpack(stream) Features Fast and interoperable binary format serialization with simple API. Generating pre-compiled assembly for rapid start up. Flexible MessagePackObject which represents MessagePack type system naturally. Documentation See wiki Installation Binary files distributed via the NuGet package MsgPack.Cli. You can extract binary (DLL) file as following: Download *.zip file from GitHub Release page. Extract it. Under the bin directory, binaries are there! For mono, you can use net461 or net35 drops as you run with. For Unity, unity3d drop is suitable. How to build For .NET Framework Install recent Windows SDK (at least, .NET Framework 4 Client Profile and MSBuild is needed.) Or install Visual Studio or Visual Studio Express. If you want to build unit test assemblies, install NuGet and then restore NUnit packages. Run: msbuild MsgPack.sln Or (for .NET 3.5 drops and Unity 3D drops): msbuild MsgPack.compats.sln Or (for Windows Runtime/Phone drops and Silverlight 5 drops): msbuild MsgPack.Windows.sln Or (for Xamarin drops, you must have Xamarin Business or upper license and Mac machine on the LAN to build on Windows): msbuild MsgPack.Xamarin.sln Or open one of above solution files in your IDE and run build command in it. For Mono Open MsgPack.mono.sln with MonoDevelop and then click Build menu item. (Of cource, you can build via xbuild.) Own Unity 3D Build First of all, there are binary drops on github release page, you should use it to save your time. Because we will not guarantee source code organization compatibilities, we might add/remove non-public types or members, which should break source code build. If you want to import sources, you must include just only described on MsgPack.Unity3D.csproj. If you want to use "".NET 2.0 Subset"" settings, you must use just only described on MsgPack.Unity3D.CorLibOnly.csproj file, and define CORLIB_ONLY compiler constants. See also GitHub Page : http://cli.msgpack.org/ Wiki (documentation) : https://github.com/msgpack/msgpack-cli/wiki API Reference : http://cli.msgpack.org/doc/top.html Issue tracker : https://github.com/msgpack/msgpack-cli/issues MSBuild reference : http://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx Mono xbuild reference : http://www.mono-project.com/Microsoft.Build Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/msgpack/msgpack-cli"	"MessagePack implementation for Common Language Infrastructure"	"true"
"Serialization"	"Jil"	"https://github.com/kevin-montrose/Jil"	"Fast.NET JSON Serializer, built on Sigil (used by StackOverflow)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1274"	"116"	"167"	"GitHub - kevin-montrose/Jil: Fast .NET JSON (De)Serializer, Built On Sigil Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 116 Star 1,274 Fork 167 kevin-montrose/Jil Code Issues 35 Pull requests 4 Wiki Pulse Graphs Fast .NET JSON (De)Serializer, Built On Sigil 1,209 commits 16 branches 53 releases 17 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags core-clr datetime-sanity discriminant-unions dynamic-serializer issue-37 issue-52 issue-63 issue90 master mos-char-buffer-vs-string-builder pr-46 serialize-to-string string-builder-alternative string-deserializer timespan-support type-converter Nothing to show so-question benchmark1 2.14.3 2.14.2 2.14.1 2.14.0 2.13.0 2.13.0-beta1 2.12.1 2.12.0 2.11.0 2.10.0 2.9.0 2.8.1 2.8.0 2.7.2 2.7.1 2.7.0 2.6.0 2.5.2 2.5.1 2.5.0 2.4.0 2.3.1 2.3.0 2.2.0 2.1.1 2.1.0 2.0.2 2.0.1 2.0.0 1.7.2 1.7.1 1.7.0 1.6.1 1.6.0 1.5.0 1.4.0 1.3.1 1.3.0 1.2.1 1.2.0 1.1.0 1.0.3 1.0.2 1.0.1 1.0.0 0.5.5 0.5.4 0.5.3 0.5.2 0.5.1 0.5.0 Nothing to show New pull request Latest commit 75ffc89 May 5, 2016 kevin-montrose 2.14.3 Permalink Failed to load latest commit information. Benchmark Merge pull request #98 from alexandrnikitin/FixesSmallMisprint Jan 4, 2015 Experiments update to Sigil 4.6.1 May 5, 2016 Jil.StrongName update to Sigil 4.6.1 May 5, 2016 Jil 2.14.3 May 5, 2016 JilTests update to Sigil 4.6.1 May 5, 2016 Nuget 2.14.3 May 5, 2016 packages update to Sigil 4.6.1 May 5, 2016 .gitignore update .gitignore Feb 5, 2016 CREDITS.md line breaks! Aug 18, 2014 Jil.sln add Jil.StrongName Jan 24, 2015 LICENSE update copyright dates on LICENSE Jan 25, 2015 README.md update README.md Mar 31, 2016 README.md Jil A fast JSON (de)serializer, built on Sigil with a number of somewhat crazy optimization tricks. Releases are available on Nuget in addition to this repository. Usage Serializing using(var output = new StringWriter()) {     JSON.Serialize(         new         {             MyInt = 1,             MyString = ""hello world"",             // etc.         },         output     ); } There is also a Serialize method that returns a string. The first time Jil is used to serialize a given configuration and type pair, it will spend extra time building the serializer. Subsequent invocations will be much faster, so if a consistently fast runtime is necessary in your code you may want to ""prime the pump"" with an earlier ""throw away"" serialization. Dynamic Serialization If you need to serialize compile-time unknown types (including subclasses, and virtual properties) you should use JSON.SerializeDynamic instead. JSON.SerializeDynamic does not require a generic type parameter, and can cope with subclasses, object/dynamic members, and DLR participating types such as ExpandoObject and DynamicObject. Deserializing using(var input = new StringReader(myString)) {     var result = JSON.Deserialize<MyType>(input); } There is also a Deserialize method that takes a string as input. The first time Jil is used to deserialize a given configuration and type pair, it will spend extra time building the deserializer. Subsequent invocations will be much faster, so if a consistently fast runtime is necessary in your code you may want to ""prime the pump"" with an earlier ""throw away"" deserialization. Dynamic Deserialization using(var input = new StringReader(myString)) {     var result = JSON.DeserializeDynamic(input); } There is also a DeserializeDynamic method that works directly on strings. These methods return dynamic, and support the following operations: Casts ie. (int)JSON.DeserializeDynamic(""123"") Member access ie. JSON.DeserializeDynamic(@""{""""A"""":123}"").A Indexers ie. JSON.DeserializeDynamic(@""{""""A"""":123}"")[""A""] or JSON.DeserializeDynamic(""[0, 1, 2]"")[0] Foreach loops ie. foreach(var keyValue in JSON.DeserializeDynamic(@""{""""A"""":123}"")) { ... } in this example, keyValue is a dynamic with Key and Value properties or foreach(var item in JSON.DeserializeDynamic(""[0, 1, 2]"")) { ... } in this example, item is a dynamic and will have values 0, 1, and 2 Common unary operators (+, -, and !) Common binary operators (&&, ||, +, -, *, /, ==, !=, <, <=, >, and >=) .Length & .Count on arrays .ContainsKey(string) on objects Supported Types Jil will only (de)serialize types that can be reasonably represented as JSON. The following types (and any user defined types composed of them) are supported: Strings (including char) Booleans Integer numbers (int, long, byte, etc.) Floating point numbers (float, double, and decimal) DateTimes & DateTimeOffsets Note that DateTimes are converted to UTC time to allow for round-tripping, use DateTimeOffsets if you need to preserve timezone information See Configuration for further details TimeSpans See Configuration for further details Nullable types Enumerations Including [Flags] Guids Only the ""D"" format IList<T>, ICollection<T>, and IReadOnlyList<T> implementations IDictionary<TKey, TValue> implementations where TKey is a string or enumeration ISet<T> Jil deserializes public fields and properties; the order in which they are serialized is not defined (it is unlikely to be in declaration order). The DataMemberAttribute.Name property and IgnoreDataMemberAttribute are respected by Jil, as is the ShouldSerializeXXX() pattern. For situations where DataMemberAttribute and IgnoreDataMemberAttribute cannot be used, Jil provides the JilDirectiveAttribute which provides equivalent functionality. Strong typing of primitives types (int, long, etc.) can be done by annotating a wrapper type with [JilPrimitiveWrapper]. Such a type should have one declared field or property, and default or single parameter constructor. Unions Jil has limited support for ""unions"" (fields on JSON objects that may contain one of several types), provided that they can be distiguished by their first character. In other words: class LegalUnion {     [JilDirective(Name = ""Foo"", IsUnion = true)]     public string FooString { get; set; }     [JilDirective(Name = ""Foo"", IsUnion = true)]     public int FooInt { get; set; } } Is allowed because the first character of a JSON string is always "", while the first character of a JSON number is a digit or -. The following would not be legal, however. class IllegalUnion {     [JilDirective(Name = ""Foo"", IsUnion = true)]     public uint FooUInt { get; set; }     [JilDirective(Name = ""Foo"", IsUnion = true)]     public double FooDouble { get; set; } } Since both properties could start with a digit. You can also use a Type member to determine which field was (de)serialized. class WithUnionType {     [JilDirective(Name = ""Foo"", IsUnion = true, IsUnionType = true)]     public Type FooType { get; set; }      [JilDirective(Name = ""Foo"", IsUnion = true)]     public uint FooUInt { get; set; }     [JilDirective(Name = ""Foo"", IsUnion = true)]     public List<int> FooList { get; set; }  } When serializing this field must be set. Configuration Jil's JSON.Serialize and JSON.Deserialize methods take an optional Options parameter which controls: The format of DateTimes, DateTimeOffsets, and TimeSpans; one of MicrosoftStyleMillisecondsSinceUnixEpoch, a string ""\/Date(##...##)\/"" for DateTimes & DateTimeOffsets ""1.23:45:56.78"" for TimeSpans MillisecondsSinceUnixEpoch, a number for DateTimes & DateTimeOffsets it can be passed directly to JavaScript's Date() constructor for TimeSpans it's simply TimeSpan.TotalMilliseconds SecondsSinceUnixEpoch, a number for DateTimes & DateTimeOffsets this is commonly refered to as unix time for TimeSpans it's simply TimeSpan.TotalSeconds ISO8601, a string for DateTimes & DateTimeOffsets, ie. ""2011-07-14T19:43:37Z"" DateTimes are always serialized in UTC (timezone offset = 00:00), because Local DateTimes cannot reliably roundtrip DateTimeOffsets include their timezone offset when serialized for TimeSpans, ie. ""P40DT11H10M9.4S"" RFC1123, a string for DateTimes and DateTimeOffsets, ie. ""Thu, 10 Apr 2008 13:30:00 GMT"" ""1.23:45:56.78"" for TimeSpans What to treat DateTimes with an Unspecified DateTimeKind as; one of IsLocal, will treat an unspecified DateTime as if it were in local time IsUtc, will treat an unspecified DateTime as if it were in UTC Whether or not to exclude null values when serializing dictionaries, and object members Whether or not to ""pretty print"" while serializing, which adds extra linebreaks and whitespace for presentation's sake Whether or not the serialized JSON will be used as JSONP (which requires slightly more work be done w.r.t. escaping) Whether or not to include inherited members when serializing The way to format member names; one of Verbatim As it appears in source, unless modified by a [MemberName] or [JilDirective] CamelCase lowercasing the first letter of members, ie. ""CamelCase"" would become ""camelCase"" Benchmarks Jil aims to be the fastest general purpose JSON (de)serializer for .NET. Flexibility and ""nice to have"" features are explicitly discounted in the pursuit of speed. These benchmarks were run on a machine with the following specs: Operating System: Windows 8.1 Enterprise 64-bit (6.3, Build 9600) (9600.winblue_r3.140827-1500) System Manufacturer: Apple Inc. System Model: MacBookPro11,3 Processor: Intel(R) Core(TM) i7-4960HQ CPU @ 2.60GHz (8 CPUs), ~2.6GHz Memory: 16384MB RAM DDR3 Dual Channel 798.1 MHZ As with all benchmarks, take these with a grain of salt. Serialization For comparison, here's how Jil stacks up against other popular .NET serializers in a synthetic benchmark: Json.NET - JSON library included with ASP.NET MVC, version 6.0.7 ServiceStack.Text - JSON, CSV, and JSV library; a part of the ServiceStack framework, version 3.9.71 protobuf-net - binary serializer for Google's Protocol Buffers, version 2.0.0.688 does not serialize JSON, included as a baseline All three libraries are in use at Stack Exchange in various production roles. Note that the bars in each group of each graph are scaled so that the fastest library is 100. Numbers, include millisecond timings, can found in this Google Document. The Question, Answer, and User types are taken from the Stack Exchange API. Data for each type is randomly generated from a fixed seed. Random text is biased towards ASCII*, but includes all unicode. *This is meant to simulate typical content from the Stack Exchange API. Deserialization The same libraries and same types were used to test deserialization. Note that the bars in each group of each graph are scaled so that the fastest library is 100. Numbers, include millisecond timings, can be found in the same Google Document. Tricks Jil has a lot of tricks to make it fast. These may be interesting, even if Jil itself is too limited for your use. Sigil Jil does a lot of IL generation to produce tight, focused code. While possible with ILGenerator, Jil instead uses the Sigil library. Sigil automatically does a lot of the busy work you'd normally have to do manually to produce ideal IL. Using Sigil also makes hacking on Jil much more productive, as debuging IL generation without it is pretty slow going. Trade Memory For Speed Jil's internal serializers and deserializers are (in the absense of recursive types) monolithic, and per-type; avoiding extra runtime lookups, and giving .NET's JIT more context when generating machine code. The methods Jil create also do no Options checking at serialization time; Options are baked in at first use. This means that Jil may create up to 32 different serializers and 8 different deserializers for a single type (though in practice, many fewer). Optimizing Member Access Order Perhaps the most arcane code in Jil determines the preferred order to access members, so the CPU doesn't stall waiting for values from memory. Members are divided up into 4 groups: Simple primitive ValueTypes such as int, double, etc. Nullable Types Recursive Types Everything Else Members within each group are ordered by the offset of the fields backing them (properties are decompiled to determine fields they use). This is a fairly naive implementation of this idea, there's almost certainly more that could be squeezed out especially with regards to consistency of gains. Don't Allocate If You Can Avoid It .NET's GC is excellent, but no-GC is still faster than any-GC. Jil tries to avoid allocating any reference types, with some exceptions: a 36-length char[] if any integer numbers, DateTimes, or GUIDs are being serialized a 32-length char[] if any strings, user defined objects, or ISO8601 DateTimes are being deserialized Depending on the data being deserialized a StringBuilder may also be allocated. If a TextWriter does not have an invariant culture, strings may also be allocated when serializing floating point numbers. Escaping Tricks JSON has escaping rules for \, "", and control characters. These can be kind of time consuming to deal with. Jil avoids it as much as possible in two ways. First, all known key names are determined once and baked into the generated delegates like so. Known keys are member names and enumeration values. Second, rather than lookup encoded characters in a dictionary or a long series of branches Jil does explicit checks for "" and \ and turns the rest into a subtraction and jump table lookup. This comes out to ~three branches (with mostly consistently taken paths, good for branch prediction in theory) per character. This works because control characters in .NET strings (bascally UTF-16, but might as well be ASCII for this trick) are sequential, being [0,31]. JSONP also requires escaping of line separator (\u2028) and paragraph separator (\u2029) characters. When configured to serialize JSONP, Jil escapes them in the same manner as \ and "". Custom Number Formatting While number formatting in .NET is pretty fast, it has a lot of baggage to handle custom number formatting. Since JSON has a strict definition of a number, a Write() implementation without configuration is noticeably faster. To go the extra mile, Jil contains separate implementations for int, uint, ulong, and long. Jil does not include custom decimal, double, or single Write() implementations, as despite my best efforts I haven't been able to beat the ones built into .NET. If you think you're up to the challenge, I'd be really interested in seeing code that is faster than the included implementations. Custom Date Formatting Similarly to numbers, each of Jil's date formats has a custom Write() implementation. ISO8601 can be unrolled into a smaller number of / and % instructions RFC1123 can be similarly decomposed Microsoft-style is a subtraction and division, then fed into the custom long writing code Milliseconds since the unix epoch is essentially the same Seconds since the unix epoch just has a different divisor Custom Guid Formatting Noticing a pattern? Jil has a custom Guid writer (which is one of the reasons Jil only supports the D format). Fun fact about this method, I tested a more branch heavy version (which removed the byte lookup) which turned out to be considerably slower than the built-in method due to branch prediction failures. Type 4 Guids being random makes for something quite close to the worst case for branch prediciton. Different Code For Arrays Although arrays implement IList<T> the JIT generates much better code if you give it array-ish IL to chew on, so Jil does so. Special Casing Enumerations With Sequential Values Many enums end up having sequential values, Jil will exploit this if possible and generate a subtraction and jump table lookup. Non-sequential enumerations are handled with a long series of branches. Custom Number Readers Just like Jil maintains many different methods for writing integer types, it also maintains different methods for reading them. These methods omit unnecessary sign checks, overflow checks, and culture-specific formatting support. Automata Based Member Name Lookups Rather than read a member name into a string or buffer when deserializing, Jil will try to match it one character at a time using an automata. Avoid Abstractions If Able If you're serializing to string (as indicated by using a particular Serialize<T> method) Jil will avoid the overhead of virtually dispatching calls against TextWriter, and instead statically call against its own specialized StringBuilder-eqsue class. In the general case Jil prefers to write against a TextWriter so as to keep memory pressure low (a real concern in many real world deployments), but when Jil is going to allocate a string anyway avoiding virtual dispatch results in a noticeable speed up. Simiarly, deserializing from string (as indicated by this Deserialize<T> method) Jil avoid using TextReader, and instead issue static calls against a lightweight wrapper of its own. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kevin-montrose/Jil"	"Fast.NET JSON Serializer, built on Sigil (used by StackOverflow)"	"true"
"Serialization"	"ProtoBuf"	"https://github.com/hultqvist/ProtoBuf"	"Generate C# code for protocol buffer serialization from a.proto specification."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"137"	"27"	"56"	"GitHub - hultqvist/protobuf: C# code generator for reading and writing the protocol buffers format Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 137 Fork 56 hultqvist/protobuf Code Issues 7 Pull requests 0 Pulse Graphs C# code generator for reading and writing the protocol buffers format https://silentorbit.com/protobuf/ 208 commits 5 branches 2 releases 5 contributors C# 97.4% Protocol Buffer 2.6% C# Protocol Buffer Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dnx feature/implement-parser gh-pages master options Nothing to show 2015-04-08 2014-08-23 Nothing to show New pull request Latest commit 7efe5e9 Jul 4, 2016 hultqvist Use ""global::"" to avoid namespace-class collision. Permalink Failed to load latest commit information. CodeGenerator Use ""global::"" to avoid namespace-class collision. Jul 4, 2016 CodeWriter CodeWriter. writing <param> comments Feb 26, 2016 TestLibrary Old tests compiling and passing May 5, 2016 TestProgram Test SkipKey and PositionStream added Seek feature. May 5, 2016 UnitTestProject Test SkipKey and PositionStream added Seek feature. May 5, 2016 commandline @ e00dd9f New command line syntax. Aug 7, 2013 packages Converted test to NUnit tests Jan 2, 2015 .gitignore .gitignore packages/ Apr 22, 2015 .gitmodules New command line syntax. Aug 7, 2013 Apache License, Version 2.0.txt Changed license to the Apache License 2.0 Apr 28, 2012 Building.markdown Import implemented Jun 5, 2015 COPYING Apache License, Version 2.0.txt Changed license to the Apache License 2.0 Apr 28, 2012 CodeGenerator.sln Old tests compiling and passing May 5, 2016 README.markdown Download instructions Nov 11, 2014 Test.sln Removed previous project Tests. May 5, 2016 README.markdown Protocol Buffers C# Code Generator https://silentorbit.com/protobuf/ C# code generator for serialization into Googles Protocol Buffers wire format. Parses a .proto file and generates C# source files with classes for every message as well as code for reading and writing them to the Protocol Buffers binary format. Download Get the precompiled binaries here. Get the source using git: git clone https://github.com/hultqvist/ProtoBuf.git --recursive  Don't use the ""download zip"" feature on github as it won't include submodules such as CommandLine Basic Features CodeGenerator - transform a .proto specification directly into complete c# code. Generated code is relatively easy to debug(only hope you wont have too) Generated code does not use reflection, works after code obfuscation. Advanced Features These features are local to this project. They affect how you will work with the generated code. It does not affect the final wire format. Any other Protocol Buffers implementation should be able to communicate using the same .proto specification. For the latest features, see Test/csharpgen.proto These local features are implemented in the Test project. Message options: access - set the acces of the generated class to internal rather than public. triggers - have the class methods BeforeSerialize and AfterDeserialize called accordingly. preserverunknown - keep all unknown fields during deserialization to be written back when serializing the class. external - generate serialization code for a class we don't have control over, such as one from a third party DLL. imported - utilize already generated code in the current generated messages. type - default: class, but you can make the serializer work with struct or interfaces. Field options: access - default: public, can be any, even private if generating a local class(default) codetype - set an int64 field type to ""DateTime"" or ""TimeSpan"", the serializer will do the conversion for you. generate - if set to false(default: true), the field/property is expected to be defined elsewhere in the project rather than the generated code. readonly - make the message field a c# readonly field rather than a property. Example This is a part of the Test/Example.proto: package ExampleNamespace;  message Person {   option namespace = ""Personal"";    required string name = 1;   required int32 id = 2;   optional string email = 3;    enum PhoneType {     MOBILE = 0;     HOME = 1;     WORK = 2;   }    message PhoneNumber {     required string number = 1;     optional PhoneType type = 2 [default = HOME];   }    repeated PhoneNumber phone = 4; }  When compiled it you will have the following class to work with. public partial class Person {     public enum PhoneType     {         MOBILE = 0,         HOME = 1,         WORK = 2,     }      public string Name { get; set; }     public int Id { get; set; }     public string Email { get; set; }     public List<Personal.Person.PhoneNumber> Phone { get; set; }       public partial class PhoneNumber     {         public string Number { get; set; }         public Personal.Person.PhoneType Type { get; set; }     } }  Writing this to a stream: Person person = new Person(); ... Person.Serialize(stream, person);  Reading from a stream: Person person2 = Person.Deserialize(stream);  Usage CodeGenerator.exe Example.proto [output.cs]  If the optional output.cs parameter is omitted it will default to the basename of the .proto file. In this example it would be Example.cs The output is three files. Example.cs - Basic class declaration(based on .proto). Example.Serializer.cs - Code for reading/writing the message. ProtocolParser.cs - Functions for reading and writing the protobuf wire format, static, not related to the contents of your .proto. If you generate code from multiple .proto files you must only include ProtocolParser.cs once in your project. Direct Contact, FeedBack, Bugs You can contact me using phq@silentorbit.com . Public issues can also be submitted to the GitHub project page. Licence, Apache License version 2.0 All source code and generated code is licensed under the Apache License Version 2.0. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hultqvist/ProtoBuf"	"Generate C# code for protocol buffer serialization from a.proto specification."	"true"
"Serialization"	"Bond"	"https://github.com/Microsoft/bond"	"cross-platform framework for working with schematized data. It supports cross-language de/serialization and powerful generic mechanisms for efficiently manipulating data."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1362"	"144"	"167"	"GitHub - Microsoft/bond: Bond is a cross-platform framework for working with schematized data. It supports cross-language de/serialization and powerful generic mechanisms for efficiently manipulating data. Bond is broadly used at Microsoft in high scale services. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 144 Star 1,362 Fork 167 Microsoft/bond Code Issues 39 Pull requests 1 Pulse Graphs Bond is a cross-platform framework for working with schematized data. It supports cross-language de/serialization and powerful generic mechanisms for efficiently manipulating data. Bond is broadly used at Microsoft in high scale services. 475 commits 4 branches 6 releases 21 contributors C# 51.3% C++ 39.7% Haskell 7.0% CMake 1.3% Other 0.7% C# C++ Haskell CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fsharp gh-pages lalo/app-veyor-boost master Nothing to show 4.2.1 4.2.0 4.1.0 4.0.2 4.0.1 3.0.7 Nothing to show New pull request Latest commit b829a4e Jul 15, 2016 chadwalters committed on GitHub Merge pull request #204 from tstein/master … Fully qualify names in cpp apply overloads. Permalink Failed to load latest commit information. cmake Group CMake targets into folders Oct 28, 2015 compiler [gbc] Fully qualify names in cpp apply overloads. Jul 14, 2016 cpp [c++] generate `noexcept` move constructors Jul 1, 2016 cs [epoxy] Add IPv6 support Jul 13, 2016 doc [epoxy] Specify CBv1 marshalled payloads Jul 6, 2016 examples [c#] Connect to epoxy services with ""epoxy://host"". Jul 6, 2016 python Fix extra ref count on blob to PyBytes conversion Nov 23, 2015 test/compat Add nullable/blob info to runtime SchemaDef Jun 14, 2016 thirdparty Initial commit Jan 9, 2015 tools/syntax Tabs to spaces Jan 20, 2016 .gitattributes Add .gitattributes to help with newline issues Apr 18, 2016 .gitignore Update .gitignore to exclude CMake & Emacs files Jan 19, 2016 .gitmodules Initial commit Jan 9, 2015 .travis.yml Work around the old wget version in Travis CI Nov 5, 2015 CHANGELOG.md [gbc] Fully qualify names in cpp apply overloads. Jul 14, 2016 CMakeLists.txt Group CMake targets into folders Oct 29, 2015 CONTRIBUTING.md Add Code of Conduct info to CONTRIBUTING.md Jun 21, 2016 LICENSE Initial commit Jan 9, 2015 README.md Add Code of Conduct info to CONTRIBUTING.md Jun 21, 2016 appveyor.yml Disable Comm unit tests in AppVeyor build Jun 1, 2016 README.md Bond Bond is an open source, cross-platform framework for working with schematized data. It supports cross-language serialization/deserialization and powerful generic mechanisms for efficiently manipulating data. Bond is broadly used at Microsoft in high scale services. We are also introducing the Bond Communications framework--known as Bond Comm--which allows for remote process communication. Currently, we are making the C# version of this framework available; the C++ version will be released in the coming weeks. This framework is based on is the successor to an internal framework that is used by several large services inside Microsoft. Bond Comm is undergoing active evolution at this time and so we are marking the initial release as version 0.5. Consult the C# manual for more details on Bond Comm's usage and capabilities. Bond is published on GitHub at https://github.com/Microsoft/bond/. For details, see the User's Manuals for C++, C# and Python, and the documentation of the compiler tool and library. For a discussion how Bond compares to similar frameworks see Why Bond. Dependencies The Bond repository uses Git submodules and should be cloned with the --recursive flag: git clone --recursive https://github.com/Microsoft/bond.git  In order to build Bond you will need CMake (2.8.12+), Haskell (ghc 7.4+ and cabal-install 1.18+) and Boost (1.54+). The core Bond C++ library can be used with C++03 compilers, although Python support, unit tests and various examples require some C++11 features. Following are specific instructions for building on various platforms. Linux Bond can be built with Clang (3.4+) or GNU C++ (4.7+). We recommend the latest version of Clang as it's much faster with template-heavy code like Bond. Run the following commands to install the minimal set of packages needed to build the core Bond library on Ubuntu 14.04: sudo apt-get install \     clang \     cmake \     zlib1g-dev \     ghc \     cabal-install \     libboost-dev \     libboost-thread-dev  cabal update cabal install cabal-install  In the root bond directory run: mkdir build cd build cmake .. make sudo make install  The build directory is just an example. Any directory can be used as the build destination. In order to build all the C++ and Python tests and examples, a few more packages are needed: sudo apt-get install \     python2.7-dev \     libboost-date-time-dev \     libboost-test-dev \     libboost-python-dev  cabal install happy  Running the following command in the build directory will build and execute all the tests and examples: make --jobs 8 check  (The unit tests are large so you may want to run 4-8 build jobs in parallel, assuming you have enough memory.) OS X Install Xcode and then run the following command to install the required packages using Homebrew (http://brew.sh/): brew install \     cmake \     ghc \     cabal-install \     boost \     boost-python  (boost-python is optional and only needed for Python support.) Update the cabal package database and install happy (only needed for tests): cabal update cabal install happy  Bond can be built on OS X using either standard *nix makefiles or Xcode. In order to generate and build from makefiles, in the root bond directory run: mkdir build cd build cmake .. make sudo make install  Alternatively, you can generate Xcode projects by passing the -G Xcode option to cmake: cmake -G Xcode ..  You can build and run unit tests by building the check target in Xcode or by running make in the build directory: make --jobs 8 check  Note that if you are using Homebrew's Python, you'll need to build boost-python from source: brew install --build-from-source boost-python  and tell cmake the location of Homebrew's libpython by setting the PYTHON_LIBRARY variable, e.g.: cmake .. \     -DPYTHON_LIBRARY=/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/libpython2.7.dylib  Windows Install the following tools: Visual Studio 2013 or 2015 CMake (http://www.cmake.org/download/) Haskell Platform (http://haskell.org/platform/) If you are building on a network behind a proxy, set the environment variable HTTP_PROXY, e.g.: set HTTP_PROXY=http://your-proxy-name:80  Update the cabal package database: cabal update  Now you are ready to build the C# version of Bond. Open the solution file cs\cs.sln in Visual Studio and build as usual. The C# unit tests can also be run from within the solution. The C++ and Python versions of Bond additionally require: Boost 1.54+ (http://www.boost.org/users/download/) Python 2.7 (https://www.python.org/downloads/) You may need to set the environment variables BOOST_ROOT and BOOST_LIBRARYDIR to specify where Boost and its pre-built libraries for your environment can be found, e.g.: set BOOST_ROOT=D:\boost_1_57_0 set BOOST_LIBRARYDIR=D:\boost_1_57_0\lib64-msvc-12.0  The core Bond library and most examples only require Boost headers. The pre-built libraries are only needed for unit tests and Python support. If Boost or Python libraries are not found on the system, then some tests and examples will not be built. In order to generate a solution to build the C++ and Python versions with Visual Studio 2013 run the following commands from the root bond directory: mkdir build cd build cmake -G ""Visual Studio 12 2013 Win64"" ..  Instead of cmake you can also use cmake-gui and specify configuration settings in the UI. This configuration step has to be performed only once. From then on you can use the generated solution build\bond.sln from Visual Studio or build from command line using cmake: set PreferredToolArchitecture=x64 cmake --build . --target cmake --build . --target INSTALL  In order to build and execute the unit tests and examples run: cmake --build . --target check -- /maxcpucount:8  Setting PreferredToolArchitecture=x64 selects the 64-bit toolchain which dramatically improves build speed. (The Bond unit tests are too big to build with 32-bit tools.) This variable works for Visual Studio 2013 or 2015. For Visual Studio 2012 set the following environment variable instead: set _IsNativeEnvironment=true  Contributing Interested in contributing to Bond? Take a look at our contribution guidelines to get started. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Microsoft/bond"	"cross-platform framework for working with schematized data. It supports cross-language de/serialization and powerful generic mechanisms for efficiently manipulating data."	"true"
"State machines"	"Stateless"	"https://github.com/dotnet-state-machine/stateless"	"Create state machines and lightweight state machine-based workflows directly in.NET code"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"592"	"100"	"139"	"GitHub - dotnet-state-machine/stateless: A simple library for creating state machines in C# code Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 100 Star 592 Fork 139 dotnet-state-machine/stateless Code Issues 23 Pull requests 6 Pulse Graphs A simple library for creating state machines in C# code 68 commits 1 branch 0 releases Fetching contributors C# 53.2% XSLT 18.6% JavaScript 11.3% ASP 9.2% Batchfile 4.8% CSS 1.9% HTML 1.0% C# XSLT JavaScript ASP Batchfile CSS HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 9358133 Jul 2, 2016 nblumhardt committed on GitHub Merge pull request #66 from peter172sp/master … Do not include ignored triggers in the dot graph Permalink Failed to load latest commit information. .nuget Added nuspec and nuget tools. Mar 20, 2013 BugTrackerExample Stateless is now using the Portable Class Library: http://msdn.micros… Oct 27, 2011 NUnit Imported head revision from Subversion repository. Aug 23, 2009 OnOffExample Stateless is now using the Portable Class Library: http://msdn.micros… Oct 27, 2011 Resource/SHFB Imported head revision from Subversion repository. Aug 23, 2009 Stateless.Tests Do not include ignored triggers in the dot graph since both ignored a… Jul 1, 2016 Stateless Do not include ignored triggers in the dot graph since both ignored a… Jul 1, 2016 TelephoneCallExample Stateless is now using the Portable Class Library: http://msdn.micros… Oct 27, 2011 packages/NuGet.CommandLine.2.2.1 Added nuspec and nuget tools. Mar 19, 2013 .gitignore DotGraph now renders OnEntry and On Exit actions with descriptions Nov 26, 2015 .hgignore Upgraded to VS2010. Sep 26, 2010 LICENSE Applying Apache license May 31, 2015 README.md Update README.md Mar 30, 2016 Stateless.shfb Updated help file to ensure HHC is found. Sep 28, 2010 Stateless.sln Added nuspec and nuget tools. Mar 19, 2013 appveyor.yml Use the correct NuGet API key encoding for the new AppVeyor account. Jan 25, 2016 README.md Stateless Create state machines and lightweight state machine-based workflows directly in .NET code: var phoneCall = new StateMachine<State, Trigger>(State.OffHook);  phoneCall.Configure(State.OffHook)     .Permit(Trigger.CallDialed, State.Ringing);  phoneCall.Configure(State.Ringing)     .Permit(Trigger.HungUp, State.OffHook)     .Permit(Trigger.CallConnected, State.Connected);  phoneCall.Configure(State.Connected)     .OnEntry(() => StartCallTimer())     .OnExit(() => StopCallTimer())     .Permit(Trigger.LeftMessage, State.OffHook)     .Permit(Trigger.HungUp, State.OffHook)     .Permit(Trigger.PlacedOnHold, State.OnHold);  // ...  phoneCall.Fire(Trigger.CallDialled); Assert.AreEqual(State.Ringing, phoneCall.State); This project, as well as the example above, was inspired by Simple State Machine. Features Most standard state machine constructs are supported: Generic support for states and triggers of any .NET type (numbers, strings, enums, etc.) Hierarchical states Entry/exit events for states Guard clauses to support conditional transitions Introspection Some useful extensions are also provided: Ability to store state externally (for example, in a property tracked by an ORM) Parameterised triggers Reentrant states Export to DOT graph Hierarchical States In the example below, the OnHold state is a substate of the Connected state. This means that an OnHold call is still connected. phoneCall.Configure(State.OnHold)     .SubstateOf(State.Connected)     .Permit(Trigger.TakenOffHold, State.Connected)     .Permit(Trigger.HungUp, State.OffHook)     .Permit(Trigger.PhoneHurledAgainstWall, State.PhoneDestroyed); In addition to the StateMachine.State property, which will report the precise current state, an IsInState(State) method is provided. IsInState(State) will take substates into account, so that if the example above was in the OnHold state, IsInState(State.Connected) would also evaluate to true. Entry/Exit Events In the example, the StartCallTimer() method will be executed when a call is connected. The StopCallTimer() will be executed when call completes (by either hanging up or hurling the phone against the wall.) The call can move between the Connected and OnHold states without the StartCallTimer() and StopCallTimer() methods being called repeatedly because the OnHold state is a substate of the Connected state. Entry/Exit event handlers can be supplied with a parameter of type Transition that describes the trigger, source and destination states. External State Storage Stateless has been designed with encapsulation within an ORM-ed domain model in mind. Some ORMs place requirements upon where mapped data may be stored. To this end, the StateMachine constructor can accept function arguments that will be used to read and write the state values: var stateMachine = new StateMachine<State, Trigger>(     () => myState.Value,     s => myState.Value = s); In this example the state machine will use the myState object for state storage. Introspection The state machine can provide a list of the triggers than can be successfully fired within the current state via the StateMachine.PermittedTriggers property. Guard Clauses The state machine will choose between multiple transitions based on guard clauses, e.g.: phoneCall.Configure(State.OffHook)     .PermitIf(Trigger.CallDialled, State.Ringing, () => IsValidNumber)     .PermitIf(Trigger.CallDialled, State.Beeping, () => !IsValidNumber); Guard clauses within a state must be mutually exclusive (multiple guard clauses cannot be valid at the same time.) Substates can override transitions by respecifying them, however substates cannot disallow transitions that are allowed by the superstate. Parameterised Triggers Strongly-typed parameters can be assigned to triggers: var assignTrigger = stateMachine.SetTriggerParameters<string>(Trigger.Assign);  stateMachine.Configure(State.Assigned)     .OnEntryFrom(assignTrigger, email => OnAssigned(email));  stateMachine.Fire(assignTrigger, ""joe@example.com""); Trigger parameters can be used to dynamically select the destination state using the PermitDynamic() configuration method. Ignored Transitions and Reentrant States Firing a trigger that does not have an allowed transition associated with it will cause an exception to be thrown. To ignore triggers within certain states, use the Ignore(TTrigger) directive: phoneCall.Configure(State.Connected)     .Ignore(Trigger.CallDialled); Alternatively, a state can be marked reentrant so its entry and exit events will fire even when transitioning from/to itself: stateMachine.Configure(State.Assigned)     .PermitReentry(Trigger.Assigned)     .OnEntry(() => SendEmailToAssignee()); By default, triggers must be ignored explicitly. To override Stateless's default behaviour of throwing an exception when an unhandled trigger is fired, configure the state machine using the OnUnhandledTrigger method: stateMachine.OnUnhandledTrigger((state, trigger) => { }); Export to DOT graph It can be useful to visualize state machines on runtime. With this approach the code is the authoritative source and state diagrams are by-products which are always up to date. phoneCall.Configure(State.OffHook)     .PermitIf(Trigger.CallDialed, State.Ringing, IsValidNumber); string graph = phoneCall.ToDotGraph(); The StateMachine.ToDotGraph() method returns a string representation of the state machine in the DOT graph language, e.g.: digraph {  OffHook -> Ringing [label=""CallDialed [IsValidNumber]""]; } This can then be rendered by tools that support the DOT graph language, such as the dot command line tool from graphviz.org or viz.js. See http://www.webgraphviz.com for instant gratification. Command line example: dot -T pdf -o phoneCall.pdf phoneCall.dot to generate a PDF file. Building Visual Studio 2015 is required to build this project. Project Goals Stateless is a base for exploration of generic and functional programming to drive workflow in .NET. This page is an almost-complete description of Stateless, and its explicit aim is to remain minimal. Please use the issue tracker or the if you'd like to report problems or discuss features. (Why the name? Stateless implements the set of rules regarding state transitions, but, at least when the delegate version of the constructor is used, doesn't maintain any internal state itself.) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dotnet-state-machine/stateless"	"Create state machines and lightweight state machine-based workflows directly in.NET code"	"true"
"State machines"	"Automatonymous"	"https://github.com/MassTransit/Automatonymous"	"A state machine library for.Net - allows you to write fluent style state machines"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"158"	"24"	"48"	"GitHub - MassTransit/Automatonymous: A state machine library for .Net - 100% code - No doodleware Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 158 Fork 48 MassTransit/Automatonymous Code Issues 4 Pull requests 0 Pulse Graphs A state machine library for .Net - 100% code - No doodleware 204 commits 5 branches 16 releases 7 contributors C# 99.2% Other 0.8% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master mt3 v2-develop v2-master Nothing to show v3.3.0 v3.2.1 v3.2.0 v3.1.0 v3.0.5-beta v3.0.4-beta v3.0.3-beta v3.0.2-alpha v3.0.1-alpha v3.0.0-alpha v1.2.10 v1.0.1 v0.7.1 v0.7.1-updated v0.6.4 rm Nothing to show New pull request Latest commit f247cd0 May 3, 2016 phatboyg Fixed build nuget versions Permalink Failed to load latest commit information. doc Update quickstart.rst Jan 21, 2016 src Fixes MassTransit issue #536 related to redeclaring states that are a… May 3, 2016 .gitattributes Added .gitattributes for project Oct 23, 2012 .gitignore Converting to FAKE Jul 23, 2015 Automatonymous.snk Updated for strong name and referenced assemblies Nov 8, 2012 README.md real link now Oct 22, 2012 build.bat Converting to FAKE Jul 24, 2015 build.fsx Fixed build nuget versions May 3, 2016 template.nuspec Converting to FAKE Jul 24, 2015 README.md Automatonymous is a most awesome state machine for .Net applications. It allows you to most quickly write state machines for .Net software, supporting .Net 3.5, 4.0, 4.5 and 4.5 for Apps. Be sure to Read the Docs! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MassTransit/Automatonymous"	"A state machine library for.Net - allows you to write fluent style state machines"	"true"
"Static Site Generators"	"FsBlog"	"https://github.com/fsprojects/FsBlog/"	"Blog aware, static site generation using F#"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"74"	"16"	"46"	"GitHub - fsprojects/FsBlog: Blog aware, static site generation using F#. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 74 Fork 46 fsprojects/FsBlog Code Issues 14 Pull requests 1 Pulse Graphs Blog aware, static site generation using F#. http://fsprojects.github.io/FsBlog 137 commits 2 branches 0 releases Fetching contributors CSS 52.8% F# 23.1% C# 14.1% JavaScript 9.4% Shell 0.4% Batchfile 0.2% CSS F# C# JavaScript Shell Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit f836ce5 Jun 24, 2016 cdrnet committed on GitHub Merge pull request #63 from rachelreese/master … Reorganized structure; fixed bug that uses the wrong string to genera… Permalink Failed to load latest commit information. .github BlogContent Code Merge branch 'master' of https://github.com/fsprojects/FsBlog Jun 20, 2016 .gitattributes Support running FAKE scripts with bash (also on Windows) Nov 8, 2014 .gitignore README.md Merge pull request #36 from JeremyLWright/master Nov 7, 2015 README.md FsBlog Progress: See the Issues and Milestones pages of this repo. FsBlog aims to be a blog-aware static site generator, mostly built in F#. But don't worry, you won't even need to know any F# to get up and running. So long as you are comfortable using a command line or terminal, and have a degree of familiarity with Markdown and Razor syntax - you're good to go! Inspired by the likes of Jekyll and Octopress - and greatly helped along the way by the scripts behind @tomaspetricek's personal website; FsBlog gives the average F# and .NET hacker the tools they need to get a statically built website up and running quickly and hosted somewhere like GitHub Pages. This set of tools have been pulled together using some of the following community projects: FAKE for the automation and scripting of the different tasks. F# Formatting which deals with the Markdown and F# processing/colorization. RazorEngine which is used for the templating and embedded C# code. Some of the code that calls RazorEngine from F# is based on Tilde. Bootstrap 3. Getting started You can just grab the NuGet package and jump straight on to Usage below. Alternatively you can fork or clone the FsBlog repo, then run: build  On Windows, use the 32-bit Visual Studio Command Prompt, the 64-bit solution is not defined. This will build the tools required for usage below. Usage fake generate  Regenerates the entire static website from source files (Markdown and .fsx files). fake preview  Generates the site and then starts up a local web server and launches the output content from the last time it was generated. fake  But preview is also the default behaviour when you run the fake command without any arguments - so that makes it even easier. fake new page=""about fsblog""  Will create a new blank Markdown file in your blog's source files ready for you to author a non-post page of content. fake new post=""hello markdown""  Will create a new blank Markdown file in your blog's source files ready for you to hack away at your next blog post. fake new fsx=""hello fsharp""  Will create a new blank .fsx file in your blog's source files ready for you to hack away at your next code-heavy blog post. To find out more about using .fsx files as the source of your posts, check out F# Formatting: Literate programming. fake clean  Will remove all files from the output folder Theming FsBlog supports theming. New theme can be installed by running: fake install theme=""theme-name""  Once the new theme is installed, FsBlog will use the theme to generate the entire site. Themes are located in themes folder. Please see the default theme for the sample. Config.yml The config.yml is a YAML file that contains configuration settings used by FsBlog. You can specify the following settings: source : a root folder that contains main razor (index.cshtml) and Markdown (*.md) files to be processed when fake generate is run. blog : a folder that contains razor (.cshtml) and Markdown (.md) files to be processed as blog posts. content : a folder contains files for an active theme. output : a folder contains generated static website. themes : a folder contains FsBlog themes. Remarks Note: the documentation above is currently little more than a specification for the command line tooling. It is currently subject to change. This project is at a very early stage - so bare with me. Maintainer(s) @MattDrivenDev @nelak @cdrnet @tpetricek The default maintainer account for projects under ""fsprojects"" is @fsprojectsgit - F# Community Project Incubation Space (repo management) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fsprojects/FsBlog/"	"Blog aware, static site generation using F#"	"true"
"Static Site Generators"	"Pretzel"	"https://github.com/Code52/pretzel"	"A site generation tool (and then some) for.NET platforms"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"454"	"40"	"173"	"GitHub - Code52/pretzel: A site generation tool (and then some) for .NET platforms Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 40 Star 454 Fork 173 Code52/pretzel Code Issues 25 Pull requests 3 Wiki Pulse Graphs A site generation tool (and then some) for .NET platforms 806 commits 4 branches 3 releases 47 contributors C# 98.1% Other 1.9% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Accessible-config PretzelOnAzure gh-pages master Nothing to show v0.4.0 v0.3.0 v0.2.0 Nothing to show New pull request Latest commit d3b3aa3 Jul 13, 2016 laedit committed on GitHub Merge pull request #306 from tditiecher/master … Added support for specifying frontmatter defaults in _config.yml Permalink Failed to load latest commit information. BuildScripts Fix build scripts Nov 28, 2015 libs Fix post_url tag Nov 5, 2015 src Added unit tests for defaults configuration. Jul 13, 2016 tools Add release notes link to nuspec files Jan 23, 2016 .editorconfig Add editorconfig file Nov 11, 2015 .gitattributes added attributes file Mar 19, 2013 .gitignore Add editorconfig file Nov 11, 2015 CONTRIBUTING.md Add info for new functionalities [skipci] Jul 2, 2016 GitVersionConfig.yaml Fix unique version for each build Aug 10, 2015 LICENSE.md line endings cleanup Mar 19, 2013 README.md Update README URLs based on HTTP redirects Feb 13, 2016 ReleaseNotes.md Update release notes Jan 23, 2016 appveyor.yml Fix build scripts Nov 28, 2015 pretzel.png Add Pretzel icon Jan 25, 2015 README.md Pretzel A simple, pluggable site generation tool for .NET developers and Windows users (with Mono support planned I think) Pretzel follows the same conventions as Jekyll and should be compatible with basic Jekyll websites. If you are not familiar with Jekyll, have a read at http://jekyllrb.com/docs/usage/ Usage The principal commands are the following but more informations are available on the wiki Create is used to create the folder structure for a new site. pretzel create  If the site should be at a specific folder, this can be specified as a parameter: pretzel create C:\path\to\folder  Bake is used to generate a site based on the contents of a folder. To scan the current directory for a website and detect the content to process, run: pretzel bake   To scan a specific folder and parse the contents, run: pretzel bake C:\path\to\folder  To explicitly specify the input - we should support inferring the input based on the files found anyway - run: pretzel bake --engine liquid  Taste is for testing a site locally - make a change, and pretzel should handle regenerating the page when a file changes. To test a site locally, run: pretzel taste   To specify the port to serve the site from (default will be 4000), run: pretzel taste --port 5000  To stop the site, press q. More infos on the wiki Contributing All contributions are welcome, please read our contributing guide. Attribution “Pretzel” symbol by Edward Boatman on The Noun Project, from The Noun Project collection. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Code52/pretzel"	"A site generation tool (and then some) for.NET platforms"	"true"
"Static Site Generators"	"Sandra.Snow"	"https://github.com/Sandra/Sandra.Snow"	"Jekyll inspired static site generation for.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"209"	"27"	"66"	"GitHub - Sandra/Sandra.Snow: Jekyll inspired static site generation for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 209 Fork 66 Sandra/Sandra.Snow Code Issues 16 Pull requests 1 Wiki Pulse Graphs Jekyll inspired static site generation for .NET 334 commits 1 branch 0 releases Fetching contributors C# 59.3% HTML 24.4% CSS 12.6% JavaScript 2.7% Batchfile 1.0% C# HTML CSS JavaScript Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit c753204 Jul 9, 2015 phillip-haydon fixed bug by specifying published posts only Permalink Failed to load latest commit information. SnowSite Merge pull request #127 from horsdal/fix-snowbyte-viewmodel-type Mar 28, 2015 _sample-deployment removed* random duplicated files Apr 11, 2014 src fixed bug by specifying published posts only Jul 9, 2015 .gitattributes inital commit May 2, 2013 .gitignore ignoring barbato's snow folder Mar 5, 2014 README.md Update README.md Mar 6, 2015 license.md inital commit May 1, 2013 README.md Sandra.Snow Sandra.Snow is a Jekyll inspired static site generation tool that can be run locally, as a CAAS(Compiler as a Service) or setup with Azure to build your site when your repository changes. It is built on top of NancyFX. Notes Included is 'SnowSite' which Visual Studio will build against and generate a Website folder containing all of the compiled site. Feel free to help out! https://vimeo.com/65055971 This video shows a really rough showcase of setting up an Azure website and deploying the website which gets compiled. How to run the project To run the project when you clone the repository, open up the Project Properties in VS and go to the Debug tab. For the Startup Options there should be a argument called config= this should be the full path to the SnowSite folder. If not then add it. The site should compile when you hit F5 now. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Sandra/Sandra.Snow"	"Jekyll inspired static site generation for.NET"	"true"
"Static Site Generators"	"Wyam"	"http://wyam.io"	"A simple to use, highly modular, and extremely configurable static content generator"	"null"	"null"	"http://stackoverflow.com/questions/4678178/style-guide-for-c"	"null"	"null"	"null"	"null"	"200"	"27"	"46"	"GitHub - Wyamio/Wyam: A modular static content and static site generator. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 200 Fork 46 Wyamio/Wyam Code Issues 81 Pull requests 1 Pulse Graphs A modular static content and static site generator. http://wyam.io 881 commits 2 branches 25 releases 15 contributors C# 95.3% CSS 3.5% JavaScript 0.8% PowerShell 0.2% Shell 0.1% C++ 0.1% C# CSS JavaScript PowerShell Shell C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop master Nothing to show v0.13.2-beta v0.13.1-beta v0.13.0-beta v0.12.4-beta v0.12.3-beta v0.12.2-beta v0.12.1-beta v0.12.0-beta v0.11.5-beta v0.11.4-beta v0.11.3-beta v0.11.2-beta v0.11.1-beta v0.11.0-beta v0.10.0-beta v0.9.0-beta v0.8.0-beta v0.7.0-beta v0.6.0-alpha v0.5.0-alpha v0.4.0-alpha v0.3.0-alpha v0.2.0-alpha v0.1.1-alpha v0.1.0-alpha Nothing to show New pull request Latest commit fab4dba Jul 14, 2016 daveaglick Makes sure to add pre-loaded assemblies to the assembly collection, #324 … Permalink Failed to load latest commit information. .vscode Adding VS Code build task May 18, 2016 examples Removing Rss example output since it's date stamped Jul 11, 2016 lib/System.CommandLine Replacing custom command line argument parsing with System.CommandLin… Dec 30, 2015 src Makes sure to add pre-loaded assemblies to the assembly collection, #324 Jul 14, 2016 themes/Blog Added new Phantom blog theme Jul 12, 2016 tools Added a Wyam.Blog project to hold the blog recipe Jun 6, 2016 .gitignore Big refactoring to rename Wyam.Modules.* to Wyam.* #295 May 31, 2016 CONTRIBUTING.md Documentation, re #124 Nov 9, 2015 LICENSE Lots of work on NuGet versioning, think I've got it now - also now co… Jun 3, 2015 README.md Ported in code from web-feeds as foundation of syndication support Jun 29, 2016 RELEASE Added Wyam.Feeds dependency to Wyam.Blog, 0.13.2 release prep Jul 11, 2016 ReleaseNotes.md Added Wyam.Feeds dependency to Wyam.Blog, 0.13.2 release prep Jul 12, 2016 appveyor.yml Setting up nightly builds, re #134 Jan 15, 2016 build.cake Moved themes to a dedicated root folder and added a build task to pac… Jun 13, 2016 build.cmd Adding VS Code build task May 18, 2016 build.ps1 New Cake bootstrappers May 13, 2016 build.sh New Cake bootstrappers May 13, 2016 README.md Wyam Wyam is a simple to use, highly modular, and extremely configurable static content generator that can be used to generate web sites, produce documentation, create ebooks, and much more. Since everything is configured by chaining together flexible modules (that you can even write yourself), the only limits to what it can create are your imagination. c:\MySite>Wyam.exe --preview --watch Loading configuration from c:\MySite\config.wyam. Cleaning output directory c:\MySite\.\Output... Cleaned output directory. Executing 3 pipelines...     Executing pipeline ""Markdown"" (1/3) with 5 child module(s)...     Executed pipeline ""Markdown"" (1/3) resulting in 0 output document(s).     Executing pipeline ""Razor"" (2/3) with 4 child module(s)...     Executed pipeline ""Razor"" (2/3) resulting in 2 output document(s).     Executing pipeline ""Resources"" (3/3) with 1 child module(s)...     Executed pipeline ""Resources"" (3/3) resulting in 21 output document(s). Executed 3 pipelines. Preview server running on port 5080... Watching folder c:\MySite\.\Input... Hit any key to exit...    For more information see Wyam.io. Acknowledgements Portions of the IO support were originally inspired from Cake under an MIT license. The RSS/Atom support was originally ported from WebFeeds under an MIT license. Many other fantastic OSS libraries are used directly as NuGet packages, thanks to all the OSS authors out there! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Wyamio/Wyam"	"A simple to use, highly modular, and extremely configurable static content generator"	"true"
"Style Guide"	"C# Coding Conventions"	"https://msdn.microsoft.com/library/ff926074.aspx"	"Official MSDN C# code conventions"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"C# Coding Conventions (C# Programming Guide) Developer Network Developer Network Developer Sign in MSDN subscriptions Get tools Technologies App Development Cloud Web Data Gaming Internet of Things Downloads Visual Studio MSDN subscription access SDKs Trial software Free downloads Office resources SharePoint Server 2013 resources SQL Server 2014 Express resources Windows Server 2012 resources Programs MSDN subscriptions Overview Benefits Administrators Students Microsoft Imagine Microsoft Student Partners Architects Overview Case studies Blueprints Blog Forums ISV Startups TechRewards Events Community Magazine Forums Blogs Tech Advisors Channel 9 Documentation APIs and reference Dev centers Samples We’re sorry. The content you requested has been removed. You’ll be auto redirected in 1 second. C# C# Programming Guide Inside a C# Program Inside a C# Program C# Coding Conventions C# Coding Conventions C# Coding Conventions Hello World -- Your First Program General Structure of a C# Program C# Coding Conventions TOC Collapse the table of content Expand the table of content The document is archived and information here might be outdated The document is archived and information here might be outdated C# Coding Conventions (C# Programming Guide) Visual Studio 2015 Other Versions Visual Studio 2013 Visual Studio 2012 Visual Studio 2010   The C# Language Specification does not define a coding standard. However, the guidelines in this topic are used by Microsoft to develop samples and documentation. Coding conventions serve the following purposes: They create a consistent look to the code, so that readers can focus on content, not layout. They enable readers to understand the code more quickly by making assumptions based on previous experience. They facilitate copying, changing, and maintaining the code. They demonstrate C# best practices. Naming Conventions In short examples that do not include using directives, use namespace qualifications. If you know that a namespace is imported by default in a project, you do not have to fully qualify the names from that namespace. Qualified names can be broken after a dot (.) if they are too long for a single line, as shown in the following example. C# Copy  var currentPerformanceCounterCategory = new System.Diagnostics.     PerformanceCounterCategory();  You do not have to change the names of objects that were created by using the Visual Studio designer tools to make them fit other guidelines. Layout Conventions Good layout uses formatting to emphasize the structure of your code and to make the code easier to read. Microsoft examples and samples conform to the following conventions: Use the default Code Editor settings (smart indenting, four-character indents, tabs saved as spaces). For more information, see Options, Text Editor, C#, Formatting. Write only one statement per line. Write only one declaration per line. If continuation lines are not indented automatically, indent them one tab stop (four spaces). Add at least one blank line between method definitions and property definitions. Use parentheses to make clauses in an expression apparent, as shown in the following code. C# Copy  if ((val1 > val2) && (val1 > val3)) {     // Take appropriate action. }  Commenting Conventions Place the comment on a separate line, not at the end of a line of code. Begin comment text with an uppercase letter. End comment text with a period. Insert one space between the comment delimiter (//) and the comment text, as shown in the following example. C# Copy  // The following declaration creates a query. It does not run // the query.  Do not create formatted blocks of asterisks around comments. Language Guidelines The following sections describe practices that the C# team follows to prepare code examples and samples. String Data Type Use the + operator to concatenate short strings, as shown in the following code. C# Copy  string displayName = nameList[n].LastName + "", "" + nameList[n].FirstName;  To append strings in loops, especially when you are working with large amounts of text, use a StringBuilder object. C# Copy  var phrase = ""lalalalalalalalalalalalalalalalalalalalalalalalalalalalalala""; var manyPhrases = new StringBuilder(); for (var i = 0; i < 10000; i++) {     manyPhrases.Append(phrase); } //Console.WriteLine(""tra"" + manyPhrases);  Implicitly Typed Local Variables Use implicit typing for local variables when the type of the variable is obvious from the right side of the assignment, or when the precise type is not important. C# Copy  // When the type of a variable is clear from the context, use var  // in the declaration. var var1 = ""This is clearly a string.""; var var2 = 27; var var3 = Convert.ToInt32(Console.ReadLine());  Do not use var when the type is not apparent from the right side of the assignment. C# Copy  // When the type of a variable is not clear from the context, use an // explicit type. int var4 = ExampleClass.ResultSoFar();  Do not rely on the variable name to specify the type of the variable. It might not be correct. C# Copy  // Naming the following variable inputInt is misleading.  // It is a string. var inputInt = Console.ReadLine(); Console.WriteLine(inputInt);  Avoid the use of var in place of dynamic. Use implicit typing to determine the type of the loop variable in for and foreach loops. The following example uses implicit typing in a for statement. C# Copy  var syllable = ""ha""; var laugh = """"; for (var i = 0; i < 10; i++) {     laugh += syllable;     Console.WriteLine(laugh); }  The following example uses implicit typing in a foreach statement. C# Copy  foreach (var ch in laugh) {     if (ch == 'h')         Console.Write(""H"");     else         Console.Write(ch); } Console.WriteLine();  Unsigned Data Type In general, use int rather than unsigned types. The use of int is common throughout C#, and it is easier to interact with other libraries when you use int. Arrays Use the concise syntax when you initialize arrays on the declaration line. C# Copy  // Preferred syntax. Note that you cannot use var here instead of string[]. string[] vowels1 = { ""a"", ""e"", ""i"", ""o"", ""u"" };   // If you use explicit instantiation, you can use var. var vowels2 = new string[] { ""a"", ""e"", ""i"", ""o"", ""u"" };  // If you specify an array size, you must initialize the elements one at a time. var vowels3 = new string[5]; vowels3[0] = ""a""; vowels3[1] = ""e""; // And so on.  Delegates Use the concise syntax to create instances of a delegate type. C# Copy  // First, in class Program, define the delegate type and a method that   // has a matching signature.  // Define the type. public delegate void Del(string message);  // Define a method that has a matching signature. public static void DelMethod(string str) {     Console.WriteLine(""DelMethod argument: {0}"", str); }  C# Copy  // In the Main method, create an instance of Del.  // Preferred: Create an instance of Del by using condensed syntax. Del exampleDel2 = DelMethod;  // The following declaration uses the full syntax. Del exampleDel1 = new Del(DelMethod);  try-catch and using Statements in Exception Handling Use a try-catch statement for most exception handling. C# Copy  static string GetValueFromArray(string[] array, int index) {     try     {         return array[index];     }     catch (System.IndexOutOfRangeException ex)     {         Console.WriteLine(""Index is out of range: {0}"", index);         throw;     } }  Simplify your code by using the C# using statement. If you have a try-finally statement in which the only code in the finally block is a call to the Dispose method, use a using statement instead. C# Copy  // This try-finally statement only calls Dispose in the finally block. Font font1 = new Font(""Arial"", 10.0f); try {     byte charset = font1.GdiCharSet; } finally {     if (font1 != null)     {         ((IDisposable)font1).Dispose();     } }   // You can do the same thing with a using statement. using (Font font2 = new Font(""Arial"", 10.0f)) {     byte charset = font2.GdiCharSet; }  && and || Operators To avoid exceptions and increase performance by skipping unnecessary comparisons, use && instead of & and || instead of | when you perform comparisons, as shown in the following example. C# Copy  Console.Write(""Enter a dividend: ""); var dividend = Convert.ToInt32(Console.ReadLine());  Console.Write(""Enter a divisor: ""); var divisor = Convert.ToInt32(Console.ReadLine());  // If the divisor is 0, the second clause in the following condition // causes a run-time error. The && operator short circuits when the // first expression is false. That is, it does not evaluate the // second expression. The & operator evaluates both, and causes  // a run-time error when divisor is 0. if ((divisor != 0) && (dividend / divisor > 0)) {     Console.WriteLine(""Quotient: {0}"", dividend / divisor); } else {     Console.WriteLine(""Attempted division by 0 ends up here.""); }  New Operator Use the concise form of object instantiation, with implicit typing, as shown in the following declaration. C# Copy  var instance1 = new ExampleClass();  The previous line is equivalent to the following declaration. C# Copy  ExampleClass instance2 = new ExampleClass();  Use object initializers to simplify object creation. C# Copy  // Object initializer. var instance3 = new ExampleClass { Name = ""Desktop"", ID = 37414,      Location = ""Redmond"", Age = 2.3 };  // Default constructor and assignment statements. var instance4 = new ExampleClass(); instance4.Name = ""Desktop""; instance4.ID = 37414; instance4.Location = ""Redmond""; instance4.Age = 2.3;  Event Handling If you are defining an event handler that you do not need to remove later, use a lambda expression. C# Copy  public Form2() {     // You can use a lambda expression to define an event handler.     this.Click += (s, e) =>         {             MessageBox.Show(                 ((MouseEventArgs)e).Location.ToString());         }; }  C# Copy  // Using a lambda expression shortens the following traditional definition. public Form1() {     this.Click += new EventHandler(Form1_Click); }  void Form1_Click(object sender, EventArgs e) {     MessageBox.Show(((MouseEventArgs)e).Location.ToString()); }  Static Members Call static members by using the class name: ClassName.StaticMember. This practice makes code more readable by making static access clear. Do not qualify a static member defined in a base class with the name of a derived class. While that code compiles, the code readability is misleading, and the code may break in the future if you add a static member with the same name to the derived class. LINQ Queries Use meaningful names for query variables. The following example uses seattleCustomers for customers who are located in Seattle. C# Copy  var seattleCustomers = from cust in customers                        where cust.City == ""Seattle""                        select cust.Name;  Use aliases to make sure that property names of anonymous types are correctly capitalized, using Pascal casing. C# Copy  var localDistributors =     from customer in customers     join distributor in distributors on customer.City equals distributor.City     select new { Customer = customer, Distributor = distributor };  Rename properties when the property names in the result would be ambiguous. For example, if your query returns a customer name and a distributor ID, instead of leaving them as Name and ID in the result, rename them to clarify that Name is the name of a customer, and ID is the ID of a distributor. C# Copy  var localDistributors2 =     from cust in customers     join dist in distributors on cust.City equals dist.City     select new { CustomerName = cust.Name, DistributorID = dist.ID };  Use implicit typing in the declaration of query variables and range variables. C# Copy  var seattleCustomers = from cust in customers                        where cust.City == ""Seattle""                        select cust.Name;  Align query clauses under the from clause, as shown in the previous examples. Use where clauses before other query clauses to ensure that later query clauses operate on the reduced, filtered set of data. C# Copy  var seattleCustomers2 = from cust in customers                         where cust.City == ""Seattle""                         orderby cust.Name                         select cust;  Use multiple from clauses instead of a join clause to access inner collections. For example, a collection of Student objects might each contain a collection of test scores. When the following query is executed, it returns each score that is over 90, along with the last name of the student who received the score. C# Copy  // Use a compound from to access the inner sequence within each element. var scoreQuery = from student in students                  from score in student.Scores                  where score > 90                  select new { Last = student.LastName, score };  Security Follow the guidelines in Secure Coding Guidelines. See Also Visual Basic Coding Conventions Secure Coding Guidelines Show: Inherited Protected Print Export (0) Print Export (0) Share IN THIS ARTICLE Is this page helpful? Yes No Additional feedback? 1500 characters remaining Submit Skip this Thank you! We appreciate your feedback. Dev centers Windows Office Visual Studio Microsoft Azure More... Learning resources Microsoft Virtual Academy Channel 9 MSDN Magazine Community Forums Blogs Codeplex Support Self support Programs BizSpark (for startups) DreamSpark Imagine Cup United States (English) Newsletter Privacy & cookies Terms of use Trademarks © 2016 Microsoft © 2016 Microsoft Third party scripts and code linked to or referenced from this website are licensed to you by the parties that own such code, not by Microsoft. See ASP.NET Ajax CDN Terms of Use – http://www.asp.net/ajaxlibrary/CDN.ashx. WebTrends view model not available or IncludeLegacyWebTrendsScriptInGlobal feature flag is off"	"null"	"null"	"Official MSDN C# code conventions"	"true"
"Template Engine"	"RazorEngine"	"https://github.com/Antaris/RazorEngine"	"Open source templating engine based on Microsoft's Razor parsing engine"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1138"	"146"	"322"	"GitHub - Antaris/RazorEngine: Open source templating engine based on Microsoft's Razor parsing engine Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 146 Star 1,138 Fork 322 Antaris/RazorEngine Code Issues 52 Pull requests 3 Wiki Pulse Graphs Open source templating engine based on Microsoft's Razor parsing engine http://antaris.github.io/RazorEngine 494 commits 5 branches 68 releases 31 contributors C# 95.2% F# 4.4% Other 0.4% C# F# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master matthid-fix-typo related_346 split_api Nothing to show roslyn-4.0.5-beta1 roslyn-4.0.4-beta1 roslyn-4.0.3-beta1 roslyn-4.0.2-beta2 roslyn-4.0.2-beta1 roslyn-4.0.1-beta1 roslyn-4.0.0-beta1 roslyn-3.5.5-beta1 roslyn-3.5.4-beta1 roslyn-3.5.3-beta1 roslyn-3.5.2-beta2 roslyn-3.5.2-beta1 roslyn-3.5.1-beta1 roslyn-3.5.0-beta2 legacy-release-3.0 4.3.2-beta1 4.3.1-beta1 4.3.0-beta1 4.2.7-beta1 4.2.6-beta1 4.2.5-beta1 4.2.4-beta1 4.2.3-beta1 4.2.2-beta1 4.2.1-beta1 4.2.0-beta3 4.2.0-beta2 4.2.0-beta1 4.1.6-beta1 4.1.5-beta1 4.1.4-beta1 4.1.3-beta2 4.1.2-beta1 4.1.1-beta1 4.1.0-beta1 4.0.3-beta1 4.0.2-beta1 4.0.1-beta1 4.0.0-beta2 3.8.2 3.8.1 3.8.0 3.7.7 3.7.6 3.7.5 3.7.4 3.7.3 3.7.2 3.7.1 3.7.1-beta1 3.7.1-alpha1 3.7.0 3.7.0-beta1 3.6.6 3.6.5 3.6.4 3.6.3 3.6.3-beta1 3.6.2 3.6.1 3.6.0 3.5.3 3.5.2 3.5.1 3.5.0 3.5.0-beta3 3.5.0-beta2 3.5.0-beta1 Nothing to show New pull request Latest commit c4a68b6 Jun 6, 2016 matthid Merge pull request #388 from campersau/compiler_service_eventhandler … fix memory leak in CompilerServiceBase by removing event handler in dispose Permalink Failed to load latest commit information. .paket Update dependencies and completly switch to paket Sep 6, 2015 doc Fix typos. May 30, 2016 nuget Switch to apache license Apr 26, 2015 packages/Yaaf.AdvancedBuilding/content paket update Dec 2, 2015 src move assembly resolve logic to RazorEngineCore Jun 6, 2016 .gitattributes Simplify build with Paket and Yaaf.AdvancedBuilding. Mar 22, 2015 .gitignore Update dependencies and completly switch to paket Sep 6, 2015 .travis.yml Simplify build with Paket and Yaaf.AdvancedBuilding. Mar 22, 2015 CONTRIBUTING.md update contribution guide. Jan 30, 2015 LICENSE.md Switch to apache license Apr 26, 2015 README.md make it clear that RazorEngine namespace needs to be opened, closes #340 Nov 24, 2015 appveyor.yml Simplify build with Paket and Yaaf.AdvancedBuilding. Mar 22, 2015 build.cmd switch back to paket release and paket update Oct 6, 2015 build.fsx paket update Dec 2, 2015 build.sh switch back to paket release and paket update Oct 6, 2015 buildConfig.fsx Bump version to 3.8.2 Apr 15, 2016 downloadNuget.fsx Simplify build with Paket and Yaaf.AdvancedBuilding. Mar 22, 2015 generateDocs.fsx paket update Dec 2, 2015 paket.dependencies paket update && disable MSTest (because we use NUnit only). Nov 24, 2015 paket.lock only use current Model and ModelType when the Include(string) overloa… Dec 2, 2015 README.md RazorEngine latest documentation available on https://antaris.github.io/RazorEngine/. Build status Develop Branch (master) Release Branch (releases) Quickstart First install the nuget package (>=3.5.0). Install-Package RazorEngine  A templating engine built on Microsoft's Razor parsing engine, RazorEngine allows you to use Razor syntax to build dynamic templates. You can find an introduction here. All you need to do is use the static Engine class (the Engine.Razor instance) in the 'RazorEngine' namespace: using RazorEngine; using RazorEngine.Templating; // For extension methods.  string template = ""Hello @Model.Name, welcome to RazorEngine!""; var result =     Engine.Razor.RunCompile(template, ""templateKey"", null, new { Name = ""World"" }); The RunCompile method used here is an extension method and you need to open the RazorEngine.Templating namespace. The ""templateKey"" must be unique and after running the above example you can re-run the cached template with this key. // using RazorEngine.Templating; // Dont forget to include this. var result =     Engine.Razor.Run(""templateKey"", null, new { Name = ""Max"" }); The null parameter is the modelType and null in this case means we use dynamic as the type of the model. You can use a static model as well by providing a type object. // using RazorEngine.Templating; // Dont forget to include this. var result =     Engine.Razor.RunCompile(""templateKey"", typeof(Person), new Person { Name = ""Max"" }); Note that we now re-compile the model with a different type. When you do not run the same template a lot of times (like several 1000 times), compiling uses the most time. So the benefit you get from a static type will most likely not compensate the additional compile time. Therefore you should either stick to one type for a template (best of both worlds) or just use (the slower) dynamic (null). You can specify the modelType of a template with the @model directive. When you do this the modelType parameter is ignored, but you should use the same type instance (or null) on every call to prevent unnecessary re-compilations because of type mismatches in the caching layer. Configuration You can configure RazorEngine with the TemplateServiceConfiguration class. var config = new TemplateServiceConfiguration(); // .. configure your instance  var service = RazorEngineService.Create(config); If you want to use the static Engine class with this new configuration: Engine.Razor = service; General Configuration By default RazorEngine is configured to encode using Html. This supports the majority of users but with some configuration changes you can also set it to encode using Raw format which is better suited for templates that generate things like javascript, php, C# and others. config.Language = Language.VisualBasic; // VB.NET as template language. config.EncodedStringFactory = new RawStringFactory(); // Raw string encoding. config.EncodedStringFactory = new HtmlEncodedStringFactory(); // Html encoding. Debugging One thing you might want to enable is the debugging feature: config.Debug = true; When Debug is true you can straight up debug into the generated code. RazorEngine also supports debugging directly into the template files (normally .cshtml files). As as you might see in the above code there is no file to debug into. To provide RazorEngine with the necessary information you need to tell where the file can be found: // using RazorEngine.Templating; // Dont forget to include this. string template = ""Hello @Model.Name, welcome to RazorEngine!""; string templateFile = ""C:/mytemplate.cshtml"" var result =     Engine.Razor.RunCompile(new LoadedTemplateSource(template, templateFile), ""templateKey"", null, new { Name = ""World"" }); This time when debugging the template you will jump right into the template file. Set a template manager The API is designed around the idea that you do not have the templates sitting around in the source code (while you can do that as seen above). The main interface to provide RazorEngine with templates is the ITemplateManager interface. You should either pick one of the available implementations or write your own. See TemplateManager and Caching documentation for details. Temporary files RazorEngine tries hard to delete the temporary files it creates, but this is not always possible. This is especially true if you run RazorEngine from the default AppDomain. RazorEngine will warn you in this situation by writing to the stderr. One way to switch into a new AppDomain is to use the following snippet: static int Main(string[] args) {     if (AppDomain.CurrentDomain.IsDefaultAppDomain())     {         // RazorEngine cannot clean up from the default appdomain...         Console.WriteLine(""Switching to secound AppDomain, for RazorEngine..."");         AppDomainSetup adSetup = new AppDomainSetup();         adSetup.ApplicationBase = AppDomain.CurrentDomain.SetupInformation.ApplicationBase;         var current = AppDomain.CurrentDomain;         // You only need to add strongnames when your appdomain is not a full trust environment.         var strongNames = new StrongName[0];          var domain = AppDomain.CreateDomain(             ""MyMainDomain"", null,             current.SetupInformation, new PermissionSet(PermissionState.Unrestricted),             strongNames);         var exitCode = domain.ExecuteAssembly(Assembly.GetExecutingAssembly().Location);         // RazorEngine will cleanup.          AppDomain.Unload(domain);         return exitCode;     }     // Continue with your code. } Depending on your scenario you probably need to edit it to your needs. Note that you need to Unload the domain to trigger cleanup. For the following scenario: Your templates are limited in number. You fully trust your templates / don't need isolation. You don't need any kind of debugging support. Your templates do not change in runtime. You can use config.DisableTempFileLocking = true as well. This will work in any AppDomain (including the default one). To remove the RazorEngine warnings you can additionally use config.CachingProvider = new DefaultCachingProvider(t => {}). See also https://github.com/Antaris/RazorEngine/issues/244 for more details. More On the right side you can find links to advanced topics and additional documentation. You should definitely read ""About Razor"" and ""Template basics"". Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Antaris/RazorEngine"	"Open source templating engine based on Microsoft's Razor parsing engine"	"true"
"Template Engine"	"Nustache"	"https://github.com/jdiamond/Nustache"	"Open source library for logic-less templates"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"386"	"41"	"106"	"GitHub - jdiamond/Nustache: Logic-less templates for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 41 Star 386 Fork 106 jdiamond/Nustache Code Issues 8 Pull requests 3 Pulse Graphs Logic-less templates for .NET 279 commits 2 branches 7 releases 23 contributors C# 98.6% Other 1.4% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master Nothing to show nustache-v1.16.0.1 nustache-v1.15.3.5 nustache-v1.15.2.10 nustache-v1.15.1.3 nustache-v1.15.0.4 nustache-v1.14.0.4 nustache-v1.13.9.5 Nothing to show New pull request Latest commit f46fc5a May 19, 2016 Romanx Merge branch 'dev' Permalink Failed to load latest commit information. Lib/JsonClassGenerator Use NuGet for dependencies. Aug 12, 2013 Nustache.Compilation.Tests Fixed ArgumentException on compiling when the model has ToString() me… May 19, 2016 Nustache.Compilation Fixed ArgumentException on compiling when the model has ToString() me… May 19, 2016 Nustache.Core.Tests Getter for XmlNodeList objects May 19, 2016 Nustache.Core Getter for XmlNodeList objects May 19, 2016 Nustache.Mvc3.Example Removed Example project from soluton build Mar 23, 2015 Nustache.Mvc3 Version bumped to 1.14.0 Apr 15, 2015 nustache Support for Compiled Templates. Jul 3, 2013 packages Added MVC3 via Nuget to MVC3 project Mar 23, 2015 spec @ 72233f3 Move spec folder up so it can be shared. Aug 12, 2013 .gitignore Use NuGet for dependencies. Aug 12, 2013 .gitmodules Move spec folder up so it can be shared. Aug 13, 2013 HISTORY.txt new version Aug 22, 2013 LICENSE.txt Added README and LICENSE. Oct 26, 2010 NuGet.exe Update NuGet. Aug 13, 2013 Nustache.sln Added markdown readme to solution Apr 5, 2015 README.md Fix minor error May 19, 2016 TODO.txt Support for Compiled Templates. Jul 4, 2013 pack.cmd Script to create packages. Feb 10, 2012 README.md Nustache - Logic-less templates for .NET Nustache.Core: Nustache.Mvc3: Nustache.Compliation: NEW NOTICE - 2015-03-29: Hello, as you may have noticed this repository has been silent for awhile. I worked on it awhile ago when I had a problem but didn't contribute any more. I'm planning to commit some time to looking at outstanding pull-requests and issues and try get the project moving again. With that in mind feel free to open issues and contribute pull requests. Romanx NOTICE (JDiamond): I haven't used Nustache in a while and don't have enough bandwidth to responsibly maintain it. If you depend on Nustache and want committ access, please contact me! For a list of implementations (other than .NET) and editor plugins, see http://mustache.github.com/. Installation: Pull from GitHub or download the repository and build it. Or, install via NuGet (search for Nustache). If you're using MVC, you'll want to build/install the Nustache.Mvc3 project, too. Usage: For non-MVC projects: Add a reference to Nustache.Core.dll (done for you if you used NuGet). Import the Nustache.Core namespace. Use one of the static, helper methods on the Render class. var html = Render.FileToString(""foo.template"", myData); Data can be object, IDictionary, or DataTable. If you need more control, use Render.Template. See the source and tests for more information. For compiled templates: var template = new Template(); template.Load(new StringReader(templateText)); var compiled = template.Compile<Foo>(null);  var html = compiled(fooInstance); For MVC projects: Add a reference to Nustache.Mvc3.dll (done for you if you used NuGet). Add NustacheViewEngine to the global list of view engines. See Global.asax.cs in the Nustache.Mvc3.Example project for an example. nustache.exe: Command-line wrapper around Render.FileToFile. Parameters are templatePath, dataPath, and outputPath. Reads JSON or XML from dataPath for data. If extension is .js or .json, assumes JSON. Must wrap with { }. If extension is .xml, assumes XML. Initial context is the document element. nustache.exe foo.template myData.json foo.html  External templates are assumed to be in the same folder as the template mentioned in templatePath. Extension is also assumed to be the same as the template in templatePath. Syntax: The same as Mustache with some extensions. Support for defining internal templates: {{<foo}}This is the foo template.{{/foo}} The above doesn't get rendered until it's included like this: {{>foo}}  You can define templates inside sections. They override templates defined in outer sections which override external templates. Development: Build with VS2012 or MSBuild. To run the tests that use Mustache specs, run this command from your Nustache clone: git submodule update --init  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jdiamond/Nustache"	"Open source library for logic-less templates"	"true"
"Template Engine"	"DotLiquid"	"https://github.com/dotliquid/dotliquid"	"C# port of the Ruby Liquid templating language"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"298"	"46"	"120"	"GitHub - dotliquid/dotliquid: .NET Port of Tobias Lütke's Liquid template language. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 46 Star 298 Fork 120 dotliquid/dotliquid Code Issues 45 Pull requests 17 Wiki Pulse Graphs .NET Port of Tobias Lütke's Liquid template language. http://dotliquidmarkup.org 353 commits 1 branch 6 releases 23 contributors C# 98.7% CSS 1.1% Other 0.2% C# CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.6.1 v1.5.0 v1.2.1 v1.2.0 v1.1.0 v1.0.0 Nothing to show New pull request Latest commit 0f7d71c Jul 1, 2016 laedit committed on GitHub Add pretzel as project using dotliquid Permalink Failed to load latest commit information. build Remove obsolete build files / NuGet packages. Sep 10, 2013 src Merge pull request #173 from Mart-Bogdan/master Jun 18, 2016 .editorconfig Normalise spacing Jun 16, 2016 .gitattributes Normalise spacing Jun 16, 2016 .gitignore Removed web publishing targets again - just made sure they're in the … Nov 4, 2010 .travis.yml travis-ci: force release build Jun 18, 2016 CHANGELOG.markdown Update changelog for 1.8.0 release May 13, 2014 LICENSE.txt Initial commit Aug 19, 2010 README.markdown Add pretzel as project using dotliquid Jul 1, 2016 README.md Added Gitter badge Dec 19, 2014 appveyor.yml Add appveyor.yml Sep 12, 2014 README.markdown DotLiquid Build status here: https://ci.appveyor.com/project/haf/dotliquid Maintainers wanted Have you sent a PR to this repository? In that case, would you consider getting in touch with me so I can give you commit access to this repository? Please ping me at gitter/dotliquid or here on github. What is this? DotLiquid is a .Net port of the popular Ruby Liquid templating language. It is a separate project that aims to retain the same template syntax as the original, while using .NET coding conventions where possible. For more information about the original Liquid project, see http://www.liquidmarkup.org. Quick start Download the latest release from the downloads page. The zip file contains DotLiquid.dll, which is the only one you need. Read the wiki for information on writing and using DotLiquid templates. Why should I use DotLiquid? You want to leave business logic in your compiled controllers and out of your templates. You're looking for a logic-less template language that also exists for other platforms (ie: node, python). You want to allow your users to edit their own page templates, but want to ensure they don't run insecure code. You want to render templates directly from the database. You want a template engine for emails. What does it look like? <ul id=""products"">   {% for product in products %}     <li>       <h2>{{product.name}}</h2>       Only {{product.price | price }}        {{product.description | prettyprint | paragraph }}     </li>   {% endfor %} </ul> How to use DotLiquid DotLiquid supports a very simple API based around the DotLiquid.Template class. Generally, you can read the contents of a file into a template, and then render the template by passing it parameters in the form of a Hash object. There are several ways you can construct a Hash object, including from a Dictionary, or using the Hash.FromAnonymousObject method. Template template = Template.Parse(""hi {{name}}""); // Parses and compiles the template template.Render(Hash.FromAnonymousObject(new { name = ""tobi"" })); // => ""hi tobi"" Projects using DotLiquid Are you using DotLiquid in an open source project? Tell us with a PR! Suave.DotLiquid Pretzel Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dotliquid/dotliquid"	"C# port of the Ruby Liquid templating language"	"true"
"Testing"	"AutoFixture"	"https://github.com/AutoFixture/AutoFixture"	"AutoFixture is an open source framework for.NET designed to minimize the 'Arrange' phase of your unit tests"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"894"	"85"	"176"	"GitHub - AutoFixture/AutoFixture: AutoFixture is an open source library for .NET designed to minimize the 'Arrange' phase of your unit tests in order to maximize maintainability. Its primary goal is to allow developers to focus on what is being tested rather than how to setup the test scenario, by making it easier to create object graphs containing test data. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 85 Star 894 Fork 176 AutoFixture/AutoFixture Code Issues 35 Pull requests 7 Wiki Pulse Graphs AutoFixture is an open source library for .NET designed to minimize the 'Arrange' phase of your unit tests in order to maximize maintainability. Its primary goal is to allow developers to focus on what is being tested rather than how to setup the test scenario, by making it easier to create object graphs containing test data. 3,235 commits 2 branches 202 releases 51 contributors C# 98.2% F# 1.3% XSLT 0.4% Smalltalk 0.1% PowerShell 0.0% Shell 0.0% C# F# XSLT Smalltalk PowerShell Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master v4 Nothing to show v3.49.0 v3.48.0 v3.47.8 v3.47.7 v3.47.5 v3.47.4 v3.47.3 v3.47.2 v3.47.1 v3.47.0 v3.46.0 v3.45.3 v3.45.2 v3.45.1 v3.45.0 v3.44.1 v3.44.0 v3.43.4 v3.43.3 v3.43.2 v3.43.1 v3.43.0 v3.42.0 v3.41.1 v3.41.0 v3.40.1 v3.40.0 v3.39.0 v3.38.1 v3.38.0 v3.37.3 v3.37.2 v3.37.1 v3.37.0 v3.36.12 v3.36.11 v3.36.10 v3.36.9 v3.36.8 v3.36.7 v3.36.6 v3.36.5 v3.36.4 v3.36.3 v3.36.2 v3.36.1 v3.36.0 v3.35.1 v3.35.0 v3.34.2 v3.34.1 v3.34.0 v3.33.0 v3.32.2 v3.32.1 v3.32.0 v3.31.3 v3.31.2 v3.31.1 v3.31.0 v3.30.8 v3.30.7 v3.30.6 v3.30.5 v3.30.4 v3.30.3 v3.30.2 v3.30.1 v3.30.0 v3.29.0 v3.28.0 v3.27.0 v3.26.0 v3.25.0 v3.24.6 v3.24.5 v3.24.4 v3.24.3 v3.24.2 v3.24.1 v3.24.0 v3.23.2 v3.23.1 v3.23.0 v3.22.0 v.3.21.1 v3.21.0 v3.20.4 v3.20.3 v3.20.2 v3.20.1 v3.20.0 v3.19.2 v3.19.1 v3.19.0 v3.18.10 v3.18.9 v3.18.8 v3.18.7 v3.18.6 Nothing to show New pull request Latest commit f9384a9 Jul 13, 2016 tiesmaster committed with moodmosaic Fix wrong sample code in exception message of kernel type. (#677) … This updates the sample code of the TerminatingWithPathSpecimenBuilder with code that actually compiles. The orignal code didn't work since the AutoMoqCustomization is not an ISpecimenBuilder, but an ICustomization, which can not feed into the Customizations list. Permalink Failed to load latest commit information. Lib Updated NuGet.exe, Oct 7, 2015 Nuget Relaxed version requirements for AutoFakeItEasy (#672) Jul 9, 2016 Packages Added the FIE .dll. Jun 22, 2016 Src Fix wrong sample code in exception message of kernel type. (#677) Jul 13, 2016 .gitignore Don't delete NUnit test results Mar 14, 2016 AutoFixtureLogo200x200.png Added logo file. Nov 8, 2015 Build.fsx Added new assemblies to build file. Jun 22, 2016 CONTRIBUTING.md Updated details re. build process in CONTRIBUTING Mar 20, 2016 LICENCE.txt Added OSS licence Aug 1, 2013 README.md Added link to AutoFixture.NUnit3 NuGet package. Mar 13, 2016 build.cmd Add FAKE build script Feb 16, 2016 build.sh Add FAKE build script Feb 16, 2016 README.md Project Description Write maintainable unit tests, faster. AutoFixture makes it easier for developers to do Test-Driven Development by automating non-relevant Test Fixture Setup, allowing the Test Developer to focus on the essentials of each test case. ""saved us quite some time"" -Florian Hötzinger, GAB Enterprise IT Solutions GmbH Overview (Jump straight to the CheatSheet if you just want to see some code samples right away.) AutoFixture is designed to make Test-Driven Development more productive and unit tests more refactoring-safe. It does so by removing the need for hand-coding anonymous variables as part of a test's Fixture Setup phase. Among other features, it offers a generic implementation of the Test Data Builder pattern. When writing unit tests, you typically need to create some objects that represent the initial state of the test. Often, an API will force you to specify much more data than you really care about, so you frequently end up creating objects that has no influence on the test, simply to make the code compile. AutoFixture can help by creating such Anonymous Variables for you. Here's a simple example: [TestMethod] public void IntroductoryTest() {     // Fixture setup     Fixture fixture = new Fixture();      int expectedNumber = fixture.Create<int>();     MyClass sut = fixture.Create<MyClass>();     // Exercise system     int result = sut.Echo(expectedNumber);     // Verify outcome     Assert.AreEqual<int>(expectedNumber, result, ""Echo"");     // Teardown } This example illustrates the basic principle of AutoFixture: It can create values of virtually any type without the need for you to explicitly define which values should be used. The number expectedNumber is created by a call to Create - this will create a 'nice', regular integer value, saving you the effort of explicitly coming up with one. The example also illustrates how AutoFixture can be used as a SUT Factory that creates the actual System Under Test (the MyClass instance). Given the right combination of unit testing framework and extensions for AutoFixture, we can further reduce the above test to be even more declarative: xUnit [Theory, AutoData] public void IntroductoryTest(     int expectedNumber, MyClass sut) {     int result = sut.Echo(expectedNumber);     Assert.Equal(expectedNumber, result); } and NUnit [Test, AutoData] public void IntroductoryTest(     int expectedNumber, MyClass sut) {     int result = sut.Echo(expectedNumber);     Assert.Equal(expectedNumber, result); } Notice how we can reduce unit tests to state only the relevant parts of the test. The rest (variables, Fixture object) is relegated to attributes and parameter values that are supplied automatically by AutoFixture. The test is now only two lines of code. Using AutoFixture is as easy as referencing the library and creating a new instance of the Fixture class! Downloads AutoFixture is available via NuGet: AutoFixture AutoFixture.AutoMoq AutoFixture.AutoRhinoMocks AutoFixture.AutoFakeItEasy AutoFixture.AutoNSubstitute AutoFixture.AutoFoq AutoFixture.Xunit AutoFixture.Xunit2 AutoFixture.NUnit2 AutoFixture.NUnit3 AutoFixture.Idioms SemanticComparison Versioning AutoFixture follows Semantic Versioning 2.0.0. Documentation CheatSheet FAQ Questions If you have questions, feel free to ask. The best places to ask are: Stack Overflow - use the autofixture tag GitHub issues Who uses AutoFixture? AutoFixture is used around the world, as the following quotes testify: ""I’ve introduced AutoFixture to my developers (at www.gab.de ) some time ago. We’ve been using it successfully with xunit in multiple projects all across the .NET technology stack. We also use it for feeding dummy data to the UI when developing prototypes. That saved us quite some time. -Florian Hötzinger, GAB Enterprise IT Solutions GmbH ""I have used AutoFixture for 3 years, it's a vital tool in my TDD toolbox, a real time-saver. Setting up maintainable and robust unit tests with AutoFixture is easy and straightforward - highly recommendable"" -Mads Tjørnelund Toustrup, Senior .Net Developer, d60 a/s ""Autofixture is more than just another test data generator. It helps me to write tests faster, which are robust against changes in my production code. Moreover, with Autofixture I can focus the tests on the behavior I want to check which why they are easier to read and understand."" -Hendrik Lösch, Saxonia Systems AG If you want to add your own testimonial to this list, we (the AutoFixture maintainers) would be very grateful. Send us a pull request to this README.md file. Additional resources Pluralsight course ploeh blog Nikos Baxevanis' blog Enrico Campidoglio's blog Gert Jansen van Rensburg's blog Questions on Stack Overflow Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/AutoFixture/AutoFixture"	"AutoFixture is an open source framework for.NET designed to minimize the 'Arrange' phase of your unit tests"	"true"
"Testing"	"BDDfy"	"https://github.com/TestStack/TestStack.BDDfy"	"BDDfy is the simplest BDD framework EVER!"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"176"	"28"	"46"	"GitHub - TestStack/TestStack.BDDfy: BDDfy is the simplest BDD framework EVER! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 176 Fork 46 TestStack/TestStack.BDDfy Code Issues 41 Pull requests 0 Pulse Graphs BDDfy is the simplest BDD framework EVER! 988 commits 3 branches 20 releases 14 contributors C# 93.0% CSS 4.9% PowerShell 1.8% JavaScript 0.3% C# CSS PowerShell JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master release-4.0.0 Nothing to show v4.3.0 v3.19.1 v3.18.5 v3.18.3 v3.18.2 v3.18.0 v3.17.1 v3.16.14 v3.16.5 4.2.0 4.1.3-report-model+5 4.1.2+5 4.1.1+4 4.1.0+1 4.0.1+32 4.0.0+11 4.0.0-beta.4 4.0.0-beta.3 4.0.0-beta.2 4.0.0-beta1 Nothing to show New pull request Latest commit be3309b Jul 13, 2016 mwhelan committed on GitHub Update readme.md Permalink Failed to load latest commit information. docs Added start of examples docs Aug 25, 2015 src Removed other use of stacktrace in netcore Jul 3, 2016 tools Added proper build script and fixed up test failures Jul 2, 2016 .gitattributes Fixing git attributes Apr 10, 2014 .gitignore Added proper build script and fixed up test failures Jul 2, 2016 GitVersionConfig.yaml Create GitVersionConfig.yaml Jan 25, 2015 appveyor.deploy.yml Added deployment scripts, moved some dependencies into netstandard1.5… Jul 3, 2016 appveyor.yml Fixed build warning and appveyor.yml still containing nuget pack comm… Jul 2, 2016 build.cake Added proper build script and fixed up test failures Jul 2, 2016 build.ps1 Added proper build script and fixed up test failures Jul 2, 2016 deploy.cake Fixed url in deploy script Jul 3, 2016 deploy.ps1 Added deployment scripts, moved some dependencies into netstandard1.5… Jul 3, 2016 license.txt Changed the license to MIT Jul 29, 2013 logo.png green logo Apr 14, 2014 readme.md Update readme.md Jul 13, 2016 readme.md BDDfy is the simplest BDD framework to use, customize and extend! A few quick facts about BDDfy: It can run with any testing framework. Actually you don't have to use a testing framework at all. You can just apply it on your POCO (test) classes! It does not need a separate test runner. You can use your runner of choice. For example, you can write your BDDfy tests using NUnit and run them using NUnit console or GUI runner, Resharper or TD.Net and regardless of the runner, you will get the same result. It can run standalone scenarios. In other words, although BDDfy supports stories, you do not necessarily have to have or make up a story to use it. This is useful for developers who work in non-Agile environments but would like to get some decent testing experience. You can use underscored or pascal or camel cased method names for your steps. You do not have to explain your scenarios or stories or steps in string, but you can if you need full control over what gets printed into console and HTML reports. BDDfy is very extensible: the core barely has any logic in it and delegates all its responsibilities to the extensions all of which are configurable; e.g. if you don't like the reports it generates, you can write your custom reporter in a few lines of code. Usage To use BDDfy install TestStack.BDDfy nuget package: Install-Package TestStack.BDDfy This adds BDDfy assembly and its dependencies to your test project. If this is the first time you are using BDDfy you may want to check out the samples on NuGet. Just run Install-Package TestStack.BDDfy.Samples and it will load two fully working samples to your project. Now that you have installed BDDfy, write your first test (this test is borrowed from ATM sample that you can install using nuget package TestStack.BDDfy.Samples):     [Story(         AsA = ""As an Account Holder"",         IWant = ""I want to withdraw cash from an ATM"",         SoThat = ""So that I can get money when the bank is closed"")]     public class AccountHasInsufficientFund     {         private Card _card;         private Atm _atm;          // You can override step text using executable attributes         [Given(StepText = ""Given the account balance is $10"")]         void GivenAccountHasEnoughBalance()         {             _card = new Card(true, 10);         }          void AndGivenTheCardIsValid()         {         }          void AndGivenTheMachineContainsEnoughMoney()         {             _atm = new Atm(100);         }          void WhenTheAccountHolderRequests20()         {             _atm.RequestMoney(_card, 20);         }          void ThenTheAtmShouldNotDispenseAnyMoney()         {             Assert.AreEqual(0, _atm.DispenseValue);         }          void AndTheAtmShouldSayThereAreInsufficientFunds()         {             Assert.AreEqual(DisplayMessage.InsufficientFunds, _atm.Message);         }          void AndTheCardShouldBeReturned()         {             Assert.IsFalse(_atm.CardIsRetained);         }          [Fact]         public void Execute()         {             this.BDDfy();         }     } And this gives you a report like: Story: Account holder withdraws cash     As an Account Holder     I want to withdraw cash from an ATM     So that I can get money when the bank is closed  Scenario: Account has insufficient fund     Given the account balance is $10         And the card is valid     When the account holder requests $20     Then the atm should not dispense any money         And the atm should say there are insufficient funds         And the card should be returned  This is just the console report. Have a look at your output folder and you should see a nice html report too. If you want more control you can also use BDDfy's Fluent API. Here is another example done using the Fluent API:     [Fact]     public void CardHasBeenDisabled()     {         this.Given(s => s.GivenTheCardIsDisabled())             .When(s => s.WhenTheAccountHolderRequests(20))             .Then(s => s.CardIsRetained(true), ""Then the ATM should retain the card"")                 .And(s => s.AndTheAtmShouldSayTheCardHasBeenRetained())             .BDDfy(htmlReportName: ""ATM"");     } which gives you a report like: Scenario: Card has been disabled     Given the card is disabled     When the account holder requests 20     Then the ATM should retain the card         And the atm should say the card has been retained  This is only the tip of iceberg. Absolutely everything you do with BDDfy is extensible and customizable. You might see full documentation of BDDfy on the TestStack documentation website. Oh and while you are there don't forget to checkout other cool projects from TestStack. Authors Mehdi Khalili Michael Whelan Jake Ginnivan License BDDfy is released under the MIT License. See the bundled license.txt file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TestStack/TestStack.BDDfy"	"BDDfy is the simplest BDD framework EVER!"	"true"
"Testing"	"Bogus"	"https://github.com/bchavez/Bogus"	"A simple and sane fake data generator for C#. Based on and ported from the famed faker.js."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"171"	"12"	"15"	"GitHub - bchavez/Bogus: A simple and sane fake data generator for C#. Based on and ported from the famed faker.js. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 171 Fork 15 bchavez/Bogus Code Issues 3 Pull requests 0 Wiki Pulse Graphs 📇 A simple and sane fake data generator for C#. Based on and ported from the famed faker.js. 220 commits 1 branch 29 releases Fetching contributors C# 93.0% F# 6.3% Other 0.7% C# F# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v7.1.4 v7.1.3 v7.1.3-beta-1 v7.1.2-beta-1 v7.1.1-beta-1 v6.1.1-beta-1 v5.1.1-beta-3 v5.1.1-beta-2 v5.1.1-beta-1 v5.0.1-beta-2 v5.0.1-beta-1 v4.0.1-beta-1 v3.0.6-beta-1 v3.0.5-beta-4 v3.0.5-beta-3 v3.0.5-beta-2 v3.0.5-beta-1 v3.0.4 v3.0.3 v3.0.2 v3.0.1 v3.0.0.3 v3.0.0.2 v3.0.0.1 v2.1.5.2 v2.1.5.1 v2.1.4.2 v2.1.4.1 v2.1.4.0 Nothing to show New pull request Latest commit 9df5b7f Jul 14, 2016 bchavez get deps working. Permalink Failed to load latest commit information. .paket New F# build system Feb 15, 2016 Docs Doc updates Jun 9, 2015 Source get deps working. Jul 14, 2016 .gitattributes * Initial Commit Jun 6, 2015 .gitignore New F# build system Feb 16, 2016 .gitmodules Toward Uniqueness #17 Mar 21, 2016 CONTRIBUTING.md Implement Exclude on Randomizer.Enum #7 Nov 2, 2015 HISTORY.md Catching up to faker.js: Marak/faker.js@e823141 Jul 14, 2016 LICENSE Clean up LICENSE Nov 6, 2015 README.md Catching up to faker.js: Marak/faker.js@e823141 Jul 14, 2016 appveyor.yml New F# build system Feb 16, 2016 build.cmd exit code 1? Feb 15, 2016 README.md Bogus for .NET/C# Project Description A simple and sane fake data generator for C# and .NET. Bogus is a C# port of faker.js and inspired by FluentValidation's syntax sugar. Bogus will help you load databases, UI and apps with fake data for your testing needs. Download & Install Nuget Package Bogus Install-Package Bogus  Projects That Use Bogus Elasticsearch (NEST) [code] Usage The Great Example public enum Gender {     Male,     Female }  //Set the randomzier seed if you wish to generate repeatable data sets. Randomizer.Seed = new Random(3897234);  var fruit = new[] { ""apple"", ""banana"", ""orange"", ""strawberry"", ""kiwi"" };  var orderIds = 0; var testOrders = new Faker<Order>()     //Ensure all properties have rules. By default, StrictMode is false     //Set a global policy by using Faker.DefaultStrictMode     .StrictMode(true)     //OrderId is deterministic     .RuleFor(o => o.OrderId, f => orderIds++)     //Pick some fruit from a basket     .RuleFor(o => o.Item, f => f.PickRandom(fruit))     //A random quantity from 1 to 10     .RuleFor(o => o.Quantity, f => f.Random.Number(1, 10));   var userIds = 0; var testUsers = new Faker<User>()     //Optional: Call for objects that have complex initialization     .CustomInstantiator(f => new User(userIds++, f.Random.Replace(""###-##-####"")))      //Basic rules using built-in generators     .RuleFor(u => u.FirstName, f => f.Name.FirstName())     .RuleFor(u => u.LastName, f => f.Name.LastName())     .RuleFor(u => u.Avatar, f => f.Internet.Avatar())     .RuleFor(u => u.UserName, (f, u) => f.Internet.UserName(u.FirstName, u.LastName))     .RuleFor(u => u.Email, (f, u) => f.Internet.Email(u.FirstName, u.LastName))     .RuleFor(u => u.SomethingUnique, f => $""Value {f.UniqueIndex}"")     .RuleFor(u => u.SomeGuid, Guid.NewGuid)      //Use an enum outside scope.     .RuleFor(u => u.Gender, f => f.PickRandom<Gender>())     //Use a method outside scope.     .RuleFor(u => u.CartId, f => Guid.NewGuid())     //Compound property with context, use the first/last name properties     .RuleFor(u => u.FullName, (f, u) => u.FirstName + "" "" + u.LastName)     //And composability of a complex collection.     .RuleFor(u => u.Orders, f => testOrders.Generate(3).ToList())     //After all rules are applied finish with the following action     .FinishWith((f, u) =>         {             Console.WriteLine(""User Created! Id={0}"", u.Id);         });  var user = testUsers.Generate(); Console.WriteLine(user.DumpAsJson());  /* OUTPUT: User Created! Id=0  * {   ""Id"": 0,   ""FirstName"": ""Audrey"",   ""LastName"": ""Spencer"",   ""FullName"": ""Audrey Spencer"",   ""UserName"": ""Audrey_Spencer72"",   ""Email"": ""Audrey82@gmail.com"",   ""Avatar"": ""https://s3.amazonaws.com/uifaces/faces/twitter/itstotallyamy/128.jpg"",   ""CartId"": ""863f9462-5b88-471f-b833-991d68db8c93"",   ""SSN"": ""923-88-4231"",   ""Gender"": 0,   ""Orders"": [     {       ""OrderId"": 0,       ""Item"": ""orange"",       ""Quantity"": 8     },     {       ""OrderId"": 1,       ""Item"": ""banana"",       ""Quantity"": 2     },     {       ""OrderId"": 2,       ""Item"": ""kiwi"",       ""Quantity"": 9     }   ] } */ Locales Since we're a port of faker.js, we support a whole bunch of different locales. Here's an example in Korean: [Test] public void With_Korean_Locale() {     var lorem = new Bogus.DataSets.Lorem(locale: ""ko"");     Console.WriteLine(lorem.Sentence(5)); }  /* 국가는 무상으로 행위로 의무를 구성하지 신체의 처벌받지 예술가의 경우와 */ Bogus has support following locales: Locale Code Language cz Czech de German de_AT German (Austria) de_CH German (Switzerland) el Greek en English en_AU Australia (English) en_au_ocker Australia Ocker (English) en_BORK Bork (English) en_CA Canada (English) en_GB Great Britain (English) en_IE Ireland (English) en_IND India (English) en_US United States (English) es Spanish es_MX Spanish Mexico fa Farsi fr French fr_CA Canada (French) ge Georgian id_ID Indonesia it Italian ja Japanese ko Korean lv Latvian nb_NO Norwegian nep Nepalese nl Dutch pl Polish pt_BR Portuguese (Brazil) ru Russian sk Slovakian sv Swedish tr Turkish uk Ukrainian vi Vietnamese zh_CN Chinese zh_TW Chinese (Taiwan) Note: Some locales may not have a complete data set. For example, zh_CN does not have a lorem data set, but ko has a lorem data set. Bogus will default to en if a locale-specific data set is not found. To further illustrate the previous example, the missing zh_CN:lorem data set will default to the en:lorem data set. If you'd like to help contribute new locales or update existing ones please see our Creating Locales wiki page for more info. Without Fluent Syntax You can use Bogus without a fluent setup. Just use a dataset directly. [Test] public void Without_Fluent_Syntax() {     var random = new Bogus.Randomizer();     var lorem = new Bogus.DataSets.Lorem();     var o = new Order()         {             OrderId = random.Number(1, 100),             Item = lorem.Sentence(),             Quantity = random.Number(1, 10)         };     o.Dump(); } /* OUTPUT: {   ""OrderId"": 61,   ""Item"": ""vel est ipsa"",   ""Quantity"": 7 } */ Bogus API Support Address ZipCode - Get a zipcode. City - Get a city name. StreetAddress - Get a street address. CityPrefix - Get a city prefix. CitySuffix - Get a city suffix. StreetName - Get a street name. BuildingNumber - Get the buildingnumber StreetSuffix - Get a street suffix. SecondaryAddress - Get a secondary address like 'Apt. 2' or 'Suite 321'. County - Get a county. Country - Get a country. CountryCode - Get a random country code. State - Get a state. StateAbbr - Get a state abbreviation. Latitude - Get a Latitude Longitude - Get a Longitude Commerce Department - Get a random commerce department. Price - Get a random product price. Categories - Get random product categories ProductName - Get a random product name. Color - Get a random color. Product - Get a random product. ProductAdjective - Random product adjective. ProductMaterial - Random product material. Company CompanySuffix - Get a company suffix. ""Inc"" and ""LLC"" etc. CompanyName - Get a company name CompanyName - Get a company name. The format can use any name.* and company.* methods. CatchPhrase - Get a company catch phrase. Bs - Get a company BS phrase. Date Past - Get a date in the past between refDate and years past that date. Future - Get a date in the future between refDate and years forward of that date. Between - Get a random date between start and end. Recent - Get a random date/time within the last few days since now. Timespan - Get a random span of time. Month - Get a random month Weekday - Get a random weekday Finance Account - Get an account number. Default length is 8 digits. AccountName - Get an account name. Like ""savings"", ""checking"", ""Home Loan"" etc.. Amount - Get a random amount. Default 0 - 1000. TransactionType - Get a transaction type: ""deposit"", ""withdrawal"", ""payment"", or ""invoice"". Currency - Get a random currency. CreditCardNumber - Returns a credit card number that should pass validation. See here. BitcoinAddress - Generates a random bitcoin address Hacker Abbreviation - Returns an abbreviation. Adjective - Returns a adjective. Noun - Returns a noun. Verb - Returns a verb. IngVerb - Returns an -ing verb. Phrase - Returns a phrase. Images Image - Gets a random image. Abstract - Gets an abstract looking image. Animals - Gets an image of an animal. Business - Gets a business looking image. Cats - Gets a picture of a cat. City - Gets a city looking image. Food - Gets an image of food. Nightlife - Gets an image with city looking nightlife. Fashion - Gets an image in the fashion category. People - Gets an image of humans. Nature - Gets an image of nature. Sports - Gets an image related to sports. Technics - Get a technology related image. Transport - Get a transportation related image. Internet Avatar - Generates a legit Internet URL avatar from twitter accounts. Email - Generates an email address. ExampleEmail - Generates an example email with @example.com UserName - Generates user names. DomainName - Generates a random domain name. DomainWord - Generates a domain word used for domain names. DomainSuffix - Generates a domain name suffix like .com, .net, .org Ip - Gets a random IP address. Mac - Gets a random mac address Color - Gets a random aesthetically pleasing color near the base R,G.B. See here. Protocol - Returns a random protocol. HTTP or HTTPS. Url - Generates a random URL. Lorem Words - Get some lorem words Letter - Get a character letter. Sentence - Get a random sentence. Default minimum of 3 words but at most 10 words (range = 7). If you want a sustenance with 5 words always call Sentence(5, range: 0); Sentences - Get some sentences. Paragraph - Get a paragraph. Paragraphs - Get some paragraphs with tabs n all. Text - Get random text on a random lorem methods. Lines - Get lines of lorem Name FirstName - Get a first name. Getting a gender specific name is only supported on locales that support it. Example, 'ru' supports male/female names, but not 'en' English. LastName - Get a first name. Getting a gender specific name is only supported on locales that support it. Example, Russian ('ru') supports male/female names, but English ('en') does not. Prefix - Gets a random prefix for a name Suffix - Gets a random suffix for a name FindName - Gets a full name JobTitle - Gets a random job title. JobDescriptor - Get a job description. JobArea - Get a job area expertise. JobType - Get a type of job. PhoneNumbers PhoneNumber - Get a phone number. PhoneNumberFormat - Gets a phone number via format array index as defined in a locale's phone_number.formats[] array. System FileName - Get a random file name MimeType - Get a random mime type CommonFileType - Returns a commonly used file type CommonFileExt - Returns a commonly used file extension FileType - Returns any file type available as mime-type FileExt - Gets a random extension for the given mime type. Semver - Get a random semver version string. Version - Get a random System.Version Exception - Get a random Exception with a fake stack trace. Helper Methods Person If you want to generate a Person with context relevant properties like an email that looks like it belongs to someone with the same first/last name, create a person! [Test] public void Create_Context_Related_Person() {     var person = new Bogus.Person();      person.Dump(); }  /* OUTPUT: {   ""FirstName"": ""Lee"",   ""LastName"": ""Brown"",   ""UserName"": ""Lee_Brown3"",   ""Avatar"": ""https://s3.amazonaws.com/uifaces/faces/twitter/ccinojasso1/128.jpg"",   ""Email"": ""Lee_Brown369@yahoo.com"",   ""DateOfBirth"": ""1984-01-16T21:31:27.87666"",   ""Address"": {     ""Street"": ""2552 Bernard Rapid"",     ""Suite"": ""Suite 199"",     ""City"": ""New Haskell side"",     ""ZipCode"": ""78425-0411"",     ""Geo"": {       ""Lat"": -35.8154,       ""Lng"": -140.2044     }   },   ""Phone"": ""1-500-790-8836 x5069"",   ""Website"": ""javier.biz"",   ""Company"": {     ""Name"": ""Kuphal and Sons"",     ""CatchPhrase"": ""Organic even-keeled monitoring"",     ""Bs"": ""open-source brand e-business""   } } */ Replace Replace a formatted string with random numbers #, letters ?, or * random number or letter: [Test] public void Create_an_SSN() {     var ssn = new Bogus.Randomizer().Replace(""###-##-####"");     ssn.Dump();      var code = new Randomizer().Replace(""##? ??? ####"");     code.Dump();      var serial = new Randomizer().Replace(""**-****"");     code.Dump(); } /* OUTPUT: ""618-19-3064"" ""39E SPC 0790"" ""L3-J9N5"" */ Parse Handlebars You can also parse strings in the following format: [Test] public void Handlebar() {     var faker = new Faker();     var randomName = faker.Parse(""{{name.lastName}}, {{name.firstName}} {{name.suffix}}"");     randomName.Dump(); }  /* OUTPUT: ""Roob, Michale PhD"" */ Building Download the source code. Run build.cmd. Upon successful build, the results will be in the \__compile directory. The build.cmd compiles the C# code and embeds the locales in Source\Bogus\data. If you want to rebuild the NuGet packages run build.cmd pack and the NuGet packages will be in __package. Rebundling Locales If you wish to re-bundle the latest faker.js locales, you'll need to first: git submodule init git submodule update Ensure, NodeJS and gulp are properly installed. cd Source\Builder npm install to install required dev dependencies. gulp build.locales to regenerate locales in Source\Bogus\data. In solution explorer add any new locales not already included as an EmbeddedResource. Finally, run build.bat. License MIT License Contributors Created by Brian Chavez. faker.js made possible by Matthew Bergman & Marak Squires. A big thanks to GitHub and all contributors: Anton Georgiev Martijn Laarman Anrijs Vitolins Pi Lanningham JvanderStad Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bchavez/Bogus"	"A simple and sane fake data generator for C#. Based on and ported from the famed faker.js."	"true"
"Testing"	"ExpressionToCode"	"https://github.com/EamonNerbonne/ExpressionToCode"	"Use plain C# syntax in assertions that include both the expression expression and subexpression values in the failure message."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"19"	"5"	"9"	"GitHub - EamonNerbonne/ExpressionToCode: Generates valid, readable C# from an Expression Tree. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 19 Fork 9 EamonNerbonne/ExpressionToCode Code Issues 14 Pull requests 1 Pulse Graphs Generates valid, readable C# from an Expression Tree. 443 commits 7 branches 26 releases 5 contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ToNameOf ilparse master rename roslyn safe_rename v2alpha Nothing to show 2.0.0-alpha4 2.0.0-alpha3 1.5.4 1.5.3 1.5.2 1.5.1 1.5.0 1.4.8 1.4.7 1.4.6 1.4.5 1.4.4 1.4.3 1.4.2 1.4.1 1.4 1.3.0 1.2.0.0 1.02 1.1.0.1 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0 Nothing to show New pull request Latest commit 9327685 Mar 4, 2016 EamonNerbonne Update README.md Permalink Failed to load latest commit information. .nuget remove remnants of old Msbuild-based nuget package restore. Feb 15, 2015 ExpressionToCode.Benchmarks Move optimized expression tree compiler to internals folder Feb 24, 2016 ExpressionToCode.Roslyn.Tests (minor) autoformat Feb 24, 2016 ExpressionToCode.Roslyn (minor) autoformat Feb 24, 2016 ExpressionToCodeLib 2.0.0-alpha4 Feb 24, 2016 ExpressionToCodeTest Approve new api Feb 24, 2016 .gitignore added: ExpressionCompiler based on IL.Emit which compile Expression T… Feb 16, 2016 .hgignore Ignore coverage files Jul 27, 2015 .hgtags Added tag 2.0.0-alpha4 for changeset 9730cf51b737 Feb 24, 2016 ExpressionToCode.sln added: ExpressionCompiler based on IL.Emit which compile Expression T… Feb 16, 2016 ExpressionToCode.sln.DotSettings Update to resharper 9 Jun 15, 2015 ExpressionToCode.sln.DotSettings.user Resharper upgrade Feb 24, 2016 LICENSE Added license May 24, 2014 README.md Update README.md Mar 4, 2016 VisualStudioTextEditor.vssettings Added compiled files to .hgignore; added text-editor settings to solu… Dec 7, 2010 VsMacroForCodingStyle.txt Added compiled files to .hgignore; added text-editor settings to solu… Dec 7, 2010 README.md ExpressionToCode ExpressionToCode generates valid, readable C# from an Expression Tree. (nuget: ExpressionToCodeLib) An example:   ExpressionToCode.ToCode(     () => new[] { 1.0, 2.01, 3.5 }.SequenceEqual(new[] { 1.0, 2.01, 3.5 })   ) == ""() => new[] { 1.0, 2.01, 3.5 }.SequenceEqual(new[] { 1.0, 2.01, 3.5 })"" ExpressionToCode also provides a clone of Groovy's Power Assert which includes the code of the failing assertion's expression and the values of its subexpressions. This functionality is particularly useful in a unit testing framework such as NUnit or xUnit.NET. When you execute the following (failing) assertion: PAssert.That(()=>Enumerable.Range(0,1000).ToDictionary(i=>""n""+i)[""n3""].ToString()==(3.5).ToString()); The assertion fails with the following message: PAssert.That failed for:  Enumerable.Range(0, 1000).ToDictionary(i => ""n"" + (object)i)[""n3""].ToString() == 3.5.ToString()              |                 |                            |         |        |        |              |                 |                            |         |        |        ""3.5""              |                 |                            |         |        false              |                 |                            |         ""3""              |                 |                            3              |                 {[n0, 0], [n1, 1], [n2, 2], [n3, 3], [n4, 4], [n5, 5], [n6, 6], [n7, 7], [n8, 8], [n9, 9], ...}              {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...}  ExpressionToCode was inspired by Power Asssert.NET. It differs from PowerAssert.NET by supporting a larger portion of the lambda syntax and that the generated C# is more frequently valid; the aim is to generate valid C# for all expression trees created from lambda's. Currently supported: Expression tree support Supports static field and property access Supports more operators, e.g. logical and bitwise negation Recognizes C# indexer use (e.g. dict[""mykey""]==3), in addition to special cases for array indexers and string indexers Adds parentheses where required by operator precedence and associativity (e.g. () => x - (a - b) + x * (a + b) is correctly regenerated) Generates valid numeric and other constant literals including escapes and suffixes where required (e.g. 1m + (decimal)Math.Sqrt(1.41)) Supports C# syntactic sugar for object initializers, object member initializers, list initializers, extension methods, anonymous types (issues #12, #3), etc Uses the same spacing rules Visual Studio does by default Supports nested Lambdas Expands generic type instances and nullable types into normal C# (e.g. Func<int, bool> and int?) Recognizes references to this and omits the keyword where possible (#5) Not implemented (yet?): Omit implicit casts (e.g. object.Equals((object)3, (object)4)) - issue #4. Use LINQ query syntax where possible - issue #6. Detect when type parameters to methods are superfluous - issue #13. Detect when nested lambda parameters require type annotation - issue #14. Warn when == differs from .Equals or .SequenceEquals, as Power Assert.NET does (issue #2). See all open issues. ExpressionToCode API All classes live in the ExpressionToCodeLib namespace. These are: PAssert for making assertions in NUnit tests and elsewhere. PAssert.That and PAssert.IsTrue are identical; both test the provided boolean expression and print a readable error message on failure ExpressionToCode Renders a System.Linq.Expressions.Expression object to source code. ExpressionToCode.ToCode (several overloads) simply renders the expression as source code. ExpressionToCode.AnnotatedToCode (several overloads) renders the expression as source code, then annotates all subexpressions which are computable with their value using the stalk-like rendering as shown on the Project Home page. Two public helper classes exist: PAssertFailedException thrown on assertion failure. ObjectToCode Renders .NET objects to code; a helper class. ObjectToCode.PlainObjectToCode renders simple objects that can be parsed by the C# compiler. This includes strings, chars, decimals, floats, doubles, all the integer types, booleans, enums, nulls, and default struct values. ObjectToCode.ComplexObjectToPseudoCode renders as best it can anything thrown at it; but the resultant rendering is not necessarily compilable. This is used to display the values of subexpressions. Dependencies Requires .NET 4.0 (.NET 3.5 could be supported by omitting support for newer expression types, this would require a few simple source changes). If you have any questions, you can contact me via github or mail eamon at nerbonne dot org. See the documentation above, then download from or import using NuGet, or just checkout the source (license: Apache 2.0 or the MIT license, at your option)! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/EamonNerbonne/ExpressionToCode"	"Use plain C# syntax in assertions that include both the expression expression and subexpression values in the failure message."	"true"
"Testing"	"FakeItEasy"	"https://github.com/FakeItEasy/FakeItEasy"	"The easy mocking library for.NET"	"null"	"null"	"null"	"null"	"null"	"http://fakeiteasy.github.io"	"null"	"557"	"47"	"113"	"GitHub - FakeItEasy/FakeItEasy: The easy mocking library for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 47 Star 557 Fork 113 FakeItEasy/FakeItEasy Code Issues 36 Pull requests 1 Wiki Pulse Graphs The easy mocking library for .NET http://fakeiteasy.github.io 1,595 commits 4 branches 46 releases 22 contributors C# 98.3% Other 1.7% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags AssertionExceptions NSubstituteSpike master support-1 Nothing to show 2.2.0 2.1.0 2.0.0 2.0.0-rc2 2.0.0-rc1 2.0.0-beta011 2.0.0-beta010 2.0.0-beta009 2.0.0-beta008 2.0.0-beta007 2.0.0-beta006 2.0.0-beta005 2.0.0-beta004 2.0.0-beta003 2.0.0-beta002 2.0.0-beta001 1.25.3 1.25.2 1.25.1 1.25.0 1.24.0 1.23.0 1.22.0 1.21.0 1.20.0 1.19.0 1.18.0 1.17.0 1.16.0 1.15.0 1.14.0 1.13.1 1.13.0 1.13.0-beta01 1.12.0 1.12.0-beta01 1.11.0 1.10.0 1.10.0-beta03 1.10.0-beta02 1.10.0-beta01 1.9.1 1.9.0 1.9.0-beta01 1.8.0 1.7.4626.65 Nothing to show New pull request Latest commit f2b743b Jul 14, 2016 adamralph committed on GitHub Merge pull request #800 from thomaslevesque/set-version-to-2.3.0 … setting version to 2.3.0 Permalink Failed to load latest commit information. .nuget Replace NUnit with xUnit Jun 20, 2016 docs move non-generic methods from A to Sdk.Create Jun 20, 2016 samples Make auto-properties get-only Jul 4, 2016 src setting version to 2.3.0 Jul 14, 2016 tests Reference xunit.runner.visualstudio from test projects Jul 6, 2016 .editorconfig Fix vbproj settings for EditorConfig Apr 6, 2016 .gitattributes #61 added .gitattributes May 18, 2013 .gitignore add API approval test May 5, 2016 .mailmap sorted mailmap entries Apr 11, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Apr 22, 2016 FakeItEasy.Dictionary.xml refactor: move solution file to root Feb 8, 2016 FakeItEasy.ruleset Fix sparse SDK namespace warning Jun 20, 2016 FakeItEasy.sln refactor: move FakeItEasy.nuspec into project folder May 20, 2016 FakeItEasy.snk refactor: introduce tests and samples folders Feb 8, 2016 Gemfile add Gemfile and Gemfile.lock for bundler Jul 19, 2015 Gemfile.lock bundle-update May 30, 2016 License.txt #79 added license title Mar 7, 2013 README.md Link to @vanpak May 30, 2016 Settings.StyleCop Change analyzer to use a member-to-diagnostic map May 20, 2016 build.cmd add build.cmd as a shortcut for bundle exec rake May 30, 2016 how_to_build.md add build.cmd as a shortcut for bundle exec rake May 30, 2016 mkdocs.yml add source stepping via GitLink May 30, 2016 rakefile.rb Replace NUnit with xUnit Jun 20, 2016 README.md A .Net dynamic fake framework for creating all types of fake objects, mocks, stubs etc. Easier semantics, all fake objects are just that - fakes - the use of the fakes determines whether they're mocks or stubs. Context-aware fluent interface guides the developer. Designed for ease of use. Full compatibility with both C# and VB.Net. It's faking amazing! Website Quickstart Documentation Chat Package FakeItEasy logo designed by Vanja Pakaski. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/FakeItEasy/FakeItEasy"	"The easy mocking library for.NET"	"true"
"Testing"	"Fluent Assertions"	"https://github.com/dennisdoomen/fluentassertions"	"A set of.NET extension methods that allow you to more naturally specify the expected outcome of a TDD or BDD-style test"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"624"	"44"	"139"	"GitHub - dennisdoomen/FluentAssertions: Fluent Assertions is a set of .NET extension methods that allow you to more naturally specify the expected outcome of a TDD or BDD-style test. We currently use it in all our internal and client projects, and it is used in many open-source projects. It runs on .NET 4.0, 4.5, 4.6, CoreClr, .NET Native, Windows 8.1, Silverlight 5, Windows Phone 8.0 and UWP. It supports the unit test frameworks NUnit, XUnit, MBUnit, Gallio, NSpec and MSpec. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 44 Star 624 Fork 139 dennisdoomen/FluentAssertions Code Issues 64 Pull requests 1 Wiki Pulse Graphs Fluent Assertions is a set of .NET extension methods that allow you to more naturally specify the expected outcome of a TDD or BDD-style test. We currently use it in all our internal and client projects, and it is used in many open-source projects. It runs on .NET 4.0, 4.5, 4.6, CoreClr, .NET Native, Windows 8.1, Silverlight 5, Windows Phone 8.0… http://www.fluentassertions.com 1,242 commits 5 branches 40 releases 47 contributors C# 98.6% PowerShell 1.4% C# PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags DotNED NuGet35 feature gh-pages master Nothing to show v3.2.1 v3.1.229 v3.1.227 v2.2 v2.1 4.12.0 4.11.0 4.10.0 4.9.1 4.9.0 4.8.0 4.7.0 4.6.3 4.6.2 4.6.1 4.6.0 4.5.0 4.4.0 4.3.2 4.3.1 4.3.0 4.2.2 4.2.1 4.2.0 4.1.1 4.1.0 4.0.1 4.0.0 4.0.0-beta.1 3.5.0 3.4.1 3.4.0 3.3.1 3.3.0 3.2.2 3.2.1 3.1.229 3.1.0 3.0.107 3.0.90 Nothing to show New pull request Latest commit 0ba1478 Jul 15, 2016 onovotny committed with dennisdoomen Add support for netstandard1.3 (#442) … * Add support for netstandard1.3 * Remove refgen items Permalink Failed to load latest commit information. .nuget Updated NuGet to 3.5 beta 2 (#444) Jul 13, 2016 Build Added Json project & specs (#403) May 12, 2016 Docs/Resources Reorganized the files according to https://gist.github.com/davidfowl/… Aug 5, 2015 Lib Added Json project & specs (#403) May 12, 2016 Src Add support for netstandard1.3 (#442) Jul 15, 2016 Tests Add support for netstandard1.3 (#442) Jul 15, 2016 .gitattributes Normalizes line endings and adds a gitattributes file to prevent recu… Nov 12, 2014 .gitignore Enable (partial) NCrunch support Oct 20, 2015 Build.Package.bat Added initial PSake script for building the solution. Apr 10, 2014 CONTRIBUTING.md Fix branch and sample spec references Jan 7, 2016 FluentAssertions.sln Added Json project & specs (#403) May 12, 2016 FluentAssertions.sln.DotSettings Ensured that ShouldBeEquivalentTo will only include properties which … Jan 6, 2016 FluentAssertions.v2.ncrunchsolution Enable (partial) NCrunch support Oct 20, 2015 InstallPfx.bat Updated the test certificate needed to run the WinRT unit tests. May 26, 2015 LICENSE Initial commit Jul 28, 2013 README.md Update README.md Nov 29, 2015 nuget.config Upgraded the PCL Specs project to 4.5 since AppVeyor doesn't support … Dec 28, 2015 README.md ""With Fluent Assertions, the assertions look beautiful, natural and most importantly, extremely readable"" (by Girish) See www.fluentassertions.com for more information about this project. Check out the documentation for the details of the API. The build status is Join the chat at Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dennisdoomen/fluentassertions"	"A set of.NET extension methods that allow you to more naturally specify the expected outcome of a TDD or BDD-style test"	"true"
"Testing"	"FluentAutomation"	"https://github.com/stirno/FluentAutomation"	"Simple Fluent API for UI Automation"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"195"	"32"	"82"	"GitHub - stirno/FluentAutomation: Simple Fluent API for UI Automation Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 195 Fork 82 stirno/FluentAutomation Code Issues 39 Pull requests 2 Pulse Graphs Simple Fluent API for UI Automation http://fluent.stirno.com 330 commits 3 branches 4 releases Fetching contributors C# 81.3% HTML 14.4% CSS 2.8% JavaScript 1.5% C# HTML CSS JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags dev gh-pages master Nothing to show v3.0.0.0 v2.2.0.1 v1.0.1.0 v1.0.0.65 Nothing to show New pull request Latest commit 7837643 Mar 15, 2016 stirno Merge pull request #154 from cegoya/documentation-bug … Incorrect semicolon placement. Permalink Failed to load latest commit information. .nuget Update NuGet.exe to latest Mar 31, 2014 Docs Merge pull request #154 from cegoya/documentation-bug Mar 15, 2016 FluentAutomation.SeleniumWebDriver Trying out the fix @predeekc offers for issue #132. Mar 15, 2016 FluentAutomation.TestApplication Fix issue 106 and add tests for different input types Apr 28, 2014 FluentAutomation.Tests Merge pull request #144 from csharpforevermore/dev Apr 13, 2015 FluentAutomation.WatiN Renamed FluentAutomation.csproj -> FluentAutomation.Core.csproj to ma… May 25, 2014 FluentAutomation Trying out the fix @predeekc offers for issue #132. Mar 15, 2016 .gitignore Make it easy for contributors to work on documentation Nov 2, 2015 CodeCoverage.runsettings More tests Apr 1, 2014 FluentAutomation.sln Renamed FluentAutomation.csproj -> FluentAutomation.Core.csproj to ma… May 25, 2014 FluentAutomation.sln.docstates.suo Fix for infinite loop issue in test execution Apr 18, 2012 FluentAutomation.suo Fix for infinite loop issue in test execution Apr 18, 2012 LICENSE.md Added license to repo Dec 20, 2013 README.md Added link to User Voice site to README Nov 5, 2012 pvcfile.csx Renamed FluentAutomation.csproj -> FluentAutomation.Core.csproj to ma… May 25, 2014 README.md FluentAutomation API - Simple Fluent API for UI Automation Please post ideas and new functionality that you'd like to see on our new UserVoice site: http://fluentapi.uservoice.com Visit our public site at http://fluent.stirno.com orfollow @stirno on Twitter. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/stirno/FluentAutomation"	"Simple Fluent API for UI Automation"	"true"
"Testing"	"FsCheck"	"https://github.com/fscheck/FsCheck"	"Random Testing for.NET."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"303"	"41"	"70"	"GitHub - fscheck/FsCheck: Random Testing for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 41 Star 303 Fork 70 fscheck/FsCheck Code Issues 24 Pull requests 4 Pulse Graphs Random Testing for .NET https://fscheck.github.io/FsCheck/ 1,026 commits 7 branches 29 releases 34 contributors F# 99.3% Other 0.7% F# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Gen-CPS fscheck3 gh-pages master no-static-arb nunit3 replace-random Nothing to show v1.0.0 v0.9.4 v0.9.3 v0.9.2 v0.9.1 v0.9.0.1 2.5.0 2.4.0 2.3.0 2.2.5 2.2.4 2.2.3 2.2.2 2.2.1 2.2.0 2.1.0 2.0.7 2.0.6 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.1-rc1 2.0.0-alpha 1.0.4 1.0.3 1.0.2 1.0.1 Nothing to show New pull request Latest commit 2fd909b Jul 15, 2016 mausch committed with kurtschelfthout Define ToString() for number wrappers (#290) … so that the output shows the underlying number Permalink Failed to load latest commit information. .paket Update paket bootstrapper. Apr 24, 2015 NuGet Attempt to fix FsCheck.Nunit's install.ps1. Nov 1, 2015 docs Added note on Gen.tryFilter to docs. (#270) May 27, 2016 examples Update Fake and FSharp.Formatting. Apr 11, 2016 src Define ToString() for number wrappers (#290) Jul 15, 2016 tests/FsCheck.Test Add support for generating MailAddress (#255) Jun 7, 2016 .gitattributes Update .gitattributes so SourceLink might work. May 24, 2014 .gitignore Add .vs folder to .gitignore Apr 10, 2016 .travis.yml Generation of docs is possible on Mono Nov 15, 2015 Contributors.txt Fix my name in the contributors file Aug 15, 2013 FsCheck Release Notes.md Add new release version placeholder. Jun 7, 2016 FsCheck-mono.sln add documentation for installing with Paket Sep 28, 2015 FsCheck.sln Add new doc page. Apr 11, 2016 License.txt Clean up docs generation. May 25, 2014 README.md Update readme. Apr 20, 2016 appveyor.yml Both travis and appveryor now build CI. Oct 2, 2015 build.cmd Update appveryor build. Jul 24, 2015 build.fsx Remove some whitespace. Nov 1, 2015 build.sh Create a push task Oct 19, 2015 paket.dependencies Lock NUnit to < 3.0 for now. Dec 17, 2015 paket.lock Update Fake and FSharp.Formatting. Apr 11, 2016 README.md What is FsCheck? FsCheck is a tool for testing .NET programs automatically. The programmer provides a specification of the program, in the form of properties which functions, methods or objects should satisfy, and FsCheck then tests that the properties hold in a large number of randomly generated cases. While writing the properties, you are actually writing a testable specification of your program. Specifications are expressed in F#, C# or VB, using combinators defined in the FsCheck library. FsCheck provides combinators to define properties, observe the distribution of test data, and define test data generators. When a property fails, FsCheck automatically displays a minimal counter example. FsCheck is a port of Haskell's QuickCheck. Important parts of the manual for using FsCheck is almost literally adapted from the QuickCheck manual. Any errors and omissions are entirely my responsibility. Since v0.5, scalacheck has influenced FsCheck as well. Scalacheck is itself a port of QuickCheck to Scala. FsCheck's generator combinators can be used in any testing framework to easily generate a number of random values for many types, and FsCheck itself integrates nicely with existing unit testing frameworks such as NUnit, xUnit, MSTest and MbUnit. NuGet Releases: FsCheck FsCheck with xUnit.NET integration FsCheck with NUnit integration FsCheck follows Semantic Versioning 2.0.0, except for the API exposed in FsCheck.Experimental which is subject to change at any time. All AppVeyor builds are available using the NuGet feed: https://ci.appveyor.com/nuget/fscheck If using Paket, add the source at the top of paket.dependencies. source https://www.nuget.org/api/v2 source https://ci.appveyor.com/nuget/fscheck  See the build history for a list of available versions: https://ci.appveyor.com/project/kurtschelfthout/fscheck/history Here are some options for specifying the dependency: nuget FsCheck nuget FsCheck prerelease nuget FsCheck 2.0.4 nuget FsCheck 2.0.5-b247  Documentation English Japanese Contributing Pull requests very welcome! Check out the issues marked up-for-grabs if you need any inspiration. It's very rare that we reject PRs. Generally, if you intend to make a bigger change, it's better to open an issue first to discuss. Building Checkout the project and run build.cmd on Windows or build.sh on Linux/OSX. That should pull in all the dependencies, build and run the tests. For Visual Studio/MonoDevelop/Xamarin Studio: open FsCheck.sln in Visual Studio on Windows or FsCheck-mono.sln on Linux/OSX in and start coding. For all other editors, FsCheck uses FAKE, targets for building are Build and for testing RunTests. Documentation uses FSharp.Formatting, so literate fsx files. To generate the html files, run build.[cmd|sh] generatedocs. Then run build.[cmd|sh] keeprunning and just edit any documentation fsx file, on save it should be picked up and re-generated. Windows on .NET: Linux on Mono: Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fscheck/FsCheck"	"Random Testing for.NET."	"true"
"Testing"	"Fuchu"	"https://github.com/mausch/Fuchu"	"A unit-testing library for F# with tests-as-values which makes DSLs extemely easy to create."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"66"	"8"	"13"	"GitHub - mausch/Fuchu: Functional test library for F# / C# / VB.NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 66 Fork 13 mausch/Fuchu Code Issues 18 Pull requests 2 Pulse Graphs Functional test library for F# / C# / VB.NET 312 commits 1 branch 17 releases Fetching contributors F# 93.9% C# 5.1% Other 1.0% F# C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.0.3 1.0.2 1.0.1 1.0.0 0.6.0 0.5.0 0.4.0 0.3.0.1 0.3.0 0.2.3 0.2.2 0.2.1 0.2.0 0.1.3 0.1.2 0.1.1 0.1 Nothing to show New pull request Latest commit a2bbe6c Jul 3, 2016 mausch committed on GitHub Update README.md Permalink Failed to load latest commit information. .nuget Fix NuGet restore in Mono Apr 21, 2014 Fuchu.CSharpTests Upgrade to FsCheck 2.2.4 Jan 27, 2016 Fuchu.FsCheck Bump version to 1.0.3 Jan 27, 2016 Fuchu.MbUnit Bump version to 1.0.3 Jan 27, 2016 Fuchu.PerfUtil.Charting Upgrade to PerfUtil 0.1.8 Jan 3, 2015 Fuchu.PerfUtil Bump version to 1.0.3 Jan 27, 2016 Fuchu.TDNet Explicit dependency on FSharp.Core Jan 3, 2015 Fuchu.TeamCity Explicit dependency on FSharp.Core Jan 3, 2015 Fuchu.Tests Upgrade to FsCheck 2.2.4 Jan 27, 2016 Fuchu Bump version to 1.0.3 Jan 27, 2016 lib NUnit from NuGet Apr 2, 2013 packages Explicit dependency on FSharp.Core Jan 3, 2015 .gitignore Fixes for changes in PerfUtil Apr 25, 2014 Fuchu.sln complete docs Apr 25, 2014 Fuchu.snk Sign assemblies that can be signed. Apr 25, 2014 README.md Update README.md Jul 3, 2016 build.bat No pause to avoid problems with build servers Apr 25, 2014 build.fsx Bump version to 1.0.3 Jan 27, 2016 build.sh Replace wget with curl. Oct 23, 2015 docker-build.sh mono 4.2 Nov 23, 2015 license.txt License Jun 16, 2012 README.md Fuchu Fuchu (pronounced ""foo choo"" with the accent on the last syllable) is a test library for .NET, supporting C# and VB.NET but with a special focus on F#. It draws heavily from Haskell's test-framework and HUnit. You can read about the rationale and underlying concepts in this blog post, or TL;DR: tests should be first-class values so that you can move them around and execute them in any context that you want. Also, if they are first-class values, then you can take extra care with what the test methods return, making integrations with external libraries much cheaper. Binaries Binaries are available on NuGet. Writing tests Here's the simplest test possible: open Fuchu  let simpleTest =      testCase ""A simple test"" <|          fun _ -> Assert.Equal(""2+2"", 4, 2+2)  Tests can be grouped (with arbitrary nesting): let tests =      testList ""A test group"" [         testCase ""one test"" <|             fun _ -> Assert.Equal(""2+2"", 4, 2+2)         testCase ""another test"" <|             fun _ -> Assert.Equal(""3+3"", 3, 3+3)     ]  In C#: static Test ATest {     get {         return Test.List(""A test group"", new[] {             Test.Case(""one test"", () => Assert.Equal(""2+2"", 4, 2+2)),             Test.Case(""another test"", () => Assert.Equal(""3+3"", 3, 3+3)),         });     } }  The first parameter in the assertions describes the assertion. This is usually an optional parameter in most test frameworks; in Fuchu it's required to foster descriptive failures, so you'll get a failure like ""3+3 Expected value 3, actual 6"" instead of just ""Expected value 3, actual 6"". For more examples, including a few ways to do common things in other test frameworks like setup/teardown and parameterized tests, see the F# tests and the C# tests Assertions Fuchu is mainly oriented to test organization. Although it does have a few basic assertions, you're encouraged to write your own specialized assertions for each project (they're only a couple of lines in F#), or use some other library for assertions, like Unquote, FsUnit, or even MbUnit or NUnit. Running tests The test runner is the test assembly itself. It's recommended to compile your test assembly as a console application. You can run a test directly like this: run simpleTest // or runParallel  which returns 1 if any tests failed, otherwise 0. Useful for returning to the operating system as error code. Or you can mark the top-level test in each test file with the [<Tests>] attribute, then define your main like this: open Fuchu  [<EntryPoint>] let main args = defaultMainThisAssembly args  This defaultMainThisAssembly function admits a ""/m"" parameter passed through the command-line to run tests in parallel. You can single out tests by filtering them by name. For example: tests |> Test.filter (fun s -> s.EndsWith ""another test"") |> run  You can use the F# REPL to run tests this way. In C#: static int Main(string[] args) {     return ATest.Run(); // or RunParallel() }  Or scanning for tests marked with the [Tests] attribute: static int Main(string[] args) {     return Tests.DefaultMainThisAssembly(args); }  FsCheck integration Reference FsCheck and Fuchu.FsCheck to test properties: let config = { FsCheck.Config.Default with MaxTest = 10000 }  let properties =      testList ""FsCheck"" [         testProperty ""Addition is commutative"" <|             fun a b ->                  a + b = b + a          // you can also override the FsCheck config         testPropertyWithConfig config ""Product is distributive over addition"" <|             fun a b c ->                  a * (b + c) = a * b + a * c     ]  run properties  In C# (can't override FsCheck config at the moment): static Test Properties =     Test.List(""FsCheck"", new[] {         FsCheck.Property(""Addition is commutative"",                             (int a, int b) => a + b == b + a),         FsCheck.Property(""Product is distributive over addition"",                             (int a, int b, int c) => a * (b + c) == a * b + a * c),     });  You can freely mix FsCheck properties with regular test cases and test lists. PerfUtil integration The integration with Eirik's PerfUtil project. open global.PerfUtil  module Types =     type Y = { a : string; b : int }  type Serialiser =     inherit ITestable     abstract member Serialise<'a> : 'a -> unit  type MySlowSerialiser() =     interface ITestable with         member x.Name = ""Slow Serialiser""     interface Serialiser with         member x.Serialise _ =             System.Threading.Thread.Sleep(30)  type FastSerialiser() =     interface ITestable with         member x.Name = ""Fast Serialiser""     interface Serialiser with         member x.Serialise _ =             System.Threading.Thread.Sleep(10)  type FastSerialiserAlt() =     interface ITestable with         member x.Name = ""Fast Serialiser Alt""     interface Serialiser with         member x.Serialise _ =             System.Threading.Thread.Sleep(20)  let alts : Serialiser list = [ FastSerialiser(); FastSerialiserAlt() ] let subj = MySlowSerialiser() :> Serialiser  open Types  let normal_serlialisation : PerfTest<Serialiser> list = [     perfTest ""serialising string"" <| fun s ->         s.Serialise(""wowowow"")     perfTest ""serialising record"" <| fun s ->         s.Serialise { a = ""hello world""; b = 42 }     ]  [<Tests>] let tests =     testList ""performance comparison tests"" [         testPerfImpls ""implementations of Serialiser"" subj alts normal_serlialisation         testPerfHistory ""historical MySlowSerialiser"" subj ""v1.2.3"" normal_serlialisation     ]  This example shows both a comparison performance test between MySlowSerialiser, FastSerialiser and FastSerialiserAlt: testPerfImpls and a historical comparison of MySlowSerialiser alone which saves an xml file next to the dll on every run. You can find detailed docs in the source code of PerfUtil.fs on all parameters and data structures. All things that can be configured with PerfUtil can be configured with the conf parameter to testPerfImplsWithConfig and testPerfHistoryWithConfig. The functions are discoverable by starting with testPerf*. Handle the results explicitly by giving a config with a value of handleResults. Use that if you want to export the data to e.g. CSV or TSV. More examples Some projects using Fuchu: FsSql FsFormlets UrchiNet (C# and F#) Figment NHWebConsole Fleece EdmundsNet Suave Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mausch/Fuchu"	"A unit-testing library for F# with tests-as-values which makes DSLs extemely easy to create."	"true"
"Testing"	"Machine.Specifications"	"https://github.com/machine/machine.specifications"	"Machine.Specifications (MSpec) is a context/specification framework that removes language noise and simplifies tests."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"617"	"51"	"181"	"GitHub - machine/machine.specifications: Machine.Specifications is a Context/Specification framework geared towards removing language noise and simplifying tests. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 51 Star 617 Fork 181 machine/machine.specifications Code Issues 34 Pull requests 4 Wiki Pulse Graphs Machine.Specifications is a Context/Specification framework geared towards removing language noise and simplifying tests. 1,224 commits 4 branches 1 release 51 contributors C# 94.2% XSLT 2.9% Ruby 2.0% Other 0.9% C# XSLT Ruby Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop hotfix-0.9.2 master mspec-light Nothing to show 0.6.0 Nothing to show New pull request Latest commit cdd8d63 Feb 23, 2016 BrunoJuchli Merge pull request #271 from wallymathieu/patch-1 … Updated documentation to reflect that ShouldBeOfType is now deprecated and ShouldBeOfExactType should be used. Thanks to NameOfTheDragon. Permalink Failed to load latest commit information. .nuget Using console runner Jul 18, 2014 Misc Fixing tools output of nuspec Nov 3, 2014 Source Exception thrown by Cleanup delegate now fails the test runner. Jul 3, 2015 packages Moved TDNet Runner Jul 15, 2014 .gitignore Switched to Rake and Bundler Jan 6, 2014 CONTRIBUTING.md Added how to build and start of contribution guidelines Jan 6, 2014 Gemfile Update gems Feb 18, 2014 Gemfile.lock Update gems Feb 18, 2014 HOW_TO_BUILD.md Added how to build and start of contribution guidelines Jan 6, 2014 License.txt Adding XUnit's license Nov 18, 2009 Machine.Specifications.1.1.dotCover Moving solution file one level up Aug 8, 2011 Machine.Specifications.5.1.ReSharper Moving solution file one level up Aug 8, 2011 Machine.Specifications.6.0.ReSharper Moving solution file one level up Aug 8, 2011 Machine.Specifications.6.1.ReSharper Added settings for ReSharper 6.1 Nov 30, 2011 Machine.Specifications.sln Deleted IssueX examples Jul 18, 2014 Machine.Specifications.sln.DotSettings Adding runner for dotCover 2.2 Nov 22, 2012 README.md You get a warning regarding ShouldBeOfType Apr 3, 2015 build-debug.cmd Rewriting the build system, allowing us to create x86/AnyCPU and CLR2… Mar 5, 2011 build-release.cmd Rewriting the build system, allowing us to create x86/AnyCPU and CLR2… Mar 5, 2011 build.cmd Fixed command line auto close Jan 6, 2014 history.txt improved version history for 0.9.3 Jul 3, 2015 install.ps1.template Replacing install.ps1 hack to remove the TDNet runner reference with … Aug 31, 2011 quicktemplate.rb Removed tools folder Jan 24, 2014 rakefile.include.rb removed Specs task Jul 18, 2014 rakefile.rb Disable specs for a while Jul 15, 2014 ripple.config ShouldExtensions removed in Machine.Specifications.ConsoleRunner.Specs Dec 31, 2013 README.md Machine.Specifications Machine.Specifications (MSpec) is a context/specification framework that removes language noise and simplifies tests. All it asks is that you accept the = () =>. Keep up with the latest news and discussions or follow the maintainers, @agross, CTO of GROSSWEBER and @danielmarbach. Installation You can download the unsigned binaries (recommended) or the signed binaries directly from the TeamCity server. But, we recommended installing the NuGet package. Install on the command line from your solution directory: cmd> nuget install Machine.Specifications cmd> nuget install Machine.Specifications.Should  # or: cmd> nuget install Machine.Specifications-Signed cmd> nuget install Machine.Specifications.Should-Signed Or use the Package Manager console in Visual Studio: PM> Install-Package Machine.Specifications PM> Install-Package Machine.Specifications.Should  # or: PM> Install-Package Machine.Specifications-Signed PM> Install-Package Machine.Specifications.Should-Signed The should library described above is an opinionated library provided by MSpec. You can also use other libraries like FluentAssertions. Usage MSpec is called a ""context/specification"" test framework because of the ""grammar"" that is used in describing and coding the tests or ""specs"". That grammar reads roughly like this When the system is in such a state, and a certain action occurs, it should do such-and-such or be in some end state. You should be able to see the components of the traditional Arrange-Act-Assert model in there. To support readability and remove as much ""noise"" as possible, MSpec eschews the traditional attribute-on-method model of test construction. It instead uses custom .NET delegates that you assign anonymous methods and asks you to name them following a certain convention. Read on to construct a simple MSpec styled specification class. Subject The Subject attribute is the first part of a spec class. It describes the ""context"", which can be the literal Type under test or a broader description. The subject is not required, but it is good practice to add it. Also, the attribute allows ReSharper to detect context classes such that delegate members will not be regarded as unused. The class naming convention is to use Sentence_snake_case and to start with the word ""When"". [Subject(""Authentication"")]                           // a description [Subject(typeof(SecurityService))]                    // the type under test [Subject(typeof(SecurityService), ""Authentication"")]  // or a combo! public class When_authenticating_a_user { ... }       // remember: you can only use one Subject Attribute! Tags The Tags attribute is used to organize your spec classes for inclusion or exclusion in test runs. You can identify tests that hit the database by tagging them ""Slow"" or tests for special reports by tagging them ""AcceptanceTest"". Tags can be used to include or exclude certain contexts during a spec run. [Tags(""RegressionTest"")]  // this attribute supports any number of tags via a params string[] argument! [Subject(typeof(SecurityService), ""Authentication"")] public class When_authenticating_a_user { ... } Establish The Establish delegate is the ""Arrange"" part of the spec class. The Establish will only run once, so your assertions should not mutate any state or you may be in trouble. [Subject(""Authentication"")] public class When_authenticating_a_new_user {     Establish context = () =>     {         // ... any mocking, stubbing, or other setup ...         Subject = new SecurityService(foo, bar);     };      static SecurityService Subject; } Cleanup The pair to Establish is Cleanup, which is also called once after all of the specs have been run. [Subject(""Authentication"")] public class When_authenticating_a_user {     Establish context = () =>     {         Subject = new SecurityService(foo, bar);     };      Cleanup after = () =>     {         Subject.Dispose();     };      static SecurityService Subject; } Because The Because delegate is the ""Act"" part of the spec class. It should be the single action for this context, the only part that mutates state, against which all of the assertions can be made. Most Because statements are only one line, which allows you to leave off the squiggly brackets! [Subject(""Authentication"")] public class When_authenticating_a_user {     Establish context = () =>     {         Subject = new SecurityService(foo, bar);     };      Because of = () => Subject.Authenticate(""username"", ""password"");      static SecurityService Subject; } If you have a multi-line Because statement, you probably need to identify which of those lines are actually setup and move them into the Establish. Or, your spec may be concerned with too many contexts and needs to be split or the subject-under-test needs to be refactored. It The It delegate is the ""Assert"" part of the spec class. It may appear one or more times in your spec class. Each statement should contain a single assertion, so that the intent and failure reporting is crystal clear. Like Because statements, It statements are usually one-liners and may not have squiggly brackets. [Subject(""Authentication"")] public class When_authenticating_an_admin_user {     Establish context = () =>     {         Subject = new SecurityService(foo, bar);     };      Because of = () => Token = Subject.Authenticate(""username"", ""password"");      It should_indicate_the_users_role = () => Token.Role.ShouldEqual(Roles.Admin);     It should_have_a_unique_session_id = () => Token.SessionId.ShouldNotBeNull();      static SecurityService Subject;     static UserToken Token; } An It statement without an assignment will be reported by the test runner in the ""Not implemented"" state. You may find that ""stubbing"" your assertions like this helps you practice TDD. It should_list_your_authorized_actions; Assertion Extension Methods As you can see above, the It assertions make use of these (ShouldEqual, ShouldNotBeNull) Should extension methods. They encourage readability and a good flow to your assertions when read aloud or on paper. You should use them wherever possible, just ""dot"" off of your object and browse the IntelliSense! It's good practice to make your own Should assertion extension methods for complicated custom objects or domain concepts. Ignore Every test framework lets you ignore incomplete or failing (we hope not) specs, MSpec provides the Ignore attribute for just that. Just leave a note describing the reason that you ignored this spec. [Ignore(""We are switching out the session ID factory for a better implementation"")] It should_have_a_unique_session_id = () => Token.SessionId.ShouldNotBeNull(); Catch When testing that exceptions are thrown from the ""action"" you should use a Catch statement. This prevents thrown exceptions from escaping the spec and failing the test run. You can inspect the exception's expected properties in your assertions. [Subject(""Authentication"")] public class When_authenticating_a_user_fails_due_to_bad_credentials {     Establish context = () =>     {         Subject = new SecurityService(foo, bar);     };      Because of = () => Exception = Catch.Exception(() => Subject.Authenticate(""username"", ""password""));      It should_fail = () => Exception.ShouldBeOfExactType<AuthenticationFailedException>();     It should_have_a_specific_reason = () => Exception.Message.ShouldContain(""credentials"");      static SecurityService Subject;     static Exception Exception; } Command Line Reference MSpec, like other testing frameworks, provides a robust command-line runner that can be used to execute specs in one or more assemblies and allows a number of output formats to suit your needs. The runner is provided as a separate package and can be installed with the following commands: cmd> nuget install Machine.Specifications.Runner.Console Or use the Package Manager console in Visual Studio: PM> Install-Package Machine.Specifications.Runner.Console The runner comes in different flavors: mspec.exe, AnyCPU, runs on the CLR 2.0 mspec-x86.exe, x86, runs on the CLR 2.0 mspec-clr4.exe, AnyCPU, runs on the CLR 4.0 mspec-x86-clr4.exe, x86, runs on the CLR 4.0 Usage of the command-line runner is as follows (from mspec.exe --help): Usage: mspec.exe [options] <assemblies> Options: -f, --filters               Filter file specifying contexts to execute (full type name, one per line). Takes precedence over tags -i, --include               Executes all specifications in contexts with these comma delimited tags. Ex. -i ""foo,bar,foo_bar"" -x, --exclude               Exclude specifications in contexts with these comma delimited tags. Ex. -x ""foo,bar,foo_bar"" -t, --timeinfo              Shows time-related information in HTML output -s, --silent                Suppress progress output (print fatal errors, failures and summary) -p, --progress              Print dotted progress output -c, --no-color              Suppress colored console output -w, --wait                  Wait 15 seconds for debugger to be attached --teamcity                  Reporting for TeamCity CI integration (also auto-detected) --no-teamcity-autodetect    Disables TeamCity autodetection --appveyor                  Reporting for AppVeyor CI integration (also auto-detected) --no-appveyor-autodetect    Disables AppVeyor autodetection --html <PATH>               Outputs the HTML report to path, one-per-assembly w/ index.html (if directory, otherwise all are in one file) --xml <PATH>                Outputs the XML report to the file referenced by the path -h, --help                  Shows this help message Usage: mspec.exe [options] <assemblies>  More information can be found under the console runner repo. Please provide feedback, feature requests, issues and more in that repository. TeamCity Reports MSpec can output TeamCity service messages to update the test run status in real time. This feature is enabled by passing the --teamcity switch, but the command-line runner can auto-detect that it is running in the TeamCity context. More information can be found under the reporting repo. Please provide feedback, feature requests, issues and more in that repository. HTML Reports MSpec can output human-readable HTML reports of the test run by passing the --html option. If a filename is provided, the output is placed at that path, overwriting existing files. If multiple assemblies are being testing, the output is grouped into a single file. If no filename is provided, it will use the name of the assembly(s). If multiple assemblies are being tested, an index.html is created with links to each assembly-specific report. You can use this option if your CI server supports capturing HTML as build reports. More information can be found under the reporting repo. Please provide feedback, feature requests, issues and more in that repository. XML Reports MSpec can output XML test run reports by passing the --xml option. This option behaves the same as the --html option, in terms of file naming. More information can be found under the reporting repo. Please provide feedback, feature requests, issues and more in that repository. Selenium Reports The MSpec HTML reports can show additional Selenium-specific information, like screenshots and debug statements. Instructions on how to integrate this feature into your specs is available on the web. There is also a sample implementation available. More information can be found under the reporting repo. Please provide feedback, feature requests, issues and more in that repository. ReSharper Integration MSpec provides a batch file to integrate with the ReSharper test runner, custom naming rules, and code annotations. MSpec currently supports ReSharper 7.1, 8.0, 8.1 and 8.2. We strongly recommend to install the ReSharper integration with the Extension Manager. Just search for Machine.Specifications.Runner.Resharper. In future versions the command line batch installation will be deprecated. More information can be found under the resharper repo. Please provide feedback, feature requests, issues and more in that repository. Code Annotations By default, ReSharper thinks that specification classes (those with the [Subject] attribute) and their internals are unused. To change this behavior in Visual Studio: Open the ReSharper Options (ReSharper -> Options...) Select ""Code Annotations"" Ensure that the namespace ""Machine.Specifications.Annotations"" is checked Click ""OK"" Make sure your reports are decorated with [Subject] attribute Templates The file, live, and surround templates can be imported from Misc\ReSharper.*.DotSettings. The single file template creates a basic context. The single surround template wraps a Catch.Exception call (more information how to use them). The live templates cover the major delegates: mse, an Establish delegate msb, a Because delegate msi, an It delegate msf, a failing It delegate, use in combination with the Catch surround template TestDriven.Net Integration MSpec provides a batch file for setting up TD.NET integration. Newer versions (2.24+) support an xcopy integration that avoids the versioning issues arising from the registry-based scheme. If you use NuGet, you're already set. If you're not using NuGet, make sure to copy Machine.Specifications.dll.tdnet and Machine.Specifications.TDNetRunner.dll to your project's output directory. The runner is provided as a separate package and can be installed with the following commands: cmd> nuget install Machine.Specifications.Runner.TDnet Or use the Package Manager console in Visual Studio: PM> Install-Package Machine.Specifications.Runner.TDnet More information can be found under the TDnet repo. Please provide feedback, feature requests, issues and more in that repository. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/machine/machine.specifications"	"Machine.Specifications (MSpec) is a context/specification framework that removes language noise and simplifies tests."	"true"
"Testing"	"Moq"	"https://github.com/Moq/moq4"	"The most popular and friendly mocking framework for.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1344"	"151"	"333"	"GitHub - moq/moq4: Repo for managing Moq 4.x Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 151 Star 1,344 Fork 333 moq/moq4 Code Issues 109 Pull requests 10 Wiki Pulse Graphs Repo for managing Moq 4.x 819 commits 3 branches 1 release 40 contributors C# 99.9% Batchfile 0.1% C# Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master netcore Nothing to show v4.2.1312 Nothing to show New pull request Latest commit 6446b19 Jul 11, 2016 kzu committed on GitHub Merge pull request #264 from hahn-kev/master … Exceptions using Verify for specific calls should include actual values Permalink Failed to load latest commit information. .nuget Migrate to NuGet v3, move to .NET v4.5, update build May 22, 2016 Common @ 354e54d Finally added automated nuget package builds. Aug 21, 2013 Samples Re-normalize repository Dec 13, 2013 Source Merge pull request #264 from hahn-kev/master Jul 11, 2016 UnitTests.Visualizer Re-normalize repository Dec 13, 2013 UnitTests Merge pull request #264 from hahn-kev/master Jul 11, 2016 Visualizer Re-normalize repository Dec 13, 2013 .editorconfig Add .editorconfig May 26, 2016 .gitattributes Added CRLF settings to repo Jul 8, 2013 .gitignore Migrate to NuGet v3, move to .NET v4.5, update build May 22, 2016 .gitmodules Finally added automated nuget package builds. Aug 21, 2013 Before.Moq.sln.targets Migrate to NuGet v3, move to .NET v4.5, update build May 22, 2016 GitInfo.txt Update to .NET 4.5 May 24, 2016 License.txt License is BSD-3, not BSD-2 Sep 7, 2015 Moq.nuspec Remove PDBs from package since gitlink doesn't seem to be working May 26, 2016 Moq.shfb Re-normalize repository Dec 13, 2013 Moq.shfbproj Re-normalize repository Dec 13, 2013 Moq.sln Migrate to NuGet v3, move to .NET v4.5, update build May 22, 2016 Moq.snk Merged branch for dynamic types. Jan 3, 2008 NuGet.Restore.targets Migrate to NuGet v3, move to .NET v4.5, update build May 22, 2016 README.md Remove downloads badge Jun 9, 2016 ReleaseNotes.md Remove ILMerge May 26, 2016 appveyor.yml Bump GitInfo for fix on branch name May 22, 2016 build.cmd Allow overriding default targets via .cmd May 26, 2016 build.proj Allow overriding default targets via .cmd May 26, 2016 moq-bigger.png Updated to use nuget packages for Castle and xUnit dependencies, as w… Aug 21, 2013 moq-small.png cleaned up AsMockExtensions Aug 9, 2009 moq.png tentative logo Aug 24, 2008 packages.config Fix versioning issue with cached git info May 26, 2016 README.md moq The most popular and friendly mocking framework for .NET   var mock = new Mock<ILoveThisFramework>();    // WOW! No record/replay weirdness?! :)   mock.Setup(framework => framework.DownloadExists(""2.0.0.0""))       .Returns(true);    // Hand mock.Object as a collaborator and exercise it,    // like calling methods on it...   ILoveThisFramework lovable = mock.Object;   bool download = lovable.DownloadExists(""2.0.0.0"");    // Verify that the given method was indeed called with the expected value at most once   mock.Verify(framework => framework.DownloadExists(""2.0.0.0""), Times.AtMostOnce()); Moq also is the first and only framework so far to provide Linq to Mocks, so that the same behavior above can be achieved much more succintly:   ILoveThisFramework lovable = Mock.Of<ILoveThisFramework>(l =>     l.DownloadExists(""2.0.0.0"") == true);    // Hand the instance as a collaborator and exercise it,    // like calling methods on it...   bool download = lovable.DownloadExists(""2.0.0.0"");    // Simply assert the returned state:   Assert.True(download);    // If you really want to go beyond state testing and want to    // verify the mock interaction instead...   Mock.Get(lovable).Verify(framework => framework.DownloadExists(""2.0.0.0"")); You can think of Linq to Mocks as ""from the universe of mocks, give me one whose behavior matches this expression"". Checkout the Quickstart for more examples! What? Moq (pronounced ""Mock-you"" or just ""Mock"") is the only mocking library for .NET developed from scratch to take full advantage of .NET Linq expression trees and lambda expressions, which makes it the most productive, type-safe and refactoring-friendly mocking library available. And it supports mocking interfaces as well as classes. Its API is extremely simple and straightforward, and doesn't require any prior knowledge or experience with mocking concepts. Why? The library was created mainly for developers who aren't currently using any mocking library (or are displeased with the complexities of some other implementation), and who are typically manually writing their own mocks (with more or less ""fanciness""). Most developers in this situation also happen to be quite pragmatic and adhere to state (or classic) TDD. It's the result of feeling that the barrier of entry from other mocking libraries is a bit high, and a simpler, more lightweight and elegant approach is possible. Moq achieves all this by taking full advantage of the elegant and compact C# and VB language features collectively known as LINQ (they are not just for queries, as the acronym implies). Moq is designed to be a very practical, unobtrusive and straight-forward way to quickly setup dependencies for your tests. Its API design helps even novice users to fall in the ""pit of success"" and avoid most common misuses/abuses of mocking. When it was conceived, it was the only mocking library that went against the generalized and somewhat unintuitive (especially for novices) Record/Replay approach from all other frameworks (and that might have been a good thing ;)). Not using Record/Replay also means that it's straightforward to move common expectations to a fixture setup method and even override those expectations when needed in a specific unit test. You can read more about the ""why"" and see some nice screenshots at kzu's blog. Where? See our Quickstart examples to get a feeling of the extremely simple API and install from nuget. Check out the API documentation at NuDoq. Read about the announcement at kzu's blog. Get some background on the state of mock libraries from Scott Hanselman. Who? Moq was originally developed by Clarius, Manas and InSTEDD. Moq uses Castle DynamicProxy internally as the interception mechanism to enable mocking. It's merged into Moq binaries, so you don't need to do anything other than referencing Moq.dll, though. Features at a glance Moq offers the following features: Strong-typed: no strings for expectations, no object-typed return values or constraints Unsurpassed VS intellisense integration: everything supports full VS intellisense, from setting expectations, to specifying method call arguments, return values, etc. No Record/Replay idioms to learn. Just construct your mock, set it up, use it and optionally verify calls to it (you may not verify mocks when they act as stubs only, or when you are doing more classic state-based testing by checking returned values from the object under test) VERY low learning curve as a consequence of the previous three points. For the most part, you don't even need to ever read the documentation. Granular control over mock behavior with a simple MockBehavior enumeration (no need to learn what's the theoretical difference between a mock, a stub, a fake, a dynamic mock, etc.) Mock both interfaces and classes Override expectations: can set default expectations in a fixture setup, and override as needed on tests Pass constructor arguments for mocked classes Intercept and raise events on mocks Intuitive support for out/ref arguments We appreciate deeply any feedback that you may have! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Moq/moq4"	"The most popular and friendly mocking framework for.NET"	"true"
"Testing"	"NBuilder"	"https://github.com/garethdown44/nbuilder"	"Rapid generation of test objects"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"2"	"53"	"GitHub - garethdown44/nbuilder: Rapid generation of test objects in .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 10 Fork 53 garethdown44/nbuilder forked from nbuilder/nbuilder Code Pull requests 0 Pulse Graphs Rapid generation of test objects in .NET http://www.nbuilder.org 157 commits 4 branches 0 releases Fetching contributors C# 85.1% HTML 7.6% XSLT 4.0% CSS 3.2% PowerShell 0.1% Batchfile 0.0% C# HTML XSLT CSS PowerShell Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages master revert-30-make-getrandom-thread-safe Nothing to show Nothing to show New pull request Pull request Compare This branch is even with nbuilder:master. Latest commit 7932e09 Feb 22, 2016 crmckenzie Merge pull request #39 from gitter-badger/gitter-badge … Add a Gitter chat badge to README.md Permalink Failed to load latest commit information. BuildScripts See if stopping teamcity from overwriting the nunit2 task helps fix t… Dec 15, 2011 Lib Add nantcontrib-0.91 files which for some reason didn't get added wit… Dec 14, 2011 Source Merge pull request #28 from StanleyGoldman/generate_positive_float_bug Feb 22, 2016 Website git-svn-id: http://nbuilder.googlecode.com/svn/trunk/@112 8cbb6a18-f0… Aug 6, 2011 nuget Fixed copy-paste error in nuspec file. Jun 9, 2014 .gitignore merge pull request 5 May 9, 2014 HowToRunTheTests.txt git-svn-id: http://nbuilder.googlecode.com/svn/trunk/@44 8cbb6a18-f00… May 29, 2009 Invoke-Build.ps1 Adding strategy for NBuilder package creation Jun 9, 2014 README.md Add Gitter badge Feb 23, 2016 build.bat Upgrade Nant from nant-0.86-beta to nant-0.91 Dec 14, 2011 README.md Nbuilder - A rapid test object generator. NBuilder.Trunk: NBuilder.CI: NBuilder.Publish Through a fluent, extensible interface, NBuilder allows you to rapidly create test data, automatically assigning values to properties and public fields that are one of the built in .NET data types (e.g. ints and strings). NBuilder allows you to override for properties you are interested in using lambda expressions. How can NBuilder help? This test data has a variety of uses. For example: For automated functional and acceptance tests. Returning the data from a stubbed service. Creating test data for use when developing or testing an application. Performance tuning with large amounts of data. Major features Persistence Easily persist generated objects using Persist() NBuilder also allows you to easily set up persistence. You do this by telling NBuilder how to persist your objects. The most convenient place to do this would be in an NUnit SetUpFixture class. var repository = new ProductRepository(); BuilderSetup.SetPersistenceCreateMethod<IList<Product>>(repository.CreateAll); Once you have done this, it's simply a case of calling Persist() instead of Build(): Builder<Product>.CreateListOfSize(100).Persist(); Hierarchy generation Easily create hierarchies of objects by telling NBuilder how to add children to your object. You can even persist the hierarchies just by giving NBuilder create and update methods. You can easily create a random hierarchy by first creating an initial list and then calling BuildHierarchy(), and passing in a specification. var hierarchySpec = Builder<HierarchySpec<Category>>.CreateNew()                 .With(x => x.AddMethod = (parent, child) => parent.AddChild(child))                 .With(x => x.Depth = 5)                 .With(x => x.MaximumChildren = 10)                 .With(x => x.MinimumChildren = 5)                 .With(x => x.NamingMethod = (cat, title) => cat.Title = ""Category "" + title)                 .With(x => x.NumberOfRoots = 10).Build();              Builder<Category>.CreateListOfSize(2500).BuildHierarchy(hierarchySpec); This will create a category tree and by supplying a naming method, will even name your categories with their path in the tree. For example:  Category - Title = ""1""       Category - Title = ""1.1""       Category - Title = ""1.2""   Category - Title = ""2""       Category - Title = ""2.1""           Category - Title = ""2.1.1""       Category - Title = ""2.2""       Category - Title = ""2.3"" Configurability NBuilder is highly configurable. Through the BuilderSetup class you can control how NBuilder names objects and disable naming for certain properties of certain types. Custom persistence service Easily add your own custom persistence service, allowing you to use any ORM. BuilderSetup.SetPersistenceService(new MyCustomPersistenceService()); Builder<Product>.CreateNew().Persist(); Turning off automatic property naming If you don't want properties to be automatically given values, you can simply turn it off. BuilderSetup.AutoNameProperties = false; Changing the default property namer You can change the default property namer to use the random value property namer, or you can create your own either from scratch implementing the IPropertyNamer interface, or by extending one of the classes, for example to add support BuilderSetup.SetDefaultPropertyNamer(new RandomValuePropertyNamer()); Adding a property namer for a specific type If, for example, you have a class that has a custom struct, NBuilder will ignore this property because it doesn't know how to set it. You could overcome this by adding a special property namer, just for Products. BuilderSetup.SetPropertyNamerFor<Product>(new CustomProductPropertyNamer(new ReflectionUtil())); Disabling automatic property naming for a specific property of a specific type If you don't want values to automatically be assigned to certain properties, you can disable it like this: BuilderSetup.DisablePropertyNamingFor<Product, int>(x => x.Id); Extensibility Through extension methods you can extend NBuilder's fluent interface to add custom building functionality. You can also create custom property namers globally or for specific types. Custom declarations In NBuilder nearly all of the public interface is implemented with extension methods. This of course means it's possible to add your own. For example, out of the box the list builder has seven 'declarations' WhereAll(), WhereRandom(n), WhereRandom(n, start, end), WhereTheFirst(n), WhereTheLast(n), AndTheNext(n), AndThePrevious(n). However if you wanted to add your own, e.g. to return all the even or odd items, all you need to do is write a new extension method -WhereAllEven() ""Operable"" extensions If, for example, you find yourself repeating yourself when creating test data and you want to wrap something up in a method, you can do this by extending IOperable. You can do this generically or per-type. For example say if rather than saying: Builder<Product>.CreateListOfSize(10).WhereAll().Have(x => x.Title = ""12345....[LongString].....12345"").Build(); You could instead create an extension method: public static IOperable<Product> HaveLongTitles(this IOperable<Product> operable) {     ((IDeclaration<Product>) operable).ObjectBuilder.With(x => x.Title = ""12345....[LongString].....12345"");     return operable; } Giving you the ability to say: Builder<Product>     .CreateListOfSize(10)     .WhereAll()         .HaveLongTitles()     .Build(); You could of course make it even more succinct by adding an extension method to IListBuilder public static IListBuilder<Product> WhereAllHaveLongTitles(this IListBuilder<Product> listBuilder) {     var listBuilderImpl = (IListBuilderImpl<Product>) listBuilder;     var declaration = new GlobalDeclaration<Product>(listBuilderImpl, listBuilderImpl.CreateObjectBuilder());     declaration.Have(x => x.Title = ""12345....[LongString].....12345"");      return declaration; } This would allow you to say: Builder<Product>.CreateListOfSize(10).WhereAllHaveLongTitles(); For more examples, please check the functional tests Until the full documentation is available please have a look at the functional tests in the source code. These explain how to do everything that's currently possible in NBuilder. Contributing To run the functional tests Create an SQL Database named NBuilderTests. Update the connection string Data Source inside the App.config and make sure it points to an instance of SQL Server on your development machine. <add name=""Default"" connectionString=""Data Source=[.\SQLExpress ];Initial Catalog=NBuilderTests;Integrated Security=SSPI""/> Development guidelines The project has two outputs - a CLR version and a Silverlight version. All code must compile for both. Every patch must have unit tests and those tests must provide 100% coverage. Every new class must have a 'unit' test fixture at least. Add integration tests when necessary to do so. For new features or changes to existing features use the functional tests project for high level real world tests and to serve as simple documentation for users. Any new tests must follow this naming convention: MethodName_Scenario_Expectation() Every class must have an interface and must be injected through constructor arguments. Every class must have a single responsibility. (SOLID Principles) Every new test must be in Arrange Act Assert form. If touching an existing test in record/replay, convert it to AAA syntax unless it is too time consuming. The ""Foo Bar"" convention is not permitted anywhere American English spellings should be used not British English Tests are divided into three categories: Unit - The class under test is completely isolated by use of stubs or mocks. Integration - Classes tested together. Functional - 'Real life' tests and documentation. Continuous Integration NBuilder uses TeamCity hosted by CodeBetter for continuous integration. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/garethdown44/nbuilder"	"Rapid generation of test objects"	"true"
"Testing"	"NSubstitute"	"http://nsubstitute.github.io/"	"A friendly substitute for.NET mocking frameworks"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"NSubstitute: A friendly substitute for .NET mocking libraries NSubstitute A friendly substitute for .NET mocking frameworks Get started | Docs | Discussion group | NSub on GitHub Simple, succinct, pleasant to use //Create: var calculator = Substitute.For<ICalculator>();  //Set a return value: calculator.Add(1, 2).Returns(3); Assert.AreEqual(3, calculator.Add(1, 2));  //Check received calls: calculator.Received().Add(1, Arg.Any<int>()); calculator.DidNotReceive().Add(2, 2);  //Raise events calculator.PoweringUp += Raise.Event(); Helpful exceptions  ReceivedCallsException : Expected to receive a call matching:     Add(1, 2) Actually received no matching calls. Received 2 non-matching calls (non-matching arguments indicated with '*' characters):     Add(*4*, *7*)     Add(1, *5*) Don't sweat the small stuff Mock, stub, fake, spy, test double? Strict or loose? Nah, just substitute for the type you need! NSubstitute is designed for Arrange-Act-Assert (AAA) testing, so you just need to arrange how it should work, then assert it received the calls you expected once you're done. Because you've got more important code to write than whether you need a mock or a stub. Install via NuGet: Install-Package NSubstitute Download CI builds Source Another library? There are already some great mocking libraries around for .NET, so why create another? We found that for all their great features, none of the existing libraries had the succinct syntax we were craving — the code required to configure test doubles quickly obscured the intention behind our tests. We've attempted to make the most frequently required operations obvious and easy to use, keeping less usual scenarios discoverable and accessible, and all the while maintaining as much natural language as possible. Perfect for those new to testing, and for others who would just like to to get their tests written with less noise and fewer lambdas. NSubstitute is open source software, licensed under the BSD License. The NSubstitute project is possible thanks to a number of other software projects. We acknowledge their awesomeness. NSubstitute CI builds are run using TeamCity kindly hosted by Codebetter. NSubstitute logo donated by Troy Hunt."	"null"	"null"	"A friendly substitute for.NET mocking frameworks"	"true"
"Testing"	"NUnit"	"https://github.com/nunit/nunit"	"A unit-testing framework for all.Net languages"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"684"	"98"	"267"	"GitHub - nunit/nunit: NUnit 3.0 framework, engine and console runner Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 98 Star 684 Fork 267 nunit/nunit Code Issues 230 Pull requests 6 Wiki Pulse Graphs NUnit 3.0 framework, engine and console runner http://www.nunit.org/ 3,391 commits 11 branches 29 releases 67 contributors C# 99.9% PowerShell 0.1% Shell 0.0% Visual Basic 0.0% C++ 0.0% XSLT 0.0% C# PowerShell Shell Visual Basic C++ XSLT Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags assert-counts generic-constraints issue-1138c issue-1553 issue-1621 master merge-341 release/3.2.0 release/3.2.1 release/3.4.0 release/3.4.1 Nothing to show initial-import 3.4.1 3.4.0 3.2.1 3.2.0.1 3.2.0 3.1.0-AP-9999 3.0.1 3.0.0 3.0.0-rc 3.0.0-rc-3 3.0.0-rc-2 3.0.0-beta-5 3.0.0-beta-4 3.0.0-beta-3 3.0.0-beta-2 3.0.0-beta-1 3.0.0-alpha 3.0.0-alpha-5 3.0.0-alpha-4 3.0.0-alpha-3 3.0.0-alpha-2 2.9.7 2.9.6 2.9.5 2.9.4 2.9.3 2.9.2 2.9.1 Nothing to show New pull request Latest commit aba17b8 Jul 15, 2016 rprouse committed on GitHub Merge pull request #1675 from nunit/TooLongBranchName … Limit length of pre-release suffix Permalink Failed to load latest commit information. install Include NUnit.System.Linq in packages Jun 12, 2016 nuget Update CHANGES; add teamcity to list of bundled extensions Jun 30, 2016 packages Added portable to the Linux solution Sep 8, 2015 src Remove Logging classes from Common Jul 14, 2016 tools Merge changes from Travis build Dec 11, 2015 .editorconfig Updated all of the build and packaging to include the 3.5 build Apr 12, 2016 .gitattributes Added portable to the Linux solution Sep 8, 2015 .gitignore Initial spike into creating a driver to run portable tests Jan 4, 2016 .travis.yml Exclude Mono 3.2.8 on OS X Jul 4, 2016 BUILDING.md Fix typos Apr 7, 2016 CHANGES.txt Merge latest from master Jul 11, 2016 CONTRIBUTING.md Fixing broken links Dec 10, 2015 LICENSE.txt Updated the copyright and assembly info Jan 4, 2016 License.rtf Manually fixed the license after reverting and fixed the engine tests Apr 12, 2016 MockCppAssemblies.sln Moved the C++ test assemblies out to their own solution Jan 21, 2015 NOTICES.txt Move common text files to root Sep 1, 2014 NUnit.sln.DotSettings NUnitProject should parse properly regardless whether Xml Declaration… Dec 8, 2015 NuGet.config Remove clear from NuGet.config Jun 19, 2016 README.md BuildStats badge added Apr 25, 2016 Rebracer.xml NullReferenceException when null arguments are used in TestFixtureAtt… May 19, 2016 appveyor-tool.ps1 change order and fix spelling Mar 5, 2016 appveyor.yml Deploy builds of master to MyGet Jun 12, 2016 build Update top-level script commands and remove old ones Dec 25, 2015 build.cake Limit length of pre-release suffix Jul 15, 2016 build.cmd Update top-level script commands and remove old ones Dec 25, 2015 build.ps1 formating and failing package when tests error Feb 13, 2016 build.sh Merge changes from Travis build Dec 12, 2015 global.json Updated to coreclr beta 8 Oct 16, 2015 nunit-install.sln Fix build script and projects so that msis are built using our standa… Mar 25, 2015 nunit.ico Switched the default icon in the apps to the NUnit Icon Nov 27, 2015 nunit.linux.sln Added .NET 3.5 versions for all framework projects Apr 12, 2016 nunit.sln Fix: Escaping control chars in custom message #1575 Jul 11, 2016 nunitCF35.sln Make CF tests pass when run under desktop .NET Mar 6, 2016 README.md NUnit 3.0 NUnit is a unit-testing framework for all .Net languages. Initially ported from JUnit, the current production release, version 3.0, has been completely rewritten with many new features and support for a wide range of .NET platforms. License NUnit is Open Source software and NUnit 3.0 is released under the MIT license. Earlier releases used the NUnit license. Both of these licenses allow the use of NUnit in free and commercial applications and libraries without restrictions. Contributors NUnit 3.0 was created by Charlie Poole, Rob Prouse, Simone Busoli, Neil Colvin and numerous community contributors. A complete list of contributors since NUnit migrated to GitHub can be found on GitHub. Earlier versions of NUnit were developed by Charlie Poole, James W. Newkirk, Alexei A. Vorontsov, Michael C. Two and Philip A. Craig. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nunit/nunit"	"A unit-testing framework for all.Net languages"	"true"
"Testing"	"Rhino Mocks"	"https://github.com/ayende/rhino-mocks"	"Dynamic Mocking Framework for.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"225"	"20"	"106"	"GitHub - ayende/rhino-mocks: Dynamic Mocking Framework for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 225 Fork 106 ayende/rhino-mocks Code Issues 8 Pull requests 4 Pulse Graphs Dynamic Mocking Framework for .NET http://ayende.com/ 306 commits 1 branch 0 releases 5 contributors C# 98.6% PowerShell 1.2% Other 0.2% C# PowerShell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 22c1ff3 Jun 29, 2016 ayende Fixing delegate proxy being corrupted by multiple calls. … See: #21 Permalink Failed to load latest commit information. Rhino.Mocks.CPP.Interfaces/Rhino.Mocks.CPP.Interfaces Adding new CPP project Jun 5, 2008 Rhino.Mocks.GettingStarted -delete the directory Documentation_Exemple, it was an error Dec 8, 2009 Rhino.Mocks.Tests.Model Merge branch 'dev' Oct 22, 2009 Rhino.Mocks.Tests Fixing delegate proxy being corrupted by multiple calls. Jun 29, 2016 Rhino.Mocks Fixing delegate proxy being corrupted by multiple calls. Jun 29, 2016 SharedLibs Added blank AssemblyInfo.cs to the GettingStarted project and one uni… Nov 28, 2009 Tools Added blank AssemblyInfo.cs to the GettingStarted project and one uni… Nov 28, 2009 docs Fixed a bug when using x.Stub on a class with a virtual automatic Sep 18, 2009 .gitignore Restructoring the project to be a stand alone one Aug 29, 2009 How to build.txt Adding how to build instructions. Dec 29, 2009 Rhino.Mocks.sln Added blank AssemblyInfo.cs to the GettingStarted project and one uni… Nov 28, 2009 acknowledgements.txt Fixed a bug when using x.Stub on a class with a virtual automatic Sep 19, 2009 ayende-open-source.snk Restructoring the project to be a stand alone one Aug 29, 2009 default.ps1 Fixing issue where the upload category wasn't properly referenced Jan 5, 2010 ilmerge.exclude Fixed a bug when using x.Stub on a class with a virtual automatic Sep 19, 2009 license.txt Fixed a bug when using x.Stub on a class with a virtual automatic Sep 19, 2009 psake.ps1 Fixed a bug when using x.Stub on a class with a virtual automatic Sep 19, 2009 psake_ext.ps1 Merge branch 'master' of git://github.com/ayende/rhino-mocks into dev Oct 22, 2009 psake_ext.ps1.orig Merge branch 'master' of git://github.com/ayende/rhino-mocks into dev Oct 22, 2009 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ayende/rhino-mocks"	"Dynamic Mocking Framework for.NET"	"true"
"Testing"	"Shouldly"	"https://github.com/shouldly/shouldly"	"Shouldly is an assertion framework which focuses on giving great error messages when the assertion fails while being simple and terse."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"422"	"36"	"125"	"GitHub - shouldly/shouldly: Should testing for .net - the way Asserting *Should* be! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 36 Star 422 Fork 125 shouldly/shouldly Code Issues 31 Pull requests 0 Pulse Graphs Should testing for .net - the way Asserting *Should* be! http://shouldly.readthedocs.org/en/latest 793 commits 3 branches 20 releases 55 contributors C# 99.0% PowerShell 1.0% C# PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ShouldBeAndEnumerables gh-pages master Nothing to show v2.8.0 v2.7.0 v2.7.0-beta.3 v2.7.0-beta.2 v2.2.0 v2.1.0 v2.0.1 v2.0.0 v1.1.1.1 v1.1.1 v1.1.0 v1.0.1 2.7.0-beta.1 2.6.0 2.5.0 2.4.0 2.3.1 2.3.0 2.2.1 2.1.1 Nothing to show New pull request Latest commit 9205f1e Jul 6, 2016 JosephWoodward committed on GitHub Merge pull request #390 from JosephWoodward/Rc2ToRTMUpdate … Upgraded to .NET Core RTM Permalink Failed to load latest commit information. docs Decreased resolution of images Jun 18, 2016 src Upgraded to .NET Core RTM Jul 2, 2016 tools Implemented cake build script Jun 11, 2016 .gitattributes Adding .gitattributes Feb 3, 2014 .gitignore Remove and ignore .lock.json files, remove shouldly.nuspec Jun 16, 2016 BREAKING CHANGES.txt Updated deployment readme Jun 18, 2016 GitVersionConfig.yaml Removed beta tag from master Apr 4, 2016 LICENSE.txt Added NUnit, ILMerge, NuPack dependencies Oct 28, 2010 NuGet.config First pass at adding support for RC2 Jun 9, 2016 README.md Removed individuals from the nuget pkg, added to README. Upload artif… Jun 14, 2016 ReleaseProcessReadme.md Release process formatting Jun 18, 2016 appveyor.deploy.yml Make sure each build builds the right thing Jun 14, 2016 appveyor.yml Make sure each build builds the right thing Jun 14, 2016 build.cake Make sure release notes is not empty Jun 18, 2016 build.ps1 First pass at adding support for RC2 Jun 9, 2016 deploy.cake Add in nuget push source Jun 17, 2016 deploy.ps1 Settings up a proper appveyor deployment pipeline Jun 14, 2016 global.json Aligned sdk Jul 2, 2016 mkdocs.yml Updated heading Sep 30, 2015 package_icon.png Resized icon Mar 31, 2015 README.md Shouldly Shouldly is an assertion framework which focuses on giving great error messages when the assertion fails while being simple and terse. This is the old Assert way: Assert.That(contestant.Points, Is.EqualTo(1337));  For your troubles, you get this message, when it fails: Expected 1337 but was 0  How it Should be: contestant.Points.ShouldBe(1337);  Which is just syntax, so far, but check out the message when it fails: contestant.Points should be 1337 but was 0  It might be easy to underestimate how useful this is. Another example, side by side: Assert.That(map.IndexOfValue(""boo""), Is.EqualTo(2));    // -> Expected 2 but was 1 map.IndexOfValue(""boo"").ShouldBe(2);                    // -> map.IndexOfValue(""boo"") should be 2 but was 1  Shouldly uses the code before the ShouldBe statement to report on errors, which makes diagnosing easier. Read more about Shouldly and its features at http://docs.shouldly-lib.net/ Installation You can install Shouldly by copying and pasting the following command into your Package Manager Console within Visual Studio (Tools > NuGet Package Manager > Package Manager Console). Install-Package Shouldly Contributing Getting started with Git and GitHub Setting up Git for Windows and connecting to GitHub Forking a GitHub repository The simple guide to GIT guide Open an issue if you encounter a bug or have a suggestion for improvements/features Submit documentation improvements by submitting pull requests, the docs are in the docs folder in this repo Once you're familiar with Git and GitHub, clone the repository and start contributing. If you need inspiration for which issue to pick up have a look for the Jump-In label on issues which are put on issues which are ready to be picked up by anyone. Pre-requisites for running on build server Shouldly uses the source code to make its error messages better. Hence, on the build server you will need to have the ""full"" pdb files available where the tests are being run. What is meant by ""full"" is that when you set up your ""release"" configuration in Visual Studio and you go to Project Properties > Build > Advanced > Debug, you should set it to ""full"" rather than ""pdb-only"". History Change A test results database (~50mb) got accidently commited in a972872888925205c9655cb540455d23d1891148, we removed this from history. The commit was only in master for <24 hours but if you happened to pull then you may need to reset master to get back in line Icon Star created by Luboš Volkov from The Noun Project Currently maintained by Jake Ginnivan Joseph Woodward If you are interested in helping out, jump on gitter and have a chat Brought to you by Dave Newman Xerxes Battiwalla Anthony Egerton Peter van der Woude Jake Ginnivan Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/shouldly/shouldly"	"Shouldly is an assertion framework which focuses on giving great error messages when the assertion fails while being simple and terse."	"true"
"Testing"	"SpecFlow"	"https://github.com/techtalk/SpecFlow/"	"Binding business requirements to.Net code"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"877"	"116"	"416"	"GitHub - techtalk/SpecFlow: Binding business requirements to .Net code Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 116 Star 877 Fork 416 techtalk/SpecFlow Code Issues 72 Pull requests 17 Wiki Pulse Graphs Binding business requirements to .Net code http://www.specflow.org/ 1,853 commits 48 branches 22 releases 58 contributors C# 89.8% Cucumber 6.3% XSLT 3.6% HTML 0.2% PowerShell 0.1% Batchfile 0.0% C# Cucumber XSLT HTML PowerShell Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags AllowBindingResultionBeCustomized AsyncSilverlight2 BeforeTestRunHookIssue CucumberHarmonization DotNetCore ReOrgTests RefactorDi ShareBindingLogic StepDefinitionSkeleton StepDefinitionsWithoutRegex VS2010Integration VS2010_RunTestsCommand VSBackNavigation assist_services_container_fix assist_with_less_static bring_back_the_datetime_retriever_that_got_lost_with_v2 contributing datetimeoffset dry_up_tiny_code_duplication extendable_value_handlers_refactor2 extendable_value_handlers future40ideas gh-pages improve_bindingprocessor_errors integrate_gherkin3 issue_432_spike master monodevelop-2.8 more_consistent_assist_signatures more_consistent_value_retriever_signature pr484-onv2 snake_case_properties step_transformation_value_retriever_spike step_transformation_value_retriever stepargumentransformation_support_in_table_helpers taggenerator test-pr test_build_config test_pull-request thread-safety timespan typo_fix v1-2-compatible-parser v2 versioning_on_ci vs_intellisense_bug2 vs2013sln xunit_console_output Nothing to show v2.0.0 v2.0.0-pre20151221 v1.9.2 v1.9.0 v1.8.1 v1.8.0 v1.7.1 v1.7.0 v1.6.1 v1.6.0 v1.5.0 v1.4.0 v1.3.5.2 v1.3.5.1 v1.3.5 v1.3.4 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.0 v1.1.0 Nothing to show New pull request Latest commit 17e7d55 Jul 14, 2016 gasparnagy committed on GitHub Merge pull request #662 from techtalk/dry_up_tiny_code_duplication … Consolidate this enum logic. Permalink Failed to load latest commit information. .nuget Use correct NuGet feed and download latest nuget.exe Apr 5, 2016 Build use correct build variable for version number Feb 23, 2016 Generator Use complete infrastructure for generating code Jun 8, 2016 Installer add configs to nuget package Feb 22, 2016 Parser.Compatibility update to Gherkin 4.0.0 parser May 4, 2016 Parser Fix nullref exception if parser gets an empty feature file Jul 6, 2016 Reporting add tests and fixes report generation May 16, 2016 Runtime Merge pull request #662 from techtalk/dry_up_tiny_code_duplication Jul 14, 2016 Tests Merge pull request #658 from SabotageAndi/HandlingEmptyFeatureFile Jul 14, 2016 Tools add tests and fixes report generation May 16, 2016 Utils Removed class, was only used by tests Nov 21, 2015 lib Merge remote-tracking branch 'origin/v2' into integrate_gherkin3 Nov 10, 2015 packages Merge remote-tracking branch 'origin/v2' into integrate_gherkin3 Nov 10, 2015 .gitignore Ignore GhostDoc Jun 7, 2016 CommonAssemblyInfo.cs using new generator interface Mar 31, 2011 LICENSE.txt update license title Aug 6, 2012 Languages.xml Merge pull request #310 from Daniel15/patch-1 Sep 10, 2014 README.md add README.md to solution and update text Apr 7, 2016 TechTalk.SpecFlow.sln Add dummy project that keeps a reference to nunit2 nuget packages Jun 7, 2016 TechTalk.SpecFlow.sln.docstates fix unit tests Jul 12, 2011 appveyor.yml Merge pull request #541 from techtalk/test-pr May 18, 2016 changelog.txt update changelog.txt May 24, 2016 specflow.ico remove unused assets Jan 22, 2015 specflow.snk ﻿Add strong-name for specflow assemblies Nov 10, 2009 specflow.yml add up-for-grabs yml-file Apr 19, 2016 README.md SpecFlow - Cucumber for .NET SpecFlow is a pragmatic BDD solution for .NET. It uses the Gherkin specification language and integrates to Visual Studio. It provides efficient testing solution for the .NET-related platforms, like .NET, Mono, Silverlight or Windows Phone 7. Project website: http://www.specflow.org Documentation: http://www.specflow.org/documentation/ Discussion group: http://groups.google.com/group/SpecFlow For questions please send them to the Discussion group. For issues/bugs please use the issue tracker on GitHub Build status Continious integration: Contributing Developer Gitter chat: The main development happens on the master branch. If you are interested in contributing, there are some useful information on this page: Contributing. Copyright Copyright (c) TechTalk. See LICENSE for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/techtalk/SpecFlow/"	"Binding business requirements to.Net code"	"true"
"Testing"	"xBehave.net"	"https://github.com/xbehave/xbehave.net"	"A BDD/TDD framework based on xUnit.net and inspired by Gherkin."	"null"	"null"	"null"	"null"	"null"	"http://xbehave.github.io"	"null"	"138"	"13"	"26"	"GitHub - xbehave/xbehave.net: A BDD/TDD framework based on xUnit.net and inspired by Gherkin. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 138 Fork 26 xbehave/xbehave.net Code Issues 23 Pull requests 0 Wiki Pulse Graphs A BDD/TDD framework based on xUnit.net and inspired by Gherkin. http://xbehave.github.io/ 1,194 commits 2 branches 24 releases Fetching contributors C# 98.5% Ruby 1.1% Other 0.4% C# Ruby Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags dev master Nothing to show 2.1.0 2.0.1 2.0.1-beta001 2.0.0 2.0.0-rc003 2.0.0-rc002 2.0.0-rc001 2.0.0-beta008 2.0.0-beta007 2.0.0-beta006 2.0.0-beta005 2.0.0-beta004 2.0.0-beta003 1.1.0 1.1.0-beta01 1.0.0 1.0.0-rc01 0.17.0 0.16.0 0.15.0 0.15.0-beta03 0.15.0-beta02 0.15.0-beta01 0.14.0 Nothing to show New pull request Latest commit ed11fcd Jun 7, 2016 adamralph Merge pull request #299 from adamralph/layout … switch to standard .NET layout Permalink Failed to load latest commit information. .nuget refactor: switch to standard .NET layout Jun 7, 2016 assets updated logo to smooth version Feb 8, 2014 src refactor: switch to standard .NET layout Jun 7, 2016 tests refactor: switch to standard .NET layout Jun 7, 2016 .editorconfig refactor: add .editorconfig and fix whitespace Mar 17, 2015 .gitattributes #45 converted all LF to CRLF May 29, 2013 .gitignore fix for xunit 2.1 Oct 3, 2015 .mailmap add mailmap Apr 5, 2016 CONTRIBUTING.md #105 added dev branch instructions to contribution guidelines Oct 13, 2013 Gemfile refactor: add Gemfile and Gemfile.lock Mar 17, 2015 Gemfile.lock refactor: switch Gemfile.lock to HTTP Apr 18, 2015 Settings.StyleCop refactor: switch to standard .NET layout Jun 7, 2016 Xbehave.CustomDictionary.xml refactor: switch to standard .NET layout Jun 7, 2016 Xbehave.sln refactor: switch to standard .NET layout Jun 7, 2016 Xbehave.sln.DotSettings refactor: switch to standard .NET layout Jun 7, 2016 build.cmd added build.cmd to wrap bundler and updated how_to_build.md Apr 18, 2015 edit-stylecop-settings.cmd refactor: made private static readonly vars camelCase Nov 23, 2014 how_to_build.md Update how_to_build.md Sep 3, 2015 license.txt changed copyright in license and nuspec to contributors Nov 7, 2012 rakefile.rb refactor: switch to standard .NET layout Jun 7, 2016 readme.md various readme fixes Mar 13, 2016 readme.md Website Quickstart Documentation FAQ Where can I get it? xBehave.net is available as a NuGet package. For update notifications, follow @adamralph. CI builds are available at teamcity.codebetter.com. To build manually, clone or fork this repository and see 'How to build'. Can I help to improve it and/or fix bugs? Absolutely! Please feel free to raise issues, fork the source code, send pull requests, etc. No pull request is too small. Even trivial white space fixes are appreciated. Before you contribute anything make sure you read CONTRIBUTING.md. On which giant's shoulders does it stand? xUnit.net Dan North Gherkin SubSpec StyleCop StyleCop.MSBuild Rake FakeItEasy FluentAssertions Semantic Versioning teamcity.codebetter.com NuGet xBehave.net logo designed by Vanja Pakaski. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/xbehave/xbehave.net"	"A BDD/TDD framework based on xUnit.net and inspired by Gherkin."	"true"
"Testing"	"xUnit"	"https://github.com/xunit/xunit"	"xUnit.net is a free, open source, community-focused unit testing tool for the.NET Framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1066"	"135"	"315"	"GitHub - xunit/xunit: xUnit.net is a free, open source, community-focused unit testing tool for the .NET Framework. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 135 Star 1,066 Fork 315 xunit/xunit Code Issues 228 Pull requests 10 Pulse Graphs xUnit.net is a free, open source, community-focused unit testing tool for the .NET Framework. http://xunit.github.io/ 931 commits 4 branches 22 releases 48 contributors C# 98.9% Other 1.1% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags AltAppDomainModel fix-async-fixtures master v1 Nothing to show 2.2-beta2 2.2-beta1 2.1 2.1-rc2 2.1-rc1 2.1-beta4 2.1-beta3 2.1-beta2 2.1-beta1 2.0 2.0-rc4 2.0-rc3 2.0-rc2 2.0-rc1 2.0-beta-5 2.0-beta-4 2.0-beta-3 2.0-beta-2 2.0-beta-1 1.9.2 1.9.1 1.9 Nothing to show New pull request Latest commit da36b28 Jul 12, 2016 Sumo-MBryant committed with bradwilson Stop repeated initialization of async fixtures (#871) … * Stop repeated initialization of async fixtures  Fixes #869  IAsyncLifetime fixtures both class fixtures and in collections are only initialized once.  All async initialization and disposal is now executed concurrently.  * Updated CreateClassFixtureAsync() to await all tasks  Improved the function stylistically and ensured that all potential async tasks executed in parallel. Permalink Failed to load latest commit information. src Stop repeated initialization of async fixtures (#871) Jul 11, 2016 test Stop repeated initialization of async fixtures (#871) Jul 11, 2016 tools project.json: Everything else Jun 21, 2016 .gitattributes Moved assertion library into Git submodule Feb 20, 2016 .gitignore project.json: Everything else Jun 22, 2016 .gitmodules Dear git, Do what I meant, not what I said. Feb 20, 2016 CONTRIBUTING.md Add Slack links to CONTRIBUTING.md Jan 18, 2016 NuGet.Config project.json: Everything else Jun 22, 2016 README.md [README.md] Update link to use HTTPS (#901) Jul 11, 2016 build.ps1 Use /nr:false when calling MSBuild in build.ps1 Mar 19, 2016 build.sh Use latest NuGet.exe file for Linux/Mac builds. References #607 Dec 5, 2015 global.json Update to .NET Core 1.0 RTM and Tooling 1.0 Preview 2 Jun 27, 2016 license.txt Update copyright year in license.txt Sep 5, 2015 xunit.msbuild Add requires -source URL to PushNuGet target Jun 27, 2016 xunit.vs2015.sln project.json: Everything else Jun 22, 2016 README.md For project documentation, please visit the xUnit.net project home. Latest builds: Channel Core Framework .NET CLI Runner Visual Studio Runner TeamCity (home) NuGet (feed)   MyGet (feed) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/xunit/xunit"	"xUnit.net is a free, open source, community-focused unit testing tool for the.NET Framework"	"true"
"Tools"	"Open Live Writer"	"https://github.com/OpenLiveWriter/OpenLiveWriter"	"Blog writer which integrated with WordPress, Blogger, et. al. Open Live Writer makes it easy to write, preview, and post to your blog. For more information see."	"null"	"null"	"null"	"null"	"null"	"http://openlivewriter.org"	"null"	"1812"	"207"	"374"	"GitHub - OpenLiveWriter/OpenLiveWriter: An open source fork of Windows Live Writer Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 207 Star 1,812 Fork 374 OpenLiveWriter/OpenLiveWriter Code Issues 211 Pull requests 19 Wiki Pulse Graphs An open source fork of Windows Live Writer http://OpenLiveWriter.org 282 commits 3 branches 5 releases Fetching contributors C# 99.3% C++ 0.3% HTML 0.3% Smalltalk 0.1% XSLT 0.0% Batchfile 0.0% C# C++ HTML Smalltalk XSLT Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags RobDolin-faqpatch bringup master Nothing to show 0.6.0.0 0.5.1.4 0.5.1.3 0.5.1.2 0.5.0.0 Nothing to show New pull request Latest commit 69ea434 Mar 24, 2016 ScottIsAFool Merge pull request #430 from nimesh-madhavan/category_guard … guard against CategoryArray being null Permalink Failed to load latest commit information. choco (GH-57) Updating to reflect chocolatey.org package which has been pus… Dec 11, 2015 docs Corrected file name Dec 20, 2015 intl Initial commit Dec 9, 2015 src guard against CategoryArray being null Mar 24, 2016 testplan Merge pull request #361 from kathweaver/pull117 Feb 19, 2016 utilities Initial commit Dec 9, 2015 .gitattributes Initial commit Dec 9, 2015 .gitignore Move Blogger client ID and client secrets to JSON Dec 13, 2015 BuildNuget.cmd Initial commit Dec 9, 2015 CONTRIBUTING.md Add contributor guidance file Dec 17, 2015 OpenLiveWriter.Install.nuspec (GH-57) Updating to reflect chocolatey.org package which has been pus… Dec 11, 2015 OpenLiveWriter.SDK.nuspec Added extra nuspec info Dec 10, 2015 OpenLiveWriter.nuspec Add SpellChecker to nuspec Jan 14, 2016 README.md Changed OpenLiveWriter to Open Live Writer Feb 25, 2016 build.cmd Fix issue with spaces in username Dec 23, 2015 faq.md Update faq.md Jan 13, 2016 getversion.cmd Initial commit Dec 9, 2015 key.snk Initial commit Dec 9, 2015 license.txt Initial commit Dec 9, 2015 roadmap.md Fixed Spelling Dec 10, 2015 run.cmd pass command line arguments through run.cmd Dec 20, 2015 version.txt Update version.txt Feb 13, 2016 writer.build.settings Initial commit Dec 9, 2015 writer.build.targets Move creation of GoogleBloggerv3Secrets.json into writer.build.targets Dec 16, 2015 README.md Open Live Writer Open Live Writer makes it easy to write, preview, and post to your blog. For more information see http://www.OpenLiveWriter.org/. Installation You can install the latest version of Open Live Writer alongside an older version of Windows Live Writer. Visit http://www.OpenLiveWriter.org to download and install the latest release. Latest News The current version of Open Live Writer is our first open source version. For a list of known issues see GitHub or take a look at the roadmap to see what the current plans are. For the latest news and updates about Open Live Writer, you can follow us on Twitter (@OpenLiveWriter), by keeping an eye on the website http://www.OpenLiveWriter.org or by watching this repo and subscribing to notifications. Contributing Open Live Writer is an open source project and wouldn't exist without the passionate community of volunteer contributors. If you would like to help out then please see the Contributing guide. This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information see the .NET Foundation Code of Conduct. License Open Live Writer proudly uses the MIT License. History The product that became Live Writer was originally created by a small, super-talented team of engineers including JJ Allaire, Joe Cheng, Charles Teague, and Spike Washburn. The team was acquired by Microsoft in 2006 and organized with the Spaces team. Becky Pezely joined the team and over time, the team grew and shipped many popular releases of Windows Live Writer. As Microsoft was planning for the version of Windows Live that would coincide with Windows 8 operating system release, the teams that built the Windows Live client apps for Windows were encouraged to focus on building a smaller set of Windows 8 apps designed to work well with both traditional PC input mechanisms and touch. With the rise of micro-blogging platforms and other forms of sharing, eventually this team decided to conclude their work on Windows Live Writer with Windows Live Writer 2012. Even though there was no active development, Windows Live Writer continued to be a favorite tool of a passionate community of Windows PC users for authoring, editing, and publishing blog posts. Data from WordPress.com at the time suggested that Windows Live Writer (even two years after active development ended) was the #1 app for authoring a blog post to WordPress.com from a Windows PC. A few employees at Microsoft took an interest in reviving Live Writer as an open source project in their spare time. By January 2015, a group of about a half-dozen engineers interested in spending some of their volunteer time to help release an updated version of Live Writer had found each other and began work on getting this open source fork of Live Writer formed and ready to ship. In December 2015 Microsoft donated the code to the .NET Foundation and this passionate group of volunteer engineers rapidly assembled the first open source version. Building Open Live Writer can be built by running build.cmd found in this directory. It can be opened in Visual Studio. The solution is in src/managed/writer.sln -- if you see errors in Visual Studio run build.cmd from the command prompt and it should be resolved. The main program is src/managed/OpenLiveWriter/ApplicationMain.cs . To run from Visual Studio, set the startup project to OpenLiveWriter. .NET Foundation The Open Live Writer project is supported by the .NET Foundation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/OpenLiveWriter/OpenLiveWriter"	"Blog writer which integrated with WordPress, Blogger, et. al. Open Live Writer makes it easy to write, preview, and post to your blog. For more information see."	"true"
"Tools"	"CodeHub"	"https://github.com/thedillonb/CodeHub"	"CodeHub is the best way to browse and maintain your GitHub repositories on any iOS device!"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4530"	"1249"	"236"	"GitHub - thedillonb/CodeHub: CodeHub is the best way to browse and maintain your GitHub repositories on any iOS device! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,249 Star 4,530 Fork 236 thedillonb/CodeHub Code Issues 68 Pull requests 0 Wiki Pulse Graphs CodeHub is the best way to browse and maintain your GitHub repositories on any iOS device! http://www.codehub-app.com 416 commits 4 branches 25 releases 2 contributors C# 91.3% CSS 6.8% JavaScript 1.9% C# CSS JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master reactive-merge reactiveui-development Nothing to show 2.9.5 2.9.4 2.9.1.0 2.9.0.3 2.9.0.2 2.9.0.1 2.9.0.0 2.8.0.0 2.7.0.1 2.7.0.0 2.5.0.1 2.3.7.1 2.3.6-RC1 2.3.2-RC1 2.3.1 2.1.1-RC1 2.1.0-RC2 2.1.0-RC1 2.0.1-RC4 2.0.1-RC3 2.0.1-RC2 2.0.1-RC1 2.0.0 2.0.0-RC1 1.0.0RC1 Nothing to show New pull request Latest commit 1dec2d8 Jun 22, 2016 thedillonb Bump version to 2.9.5 Permalink Failed to load latest commit information. CodeHub.Core Remove ""Save Credential"" setting. It was broken and never really used. Jun 22, 2016 CodeHub.iOS Bump version to 2.9.5 Jun 22, 2016 Screenshots Updated Readme Feb 27, 2016 .gitignore Merge 2.X.X into master. Move all ReactiveUI work into it's own branch. Feb 27, 2016 CodeHub.iOS.sln Code Formatting and null reference fix in GistView on share Jun 10, 2016 CodeHub.psd Added psd assets Feb 27, 2016 README.md Update README.md Feb 27, 2016 README.md CodeHub is the best way to browse and maintain your GitHub repositories on any iPhone, iPod Touch, and iPad device! Keep an eye on your projects with the ability to view everything from pull requests to commenting on individual file diffs in the latest change set. CodeHub brings GitHub to your finger tips in a sleek and efficient design. Follow the project on twitter: @CodeHubApp Feature requests can be made on GitHub or on UserVoice Additional information can be found on the project's webpage Screenshots             Contributing Contributions are absolutely welcome. Unfortunately, Xamarin is a paid framework which makes it hard for contributors but if you'd like to create a PR I would be happen to test it. Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D Credits A lot of thanks to many who contribute to open-source projects. The following were instrumental to building this app: Json.NET ReactiveUI MVVMCross Marked.js ModernHttpClient Copyright Copyright 2016 Dillon Buchanan Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thedillonb/CodeHub"	"CodeHub is the best way to browse and maintain your GitHub repositories on any iOS device!"	"true"
"Tools"	"ShareX"	"https://github.com/ShareX/ShareX"	"ShareX is a free and open source program that lets you capture or record any area of your screen and share it with a single press of a key. It also allows uploading images, text or other types of files to over 80 supported destinations you can choose from."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3894"	"253"	"674"	"GitHub - ShareX/ShareX: ShareX is a free and open source program that lets you capture or record any area of your screen and share it with a single press of a key. It also allows uploading images, text or other types of files to over 80 supported destinations you can choose from. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 253 Star 3,894 Fork 674 ShareX/ShareX Code Issues 61 Pull requests 1 Wiki Pulse Graphs ShareX is a free and open source program that lets you capture or record any area of your screen and share it with a single press of a key. It also allows uploading images, text or other types of files to over 80 supported destinations you can choose from. https://getsharex.com 2,870 commits 1 branch 42 releases 91 contributors C# 98.7% Inno Setup 1.3% C# Inno Setup Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v11.1.0 v11.0.1 v11.0.0 v10.9.1 v10.9.0 v10.8.0 v10.7.0 v10.6.1 v10.6.0 v10.5.0 v10.4.0 v10.3.0 v10.2.5 v10.2.0 v10.1.0 v10.0.0 v9.10.1 v9.10.0 v9.9.0 v9.8.0 v9.7.0 v9.6.1 v9.6.0 v9.5.0 v9.4.2 v9.4.1 v9.4.0 v9.3.1 v9.3.0 v9.2.1 v9.2.0 v9.1.0 v9.0.0 v8.8.0 v8.7.1 v8.7.0 v8.6.1 v8.6.0 v8.5.0 v8.4.1 v8.4.0 v8.3.0 Nothing to show New pull request Latest commit d4a066e Jul 14, 2016 Jaex fixed #1350: Use extension to assign value to numeric up down to resp… … …ect min/max values Permalink Failed to load latest commit information. .nuget http://docs.nuget.org/docs/workflows/using-nuget-without-committing-p… Nov 4, 2013 Greenshot.ImageEditor Merge pull request #1702 from campbeb/greenshotMinSizeFix Jul 10, 2016 Lib Updated 7z library to v15.14 Feb 10, 2016 Licenses Added OneClickMode to rectangle region to be able to get handle of se… Sep 25, 2015 ShareX.HelpersLib Added more enum descriptions to resources Jul 13, 2016 ShareX.HistoryLib Updated russian translation Jul 6, 2016 ShareX.ImageEffectsLib Add Close() after each DialogResult because otherwise form won't clos… Jun 23, 2016 ShareX.IndexerLib NuGet update Jul 11, 2016 ShareX.MediaLib resx updates May 30, 2016 ShareX.ScreenCaptureLib fixed #1350: Use extension to assign value to numeric up down to resp… Jul 14, 2016 ShareX.Setup Disable ready page in setup Jun 20, 2016 ShareX.UploadersLib NuGet update Jul 14, 2016 ShareX fixed #1350: Use extension to assign value to numeric up down to resp… Jul 14, 2016 .gitattributes Added .gitattributes file Jun 7, 2015 .gitignore InnoSetup moved to ShareX.Setup/InnoSetup Feb 28, 2016 CodeMaid.config fixed #1483: Added direct url support for Streamable Apr 7, 2016 LICENSE.txt README and version history changes Nov 20, 2013 README.md Update README.md Mar 28, 2016 ShareX.sln NuGet update May 1, 2016 ShareX.sln.DotSettings Added missing hard coded strings to resx, Updated Turkish translations Aug 11, 2015 README.md ShareX website: getsharex.com Features Capturing ShareX incorporates the following methods to allow screen capture. Fullscreen Active window Active monitor Window menu Monitor menu Region Region (Annotate) Region (Light) Region (Transparent) Polygon Freehand Last region Custom region Screen recording Screen recording (GIF) Scrolling capture Webpage capture Auto capture After capture tasks You can select any or all of these tasks to be automatically run after each screen capture. Show quick task menu Show ""After capture"" window Add image effects / watermark Open in image editor Copy image to clipboard Print image Save image to file Save image to file as Save thumbnail image to file Perform actions Copy file to clipboard Copy file path to clipboard Show file in explorer Show ""Before upload"" window Upload image to host Delete file locally Uploading ShareX has multiple ways to upload files. Upload file Upload folder Upload from clipboard Upload from URL Drag and drop upload (drop area or main window) Upload from Windows shell context menu Upload from Windows send to menu Watch folder After upload tasks These tasks will automatically run after successful upload to any host. Show ""After upload"" window Shorten URL Share URL Copy URL to clipboard Open URL Show QR code window Destinations ShareX supports the following destinations. Image uploaders Imgur ImageShack TinyPic Flickr Photobucket Google Photos (Picasa) Twitter Chevereto UltraIMG Yukle.at PatiFile BoltIMG Snapie picgur pixr sexr Lightpics Imgfly ImgPinas imu.gr Upsieutoc StoreMyPic TL Things vgy.me SomeImage Imgland Custom image uploader File uploader Text uploaders Pastebin Paste2 Slexy Pastee.org Paste.ee GitHub Gist uPaste Hastebin OneTimeSecret Custom text uploader File uploader File uploaders Dropbox FTP OneDrive Google Drive Box MEGA Amazon S3 ownCloud MediaFire Gfycat Pushbullet SendSpace Minus Ge.tt Hostr JIRA Lambda VideoBin Pomf 1339.cf catgirlsare.sexy comfy.moe cocaine.ninja cuntflaps.me files.plebeianparty.com g.zxq.co glop.me kyaa.sg maxfile.ro mixtape.moe nigger.cat pomf.cat pomf.hummingbird.moe pomf.is reich.io sugoi.vidyagam.es up.che.moe Uguu Dropfile Up1 Seafile s-ul Streamable Shared folder Email Custom file uploader URL shorteners bit.ly goo.gl is.gd v.gd tinyurl.com turl.ca yourls.org adf.ly coinurl.com qr.net vurl.com 2.gp Polr Custom URL shortener URL sharing services Email Twitter Facebook Google+ Reddit Pinterest Tumblr LinkedIn StumbleUpon Delicious VK Pushbullet Tools Additional tools to make certain tasks more efficient. Color picker Screen color picker Image editor Image effects Hash check DNS changer QR code Ruler Automate Directory indexer Image combiner Video thumbnailer FTP client Tweet message Monitor test Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ShareX/ShareX"	"ShareX is a free and open source program that lets you capture or record any area of your screen and share it with a single press of a key. It also allows uploading images, text or other types of files to over 80 supported destinations you can choose from."	"true"
"Tools"	"Myrtille"	"https://github.com/cedrozor/myrtille"	"A native HTML4/5 Remote Desktop Protocol client, HTTP gateway written in C# for.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"86"	"6"	"12"	"GitHub - cedrozor/myrtille: A native HTML4 / HTML5 Remote Desktop Protocol client Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 86 Fork 12 cedrozor/myrtille Code Issues 5 Pull requests 0 Wiki Pulse Graphs A native HTML4 / HTML5 Remote Desktop Protocol client http://cedrozor.github.io/myrtille 51 commits 2 branches 7 releases 1 contributor C 76.5% C++ 11.2% C# 6.3% JavaScript 3.2% M4 0.6% Objective-C 0.6% Other 1.6% C C++ C# JavaScript M4 Objective-C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 7f75a3c Jul 15, 2016 cedrozor added missing file Permalink Failed to load latest commit information. Myrtille.Common added missing file Jul 15, 2016 Myrtille.RDP myrtille initial version Mar 11, 2016 Myrtille.Services.Contracts Added domain support to file transfer (see file transfer configuratio… Jun 11, 2016 Myrtille.Services Added domain support to file transfer (see file transfer configuratio… Jun 11, 2016 Myrtille.Setup added automatic creation of a myrtille self-signed certificate into IIS Jul 14, 2016 Myrtille.Web updated ssl/README Jul 14, 2016 CHANGELOG added automatic creation of a myrtille self-signed certificate into IIS Jul 14, 2016 DISCLAIMERS.md updated markdown Mar 12, 2016 DOCUMENTATION.md updated documentation Jul 14, 2016 LICENSE text indentation Mar 16, 2016 Myrtille.sln Added domain support to file transfer (see file transfer configuratio… Jun 11, 2016 README.md added missing file Jul 15, 2016 README.md Myrtille Myrtille provides a simple and fast access to remote desktops and applications through a web browser, without any plugin, extension or configuration. Technically, Myrtille is an HTTP(S) to RDP gateway. How does it works? It works by forwarding the user inputs (keyboard, mouse, touchscreen) from a web browser to an HTTP(S) gateway, then up to an RDP client which maintain a session with an RDP server. The display resulting, or not, of such actions is streamed back to the browser, from the rdp client and through the gateway. The implementation is quite straightforward in order to maintain the best speed and stability as possible. Some optimizations, such as inputs buffering and display quality tweaking, help to mitigate with latency and bandwidth issues. More information into the DOCUMENTATION.md file. Features HTML4 and HTML5 support HTTP(S) to RDP gateway File transfer WebP compression Requirements HTTP(S) client: any HTML4 or HTML5 browser (starting from IE6!) HTTP(S) to RDP gateway: IIS 7.0+ and .NET 4.0+ (see DOCUMENTATION.md for gateway prerequisites) RDP server: any RDP enabled computer (preferably Windows Server but can also be Windows XP, 7, 8, 10. see DOCUMENTATION.md for configuration) Build See DOCUMENTATION.md. Installation All releases here: https://github.com/cedrozor/myrtille/releases See DOCUMENTATION.md for more details. Usage Once Myrtille is installed on your server, you can use it at http://yourserver/myrtille. Set the rdp server address, user domain (if defined), name and password then click ""Connect!"" to log in. ""Disconnect"" to log out. The installer creates a self-signed certificate for https://yourserver/myrtille. Like for all self-signed certificates, you will have to add a security exception into your browser (just ignore the warning message and proceed to the website). Of course, you can avoid that by installing a certificate provided by a trusted Certification Authority (see DOCUMENTATION.md). If you want connection information, you can enable stat (displayed on screen or browser console). If you want debug information, you can enable debug (logs are saved under the Myrtille ""log"" folder). You can also choose the rendering mode, HTML4 or HTML5 (HTML4 may be useful, for example, if websockets are blocked by a proxy or firewall). On touchscreen devices, you can pop the device keyboard with the ""Keyboard"" button. Then enter some text and click ""Send"". You can also upload/download file(s) to/from the user documents folder with the ""My documents"" button. Note that it requires the rdp server to be localhost (same machine as the http server) or a domain to be specified. Myrtille doesn't support the mouse pointer shadow. If enabled for the user, you have to disable it (not much difference anyway and ensure best performance). See ""Notes and limitations"" into DOCUMENTATION.md. Third-party Myrtille uses the following licensed software: RDP client: FreeRDP 0.8.2 (https://github.com/FreeRDP/FreeRDP-old), licensed under Apache 2.0 license. OpenSSL toolkit: 1.0.1f (https://github.com/openssl/openssl), licensed under BSD-style Open Source licenses. WebP encoding: libWebP 0.5.0 (https://github.com/webmproject/libwebp), licensed under BSD-style Open Source license. Copyright (c) 2010, Google Inc. All rights reserved. HTML5 websockets: Fleck 0.14.0 (https://github.com/statianzo/Fleck), licensed under MIT license. Copyright (c) 2010-2014 Jason Staten. Logging: Log4net 1.2.13.0 (https://logging.apache.org/log4net/), licensed under Apache 2.0 license. See DISCLAIMERS.md file. The Myrtille code in FreeRDP is surrounded by region tags ""#pragma region Myrtille"" and ""#pragma endregion"". libWebP are official Google's WebP precompiled binaries, and are left unmodified. Same for Fleck websockets. License Myrtille is licensed under Apache 2.0 license. See LICENSE file. Author Cedric Coste (cedrozor@gmail.com). LinkedIn: https://fr.linkedin.com/in/cedric-coste-a1b9194b Twitter: https://twitter.com/cedrozor Google+: https://plus.google.com/111659262235573941837 Facebook: https://www.facebook.com/profile.php?id=100011710352840 Contributors Catalin Trifanescu (AppliKr developer: application server. Steemind cofounder) Fabien Janvier (AppliKr developer: website css, clipping algorithm, websocket server) UltraSam (AppliKr developer: rdp client, http gateway) Resources Website: http://cedrozor.github.io/myrtille Sources: https://github.com/cedrozor/myrtille Tracker: https://github.com/cedrozor/myrtille/issues Wiki: https://github.com/cedrozor/myrtille/wiki Support: https://groups.google.com/forum/#!forum/myrtille_rdp Demo: https://www.youtube.com/watch?v=l4CL8h0KfQ8 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cedrozor/myrtille"	"A native HTML4/5 Remote Desktop Protocol client, HTTP gateway written in C# for.NET"	"true"
"Tools"	"Opserver"	"https://github.com/Opserver/Opserver"	"Stack Exchange's Monitoring System"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2562"	"247"	"501"	"GitHub - opserver/Opserver: Stack Exchange's Monitoring System Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 247 Star 2,562 Fork 501 opserver/Opserver Code Issues 36 Pull requests 10 Wiki Pulse Graphs Stack Exchange's Monitoring System 632 commits 3 branches 0 releases 30 contributors C# 66.0% CSS 21.3% JavaScript 11.6% XSLT 0.9% PowerShell 0.2% Batchfile 0.0% C# CSS JavaScript XSLT PowerShell Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: overhaul Switch branches/tags Branches Tags bosun master overhaul Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. Opserver.Core Minor: Fix spelling errors (#196) Jul 15, 2016 Opserver Yay, C# 6 Jun 9, 2016 packages Lib updates Jun 9, 2016 .gitattributes Hello World Oct 15, 2013 .gitignore Cleanup .gitignore some more Jun 1, 2015 Build.bat Package updates, command line build ability Jun 2, 2015 Opserver.sln Sparklines: move to SVGs Dec 29, 2015 Opserver.sln.DotSettings More cleanup Apr 24, 2016 WebEssentials-Settings.json SQL Server: Show some blocking info Apr 3, 2015 license.txt Hello World Oct 15, 2013 readme.md Minor readme updates Feb 2, 2016 readme.md Opserver Opserver is a monitoring system by the team at Stack Exchange, home of Stack Overflow. It is a tool for monitoring: Servers/Switches & anything supported by Bosun, Orion, or direct WMI monitoring SQL Clusters & Single Instances Redis Elasticsearch Exception Logs (from StackExchange.Exceptional) HAproxy PagerDuty CloudFlare DNS ... and more as we go Known as “status” internally, Opserver provides a fast overall view of all our major systems that also allows drilling in for more detail. For an idea of the UI, you can see some screenshots from our Velocity 2013 talk. Installation Installation should be a snap, just build this project as-is and deploy it as an IIS website. If monitoring windows servers and using integrated auth sections (e.g. live polling, SQL, exception logs) then using a service account with needed permissions is all you need to do on the auth side. After that, configure Opserver to monitor your systems, keep reading for how. Security Configuration /Config/SecuritySettings.config contains the security settings for the Opserver website itself, there are a few built-in providers already: Active Directory (""ad"") ""Everyone's an admin"" (""alladmin"") ""View All"" (the default) There is a SecuritySettings.config.example as a reference. You can optionally add networks that can see the main dashboard without any authentication when using any provider. This is useful for fully automated screens like a TV in an office or data center. If you are using Active Directory authentication, you should edit the ViewGroups and AdminGroups in the Web.Config. You can also edit the ViewGroups and AdminGroups on a per monitor basis by adding ""AdminGroups"": ""GroupName"", or ""ViewGRoups"": ""GroupName"", to the json config file. One cause of the 'No Configuration' message being displayed is if you do not have any permissions to any of your configured monitors. You can see what you were authenticated as, and what roles you were granted by browsing to /about. Monitoring Configuration The basic configuration implementation is via .json files, for which .json.example files are included in the /config directory of the Opserver project. These .example files are exactly what’s running in the Stack Exchange production environment, minus any passwords or internal-only URLs. You are also welcome to implement your own settings provider that has a completely different source, for example JSON from MongoDB, or SQL, or…whatever you can come up with. Settings changes will be hooked up to events but that isn’t complete just yet, since we build every change and Opserver restarts, this isn’t a priority. We recommend using a service account with the necessary permissions for monitoring, this eliminates any passwords in your configuration files and makes management easier, that's the practice in place at Stack Exchange. Even if you have correctly configured your monitors, you still may not see any data. Each monitor configuration has an enabled flag which must return true for a monitor section to appear in OpServer. You can browse to /about to review which monitors have been enabled. Jira Actions Configuration You can use Jira to create issues using the links rendered in the exception details page. In order to use Jira You have to enable Exception monitoring Add JiraSettings.json file under /config folder (JiraSettings.json.example file is included) Enable REST api on Jira Jira action screenshots PagerDuty Configuration You can connect OpServer to your pagerduty istallation. You need a PagerDuty ReadWrite API Key (RO will work for viewing but will throw errors when you do a RW action). You need to set the following options in PagerDutySettings.json to get a minimally working setup: APIKey: Your Pager Duty API Key APIBaseURL: https://.pagerduty.com/api/v1 There is a username map option for when your email address does not match your OpServer login credentials. For example George has an email of george@example.com, and a login of gsock. The plugin needs to be told how to map the email on the pagerduty side to the username on the opserver side. To setup a map to allow George to be discovered and associated correctly, you would do the following: ""UserNameMap"": [   {""OpServerName"": ""gsock"", ""EmailUser"": ""george""}, ], The UserNameMap is an array of OpserverName (login Name) and EmailUser (user part of email associated to PagerDuty Account). You can have as many User Name Mappings as you need. There is a HeaderHTML tag that lets you put arbitrary html above all content. You can use this to place notices, or messages for people who do not view the page all the time at the top. We use it to explain how to contact the on call Engineer. Open Source Projects in Use StackExchange.Redis by Marc Gravell Dapper by Stack Exchange JSON.Net by James Newton-King MiniProfiler by Stack Exchange StackExchange.Exceptional by Nick Craver TeamCitySharp by Paul Stack JavaScript: d3.js by Michael Bostock ColorBrewer by Cynthia Brewer and Mark Harrower HTML Query Plan by Justin Pealing isotope by Metafizzy jQuery by The jQuery Foundation jQuery cookie plugin by Klaus Hartl jQuery autocomplete by Jörn Zaefferer prettify by Google TableSorter by Christian Bach Toastr by John Papa and Hans Fjällemark License Opserver is licensed under the MIT License. Props We'd like to thank several people outside Stack Exchange for large contributions to Opserver's development. Brent Ozar for lots of (continuing) help on the SQL monitoring, with some of the initial queries and help letting us know many use cases to cover. We'll be integrating some of the awesome tooling Brent and his team have to further assist DBAs and developers (like sp_Blitz, sp_BlitzIndex, and some you'll hear about soon). Adam Machanic for sp_WhoIsActive, which powers the active tab for a SQL Instance. He also assisted with use cases and performance tuning on the use of sp_WhoIsActive. The SQL Sentry guys, Aaron Bertrand and Kevin Kline for even more SQL use cases, and their help with upcoming integration with SQL Sentry. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Opserver/Opserver"	"Stack Exchange's Monitoring System"	"true"
"Trading"	"Lean"	"https://github.com/QuantConnect/Lean"	"Lean Engine is an open-source fully managed C# algorithmic trading engine built for desktop and cloud usage."	"null"	"null"	"null"	"null"	"null"	"https://lean.quantconnect.com"	"null"	"519"	"126"	"384"	"GitHub - QuantConnect/Lean: Lean Algorithmic Trading Engine by QuantConnect (C#, Python, F#, VB, Java) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 126 Star 519 Fork 384 QuantConnect/Lean Code Issues 27 Pull requests 10 Pulse Graphs Lean Algorithmic Trading Engine by QuantConnect (C#, Python, F#, VB, Java) https://lean.quantconnect.com 2,921 commits 15 branches 14 releases 42 contributors C# 97.9% Python 2.0% Batchfile 0.1% Shell 0.0% Visual Basic 0.0% F# 0.0% C# Python Batchfile Shell Visual Basic F# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags coarse-fine-universe-combo data-feed-subscription-request fine-fundamental fundamental indicator-abstractions live-rollingwindow-fix master multi-subscriptions-stash multi-subscriptions proto/coarse-fine-universe-combo subscriptions underlying-sid universe-chaining universe-refactor universe-subscription-enumerator Nothing to show v2.2.0.2 v2.2.0.1 v2.2.0.0 v2.1.6.4 v2.1.6.3 v2.1.6.2 v2.1.6.1 v2.1.6.0 v2.1.5.6 v2.1.5.5 v2.1.5.4 v2.1.2 v2.1.1 v2.1 Nothing to show New pull request Latest commit 7080916 Jul 14, 2016 jaredbroad Extended the api to support listing active and past algorithms Permalink Failed to load latest commit information. Algorithm.CSharp Adds Portfolio Optimization algorithm using Math.NET Numerics Jun 17, 2016 Algorithm.FSharp Tidy unneccessary TravisCI build configuration Apr 19, 2016 Algorithm.Java Tidy unneccessary TravisCI build configuration Apr 19, 2016 Algorithm.Python Tidy unneccessary TravisCI build configuration Apr 19, 2016 Algorithm.VisualBasic Tidy unneccessary TravisCI build configuration Apr 19, 2016 Algorithm Refactor PreOrderChecksImpl() and add lot size check for 0-quantity o… Jul 13, 2016 AlgorithmFactory User-frieldly warning about algorithm name Jul 12, 2016 Api Extended the api to support listing active and past algorithms Jul 14, 2016 Brokerages Merge pull request #481 from devalkeralia/IB-TWSfix Jul 12, 2016 Common Extended the api to support listing active and past algorithms Jul 14, 2016 Compression Log error instead of throwing if zip entry not found Apr 7, 2016 Configuration Tidy unneccessary TravisCI build configuration Apr 19, 2016 Data Adds CoarseFundamentalTop5 regression algorithm Jun 16, 2016 Documentation Fixing change log Jan 12, 2015 Engine Merge pull request #483 from Phoenix1271/bugfix/LotRoundedToZero Jul 13, 2016 Indicators Merge pull request #416 from jameschch/Lean_Swiss Jun 10, 2016 Launcher Added missing quandl-auth-token to config.json Jul 8, 2016 Logging Tidy unneccessary TravisCI build configuration Apr 19, 2016 Messaging Changed the error message Jun 27, 2016 Queues Tidy unneccessary TravisCI build configuration Apr 19, 2016 Tests Extended the api to support listing active and past algorithms Jul 14, 2016 ToolBox Implements IQFeedDataQueueHandler. Apr 19, 2016 UserInterface Added simplified desktop live charting to ux Jun 15, 2016 .gitattributes Update .gitattributes for sh to use lf eol Apr 15, 2015 .gitignore Added .vs to ignore file Apr 19, 2016 .travis.yml Remove junk updates to travis and revert to release builds Apr 19, 2016 CONTRIBUTING.md Use soft tabs of four spaces Aug 19, 2015 Dockerfile Change mono version in Dockerfile to 4.0.5.1 Jun 21, 2016 LICENSE Update LICENSE Jul 10, 2015 QuantConnect.Lean.sln Removing VB/F# from Release build Jun 3, 2016 QuantConnect.Lean.sln.DotSettings Set c# language version to 5.0 Jan 29, 2016 change-log.md Modifications to change log Sep 22, 2015 lean.ico Rework GetResultHandler to use type loader; first desktop UX implemen… Jun 7, 2015 readme.md Update readme.md Jul 7, 2016 readme.md Lean C# Algorithmic Trading Engine           Lean Home - lean.quantconnect.com | Documentation | Download Zip Introduction Lean Engine is an open-source fully managed C# algorithmic trading engine built for desktop and cloud usage. It was designed in Mono and operates in Windows, Linux and Mac platforms. The community has contributed additional connectors to F#, Visual Basic and Java. Lean drives the web based backtesting platform QuantConnect. System Overview Lean outsourced key infrastructure management to plugins. The most important plugins are: Result Processing Handle all messages from the algorithmic trading engine. Decide what should be sent, and where the messages should go. The result processing system can send messages to a local GUI, or the web interface. Datafeed Sourcing Connect and download data required for the algorithmic trading engine. For backtesting this sources files from the disk, for live trading it connects to a stream and generates the data objects. Transaction Processing Process new order requests; either using the fill models provided by the algorithm, or with an actual brokerage. Send the processed orders back to the algorithm's portfolio to be filled. Realtime Event Management Generate real time events - such as end of day events. Trigger callbacks to real time event handlers. For backtesting this is mocked-up an works on simulated time. Algorithm State Setup Configure the algorithm cash, portfolio and data requested. Initialize all state parameters required. For more information on the system design and contributing please see the Lean Website Documentation. Spinup Instructions OS X Install Mono for Mac Install MonoDevelop or Xamarin Studio for your IDE. If you use MonoDevelop also install its FSharp Plugin. Clone the repo: git clone git@github.com:QuantConnect/Lean.git cd Lean  OSX does not fully support Visual Basic or F#. You will need to remove these projects from the solution for them to build properly. Alternatively for Visual Basic modify the target framework as shown here. Alternatively modify the target framework: sed -i -e 's/4.5/4.0/' Algorithm.VisualBasic/QuantConnect.Algorithm.VisualBasic.vbproj  Open the project in Xamarin Studio, then in the menu bar, click Project > Update NuGet Packages. You should also run nuget install MathNet.Filtering -pre to install the MathNet library. In OS X mdtool is not added to the PATH environment. Either set up the PATH manually or reference the binary directly. If you are running Xamarin Studio: /Applications/Xamarin\ Studio.app/Contents/MacOS/mdtool build  If you are running MonoDevelop: /Applications/MonoDevelop.app/Contents/MacOS/mdtool build  Run the compiled exe file. For the time being you need to run the exe in the same path as your current working directory: cd Lean/Launcher/bin/Debug mono ./QuantConnect.Lean.Launcher.exe  Linux (Debian, Ubuntu) Setup Mono GPG signing key (instructions here). Install dependencies, MonoDevelop, Git and NuGet: sudo apt-get install mono-complete mono-vbnc fsharp monodevelop monodevelop-nunit  git ca-certificates-mono mozroots --import --sync apt-get upgrade mono-complete  Clone the repo: git clone https://github.com/QuantConnect/Lean.git cd Lean  Like OSX, Linux does not fully support Visual Basic. You will need to remove this project from the solution for them to build properly. Alternatively modify the target framework: sed -i 's/4.5/4.0/' Algorithm.VisualBasic/QuantConnect.Algorithm.VisualBasic.vbproj  Restore NuGet packages then compile: wget https://nuget.org/nuget.exe mono nuget.exe restore QuantConnect.Lean.sln xbuild  If you get: ""Error initializing task Fsc: Not registered task Fsc."" -> apt-get upgrade mono-complete If you get: ""XX not found"" -> Make sure Nuget ran successfully, and re-run if neccessary. Run the compiled exe file. For the time being you need to run the exe in the same path as your current working directory: cd Lean/Launcher/bin/Debug ./QuantConnect.Lean.Launcher.exe  Windows Install Visual Studio Open QuantConnect.Lean.sln in Visual Studio Press ctrl-f5 to run without debugging. By default Visual Studio includes NuGet, if your version cannot find DLL references, install Nuget and build again. Issues and Feature Requests Please submit bugs and feature requests as an issue to the Lean Repository. Before submitting an issue please read others to ensure it is not a duplicate. Mailing List The mailing list for the project can be found on Google Groups Contributors and Pull Requests Contributions are warmly very welcomed but we ask you read the existing code to see how it is formatted, commented and ensure contributions match the existing style. All code submissions must include accompanying tests. Please see the contributor guide lines. Build Status Acknowledgements The open sourcing of QuantConnect would not have been possible without the support of the Pioneers. The Pioneers formed the core 100 early adopters of QuantConnect who subscribed and allowed us to launch the project into open source. Ryan H, Pravin B, Jimmie B, Nick C, Sam C, Mattias S, Michael H, Mark M, Madhan, Paul R, Nik M, Scott Y, BinaryExecutor.com, Tadas T, Matt B, Binumon P, Zyron, Mike O, TC, Luigi, Lester Z, Andreas H, Eugene K, Hugo P, Robert N, Christofer O, Ramesh L, Nicholas S, Jonathan E, Marc R, Raghav N, Marcus, Hakan D, Sergey M, Peter McE, Jim M, INTJCapital.com, Richard E, Dominik, John L, H. Orlandella, Stephen L, Risto K, E.Subasi, Peter W, Hui Z, Ross F, Archibald112, MooMooForex.com, Jae S, Eric S, Marco D, Jerome B, James B. Crocker, David Lypka, Edward T, Charlie Guse, Thomas D, Jordan I, Mark S, Bengt K, Marc D, Al C, Jan W, Ero C, Eranmn, Mitchell S, Helmuth V, Michael M, Jeremy P, PVS78, Ross D, Sergey K, John Grover, Fahiz Y, George L.Z., Craig E, Sean S, Brad G, Dennis H, Camila C, Egor U, David T, Cameron W, Napoleon Hernandez, Keeshen A, Daniel E, Daniel H, M.Patterson, Asen K, Virgil J, Balazs Trader, Stan L, Con L, Will D, Scott K, Barry K, Pawel D, S Ray, Richard C, Peter L, Thomas L., Wang H, Oliver Lee, Christian L. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/QuantConnect/Lean"	"Lean Engine is an open-source fully managed C# algorithmic trading engine built for desktop and cloud usage."	"true"
"Trading"	"StockSharp"	"https://github.com/StockSharp/StockSharp"	"Trading and algorithmic trading open source platform (stock markets, forex, bitcoins and options)."	"null"	"null"	"null"	"null"	"null"	"http://stocksharp.com"	"null"	"536"	"126"	"255"	"GitHub - StockSharp/StockSharp: Algorithmic trading and quantitative trading open source platform to develop trading robots (stock markets, forex, bitcoins and options). Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 126 Star 536 Fork 255 StockSharp/StockSharp Code Issues 9 Pull requests 0 Pulse Graphs Algorithmic trading and quantitative trading open source platform to develop trading robots (stock markets, forex, bitcoins and options). http://stocksharp.com 1,918 commits 2 branches 22 releases Fetching contributors C# 100.0% C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Terminal master Nothing to show 4.3.15 4.3.14.2 4.3.14.1 4.3.14 4.3.13 4.3.11 4.3.10 4.3.9 4.3.8 4.3.7 4.3.6 4.3.5 4.3.4 4.3.3 4.3.0 4.2.75 4.2.72 4.2.71 4.2.70 4.2.69 4.2.68 4.2.66 Nothing to show New pull request Latest commit e266f75 Jul 15, 2016 mikasoukhov GCHandle<T> refactoring. Permalink Failed to load latest commit information. Alerts prev commit. Apr 4, 2016 Algo Stop BatchEmulation fixes. Jul 14, 2016 BusinessEntities BusinessEntities. Serialization fixes. Jul 14, 2016 Community Loc fixes. Jul 12, 2016 Configuration Proj files. Removed Devexp version. Jun 14, 2016 Connectors/Quik Quik. Mass order cancel fix. Jul 12, 2016 Documentation FIX connector. Exante dialect Jun 21, 2016 Localization Messages, BusinessEntities. Removed Xceed ref. Jul 14, 2016 Logging LoggingHelper.DoWithLog Jul 12, 2016 Messages BusinessEntities. Serialization fixes. Jul 14, 2016 References GCHandle<T> refactoring. Jul 15, 2016 Samples Samples. MassOrderCancelFailed subscription. Jul 12, 2016 _ReleaseNotes prev commit Jun 21, 2016 .gitignore gitignore fix. Apr 19, 2016 LICENSE Apache License 2.0 + project .licenseheader files Dec 14, 2015 NOTICE remove Algo Trading from copyright Dec 14, 2015 README.md update README.md with apache license Dec 14, 2015 StockSharp.DotSettings R# settings Sep 13, 2015 StockSharp.snk Merge Rithmic proj. Nov 26, 2015 StockSharpAPI.sln MatLab connector. Moved to Apps. Jun 24, 2016 StockSharpAssemblyInfo.cs code format Oct 14, 2015 README.md StockSharp - trading platform StockSharp Home | Documentation | Download Zip Introduction StockSharp (shortly S#) – are free programs for trading at any markets of the world (American, European, Asian, Russian, stocks, futures, options, Bitcoins, forex, etc.). You will be able to trade manually or automated trading (algorithmic trading robots, conventional or HFT). Available connections: FIX/FAST, LMAX, Rithmic, Fusion/Blackwood, Interactive Brokers, OpenECry, Sterling, IQFeed, E*Trade, BTCE, BitStamp and many other. Any broker or partner broker (benefits). S#.Studio S#.Studio is a free graphical environment for trading on any exchanges (american, europian and asian stock markets, forex, bitcoins and options). Support algorithmic strategies (C# or visual designer). More info... Screenshots more on official site... S#.Data S#.Data is a free application for downloading and storing market data from various sources (35+). More info... S#.API S#.API is a free C# library for programmers who use Visual Studio. S#.API lets you create any trading strategy, from long-timeframe positional strategies to high frequency strategies (HFT) with direct access to the exchange (DMA). More info... Support Free support on the forum. Commercial support in our Algotrading courses. Development stage Current stage of all components - RELEASE_STAGES.md. Release notes - RELEASE_NOTES.md. License StockSharp code is licensed under the Apache License 2.0. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/StockSharp/StockSharp"	"Trading and algorithmic trading open source platform (stock markets, forex, bitcoins and options)."	"true"
"Visual Studio Plugins"	"Web Essentials"	"https://github.com/madskristensen/WebEssentials2013"	"Web Essentials extends Visual Studio with lots of new features that web developers have been missing for many years"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"965"	"107"	"303"	"GitHub - madskristensen/WebEssentials2013: Visual Studio extension Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 107 Star 965 Fork 303 madskristensen/WebEssentials2013 Code Issues 292 Pull requests 4 Pulse Graphs Visual Studio extension http://vswebessentials.com 2,667 commits 3 branches 18 releases Fetching contributors C# 92.7% JavaScript 6.7% Other 0.6% C# JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master revert-1324-EliminateRescrollIssueForTypeScriptMargin vs-update-2 Nothing to show v2.6.36 v2.6.12 v2.5.4 v2.5.1 v2.5 v2.4 v2.3 v2.2 v2.0 v1.9 v1.8 v1.7.2 v1.7.1 v1.6 v1.5 v1.3 v1.2 v1.0 Nothing to show New pull request Latest commit bbd0ccf Apr 6, 2016 madskristensen Merge pull request #1995 from Taritsyn/master … Add `PreserveCase` property to HTML minification settings Permalink Failed to load latest commit information. .nuget Fixed #300 - Enabled NuGet package restore Dec 16, 2013 BuildTasks.Tester Code: General fixes. Jun 26, 2015 BuildTasks Build: Removes exclusion that breaks jshint. Jul 15, 2015 EditorExtensions Add `PreserveCase` property to HTML minification settings Apr 6, 2016 WebEssentialsTests Code: Misc. fixes for hbs test and srv-cson. Jun 23, 2015 .editorconfig Change CRLF casing of to match EditorConfig schema Nov 17, 2014 .gitattributes Initial commit Jun 17, 2013 .gitignore Commands: Change PkgCmdIDList to enum Jan 2, 2014 CONTRIBUTING.md Shortened long lines. Aug 31, 2014 CssSorter.dll CssSorter: Updates DLL. Apr 16, 2014 LICENSE.txt Changed license to Apache 2.0 Jun 18, 2014 README.md Update README.md Mar 15, 2016 Rebracer.xml Rebracer: Fixed corrupt JS references string Feb 27, 2014 Run VS12 in ExpHive.lnk UnitTest: Added ShortCut for Running VS2013 in Exp Hive Jan 3, 2014 VSTest.playlist UnitTest: Ignoring Visual Studio Test in NCrunch 2 Jan 5, 2014 WebEssentials2012logo.pdn Initial commit Jun 18, 2013 WebEssentials2013.ncrunchsolution Added NCrunch Solution and Project Configuration for the NCrunch lovers. Dec 11, 2013 WebEssentials2013.sln AppVeyor integration Jul 9, 2015 WebEssentials2013.sln.DotSettings UnitTest: Added Tests for IntellisenseType, added tests for Nullable,… Jan 3, 2014 WebEssentials2013.v2.ncrunchsolution UnitTest: Ignoring Visual Studio Test in NCrunch 2 Jan 5, 2014 WebEssentialsTests.UnitTests.testsettings Test: Change settings default host. Jan 3, 2014 ZenCoding.dll ZenCoding: update to latest version Mar 18, 2015 appveyor.yml Updates to AppVeyor Jul 9, 2015 README.md Web Essentials for Visual Studio 2013 Web Essentials extends Visual Studio with lots of new features that web developers have been missing for many years. If you ever write CSS, HTML, JavaScript, TypeScript, CoffeeScript, LiveScript or LESS, then you will find many useful features that make your life as a developer easier. This is for all Web developers using Visual Studio. To get the latest nightly build, follow these instructions. Getting started To contribute to this project, you'll need to do a few things first: Fork the project on GitHub Clone it to your computer Install the Visual Studio 2013 SDK. Open the solution in VS2013. To install your local fork into your main VS instance, you will first need to open Source.extension.vsixmanifest and bump the version number to make it overwrite the (presumably) already-installed production copy. (alternatively, just uninstall Web Essentials from within VS first) You can then build the project, then double-click the VSIX file from the bin folder to install it in Visual Studio. Useful Links Getting started with Visual Studio extension development About Web Essentials features Inside the Visual Studio editor Extending the Visual Studio editor Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/madskristensen/WebEssentials2013"	"Web Essentials extends Visual Studio with lots of new features that web developers have been missing for many years"	"true"
"Visual Studio Plugins"	"VsVIM"	"https://github.com/jaredpar/VsVim"	"VIM in Visual Studio"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2046"	"163"	"283"	"GitHub - jaredpar/VsVim: Vim Emulator Plugin for Visual Studio 2010+ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 163 Star 2,046 Fork 283 jaredpar/VsVim Code Issues 328 Pull requests 5 Wiki Pulse Graphs Vim Emulator Plugin for Visual Studio 2010+ 3,367 commits 15 branches 34 releases 34 contributors C# 68.0% F# 31.7% PowerShell 0.3% C# F# PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags block-motion bugs dead-dev14-release dead-ptvs-2013-preview debug-resharper fix-1267 fix-1567 fix-1715 fix-style fixes-build fixes-ime master resharper staging testapp Nothing to show v0.6.0 VsVim-2.1.1 VsVim-2.1.0 VsVim-2.0.0 VsVim-1.8.0.0 VsVim-1.2.2 VsVim-1.2.1 VsVim-1.1.2 VsVim-1.1.1.1 VsVim-1.1.1 VsVim-1.1.0 VsVim-1.0.3 VsVim-1.0.2 VsVim-1.0.1 VsVim-1.0.0 VsVim-0.9.6 VsVim-0.9.5.1 VsVim-0.9.5 VsVim-0.9.4 VsVim-0.9.3 VsVim-0.9.2 VsVim-0.9.1 VsVim-0.9.0 VsVim-0.8.2 VsVim-0.8.1 VsVim-0.8.0 VsVim-0.7.2 VsVim-0.7.1 VsVim-0.7.0 VsVim-0.6.0 VsVim-0.5.3 VsVim-0.5.2 1.7.1.1 1.7.1 Nothing to show New pull request Latest commit 7384301 Jun 30, 2016 jaredpar committed on GitHub Merge pull request #1799 from jaredpar/commands … Add explicit enable / disable commands Permalink Failed to load latest commit information. References Fixed binding redirects for VS 2015 test running Aug 22, 2015 Scripts Catch the bad deploy bug Jul 22, 2015 Src Add explicit enable / disable commands Jun 28, 2016 Test Another test for this scenario Jun 27, 2016 Tools Fixed the Deploy.ps1 script Oct 1, 2013 .gitattributes Added a gitattributes file so that Github for Windows will properly see May 22, 2012 .gitignore Ignore more VS files Jun 18, 2016 CodingGuidelines.txt Terminology correction. End with respect to spans and ranges should Nov 23, 2011 License.txt Updated License.txt Feb 24, 2012 README.md Fixed markdown Jun 3, 2014 Todo.txt All host options now have a UI element Jun 4, 2014 VimAll.sln Vs2015 now a part of major solutions May 20, 2015 VimCore.sln Remove unused file Jul 19, 2015 VsVim.settings Added the 2015 specific project May 20, 2015 VsVim.sln Move away from MSBuild integrated restore Jun 21, 2016 appveyor.yml Specify the solution file Jun 21, 2016 README.md Welcome to VsVim All code in this project is covered under the Apache 2 license a copy of which is available in the same directory under the name License.txt. AppVeyor Status: Building Install the Visual Studio SDK Open the Solution VsVim.sln Build VsVim.sln will work with any version of Visual Studio since 2010. The SKU must be professional or higher due to the use of VSIX projects. Branching Structure master: Stable branch staging: Used for releasing new versions fixes*: Both short and long term fixes dead*: Branches which will never integrate with master again. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jaredpar/VsVim"	"VIM in Visual Studio"	"true"
"Visual Studio Plugins"	"Nuget Package Manager"	"https://visualstudiogallery.msdn.microsoft.com/27077b70-9dad-4c64-adcf-c7cf6bc9970c"	"NuGet is the package manager for the Microsoft development platform including.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"NuGet Package Manager extension Sign in Gallery MSDN Library Forums Get started for free Extensions > Tools > NuGet Package Manager Report abuse to Microsoft View Large NuGet Package Manager Free A collection of tools to automate the process of downloading, installing, upgrading, configuring, and removing packages from a VS Project. CREATED BY REVIEWS (376) Review SUPPORTS Visual Studio 2012, 2010 DOWNLOADS Download (9,825,129) Translated in čeština, Deutsch, español, français, italiano, 日本語, 한국어, polski, português, русский, Türkçe, 中文(简体) 旧版, 中文(繁體) 舊版 UPDATED 4/2/2015 VERSION 2.8.60318.667 LICENSE View SHARE FAVORITES Add to favorites TAGS Package Manager, NuGet Description Reviews (376) Sign in to write a review Sort by: Date - new to old Date - old to new Rating - high to low Rating - low to high Your Rating: Required             Review (Maximum of 1200 Characters)     by JCBOX | Wed 3:27 AM if you install this yourself, you will fail to install the .Net Core Preview 2 for VS. To fix the issue, you will need to remove the NuGet folder in 2 places: 1. C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions 2. C:\Program Files (x86)\NuGet   by Almir Vuk | May 22 2016   by EstefaníaGM | April 22 2016 It is great, so helpful!   by RavichandranK | February 26 2016 NuGet Package Manager makes very simple of many process!!!   by Kimberly Clarkson | February 22 2016   by YYFYYF | October 23 2015   by Ruud Borst | October 14 2015 Game changer!   by billyannis | August 22 2015 nice   by JayChase | August 12 2015   by jsimoeswebtv | August 07 2015   by Deva [MSFT] | July 20 2015 Great collection of tools   by Ken Cenerelli | June 13 2015   by Jag4 | June 10 2015 I have been using this quite a bit, but was not really using NuGet Console from within Visual Studio. After learning the console, I think, I became big fan of it. FYI...I came across this video on how to use both Nuget Dialog and Nuget Console from within Visual Studio: https://www.youtube.com/watch?v=8pVrkbgyqgg Hopefully, it helps others...   by Rajiv.Dadwal | June 06 2015 Hi, I have wrapped up my javascript code in Nuget package for distribution.Other team members can use this code by installing the nuget package created by us. It works very well but the issue comes on TFS. When someone install the package on TFS project, it throws weird error ""Collection Was Modified; Enumeration Operation May Not Execute."" This is embracing because we did everything but in the end it fails if we can not distribute that. Alternatively i have used batch file for that. Please look into this, i hope will get some resolution here....... Rating will matter if i will be able to use Nuget on TTFS.   by formulahendry | April 21 2015   by Niobrara | April 17 2015 Has anybody gotten release 2.8.6 to work with Visual Studio 2012? Installed this and visual studio ignores any and all requests to invoke Nuget as an extension.   by PitotHeat | April 11 2015   by rvydyula | April 07 2015 Unable to install the package manager. Getting the error - ""Value does not fall within the expected range' See the link for more error details"" - https://nuget.codeplex.com/workitem/4425   by Ondřej | March 13 2015 Solves all problems with referencing libraries.   by Yatajga | February 20 2015   1 - 20 of 376 Items    « First   < Prev    1  2  3  4  5  6  7  8  9  10    Next >   Last » Dev Centers Windows Office More... Related Sites Visual Studio Visual Studio Integrate VSIP Program Microsoft .NET Microsoft Azure Connect Forums Blog Facebook LinkedIn Stack Overflow Twitter Visual Studio Events YouTube Developer Resources Code samples Documentation Downloads Products & extensions for Visual Studio REST APIs Testing tools for web developers Videos and tutorials Virtual Labs United States (English) © 2016 Microsoft Terms of Use Trademarks Privacy Statement Site Feedback"	"null"	"null"	"NuGet is the package manager for the Microsoft development platform including.NET"	"true"
"Visual Studio Plugins"	"SideWaffle"	"https://github.com/ligershark/side-waffle"	"A collection of Item Templates for Visual Studio 2012/2013 that makes any web developer's life much easier"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"532"	"62"	"220"	"GitHub - ligershark/side-waffle: A collection of Item- and Project Templates for Visual Studio Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 62 Star 532 Fork 220 ligershark/side-waffle Code Issues 30 Pull requests 2 Wiki Pulse Graphs A collection of Item- and Project Templates for Visual Studio 912 commits 9 branches 4 releases 50 contributors JavaScript 78.6% C# 15.7% HTML 1.6% CSS 1.6% PowerShell 1.3% ApacheConf 1.0% Other 0.2% JavaScript C# HTML CSS PowerShell ApacheConf Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags CustomWizardSample add-google-analytics autopublish imar itemtempcustpath localrefs master multiprojectsample release Nothing to show v1.20 v1.19 v1.18 1.21 Nothing to show New pull request Latest commit 49f675d Jun 14, 2016 sayedihashimi committed on GitHub Merge pull request #382 from ligershark/aspt4 … updating t4 from prog files #330 Permalink Failed to load latest commit information. .nuget updates for nuget Aug 29, 2013 LigerShark.Templates Merge pull request #331 from RandomlyKnighted/telemetry-fix Jan 27, 2016 Project Templates Packages are updated to lastest version as of 17/02/2016 Feb 17, 2016 SideWaffle.Common Revert ""deleting files that are no longer used"" Jul 3, 2014 TemplatePack updating t4 from prog files #330 Jun 13, 2016 assemblies Added assembly Apr 4, 2015 item-templates/PowerShell Added custom parameter for template type Dec 14, 2015 project-templates/Windows Desktop/ConsoleApplicationAsync Added custom parameter for template type Dec 14, 2015 .gitattributes Initial commit Aug 9, 2013 .gitignore minor change to telemetry Dec 16, 2015 LICENSE.md Added LICENCE.md Aug 12, 2013 README.md Update README.md Oct 6, 2015 SideWaffle.sln Disabled replacments on vstemplate file for the SW-ProjectVSTemplateF… Mar 12, 2016 add-telemtrywizard.ps1 Added wizard for Google Analytics Oct 8, 2015 add-templateid.ps1 adding a templateid to all templates, also adding script May 22, 2015 add-templatetypeparameter.ps1 Add fix for identifying project templates from item templates Dec 14, 2015 appveyor.ps1 Updated Appveyor script to correctly push nightly builds only for the… Mar 30, 2016 appveyor.yml Updated Appveyor to use release-notes.xml instead of release-notes.html Sep 14, 2015 build-main.ps1 Removed write-host line Mar 22, 2016 build-templates.proj updating to 1.1.2-beta of templatebuilder Dec 25, 2014 multi-project-templates.docx adding multi-proj doc Jun 28, 2014 release-notes.xml Updated the release notes for jscsrc item template Mar 31, 2016 screenshot.png optimizing images Mar 2, 2014 README.md SideWaffle for Visual Studio SideWaffle.com - download the extension The ultimate web developer template pack A collection of Item Templates for Visual Studio 2012/2013/2015 that makes any web developer's life much easier. The result of a search for ""angular"" in the ""Add new item"" dialog Add new templates Fork the project Clone it to your computer Install the Visual Studio 2012 SDK, Visual Studio 2013 SDK, or Visual Studio 2015 SDK. Open the solution in Visual Studio Watch this video tutorial After adding your templates, send us a pull request Only high quality templates with broad appeal will be accepted SideWaffle templates can be installed in Visual Studio 2012, 2013 and 2015, regardless of the version you use for creating new templates. Learn more about on MSDN about customizing item templates Releasing updates Here in the beginning, we are probably going to release updates rather frequently to get a feel for what the best user experience might be. Expect that we will be moving toward a fixed schedule - for instance every 2-3 weeks - when we have more templates submitted from the Visual Studio community. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ligershark/side-waffle"	"A collection of Item Templates for Visual Studio 2012/2013 that makes any web developer's life much easier"	"true"
"Visual Studio Plugins"	"Resharper"	"http://www.jetbrains.com/resharper/"	"Developer Productivity Tool for Visual Studio"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ReSharper All Tools IDEs .NET & Visual Studio Team Tools Languages Store Support We Are JetBrains Check out our IDEs IntelliJ IDEA The most intelligent Java IDE PhpStorm Lightning-smart PHP IDE PyCharm Python IDE for professional developers RubyMine The most intelligent Ruby IDE WebStorm The smartest JavaScript IDE AppCode Smart IDE for iOS/OS X development CLion A smart cross-platform IDE for C and C++ DataGrip Your Swiss Army knife for databases & SQL Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for .NET and Visual Studio ReSharper Visual Studio extension for .NET developers ReSharper C++ Visual Studio extension for C++ developers dotTrace .NET performance profiler dotMemory .NET memory profiler dotCover .NET unit test runner and code coverage tool dotPeek Free .NET decompiler and assembly browser Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for teams TeamCity Powerful Continuous Integration out of the box YouTrack Issue tracker designed for development teams Upsource Code review and repository browsing Hub JetBrains team tools, integrated Check out our languages and related tools Kotlin Programming language for JVM & Android MPS DSL development environment Store Pricing and licensing options for everyone, from free plans for students to volume licensing for companies. JetBrains Toolbox Team Tools Purchase Terms FAQ Contact Sales Support Questions or problems? We want to help! Dedicated support teams can answer product- or purchase-related questions. Technical Support Contact Sales Commitment Community Support Webinars Early Access Programs We Are JetBrains We make professional software development a more productive and enjoyable experience. About Us People Customers & Awards Press Room Partners & Resellers Technology Partners Careers Contacts Search ReSharper What's New Features Docs Plugins Buy Download part of ReSharper Ultimate Visual Studio Extension for .NET Developers Download Free 30-day trial Why ReSharper? How ReSharper helps Visual Studio users Analyze code quality On-the-fly code quality analysis is available in C#, VB.NET, XAML, ASP.NET, ASP.NET MVC, JavaScript, TypeScript, CSS, HTML, and XML. You'll know right away if your code needs to be improved. Eliminate errors and code smells Not only does ReSharper warn you when there's a problem in your code but it provides hundreds of quick-fixes to solve problems automatically. In most cases, you can select the best quick-fix from a variety of options. Safely change the code base Automated solution-wide code refactorings help safely change your code base. Whether you need to revitalize legacy code or put your project structure in order, you can lean on ReSharper. Instantly traverse the entire solution You can instantly navigate and search in the whole solution. Jump to any file, type, or type member, or navigate from a specific symbol to its usages, base and derived symbols, or implementations. Enjoy code editing helpers Multiple code editing helpers include extended IntelliSense, hundreds of instant code transformations, auto-importing namespaces, rearranging code and displaying documentation. Comply to coding standards Code style and formatting functionality with fine-grained, language-specific settings will help you get rid of unused code and create a common coding standard for your team. Learn more Features ReSharper makes Visual Studio a much better IDE Code analysis ReSharper extends Visual Studio with over 1700 on-the-fly code inspections for C#, VB.NET, ASP.NET, JavaScript, TypeScript and other technologies. For most inspections, ReSharper provides quick-fixes (light bulbs) to improve code in one way or another. Find and get rid of unused code? Migrate your code to C# 6? Convert loops to LINQ at will? Find and prevent possible exceptions? Use a common naming standard? All that and a lot more code improvements is made possible with ReSharper's code analysis. Refactorings 40+ refactorings and 200+ context actions help safely organize code and move it around the solution, distribute responsibility, decouple, decrease complexity, or simply use alternative language syntax. Navigation and Search ReSharper helps instantly land at any code in a solution, no matter how large it is. It can also navigate you from any symbol to related code such as implementations of a given interface, extension methods of a class, or usages of a field. Code formatting and cleanup Configure and apply code style based on your personal preferences or your team standard. Code style and formatting settings for C#, VB.NET, ASP.NET, JavaScript, TypeScript and other languages can be applied in any scope, from a selection to a solution. Code generation ReSharper can create a lot of code for you: from new files and classes to conditional blocks and GUIDs; from methods and properties required by an interface being implemented to equality checks and formatting members. part of ReSharper Ultimate ReSharper Ultimate: all individual .NET tools and ReSharper C++ in one license ReSharper Ultimate is a license that combines all individual JetBrains .NET tools, as well as ReSharper C++. Each ReSharper Ultimate license allows a single developer to use ReSharper, ReSharper C++, dotCover, dotTrace and dotMemory. ReSharper Visual Studio extension for .NET developers dotTrace .NET performance profiler dotCover .NET unit test runner and code coverage tool ReSharper C++ Visual Studio extension for C++ developers dotMemory .NET memory profiler dotPeek .NET decompiler & assembly browser (it's free anyway) Learn more What's New Why Upgrade to ReSharper 2016.1 New context actions and quick-fixes ReSharper 2016.1 adds multiple context actions, code inspections and quick-fixes for checking argument values, manipulating strings, converting strings to objects, fix common issues in WCF projects, comment and uncomment code selections, and a lot more. Out-of-the-box xUnit support ReSharper 2016.1 starts to support xUnit.net directly in the product. This means ReSharper will discover your tests, and allow you to run and debug them, right from the editor, without requiring any extra extensions. Improved code style features ReSharper 2016.1 helps you better manage and apply your and your team's code style preferences. For example, there are now more useful code style settings, you can now apply them with a single command in different contexts, including a code selection. JavaScript, TypeScript, Node.js, JSON Initial support for Node.js, understanding of JSON and JSON schemas, full support for TypeScript 1.7 and 1.8, refined code formatter settings, — enjoy these and other improvements in support for ECMAScript-based technologies. Learn more about ReSharper 2016.1 Testimonials Join our 20,000+ customers 65 of the top 100 companies in the Forbes 500 list use JetBrains ReSharper. Download Free 30-day trial Joshua Kerievsky, Founder, Industrial Logic I love ReSharper! Its code suggestions routinely help me write better C#/VB.NET code. All I can say is I love it. If you don't use ReSharper, drop what you are doing and go out and buy it! Peter Kellner, Consultant, 73rd Street Associates ReSharper is an awesome tool. If you're using it you probably agree and if you aren't you should be. The productivity gains are incredible. Jaco Pretorius, Technical Lead, ThoughtWorks David Starr, Chief Software Architect, Healthwise The ultimate Agile tool is ReSharper. Refactoring is just so darn easy that change isn't scary. @resharper on twitter Bug and issue tracker Community forum Blog Also on JetBrains My account Newsletter Contact Follow JetBrains © 2000—2016 JetBrains s.r.o. All rights reserved. Developed with drive and IntelliJ IDEA Privacy Policy | Terms of Use"	"null"	"null"	"Developer Productivity Tool for Visual Studio"	"true"
"Visual Studio Plugins"	"Refactoring Essentials"	"http://vsrefactoringessentials.com/"	"Open source extension for C# and VB.NET refactorings, including code best practice analyzers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"370"	"47"	"71"	"GitHub - icsharpcode/RefactoringEssentials: Refactoring Essentials for Visual Studio Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 47 Star 370 Fork 71 icsharpcode/RefactoringEssentials Code Issues 48 Pull requests 3 Wiki Pulse Graphs Refactoring Essentials for Visual Studio 597 commits 4 branches 10 releases 21 contributors C# 99.2% HTML 0.6% Visual Basic 0.2% CSS 0.0% PowerShell 0.0% Batchfile 0.0% C# HTML Visual Basic CSS PowerShell Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags latestroslyn master monodevelop release Nothing to show v4.1 v4.0 v3.2 v3.1 v3.0 v2.1 v2.0 v1.2 v1.1 v1.0.2 Nothing to show New pull request Latest commit ce0853d Jul 12, 2016 Rpinski Merge pull request #242 from patrickhuber/master Permalink Failed to load latest commit information. .nuget update nuget.exe to v3 Nov 17, 2015 Build Remove Author: from AssemblyInfo template Jun 23, 2015 BuildTools Updated version to 4.3 for development branch. Jun 30, 2016 CodeConverterWebApp Adapt code converter Web for 4.0 launch Apr 1, 2016 Demonstration.VB Added some examples to VB demo project. Jul 30, 2015 Demonstration Added mono configurations. Jul 14, 2015 DocGenerator Test to fix build on AppVeyor. Apr 1, 2016 RefactoringEssentials Update ForControlVariableIsNeverModifiedAnalyzer.cs Jul 11, 2016 Tests Fixed #232: Missing var proposal for pinvoke. Extended analyzer to su… Jun 23, 2016 Vsix Updated version to 4.3 for development branch. Jun 30, 2016 .gitattributes Added solution and projects files. May 30, 2015 .gitignore Adapt code converter Web for 4.0 launch Apr 1, 2016 CONTRIBUTING.md Improved CONTRIBUTING.md. Nov 28, 2015 CodeConverterWebApp.sln Surface converter.txt in a solution folder Jan 4, 2016 LICENSE.txt Move LICENSE.txt (MIT) to the root of the project Jul 28, 2015 NuGetAppVeyorTools.ps1 Test for building a public release with AppVeyor. Aug 27, 2015 README.md Add Gitter badge May 4, 2016 RefactoringEssentials.BuildAutomation.sln Added RefactoringEssentials.BuildAutomation.sln, which doesn't includ… May 31, 2015 RefactoringEssentials.sln Test: Trying to move appveyor.yml to one of the projects (BuildTools)… Sep 2, 2015 converter.txt [converter] updated documentation Feb 25, 2016 README.md Refactoring Essentials for Visual Studio @vsrefactoring | vsrefactoringessentials.com Refactoring Essentials started out as NR6Pack, and was part of the NRefactory 6 repository. In the course of joint development, we made architectural tweaks that resulted in the two projects now being separate - which makes them easier to maintain and contribute to. Please note that Refactoring Essentials is at its heart a PCL (portable class library), which means it is x-platform and not tied to Windows / Visual Studio. Project Build Status Branch Status master (Development) release (Latest Release) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/icsharpcode/RefactoringEssentials"	"Open source extension for C# and VB.NET refactorings, including code best practice analyzers."	"true"
"Visual Studio Plugins"	"CodeContracts"	"https://github.com/Microsoft/CodeContracts"	"Source code for the CodeContracts tools for.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"527"	"100"	"98"	"GitHub - Microsoft/CodeContracts: Source code for the CodeContracts tools for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 100 Star 527 Fork 98 Microsoft/CodeContracts Code Issues 165 Pull requests 8 Wiki Pulse Graphs Source code for the CodeContracts tools for .NET 588 commits 5 branches 5 releases 22 contributors C# 98.0% C++ 0.9% Visual Basic 0.4% C 0.4% XSLT 0.2% TeX 0.1% C# C++ Visual Basic C XSLT TeX Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bugs/ExprTreesRoslyn feature/ProperAsyncPost master revert-68-master revert-296-pr-Net46Task Nothing to show v1.10.20606.1 v1.10.10126.2 v1.9.10714.2 v1.9.10710.1 v.1.9.10709.0 Nothing to show New pull request Latest commit 01e007b Jul 14, 2016 SergeyTeplyakov committed on GitHub Merge pull request #393 from jeroen-mostert/master … Add preconditions to System.Text.Encoding Permalink Failed to load latest commit information. .nuget Update to NuGet 2.8.6 Aug 17, 2015 Common Fix all remaining line endings Sep 1, 2015 Demo Fix all remaining line endings Sep 1, 2015 Documentation Fix all remaining line endings Sep 1, 2015 ExperimentalTools Fix all remaining line endings Sep 1, 2015 Foxtrot Add a test case and revert changes in reader as it breaks the tests. Jun 28, 2016 Microsoft.Research Merge pull request #393 from jeroen-mostert/master Jul 14, 2016 Microsoft.VisualStudio.CodeTools Removed build ouptut from source control repository. Jan 8, 2016 System.Compiler Add a test case and revert changes in reader as it breaks the tests. Jun 28, 2016 .gitattributes Add initial .gitattributes Jun 14, 2015 .gitignore Removed build ouptut from source control repository. Jan 8, 2016 CCR.sln Initial checkin Jan 6, 2015 CONTRIBUTING.md Add 'contract issue' to the list of labels. Jun 24, 2015 CodeContracts.sln Maintainability: Remove experimental projects and related tests: Dec 31, 2015 CodeContracts10.vsmdi Initial checkin Jan 6, 2015 FoxtrotTestRun.testrunconfig Fix for unit tests Jun 24, 2015 LICENSE.txt Re-save all text files with proper line endings Jun 14, 2015 Local.testsettings Initial checkin Jan 6, 2015 README.md Improved formatting of ""provided tools"" list in README. Mar 24, 2016 TraceAndTestImpact.testsettings Re-save all text files with proper line endings Jun 14, 2015 appveyor.yml Enable foxtrot tests Feb 5, 2016 build.bat Propagating build script error codes all the way to the top level scr… Aug 2, 2015 buildCC.bat Making sure to restore packages from the top-level solution before bu… Aug 2, 2015 oob.sln Initial checkin Jan 6, 2015 README.md CodeContracts Source code for the CodeContracts tools for .NET Code Contracts provide a language-agnostic way to express coding assumptions in .NET programs. The contracts take the form of pre-conditions, post-conditions, and object invariants. Contracts act as checked documentation of your external and internal APIs. The contracts are used to improve testing via runtime checking, enable static contract verification, and documentation generation. Code Contracts bring the advantages of design-by-contract programming to all .NET programming languages. We currently provide three tools: Runtime Checking. Our binary rewriter modifies a program by injecting the contracts, which are checked as part of program execution. Rewritten programs improve testability: each contract acts as an oracle, giving a test run a pass/fail indication. Automatic testing tools, such as Pex, take advantage of contracts to generate more meaningful unit tests by filtering out meaningless test arguments that don't satisfy the pre-conditions. Static Checking. Our static checker can decide if there are any contract violations without even running the program! It checks for implicit contracts, such as null dereferences and array bounds, as well as the explicit contracts. Documentation Generation. Our documentation generator augments existing XML doc files with contract information. There are also new style sheets that can be used with Sandcastle so that the generated documentation pages have contract sections. Quick Links Download: https://visualstudiogallery.msdn.microsoft.com/1ec7db13-3363-46c9-851f-1ce455f66970 FAQ: http://research.microsoft.com/en-us/projects/contracts/faq.aspx Forum: http://social.msdn.microsoft.com/Forums/en-US/codecontracts/threads Building from source For working on the project, open CodeContracts.sln and build. To create the installer and the nuget package, just run buildCC <version>. We use the convention: CC major version = 1.9.1 CC minor version = {month}{day}.{buildInTheDay} For instance, the 10th build on July 16 would be run as follows: buildCC 1.9.10716.10  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Microsoft/CodeContracts"	"Source code for the CodeContracts tools for.NET"	"true"
"Visual Studio Plugins"	"Git Diff Margin"	"https://github.com/laurentkempe/GitDiffMargin"	"Displays live Git changes of the currently edited file on Visual Studio margin and scroll bar"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"102"	"8"	"16"	"GitHub - laurentkempe/GitDiffMargin: Git Diff Margin displays live Git changes of the currently edited file on Visual Studio margin and scroll bar. Supports Visual Studio 2010 through Visual Studio 2015 and Visual Studio 15 preview Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 102 Fork 16 laurentkempe/GitDiffMargin Code Issues 12 Pull requests 2 Wiki Pulse Graphs Git Diff Margin displays live Git changes of the currently edited file on Visual Studio margin and scroll bar. Supports Visual Studio 2010 through Visual Studio 2015 and Visual Studio 15 preview http://visualstudiogallery.msdn.microsoft.com/cf49cf30-2ca6-4ea0-b7cc-6a8e0dadc1a8 250 commits 2 branches 17 releases Fetching contributors C# 99.7% PowerShell 0.3% C# PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master update-libgit2sharp Nothing to show v3.2.0 v3.1.2 v3.1.1 v3.1.0 v3.0.0 v2.0.0 v1.3.9.2 v1.3.9.1 v1.3.9 v1.3.2 v1.3.1 v1.3.0 v1.2.1 v1.2.0 v1.1.2 v1.1.1 v1.1 Nothing to show New pull request Latest commit 1e0c0cd Jun 21, 2016 laurentkempe committed on GitHub Update README.md Permalink Failed to load latest commit information. .nuget Migrate to NuGet Automatic Package Restore Sep 16, 2014 ChocolateyPackage/GitDiffMargin Update GitDiffMargin Chocolatey package Aug 8, 2015 GitDiffMargin.Unit.Tests Migrate to NuGet Automatic Package Restore Sep 16, 2014 GitDiffMargin Update version to 3.2.0 Jun 21, 2016 .gitignore Merge pull request #63 from sharwell/auto-restore Sep 17, 2014 GitDiffMargin.ncrunchsolution Rework look and feel and the way Feb 6, 2013 GitDiffMargin.sln Migrate to NuGet Automatic Package Restore Sep 16, 2014 GitDiffMargin.sln.DotSettings Migrate to Visual Studio 2012 Sdk Sep 25, 2012 LICENSE.md Update LICENSE.md Mar 19, 2016 README.md Update README.md Jun 21, 2016 appveyor.yml Add initial AppVeyor configuration Aug 8, 2015 README.md Git Diff Margin Git Diff Margin displays live Git changes of the currently edited file on Visual Studio margin and scroll bar. Supports Visual Studio 2010 through Visual Studio 2015 and Visual Studio 15 preview Quickly view all current file changes on Left margin Scroll Bars in map and bar mode with and without source overview blue rectangle for modifications green rectangles for new lines red triangles for deletions all colors configurable through Visual Studio Fonts and Colors options Undo the change Copy the old code into the clipboard Copy a part of the old code by selecting it in the popup Show the diff in Visual Studio Diff window except for Visual Studio 2010 which still use configured Git external diff tool Navigate to previous/next change on the file using user defined keyboard shortcuts or the popup icons Support Visual Studio 2013 Dark, Light and Blue Theme Support zoom Perfect companion of Visual Studio Tools for Git Installation Grab it from inside of Visual Studio's Extension Manager, or via the Extension Gallery link Or use the Chocolatey installation Video You might see a little video on the following page. Credits Thanks to Sam Harwell @sharwell for all the improvements Thanks to Rick Sladkey @ricksladkey for the fixes Thanks to @Iristyle for the chocolatey package Thanks to @heinzbeinz for the support of Visual Studio 15 preview Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/laurentkempe/GitDiffMargin"	"Displays live Git changes of the currently edited file on Visual Studio margin and scroll bar"	"true"
"Visual Studio Plugins"	"Productivity Power Tools"	"https://visualstudiogallery.msdn.microsoft.com/d0d33361-18e2-46c0-8ff2-4adea1e34fef"	"A set of extensions to Visual Studio Professional (and above) which improves developer productivity."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"553"	"67"	"65"	"GitHub - Microsoft/VS-PPT: Productivity Power Tools - a set of Visual Studio extensions improving developer productivity. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 67 Star 553 Fork 65 Microsoft/VS-PPT Code Issues 15 Pull requests 2 Wiki Pulse Graphs Productivity Power Tools - a set of Visual Studio extensions improving developer productivity. http://aka.ms/extendvs 44 commits 4 branches 0 releases 9 contributors C# 99.0% Other 1.0% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags AppVeyorConfig dev/olegtk/FixCrashOnPersianText master olegtk/FixBuildBreak Nothing to show Nothing to show New pull request Latest commit 8c6ad44 Jun 21, 2016 olegtk committed on GitHub Add code of conduct link Permalink Failed to load latest commit information. src Fix crash on editing Persian text. Jun 13, 2016 .gitignore initial code commit Mar 16, 2016 CONTRIBUTING.md Tweaking CONTRIBUTING.md text Mar 22, 2016 README.md Add code of conduct link Jun 21, 2016 license.txt initial code commit Mar 16, 2016 README.md Visual Studio Productivity Power Tools Productivity Power Tools is a set of Visual Studio extensions improving developer productivity. Install Productivity Power Tools Install the latest official build of Productivity Power Tools for Visual Studio 2015 from the VS Gallery. Source code Clone the sources: git clone https://github.com/Microsoft/VS-PPT.git Building, testing and debugging the sources The source code in this repo is licensed under the terms of the MIT license (Microsoft OSS) Get started Overview Roadmap Also take a look at our Wiki for more information. Contribute! How to Contribute Pull requests: Open/Closed This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Microsoft/VS-PPT"	"A set of extensions to Visual Studio Professional (and above) which improves developer productivity."	"true"
"Web Frameworks"	"ASP.NET MVC"	"https://aspnetwebstack.codeplex.com/"	"ASP.NET is a free web framework for building great web sites and applications"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ASP.NET MVC / Web API / Web Pages - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe ASP.NET is a free web framework for building great web sites and applications. This site is the home of the ASP.NET MVC, Web API, and Web Pages source code. If you want to use the released versions of these products to develop your applications, visit http://www.asp.net to find official installers, documentation, tutorials, samples, and videos. These products are actively developed by the ASP.NET team assigned to the Microsoft Open Tech Hub and in collaboration with a community of open source developers. Together we are dedicated to creating the best possible platform for web development. Note: The Web API OData project has been moved to GitHub. You can find the latest source and issues at https://github.com/odata/webapi. Source Code You can browse the source code via the web or use git to clone the source repository. git clone https://git01.codeplex.com/aspnetwebstack.git To build and run the tests from a command prompt, run build.cmd (found in the root directory). Note: As part of building you may need to obtain NuGet packages from the Outercurve Foundation NuGet public feed*. build * By running build, you will be initiating the download of other software packages from a NuGet-based feed that is owned by the Outercurve Foundation. You are responsible for locating, reading and complying with the license terms that accompany each such package. Each package is licensed to you by its owner. Microsoft is not responsible for, nor does it grant any licenses to, third-party packages. See Runtime.sln in the root directory to open the solution in Visual Studio. Signed Nightly Builds If you do not want to build the source, nightly builds are available via a private NuGet feed. Nightly builds are meant for developers to try out new features or bug fixes ahead of an official prerelease or final build. We strongly urge you to only use official builds for production. Nightly builds can be used with Visual Studio 2010 SP1 or Visual Studio 2012. To use the nightly build: In your Package Manager settings add the following package source: https://www.myget.org/F/aspnetwebstacknightly/ Add or update to the latest build of ASP.NET. The nightly build is labeled (nightly YYYY MMM DD). See the nightly build documentation for more information. Contribute There are lots of ways to contribute to the project, and we appreciate our contributors. You can contribute by reviewing and sending feedback on code checkins, suggesting and trying out new features as they are implemented, submit bugs and help us verify fixes as they are checked in, as well as submit code fixes or code contributions of your own. Note that all code submissions will be rigorously reviewed and tested by the ASP.NET Team, and only those that meet an extremely high bar for both quality and design/roadmap appropriateness will be merged into the source. Roadmap Current RTM versions are MVC 5.2.2, Web API 2.2.2 and Web Pages 3.2.2. The current preview version is MVC 5.2.3, Web API 2.2.3 and Web Pages 3.2.3. We expect to release the RTM bits in next few weeks to nuget.org and later in Visual Studio 2015. We are now working on MVC 6 which combines the three frameworks into a unified framework. You can find the project on GitHub at https://github.com/aspnet/Mvc and https://github.com/aspnet/Razor. We are tracking issues for future versions of MVC 5.X, Web API 2.X and Web Pages 3.X in the Issue Tracker here. The work for MVC 6 is tracked only on GitHub. Last edited Jan 26, 2015 at 3:03 PM by yishaigalatzer, version 96 downloads activity downloads 184 Days: 7 7 30 30 All All Details related projects MvcContrib: an Outercurve Foundation project ASP.NET Entity Framework © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"ASP.NET is a free web framework for building great web sites and applications"	"true"
"Web Frameworks"	"FubuMVC"	"https://github.com/DarthFubuMVC/fubumvc"	"A front-controller style MVC framework for.NET"	"null"	"null"	"null"	"null"	"null"	"http://fubuworld.com/fubumvc/"	"null"	"419"	"31"	"169"	"GitHub - DarthFubuMVC/fubumvc: A front-controller style MVC framework for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 419 Fork 169 DarthFubuMVC/fubumvc Code Issues 85 Pull requests 3 Wiki Pulse Graphs A front-controller style MVC framework for .NET http://fubuworld.com/fubumvc 4,530 commits 13 branches 122 releases 51 contributors C# 96.5% JavaScript 2.6% CoffeeScript 0.5% Ruby 0.2% CSS 0.2% HTML 0.0% C# JavaScript CoffeeScript Ruby CSS HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.2 1.3 2.2 LQ-Rx activitystream async blue22 lqrx2 master nowin serenity-hosting three xml-docs-update Nothing to show v0.4.0 v0.1.0 FubuMVC.StructureMap.1.0.1.1410 FubuMVC.Core.1.0.1.1410 2.0.0.1816 2.0.0.1800 2.0.0.1796 2.0.0.1788 2.0.0.1787 2.0.0.1778 2.0.0.1771 2.0.0.1764 2.0.0.1756 1.3.0.1710 1.3.0.1708 1.3.0.1707 1.3.0.1706 1.3.0.1705 1.3.0.1704 1.3.0.1703 1.3.0.1702 1.3.0.1700 1.3.0.1699 1.3.0.1694 1.3.0.1692 1.3.0.1690 1.2.0.1686 1.2.0.1678 1.2.0.1676 1.2.0.1675 1.2.0.1674 1.2.0.1673 1.2.0.1672 1.2.0.1670 1.2.0.1669 1.2.0.1668 1.2.0.1667 1.2.0.1666 1.2.0.1660 1.2.0.1658 1.2.0.1656 1.2.0.1654 1.2.0.1653 1.2.0.1652 1.2.0.1651 1.2.0.1650 1.2.0.1646 1.2.0.1644 1.2.0.1642 1.2.0.1641 1.2.0.1638 1.2.0.1637 1.2.0.1636 1.2.0.1635 1.2.0.1624 1.2.0.1623 1.2.0.1614 1.2.0.1611 1.2.0.1609 1.2.0.1604 1.2.0.1603 1.2.0.1602 1.2.0.1601 1.2.0.1599 1.2.0.1598 1.2.0.1597 1.2.0.1596 1.2.0.1595 1.2.0.1594 1.2.0.1593 1.1.0.1591 1.1.0.1590 1.1.0.1589 1.1.0.1543 1.1.0.1542 1.1.0.1541 1.1.0.1540 1.1.0.1539 1.1.0.1538 1.1.0.1537 1.1.0.1536 1.1.0.1535 1.1.0.1534 1.1.0.1533 1.1.0.1532 1.1.0.1530 1.1.0.1529 1.1.0.1528 1.1.0.1527 1.1.0.1525 1.1.0.1524 1.1.0.1523 1.1.0.1522 1.1.0.1521 1.1.0.1520 1.1.0.1519 1.1.0.1514 1.1.0.1513 1.1.0.1512 1.1.0.1509 Nothing to show New pull request Latest commit 65fdc1e Jul 10, 2016 jeremydmiller added the concept of a control queue to the service bus Permalink Failed to load latest commit information. .paket turning paket auto restore off Sep 3, 2015 javascript Generate the correct urls for the settings links in diagnostics Jun 24, 2016 lib serenity compiles Mar 26, 2015 packaging/nuget Merge branch 'master' of https://github.com/DarthFubuMVC/fubumvc Mar 23, 2016 src added the concept of a control queue to the service bus Jul 10, 2016 templates converted tests to Fixie and package resolution to Paket. Closes GH-930… Sep 3, 2015 .bottle-alias rake full is passing with FT merged in! Jun 17, 2015 .editorconfig fixed merge issues from the NOWIN addition and all the other work lately Jun 16, 2015 .gitignore roughed in diagnostics for Marten adapter Mar 10, 2016 .mailmap Very important change to fix ""git shortlog -ns"" output Sep 5, 2011 Gemfile updated the fuburake dependency to the correct 1.2 version May 2, 2014 NuGet.exe building nugets again in rake script. Closes GH-940 Sep 21, 2015 build.cmd Updated the readme. Closes GH-967 Sep 23, 2015 fubu finished importing fubu.exe. Closes GH-722 Apr 17, 2014 license.txt Update license.txt Feb 17, 2014 package.json updated npm packages Sep 1, 2015 paket.dependencies updated StructureMap & Marten. New command recorder Mar 9, 2016 paket.exe Updated paket to 2.9.0 for perf improvements Oct 6, 2015 paket.lock updating Storyteller Jul 10, 2016 rakefile.rb first round of health check ST tests pass Jul 10, 2016 readme.markdown Updated the readme. Closes GH-967 Sep 23, 2015 webpack.config.js roughed in diagnostics for Marten adapter Mar 10, 2016 readme.markdown Building FubuMVC The FubuMVC codebase still uses Rake for build automation, but as of September 2015, you don't have to use Rake to develop with FubuMVC if you don't want to. You will need to have Node.js or Io.js and npm installed in order to build the client side assets for FubuMVC's diagnostics package before working with the C# code. With Rake Assuming you have Ruby 2.1+ installed on your computer, go to a command line and type... bundle install rake Visual Studio.Net Only There is a small command file called build.cmd that can be executed once to bring down nuget and npm dependencies and build the client side assets that FubuMVC needs for its embedded. diagnostics. Run this command at least once before opening Visual Studio.Net. From there, open the solution file at src/FubuMVC.sln and go to town. Working with Storyteller rake open_st -- Opens the Storyteller test suite in the Storyteller client for interactive editing and execution rake storyteller -- Runs all the Storyteller specifications Working with Diagnostics Open the diagnostics harness application to the browser with the command rake diagnostics. This command will start webpack in a new window against the client side attributes in the javascript folder in ""watched"" mode. This command also compiles and starts the DiagnosticsHarness application in a NOWIN server before opening a browser window to the newly launched application. The browser will auto-refresh whenever a new version of the webpack bundle.js file is saved. You will have to stop and restart the FubuMVC application to see any changes to the server side. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/DarthFubuMVC/fubumvc"	"A front-controller style MVC framework for.NET"	"true"
"Web Frameworks"	"IISNode"	"https://github.com/tjanczuk/iisnode"	"Host NodeJS applications in IIS"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1185"	"109"	"240"	"GitHub - tjanczuk/iisnode: Hosting node.js applications in IIS on Windows Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 109 Star 1,185 Fork 240 tjanczuk/iisnode Code Issues 126 Pull requests 10 Wiki Pulse Graphs Hosting node.js applications in IIS on Windows 403 commits 2 branches 35 releases 7 contributors C++ 76.7% JavaScript 15.3% Batchfile 3.9% HTML 3.8% Other 0.3% C++ JavaScript Batchfile HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.2.21 v0.2.18 v0.2.16 v0.2.15 v0.2.14 v0.2.11 v0.2.7 v0.2.6.1 v0.2.6 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.21 v0.1.20 v0.1.19 v0.1.18 v0.1.16 v0.1.15 v0.1.14 v0.1.13 v0.1.12 v0.1.11 v0.1.11-hotfix-1 v0.1.10 v0.1.9 v0.1.8 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1 Nothing to show New pull request Latest commit c816a67 Apr 11, 2016 rramachand21 Update README.md Permalink Failed to load latest commit information. src v0.2.21 - Fix issues. Apr 11, 2016 test iisnode events in FREB Aug 4, 2014 .gitignore tuning perf test params to achieve valid results Nov 30, 2011 LICENSE.txt update license Nov 3, 2011 README.md Update README.md Apr 11, 2016 README.md Hosting node.js applications in IIS on Windows Branches master: stable version. iisnode-dev: development branch. Why would I want to do it? Benefits Who uses iisnode? Microsoft azure - benefits Microsoft azure - get started with node.js appharbor.com discountasp.net arvixe.com smarterasp.net gearhost.com webecs.com Prerequisites for using Windows Vista, Windows 7, Windows 8, Windows Server 2008, or Windows Server 2012 IIS 7.x with IIS Management Tools and ASP.NET WebSocket functionality requires IIS 8.x on Windows 8 or Windows Server 2012 URL rewrite module for IIS Latest node.js build for Windows Installing for IIS 7.x/8.x Install iisnode for IIS 7.x/8.x: x86 or x64 - choose bitness matching your system To set up samples, from the administrative command prompt call %programfiles%\iisnode\setupsamples.bat Go to http://localhost/node Installing for IIS Express/WebMatrix Install WebMatrix using the Web Platform Installer Open WebMatrix, choose “Site from folder”, enter %localappdata%\iisnode\www, start the site, and play with the iisnode samples, or Use node.js templates to get started quickly with an Express application or a skeleton Hello World Installing for IIS Express 8 on Windows x64 This can be a head-scratcher since IIS Express 8 gives you both 32-bit and 64-bit versions (http://www.iis.net/learn/extensions/introduction-to-iis-express/iis-80-express-readme). You can either: Install the full x64 version, then in Visual Studio go to Tools > Options > Projects and Solutions > Web Projects > Use the 64 bit version of IIS Express. This way you have a single install for both IIS and IIS Express. Separately install iisnode express version (https://github.com/azure/iisnode/wiki/iisnode-releases). Howtos the basics the basics (Pусский перевод) NEW: websockets using with express framework using with URL rewrite module using with WebMatrix and IIS Express site templates for WebMatrix using with mongodb diagnosing problems with ETW traces using with MVC portuguese: node.js no windows: instalando o iisnode integrated debugging NEW: integrated debugging with node-inspector v0.7.3 pub/sub server using faye appharbor uses iisnode Prerequisites for building All prerequisities for using Visual Studio Express 2012 for Windows Desktop WIX Toolset v3.6 Windows SDK for Windows 8 Building Build commands should be issued from the build environment set up with ""%programfiles(x86)%\Microsoft Visual Studio 11.0\Common7\Tools\VsDevCmd.bat"", assuming default installation location of Visual Studio 2012 on x64 platform. For x86 build: msbuild /p:Platform=Win32 src\iisnode\iisnode.sln  For x64 build: msbuild /p:Platform=x64 src\iisnode\iisnode.sln  Installing after build For IIS 7.x/8.0: build\debug\{x64|x86}\iisnode-full.msi For IIS Express 7.x: build\debug\x86\iisnode-express.msi Running tests Install for IIS 7.x/8.x (see previous sections) test\functional\test.bat note that for the WebSocket tests to pass you must be running in IIS 8.x on Windows 8 or Windows Server 2012 Resources & documentation Releases Wiki Blog Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tjanczuk/iisnode"	"Host NodeJS applications in IIS"	"true"
"Web Frameworks"	"Suave.IO"	"https://suave.io/"	"Framework/library/web server that makes you cry tears of joy after finishing your project ahead-of-time when you look at the beautiful code you've written in."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"565"	"69"	"128"	"GitHub - SuaveIO/suave: Suave is a simple web development F# library providing a lightweight web server and a set of combinators to manipulate route flow and task composition. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 69 Star 565 Fork 128 SuaveIO/suave Code Issues 38 Pull requests 4 Wiki Pulse Graphs Suave is a simple web development F# library providing a lightweight web server and a set of combinators to manipulate route flow and task composition. https://suave.io 1,924 commits 22 branches 70 releases 53 contributors F# 98.2% Ruby 1.7% Other 0.1% F# Ruby Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags api-docs bugs/185-form-files bugs/324-post-parsing feature/IIS-hosting feature/Suave.Testing feature/fix-session-state_id feature/http.fs feature/http2 feature/improve-tracing feature/libs feature/live-reload feature/miTLS feature/owin-mid-func-semantics feature/setHeaderValue feature/smart-responses feature/181-lenses master merge_nupkgs notes/253 notes/255 releases/v0.5.x releases/v1.x Nothing to show v2.0.0-alpha4 v2.0.0-alpha3 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.0.0 v1.0.0-beta.2 v1.0.0-beta.1 v0.34.0-nsrefactor.1 v0.34.0-nsrefactor v0.33.0 v0.33.0-libuv.2 v0.33.0-libuv.1 v0.33.0-libuv v0.32.1 v0.32.0 v0.32.0-owin2 v0.32.0-owin v0.32 v0.31.2 v0.31.1 v0.31.0 v0.30.0 v0.29.1 v0.29.0 v0.29.0-alpha.2 v0.29.0-alpha v0.28.1 v0.28.0 v0.27.0 v0.26.2 v0.26.1 v0.26.0 v0.25.0 v.0.24.0 v0.24.0 v0.23.0 v0.22.0 v0.21.1 v0.21.0 v0.20.2 v0.20.1 v0.20.0 v0.19.1 v0.19.0 v0.18.0 v0.17.0 v0.1.78 v0.0.5 v0.0.4 v0.0.3 0.16.0 0.15.0 0.14.0 0.13.0 0.12.0 0.11.0 0.10.0 0.9.0 0.8.0 0.7.0 0.6.0 0.5.0 0.4.0 0.3.0 0.2.0 0.0.5 0.0.4 0.0.3 Nothing to show New pull request Latest commit 34655af Jul 10, 2016 haf committed on GitHub Merge pull request #488 from tamizhvendan/master … Adding F# Applied Book Link Permalink Failed to load latest commit information. docs Adding F# Applied Book Link Jul 10, 2016 examples resolves #484 - adds support for sending ArraySegments of existing bu… Jul 7, 2016 libs upgrading dependencies, fixes #81 on OS X and Windows Jan 1, 2015 paket-files [examples] adding JsonApi sample May 5, 2016 src resolves #484 - adds support for sending ArraySegments of existing bu… Jul 7, 2016 tools Update paket.targets to latest version May 2, 2016 .editorconfig Add .editorconfig file. See http://editorconfig.org/ Dec 9, 2015 .gitattributes [infra] tell git to leave our txts alone May 20, 2015 .gitignore ignore dowloaded dotnetcli install script May 20, 2016 .semver [infra] v2.0.0-alpha4 Jun 6, 2016 .travis.yml [infra] trying allow_failures for mono Jul 5, 2016 COPYING Update COPYING Dec 5, 2014 Dockerfile [infra] Dockerfile +:compile for good measure Apr 28, 2016 Gemfile [build] upgrade albacore for nicer release notes Jan 2, 2015 Gemfile.lock [infra] bump albacore, fix utf8 from backticks May 23, 2016 README.md move one line Jun 20, 2016 Rakefile framework now is netstandard1.6 Jun 30, 2016 appveyor.yml [infra] bump libuv version Jun 29, 2016 build.cmd Fixes #266 Nov 9, 2015 build.sh [build] change tests dir from 'Debug' to 'Release' Mar 28, 2016 paket.dependencies Fix for issue #435 Content-Length header not being sent if it was set… Jul 1, 2016 paket.lock Fix for issue #435 Content-Length header not being sent if it was set… Jul 1, 2016 README.md Introduction Suave is a simple web development F# library providing a lightweight web server and a set of combinators to manipulate route flow and task composition. Suave is inspired in the simplicity of Happstack and born out of the necessity of embedding web server capabilities in my own applications. Still in its early stages Suave supports Websocket, HTTPS, multiple TCP/IP bindings, Basic Access Authentication, Keep-Alive. Suave also takes advantage of F# asynchronous workflows to perform non-blocking IO. In fact, Suave is written in a completely non-blocking fashion throughout. Sponsored by qvitoo – A.I. bookkeeping and Suave in production since many years. Build Status Platform Status Windows Mono/OSX What follows is a tutorial on how to create applications. Scroll past the tutorial to see detailed function documentation. Tutorial: Hello World! The simplest Suave application is a simple HTTP server that greets all visitors with the string ""Hello World!"" open Suave  startWebServer defaultConfig (Successful.OK ""Hello World!"") Now that you've discovered how to do ""Hello World!"", go read the rest of the documentation – editable in the docs folder. Suave.Testing We have a NuGet ready for your testing needs; Suave is an excellent server for running in-process integation tests, as it's very fast to spawn. On an ordinary laptop, running hundreds of randomised tests and micro-benchmarks as well as all Suave unit tests, take about 5 seconds on mono. Start by installing: paket add nuget suave.testing  You can now use it: open Suave open Suave.Testing  open Fuchu  testCase ""parsing a large multipart form"" <| fun _ ->    let res =     runWithConfig (OK ""hi"")     |> req HttpMethod.POST ""/"" (Some byteArrayContent)    Assert.Equal(""should get the correct result"", ""hi"", res) All of our tests use this assembly; you can do too. How to Build We're using a cross-platform build suite called albacore/rake. Build prerequisites Ruby RubyGems Bundler Libuv On linux and os x you should have ruby out of the box (you might need to install bundler though). On Windows, you have to install it. To execute the build script, invoke following commands: bundle bundle exec rake  After you managed to build with the rake script, you can also use ./build.sh on any OS or build.cmd on Windows which only compile solution and run tests. Libuv installation On OS X: brew install libuv --universal and then `export LD_LIBRARY_PATH=/usr/local/lib:/usr/lib:/lib`  On Windows: @powershell -NoProfile -ExecutionPolicy Bypass -Command ""Start-FileDownload 'https://github.com/libuv/libuv/archive/v1.7.5.zip'"" 7z x v1.7.5.zip & cd libuv-1.7.5 & vcbuild.bat x86 shared debug mkdir src\\Suave.Tests\\bin\\Release\\ & cp libuv-1.7.5\\Debug\\libuv.dll src\\Suave.Tests\\bin\\Release\\libuv.dll  On Linux Ubuntu/Debian: sudo apt-get install automake libtool curl -sSL https://github.com/libuv/libuv/archive/v1.7.5.tar.gz | sudo tar zxfv - -C /usr/local/src cd /usr/local/src/libuv-1.7.5 sudo sh autogen.sh sudo ./configure sudo make sudo make install sudo rm -rf /usr/local/src/libuv-1.7.5 && cd ~/ sudo ldconfig  Coding Guidelines Suave.X where X is a module is where we expect users to look. We don't expect users of the library to have to look at Y in Suave.X.Y, so for server-specific code, please stick to the Y module/namespace. That way we make the API discoverable. Style Guide Two space indentation. match x with // '|' characters at base of 'match' | A     -> () | Bcdef -> ""aligned arrows"" // space after '|' character Parameters Let type annotations be specified with spaces after the argument symbol and before the type. module MyType =   let ofString (scheme : string) =     // ... Method formatting with no spaces after/before normal parenthesis let myMethodName firstArg (second : WithType) = async { // and monad builder   return! f firstArg second   } // at base of 'let' + 2 spaces You need to document your methods with '///' to create XML-doc. A XML documentation file is generated together with the compilation and is distributed with the NuGet so that others can read your code's intentions easily. Don't put unnecessary parenthesis unless it makes the code more clear. When writing functions that take some sort of 'configuration' or that you can imagine would like to be called with a parameter which is almost always the same value for another function body's call-site, put that parameter before more-often-varying parameters in the function signature. Testing Run Tests as a console app. Return status code = 0 means success. Upgrade openssl Windows: paket update openssl.redist OS X: brew install openssl && brew update openssl && cp /usr/local/Cellar/openssl/1.0.1j_1/lib/ . Linux: ... Community Chat Room We have a chat room in case you feel like chatting a bit. Integrations https://github.com/rayokota/generator-angular-suave FsReveal TodoBackendSuave Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/SuaveIO/suave"	"Framework/library/web server that makes you cry tears of joy after finishing your project ahead-of-time when you look at the beautiful code you've written in."	"true"
"Web Servers"	"EmbedIO"	"https://github.com/unosquare/embedio"	"Web server built on Mono and cross-platform"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"95"	"21"	"24"	"GitHub - unosquare/embedio: A tiny, cross-platform, module based web server for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 95 Fork 24 unosquare/embedio Code Issues 2 Pull requests 0 Wiki Pulse Graphs A tiny, cross-platform, module based web server for .NET http://unosquare.github.io/embedio 141 commits 4 branches 13 releases Fetching contributors C# 48.6% JavaScript 45.4% CSS 3.8% HTML 2.2% C# JavaScript CSS HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master v2014.001 v2103.001 Nothing to show v1.0.9 v1.0.6 v1.0.5 v1.0.4 v1.0.3 1.0.19 1.0.17 1.0.15 1.0.14 1.0.13 1.0.12 1.0.11 1.0.10 Nothing to show New pull request Latest commit a477f8a Jun 29, 2016 geoperez Update tubular dep Permalink Failed to load latest commit information. Unosquare.Labs.EmbedIO.Command Improvements to how handle aborted connections Sep 3, 2015 Unosquare.Labs.EmbedIO.Samples Update tubular dep Jun 29, 2016 Unosquare.Labs.EmbedIO.Tests Update nugets Jun 28, 2016 Unosquare.Labs.EmbedIO Update nugets Jun 28, 2016 packages First NUnit test May 8, 2015 .gitattributes Initial commit to add default .gitIgnore and .gitAttribute files. Nov 25, 2014 .gitignore Replacing master with new version Nov 25, 2014 .travis.yml Update .travis.yml Jul 21, 2015 LICENSE updating license file. Jun 20, 2015 README.md Update README.md Apr 13, 2016 Unosquare.Labs.EmbedIO.sln Merge branch with new regex strategy Apr 10, 2016 README.md ⭐Please star this project if you find it useful! A tiny, cross-platform, module based, MIT-licensed web server for .NET Written entirely in C# Network operations use the async/await pattern: Responses are handled asynchronously Cross-platform: tested in Mono 3.10.x on Windows and on a custom Yocto image for the Raspberry Pi Extensible: Write your own modules -- For example, video streaming, UPnP, etc. Check out EmbedIO Extras for additional modules. Small memory footprint Create REST APIs quickly with the out-of-the-box Web Api module Serve static files with 1 line of code (also out-of-the-box) Handle sessions with the built-in LocalSessionWebModule Web Sockets support (Not available on Mono 3.x though) CORS support. Origin, Header and Method validation with OPTIONS preflight Supports HTTP 206 Partial Content OWIN Middleware support via Owin Middleware Module. For detailed usage and REST API implementation, download the code and take a look at the Samples project Some usage scenarios: Write a cross-platform GUI entirely in CSS/HTML/JS Write a game using Babylon.js and make EmbedIO your serve your code and assets Create GUIs for Windows services or Linux daemons Write client applications with real-time communication between them NuGet Installation: PM> Install-Package EmbedIO  Basic Example: Please note the comments are the important part here. More info is available in the samples. namespace Company.Project {     using System;     using Unosquare.Labs.EmbedIO;     using Unosquare.Labs.EmbedIO.Log;     using Unosquare.Labs.EmbedIO.Modules;      class Program     {         /// <summary>         /// Defines the entry point of the application.         /// </summary>         /// <param name=""args"">The arguments.</param>         static void Main(string[] args)         {             var url = ""http://localhost:9696/"";             if (args.Length > 0)                 url = args[0];              // Our web server is disposable. Note that if you don't want to use logging,             // there are alternate constructors that allow you to skip specifying an ILog object.             using (var server = new WebServer(url, new SimpleConsoleLog()))             {                 // First, we will configure our web server by adding Modules.                 // Please note that order DOES matter.                 // ================================================================================================                 // If we want to enable sessions, we simply register the LocalSessionModule                 // Beware that this is an in-memory session storage mechanism so, avoid storing very large objects.                 // You can use the server.GetSession() method to get the SessionInfo object and manupulate it.                 // You could potentially implement a distributed session module using something like Redis                 server.RegisterModule(new LocalSessionModule());                  // Here we setup serving of static files                 server.RegisterModule(new StaticFilesModule(""c:/web""));                 // The static files module will cache small files in ram until it detects they have been modified.                 server.Module<StaticFilesModule>().UseRamCache = true;                 server.Module<StaticFilesModule>().DefaultExtension = "".html"";                 // We don't need to add the line below. The default document is always index.html.                 //server.Module<Modules.StaticFilesWebModule>().DefaultDocument = ""index.html"";                  // Once we've registered our modules and configured them, we call the RunAsync() method.                 // This is a non-blocking method (it return immediately) so in this case we avoid                 // disposing of the object until a key is pressed.                 //server.Run();                 server.RunAsync();                  // Fire up the browser to show the content if we are debugging! #if DEBUG                 var browser = new System.Diagnostics.Process()                 {                     StartInfo = new System.Diagnostics.ProcessStartInfo(url) { UseShellExecute = true }                 };                 browser.Start(); #endif                 // Wait for any key to be pressed before disposing of our web server.                 // In a service we'd manage the lifecycle of of our web server using                 // something like a BackgroundWorker or a ManualResetEvent.                 Console.ReadKey(true);             }         }     } } Fluent Example: Many extension methods are available. This allows you to create a web server instance in a fluent style by dotting in configuration options. namespace Company.Project {     using System;     using Unosquare.Labs.EmbedIO;      internal class Program     {         /// <summary>         /// Defines the entry point of the application.         /// </summary>         /// <param name=""args"">The arguments.</param>         private static void Main(string[] args)         {             var url = ""http://localhost:9696/"";             if (args.Length > 0)                 url = args[0];              // Create Webserver with console logger and attach LocalSession and Static             // files module and CORS enabled             var server = WebServer                 .CreateWithConsole(url)                 .EnableCors()                 .WithLocalSession()                 .WithStaticFolderAt(""c:/web"");          var cts = new CancellationTokenSource();             var task = server.RunAsync(cts.Token);              // Fire up the browser to show the content if we are debugging! #if DEBUG             var browser = new System.Diagnostics.Process()             {                 StartInfo = new System.Diagnostics.ProcessStartInfo(url) {UseShellExecute = true}             };             browser.Start(); #endif             // Wait for any key to be pressed before disposing of our web server.             // In a service we'd manage the lifecycle of of our web server using             // something like a BackgroundWorker or a ManualResetEvent.             Console.ReadKey(true);             cts.Cancel();             try             {                 task.Wait();             } catch (AggregateException)             {                 // We'd also actually verify the exception cause was that the task                 // was cancelled.                 server.Dispose();             }         }     } } REST API Example: The WebApi module supports two routing strategies: Wildcard and Regex. By default, and in order to maintain backwards compatibility, the WebApi module will use the Wildcard Routing Strategy and match routes using the asterisk * character in the route. For example: The route /api/people/* will match any request with a URL starting with the two first URL segments api and people and ending with anything. The route /api/people/hello will be matched. You can also use wildcards in the middle of the route. The route /api/people/*/details will match requests starting with the two first URL segments api and people, and ending with a details segment. The route /api/people/hello/details will be matched. Note that most REST services can be designed with this simpler Wildcard routing startegy. However, the Regex matching strategy is the current recommended approach as we might be deprecating the Wildcard strategy altogether On the other hand, the Regex Routing Strategy will try to match and resolve the values from a route template, in a similar fashion to Microsoft's Web API 2. A method with the following route /api/people/{id} is going to match any request URL with three segments: the first two api and people and the last one is going to be parsed or converted to the type in the id argument of the handling method signature. Please read on if this was confusing as it is much simpler than it sounds. Additionally, you can put multiple values to match, for example /api/people/{mainSkill}/{age}, and receive the parsed values from the URL straight into the arguments of your handler method. During server setup: // The routing strategy is Wildcard by default, but you can change it to Regex as follows: var server =  new WebServer(""http://localhost:9696/"", new NullLog(), RoutingStrategy.Regex);  server.RegisterModule(new WebApiModule()); server.Module<WebApiModule>().RegisterController<PeopleController>(); And our controller class (using Regex Strategy) looks like: public class PeopleController : WebApiController {     [WebApiHandler(HttpVerbs.Get, ""/api/people/{id}"")]     public bool GetPeople(WebServer server, HttpListenerContext context, int id)     {         try         {             if (People.Any(p => p.Key == id))             {                 return context.JsonResponse(People.FirstOrDefault(p => p.Key == id));             }         }         catch (Exception ex)         {             return HandleError(context, ex, (int)HttpStatusCode.InternalServerError);         }     }      protected bool HandleError(HttpListenerContext context, Exception ex, int statusCode = 500)     {         var errorResponse = new         {             Title = ""Unexpected Error"",             ErrorCode = ex.GetType().Name,             Description = ex.ExceptionMessage(),         };          context.Response.StatusCode = statusCode;         return context.JsonResponse(errorResponse);     } } Or if you want to use the Wildcard strategy (which is the default): public class PeopleController : WebApiController {     [WebApiHandler(HttpVerbs.Get, ""/api/people/*"")]     public bool GetPeople(WebServer server, HttpListenerContext context)     {         try         {             var lastSegment = context.Request.Url.Segments.Last();             if (lastSegment.EndsWith(""/""))                 return context.JsonResponse(People);              int key = 0;             if (int.TryParse(lastSegment, out key) && People.Any(p => p.Key == key))             {                 return context.JsonResponse(People.FirstOrDefault(p => p.Key == key));             }              throw new KeyNotFoundException(""Key Not Found: "" + lastSegment);         }         catch (Exception ex)         {             return HandleError(context, ex, (int)HttpStatusCode.InternalServerError);         }     }      protected bool HandleError(HttpListenerContext context, Exception ex, int statusCode = 500)     {         var errorResponse = new         {             Title = ""Unexpected Error"",             ErrorCode = ex.GetType().Name,             Description = ex.ExceptionMessage(),         };          context.Response.StatusCode = statusCode;         return context.JsonResponse(errorResponse);     } } Web Sockets Example: During server setup: server.RegisterModule(new WebSocketsModule()); server.Module<WebSocketsModule>().RegisterWebSocketsServer<WebSocketsChatServer>(""/chat""); And our web sockets server class looks like: /// <summary> /// Defines a very simple chat server /// </summary> public class WebSocketsChatServer : WebSocketsServer {      public WebSocketsChatServer()         : base(true, 0)     {         // placeholder     }      /// <summary>     /// Called when this WebSockets Server receives a full message (EndOfMessage) form a WebSockets client.     /// </summary>     /// <param name=""context"">The context.</param>     /// <param name=""rxBuffer"">The rx buffer.</param>     /// <param name=""rxResult"">The rx result.</param>     protected override void OnMessageReceived(WebSocketContext context, byte[] rxBuffer, WebSocketReceiveResult rxResult)     {         var session = this.WebServer.GetSession(context);         foreach (var ws in this.WebSockets)         {             if (ws != context)                 this.Send(ws, Encoding.UTF8.GetString(rxBuffer));         }     }      /// <summary>     /// Gets the name of the server.     /// </summary>     /// <value>     /// The name of the server.     /// </value>     public override string ServerName     {         get { return ""Chat Server""; }     }      /// <summary>     /// Called when this WebSockets Server accepts a new WebSockets client.     /// </summary>     /// <param name=""context"">The context.</param>     protected override void OnClientConnected(WebSocketContext context)     {         this.Send(context, ""Welcome to the chat room!"");         foreach (var ws in this.WebSockets)         {             if (ws != context)                 this.Send(ws, ""Someone joined the chat room."");         }     }      /// <summary>     /// Called when this WebSockets Server receives a message frame regardless if the frame represents the EndOfMessage.     /// </summary>     /// <param name=""context"">The context.</param>     /// <param name=""rxBuffer"">The rx buffer.</param>     /// <param name=""rxResult"">The rx result.</param>     protected override void OnFrameReceived(WebSocketContext context, byte[] rxBuffer, WebSocketReceiveResult rxResult)     {         return;     }      /// <summary>     /// Called when the server has removed a WebSockets connected client for any reason.     /// </summary>     /// <param name=""context"">The context.</param>     protected override void OnClientDisconnected(WebSocketContext context)     {         this.Broadcast(string.Format(""Someone left the chat room.""));     } } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/unosquare/embedio"	"Web server built on Mono and cross-platform"	"true"
"Web Servers"	"Jexus web server"	"http://www.jexus.org"	"Web server for Linux"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ASP.NET跨平台从这里开始！ 首页 在线示例 使用入门 参考手册 应用案例 技术论坛 搜索 Jexus 強勁、堅固、免費、易用的Linux ASP.NET服務器 下載Jexusnew  Jexus入門指南 5.8.1 正式版 5.8.0 正式版 5.6.5 正式版 Version 5.8.x .NET LINUX工程师群:  103810355  (注: 没有三年以上.NET开发经验者慎入) ASP.NET LINUX实战群:  102732979  (注: 偏重于ASP.NET跨平台开发和运维技术) 第一步安装Mono Ubuntu Ubuntu安装Mono教程指引 CentOS 张善友写的CentOS安装Mono教程指引 了解更多 第二步安装与更新 A、安装： cd /tmp wget linuxdot.net/down/jexus-5.8.1.tar.gz tar -zxvf jexus-5.8.1.tar.gz cd jexus-5.8.1 sudo ./install B、更新 cd /tmp sudo /usr/jexus/jws stop wget linuxdot.net/down/jexus-5.8.1.tar.gz tar -zxvf jexus-5.8.1.tar.gz cd jexus-5.8.1 sudo ./upgrade 了解更多 第三步运行网站 配置站点 使用WinSCP 访问服务器(大家不必拘泥，你也可以搭建一个FTP来进行上传) 打开/usr/jexus/siteconf 在里面有个默认的default文件一个站点对应一个配置文件(注意大小写) 配置文件详细说明 控制站点 使用putty连接服务器 cd /usr/jexus ./jws start 刚才你添加的配置文件 了解更多 关于 · 问题反馈 · 蜀ICP备12016193号-2 · Jexus官方技术社区"	"null"	"null"	"Web server for Linux"	"true"
"Web Servers"	"XSP"	"https://github.com/mono/xsp"	"Mono's ASP.NET hosting server. This module includes an Apache Module, a FastCGI module that can be hooked to other web servers as well as a standalone server used for testing (similar to Microsoft's Cassini)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"139"	"47"	"68"	"GitHub - mono/xsp: Mono's ASP.NET hosting server.   This module includes an Apache Module, a FastCGI module that can be hooked to other web servers as well as a standalone server used for testing (similar to Microsoft's Cassini) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 47 Star 139 Fork 68 mono/xsp Code Pull requests 6 Pulse Graphs Mono's ASP.NET hosting server. This module includes an Apache Module, a FastCGI module that can be hooked to other web servers as well as a standalone server used for testing (similar to Microsoft's Cassini) http://www.mono-project.com/ASP.NET 1,283 commits 36 branches 91 releases 35 contributors C# 76.7% ASP 17.5% Shell 2.7% C 1.9% Visual Basic 0.8% XSLT 0.2% Other 0.2% C# ASP Shell C Visual Basic XSLT Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags V0_1 atsushi-200810 atsushi master messaging-2008 mono-1-0-6 mono-1-0-9 mono-1-1-7 mono-1-1-9 mono-1-1-10 mono-1-1-11 mono-1-1-12 mono-1-1-13 mono-1-1-15 mono-1-1-16 mono-1-1-17 mono-1-1-18 mono-1-2-1 mono-1-2-3 mono-1-2-4 mono-1-2-5 mono-1-2-6 mono-1-9-1-1 mono-1-9 mono-2-0 mono-2-2 mono-2-4-0 mono-2-4-1 mono-2-4-2 mono-2-4-3 mono-2-4 mono-2-6-4 mono-2-6 mono-2-8 mono-2-10 xsp-1-0 Nothing to show xsp-1-0-5 mono-2.6.4 mono-2.6 mono-2.4.3 mono-2.4.2 mono-2.4 mono-2.2 mono-2.0 mono-2-6-rc1 mono-2-6-p1 mono-2-6-7 mono-2-6-3 mono-2-6-1 mono-2-4-p1 mono-2-4-3-1 mono-2-4-2-rc2 mono-2-4-2-rc1 mono-2-4-2-p2 mono-2-4-2-p1 mono-2-4-2-3 mono-2-4-2-3-rc3 mono-2-4-2-3-rc2 mono-2-4-2-3-rc1 mono-2-4-2-2 mono-2-4-2-1 mono-2-2-rc1 mono-2-2-p3 mono-2-2-p2 mono-2-2-p1 mono-2-0-rc3 mono-2-0-rc2 mono-2-0-rc1 mono-2-0-p2 mono-2-0-p1 mono-2-0-1 mono-2-0-1-rc1 mono-1.9.1.1 mono-1.9 mono-1.2.6 mono-1.2.5 mono-1.2.4 mono-1.2.3 mono-1.2.1 mono-1.1.18 mono-1.1.17 mono-1.1.16 mono-1.1.15 mono-1.1.13 mono-1.1.10 mono-1.1.9 mono-1.0.9 mono-1.0.6 mono-1-9-p2 mono-1-9-1 mono-1-2-6-p2 mono-1-2-6-p1 mono-1-2-5-p3 mono-1-1-17-1 mono-1-1-16-1 mono-1-1-13-7 mono-1-1-10-1 mono-1-1-9-2 mono-1-1-9-1 mono-1-1-7-11 mono-1-0-9-1 mono-1-0-8 mono-1-0-7 mono-1-0-6-1 XSP_1_0_4 XSP_1_0_2 XSP_1_0_1 XSP_1_0 XSP_0_16 XSP_0_15 XSP_0_14 XSP_0_13 XSP_0_12 XSP_0_11 XSP_0_10 XSP_0_9 XSP_0_8 XSP_0_6 XSP_0_4 R0_1 3.0.11 3.0 2.10.2 2.10 2.8.2 2.8.1 2.8 Nothing to show New pull request Latest commit c98e068 Feb 26, 2016 akoeplinger Bump version to 4.4 Permalink Failed to load latest commit information. build Bump configure check for 4.0 path to read 4.5 location (the check is … Dec 4, 2014 docs Fix building the documentation. Nov 5, 2014 lib ""Libancillary"" test Jul 12, 2013 man Delete .cvsignore files Jul 18, 2013 packaging Fix Bug 484465 – xsp init script's status option always says ""running"" Mar 11, 2009 scripts Point all scripts like xsp/xsp2 to 4.5 Mono directories Feb 26, 2016 shim [Shim] Fix bug in debug output Sep 27, 2013 src Allow 0.0.0.0/IPAddress.Any in FastCgi module Feb 22, 2016 test-fpm [Fpm] Reduce permission Sep 27, 2013 test Remove more gmcs references Dec 9, 2014 test2 update Nov 27, 2003 tools Remove 2.0 profile Dec 9, 2014 unittests Remove more gmcs references Dec 9, 2014 .gitignore [Fpm] Working on the shim interaction Aug 28, 2013 AUTHORS 2004-04-06 Gonzalo Paniagua Javier <gonzalo@ximian.com> Apr 6, 2004 COPYING Test Jan 14, 2012 ChangeLog 2010-03-31 Marek Habersack <mhabersack@novell.com> Mar 31, 2010 INSTALL Update INSTALL Jul 31, 2013 Makefile.am [Shim] Initial commit Aug 22, 2013 NEWS Testing 2 Jul 22, 2010 README [xsp] another test, please ignore Nov 6, 2010 README.mono-fpm.md [Fpm] Add permission information to doc Sep 27, 2013 autogen.sh [Fpm] Prepare auto* for native code Jul 11, 2013 configure.ac Bump version to 4.4 Feb 26, 2016 xsp.sln [FastCgi + Fpm] Fixing mono-fpm Aug 21, 2013 xsp.spec.in Remove NET 2.0 support from the spec file. Nov 5, 2014 README * Welcome to XSP! -----------------  	The XSP server is a small web server that hosts the Mono     System.Web classes for running what is commonly known as ASP.NET.      See INSTALL for details on how to install XSP.  * Directory Layout ------------------  	doc/ 		Some documentation about the XSP server.   	test/ 		Little sample ASP.NET pages  	server/ 		A stand alone web server that works with mono and MS runtime. 		We are using it to debug/complete our classes. 		MonoApplicationHost and MonoWorkerRequest can be used to embed 		an ASP.NET serve in your application. 		 	tools/ 		asp_state, dbsessmgr and nunit-asp  Maintainer: gonzalo@ximian.com   Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mono/xsp"	"Mono's ASP.NET hosting server. This module includes an Apache Module, a FastCGI module that can be hooked to other web servers as well as a standalone server used for testing (similar to Microsoft's Cassini)"	"true"
"WebSocket"	"Fleck"	"https://github.com/statianzo/Fleck"	"Fleck is a WebSocket server implementation in C#. Branched from the Nugget project"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"493"	"67"	"204"	"GitHub - statianzo/Fleck: C# Websocket Implementation Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 67 Star 493 Fork 204 statianzo/Fleck Code Issues 21 Pull requests 6 Pulse Graphs C# Websocket Implementation 203 commits 3 branches 14 releases 23 contributors C# 91.1% HTML 5.8% Ruby 3.0% Other 0.1% C# HTML Ruby Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master net35 Nothing to show 0.11.1 0.11.0 0.9.7 0.9.6 0.9.5 0.9.4 0.9.3 0.9.2 0.9.1 0.9.0 0.8.3 0.8.2 0.8.1 0.8.0 Nothing to show New pull request Latest commit 9f56c80 Jul 16, 2016 1424667164 committed with statianzo 0.0.0.0 should match ipv4 any (#179) Permalink Failed to load latest commit information. src 0.0.0.0 should match ipv4 any (#179) Jul 15, 2016 support Vendor nuget for CI Apr 3, 2012 .gitignore Remove .ReSharper file Oct 24, 2011 Rakefile Updated Copyright Dates May 20, 2014 VERSION Update VERSION Dec 23, 2015 readme.markdown NoDelay docs, copyright, remove project status Mar 6, 2016 readme.markdown Fleck Fleck is a WebSocket server implementation in C#. Branched from the Nugget project, Fleck requires no inheritance, container, or additional references. Example The following is an example that will echo to a client. var server = new WebSocketServer(""ws://0.0.0.0:8181""); server.Start(socket => {   socket.OnOpen = () => Console.WriteLine(""Open!"");   socket.OnClose = () => Console.WriteLine(""Close!"");   socket.OnMessage = message => socket.Send(message); });  Supported WebSocket Versions Fleck supports several WebSocket versions of modern web browsers Hixie-Draft-76/Hybi-00 (Safari 5, Chrome < 14, Firefox 4 (when enabled)) Hybi-07 (Firefox 6) Hybi-10 (Chrome 14-16, Firefox 7) Hybi-13 (Chrome 17+) Secure WebSockets (wss://) Enabling secure connections requires two things: using the scheme wss instead of ws, and pointing Fleck to an x509 certificate containing a public and private key var server = new WebSocketServer(""wss://0.0.0.0:8431""); server.Certificate = new X509Certificate2(""MyCert.pfx""); server.Start(socket => {   //...use as normal }); SubProtocol Negotiation To enable negotiation of subprotocols, specify the supported protocols on the WebSocketServer.SupportedSubProtocols property. The negotiated subprotocol will be available on the socket's ConnectionInfo.NegotiatedSubProtocol. If no supported subprotocols are found on the client request (the Sec-WebSocket-Protocol header), the connection will be closed. var server = new WebSocketServer(""ws://0.0.0.0:8181""); server.SupportedSubProtocols = new []{ ""superchat"", ""chat"" }; server.Start(socket => {   //socket.ConnectionInfo.NegotiatedSubProtocol is populated }); Custom Logging Fleck can log into Log4Net or any other third party logging system. Just override the FleckLog.LogAction property with the desired behavior. ILog logger = LogManager.GetLogger(typeof(FleckLog));  FleckLog.LogAction = (level, message, ex) => {   switch(level) {     case LogLevel.Debug:       logger.Debug(message, ex);       break;     case LogLevel.Error:       logger.Error(message, ex);       break;     case LogLevel.Warn:       logger.Warn(message, ex);       break;     default:       logger.Info(message, ex);       break;   } };  Disable Nagle's Algorithm Set NoDelay to true on the WebSocketConnection.ListenerSocket var server = new WebSocketServer(""ws://0.0.0.0:8181""); server.ListenerSocket.NoDelay = true; server.Start(socket => {   //Child connections will not use Nagle's Algorithm }); License The MIT License Copyright (c) 2010-2016 Jason Staten Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/statianzo/Fleck"	"Fleck is a WebSocket server implementation in C#. Branched from the Nugget project"	"true"
"WebSocket"	"SignalR"	"https://github.com/SignalR/SignalR"	"Library for ASP.NET developers that makes it incredibly simple to add real-time web functionality to your applications"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5836"	"661"	"1785"	"GitHub - SignalR/SignalR: Incredibly simple real-time web for .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 661 Star 5,836 Fork 1,785 SignalR/SignalR Code Issues 416 Pull requests 19 Wiki Pulse Graphs Incredibly simple real-time web for .NET http://signalr.net 4,530 commits 94 branches 36 releases 70 contributors C# 82.5% JavaScript 16.3% PowerShell 0.3% HTML 0.3% PLpgSQL 0.3% CSS 0.2% Other 0.1% C# JavaScript PowerShell HTML PLpgSQL CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags 1637 1638 1920 2380-hub-progress 2456 2626 2629 2694 DR anurse/fix-json-net async-await asyncawait benchmark break brecon/VBClient bug-478 bug-2653 bug-2658 bug-2710 bug-2753 bug-2757 bug-2796 bug-2903 bug-2933 bug-2988 bug-3147 bug-3227-2_NegotiateHandler bug-3227-2 bug-3362-rebase bug-RandomNRE bug-RedisSend bug-async-hub bug-ifdef bug-json bug-perfmessagelist bug-proxy-45 bug-redis-nuspec bug-redis bug-retry-configuration bug-sample bug-sanitizing-perfnames bug-sb-config bug-scaleout-error-callback bug-scaleoutDuplicateMsg bug-stackexchange-test bug-stackexchange bug-tracing bus_tracing cpp dev error-trace feature-2380-hub-progress feature-2654 feature-2695 feature-2971 feature-3107 generic_acks gh-pages hacked-typed-client hub-name-conflict hub_method iOS-sample-changes js-hub-logging keepaliveapi knockout master method-missing-new mono netmf passive-clients pawelka/redis perf-run/messagelist perf-run/metadata perf-run/repair perf-run/sqlLongPolling perf-run/2939 perf-serverpush perf-work perfdemo performanceRepair ping-interval redis-log redis-perf-release redis-tracing release release1.x repro-2747 sb-config-timeout-new sb-onmessage scaleout-connectionstring volatile withCredentials xam xamarin-package Nothing to show v0.5.63pre v0.3.5 2.2.0 2.1.2 2.1.1 2.1.0 2.0.3 2.0.2 2.0.1 2.0.0 2.0.0rc 2.0.0beta2 2.0.0beta1 1.2.2 1.2.1 1.2.0 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.1.0beta 1.0.1 1.0.0 1.0rc2 1.0rc1 1.0alpha2 1.0alpha1 0.5.84rc 0.5.3 0.5.2 0.5.1 0.5.0 0.5 0.4 0.3.5 Nothing to show New pull request Latest commit af05edc Jul 13, 2016 anurse committed on GitHub Merge pull request #3737 from SignalR/anurse/fix-json-net … move UWP Client JSON.Net dep back to 6.0.4 Permalink Failed to load latest commit information. .nuget ProjectJsonifyEverything - enabling building UWP client from command … Dec 9, 2015 build Updating license. Adding/Updating license headers. Jul 9, 2016 lib adding support for Xamarin.iOS, Xamarin.Android Apr 9, 2013 nuspecs IndependenceDay Dec 16, 2015 readmes Updated the readmes for metapackages. Aug 20, 2013 samples Updating license. Adding/Updating license headers. Jul 10, 2016 src move UWP Client JSON.Net dep back to 6.0.4 Jul 13, 2016 tests Updating license. Adding/Updating license headers. Jul 10, 2016 tools Run Forrest, Run! - enabling running store tests in build.cmd May 23, 2014 xamarin Updating license. Adding/Updating license headers. Jul 10, 2016 .deployment Deploy the test project. Dec 13, 2012 .gitattributes Fixing git attributes for RESX Mar 25, 2013 .gitignore Adding Websockets transport Dec 9, 2015 CONTRIBUTING.md Updating license. Adding/Updating license headers. Jul 10, 2016 LICENSE.txt Updating license. Adding/Updating license headers. Jul 10, 2016 Microsoft.AspNet.SignalR.Mono.Mobile.sln Made changes as per code review feedback Nov 17, 2013 Microsoft.AspNet.SignalR.Mono.sln Added the .NET40 client sample to the Mono sln May 22, 2013 Microsoft.AspNet.SignalR.sln Adding UWP client to the NuGet package Dec 9, 2015 README.md Updated README.md Apr 28, 2014 build-ci-perf.cmd Fixing perf runs May 17, 2013 build-ci.cmd BetterPath - updating path to MSBuild to use v12 required to build Wi… Aug 20, 2014 build.cmd ProjectJsonifyEverything - enabling building UWP client from command … Dec 10, 2015 build.sh Fix build.sh May 22, 2013 makefile Added a .NET 40 client samples project for mono and testing. May 22, 2013 README.md ASP.NET SignalR ASP.NET SignalR is a library for ASP.NET developers that makes it incredibly simple to add real-time web functionality to your applications. What is ""real-time web"" functionality? It's the ability to have your server-side code push content to the connected clients as it happens, in real-time. What can it be used for? Pushing data from the server to the client (not just browser clients) has always been a tough problem. SignalR makes it dead easy and handles all the heavy lifting for you. Documentation See the documentation Get it on NuGet! Install-Package Microsoft.AspNet.SignalR  Get a sample on NuGet, straight into your app! Install-Package Microsoft.AspNet.SignalR.Sample  LICENSE Apache 2.0 License Contributing See the contribution guidelines Building the source git clone git@github.com:SignalR/SignalR.git (or https if you use https)  Windows After cloning the repository, run build.cmd. NOTE: Opening the solution requires VS 2012. Mono After cloning the repository, run make. Open Microsoft.AspNet.SignalR.Mono.sln to do development. Continuous Integration We have a CI Server (http://ci.signalr.net/) Questions? The SignalR team hangs out in the signalr room at on JabbR. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/SignalR/SignalR"	"Library for ASP.NET developers that makes it incredibly simple to add real-time web functionality to your applications"	"true"
"WebSocket"	"SuperSocket"	"https://github.com/kerryjiang/SuperSocket"	"SuperSocket is a light weight extensible socket application framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"582"	"130"	"341"	"GitHub - kerryjiang/SuperSocket: SuperSocket is a light weight, cross platform and extensible socket server application framework. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 130 Star 582 Fork 341 kerryjiang/SuperSocket Code Issues 12 Pull requests 1 Pulse Graphs SuperSocket is a light weight, cross platform and extensible socket server application framework. 2,496 commits 7 branches 1 release Fetching contributors C# 99.6% Other 0.4% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: v1.6 Switch branches/tags Branches Tags fix-SessionNotClose master v1.0 v1.4 v1.5 v1.6 websocket Nothing to show v1.6.4 Nothing to show New pull request Latest commit 2599eda May 26, 2016 kerryjiang upgraded the version number to 1.6.7 Permalink Failed to load latest commit information. Agent improved the process isolation mode to support read to the other sect… Aug 12, 2015 Common removed unnecessary log4net reference Dec 15, 2015 Dlr added command filter support for dynamic language commands Jan 6, 2014 Facility fixed a protocol resolving bug in the BeginEndMarkReceiveFilter: http… Apr 19, 2014 Management Update RESTART.cs Oct 23, 2015 Protocols added signature key for SuperSocket.WebSocket May 23, 2016 QuickStart add missing reference of System.configuration Jul 14, 2015 Reference updated websocket4net Apr 19, 2015 SocketBase exposed the api about getting max request length Dec 17, 2015 SocketEngine Fixed the bug that some sessions cannot be closed properly (#55) May 26, 2016 SocketService formatted code Apr 26, 2016 Solution Items upgraded the version number to 1.6.7 May 26, 2016 Test moved dynamic bootstrap's test case to base test class Dec 15, 2015 .gitattributes New restart command for managment. Mar 30, 2014 .gitignore added log4net config files for quickstart projects Aug 14, 2012 .travis.yml fixed travis configuration issue Dec 15, 2015 Build.bat fixed the missing solution files May 19, 2015 BuildQuickStart.bat commit master branch Aug 7, 2012 BuildServerManager.bat improved the build scripts Oct 24, 2013 LICENSE.TXT commit master branch Aug 7, 2012 Push.bat adapted push script Sep 25, 2013 README.md removed nuget download times badges Mar 20, 2016 SuperSocket.2008.sln improved solution structure Aug 1, 2013 SuperSocket.2010.NET35.sln improved solution structure Aug 1, 2013 SuperSocket.2010.sln improved solution structure Aug 1, 2013 SuperSocket.2013.NET40.sln support hot update for some configuration options Apr 19, 2015 SuperSocket.2013.sln support hot update for some configuration options Apr 19, 2015 SuperSocket.Engine.nuspec added assembly xml files into nuget package schema Dec 15, 2015 SuperSocket.WebSocket.nuspec cleaned the NuGet package for websocket May 23, 2016 SuperSocket.build updated package specs and readme Nov 10, 2015 SuperSocket.nuspec added assembly xml files into nuget package schema Dec 15, 2015 supersocket.snk commit master branch Aug 7, 2012 README.md SuperSocket SuperSocket is a light weight extensible socket application framework. You can use it to build a server side socket application easily without thinking about how to use socket, how to maintain the socket connections and how socket works. It is a pure C# project which is designed to be extended, so it is easy to be integrated to your existing system. As long as your systems are developed in .NET language, you must be able to use SuperSocket to build your socket application as a part of your current system perfectly. Project homepage: http://www.supersocket.net/ Documentation: http://docs.supersocket.net/ Releases download: http://supersocket.codeplex.com/releases/ License: http://www.apache.org/licenses/LICENSE-2.0 NuGet Packages Name Package SuperSocket SuperSocket.Engine SuperSocket.WebSocket Copyright 2010-2015 Kerry Jiang (kerry-jiang@hotmail.com) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kerryjiang/SuperSocket"	"SuperSocket is a light weight extensible socket application framework"	"true"
"WebSocket"	"Websocket-Sharp"	"https://github.com/sta/websocket-sharp"	"A C# implementation of the WebSocket protocol client and server"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"858"	"124"	"360"	"GitHub - sta/websocket-sharp: A C# implementation of the WebSocket protocol client and server Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 124 Star 858 Fork 360 sta/websocket-sharp Code Issues 178 Pull requests 25 Wiki Pulse Graphs A C# implementation of the WebSocket protocol client and server http://sta.github.io/websocket-sharp 1,485 commits 4 branches 0 releases 6 contributors C# 99.7% Other 0.3% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags draft75 gh-pages hybi-00 master Nothing to show Nothing to show New pull request Latest commit ff60d11 Jul 15, 2016 sta [Modify] Edit it Permalink Failed to load latest commit information. Example [Modify] Polish it Nov 15, 2015 Example1 [Modify] Polish it Nov 16, 2015 Example2 [Modify] Add some examples to create a new server instance May 29, 2016 Example3 [Modify] Add some examples to create a new server instance May 28, 2016 websocket-sharp [Modify] Polish it Jul 3, 2016 .gitignore Fix for issue #21 Oct 23, 2013 LICENSE.txt [Modify] Into the year 2016 Jan 1, 2016 README.md [Modify] Edit it Jul 15, 2016 websocket-sharp.sln Fix due to the added HttpServer Sep 10, 2012 websocket-sharp_icon.png Modified icon Jun 19, 2014 websocket-sharp_logo.png Modified logo Jul 4, 2014 README.md Welcome to websocket-sharp! websocket-sharp supports: RFC 6455 WebSocket Client and Server Per-message Compression extension Secure Connection HTTP Authentication Query String, Origin header and Cookies Connecting through the HTTP Proxy server .NET Framework 3.5 or later (includes compatible environment such as Mono) Branches master for production releases. hybi-00 for older draft-ietf-hybi-thewebsocketprotocol-00. No longer maintained. draft75 for even more old draft-hixie-thewebsocketprotocol-75. No longer maintained. Build websocket-sharp is built as a single assembly, websocket-sharp.dll. websocket-sharp is developed with MonoDevelop. So the simple way to build is to open websocket-sharp.sln and run build for websocket-sharp project with any of the build configurations (e.g. Debug) in MonoDevelop. Install Self Build You should add your websocket-sharp.dll (e.g. /path/to/websocket-sharp/bin/Debug/websocket-sharp.dll) to the library references of your project. If you would like to use that dll in your Unity project, you should add it to any folder of your project (e.g. Assets/Plugins) in Unity Editor. NuGet Gallery websocket-sharp is available on the NuGet Gallery, as still a prerelease version. NuGet Gallery: websocket-sharp You can add websocket-sharp to your project with the NuGet Package Manager, by using the following command in the Package Manager Console. PM> Install-Package WebSocketSharp -Pre  Unity Asset Store websocket-sharp is available on the Unity Asset Store. WebSocket-Sharp for Unity It works with Unity Free, but there are some limitations: Security Sandbox of the Webplayer (The server isn't available in Web Player) WebGL Networking (Not available in WebGL) Incompatible platform (Not available for such UWP) Limited support for the System.IO.Compression (The compression extension isn't available on Windows) .NET Socket Support for iOS/Android (It requires iOS/Android Pro if your Unity is earlier than Unity 5) .NET API 2.0 compatibility level for iOS/Android .NET API 2.0 compatibility level for iOS/Android may require to fix lack of some features for later than .NET 2.0, such as the System.Func<...> delegates (so i have added them in that asset package). And it's priced at US$15. I think your $15 makes this project more better and accelerated, Thank you! Usage WebSocket Client using System; using WebSocketSharp;  namespace Example {   public class Program   {     public static void Main (string[] args)     {       using (var ws = new WebSocket (""ws://dragonsnest.far/Laputa"")) {         ws.OnMessage += (sender, e) =>             Console.WriteLine (""Laputa says: "" + e.Data);          ws.Connect ();         ws.Send (""BALUS"");         Console.ReadKey (true);       }     }   } } Step 1 Required namespace. using WebSocketSharp; The WebSocket class exists in the WebSocketSharp namespace. Step 2 Creating a new instance of the WebSocket class with the WebSocket URL to connect. using (var ws = new WebSocket (""ws://example.com"")) {   ... } The WebSocket class inherits the System.IDisposable interface, so you can use the using statement. And the WebSocket connection will be closed with close status 1001 (going away) when the control leaves the using block. Step 3 Setting the WebSocket events. WebSocket.OnOpen Event A WebSocket.OnOpen event occurs when the WebSocket connection has been established. ws.OnOpen += (sender, e) => {     ...   }; e has passed as the System.EventArgs.Empty, so you don't need to use it. WebSocket.OnMessage Event A WebSocket.OnMessage event occurs when the WebSocket receives a message. ws.OnMessage += (sender, e) => {     ...   }; e has passed as a WebSocketSharp.MessageEventArgs. If you would like to get the message data, you should access e.Data or e.RawData property. And you can determine which property you should access by checking e.IsText or e.IsBinary property. If e.IsText is true, you should access e.Data that returns a string (represents a text message). Or if e.IsBinary is true, you should access e.RawData that returns a byte[] (represents a binary message). if (e.IsText) {   // Do something with e.Data.   ...    return; }  if (e.IsBinary) {   // Do something with e.RawData.   ...    return; } And if you would like to notify that a ping has been received, via this event, you should set the WebSocket.EmitOnPing property to true, such as the following. ws.EmitOnPing = true; ws.OnMessage += (sender, e) => {     if (e.IsPing) {       // Do something to notify that a ping has been received.       ...        return;     }   }; WebSocket.OnError Event A WebSocket.OnError event occurs when the WebSocket gets an error. ws.OnError += (sender, e) => {     ...   }; e has passed as a WebSocketSharp.ErrorEventArgs. e.Message property returns a string that represents the error message. If the error is due to an exception, e.Exception property returns a System.Exception instance that caused the error. WebSocket.OnClose Event A WebSocket.OnClose event occurs when the WebSocket connection has been closed. ws.OnClose += (sender, e) => {     ...   }; e has passed as a WebSocketSharp.CloseEventArgs. e.Code property returns a ushort that represents the status code for the close, and e.Reason property returns a string that represents the reason for the close. Step 4 Connecting to the WebSocket server. ws.Connect (); If you would like to connect to the server asynchronously, you should use the WebSocket.ConnectAsync () method. Step 5 Sending data to the WebSocket server. ws.Send (data); The WebSocket.Send method is overloaded. You can use the WebSocket.Send (string), WebSocket.Send (byte[]), or WebSocket.Send (System.IO.FileInfo) method to send the data. If you would like to send the data asynchronously, you should use the WebSocket.SendAsync method. ws.SendAsync (data, completed); And also if you would like to do something when the send is complete, you should set completed to any Action<bool> delegate. Step 6 Closing the WebSocket connection. ws.Close (code, reason); If you would like to close the connection explicitly, you should use the WebSocket.Close method. The WebSocket.Close method is overloaded. You can use the WebSocket.Close (), WebSocket.Close (ushort), WebSocket.Close (WebSocketSharp.CloseStatusCode), WebSocket.Close (ushort, string), or WebSocket.Close (WebSocketSharp.CloseStatusCode, string) method to close the connection. If you would like to close the connection asynchronously, you should use the WebSocket.CloseAsync method. WebSocket Server using System; using WebSocketSharp; using WebSocketSharp.Server;  namespace Example {   public class Laputa : WebSocketBehavior   {     protected override void OnMessage (MessageEventArgs e)     {       var msg = e.Data == ""BALUS""                 ? ""I've been balused already...""                 : ""I'm not available now."";        Send (msg);     }   }    public class Program   {     public static void Main (string[] args)     {       var wssv = new WebSocketServer (""ws://dragonsnest.far"");       wssv.AddWebSocketService<Laputa> (""/Laputa"");       wssv.Start ();       Console.ReadKey (true);       wssv.Stop ();     }   } } Step 1 Required namespace. using WebSocketSharp.Server; The WebSocketBehavior and WebSocketServer classes exist in the WebSocketSharp.Server namespace. Step 2 Creating the class that inherits the WebSocketBehavior class. For example, if you would like to provide an echo service, using System; using WebSocketSharp; using WebSocketSharp.Server;  public class Echo : WebSocketBehavior {   protected override void OnMessage (MessageEventArgs e)   {     Send (e.Data);   } } And if you would like to provide a chat service, using System; using WebSocketSharp; using WebSocketSharp.Server;  public class Chat : WebSocketBehavior {   private string _suffix;    public Chat ()     : this (null)   {   }    public Chat (string suffix)   {     _suffix = suffix ?? String.Empty;   }    protected override void OnMessage (MessageEventArgs e)   {     Sessions.Broadcast (e.Data + _suffix);   } } You can define the behavior of any WebSocket service by creating the class that inherits the WebSocketBehavior class. If you override the WebSocketBehavior.OnMessage (MessageEventArgs) method, it will be called when the WebSocket used in a session in the service receives a message. And if you override the WebSocketBehavior.OnOpen (), WebSocketBehavior.OnError (ErrorEventArgs), and WebSocketBehavior.OnClose (CloseEventArgs) methods, each of them will be called when each of the WebSocket events (OnOpen, OnError, and OnClose) occurs. The WebSocketBehavior.Send method can send data to the client on a session in the service. If you would like to get the sessions in the service, you should access the WebSocketBehavior.Sessions property (returns a WebSocketSharp.Server.WebSocketSessionManager). The WebSocketBehavior.Sessions.Broadcast method can send data to every client in the service. Step 3 Creating a new instance of the WebSocketServer class. var wssv = new WebSocketServer (4649); wssv.AddWebSocketService<Echo> (""/Echo""); wssv.AddWebSocketService<Chat> (""/Chat""); wssv.AddWebSocketService<Chat> (""/ChatWithNyan"", () => new Chat ("" Nyan!"")); You can add any WebSocket service to your WebSocketServer with the specified behavior and path to the service, by using the WebSocketServer.AddWebSocketService<TBehaviorWithNew> (string) or WebSocketServer.AddWebSocketService<TBehavior> (string, Func<TBehavior>) method. The type of TBehaviorWithNew must inherit the WebSocketBehavior class, and must have a public parameterless constructor. And also the type of TBehavior must inherit the WebSocketBehavior class. So you can use the classes created in Step 2 to add the service. If you create a instance of the WebSocketServer class without a port number, the WebSocketServer class set the port number to 80 automatically. So it's necessary to run with root permission. $ sudo mono example2.exe  Step 4 Starting the WebSocket server. wssv.Start (); Step 5 Stopping the WebSocket server. wssv.Stop (code, reason); The WebSocketServer.Stop method is overloaded. You can use the WebSocketServer.Stop (), WebSocketServer.Stop (ushort, string), or WebSocketServer.Stop (WebSocketSharp.CloseStatusCode, string) method to stop the server. HTTP Server with the WebSocket I have modified the System.Net.HttpListener, System.Net.HttpListenerContext, and some other classes from Mono to create an HTTP server that allows to accept the WebSocket handshake requests. So websocket-sharp provides the WebSocketSharp.Server.HttpServer class. You can add any WebSocket service to your HttpServer with the specified behavior and path to the service, by using the HttpServer.AddWebSocketService<TBehaviorWithNew> (string) or HttpServer.AddWebSocketService<TBehavior> (string, Func<TBehavior>) method. var httpsv = new HttpServer (4649); httpsv.AddWebSocketService<Echo> (""/Echo""); httpsv.AddWebSocketService<Chat> (""/Chat""); httpsv.AddWebSocketService<Chat> (""/ChatWithNyan"", () => new Chat ("" Nyan!"")); For more information, would you see Example3? WebSocket Extensions Per-message Compression websocket-sharp supports the Per-message Compression extension (but doesn't support this extension with the context take over). As a WebSocket client, if you would like to enable this extension, you should set such as the following. ws.Compression = CompressionMethod.Deflate; And then your client will send the following header in the handshake request to the server. Sec-WebSocket-Extensions: permessage-deflate; server_no_context_takeover; client_no_context_takeover  If the server accepts this extension, it will return the same header which has the corresponding value. And when your client receives it, this extension will be available. Ignoring the extensions As a WebSocket server, if you would like to ignore the extensions requested from a client, you should set the WebSocketBehavior.IgnoreExtensions property to true in your WebSocketBehavior constructor or initializing it, such as the following. wssv.AddWebSocketService<Chat> (   ""/Chat"",   () =>     new Chat () {       // To ignore the extensions requested from a client.       IgnoreExtensions = true     } ); If it's set to true, the service will not return the Sec-WebSocket-Extensions header in its handshake response. I think this is useful when you get something error in connecting the server and exclude the extensions as a cause of the error. Secure Connection websocket-sharp supports the Secure Connection with SSL/TLS. As a WebSocket Client, you should create a new instance of the WebSocket class with the wss scheme WebSocket URL. using (var ws = new WebSocket (""wss://example.com"")) {   ... } And if you would like to use the custom validation for the server certificate, you should set the WebSocket.SslConfiguration.ServerCertificateValidationCallback property. ws.SslConfiguration.ServerCertificateValidationCallback =   (sender, certificate, chain, sslPolicyErrors) => {     // Do something to validate the server certificate.     ...      return true; // If the server certificate is valid.   }; If you set this property to nothing, the validation does nothing with the server certificate, and returns true. As a WebSocket Server, you should create a new instance of the WebSocketServer or HttpServer class with some settings for secure connection, such as the following. var wssv = new WebSocketServer (5963, true); wssv.SslConfiguration.ServerCertificate =   new X509Certificate2 (""/path/to/cert.pfx"", ""password for cert.pfx""); HTTP Authentication websocket-sharp supports the HTTP Authentication (Basic/Digest). As a WebSocket Client, you should set a pair of user name and password for the HTTP authentication, by using the WebSocket.SetCredentials (string, string, bool) method before connecting. ws.SetCredentials (""nobita"", ""password"", preAuth); If preAuth is true, the WebSocket sends the Basic authentication credentials with the first handshake request to the server. Or if preAuth is false, the WebSocket sends either the Basic or Digest (determined by the unauthorized response to the first handshake request) authentication credentials with the second handshake request to the server. As a WebSocket Server, you should set an HTTP authentication scheme, a realm, and any function to find the user credentials before starting, such as the following. wssv.AuthenticationSchemes = AuthenticationSchemes.Basic; wssv.Realm = ""WebSocket Test""; wssv.UserCredentialsFinder = id => {     var name = id.Name;      // Return user name, password, and roles.     return name == ""nobita""            ? new NetworkCredential (name, ""password"", ""gunfighter"")            : null; // If the user credentials aren't found.   }; If you would like to provide the Digest authentication, you should set such as the following. wssv.AuthenticationSchemes = AuthenticationSchemes.Digest; Query String, Origin header and Cookies As a WebSocket Client, if you would like to send the Query String with the handshake request to the server, you should create a new instance of the WebSocket class with the WebSocket URL that includes the Query string parameters. using (var ws = new WebSocket (""ws://example.com/?name=nobita"")) {   ... } And if you would like to send the Origin header with the handshake request to the server, you should set the WebSocket.Origin property to an allowable value as the Origin header before connecting, such as the following. ws.Origin = ""http://example.com""; And also if you would like to send the Cookies with the handshake request to the server, you should set any cookie by using the WebSocket.SetCookie (WebSocketSharp.Net.Cookie) method before connecting, such as the following. ws.SetCookie (new Cookie (""name"", ""nobita"")); As a WebSocket Server, if you would like to get the Query String included in a handshake request, you should access the WebSocketBehavior.Context.QueryString property, such as the following. public class Chat : WebSocketBehavior {   private string _name;   ...    protected override void OnOpen ()   {     _name = Context.QueryString[""name""];   }    ... } And if you would like to validate the Origin header, Cookies, or both included in a handshake request, you should set each validation with your WebSocketBehavior, for example, by using the AddWebSocketService<TBehavior> (string, Func<TBehavior>) method with initializing, such as the following. wssv.AddWebSocketService<Chat> (   ""/Chat"",   () =>     new Chat () {       OriginValidator = val => {           // Check the value of the Origin header, and return true if valid.           Uri origin;           return !val.IsNullOrEmpty ()                  && Uri.TryCreate (val, UriKind.Absolute, out origin)                  && origin.Host == ""example.com"";         },       CookiesValidator = (req, res) => {           // Check the cookies in 'req', and set the cookies to send to           // the client with 'res' if necessary.           foreach (Cookie cookie in req) {             cookie.Expired = true;             res.Add (cookie);           }            return true; // If valid.         }     } ); And also if you would like to get each value of the Origin header and cookies, you should access each of the WebSocketBehavior.Context.Origin and WebSocketBehavior.Context.CookieCollection properties. Connecting through the HTTP Proxy server websocket-sharp supports to connect through the HTTP Proxy server. If you would like to connect to a WebSocket server through the HTTP Proxy server, you should set the proxy server URL, and if necessary, a pair of user name and password for the proxy server authentication (Basic/Digest), by using the WebSocket.SetProxy (string, string, string) method before connecting. var ws = new WebSocket (""ws://example.com""); ws.SetProxy (""http://localhost:3128"", ""nobita"", ""password""); I have tested this with the Squid. And it's necessary to disable the following configuration option in squid.conf (e.g. /etc/squid/squid.conf). # Deny CONNECT to other than SSL ports #http_access deny CONNECT !SSL_ports  Logging The WebSocket class has the own logging function. You can use it with the WebSocket.Log property (returns a WebSocketSharp.Logger). So if you would like to change the current logging level (WebSocketSharp.LogLevel.Error as the default), you should set the WebSocket.Log.Level property to any of the LogLevel enum values. ws.Log.Level = LogLevel.Debug; The above means a log with lower than LogLevel.Debug cannot be outputted. And if you would like to output a log, you should use any of the output methods. The following outputs a log with LogLevel.Debug. ws.Log.Debug (""This is a debug message.""); The WebSocketServer and HttpServer classes have the same logging function. Examples Examples using websocket-sharp. Example Example connects to the Echo server with the WebSocket. Example2 Example2 starts a WebSocket server. Example3 Example3 starts an HTTP server that allows to accept the WebSocket handshake requests. Would you access to http://localhost:4649 to do WebSocket Echo Test with your web browser while Example3 is running? Supported WebSocket Specifications websocket-sharp supports RFC 6455, and it's based on the following WebSocket references: The WebSocket Protocol The WebSocket API Compression Extensions for WebSocket Thanks for translating to japanese. The WebSocket Protocol 日本語訳 The WebSocket API 日本語訳 License websocket-sharp is provided under The MIT License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sta/websocket-sharp"	"A C# implementation of the WebSocket protocol client and server"	"true"
"WebSocket"	"WebSocket4NET"	"https://websocket4net.codeplex.com"	"WebSocket client for.NET 2.0+, Xamarin, Mono, Silverlight, Windows Phone, & WinRT"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"212"	"49"	"127"	"GitHub - kerryjiang/WebSocket4Net: .NET WebSocket Client Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 49 Star 212 Fork 127 kerryjiang/WebSocket4Net Code Issues 17 Pull requests 3 Pulse Graphs .NET WebSocket Client 290 commits 1 branch 0 releases Fetching contributors C# 96.6% HTML 1.8% JavaScript 1.5% Batchfile 0.1% C# HTML JavaScript Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit f49c58b Jun 9, 2016 kerryjiang formatted the new merged code Permalink Failed to load latest commit information. JsBridge changed the policyProtocol parameter of the JsBridge to the integer type Apr 3, 2013 Reference/SuperSocket.ClientEngine updated SuperSocket.ClientEngine Sep 20, 2015 Test improved test cases Jan 10, 2014 Tools added merge dll function Jan 7, 2012 WebSocket4Net.MonoDroid fixed monodroid output assembly issue Dec 4, 2015 WebSocket4Net.MonoTouch upgraded SuperSocket.ClientEngine Dec 4, 2015 WebSocket4Net.Silverlight added new option receiveBufferSize Mar 24, 2016 WebSocket4Net.UWP upgraded SuperSocket.ClientEngine Dec 4, 2015 WebSocket4Net.WP71 added close reason into the close event handling Apr 14, 2015 WebSocket4Net.WP80 upgraded SuperSocket.ClientEngine Dec 4, 2015 WebSocket4Net.iOS upgraded SuperSocket.ClientEngine Dec 4, 2015 WebSocket4Net formatted the new merged code Jun 9, 2016 nuget updated the version number to 0.14.1 Oct 9, 2015 packages added WP8 test project Feb 2, 2013 xamarin-component added Universal Windows Platform support Aug 14, 2015 .gitattributes upgraded SuperSocket.ClientEngine Dec 4, 2015 .gitignore added WP8 project file and solution file Jan 30, 2013 .travis.yml added travis configuration Aug 5, 2015 Build.bat improved the references and build Nov 15, 2015 GettingStarted.md added GetStarted document Nov 29, 2014 LICENSE.TXT added readme and license Mar 15, 2012 MakeNugetPackage.bat improved build script Dec 4, 2015 MonoTouch.txt added thanks works for Miljenko Cvjetko Oct 31, 2012 Push.bat fixed a spacing issue in push script Jan 8, 2013 README.md updated readme Mar 24, 2016 WebSocket4Net.Silverlight.sln upgraded SuperSocket.ClientEngine Dec 4, 2015 WebSocket4Net.UWP.sln moved the files of UWP to the folder WebSocket4Net.UWP Sep 16, 2015 WebSocket4Net.WP80.sln fixed some building errors for WP8 projects Apr 12, 2013 WebSocket4Net.Xamarin.sln improved the references and build Nov 15, 2015 WebSocket4Net.build improved build script Dec 4, 2015 WebSocket4Net.nuspec improved the build script Dec 4, 2015 WebSocket4Net.sln upgraded SuperSocket.ClientEngine Dec 4, 2015 websocket4net.snk added .NET 3.5 project Jan 7, 2012 README.md WebSocket4Net a .NET websocket client implementation. It originated from SuperWebSocket WebSocket Client. For better developing of the websocket client, it was separated from SuperWebSocket and was renamed to WebSocket4Net. WebSocket4Net provides websocket client implementation for many different kinds of runtime: .Net 2.0 .Net 3.5 .Net 4.0 .Net 4.5 Mono Silverlight 4/5 WindowsPhone 7.5/8.0 Xamarin.Android Xamarin.iOS (Classic and Unified API) Universal Windows Platform Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kerryjiang/WebSocket4Net"	"WebSocket client for.NET 2.0+, Xamarin, Mono, Silverlight, Windows Phone, & WinRT"	"true"
"WebSocket"	"XSockets"	"https://xsockets.net/"	"Provides a great set of tools for you to build real-time applications on the Microsoft.NET plattform and much more"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Team XSockets Web Toggle navigation Home Resources Documentation GitHub Blog Community Known issues Licensing Contact Targeted Real-Time Event Distribution Modular Replace or add functionality with ease Scalable Easy ScaleOut over P2P or Azure built-in Cloud-Ready Hosting/Scaling/Storage Storage Modular storage that enables you to store data whereever you want Secure Modular authorization & authentication Targeted Event Distribution Push messages to specific clients quick & easy Developer license Get a FREE developer license today! Name * Email Address * Company Name * Runs everywhere The server can be hosted pretty much anywhere, so you can run it on a micro-controller such as RaspberryPi, in the cloud as a service or on a regular server. It is all up to you! Connects Anything Any hardware/software can be connected as long as TCP/IP is available. Once again the modularity provides you with any options since you can connect everything regardless of protocol. Focus on your business Save time and money by rapidly solving complex communication scenarios. XSockets has an easy API that abstracts away all the complex things in full-duplex targeted real-time communication. You can focus on business value instead of low level communication issues. Excellent support The framework is easy to use, but if you need guidance & support our team is here to help you. What people say about XSockets.NET We evaluated many Socket Systems, but we had specific requirements which other systems would not meet. Not only was XSockets a prefect match for us, but the support and dedication of the development group XSockets was above the call of duty. I would recommend anyone to seriously consider XSockets. John Rossitter Director of Software Development at Landpoint ​Using XSockets at the development phase was smooth and quick, with useful C# / JavaScript documentations and above all – the helpful, super-fast responses from the XSocket team. After more than a year with XSockets, I can say that we get amazing performance, great control over the process, zero problems and maximum flexibility. Paz Biber CloudUI Team Leader at CloudShare XSockets.NET is a complete solution for real-time application development. It's stable, fast, and truly real time. Chris Bannon Product Manager for Wijmo at ComponentOne APEX needed a real time integration between ours websites and core application server and we chose XSockets to help us with this. We are a JavaScript and C# house so the integration on both ends was seamless. XSockets readability, flexibility and speed has helped us launch new products that our customers love. Ben Levy President at APEX Communications We have been testing a trial license for a couple of months on our .NET development environment, integrating windows services, desktop applications and a web backoffice application. Everything works like a charm, with very low resources use on our servers and excellent performance. The support and excellent documentation gives us much confidence in what we finally offer to our own clients. Allan Gubbins Solution Manager at Solex Trusted by great companies SAAB Defense & Security CloudShare Dev/Test in the cloud SCA SCA Skog is responsible for managing SCA’s extensive forest holding and for supplying SCA's Swedish forest industry operations with wood sourced from its own forests and procured from private forest owners Landpoint Land surveying, engineering and technical services Loan Depot Financial Services Apex Datacom Telecom Corrisoft Technology & Services Digital Outsource Online Marketing About Us We are based in Sweden but have customers & users all over the world in various industries. Connect With Us Recent Posts T4Scaffolding is alive again November 5, 2015 Controlling ultra low power CC2650 wireless MCU from anywhere in the world September 25, 2015 Getting started with Photon from Particle September 25, 2015 Free Developer License Name * Email Address * Company Name * Tag Cloud azure BLE cc2650 DTE iot nodejs Nuget photon Powershell raspberry pi SpongeBob T4 T4Scaffolding texas instruments Visual Studio XSockets  © 2015 Team XSockets Sweden AB"	"null"	"null"	"Provides a great set of tools for you to build real-time applications on the Microsoft.NET plattform and much more"	"true"
"WebSocket"	"WampSharp"	"https://github.com/Code-Sharp/WampSharp"	"A C# implementation of - a protocol that provides messaging patterns of Remote Procedure Calls and Publish/Subscribe over WebSockets."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"108"	"18"	"42"	"GitHub - Code-Sharp/WampSharp: A C# implementation of WAMP (The Web Application Messaging Protocol) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 108 Fork 42 Code-Sharp/WampSharp Code Issues 28 Pull requests 1 Wiki Pulse Graphs A C# implementation of WAMP (The Web Application Messaging Protocol) 808 commits 10 branches 19 releases 6 contributors C# 99.3% Other 0.7% C# Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: wampv2 Switch branches/tags Branches Tags batched develop dot-net dotnetcore-build event-history formatted-logging func-support update-immutable-collections wampv1 wampv2 Nothing to show v1.2.3.17-beta v1.2.3.16-beta v1.2.3.15-beta v1.2.3.14-beta v1.2.3.13-beta v1.2.3.12-beta v1.2.2.11-beta v1.2.2.10-beta v1.2.2.9-beta v1.2.2.8-beta v1.2.1.7-beta v1.2.1.6-beta v1.2.0.5-beta v1.2.0.4-beta v1.2.0.3-beta v1.2.0.2-beta v1.2.0.1-beta v1.2.0.0-beta v1.1.0.84-beta Nothing to show New pull request Latest commit 52c00a1 Apr 16, 2016 darkl Removing Newtonsoft.Json upper bound. Permalink Failed to load latest commit information. NuGet Removing Newtonsoft.Json upper bound. Apr 16, 2016 src Making contracts serializable Mar 12, 2016 .gitattributes Some pattern registration work May 23, 2015 .gitignore Project rename Jun 7, 2013 .travis.yml Trying new mono again Aug 1, 2015 LICENSE Update LICENSE Sep 19, 2015 README.md Update README.md Oct 9, 2015 releasenotes.md Add release notes Jun 13, 2015 README.md WampSharp A C# implementation of WAMP (The Web Application Messaging Protocol) The implementation supports WAMPv2 and includes both Json and MsgPack support, and both Router (Broker and Dealer roles) and Client (Publisher/Subscriber and Callee/Caller) roles. See here for a list of implemented advanced profile features. The implementation also supports WAMPv1, both client and server roles. Builds Master Provider Windows CI Provided By CodeBetter and JetBrains Windows CI Provided By AppVeyor Mono CI Provided by travis-ci Documentation Documentation has moved to its own repository! WampSharp v1.2.3.12-beta WampSharp v1.2.3.12-beta released, see version release notes. Get Started See Get started tutorial and Getting started with Callee Getting started with Caller Getting started with Publisher Getting started with Subscriber See documentation for more help. WAMPv1 support WAMPv1 support is still available. You can read about it at the Documentation site. In order to use it, Install WampSharp.WAMP1.Default from NuGet. If you're updating from a previous WampSharp version and you're not interested yet in updating your application to WAMPv2, please read the following notes. Donations If you found WampSharp helpful and want to donate, you are welcome to do so via PayPal. Your donations help keep this project development alive. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Code-Sharp/WampSharp"	"A C# implementation of - a protocol that provides messaging patterns of Remote Procedure Calls and Publish/Subscribe over WebSockets."	"true"
"WebSocket"	"The Web Application Messaging Protocol"	"http://wamp-proto.org/"	"A C# implementation of - a protocol that provides messaging patterns of Remote Procedure Calls and Publish/Subscribe over WebSockets."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"WAMP - Web Application Messaging Protocol The Web Application Messaging Protocol Home Why WAMP? How does it compare? Implementations Specification FAQ WAMP is an open standard WebSocket subprotocol that provides two application messaging patterns in one unified protocol: Remote Procedure Calls + Publish & Subscribe.   Read more Tweet Using WAMP you can build distributed systems out of application components which are loosely coupled and communicate in (soft) real-time. A quick introduction to WAMP: Here is what users do with WAMP: Sony CSL Sony Computer Science Lab is developing Kadecot, a Home Automation product using WAMP which they presented at a recent W3C Workshop on the Web of Things. Genesi is licensing Radix K1, a complete Internet of Things (IoT) solution using WAMP and leveraging Crossbar.io server-side. Communication is fully encrypted (SSL). Kitware is offering solutions for 3D scientific visualization and is using WAMP and Autobahn (a WAMP real-time framework) in its ParaView and VTK products. Record-Evolution offers an advanced Data-Warehouse and Business Intelligence tool built on WAMP, Crossbar.io (an enterprise WAMP router) and Oracle database. The MDS Lab at the University of Messina uses WAMP for its SmartME smart city project, and for the Stack4Things OpenStack-based framework they are developing for this. News WAMP - Web Application Messaging Protocol - 2015/04/29, by Ryan Edge Why AJAX isn't enough (Smashing Magazine) - 2015/01/13, by Alexander Gödde Introduction to WAMP slide deck - 2014/12/26, by Sam & Max. A few words about WAMP - 2014/09/16, by Konstantin Burkalev WAMP language survey results - 2014/07/07, by Alexander Gödde Ready for more? Why WAMP? Get started! Mailing list WAMP™ - The Web Application Messaging Protocol. Copyright © 2012-2014 Tavendo GmbH and contributors. Content licensed under Creative Commons CC-BY-SA and code licensed under Apache 2.0. ""Tavendo"", ""Crossbar.io"", ""WAMP"" and the logo are trademarks of Tavendo GmbH. All rights reserved. All other trademarks are those of their respective companies. Anbieterkennzeichnung nach deutschem Recht."	"null"	"null"	"A C# implementation of - a protocol that provides messaging patterns of Remote Procedure Calls and Publish/Subscribe over WebSockets."	"true"
"Windows Services"	"TopShelf"	"https://github.com/Topshelf/Topshelf"	"An easy service hosting framework for building Windows services using.NET"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1418"	"138"	"332"	"GitHub - Topshelf/Topshelf: An easy service hosting framework for building Windows services using .NET Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 138 Star 1,418 Fork 332 Topshelf/Topshelf Code Issues 40 Pull requests 1 Wiki Pulse Graphs An easy service hosting framework for building Windows services using .NET http://topshelf-project.com/ 174 commits 13 branches 18 releases 43 contributors C# 98.8% F# 1.1% Batchfile 0.1% C# F# Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags Nancy assembly-info-for-service-name-etc develop feature/albacore2 feature/fsharp-api gh-pages master mono-sample spaces update-readme-for-submodule v2_develop v2_master v3 Nothing to show versioning.for.uc v4.0.0 v3.3.1 v3.3.0 v3.2.0 v3.1.1 v3.0.2 v3.0.1 v3.0.0 v2.3 v2.2 v2.1 v2.0.2 v2.0.1 v2.0.0 v1.0RC0 v1.0RC 1.0 Nothing to show New pull request Latest commit 52ae2d7 May 27, 2016 Chris McKenzie committed with TravisTheTechie Enhanced command line documentation to include examples … It took me a long time to discover that  it's acceptable to uses spaces to separate argument names from values instead of the colon. This necessary with quoted argument values. Permalink Failed to load latest commit information. doc Enhanced command line documentation to include examples Jul 4, 2016 src turn on XML docs for inclusion into nupkgs May 15, 2016 .gitattributes adding a gemfile and nicer attributes: Sep 13, 2012 .gitignore Topshelf v4 update to .NET 4.5.2, AppVeyor build, FAKE build script May 3, 2016 CHANGELOG.md Adding a change log May 3, 2016 LICENSE Create LICENSE Nov 8, 2013 Topshelf.snk Added strong name, version Nov 8, 2012 build.bat Updated build to work with NuGet disabled May 3, 2016 build.fsx Fixed strong naming which was missing from Topshelf v4 May 8, 2016 readme.md Better visibility into the develop branch build May 17, 2016 template.nuspec Topshelf v4 update to .NET 4.5.2, AppVeyor build, FAKE build script May 3, 2016 readme.md Topshelf - An easy service hosting framework for building Windows services using .NET Topshelf is a framework for hosting services written using the .NET framework. The creation of services is simplified, allowing developers to create a simple console application that can be installed as a service using Topshelf. The reason for this is simple: It is far easier to debug a console application than a service. And once the application is tested and ready for production, Topshelf makes it easy to install the application as a service. Develop build LICENSE Apache 2.0 - see LICENSE INFO Getting started with Topshelf Get started in four simple steps! Step 1 (get the bits): The easiest way to get Topshelf in your project is to use NuGet. Mailing List Topshelf Discuss Contributing Clone Branch Make changes Push Make a pull request Source Clone the source down to your machine. git clone git://github.com/Topshelf/Topshelf.git Important: Run build.bat in order to generate the SolutionVersion.cs file which is otherwise missing. You must have git on the path in order to do this. (Right click on Computer > Advanced System Settings, Advanced (tab) > Environment Variables... > Append the git executable's directory at the end of the PATH environment variable. Edit with Visual Studio 2015 or alternatively edit and run build.bat. Topshelf uses the .NET Framework v4.5.2. Editing in Visual Studio Run build.bat in the root folder. Set Visual Studio Tools -> Options -> Text Editor -> All Languages -> Tabs to use ""Tab Size"" = 4, ""Indent Size"" = 4, and ""Insert Spaces"" Double-click/open the .sln file. REQUIREMENTS To run the build, a Visual Studio 2015 compatible environment should be setup. CREDITS Logo Design by The Agile Badger Copyright 2007-2016 Travis Smith, Chris Patterson, Dru Sellers, Henrik Feldt et al. All rights reserved Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Topshelf/Topshelf"	"An easy service hosting framework for building Windows services using.NET"	"true"
