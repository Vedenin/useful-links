"category"	"name"	"url"	"description"	"star"	"stackOverflow"	"stackOverflowUrl"	"license"	"licenseUrl"	"site"	"userGuide"	"newStars"	"newWatchs"	"newForks"	"pageText"	"newStackOverflow"	"github"	"allText"	"isExist"
"Algorithms and Data structures"	"crystalline"	"https://github.com/jtomschroeder/crystalline"	"A collection of containers and algorithms"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"56"	"6"	"6"	"GitHub - jtomschroeder/crystalline: A collection of containers & algorithms for the crystal programming language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 56 Fork 6 jtomschroeder/crystalline Code Issues 0 Pull requests 0 Pulse Graphs A collection of containers & algorithms for the crystal programming language 74 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit c27ba18 Aug 25, 2015 jtomschroeder Merge pull request #3 from elsapet/binary-search … Added Search module with binary search Permalink Failed to load latest commit information. algorithms containers graph spec .gitignore .travis.yml LICENSE.md Create LICENSE.md May 23, 2014 README.md TODO.md README.md crystalline crystalline is a collection of containers & algorithms for the crystal programming language. Containers Deque Stack Queue Red-Black Tree Splay Tree Trie Suffix Array k-d Tree Graphs Pull requests are welcome! :) Credits kanwei's Algorithms Ruby Graph Library (RGL) crystalline Copyright (c) 2015 Tom Schroeder, released under the MIT license Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jtomschroeder/crystalline"	"A collection of containers and algorithms"	"true"
"Algorithms and Data structures"	"delimiter_tree"	"https://github.com/drujensen/delimiter_tree"	"A tree structure that is built using a delimiter"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"0"	"1"	"0"	"GitHub - drujensen/delimiter_tree: A crystal-lang tree structure that is built using a delimiter. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 0 Fork 0 drujensen/delimiter_tree Code Issues 0 Pull requests 0 Pulse Graphs A crystal-lang tree structure that is built using a delimiter. 4 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md delimiter_tree shard.yml README.md Delimiter Tree A delimiter tree is a tree that is built from a string based on the delimiter. For example, if you have a string ""foo;bar"" then you will have a parent node ""foo"" and a child node ""bar"". Each node will hold a payload. The delimiter tree also supports two special characters. : is used for a parameter * is used to include a payload for all children nodes The tree will return an array of payloads for all matching * as well as the specific payload for the final matching string. Installation Add this to your application's shard.yml: dependencies:   delimiter_tree:     github: drujensen/delimiter_tree Usage The delimiter tree is used to return a payload or an array of payloads for a particular delimited string. This can be used for url paths or any situation where you need to specifically hold data per each segment of a delimited string. require ""delimiter_tree""  tree = Delimiter::Tree.new(""/"") tree.add ""/*"", :all_children tree.add ""/products"", :products tree.add ""/products/:id"", :specific_product  result = tree.find ""/products/2""  puts result.payload # [:all_children, :products]  puts result.params # :id => 2  Contributing Fork it ( https://github.com/[your-github-name]/delimiter_tree/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors [your-github-name] Dru Jensen - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/drujensen/delimiter_tree"	"A tree structure that is built using a delimiter"	"true"
"Algorithms and Data structures"	"heap.cr"	"https://github.com/chenkovsky/heap.cr"	"Implementation of heap data structure"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"0"	"1"	"0"	"GitHub - chenkovsky/heap.cr: data structure heap for crystal-lang Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 0 Fork 0 chenkovsky/heap.cr Code Issues 0 Pull requests 0 Pulse Graphs data structure heap for crystal-lang 4 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 7c8ae27 Apr 1, 2016 chenkovsky.chen update mail Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md heap useful function that use array as a heap Installation Add this to your application's shard.yml: dependencies:   heap:     github: chenkovsky/heap.cr Usage require ""heap"" describe Heap do   # TODO: Write tests    it ""nsmallest"" do     [1, 2, 3].nsmallest(2).sort.should eq([1, 2])   end    it ""nsmallest_by"" do     [1, 2, 3].nsmallest_by(2) { |x| -x }.sort.should eq([2, 3])   end    it ""merge"" do     res = [] of Int32     Array(Int32).merge([1, 2, 3], [4, 5, 6]) do |x|       res << x     end     res.should eq([1, 2, 3, 4, 5, 6])   end    it ""mergeby"" do     res = [] of Int32     Array(Int32).merge_by([3, 2, 1], [6, 5, 4], key_func = ->(x : Int32) { -x }) do |x|       res << x     end     res.should eq([6, 5, 4, 3, 2, 1])   end    it ""nlargest"" do     [1, 2, 3].nlargest(2).sort.should eq([2, 3])   end    it ""nlargest_by"" do     [1, 2, 3, 4].nlargest_by(2) { |x| -x }.sort.should eq([1, 2])   end    it ""push pop"" do     a = [1, 2]     a.heap_push 3     a.heap_pop.should eq(1)   end    it ""heapify"" do     a = [3, 2, 1]     a.heapify.should eq([1, 2, 3])   end end Development TODO: Write development instructions here Contributing Fork it ( https://github.com/chenkovsky/heap.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors chenkovsky chenkovsky.chen - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/chenkovsky/heap.cr"	"Implementation of heap data structure"	"true"
"Algorithms and Data structures"	"miller_rabin"	"https://github.com/kuende/miller_rabin"	"Implements algorithm to check if a number is prime"	"null"	"null"	"null"	"Miller-Rabin"	"https://en.wikibooks.org/wiki/Algorithm_Implementation/Mathematics/Primality_Testing"	"null"	"null"	"0"	"2"	"0"	"GitHub - kuende/miller_rabin: Miller-Rabin algorithm for prime checking Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 0 Fork 0 kuende/miller_rabin Code Issues 0 Pull requests 0 Pulse Graphs Miller-Rabin algorithm for prime checking 1 commit 1 branch 1 release Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md miller_rabin Implements Miller-Rabin algorithm to check if a number is prime Installation Add this to your application's shard.yml: dependencies:   miller_rabin:     github: kuende/miller_rabin Usage require ""miller_rabin""  MillerRabin.probably_prime(10459103, 100) MillerRabin.probably_prime(5915587219_u64, 100) Contributing Fork it ( https://github.com/kuende/miller_rabin/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kuende/miller_rabin"	"Implements algorithm to check if a number is prime"	"true"
"Algorithms and Data structures"	"multiset.cr"	"https://github.com/tcrouch/multiset.cr"	"Implementation of a multiset"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"0"	"1"	"0"	"GitHub - tcrouch/multiset.cr: implementation of multiset in Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 0 Fork 0 tcrouch/multiset.cr Code Issues 0 Pull requests 0 Pulse Graphs implementation of multiset in Crystal 12 commits 1 branch 2 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.1 v0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md multiset A multiset (bag) implementation in Crystal. Installation Add this to your application's shard.yml: dependencies:   multiset:     github: tcrouch/multiset.cr Usage require ""multiset""  ms1 = Multiset{1, 1} ms1 << 2                          # => Multiset{1, 1, 2} ms1.merge [3, 4]                  # => Multiset{1, 1, 2, 3, 4} ms2 = Multiset.new [2, 3, 4] ms2.subset?(ms1)                  # => true ms1 & ms2                         # => Multiset{2, 3, 4} Development crystal spec Contributing Fork it ( https://github.com/tcrouch/multiset.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors [tcrouch] Tom Crouch - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tcrouch/multiset.cr"	"Implementation of a multiset"	"true"
"Algorithms and Data structures"	"murmur3"	"https://github.com/kuende/murmur3"	"Implementation of Murmur3 hash algorithm used by Cassandra"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"0"	"2"	"0"	"GitHub - kuende/murmur3: Crystal implementation of Murmur3 hash algorithm used by Cassandra Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 0 Fork 0 kuende/murmur3 Code Issues 0 Pull requests 0 Pulse Graphs Crystal implementation of Murmur3 hash algorithm used by Cassandra 2 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md Murmur3 Murmur3H1 hash function used by cassandra Installation Add this to your application's shard.yml: dependencies:   murmur3:     github: kuende/murmur3 Usage require ""murmur3""  Murmur3.h1(""hello, world"".bytes)  # Or as string  Murmur3.h1(""hello, world"") Contributing Fork it ( https://github.com/kuende/murmur3/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors @teodor-pripoae Teodor Pripoae - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kuende/murmur3"	"Implementation of Murmur3 hash algorithm used by Cassandra"	"true"
"Algorithms and Data structures"	"primes"	"https://github.com/dkhofer/primes"	"Library for testing if a number is prime and finding its prime factorization"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"1"	"0"	"GitHub - dkhofer/primes: Library for testing primality and factoring integers in Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 2 Fork 0 dkhofer/primes Code Issues 0 Pull requests 0 Wiki Pulse Graphs Library for testing primality and factoring integers in Crystal 44 commits 1 branch 0 releases Fetching contributors Crystal 98.8% Makefile 1.2% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. benchmark command-line spec src .gitignore .travis.yml LICENSE Makefile README.md shard.yml README.md primes Library for testing primality and factoring integers in Crystal. See the wiki for more info. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dkhofer/primes"	"Library for testing if a number is prime and finding its prime factorization"	"true"
"Algorithms and Data structures"	"radix"	"https://github.com/luislavena/radix"	"Radix Tree implementation"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"13"	"2"	"2"	"GitHub - luislavena/radix: Radix Tree implementation for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 13 Fork 2 luislavena/radix Code Issues 0 Pull requests 0 Pulse Graphs Radix Tree implementation for Crystal 28 commits 1 branch 6 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.3.0 v0.2.1 v0.2.0 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 77789be May 16, 2016 luislavena Add VERSION constant for runtime usage … Introduce `Radix::VERSION` to be used at runtime by users of the library for any purpose this will help them (expose them, use conditional blocks or similar).  Also add spec that checks that defined versions in both `shard.yml` and `Radix::VERSION` matches to avoid messing up releases. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml CHANGELOG.md LICENSE README.md shard.yml README.md Radix Tree Radix tree implementation for Crystal language Installation Add this to your application's shard.yml: dependencies:   radix:     github: luislavena/radix Usage Building Trees You can associate a payload with each path added to the tree: require ""radix""  tree = Radix::Tree(Symbol).new tree.add ""/products"", :products tree.add ""/products/featured"", :featured  result = tree.find ""/products/featured""  if result.found?   puts result.payload # => :featured end The types allowed for payload are defined on Tree definition: tree = Radix::Tree(Symbol).new  # Good, since Symbol is allowed as payload tree.add ""/"", :root  # Compilation error, Int32 is not allowed tree.add ""/meaning-of-life"", 42 Can combine multiple types if needed: tree = Radix::Tree(Int32 | String | Symbol).new  tree.add ""/"", :root tree.add ""/meaning-of-life"", 42 tree.add ""/hello"", ""world"" Lookup and placeholders You can also extract values from placeholders (as named segments or globbing): tree.add ""/products/:id"", :product  result = tree.find ""/products/1234""  if result.found?   puts result.params[""id""]? # => ""1234"" end Please see Radix::Tree#add documentation for more usage examples. Caveats Pretty much all Radix implementations have their limitations and this project is no exception. When designing and adding paths to a Tree, please consider that two different named parameters cannot share the same level: tree.add ""/"", :root tree.add ""/:post"", :post tree.add ""/:category/:post"", :category_post # => Radix::Tree::SharedKeyError This is because different named parameters at the same level will result in incorrect params when lookup is performed, and sometimes the value for post or category parameters will not be stored as expected. To avoid this issue, usage of explicit keys that differentiate each path is recommended. For example, following a good SEO practice will be consider /:post as absolute permalink for the post and have a list of categories which links to the permalinks of the posts under that category: tree.add ""/"", :root tree.add ""/:post"", :post                    # this is post permalink tree.add ""/categories"", :categories         # list of categories tree.add ""/categories/:category"", :category # listing of posts under each category Implementation This project has been inspired and adapted from julienschmidt/httprouter and spriet2000/vertx-http-router Go and Java implementations, respectively. Changes to logic and optimizations have been made to take advantage of Crystal's features. Contributing Fork it ( https://github.com/luislavena/radix/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors Luis Lavena - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/luislavena/radix"	"Radix Tree implementation"	"true"
"Api Builders"	"crystal_api"	"https://github.com/akwiatkowski/crystal_api"	"Simple PostgreSQL REST API with Rails devise-like auth"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"27"	"3"	"0"	"GitHub - akwiatkowski/crystal_api: Simple PostgreSQL REST API in Crystal with devise-like auth. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 27 Fork 0 akwiatkowski/crystal_api Code Issues 4 Pull requests 0 Pulse Graphs Simple PostgreSQL REST API in Crystal with devise-like auth. 50 commits 3 branches 1 release 1 contributor Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags interface_refactor master update Nothing to show v0.3.2 Nothing to show New pull request Latest commit 20908a1 Jul 5, 2016 akwiatkowski fix migration Permalink Failed to load latest commit information. bin fix Jul 5, 2016 config travis-ci integration May 4, 2016 spec fix Jul 5, 2016 src fix migration Jul 5, 2016 .gitignore some improvements Feb 28, 2016 .travis.yml travis-ci integration May 4, 2016 LICENSE devise and abilities, initials Feb 29, 2016 README.md massive kemal style reworking Jul 3, 2016 shard.lock initial new version, index looks worky Jul 3, 2016 shard.yml initial new version, index looks worky Jul 3, 2016 README.md crystal_api Warning! There is massive update in progress which will break everything! Toolset for creating REST Api in Crystal Language. Roadmap Fix DB mapping to allow create database - add types of columns to definition list Check and fix JSON mapping Update action Destroy action Clean Postgres adapter Rewrite for easier usage as lib JSON response header DB inline config (no config file needed) devise compatible sign in controller JWT request authentication Initial rights managament Other DB engines (partially refactored) More predefined/sample controllers Websockets Usage Create empty crystal project: crystal init app crystal_api_sample Add crystal_api to shard.yml. Example: name: crystal_api_sample version: 0.1.0  authors:   - Crystal Guy <crystal@crystal.org>  dependencies:   crystal_api:     github: ""akwiatkowski/crystal_api""  license: MIT Update shards (Crystal libraries): shards update Configure database (PostgreSQL) access and create CrystalApi::App instance. inline: a = CrystalApi::App.new( DbAdapter.new(user: ""crystal_user"", password: ""crystal_password"", database: ""crystal"", host: ""localhost"") ) by config file Create Postgresql connection file in config/database.yml using sample from config/database.yml.sample from crystal_api repository. host: localhost database: crystal user: crystal_user password: crystal_password And set path to Postgresql config file by adding in src/crystal_api_sample.cr a = CrystalApi::App.new( DbAdapter.new(config_path: ""config/database.yml"") ) Create model representing data fetched from Postgresql: class EventModel < CrystalApi::CrystalModel   def initialize(_db_id, _name)     @db_id = _db_id as Int32     @name = _name as (String | Nil)   end    getter :db_id, :name    JSON.mapping({     ""db_id"": Int32,     ""name"": (String | Nil),   })    DB_COLUMNS = {     # ""id"" is default     ""name"" => ""varchar(255)"",   }   DB_TABLE = ""events"" end Notes: nullable columns must use union with Nil class all columns should be defined in constructor, which will be utilized in Service class JSON mapping is used when rendereing JSON DB_COLUMNS are used only when creating table DB_TABLE is the database table name Create service class which performs DB operations. class EventsService < CrystalApi::RestService   def initialize(a)     @adapter = a     @table_name = EventModel::DB_TABLE      # create table if not exists     create_table(EventModel::DB_COLUMNS)   end    def self.from_row(rh)     return EventModel.new(rh[""id""], rh[""name""])   end end Notes: EventsService.from_row(rh) instantiates model from Hash-like response from DB adapter Create controller class with defined list of actions and REST path. class EventsController < CrystalApi::CrystalApi::Controllers::JsonRestApiController   def initialize(s)     @service = s      @actions = [       ""index"",       ""show"",       ""create"",       ""update"",       ""delete""     ]      @path = ""/events""     @resource_name = ""event""   end end Notes: @resource_name is used in update and create @path deteremine all endpoints path Create and run app # a = CrystalApi::App.new(DbAdapter.new(...)) # it is already defined a.port = 8002 a.add_controller( EventsController.new(EventsService.new(a.adapter)) ) a.start Index GET http://localhost:8002/events curl -H ""Content-Type: application/json"" -X GET http://localhost:8002/events Show GET http://localhost:8002/events/:id curl -H ""Content-Type: application/json"" -X GET http://localhost:8002/events/1 But first create an Event :) Create POST http://localhost:8002/events curl -H ""Content-Type: application/json"" -X POST -d '{""event"":{""name"": ""test1""}}' http://localhost:8002/events Update PUT http://localhost:8002/events/:id curl -H ""Content-Type: application/json"" -X PUT -d '{""event"":{""name"": ""test2""}}' http://localhost:8002/events/1 Delete DELETE http://localhost:8002/events/:id curl -H ""Content-Type: application/json"" -X DELETE http://localhost:8002/events/1 Devise sign in, authentication and authorization require ""crystal_api""  class DbAdapter < CrystalApi::Adapters::PgAdapter end  class UserModel < CrystalApi::CrystalModel   def initialize(_db_id, _email)     @db_id = _db_id as Int32     @email = _email as String   end    getter :db_id, :email    JSON.mapping({     ""db_id"": Int32,     ""email"": String,   })    DB_COLUMNS = {     # ""id"" is default     ""email"" => ""text"",   }   DB_TABLE = ""users"" end  class UsersService < CrystalApi::RestService   def initialize(a)     @adapter = a     @table_name = UserModel::DB_TABLE   end    def self.from_row(rh)     return UserModel.new(rh[""id""], rh[""email""])   end end  class UsersController < CrystalApi::Controllers::JsonRestApiController   def initialize(s)     @service = s      @actions = [       ""index"",       ""show"",       ""create"",       ""update"",       ""delete""     ]      @path = ""/users""     @resource_name = ""user""   end end  class SessionService < CrystalApi::DeviseSessionService   def initialize(a)     @adapter = a     @table_name = UserModel::DB_TABLE   end    def self.from_row(rh)     return UserModel.new(rh[""id""], rh[""email""])   end end This part is similar as described above. class SessionController < CrystalApi::Controllers::DeviseSessionApiController   # def initialize(s, secret_key = SecureRandom.hex)   #   @service = s   #   @path = ""/session""   #   @resource_name = ""user""   # end end CrystalApi::Controllers::DeviseSessionApiController allow to sign in just like Rails devise gem. It will return JWT token. a = CrystalApi::App.new(DbAdapter.new(...)) a.port = 8002 a.add_controller( UsersController.new(UsersService.new(a.adapter)) )  secret_key = ""secret"" session_controller = SessionController.new(SessionService.new(a.adapter), secret_key: secret_key) You can provide secret_key the way you would like, but you can leave it. In that case secret_key will be random generated everytime you will start server. a.add_controller(session_controller) As every Controller you have to add it. a.auth.can!(""GET"", ""/users/:id"", ""regular"") In this example we want to allow signed user to have access only on this endpoint. If you want to add access to not signed users add line below. a.auth.can!(""GET"", ""/users/:id"", ""nil"") Next few line are not so beautiful, but they link sign in SessionController with CrystalApi::AuthRouteHandler. a.auth.proc = -> (context : HTTP::Server::Context, auth : CrystalApi::CrystalAuth) {   # to allow sign in of not signed users   if context.request.path == ""/session""     return true   end    if context.params.has_key?(""token"")     user = session_controller.token_to_user(context.params[""token""].to_s)     if user       return auth.can?(context, ""regular"")     else       return auth.can?(context, ""nil"")     end   end    return false } This move authorization logic into CrystalApi::AuthRouteHandler. a.start Now you can start application, and test it. curl -H ""Content-Type: application/json"" -X POST -d '{""user"":{""email"": ""email@email.org"", ""password"": ""password""}}' http://localhost:8002/session Which will return: {""token"":""eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo2Mjg5fQ.s4njjtCl1Ch2K_5RJn-9lsNbr49bUWlmcJOAllP5GNI""} And now you can make authenticated API calls: curl -H ""Content-Type: application/json"" -X GET -d '{""token"":""eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo2Mjg5fQ.s4njjtCl1Ch2K_5RJn-9lsNbr49bUWlmcJOAllP5GNI""}' http://localhost:8002/users/1 Which returns: {""db_id"":1,""email"":""admin@domain.org""} When you try not to provide correct token: curl -H ""Content-Type: application/json"" -X GET -d '{""token"":""wrong_token""}' http://localhost:8002/users/1 You will have an error with 403 forbidden HTTP status: {""error"": ""forbidden""}  Contributing Fork it ( https://github.com/akwiatkowski/crystal_api/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors akwiatkowski Aleksander Kwiatkowski - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/akwiatkowski/crystal_api"	"Simple PostgreSQL REST API with Rails devise-like auth"	"true"
"Caching"	"Bloom Filter"	"https://github.com/greyblake/crystal-bloom_filter"	"Implementation of Bloom filter"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"1"	"0"	"GitHub - greyblake/crystal-bloom_filter: Bloom filter implementation in Crystal lang Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 10 Fork 0 greyblake/crystal-bloom_filter Code Issues 0 Pull requests 0 Pulse Graphs Bloom filter implementation in Crystal lang 26 commits 1 branch 1 release Fetching contributors Crystal 98.0% Makefile 2.0% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.0 Nothing to show New pull request Latest commit dd91b22 May 16, 2016 greyblake Support Crystal 0.16.0 Permalink Failed to load latest commit information. samples spec src .gitignore .travis.yml CHANGELOG.md LICENSE Makefile README.md shard.yml Initial commit Feb 5, 2016 README.md Bloom Filter Implementation of Bloom Filter in Crystal lang. Installation Usage Basic Creating a filter with optimal parameters Dumping to file and loading Union and intersection Visualization Benchmark Contributors Installation Add this to your application's shard.yml: dependencies:   bloom_filter:     github: greyblake/crystal-bloom_filter Usage Basic require ""bloom_filter""  # Create filter with bitmap size of 32 bytes and 3 hash functions. filter = BloomFilter.new(bytesize = 32, hash_num = 3)  # Insert elements filter.insert(""Esperanto"") filter.insert(""Toki Pona"")  # Check elements presence filter.has?(""Esperanto"")  # => true filter.has?(""Toki Pona"")  # => true filter.has?(""Englsh"")     # => false Creating a filter with optimal parameters Based on your needs(expected number of items and desired probability of false positives), your can create an optimal bloom filter: # Create a filter, that with one million inserted items, gives 2% of false positives for #has? method filter = BloomFilter.new_optimal(1_000_000, 0.02) filter.bytesize # => 1017796 (993Kb) filter.hash_num # => 6 Dumping into a file and loading It's possible to save existing bloom filter as a binary file and then load it back. filter = BloomFilter.new_optimal(2, 0.01) filter.insert(""Esperanto"") filter.dump_file(""/tmp/bloom_languages"")  loaded_filter = BloomFilter.load_file(""/tmp/bloom_languages"") loaded_filter.has?(""Esperanto"") # => true loaded_filter.has?(""English"")   # => false Union and intersection Having two filters of the same size and number of hash functions, it's possible to perform union and intersection operations: f1 = BloomFilter.new(32, 3) f1.insert(""Esperanto"") f1.insert(""Spanish"")  f2 = BloomFilter.new(32, 3) f2.insert(""Esperanto"") f2.insert(""English"")  # Union f3 = f1 | f2 f3.has?(""Esperanto"") # => true f3.has?(""Spanish"")   # => true f3.has?(""English"")   # => true  # Intersection f4 = f1 & f2 f4.has?(""Esperanto"") # => true f4.has?(""Spanish"")   # => false f4.has?(""English"")   # => false Visualization If you want to see how your filter looks like, you can visualize it: f1 = BloomFilter.new(16, 2) f1.insert(""Esperanto"") puts ""f1 = (Esperanto)"" puts f1.visualize  f2 = BloomFilter.new(16, 2) f2.insert(""Spanish"") puts ""f2 = (Spanish)"" puts f2.visualize  f3 = f1 | f2 puts ""f3 = f1 | f2 = (Esperanto, Spanish)"" puts f3.visualize Output: f1 = (Esperanto) ░░░░░░░░ ░░░░░░█░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░█ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░  f2 = (Spanish) ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░█░ ░█░░░░░░  f3 = f1 | f2 = (Esperanto, Spanish) ░░░░░░░░ ░░░░░░█░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░░ ░░░░░░░█ ░░░░░░░░ ░░░░░░█░ ░█░░░░░░  In this way, you can actually see which bits are set:) Benchmark Performance of Bloom filter depends on the following parameters: Size of the filter Number of hash functions Length of the input string To run benchmark from ./samples/benchmark.cr, simply run make task: $ make benchmark  Number of items: 100000000 Filter size: 117005Kb Hash functions: 7 String size: 13                       user     system      total        real insert           0.004227   0.000000   0.004227 (  2.769349) has? (present)   0.007980   0.000000   0.007980 (  5.223778) has? (missing)   0.004318   0.000000   0.004318 (  2.829521)  Contributors greyblake Potapov Sergey - creator, maintainer funny-falcon Sokolov Yura - better hash algorithms Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/greyblake/crystal-bloom_filter"	"Implementation of Bloom filter"	"true"
"Caching"	"crystal-memcached"	"https://github.com/comandeo/crystal-memcached"	"Implementation of a memcached client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"13"	"3"	"3"	"GitHub - comandeo/crystal-memcached: Memcached client for Crystal language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 13 Fork 3 comandeo/crystal-memcached Code Issues 0 Pull requests 1 Pulse Graphs Memcached client for Crystal language 32 commits 1 branch 2 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.0 v0.0.1 Nothing to show New pull request Latest commit 9277e38 Jul 10, 2016 mauricioabreu committed with comandeo Turn off IO buffer (#5) … Disables buffering, writing the content to IO right after the command being executed improving performance. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md Crystal Memcached Pure Crystal implementation of a Memcached client. Installation Add it to Projectfile deps do   github ""comandeo/crystal-memcached"" end Usage require ""memcached""  client = Memcached::Client.new client.set(""Key"", ""Value"") value = client.get(""Key"") What is implemented get multi-get for faster getting multiple keys values (read here for details) set (with or without expiration) data version check delete append prepend touch flush increment decrement Contributing Fork it ( https://github.com/comandeo/crystal-memcached/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors comandeo Dmitry Rybakov - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/comandeo/crystal-memcached"	"Implementation of a memcached client"	"true"
"Cli Builders"	"commander"	"https://github.com/mrrooijen/commander"	"Command-line interface builder"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"32"	"1"	"2"	"GitHub - mrrooijen/commander: Command-line interface builder for the Crystal programming language. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 32 Fork 2 mrrooijen/commander Code Issues 0 Pull requests 0 Pulse Graphs Command-line interface builder for the Crystal programming language. http://mrrooijen.github.io/commander 20 commits 3 branches 6 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags crystal-0.11.0 gh-pages master Nothing to show v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md Commander Command-line interface builder for the Crystal programming language. Installation Add this to your application's shard.yml: dependencies:   commander:     github: mrrooijen/commander     version: ~> 0.3.3 Usage Practically everything you need to know in one example: require ""commander""  cli = Commander::Command.new do |cmd|   cmd.use = ""my_program""   cmd.long = ""my program's (long) description.""    cmd.flags.add do |flag|     flag.name = ""env""     flag.short = ""-e""     flag.long = ""--env""     flag.default = ""development""     flag.description = ""The environment to run in.""   end    cmd.flags.add do |flag|     flag.name = ""port""     flag.short = ""-p""     flag.long = ""--port""     flag.default = 8080     flag.description = ""The port to bind to.""   end    cmd.flags.add do |flag|     flag.name = ""timeout""     flag.short = ""-t""     flag.long = ""--timeout""     flag.default = 29.5     flag.description = ""The wait time before dropping the connection.""   end    cmd.flags.add do |flag|     flag.name = ""verbose""     flag.short = ""-v""     flag.long = ""--verbose""     flag.default = false     flag.description = ""Enable more verbose logging.""   end    cmd.run do |options, arguments|     options.string[""env""]    # => ""development""     options.int[""port""]      # => 8080     options.float[""timeout""] # => 29.5     options.bool[""verbose""]  # => false     arguments                # => Array(String)   end    cmd.commands.add do |cmd|     cmd.use = ""kill <pid>""     cmd.short = ""Kills server by pid.""     cmd.long = cmd.short     cmd.run do |options, arguments|       arguments # => [""62719""]     end   end end  Commander.run(cli, ARGV) Here's what the help page looks like for this configuration: $ my_program help  my_program - my program's (long) description.  Usage:   my_program [command] [flags] [arguments]  Commands:   help [command]  # Help about any command.   kill <pid>      # Kills server by pid.  Flags:   -e, --env      # The environment to run in. default: 'development'.   -h, --help     # Help for this command. default: 'false'.   -p, --port     # The port to bind to. default: '8080'.   -t, --timeout  # The wait time before dropping the connection. default: '29.5'.   -v, --verbose  # Enable more verbose logging. default: 'false'.  This is how you override the default options and pass in additional arguments: $ my_program -ve production --port 8443 --timeout=25 arg1 arg2 arg3  cmd.run do |options, arguments|   options.string[""env""]    # => ""production""   options.int[""port""]      # => 8443   options.float[""timeout""] # => 25.0   options.bool[""verbose""]  # => true   arguments                # => [""arg1"", ""arg2"", ""arg3""] end Features Define commands recursively. Define flags on a per-command basis. Short argument flags (-p 8080) Short boolean flags (-f) Multi-short flags (-fp 8080, equivalent to -f -p 8080) Long argument flags (--port 8080, --port=8080) Long boolean flags (--force) Reuse flags for multiple commands (verbose = Commander::Flag.new) Define defaults for each flag Automatically validates, parses and casts to the correct type Automatically passes all parsed options to cmd.run Receive additional cli arguments per command (arguments in cmd.run) Automatically generates a help page for each command Generates a help command for each command to access the help page Generates -h, --help flags for each command to access to help page Provide Commander.run(cli, ARGV) to handle end-user input exceptions. Contributing Fork it ( https://github.com/mrrooijen/commander/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mrrooijen/commander"	"Command-line interface builder"	"true"
"Cli Builders"	"completion"	"https://github.com/f/completion"	"Easy command line completion engine"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"27"	"4"	"1"	"GitHub - f/completion: Easy Command Line Completion for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 27 Fork 1 f/completion Code Issues 1 Pull requests 0 Pulse Graphs Easy Command Line Completion for Crystal 14 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. examples spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md Easy Command Line Autocompletion Helper Completion is a Shell Completion Helper built on Crystal. It allows you to have completion muscle for your CLI apps. Installation Add this to your application's shard.yml: dependencies:   completion:     github: f/completion Usage 1 Minute Start First, create a file with simple autocompletion logic. # hello.cr require ""completion""  completion :where do |comp|   comp.on(:where) do     comp.reply [""world"", ""mars"", ""pluton""]   end end Build and try: crystal build hello.cr eval ""$(./hello --completion --development)""  ./hello<tab><tab> world   mars   pluton Note: --development flag enables autocompletion for relative (./hello) completion. While developing your application and testing your autocompletion feature, please use --development flag beside --completion flag. When you are available to use your app globally (e.g. via Homebrew) you should make your users to run eval ""$(yourapp --completion)"" command. Overview require ""completion""  # [detected program] <action> <user> <remote>  completion :action, :user, :remote do |comp|    # When Program requested :action, reply the availables.   comp.on(:action) do     comp.reply [""pull"", ""push""]   end    # When Program requested :user, reply the availables.   comp.on(:user) do     comp.reply [""f"", ""sdogruyol"", ""askn""]   end    # When Program requested :remote, reply the availables with defined variables.   comp.on(:remote) do     comp.reply [""github/#{comp.values[:user]}"", ""bitbucket/#{comp.values[:user]}""]   end    # When all parameters finished, reply always...   # It is `Dir.entries Dir.current` by default.   comp.end do     comp.reply [""--force""]   end end Changing Program Name It detects program name automatically. If you want to change it or you have problems with detection, you should set the first argument to program name. require ""completion""  # myprogram <action> <remote> <suboption> completion ""myprogram"", :action, :remote, :suboption do |comp|   # ... end Defined Values, Last Word and Whole Line The first parameter of the block you give has last_word, line and fragment parameters. So you can make your parameters more dynamic. completion :searchengine, :url do |comp|    comp.on(:searchengine) do     comp.reply [""google"", ""bing""]   end    comp.on(:url) do     comp.reply [""#{comp.values[:searchengine]}.com/search"", ""#{comp.values[:searchengine]}.com/images""]   end end This will run as: $ myapp<tab> google bing  $ myapp goog<tab> google  $ myapp google <tab> google.com/search google.com/images  End of Arguments You can define what to show when arguments are finished: completion :first do |comp|   comp.on(:first) do     comp.reply [""any"", ""option""]   end   comp.end do     comp.reply [""--force"", ""--prune""]   end end Concatting Replies You can reply more than one time. It will concat all of these. completion :first do |comp|   comp.on(:first) do     comp.reply [""any"", ""option""]     comp.reply [""other"", ""awesome""]     comp.reply [""options"", ""to"", ""select""]   end end Integrating into OptionParser Completion can parse OptionParser arguments and it's very easy to integrate with. Simply use complete_with macro with the instance of OptionParser. It will automatically parse all the flags and add them to the suggestion list. OptionParser.parse! do |parser|   parser.banner = ""Usage: salute [arguments]""   parser.on(""-u"", ""--upcase"", ""Upcases the sallute"") { }   parser.on(""-t NAME"", ""--to=NAME"", ""Specifies the name to salute"") { }   parser.on(""-h"", ""--help"", ""Show this help"") { puts parser }    # Just add this macro to the OptionParser block.   complete_with parser end It will run as: $ myapp<tab> --help    --to      --upcase  -h        -t        -u  $ myapp --<tab> --help --to --upcase  $ myapp --help --<tab> --help --to --upcase  Installation (You should add these instructions to your project's README) # Add this line to your .bashrc file. eval ""$(yourapp --completion)"" Examples Examples are here to show you how to make it more functional. Real World Examples Project Name Talk is cheap, show me the code tlcr src/tlcr/completion.cr cryload src/cryload/cli.cr Branched Autocompletion This is how you can branch options and suboptions by using values parameter. completion :action, :subaction, :subsubaction do |comp|   comp.on(:action) do     comp.reply [""pull"", ""log"", ""commit"", ""remote""]   end    comp.on(:subaction) do     case comp.values[:action]       when ""pull""         comp.reply [""origin"", ""upstream""]        when ""log""         comp.reply [""HEAD"", ""master"", ""develop""]        when ""commit""         comp.reply [""--amend"", ""-m"", ""-am""]     end   end    comp.on(:subsubaction) do     case comp.values[:subaction]       when ""origin""         comp.reply [""origin/master"", ""origin/upstream"", ""origin/patch""]        when ""HEAD""         comp.reply [""~1"", ""~2"", ""~3""]     end   end end Remote Autocompletion You can make a remote autocompletion using HTTP::Client. require ""json"" require ""http/client""  completion :repos do |comp|   comp.on(:repos) do     request = HTTP::Client.get ""https://api.github.com/users/f/repos""     repos = JSON.parse(request.body)     repo_names = [] of JSON::Any     repos.each {|repo| repo_names << repo[""name""] }      comp.reply repo_names   end end This will run as: $ mygit c<tab> cards     coffeepad     completion    cryload     crystal-kemal-todo-list     crystal-weekly  TODO Add ZSH Support Contributing Fork it ( https://github.com/f/completion/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors f Fatih Kadir Akın - creator, maintainer It's acutally a port of omelette package of Node. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/f/completion"	"Easy command line completion engine"	"true"
"Cli Builders"	"docopt"	"https://github.com/chenkovsky/docopt.cr"	"A port"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"1"	"1"	"GitHub - chenkovsky/docopt.cr: docopt for crystal-lang Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 4 Fork 1 chenkovsky/docopt.cr Code Issues 0 Pull requests 0 Pulse Graphs docopt for crystal-lang 18 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md docopt.cr docopt for crystal-lang Installation Add this to your application's shard.yml: dependencies:   docopt:     github: chenkovsky/docopt.cr Usage require ""docopt.cr"" describe ""Docopt"" do   # TODO: Write tests    it ""works"" do     doc = <<-DOC     Naval Fate.      Usage:       naval_fate ship new <name>...       naval_fate ship <name> move <x> <y> [--speed=<kn>]       naval_fate ship shoot <x> <y>       naval_fate mine (set|remove) <x> <y> [--moored|--drifting]       naval_fate -h | --help       naval_fate --version      Options:       -h --help     Show this screen.       --version     Show version.       --speed=<kn>  Speed in knots [default: 10].       --moored      Moored (anchored) mine.       --drifting    Drifting mine.  DOC     std = {""ship"" => true, ""new"" => false, ""<name>"" => [""A""], ""move"" => true, ""<x>"" => ""a"", ""<y>"" => ""b"", ""--speed"" => ""3"", ""shoot"" => false, ""mine"" => false, ""set"" => false, ""remove"" => false, ""--moored"" => nil, ""--drifting"" => nil, ""-h"" => nil, ""--help"" => false, ""--version"" => nil}     ans = Docopt.docopt(doc, argv = [""ship"", ""A"", ""move"", ""a"", ""b"", ""--speed=3""])     ans[""<name>""].should eq(std[""<name>""])   end   it ""one or more"" do     doc = <<-DOC     test     Usage:         naval [--files=files...]  DOC     ans = Docopt.docopt(doc, argv = [""--files=a.txt"", ""--files=b.txt""])     farr = ans[""--files""] as Array(String)     ""a.txt"".should eq(farr[0])     ""b.txt"".should eq(farr[1])   end end TODO: Write usage instructions here Development TODO: Write development instructions here Contributing Fork it ( https://github.com/chenkovsky/docopt.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors chenkovsky chenkovsky.chen - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/chenkovsky/docopt.cr"	"A port"	"true"
"Cli Builders"	"docopt.org"	"http://docopt.org/"	"A port"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"docopt · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization docopt Your terminal http://docopt.org Repositories People 16 Filters Sources Forks C++ 364 43 docopt.cpp C++11 port of docopt Updated Jul 12, 2016 Nimrod 36 4 docopt.nim Command line arguments parser that will make you smile (port of docopt to Nim) Updated Jul 11, 2016 Rust 378 64 docopt.rs Docopt for Rust (command line argument parser). Updated Jul 5, 2016 Python 4,477 353 docopt Pythonic command line arguments parser, that will make you smile Updated Jul 5, 2016 C# 142 19 docopt.net Port of docopt to .net Updated Jun 14, 2016 R 52 7 docopt.R Command-line interface description language for R (http:docopt.org) Updated Jun 13, 2016 Go 686 49 docopt.go A command-line arguments parser that will make you smile. Updated May 12, 2016 CSS 32 11 try.docopt.org Try out docopt in browser (Flask app running on Heroku) Updated May 6, 2016 Tcl 15 7 docopt.org The website Updated May 1, 2016 C 198 25 docopt.c C-code generator for docopt language. Updated Apr 24, 2016 D 25 6 docopt.d Updated Apr 9, 2016 Java 80 13 docopt.java Java port of docopt Updated Feb 28, 2016 Swift 32 3 docopt.swift A command-line interface description language and parser that will make you smile http://docopt.org/ Updated Feb 12, 2016 Julia 23 10 DocOpt.jl command line arguments parser Updated Feb 7, 2016 F# 7 1 docopt.fs Docopt for F# Updated Feb 2, 2016 Haskell 70 11 docopt.hs A command-line interface description language and parser that will make you smile Updated Dec 7, 2015 PHP 211 15 docopt.php Updated Oct 30, 2015 CoffeeScript 137 17 docopt.coffee docopt - A command line option parser that will make you smile. Updated May 23, 2015 Python 169 17 docopts Shell interpreter for docopt, the command-line interface description language. Updated Mar 21, 2015 Scala 31 4 docopt.scala Scala implementation of docopt language Updated Jun 30, 2014 Previous 1 2 Next 16 People Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/docopt/"	"A port"	"true"
"Cli Builders"	"optarg"	"https://github.com/mosop/optarg"	"Yet another library for parsing command-line options and arguments"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5"	"1"	"0"	"GitHub - mosop/optarg: Yet another Crystal library for parsing command-line options and arguments. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 5 Fork 0 mosop/optarg Code Issues 0 Pull requests 0 Pulse Graphs Yet another Crystal library for parsing command-line options and arguments. 81 commits 1 branch 22 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.14 v0.1.13 v0.1.12 v0.1.11 v0.1.10 v0.1.9 v0.1.8 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec fix: raise UnknownOption when concatenated options not matched Jul 15, 2016 src 0.2.6 Jul 15, 2016 .gitignore .travis.yml 0.1.0 Apr 26, 2016 LICENSE README.md shard.yml 0.2.6 Jul 15, 2016 README.md optarg Yet another Crystal library for parsing command-line options and arguments. optarg is good enough for parsing options. However there's no feature for formatting help, subcommands... etc. If you prefer a more feature-rich library, try cli. Installation Add this to your application's shard.yml: dependencies:   optarg:     github: mosop/optarg Features Accessor class Model < Optarg::Model   string ""--foo"" end  result = Model.parse(%w(--foo bar)) result.foo # => ""bar"" Nilable Accessor class Model < Optarg::Model   string ""--foo"" end  result = Model.parse(%w()) result.foo? # => nil result.foo # raises KeyError Synonyms class Model < Optarg::Model   string %w(-f --file) end  result = Model.parse(%w(-f foo.cr)) result.f # => ""foo.cr"" result.file # => ""foo.cr"" Boolean class Model < Optarg::Model   bool ""-b"" end  result = Model.parse(%w(-b)) result.b? # => true Array class Model < Optarg::Model   array ""-e"" end  result = Model.parse(%w(-e foo -e bar -e baz)) result.e # => [""foo"", ""bar"", ""baz""] Concatenation class Model < Optarg::Model   bool ""-a""   bool ""-b"" end  result = Model.parse(%w(-ab)) result.a? # => true result.b? # => true Default Value class Model < Optarg::Model   string ""-s"", default: ""string""   bool ""-b"", default: false   array ""-a"", default: %w(1 2 3) end  result = Model.parse(%w()) result.s  # => ""string"" result.b? # => false result.a  # => [""1"", ""2"", ""3""] Negation class Model < Optarg::Model   bool ""-b"", default: true, not: ""-B"" end  result = Model.parse(%w(-B)) result.b? # => false Arguments class Model < Optarg::Model   string ""-s""   bool ""-b"" end  result = Model.parse(%w(-s foo -b bar -- baz)) result.args # => [""bar""] result.unparsed_args # => [""baz""] Named Argument class Model < Optarg::Model   arg ""src_dir""   arg ""build_dir"" end  result = Model.parse(%w(/path/to/src /path/to/build and more)) result.src_dir # => ""/path/to/src"" result.args.src_dir # => ""/path/to/src"" result.build_dir # => ""/path/to/build"" result.args.build_dir # => ""/path/to/build"" result.args # => [""/path/to/src"", ""/path/to/build"", ""and"", ""more""] result.args.named # => {""src_dir"" => ""/path/to/src"", ""build_dir"" => ""/path/to/build""} result.args.nameless # => [""and"", ""more""] Inheritance (Reusable Model) class Animal < Optarg::Model   bool ""--sleep"" end  class Cat < Animal   bool ""--mew"" end  class Dog < Animal   bool ""--woof"" end  Cat.parse(%w()).responds_to?(:sleep?) # => true Dog.parse(%w()).responds_to?(:sleep?) # => true Handler class Model < Optarg::Model   on(""--goodbye"") { goodbye! }    def goodbye!     raise ""Goodbye, world!""   end end  Model.parse %w(--goodbye) # raises ""Goodbye, world!"" Required Arguments and Options class Profile < Optarg::Model   string ""--birthday"", required: true end  Profile.parse %w() # raises a Required exception. class Compile < Optarg::Model   arg ""source_file"", required: true end  Compile.parse %w() # raises a Required exception. Minimum Length of Array class Multiply < Optarg::Model   array ""-n"", min: 2    def run     puts options.n.reduce{|n1, n2| n1 * n2}   end end  Multiply.parse %w(-n 794) # raises a MinimumLength exception. Custom Initializer class The   def message     ""Someday again!""   end end  class Model < Optarg::Model   def initialize(argv, @the : The)     super argv   end    on(""--goodbye"") { raise @the.message } end  Model.new(%w(--goodbye), The.new).parse # raises ""Someday again!"" Usage require ""optarg"" and see Features. Release Notes v0.2.0 (Breaking Change) Model#args separates arguments into named and nameless. #args itself returns both named and nameless arguments. v0.1.14 Required Arguments and Options Minimum Length of Array v0.1.13 Accessible Argument v0.1.12 Array v0.1.9 Concatenation v0.1.3 Custom Initializer v0.1.2 Synonyms v0.1.1 Handler Development [WIP] Contributing Fork it ( https://github.com/mosop/optarg/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors mosop - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mosop/optarg"	"Yet another library for parsing command-line options and arguments"	"true"
"Configuration"	"ambience"	"https://github.com/vjdhama/ambience"	"Simple app configuration using."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"3"	"3"	"GitHub - vjdhama/ambience: App configuration using ENV for crystal applications. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 7 Fork 3 vjdhama/ambience Code Issues 1 Pull requests 0 Pulse Graphs App configuration using ENV for crystal applications. 36 commits 1 branch 14 releases 2 contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.4.1 v0.4.0 v0.3.9 v0.3.8 v0.3.7 v0.3.6 v0.3.5 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit c543edd May 21, 2016 vjdhama removed wrong warning Permalink Failed to load latest commit information. examples/kemal/your_app updated kemal to latest version for example May 1, 2016 spec upgraded development dependencies Apr 2, 2016 src removed wrong warning May 21, 2016 .gitignore updated kemal to latest version for example Apr 30, 2016 .travis.yml initial empty commit Nov 2, 2015 LICENSE initial empty commit Nov 1, 2015 README.md removed wrong warning May 20, 2016 shard.yml removed wrong warning May 20, 2016 README.md ambience App configuration using ENV for Crystal applications inspired by figaro. Installation Add this to your application's shard.yml: dependencies:   ambience:     github: vjdhama/ambience     version: 0.4.2 Usage require ""ambience""  Ambience.application(""configuration_file_path"", ""environment"") Ambience.load Refer example kemal application for more insight. Example configuration file api_url: example.com development:   app_id: foobar123   app_key: barfoo123  production:   app_id: bar123foo   app_key: 123foobar TODO'S Convenience Proxy Methods. Required keys convenience method. Cli for Ambience. Add examples for frost. Add examples for kemal. Contributing Fork it ( https://github.com/vjdhama/ambience/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors vjdhama - Vijay Dhama : creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vjdhama/ambience"	"Simple app configuration using."	"true"
"Configuration"	"crystal-toml"	"https://github.com/manastech/crystal-toml"	"TOML parser"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"3"	"1"	"GitHub - manastech/crystal-toml: TOML parser for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 14 Fork 1 manastech/crystal-toml Code Issues 2 Pull requests 2 Pulse Graphs TOML parser for Crystal 19 commits 2 branches 4 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.4.0 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml README.md shard.yml README.md crystal-toml A TOML parser for Crystal, compliant with the v0.4.0 version of TOML. Documentation Projectfile deps do   github ""manastech/crystal-toml"" end Usage require ""toml""  toml_string = %(   title = ""TOML Example""    [owner]   name = ""Lance Uppercut""   dob = 1979-05-27T07:32:00Z )  toml = TOML.parse(toml_string) puts toml[""title""] #=> ""TOML Example""  owner = toml[""owner""] as Hash puts owner[""name""] #=> ""Lance Uppercut"" puts owner[""dob""]  #=> ""1979-05-27 07:32:00 UTC"" Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/manastech/crystal-toml"	"TOML parser"	"true"
"Data Generators"	"faker"	"https://github.com/askn/faker"	"A library for generating fake data"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"40"	"1"	"1"	"GitHub - askn/faker: Faker is a Crystal library that generates fake data for you Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 40 Fork 1 askn/faker Code Issues 0 Pull requests 0 Pulse Graphs Faker is a Crystal library that generates fake data for you 26 commits 1 branch 1 release 1 contributor Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1 Nothing to show New pull request Latest commit fb5c470 Mar 28, 2016 askn commerce Permalink Failed to load latest commit information. examples add Address.country_code Mar 28, 2016 spec commerce Mar 28, 2016 src commerce Mar 28, 2016 .gitignore first commit Jan 5, 2016 .travis.yml first commit Jan 5, 2016 LICENSE first commit Jan 5, 2016 README.md commerce Mar 28, 2016 shard.yml first commit Jan 5, 2016 README.md faker This shard is a port of Faker gem that generates fake data. Installation Add this to your application's shard.yml: dependencies:   faker:     github: askn/faker Usage require ""faker""  Faker::Name.name  Faker::Address Faker::Address.city #=> ""Imogeneborough""  Faker::Address.street_name #=> ""Larkin Fork""  Faker::Address.street_address #=> ""282 Kevin Brook""  Faker::Address.secondary_address #=> ""Apt. 672""  Faker::Address.building_number #=> ""7304""  Faker::Address.zip_code #=> ""58517""  Faker::Address.postcode #=> ""58517""  Faker::Address.time_zone #=> ""Asia/Yakutsk""  Faker::Address.street_suffix #=> ""Street""  Faker::Address.city_suffix #=> ""fort""  Faker::Address.city_prefix #=> ""Lake""  Faker::Address.state #=> ""California""  Faker::Address.state_abbr #=> ""AP""   Faker::Address.country #=> ""French Guiana""  Faker::Address.country_code #=> ""IT""  Faker::Address.latitude #=> ""-58.17256227443719""  Faker::Address.longitude #=> ""-156.65548382095133""  Faker::Business Faker::Business.credit_card_number #=> ""1228-1221-1221-1431""  Faker::Business.credit_card_expiry_date #=> <Time: 2015-11-11>  Faker::Business.credit_card_type #=> ""visa""   Faker::Commerce Faker::Commerce.color #=> ""lavender""  # Optional arguments max=3, fixed_amount=false Faker::Commerce.department #=> ""Grocery, Health & Beauty"" Faker::Commerce.department(5) #=> ""Grocery, Books, Health & Beauty"" Faker::Commerce.department(2, true) #=> ""Books & Tools""  Faker::Commerce.product_name #=> ""Practical Granite Shirt""  Faker::Commerce.price #=> ""44.6""  Faker::Commerce.material #=> ""Plastic""  Faker::Company Faker::Company.name #=> ""Hirthe-Ritchie""  Faker::Company.suffix #=> ""Group""  # Get a random company logo url in PNG format. Faker::Company.logo #=> ""https://pigment.github.com/fake-logos/logos/medium/color/5.png""  Faker::Internet # Optional argument name=nil Faker::Internet.email #=> ""eliza@mann.net""  Faker::Internet.email('Nancy') #=> ""nancy@terry.biz""  # Optional argument name=nil Faker::Internet.free_email #=> ""freddy@gmail.com""  Faker::Internet.free_email('Nancy') #=> ""nancy@yahoo.com""  # Optional argument name=nil Faker::Internet.safe_email #=> ""christelle@example.org""  Faker::Internet.safe_email('Nancy') #=> ""nancy@example.net""  # Optional arguments specifier=nil, separators=%w(. _) Faker::Internet.user_name #=> ""alexie""  Faker::Internet.user_name('Nancy') #=> ""nancy""  Faker::Internet.user_name('Nancy Johnson', %w(. _ -)) #=> ""johnson-nancy""  # Optional arguments: min_length=8, max_length=16 Faker::Internet.password #=> ""vg5msvy1uerg7""  Faker::Internet.password(8) #=> ""yfgjik0hgzdqs0""  Faker::Internet.password(10, 20) #=> ""eoc9shwd1hwq4vbgfw""  Faker::Internet.password(10, 20, true) #=> ""3k5qS15aNmG""  Faker::Internet.password(10, 20, true, true) #=> ""*%NkOnJsH4""  Faker::Internet.domain_name #=> ""effertz.info""  Faker::Internet.domain_word #=> ""haleyziemann""  Faker::Internet.domain_suffix #=> ""info""  Faker::Internet.ip_v4_address #=> ""24.29.18.175""  Faker::Internet.ip_v6_address #=> ""ac5f:d696:3807:1d72:2eb5:4e81:7d2b:e1df""  # Optional argument prefix='' Faker::Internet.mac_address #=> ""e6:0d:00:11:ed:4f"" Faker::Internet.mac_address('55:44:33') #=> ""55:44:33:02:1d:9b""  # Optional arguments: host=domain_name, path=""/#{user_name}"" Faker::Internet.url #=> ""http://thiel.com/chauncey_simonis"" Faker::Internet.url('example.com') #=> ""http://example.com/clotilde.swift"" Faker::Internet.url('example.com', '/foobar.html') #=> ""http://example.com/foobar.html""  # Optional arguments: words=nil, glue=nil Faker::Internet.slug #=> ""pariatur_laudantium"" Faker::Internet.slug('foo bar') #=> ""foo.bar"" Faker::Internet.slug('foo bar', '-') #=> ""foo-bar""   Faker::Lorem Faker::Lorem.word #=> ""repellendus""  # Optional arguments: num=3, supplemental=false Faker::Lorem.words #=> [""dolores"", ""adipisci"", ""nesciunt""] Faker::Lorem.words(4) #=> [""culpa"", ""recusandae"", ""aut"", ""omnis""] Faker::Lorem.words(4, true) #=> [""colloco"", ""qui"", ""vergo"", ""deporto""]  # Optional arguments: char_count=255 Faker::Lorem.characters #=> ""uw1ep04lhs0c4d931n1jmrspprf5wrj85fefue0y7y6m56b6omquh7br7dhqijwlawejpl765nb1716idmp3xnfo85v349pzy2o9rir23y2qhflwr71c1585fnynguiphkjm8p0vktwitcsm16lny7jzp9t4drwav3qmhz4yjq4k04x14gl6p148hulyqioo72tf8nwrxxcclfypz2lc58lsibgfe5w5p0xv95peafjjmm2frkhdc6duoky0aha"" Faker::Lorem.characters(10) #=> ""ang9cbhoa8""  # Optional arguments: word_count=4, supplemental=false, random_words_to_add=6 Faker::Lorem.sentence #=> ""Dolore illum animi et neque accusantium."" Faker::Lorem.sentence(3) #=> ""Commodi qui minus deserunt sed vero quia."" Faker::Lorem.sentence(3, true) #=> ""Inflammatio denego necessitatibus caelestis autus illum."" Faker::Lorem.sentence(3, false, 4) #=> ""Aut voluptatem illum fugit ut sit."" Faker::Lorem.sentence(3, true, 4) #=> ""Accusantium tantillus dolorem timor.""  # Optional arguments: sentence_count=3, supplemental=false Faker::Lorem.sentences #=> [""Vero earum commodi soluta."", ""Quaerat fuga cumque et vero eveniet omnis ut."", ""Cumque sit dolor ut est consequuntur.""] Faker::Lorem.sentences(1) #=> [""Ut perspiciatis explicabo possimus doloribus enim quia.""] Faker::Lorem.sentences(1, true) #=> [""Quis capillus curo ager veritatis voro et ipsum.""]  # Optional arguments: sentence_count=3, supplemental=false, random_sentences_to_add=3 Faker::Lorem.paragraph #=> ""Neque dicta enim quasi. Qui corrupti est quisquam. Facere animi quod aut. Qui nulla consequuntur consectetur sapiente."" Faker::Lorem.paragraph(2) #=> ""Illo qui voluptas. Id sit quaerat enim aut cupiditate voluptates dolorum. Porro necessitatibus numquam dolor quia earum."" Faker::Lorem.paragraph(2, true) #=> """" Faker::Lorem.paragraph(2, false, 4) #=> ""Neque aut et nemo aut incidunt voluptates. Dolore cum est sint est. Vitae assumenda porro odio dolores fugiat. Est voluptatum quia rerum."" Faker::Lorem.paragraph(2, true, 4) #=> ""Vomito unde uxor annus. Et patior utilis sursum.""  # Optional arguments: paragraph_count=3, supplemental=false Faker::Lorem.paragraphs #=> """" Faker::Lorem.paragraphs(1) #=> """" Faker::Lorem.paragraphs(1, true) #=> """"   Faker::Name Faker::Name.name #=> ""Tyshawn Johns Sr.""  Faker::Name.first_name #=> ""Kaci""  Faker::Name.last_name #=> ""Ernser""  Faker::Name.prefix #=> ""Mr.""  Faker::Name.suffix #=> ""IV""  Faker::Name.title #=> ""Legacy Creative Director""   Faker::Number # Required parameter: digits Faker::Number.number(10) #=> ""1968353479""  # Required parameter: l_digits Faker::Number.decimal(2) #=> ""11.88""  Faker::Number.decimal(2, 3) #=> ""18.843""  # Required parameter: digits Faker::Number.hexadecimal(3) #=> ""e74""  Faker::Number.between(1, 10) #=> 7  Faker::Number.positive #=> 235.59238499107653  Faker::Number.negative #=> -4480.042585669558  Faker::Number.digit #=> ""1""   Faker::PhoneNumber Faker::PhoneNumber.phone_number #=> ""397.693.1309""  Faker::Hacker Are you having trouble writing tech-savvy dialogue for your latest screenplay? Worry not! Hollywood-grade technical talk is ready to fill out any form where you need to look smart. # Full Phrase Faker::Hacker.say_something_smart #=> ""Try to compress the SQL interface, maybe it will program the back-end hard drive!""  # Short technical abbreviations Faker::Hacker.abbreviation  #=> ""RAM""  # Hacker centric adjectives Faker::Hacker.adjective   #=> ""open-source""  # Only the best hacker related nouns Faker::Hacker.noun   #=> ""bandwidth""  # Actions that hackers take Faker::Hacker.verb  #=> ""bypass""  # Verbs that end in -ing Faker::Hacker.ingverb #=> ""synthesizing"" Faker::Team # Random Team Creature Faker::Team.creature #=> ""gooses""  # Random Team Name created from random US State (Faker::Address.state) prepended to a random Team Creature Faker::Team.name #=> ""Oregon vixens""  # Random Team State Faker::Team.state #=> ""Oregon""  Contributing Fork it ( https://github.com/askn/faker/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am ""Add some feature"") Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors askn Aşkın Gedik - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/askn/faker"	"A library for generating fake data"	"true"
"Database Drivers"	"crystal-monetdb-libmapi"	"https://github.com/puppetpies/crystal-monetdb-libmapi"	"Bindings for MonetDB"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"0"	"GitHub - puppetpies/crystal-monetdb-libmapi: Crystal bindings for MonetDB Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 0 puppetpies/crystal-monetdb-libmapi Code Issues 0 Pull requests 0 Pulse Graphs Crystal bindings for MonetDB 181 commits 1 branch 0 releases Fetching contributors Crystal 75.4% Ruby 23.7% Makefile 0.9% Crystal Ruby Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. bin examples src .gitignore .travis.yml MIT-LICENSE Makefile README.md insperf.cr insperf_fiber.cr quick.cr shard.lock shard.yml README.md crystal-monetdb-libmapi Crystal binding for the MonetDB MAPI client interface This is currently experimental and needs a lot of work ! You will need the MonetDB client package installed for this to work and also an instance of MServer5 running We can now perform a query that emits JSON useful for SELECT statements For more details look at monetdb.org Examples schemas provided under examples/ # Example code from shard crystal-monetdb-examples  require ""crystal-monetdb-libmapi"" require ""crystal-monetdb-libmapi/monetdb_data"" require ""colorize""  class ConnectionError < Exception; end class QueryError < Exception; end class InternalError < Exception; end class TimeoutError < Exception; end  host = ""127.0.0.1"" port = 50000 username = ""monetdb"" password = ""monetdb"" db = ""threatmonitor""  mero = MonetDB::ClientJSON.new mero.host = host mero.port = port mero.username = username mero.password = password mero.db = db  myschema = ""\""threatmonitor\""""  query = ""SELECT * FROM #{myschema}.fruits;"" mid = mero.connect result_json = mero.query_json(query) result = mero.json_to_hash(result_json) puts ""Hash Created:"".colorize(:red) p result puts ""Display specific fields"".colorize(:red) result.each {|k,v|   puts ""Hash Key: #{k} Name: #{v[""name""]} Price: #{v[""price""]}"" }  Have fun! Brian Hood Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/puppetpies/crystal-monetdb-libmapi"	"Bindings for MonetDB"	"true"
"Database Drivers"	"crystal-mysql"	"https://github.com/waterlink/crystal-mysql"	"Basic MySQL bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"33"	"2"	"10"	"GitHub - waterlink/crystal-mysql: Basic mysql bindings for crystal. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 33 Fork 10 waterlink/crystal-mysql Code Issues 9 Pull requests 1 Pulse Graphs Basic mysql bindings for crystal. 133 commits 1 branch 10 releases Fetching contributors Crystal 99.1% Shell 0.9% Crystal Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.0 v0.2.1 v0.2.0 v0.1.0 v0.0.2 v0.0.1 Nothing to show New pull request Latest commit 26ef2b4 May 8, 2016 waterlink Release 0.4.3 Permalink Failed to load latest commit information. libs Make it Projectfile compatible; Remove strange error handling from My… Mar 10, 2015 script cover #connect Mar 15, 2015 spec allow blob types Mar 18, 2016 src Upgrade to Crystal 0.16.0 May 8, 2016 .gitignore Support shards package manager Sep 27, 2015 .travis.yml Crystal is now community supported on Travis CI Jun 30, 2015 LICENSE Add MIT Mar 10, 2015 README.md Release 0.4.2 Apr 2, 2016 shard.yml Release 0.4.3 May 8, 2016 README.md crystal-mysql Fork of https://github.com/farleyknight/crystal-mysql Basic MySQL bindings for Crystal. CAUTION: Pre-alpha quality. Don't use for anything serious. Any bug reports and feedback are warmly welcome! Installation Add it to your shard.yml dependencies:   mysql:     github: waterlink/crystal-mysql     version: ~> 0.4 Usage require ""mysql"" Connecting to mysql # MySQL.connect(host, user, password, database, port, socket, flags = 0) conn = MySQL.connect(""127.0.0.1"", ""crystal_mysql"", """", ""crystal_mysql_test"", 3306_u16, nil) Making a query conn.query(%{SELECT 1})  #=> [[1]]  conn.query(%{CREATE TABLE user (id INT, email VARCHAR(255), name VARCHAR(255))})  conn.query(%{INSERT INTO user(id, email, name) values(1, ""john@example.com"", ""John Smith"")}) conn.query(%{INSERT INTO user(id, email, name) values(2, ""sarah@example.com"", ""Sarah Smith"")})  conn.query(%{SELECT * FROM user}) #=> [[1, ""john@example.com"", ""John Smith""], [2, ""sarah@example.com"", ""Sarah Smith""]]  conn.query(%{DROP TABLE user}) Using higher level Query api MySQL::Query   .new(%{SELECT * FROM user WHERE created_at > :from_filter},        { ""from_filter"" => 14.days.ago })   .run(conn) You can reference parameters in query with symbol-like syntax: :some_symbol_like_syntax or :someSymbolLikeSyntax. And then you can resolve these references with passing a hash as a second argument, which specifies values for these parameters. By the way all strings get properly escaped, so no SQL injections should be possible (if something is not escaped properly, then it is a bug, and you should probably report it here on github). You can reference the same symbol multiple times in one query, as well you can use as much symbols as you want. Making a transaction other_conn = MySQL.connect(""127.0.0.1"", ""crystal_mysql"", """", ""crystal_mysql_test"", 3306_u16, nil)  conn.transaction do   conn.query(%{SELECT COUNT(id) FROM user})  #=> 2   conn.query(%{INSERT INTO user(id, email, name) values(1, ""james@example.com"", ""James Smith"")})    conn.query(%{SELECT COUNT(id) FROM user})  #=> 3   other_conn.query(%{SELECT COUNT(id) FROM user})  #=> 2 end  conn.query(%{SELECT COUNT(id) FROM user})  #=> 3 other_conn.query(%{SELECT COUNT(id) FROM user})  #=> 3 If block provided for #transaction raises exception, then it will rollback transaction automatically. You can use #start_transaction, #commit_transaction and #rollback_transaction manually: begin   conn.start_transaction   # .. do stuff with conn ..   conn.commit_transaction rescue   conn.rollback_transaction end Nested transactions are possible. Closing connection conn.close Notes This library assumes tinyint is used as boolean type. High-level API roadmap High level method Implemented? MySQL.connect Yes Connection#initialize Yes Connection#client_info Yes Connection#error Yes Support#escape_string Yes Connection#connect Yes Connection#host_info No Connection#query 72% (usable) Connection#start_transaction Yes Connection#commit_transaction Yes Connection#rollback_transaction Yes Connection#transaction Yes Connection#close Yes Query#to_mysql Yes Query#run Yes TODO Support more types: Enum, Set, Geometry, Binary strings Figure out utf-8 (and other collations) support Set up CI for different versions of mysql, ie: 5.5, 5.6, 5.7 Set up CI for mac os x Figure out 32bit support? Contributing Fork it ( https://github.com/waterlink/crystal-mysql/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors waterlink - maintainer farleyknight - original idea Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/waterlink/crystal-mysql"	"Basic MySQL bindings"	"true"
"Database Drivers"	"crystal-pg"	"https://github.com/will/crystal-pg"	"A Postgres driver"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"98"	"12"	"21"	"GitHub - will/crystal-pg: a postgres driver for crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 98 Fork 21 will/crystal-pg Code Issues 3 Pull requests 1 Pulse Graphs a postgres driver for crystal 174 commits 6 branches 15 releases 10 contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.6.1 crystal-nightly-travis master next-crystal numeric-bigrational pr34 Nothing to show v0.8.0 v0.7.1 v0.7.0 v0.6.1 v0.6.0 v0.5.0 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.2 v0.3.1 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit cafe3e9 Jun 17, 2016 will 0.8.0 Permalink Failed to load latest commit information. examples decode unknown oids as byte slices May 8, 2016 spec Add property Geo types. Implements #48 (#49) Jun 16, 2016 src 0.8.0 Jun 17, 2016 .gitignore Add cleartext and md5 auth May 4, 2016 .travis.yml try out fancy crystal nightly on travis Oct 23, 2015 CHANGELOG 0.8.0 Jun 18, 2016 CONTRIBUTING CONTRIBUTING Apr 28, 2015 CONTRIBUTORS update changelog and contributors Jun 16, 2016 LICENSE LICENSE Apr 26, 2015 README.md Add property Geo types. Implements #48 (#49) Jun 16, 2016 shard.yml 0.8.0 Jun 18, 2016 README.md crystal-pg A Postgres driver for Crystal usage shards Add this to your shard.yml and run crystal deps dependencies:   pg:     github: will/crystal-pg connecting require ""pg"" DB = PG.connect(""postgres://..."") typed querying The preferred way to send queries is to send a tuple of the types you expect back along with the query. #rows will then be an array of tuples with each element properly casted. You can also use parameterized queries for injection-safe server-side interpolation. result = DB.exec({Int32, String}, ""select id, email from users"") result.fields  #=> [PG::Result::Field, PG::Result::Field] result.rows    #=> [{1, ""will@example.com""}], …] result.to_hash #=> [{""field1"" => value, …}, …]  result = DB.exec({String}, ""select $1::text || ' ' || $2::text"", [""hello"", ""world""]) result.rows #=> [{""hello world""}] Out of the box, crystal-pg supports 1-32 types. If you need more, you can reopen PG::Result and use the generate_gather_rows macro. If your field can return nil, you should use Int32|Nil for example, which is a union of the type and Nil. untyped querying If you do not know the types beforehand you can omit them. However you will get back an array of arrays of PGValue. Since it is a union type of amost every type, you will probably have to manually cast later on in your program. result = DB.exec(""select * from table"") result.fields  #=> [PG::Result::Field, …] result.rows    #=> [[value, …], …] result.to_hash #=> [{""field1"" => value, …}, …]  result = DB.exec(""select $1::text || ' ' || $2::text"", [""hello"", ""world""]) result.rows #=> [[""hello world""]] Requirements Crystal-pg is tested on Postgres versions 9.1 through 9.4 and developed on 9.5 (travis does not currently have 9.5 support). Since it uses protocal version 3, older versions probably also work but are not guaranteed. Linking requires that the pg_config binary is in your $PATH and returns correct results for pg_config --includedir and pg_config --libdir. Supported Datatypes text boolean int8, int2, int4 float4, float8 timestamptz, date, timestamp (but no one should use ts when tstz exists!) json and jsonb uuid bytea numeric/decimal (1) varchar regtype geo types: point, box, path, lseg, polygon, circle, line 1: A note on numeric: In postgres this type has arbitrary percision. In this driver, it is represented as a PG::Numeric which retians all precision, but if you need to do any math on it, you will probably need to cast it to a float first. If you need true abitrary percision, you can optionally require pg_ext/big_rational which adds #to_big_r, but requires that you have LibGMP installed. Connection Pooling If you would like a connection pool, check out ysbaddaden/pool Todo more datatypes (ranges, hstore) more info in postgres exceptions transaction help Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/will/crystal-pg"	"A Postgres driver"	"true"
"Database Drivers"	"crystal-redis"	"https://github.com/stefanwille/crystal-redis"	"Full featured Redis client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"106"	"10"	"14"	"GitHub - stefanwille/crystal-redis: Full featured Redis client for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 106 Fork 14 stefanwille/crystal-redis Code Issues 4 Pull requests 0 Pulse Graphs Full featured Redis client for Crystal 255 commits 2 branches 17 releases Fetching contributors Crystal 99.9% Ruby 0.1% Crystal Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.6.5 v1.6.4 v1.6.3 v1.6.2 v1.6.1 v1.6.0 v1.5.2 v1.5.1 v1.5.0 v1.4.0 v1.3.1 v1.3.0 v1.2.1 v1.2.0 v1.1.0 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit c9a8c90 Jun 27, 2016 stefanwille Add doc comment Permalink Failed to load latest commit information. examples Add placeholder examples directory May 15, 2015 spec Rename Redis#location -> #name Jun 27, 2016 src Add doc comment Jun 27, 2016 .gitignore Update .gitignore May 19, 2015 CHANGELOG.md Replace CHANGELOG by GitHub releases page Apr 17, 2016 CONTRIBUTING.md Improve documentation May 2, 2015 LICENSE README.md Bump version number Jun 27, 2016 Rakefile Fix whitespace in Rakefile Jun 6, 2015 shard.yml Bump version number Jun 27, 2016 README.md Redis Client for Crystal A Redis client for the Crystal programming language. Features Performance (> 680,000 commands per second using pipeline on a MacBook Air with a single client thread) Pipelining Transactions LUA Scripting All string commands All hash commands All list commands All set commands All hyperloglog commands All commands for bit operations All sorted set commands Publish/subscribe Installation Add it to your shard.yml: dependencies:   redis:     github: stefanwille/crystal-redis     version: ~> 1.6.5 and then install the library into your project: $ crystal deps Required Crystal Version This library needs Crystal version >= 0.18.2 Usage Require the package:   require ""redis"" then   redis = Redis.new Then you can call Redis commands on the redis object:   redis.set(""foo"", ""bar"")   redis.get(""foo"") Examples To get started, see the examples: There is a separate git repository crystal-redis-examples with examples. start with this basic example look at the other examples the spec contains even more usage examples Documentation API documentation - start reading it at the class Redis. Redis commands documentation - the original Redis documentation is necessary, as the API documentation above is just a quick reference Redis documentation page - general information about Redis and its concepts Performance I have benchmarked Crystal-Redis against several other client libraries in various programming languages in this blog article. Here are some results: Crystal: With this library I get > 680,000 commands per second using pipeline on a MacBook Air with a single client thread. C: The equivalent program written in C with Hiredis gets me 340,000 commands per second. Ruby: Ruby 2.2.1 with the redis-rb and Hiredis driver handles 150,000 commands per second. Read more results for Go, Java, Node.js. Status I have exercised every API method in the spec and built some example programs. There is no production use yet. I took great care to make this library very usable with respect to API, reliability and documentation. Questions, Bugs & Support If you have questions or need help, please open a ticket in the GitHub issue tracker. This way others can benefit from the discussion. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/stefanwille/crystal-redis"	"Full featured Redis client"	"true"
"Database Drivers"	"crystal-sqlite3"	"https://github.com/manastech/crystal-sqlite3"	"SQLite3 bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"29"	"8"	"6"	"GitHub - crystal-lang/crystal-sqlite3: SQLite3 bindings for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 29 Fork 6 crystal-lang/crystal-sqlite3 Code Issues 0 Pull requests 0 Pulse Graphs SQLite3 bindings for Crystal 55 commits 3 branches 5 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/simple_read gh-pages master Nothing to show v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit c3fce77 Jul 14, 2016 asterite Added some casts to make it work when other drivers are loaded Permalink Failed to load latest commit information. samples spec src .gitignore .travis.yml LICENSE README.md shard.yml use crystal-db master branch Jul 5, 2016 README.md crystal-sqlite3 SQLite3 bindings for Crystal. Check crystal-db for general db driver documentation. crystal-sqlite3 driver is registered under sqlite3:// uri. Installation Add this to your application's shard.yml: dependencies:   sqlite3:     github: crystal-lang/crystal-sqlite3 Usage require ""sqlite3""  DB.open ""sqlite3://./data.db"" do |db|   db.exec ""create table contacts (name string, age integer)""   db.exec ""insert into contacts values (?, ?)"", ""John Doe"", 30    args = [] of DB::Any   args << ""Sarah""   args << 33   db.exec ""insert into contacts values (?, ?)"", args    puts ""max age:""   puts db.scalar ""select max(age) from contacts"" # => 33    puts ""contacts:""   db.query ""select name, age from contacts order by age desc"" do |rs|     puts ""#{rs.column_name(0)} (#{rs.column_name(1)})""     # => name (age)     rs.each do       puts ""#{rs.read(String)} (#{rs.read(Int32)})""       # => Sarah (33)       # => John Doe (30)     end   end end Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/manastech/crystal-sqlite3"	"SQLite3 bindings"	"true"
"Database Drivers"	"influxdb.cr"	"https://github.com/jeromegn/influxdb.cr"	"InfluxDB driver"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"1"	"0"	"GitHub - jeromegn/influxdb.cr: InfluxDB driver for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 7 Fork 0 jeromegn/influxdb.cr Code Issues 0 Pull requests 0 Pulse Graphs InfluxDB driver for Crystal 2 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. examples spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md InfluxDB.cr InfluxDB driver for Crystal. Status: Developer Preview Working on this from time to time, a lot of missing querying features. Installation Add this to your application's shard.yml: dependencies:   influxdb:     github: jeromegn/influxdb.cr Usage require ""influxdb""  client = InfluxDB::Client.new db = client.databases[""db_name""] Writing data There are many ways to write data to influxdb. Write one data point with a value: db.write ""your_series"", 10 # => true db.write ""your_series"", InfluxDB::Fields{a_field: 100, value: 10000} Write many data points: db.write do |points|   points.write ""your_series"", 10   points.write ""another_series"", 100   points.write ""another_series"", 1000, InfluxDB::Tags{a_tag: ""hello""} end # => true Write points with fields, tags and a timestamp: db.write ""your_series"", InfluxDB::Fields{a_field: 100, value: 10000},   tags: InfluxDB::Tags{region: ""us""}, timestamp: Time.now Write a point synchronously db.write ""your_series"", 10, sync: true # => true or false depending on the response Contributing Fork it ( https://github.com/jeromegn/influxdb.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors jeromegn Jerome Gravel-Niquet - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jeromegn/influxdb.cr"	"InfluxDB driver"	"true"
"Database Drivers"	"mongo.cr"	"https://github.com/datanoise/mongo.cr"	"Binding for MongoDB C driver"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"30"	"5"	"8"	"GitHub - datanoise/mongo.cr: Crystal binding for MongoDB C Driver Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 30 Fork 8 datanoise/mongo.cr Code Issues 2 Pull requests 2 Pulse Graphs Crystal binding for MongoDB C Driver 34 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 36d0956 Jun 14, 2016 Kent Sibilev fixed crash and some specs Permalink Failed to load latest commit information. spec fixed crash and some specs Jun 14, 2016 src .gitignore initial bson version May 6, 2015 LICENSE added readme May 9, 2015 README.md upgraded to crystal 0.9 Oct 19, 2015 README.md mongo.cr This library provides binding for MongoDB C Driver. Status Beta Requirements Crystal language version 0.9 and higher. libmongoc version 1.1.0 libbson verion 1.1.0 On Mac OSX use homebrew to install the required libraries: $ brew install libbson $ brew install mongo-c  Goal The goal is to provide a driver to access MongoDB. Usage require ""./mongo""  client = Mongo::Client.new ""mongodb://localhost"" db = client[""my_db""]  collection = db[""my_collection""] collection.insert({""name"" => ""James Bond"", ""age"" => 37})  collection.find({""age"" => {""$gt"" => 30}}) do |doc|   puts doc end License MIT clause - see LICENSE for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/datanoise/mongo.cr"	"Binding for MongoDB C driver"	"true"
"Database Drivers"	"rethinkdb-crystal"	"https://github.com/lbguilherme/rethinkdb-crystal"	"RethinkDB Driver"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9"	"1"	"1"	"GitHub - CubosTecnologia/rethinkdb-crystal: RethinkDB Driver for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 9 Fork 1 CubosTecnologia/rethinkdb-crystal Code Issues 0 Pull requests 1 Pulse Graphs RethinkDB Driver for Crystal 41 commits 1 branch 0 releases 1 contributor Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit f5ee167 Jun 28, 2016 lbguilherme Support time span Permalink Failed to load latest commit information. spec Enable all pending specs Jun 17, 2016 src Support time span Jun 28, 2016 .gitignore Initial commit May 29, 2016 .travis.yml Initial commit May 29, 2016 LICENSE Initial commit May 29, 2016 README.md Add r.connect overload taking named arguments Jun 7, 2016 shard.yml Initial commit May 29, 2016 README.md rethinkdb-crystal This is a RethinkDB Driver for the Crystal Language. WARNING: This library is not ready, a LOT of functions are not implemented yet. Installation Add this to your application's shard.yml: dependencies:   rethinkdb-crystal:     github: CubosTecnologia/rethinkdb-crystal Usage This library is meant to be compactible with RethinkDB's Ruby API. Thus, all official documentation should be valid here. If you find something that behaves differently, please open an issue. require ""rethinkdb-crystal"" include RethinkDB::Shortcuts  # Let’s connect and create a table:  conn = r.connect(host: ""localhost"") r.db(""test"").table_create(""tv_shows"").run(conn)  # Now, let’s insert some JSON documents into the table:  r.table(""tv_shows"").insert([   {name: ""Star Trek TNG"", episodes: 178},   {name: ""Battlestar Galactica"", episodes: 75} ]).run(conn)  # We’ve just inserted two rows into the tv_shows table. Let’s verify the number of rows inserted:  pp r.table(""tv_shows"").count().run(conn)  # Finally, let’s do a slightly more sophisticated query. Let’s find all shows with more than 100 episodes.  p r.table(""tv_shows"").filter {|show| show[""episodes""] > 100 }.run(conn).to_a  # As a result, we of course get the best science fiction show in existence. Contributing Fork it ( https://github.com/CubosTecnologia/rethinkdb-crystal/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors Cubos Tecnologia lbguilherme - maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lbguilherme/rethinkdb-crystal"	"RethinkDB Driver"	"true"
"Database Tools"	"micrate"	"https://github.com/juanedi/micrate"	"Database migration tool"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9"	"2"	"1"	"GitHub - juanedi/micrate: Database migration tool written in Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 9 Fork 1 juanedi/micrate Code Issues 0 Pull requests 0 Pulse Graphs Database migration tool written in Crystal 28 commits 3 branches 4 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags crystal-db feature/warn-unordered-migrations master Nothing to show v0.2.2 v0.2.1 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 627fb9a Jul 7, 2016 juanedi Version bump Permalink Failed to load latest commit information. bin Added executable script for CLI usage May 24, 2016 spec #2 Refactor Jun 17, 2016 src Version bump Jul 7, 2016 .gitignore init May 23, 2016 .travis.yml init May 23, 2016 README.md Updated README Jul 2, 2016 shard.yml `dbversion` command May 23, 2016 README.md micrate Micrate is a database migration tool written in crystal. It is inspired by goose. Some code was ported from there too, so check it out. This is still a work in progress! Installation To install the standalone binary tool check out the releases page, or use homebrew: $ brew tap juanedi/micrate $ brew install micrate  To use the Crystal API, add this to your application's shard.yml: dependencies:   micrate:     github: juanedi/micrate This allows you to programatically use micrate's features. You'll see the Micrate module has an equivalent for every CLI command. If you need to use micrate's CLI without installing the tool (which could be convenient in a CI environment) you can create a simple script like the following: #! /usr/bin/env crystal require ""micrate""  Micrate::Cli.run ...and use it just as the binary program (after chmod +xing it): $ bin/micrate dbversion 0  Usage Execute micrate help for usage instructions. Micrate will connect to the postgres database specified by the PG_URL environment variable. Support for other database engines and better configuration options is on the way! To create a new migration use the create subcommand. For example, micrate create add_users_table will create a new SQL migration file with a name such as db/migrations/20160524162446_add_users_table.sql that looks like this: -- +micrate Up -- SQL in section 'Up' is executed when this migration is applied   -- +micrate Down -- SQL section 'Down' is executed when this migration is rolled back Comments that start with +micrate are interpreted by micrate when running your migrations. In this case, the Up and Down directives are used to indicate which SQL statements must be run when applying or reverting a migration. You can now go along and write your migration like this: -- +micrate Up CREATE TABLE users(id INT PRIMARY KEY, email VARCHAR NOT NULL);  -- +micrate Down DROP TABLE users; Now run it using micrate up. This command will execute all pending migrations: $ micrate up Migrating db, current version: 0, target: 20160524162947 OK   20160524162446_add_users_table.sql  $ micrate dbversion # at any time you can find out the current version of the database 20160524162446  If you ever need to roll back the last migration, you can do so by executing micrate down. There's also micrate redo which rolls back the last migration and applies it again. Last but not least: use micrate status to find out the state of each migration: $ micrate status Applied At                  Migration ======================================= 2016-05-24 16:31:07 UTC  -- 20160524162446_add_users_table.sql Pending                  -- 20160524163425_add_address_to_users.sql  If using complex statements that might contain semicolons, you must give micrate a hint on how to split the script into separate statements. You can do this with StatementBegin and StatementEnd directives: (thanks goose for this!) -- +micrate Up -- +micrate StatementBegin CREATE OR REPLACE FUNCTION histories_partition_creation( DATE, DATE ) returns void AS $$ DECLARE   create_query text; BEGIN   FOR create_query IN SELECT       'CREATE TABLE IF NOT EXISTS histories_'       || TO_CHAR( d, 'YYYY_MM' )       || ' ( CHECK( created_at >= timestamp '''       || TO_CHAR( d, 'YYYY-MM-DD 00:00:00' )       || ''' AND created_at < timestamp '''       || TO_CHAR( d + INTERVAL '1 month', 'YYYY-MM-DD 00:00:00' )       || ''' ) ) inherits ( histories );'     FROM generate_series( $1, $2, '1 month' ) AS d   LOOP     EXECUTE create_query;   END LOOP;  -- LOOP END END;         -- FUNCTION END $$ language plpgsql; -- +micrate StatementEnd  Contributing Fork it ( https://github.com/juanedi/micrate/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request TODOs Support for other database engines (currently only postgres is supported) Use common crystal API for DB access Multiple environments (development, test, production) Crystal DSL for database migrations Contributors juanedi - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/juanedi/micrate"	"Database migration tool"	"true"
"Environment Management"	"crenv"	"https://github.com/pine/crenv"	"Crystal version manager"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"93"	"7"	"2"	"GitHub - pine/crenv: Crystal version manager like rbenv. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 93 Fork 2 pine/crenv Code Issues 1 Pull requests 0 Pulse Graphs 💎 Crystal version manager like rbenv. http://crystal-lang.org/ 128 commits 2 branches 6 releases Fetching contributors Shell 100.0% Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show v1.0.1 v1.0.0 v0.1.4 v0.1.3 v0.1.2 v0.1.1 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. bin completions libexec test .gitignore .travis.yml LICENSE README.ja.md README.md install.sh README.md crenv Crystal version manager. crenv is inspired by rbenv. English | 日本語 Getting started Install crenv by anyenv (recommended) It's very easy for you to install crenv, if you use anyenv. First, you should install anyenv. Next, you try to execute following commands: $ anyenv install crenv $ exec $SHELL -l $ crenv -v crenv 1.0.0  Install crenv by install script You try to execute following commands: $ curl -L https://raw.github.com/pine/crenv/master/install.sh | bash  or $ wget -qO- https://raw.github.com/pine/crenv/master/install.sh | bash  And, please add your shell profile: $ echo 'export PATH=""$HOME/.crenv/bin:$PATH""' >> ~/.your_profile $ echo 'eval ""$(crenv init -)""' >> ~/.your_profile $ exec $SHELL -l $ crenv -v crenv 1.0.0  Install Crystal by crenv If you installed crenv, you may installed Crystal as following. $ crenv install 0.17.2 # install Crystal $ crenv global 0.17.2 # set global Crystal version $ crenv rehash  $ crystal --version Crystal 0.17.2 [91886c8] (Wed May 18 20:18:22 UTC 2016)  $ shards --version Shards 0.6.3 [65c5d1f] (2016-05-19)  Usage Please see help. $ crenv help Usage: crenv <command> [<args>]  Some useful crenv commands are:    commands    List all available crenv commands    local       Set or show the local application-specific Crystal version    global      Set or show the global Crystal version    shell       Set or show the shell-specific Crystal version    rehash      Rehash crenv shims (run this after installing executables)    version     Show the current Crystal version and its origin    versions    List all Crystal versions available to crenv    which       Display the full path to an executable    whence      List all Crystal versions that contain the given executable  See `crenv help <command>' for information on a specific command. For full documentation, see: https://github.com/pine613/crenv#readme  You might want to see rbenv#command-reference if you been looking for command reference. Installing Crystal Versions The crenv install command doesn't ship with crenv out of the box, but is provided by the crystal-build project. # list all available versions: $ crenv install -l  # install a Crystal version: $ crenv install 0.17.2  # set global Crystal version: $ crenv global 0.17.2  Updateing crenv Please execute following commands to update crenv. $ cd ~/.crenv # or ~/.anyenv/envs/crenv $ git pull origin master $ cd plugins/crystal-build $ git pull origin master  Development The crenv source code is hosted on GitHub. It's clean, modular, and easy to understand, even if you're not a shell hacker. Tests are executed using Bats: $ bats test $ bats test/<file>.bats  Contributing Fork it ( https://github.com/pine/crenv/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Acknowledgement riywo crenv is forked from ndenv. Thank you. sstephenson crenv is copied code from rbenv. Thank you. See also crystalbrew Another Crystal version manager License (The MIT license) Copyright (c) 2015-2016 Pine Mizune Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Author Pine Mizune <pinemz@gmail.com> Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pine/crenv"	"Crystal version manager"	"true"
"Environment Management"	"Snappy"	"https://github.com/shotastage/Snappy"	"Version manager for Swift, Ruby, Python and so on"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"0"	"1"	"0"	"GitHub - shotastage/Snappy: Version manager for Swift, Ruby, Python and so on. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 0 Fork 0 shotastage/Snappy Code Issues 0 Pull requests 0 Pulse Graphs Version manager for Swift, Ruby, Python and so on. https://shotastage.github.io/Snappy/ 30 commits 2 branches 0 releases 1 contributor Python 80.5% Shell 17.4% Batchfile 2.1% Python Shell Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 85c7420 Jun 27, 2016 shotastage Update source. Permalink Failed to load latest commit information. Documentations Rewrite Python code in Crystal. Jun 1, 2016 Plugins Add argparse. Jun 5, 2016 Sources Update source. Jun 27, 2016 Tools Update install script. Jun 4, 2016 .gitignore Update to Crystal project. Jun 1, 2016 .travis.yml Fix CI script. Jun 6, 2016 LICENSE Add license. May 24, 2016 README.md Update document. Jun 9, 2016 TODO.md Add argparse. Jun 5, 2016 README.md Snappy How to install You can install easily using net installer. Copy following code to terminal, and then press return. curl -O https://raw.githubusercontent.com/shotastage/Snappy/master/Tools/net_install.sh && chmod +x net_install.sh && ./net_install.sh  Usage Snappy is now under construction, so basic functions are not work. Display version of Multi Env You can use both -v and --version option. user@host$~ snap-env -v   Ver 0.0.1 | DEVELOPMENT  License This program is freely distributed under the Apache, see LICENSE for detail. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/shotastage/Snappy"	"Version manager for Swift, Ruby, Python and so on"	"true"
"Examples and funny stuff"	"crsfml-examples"	"https://github.com/BlaXpirit/crsfml-examples"	"Simple games made with CrSFML"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"13"	"2"	"2"	"GitHub - BlaXpirit/crsfml-examples: Simple games made with CrSFML Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 13 Fork 2 BlaXpirit/crsfml-examples Code Issues 0 Pull requests 0 Pulse Graphs Simple games made with CrSFML https://github.com/BlaXpirit/crsfml 26 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 856f619 Jul 14, 2016 BlaXpirit Specify types for language compatibility Permalink Failed to load latest commit information. 2048 cube minesweeper slither tetrominos .gitignore README.md Add Slither Sep 11, 2015 README.md CrSFML Examples 2048 Tetrominos Slither Minesweeper Work in progress Cube Rotating cube demonstrating usage of OpenGL Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BlaXpirit/crsfml-examples"	"Simple games made with CrSFML"	"true"
"Examples and funny stuff"	"crystal-patterns"	"https://github.com/veelenga/crystal-patterns"	"Examples of GOF patters"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"1"	"0"	"GitHub - veelenga/crystal-patterns: Examples of GOF patterns written in Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 15 Fork 0 veelenga/crystal-patterns Code Issues 0 Pull requests 0 Pulse Graphs 📖 Examples of GOF patterns written in Crystal 24 commits 1 branch 0 releases Fetching contributors Crystal 98.0% Shell 2.0% Crystal Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 7c20180 Jun 15, 2016 veelenga crystal build -> crystal compile Permalink Failed to load latest commit information. behavioral creational Categorise by type and build script Jan 2, 2016 structural .travis.yml LICENSE README.md rebuild.sh crystal build -> crystal compile Jun 15, 2016 README.md Crystal patterns Design patterns completely implemented in Crystal language. The goal is to have a quick set of examples of GOF patterns for Crystal users. Available implementations Behavioral Command Iterator Observer Strategy Template Creational Abstract Factory Structural Composite Contribution If you found any inconsistency, want to impove existed implementation or add a new one, pull requests are welcome. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/veelenga/crystal-patterns"	"Examples of GOF patters"	"true"
"Examples and funny stuff"	"crystal_samples"	"https://github.com/tbpgr/crystal_samples"	"Variety of Crystal samples"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"4"	"0"	"GitHub - tbpgr/crystal_samples Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 15 Fork 0 tbpgr/crystal_samples Code Issues 0 Pull requests 0 Pulse Graphs No description or website provided. 391 commits 1 branch 0 releases 1 contributor Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit d19ae86 Jul 16, 2016 tbpgr 🆕 add: SimpleHash#reject Permalink Failed to load latest commit information. Array 🆕 add: Array#| Aug 24, 2015 Base64 🆕 add: Base64#urlsafe_encode Aug 28, 2015 BitArray 🆕 add: BitArray#toggle Sep 2, 2015 Bool 🆕 add: Bool#| Sep 7, 2015 CSV 🆕 add: CSV.parse Sep 27, 2015 Char 🆕 add: Char#succ Sep 24, 2015 Deque 🆕 add: Deque#unshift Oct 30, 2015 ENV 🆕 add: ENV.values Jan 26, 2016 Enum 🆕 add: Enum#| Nov 27, 2015 Enumerable 🆕 add: Enumerable#to_set Jan 17, 2016 Exception 🆕 add: Exception#to_s Jan 31, 2016 Float 🆕 add: Float#seconds Feb 13, 2016 HTML 🆕 add: HTML.escape Mar 23, 2016 Hash 🆕 add: Hash#values_at Mar 22, 2016 IniFile 🆕 add: IniFile#load Mar 24, 2016 Int 🆕 add: Int#years May 3, 2016 Markdown 🆕 add: Markdown#to_html May 4, 2016 Nil 🆕 add: Nil#same? May 13, 2016 Range 🆕 add: Range#sum May 26, 2016 Regex 🆕 add: Regex#to_s Jun 7, 2016 SecureRandom 🆕 add: SecureRandom.uuid Jun 12, 2016 Set add Set#union Jul 4, 2016 SimpleHash 🆕 add: SimpleHash#reject Jul 16, 2016 toplevels 🆕 add: first commit Jun 23, 2015 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tbpgr/crystal_samples"	"Variety of Crystal samples"	"true"
"Examples and funny stuff"	"crystalized_ruby"	"https://github.com/phoffer/crystalized_ruby"	"Native Ruby extensions written in Crystal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"50"	"11"	"3"	"GitHub - phoffer/crystalized_ruby: Write native Ruby extensions in Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 50 Fork 3 phoffer/crystalized_ruby Code Issues 1 Pull requests 0 Pulse Graphs Write native Ruby extensions in Crystal 66 commits 2 branches 3 releases Fetching contributors Ruby 58.5% Crystal 38.1% Makefile 3.1% Shell 0.3% Ruby Crystal Makefile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master repo-split Nothing to show v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit bdb2e42 Jun 30, 2016 phoffer bump to 0.1.2 Permalink Failed to load latest commit information. bin doc ext lib src UTF-8 for ruby strings Jun 30, 2016 test .gitignore Gemfile reorganizing this project into a proper ruby project with native exte… Jun 22, 2016 Gemfile.lock LICENSE.txt README.md Rakefile crystalized_ruby.gemspec shard.yml updates.md slight updates Jun 22, 2016 README.md Native Ruby extensions written in Crystal Functional code for native extensions, without using FFI. This can utilize any Crystal code, i.e. existing shards. This is still in heavy development and not ready for use. If you are interested in creating a proof of concept, I'm happy to assist. But otherwise, this isn't ready for real use. Current work is splitting this repo into multiple repos: A Crystal shard that contains the Ruby bindings (will be this repo) A faster version of ActiveSupport::Inflector that utilizes inflector.cr as a native extension A Ruby gem that assists with generating a gem that uses Crystal for a native extension This work is being done on the repo-split branch. Class conversion status Ruby class Ruby => Crystal Crystal => Ruby String ✅ ✅ Symbol ❌ ✅ Integer ✅* ✅ Float ❌ ❌ Hash ❌ ✅ Array ✅ ✅ Regexp ✅ ✅ Nil ✅ ✅ True ✅ ✅ False ✅ ✅ TODO get all types working float rb <=> cr negative integers rb => cr hash rb => cr something for symbol rb => cr be able to build gem and use (even just for checking type conversions) separate repo into crystal shard for lib_ruby related, generator gem, and fast_inflector gem Updates See updates.md Problems Negative integers don't convert correctly Floats aren't working I am having trouble with defining methods with various parameter counts. There's additional Crystal libs just for defining methods with zero or two parameters. This is obnoxious and the biggest annoyance I have right now, so I'd love to fix that soon. I can't get a proc as a C callback working. There's some broken code commented out. Would love assistance from someone more knowledgeable. Right now this is for converting a Ruby hash to a Crystal hash. How to get this working Minimum crystal version: 0.16.0 Make sure Crystal is installed (Homebrew on OSX is fine) Test and benchmark scripts both require fast_blank and active_support, mainly for comparison. Test script also uses descriptive_statistics, and the benchmark script uses benchmark-ips. None of these are required, except to run those two Ruby scripts. There's a Gemfile to install them if desired. rake clean rake compile rake test bin/test bin/benchmark  Benchmarking There is a benchmark script that compares a few things. The methods replicating ActiveSupport methods are copy-pasted, not even re-implemented from scratch. This uses the improved String#blank? method from AS 5.0, but it's not a hard requirement. Some highlights (see results.txt for more): Comparison:         cr fibonacci:    22743.9 i/s         rb fibonacci:      923.2 i/s - 24.63x slower  Comparison:      empty string rb:  7591363.0 i/s empty string crystal:  6973264.7 i/s - same-ish: difference falls within error  Comparison:      CR blank string:  2393668.6 i/s      AS blank string:   923967.3 i/s - 2.59x slower  Comparison:            cr squish:   691693.1 i/s            AS squish:   202554.1 i/s - 3.41x slower  Comparison:           cr ordinal:  5044785.3 i/s           AS ordinal:  1775271.7 i/s - 2.84x slower  Comparison:        fast_blank rb:  6599201.8 i/s        blank crystal:  2199386.4 i/s - 3.00x slower  Thanks and influences There's three main projects that I've gained knowledge from to get this fully working: manastech/crystal_ruby notozeki/crystal_example_ext gaar4ica/ruby_ext_in_crystal_math These have all been incredibly helpful, and this is very closely modeled after the last two sources. @gaar4ica's also includes a PDF from a talk she gave at Fosdem, which was highly informative. Future Ideas + Contributing I'd like to get this more fully fleshed out, more functional, and get it usable. There is some question as to whether or not writing a native Ruby extension in Crystal is a useful idea, and I'd love to learn more about both why it would and would not be worthwhile, from people out there who are far more knowledgeable than I am. If anyone is interested in this concept, please reach out to me either on this repo or on Twitter (@phoffer8). I'd love to collaborate with anyone interested, and just learn more in general. Wish List Complete the LibRuby wrapper for ruby.h and possibly a way to automate extracting the signatures from ruby.h into Crystal Create a series of macros to create the wrappers of the Crystal methods (to convert input and output type between Crystal and CRuby) Separate the LibRuby part into a separate gem/shard to make it reusable If it was possible to create the aforementioned macros, then it would be great to create a generator to create the template of a Ruby gem with the native extension bits (libruby, extconf, makefile, etc) Goal: to make it as easy as possible to create Ruby gems with Crystal-based native extensions where we could start with a ""slow"" Ruby source, tweak it quickly into a Crystal source file, wrap it up with LibRuby and compile it back as a native extension. No having to resort to C, Rust or other low level options. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phoffer/crystalized_ruby"	"Native Ruby extensions written in Crystal"	"true"
"Examples and funny stuff"	"docker-kemal"	"https://github.com/ianblenke/docker-kemal"	"An example Dockerized Crystal Kemal project"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"1"	"0"	"GitHub - ianblenke/docker-kemal: An example Dockerized Crystal Kemal project Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 2 Fork 0 ianblenke/docker-kemal Code Issues 0 Pull requests 0 Pulse Graphs An example Dockerized Crystal Kemal project 1 commit 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 2d359b2 Feb 27, 2016 icblenke Initial checkin Permalink Failed to load latest commit information. spec Initial checkin Feb 27, 2016 src Initial checkin Feb 27, 2016 .gitignore Initial checkin Feb 27, 2016 .travis.yml Initial checkin Feb 27, 2016 Dockerfile Initial checkin Feb 27, 2016 LICENSE Initial checkin Feb 27, 2016 README.md Initial checkin Feb 27, 2016 docker-compose.yml Initial checkin Feb 27, 2016 shard.lock Initial checkin Feb 27, 2016 shard.yml Initial checkin Feb 27, 2016 README.md docker-kemal This project was created following: http://kemalcr.com/ Installation This project has been dockerized. To build the docker image from this repo: docker-compose build Usage To both build and run this repo, use: docker-compose up Development Iterate by cntl-c and re-running the docker-compose up Contributing Fork it ( https://github.com/ianblenke/docker-kemal/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors [ianblenke] Ian Blenke - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ianblenke/docker-kemal"	"An example Dockerized Crystal Kemal project"	"true"
"Examples and funny stuff"	"kemal-chat"	"https://github.com/sdogruyol/kemal-chat"	"Build realtime applications with Kemal and WebSocket"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"1"	"3"	"GitHub - sdogruyol/kemal-chat: Sample application to demonstrate how easy it is to build realtime applications with Kemal using WebSocket. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 8 Fork 3 sdogruyol/kemal-chat Code Issues 1 Pull requests 0 Pulse Graphs Sample application to demonstrate how easy it is to build realtime applications with Kemal using WebSocket. 10 commits 1 branch 0 releases 2 contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit e8d9759 Feb 12, 2016 sdogruyol Update to Crystal 0.11.0 Permalink Failed to load latest commit information. images Add chat gif Dec 20, 2015 src Update to Crystal 0.11.0 Feb 12, 2016 views Close socket on window.unload Dec 21, 2015 .gitignore Update to Crystal 0.11.0 Feb 12, 2016 .travis.yml First commit Dec 20, 2015 LICENSE First commit Dec 20, 2015 README.md Update README.md Dec 20, 2015 shard.yml Update Dec 20, 2015 README.md Kemal Chat Sample application to demonstrate how easy it is to build realtime applications with Kemal using WebSocket. Installation git clone https://github.com/sdogruyol/kemal-chat cd kemal-chat && shards install crystal run src/kemal_chat.cr  Usage Go to http://localhost:3000/ to see it in action. Contributing Fork it ( https://github.com/sdogruyol/kemal-chat/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors [sdogruyol] Sdogruyol - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sdogruyol/kemal-chat"	"Build realtime applications with Kemal and WebSocket"	"true"
"Examples and funny stuff"	"kemal-pg-sample"	"https://github.com/sdogruyol/kemal-pg-sample"	"Sample app to demonstrate kemal + postgresql usage"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"2"	"0"	"GitHub - sdogruyol/kemal-pg-sample: Sample app to demonstrate kemal + postgresql usage Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 3 Fork 0 sdogruyol/kemal-pg-sample Code Issues 0 Pull requests 0 Pulse Graphs Sample app to demonstrate kemal + postgresql usage 3 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src .gitignore LICENSE README.md shard.lock shard.yml README.md kemal-pg-sample Application to demonstrate how easy it is to use Kemal with Postgresql. Installation git clone https://github.com/sdogruyol/kemal-pg-sample.git cd kemal-pg-sample shards install crystal build --release src/app.cr && ./app  Visit http:\\localhost:3000 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sdogruyol/kemal-pg-sample"	"Sample app to demonstrate kemal + postgresql usage"	"true"
"Examples and funny stuff"	"kemal-react-chat"	"https://github.com/f/kemal-react-chat"	"Build Realtime Web applications with Kemal and React"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"41"	"3"	"5"	"GitHub - f/kemal-react-chat: This demonstrates how easy it is to build Realtime Web applications with Kemal. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 41 Fork 5 f/kemal-react-chat Code Issues 1 Pull requests 1 Pulse Graphs This demonstrates how easy it is to build Realtime Web applications with Kemal. http://kemal-react-chat.herokuapp.com/ 8 commits 1 branch 0 releases Fetching contributors JavaScript 71.1% CSS 15.9% Crystal 13.0% JavaScript CSS Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 350b9c4 Mar 20, 2016 f Merge pull request #3 from enderahmetyurt/feature/show_current_time … Feature/show current time Permalink Failed to load latest commit information. spec Initial Commit Feb 4, 2016 src Show current time for each line. Feb 20, 2016 .gitignore Initial Commit Feb 4, 2016 .travis.yml Initial Commit Feb 4, 2016 LICENSE Initial Commit Feb 4, 2016 README.md Update README.md Feb 4, 2016 shard.lock Update shard.yml Feb 20, 2016 shard.yml Initial Commit Feb 4, 2016 README.md React + Kemal Chat Example Chat app using React + Kemal. This demonstrates how easy it is to build Realtime Web applications with Kemal. Install & Run Kemal is written in Crystal Programming Language you need to have it installed on your machine. git clone https://github.com/f/kemal-react-chat cd kemal-react-chat && shards install crystal src/app.cr  Go to http://localhost:3000 to see it in action. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/f/kemal-react-chat"	"Build Realtime Web applications with Kemal and React"	"true"
"Examples and funny stuff"	"xcrystal"	"https://github.com/exercism/xcrystal"	"Exercism exercises"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5"	"6"	"4"	"GitHub - exercism/xcrystal: Exercism exercises in Crystal. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 5 Fork 4 exercism/xcrystal Code Issues 1 Pull requests 0 Pulse Graphs Exercism exercises in Crystal. 21 commits 1 branch 0 releases Fetching contributors Crystal 84.4% Makefile 9.4% Shell 6.2% Crystal Makefile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 1c76fd9 Jun 14, 2016 joeltaylor committed with mhelmetag Add track icon (#17) Permalink Failed to load latest commit information. bin Bootstrap crystal exercises repository Mar 8, 2016 docs docs Mar 13, 2016 exercises Dropping prefixes on predicate methods in bob example solution (#14) May 30, 2016 img Add track icon (#17) Jun 14, 2016 .gitignore add three exercises, Makefile (in progress), travis crystall install … Mar 13, 2016 .travis.yml Update .travis.yml Mar 15, 2016 LICENSE Bootstrap crystal exercises repository Mar 8, 2016 Makefile fix hello world and add more exercises Apr 9, 2016 README.md travis build status in readme (#15) Jun 3, 2016 SETUP.md Remove references to help.exercism.io site Apr 9, 2016 config.json Add track icon (#17) Jun 14, 2016 README.md xCrystal Exercism problems in Crystal. The Tests All Assignments Run all assignments with: $ make test Single Assignment Run single assignments with: $ make test-assignment ASSIGNMENT=test-folder-name Contributing Guide Please see the contributing guide License The MIT License (MIT) Copyright (c) 2016 Katrina Owen, _@kytrinyx.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/exercism/xcrystal"	"Exercism exercises"	"true"
"Framework Components"	"artanis"	"https://github.com/ysbaddaden/artanis"	"Sinatra-like DSL (abusing macros)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"26"	"4"	"4"	"GitHub - ysbaddaden/artanis: Sinatra-like DSL for the Crystal language (abusing macros) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 26 Fork 4 ysbaddaden/artanis Code Issues 1 Pull requests 1 Pulse Graphs Sinatra-like DSL for the Crystal language (abusing macros) 41 commits 1 branch 1 release Fetching contributors Crystal 98.7% Makefile 1.3% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.0 Nothing to show New pull request Latest commit d432f94 May 19, 2016 jhass committed with ysbaddaden Crystal 0.17 compatibility (#15) Permalink Failed to load latest commit information. samples Fix: always require http/server Apr 22, 2016 src Crystal 0.17 compatibility (#15) May 19, 2016 test Parse query and body params (urlencoded) Apr 23, 2016 .gitignore Release: v0.1.0 Mar 31, 2016 .travis.yml Crystal 0.17 compatibility (#15) May 19, 2016 LICENSE Should be the initial commit Jun 16, 2015 Makefile HTTP::Server::Context support Mar 25, 2016 README.md HTTP::Server::Context support Mar 25, 2016 shard.lock Crystal 0.17 compatibility (#15) May 19, 2016 shard.yml Release: v0.1.0 Mar 31, 2016 README.md Artanis Crystal's metaprogramming macros to build a Sinatra-like DSL for the Crystal language. Rationale The DSL doesn't stock blocks to be invoked later on, but rather produces actual methods using macros (match and the sugar get, post, etc.) where special chars like /, ., ( and ) are replaced as _SLASH_, _DOT_, _LPAREN_ and _RPAREN_. Also, :param segments are replaced to _PARAM_. Eventually methods look like: get ""/posts""        |    def match_GET__SLASH_posts get ""/posts.xml""    |    def match_GET__SLASH_posts_DOT_xml  Please read dsl.cr for more details. Eventually a call method is generated. It iterates over the class methods, selects the generated match_* methods and generates a big case statement, transforming the method names back to regular expressions, and eventually calling the method with matched data (if any). Please read application.cr for more details. Usage require ""http/server"" require ""artanis""  class App < Artanis::Application   get ""/"" do     ""ROOT""   end    get ""/forbidden"" do     403   end    get ""/posts/:id.:format"" do     p params[""id""]     p params[""format""]     ""post""   end    get ""/posts/:post_id/comments/:id(.:format)"" do |post_id, id, format|     p params[""format""]?     200   end end  server = HTTP::Server.new(9292) do |context|   App.call(context) end  puts ""Listening on http://0.0.0.0:9292"" server.listen Benchmark Running wrk against the above example (pointless hello world) gives the following results (TL;DR 12µs per request): $ wrk -c 1000 -t 2 -d 5 http://localhost:9292/fast Running 5s test @ http://localhost:9292/fast   2 threads and 1000 connections   Thread Stats   Avg      Stdev     Max   +/- Stdev     Latency    12.26ms   14.48ms 423.28ms   99.05%     Req/Sec    41.17k     2.93k   48.65k    76.00%   409663 requests in 5.01s, 25.79MB read Requests/sec:  81722.08 Transfer/sec:      5.14MB  A better benchmark is available in test/dsl_bench.cr which monitors some limits of the generated Crystal code, like going over all routes to find nothing takes an awful lot of time, since it must build/execute a regular expression against EVERY routes to eventually... find nothing. $ crystal run --release test/dsl_bench.cr get root: 0.84 µs get param: 1.51 µs get params (block args): 2.18 µs get many params: 3.75 µs get many params (block args): 2.59 µs not found (method): 0.73 µs not found (path): 15.93 µs  Keep in mind these numbers tell nothing about reality. They only measure how fast the generated Application.call(request) method is in predefined cases. License Licensed under the MIT License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ysbaddaden/artanis"	"Sinatra-like DSL (abusing macros)"	"true"
"Framework Components"	"crouter"	"https://github.com/jreinert/crouter"	"A standalone router"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"12"	"1"	"2"	"GitHub - jreinert/crouter: a standalone router for crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 12 Fork 2 jreinert/crouter Code Issues 0 Pull requests 1 Pulse Graphs a standalone router for crystal 32 commits 2 branches 0 releases 2 contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags crystal-0.11 master Nothing to show Nothing to show New pull request Latest commit fef15a5 May 26, 2016 jreinert Merge pull request #6 from RX14/fix-root-routes … Fixes #3 (root routes) Permalink Failed to load latest commit information. spec Fix root routes May 26, 2016 src Merge pull request #6 from RX14/fix-root-routes May 26, 2016 .gitignore initial commit Nov 8, 2015 .travis.yml initial commit Nov 8, 2015 LICENSE initial commit Nov 8, 2015 README.md Update benchmark to better reflect routing performance May 26, 2016 shard.yml initial commit Nov 8, 2015 README.md crouter A standalone router for crystal Features route params (also optional and nested optional) grouping under a prefix handle response with either block or seperate controller support for query params (also mixed with route params) most errors reveal themselves already at compile time Benchmark results Benchmarked with non-trivial route patterns. See src/benchmark.cr. Due to performance optimizations compile-time increases with the amount of routes. requests per second without router (raw server throughput) 345.02k (± 3.91%)       fastest          through router with 32 routes 248.48k (± 3.56%)  1.39× slower          through router with 64 routes 251.07k (± 3.57%)  1.37× slower         through router with 128 routes 126.84k (± 2.49%)  2.72× slower         through router with 256 routes 167.36k (± 3.69%)  2.06× slower  Installation Add this to your application's shard.yml: dependencies:   crouter:     github: jreinert/crouter Usage require ""crouter""  class MyController   private getter context, params   def initialize(@context, @params)   end    def my_action     # do something     context.response << ""hi there""   end end  class MyRouter < Crouter::Router   get ""/"" do     context.response << ""hello world""   end    post ""/path/with/:param"" do     context.response << ""you passed #{params[""param""]}""   end    get ""/path/with(/optional(/:parts))"" do     context.repsonse << ""you passed #{params[""parts""]? || ""nothing""}""   end    put ""/handle/with/controller"", ""MyController#my_action""    group ""/group"" do     put ""/routes"", ""MyGroupController#my_action""     group ""/or/even/:nest"" do       post ""/them"" do         context.response << ""with params! #{params[""nest""]}""       end     end   end end  class MyRestAPI < Crouter::Router   group ""/posts"" do     get    ""/"",         ""PostsController#index""     get    ""/:id"",      ""PostsController#show""     get    ""/:id/edit"", ""PostsController#edit""     post   ""/"",         ""PostsController#create""     put    ""/:id"",      ""PostsController#update""     delete ""/:id"",      ""PostsController#delete""   end end  puts ""Listening on http://localhost:8989"" HTTP::Server.new(8989, [HTTP::LogHandler.new, MyRestAPI.new(""/api""), MyRouter.new]) Contributing Fork it ( https://github.com/jreinert/crouter/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors jreinert Joakim Reinert - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jreinert/crouter"	"A standalone router"	"true"
"Framework Components"	"crystal-mime"	"https://github.com/spalger/crystal-mime"	"Mimetypes for Crystal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"12"	"3"	"5"	"GitHub - spalger/crystal-mime: Mimetypes for Crystal, based on node-mime. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 12 Fork 5 spalger/crystal-mime Code Issues 0 Pull requests 0 Pulse Graphs Mimetypes for Crystal, based on node-mime. 11 commits 1 branch 0 releases Fetching contributors Crystal 94.4% Makefile 5.6% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 945d357 Dec 26, 2015 spalger Merge pull request #3 from werner/master … Fix casting to make it compatible to crystal 0.10.0 Permalink Failed to load latest commit information. spec handle symbols in 'from_ext' Jun 6, 2015 src .gitignore .travis.yml LICENSE Makefile README.md shard.yml README.md mime Mimetypes for Crystal. Installation Add it to Projectfile deps do   github ""spalger/crystal-mime"" end Usage require ""mime"" This simple module maps mime-types and extensions. Read the map using either the from_ext or to_ext methods. Mime.from_ext(extension) Read the mime-type for an extension. Returns tye mime-type as a string, or nil if the extension is unknown. require ""mime"" Mime.from_ext(""jpg"") # ""image/jpeg"" Mime.from_ext(""js"")  # ""application/javascript"" Mime.from_ext(""jssssss"")  # nil Mime.to_ext(type) Read the first extension registered for a mime-type. Returns the extension as a string or nil is the mime-type is unknown. require ""mime"" Mime.to_ext(""image/jpeg"") # ""jpeg"" Mime.to_ext(""application/javascript"")  # ""js"" Development Type files are pulled from the node-mime project. To update the types.json file run make update_types Contributing Fork it ( https://github.com/spalger/crystal-mime/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors spalger Spencer Alger - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/spalger/crystal-mime"	"Mimetypes for Crystal"	"true"
"Framework Components"	"kemal-comments"	"https://github.com/TyanNN/kemal-comments"	"Simple comments for Kemal site"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"0"	"GitHub - TyanNN/kemal-comments: Simple comments for your Kemal site Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 0 TyanNN/kemal-comments Code Issues 0 Pull requests 0 Pulse Graphs Simple comments for your Kemal site 15 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. libs src LICENSE README.md shard.lock shard.yml README.md Kemal-comments Simple comments for your Kemal site Installation Add this to your application's shard.yml: dependencies:   kemal-comments:     github: TyanNN/kemal-comments Usage require ""kemal"" require ""kemal-comments"" require ""session""  comms=Comments::Comments.new(name=""name"") # Optional database name, defaults to comments.db comms.init_sockets() # Add /get_comments and /add_comments sockets  get ""/post/1"" do |env|   env.session[""NAME""]=""TyanNN"" # Before using this you probably should create basic user system with crystal session module                                # This will use SESSION_LOGIN   ""   <html>   <meta charset='utf-8'>   <link rel='stylesheet' href='http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css'>   <script src='https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js'></script>   <script src='http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js'></script> <!-- Include bootstrap -->   <script>   #{comms.js(env)} //JS part   </script>   <div id='comments'></div> <!--Put this where comments should be -->   #{comms.update_button(env)} <!-- Update button, can be styled with CSS by changing #update_div and #update_button -->   #{comms.add_comment_block} <!-- Adding comment block -->   </html>   "" end  Kemal.run or in ecr pattern: <script> <%= comms.js(env)%> //etc. </script> There is also some parameters you can change via Comments::PARAMS[""name""]: SESSION_SECRET - Secret for session, only useful if CREATE_SESSION is true, defaults to SECRET REDACT_MINUTES - minutes until comments will become not editable, default is 7 SUBMIT_BUTTON_TEXT - Text on the submit button COMMENT_PLACEHOLDER - Placeholder in the comment addition textbox ANSWER_BUTTON_TEXT - Text on the answer button NO_TEXT_WARNING - Text, that one will see if comment textbox is empty POST_ID_REGEX - Regular expression used to find post id, defaults to \d+$ (as this is string all \ must be \\ ) SESSION_LOGIN - session hash key, where login is stored, default is NAME CREATE_SESSION - should module create session for you with SESSION_SECRET secret, default is true SOCKETS_IP - Your ip, default is 0.0.0.0:3000, you should probably change it to yours Comment's CSS selector is [class^=""comment_""] Development All is stored in src/kemal-comments.cr, fill free to fork and make additions Contributing Fork it ( https://github.com/TyanNN/kemal-comments/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors TyanNN - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TyanNN/kemal-comments"	"Simple comments for Kemal site"	"true"
"Framework Components"	"kemal-mysql"	"https://github.com/sdogruyol/kemal-mysql"	"Easily add MySQL database to Kemal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"11"	"3"	"1"	"GitHub - sdogruyol/kemal-mysql: Easily add MySQL database to your Kemal application. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 11 Fork 1 sdogruyol/kemal-mysql Code Issues 0 Pull requests 0 Pulse Graphs Easily add MySQL database to your Kemal application. 6 commits 1 branch 3 releases Fetching contributors Crystal 77.3% Shell 22.7% Crystal Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 6fd2c6e Jul 4, 2016 sdogruyol Fix ConnectionPool(T) error on assigment Permalink Failed to load latest commit information. script First commit Jan 2, 2016 spec First commit Jan 2, 2016 src Fix ConnectionPool(T) error on assigment Jul 4, 2016 .gitignore First commit Jan 2, 2016 .travis.yml First commit Jan 2, 2016 LICENSE First commit Jan 2, 2016 README.md Update README Jan 2, 2016 shard.yml First commit Jan 2, 2016 README.md kemal-mysql Easily add MySQL database to your Kemal application. Installation Add this to your application's shard.yml: dependencies:   kemal-mysql:     github: sdogruyol/kemal-mysql Usage This middleware adds MySQL connection pool to Kemal as a middleware. require ""kemal"" require ""kemal-mysql""  CONN_OPTS = {   ""host"" => ""127.0.0.1"",   ""user"" => ""root"",   ""password"" => """",   ""db"" => ""your_db"" }  mysql_connect CONN_OPTS, 25, 0.1  # Make sure to yield `env`. get ""/"" do |env|   env.content_type = ""application/json""   users = conn.query(""SELECT * FROM users"")   # Release the connection after you are done with exec   release   # Renders the users as JSON   users end You can configure the connection pool capacity and timeout like: mysql_connect CONN_OPTS, capacity: 10, timeout: 0.1 The default value for connection pool capacity is 25 and timeout is 0.1. Contributing Fork it ( https://github.com/sdogruyol/kemal-mysql/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors sdogruyol Sdogruyol - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sdogruyol/kemal-mysql"	"Easily add MySQL database to Kemal"	"true"
"Framework Components"	"kemal-pg"	"https://github.com/sdogruyol/kemal-pg"	"Easily add Postgresql database to Kemal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"2"	"5"	"GitHub - sdogruyol/kemal-pg: Easily add Postgresql database to Kemal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 14 Fork 5 sdogruyol/kemal-pg Code Issues 1 Pull requests 0 Pulse Graphs Easily add Postgresql database to Kemal 11 commits 1 branch 4 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.4.0 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit f529d34 Jun 30, 2016 sdogruyol committed on GitHub Merge pull request #2 from ucmsky/fix_compilation_error_crystal_0_16 … fix compile error for crystl ver 0.16 later Permalink Failed to load latest commit information. spec First commit Dec 27, 2015 src fix compile error for crystl ver 0.16 later Jun 29, 2016 .gitignore First commit Dec 27, 2015 .travis.yml First commit Dec 27, 2015 LICENSE First commit Dec 27, 2015 README.md fix compile error for crystl ver 0.16 later Jun 29, 2016 shard.yml Add pool size and timeout configuration Dec 28, 2015 README.md kemal-pg Easily add Postgresql database to your Kemal application. Installation Add this to your application's shard.yml: dependencies:   kemal-pg:     github: sdogruyol/kemal-pg Usage This middleware adds Postgresql connection pool to Kemal as a middleware. require ""kemal"" require ""kemal-pg""  pg_connect ""postgres://user@host:5432/your_db""  # Make sure to yield `env`. get ""/"" do |env|   users = connection.exec(""SELECT * FROM users"")   # Release the connection after you are done with exec   release   ""Hello from postgresql"" end You can configure the connection pool capacity and timeout like: pg_connect ""postgres://user@host:5432/your_db"", capacity: 10, timeout: 0.1 The default value for connection pool capacity is 25 and timeout is 0.1. Contributing Fork it ( https://github.com/sdogruyol/kemal-pg/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors sdogruyol Sdogruyol - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sdogruyol/kemal-pg"	"Easily add Postgresql database to Kemal"	"true"
"Framework Components"	"kemal-redis"	"https://github.com/sdogruyol/kemal-redis"	"Easily add Redis to Kemal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5"	"1"	"2"	"GitHub - sdogruyol/kemal-redis: Easily add Redis to Kemal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 5 Fork 2 sdogruyol/kemal-redis Code Issues 1 Pull requests 1 Pulse Graphs Easily add Redis to Kemal https://kemalcr.com 3 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore First commit Jan 11, 2016 .travis.yml LICENSE README.md shard.yml README.md kemal-redis Easily add Redis to your Kemal application. Installation Add this to your application's shard.yml: dependencies:   kemal-redis:     github: sdogruyol/kemal-redis Usage require ""kemal"" require ""kemal-redis""  redis_connect # With default host and port  # Make sure to yield `env`. get ""/"" do |env|   redis.set(""foo"", ""bar"")   foo = redis.get(""foo"")   ""Value of foo - #{foo}"" end You can specify different host and port like below redis_connect host: ""177.11.22.33"", port: 8801 Examples To check more examples of Redis see crystal-redis-example. Contributing Fork it ( https://github.com/sdogruyol/kemal-redis/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors sdogruyol Sdogruyol - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sdogruyol/kemal-redis"	"Easily add Redis to Kemal"	"true"
"Framework Components"	"kemal-session"	"https://github.com/Thyra/kemal-session"	"Session handler for Kemal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"2"	"2"	"GitHub - Thyra/kemal-session: A session handler for Kemal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 10 Fork 2 Thyra/kemal-session Code Issues 2 Pull requests 0 Wiki Pulse Graphs A session handler for Kemal 26 commits 3 branches 3 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop hotfix master Nothing to show v0.2 v0.1.1 v0.1 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml README.md shard.yml README.md kemal-session This project wants to be a session plugin for Kemal when it grows up. It is still in alpha stage but it works! ;-) Installation Add this to your application's shard.yml: dependencies:   kemal-session:     github: Thyra/kemal-session     branch: master Usage Basic Usage Create a folder sessions in the same directory that your webserver is running in and make sure the webserver process has write privileges to it. require ""kemal"" require ""kemal-session""  get ""/set"" do |env|   env.session.int(""number"", rand(100)) # set the value of ""number""   ""Random number set."" end  get ""/get"" do |env|   num  = env.session.int(""number"") # get the value of ""number""   env.session.int?(""hello"") # get value or nil, like []?   ""Value of random number is #{num}."" end  Kemal.run The session can save Int32, String, Float64 and Bool values. Use session.int, session.string, session.float and session.bool for that. Another example require ""kemal"" require ""kemal-session""  get ""/rand"" do |env|   if env.session.int? ""random_number""     env.response.print ""The last random number was #{env.session.int(""random_number"")}. ""   else     env.response.print ""This is the first random number. ""   end   random_number = rand(500)   env.session.int(""random_number"", random_number)   env.response.print ""Setting the random number to #{random_number}"" end  get ""/set"" do |env|   env.session.string(env.params.query[""key""].to_s, env.params.query[""value""].to_s)   ""Setting <i>#{env.params.query[""key""]}</i> to <i>#{env.params.query[""value""]}</i>"" end  get ""/get"" do |env|   if env.session.string? env.params.query[""key""].to_s     ""The value of #{env.params.query[""key""]} is #{env.session.string(env.params.query[""key""].to_s)}""   else     ""There is no value for this key.""   end end  Kemal.run Open /set?key=foo&value=bar to set the value of foo to bar in your session. Then open /get?key=foo to retrieve it. You can also access the underyling hash directly by appending s to the name: session.ints. This way you can use hash functions like session.ints.each do |k, v|   puts ""#{k} => #{v}"" end BUT: This should only be used for reading and analyzing values, never for changing them. Because otherwise the session won't automatically save the changes and you may produce really weird bugs... Configuration The Session can be configured in the same way as Kemal itself: Session.config do |config|   config.cookie_name = ""session_id""   config.gc_interval = Time::Span.new(0, 1, 0) end or Session.config.cookie_name = ""foobar"" Option explanation default timeout How long is the session valid after last user interaction? Time::Span.new(1, 0, 0) (1 hour) cookie_name Name of the cookie that holds the session_id on the client ""kemal_sessid"" engine How are the sessions saved on the server? (see section below) Session::FileSystemEngine.new({sessions_dir: ""./sessions/""}) gc_interval In which interval should the garbage collector find and delete expired sessions from the server? Time::Span.new(0, 4, 0) (4 minutes) Setting the Engine The Engine takes care of actually saving the sessions on the server. The standard engine is the FileSystemEngine which creates a json file for each session in a certain folder on the file system. Theoretically there are innumerable possible engines; any way of storing and retrieving values could be used: Storing the values in a database (MySQL, SQLite, MongoDB etc.) Storing the values in RAM (e.g. like Redis) Saving and retreiving the values from a remote server via an API Printing on paper, rescanning and running an OCR on it. The engine you use has a huge impact on performance and can enable you to share sessions between different servers, make them available to any other application or whatever you can imagine. So the choice of engine is very important. Luckily for you, there is only one engine available right now ;-): The FileSystemEngine. It is set by default to store all the session in a folder called sessions in the directory the server is running in. If you want to save them someplace else, just use this: Session.config.engine = Session::FileSystemEngine.new({sessions_dir: ""/var/foobar/sessions/""}) You can also write your own engine if you like. Take a look at the wiki page. If you think it might also be helpful for others just let me know about it and I will include it in a list of known engines or something. Features already implemented storing of Int32, String, Float64 and Bool values a garbage collector that removes expired sessions from the server a filesystem engine (saves sessions on the file system) Features in development storing of more data types, including arrays and possibly hashes engines for memory (sessions are stored in process memory), mysql and postregsql (sessions are stored in database) secure session id against brute force attacks by binding it to ip adress and user agent Manage sessions: Session.all, Session.remove(id), Session.get(id)... Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Thyra/kemal-session"	"Session handler for Kemal"	"true"
"Framework Components"	"spec-kemal"	"https://github.com/sdogruyol/spec-kemal"	"Easy testing for Kemal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"3"	"1"	"GitHub - sdogruyol/spec-kemal: Easy testing for Kemal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 14 Fork 1 sdogruyol/spec-kemal Code Issues 0 Pull requests 0 Pulse Graphs Easy testing for Kemal http://kemalcr.com/ 13 commits 1 branch 1 release Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.lock shard.yml README.md spec-kemal Kemal helpers to Crystal's spec for easy testing. Installation Add it to your shard.yml. name: your-kemal-app version: 0.1.0  dependencies:   spec-kemal:     github: sdogruyol/spec-kemal     branch: master   kemal:     github: sdogruyol/kemal     branch: master Usage Just require it before your files in your spec/spec_helper.cr require ""spec-kemal"" require ""../src/your-kemal-app"" Your Kemal application # src/your-kemal-app.cr  require ""kemal""  get ""/"" do   ""Hello World!"" end  Kemal.run Now you can easily test your Kemal application in your specs. # spec/your-kemal-app-spec.cr  describe ""Your::Kemal::App"" do   # Be sure to start your app in test mode   start    # You can use get,post,put,patch,delete to call the corresponding route.   it ""renders /"" do     get ""/""     response.body.should eq ""Hello World!""   end    # Be sure to stop your app after the specs   stop end Contributing Fork it ( https://github.com/sdogruyol/spec-kemal/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors sdogruyol Sdogruyol - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sdogruyol/spec-kemal"	"Easy testing for Kemal"	"true"
"HTTP"	"beryl"	"https://github.com/luislavena/beryl"	"Action-focused HTTP routing library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"17"	"3"	"2"	"GitHub - luislavena/beryl: Action-focused HTTP routing library for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 17 Fork 2 luislavena/beryl Code Issues 0 Pull requests 0 Pulse Graphs Action-focused HTTP routing library for Crystal 43 commits 1 branch 0 releases Fetching contributors Crystal 99.8% Makefile 0.2% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 74565af Jan 18, 2016 luislavena benchmarks: Do not build an HTTP::Response anymore … Kemal does not require building an `HTTP::Response` anymore, so instead just return a fixed, empty string.  [skip ci] Permalink Failed to load latest commit information. benchmarks benchmarks: Do not build an HTTP::Response anymore Jan 18, 2016 samples Workaround class-variables inheritance Aug 24, 2015 spec style: apply crystal format Nov 17, 2015 src style: apply crystal format Nov 17, 2015 .gitignore User Shards as dependency manager Sep 20, 2015 .travis.yml Test against latest and nightly Crystal versions Oct 24, 2015 LICENSE Initial import Aug 24, 2015 README.md Relocate repository Dec 1, 2015 shard.yml Add shards metadata Nov 19, 2015 README.md Beryl Action-focused HTTP routing library for Crystal Description Beryl aims to be a small HTTP routing library with focus on direct mapping between route paths and their respective actions. Both Router and Action design give certain flexibility for testing each component individually. It leverages on Crystal's HTTP library and allows you to integrate it with other middleware to build your final stack. Installation Add it to your project's shard.yml file: dependencies:   beryl:     github: luislavena/beryl Usage The following example presents a simpler Router that maps the root element of a request (/) to a specific Action. class Hello < Beryl::Action   def call(params)     HTTP::Response.ok ""text/plain"", ""Hello world!""   end end  class App < Beryl::Router   routing do     get ""/"", Hello   end end We assume you understand how to use HTTP::Server and are comfortable with using and building HTTP::Request and HTTP::Response respectively. You can now place an instance of App on your HTTP middleware or be the single one handler in your stack: server = HTTP::Server.new(8080, App.new) server.listen Or combine with others: stack = [   HTTP::LogHandler.new,   App.new ]  server = HTTP::Server.new(8080, stack) server.listen You can see other examples in the samples/ directory. Radix Tree implementation This project implement a Radix tree to perform route matching. This has been inspired and adapted from julienschmidt/httprouter and spriet2000/vertx-http-router Go and Java implementations, respectively. Changes to logic and optimizations have been made to take advantage of Crystal's features. Development HTTP Handler integration Path/Query parameter extraction Router/Route/Action initial design Nested routers (ie. resource specific mappings) Optional Response helpers for Action (eg. html, json) Optional conditional rendering (eg. stale, etag, last_modified) Contributing Fork it ( https://github.com/luislavena/crystal-beryl/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors Luis Lavena - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/luislavena/beryl"	"Action-focused HTTP routing library"	"true"
"HTTP"	"crul"	"https://github.com/porras/crul"	"Command line HTTP client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"68"	"7"	"6"	"GitHub - porras/crul: Command line HTTP client written in Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 68 Fork 6 porras/crul Code Issues 1 Pull requests 0 Pulse Graphs Command line HTTP client written in Crystal 93 commits 5 branches 12 releases Fetching contributors Crystal 99.2% Makefile 0.8% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags crystal-0.7.1 crystal-0.8.0 master travis-release travis Nothing to show v0.4.0 v0.3.1 v0.3.0 v0.2.1 v0.2.0 v0.1.0 v0.0.1b v0.0.1a test-release4 test-release3 test-release2 test-release Nothing to show New pull request Latest commit 3808b99 Feb 9, 2016 porras v0.4.0 Permalink Failed to load latest commit information. spec Reformat all Dec 29, 2015 src v0.4.0 Feb 9, 2016 .gitignore Crystal 0.8.0 support Sep 20, 2015 .travis.yml Remove release related stuff Feb 9, 2016 LICENSE.txt Add LICENSE.txt and some info to README.md Mar 10, 2015 Makefile Remove release related stuff Feb 9, 2016 README.md v0.4.0 Feb 9, 2016 crul.cr Basic integration test Apr 22, 2015 shard.lock Fix dependencies Feb 9, 2016 shard.yml v0.4.0 Feb 9, 2016 README.md Crul Crul is a curl replacement, that is, it's a command line HTTP client. It has less features and options, but it aims to be more user friendly. It's heavily inspired by httpie. It's written in the Crystal language. It's in an early stage but it allows already basic usage. Features Fast No dependencies, easy to install Basic HTTP features (method, request body, headers) Syntax highlighting of the output (JSON and XML) Basic authentication Cookie store Bash completion of commands and options Planned features User friendly headers and request body generation (similar to httpie's) Digest authentication More fancy stuff Installation Mac brew tap porras/crul brew install crul  Or, if you prefer, download the latest release and unzip it somewhere in your $PATH. Linux The latest release includes a Linux 64 bits binary that reportedly works on: Ubuntu 12.04 LTS Ubuntu 14.04 Debian testing If you're a user of those distros (or a different one and want to help trying), download it and unzip it somewhere in your $PATH. If you use a different distro, you'll have to build it from the source code, see Development. Completion After installation, add this line to your .bashrc (only Bash supported at this moment): eval ""$(crul --completion)""  Usage Usage: crul [method] URL [options]  HTTP methods (default: GET):     get, GET                         Use GET     post, POST                       Use POST     put, PUT                         Use PUT     delete, DELETE                   Use DELETE  HTTP options:     -d DATA, --data DATA             Request body     -d @file, --data @file           Request body (read from file)     -H HEADER, --header HEADER       Set header     -a USER:PASS, --auth USER:PASS   Basic auth     -c FILE, --cookies FILE          Use FILE as cookie store (reads and writes)  Response formats (default: autodetect):     -j, --json                       Format response as JSON     -x, --xml                        Format response as XML     -p, --plain                      Format response as plain text  Other options:     -h, --help                       Show this help     -V, --version                    Display version  Examples GET request $ crul http://httpbin.org/get?a=b HTTP/1.1 200 OK Server: nginx Date: Wed, 11 Mar 2015 07:57:33 GMT Content-type: application/json Content-length: 179 Connection: keep-alive Access-control-allow-origin: * Access-control-allow-credentials: true  {   ""args"": {     ""a"": ""b""   },   ""headers"": {     ""Content-Length"": ""0"",     ""Host"": ""httpbin.org""   },   ""origin"": ""188.103.25.204"",   ""url"": ""http://httpbin.org/get?a=b"" }  PUT request $ crul put http://httpbin.org/put -d '{""a"":""b""}' -H Content-Type:application/json HTTP/1.1 200 OK Server: nginx Date: Wed, 11 Mar 2015 07:58:54 GMT Content-type: application/json Content-length: 290 Connection: keep-alive Access-control-allow-origin: * Access-control-allow-credentials: true  {   ""args"": {},   ""data"": ""{\""a\"":\""b\""}"",   ""files"": {},   ""form"": {},   ""headers"": {     ""Content-Length"": ""9"",     ""Content-Type"": ""application/json"",     ""Host"": ""httpbin.org""   },   ""json"": {     ""a"": ""b""   },   ""origin"": ""188.103.25.204"",   ""url"": ""http://httpbin.org/put"" }  Development You'll need Crystal 0.10.0 installed (it might work with older or newer versions, but that's the one that's tested). After checking out the repo (or decompressing the tarball with the source code), run shards to get the development dependencies, and make to run the tests and compile the source. Optionally, you can run make install to install it (as a default, in /usr/local/bin, override it running PREFIX=/opt/whatever make install). Contributing Fork it ( https://github.com/porras/crul/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request You can also contribute by trying it and reporting any issue you find. Copyright Copyright (c) 2015 Sergio Gil. See LICENSE for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/porras/crul"	"Command line HTTP client"	"true"
"HTTP"	"cryload"	"https://github.com/Sdogruyol/cryload"	"HTTP benchmarking tool"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"80"	"4"	"5"	"GitHub - sdogruyol/cryload: HTTP benchmarking tool written in Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 80 Fork 5 sdogruyol/cryload Code Issues 2 Pull requests 0 Pulse Graphs HTTP benchmarking tool written in Crystal 47 commits 1 branch 3 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.2.0 v0.1.0 v0.0.2 Nothing to show New pull request Latest commit c7a3ebb Apr 10, 2016 sdogruyol Crystal 0.15.0 Permalink Failed to load latest commit information. spec 0.1.0 Jan 20, 2016 src Crystal 0.15.0 Apr 10, 2016 .gitignore Added shards support for Crystal 0.8.0 Sep 20, 2015 .travis.yml First commit Jul 25, 2015 LICENSE First commit Jul 25, 2015 Projectfile First commit Jul 25, 2015 README.md Update README.md Mar 3, 2016 screenshot.png Updated screenshot Aug 31, 2015 shard.lock Implement Completion with f/completion using OptionParser integration Dec 30, 2015 shard.yml Crystal 0.15.0 Apr 10, 2016 README.md cryload HTTP benchmarking tool writen in Crystal Installation From Source Cryload is tested on Crystal 0.9.1 git clone https://github.com/Sdogruyol/cryload.git && cd cryload crystal build src/cryload.cr --release  OS X brew tap sdogruyol/cryload brew install cryload  Usage You can specify the number of requests after the url. The default request number is 1000. ./cryload -s http://wwww.localhost:9292 -n 10000  Bash Completion Run these commands to enable Bash Autocompletion cryload --completion >> ~/.cryload.completion.sh echo 'source ~/.cryload.completion.sh' >> .bash_profile  Development DONE: Request number Pretty output Performance Kill signal handling TODO: Multithreading Contributing Fork it ( https://github.com/sdogruyol/cryload/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors Sdogruyol Sdogruyol - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Sdogruyol/cryload"	"HTTP benchmarking tool"	"true"
"HTTP"	"crystal-routing"	"https://github.com/bcardiff/crystal-routing"	"Extensible library to deal with http request and string based routing"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"13"	"2"	"2"	"GitHub - bcardiff/crystal-routing: Extensible library to deal with http request and string based routing in Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 13 Fork 2 bcardiff/crystal-routing Code Issues 1 Pull requests 1 Pulse Graphs Extensible library to deal with http request and string based routing in Crystal 11 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 2289be7 Jul 8, 2015 bcardiff Merge pull request #1 from bcardiff/modules … Use modules to simplify code Permalink Failed to load latest commit information. sample spec src .gitignore .travis.yml LICENSE Projectfile README.md README.md crystal-routing Extensible library to deal with http request and string based routing in Crystal. Features: Building blocks to define others routing/delegation mechanisms Compiled time check method invocation Installation Add it to Projectfile deps do   github ""bcardiff/crystal-routing"" end Usage # file: app.cr require ""http/server"" require ""routing""  class FooController   include Routing::Routable    def method1     HTTP::Response.ok ""text/plain"", ""method1""   end    def method2     HTTP::Response.ok ""text/plain"", routing_context.params[""id""]   end end  module App   class Routes     include Routing::HttpRequestRouter      get ""m1"", ""foo#method1""     get ""foo/:id"", ""foo#method2""     root ""foo#method1""   end end  routes = App::Routes.new server = HTTP::Server.new(8080) do |request|   routes.route(request) end  puts ""Listening on http://0.0.0.0:8080"" server.listen Run the server $ crystal app.cr  Use the server $ curl http://localhost:8080 method1  $ curl http://localhost:8080/m1 method1  $ curl http://localhost:8080/foo/42 42  More in samples and specs Development TODO: Write instructions for development Contributing Fork it ( https://github.com/bcardiff/crystal-routing/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors bcardiff Brian J. Cardiff - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bcardiff/crystal-routing"	"Extensible library to deal with http request and string based routing"	"true"
"HTTP"	"helmet"	"https://github.com/EvanHahn/crystal-helmet"	"Set security-related HTTP headers"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"1"	"0"	"GitHub - EvanHahn/crystal-helmet: a port of the Node Helmet module to the Crystal programming language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 2 Fork 0 EvanHahn/crystal-helmet Code Issues 0 Pull requests 0 Pulse Graphs a port of the Node Helmet module to the Crystal programming language https://evanhahn.github.io/crystal-helmet/ 21 commits 2 branches 2 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 637aa46 Apr 10, 2016 EvanHahn v0.2.0 Permalink Failed to load latest commit information. spec src .gitignore crystal init Apr 9, 2016 .travis.yml HISTORY.md LICENSE.txt LICENSE -> LICENSE.txt Apr 9, 2016 README.md shard.yml README.md Helmet Helmet helps you secure your Crystal web apps by setting various HTTP headers. It's not a silver bullet, but it can help! This is a port of the Node.js version of Helmet. Installation Add this to your application's shard.yml: dependencies:   helmet:     github: EvanHahn/crystal-helmet Usage require ""http/server"" require ""helmet""  server = HTTP::Server.new(""0.0.0.0"", 8080,   [     Helmet::DNSPrefetchControllerHandler.new,     Helmet::FrameGuardHandler.new,     Helmet::InternetExplorerNoOpenHandler.new,     Helmet::NoSniffHandler.new,     Helmet::StrictTransportSecurityHandler.new(7.day),     Helmet::XSSFilterHandler.new,   ]) do |context|   context.response.content_type = ""text/plain""   context.response.print ""Hello world!"" end  server.listen Helmet is really just a collection of smaller handlers that set HTTP headers. See them listed in the example above and in the documentation. Contributing Fork it (https://github.com/EvanHahn/crystal-helmet/fork) Create your branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add XYZ') Push to the branch (git push origin my-new-feature) Create a new pull request Contributors Evan Hahn - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/EvanHahn/crystal-helmet"	"Set security-related HTTP headers"	"true"
"HTTP"	"http2"	"https://github.com/ysbaddaden/http2"	"HTTP/2 Protocol Implementation"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"4"	"0"	"GitHub - ysbaddaden/http2: HTTP/2 Protocol Implementation for the Crystal Language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 15 Fork 0 ysbaddaden/http2 Code Issues 2 Pull requests 0 Pulse Graphs HTTP/2 Protocol Implementation for the Crystal Language 33 commits 2 branches 0 releases 1 contributor Crystal 99.7% Makefile 0.3% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags hack-http-server master Nothing to show Nothing to show New pull request Latest commit 387fb7e Jun 23, 2016 ysbaddaden Stream#send_data respects stream's window size (flow-control) … The stream now slices the data respecting the stream's window size in addition to the maximum frame size. The sending fiber is paused when the stream's window size becomes empty (or negative) then resumed when the window size changes, that is when a WINDOW UPDATE frame is received for the stream.  This only verifies and consumes the stream's window size, not the connection window size (ie. from stream 0). Permalink Failed to load latest commit information. src Stream#send_data respects stream's window size (flow-control) Jun 23, 2016 test HPACK: tests encoding/decoding integers >= 127 Jun 1, 2016 Makefile Upgrade to Crystal 0.18.x Jun 22, 2016 h2.cr Upgrade to Crystal 0.18.x Jun 22, 2016 shard.lock Cleanup for passing the h2spec test suite May 31, 2016 shard.yml RFC7541: HPACK Decoder Feb 14, 2016 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ysbaddaden/http2"	"HTTP/2 Protocol Implementation"	"true"
"HTTP"	"http_parser.cr"	"https://github.com/kostya/http_parser.cr"	"Wrapper for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"11"	"3"	"1"	"GitHub - kostya/http_parser.cr: Crystal wrapper for Http Parser lib: https://github.com/joyent/http-parser Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 11 Fork 1 kostya/http_parser.cr Code Issues 0 Pull requests 0 Pulse Graphs Crystal wrapper for Http Parser lib: https://github.com/joyent/http-parser 93 commits 3 branches 2 releases Fetching contributors C 86.4% Crystal 8.5% Makefile 2.8% Python 1.1% Other 1.2% C Crystal Makefile Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cfile master url Nothing to show 0.8 0.7 Nothing to show New pull request Latest commit 0bab82c Jun 22, 2016 kostya fix Permalink Failed to load latest commit information. benchmark added multipart parser, fixed #2 May 11, 2016 examples added multipart parser, fixed #2 May 10, 2016 spec added multipart parser, fixed #2 May 10, 2016 src fix May 11, 2016 .gitignore bump libs May 11, 2016 .gitmodules remove submodule Jul 11, 2014 .travis.yml update crystal, make it as shard Nov 1, 2015 LICENSE update crystal, make it as shard Nov 1, 2015 Makefile added multipart parser, fixed #2 May 10, 2016 README.md fix Jun 22, 2016 shard.yml allow to install with shards, refactor Dec 20, 2015 README.md HttpParser Crystal wrapper for Http Parser lib: https://github.com/joyent/http-parser. And for Http multipart parser https://github.com/iafonov/multipart-parser-c Installation Add this to your application's shard.yml: dependencies:   http_parser:     github: kostya/http_parser.cr     branch: master Usage require ""http_parser""  puts HttpParser.version_string  str = "" GET / HTTP/1.1 Host: www.example.com Connection: keep-alive User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.78 S Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Encoding: gzip,deflate,sdch Accept-Language: en-US,en;q=0.8 Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3  ""  parser = HttpParser::Request.new parser << str  p parser.headers p parser.method p parser.http_version p parser.request_url Multipart Example: str = ""--AaB03x\r\n""+       ""content-disposition: form-data; name=\""field1\""\r\n""+       ""\r\n""+       ""Joe Blow\r\nalmost tricked you!\r\n""+       ""--AaB03x\r\n""+       ""content-disposition: form-data; name=\""pics\""; filename=\""file1.txt\""\r\n""+       ""Content-Type: text/plain\r\n""+       ""\r\n""+       ""... contents of file1.txt ...\r\r\n""+       ""--AaB03x--\r\n""  m = HttpParser::Multipart.new(""AaB03x"") m << str p m.parts Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kostya/http_parser.cr"	"Wrapper for"	"true"
"HTTP"	"Http Parser lib"	"https://github.com/nodejs/http-parser"	"Wrapper for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2736"	"256"	"746"	"GitHub - nodejs/http-parser: http request/response parser for c Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 256 Star 2,736 Fork 746 nodejs/http-parser Code Issues 22 Pull requests 18 Pulse Graphs http request/response parser for c 393 commits 5 branches 18 releases 68 contributors C 96.5% Makefile 2.2% Python 1.3% C Makefile Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags event_stream master v0.6 v0.10 version0.2 Nothing to show v2.7.0 v2.6.2 v2.6.1 v2.6.0 v2.5.0 v2.5 v2.4.2 v2.4.1 v2.4 v2.3 v2.2.1 v2.2 v2.1 v2.0 v1.0 v0.3 v0.2 v0.1 Nothing to show New pull request Latest commit b2cc8e4 Apr 22, 2016 guoxiao committed with indutny test: remove ‘nread’, which is not used … PR-URL: #300 Reviewed-By: Fedor Indutny <fedor@indutny.com> Permalink Failed to load latest commit information. contrib src: introduce `http_parser_url_init` Oct 27, 2015 .gitignore header: treat Wine like MinGW Jul 22, 2015 .mailmap Bump version to 2.4.0 Jan 14, 2015 .travis.yml send travis irc notifications to #node-ci Nov 3, 2014 AUTHORS src: support LINK/UNLINK (RFC 2068, draft-snell-link-method) Oct 26, 2015 LICENSE-MIT It was pointed out we're missing attribution to NGINX May 15, 2011 Makefile Bump version to 2.6.0 Apr 19, 2016 README.md readme: improve format, fix code syntax May 31, 2016 bench.c bench: add chunked bytes Dec 5, 2014 http_parser.c src: put `assert()` after var declarations Apr 25, 2016 http_parser.gyp build: add default build flags to gyp script Oct 14, 2012 http_parser.h Bump version to 2.6.0 Apr 19, 2016 test.c test: remove ‘nread’, which is not used Jun 22, 2016 README.md HTTP Parser This is a parser for HTTP messages written in C. It parses both requests and responses. The parser is designed to be used in performance HTTP applications. It does not make any syscalls nor allocations, it does not buffer data, it can be interrupted at anytime. Depending on your architecture, it only requires about 40 bytes of data per message stream (in a web server that is per connection). Features: No dependencies Handles persistent streams (keep-alive). Decodes chunked encoding. Upgrade support Defends against buffer overflow attacks. The parser extracts the following information from HTTP messages: Header fields and values Content-Length Request method Response status code Transfer-Encoding HTTP version Request URL Message body Usage One http_parser object is used per TCP connection. Initialize the struct using http_parser_init() and set the callbacks. That might look something like this for a request parser: http_parser_settings settings; settings.on_url = my_url_callback; settings.on_header_field = my_header_field_callback; /* ... */  http_parser *parser = malloc(sizeof(http_parser)); http_parser_init(parser, HTTP_REQUEST); parser->data = my_socket; When data is received on the socket execute the parser and check for errors. size_t len = 80*1024, nparsed; char buf[len]; ssize_t recved;  recved = recv(fd, buf, len, 0);  if (recved < 0) {   /* Handle error. */ }  /* Start up / continue the parser.  * Note we pass recved==0 to signal that EOF has been received.  */ nparsed = http_parser_execute(parser, &settings, buf, recved);  if (parser->upgrade) {   /* handle new protocol */ } else if (nparsed != recved) {   /* Handle error. Usually just close the connection. */ } HTTP needs to know where the end of the stream is. For example, sometimes servers send responses without Content-Length and expect the client to consume input (for the body) until EOF. To tell http_parser about EOF, give 0 as the fourth parameter to http_parser_execute(). Callbacks and errors can still be encountered during an EOF, so one must still be prepared to receive them. Scalar valued message information such as status_code, method, and the HTTP version are stored in the parser structure. This data is only temporally stored in http_parser and gets reset on each new message. If this information is needed later, copy it out of the structure during the headers_complete callback. The parser decodes the transfer-encoding for both requests and responses transparently. That is, a chunked encoding is decoded before being sent to the on_body callback. The Special Problem of Upgrade HTTP supports upgrading the connection to a different protocol. An increasingly common example of this is the WebSocket protocol which sends a request like     GET /demo HTTP/1.1     Upgrade: WebSocket     Connection: Upgrade     Host: example.com     Origin: http://example.com     WebSocket-Protocol: sample  followed by non-HTTP data. (See RFC6455 for more information the WebSocket protocol.) To support this, the parser will treat this as a normal HTTP message without a body, issuing both on_headers_complete and on_message_complete callbacks. However http_parser_execute() will stop parsing at the end of the headers and return. The user is expected to check if parser->upgrade has been set to 1 after http_parser_execute() returns. Non-HTTP data begins at the buffer supplied offset by the return value of http_parser_execute(). Callbacks During the http_parser_execute() call, the callbacks set in http_parser_settings will be executed. The parser maintains state and never looks behind, so buffering the data is not necessary. If you need to save certain data for later usage, you can do that from the callbacks. There are two types of callbacks: notification typedef int (*http_cb) (http_parser*); Callbacks: on_message_begin, on_headers_complete, on_message_complete. data typedef int (*http_data_cb) (http_parser*, const char *at, size_t length); Callbacks: (requests only) on_url, (common) on_header_field, on_header_value, on_body; Callbacks must return 0 on success. Returning a non-zero value indicates error to the parser, making it exit immediately. For cases where it is necessary to pass local information to/from a callback, the http_parser object's data field can be used. An example of such a case is when using threads to handle a socket connection, parse a request, and then give a response over that socket. By instantiation of a thread-local struct containing relevant data (e.g. accepted socket, allocated memory for callbacks to write into, etc), a parser's callbacks are able to communicate data between the scope of the thread and the scope of the callback in a threadsafe manner. This allows http-parser to be used in multi-threaded contexts. Example:  typedef struct {   socket_t sock;   void* buffer;   int buf_len;  } custom_data_t;   int my_url_callback(http_parser* parser, const char *at, size_t length) {   /* access to thread local custom_data_t struct.   Use this access save parsed data for later use into thread local   buffer, or communicate over socket   */   parser->data;   ...   return 0; }  ...  void http_parser_thread(socket_t sock) {  int nparsed = 0;  /* allocate memory for user data */  custom_data_t *my_data = malloc(sizeof(custom_data_t));   /* some information for use by callbacks.  * achieves thread -> callback information flow */  my_data->sock = sock;   /* instantiate a thread-local parser */  http_parser *parser = malloc(sizeof(http_parser));  http_parser_init(parser, HTTP_REQUEST); /* initialise parser */  /* this custom data reference is accessible through the reference to the  parser supplied to callback functions */  parser->data = my_data;   http_parser_settings settings; /* set up callbacks */  settings.on_url = my_url_callback;   /* execute parser */  nparsed = http_parser_execute(parser, &settings, buf, recved);   ...  /* parsed information copied from callback.  can now perform action on data copied into thread-local memory from callbacks.  achieves callback -> thread information flow */  my_data->buffer;  ... }  In case you parse HTTP message in chunks (i.e. read() request line from socket, parse, read half headers, parse, etc) your data callbacks may be called more than once. Http-parser guarantees that data pointer is only valid for the lifetime of callback. You can also read() into a heap allocated buffer to avoid copying memory around if this fits your application. Reading headers may be a tricky task if you read/parse headers partially. Basically, you need to remember whether last header callback was field or value and apply the following logic: (on_header_field and on_header_value shortened to on_h_*)  ------------------------ ------------ -------------------------------------------- | State (prev. callback) | Callback   | Description/action                         |  ------------------------ ------------ -------------------------------------------- | nothing (first call)   | on_h_field | Allocate new buffer and copy callback data | |                        |            | into it                                    |  ------------------------ ------------ -------------------------------------------- | value                  | on_h_field | New header started.                        | |                        |            | Copy current name,value buffers to headers | |                        |            | list and allocate new buffer for new name  |  ------------------------ ------------ -------------------------------------------- | field                  | on_h_field | Previous name continues. Reallocate name   | |                        |            | buffer and append callback data to it      |  ------------------------ ------------ -------------------------------------------- | field                  | on_h_value | Value for current header started. Allocate | |                        |            | new buffer and copy callback data to it    |  ------------------------ ------------ -------------------------------------------- | value                  | on_h_value | Value continues. Reallocate value buffer   | |                        |            | and append callback data to it             |  ------------------------ ------------ --------------------------------------------  Parsing URLs A simplistic zero-copy URL parser is provided as http_parser_parse_url(). Users of this library may wish to use it to parse URLs constructed from consecutive on_url callbacks. See examples of reading in headers: partial example in C from http-parser tests in C from Node library in Javascript Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nodejs/http-parser"	"Wrapper for"	"true"
"HTTP"	"router-simple.cr"	"https://github.com/karupanerura/router-simple.cr"	"Simple path router"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5"	"1"	"0"	"GitHub - karupanerura/router-simple.cr: simple path router inspired by Router::Simple. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 5 Fork 0 karupanerura/router-simple.cr Code Issues 0 Pull requests 0 Pulse Graphs simple path router inspired by Router::Simple. 8 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE Projectfile README.md README.md router-simple simple path router inspired by Router::Simple. Installation Add it to Projectfile deps do   github ""karupanerura/router-simple.cr"" end Usage require ""router-simple""  dispatcher = Router::Simple::Dispatcher(Hash(Symbol, String)).new() dispatcher.add(""/"", {   :controller => ""Root"",   :action     => ""index"", }) dispatcher.add(""/users/:user_id"", {   :controller => ""Users"",   :action     => ""fetch_by_id"", })  dispatcher.match(""/"") {|result|   p result.route.meta[:controller] # => ""Root"" }  dispatcher.match(""/users/1"") {|result|   p result.route.meta[:controller] # => ""Users""   p result.match[""user_id""]        # => ""1"" } Development TODO: Write instructions for development Contributing Fork it ( https://github.com/karupanerura/router-simple.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors karupanerura(https://github.com/karupanerura) karupanerura - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/karupanerura/router-simple.cr"	"Simple path router"	"true"
"HTTP"	"session"	"https://github.com/porras/session.git"	"Cookie based sessions in Crystal HTTP applications"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"2"	"1"	"GitHub - porras/session: Cookie based sessions in Crystal HTTP applications Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 15 Fork 1 porras/session Code Issues 0 Pull requests 0 Pulse Graphs Cookie based sessions in Crystal HTTP applications 19 commits 2 branches 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master patch-1 Nothing to show Nothing to show New pull request Latest commit c2f08ce Jan 27, 2016 porras Merge branch 'sdogruyol-patch-1' Permalink Failed to load latest commit information. spec src .gitignore .travis.yml CODE_OF_CONDUCT.md LICENSE README.md example.cr shard.yml README.md Session Session is a Crystal's HTTP::Handler that implements cookie based sessions. It can be combined with other bultin or custom handlers, as well as with other Crystal libraries that implement HTTP::Handlers such as kemal. It takes a lot of inspiration from Rack::Session::Cookie, but it's much smaller, simpler, and obviously less feature-rich. Also less widespread and tested, but you can help with that! WARNING: this is work in progress and most likely contains security, performance and other kinds of issues I'm working on finding and fixing. I don't use it in production and you shouldn't either. Installation Add this to your application's shard.yml: dependencies:   session:     github: porras/session Session requires Crystal 0.11. Usage Session::Handler is a generic class, that is, requires a type to be passed when instantiating it. This type is the data structure where your session data will be stored. This type has to be: Serializable to JSON, either because it's a bultin type that is, or via JSON.mapping if it's a custom type Initializable without parameters Hash(String, String) makes a sensible yet simple and flexible example. A more strict alternative can be a class whose attributes are nilable so you can define an empty initializer (or provide defaults on it): class MySession   JSON.mapping({     time:   {type: String, key: ""t"", nilable: true},     visits: {type: Int32, key: ""v""},   })    def initialize     @visits = 0   end end Providing a shorter key helps keeping the cookie size small. Once you instantiate the handler passing the underlying type and the wanted options (see below), and you put it in the HTTP handlers chain, all downstream handlers will have a context.session available to read and update. Options secret (mandatory): the content of the session cookie are not encrypted but signed. That is, a user could read the contents (provided that they know the algorithim, which is available in the source code, and pretty simple), but not change it (because the signature wouldn't match). This secret is used for that. session_key (defaults to ""cr.session""): name of the cookie where the data will be stored. Raw HTTP::Handler example require ""http/server"" require ""session""  session_handler = Session::Handler(Hash(String, String)).new(secret: ""SUPERSECRET"")  server = HTTP::Server.new(""0.0.0.0"", ""3000"", [   HTTP::LogHandler.new,   HTTP::ErrorHandler.new,   session_handler, ]) do |context|   # context.session is a Hash(String, String)   context.session[""first_seen_at""] ||= Time.now.to_s   context.response.print ""You came first at #{context.session[""first_seen_at""]}"" end  server.listen Kemal example You can easily integrate with Kemal. require ""kemal"" require ""session""  session_handler = Session::Handler(Hash(String, String)).new(secret: ""SUPERSECRET"") # Add session_handler to Kemal handlers add_handler session_handler  get ""/"" do |env|   env.session[""first_seen_at""] ||= Time.now.to_s   ""You came first at #{env.session[""first_seen_at""]}"" end Contributing Fork it ( https://github.com/porras/session/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors porras Sergio Gil - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/porras/session.git"	"Cookie based sessions in Crystal HTTP applications"	"true"
"Implementations/Compilers"	"crisp"	"https://github.com/rhysd/Crisp"	"Lisp dialect implemented with Crystal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"13"	"3"	"1"	"GitHub - rhysd/Crisp: Lisp dialect implemented with Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 13 Fork 1 rhysd/Crisp Code Issues 0 Pull requests 0 Pulse Graphs Lisp dialect implemented with Crystal 33 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore import from my Mal implementation Jun 4, 2015 .travis.yml Projectfile README.md Crystal 0.18.4 Jun 25, 2016 crisp.cr README.md Crisp Crisp is one of Lisp dialect which is based on mal and implemented with Crystal. This project is a toy box for my dynamic language ideas. So Many Tasks Refactorings Make is_a? guards more elegant Import test cases from Mal Add CI More OOP (evaluator, remove global variable, move states into object) Use standard readline implementation Better lexer and parser Add examples More convenient REPL (e.g. completion) New language features using Crystal's semantics Algebraic data type ... Installation Install crystal command (instruction) $ crystal run /path/to/Crisp/crisp.cr or use crystal compile to create a binary. Examples Please see mal test cases for now. Development Environment OS X Crystal 0.7.1 ~ 0.7.3 or 0.7.7 ~ 0.11.0 or 0.17.4 or 0.18.4 License Distributed under the MIT License. Copyright (c) 2015 rhysd  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rhysd/Crisp"	"Lisp dialect implemented with Crystal"	"true"
"Implementations/Compilers"	"crystal"	"https://github.com/manastech/crystal"	"Crystal itself is written in Crystal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5325"	"267"	"447"	"GitHub - crystal-lang/crystal: The Crystal Programming Language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 267 Star 5,325 Fork 447 crystal-lang/crystal Code Issues 207 Pull requests 44 Wiki Pulse Graphs The Crystal Programming Language http://crystal-lang.org 8,502 commits 26 branches 64 releases 164 contributors Crystal 98.2% JavaScript 0.6% HTML 0.4% Shell 0.3% C++ 0.2% CSS 0.2% Other 0.1% Crystal JavaScript HTML Shell C++ CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto collections_type_restrictions feature/collections_restrictions feature/ecr_dash feature/extern feature/fiber_safe_io feature/file_stat_local_time feature/json_mapping_unknown_attributes feature/macro_now feature/macro_read_file feature/new_crystal_path feature/spec_human_time icu marshalling master release/0.10 release/0.11 release/0.14 release/0.15 release/0.16 release/0.17 release/0.18 tcl-tk tcl thread-support windows Nothing to show ruby 0.18.7 0.18.6 0.18.5 0.18.4 0.18.3 0.18.2 0.18.1 0.18.0 0.17.4 0.17.3 0.17.2 0.17.1 0.17.0 0.16.0 0.15.0 0.14.2 0.14.1 0.14.0 0.13.0 0.12.0 0.11.1 0.11.0 0.10.2 0.10.1 0.10.0 0.9.1 0.9.0 0.8.0 0.7.7 0.7.6 0.7.5 0.7.4 0.7.3 0.7.2 0.7.1 0.7.0 0.6.1 0.6.0 0.5.10 0.5.9 0.5.8 0.5.7 0.5.6 0.5.5 0.5.4 0.5.3 0.5.2 0.5.1 0.5.0 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit 024418d Jul 15, 2016 asterite committed on GitHub Merge pull request #3001 from MakeNowJust/fix/header-bug … Fixed #2999: A bug not to allow '~' in HTTP header value Permalink Failed to load latest commit information. bin Merge pull request #2971 from RX14/fix-bin/crystal Jul 9, 2016 etc Rename the `compile` command to `build`. Fixes #502 Jun 30, 2016 samples Some fixes related to the ifdef -> flag? change Jul 5, 2016 spec Fixed #2999: A bug not to allow '~' in HTTP header value Jul 15, 2016 src Fixed #2999: A bug not to allow '~' in HTTP header value Jul 15, 2016 .dockerignore Dockerfile now uses `make`. Fixes build after addition of LLVM extens… Sep 9, 2015 .editorconfig Added .editorconfig. Fixes #297 Dec 7, 2014 .gitignore Renamed libext.a to libcrystal.a. Build this library with global Make… Feb 10, 2016 .travis.yml may fix build Jun 29, 2016 BACKERS.md Fix in BACKERS.md Aug 12, 2015 CHANGELOG.md Merge branch 'release/0.18' Jul 3, 2016 CODE_OF_CONDUCT.md Modify CoC contact section Feb 17, 2016 Contributing.md update Contributing.md for the repo split [ci skip] Jun 29, 2016 Dockerfile Docker: Install git so shards works out of the box May 18, 2016 Dockerfile.release Merge branch 'release/0.18' Jun 28, 2016 LICENSE Update license year range to 2016 Jan 26, 2016 Makefile compile -> build Jul 4, 2016 README.md Link IRC webchat in readme Jun 17, 2016 Vagrantfile Use secure HTTPS calls to download packages (closes #1922) Jun 23, 2016 README.md Crystal Crystal is a programming language with the following goals: Have a syntax similar to Ruby (but compatibility with it is not a goal) Statically type-checked but without having to specify the type of variables or method arguments. Be able to call C code by writing bindings to it in Crystal. Have compile-time evaluation and generation of code, to avoid boilerplate code. Compile to efficient native code. Why? We love Ruby's efficiency for writing code. We love C's efficiency for running code. We want the best of both worlds. We want the compiler to understand what we mean without having to specify types everywhere. We want full OOP. Oh, and we don't want to write C code to make the code run faster. Status The project is in alpha stage: we are still tweaking the language and standard library. The compiler is written in Crystal. Installing Follow these instructions Try it online play.crystal-lang.org Documentation Both in progress: Official docs Standard library API Community Questions or suggestions? Ask in our Google Group, join our IRC channel #crystal-lang at chat.freenode.net, ask on our Gitter channel or ask on Stack Overflow under the crystal-lang tag. Contributing Read the general Contributing guide, and then: Fork it ( https://github.com/crystal-lang/crystal/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/manastech/crystal"	"Crystal itself is written in Crystal"	"true"
"Implementations/Compilers"	"onix"	"https://github.com/ozra/onyx-lang"	"ONYX Programming Language"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"34"	"10"	"3"	"GitHub - ozra/onyx-lang: ONYX Programming Language (Onyx → Crystal AST → LLVM-IR → Machine Code) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 34 Fork 3 ozra/onyx-lang Code Issues 56 Pull requests 0 Pulse Graphs ONYX Programming Language (Onyx → Crystal AST → LLVM-IR → Machine Code) 8,005 commits 1 branch 0 releases 152 contributors Crystal 96.5% Ox 1.7% JavaScript 0.5% Shell 0.4% Ruby 0.3% HTML 0.3% Other 0.3% Crystal Ox JavaScript Shell Ruby HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 60b02ed May 11, 2016 ozra Compiler 600% faster than initially. 20% less RAM. … - still experimental, but now problems so far - need to be cleaned up later on Permalink Failed to load latest commit information. bin Docs gen, alli, still WIP. Merge upstream. May 6, 2016 docs Docs gen, alli, still WIP. Merge upstream. May 6, 2016 etc add playground to the etc/completion files Mar 27, 2016 samples Merge ""foreign"" May 8, 2016 spec Compiler 600% faster than initially. 20% less RAM. May 11, 2016 src Compiler 600% faster than initially. 20% less RAM. May 11, 2016 .editorconfig Named args now use '#arg-name = arg' Nov 27, 2015 .gitignore Fixups for building May 6, 2016 .travis.yml Merge remote-tracking branch 'upstream/master' Apr 27, 2016 BACKERS.md Named args now use '#arg-name = arg' Nov 27, 2015 CHANGELOG_CRYSTAL.md Merge ""foreign"" May 8, 2016 CHANGELOG_ONYX.md `Self`&`this` nailed. `none?``!`/`not` now pseudos. May 9, 2016 Contributing.md Merge remote-tracking branch 'upstream/master' Mar 23, 2016 LICENSE Merge remote-tracking branch 'upstream/master' Feb 12, 2016 Makefile Docs gen, alli, still WIP. Merge upstream. May 6, 2016 README.md Leaned up readme a bit. May 11, 2016 bootstrap.sh User-Suff WIP. ""Crox"" for macros. New t-inference. Apr 18, 2016 install.sh Fixed the launch script to use `realpath` Apr 16, 2016 onyx-bootstrap.rb Add release flag to bootstrap. Removed dbg-msgs May 6, 2016 set-onyx-version.sh Refine version ""bump"" script Apr 18, 2016 README.md Onyx - pragmatic, get-shit-done, beautiful, fast & stable programming ""tl;dr Summary"" Enjoy writing apps that runs with trustworthy solid stability at speeds nearing C/C++ with the feeling of simply pseudo coding! Onyx is / has Goal of Being pragmatic - get shit done! Does what you mean! OOP-structured (studies point to pros) Imperative (because it still is the only way for fast programs, and small processors get more and more use) Easy to code functional where possible (because it is safer, studies also say so) Concurrency, currently via channels and fibers - this area will get alot of attention once the language settles. Because Moores Law is dead. Utilize scientific studies where available for the language design Human<->Code centric studies - not theoretical lambda-calculus Innovate freely to simply make a better language - think outside the box! Look at available prior art for inspiration as much as possible - remember the box! Compiles to high performance native machine code Compile fast in dev-mode for swift compile-test cycle Type system: Strongly typed - (Nil is a type) no more Java/C++/Go-null-esceptions bullshit! And still: almost global type inference (the fully global has been ditched for performance reasons) - you can get away with almost never writing a type-name (basically only types has to be typed ;-) ). Inheritance (single! - no deadly diamond of death dilemma) Traits (mixins) All types re-openable (aka monkey patchable) Sum-types Polymorphism and overloading - most of the time: no cost over a straight call. The code is very efficient (you can't make it faster yourself in C :-) ) Generics and type-vars - because Go is retarded. Almost everything can be changed by coder Most constructs in the language is just an override away Operator overloading - of course Iterators are simply implemented as methods taking ""fragments"". And no, there's no execution overhead over a hand-written while-loop. Clean readable and writeable syntax The common forms of ""casing"" is allowed interchangeably (without conflicts): dash-case, snake_case, endash—case , camelCase. FFI: Using C-API libs is piece of cake Garbage Collected (even I, have accepted it as the way of the future - now: let's just make it even faster [post 1.0 target]) Template-macros and AST-macros A terse and clear indent based syntax with voluntary explicit block ends (wysiwym + safety net). A lot of research regarding the fundamentals of brain functioning used in programming points to spatiality and visual recognition of structure. Full compatibility with Crystal lang modules - the language AST core - (any Crystal module can be used seamlessly in the same project) - this enlarges the module universe tremendously. It's hard for novel new-kid-on-the-block languages to get established when there are no libs (well, even then). Sharing a module universe with another language facilitates usage of both in the real world. Helpful error messages (will be improved more when the language spec has stabilized) The ""Did you mean this:..."" we've come to love in clang (compare gcc) - and even deeper analysis of likely errors I won't stop optimizing until hell freezes over. - The compiler should make things fast - you should focus on keeping your code maintainable. Closures, of course What do You Mean With Scientific Approach? Well, there aren't that many studies concerning coding directly. So admittedly the statement could be seen as kind of vague. The focus is on the actual process of a human being reading, writing and reasoning on code to accomplish a task. What is not meant is ""highly abstract functional lambda theory proofs from outer space when the cat is and isn't in the cradle and/or you give a shit"". Run Down Optimize for human readability (and writability) - not computers parsing (not lisp syntax uniformity). The compiler should work hard - not you! Any work should be enjoyable if we're smart about being human, so also coding. A language has to work for several scenarios, be elegantly out of the way when prototyping. Be lovingly tough on disciplined code when demanded by coder. A language has to work for a wide range of coders. Any team bigger than one will have mixed levels of experience and requirements, while still working on the same code base. Writing idiomatic clear code should be the optimized way of writing code, no ""creative smart coding"" to speed things up. It's the compilers job to make it run fast! (But sometimes you just need to dive into the black box) Some basic syntactic aspects has been shown to be important for all humans apt to math and especially coding (except females [!], exceptions noted) - and that is spatial cognition. Relation to Crystal Onyx is built upon the AST, most semantics and IR generation of Crystal. There are some additional semantics for more fine-grained control in some contexts. The syntax is entirely different. The actual machine code generation is done by LLVM, a god sent to language loving mankind! Currently, by internally flagging AST-nodes, Onyx can compile both onyx and crystal sources within the same program. Therefore great praise and credit goes out to the efforts of the Crystal team and the LLVM team, whom without Onyx would not be in this stage. About Oscar Campbell I've always loved linguistics, programming and manipulation of text. I coded my first language 25 years ago (when I was twelve). Well, it was called ""CP Torsk 0.2"" (""CP Cod 0.2""), so not that serious. For the Amiga or Commodore 64 if I remember correctly. Onyx is the final frontier - this is where the accumulated interest and experiences will play out fully. Inspiration Most of Onyx is accumulated ideas with no basis in any of the modern languages. Fortunately, many concepts have ended up in similar ways as other new languages (we all have the same languages as reference, so we're bound to come up with similar ideas). I've then looked at the newer languages to see if they have some better ideas to steal from. Amateurs borrow - pros steal. So, inspiration has been taken from languages as diverse as LiveScript, Haskell, Nim, Go, Rust, Erlang, Python, Lisp, Swift, Scala, C++, LLVM-IR(!), etc. Sometimes syntax, sometimes semantics, sometimes just an idea inspired by some concept. What does it look like currently? GitHub doesn't accept highlighters until there are hundreds of repositories using it, so to view these with highlighting you currently have to resort to Sublime Text or Atom. For Crystalers, the front page example in Onyx will be very familiar (lent the examples): -- A very basic HTTP server require ""http/server""  server = HTTP.Server 8080, (request) ~>   HTTP.Response.ok ""text/plain"", ""Hello world! You called me on {request.path} at {Time.now}!""  say ""Listening on http://0.0.0.0:8080"" server.listen  A rather contrived example, just to show some basic constructs:  type Greeter     @greeting–phrase = ""Greetings,""      init() ->     init(@greeting–phrase) ->      greet(who–or–what) ->!         say make–greeting who–or–what      make–greeting(who–or–what) ->         ""{@greeting–phrase} {who–or–what}"" end  type HelloWorldishGreeter < Greeter     @greeting–phrase = ""Hello"" end  ext HelloWorldishGreeter: greet(who-or-what) -> previous-def(who-or-what).red  greeter = HelloWorldishGreeter ""Goodbye cruel"" greeter.greet ""world""  -- => ""Goodbye cruel world""   And with some added explanations:  -- Comments are started with two dashes - rather natural. -- Types inherits `Reference` by default if nothing else specified. -- All types begin with a capital  type Greeter     @greeting–phrase = ""Greetings,""  -- member-vars are prefixed with `@`     -- separator (-|–|_) completely interchangeable so above can be referred     -- to as @greeting_phrase, @greeting-phrase etc. from _your_ code - should     -- you prefer a different style than a lib-author      init() ->        -- init does nothing - just keep defaults      init(@greeting–phrase) ->         -- does nothing in body. Sugar for assigning a member in the parameter         -- did all we need! (the `@` prefix to parameter name)      -- above could have been written more verbose; in many different levels.     -- init(greeting–phrase Str) ->     --     @greeting–phrase = greeting–phrase     -- end      -- ending expressions blocks, is implicit, but can be done                 -- explicitly.      -- define a method that greets someone     greet(who–or–what) ->!  -- `!` is sugar notation for methods that returns                             -- ""nothing"", it's ensured that return value is nil         say make–greeting who–or–what         -- say(make–greeting(who–or–what)) -- parentheses or ""juxtapos-calls""      -- a method that constructs the message     make–greeting(who–or–what) ->         -- interpolation of exprs within strings is done with simple braces         ""{@greeting–phrase} {who–or–what}""  -- last expression is returned      -- All on one line works too of course:     -- make–greeting(who–or–what) -> ""{@greeting–phrase} {who–or–what}""  end  -- as already mentioned, you can explicitly end code block at will  -- another type, inheriting Greeter type HelloWorldishGreeter < Greeter     @greeting–phrase = ""Hello"" end  -- re-open the type! Here using nest-token instead of indent (colon here) ext HelloWorldishGreeter: greet(who-or-what) -> previous-def(who-or-what).red  greeter = HelloWorldishGreeter ""Goodbye cruel"" -- Some variations for instantiating: (call syntax on a type is sugar -- for calling a `new` function defined on the type): -- greeter = HelloWorldishGreeter(""Goodbye cruel"") -- greeter = HelloWorldishGreeter.new(""Goodbye cruel"") -- greeter = HelloWorldishGreeter.new ""Goodbye cruel""  greeter.greet ""world"" --  => ""Goodbye cruel world""   Status Onyx is still in design-/RFC-stage. Input on the syntax and language in general are highly welcomed! It is tightening up, still some syntactic changes occur. Some syntax doesn't have semantics yet, until it gets carved deeper in the onyx. For example declaring func's pure, explicit let/mut on params, etc. Roadmap See it's own issue. Installing You will want the highlighter for Sublime Text or Atom: git clone https://github.com/ozra/sublime-onyx.git. The Sublime and Atom highlighter will be kept up to date with changing language constructs. It should be easily portable to TextMate and LimeText. Clone the source tree: git clone https://github.com/ozra/onyx-lang.git cd in to it and make bootstrap - to automatically download, install Crystal and compile and install Onyx. It's installed into /opt/onyx/ to keep it separated from your package-managed /usr/local/. A link to the binary is made in /usr/local/bin/. You need git, wget and some more stuff on your system (the scipt solves most on debian-based systems currently). The script is unfortunately Debian-ish Linux centric atm. Anyone handy with other distros, Mac OS and Free BSF etc. are welcome to shape it up and PR. Documentation For the language itself - see the issues in GitHub. Since the language is taking shape and changing - that serves both as current documentation and a way of chipping in. Syntax constructs are described there - look for tag ""doubles-as-docs"". Standard library docs are coming soon. Onyx Project Code of Conduct Whatever you think promotes and helps the language forward is enough for code of conduct for now. Cursing is fucking allowed, but not necessarily decreed. If someone is offended - you've probably been an asshole; acknowledge it and apologize. We can all stumble down that road some times. Apologizing is a strong and proud act. Everyone with an interest is welcome, no matter where you come from linguistically or otherwise (creed, religion, sexual orientation, sexual make-up or even musical taste). In fact different backgrounds are essential for a good project! Community Use ""issues"" for now. Add RFC's or ideas already if you feel like it! There is also an IRC-channel now on freenode #onyx-lang, I'll try to remember to login. Read the general Contributing guide, (it's very terse, you will get through it!) Contributing Read the general Contributing guide, (it's very terse, you will get through it!): Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ozra/onyx-lang"	"ONYX Programming Language"	"true"
"Logging and monitoring"	"gelf-crystal"	"https://github.com/benoist/gelf-crystal"	"A GELF logger"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"2"	"0"	"GitHub - benoist/gelf-crystal: GELF UDP logger Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 3 Fork 0 benoist/gelf-crystal Code Issues 0 Pull requests 0 Pulse Graphs GELF UDP logger 11 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md gelf A GELF compatible logger http://docs.graylog.org/en/latest/pages/gelf.html Installation Add this to your application's shard.yml: dependencies:   gelf:     github: benoist/gelf-crystal Usage require ""gelf""  logger ||= GELF::Logger.new(""localhost"", port, ""WAN"").configure do |config|   config.facility = ""gelf-cr""   config.host     = ""localhost""   config.level    = Logger::DEBUG end  logger.debug(""some debug message"") logger.info(""some info message"")  logger.debug({ ""short_message"" => ""some short message"", ""_extra_var"" => ""some var""}) # also set the short message Contributing Fork it ( https://github.com/[your-github-name]/gelf/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/benoist/gelf-crystal"	"A GELF logger"	"true"
"Logging and monitoring"	"syslog.cr"	"https://github.com/comandeo/syslog.cr"	"Implementation of Syslog client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"1"	"GitHub - comandeo/syslog.cr: Syslog client implementation for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 1 comandeo/syslog.cr Code Issues 0 Pull requests 0 Pulse Graphs Syslog client implementation for Crystal 16 commits 5 branches 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags better-format crystal-0.0.16 fix-documentation local-logging master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .editorconfig .gitignore .travis.yml LICENSE README.md shard.yml README.md Syslog.cr Syslog client implementation for Crystal (work in progress!) Installation Add this to your application's shard.yml: dependencies:   syslog:     github: comandeo/syslog.cr Usage require ""syslog"" # Use local syslog with defaults: # - logging to `/dev/log` # - syslog port: 514 # - log level: INFO # - application hostname: localhost # - application name: """" # - syslog facility: local4 # - log level: INFO logger = Syslog::Logger.new logger.info(""Something interesting happened"")  # Use remote syslog with some custom params logger = Syslog::Logger.new(     remote: true,     syslog_host: ""logger.company.com"",     syslog_port: 1234,     appname: ""application.company.com"",     facility: Syslog::Facility::USER )  logger.error(""Something bad happened"")  Contributing Fork it ( https://github.com/comandeo/syslog/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors comandeo Dmitry Rybakov - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/comandeo/syslog.cr"	"Implementation of Syslog client"	"true"
"Low level bindings"	"crsfml"	"https://github.com/BlaXpirit/crsfml"	"Bindings for (through CSFML)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"63"	"5"	"2"	"GitHub - BlaXpirit/crsfml: Crystal bindings to SFML multimedia/game library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 63 Fork 2 BlaXpirit/crsfml Code Issues 0 Pull requests 0 Wiki Pulse Graphs Crystal bindings to SFML multimedia/game library 96 commits 5 branches 10 releases 2 contributors Crystal 95.0% Python 4.7% Shell 0.3% Crystal Python Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.2 gh-pages master new tutorials Nothing to show v2.3.7 v2.3.6 v2.3.5 v2.3.4 v2.3.3 v2.3.2 v2.3.1 v2.3.0 v2.2.1 v2.2.0 Nothing to show New pull request Latest commit ec4d334 Apr 20, 2016 BlaXpirit Add type annotations to fix after breaking change Permalink Failed to load latest commit information. examples Add type annotations to fix after breaking change Apr 20, 2016 generate Revert previous commit and specify the type in wrapper objects Oct 23, 2015 src Add type annotations to fix after breaking change Apr 20, 2016 .gitignore Rename require from ""csfml"" to ""crsfml"" Apr 27, 2015 CONTRIBUTING.md Update information Aug 26, 2015 LICENSE Initial commit Apr 17, 2015 README.md Documentation tweaks Aug 29, 2015 logo.png Add logo Apr 28, 2015 README.md Crystal bindings to Simple and Fast Multimedia Library (through CSFML). Documentation Tutorials API Documentation Examples Installing Information CrSFML is a library that allows you to use SFML with Crystal. SFML is a library written in C++, but it has official bindings to C, called CSFML, which is what CrSFML actually provides bindings to. CSFML 2.3, which requires SFML 2.3, must be installed to use CrSFML (see older releases for 2.2). Information on contributing + implementation details. CrSFML has been tested on Linux 64-bit. It should work on other major systems if Crystal supports them. Audio and Network modules are considered experimental. Expect some rough edges. Credits CrSFML was made by Oleh Prypin. CrSFML is licensed under the terms and conditions of the zlib/libpng license. This library uses and is based on SFML and CSFML. Thanks to Alan Willms for translating tutorials to Crystal and finding multiple bugs. Crystal and Python programming languages are used. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BlaXpirit/crsfml"	"Bindings for (through CSFML)"	"true"
"Low level bindings"	"Simple and Fast Multimedia Library"	"http://www.sfml-dev.org/"	"Bindings for (through CSFML)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"SFML Learn Download Community Development Home Français Donate Flattr Simple and Fast Multimedia Library SFML is multi-media SFML provides a simple interface to the various components of your PC, to ease the development of games and multimedia applications. It is composed of five modules: system, window, graphics, audio and network. Discover their features more in detail in the tutorials and the API documentation. SFML is multi-platform With SFML, your application can compile and run out of the box on the most common operating systems: Windows, Linux, Mac OS X and soon Android & iOS. Pre-compiled SDKs for your favorite OS are available on the download page. SFML is multi-language SFML has official bindings for the C and .Net languages. And thanks to its active community, it is also available in many other languages such as Java, Ruby, Python, Go, and more. Learn more about them on the bindings page. SFML is licensed under the terms and conditions of the zlib/png license. Copyright © Laurent Gomila"	"null"	"null"	"Bindings for (through CSFML)"	"true"
"Low level bindings"	"crystal-dbus"	"https://github.com/BlaXpirit/crystal-dbus"	"Bindings to D-Bus"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"1"	"0"	"GitHub - BlaXpirit/crystal-dbus: Crystal bindings to D-Bus Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 2 Fork 0 BlaXpirit/crystal-dbus Code Issues 0 Pull requests 0 Pulse Graphs Crystal bindings to D-Bus 9 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src .gitignore LICENSE README.md example.cr README.md crystal-dbus Crystal bindings for D-Bus Only sending messages (calling methods) is supported for now. See example. Structs and other rarely used types are not implemented yet. License: MIT This library uses libdbus. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BlaXpirit/crystal-dbus"	"Bindings to D-Bus"	"true"
"Low level bindings"	"curses"	"https://github.com/ruivieira/curses"	"Bindings for the curses library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"0"	"GitHub - ruivieira/curses: Crystal bindings to the curses library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 0 ruivieira/curses Code Issues 0 Pull requests 0 Pulse Graphs Crystal bindings to the curses library 1 commit 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. example spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md curses Crystal bindings to the curses library. Installation Add this to your application's shard.yml: dependencies:   curses:     github: ruivieira/curses Usage require ""curses"" TODO: Write usage instructions here Development TODO: Write development instructions here Contributing Fork it ( https://github.com/ruivieira/curses/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors [ruivieira] Rui Vieira - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ruivieira/curses"	"Bindings for the curses library"	"true"
"Low level bindings"	"duktape.cr"	"https://github.com/jessedoyle/duktape.cr"	"Bindings for the javascript engine"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"33"	"2"	"1"	"GitHub - jessedoyle/duktape.cr: Evaluate JavaScript from Crystal! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 33 Fork 1 jessedoyle/duktape.cr Code Issues 0 Pull requests 0 Pulse Graphs Evaluate JavaScript from Crystal! 90 commits 3 branches 13 releases Fetching contributors Crystal 99.7% Makefile 0.3% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags duk-1-5 fix-require-function master Nothing to show v0.9.0 v0.8.2 v0.8.1 v0.8.0 v0.7.0 v0.6.4 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.1 v0.5.0 0.5.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitattributes .gitignore .travis.yml CHANGELOG.md LICENSE Makefile README.md shard.yml README.md Duktape.cr Duktape.cr provides Crystal bindings to the Duktape javascript engine. Installation Duktape.cr is best installed using Shards. Add this to your shard.yml: name: example # your project's name version: 1.0.0 # your project's version  dependencies:   duktape:     github: jessedoyle/duktape.cr     version: ~> 0.9.0 then execute: shards install Shards v0.4.0 or greater will automatically make the native library. You can make the library manually by calling make libduktape from libs/duktape/ext. Usage You must first create a Duktape context: require ""duktape""  sbx = Duktape::Sandbox.new  sbx.eval! <<-JS  var birthYear = 1990;   function calcAge(birthYear){  var current = new Date();  var year = current.getFullYear();  return year - birthYear;  }   print(""You are "" + calcAge(birthYear) + "" years old.""); JS An overwhelming majority of the Duktape API has been implemented. You can call the API functions directly on a Duktape::Sandbox or Duktape::Context instance: sbx = Duktape::Sandbox.new sbx.push_global_object   # [ global ] sbx.push_string ""Math""   # [ global ""Math"" ] sbx.get_prop -2          # [ global Math ] sbx.push_string ""PI""     # [ global Math ""PI"" ] sbx.get_prop -2          # [ global Math PI ] pi = sbx.get_number -1 puts ""PI: #{pi}""         # => PI: 3.14159 sbx.pop_3 Eval vs Eval! All of the evaluation API methods have a corresponding bang-method (!). The bang method calls will raise when a javascript error occurs, the non-bang methods will not raise on invalid javascript. For example: sbx = Duktape::Context.new sbx.eval <<-JS  var a = JS will not raise any errors, but will return a non-zero error code. The following code: sbx = Duktape::Context.new sbx.eval! <<-JS  __invalid(); JS will raise Duktape::SyntaxError. Sandbox vs Context You should only execute untrusted javascript code from within a Duktape::Sandbox instance. A sandbox isolates code from insecure operations such as Duktape's internal require mechanism and the Duktape global javascript object. Creating a Duktape::Context gives code access to internal Duktape properties: ctx = Duktape::Context.new ctx.eval! <<-JS  print(Duktape.version); JS Setting a Timeout Duktape::Sandbox instances may optionally take an execution timeout limit in milliseconds. This provides protection against infinite loops when executing untrusted code. A Duktape::RangeError exception is raised when the following code executes for longer than specified: sbx = Duktape::Sandbox.new 500 # 500ms execution time limit sbx.eval! ""while (true) {}""    # => RangeError Duktape::Runtime An alternative interface for evaluating JS code is available via the Duktape::Runtime class. This class provides a streamlined evaluation API (similar to ExecJS) that allows easier access to javascript values without the need to call many low-level Duktape API functions. The entire Runtime API is as follows: call(property, *args) - Call the property or function with the given arguments and return the result. call([properties], *args) - Call the property that is nested within an array of string property names. eval(source) - Evaluate the javascript source and return the last value. exec(source) - Evaluate the javascript source and always return nil. Duktape::Runtime instances can also be provided an initialization block when created. Here's an example:   require ""duktape/runtime""    # A Runtime (optionally) accepts an initialization block   rt = Duktape::Runtime.new do |sbx|     sbx.eval! <<-JS  function test(a, b, c) { return a + b + c; }  JS   end    rt.call(""test"", 3, 4, 5) # => 12.0 (same as test(3, 4, 5);)   rt.call([""Math"", ""PI""])  # => 3.14159   rt.eval(""1 + 1"")         # => 2.0   rt.exec(""1 + 1"")         # => nil Note that duktape/runtime is not loaded by the base duktape require, and may be used standalone if necessary (ie. replace your require ""duktape"" calls with require ""duktape/runtime"" if you want this functionality). Calling Crystal Code from Javascript Note: This functionality is considered experimental and syntax/functionality may change dramatically between releases. It is possible to call Crystal code from your javascript:   sbx = Duktape::Sandbox.new    # Push a global function named ""add_together""   # that accepts two arguments.   sbx.push_global_proc(""add_together"", 2) do |ptr|     env = Duktape::Sandbox.new ptr      # Get the two arguments     # from the stack     a = env.require_number 0     b = env.require_number 1      env.push_number a + b # Push the return value to the stack     env.call_success      # call_success -> stack top is value returned   end    sbx.eval! ""print(add_together(2, 3));"" # => 5 The proc object that is pushed to the Duktape stack accepts a pointer to a Context instance. We must wrap this pointer by calling env = Duktape::Sandbox.new ptr. The proc must also return an Int32 status code - env.call_failure and env.call_success will provide the proper integer values. Note: Because it is currently not possible to pass closures to C bindings in Crystal, one must be careful that any variables used in the proc must not be referenced or initialized outside the scope of the proc. This is why variable names such as env are used. Exceptions The following exceptions may be thrown at runtime and may be rescued normally: Duktape::Error Duktape::EvalError Duktape::RangeError Duktape::ReferenceError Duktape::SyntaxError Duktape::TypeError Duktape::URIError These exceptions all inherit from Duktape::Error, so it may be used as a catch-all for runtime errors. The following exceptions represent errors internal to the Duktape engine and are generally not recoverable when thrown from a context: Duktape::InternalError Duktape::HeapError These exceptions all inherit from Duktape::InternalError. Contributing I'll accept any pull requests that are well tested for bugs/features with Duktape.cr. You should fork the main repo, create a feature branch, write tests and submit a pull request. License Duktape.cr is licensed under the MIT License. Please see LICENSE for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jessedoyle/duktape.cr"	"Bindings for the javascript engine"	"true"
"Low level bindings"	"Duktape"	"https://github.com/svaarala/duktape"	"Bindings for the javascript engine"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2284"	"114"	"210"	"GitHub - svaarala/duktape: Duktape - embeddable Javascript engine with a focus on portability and compact footprint Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 114 Star 2,284 Fork 210 svaarala/duktape Code Issues 210 Pull requests 31 Pulse Graphs Duktape - embeddable Javascript engine with a focus on portability and compact footprint 6,729 commits 47 branches 39 releases Fetching contributors JavaScript 53.5% HTML 24.2% C 18.6% Python 2.3% Makefile 0.4% Perl6 0.2% Other 0.8% JavaScript HTML C Python Makefile Perl6 Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags add-comment-stripped-dist-source add-html-comment-syntax add-nonbmp-helpers add-norz-macros api-create-heap-reorder api-fileline-blame-control api-get-refcount api-multi-get api-new-list-inits api-push-bufobj-accept-bufobj api-recheck-builtins array-new-length-coercion cpp-exception-improvements cyclic-jx-gh331 document-snprintf-portability finalizer-torture-improvements fp-rounding-mode hack-outofmemory-envrec-close hide-internal-properties internal-duk-get-top-macro internal-typing-document lose-const-via-union make-random-provider-configurable master not-callable-verbose-callsetup operator-overloading-minimal osx-dist-improve-docs perf-dense-array-fastpaths perf-executor-direct-flag-check perf-executor-misc-optimization perf-executor-shared-a-decode perf-func-self-ref plain-buffer-as-arraybuffer remove-unused-object-layout revert-841-fix-node-loader spdx-validation-helper switch-x86-x64-align-default testrunner-minimal-cleanups user-stack-check-macro v1-maintenance v1.0-maintenance v1.1-maintenance v1.2-maintenance v1.3-maintenance v1.4-maintenance v1.5-maintenance weak-references Nothing to show v1.5.0 v1.4.1 v1.4.0 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.6 v1.2.5 v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.0.2 v1.0.1 v1.0.0 v0.12.0 v0.11.0 v0.10.0 v0.9.0 v0.8.0 v0.7.0 v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.0 rom-user-builtins-20160203b hstring-size-optimization-20160302b fix-debugger-reattach-reentry-20160219a debugger-heap-walking-support-20160303a convert-makedist-to-python-20160113 add-rom-builtin-support-20160125i Nothing to show New pull request Latest commit 091eb02 Jul 14, 2016 svaarala committed on GitHub Merge pull request #856 from svaarala/duk-harray-cleanups … Duk_harray fixes and cleanups Permalink Failed to load latest commit information. config Low memory example option tweaks Jul 13, 2016 debugger Change more ""which"" invocations to ""command -v"" May 27, 2016 dist-files Dist/makefile changes for 1.x module loader extra May 29, 2016 doc 2.0 migration notes for duk_harray Jul 13, 2016 dukweb Dukweb updates for panic removal May 15, 2016 examples Fix detached_cb ctx arg in trans-dvalue example Jul 1, 2016 extras Minor fixes to module-node extra Jul 1, 2016 licenses License changes for string hashing (Lua, djb2) Nov 13, 2015 misc Add misc example of shift warning May 26, 2016 polyfills Polyfills for error .fileName etc writing behavior Nov 23, 2015 references Add 'make refs' target to download ES specs Mar 8, 2016 runtests Runtests fix for print/alert removal May 10, 2016 src Duk_harray fixes and cleanups Jul 13, 2016 testrunner Testrunner feature stripped size test Jun 9, 2016 tests Testcase cleanups and fixes for duk_harray test Jul 13, 2016 util Add duk_harray to dist Jul 11, 2016 website Fix typo Jul 13, 2016 .gitattributes Add .gitattributes with eol=lf for most extensions Aug 31, 2015 .gitignore Gitignore additions Jul 10, 2016 .travis.yml Remove packages not needed in Travis build anymore Jan 15, 2016 AUTHORS.rst Add myself to AUTHORS.rst Jul 13, 2016 CONTRIBUTING.md CONTRIBUTING mergeready change Oct 31, 2015 LICENSE.txt Update copyright year range to cover 2016 Jan 9, 2016 Makefile Add src/*.py and doc/*.rst to codepolicycheck Jul 10, 2016 README.md Expand branch policy in README May 4, 2016 RELEASES.rst Releases: duk_harray debugger change Jul 13, 2016 appveyor.yml AppVeyor fixes for print/alert removal May 11, 2016 README.md Duktape Introduction Duktape is an embeddable Javascript engine, with a focus on portability and compact footprint. Duktape is easy to integrate into a C/C++ project: add duktape.c, duktape.h, and duk_config.h to your build, and use the Duktape API to call Ecmascript functions from C code and vice versa. Main features: Embeddable, portable, compact Ecmascript E5/E5.1 compliant Khronos/ES6 TypedArray and Node.js Buffer bindings Built-in debugger Built-in regular expression engine Built-in Unicode support Minimal platform dependencies Combined reference counting and mark-and-sweep garbage collection with finalization Custom features like co-routines, built-in logging framework, and built-in CommonJS-based module loading framework Property virtualization using a subset of Ecmascript E6 Proxy object Bytecode dump/load for caching compiled functions Liberal license See duktape.org for packaged end-user downloads and documentation. The end user downloads are also available from the duktape-releases repo as both binaries and in unpacked form as git tags. Snapshot builds from master are available in duktape.org/snapshots. Have fun! Support Duktape Wiki: wiki.duktape.org User community Q&A: Stack Overflow duktape tag Bugs and feature requests: GitHub issues General discussion: IRC #duktape on chat.freenode.net (webchat) About this repository This repository is intended for Duktape developers only, and contains Duktape internals: test cases, internal documentation, sources for the duktape.org web site, etc. Getting started: end user When embedding Duktape in your application you should use the packaged source distributables available from duktape.org/download.html. See duktape.org/guide.html#gettingstarted for the basics. Automatically generated bleeding edge snapshots from master are available at duktape.org/snapshots. You can also clone this repository, make modifications, and build a source distributable on Linux, OSX, and Windows using python util/make_dist.py. Getting started: modifying and rebuilding the distributable If you intend to change Duktape internals and want to rebuild the source distributable in Linux, OSX, or Windows: # Linux; can often install from packages or using 'pip' $ sudo apt-get install python python-yaml $ python util/make_dist.py  # OSX # Install Python 2.7.x $ pip install PyYAML $ python util/make_dist.py  # Windows ; Install Python 2.7.x from python.org, and add it to PATH > pip install PyYAML > python util\make_dist.py  The source distributable directory will be in dist/. For platform specific notes see http://wiki.duktape.org/DevelopmentSetup.html. Getting started: other development (Linux only) Other development stuff, such as building the website and running test cases, is based on a Makefile intended for Linux only. See detailed instructions in http://wiki.duktape.org/DevelopmentSetup.html. Branch policy The master branch is used for active development. While pull requests are tested before merging, master may be broken from time to time. When development on a new major release starts, master will also get API incompatible changes without warning. For these reasons you should generally not depend on the master branch for building your project; use a release tag or a release maintenance branch instead. Pull requests and their related branches are frequently rebased so you should not fork off them. Pull requests may be open for a while for testing and discussion. Release tags like v1.4.1 are used for releases and match the released distributables. These are stable once the release is complete. Maintenance branches are used for backporting fixes and features for maintenance releases. Documentation changes go to master for maintenance releases too. For example, v1.5-maintenance was created for the 1.5.0 release and is used for 1.5.x maintenance releases. A maintenance branch is also created for a major release when master moves on to active development of the next major release. For example, v1-maintenance was created when 1.5.0 was released (last planned 1.x release) and development of 2.0.0 (with API incompatible changes) started on master. If a 1.6.0 is made, it will be made from v1-maintenance. Versioning Duktape uses Semantic Versioning, see Versioning. Reporting bugs See CONTRIBUTING.md. Security critical Github issues (for example anything leading to a segfault) are tagged security. Contributing See CONTRIBUTING.md. Copyright and license See AUTHORS.rst and LICENSE.txt. Duktape Wiki is part of Duktape documentation and under the same copyright and license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/svaarala/duktape"	"Bindings for the javascript engine"	"true"
"Low level bindings"	"kt"	"https://github.com/kuende/kt"	"Bindings for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"0"	"2"	"0"	"GitHub - kuende/kt: Crystal bindings for Kyoto Tycoon Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 0 Fork 0 kuende/kt Code Issues 0 Pull requests 0 Pulse Graphs Crystal bindings for Kyoto Tycoon 26 commits 1 branch 1 release Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.1 Nothing to show New pull request Latest commit c12181d Jul 15, 2016 teodor-pripoae Don't start ktserver in travis, it is already started by specs Permalink Failed to load latest commit information. spec Changes for crystal 0.18.* Jul 15, 2016 src Bump version Jul 15, 2016 .gitignore Initial commit Apr 26, 2016 .travis.yml Don't start ktserver in travis, it is already started by specs Jul 15, 2016 LICENSE Initial commit Apr 26, 2016 README.md New syntax for hashes of string in readme Jul 15, 2016 shard.yml README.md KT Crystal bindings for Kyoto Tycoon. It uses a connection pool to maintain multiple connections. Installation Add this to your application's shard.yml: dependencies:   kt:     github: kuende/kt Usage require ""kt""  kt = KT.new(host: ""127.0.0.1"", port: 1978, poolsize: 5, timeout: 5.0)  # Setting kt.set(""japan"", ""tokyo"") # set a key kt.set_bulk({""china"" => ""beijing"", ""france"" => ""paris"", ""uk"" => ""london""})  kt.get(""japan"") # => ""tokyo"" kt.get_bulk([""japan"", ""france""]) # => {""japan"" => ""tokyo"", ""france"" => ""paris""} kt.get(""foo"") # => nil kt.get!(""foo"") # => raises KT::RecordNotFound  kt.remove(""japan"") # => true kt.remove(""japan"") # => false, key japan is not found anymore kt.remove!(""japan"") # => raises KT::RecordNotFound becouse key japan is not found kt.remove_bulk([""japan"", ""china""]) # => 1 (number keys deleted)  kt.clear # deletes all records in the database  kt.set_bulk({""user:1"" => ""1"", ""user:2"" => ""2"", ""user:4"" => ""4""}) kt.match_prefix(""user:"") # => [""user:1"", ""user:2"", ""user:3"", ""user:4"", ""user:5""]  # Compare and swap kt.set(""user:1"", ""1"") kt.cas(""user:1"", ""1"", ""2"") # => true kt.cas(""user:1"", ""1"", ""3"") # => false, previous value is ""2"" kt.cas(""user:1"", nil, ""3"") # => false, record already exists with value ""2"" kt.cas(""user:2"", nil, ""1"") # => true, no record exists so it was set kt.cas(""user:1"", ""2"", nil) # => true, record is removed becouse it was present kt.cas(""user:1"", ""2"", nil) # => false, it fails becouse no record with this key exists  # cas! raises where cas returns false kt.cas!(""user:1"", ""1"", ""2"") # => KT::CASFailed, no record exists with this value  kt.count # => 2 keys in database TODO implement expiration for most commands work with multiple servers Contributing Fork it ( https://github.com/kuende/kt/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kuende/kt"	"Bindings for"	"true"
"Low level bindings"	"Kyoto Tycoon"	"http://fallabs.com/kyototycoon/"	"Bindings for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Kyoto Tycoon: a handy cache/storage server Kyoto Tycoon: a handy cache/storage server Copyright (C) 2009-2012 FAL Labs Last Update: Fri, 06 Apr 2012 22:35:45 +0900 Overview Kyoto Tycoon is a lightweight database server with auto expiration mechanism, which is useful to handle cache data and persistent data of various applications. Kyoto Tycoon is also a package of network interface to the DBM called Kyoto Cabinet. Though the DBM has high performance and high concurrency, you might bother in case that multiple processes share the same database, or remote processes access the database. Thus, Kyoto Tycoon is provided for concurrent and remote connections to Kyoto Cabinet. Kyoto Tycoon is composed of the server process managing multiple databases and its access library for client applications. The network protocol between the server and clients is HTTP so that you can write client applications and client libraries in almost all popular languages. Both of RESTful-style interface by the GET, HEAD, PUT, DELETE methods and RPC-style inteface by the POST method are supported. The server can handle more than 10 thousand connections at the same time because it uses modern I/O event notification facilities such as ""epoll"" and ""kqueue"" of underlying systems. The server supports high availability mechanisms, which are hot backup, update logging, and asynchronous replication. The server can embed Lua, a lightweight script language so that you can define arbitrary operations of the database. The server program of Kyoto Tycoon is written in the C++ language. It is available on platforms which have API conforming to C++03 with the TR1 library extensions. Kyoto Tycoon is a free software licensed under the GNU General Public License. Documents The following are documents of Kyoto Tycoon. They are contained also in the source package. Fundamental Specifications Specifications of Command Line Utilities API Documents of the core library (C/C++) API Documents of the scripting extension (Lua) Packages The following are the source packages of Kyoto Tycoon. As for binary packages, see the site of each distributor. Source Packages of the core library (C/C++) Information Kyoto Tycoon was written and is maintained by FAL Labs. You can contact the author by e-mail to `info@fallabs.com'."	"null"	"null"	"Bindings for"	"true"
"Low level bindings"	"libnotify.cr"	"https://github.com/splattael/libnotify.cr"	"Bindings for Libnotify"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"2"	"0"	"GitHub - splattael/libnotify.cr: Libnotify for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 3 Fork 0 splattael/libnotify.cr Code Issues 0 Pull requests 0 Pulse Graphs Libnotify for Crystal 7 commits 1 branch 0 releases Fetching contributors Crystal 94.9% Makefile 5.1% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. images spec src .gitignore .travis.yml LICENSE Makefile README.md shard.yml README.md Libnotify for Crystal ⚠️ 🚧 🚧 🚧 ⚠️ Bindings for GNOME's Libnotify. For the Ruby version see https://rubygems.org/gems/libnotify. Installation Add this to your application's shard.yml: dependencies:   libnotify:     github: splattael/libnotify     version: ~> 0.1.0 Debian apt-get install libnotify  Usage require ""libnotify""  # TODO For now just run: make spec Development make update make spec Debian apt-get install libnotify  Contributing Fork it Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors splattael Peter Suschlik - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/splattael/libnotify.cr"	"Bindings for Libnotify"	"true"
"Low level bindings"	"libui.cr"	"https://github.com/Fusion/libui.cr"	"Bindings for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"26"	"3"	"0"	"GitHub - Fusion/libui.cr: Crystal-lang bindings for libui Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 26 Fork 0 Fusion/libui.cr Code Issues 0 Pull requests 0 Pulse Graphs Crystal-lang bindings for libui 8 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src LICENSE README.md shard.yml README.md libui.cr Crystal-lang bindings for libui, a GUI library for Linux, OS X and Windows. (well, forget about Windows for now, this is Crystal) What's New 06/19/16 Sync'd to upstream #9656a81 Control Gallery example not updated but library is. Installation Add these package to your dependencies in shard.yml: dependencies:   libui:     github: fusion/libui.cr  Usage Have a look at src/examples/controlgallery, which is a direct port of a C example. Development Recent versions of Crystal now require you to include the current path explicitely to find libraries: crystal build --link-flags ""-L$(PWD)"" src/examples/controlgallery/main.cr  At least on OS X, if you omit this flag, libui.A.dylib will not be found. To run the generated binary: LD_LIBRARY_PATH=. ./main  Contributing Fork it ( https://github.com/fusion/libui.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors [fusion] Chris F Ravenscroft - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Fusion/libui.cr"	"Bindings for"	"true"
"Low level bindings"	"libui"	"https://github.com/andlabs/libui"	"Bindings for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3460"	"155"	"158"	"GitHub - andlabs/libui: Simple and portable (but not inflexible) GUI library in C that uses the native GUI technologies of each platform it supports. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 155 Star 3,460 Fork 158 andlabs/libui Code Issues 68 Pull requests 15 Pulse Graphs Simple and portable (but not inflexible) GUI library in C that uses the native GUI technologies of each platform it supports. 2,685 commits 1 branch 4 releases 10 contributors C 37.9% C++ 35.9% Objective-C 24.7% CMake 1.5% C C++ Objective-C CMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show alpha3.1 alpha3 alpha2 alpha1 Nothing to show New pull request Latest commit d93bb2c Jun 21, 2016 andlabs Formatting fixes. Permalink Failed to load latest commit information. _wip Added uiGrid on OS X. Now to fix build errors. Jun 11, 2016 common Quick fix in the meantime. Jun 13, 2016 darwin Made alignment work on uiGrid on OS X. Jun 18, 2016 doc More documentation stuff. Jun 16, 2016 examples Expanded the control gallery a bit further. Jun 17, 2016 test Formatting fixes. Jun 21, 2016 unix Stop uiProgressBar pulsing on destroy on GTK+. Fixes #163. Jun 21, 2016 windows Added uiNewVerticalSeparator(). Jun 17, 2016 .travis.yml Round 3 Jun 17, 2016 ANNOUNCE.md Split old announcements and updates out. Jun 9, 2016 CMakeLists.txt More TODOs. Jun 17, 2016 Changelog.md Split old announcements and updates out. Jun 9, 2016 Compatibility.md More future plans. Jun 12, 2016 LICENSE Split into a new repository and added a LICENSE. Apr 16, 2015 README.md More announcements. Jun 18, 2016 TODO.md More TODOs. Jun 17, 2016 oldhaiku.tgz Discontinued the Haiku port for now. Apr 24, 2016 ui.h Started mapping out uiTable and uiTree. Jun 20, 2016 ui_darwin.h Added a facility to the OS X port to be notified when a child's visib… Jun 14, 2016 ui_unix.h Implemented uiGrid on GTK+. Jun 9, 2016 ui_windows.h Implemented visibility change detection on Windows. Now to refine the… Jun 14, 2016 uitable.h Stop uiProgressBar pulsing on destroy on GTK+. Fixes #163. Jun 21, 2016 README.md libui: a portable GUI library for C This README is being written. Announcements 18 June 2016 Help decide the design of tables and trees in libui; the implementation starts within the next few days, if not tomorrow! 17 June 2016 CMake 3.1.0 is now required. This is due to CMake's rapid development pace in the past few years adding things libui needs to build on as many systems as possible. If your OS is supported by libui but its repositories ship with an older version of CMake, you will need to find an updated one somewhere. Please help plan out a better menu API. 5 June 2016 Alpha 3.1 is here. This was a much-needed update to Alpha 3 that changes a few things: The build system is now cmake. cmake 2.8.11 or higher is needed. Static linking is now fully possible. MinGW linking is back, but static only. Old announcements can be found in the ANNOUNCE.md file. Updates Note that today's entry (Eastern Time) may be updated later today. 17 June 2016 uiMainSteps() no longer takes any arguments and no longer needs to invoke a function to do the work. You still need to call it, but once you do, it will return immediately and you can then get right to your main loop. CMake 3.1.0 is now required. This is due to CMake's rapid development pace in the past few years adding things libui needs to build on as many systems as possible. If your OS is supported by libui but its repositories ship with an older version of CMake, you will need to find an updated one somewhere. Added uiNewVerticalSeparator() to complement uiNewHorizontalSeparator(). 16 June 2016 Added uiWindowContentSize(), uiWindowSetContentSize(), and uiWindowOnContentSizeChanged() methods for manipulating uiWindow content sizes. Note the use of ""content size""; the size you work with does NOT include window decorations (titlebars, menus, etc.). Added uiWindowFullscreen() and uiWindowSetFullscreen() to allow making fullscreen uiWindows, taking advantage of OS facilities for fullscreen and without changing the screen resolution (!). Added uiWindowBorderless() and uiWindowSetBorderless() for allowing borderless uiWindows. Added uiMainSteps(). You call this instead of uiMain() if you want to run the main loop yourself. You pass in a function that will be called; within that function, you call uiMainStep() repeatedly until it returns 0, doing whatever you need to do in the meantime. (This was needed because just having uiMainStep() by itself only worked on some systems.) Added uiProgressBarValue() and allowed passing -1 to uiProgressBarSetValue() to make an indeterminate progress bar. Thanks to @emersion. 15 June 2016 Added uiFormDelete(); thanks to @emersion. Added uiWindowPosition(), uiWindowSetPosition(), uiWindowCenter(), and uiWindowOnPositionChanged(), methods for manipulating uiWindow position. 14 June 2016 uiDarwinControl now has a ChildVisibilityChanged() method and a corresponding NotifyVisibilityChanged() function that is called by the default show/hide handlers. This is used to make visibility changes work on OS X; uiBox, uiForm, and uiGrid all respect these now. The same has been done on the Windows side as well. Hiding and showing controls and padding calculations are now correct on Windows at long last. Hiding a control in a uiForm now hides its label on all platforms. 13 June 2016 intmax_t and uintmax_t are no longer used for libui API functions; now we use int. This should make things much easier for bindings. int should be at least 32 bits wide; this should be sufficient for all but the most extreme cases. 12 June 2016 Added uiGrid, a new container control that arranges controls in rows and columns, with stretchy (""expanding"") rows, stretchy (""expanding"") columns, cells that span rows and columns, and cells whose content is aligned in either direction rather than just filling. It's quite powerful, is it? =P 8 June 2016 Added uiForm, a new container control that arranges controls vertically, with properly aligned labels on each. Have fun! 6 June 2016 Added uiRadioButtonsSelected(), uiRadioButtonsSetSelected(), and uiRadioButtonsOnSelected() to control selection of a radio button and catch an event when such a thing happens. 5 June 2016 Added uiNewPasswordEntry(), which creates a new uiEntry suitable for entering passwords. Added uiNewSearchEntry(), which creates a new uiEntry suitable for searching. On some systems, the OnChanged() event will be slightly delayed and/or combined, to produce a more natural feel when searching. Old updates can be found in the Changelog.md file. Runtime Requirements Windows: Windows Vista SP2 with Platform Update or newer Unix: GTK+ 3.10 or newer Mac OS X: OS X 10.8 or newer Build Requirements All platforms: CMake 3.1.0 or newer Windows: either Microsoft Visual Studio 2013 or newer (2013 is needed for va_copy()) — you can build either a static or a shared library MinGW-w64 (other flavors of MinGW may not work) — you can only build a static library; shared library support will be re-added once the following features come in: Isolation awareness, which is how you get themed controls from a DLL without needing a manifest Unix: nothing else specific Mac OS X: nothing else specific, so long as you can build Cocoa programs Building Out-of-tree builds typical of cmake are preferred: $ # you must be in the top-level libui directory, otherwise this won't work $ mkdir build $ cd build $ cmake ..  Pass -DBUILD_SHARED_LIBS=OFF to cmake to build a static library. The standard cmake build configurations are provided; if none is specified, Debug is used. If you use a makefile generator with cmake, then $ make $ make tester         # for the test program $ make examples       # for examples  and pass VERBOSE=1 to see build commands. Build targets will be in the build/out folder. Project file generators should work, but are untested by me. On Windows, I use the Unix Makefiles generator and GNU make (built using the build_w32.bat script included in the source and run in the Visual Studio command line). In this state, if MinGW-w64 (either 32-bit or 64-bit) is not in your %PATH%, cmake will use MSVC by default; otherwise, cmake will use with whatever MinGW-w64 is in your path. set PATH=%PATH%;c:\msys2\mingw(32/64)\bin should be enough to temporarily change to a MinGW-w64 build for the current command line session only if you installed MinGW-w64 through MSYS2; no need to change global environment variables constantly. Installation Arch Linux Can be built from AUR: https://aur.archlinux.org/packages/libui-git/ Documentation Needs to be written. Consult ui.h and the examples for details for now. Language Bindings libui was originally written as part of my package ui for Go. Now that libui is separate, package ui has become a binding to libui. As such, package ui is the only official binding. Other people have made bindings to other languages: Language Bindings C#/.net LibUI.Binding, SharpUI Crystal libui.cr D DerelictLibui Euphoria libui-euphoria Haskell libui-haskell JavaScript libui.js (merged into libui-node?) Julia Libui.jl Lua libuilua, libui-lua Nim ui Node.js libui-node Python pylibui Ruby libui-ruby Rust libui-rs Screenshots From examples/controlgallery: Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/andlabs/libui"	"Bindings for"	"true"
"Low level bindings"	"myhtml"	"https://github.com/kostya/myhtml"	"Bindings for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"1"	"2"	"GitHub - kostya/myhtml: Crystal wrapper for HTML5 Parser (lexborisov/myhtml) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 7 Fork 2 kostya/myhtml Code Issues 0 Pull requests 0 Pulse Graphs Crystal wrapper for HTML5 Parser (lexborisov/myhtml) 120 commits 1 branch 4 releases 2 contributors Crystal 97.2% Makefile 2.8% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.8 0.7 0.6 0.5 Nothing to show New pull request Latest commit 844e7c0 Jul 13, 2016 kostya fix remove node Permalink Failed to load latest commit information. examples better links example Apr 20, 2016 spec fix Jun 19, 2016 src fix remove node Jul 13, 2016 .gitignore fix Mar 19, 2016 .travis.yml fix Mar 29, 2016 LICENSE fix Mar 18, 2016 Makefile add texts example Apr 4, 2016 README.md fix doc Jun 21, 2016 shard.yml fix Jun 21, 2016 README.md MyHTML Crystal wrapper for HTML5 Parser https://github.com/lexborisov/myhtml Installation Add this to your application's shard.yml: dependencies:   myhtml:     github: kostya/myhtml     branch: master And run crystal deps Development Setup:   git clone https://github.com/kostya/myhtml.git   cd myhtml   make    crystal spec Usage # Example: print all html tree  require ""myhtml""  def walk(node, level = 0)   puts ""#{"" "" * level}#{node.tag_name}#{node.attributes}(#{node.tag_text.strip})""   node.children.each { |child| walk(child, level + 1) } end  str = if filename = ARGV[0]?         File.read(filename, ""UTF-8"", invalid: :skip)       else         ""<html><Div><span class='test'>HTML</span></div></html>""       end  parser = Myhtml::Parser.new parser.parse(str) walk(parser.root!) Output: html{}()  head{}()  body{}()   div{}()    span{""class"" => ""test""}()     -text{}(HTML)  More Examples examples Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kostya/myhtml"	"Bindings for"	"true"
"Low level bindings"	"lexborisov/myhtml"	"https://github.com/lexborisov/myhtml"	"Bindings for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"837"	"74"	"57"	"GitHub - lexborisov/myhtml: Fast C/C++ HTML 5 Parser. Using threads. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 74 Star 837 Fork 57 lexborisov/myhtml Code Issues 0 Pull requests 0 Wiki Pulse Graphs Fast C/C++ HTML 5 Parser. Using threads. 185 commits 3 branches 2 releases 7 contributors C 76.2% C++ 23.0% Other 0.8% C C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master v.0.6.3-Apache-License-2.0 Nothing to show v1.0.2 v1.0.1 Nothing to show New pull request Latest commit e069e93 Jul 15, 2016 lexborisov Fixes for pull request 52; #52 Permalink Failed to load latest commit information. devel/osx Release Candidate. See description Jun 23, 2016 examples test the result of some more allocation functions Jul 15, 2016 include/myhtml Added checking for NULL pointer after mythread_create; #51 Jul 15, 2016 projects Version UP. See CHANGELOG.md Jul 14, 2016 source/myhtml Fixes for pull request 52; #52 Jul 15, 2016 test/html API has been changed! Added Converter InputStream Encoding to UTF-8. … Feb 4, 2016 utils added namespace functions Jun 2, 2016 .gitignore changes for readme.md & .gitignore Mar 7, 2016 .travis.yml update .travis.yml Jan 6, 2016 CHANGELOG.md fixes for changelog Jul 14, 2016 LICENSE License changed. Apache License v2.0 => LGPL v2.1 May 12, 2016 Makefile Changed include method for public headers. """" => <> #41 Jun 2, 2016 README.md Version UP. See CHANGELOG.md Jul 14, 2016 README.md MyHTML C/C++ HTML 5 Parser. Using threads. MyHTML is a fast HTML Parser using Threads implemented as a pure C99 library with no outside dependencies. Now The current version is 1.0.2 - Release  Changes Please, see CHANGELOG.md file Features Asynchronous Parsing, Build Tree and Indexation Fully conformant with the HTML5 specification Two API - high and low-level Manipulation of elements: add, change, delete and other Manipulation of elements attributes: add, change, delete and other Support 39 character encoding by specification encoding.spec.whatwg.org Support detecting character encodings Support Single Mode parsing Support Build without POSIX Threads Support for fragment parsing Support for parsing by chunks No outside dependencies C99 support Passes all tree construction tests from html5lib-tests Further developments MyCSS — Fast C/C++ CSS Parser (Cascading Style Sheets Parser) Support encodings for InputStream X_USER_DEFINED, UTF_8, UTF_16LE, UTF_16BE, BIG5, EUC_KR, GB18030, IBM866, ISO_8859_10, ISO_8859_13, ISO_8859_14, ISO_8859_15, ISO_8859_16, ISO_8859_2, ISO_8859_3, ISO_8859_4, ISO_8859_5, ISO_8859_6, ISO_8859_7, ISO_8859_8, KOI8_R, KOI8_U, MACINTOSH, WINDOWS_1250, WINDOWS_1251, WINDOWS_1252, WINDOWS_1253, WINDOWS_1254, WINDOWS_1255, WINDOWS_1256, WINDOWS_1257, WINDOWS_1258, WINDOWS_874, X_MAC_CYRILLIC, ISO_2022_JP, GBK, SHIFT_JIS, EUC_JP, ISO_8859_8_I  Support encodings for output Program working in UTF-8 and returns all in UTF-8 Detecting character encodings Now it UTF-8, UTF-16LE, UTF16BE and russian windows-1251, koi8-r, iso-8859-5, x-mac-cyrillic, ibm866 The Story of Creation The Story of Creation Benchmark Article with charts Benchmark code Images and CSV Build and Installation Make make If successful copy lib/* and include/* at the right place for you Flags that can be passed to make: MyHTML_OPTIMIZATION_LEVEL=-O2 set compiler optimization level. Default: -O2 MyHTML_BUILD_WITHOUT_THREADS=YES build without POSIX Threads. Default: NO for example make MyHTML_BUILD_WITHOUT_THREADS=NO cp lib/* /usr/local/lib cp -r include/* /usr/local/include CMake In myhtml/project directory: cmake . make sudo make install Flags that can be passed to CMake: MyHTML_OPTIMIZATION_LEVEL=-O2 set compiler optimization level. Default: -O2 CMAKE_INSTALL_LIBDIR=lib set path to install created library. Default: lib MyHTML_BUILD_SHARED=ON build shared library. Default: ON MyHTML_BUILD_STATIC=ON build static library. Default: ON MyHTML_INSTALL_HEADER=OFF install header files. Default OFF MyHTML_BUILD_WITHOUT_THREADS=YES build without POSIX Threads. Default: NO MyHTML_EXTERN_MALLOC=my_malloc_func set extern malloc function. Default: UNDEFINED MyHTML_EXTERN_REALLOC=my_realloc_func set extern realloc function. Default: UNDEFINED MyHTML_EXTERN_CALLOC=my_calloc_func set extern calloc function. Default: UNDEFINED MyHTML_EXTERN_FREE=my_free_func set extern free function. Default: UNDEFINED for example cmake . -DCMAKE_INSTALL_LIBDIR=lib64 -DMyHTML_INSTALL_HEADER=ON Build with your program I advise to build using clang, but decided to show examples of gcc for example build with shared library gcc -Wall -Werror -O2 -lmyhtml your_program.c -o your_program build with static library gcc -Wall -Werror -O2 your_program.c /path/to/libmyhtml_static.a -o your_program Future Works are in full swing make test && make install css (MyCSS) html render js ... Dependencies None In other languages, external bindings Perl 5 module Perl 6 module Crystal binding Examples See examples directory Simple example #include <stdio.h> #include <stdlib.h> #include <string.h>  #include <myhtml/api.h>  int main(int argc, const char * argv[]) {     char html[] = ""<div><span>HTML</span></div>"";      // basic init     myhtml_t* myhtml = myhtml_create();     myhtml_init(myhtml, MyHTML_OPTIONS_DEFAULT, 1, 0);      // first tree init      myhtml_tree_t* tree = myhtml_tree_create();     myhtml_tree_init(tree, myhtml);      // parse html     myhtml_parse(tree, MyHTML_ENCODING_UTF_8, html, strlen(html));      // release resources     myhtml_tree_destroy(tree);     myhtml_destroy(myhtml);      return 0; } AUTHOR Alexander Borisov lex.borisov@gmail.com COPYRIGHT AND LICENSE Copyright (C) 2015-2016 Alexander Borisov This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA See the LICENSE file. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lexborisov/myhtml"	"Bindings for"	"true"
"Low level bindings"	"openssl.cr"	"https://github.com/datanoise/openssl.cr"	"Bindings for OpenSSL library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"11"	"5"	"5"	"GitHub - datanoise/openssl.cr: OpenSSL binding for Crystal language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 11 Fork 5 datanoise/openssl.cr Code Issues 6 Pull requests 0 Pulse Graphs OpenSSL binding for Crystal language 33 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. examples spec src .gitignore LICENSE README.md README.md openssl.cr This library provides binding for OpenSSL library. Status Alpha Requirements Crystal language version 0.9 and higher. openssl version 1.0.2a or higher On Mac OSX the default openssl is quite outdated. You can use homebrew to install the latest openssl: $ brew install openssl  You will also need to set up the LIBRARY_PATH correspondingly in order to be able to compile the library: export LIBRARY_PATH=`brew --prefix openssl`/lib  Goal The standard crystal library comes with quite limited support for OpenSSL, lacking many features like SSL verification, the X509 certificate API, etc. This library is aimed to remedy the situation. Usage This is an example of specifying the custom verification callback when initiating HTTPS connection: require ""socket"" require ""./src/openssl""  include OpenSSL  TCPSocket.open(""www.google.com"", 443) do |socket|   ssl_ctx = SSL::Context.new(SSL::Method::SSLv23)   ssl_ctx.set_default_verify_paths   ssl_ctx.set_verify SSL::VerifyMode::PEER do |ok, store|     certificate = store.certificate     pp ok     pp certificate.subject_name     ok   end   SSL::Socket.new_client(socket, ssl_ctx) do |client|     client.write(""GET / HTTP/1.1\r\n"".to_slice)     client.write(""\r\n"".to_slice)     buf :: UInt8[512]     slice = buf.to_slice     loop do       len = client.read(slice)       break if len == 0       puts ""From server: #{String.new slice[0,len]}""     end   end end This is the basic usage of SSL server: require ""socket"" require ""../src/openssl""  include OpenSSL  tcp_server = TCPServer.new(5555)  ssl_ctx = SSL::Context.new(SSL::Method::SSLv23) ssl_ctx.certificate_file = ""my_cert.pem"" ssl_ctx.private_key_file = ""my_key.pem""  loop do   client = tcp_server.accept   SSL::Socket.new_server(client, ssl_ctx) do |client|     buf :: UInt8[512]     slice = buf.to_slice     loop do       len = client.read(slice)       if len > 0         client.write(slice[0, len])       else         break       end     end   end end If you have a need to generate your own self-signed certificate: certificate, pkey =   OpenSSL::X509::Generator.generate do |g|     g.bitlength = 2048     g.valid_period = 365 * 2     g.cn = ""MyName""     g.usage << Generator::KeyUsage::DigitalSignature   end puts certificate.to_pem ToDo Extend X509::Certificate to get access to extentions, X509CRL, etc. X509::Generate is quite primitive at the moment. License MIT clause - see LICENSE for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/datanoise/openssl.cr"	"Bindings for OpenSSL library"	"true"
"Low level bindings"	"posix"	"https://github.com/ysbaddaden/posix"	"POSIX/C bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9"	"1"	"0"	"GitHub - ysbaddaden/posix: POSIX/C bindings generator for the Crystal programming language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 9 Fork 0 ysbaddaden/posix Code Issues 0 Pull requests 0 Pulse Graphs POSIX/C bindings generator for the Crystal programming language 20 commits 1 branch 0 releases Fetching contributors Crystal 96.0% Makefile 4.0% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. include src targets .gitignore Makefile README.md Vagrantfile shard.lock shard.yml README.md C bindings for Crystal Follows the IEEE Std 1003.1, 2013 Edition (The Open Group Base Specifications Issue 7) as much as libc implementations do, along with some common additions that are required by Crystal. Bindings are automatically generated with CrystalLib from C headers. Targets Crystal only supports the x86 and x86_64 targets for now, but we should be capable to generate bindings for whatever POSIX C implementation. Each target will be checked when headers have been verified to be compliant. Android arm arm64 mips mips64 mips mips64 x86 x86_64 FreeBSD x86 x86_64 iOS arm arm64 Linux gnu (x86, x86_64) musl (x86, x86_64) Mac OSX darwin (x86_64) Windows cygwin Headers aio.h arpa/inet.h assert.h complex.h cpio.h ctype.h dirent.h dlfcn.h errno.h fcntl.h fenv.h float.h fmtmsg.h fnmatch.h ftw.h glob.h grp.h iconv.h inttypes.h iso646.h langinfo.h libgen.h limits.h locale.h math.h monetary.h mqueue.h ndbm.h net/if.h netdb.h netinet/in.h netinet/tcp.h nl_types.h poll.h pthread.h pwd.h regex.h sched.h search.h semaphore.h setjmp.h signal.h spawn.h stdarg.h stdbool.h stddef.h stdint.h stdio.h stdlib.h string.h strings.h stropts.h sys/ipc.h sys/mman.h sys/msg.h sys/resource.h sys/select.h sys/sem.h sys/shm.h sys/socket.h sys/stat.h sys/statvfs.h sys/time.h sys/times.h sys/types.h sys/uio.h sys/un.h sys/utsname.h sys/wait.h syslog.h tar.h termios.h tgmath.h time.h trace.h ulimit.h unistd.h utmpx.h wchar.h wctype.h wordexp.h Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ysbaddaden/posix"	"POSIX/C bindings"	"true"
"Low level bindings"	"snappy-crystal"	"https://github.com/benoist/snappy-crystal"	"Bindings for Snappy library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"1"	"0"	"GitHub - benoist/snappy-crystal: Snappy bindings for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 3 Fork 0 benoist/snappy-crystal Code Issues 0 Pull requests 0 Pulse Graphs Snappy bindings for Crystal https://github.com/benoist/snappy-crystal 5 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md snappy Snappy bindings for Crystal Installation Add this to your application's shard.yml: dependencies:   snappy:     github: benoist/snappy-crystal Usage require ""snappy""  deflated = Snappy.deflate(""something"".to_slice) inflated = Snappy.inflate(deflated) Contributing Fork it ( https://github.com/[your-github-name]/snappy/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors Benoist Benoist Claassen - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/benoist/snappy-crystal"	"Bindings for Snappy library"	"true"
"Low level bindings"	"ssh2.cr"	"https://github.com/datanoise/ssh2.cr"	"Bindings for libssh2 library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"16"	"4"	"3"	"GitHub - datanoise/ssh2.cr: libssh2 binding for Crystal language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 16 Fork 3 datanoise/ssh2.cr Code Issues 0 Pull requests 0 Pulse Graphs libssh2 binding for Crystal language 28 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit c64af6a Jun 15, 2016 Kent Sibilev Merge branch 'master' of https://github.com/datanoise/ssh2.cr Permalink Failed to load latest commit information. examples spec src .gitignore refactoring known_hosts May 28, 2015 LICENSE README.md shard.yml README.md ssh2.cr This library provides binding for libssh2 library. Status Alpha Requirements Crystal language version 0.17 and higher. libssh2 version 1.5.0 or higher You can use homebrew to install the latest libssh2: $ brew install libssh2  Goal The goal is to utilize libssh2 API by providing services like ability to run shell commands via ssh as well as scp and sftp services. Usage An example of running a shell command via SSH on the remote server: require ""./src/ssh2""  SSH2::Session.open(""my_server"") do |session|   session.login(""username"", ""password"")   session.open_session do |channel|     channel.command(""uptime"")     IO.copy(channel, STDOUT)   end end An example of running shell: require ""./src/ssh2""  SSH2::Session.open(""localhost"", 2222) do |session|   session.login_with_pubkey(""root"", ""./spec/keys/id_rsa"")   session.open_session do |ch|     ch.request_pty(""vt100"")     ch.shell     session.blocking = false      buf_space = uninitialized UInt8[1024]     buf = buf_space.to_slice     loop do       io = IO.select([STDIN, ch.socket]).first       if io == STDIN         command = gets         if command           ch.write(command.to_slice)         end       elsif io == ch.socket         len = ch.read(buf).to_i32         print String.new buf[0, len]         break if ch.eof?       end     end   end end An example of using SFTP API: require ""./src/ssh2""  SSH2::Session.open(""localhost"", 2222) do |session|   session.login_with_pubkey(""root"", ""./spec/keys/id_rsa"")   session.sftp_session do |sftp|     sftp.open_dir(""."").ll do |fn|       puts fn     end     file = sftp.open("".bashrc"")     puts file.gets_to_end   end end Testing In order to run test suite you need to pull and run the following docker container: $ docker pull tutum/ubuntu:trusty $ docker run -d -p 2222:22 -e AUTHORIZED_KEYS=""`cat ./spec/keys/id_rsa.pub`"" tutum/ubuntu:trusty  License MIT clause - see LICENSE for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/datanoise/ssh2.cr"	"Bindings for libssh2 library"	"true"
"Low level bindings"	"termbox-crystal"	"https://github.com/andrewsuzuki/termbox-crystal"	"Bindings and extension library for (terminal UI library)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"1"	"2"	"GitHub - andrewsuzuki/termbox-crystal: Bindings, wrapper, and utilities for termbox (terminal interface library) in Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 3 Fork 2 andrewsuzuki/termbox-crystal Code Issues 2 Pull requests 0 Pulse Graphs Bindings, wrapper, and utilities for termbox (terminal interface library) in Crystal 15 commits 1 branch 0 releases Fetching contributors Crystal 98.2% Shell 1.8% Crystal Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit d64743d Apr 10, 2016 andrewsuzuki Merge pull request #2 from steinuil/master … updated line.cr to fit with the new default value syntax Permalink Failed to load latest commit information. examples spec src .editorconfig .gitignore .travis.yml LICENSE README.md install-termbox.sh shard.yml README.md termbox-crystal Crystal bindings and wrapper for termbox Installation Add this to your application's shard.yml: dependencies:   termbox:     github: andrewsuzuki/termbox-crystal Don't have termbox-c? Just run ./install-termbox.sh, it will clone termbox into lib-termbox and symlink it to within /usr/local/lib. Or check out the termbox project page for more information. Usage require ""termbox"" See termbox.h and examples for now. Examples See examples/simple.cr for basic usage. Contributing Fork it (https://github.com/andrewsuzuki/termbox-crystal/fork) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors andrewsuzuki Andrew Suzuki - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/andrewsuzuki/termbox-crystal"	"Bindings and extension library for (terminal UI library)"	"true"
"Low level bindings"	"termbox"	"https://github.com/nsf/termbox"	"Bindings and extension library for (terminal UI library)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"855"	"60"	"71"	"GitHub - nsf/termbox: Library for writing text-based user interfaces Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 60 Star 855 Fork 71 nsf/termbox Code Issues 4 Pull requests 1 Pulse Graphs Library for writing text-based user interfaces http://code.google.com/p/termbox 232 commits 1 branch 0 releases 30 contributors C 67.3% C++ 18.8% Python 13.9% C C++ Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 7f76940 Jul 10, 2016 nsf Use proper mouse enter/exit sequence on built-in database as well. … Go implemention does it the same way. Permalink Failed to load latest commit information. src Use proper mouse enter/exit sequence on built-in database as well. Jul 10, 2016 tools Zero is not required at the end of funcs sequence. Jul 29, 2013 .gitignore Move termboxmodule.pyx to its own directory. Aug 3, 2013 COPYING Update README and COPYING. Aug 5, 2013 README.rst Add a link to D wrapper Mar 5, 2016 package.json fixed source paths May 7, 2015 setup.py Workaround for changes in 3.4 CPython Sep 15, 2014 test_termboxmodule.py test_termboxmodule: Use defined API for colors Jun 21, 2015 waf Update waf. Fixes #39. Sep 15, 2014 wscript Port wide char display hack from termbox-go Mar 10, 2015 README.rst Termbox is a library that provides minimalistic API which allows the programmer to write text-based user interfaces. It is based on a very simple abstraction. The main idea is viewing terminals as a table of fixed-size cells and input being a stream of structured messages. Would be fair to say that the model is inspired by windows console API. The abstraction itself is not perfect and it may create problems in certain areas. The most sensitive ones are copy & pasting and wide characters (mostly Chinese, Japanese, Korean (CJK) characters). When it comes to copy & pasting, the notion of cells is not really compatible with the idea of text. And CJK runes often require more than one cell to display them nicely. Despite the mentioned flaws, using such a simple model brings benefits in a form of simplicity. And KISS principle is important. At this point one should realize, that CLI (command-line interfaces) aren't really a thing termbox is aimed at. But rather pseudo-graphical user interfaces. INSTALLATION Termbox comes with a waf-based build scripts. In order to configure, build and install it, do the following: ./waf configure --prefix=/usr                                (configure) ./waf                                                        (build) ./waf install --destdir=DESTDIR                              (install)  By default termbox will install the header file and both shared and static libraries. If you want to install a shared library or static library alone, use the following as an install command: ./waf install --targets=termbox_shared --destdir=PREFIX      (shared library)  or: ./waf install --targets=termbox_static --destdir=PREFIX      (static library)  PYTHON In order to install the python module, use the following command (as root or via sudo): python setup.py install  for Python 3: python3 setup.py install  GETTING STARTED Termbox's interface only consists of 12 functions: tb_init() // initialization tb_shutdown() // shutdown  tb_width() // width of the terminal screen tb_height() // height of the terminal screen  tb_clear() // clear buffer tb_present() // sync internal buffer with terminal  tb_put_cell() tb_change_cell() tb_blit() // drawing functions  tb_select_input_mode() // change input mode tb_peek_event() // peek a keyboard event tb_poll_event() // wait for a keyboard event  See src/termbox.h header file for full detail. LINKS http://pecl.php.net/package/termbox - PHP Termbox wrapper https://github.com/nsf/termbox-go - Go pure Termbox implementation https://github.com/gchp/rustbox - Rust Termbox wrapper https://github.com/fouric/cl-termbox - Common Lisp Termbox wrapper https://github.com/zyedidia/termbox-d - D Termbox wrapper If you want me to add your project here, send me a pull request or drop a note via email, you can find my email below. BUGS & QUESTIONS Report bugs to the https://github.com/nsf/termbox issue tracker. Send rants and questions to me: no.smile.face@gmail.com. CHANGES v1.1.0 (not released yet): API: tb_width() and tb_height() are guaranteed to be negative if the termbox wasn't initialized. API: Output mode switching is now possible, adds 256-color and grayscale color modes. API: Better tb_blit() function. Thanks, Gunnar Zötl <gz@tset.de>. Bug fixes in code and documentation. v1.0.0: Remove the Go directory. People generally know about termbox-go and where to look for it. Remove old terminfo-related python scripts and backport the new one from termbox-go. Remove cmake/make-based build scripts, use waf. Add a simple terminfo database parser. Now termbox prefers using the terminfo database if it can be found. Otherwise it still has a fallback built-in database for most popular terminals. Some internal code cleanups and refactorings. The most important change is that termbox doesn't leak meaningless exported symbols like 'keys' and 'funcs' now. Only the ones that have 'tb_' as a prefix are being exported. API: Remove unsigned ints, use plain ints instead. API: Rename UTF-8 functions 'utf8_*' -> 'tb_utf8_*'. API: TB_DEFAULT equals 0 now, it means you can use attributes alones assuming the default color. API: Add TB_REVERSE. API: Add TB_INPUT_CURRENT. Move python module to its own directory and update it due to changes in the termbox library. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nsf/termbox"	"Bindings and extension library for (terminal UI library)"	"true"
"Low level bindings"	"zeromq-crystal"	"https://github.com/benoist/zeromq-crystal"	"Bindings for ZeroMQ"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"11"	"2"	"1"	"GitHub - benoist/zeromq-crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 11 Fork 1 benoist/zeromq-crystal Code Issues 0 Pull requests 0 Pulse Graphs No description or website provided. 29 commits 2 branches 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix-ci master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. examples spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md zeromq Bindings for ZeroMQ (http://zero.mq) Ported from (https://github.com/chuckremes/ffi-rzmq-core) Thank you @chuckremes Installation Add this to your application's shard.yml: dependencies:   zeromq:     github: benoist/zeromq-crystal Usage require ""zeromq"" # Simple server context = ZMQ::Context.new server = context.socket(ZMQ::REP) server.bind(""tcp://127.0.0.1:5555"")  loop do     puts server.receive_string     server.send_string(""Got it"") end  # Simple client context = ZMQ::Context.new client = context.socket(ZMQ::REQ) client.connect(""tcp://127.0.0.1:5555"")  client.send_string(""Fetch"") puts client.receive_string TODO Add more tests Add more examples Contributing Fork it ( https://github.com/benoist/zeromq-crystal/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors Benoist Benoist Claassen - creator, maintainer Hristo Kochev Hristo Kochev Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/benoist/zeromq-crystal"	"Bindings for ZeroMQ"	"true"
"Low level bindings"	"zlib.cr"	"https://github.com/datanoise/zlib.cr"	"Bindings for ZLib library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"2"	"2"	"GitHub - datanoise/zlib.cr: zlib binding for Crystal language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 7 Fork 2 datanoise/zlib.cr Code Issues 2 Pull requests 0 Pulse Graphs zlib binding for Crystal language 10 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit ad7b42e Oct 19, 2015 Kent Sibilev specify required version Permalink Failed to load latest commit information. spec upgraded to crystal 0.9 Oct 19, 2015 src upgraded to crystal 0.9 Oct 20, 2015 .gitignore initial commit May 25, 2015 .travis.yml add 32 bits linux support. Sep 10, 2015 LICENSE initial commit May 25, 2015 README.md specify required version Oct 19, 2015 README.md zlib.cr This library provides binding for ZLib library. Status Alpha Requirements Crystal language version 0.9 and higher. zlib version 1.2.5 or higher Goal Provide a simple API to handle Zlib Deflate/Inflate stream and GZFile API. Usage An example of using GZFile API: Zlib::GZFile.open(""output.gz"", ""w"") do |f|   f.puts ""hello world!"" end An example of deflating of a stream of data: File.open(""data.txt"", ""r"") do |src|   File.open(""data.txt.z"", ""w"") do |dst|     deflate = Zlib::Deflate.new(dst)      IO.copy(src, deflate)     deflate.finish   end end and inflating it back: File.open(""data.txt.z"", ""r"") do |src|   inflate = Zlib::Inflate.new(STDOUT)    IO.copy(src, inflate) end License MIT clause - see LICENSE for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/datanoise/zlib.cr"	"Bindings for ZLib library"	"true"
"Misc"	"aasm.cr"	"https://github.com/veelenga/aasm.cr"	"Easy to use finite state machine for Crystal classes"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"11"	"1"	"1"	"GitHub - veelenga/aasm.cr: Easy to use finite state machine for Crystal classes Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 11 Fork 1 veelenga/aasm.cr Code Issues 1 Pull requests 0 Pulse Graphs 🔃 Easy to use finite state machine for Crystal classes http://veelenga.github.io/aasm.cr 12 commits 2 branches 2 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.1.0 v0.1.0-pre Nothing to show New pull request Latest commit b14bc68 Jun 13, 2016 veelenga Enter hook now accepts any block Permalink Failed to load latest commit information. spec Enter hook now accepts any block Jun 13, 2016 src Enter hook now accepts any block Jun 13, 2016 .gitignore Initial commit Jan 17, 2016 .guardian.yml More usable description & main specs Jan 17, 2016 .travis.yml Initial commit Jan 16, 2016 LICENSE Initial commit Jan 16, 2016 README.md Enter hook now accepts any block Jun 13, 2016 shard.yml Initial commit Jan 16, 2016 README.md aasm.cr Aasm stands for ""Acts As State Machine"" which means that some abstract object can act as a finite state machine and can be in one of a finite number of states at a time; can change one state to another when initiated by a triggering event. Getting Started Adding a state machine to a Crystal class is as simple as including AASM module and writing act_as_state_machine method where you can define states and events with their transitions: class Transaction   include AASM    def act_as_state_machine     aasm.state :pending, initial: true     aasm.state :active,  enter: -> { puts ""Just got activated"" }     aasm.state :completed      aasm.event :activate do |e|       e.transitions from: :pending, to: :active     end      aasm.event :complete do |e|       e.transitions from: :active, to: :completed     end   end end  t = Transaction.new.tap &.act_as_state_machine t.state          #=> :pending t.next_state     #=> :active t.fire :activate # Just got activated t.state          #=> :active t.next_state     #=> :completed States State can be defined using aasm.state method passing the name and options: aasm.state :passive, initial: true State options Currently state supports the following options: initial : Bool optional - indicates whether this state is initial or not. If initial state not specified, first one will be considered as initial guard : (-> Bool) optional - a callback, that gets evaluated once state is getting entered. State will not enter if guard returns false enter : (->) optional - a hook, that gets evaluated once state entered. Events Event can be defined using aasm.state method passing the name and a block with transitions: aasm.event :delete do |e|   e.transitions from: :active, to: :deleted end Event has to be defined after state definition. In other case NoSuchStateException will be raise. Event options Currently event supports the following options: before : (->) optional - a callback, that gets evaluated once before changing a state after : (->) optional - a callback, that gets evaluated once after changing a state. Transitions Transition can be defined on event with transitions method passing options: aasm.event :complete do |e|   e.transitions from: [:pending, :active], to: :deleted end Transition options Currently transition supports the following options: from : (Symbol | Array(Symbol)) required - state (or states) from which state of state machine can be changed when event fired to : Symbol required - state to which state of state machine will change when event fired. More examples One state machine (circular) class CircularStateMachine   include AASM    def act_as_state_machine     aasm.state :started      aasm.event :restart do |e|       e.transitions from: :started, to: :started     end   end end Two states machine class TwoStateMachine   include AASM    def act_as_state_machine     assm.state :active     aasm.state :deleted      aasm.event :delete do |e|       e.transitions from: :active, to: :deleted     end   end end Three states machine class ThreeStatesMachine   include AASM    def act_as_state_machine     aasm.state :pending, initial: true     aasm.state :active     aasm.state :completed      aasm.event :activate do |e|       e.transitions from: :pending, to: :active     end     aasm.event :complete do |e|       e.before { puts ""completing..."" }       e.after  { puts ""completed"" }       e.transitions from: [:active, :pending], to: :completed     end   end end Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/veelenga/aasm.cr"	"Easy to use finite state machine for Crystal classes"	"true"
"Misc"	"chalk-box"	"https://github.com/azukiapp/crystal-chalk-box"	"Terminal color toolbox, check support and colorized (without String monkey patch)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"6"	"0"	"GitHub - azukiapp/crystal-chalk-box: Terminal string styling done right for crystal-lang Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 4 Fork 0 azukiapp/crystal-chalk-box Code Issues 0 Pull requests 0 Pulse Graphs Terminal string styling done right for crystal-lang 13 commits 1 branch 1 release Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.2.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. examples/basic spec src .gitignore CHANGELOG.md LICENSE README.md circle.yml shard.yml README.md Chalk Box Terminal toolbox to paint and embroider :) Why Colorize is the obvious choice for those who are starting coding on Crystal. However it changes the String class, and that's not a good practice. Besides that, it doesn't offer ways to handle multiple types of terminal. Obs: Yes, this lib is similar to the chalk lib from Node.js. The differences are: This lib is written in Crystal (oh really?); All-in-one (the style and support modules are integrated); This lib doesn't support 256 and TrueColor for now. Installation Add this to your application's shard.yml: dependencies:   chalk_box:     github: azukiapp/crystal-chalk-box Usage require ""chalk_box""  module Basic   extend ChalkBox   extend self    def main     puts chalk.green(""green fields"")   end end  Basic.main API chalk.style.style... Example: chalk.red.bold.underline(""Hello"", ""world"") Chain styles and call the last one as a method with a string argument. Order doesn't matter, and later styles take precedent in case of a conflict. This simply means that chalk.red.yellow.green is equivalent to chalk.green. chalk.enabled Color support is automatically detected, but you can override it by setting the enabled property. For default enable is instance of ChalkBox::Supports. ChalkBox::Supports Detect whether the terminal supports color. Used internally and handled for you, but exposed for convenience. Can be overridden by the user with the flags --color and --no-color. For situations where using --color is not possible, add an environment variable FORCE_COLOR with any value to force color. Trumps --no-color. Styles Modifiers reset bold dim italic (not widely supported) underline inverse hidden strikethrough (not widely supported) Colors black red green yellow blue (on Windows the bright version is used as normal blue is illegible) magenta cyan white gray Background colors bgBlack bgRed bgGreen bgYellow bgBlue bgMagenta bgCyan bgWhite TODO Add examples for ChalkBox::Styles; Add examples for ChalkBox::Supports; Add support for 256 colors; Add support for truecolor; Contributing Fork it ( https://github.com/azukiapp/crystal-chalk-box/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors nuxlli Everton Ribeiro - creator, maintainer License ""Azuki"", ""azk"" and the Azuki logo are copyright (c) 2013-2016 Azuki Serviços de Internet LTDA. azk source code is released under Apache 2 License. Check LEGAL and LICENSE files for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/azukiapp/crystal-chalk-box"	"Terminal color toolbox, check support and colorized (without String monkey patch)"	"true"
"Misc"	"circuit_breaker"	"https://github.com/TPei/circuit_breaker"	"Implementation of the circuit breaker pattern"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"1"	"0"	"GitHub - TPei/circuit_breaker: Implementation of the circuit breaker pattern in crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 4 Fork 0 TPei/circuit_breaker Code Issues 1 Pull requests 0 Pulse Graphs Implementation of the circuit breaker pattern in crystal 50 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml README.md shard.yml README.md circuit_breaker Simple Implementation of the circuit breaker pattern in Crystal. Given a certain error threshold, timeframe and timeout window, a breaker can be used to monitor criticial command executions. Circuit breakers are usually used to prevent unnecessary requests if a server ressource et al becomes unavailable. This protects the server from additional load and allows it to recover and relieves the client from requests that are doomed to fail. Wrap API calls inside a breaker, if the error rate in a given time frame surpasses a certain threshold, all subsequent calls will fail for a given duration. Installation Add to your shard.yml dependencies:   circuit_breaker:     github: tpei/circuit_breaker     branch: master and then install the library into your project with $ crystal deps Usage Create a new breaker: require ""circuit_breaker""  breaker = CircuitBreaker.new(   threshold: 5, # % of errors before you want to trip the circuit   timewindow: 60, # in s: anything older will be ignored in error_rate   reenable_after: 300 # after x seconds, the breaker will allow executions again ) Then wrap whatever you like: breaker.run do   my_rest_call() end The Breaker will open and throw an CircuitOpenException for all subsequent calls, once the threshold is reached. You can of course catch these exceptions and do whatever you want :D begin   breaker.run do     my_rest_call()   end rescue exc : CircuitOpenException   log ""happens to the best of us...""   42 end After the given reenable time, the circuit will transition to ""half open"". This will completely reset the circuit if the next execution succeeds, but reopen the circuit and reset the timer if the next execution fails. If you are feeling really funky, you can also hand in exception classes to monitor. You might want to catch RandomRestError, but not ArgumentError, so do this: breaker = CircuitBreaker.new(   threshold: 5,   timewindow: 60,   reenable_after: 300,   handled_errors: [RandomRestError.new] )  breaker.run   raise ArgumentError.new(""won't count towards the error rate"") end Of course you can also add custom errors to ignore and count all others: breaker = CircuitBreaker.new(   threshold: 5,   timewindow: 60,   reenable_after: 300,   ignored_errors: [ArgumentError.new] )  breaker.run   raise ArgumentError.new(""won't count towards the error rate"") end Unfortunately this both won't match against exception subclasses just yet, so at the moment you have to specify the exact class to monitor and can't just use RestException to match every subclass like RestTimeoutException < RestException... Thanks Special thanks goes to Pedro Belo on whose ruby circuit breaker implementation this is loosely based. CB2 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TPei/circuit_breaker"	"Implementation of the circuit breaker pattern"	"true"
"Misc"	"crdoc"	"https://github.com/rhysd/crdoc"	"CLI tool to search and open documentation"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"2"	"0"	"GitHub - rhysd/crdoc: CLI tool to search and open documentation for Crystal language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 2 Fork 0 rhysd/crdoc Code Issues 0 Pull requests 0 Pulse Graphs CLI tool to search and open documentation for Crystal language 29 commits 1 branch 1 release Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.0 Nothing to show New pull request Latest commit cbc1a3a Jan 24, 2016 rhysd update for Crystal 0.11.0 Permalink Failed to load latest commit information. bin spec src vendor .gitignore .gitmodules .travis.yml LICENSE README.md README.md crdoc crdoc is a CLI tool to search and open documentation for Crystal language. Installation Please download a binary from release page (OS X only) or build $ cd /your/favorite/directory/ $ git clone https://github.com/rhysd/crdoc.git && cd crdoc $ git submodule update $ crystal build --release bin/crdoc.cr $ cp crdoc /your/favorite/bin Usage crdoc search [-f] KEYWORD... crdoc api [-f] KEYWORD... crdoc syntax_and_semantics [-f] KEYWORD... crdoc list [-p|--path] [-a|--api] [-s|--syntax-and-semantics] crdoc update  search searches all documents with keyword(s) and show the result in browser. api searches API document with keyword(s) and show the result in browser. syntax_and_semantics searches 'syntax and semantics' document with keyword(s) and show the result in browser. list shows list of candidates. When --path is specified, it shows full paths to HTML documents instead. update updates cached repository. Using with peco/percol If you want to search documents incrementally, awesome filtering tools are available. You can use them as below (OS X example) $ open ""$(crdoc list --path | peco)"" $ open ""$(crdoc list --path | percol)"" If you often use these commands, it is also handy to make a function or an alias. Below is a Zsh & peco example. function peco-crdoc() {     local open     case $OSTYPE in     darwin*)         open=""open""         ;;     linux*)         open=""xdg-open""         ;;     esac      local selected=$(crdoc list --path | peco --prompt 'crdoc >' --query ""$LBUFFER"")     if [ -n ""$selected"" ]; then         $open ""${selected}""     fi     zle clear-screen } zle -N peco-crdoc TODOs Show markdown document in CLI instead of opening with browser 'syntax and semantics' markdown documents already exists It is necessary to generate markdown document from inline documents in comment Add --browser option to preserve current features Ignore-case match Development Crystal v0.11.0 Contributing Fork it ( https://github.com/rhysd/crdoc/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors @rhysd - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rhysd/crdoc"	"CLI tool to search and open documentation"	"true"
"Misc"	"cron_scheduler"	"https://github.com/kostya/cron_scheduler"	"Job scheduler with crontab patterns"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"12"	"1"	"0"	"GitHub - kostya/cron_scheduler: Simple job scheduler with crontab patterns for Crystal Language. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 12 Fork 0 kostya/cron_scheduler Code Issues 0 Pull requests 0 Pulse Graphs Simple job scheduler with crontab patterns for Crystal Language. 20 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 4ac1535 Nov 4, 2015 kostya more example Permalink Failed to load latest commit information. spec refactors Nov 4, 2015 src refactors Nov 4, 2015 .gitignore fix Nov 1, 2015 .travis.yml initial commit Oct 31, 2015 LICENSE initial commit Oct 31, 2015 README.md more example Nov 4, 2015 example.cr more example Nov 4, 2015 shard.yml initial commit Oct 31, 2015 README.md CronScheduler Simple job scheduler with crontab patterns for Crystal Language. Installation Add this to your application's shard.yml: dependencies:   cron_scheduler:     github: kostya/cron_scheduler Usage require ""cron_scheduler"" require ""logger""  L = Logger.new STDOUT  CronScheduler.define do    # normal crontab syntax, 5 tokens (minute, hour, day, month, wday)    at(""* * * * *"") { L.info ""every 1 minute"" }   at(""*/5 20-23 * * *"") { L.info ""every 5 minutes between 20-23 hours"" }   at(""*/2 */3 * * *"") { L.info ""every 2 minute every 3 hours"" }   at(""45 * * * *"") { L.info ""every hour at :45"" }   at(""* * * * SUN"") { L.info ""every 1 minute in sunday"" }    # I added extra syntax, when 6 tokens, first one parsed as seconds   # (second, minute, hour, day, month, wday)    at(""*/3 * * * * *"") { L.info ""every 3.seconds"" }   at(""20-45/5 * * * * *"") { L.info ""every 5.seconds between 20-45"" }   at(""11,22,33,44-60/2 * * * * *"") { L.info ""every 11,22,33,44-60/2 seconds"" } end  L.info ""Scheduler started""  sleep  Crontab Format Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kostya/cron_scheduler"	"Job scheduler with crontab patterns"	"true"
"Misc"	"crystal-diff"	"https://github.com/MakeNowJust/crystal-diff"	"A Crystal sequence differencing implementation"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"1"	"1"	"GitHub - MakeNowJust/crystal-diff: A Crystal sequence differencing implementation Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 10 Fork 1 MakeNowJust/crystal-diff Code Issues 0 Pull requests 0 Pulse Graphs A Crystal sequence differencing implementation 3 commits 1 branch 1 release Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. example spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md crystal-diff Crystal sequence differencing implementation. Based on the algorithm proposed in ""An O(NP) Sequence Comparision Algorithm"" (Wu, 1989) Installation Add this to your application's shard.yml: dependencies:   diff:     github: MakeNowJust/crystal-diff Usage require ""diff"" require ""colorize""  Diff.diff(""hello world"", ""hello good-bye"").each do |chunk|   print chunk.data.colorize(     chunk.append? ? :green :     chunk.delete? ? :red   : :dark_gray) end Development $ crystal spec Contributing Fork it ( https://github.com/MakeNowJust/crystal-diff/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors MakeNowJust TSUYUSATO Kitsune - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MakeNowJust/crystal-diff"	"A Crystal sequence differencing implementation"	"true"
"Misc"	"crystal-futures"	"https://github.com/dhruvrajvanshi/crystal-futures"	"Future type implementation"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"24"	"2"	"2"	"GitHub - dhruvrajvanshi/crystal-futures: Future type implementation for Crystal language Skip to content Personal Open source Business Explore Join GitHub Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 24 Fork 2 dhruvrajvanshi/crystal-futures Code Issues 0 Pull requests 0 Pulse Graphs Future type implementation for Crystal language 16 commits 2 branches 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit fb828fd Feb 7, 2016 dhruvrajvanshi Merge pull request #4 from gtramontina/shard … Make crystal-futures ""shard-able"" Permalink Failed to load latest commit information. doc Update docs Feb 5, 2016 src Make crystal-futures ""shard-able"" Feb 5, 2016 .gitignore Make crystal-futures ""shard-able"" Feb 5, 2016 README.md Make crystal-futures ""shard-able"" Feb 5, 2016 shard.yml Make crystal-futures ""shard-able"" Feb 5, 2016 README.md Futures for Crystal Futures provide a nice way to reason about performing many operations in parallel– in an efficient and non-blocking way. The idea is simple, a Future is a sort of a placeholder object that you can create for a result that does not yet exist. Generally, the result of the Future is computed concurrently and can be later collected. Composing concurrent tasks in this way tends to result in faster, asynchronous, non-blocking parallel code. ** Source : http://docs.scala-lang.org/overviews/core/futures.html Usage require ""futures"" include Futures  # Create a new future a = Future.new do   someTimeConsumingOperation() end  # Register a callback on successful operation a.on_success do |val|   doSomethingWithResult val end a.on_failure do |err|   raise err end  # Or handle both cases in one callback a.on_complete do |result|   try = result.get   case try   when Success     puts try.get   when Failure     raise try.error   end end  # Or block until future completes val = a.get  # compose new Futures from existing ones b = a.map do |val|   ""String : "" + val end  b.get Documentation Link Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dhruvrajvanshi/crystal-futures"	"Future type implementation"	"true"
"Misc"	"crystal-i18n"	"https://github.com/whity/crystal-i18n"	"Internationalization library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"2"	"3"	"GitHub - whity/crystal-i18n Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 7 Fork 3 whity/crystal-i18n Code Issues 0 Pull requests 0 Pulse Graphs No description or website provided. 13 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md i18n Installation Add this to your application's shard.yml: dependencies:   i18n:     github: whity/crystal-i18n Usage require ""i18n/backend/yaml""  # create a i18n object i18n = I18n.from_yaml_files(""[folder where the locale files are located]"")  # simple translation i18n.translate(""hello"")  # pluralization i18n.translate(""new_message"", count: 2)  # number format i18n.number(123.to_s)  # currency format i18n.currency(12345.to_s)  # time format i18n.time(Time.now)  # date format i18n.date(Time.now, format: ""long"") Contributing Fork it ( https://github.com/[your-github-name]/i18n/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors whity(https://github.com/whity) André Brás - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/whity/crystal-i18n"	"Internationalization library"	"true"
"Misc"	"CrystalEmail"	"https://github.com/Nephos/CrystalEmail"	"A RFC compliant Email validator"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"1"	"0"	"GitHub - Nephos/CrystalEmail: A RFC compliant Email validator Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 7 Fork 0 Nephos/CrystalEmail Code Issues 0 Pull requests 0 Pulse Graphs A RFC compliant Email validator 13 commits 1 branch 3 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.2.3.1 v0.2.3 v0.2.2.2 Nothing to show New pull request Latest commit db35344 Jul 3, 2016 Nephos fix format (crystal tool format) Permalink Failed to load latest commit information. spec fix format (crystal tool format) Jul 3, 2016 src fix format (crystal tool format) Jul 2, 2016 .gitignore initialize the project May 11, 2016 .travis.yml initialize the project May 11, 2016 CHANGELOG update changelog Jun 18, 2016 LICENSE initialize the project May 11, 2016 README.md update README Jun 17, 2016 shard.yml update email Jun 28, 2016 README.md  A RFC compliant Email validator What is an Email Address ? What is a Domain Name ? Compliant to the Rfc 5322. Compliant to the Rfc 1123. To do rfc 6530. Installation Works with crystal 0.17, 0.18 Add this to your application's shard.yml: dependencies:   CrystalEmail:       github: Nephos/CrystalEmail  Usage in Crystal require ""CrystalEmail""  # Pure Rfc5322 CrystalEmail::Rfc5322.validates? ""toto@tata"" # => true CrystalEmail::Rfc5322.match ""toto@tata"" # => #<MatchData ""toto@tata"" local:""toto"" domain:""tata""> CrystalEmail::Rfc5322.validates? ""toto"" # => false CrystalEmail::Rfc5322.match ""toto"" # => nil  # Rfc5322 + Internet basic usage CrystalEmail::Rfc5322::Public.validates? ""toto@tata.com"" # => true CrystalEmail::Rfc5322::Public.match ""toto@tata.com"" # => #<MatchData ""toto@tata"" local:""toto"" domain:""tata.com"">  ""toto@toto.toto"".is_email? # => true Contributes ! Find a bug ? Want a new feature ? Create a clear pull request and we'll see :) Nephos (poulet_a) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Nephos/CrystalEmail"	"A RFC compliant Email validator"	"true"
"Misc"	"daemonize.cr"	"https://github.com/DougEverly/daemonize.cr"	"Crystal process daemonizer"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"1"	"0"	"GitHub - DougEverly/daemonize.cr: Daemonize a crystal process. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 4 Fork 0 DougEverly/daemonize.cr Code Issues 0 Pull requests 0 Pulse Graphs Daemonize a crystal process. 3 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. examples spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md Daemonize Daemonize daemonizes a Crystal process so that it properly runs in the background without needing an active terminal session. This is what many server processes do. This is a shard of pending pull request https://github.com/crystal-lang/crystal/pull/2375. Installation Add this to your application's shard.yml: dependencies:   daemonize:     github: DougEverly/daemonize.cr Usage See examples in the examples directory. require ""daemonize""  Daemonize.daemonize  Daemonize also accepts file paths for STDIN, STDOUT, and STDERR. Defaults for all are ""/dev/null"". require ""daemonize""  Daemonize.daemonize(stdout: ""/dev/null"", stderr: ""/var/log/errors.log"", stdin: ""/var/tmp/a_file"")  Development TODO: Write development instructions here Contributing Fork it ( https://github.com/DougEverly/daemonize.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors [DougEverly] Doug Everly - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/DougEverly/daemonize.cr"	"Crystal process daemonizer"	"true"
"Misc"	"emoji.cr"	"https://github.com/veelenga/emoji.cr"	"Emoji library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"1"	"0"	"GitHub - veelenga/emoji.cr: Emoji for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 7 Fork 0 veelenga/emoji.cr Code Issues 0 Pull requests 0 Pulse Graphs 💚 Emoji for Crystal 35 commits 1 branch 2 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.0 v0.0.1 Nothing to show New pull request Latest commit 3279474 Mar 29, 2016 veelenga New emojis Permalink Failed to load latest commit information. assets bin spec src utils .gitignore .travis.yml LICENSE README.md shard.yml README.md emoji.cr Emoji library for Crystal. Inspired by Emoji for Python Installation As a dependency in shard.yml: dependencies:   emoji:     github: veelenga/emoji.cr     branch: master Usage require ""emoji""  puts Emoji.emojize(""I :heart: :beer: and :football:"") Will print the following in console: Binary You may also compile and use emojize binary that just prints to console emojized string: $ crystal build bin/emojize $ ./emojize It will boom: :boom: Resources Emoji Cheat Sheet Contributing Fork it ( https://github.com/veelenga/emoji.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/veelenga/emoji.cr"	"Emoji library"	"true"
"Misc"	"evented"	"https://github.com/krisleech/evented"	"A micro library to publish and subscribe for Crystal objects"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"23"	"3"	"1"	"GitHub - krisleech/evented: Publish and Subscribe for Crystal objects Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 23 Fork 1 krisleech/evented Code Issues 0 Pull requests 1 Pulse Graphs Publish and Subscribe for Crystal objects 12 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE Projectfile README.md README.md Evented A micro library providing Crystal objects with Publish-Subscribe capabilities Decouple core business logic from external concerns in Hexagonal style architectures Use as an alternative to callbacks and Observers Connect objects based on context without permanence React to events synchronously Installation Add it to Projectfile deps do   github ""krisleech/evented"" end Usage Publishing By including Evented::Publisher your objects get broadcast and subscribe methods. broadcast can be called from within your object whenever you want to broadcast a significant event. require ""evented""  class MyPublisher   include Evented::Publisher    def call(input)     result = do_something(input)     broadcast(:something_happened, result)   end end Subscribing To subscribe an object to receive events include Evented::Subscriber and provide your own on_event method which will receive 2 arguments, the event_name and payload. require ""evented""  class MySubscriber   include Evented::Subscriber    def on_event(event_name, payload)     # ...   end end To subscribe the listener to a publisher: publisher = MyPublisher.new publisher.subscribe(MySubscriber.new)  publisher.call(""hello"") In the above example the subscriber will have on_event(:something_happened, ""hello"") called. Development Specs crystal spec  Automatically run Specs ls ./**/*.cr | entr crystal spec  Contributing Fork it ( https://github.com/krisleech/evented/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors Kris Leech - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/krisleech/evented"	"A micro library to publish and subscribe for Crystal objects"	"true"
"Misc"	"guardian"	"https://github.com/f/guardian"	"File change watcher for Crystal and Non-Crystal libs"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"87"	"6"	"5"	"GitHub - f/guardian: Guardian watches over your files and run assigned tasks. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 87 Fork 5 f/guardian Code Issues 3 Pull requests 1 Pulse Graphs Guardian watches over your files and run assigned tasks. http://f.github.io/guardian 30 commits 2 branches 3 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.0.3 v0.0.2 v0.0.1 Nothing to show New pull request Latest commit 7119afa Jun 18, 2016 marceloboeira Extract file generator from watcher … Divinding in small units with few responsibility in order to make easier to test and maintain Permalink Failed to load latest commit information. spec Initial commit Jan 1, 2016 src Extract file generator from watcher Jun 18, 2016 .gitignore Initial commit Jan 1, 2016 .guardian.yml Initial commit Jan 1, 2016 .travis.yml Initial commit Jan 1, 2016 LICENSE Initial commit Jan 1, 2016 README.md Update README.md Mar 6, 2016 guardian Extract file generator from watcher Jun 18, 2016 shard.yml Update shard name and version Feb 14, 2016 README.md 💂 Guardian.cr Guardian watches over your files and runs assigned tasks. Installation OS X brew tap f/guardian brew install guardian From Source git clone https://github.com/f/guardian.git && cd guardian crystal build src/guardian.cr --release Quickstart Crystal Libs Guardian works seamless with Crystal Projects. It automatically binds itself to library you use. $ crystal init lib yourlib $ cd yourlib $ guardian init Created .guardian.yml of ./src/yourlib.cr Non-Crystal Libs You can use Guardian for other projects. $ guardian init Created .guardian.yml Usage $ guardian init It will create a .guardian.yml file to use by Guardian. .guardian.yml .guardian.yml is a simple YAML file. Simply it has YAML documents with seperated by --- line and each document has files and run keys. files key needs a glob pattern, and run is a shell command what to run. files: ./**/*.cr run: crystal build ./src/guardian.cr --- files: ./shard.yml run: crystal deps %file% Variable Guardian replaces %file% variable in commands with the changed file. files: ./**/*.txt run: echo ""%file% is changed"" Think you have a hello.txt in your directory, and Guardian will run echo ""hello.txt is changed"" command when it's changed. Running Guardian $ guardian 💂Guardian is on duty! Contributing Fork it ( https://github.com/f/guardian/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors f Fatih Kadir Akın - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/f/guardian"	"File change watcher for Crystal and Non-Crystal libs"	"true"
"Misc"	"haikunator"	"https://github.com/sanata-/haikunator"	"Heroku-like random name generator"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"1"	"1"	"GitHub - sanata-/haikunator: Heroku-like random name generator Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 2 Fork 1 sanata-/haikunator Code Issues 0 Pull requests 0 Pulse Graphs Heroku-like random name generator 6 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md Haikunator Generate Heroku-like memorable random names to use in your apps or anywhere else. Installation Add this to your application's shard.yml: dependencies:   haikunator:     github: sanata-/haikunator Usage require ""haikunator""  Haikunator.haikunate # => ""rough-snowflake-1142""  # Token range Haikunator.haikunate(100) # => ""nameless-star-13""  # Don't include the token Haikunator.haikunate(0) # => ""long-flower""  # Use a different delimiter Haikunator.haikunate(9999, ""."") # => ""cool.leaf.6743""  # No token, no delimiter Haikunator.haikunate(0, "" "") # => ""green fire""   TODO: Write usage instructions here Development TODO: Write development instructions here Contributing Fork it ( https://github.com/sanata-/haikunator/master ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Language Ports Haikunator based on Usman Bashir awesome gem and also have ports to other languages. Ruby: Haikunator Go: Go-Haikunator Haikunator Haikunator JavaScript: HaikunatorJS Python: PyHaikunator HaikunatorPy PHP: HaikunatorPHP Elixir: Haikunator .NET: Haikunator.NET Java: HaikunatorJAVA Dart: HaikunatorDART Rust rust-haikunator Maintainer [Peter Boriskin] # - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sanata-/haikunator"	"Heroku-like random name generator"	"true"
"Misc"	"html_builder"	"https://github.com/crystal-lang/html_builder"	"DSL for creating HTML"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9"	"7"	"3"	"GitHub - crystal-lang/html_builder: DSL for creating HTML Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 9 Fork 3 crystal-lang/html_builder Code Issues 0 Pull requests 0 Pulse Graphs DSL for creating HTML 13 commits 1 branch 2 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 7cff18f May 21, 2016 asterite Bump version to 0.2.0 Permalink Failed to load latest commit information. spec Support named tuples and double splats. May 21, 2016 src Bump version to 0.2.0 May 21, 2016 .gitignore Ported code from Crystal's standard library Dec 5, 2015 .travis.yml Ported code from Crystal's standard library Dec 5, 2015 LICENSE Ported code from Crystal's standard library Dec 5, 2015 README.md Support named tuples and double splats. May 21, 2016 shard.yml Bump version to 0.2.0 May 21, 2016 README.md html_builder DSL for creating HTML programatically (extracted from Crystal's standard library). Installation Add this to your application's shard.yml: dependencies:   html_builder:     github: crystal-lang/html_builder Usage require ""html_builder""  html = HTML.build do   a(href: ""http://crystal-lang.org"") do     text ""crystal is awesome""   end end  puts html # => %(<a href=""http://crystal-lang.org"">crystal is awesome</a>) Contributing Fork it ( https://github.com/crystal-lang/html_builder/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/crystal-lang/html_builder"	"DSL for creating HTML"	"true"
"Misc"	"immutable"	"https://github.com/lucaong/immutable"	"Implementation of thread-safe, persistent, immutable collections"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"62"	"5"	"0"	"GitHub - lucaong/immutable: Thread-safe, persistent, immutable collections for the Crystal language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 62 Fork 0 lucaong/immutable Code Issues 0 Pull requests 0 Pulse Graphs Thread-safe, persistent, immutable collections for the Crystal language 128 commits 2 branches 15 releases Fetching contributors Crystal 99.3% Makefile 0.7% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.1.14 v0.1.13 v0.1.12 v0.1.11 v0.1.10 v0.1.9 v0.1.8 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit f6dfdaf Jun 15, 2016 lucaong New version v0.1.14 … Changes:    - Crystal 0.18 compatibility Permalink Failed to load latest commit information. benchmarks fixes for Crystal 0.18.0 compatibility Jun 15, 2016 spec fix hash syntax May 18, 2016 src New version v0.1.14 Jun 15, 2016 .gitignore add benchmarks Feb 8, 2016 .travis.yml implement basic persistent bit-partitioned trie Jan 27, 2016 LICENSE implement basic persistent bit-partitioned trie Jan 27, 2016 Makefile fixes for Crystal 0.18.0 compatibility Jun 15, 2016 README.md update documentation for 0.17 named tuple changes May 18, 2016 shard.yml New version v0.1.14 Jun 15, 2016 README.md Immutable Efficient, thread-safe immutable data structures for Crystal. Whenever an Immutable data structure is ""modified"", the original remains unchanged and a modified copy is returned. However, the copy is efficient due to structural sharing. This makes Immutable data structures inherently thread-safe, garbage collector friendly and performant. At the moment, Immutable implements the following persistent data structures: Immutable::Vector: array-like ordered, integer-indexed collection implementing efficient append, pop, update and lookup operations Immutable::Map: hash-like unordered key-value collection implementing efficient lookup and update operations Installation Add this to your application's shard.yml: dependencies:   immutable:     github: lucaong/immutable Usage For a list of all classes and methods refer to the API documentation To use the immutable collections, require immutable in your code: require ""immutable"" Vector (API docs) # Vector behaves mostly like an Array: vector = Immutable::Vector[1, 2, 3, 4, 5]  # => Vector [1, 2, 3, 4, 5] vector[0]                                  # => 1 vector[-1]                                 # => 5 vector.size                                # => 5 vector.each { |elem| puts elem }  # Updating a Vector always returns a modified copy: vector2 = vector.set(2, 0)                 # => Vector [1, 2, 0, 4, 5] vector2 = vector2.push(42)                 # => Vector [1, 2, 0, 4, 5, 42]  # The original vector is unchanged: vector                                     # => Vector [1, 2, 3, 4, 5]  # Bulk updates can be made faster by using `transient`: vector3 = vector.transient do |v|   1000.times { |i| v = v.push(i) } end Map (API docs) # Map behaves mostly like a Hash: map = Immutable::Map[{:a => 1, :b => 2 }]  # => Map {:a => 1, :b => 2} map[:foo]                                  # => 1  # Updating a Map always returns a modified copy: map2 = map.set(:c, 3)                      # => Map {:a => 1, :b => 2, :c => 3} map2 = map2.delete(:b)                     # => Map {:a => 1, :c => 3}  # The original map in unchanged: map                                        # => Map {:a => 1, :b => 2}  # Bulk updates can be made faster by using `transient`: map3 = Immutable::Map(String, Int32)[] map3 = map3.transient do |m|   1000.times { |i| m = m.set(i.to_s, i) } end Nested structures # Nested arrays/hashes can be turned into immutable versions with the `.from` # method:  nested = Immutable.from({:name => ""Ada"", :colors => [:blue, :green, :red] }) nested # => Map {:name => ""Ada"", :colors => Vector [:blue, :green, :red]} Implementation Immutable::Vector is implemented as a bit-partitioned vector trie with a block size of 32 bits, that guarantees O(Log32) lookups and updates, which is effectively constant time for practical purposes. Due to tail optimization, appends and pop are O(1) 31 times out of 32, and O(Log32) 1/32 of the times. Immutable::Map uses a bit-partitioned hash trie with a block size of 32 bits, that also guarantees O(Log32) lookups and updates. Contributing Fork it ( https://github.com/lucaong/immutable/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors lucaong Luca Ongaro - creator, maintainer Acknowledgement Although not a port, this project takes inspiration from similar libraries and persistent data structure implementations like: Clojure persistent collections The Hamster gem for Ruby When researching on the topic of persistent data structure implementation, these blog posts have been of great help: Understanding Clojure's Persistent Vector (also Part 2, Part 3 and Understanding Clojure's Transients) Understanding Clojure's Persistent Hash Map Big thanks to their authors for the great job explaining the internals of these data structures. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lucaong/immutable"	"Implementation of thread-safe, persistent, immutable collections"	"true"
"Misc"	"kreal"	"https://github.com/f/kreal"	"Model sharing & RPC library built on and works with Kemal seamlessly"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"30"	"3"	"0"	"GitHub - f/kreal: Kreal is a model sharing & RPC library built on and works with Kemal seamlessly. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 30 Fork 0 f/kreal Code Issues 0 Pull requests 0 Pulse Graphs Kreal is a model sharing & RPC library built on and works with Kemal seamlessly. 18 commits 1 branch 1 release Fetching contributors HTML 57.2% Crystal 28.7% CoffeeScript 13.0% Makefile 1.1% HTML Crystal CoffeeScript Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. assets example src .gitignore .travis.yml LICENSE Makefile README.md shard.yml README.md Kreal Kreal is a model sharing & RPC library built on and works with Kemal seamlessly with slick debugging interface. Simple Tutorial 1. Create your remote models. # 1. Load Kreal! require ""kreal""  # 2. Create your class class Maths   # Share your method to call remotely   share :square    # Remote method must have arguments.   def self.square(args)     args[0] * args[0]   end end  # Register your remote procedure kreal Maths  # Rest of your Kemal app... get ""/"" do   # do not forget to load scripts/kreal.js end  # Do not forget to run Kemal. Kemal.run 2. Use your models via JavaScript API. Add this to your scripts: <script src=""/scripts/kreal.js""></script> Call your remote methods via Kreal magically. (new Kreal).connect(function (KR) {    // Call your function with a callback!   KR.Maths.square(2, function (result) {     console.log(result); // ""4""   });  }); Example App crystal run ./example/example.cr  Open localhost:3000/kreal Kreal Debugger Kreal debugger enables itself when Kemal is on debug mode. crystal build src/yourapp.cr  # Use the parameters of Kemal since it's built on Kemal. yourapp -e development [development] Kemal is ready to lead at http://0.0.0.0:3000  Now you have a debugging view at http://0.0.0.0:3000/kreal Let's build a simple example Let's build a simple OS bridge! class OSBridge   share :run    def self.run(args)     # Run command at os.     `#{args[0]}`   end end  kreal OSBridge Done! Now use it from your JavaScript! 👌 Installation Add this to your application's shard.yml: dependencies:   kreal:     github: f/kreal Contributing Fork it ( https://github.com/f/kreal/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors @f Fatih Kadir Akın - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/f/kreal"	"Model sharing & RPC library built on and works with Kemal seamlessly"	"true"
"Misc"	"lambda.cr"	"https://github.com/f/lambda.cr"	"Uniformed function call syntax"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"18"	"1"	"2"	"GitHub - f/lambda.cr: Uniformed function call syntax for Crystal Language. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 18 Fork 2 f/lambda.cr Code Issues 0 Pull requests 1 Pulse Graphs Uniformed function call syntax for Crystal Language. 6 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md λ.cr Lambda makes your Crystal functions uniformed. ⚠️ It's an experiment and we do not recommend using it. It monkey patches Object so may cause problems using it. But it's a good example what you can do with macros. ⚠️ # Lambda your expression. λ add do |x, y|   x + y end  # Use it like a method or a function puts 2.add 3 puts add 2, 3 Or more expressive example: # just define a lambda lambda not do |x| !x end  # ... and use as you wish true.not #=> false true.not.not #=> true false.not #=> true  not false #=> true not not true #=> true not true #=> false Installation Add this to your application's shard.yml: dependencies:   lambda:     github: f/lambda.cr Overview A free function can be called with a syntax that looks as if the function were a member function of its first parameter type. Idea is simple, result is awesome. # With lambda, you can call this function ... my_function first_param, second_param, other_param  # ... like this. first_param.my_function x, y, z Usage require ""lambda"" Just use λ to make the thing uniform. λ add do |x, y|   x + y end  result = add(2, 3) #=> 5 result = 2.add(3) #=> 5 Chaining Since you patch the struct or class you can chain easily. result = add(2, 3).add(4).add(5) #=> 2 + 3 + 4 + 5 = 14 Types and Lambda Overloading You can define types in parameters using param_as_Type pattern. λ plus do |x_as_Int32, y_as_Int32|   x + y end  λ plus do |first_as_String, second_as_String|   x + "" and "" + y end  2.plus 2 #=> 4 ""fatih"".plus ""akin"" #=> ""fatih and akin""  plus 2, 2 #=> 4 plus ""fatih"", ""akin"" #=> ""fatih and akin"" Examples λ add {|x, y| x + y} λ remove {|x| x - y} λ multiply {|x, y| x * y} λ divide {|x| x / y}  2.add(3).multiply(6).divide(2).remove(3).add(5).divide(5) #=> 3,  It's ((((2 + 3) * 6) / 2) - 3 + 5) / 5 WTF is λ?! It's the lambda character. If you don't want to use it, you can simply use lambda alias. lambda add do |x, y|   x + y end  result = add(2, 3) #=> 5 result = 2.add(3) #=> 5 Contributing Fork it ( https://github.com/f/ufcs.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors [f] Fatih Kadir Akın - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/f/lambda.cr"	"Uniformed function call syntax"	"true"
"Misc"	"progress"	"https://github.com/askn/progress"	"[==..] Progress bar"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"63"	"2"	"3"	"GitHub - askn/progress: [==..] Progress bar for Crystal Programming Language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 63 Fork 3 askn/progress Code Issues 0 Pull requests 0 Pulse Graphs [==..] Progress bar for Crystal Programming Language 8 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 289b1b8 Dec 26, 2015 askn readme Permalink Failed to load latest commit information. examples Resize simple gif Dec 26, 2015 images readme Dec 26, 2015 spec init Dec 26, 2015 src Update README.md Dec 26, 2015 .gitignore Add gifs for demo Dec 26, 2015 .travis.yml init Dec 26, 2015 LICENSE init Dec 26, 2015 README.md readme Dec 26, 2015 shard.yml init Dec 26, 2015 README.md [==..] progress Progress bar for Crystal Installation Add this to your application's shard.yml: dependencies:   progress:     github: askn/progress Usage require ""progress""  bar = ProgressBar.new bar.width = 40  until bar.done?   bar.inc   sleep 0.1 end Functions inc: a step increase to current tick and print tick(n): add to current tick and print set(n): Set current tick and print done: finish and print done?: is done ? current: current tick number percent: completion percentage Options complete: completion character incomplete: completion character step: default 1 width: the displayed width of the progress bar (default: 100) total: total ticks (default: 100) TODO Bar format Multiple bar Max bar width Contributing Fork it ( https://github.com/askn/progress/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors askn Aşkın Gedik - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/askn/progress"	"[==..] Progress bar"	"true"
"Misc"	"raytracer-crystal"	"https://github.com/l3kn/raytracer-crystal"	"CPU Raytracer with examples"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"3"	"0"	"GitHub - l3kn/raytracer-crystal: CPU Raytracer written in the crystal language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 7 Fork 0 l3kn/raytracer-crystal Code Issues 0 Pull requests 0 Pulse Graphs CPU Raytracer written in the crystal language 64 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. distance_estimatables hitable images material models raytracers scenes .gitignore README.md aabb.cr camera.cr cube_map.cr distance_estimatable.cr distance_estimator.cr helper.cr hitable.cr material.cr perlin.cr ray.cr raytracer.cr shard.lock shard.yml texture.cr vec3.cr README.md raytracer-crystal Hitables Primitives Sphere Triangle XYRect, XZRect, YZRect (axis aligned rectangles) Compound Cuboid (constructs a HitableList with a Rect for each side) Collections of other Hitables HitableList (a simple list, optimal for scenes with few objects) BVHNode (bounding volume hierarchy -> tree structure, might be faster for scenes with >5k objects) Materials Lambertian (diffuse) Metal (reflective) Dielectric (transmissive, e.g. glass or water) DiffuseLight ([WIP] diffuse emissive) Raytracers [WIP] Raytracer (supports emissive materials -> pretty slow, the background is black) SimpleRaytracer (ignores emissive materials, the background is ""sky"" colored) CubeMapRaytracer (ignores emissive materials, the background color gets calculated by a cube map) Textures [WIP] ConstantTexture CheckerTexture (creates a checkerboard pattern from two other textures) NoiseTexture (perlin noise as a texture) Misc Vec3 (3D Vector, used for points, vectors and colors) Ray Camera CubeMap Perlin (used to generate 3d perlin noise) AABB (axis aligned bounding boxes, used by BVHNodes) Distance Estimation [WIP] A way to ""trace"" objects that have no analytic hit/distance function (e.g. fractals). DE::DistanceEstimator (Wrapper to make a Hitable from DE::DistanceEstimatable using ray marching to find intersections) Primitives DE::Sphere(radius) DE::Box(dimensions : Vec3) DE::Torus(radius, width) DE::Prism(height, length) DE::Cylinder(radius, length) Fractals DE::Mandelbulb(iterations, power) Distance Operations DE::Union(de1, de2) DE::Intersection(de1, de2) DE::Difference(de1, de2) Domain Operations DE::Repeat(de, modules : Vec3) (repeat every modules.x ""units"" on the x-axis, etc.) Scenes / Images scenes/light2.cr 800x400px, 2000 samples / pixel, time: 600s scenes/teapot1.cr 800x400px, 50 samples / pixel, no lights, 2464 triangles, time: 41min scenes/minecraft.cr 800x400px, 100 samples / pixel, no lights, time: 410s scenes/fractal1.cr 400x400px, 5 samples / pixel, no lights, debug mode (color = normal), time: 160s scenes/cube_map1.cr Animation on imgur 360 frames a 400x400px, 20 samples / pixel, no lights, time: 725s The cube map in this example is ""Yokohama"" by Emil ""Humus"" Persson, licensed under CC BY 3.0 In order to run this example: Download the set of cubemaps Unzip the folder Convert each .jpg to .png e.g. using convert negx.jpg -compress none negx.png etc. (convert is part of the imagemagick) Copy all six png files (negx.png, negy.png, negz.png, posx.png, posy.png, posz.png) to cube_maps/Yokohama Resources Raytracing: the Next Week Raytracing in One Weekend Modeling with Distance Functions Distance Estimated 3D Fractals (I-V) Models teapot.obj (Utah teapot, used by scenes/teapot1.cr) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/l3kn/raytracer-crystal"	"CPU Raytracer with examples"	"true"
"Misc"	"spinner"	"https://github.com/askn/spinner"	"Terminal Spinner"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"27"	"1"	"1"	"GitHub - askn/spinner: Terminal Spinner for Crystal Programming Language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 27 Fork 1 askn/spinner Code Issues 0 Pull requests 0 Pulse Graphs Terminal Spinner for Crystal Programming Language 8 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. examples images spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md Spinner Terminal Spinner for Crystal Programming Language Installation Add this to your application's shard.yml: dependencies:   spinner:     github: askn/spinner Usage require ""spinner""  sp = Spin.new sp.start sleep 3 sp.stop Options delay: default = 0.1 chars: you can choose charset from CHARSET default = Spinner::Charset[:pipe] Examples require ""spinner"" require ""colorize""  chars = Spinner::Charset[:arrow].map do |c|   c.colorize(:light_green) end  spin = Spin.new(0.2, chars) spin.start sleep 3 spin.stop Contributing Fork it ( https://github.com/askn/spinner/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors askn Aşkın Gedik - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/askn/spinner"	"Terminal Spinner"	"true"
"Misc"	"statsd.cr"	"https://github.com/miketheman/statsd.cr"	"client library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"2"	"0"	"GitHub - miketheman/statsd.cr: A statsd client library for Crystal. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 3 Fork 0 miketheman/statsd.cr Code Issues 1 Pull requests 0 Pulse Graphs A statsd client library for Crystal. https://github.com/miketheman/statsd.cr 15 commits 1 branch 1 release Fetching contributors Crystal 98.2% Makefile 1.8% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. bin examples spec src .gitignore .travis.yml CHANGELOG.md LICENSE Makefile README.md shard.yml README.md statsd.cr A statsd client library for Crystal. Installation Add this to your application's shard.yml: dependencies:   statsd:     github: miketheman/statsd.cr Usage require ""statsd""  statsd = Statsd::Client.new statsd.increment ""myapp.login_page"", 1  # Datadog-compliant statsd tags: statsd.increment ""page.views"", tags: [""page:login"", ""app:myapp""] See examples/test.cr for more. Contributing Fork it Create your feature branch (git checkout -b my-new-feature) Test your changes with make spec Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors Inspired by syslog.cr and statsd. @miketheman Mike Fiedler - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/miketheman/statsd.cr"	"client library"	"true"
"Misc"	"Statsd"	"https://github.com/etsy/statsd"	"client library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10040"	"423"	"1368"	"GitHub - etsy/statsd: Daemon for easy but powerful stats aggregation Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 423 Star 10,040 Fork 1,368 etsy/statsd Code Issues 24 Pull requests 26 Wiki Pulse Graphs Daemon for easy but powerful stats aggregation 931 commits 7 branches 12 releases 178 contributors JavaScript 96.7% Shell 2.4% Perl 0.9% JavaScript Shell Perl Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cluster_proxy configurable-metric-namespace issue-462-EADDRINUSE master pr_merge_test refactor-packet-parsing test_helpers Nothing to show v0.8.0 v0.7.2 v0.7.1 v0.7.0 v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.1 v0.2.0 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 02eae13 Jul 4, 2016 benburry committed on GitHub Merge pull request #579 from aurrelhebert/pluginWarp10 … Add plugin Warp10 backend Permalink Failed to load latest commit information. backends pickling support. Jul 10, 2015 bin add bin/statsd Jun 28, 2012 debian Updates changelogs. closes #568 May 11, 2016 docs Add plugin Warp10 to statsd Jul 4, 2016 examples partable bash shebang Sep 25, 2015 lib Merge pull request #504 from tihonove/master May 4, 2016 packager Force statsd restart when updating package Nov 11, 2015 servers Fix node 0.10 error. May 5, 2016 test Merge pull request #564 from Nihn/allow-to-use-unix-domain-so May 5, 2016 utils Nagios and Keepalived check script Mar 18, 2016 .gitignore Added IDEA project files to .gitignore Sep 22, 2014 .pkgr.yml Remove all default dependencies in generated package Nov 11, 2015 .travis.yml Adding node 5.x to travis builds May 4, 2016 CONTRIBUTING.md move contributing information into CONTRIBUTING.md Jan 29, 2014 Changelog.md Updates changelogs. closes #568 May 11, 2016 Dockerfile Pin Node version to 5.x on Docker image. May 5, 2016 LICENSE Updated copyright to 2016 Jan 1, 2016 README.md Minor font style improvements Oct 23, 2015 docker-compose.yml Initial Docker Compose manifest. Apr 29, 2016 exampleConfig.js Merge pull request #564 from Nihn/allow-to-use-unix-domain-so May 5, 2016 exampleProxyConfig.js properly use ipv6 config when starting proxy, adds extra keys to exam… Mar 23, 2016 package.json fixes package.json May 11, 2016 proxy.js properly use ipv6 config when starting proxy, adds extra keys to exam… Mar 23, 2016 run_tests.sh Make failing tests exit with non-zero status Jul 20, 2012 stats.js Account for negative clock skew in flushMetrics May 6, 2016 README.md StatsD A network daemon that runs on the Node.js platform and listens for statistics, like counters and timers, sent over UDP or TCP and sends aggregates to one or more pluggable backend services (e.g., Graphite). We (Etsy) blogged about how it works and why we created it. Inspiration StatsD was inspired (heavily) by the project (of the same name) at Flickr. Here's a post where Cal Henderson described it in depth: Counting and timing Cal re-released the code recently: Perl StatsD Key Concepts buckets Each stat is in its own ""bucket"". They are not predefined anywhere. Buckets can be named anything that will translate to Graphite (periods make folders, etc) values Each stat will have a value. How it is interpreted depends on modifiers. In general values should be integer. flush After the flush interval timeout (defined by config.flushInterval, default 10 seconds), stats are aggregated and sent to an upstream backend service. Installation and Configuration Install node.js Clone the project Create a config file from exampleConfig.js and put it somewhere Start the Daemon: node stats.js /path/to/config Usage The basic line protocol expects metrics to be sent in the format: <metricname>:<value>|<type>  So the simplest way to send in metrics from your command line if you have StatsD running with the default UDP server on localhost would be: echo ""foo:1|c"" | nc -u -w0 127.0.0.1 8125  More Specific Topics Metric Types Graphite Integration Supported Servers Supported Backends Admin TCP Interface Server Interface Backend Interface Metric Namespacing Statsd Cluster Proxy Debugging There are additional config variables available for debugging: debug - log exceptions and print out more diagnostic info dumpMessages - print debug info on incoming messages For more information, check the exampleConfig.js. Tests A test framework has been added using node-unit and some custom code to start and manipulate statsd. Please add tests under test/ for any new features or bug fixes encountered. Testing a live server can be tricky, attempts were made to eliminate race conditions but it may be possible to encounter a stuck state. If doing dev work, a killall statsd will kill any stray test servers in the background (don't do this on a production machine!). Tests can be executed with ./run_tests.sh. Meta IRC channel: #statsd on freenode Mailing list: statsd@librelist.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/etsy/statsd"	"client library"	"true"
"Misc"	"syscall.cr"	"https://github.com/kubo39/syscall.cr"	"Raw syscall interface"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"1"	"0"	"GitHub - kubo39/syscall.cr: syscall interface for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 8 Fork 0 kubo39/syscall.cr Code Issues 0 Pull requests 0 Pulse Graphs syscall interface for Crystal 24 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. examples spec src .gitignore .travis.yml LICENSE README.md README.md syscall.cr Raw syscall interface for Crystal. Linux/OSX with x86_64 support only. Example include Syscall  str = ""Hello!\n"" syscall(WRITE, 1_u64, str.to_unsafe, str.bytesize.to_u64) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kubo39/syscall.cr"	"Raw syscall interface"	"true"
"Networking"	"amqp.cr"	"https://github.com/datanoise/amqp.cr"	"AMQP 0.9.1 client with RabbitMQ extensions"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"4"	"2"	"GitHub - datanoise/amqp.cr: AMQP client for Crystal language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 15 Fork 2 datanoise/amqp.cr Code Issues 0 Pull requests 1 Pulse Graphs AMQP client for Crystal language 71 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 0a21e21 Jun 11, 2016 Kent Sibilev use FrameError instead of SyntaxError Permalink Failed to load latest commit information. codegen examples spec src .gitignore LICENSE README.md gen_spec.sh README.md AMQP AMQP 0.9.1 client with RabbitMQ extensions in Crystal. Status Beta Requirements Crystal language version 0.7.0 and higher. Goal The goal is to provide the usable interface to RabbitMQ server, by implementing the AMQP 0.9.1 spec in pure Crystal language. Usage Please see 'examples' directory for various usage scenarios. License MIT clause - see LICENSE for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/datanoise/amqp.cr"	"AMQP 0.9.1 client with RabbitMQ extensions"	"true"
"Networking"	"bson.cr"	"https://github.com/jeromegn/bson.cr"	"Native BSON implementation"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5"	"1"	"1"	"GitHub - jeromegn/bson.cr: BSON implementation written in Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 5 Fork 1 jeromegn/bson.cr Code Issues 0 Pull requests 0 Pulse Graphs BSON implementation written in Crystal 34 commits 1 branch 5 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.0.2 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. examples perf spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md BSON BSON implemented in Crystal according to the spec. Installation Add this line to your application's Projectfile: deps do   github ""jeromegn/bson.cr"" end Usage require ""bson""  io = File.open(File.expand_path(""examples/sample.bson"")) # A pretty representative BSON document BSON.decode(io) # => Returns a Hash instance  bson, writer = IO.pipe ""a string"".to_bson(writer) # => encodes the string to BSON and writes to the IO  puts String.from_bson(bson).inspect # => ""a string""  doc = Hash{   ""name"" => ""hello"",   ""int"" => 32 }  puts doc # => { ""name"" => ""hello"", ""int"" => 32 }  bson, writer = IO.pipe doc.to_bson(writer) # => Encodes the whole document to BSON and writes to the IO  puts BSON.decode(bson) # => { ""name"" => ""hello"", ""int"" => 32 } Supported types All types specified in the BSON spec. Relevant basic types of Crystal have been extended to add #to_bson(io : IO) and .from_bson(io : IO) for simplicity. A BSON::Document is just an alias for Hash(String, BSON::Type) TODOs More tests Caveats Only supported Regex options are the ones also supported by Crystal: i and m basically. Contributing Fork it ( https://github.com/jeromegn/bson.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors jeromegn Jerome Gravel-Niquet - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jeromegn/bson.cr"	"Native BSON implementation"	"true"
"Networking"	"jwt"	"https://github.com/greyblake/crystal-jwt"	"Implementation of JWT (JSON Web Token)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"20"	"2"	"0"	"GitHub - greyblake/crystal-jwt: JWT implementation in Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 20 Fork 0 greyblake/crystal-jwt Code Issues 0 Pull requests 0 Pulse Graphs JWT implementation in Crystal 25 commits 2 branches 2 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master rsa Nothing to show v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 22ce213 May 18, 2016 greyblake v0.2.0 Permalink Failed to load latest commit information. examples Support of Crystal 0.17.0 May 18, 2016 spec Support of Crystal 0.17.0 May 18, 2016 src v0.2.0 May 18, 2016 .gitignore Initial commit Jan 17, 2016 .travis.yml Integrate TravisCI Jan 24, 2016 CHANGELOG.md v0.2.0 May 18, 2016 LICENSE Initial commit Jan 17, 2016 README.md shard.yml Initial commit Jan 17, 2016 README.md Crystal JWT An implementation of JSON Web Token (JWT) in Crystal programming language. Crystal JWT Installation Usage Supported algorithms Supported reserved claim names Expiration time (exp) Not before time (nbf) Issued At (iat) Audience (aud) Issuer (iss) Subject (sub) JWT ID (jti) Exceptions Test Contributors Installation Add this to your application's shard.yml: dependencies:   jwt:     github: greyblake/crystal-jwt Usage # Encoding payload = { ""foo"" => ""bar"" } token = JWT.encode(payload, ""SecretKey"", ""HS256"") # => ""eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmb28iOiJiYXIifQ.Y3shN5Wh4FmOPM34biIm9QQmat373hJFKNxgSANQWJo""  # Decoding payload, header = JWT.decode(token, ""$secretKey"", ""HS256"") # payload = {""foo"" => ""bar""} # header = {""typ"" => ""JWT"", ""alg"" => ""HS256""} Supported algorithms none HMAC (HS256, HS384, HS512) RSA - in progress Supported reserved claim names JSON Web Token defines some reserved claim names and how they should be used. 'exp' (Expiration Time) Claim 'nbf' (Not Before Time) Claim 'iss' (Issuer) Claim 'aud' (Audience) Claim 'jti' (JWT ID) Claim 'iat' (Issued At) Claim 'sub' (Subject) Claim Expiration Time (exp) From RFC 7519: The ""exp"" (expiration time) claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing. The processing of the ""exp"" claim requires that the current date/time MUST be before the expiration date/time listed in the ""exp"" claim. Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew. Its value MUST be a number containing a NumericDate value. Use of this claim is OPTIONAL Example: # Create token that expires in 1 minute exp = Time.now.epoch + 60 payload = { ""foo"" => ""bar"", ""exp"" => exp } token = JWT.encode(payload, ""SecretKey"", ""HS256"")  # At this moment token can be decoded payload, header = JWT.decode(token, ""SecretKey"", ""HS256"")  sleep 61 # Now token is expired, so JWT::ExpiredSignatureError will be raised payload, header = JWT.decode(token, ""SecretKey"", ""HS256"") Not Before Time (nbf) From RFC 7519: MUST NOT be accepted for processing. The processing of the ""nbf"" The ""nbf"" (not before) claim identifies the time before which the JWT claim requires that the current date/time MUST be after or equal to the not-before date/time listed in the ""nbf"" claim. Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew. Its value MUST be a number containing a NumericDate value. Use of this claim is OPTIONAL. Example: # Create token that will become acceptable in 1 minute nbf = Time.now.epoch + 60 payload = { ""foo"" => ""bar"", ""nbf"" => nbf } token = JWT.encode(payload, ""SecretKey"", ""HS256"")  # Currently it's not acceptable, raises JWT::ImmatureSignatureError JWT.decode(token, ""SecretKey"", ""HS256"") Issued At (iat) From RFC 7519: The ""iat"" (issued at) claim identifies the time at which the JWT was issued. This claim can be used to determine the age of the JWT. Its value MUST be a number containing a NumericDate value. Use of this claim is OPTIONAL. Example: payload = { ""foo"" => ""bar"", ""iat"" => Time.now.epoch } token = JWT.encode(payload, ""SecretKey"", ""HS256"") Audience (aud) From RFC 7519: The aud (audience) claim identifies the recipients that the JWT is intended for. Each principal intended to process the JWT MUST identify itself with a value in the audience claim. If the principal processing the claim does not identify itself with a value in the aud claim when this claim is present, then the JWT MUST be rejected. In the general case, the aud value is an array of case-sensitive strings, each containing a StringOrURI value. In the special case when the JWT has one audience, the aud value MAY be a single case-sensitive string containing a StringOrURI value. The interpretation of audience values is generally application specific. Use of this claim is OPTIONAL. Example: payload = {""foo"" => ""bar"", ""aud"" => [""sergey"", ""julia""]} token = JWT.encode(payload, ""key"", ""HS256"")  # OK, aud matches payload, header = JWT.decode(token, ""key"", ""HS256"", aud: ""sergey"")  # aud does not match, raises JWT::InvalidAudienceError payload, header = JWT.decode(token, ""key"", ""HS256"", aud: ""max"") Issuer (iss) From RFC 7519: The iss (issuer) claim identifies the principal that issued the JWT. The processing of this claim is generally application specific. The iss value is a case-sensitive string containing a StringOrURI value. Use of this claim is OPTIONAL. Example: payload = { ""foo"" => ""bar"", ""iss"" => ""me""} token = JWT.encode(payload, ""SecretKey"", ""HS256"")  # OK, because iss matches payload, header = JWT.decode(token, ""SecretKey"", ""HS256"", iss: ""me"")  # iss does not match, raises JWT::InvalidIssuerError payload, header = JWT.decode(token, ""SecretKey"", ""HS256"", iss: ""you"") Subject (sub) From RFC 7519: The sub (subject) claim identifies the principal that is the subject of the JWT. The Claims in a JWT are normally statements about the subject. The subject value MUST either be scoped to be locally unique in the context of the issuer or be globally unique. The processing of this claim is generally application specific. The sub value is a case-sensitive string containing a StringOrURI value. Use of this claim is OPTIONAL. Example: payload = { ""nomo"" => ""Sergeo"", ""sub"" => ""Esperanto"" } token = JWT.encode(payload, ""key"", ""HS256"")  # Raises JWT::InvalidSubjectError, because ""sub"" claim does not match JWT.decode(token, ""key"", ""HS256"", sub: ""Junularo"") JWT ID (jti) From RFC 7519: The jti (JWT ID) claim provides a unique identifier for the JWT. The identifier value MUST be assigned in a manner that ensures that there is a negligible probability that the same value will be accidentally assigned to a different data object; if the application uses multiple issuers, collisions MUST be prevented among values produced by different issuers as well. The jti claim can be used to prevent the JWT from being replayed. The jti value is a case-sensitive string. Use of this claim is OPTIONAL. Example: require ""secure_random""  jti = SecureRandom.urlsafe_base64 payload = { ""foo"" => ""bar"", ""jti"" => jti } token = JWT.encode(payload, ""SecretKey"", ""HS256"") Exceptions JWT::Error JWT::DecodeError JWT::VerificationError JWT::ExpiredSignatureError JWT::ImmatureSignatureError JWT::InvalidAudienceError JWT::InvalidIssuerError JWT::InvalidSubjectError UnsupportedAlogrithmError Test crystal spec  Contributors greyblake Potapov Sergey - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/greyblake/crystal-jwt"	"Implementation of JWT (JSON Web Token)"	"true"
"Networking"	"msgpack-crystal"	"https://github.com/benoist/msgpack-crystal"	"MessagePack library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"29"	"4"	"3"	"GitHub - benoist/msgpack-crystal: MessagePack implementation in Crystal msgpack.org[Crystal] Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 29 Fork 3 benoist/msgpack-crystal Code Issues 0 Pull requests 0 Pulse Graphs MessagePack implementation in Crystal msgpack.org[Crystal] 117 commits 5 branches 0 releases Fetching contributors Crystal 92.4% Ruby 7.6% Crystal Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags enum master pack-small pull-parser union_types Nothing to show Nothing to show New pull request Latest commit 59ed73a Jun 16, 2016 benoist committed on GitHub Merge pull request #28 from benoist/enum … added enum support Permalink Failed to load latest commit information. bench fix benchmarks Jun 2, 2016 examples add mappings Feb 16, 2016 spec added enum support Jun 16, 2016 src added enum support Jun 16, 2016 .gitignore Improve benchmarks Feb 17, 2016 .travis.yml added travis Dec 1, 2015 CHANGELOG.md update changelog Jun 16, 2016 Guardfile pack int and uint in the smallest size possible Feb 16, 2016 README.md fix doc Feb 17, 2016 shard.yml update changelog Jun 16, 2016 README.md MessagePack MessagePack implementation in Crystal. It supports Packing and Unpacking from a string or an IO, Mappings, to_msgpack-from_msgpack methods. Installation Add this to your application's shard.yml: dependencies:   msgpack:     github: benoist/msgpack-crystal Usage require ""msgpack""  class Location   MessagePack.mapping({     lat: Float64,     lng: Float64,   }) end  class House   MessagePack.mapping({     address:  String,     location: {type: Location, nilable: true},   }) end  house = House.from_msgpack({""address"" => ""Road12"", ""location"" => {""lat"" => 12.3, ""lng"" => 34.5}}.to_msgpack) p house # <House:0x1b06de0 @address=""Road12"", @location=#<Location:0x1b06dc0 @lat=12.3, @lng=34.5>>  house.address = ""Something"" house = House.from_msgpack(house.to_msgpack) p house # #<House:0x13f0d80 @address=""Something"", @location=#<Location:0x13f0d60 @lat=12.3, @lng=34.5>>  house = House.from_msgpack({""address"" => ""Crystal Road 1234""}.to_msgpack) p house # <House:0x1b06d80 @address=""Crystal Road 1234"", @location=nil> More Examples (examples) Copyright Copyright 2015 Benoist Claassen Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/benoist/msgpack-crystal"	"MessagePack library"	"true"
"ORM/ODM Extensions"	"active_record.cr"	"https://github.com/waterlink/active_record.cr"	"Active Record pattern implementation"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"92"	"9"	"12"	"GitHub - waterlink/active_record.cr: Active Record pattern implementation for Crystal. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 92 Fork 12 waterlink/active_record.cr Code Issues 8 Pull requests 0 Pulse Graphs Active Record pattern implementation for Crystal. 137 commits 1 branch 12 releases Fetching contributors Crystal 97.6% Shell 2.4% Crystal Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.2 v0.3.1 v0.3.0 v0.2.0 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 1570c01 Jul 14, 2016 waterlink committed on GitHub Merge pull request #54 from akitaonrails/fixing_pg_adapter … Defining the class variable @@query_generators outside of the module extension in the Adapter Permalink Failed to load latest commit information. spec Upgrade to crystal 0.18.4 (#53) Jun 25, 2016 src without defining the class variable @@query_generators outside of the… Jul 12, 2016 .gitignore Add watch.sh Feb 6, 2016 .travis.yml Crystal is now community supported on Travis CI Jun 30, 2015 LICENSE Initial commit Apr 13, 2015 README.md Update README Apr 2, 2016 shard.yml without defining the class variable @@query_generators outside of the… Jul 12, 2016 watch.sh Add watch.sh Feb 6, 2016 README.md active_record Active Record pattern implementation for Crystal. Don't confuse with Ruby's activerecord: aim of this is to be true to OO techniques and true to the Active Record pattern. Small, simple, useful for non-complex domain models. For complex domain models better use Data Mapper pattern. Work in progress Contents: Installation TODO Usage Define your model Create a new record Get existing record by id Query multiple records Update existing record Delete existing record Enforcing encapsulation Query DSL Connection configuration Connection pool configuration Joins Known database adapters Development Creating your own database adapter Contributing TODO Implement model definition syntax Implement field_level Implement NullAdapter (in-memory, for specs) Implement #create, .create and .get Implement .where Implement query_level Implement #update and #delete Implement better query DSL Default table_name implementation Implement mysql adapter Populate this list further by making some simple app on top of it Describe in readme how to implement your own adapter Add transaction features Implement postgres driver Support more types (currently only Int | String are supported) Time Bool Arbitrary type that supports specific interface Support joins Installation Add it to shard.yml: dependencies:   active_record:     github: waterlink/active_record.cr     version: ~> 0.4 Additionally you would need to choose your database driver adapter. For example, if you want to use waterlink/postgres_adapter.cr, then you would add this dependency:   postgres_adapter:     github: waterlink/postgres_adapter.cr See list of known adapters. Usage require ""active_record"" # And require your chosen database adapter: require ""postgres_adapter"" Define your model class Person < ActiveRecord::Model    # Set adapter to your chosen adapter name   adapter postgres    # Set table name, defaults to ""#{lowercase_name}s""   # table_name people    # Database fields   primary id                 : Int   field last_name            : String   field first_name           : String   field number_of_dependents : Int    # Domain logic   def get_tax_exemption     # ...   end    def get_taxable_earnings     # ...   end  end Create a new record # Combine .new(..) and #create Person.new({ ""first_name""           => ""John"",              ""last_name""            => ""Smith"",              ""number_of_dependents"" => 3 }).create #=> #<Person: ...>  # Or shortcut with .create(..) Person.create({ ""first_name""           => ""John"",                 ""last_name""            => ""Smith"",                 ""number_of_dependents"" => 3 })     #=> #<Person: ...> Get existing record by id Person.get(127)  #=> #<Person: @id=127, ...> Query multiple records # Get all records Person.all         # => [#<Person: ...>, #<Person: ...>, ...]  # Query by hash Person.where({ ""number_of_dependents"" => 0 })   #=> [#<Person: ...>, #<Person: ...>, ...]  # Or construct a query object include ActiveRecord::CriteriaHelper Person.where(criteria(""number_of_dependents"") > 3)    #=> [#<Person: ...>, #<Person: ...>, ...] See Query DSL Update existing record person = Person.get(127) person.number_of_dependents = 0 person.update Delete existing record Person.get(127).delete Enforcing encapsulation If you care about OO techniques, code quality and handling complexity, please enable this for your models. class Person < ActiveRecord::Model    # Default is public for ease of use   field_level :private   # field_level :protected    query_level :private   # default is public, there is no point in protected here    # ... end  # Enforces you to maintain encapsulation, ie: not expose your data - # put behavior in the same place the data it needs person = Person.get(127)    # or Person[127] person.first_name   #=> Error: unable to call private method first_name  # Enforces you to maintain DRYness to some extent, ie: not leak # knowledge about your database structure, but put it in active record # model and expose your own nit-picked methods Person.where({ :first_name => ""John"" })    #=> Error: unable to call private method where Query DSL Generally to use #criteria DSL method, you need to include ActiveRecord::CriteriaHelper, but inside of your model code you don't need to do that. Examples (comment is in format [sql_query, params]): criteria(""person_id"") == 3                            # [person_id = :1, { ""1"" => 3 }] criteria(""person_id"") == criteria(""other_person_id"")  # [person_id = other_person_id, {}]  criteria(""number"") <= 3                               # [number < :1, { ""1"" => 3 }]  (!(criteria(""number"") <= 3))                          # [(NOT (number <= :1)) AND (number <> :2),   .and(criteria(""number"") != 5)                       #  { ""1"" => 3, ""2"" => 5 }]  criteria(""subject_id"").is_not_null                    # [(subject_id) IS NOT NULL, {}] Supported comparison operators: == != > >= < <= Supported logic operators: or | and & xor ^ not Supported is operators: is_true is_not_true is_false is_not_false is_unknown is_not_unknown is_null is_not_null Filtering with IN (..., ..., ...) query: criteria(""subject_id"").in([37, 42, 45]) Connection configuration Connection configuration is delegated to the database adapter library. So find it in the respective library's documentation. Known adapters. Connection Pool configuration (Experimental) Each distinct model class has its own associated connection pool. By default, pool capacity is 1 and timeout is 2 seconds. These settings can be changed on per model basis: class Person < ActiveRecord::Model   @@connection_pool_capacity = 25   @@connection_pool_timeout = 0.03  # seconds end Joins (TODO) This is still not implemented. class User < ActiveRecord::Model   has_many Post, criteria(""posts.author_id"") == criteria(""users.id"")   # ... end  class Post < ActiveRecord::Model   belongs_to User, criteria(""posts.author_id"") == criteria(""users.id"")   # ... end  # makes only one join query posts = Post.join(User).all posts.first.title      # => ""Hello world post"" posts.first.user.name  # => ""John Smith""  # makes 2 queries - 'select from users' and 'select from posts' user = User.all.first user.posts.first.title  # => ""Hello world post"" user.posts[1].title     # => ""Yet another post"" Known database adapters mysql_adapter.cr postgres_adapter.cr sqlite_adapter.cr Development After cloning the project: cd active_record.cr crystal deps   # install dependencies crystal spec   # run specs  Just use normal TDD development style. Creating your own database adapter So, lets create a postgres adapter. First lets init the repo: # This creates 'postgres_adapter' library and names directory as 'postgres_adapter.cr'. # Effectively giving you structure './postgres_adapter.cr/src/mysql_adapter.cr'. crystal init lib postgres_adapter postgres_adapter.cr  # And lets cd into it right away: cd postgres_adapter.cr/ Next feel free to edit the README to reflect the usage as you see fit. And check out if generated LICENSE file is OK. At this point it is a good idea to make an initial commit to git and push your changes to Github (or whatever git upstream you use). Before the next step you will need active_record bundled as a submodule at path modules/active_record, for that you do: git submodule add https://github.com/waterlink/active_record.cr modules/active_record You need to have it as a submodule to be able to require code from spec/ directory. Next step is to add appropriate integration test boilerplate: Integration spec: # integration/integration_spec.cr require ""./spec_helper"" Integration spec helper: # integration/spec_helper.cr require ""spec"" require ""../src/postgres_adapter"" require ""active_record/null_adapter""  # Register our adapter as 'null' adapter, effectively overriding what was # registered before by 'active_record': ActiveRecord::Registry.register_adapter(""null"", PostgresAdapter::Adapter)  # Cleanup database before and after each example: Spec.before_each do   PostgresAdapter::Adapter._reset_do_this_only_in_specs_78367c96affaacd7 end Spec.after_each do   PostgresAdapter::Adapter._reset_do_this_only_in_specs_78367c96affaacd7 end  # Require fake adapter and kick off the integration spec require ""../modules/active_record/spec/fake_adapter"" require ""../modules/active_record/spec/active_record_spec"" Integration test runner script: # bin/test #!/usr/bin/env bash  set -e  # Run unit tests crystal spec  # Compile integration tests that are shipped with crystal build integration/integration_spec.cr -o integration/integration_spec -D active_record_adapter ./integration/integration_spec --fail-fast -v $* Script for setting up the database: # script/setup-test-db.sh #!/usr/bin/env bash  # By providing 'PG_USER' and ('PG_PASS' or `PG_ASK_PASS`) you can # control how this script will authenticate to local pg server. PARAMS=""-U ${PG_USER:-postgres}"" [[ -z ""$PG_PASS"" ]] || PGPASSWORD=""$PG_PASS"" [[ -z ""$PG_ASK_PASS"" ]] || PARAMS=""$PARAMS -W""  psql $PARAMS -c ""create database crystal_pg_test"" psql $PARAMS -c ""create user crystal_pg with superuser password 'crystal_pg'""  psql $PARAMS crystal_pg_test -c ""drop table if exists people; create table people( id serial primary key, last_name varchar(50), first_name varchar(50), number_of_dependents int )"" psql $PARAMS crystal_pg_test -c ""drop table if exists something_else; create table something_else( id serial primary key, name varchar(50) )"" psql $PARAMS crystal_pg_test -c ""drop table if exists posts; create table posts( id serial primary key, title varchar(50), content text, created_at timestamp )"" Make all scripts executable: chmod a+x bin/test chmod a+x script/setup-test-db.sh And setup test db: script/setup-test-db.sh If you run tests at this point with bin/test, you should get compile error, since you have not implemented ActiveRecord::Adapter protocol. You can find it here. First make some stub implementation for this protocol: # src/postgres_adapter.cr require ""active_record"" require ""active_record/adapter""  module PostgresAdapter   class Adapter < ActiveRecord::Adapter     def self.build(table_name, primary_field, fields, register = true)       new(table_name, primary_field, fields, register)     end      def self.register(adapter)       adapters << adapter     end      def self.adapters       (@@_adapters ||= [] of self).not_nil!     end      getter table_name, primary_field, fields      def initialize(@table_name, @primary_field, @fields, register = true)       self.class.register(self)     end      def create(fields)       0     end      def get(id)       nil     end      def all       [] of Hash(String, ActiveRecord::SupportedType)     end      def where(query_hash : Hash)       all     end      def where(query : ActiveRecord::Query)       all     end      def update(id, fields)     end      def delete(id)     end      # Resets all data for all registered adapter instances of this kind     def self._reset_do_this_only_in_specs_78367c96affaacd7       adapters.each &_reset_do_this_only_in_specs_78367c96affaacd7     end      # Resets all data for current table (adapter instance)     def _reset_do_this_only_in_specs_78367c96affaacd7     end   end end Of course you need to include active_record as a dependency in your shard.yml: dependencies:   active_record:     github: waterlink/active_record.cr To install it, run shards or crystal deps. With this boilerplate you should have actually compiled integration test and it should be RED. Next step would be to follow TDD and make it green example-by-example while replacing stub implementation with real one. When you are done, congratulate yourself and push first release (git tag) to Github (or whatever git upstream you use). Don't forget to register your adapter: # At the end of src/postgres_adapter.cr ActiveRecord::Registry.register_adapter(""postgres"", PostgresAdapter::Adapter) Congratulations, you made it! Contributing Fork it ( https://github.com/waterlink/active_record.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors waterlink Oleksii Fedorov - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/waterlink/active_record.cr"	"Active Record pattern implementation"	"true"
"ORM/ODM Extensions"	"amethyst-model"	"https://github.com/drujensen/amethyst-model"	"ORM Model for the Amethyst Framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9"	"1"	"4"	"GitHub - drujensen/kemalyst-model: ORM Model for the Kemalyst Framework in the Crystal Language. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 9 Fork 4 drujensen/kemalyst-model Code Issues 0 Pull requests 0 Pulse Graphs ORM Model for the Kemalyst Framework in the Crystal Language. 76 commits 2 branches 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags adapter master Nothing to show Nothing to show New pull request Latest commit 31c88cd Jun 30, 2016 drujensen fix select to include tablename to avoid ambiguity Permalink Failed to load latest commit information. config rename to kemalyst-model and upgrade to 0.18.2 Jun 24, 2016 spec include the model when adapter is required Jun 24, 2016 src fix select to include tablename to avoid ambiguity Jun 30, 2016 .env rename to kemalyst-model and upgrade to 0.18.2 Jun 25, 2016 .gitignore remove .shards Nov 12, 2015 .travis.yml use docker with travis Jun 25, 2016 Dockerfile update to use crystal docker image Jun 25, 2016 LICENSE Initial Checkin Aug 22, 2015 README.md docker-compose.yml shard.lock rename to kemalyst-model and upgrade to 0.18.2 Jun 25, 2016 shard.yml rename to kemalyst-model and upgrade to 0.18.2 Jun 25, 2016 README.md kemalyst-model Kemalyst is a web framework written in the Crystal language. This project is to provide an ORM Model for Kemalyst. Installation Add this library to your projects dependencies along with the driver in your shard.yml. This can be used with any framework but was originally designed to work with kemalyst in mind. This library will work with kemal as well. dependencies:   # Kemalyst Model   kemalyst-model:     github: drujensen/kemalyst-model     branch: master    # Pick your database   sqlite3:     github: manastech/crystal-sqlite3     branch: master   mysql:     github: waterlink/crystal-mysql     branch: master   pg:     github: will/crystal-pg     branch: master    #... Next you will need to create a config/database.yml You can leverage environment variables using ${} syntax. mysql:   database: blog_test   host: 127.0.0.1   port: 3306   username: blog   password: ${DB_PASSWORD} pg:   database: ""${DATABASE_URL}"" sqlite:   database: config/blog_test.db Usage Here is an example using Kemalyst Model require ""kemalyst-model/adapter/mysql""  class Post < Kemalyst::Model   adapter mysql    sql_mapping({      name: [""VARCHAR(255)"", String],     body: [""TEXT"", String]   })  end require ""kemalyst-model/adapter/sqlite""  class Comment < Kemalyst::Model   adapter sqlite    # table name is set to post_comments and timestamps are disabled.   sql_mapping({      name: [""VARCHAR(255)"", String],      body: [""TEXT"", String]   }, ""post_comments"", false)  end Fields To define the fields for this model, you need to provide a hash with the name of the field as a Symbol and an array of the datbase type as a String and the type. This can include any other options that the database provides to you. 3 Fields are automatically created for you: id, created_at, updated_at. MySQL field definitions for id, created_at, updated_at   id INT NOT NULL AUTO_INCREMENT   # Your fields go here   created_at DATE   updated_at DATE    PRIMARY KEY (id)  DDL Built in Post.drop #drop the table  Post.create #create the table  Post.clear #truncate the table  Post.migrate #safe migration of fields. Fields will be renamed to `old_\*` before migrated.  Post.prune #clean up any fields not defined in model.  DANGER!!!! DML Find All posts = Post.all if posts   posts.each do |post|     puts post.name   end end Find One post = Post.find 1 if post   puts post.name end Insert post = Post.new post.name = ""Kemalyst Rocks!"" post.body = ""Check this out."" post.save Update post = Post.find 1 post.name = ""Kemalyst Really Rocks!"" post.save Delete post = Post.find 1 post.destroy puts ""deleted"" unless post Where The where clause will give you full control over your query. When using the all method, the SQL selected fields will always match the fields specified in the model. If you need different fields, consider creating a new model. Always pass in parameters to avoid SQL Injection. Use a symbol in your query i.e. :param for parameter replacement. Check out waterlink/crystal-mysql for more details. posts = Post.all(""WHERE name LIKE :name"", {""name"" => ""Joe%""}) if posts   posts.each do |post|     puts post.name   end end  # ORDER BY Example posts = Post.all(""ORDER BY created_at DESC"")  # JOIN Example posts = Post.all(""JOIN comments c ON c.post_id = post.id                    WHERE c.name = :name                    ORDER BY post.created_at DESC"",                    {""name"" => ""Joe""})  RoadMap Expose Transactions Contributing Fork it ( https://github.com/drujensen/kemalyst-model/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors drujensen drujensen - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/drujensen/amethyst-model"	"ORM Model for the Amethyst Framework"	"true"
"ORM/ODM Extensions"	"ohm-crystal"	"https://github.com/soveran/ohm-crystal"	"Object-hash mapping library for Redis"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"25"	"4"	"1"	"GitHub - soveran/ohm-crystal: Ohm for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 25 Fork 1 soveran/ohm-crystal Code Issues 0 Pull requests 0 Pulse Graphs Ohm for Crystal 10 commits 1 branch 0 releases Fetching contributors Crystal 80.5% Lua 19.4% Makefile 0.1% Crystal Lua Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit d48420b Jul 8, 2016 soveran Connect to Redis using a URL string Permalink Failed to load latest commit information. spec Add model generic to Finder and MutableCollection Jun 18, 2016 src Connect to Redis using a URL string Jul 8, 2016 CONTRIBUTING Initial commit May 22, 2016 LICENSE Initial commit May 22, 2016 README.md Update example to work May 23, 2016 makefile Initial commit May 22, 2016 shard.yml Initial commit May 22, 2016 README.md Ohm ॐ Object-hash mapping library for Redis. Description Ohm is a library for storing objects in Redis, a persistent key-value database. It has very good performance. Community Meet us on IRC: #ohm on freenode.net. Related projects These are libraries in other languages that were inspired by Ohm. Ohm for Ruby, created by soveran JOhm for Java, created by xetorthio Lohm for Lua, created by slact ohm.lua for Lua, created by amakawa Nohm for Node.js, created by maritz Redisco for Python, created by iamteem redis3m for C++, created by luca3m Ohmoc for Objective-C, created by seppo0010 Sohm for Lua, compatible with Twemproxy Articles and Presentations Simplicity How to Redis Redis and Ohm Ohm (Redis ORM) (Japanese) Redis and Ohm Ruby off Rails Data modeling with Redis and Ohm Getting started Install Redis. On most platforms it's as easy as grabbing the sources, running make and then putting the redis-server binary in the PATH. Once you have it installed, you can execute redis-server and it will run on localhost:6379 by default. Check the redis.conf file that comes with the sources if you want to change some settings. Add this to your application's shard.yml: dependencies:   ohm:     github: soveran/ohm-crystal Or you can grab the code from http://github.com/soveran/ohm-crystal. Connecting to a Redis database Ohm uses a lightweight Redis client called Resp. To connect to a Redis database, you will need to set an instance of Resp, with an URL of the form redis://:<passwd>@<host>:<port>/<db>, through the Ohm.redis= method, e.g. require ""ohm""  Ohm.redis = Resp.new(""redis://127.0.0.1:6379"")  Ohm.redis.call ""SET"", ""Foo"", ""Bar""  Ohm.redis.call ""GET"", ""Foo"" # => ""Bar"" Ohm defaults to a Resp connection to ""redis://127.0.0.1:6379"". The example above could be rewritten as: require ""ohm""  Ohm.redis.call ""SET"", ""Foo"", ""Bar""  Ohm.redis.call ""GET"", ""Foo"" # => ""Bar"" All Ohm models inherit the same connection settings from Ohm.redis. Models Ohm's purpose in life is to map objects to a key value datastore. It doesn't need migrations or external schema definitions. Take a look at the example below: Example class Party < Ohm::Model   attribute :name   reference :venue, Venue   set :participants, Person   counter :votes    index :name end  class Venue < Ohm::Model   attribute :name   collection :parties, Party, :venue_id end  class Person < Ohm::Model   attribute :name end All models have the id attribute built in, you don't need to declare it. This is how you interact with IDs: party = Party.create({""name"": ""Ohm Worldwide Party 2031""}) party.id # => ""1""  # Find an party by id party == Party[1] # => true  # Update an party party.update({""name"": ""Ohm Worldwide Party 2032""}) party.name # => ""Ohm Worldwide Party 2032""  # Trying to find a non existent party Party[2] # => nil  # Finding all the parties Party.all.to_a # => [<Party::0x102736570 name='Ohm Worldwide Conference 2032'>] This example shows some basic features, like attribute declarations and querying. Keep reading to find out what you can do with models. Attribute types Ohm::Model provides 4 attribute types: Ohm::Model.attribute, Ohm::Model.set Ohm::Model.list Ohm::Model.counter and 2 meta types: Ohm::Model.reference Ohm::Model.collection. attribute An attribute is just any value that can be stored as a string. In the example above, we used this field to store the party's name. If you want to store any other data type, you have to convert it to a string first. Be aware that Redis will return a string when you retrieve the value. set A set in Redis is an unordered list, with an external behavior similar to that of Ruby arrays, but optimized for faster membership lookups. It's used internally by Ohm to keep track of the instances of each model and for generating and maintaining indexes. list A list is like an array in Ruby. It's perfectly suited for queues and for keeping elements in order. counter A counter is like a regular attribute, but the direct manipulation of the value is not allowed. You can retrieve, increase or decrease the value, but you can not assign it. In the example above, we used a counter attribute for tracking votes. As the increment and decrement operations are atomic, you can rest assured a vote won't be counted twice. reference It's a special kind of attribute that references another model. Internally, Ohm will keep a pointer to the model (its ID), but you get accessors that give you real instances. You can think of it as the model containing the foreign key to another model. collection Provides an accessor to search for all models that reference the current model. Tracked keys Besides the provided attribute types, it is possible to instruct Ohm to track arbitrary keys and tie them to the object's lifecycle. For example: class Log < Ohm::Model   track :text    def append(msg)     key[""text""].call(""APPEND"", msg)   end    def tail(n = 100)     key[""text""].call(""GETRANGE"", -n.to_s, ""-1"")   end end  log = Log.create log.append(""hello\n"")  assert_equal ""hello\n"", log.tail  log.append(""world\n"")  assert_equal ""world\n"", log.tail(6) When the log object is deleted, the :text key will be deleted too. Note that the key is scoped to that particular instance of Log, so if log.id is 42 then the key will be Log:42:text. Persistence strategy The attributes declared with attribute are only persisted after calling save. Operations on attributes of type list, set and counter are possible only after the object is created (when it has an assigned id). Any operation on these kinds of attributes is performed immediately. This design yields better performance than buffering the operations and waiting for a call to save. For most use cases, this pattern doesn't represent a problem. If you are saving the object, this will suffice: if party.save   party.comments.add(Comment.create({ ""body"" => ""Wonderful party!"" })) end Working with Sets Given the following model declaration: class Party < Ohm::Model   attribute :name   set :attendees, Person end You can add instances of Person to the set of attendees with the add method: party.attendees.add(Person.create({ { ""name"" => ""Albert"" }))  # And now... party.attendees.each do |person|   # ...do what you want with this person. end Working with Lists Given the following model declaration: class Queue < Ohm::Model   attribute :name   list :people, Person end You can add instances of Person to the list of people with the push method: queue.people.push(Person.create({ { ""name"" => ""Albert"" }))  # And now... queue.people.each do |person|   # ...do what you want with this person. end Working with Counters Given the following model declaration: class Site < Ohm::Model   attribute :url   counter :visits end You can increment or decrement the visits: site.visits     #=> 0 site.visits(+1) #=> 1 site.visits(+1) #=> 2 site.visits(+5) #=> 7 site.visits(-4) #=> 3 site.visits     #=> 3 Associations Ohm lets you declare references and collections to represent associations. class Post < Ohm::Model   attribute :title   attribute :body   collection :comments, Comment, :post_id end  class Comment < Ohm::Model   attribute :body   reference :post, Post end After this, every time you refer to post.comments you will be talking about instances of the model Comment. If you want to get a list of IDs you can use post.comments.ids. References explained Doing a Ohm::Model.reference is actually just a shortcut for the following: # Redefining our model above class Comment < Ohm::Model   attribute :body   attribute :post_id   index :post_id    def post=(post)     self.post_id = post.id   end    def post     Post[post_id]   end end The net effect here is we can conveniently set and retrieve Post objects, and also search comments using the post_id index. Comment.find({ ""post_id"" => ""1"" }) Collections explained The reason a Ohm::Model.reference and a Ohm::Model.collection go hand in hand, is that a collection is just a macro that defines a finder for you, and we know that to find a model by a field requires an Ohm::Model.index to be defined for the field you want to search. Here's again the collection macro in use: collection :comments, Comment, :post_id When it expands, what you get is this method definition: def comments   Comment.find({ ""post_id"" => self.id }) end Both examples are equivalent. Indices An Ohm::Model.index is a set that's handled automatically by Ohm. For any index declared, Ohm maintains different sets of objects IDs for quick lookups. In the Party example, the index on the name attribute will allow for searches like Party.find({ ""name"" => ""some value"" }). Note that the methods Ohm::Model::Set#find and Ohm::Model::Set#except need a corresponding index in order to work. Finding records You can find a collection of records with the find method: # This returns a collection of users with the username ""Albert"" User.find({ ""username"" => ""Albert"" }) Filtering results # Find all users from Argentina User.find({ ""country"" => ""Argentina"" })  # Find all active users from Argentina User.find({ ""country"" => ""Argentina"", { ""status"" => ""active"" })  # Find all active users from Argentina and Uruguay User.find({ ""status"" => ""active"" }).combine({ ""country"" => [""Argentina"", ""Uruguay""] })  # Find all users from Argentina, except those with a suspended account. User.find({ ""country"" => ""Argentina"").except({ ""status"" => ""suspended"" })  # Find all users both from Argentina and Uruguay User.find({ ""country"" => ""Argentina"").union({ ""country"" => ""Uruguay"" }) Note that calling these methods results in new sets being created on the fly. This is important so that you can perform further operations before reading the items to the client. For more information, see SINTERSTORE, SDIFFSTORE and SUNIONSTORE. Uniques Uniques are similar to indices except that there can only be one record per entry. The canonical example of course would be the email of your user, e.g. class User < Ohm::Model   attribute :email   unique :email end  u = User.create({ ""email"" => ""foo@bar.com"" }) u == User.with(""email"", ""foo@bar.com"") # => true  User.create({ ""email"" => ""foo@bar.com"" }) # => raises Ohm::UniqueIndexViolation Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/soveran/ohm-crystal"	"Object-hash mapping library for Redis"	"true"
"ORM/ODM Extensions"	"redis-tsv.cr"	"https://github.com/maiha/redis-tsv.cr"	"Import and export data from Redis in TSV format"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"1"	"1"	"GitHub - maiha/redis-tsv.cr: import and export data from Redis in TSV format Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 3 Fork 1 maiha/redis-tsv.cr Code Issues 0 Pull requests 0 Pulse Graphs import and export data from Redis in TSV format 24 commits 1 branch 2 releases Fetching contributors Crystal 97.5% Makefile 2.5% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.2.1 v0.2.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE Makefile README.md shard.yml README.md redis-tsv import and export data from Redis in TSV format % redis-tsv export > backup.tsv % redis-tsv import backup.tsv % redis-tsv keys > keys.list Crystal: 0.18.0 Binary: https://github.com/maiha/redis-tsv.cr/releases Benchmark Bench: import, export and keys with count option (default: 1000) COUNT Time QPS Unix Command import 1000 21.9 sec 457567 redis-tsv import -c 1000 10M.tsv 10000 19.6 sec 509422 redis-tsv import -c 10000 10M.tsv 100000 16.2 sec 617951 redis-tsv import -c 100000 10M.tsv export 1000 465.1 sec 21500 redis-tsv export -c 1000 > 10M.tsv 10000 90.9 sec 110002 redis-tsv export -c 10000 > 10M.tsv 100000 17.2 sec 582429 redis-tsv export -c 100000 > 10M.tsv keys 1000 10.9 sec 915983 redis-tsv keys -c 1000 > keys.list 10000 8.9 sec 1124260 redis-tsv keys -c 10000 > keys.list 100000 7.6 sec 1311586 redis-tsv keys -c 100000 > keys.list CPU: Intel(R) Core(TM) i7-4800MQ CPU @ 2.70GHz TSV: 10M.tsv (10M entries where key = val = ""%08d"") 00000001        00000001 00000002        00000002 ... 10000000        10000000  TODO keys should use SCAN rather than KEYS * import should set data by degrees not at once export should use SCAN rather than KEYS * add spec about bulk operations Installation needs Crystal to compile crystal deps  # for the first time only make cp bin/redis-tsv ~/bin/ Usage Bulk operations import redis-tsv import foo.tsv redis-tsv -d, import foo.csv  export redis-tsv export > foo.tsv redis-tsv -d, export > foo.csv  keys redis-tsv keys > keys.list  options -c grows performance, but uses much memory and locks server. redis-tsv export -c 1000  > foo.tsv  # 1m13s (default) redis-tsv export -c 10000 > foo.tsv  # 7m28s (6 times faster)  (entry count: 10M) information util commands for easy access to INFO count : show a number of keys % redis-tsv count 10000000  version : show the redis version % redis-tsv version 3.0.6  role : show the role of replication % redis-tsv role master  ping : execute PING command % redis-tsv ping PONG  info (INFO result itself) % redis-tsv info # Server redis_version:3.0.6 redis_git_sha1:00000000 ...  Test CAUTION: This spec flushes your redis db on localhost:6379. % crystal spec  Contributing Fork it ( https://github.com/maiha/redis-tsv.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors [maiha] maiha - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/maiha/redis-tsv.cr"	"Import and export data from Redis in TSV format"	"true"
"Package Management"	"shards"	"https://github.com/ysbaddaden/shards"	"Dependency manager for the Crystal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"210"	"16"	"28"	"GitHub - crystal-lang/shards: Dependency manager for the Crystal language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 210 Fork 28 crystal-lang/shards Code Issues 20 Pull requests 1 Pulse Graphs Dependency manager for the Crystal language 176 commits 3 branches 14 releases 12 contributors Crystal 92.9% Groff 5.1% Makefile 1.7% HTML 0.3% Crystal Groff Makefile HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/registry fix-ivars master Nothing to show v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.0 v0.3.1 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 15a24d9 Jul 4, 2016 songjiayang committed with ysbaddaden upgrade shard template for manastech/webmock.cr (#111) Permalink Failed to load latest commit information. bin Initial commit: parse shard.yml file May 20, 2015 src upgrade shard template for manastech/webmock.cr (#111) Jul 4, 2016 test Fix: test suite broke under Crystal 0.17.x May 27, 2016 .gitignore Integration tests for commands Sep 11, 2015 .travis.yml Travis: no need to tap manastech/crystal anymore Jan 16, 2016 CHANGELOG.md Release: v0.6.3 negligible shrew May 5, 2016 LICENSE Release: v0.5.0 defensive jackrabbit Sep 28, 2015 Makefile Build releases in Vagrant boxes (LXC) Feb 3, 2016 README.md Use existing version of minitest in usage example Mar 20, 2016 SPEC.md Fix spelling mistake in SPEC.md Apr 5, 2016 VERSION Release: v0.6.3 negligible shrew May 5, 2016 Vagrantfile Build releases in Vagrant boxes (LXC) Feb 3, 2016 shard.lock Fix: test suite broke under Crystal 0.17.x May 27, 2016 shard.yml Release: v0.6.3 negligible shrew May 5, 2016 README.md Shards Dependency manager for the Crystal language. Usage Crystal applications and libraries are expected to have a shard.yml file at their root looking like this: name: shards version: 0.1.0  dependencies:   openssl:     github: datanoise/openssl.cr     branch: master  development_dependencies:   minitest:     git: https://github.com/ysbaddaden/minitest.cr.git     version: ~> 0.3.1  license: MIT When libraries are installed from Git repositories, the repository is expected to have version tags following the semver format, prefixed with a v. Examples: v1.2.3 or v2.0.0-rc1. Please see the SPEC for more details about the shard.yml format. Install Shards is now distributed with Crystal itself (at least in the Homebrew and Debian/Ubuntu packages). You can invoke it with crystal deps. You may download a statically compiled 64bit executable of Shards for Linux or OS X from the releases page and install it somewhere into your PATH, this version will take precedence over the bundled version. Alternatively you may download a source tarball from the same page (or clone the repository) then run make —or make release for an optimized build— and copy the newly generated bin/shards somewhere into your PATH. A good place is /usr/local/bin for example. You are now ready to create a shard.yml for your projects (see the SPEC). Simply run shards install to install your dependencies, or shards --help to list the other commands and their options. Happy Hacking! Requirements These requirements are only for compiling Shards. Crystal >= 0.10.0. Please refer to http://crystal-lang.org/docs/installation for instructions for your operating system. libyaml On Debian/Ubuntu Linux you may install the libyaml-dev package. On Mac OS X you may install it using homebrew with brew install libyaml then make sure to have /usr/local/lib in your LIBRARY_PATH environment variable (eg: export LIBRARY_PATH=""/usr/local/lib:$LIBRARY_PATH""). Please adjust the path per your Homebrew installation. License Licensed under the Apache License, Version 2.0. See LICENSE for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ysbaddaden/shards"	"Dependency manager for the Crystal"	"true"
"Project generators"	"generate"	"https://github.com/generate-cr/generate"	"A tool for generating whole Crystal project structure, or any part of it during lifetime of project"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"17"	"4"	"1"	"GitHub - generate-cr/generate: Generic tool for generating whole Crystal project structure, or any part of it during lifetime of project Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 17 Fork 1 generate-cr/generate Code Issues 2 Pull requests 0 Pulse Graphs Generic tool for generating whole Crystal project structure, or any part of it during lifetime of project 16 commits 1 branch 0 releases Fetching contributors Crystal 90.8% Shell 9.2% Crystal Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 2336cf1 Apr 12, 2015 waterlink Include library.template by default Permalink Failed to load latest commit information. libs Add core Apr 11, 2015 script spec src .gitignore .travis.yml Generatefile LICENSE Projectfile README.md README.md generate.cr Generic tool for generating whole Crystal project structure, or any part of it during lifetime of project. Installation curl https://raw.githubusercontent.com/generate-cr/generate/master/script/install.sh | bash  It will create ~/.generate-cr/bin/generate-cr, which you probably want to add to your PATH Usage generate.cr new library example  Example project structure: $ tree example -a example ├── .gitignore ├── libs │   └── .keep ├── LICENSE ├── Projectfile ├── README.md ├── spec │   ├── example │   │   └── .keep │   ├── example_spec.cr │   └── spec_helper.cr ├── src │   ├── example │   │   └── version.cr │   └── example.cr └── .travis.yml  Development TODO: Write instructions for development Contributing Fork it ( https://github.com/generate.cr/generate/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors waterlink Oleksii Fedorov - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/generate-cr/generate"	"A tool for generating whole Crystal project structure, or any part of it during lifetime of project"	"true"
"Queue"	"crystal-resque-client"	"https://github.com/pine/crystal-resque-client"	"Simple Resque queue client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"1"	"0"	"GitHub - pine/crystal-resque-client: Simple Resque queue client for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 2 Fork 0 pine/crystal-resque-client Code Issues 0 Pull requests 0 Pulse Graphs 🚑 Simple Resque queue client for Crystal 11 commits 1 branch 2 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.1 v0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md crystal-resque-client Simple Resque queue client for Crystal inspired by go-resque. Installation Add this to your application's shard.yml: dependencies:   resque_client:     github: pine/crystal-resque-client     branch: master   redis:     github: stefanwille/crystal-redis     version: ~> 1.2.1 Usage require ""redis"" require ""resque_client""  redis = Redis.new enqueuer = Resque::Client::Enqueuer.new(redis)  enqueuer.enqueue(""Class"", ""arg1"", 1000, true) Contributing Fork it ( https://github.com/pine/crystal-resque-client/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors pine613 Pine Mizune - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pine/crystal-resque-client"	"Simple Resque queue client"	"true"
"Queue"	"sidekiq.cr"	"https://github.com/mperham/sidekiq.cr"	"Simple, efficient job processing"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"225"	"20"	"6"	"GitHub - mperham/sidekiq.cr: Simple, efficient job processing for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 225 Fork 6 mperham/sidekiq.cr Code Issues 0 Pull requests 0 Wiki Pulse Graphs Simple, efficient job processing for Crystal http://sidekiq.org 136 commits 4 branches 1 release Fetching contributors Crystal 56.0% CSS 17.7% HTML 12.5% JavaScript 12.4% Ruby 1.1% Makefile 0.3% Crystal CSS HTML JavaScript Ruby Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0_18 argument_processing json_mapping master Nothing to show v0.5.0 Nothing to show New pull request Latest commit fe51f6b Jul 13, 2016 mperham Implement sidekiq_options, fixes #3 Permalink Failed to load latest commit information. bench Optimize log formatter, no perf diff noticed :-( Jun 23, 2016 examples Implement sidekiq_options, fixes #3 Jul 13, 2016 spec Implement sidekiq_options, fixes #3 Jul 13, 2016 src Implement sidekiq_options, fixes #3 Jul 13, 2016 .gitignore Commit fixtures for Redis 3.2, fixes #18 Jun 13, 2016 .travis.yml debug Jun 13, 2016 Changes.md polish Jul 11, 2016 LICENSE Initial commit May 15, 2016 Makefile tag and release Jul 11, 2016 README.md Even better memory usage! Jun 24, 2016 shard.yml Move deps back upstream Jul 8, 2016 README.md Sidekiq.cr Sidekiq is a well-regarded background job framework for Ruby. Now we're bringing the awesomeness to Crystal, a Ruby-like language. Why? To give you options. Ruby is friendly and flexible but not terribly fast. Crystal is statically-typed, compiled and very fast but retains a similar syntax to Ruby. Rough, initial benchmarks on OSX 10.11.5: Runtime RSS Time Throughput MRI 2.3.0 50MB 21.3 4,600 jobs/sec MRI/hiredis 55MB 19.2 5,200 jobs/sec Crystal 0.18.4 12MB 5.9 16,900 jobs/sec If you have jobs which are CPU-intensive or require very high throughput, Crystal is an excellent alternative to native Ruby extensions. It compiles to a single executable so deployment is much easier than Ruby. Getting Started Please see the wiki for in-depth documentation and how to get started using Sidekiq.cr in your own app. Upgrade? If you use and like this project, please let me know. If demand warrants, I may port Sidekiq Pro and Enterprise functionality to Crystal for sale. Help wanted See the issues for chores and other ideas to help. Things that do not exist and probably won't ever: Support for daemonization, pidfiles, log rotation - use Upstart/Systemd Delayed extensions - too dynamic for Crystal The Ruby and Crystal versions of Sidekiq must remain data compatible in Redis. Both versions should be able to create and process jobs from each other. Their APIs are not and should not be identical but rather idiomatic to their respective languages. Author Mike Perham, http://www.mikeperham.com, @mperham / @sidekiq Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mperham/sidekiq.cr"	"Simple, efficient job processing"	"true"
"Search"	"soegen"	"https://github.com/Ragmaanir/soegen"	"Elasticsearch client for Crystal similar to the stretcher gem for ruby"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6"	"1"	"1"	"GitHub - Ragmaanir/soegen: Elasticsearch client library for crystal, similar to rubys stretcher gem Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 6 Fork 1 Ragmaanir/soegen Code Issues 0 Pull requests 0 Pulse Graphs Elasticsearch client library for crystal, similar to rubys stretcher gem 23 commits 1 branch 8 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2 remove list delete Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml CHANGELOG LICENSE README.md shard.yml README.md soegen ElasticSearch client for crystal based on the Stretcher gem for ruby. Compatibility Tests pass with crystal 0.18.0 and ES 2.3.3. Installation Add this to your application's shard.yml: dependencies:   soegen:     github: ragmaanir/soegen Usage require ""soegen""  server = Soegen::Server.new # defaults to localhost:9200 idx = server.index(""test"")  assert !idx.exists?  idx.create  assert idx.exists?  t = idx.type(""events"")  t.post({data: ""1337""})  idx.refresh  results = t.search({query: {match: {data: ""1337""}}})  assert results.total_count == 1 assert results.hits.first[""data""] == ""1337"" For more documentation you can also look at the tests, they are pretty easy to understand. TODO Indexes and IndexTypes: CRUD Index documents Index documents in bulk Search for documents and return hit array Log requests (as curl commands) General callback for each request (for e.g. instrumentation) Analyzer API Alias API Tests for child documents Missing a feature? Found a bug? Need more documentation? Please open an issue on this project. Contributing Fork it ( https://github.com/ragmaanir/soegen/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors Ragmaanir - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Ragmaanir/soegen"	"Elasticsearch client for Crystal similar to the stretcher gem for ruby"	"true"
"Task management"	"crake"	"https://github.com/MakeNowJust/crake"	"Rake-like build utility library. It is just a library, so it does not provide CLI"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"24"	"1"	"2"	"GitHub - MakeNowJust/crake: CRystal mAKE library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 24 Fork 2 MakeNowJust/crake Code Issues 0 Pull requests 0 Pulse Graphs CRystal mAKE library 39 commits 2 branches 2 releases Fetching contributors Crystal 99.1% C 0.9% Crystal C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix/crystal-0.12.0 master Nothing to show v1.0.1 v1.0.0 Nothing to show New pull request Latest commit fa394db Apr 4, 2016 MakeNowJust Revert ""Version specified test on travis"" … This reverts commit 359f65f. Permalink Failed to load latest commit information. example `crystal make` is awesome Jan 13, 2016 spec Support Crystal v0.12.0 Feb 17, 2016 src Fix to keep ARGV Dec 10, 2015 .gitignore Initialize CRake project Nov 23, 2015 .travis.yml Revert ""Version specified test on travis"" Apr 4, 2016 LICENSE.md Add license file Nov 23, 2015 README.md `crystal make` is awesome Jan 13, 2016 make `crystal make` is awesome Jan 13, 2016 make.cr `crystal make` is awesome Jan 13, 2016 shard.yml Add description Jan 22, 2016 README.md CRake A CRystal mAKE library. Just a Library It is not a tool, just a library. It does not provide a CLI tool like crake. You do learn the library only, not need to learn some tool except for crystal command because it is the library of Crystal. I believe this approach is better than another build command. It makes your build script powerful and flexible. And, it makes so possible to integrate another library. Simple is the best. This library is inspired by Rake, gulp, tape and more. Thanks those libraries and tools ;) Features Looks like Rake. There are task, file, rule and namespace in this library. Use the syntax of Crystal. It's smart. Support concurrent build by default. Installation Add this to your application's shard.yml: development_dependencies:   crake:     github: MakeNowJust/crake Usage Put this code into make.cr: require ""crake/global""  task ""hello # say hello"" do   puts ""Hello, CRake World!"" end then you can run: $ ln -s ./make.cr ./make $ crystal make -- hello Hello, CRake World! If you want more information, you can run such a command: $ crystal make -- hello -v  INFO   (2015-11-20 12:34:20 +0000) ~~> ""##toplevel##"" starts  INFO   (2015-11-20 12:34:20 +0000) ~~> ""hello"" starts Hello, CRake World!  INFO   (2015-11-20 12:34:20 +0000) ~~> ""hello"" finished  INFO   (2015-11-20 12:34:20 +0000) ~~> ""##toplevel##"" finished and you can see example/ directory. Development $ crystal make -- spec TODO Add task, rule, file and namespace. Add FileList and utilities. Support concurrent build (default.) Support colored output (default.) Write more documents. Add more specs and examples. Contributing Fork it (https://github.com/MakeNowJust/crake/fork) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors @MakeNowJust TSUYUSATO Kitsune - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MakeNowJust/crake"	"Rake-like build utility library. It is just a library, so it does not provide CLI"	"true"
"Task management"	"lake"	"https://github.com/adlerhsieh/lake"	"Rake-like task management for Crystal programs"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6"	"1"	"0"	"GitHub - adlerhsieh/lake: Recursive tasks managed easily Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 6 Fork 0 adlerhsieh/lake Code Issues 0 Pull requests 0 Pulse Graphs Recursive tasks managed easily 67 commits 2 branches 6 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags argument master Nothing to show 0.2.0 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore update ignore Oct 27, 2015 .travis.yml LICENSE README.md contributing.md lake shard.yml README.md Lake Rake is productive, but we want it faster. Lake is a rake-inspired tool in Crystal-lang for managing you tasks. Tasks are automatically built & run through the command line interface. It take advantages of the performance of Crystal and the utility of rake, helping you run recursive tasks in amazing speed. Features Automatically building & running tasks. Managing taks in Lakefile or .lake directory. Use it with cron and other automation tools for more efficient workflows. Requirement Crystal >= 0.9.0. If you're on Mac OS X installing with Homebrew, Lake will install Crystal for you. Installtion System Available Methods All Manual Installation OSX Homebrew Ubuntu / Debian Work in progress Windows Not Supported Mac OS X brew tap adlerhsieh/lake brew update brew install lake  Installtion details Manual Installation Install Crystal. Download the latest lake executable. Move the executable to one of your PATH directory, e.g. /usr/local/bin. Run lake -v and crystal -v to see if the installation is successful. Usage Create your first task Create a Lakefile in any project directory: Task.hello           # This is task name   puts ""hello world"" # This is task content This creates a task named hello. Run: lake hello  It compiles and build a task file for hello task. You should see hello world on screen and that's it. Write any script you want and run it this way. Writing mulitple tasks in a single file Task.salute   puts ""salute!""  Task.write   File.write(""./story.txt"", ""Mary has a little lamb."") Each Task forms a block that runs the code inside. It is not a Crystal block so it allows defining a class and method in the code as in normal Crystal context. Dependencies If you're using dependencies, require them in the task block like: Task.query   require ""crystal-mysql"" Lake shares dependencies with your project, so run lake command in the project root directory where libs and .shards directory exist. Second time is faster The first time you run a task is a bit slower, but the second time is blazingly fast. It is because Crystal is a compiled language, so it is necessary to build a task before running it. Lake automatically checks for change in all tasks and only build tasks that have any change. Work with multiple files If you have many tasks in a project, separate them in different files. In addition to Lakefile, you can add any .cr file in .lake directory. All .cr files in the directory will be considered lake tasks. Options Short Flag Long Flag Description -b --build Builds all tasks -r --rebuild Rebuilds all tasks -h --help Displays help messages -v --version Displays current version Progress 0.1.0 Allow processing & executing tasks in .lake directory Allow processing & executing Lakefile Allow Lakefile and .lake directory generation Brew installation Usage & Instructions 0.2.0 Remove failed build task in tasks directory Allow executing multiple tasks in one command Remove reduntant -t when executing command Setting up ci service Automatically install Crystal before installing Lake Allow shards support in .lake Allow dependency requirement Manual installation 0.3.0 Argument support for tasks Allow symbols except ""-"" in task name, all separated by a single blank space DSL support that allows putting multiple tasks in a single task Allow looking for other Lakefiles if not in current directory Allow global Lakefile and -g option 1.0.0 apt-get installation Unit Test Acceptance Test Official website or something better than README as introduction (gh-pages or .org) In the future Auto-detect non-character in task name and send warning Allow checking if pwd is in a git repo, crystal project, and has a Lakefile. Contributing Read the Contributing guide Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/adlerhsieh/lake"	"Rake-like task management for Crystal programs"	"true"
"Template Engine"	"Bunny"	"https://github.com/samsheff/Bunny"	"A simple HTML templating language for Crystal, same syntax as erb"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9"	"2"	"0"	"GitHub - samsheff/Bunny: A simple HTML templating language for Crystal, same syntax as erb Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 9 Fork 0 samsheff/Bunny Code Issues 0 Pull requests 0 Pulse Graphs A simple HTML templating language for Crystal, same syntax as erb 5 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 7daea03 May 2, 2015 samsheff Add Notice about ECR Permalink Failed to load latest commit information. example src .gitignore README.md README.md Bunny A simple HTML templating language for Crystal Important! Crystal has this built in, look here for more info: https://github.com/manastech/crystal/blob/master/CHANGELOG.md#020-2014-06-24 It uses the same syntax as ERB in ruby, cannot execute code in the view (yet). All variables must be in the locals hash and the value of the key replaces the code in the view. See the example project in ./example for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/samsheff/Bunny"	"A simple HTML templating language for Crystal, same syntax as erb"	"true"
"Template Engine"	"crustache"	"https://github.com/MakeNowJust/crustache"	"for Crystal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"22"	"3"	"0"	"GitHub - MakeNowJust/crustache: {{Mustache}} for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 22 Fork 0 MakeNowJust/crustache Code Issues 0 Pull requests 0 Pulse Graphs {{Mustache}} for Crystal 💎 https://mustache.github.io 135 commits 5 branches 18 releases Fetching contributors Crystal 99.4% HTML 0.6% Crystal HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags crystal-0.14 feature/crystal-0-17-0 master version/2.2.2 version/2.2.3 Nothing to show v2.2.4 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.1.0 v2.0.1 v2.0.0 v1.0.2 v1.0.1 v1.0.0 v0.3.2 v0.3.1 v0.3.0 v0.2.1 v0.2.0 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 61cc629 May 19, 2016 MakeNowJust Release v2.2.4 Permalink Failed to load latest commit information. spec Correct spec May 12, 2016 src Release v2.2.4 May 19, 2016 .gitignore Don't use shard.lock Dec 26, 2015 .gitmodules add submodule for testing Jul 10, 2015 .travis.yml Fix language to crystal Jul 15, 2015 CHANGELOG.md Release v2.2.4 May 19, 2016 LICENSE crystal init and fix README.md Jul 8, 2015 README.md Fix shard name Feb 13, 2016 shard.yml Release v2.2.4 May 19, 2016 README.md crustache crustache is the implementation of mustache logic-less templates. This library implemated mustache's spec v1.1.2+λ. Installation Add this to your application's shard.yml: dependencies:   crustache:       github: MakeNowJust/crustache Usage require ""crustache""  # Parse a mustache template template = Crustache.parse ""Hello {{Name}} World!""  # Make a model model = {""Name"" => ""Crustache""}  # Render! puts Crustache.render template, model #=> Hello Crustache World! Development This library's specs are put in spec directory. They can run by crystal spec ./spec/spec.cr command. Contributing Fork it (https://github.com/MakeNowJust/crustache/fork) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors @MakeNowJust TSUYUSATO Kitsune - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MakeNowJust/crustache"	"for Crystal"	"true"
"Template Engine"	"{{Mustache}}"	"https://mustache.github.io/"	"for Crystal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"814"	"62"	"172"	"GitHub - mustache/mustache.github.com: The {{official}} website Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 62 Star 814 Fork 172 mustache/mustache.github.com Code Issues 2 Pull requests 6 Pulse Graphs The {{official}} website http://mustache.github.io/ 171 commits 4 branches 0 releases 39 contributors HTML 48.2% JavaScript 33.2% Ruby 8.5% CSS 8.4% CoffeeScript 1.7% HTML JavaScript Ruby CSS CoffeeScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master pr/72 redesign-js redesign Nothing to show Nothing to show New pull request Latest commit 1716dd0 Jun 8, 2016 locks Merge pull request #81 from def-/master … Add Nim to languages Permalink Failed to load latest commit information. _data Add Nim to languages Jun 8, 2016 _includes Rename demo template. Feb 5, 2014 docs updated Apr 18, 2010 extras Remove unused coffeescript lib. Feb 5, 2014 .gitignore We’re gonna pages this thing. Feb 5, 2014 CONTRIBUTING.md Add CONTRIBUTING. Dec 26, 2014 Gemfile We’re gonna pages this thing. Feb 5, 2014 Gemfile.lock Bump lockfile to current github-pages version Feb 7, 2015 LICENSE.md Add MIT license for docs Jul 17, 2014 README.md That didn't look as good as I thought it would. Feb 5, 2014 Rakefile Add man task to the :build namespace. Feb 5, 2014 _config.yml Let's use Redcarpet! Apr 15, 2014 burt.css Fixes #39 Jul 22, 2014 index.html bugfix: on https demo link wasnt working Dec 29, 2014 mustache.1.html Update to latest manpages. Feb 5, 2014 mustache.1.ron.html Add redirects for *.ron.html URLs. Feb 7, 2015 mustache.5.html Added the keywords ""imports"", ""nested"" and ""subtemplates"" to the docs… May 27, 2015 mustache.5.ron.html Add redirects for *.ron.html URLs. Feb 7, 2015 tom.coffee Show errors when erroneous JSON is provided Nov 8, 2011 tom.js Update coffee rake task and generated js. Feb 5, 2014 README.md {{ mustache }} Logic-less templates. http://mustache.github.io Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mustache/mustache.github.com"	"for Crystal"	"true"
"Template Engine"	"Kilt"	"https://github.com/jeromegn/kilt"	"Abstraction layer for template engines."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"22"	"3"	"4"	"GitHub - jeromegn/kilt: Generic template interface for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 22 Fork 4 jeromegn/kilt Code Issues 0 Pull requests 0 Pulse Graphs Generic template interface for Crystal 30 commits 1 branch 8 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.1 v0.2.0 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit adf515f May 28, 2016 jeromegn Merge pull request #9 from fernandes/patch-1 … Update shard.yml Permalink Failed to load latest commit information. spec Rebase paths and add Temel as template engine Feb 16, 2016 src bump version Mar 21, 2016 .gitignore Initial commit Feb 14, 2016 .travis.yml Initial commit Feb 14, 2016 LICENSE Initial commit Feb 14, 2016 README.md Add f/temel as template engine. Feb 16, 2016 shard.yml Update shard.yml May 28, 2016 README.md Kilt Generic templating interface for Crystal. Goal Simplify developers' lives by abstracting template rendering for multiple template languages. Supported out of the box Language File extensions Required libraries Maintainer ECR .ecr none (part of the stdlib) Mustache .mustache crustache @MakeNowJust Slang .slang slang @jeromegn Temel .temel temel @f See also: Registering your own template engine. Installation Add this to your application's shard.yml: dependencies:   kilt:     github: jeromegn/kilt    # Any other template languages Crystal shard Usage Kilt essentially adds two macros Kilt.embed and Kilt.file, the code is really simple. Add template language dependencies, as listed in the support table above. Both macros take a filename and a io_name (the latter defaults to ""__kilt_io__"") Example require ""kilt""  # For slang, add: require ""kilt/slang""  # With a Class  class YourView   Kilt.file(""path/to/template.ecr"") # Adds a to_s method end puts YourView.new.to_s # => <compiled template>   # Embedded  str = Kilt.render ""path/to/template.slang""  # or  str = String.build do |__kilt_io__|   Kilt.embed ""path/to/template.slang"" end  puts str # => <compiled template> Registering your own template engine Use Kilt.register_engine(extension, embed_command) macro: require ""kilt""  module MyEngine   macro embed(filename, io_name)     # ....   end end  Kilt.register_engine(""myeng"", MyEngine.embed) This can be part of your own my-engine library: in this case it should depend on kilt directly, or this could be a part of adapter library, like: kilt-my-engine, which will depend on both kilt and my-engine. Contributing Please contribute your own ""adapter"" if you create a template language for Crystal that's not yet supported here! Fork it ( https://github.com/jeromegn/kilt/fork ) Create your feature branch (git checkout -b my-awesome-template-language) Commit your changes (git commit -am 'Add my-awesome-template-language') Push to the branch (git push origin my-awesome-template-language) Create a new Pull Request Contributors jeromegn Jerome Gravel-Niquet - creator, maintainer waterlink Oleksii Fedorov MakeNowJust TSUYUSATO Kitsune f Fatih Kadir Akın Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jeromegn/kilt"	"Abstraction layer for template engines."	"true"
"Template Engine"	"Slang"	"https://github.com/jeromegn/slang"	"Lightweight, terse, templating language inspired by Ruby's Slim."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"37"	"3"	"4"	"GitHub - jeromegn/slang: Slim-inspired templating language for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 37 Fork 4 jeromegn/slang Code Issues 1 Pull requests 0 Pulse Graphs Slim-inspired templating language for Crystal 45 commits 1 branch 14 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.3.1 v1.3.0 v1.2.0 v1.1.0 v1.0.1 v1.0.0 v0.2.0 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 53f569b Jun 20, 2016 jeromegn fix for crystal 0.18.2 Permalink Failed to load latest commit information. examples crystal tool format Mar 13, 2016 spec removed useless comments and files Jun 20, 2016 src fix for crystal 0.18.2 Jun 20, 2016 .gitignore no more relying on ECR Feb 8, 2016 .travis.yml playing around, first commit Feb 7, 2016 LICENSE playing around, first commit Feb 7, 2016 README.md bump version Apr 6, 2016 shard.yml Dynamic classes support (#7) Jun 20, 2016 README.md Slang Lightweight, terse, templating language for Crystal. Installation Add this to your application's shard.yml: dependencies:   slang:     github: jeromegn/slang Usage Preferred: use Kilt Kilt is included as a dependency for this project. It should help integrating non-ECR template engines. require ""kilt/slang""  Kilt.render(""path/to/file.slang"") #=> <compiled template>  Example with Kemal (includes Kilt): require ""kilt/slang""  get ""/"" do   render ""path/to/file.slang"" end Without Kilt String.build do |str|   Slang.embed(""path/to/file.slang"", ""str"") end Syntax doctype html html   head     title This is a title   body     span#some-id.classname       #hello.world.world2         - some_var = ""hello world haha""         span           span data-some-var=some_var two-attr=""fun"" and a #{p(""hello"")}           span             span.deep_nested               = Process.pid               | text node               ' other text node         span.alongside pid=Process.pid           custom-tag#with-id pid=""#{Process.pid}""             - [""ah"", ""oh""].each do |s|               span = s      #amazing-div some-attr=""hello"" Given the context: some_var = ""hello"" strings = [""ah"", ""oh""] Compiles to HTML: <!DOCTYPE html> <html>   <head>     <title>This is a title</title>   </head>   <body>     <span id=""some-id"" class=""classname"">       <div id=""hello"" class=""world world2"">         <span>           <span data-some-var=""hello world haha"" two-attr=""fun"">and a hello</span>           <span>             <span class=""deep_nested"">               #{Process.pid}               text node               other text node             </span>           </span>         </span>         <span class=""alongside"" pid=""#{Process.pid}"">           <custom-tag id=""with-id"" pid=""#{Process.pid}"">             <span>ah</span>             <span>oh</span>           </custom-tag>         </span>       </div>     </span>     <div id=""amazing-div"" some-attr=""hello""></div>   </body> </html> TODO Fix known limitations More tests Website Documentation Contributing Fork it ( https://github.com/jeromegn/slang/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors jeromegn Jerome Gravel-Niquet - creator, maintainer kRaw1er Dmitry Neveshkin Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jeromegn/slang"	"Lightweight, terse, templating language inspired by Ruby's Slim."	"true"
"Template Engine"	"temel"	"https://github.com/f/temel"	"Extensible HTML::Builder alternative for Crystal, supports custom tag definitions"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"28"	"4"	"0"	"GitHub - f/temel: Extensible Markup DSL for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 28 Fork 0 f/temel Code Issues 1 Pull requests 0 Pulse Graphs Extensible Markup DSL for Crystal 6 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec Extend Syntax and add examples to Readme. Dec 24, 2015 src Make code shorter. Jan 5, 2016 .gitignore Initial commit Dec 18, 2015 .travis.yml Initial commit Dec 18, 2015 LICENSE Initial commit Dec 18, 2015 README.md Update README.md Jan 3, 2016 shard.yml Initial commit Dec 18, 2015 README.md Temel Temel is a markup language for Crystal. A simpler alternative to HTML Builder. Custom tag registration with a simple tag macro. Supports Web Components. Simpler DSL (comparing to HTML::Builder). # Register tags first. tag my_application tag hello_world  get ""/"" do   html(     body({id: ""main""},       my_application hello_world ""Hello World!""     )   ) end Or, you can alternatively use block based syntax (Just like HTML::Builder) instead of argument based syntax: get ""/"" do   html do     body({id: ""main""}) do       my_application hello_world ""Hello World!""     end   end end The output will be: <html>   <body id=""main"">     <my-application>       <hello-world>Hello World!</hello-world>     </my-application>   </body> </html> Installation Add this to your application's shard.yml: dependencies:   temel:     github: f/temel Usage require ""kemal"" require ""temel""  get ""/"" do   html(     body(       h1 ""Hello World""     )   ) end Using as Template Engine You can use Temel as layout engine with functions. # layout.tpl.cr def layout(content)   html(     head(       title(""Hello"")     ),     body(content)   ) end ... just by using Crystal's internals, nothing more... # hello.tpl.cr require ""layout.tpl""  def hello(where)   layout(""Hello #{where}"") end ... use it with Kemal makes everything better. # main.cr require ""hello.tpl""  get ""/"" do |env|   hello(env.params.where) end Argument Based DSL vs Block Based DSL Argument based DSL is a bit different than HTML::Builder's. Argument Based DSL get ""/"" do   html(     head(       script({src: ""main.js""})     ),     body({id: ""main""},       h1 ""Hello World!"",       p ""Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.""     )   ) end Block Based DSL get ""/"" do   html do [     head do       script({src: ""main.js""})     end,     body({id: ""main""}) do [       h1 ""Hello World!"",       p ""Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.""     ] end   ] end ] end Comments You can add HTML comments with Temel. get ""/"" do   html(     body(       ul(         comment(""ko foreach: myItems""),         li({""data-bind"": ""text: $data""}),         comment(""/ko"")       )     )   ) end Development You can extend the Temel by adding your own tags. Adding a new tag tag [tagname]  will register a new tag. Contributing Fork it ( https://github.com/f/temel/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors f Fatih Kadir Akın - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/f/temel"	"Extensible HTML::Builder alternative for Crystal, supports custom tag definitions"	"true"
"Testing"	"crotest"	"https://github.com/emancu/crotest"	"A tiny and simple test framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"3"	"2"	"GitHub - emancu/crotest: A tiny and simple test framework for crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 14 Fork 2 emancu/crotest Code Issues 0 Pull requests 0 Pulse Graphs A tiny and simple test framework for crystal 35 commits 1 branch 6 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.2 v0.1.1 v0.1.0 v0.0.3 v0.0.2 v0.0.1 Nothing to show New pull request Latest commit c33bff1 Jul 13, 2016 emancu Bump to v0.1.2 Permalink Failed to load latest commit information. spec Return the exception object from assert_raise Jul 13, 2016 src Bump to v0.1.2 Jul 13, 2016 .gitignore Proof of concept Mar 17, 2016 .travis.yml Add .travis.yml file Mar 17, 2016 LICENSE Initial commit Mar 17, 2016 README.md Update README.md May 16, 2016 shard.yml Bump to v0.1.2 Jul 13, 2016 README.md crotest A tiny and simple test framework for Crystal with common assertions and no pollution into Object class. NOTE: This library was built during the Citrusybte's Investment Day program Example require ""crotest""  describe ""DSL"" do   it ""defines small test cases"" do     assert true   end    describe ""nested describes for a better readability"" do     it ""has only a few assertions"" do       var = false        deny var       assert_equal false, var       assert_raise Exception do         raise Exception.new(""Boom!"")       end     end   end    pending ""tests are defined without a block""    pending ""tests can also be defined with a block, which will not be executed"" do     fail ""This won't be executed :)""   end end Installation Add this to your application's shard.yml: dependencies:   crotest:     github: emancu/crotest Usage require ""crotest"" Run your tests with crystal spec. Assertions assert deny assert_equal assert_raise Custom assertions Extend the assertions used by Crotest is really easy. You need to open the module Crotest::Assertions and add your assertions like the example below: require ""crotest""  module Crotest::Assertions   macro assert_greater_than_4(value, file = __FILE__, line = __LINE__)     assert {{value}} > 4, ""#{{{value}}} <= 4"", {{file}}, {{line}}   end end   it ""supports my custom assertion"" do   assert_greater_than_4 5 end Before/After blocks If you need to run code before or after each test, declare each block like in the example below. Remember to define before/after blocks before the corresponding it blocks. Given this is not dynamically evaluated, we must define at the beginning of the file or describe block. before do   # First block to be executed end  after do   # Fifth and last block to be executed end  describe ""a nested context"" do   before do     # Second block to be executed   end    after do     # Fourth block to be executed   end    it ""executes the before blocks and"" do     # Third block to be executed   end end Contributing Fork it ( https://github.com/emancu/crotest/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors emancu Emiliano Mancuso - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/emancu/crotest"	"A tiny and simple test framework"	"true"
"Testing"	"matchi"	"https://github.com/fixcr/matchi"	"Collection of expectation matchers"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"0"	"1"	"0"	"GitHub - fixcr/matchi: Collection of expectation matchers. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 0 Fork 0 fixcr/matchi Code Issues 0 Pull requests 0 Pulse Graphs Collection of expectation matchers. 2 commits 1 branch 1 release Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE.md Projectfile README.md matchi shard.yml README.md Matchi Collection of expectation matchers for Crystal. Contact Home page: https://github.com/fixcr/matchi Bugs/issues: https://github.com/fixcr/matchi/issues Installation Add this to your application's shard.yml: dependencies:   matchi:     github: fixcr/matchi Usage require ""matchi"" Built-in matchers Untruth matcher: be_false = Matchi::BeFalse.new be_false.matches? { false } # => true Nil matcher: be_nil = Matchi::BeNil.new be_nil.matches? { nil } # => true Truth matcher: be_true = Matchi::BeTrue.new be_true.matches? { true } # => true Regular expressions matcher: match = Matchi::Match.new(/^[a-z0-9_-]{3,16}$/) match.matches? { ""bob"" } # => true Expecting errors matcher: raise_exception = Matchi::RaiseException.new(DivisionByZero) raise_exception.matches? { 0 / 0 } # => true Equivalence matcher: same = Matchi::Same.new(""foo"") same.matches? { ""foo"" } # => true Custom matchers Custom matchers can easily be defined for expressing expectations. Be the answer matcher: module Matchi   class BeTheAnswer     def matches?       42 === yield     end   end end  be_the_answer = Matchi::BeTheAnswer.new be_the_answer.matches? { 42 } # => true Start with matcher: module Matchi   class StartWith     def initialize(expected)       @expected = expected     end      def matches?       !Regex.new(""^#{@expected}"").match(yield).nil?     end   end end  start_with = Matchi::StartWith.new(""foo"") start_with.matches? { ""foobar"" } # => true Versioning Matchi follows Semantic Versioning 2.0. Contributing Fork it Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request License See LICENSE.md file. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fixcr/matchi"	"Collection of expectation matchers"	"true"
"Testing"	"minitest.cr"	"https://github.com/ysbaddaden/minitest.cr"	"Library for unit tests and assertions"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"27"	"2"	"4"	"GitHub - ysbaddaden/minitest.cr: Test Unit for the Crystal programming language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 27 Fork 4 ysbaddaden/minitest.cr Code Issues 0 Pull requests 0 Pulse Graphs Test Unit for the Crystal programming language 77 commits 3 branches 12 releases Fetching contributors Crystal 99.7% Makefile 0.3% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix-ivars master spec-let-with-type-declaration Nothing to show v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.0 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 090f13c May 17, 2016 ysbaddaden Merge remote-tracking branch 'origin/master' Permalink Failed to load latest commit information. src Fix: crystal 0.17.0 compatibility May 17, 2016 test .gitignore CHANGELOG.md LICENSE Makefile README.md minor syntactic fix (#10) May 11, 2016 VERSION Release: v0.3.1 Jan 24, 2016 shard.yml Release: v0.3.4 May 17, 2016 README.md Minitest for Crystal Unit tests and assertions for the Crystal programming language, using the fantastic minitest as reference. Getting Started Given that you'd like to test the following class: class Meme   def i_can_has_cheezburger?     ""OHAI!""   end    def will_it_blend?     ""YES!""   end end Unit Tests Define your tests as methods beginning with test_: require ""minitest/autorun""  class MemeTest < Minitest::Test   def meme     @meme ||= Meme.new   end    def test_that_kitty_can_eat     assert_equal ""OHAI!"", meme.i_can_has_cheezburger?   end    def test_that_it_will_not_blend?     refute_match /^no/i, meme.will_it_blend?   end    def test_that_will_be_skipped     skip ""test this later""   end end Specs Specs follow the same design rationale as the original Minitest: describe generates classes that inherit from Minitest::Spec, and it generates test methods. require ""minitest/autorun""  describe Meme do   let(:meme) { Meme.new }    describe ""when asked about cheeseburgers"" do     it ""must respond positively"" do       meme.i_can_has_cheezburger?.must_equal(""OHAI!"")     end   end    describe ""when asked about blending possibilities"" do     it ""won't say no"" do       meme.will_it_blend?.wont_match(/^no/i)     end   end end You may use assertions in your specs (they'll work the same) or you may prefer the expect syntax: expect(meme.i_can_haz_cheezeburger?).must_equal(""OHAI!"") expect(meme.will_it_blend?).wont_match(/^no/i) Run Tests Eventually run the tests: $ crystal test/meme_test.cr spec/meme_spec.cr -- --verbose  You may filter your tests using an exact test name, or a regexp: $ crystal test/meme_test.cr -- -n test_that_kitty_can_eat $ crystal test/meme_test.cr -- -n /will/  When using Minitest::Spec with assertions or the expect syntax, you can avoid to taint Object with all the #must_ and #wont_ expectations: $ crystal -Dmt_no_expectations spec/meme_spec.cr  License Distributed under the MIT License. Please see LICENSE for details. Credits Julien Portalier @ysbaddaden for the Crystal implementation Ryan Davis @zenspider and seattle.rb for the original Ruby gem Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ysbaddaden/minitest.cr"	"Library for unit tests and assertions"	"true"
"Testing"	"mock"	"https://github.com/porras/mock"	"Mocking library, inspired by the API of rspec-mocks"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"4"	"1"	"GitHub - porras/mock: Doubles (stubs and mocks) library for Crystal, inspired by the API of rspec-mocks Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 7 Fork 1 porras/mock Code Issues 0 Pull requests 0 Pulse Graphs Doubles (stubs and mocks) library for Crystal, inspired by the API of rspec-mocks 14 commits 2 branches 0 releases 4 contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master shard Nothing to show Nothing to show New pull request Latest commit 08cb37c Feb 7, 2016 porras Update installation instructions Permalink Failed to load latest commit information. spec Fix broken spec Nov 15, 2015 src Move double under Spec::DSL Nov 13, 2015 .gitignore Initial commit May 19, 2015 .travis.yml Crystal is now community supported on Travis CI Jun 30, 2015 LICENSE Initial commit May 19, 2015 Projectfile Initial commit May 19, 2015 README.md Update installation instructions Feb 7, 2016 shard.yml Add shard.yml Jan 26, 2016 README.md Mock Mock is a doubles (stubs and mocks) library for Crystal, inspired by the API of rspec-mocks (but it implements a small basic subset of it to the date). Installation Add this to your application's shard.yml: development_dependencies:   mock:     github: porras/mock You can now run shards to install it. Usage Require it in your tests and you can start using it. require ""mock"" Creating a double Just call the double() method. Stubbing a method Calling stub on that double object will set a method stub: my_object = double() my_object.stub(:my_method) You can establish a return value for the stub method (if you don't, method stubs return nil): my_object = double() my_object.stub(:my_method).and_return(""my value"")  my_object.my_method.should eq(""my value"") You can also filter my arguments, establishing different stubs for the same method: my_object = double() my_object.stub(:my_method).with(1).and_return(""value 1"") my_object.stub(:my_method).with(2).and_return(""value 2"")  my_object.my_method(1).should eq(""value 1"") my_object.my_method(2).should eq(""value 2"") Setting expectations You can also set the expectation that a method will be called, and it will be automatically checked at the end of the test: my_object = double() my_object.should_receive(:my_method).with(1).and_return(""my value"")  # if we omit this line, the test will fail my_object.my_method(1).should eq(""value 1"") See example_spec.cr for more examples. Contributing Fork it ( https://github.com/porras/mock/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request License This code is released under the MIT License. Contributors Sergio Gil Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/porras/mock"	"Mocking library, inspired by the API of rspec-mocks"	"true"
"Testing"	"mocks.cr"	"https://github.com/waterlink/mocks.cr"	"Mocking library for Crystal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"12"	"4"	"4"	"GitHub - waterlink/mocks.cr: General purpose mocking library for Crystal. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 12 Fork 4 waterlink/mocks.cr Code Issues 3 Pull requests 0 Pulse Graphs General purpose mocking library for Crystal. 104 commits 1 branch 16 releases Fetching contributors Crystal 96.2% Shell 3.8% Crystal Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.9.2 v0.9.1 v0.9.0 v0.8.0 v0.7.0 v0.6.0 v0.5.0 v0.4.2 v0.4.1 v0.4.0 v0.3.2 v0.3.1 v0.3.0 v0.2.1 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 6cc0617 Jun 25, 2016 waterlink Bump up version to 0.9.2 Permalink Failed to load latest commit information. spec Upgrade to Crystal 0.18.4 Jun 25, 2016 src .gitignore Upgrade to Crystal 0.18.4 Jun 25, 2016 .travis.yml Crystal is now community supported on Travis CI Sep 6, 2015 LICENSE README.md Bump up version to 0.9.2 Jun 25, 2016 shard.yml watch.sh port notification code in watch.sh to macosx Feb 2, 2016 README.md mocks General purpose mocking library for Crystal. Installation Add it to shard.yml: dependencies:   mocks:     github: waterlink/mocks.cr     version: ~> 0.9 This shard requires version of Crystal minimum 0.13.0. Usage require ""mocks"" Usage with spec library require ""mocks/spec"" This will automatically register Mocks.reset hooks in before_each and after_each. Additionally it makes allow, receive and have_received available in global scope. If you need all of macros (such as: create_mock, create_double, double, instance_double, etc.) to be available in global scope use include ::Mocks::Macro. Usage with spec2 library First add spec2-mocks to your dependencies: dependencies:   mocks:     github: waterlink/mocks.cr   spec2:     github: waterlink/spec2.cr   spec2-mocks:     github: waterlink/spec2-mocks.cr Run crystal deps update and do: require ""spec2-mocks"" This should be enough to start using mocks together with spec2. Partial double class Example   def say_hello(name)     ""hey, #{name}""   end end  Mocks.create_mock Example do   mock say_hello(name)   # or   # mock instance.say_hello(name) end  example = Example.new allow(example).to receive(say_hello(""world"")).and_return(""hello, world!"")  example.say_hello(""world"")    #=> ""hello, world!"" example.say_hello(""john"")     #=> ""hey, john"" If you want to mock operators or setters, syntax is pretty straightforward: # setter mock instance.greeting = value # or mock instance.greeting=(value)  # equals mock instance == other # or mock instance.==(other) Class methods Just use mock self.method_name(args..) Mocks.create_mock Example do   mock self.hello_world(greeting) end  allow(Example).to receive(self.hello_world(""aloha"")).and_return(""aloha (as 'hello'), world!"") Example.hello_world(""hey"")         # => ""hey, world!""                   (original was called) Example.hello_world(""aloha"")       # => ""aloha (as 'hello'), world!""    (mock was called) Module methods Just use mock self.method_name(args..) module Example   def self.hello_world(greeting)     greeting   end end  Mocks.create_module_mock Example do   mock self.hello_world(greeting) end  allow(Example).to receive(self.hello_world(""aloha"")).and_return(""aloha (as 'hello'), world!"") Mocking Struct struct Example   def now     Time.now   end end  Mocks.create_struct_mock Example do   mock now end  example = Example.new allow(example).to receive(now).and_return(Time.new(2014, 12, 22)) Double Caution: doubles require return types. Mocks.create_double ""OtherExample"" do   mock say_hello(name) as String   mock greetings_count as Int64    # For setters and operators this is the only syntax allowed:   # ( parenthesis are mandatory not to confuse Crystal's parser )   mock (instance.greeting = value), String   mock (instance == other), Bool end  example = Mocks.double(""OtherExample"", returns(say_hello(""world""), ""hello world!"")) allow(example).to receive(instance.greeting=(""hey"")).and_return(""hey"")  example.say_hello(""world"")     #=> ""hello world!"" example.say_hello(""john"")      #=> Mocks::UnexpectedMethodCall: #<Mocks::Doubles::OtherExample:0x109498F00> received unexpected method call say_hello[""john""] Instance double After defining Example's mock with create_mock you can use it as an instance_double: example = Mocks.instance_double(Example, returns(say_hello(""world""), ""hello, world!"")) allow(example).to receive(say_hello(""sarah"")).and_return(""Hey, Sarah!"")  example.say_hello(""world"")     #=> ""hello world!"" example.say_hello(""sarah"")     #=> ""Hey, Sarah!"" example.say_hello(""john"")      #=> Mocks::UnexpectedMethodCall: #<Mocks::InstanceDoubles::Example:0x109498F00> received unexpected method call say_hello[""john""] Class double After defining Example's mock with create_mock you can use it as a class_double: example_class = Mocks.class_double(Example, returns(self.hello_world(""aloha""), ""aloha, world!"")) allow(example_class).to receive(self.hello_world(""hi"")).and_return(""hey, world!"")  example_class.hello_world(""aloha"")            # => ""aloha, world!"" example_class.hello_world(""hi"")               # => ""hey, world!"" example_class.hello_world(""halo"")             # => Mocks::UnexpectedMethodCall: Mocks::InstanceDoubles::Example received unexpected method call self.hello_world[""halo""] .new It returns normal instance_double: example_class = Mocks.class_double(Example) example_class.new          # => #<Mocks::InstanceDoubles::Example:0x109498F00> HaveReceived expectation (usage with stdlib spec) example = Example.new example.say(""hello"") example.should have_received(say(""hello""))   # passes example.should have_received(say(""hi""))      # fails Development After cloning the project: cd mocks.cr crystal deps   # install dependencies crystal spec   # run specs  Just use normal TDD development style. Contributing Fork it ( https://github.com/waterlink/mocks.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors waterlink Oleksii Fedorov - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/waterlink/mocks.cr"	"Mocking library for Crystal"	"true"
"Testing"	"power_assert.cr"	"https://github.com/rosylilly/power_assert.cr"	"Powerful assertion for Crystal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"33"	"2"	"5"	"GitHub - rosylilly/power_assert.cr: PowerAssert provides the more powerful assertion to you. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 33 Fork 5 rosylilly/power_assert.cr Code Issues 1 Pull requests 0 Pulse Graphs PowerAssert provides the more powerful assertion to you. https://github.com/rosylilly/power_assert.cr 24 commits 1 branch 5 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.2.3 v0.2.2 v0.2.1 v0.2.0 0.2.1 Nothing to show New pull request Latest commit 7f2d946 Jun 26, 2016 rosylilly committed on GitHub Merge pull request #7 from RX14/update-crystal … Update for crystal versions 0.16.0+ Permalink Failed to load latest commit information. spec src .gitignore LICENSE README.md shard.yml README.md power_assert.cr PowerAssert provides the more powerful assertion to you. Usage Very simple. # spec/my_lib_spec.cr  describe MyLib do   describe "".major_version"" do     it ""should be equal 1"" do       assert MyLib.major_version == 1     end   end end If MyLib.major_version is 2: F  Failures:    1) MyLib .major_version should be equal 1      Failure/Error: assert MyLib.major_version == 1           MyLib.major_version == 1          |                   |  |          |                   |  1          |                   false          2       # ./spec/my_lib_spec.cr:6  more examples in spec. 🎉 Happy testing! 🎉 Configure global_indent : Int : A indent size of assertion messages. sort_by : Symbol : Sort order of breakdowns. allowed: :default, :reverse, :left and :right. expand_block : Bool : Show block's codes in the breakdown. Example Outputs Run crystal spec. FFFFFF  Failures:    1) PowerAssert Simple operators should be fail      Failure/Error: assert 1 == 2           1 == 2          | |  |          | false          |    |          |    2          1       # ./spec/power_assert_spec.cr:23    2) PowerAssert Simple operators should be fail      Failure/Error: assert 1 > 2           1 > 2          | | |          | false          |   |          |   2          1       # ./spec/power_assert_spec.cr:27    3) PowerAssert Method call should be fail      Failure/Error: assert falsey == true           falsey == true          |      |  |          |      false          |         |          |         true          false       # ./spec/power_assert_spec.cr:33    4) PowerAssert Method call should be fail      Failure/Error: assert example.falsey(one, two, three)           example.falsey(one, two, three)          |       |      |    |    |          |       false  |    |    |          |              1    |    |          |                   2    |          |                        3          #<PowerAssert::Example:0x1087a6ee0>       # ./spec/power_assert_spec.cr:42    5) PowerAssert Method call should be fail      Failure/Error: assert example.one == 2           example.one == 2          |       |   |  |          |       |   false          |       |      |          |       |      2          |       1          #<PowerAssert::Example:0x1087a6e60>       # ./spec/power_assert_spec.cr:48    6) PowerAssert Method call should be fail      Failure/Error: assert array.any? { |n| n == 0 }.nil?           array.any? { ... }.nil?          |     |            |          |     |            false          |     false          [1, 2, 3]       # ./spec/power_assert_spec.cr:54  Finished in 2.16 milliseconds 6 examples, 6 failures, 0 errors, 0 pending  Failed examples:  crystal spec ./spec/power_assert_spec.cr:22 # PowerAssert Simple operators should be fail crystal spec ./spec/power_assert_spec.cr:26 # PowerAssert Simple operators should be fail crystal spec ./spec/power_assert_spec.cr:32 # PowerAssert Method call should be fail crystal spec ./spec/power_assert_spec.cr:36 # PowerAssert Method call should be fail crystal spec ./spec/power_assert_spec.cr:45 # PowerAssert Method call should be fail crystal spec ./spec/power_assert_spec.cr:51 # PowerAssert Method call should be fail Program terminated abnormally with error code: 256  ToDo Support a == b && c == d License Distributed under the MIT License. Please see LICENSE for details Credits Sho Kusano @rosylilly for the Crystal implementation Takuto Wada @twada for the original JavaScript implementation. power_assert.cr is inspired by power-assert. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rosylilly/power_assert.cr"	"Powerful assertion for Crystal"	"true"
"Testing"	"spec2.cr"	"https://github.com/waterlink/spec2.cr"	"Enhanced testing library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"39"	"5"	"5"	"GitHub - waterlink/spec2.cr: Enhanced `spec` testing library for [Crystal](http://crystal-lang.org/). Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 39 Fork 5 waterlink/spec2.cr Code Issues 7 Pull requests 0 Pulse Graphs Enhanced `spec` testing library for [Crystal](http://crystal-lang.org/). 140 commits 3 branches 11 releases Fetching contributors Crystal 99.8% Other 0.2% Crystal Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/code-level-focus fix-travis master Nothing to show v0.9.0 v0.8.2 v0.8.1 v0.8.0 v0.7.1 v0.7.0 v0.6.0 v0.5.0 v0.4.2 v0.4.1 v0.4.0 Nothing to show New pull request Latest commit 196f8f4 Jul 2, 2016 waterlink Release 0.9.0 Permalink Failed to load latest commit information. scripts Change a way unit tests are run Feb 20, 2016 spec Add described_class feature Jun 27, 2016 src Add described_class feature Jun 28, 2016 unit_spec Fix unit tests Apr 17, 2016 .gitignore Add tooling shard Apr 14, 2016 .travis.yml Implement more robust DSL Spec2 Next Feb 20, 2016 LICENSE Specify main features of library in readme Jun 6, 2015 README.md Release 0.9.0 Jul 2, 2016 shard.yml Release 0.9.0 Jul 2, 2016 unit Change a way unit tests are run Feb 20, 2016 README.md spec2 Enhanced spec testing library for Crystal. Example Spec2.describe Greeting do   subject { Greeting.new }    describe ""#greet"" do     context ""when name is world""       let(name) { ""world"" }        it ""greets the world"" do         expect(subject.greet(name)).to eq(""Hello, world"")       end     end   end end Installation Add it to shard.yml dependencies:   spec2:     github: waterlink/spec2.cr     version: ~> 0.9 Goals No global scope pollution No Object pollution Ability to run examples in random order Ability to specify before and after blocks for example group Ability to define let, let!, subject and subject! for example group Roadmap 0.10 Configuration through CLI interface. Filters. Shared examples and example groups. Usage require ""spec2"" Top-level describe Spec2.describe MySuperLibrary do   describe Greeting do     # .. example groups and examples here ..   end end If you have test suite written for Spec and you don't want to prefix each top-level describe with Spec2., you can just include Spec::GlobalDSL globally: include Spec2::GlobalDSL  # and then: describe Greeting do   # ... end Expect syntax expect(greeting.for(""john"")).to eq(""hello, john"") If you have big codebase that runs on Spec, you can use this to enable #should and #should_not on Object: Spec2.enable_should_on_object List of builtin matchers eq(""hello, world"") - asserts actual is equal to expected raise_error(ErrorClass [, message_matcher]) - checks if block raises expected error be(42) - asserts actual is the same as expected match(/hello .+/) - asserts actual is matching provided regexp be_true - asserts actual is equal true be_false - asserts actual is equal false be_truthy - asserts actual is not nil or false be_falsey - asserts actual is nil or false be_nil - asserts actual is equal nil be_close(42, 0.01) - asserts actual is in delta-proximity of expected expect(42).to_be < 45 - asserts arbitrary method call on actual to be truthy be_a(String) - asserts actual to be of expected type (uses is_a?) Random order Spec2.random_order  # this is what happens under the hood Spec2.configure_order(Spec2::Orders::Random) To configure your own custom order you can use: Spec2.configure_order(MyOrder) Class MyOrder should implement Order protocol and Order::Factory class protocol (see it here). See also a random order implementation. No color mode Spec2.nocolor  # this is what happens under the hood Spec2.configure_output(Spec2::Outputs::Nocolor) To configure your own custom output you can use: Spec2.configure_output(MyOutput) Class MyOutput should implement Output protocol and Output::Factory class protocol (see it here). See also a default colorful output implementation. Documentation reporter Spec2.doc  # this is what happens under the hood Spec2.configure_reporter(Spec2::Reporters::Doc) To configure your own custom reporter you can use: Spec2.configure_reporter(MyReporter) Class MyReporter should implement Reporter protocol and Reporter::Factory class protocol (see it here). See also a default reporter implementation. If you are creating a custom reporter, you might want to use ElapsedTime class to report elapsed time for the test suite. Example usage: output.puts ""Finished in #{::Spec2::ElapsedTime.new.to_s}"" Configuring custom Runner Spec2.configure_runner(MyRunner) Class MyRunner should implement Runner protocol and Runner::Factory class protocol (see it here). See also a default runner implementation. before before - register a hook that is run before any example in current and all nested contexts. before { .. do some stuff .. } after after - register a hook that is run after any successful example in current and all nested contexts. after { .. do some stuff .. } let let(name) { value } - register a binding of certain value to name. Lazy: provided block will only be evaluated when needed in example and only once per example. let(answer) { 42 }  it ""is correct answer"" do   expect(answer).to eq(42) end let! let(name) { value } - register a binding of certain value to name. It is not lazy: provided block will be evaluated before each example exactly once. let!(answer) { 42 }  it ""is correct answer"" do   expect(answer).to eq(42) end described_class For describe ... blocks, that describe a class, there is a shortcut to reference that class: describe Example do   it ""can be created"" do     expect(described_class.new.greet).to eq(""hello world"")     # instead of `Example.new.greet`.   end end subject subject { value } - register a subject of your test with provided value. Lazy. subject { Stuff.new }  it ""works"" do   expect(subject.answer).to eq(42) end subject(name) { value } - registers a named subject of your test with provided value with provided name. Lazy. subject(stuff) { Stuff.new }  it ""works"" do   expect(stuff.answer).to eq(42) end subject! subject! { value } - register a subject of your test with provided value. It is not lazy. subject! { Stuff.new }  it ""works"" do   expect(subject.answer).to eq(42) end subject!(name) { value } - registers a named subject of your test with provided value with provided name. It is not lazy. subject!(stuff) { Stuff.new }  it ""works"" do   expect(stuff.answer).to eq(42) end delayed Use delayed { ... } to verify expectations after test example and its after hooks finish. Example: it ""does something interesting eventually"" do   delayed { expect(value).to eq(42) }   # .. do something else, that should eventually lead to value == 42 .. end Custom matchers First, define your matcher implementing this protocol: class MyMatcher(T, E)   include Spec2::Matcher    @actual_inspect : String?    def initialize(@expected : T, @stuff : E)   end    def match(actual)     @actual_inspect = actual.inspect      # return true or false here   end    def failure_message     ""Expected to be valid #{@stuff.inspect}.     Expected: #{@expected.inspect}.     Actual:   #{@actual_inspect}.""   end    def failure_message_when_negated     ""Expected to be invalid #{@stuff.inspect}.     Expected: #{@expected.inspect}.     Actual:   #{@actual_inspect}.""   end    def description     ""(stuff in #{@expected} #{stuff})""   end end And then, register shortcut helper method to use your matcher. Spec2.register_matcher(stuff) do |stuff, expected|   MyMatcher.new(expected, stuff) end And use it: describe ""stuff"" do   it ""is valid stuff"" do     expect(something).to stuff(some_stuff, ""expected stuff"")   end end Development After you forked the repo: run crystal deps to install dependencies run crystal spec and crystal unit to see if tests are green (or just run scripts/test to run them both) apply TDD to implement your feature/fix/etc Contributing Fork it ( https://github.com/waterlink/spec2.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors waterlink Oleksii Fedorov - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/waterlink/spec2.cr"	"Enhanced testing library"	"true"
"Testing"	"timecop.cr"	"https://github.com/waterlink/timecop.cr"	"Library for mocking with. Inspired by"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9"	"2"	"2"	"GitHub - waterlink/timecop.cr: Mock with `Time.now` with the power of time travel, time freeze and time scale. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 9 Fork 2 waterlink/timecop.cr Code Issues 0 Pull requests 0 Pulse Graphs Mock with `Time.now` with the power of time travel, time freeze and time scale. 17 commits 1 branch 1 release Fetching contributors Crystal 96.5% Shell 3.5% Crystal Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.0.2 Nothing to show New pull request Latest commit 43e22d2 Jul 1, 2015 waterlink Merge pull request #3 from jhass/patch-1 … Crystal is now community supported on Travis CI Permalink Failed to load latest commit information. bin libs Initial commit Mar 30, 2015 spec Add support for 'Time.new'; use 'previous_def' Mar 30, 2015 src .gitignore .travis.yml LICENSE Initial commit Mar 29, 2015 Projectfile README.md Update contributor list Apr 13, 2015 README.md timecop.cr Mock with Time.now with the power of time travel, time freeze and time scale. Inspired by timecop ruby gem Installation Add it to Projectfile deps do   github ""waterlink/timecop.cr"" end Already implemented and usable Timecop.freeze (normal and block forms) Timecop.reset TODO Timecop.freeze Timecop.reset Timecop.travel Timecop.scale Support nested block forms of scale, freeze and travel Usage require ""timecop"" Time travel NOTE: Not implemented yet Timecop.travel(2.days.ago) # Do some stuff 2 days ago  Timecop.travel(4.days.from_now) # Do some stuff 2 days from now (2 days ago + 4 days from now = -2 + 4 = +2) Block form: # Normal time here  Timecop.travel(2.days.ago) do   # Do some stuff 2 days ago end  # Again back to normal time Time freeze Timecop.freeze(2.days.ago) # Do some stuff exactly 2 days ago Block form: Timecop.freeze(2.days.ago) do   # Time.now is always 2 days ago in this block end Difference between time travel and time freeze Timecop.freeze is used to statically mock the concept of now. As your program executes, Time.now will always return the same value - value you provided as an argument to Timecop.freeze. On the other hand Timecop.travel is dynamically mocks Time.now, ie: as your program executes, Time.now will change accordingly taking into account offset created by Timecop.travel. Timecop.travel and Timecop.freeze both support nested calls. NOTE: Not implemented yet Time scale NOTE: Not implemented yet Timecop.scale(1000) # Now time goes 1000 times faster  Timecop.scale(0.001) # Now time goes as normal  Timecop.scale(0.001) # Now time goes 1000 times slower Block form: Timecop.scale(2.5) do   # here time goes 2.5 times faster end Resetting normal time flow Timecop.reset Development To run specs run bin/spec Contributing Fork it ( https://github.com/waterlink/timecop.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors waterlink Oleksii Fedorov - creator, maintainer asterite Ary Borenszweig Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/waterlink/timecop.cr"	"Library for mocking with. Inspired by"	"true"
"Testing"	"timecop ruby gem"	"https://github.com/travisjeffery/timecop"	"Library for mocking with. Inspired by"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2116"	"28"	"127"	"GitHub - travisjeffery/timecop: A gem providing ""time travel"", ""time freezing"", and ""time acceleration"" capabilities, making it simple to test time-dependent code. It provides a unified method to mock Time.now, Date.today, and DateTime.now in a single call. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 2,116 Fork 127 travisjeffery/timecop Code Issues 31 Pull requests 10 Pulse Graphs A gem providing ""time travel"", ""time freezing"", and ""time acceleration"" capabilities, making it simple to test time-dependent code. It provides a unified method to mock Time.now, Date.today, and DateTime.now in a single call. 290 commits 7 branches 39 releases 37 contributors Ruby 100.0% Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags MicahChalmer-issue51_fix MicahChalmer-test_failure_status fix/travis-ci issue-94 master nanosecond-fix tolsen-master Nothing to show v0.8.0 v0.7.1 v0.7.0 v0.6.3 v0.6.2.2 v0.6.2.1 v0.6.2 v0.6.1 v0.6.0 v0.5.9.2 v0.5.9.1 v0.5.9 v0.5.8 v0.5.7 v0.5.6 v0.5.5 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.6 v0.4.5 v0.4.4 v0.4.3 v0.4.2 v0.4.0 v0.3.5 v0.3.4 v0.3.4.rc2 v0.3.4.rc1 v0.3.2 v0.3.1 v0.3.0 v0.2.1 0.7.4 0.7.3 0.7.2 0.1.0 Nothing to show New pull request Latest commit 314882f Apr 1, 2016 travisjeffery Merge pull request #178 from JonMidhir/add_support_for_floats … Add support for Float arguments to Timecop.freeze, Timecop.travel Permalink Failed to load latest commit information. lib Add support for Float arguments to #freeze, #travel etc. Apr 1, 2016 test Add support for Float arguments to #freeze, #travel etc. Mar 31, 2016 .gitignore update ignore for rbenv Jun 26, 2013 .travis.yml add Ruby 2.2 to travis.yml Jun 18, 2015 Gemfile colorful tests Aug 26, 2015 LICENSE add copyright fixes #12 Jul 26, 2012 README.markdown Fix a syntax error in the README Jun 24, 2015 Rakefile colorful tests Aug 27, 2015 timecop.gemspec requires ruby >= 1.9.2 Jul 20, 2013 README.markdown timecop DESCRIPTION A gem providing ""time travel"" and ""time freezing"" capabilities, making it dead simple to test time-dependent code. It provides a unified method to mock Time.now, Date.today, and DateTime.now in a single call. INSTALL gem install timecop FEATURES Freeze time to a specific point. Travel back to a specific point in time, but allow time to continue moving forward from there. Scale time by a given scaling factor that will cause time to move at an accelerated pace. No dependencies, can be used with any ruby project Timecop api allows arguments to be passed into #freeze and #travel as one of the following: Time instance DateTime instance Date instance individual arguments (year, month, day, hour, minute, second) a single integer argument that is interpreted as an offset in seconds from Time.now Nested calls to Timecop#travel and Timecop#freeze are supported -- each block will maintain its interpretation of now. Works with regular Ruby projects, and Ruby on Rails projects USAGE Run a time-sensitive test joe = User.find(1) joe.purchase_home() assert !joe.mortgage_due? # move ahead a month and assert that the mortgage is due Timecop.freeze(Date.today + 30) do   assert joe.mortgage_due? end You can mock the time for a set of tests easily via setup/teardown methods describe ""some set of tests to mock"" do   before do     Timecop.freeze(Time.local(1990))   end    after do     Timecop.return   end    it ""should do blah blah blah"" do   end end Set the time for the test environment of a rails app -- this is particularly helpful if your whole application is time-sensitive. It allows you to build your test data at a single point in time, and to move in/out of that time as appropriate (within your tests) in config/environments/test.rb config.after_initialize do   # Set Time.now to September 1, 2008 10:05:00 AM (at this instant), but allow it to move forward   t = Time.local(2008, 9, 1, 10, 5, 0)   Timecop.travel(t) end The difference between Timecop.freeze and Timecop.travel freeze is used to statically mock the concept of now. As your program executes, Time.now will not change unless you make subsequent calls into the Timecop API. travel, on the other hand, computes an offset between what we currently think Time.now is (recall that we support nested traveling) and the time passed in. It uses this offset to simulate the passage of time. To demonstrate, consider the following code snippets: new_time = Time.local(2008, 9, 1, 12, 0, 0) Timecop.freeze(new_time) sleep(10) new_time == Time.now # ==> true  Timecop.return # ""turn off"" Timecop Timecop.travel(new_time) sleep(10) new_time == Time.now # ==> false Timecop.scale Let's say you want to test a ""live"" integration wherein entire days could pass by in minutes while you're able to simulate ""real"" activity. For example, one such use case is being able to test reports and invoices that run in 30 day cycles in very little time, while also being able to simulate activity via subsequent calls to your application. # seconds will now seem like hours Timecop.scale(3600) Time.now # => 2012-09-20 21:23:25 -0500 # seconds later, hours have past it's gone from 9pm at night to 6am in the morning Time.now # => 2012-09-21 06:22:59 -0500 See #42 for more information, thanks to Ken Mayer, David Holcomb, and Pivotal Labs. Timecop.safe_mode Safe mode forces you to use Timecop with the block syntax since it always puts time back the way it was. If you are running in safe mode and use Timecop without the block syntax Timecop::SafeModeException will be raised to tell the user they are not being safe. # turn on safe mode Timecop.safe_mode = true  # check if you are in safe mode Timecop.safe_mode? # => true  # using method without block Timecop.freeze # => Timecop::SafeModeException: Safe mode is enabled, only calls passing a block are allowed. Contribute timecop is maintained by travisjeffery, and was created by jtrupiano. Here's the most direct way to get your work merged into the project. Fork the project Clone down your fork Create a feature branch Hack away and add tests, not necessarily in that order Make sure everything still passes by running tests If necessary, rebase your commits into logical chunks without errors Push the branch up to your fork Send a pull request for your branch Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/travisjeffery/timecop"	"Library for mocking with. Inspired by"	"true"
"Testing"	"webmock.cr"	"https://github.com/manastech/webmock.cr"	"Library for stubbing requests"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"19"	"4"	"4"	"GitHub - manastech/webmock.cr: Mock HTTP::Client Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 19 Fork 4 manastech/webmock.cr Code Issues 1 Pull requests 0 Pulse Graphs Mock HTTP::Client 36 commits 1 branch 9 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.8.0 v0.7.0 v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.0 0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md webmock.cr Library for stubbing HTTP::Client requests in Crystal. Current version requires Crystal 0.11.0. Inspired by webmock ruby gem. Installation Add it to shards.yml: development_dependencies:   webmock:     github: manastech/webmock.cr     branch: master Usage require ""webmock"" By requiring webmock unregistered HTTP::Client requests will raise an exception. If you still want to execute real requests, do this: WebMock.allow_net_connect = true Stub request based on uri only and with the default response WebMock.stub(:any, ""www.example.com"")  response = HTTP::Client.get(""http://www.example.com"") response.body        #=> """" response.status_code #=> 200 Stub requests based on method, uri, body, headers and custom response WebMock.stub(:post, ""www.example.com/foo"").   with(body: ""abc"", headers: {""Content-Type"": ""text/plain""}).   to_return(status: 500, body: ""oops"", headers: {""X-Error"": ""true""})  response = HTTP::Client.post(""http://www.example.com/foo"",                                body: ""abc"",                                headers: HTTP::Headers{""Content-Type"": ""text/plain""}) response.status_code        #=> 500 response.body               #=> ""oops"" response.headers[""X-Error""] #=> ""true""  # Executing the same request gives the same response response = HTTP::Client.post(""http://www.example.com/foo"",                                body: ""abc"",                                headers: HTTP::Headers{""Content-Type"": ""text/plain""}) response.body               #=> ""oops"" Stub requests based on query string WebMock.stub(:get, ""www.example.com"").   with(query: {page: 1, count: 10})  response = HTTP::Client.get(""http://www.example.com?count=10&page=1"") response.status_code #=> 200 Resetting WebMock.reset This clears all stubs and sets allow_net_connect to false. To execute this automatically before each spec, you can do: Spec.before_each &->WebMock.reset Or, for individual specs you can use WebMock.wrap and a block to make sure WebMock is reset at the end of a spec: WebMock.wrap do   WebMock.stub(:get, ""www.example.com"").to_return(body: ""Example"")    HTTP::Client.get(""http://www.example.com"").body #=> ""Example"" end  HTTP::Client.get(""http://www.example.com"") # Raises WebMock::NetConnectNotAllowedError Todo Bring more features found in the webmock ruby gem. Contributing Fork it ( https://github.com/manastech/webmock.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/manastech/webmock.cr"	"Library for stubbing requests"	"true"
"Third-party APIs"	"airbrake-crystal"	"https://github.com/kyrylo/airbrake-crystal"	"A Crystal notifier for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6"	"2"	"1"	"GitHub - kyrylo/airbrake-crystal: A Crystal notifier for Airbrake Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 6 Fork 1 kyrylo/airbrake-crystal Code Issues 0 Pull requests 0 Pulse Graphs A Crystal notifier for Airbrake https://airbrake.io 9 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE Projectfile README.md shard.lock shard.yml README.md Airbrake Crystal Introduction Airbrake Crystal is a Crystal notifier for Airbrake. Airbrake Crystal is currently in early development. Please, use and report bugs or share your ideas. The library provides minimalist API that enables the ability to send any Crystal exception to the Airbrake dashboard. Installation Add the library to Projectfile. deps do   github ""kyrylo/airbrake"" end Examples require ""airbrake""  Airbrake.configure do |config|   config.project_id = 105138   config.project_key = ""fd04e13d806a90f96614ad8e529b2822""    # Optionally set the endpoint   config.endpoint = ""http://something.private.com:8080"" end  begin   1/0 rescue ex : DivisionByZero   Airbrake.notify(ex) end  puts 'Check your dashboard on https://airbrake.io' Configuration The main interface is Airbrake.configure. Airbrake.configure do |config|   # ... end To tweak values inline use the following API: Airbrake.config.project_id = 105138 Config options project_id & project_key You must set both project_id & project_key. To find your project_id and project_key navigate to your project's General Settings and copy the values from the right sidebar. airbrake.configure do |config|   config.project_id = 105138   config.project_key = 'fd04e13d806a90f96614ad8e529b2822' end endpoint You may set a custom endpoint Airbrake.configure do |config|   config.project_id = 105138   config.project_key = ""fd04e13d806a90f96614ad8e529b2822""   config.endpoint = ""http://something.private.com:8080"" end API Airbrake#notify Sends an exception to Airbrake. Airbrake.notify(Exception.new(""App crashed!"")) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kyrylo/airbrake-crystal"	"A Crystal notifier for"	"true"
"Third-party APIs"	"Airbrake"	"https://airbrake.io/"	"A Crystal notifier for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Airbrake - The best bug tracker and error tracking software. Pricing Languages Enterprise Blog Sign In No more searching log files Capture and track your application's exceptions in 3 minutes Try it FREE Why Airbrake? Fix bugs faster Stacktraces, parameters, affected users - you name it. All the info you need to identify, assess and resolve errors quickly. Monitor code quality With deploy tracking, error trends, and detailed dashboards, managing and triaging errors has never been easier. Improve team productivity Collaborate, prioritize, triage and more with our custom workflow integrations. All the tools you need to find and fix errors - fast! Intelligent error grouping Review and resolve similar errors from one easy-to-use interface. Track error trends over time for individual errors or across your whole project. Customized grouping rules to meet your exact needs. Error details & aggregated error data Quickly locate the file, method, and line that caused the exception. Identify affected users, browsers, URLs, and more with Aggregations. Dig deeper with backtrace, parameters, and other contextual info. Deploy tracking, search and filter See the impact of deploys on your error volume and types. Click through from a backtrace line straight to Github or Gitlab. Robust search and filtering lets you find the exact errors you care about. Airbrake goes where you go Get the power of Airbrake on your phone with our iOS and Android apps. Monitor new errors anytime, without having to lug around your laptop. Languages & integrations Works with all major programming languages Airbrake’s notifier works with every major programming language. So you can monitor code quality across your entire stack. Airbrake in your workflow Create issues and tickets with a single click, get error notifications instantly via chat. Or use webhooks and our API to build custom integrations that enhance your workflow. The world’s best engineering teams use Airbrake “It wasn’t until we switched to Airbrake that we finally were able to get our exception emails under control. The ability to see your errors in one place, mark them as resolved, and organize them by deploy makes all the difference.” Joshua Krall Groupon “Every morning I get my coffee and check in with Airbrake to see how things are going. Having all our exceptions in one place makes learning about and then keeping track of issues a breeze. I wouldn’t deploy without it.” Simon Taranto Thoughtbot.com “The Pivotal Tracker integration is key. But in addition to that the ability to have all of our environments plugged into it and automatically close exceptions with each deploy are great features.” Jared Brown Hubstaff Integrates with your stack in minutes. Sign up now Latest From Our Blog Useful Links About Contact Blog API Documentation Status Site Email Support Airbrake Android App Airbrake iPhone App Jobs at Airbrake What is bug tracking? Terms of Service Privacy Policy Contact Us 535 Mission Street, 14th floor, San Francisco, CA 94105 1-888-479-8323 sales@airbrake.io facebook.com/airbrake.io @airbrake Airbrake © 2016"	"null"	"null"	"A Crystal notifier for"	"true"
"Third-party APIs"	"AnyBar_cr"	"https://github.com/davydovanton/AnyBar_cr"	"Simple crystal wrapper for AnyBar library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"1"	"0"	"GitHub - davydovanton/AnyBar_cr: Simple crystal wrapper for AnyBar Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 3 Fork 0 davydovanton/AnyBar_cr Code Issues 0 Pull requests 0 Pulse Graphs Simple crystal wrapper for AnyBar 11 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md AnyBar Simple crystal wrapper for AnyBar Installation Add this to your application's shard.yml: dependencies:   AnyBar_cr:     github: davydovanton/AnyBar_cr Usage You must have AnyBar installed and running require ""any_bar"" You can change bar color from your app using this syntax: any_bar = AnyBar::Client.new(port) any_bar.color = 'red' any_bar.color # => 'red' By default port is equal 1738 Contributing Fork it ( https://github.com/davydovanton/any_bar_cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors davydovanton Anton Davydov - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/davydovanton/AnyBar_cr"	"Simple crystal wrapper for AnyBar library"	"true"
"Third-party APIs"	"crystal-qiita"	"https://github.com/pine/crystal-qiita"	"A wrapper for the API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"0"	"1"	"0"	"GitHub - pine/crystal-qiita: A Crystal wrapper for the Qiita API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 0 Fork 0 pine/crystal-qiita Code Issues 0 Pull requests 0 Pulse Graphs 💎 A Crystal wrapper for the Qiita API 33 commits 2 branches 5 releases Fetching contributors Crystal 95.2% Makefile 4.8% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master v0.8.0 Nothing to show v0.4.0 v0.3.0 v0.2.0 v0.1.0 v0.0.1 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. example spec src .gitignore .travis.yml LICENSE Makefile README.md shard.yml README.md crystal-qiita A Crystal wrapper for the Qiita API. Installation Add this line to your application's shard.yml: dependencies:   qiita:     github: pine/crystal-qiita     version: ~> 0.3.0 Usage See example example/search_items.cr and Official API reference. require ""qiita""  res = Qiita.search_items({ query: ""Crystal"" }) res.each{|item| puts item.title } How to run example First, you should install Crystal compiler, using a tool such as crenv. $ git clone https://github.com/pine/crystal-qiita.git $ cd ./crystal-qiita $ crystal deps $ crystal run ./example/search_items.cr Keyword> Crystal All Crystal 20 items found.   1: OpenShift で Crystal を動かす方法   Author: pine   URL   : http://qiita.com/pine/items/6be6a266871f6b34c3f8   2: 文字の範囲・文字列の範囲   Author: kubo39   URL   : http://qiita.com/kubo39/items/6cf405b1386601f83f1f   3: Crystal - Bool   Author: tbpgr   URL   : http://qiita.com/tbpgr/items/8c54baacf5bd7a0ddbb2  ...  Contributing Fork it ( https://github.com/pine/crystal-qiita/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request License MIT License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pine/crystal-qiita"	"A wrapper for the API"	"true"
"Third-party APIs"	"Qiita"	"https://qiita.com/"	"A wrapper for the API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Qiita - プログラマの技術情報共有サービス Qiitaは、プログラマのための 技術情報共有サービスです。 もっと詳しく パスワードを忘れた場合 GitHubで新規登録/ログインTwitterで新規登録/ログイン Qiitaが許可無くTwitterに投稿することはありません。 またはメールアドレスで登録する                    利用規約に同意のうえ、「利用規約に同意して登録」ボタンを押してください。 キャンセル ツイート Kobito プログラミングのメモやスニペットの記録に最適なMacアプリ Qiita:Team みんなが手軽に書ける情報共有ツール Qiita:Career プログラマのためのキャリア構築支援サービス © 2016 Increments Inc. 利用規約 プライバシー ヘルプ お問い合わせ Qiitaとは ブログ API Team Kobito Career ご意見 × ご意見   送信 いただいたご意見への返信は行っておりません。 返信の必要な内容については、こちら からお問い合わせください。"	"null"	"null"	"A wrapper for the API"	"true"
"Third-party APIs"	"crystal_brium"	"https://github.com/manastech/crystal_brium"	"Access Brium's API using Crystal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"2"	"0"	"GitHub - manastech/crystal_brium: Access Brium's API using Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 1 Fork 0 manastech/crystal_brium Code Issues 0 Pull requests 0 Pulse Graphs Access Brium's API using Crystal 23 commits 1 branch 6 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore README.md shard.yml README.md crystal_brium Access Brium's API using Crystal. Projectfile deps do   github ""manastech/crystal_brium"" end Usage require ""brium""  client_id = ""..."" client_secret = ""...""  oauth_client = Brium.new_oauth_client(client_id, client_secret) access_token = # some OAuth2::AccessToken  session = OAuth2::Session.new(oauth_client, access_token) do   puts ""Refreshing access token..."" end  api = Brium::API.new session  # Get workers workers = api.workers active: true, admin: false, suspended: false  # Get clients clients = api.clients  # Get entries entries = api.entries billable_status: ""billable,billed""  # Or sum some entries hours total_hours = api.entries_sum billable_status: ""billable,billed""  # Get holidays holidays = api.holidays kind: ""vacations"", since_date: 3.days.ago Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/manastech/crystal_brium"	"Access Brium's API using Crystal"	"true"
"Third-party APIs"	"crystal_slack"	"https://github.com/manastech/crystal_slack"	"A tool that parses Slack slash commands or send incoming web hooks"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"2"	"3"	"GitHub - manastech/crystal_slack: Parse Slack slash commands or send incoming web hooks from Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 4 Fork 3 manastech/crystal_slack Code Issues 0 Pull requests 1 Pulse Graphs Parse Slack slash commands or send incoming web hooks from Crystal 24 commits 1 branch 6 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit e8e3995 Jul 13, 2016 juanedi committed on GitHub Merge pull request #3 from juanedi/master … Added post_message API method Permalink Failed to load latest commit information. spec Formatter Jul 13, 2016 src Formatter Jul 13, 2016 .gitignore Use shard.yml Sep 21, 2015 .travis.yml Push for travis build Jun 30, 2015 LICENSE Add license Aug 26, 2015 README.md Added post_message API method Jul 13, 2016 shard.yml Updated to Crystal 0.18.0 Jun 15, 2016 README.md crystal_slack Access Slack API's using Crystal. Projectfile deps do   github ""manastech/crystal_slack"" end Usage You can get a Slack::SlashCommand from an HTTP::Request or its body: require ""slack""  request = HTTP::Request.new ""POST"", ""/"", body: ""token=..."" command = Slack::SlashCommand.from_request(request) puts command.text You can create an incoming web hook and send it: require ""slack""  hook = Slack::IncomingWebHook.new(""some_text"", channel: ""some_channel"") hook.send_to ""https://hooks.slack.com/services/..."" You can also get the users and channels given an token, and send messages to a channel or user. Todo Lots of API methods are missing! Contributing Fork it ( https://github.com/manastech/crystal_slack/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/manastech/crystal_slack"	"A tool that parses Slack slash commands or send incoming web hooks"	"true"
"Third-party APIs"	"docker.cr"	"https://github.com/jeromegn/docker.cr"	"Docker API client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"1"	"1"	"GitHub - jeromegn/docker.cr: Docker API client in Crystal. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 7 Fork 1 jeromegn/docker.cr Code Issues 0 Pull requests 0 Pulse Graphs Docker API client in Crystal. 13 commits 1 branch 2 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.1 v0.1.0 Nothing to show New pull request Latest commit eb4312b Jun 8, 2016 jeromegn bump version Permalink Failed to load latest commit information. examples spec Fix webmock.with(query) signature to match available overrides Jun 7, 2016 src .gitignore .travis.yml wip Mar 20, 2016 LICENSE README.md shard.yml bump version Jun 8, 2016 README.md Docker Docker API client in Crystal. Installation Add this to your application's shard.yml: dependencies:   docker:     github: jeromegn/docker.cr Status: Developer Preview This is not nearly complete. Just got the initial connecting working and simple casting. I added a few commands as a proof of concept. This shard extends OpenSSL and HTTP::Client a little bit to support Docker's SSL method (TLS V1.) Usage require ""docker"" Options By default, options will be taken from the environment variables: DOCKER_URL or DOCKER_HOST DOCKER_VERIFY_TLS DOCKER_CERT_PATH  but they can also be set manually like: Docker.client.url = ""tcp://192.168.99.100:2376"" Docker.client.verify_tls = true Docker.client.cert_path = ""#{ENV[""HOME""]}/.docker"" If nothing is set, this client will use the unix socket. Info Docker.client.info.container # => Returns container count Containers Docker.client.containers # => Array of Docker::Container container = Docker.client.containers.first p container # => #<Docker::Container:0x10f6a3ea0 @id=""cbbeb51f25b4c91b61e6d1b5fc0c1c2bb470ccd8aaf5dc4a57885f35f21d7245"", @names=[""api""], @image=""ruby"" ...>  container.stop container.start container.restart container.kill Contributing Fork it ( https://github.com/jeromegn/docker.cr/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors jeromegn Jerome Gravel-Niquet - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jeromegn/docker.cr"	"Docker API client"	"true"
"Third-party APIs"	"fantasy_football_nerd_api"	"https://github.com/fridgerator/fantasy_football_nerd_api"	"A library for the"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"0"	"1"	"0"	"GitHub - fridgerator/fantasy_football_nerd_api: Crystal library for Fantasy Football Nerd API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 0 Fork 0 fridgerator/fantasy_football_nerd_api Code Issues 0 Pull requests 0 Pulse Graphs Crystal library for Fantasy Football Nerd API 3 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md fantasy_football_nerd_crystal Crystal library for the Fantasy Football Nerd API - http://www.fantasyfootballnerd.com/fantasy-football-api This is a very early adoption, TESTS HAVE NOT BEEN WRITTEN, this is very much alpha stage. Installation Add this to your application's shard.yml: dependencies:   fantasy_football_nerd_cyrstal:     github: fridgerator/fantasy_football_nerd_api Usage TODO: Write usage instructions here Development TODO: Write development instructions here Contributing Fork it ( https://github.com/[your-github-name]/fantasy_football_nerd_crystal/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors fridgerator Nick Franken - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fridgerator/fantasy_football_nerd_api"	"A library for the"	"true"
"Third-party APIs"	"Fantasy Football Nerd API"	"http://www.fantasyfootballnerd.com/fantasy-football-api"	"A library for the"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"40"	"11"	"13"	"GitHub - GregBaugues/fantasy_football_nerd: Wrapper for Fantasy Football Nerd API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 40 Fork 13 GregBaugues/fantasy_football_nerd Code Issues 0 Pull requests 4 Pulse Graphs Wrapper for Fantasy Football Nerd API 90 commits 3 branches 0 releases 2 contributors Ruby 100.0% Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 cleanup master Nothing to show Nothing to show New pull request Latest commit 9235b73 Sep 13, 2014 GregBaugues Refactor player stats Permalink Failed to load latest commit information. lib Refactor player stats Sep 13, 2014 spec Remove pry from commercial feed spec Sep 13, 2014 .gitignore Remove .ruby* May 30, 2014 Gemfile Remove pry from Gemfile Jul 11, 2014 Gemfile.lock Updated Gemfile Sep 12, 2014 README.md Update README Sep 13, 2014 fantasy_football_nerd.gemspec Update README and gemspec Jul 15, 2014 README.md Fantasy Football Nerd API Ruby Gem A Ruby Gem for the Fantasy Football Nerd API which: takes the ""wisdom of the crowd"" to a new level by aggregating the fantasy football rankings of the best fantasy football sites on the planet to analyze the rankings given to each player to produce a consensus ranking. This gem currently supports all Level 1 and Level 2 streams which cost $9 per season -- a total no-brainer if you're into fantasy sports and programming. Give the man his money. Here's what you get with $9 and this gem: Current Week Team List Season schedule Player list Bye weeks Injuries Auction draft values Draft rankings - projected fantasy points for the entire season Draft projections - projected stats for each scoring category for the entire season Weekly rankings - projected fantasy points (PPR || Standard) Weekly projections - projected stats for each scoring category v1.0 Fantasy Football Nerd recently overhauled to their API which a) drastically improved their service and b) completely deprecated the old API. The previous version of this gem won't work anymore so update your Gemfiles. Cache your data! Take heed to the warning on the Fantasy Football Nerd API page: The data does not generally change more than once or twice per day, so it becomes unnecessary to continually make the same calls. Please store the results locally and reference the cached responses... Your account may be suspended or API access revoked if you are found to be making excessive data calls. Seriously, Fantasy Football Nerd is not a big operation. Don't abuse their servers. Setup First, sign up for a Fantasy Football Nerd account. Then... In plain ol' Ruby, install the gem: gem install fantasy_football_nerd  And require it: require 'rubygems' require 'fantasy_football_nerd' If you're using Rails, add the gem to your Gemfile and run bundle install gem 'fantasy_football_nerd' Before you can access the feeds you must set your API key (found on the Fantasy Football Nerd API dashboard) by one of two methods: Set an environment variable via the terminal (good for production environments where you don't want to commit credentials to a repo). export FFNERD_API_KEY=""ABC123DEF""  Set a class variable from your script (good for one-offs like pulling down stats from IRB). FFNerd.api_key = ""ABC123DEF"" API Resources This gem supports all of Fantasy Football Nerd's Level 1 and Level 2 resources. Results are typically returned as an array of ostructs (which is basically a hash that you can access with ""dot notation"" as if it were an object instance variable). Fantasy Football Nerd returns keys in CamelCase but that's not very Ruby like. I've added snake_case attributes so that you can do player.displayName or player.display_name, whichever suits your fancy. Teams Returns an array of teams. team = FFNerd.teams.first team.code        # ""ARI"" team.full_name   # ""Arizona Cardinals"" team.short_name  # ""Arizona"" Schedule Returns an array of games. game = FFNerd.schedule.first game.game_id         # ""1"" game.game_week       # ""1"" game.game_date       # ""2013-09-05"" game.away_team       # ""BAL"" game.home_team       # ""DEN"" Players Returns an array of players. player = FFNerd.players.first player.player_id     # ""2"" player.active        # ""1"" player.jersey        # ""3"" player.lname         # ""Anderson"" player.fname         # ""Derek"" player.display_name  # ""Derek Anderson"" player.team          # ""CAR"" player.position      # ""QB"" player.height        # ""6-6"" player.weight        # ""240"" player.dob           # ""1983-06-15"" player.college       # ""Oregon State"" Bye Weeks Returns an array of the teams on bye for the given week. bye = FFNerd.byes(4).first bye.team         # ""CAR"" bye.bye_week     # ""4"" bye.display_name # ""Carolina Panthers"" Injuries Returns an array of injured players. Takes an optional parameter for the week number, or defaults to the current week. injury = FFNerd.injuries(6)     # all injuries for week 6 injury = FFNerd.injuries.first  # the first injury of the current week injury.week               # ""1"" injury.player_id          # ""0"" injury.player_name        # ""Javier Arenas"" injury.team               # ""ARI"" injury.position           # ""CB"" injury.injury             # ""Hip"" injury.practice_status    # ""Full Practice"" injury.game_status        # ""Probable"" injury.notes              # """" injury.last_update        # ""2013-09-09"" injury.practice_status_id # 0 Auction Values Returns an array of draft auction values. value = FFNerd.auction_values.first value.player_id     # ""259"" value.min_price     # ""60"" value.max_price     # ""66"" value.avg_price     # ""63"" value.display_name  # ""Adrian Peterson"" value.team          # ""MIN"" value.position      # ""RB"" Current Week Returns the current NFL week as an integer. FFNerd.current_week  # 17 Standard Draft Rankings Returns an array of players according to their projected draft values based on standard scoring. In this example I'm looking at the fourth element in the array because the PPR and standard rankings don't deviate until then in the test data. player = FFNerd.standard_draft_rankings[3] player.playerId      # ""1136"" player.position      # ""RB"" player.displayName   # ""C.J. Spiller"" player.fname         # ""C.J."" player.lname         # ""Spiller"" player.team          # ""BUF"" player.byeWeek       # ""12"" player.nerdRank      # ""6.140"" player.positionRank  # ""4"" player.overallRank   # ""4"" PPR Draft Rankings Returns an array of players according to their projected draft values based on PPR scoring. player = FFNerd.ppr_draft_rankings[3] player.player_id     # ""454"" player.position      # ""WR"" player.display_name  # ""Calvin Johnson"" player.fname         # ""Calvin"" player.lname         # ""Johnson"" player.team          # ""DET"" player.bye_week      # ""9"" player.nerd_rank     # ""7.209"" player.position_rank # ""1"" player.overall_rank  # ""4"" Draft Projections Returns an array of players with projected stats for a number of scoring categories. This data is useless once the season starts. Must pass in a valid position of QB, RB, WR, TE, K, DEF. player = FFNerd.draft_projections('QB').first player.player_id         # ""14"" player.completions       # ""422"" player.attempts          # ""640"" player.passing_yards     # ""4992"" player.passing_td        # ""40"" player.passing_int       # ""17"" player.rush_yards        # ""28"" player.rush_td           # ""1"" player.fantasy_points    # ""335"" player.display_name      # ""Drew Brees"" player.team              # ""NO"" Weekly Rankings Returns an array of players with expected weekly fantasy points for both standard and PPR scoring. Must request a specific position: QB, RB, WR, TE, K, DEF. You can also send along the specific week number (1-17). If you omit a week, it defaults to the current week. player = FFNerd.weekly_rankings('QB', 2).first player.week             # ""2"" player.player_id        # ""14"" player.name             # ""Drew Brees"" player.position         # ""QB"" player.team             # ""NO"" player.standard         # ""24.80"" player.standard_low     # ""18.92"" player.standard_high    # ""32.00"" player.ppr              # ""24.80"" player.ppr_low          # ""18.92"" player.ppr_high         # ""32.00"" player.injury           # nil player.practice_status  # nil player.game_status      # nil player.last_update      # nil Weekly Projections Returns an array of players with expected weekly values for each scoring category. Must request a specific position: QB, RB, WR, TE, K (But NOT DEF!). You can also send along the specific week number (1-17). If you omit a week, it defaults to the current week. player = FFNerd.weekly_projections('QB', 1).first player.week             # ""1"" player.player_id        # ""14"" player.position         # ""QB"" player.pass_att         # ""39.0"" player.pass_cmp         # ""25.0"" player.pass_yds         # ""317.0"" player.pass_td          # ""2.0"" player.pass_int         # ""1.0"" player.rush_att         # ""1.0"" player.rush_yds         # ""1.0"" player.rush_td          # ""0.0"" player.fumbles_lost     # ""0.0"" player.receptions       # ""0.0"" player.rec_yds          # ""0.0"" player.rec_td           # ""0.0"" player.fg               # ""0.0"" player.fg_att           # ""0.0"" player.xp               # ""0.0"" player.def_int          # ""0.0"" player.def_fr           # ""0.0"" player.def_ff           # ""0.0"" player.def_sack         # ""0.0"" player.def_td           # ""0.0"" player.def_ret_td       # ""0.0"" player.def_safety       # ""0.0"" player.def_pa           # ""0.0"" player.def_yds_allowed  # ""0.0"" player.display_name     # ""Drew Brees"" player.team             # ""NO"" Player Information Commercial Access only! Get biographical info for each player. You will need to pass along the playerId of the player you want. Unlike the FFNerd API, this resource does not return the player stats -- that comes from FFNerd.player_stats   player = FFNerd.player_info(13)   player.player_id  # ""13""   player.star  # ""1""   player.active  # ""1""   player.jersey  # ""12""   player.lname  # ""Brady""   player.fname  # ""Tom""   player.display_name  # ""Tom Brady""   player.team  # ""NE""   player.position  # ""QB""   player.height  # ""6-4""   player.weight  # ""225""   player.dob  # ""1977-08-03""   player.college  # ""Michigan""   player.twitter_id  # ""tomedbrady12"" Player Stats Commercial access only!* I deviated from the FFNerd API feed and broke historical stats off of the player information resource. I've also changed some of the field names to make them consistent with FFNerd.weekly_projections. year = 2000 week = 1 player_stats = FFNerd.player_stats(13) stats = player_stats[year][week] stats.year  # 2000 stats.player_id  # 13 stats.week  # 1 stats.game_date  # ""09/03"" stats.opponent  # ""TB"" stats.final_score  # ""L16-21"" stats.game_played  # 0 stats.game_started  # 0 stats.completions  # 0 stats.pass_att  # 0 stats.percentage  # 0.00 stats.pass_yds  # 0 stats.avg_pass_yds  # 0.00 stats.pass_td  # 0 stats.interceptions  # 0 stats.sacks  # 0 stats.sack_yds  # 0 stats.qb_rating  # 0.00 stats.rush_att  # 0 stats.rush_yds  # 0 stats.rush_avg  # 0.00 stats.rush_td  # 0 stats.fumbles  # 0 stats.fumbles_lost  # 0 A player's ostruct/hash does not include keys for stats that would be irrelevant for him. For example, when you pull Matt Forte's stats, you'll find some values that are absent for Brady (and vice versa). year = 2008 week = 1 player_stats = FFNerd.player_stats(175) stats = player_stats[year][week] stats.receptions # 3 stats.rec_yds # 18 stats.rec_avg # 6.00 stats.long_rec # 9 stats.rec_td # 0 Tests Set your API key to ""test"" to access FFNerd's test feeds. This is useful if you're developing your app prior to the beginning of the season or if you'd like to have a static dataset that won't change as the season progresses. All of the Rspec tests here use the test feeds. Speaking of RSpec... This gem includes comprehensive tests and uses VCR to cache http responses. If you're going to contribute, please write some tests. Contributors Greg Baugues (greg@baugues.com) www.baugues.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/GregBaugues/fantasy_football_nerd"	"A library for the"	"true"
"Third-party APIs"	"glosbe"	"https://github.com/greyblake/crystal-glosbe"	"Client for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"1"	"0"	"GitHub - greyblake/crystal-glosbe: Crystal Client for Glosbe API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 3 Fork 0 greyblake/crystal-glosbe Code Issues 0 Pull requests 0 Pulse Graphs Crystal Client for Glosbe API 9 commits 1 branch 2 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.2.0 v0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. examples spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md Glosbe Crystal client for Glosbe API Installation Add this to your application's shard.yml: dependencies:   glosbe:     github: greyblake/crystal-glosbe Usage require ""glosbe""  client = Glosbe::Client.new  # Translate a word from German to English response = client.translate(""de"", ""en"", ""Achtung"", tm: true)  # =>  #<Glosbe::TranslateResponse ... >  # Print translations response.tuc.each do |translation|   puts translation.phrase.try(&.text) end  # Print examples of usage response.examples.each do |example|   puts example.first    # sentence in German   puts example.second   # translation in English end Please check Glosbe::Client and Glosbe API for more details. Errors Client methods may raise the following errors: Glosbe::Error Glosbe::HttpError Glosbe::ParseError Running tests crystal spec  Contributors greyblake Sergey Potapov - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/greyblake/crystal-glosbe"	"Client for"	"true"
"Third-party APIs"	"Glosbe API"	"https://glosbe.com/a-api"	"Client for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Glosbe API Glosbe English   Log in Cookies help us deliver our services. By using our services, you agree to our use of cookies.Got it Dictionary Glosbe API Dictionary API and Translation Memory API description. This page aims to describe Programming Interface to Glosbe Dictionary and Translation Memory data. Important: currently API is in alpha stage and both input and output formats may change. Overview Glosbe offers programmatic access to dictionary translations (with phrase meanings and phrase meta informations) and to translation memories as well. Currently API is in it's alpha version and everything described on this page is a subject to change. Implementation API is based on web interface. Standard way to run Glosbe API function is: https://glosbe.com/gapi/{function-name}[?[{function-parameter1}={value}[&{function-parameter2}={value}[&{function-parameter3}={value}...]]]] where: /gapi/ is common prefix to all API functions function-name indicate function to be invoked order of parameters is free parameters should be encoded (find more at http://en.wikipedia.org/wiki/Query_string page) API works on subdomains (like de.glosbe.com, fr.glosbe.com). Subdomains would be used for localization of output messages: de. would be German, fr. French, en. English etc. Currently this feature is not used, as there is no localized messages. Glosbe.com uses English. Output format Currenlty we support three output formats. json: set format paramter to 'json'. jsonp: set format to 'json' and set callback parameter. xml: set format to 'xml' The &pretty=true parameter can be used to display returned string in more readable format. Type format codes in lowercases while putting them in parameters. If there is some format you think we should support contact us. Please see examples to learn exact format used. Language codes We use ISO 639-3 language codes for indicating language. If you don't know your language code you can check it on http://en.wikipedia.org/wiki/List_of_ISO_639-3_codes page. Examples of valid 3 letters language codes: 'eng' - English, 'fra' - French, 'deu' - German. API should understand two letter codes as well ('en' - English, 'de' - German etc.) but it's recommended to use three letter ISO 693-3 codes. API Version The newest API version can always be found at prefix: https://glosbe.com/gapi/ Current API version can be found at /gapi_v0_1/. https://glosbe.com/gapi_v0_1/ Functions translate Gives access to mono and bilingual dictionaries Parameters from - (required) language of phrase to translate, values: ISO 693-3 three letter language code, no default, beware: if language is invalid you'll get server 500 error code in return dest - (required) destination language, values: ISO 693-3 three letter language code, no default phrase - (required) phrase to be translated, values: arbitrary text, no default, case sensitive tm - whether to include examples (make translation memories search), values: 'true' or 'false', default: 'false' format - described elsewhere callback - described elsewhere Example Translate Polish 'witaj' into English, output format is json: https://glosbe.com/gapi/translate?from=pol&dest=eng&format=json&phrase=witaj&pretty=true Translate Polish 'ząb mądrości' into English, output format is jsonp: https://glosbe.com/gapi/translate?from=pol&dest=eng&format=json&phrase=z%C4%85b%20m%C4%85dro%C5%9Bci&callback=my_custom_function_name&pretty=true Translate English 'cat' into French, include example sentences as well, output is xml: https://glosbe.com/gapi/translate?from=eng&dest=fra&format=xml&phrase=cat&pretty=true tm Gives access to translation memory Parameters from - (required) language of phrase to translate, values: ISO 693-3 three letter language code, no default dest - (required) destination language, values: ISO 693-3 three letter language code, no default phrase - (required) phrase to be searched in existing translated sentences, values: arbitrary text, no default page - page of results to be displayed, values: counted from 1, positive number lower than arbitrary limit - you cannot see results above 200 item, default: 1; pageSize - size of the result page, values: positive number lower or equal 30, default: 30 format - described elsewhere callback - described elsewhere Example Find Translation Memories for Polish 'borsuk' into English, output is json: https://glosbe.com/gapi/tm?from=pol&dest=eng&format=json&phrase=borsuk&page=1&pretty=true addTranslation You can use it to enrich Glosbe data. To use addTranslation you need API key, so that we can connect your contribution with your account. You can get several API keys and use them to put data from several sources – for example if you have several dictionaries to import or several websites using our API. To get API key login and go to your profile page (click your login at top-right corner). Goto ""Mass contribution tab"" and click ""request new api key"". addTranslation must be invoked in POST request Parameters lang1 - (required) language of phrase1 to translate, values: ISO 693-3 three letter language code, no default lang2 - (required) language of phrase2 to translate, values: ISO 693-3 three letter language code, no default phrase1 - (required) phrase in language lang1, no default phrase2 - (required) phrase in language lang2, no default meaning1 - meaning of phrase1 in language lang1, no default meaning2 - meaning of phrase2 in language lang2, no default apiKey - (required) described above format - described elsewhere callback - described elsewhere Example add translation of Polish ""but"" to English ""shoe"" using curl (api key is hidden): curl -d ""lang1=pol&lang2=eng&phrase1=but&phrase2=shoe2&format=json&apiKey=YOUR_32_LETTERS_API_KEY"" https://glosbe.com/gapi/addTranslation Terms of Service API is free to use, regarding indicated data source license. There is a limit of call that may be done from one IP in fixed period of time, to prevent from abuse. The limit is not strict, there is heuristics that guesses whether queries comes from robot or human. If there are too many queries or they look non-human – IP gets blocked. If you are a developer and such case happens: please contact us. Glosbe attribution We provide API for free, however it does cost us to provide it. If you use our API please add readable information about the API provider. Add a link to Glosbe homepage if possible and visible Glosbe attribution next to the data displayed. Thank you. Commercial usage Some of data we have in Glosbe and we provide through API excludes usage for commercial projects. Please do not ask me what does it mean as I'm not a lawyer. There is information about an author attached to each data piece you receive. Theoretically you should check the license and then determine whether you can show this data to your user or not... Share If you're using or planning to use our API: why don't you contact us? It's always nice to hear that someone is using our service. Consider also sharing your job as an OpenSource project. It's good to share. LinksHome All dictionaries: All languages Transliteration Interface language AdvancedRecent changes Upload dictionary Glosbe API Reader FAQ Editor FAQ AboutAbout us Partners Blog Cookies Privacy policy Contact"	"null"	"null"	"Client for"	"true"
"Third-party APIs"	"google_maps_api"	"https://github.com/fridgerator/google_maps_api"	"Google Maps API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"1"	"0"	"GitHub - fridgerator/google_maps_api: Crystal library for the Google Maps API. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 3 Fork 0 fridgerator/google_maps_api Code Issues 1 Pull requests 0 Pulse Graphs Crystal library for the Google Maps API. 18 commits 1 branch 1 release Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.2.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md GoogleMapsApi WORK IN PROGRESS Crystal library for the Google Maps API. Installation Add this to your application's shard.yml: dependencies:   google_maps_api:     github: fridgerator/google_maps_api Usage require ""google_maps_api"" Geocoding GoogleMapsApi::Geocoding.address_search(""1111 North 20th"") GoogleMapsApi::Geocoding.latlng_search(40.714224, -73.961452) GoogleMapsApi::Geocoding.place_search(""ChIJd8BlQ2BZwokRAFUEcm_qrcA"") Places places API requires an API key (set using ENV[""GOOGLE_API_KEY""]) GoogleMapsApi::Place.nearby(40.714224, -73.961452, {:radius => 1000}) place = GoogleMapsApi::Place.details(""ChIJQSrBBv1bwokRbNfFHCnyeYI"") GoogleMapsApi::Place.nearby(place, {:radius => 1000}) Directions GoogleMapsApi::Directions.get(39.6684948, -79.6375071, 40.4313473, -80.0505404) Using 2 places: GoogleMapsApi::Directions.get(origin_place, dest_place) Contributing Fork it ( https://github.com/[your-github-name]/google_maps_api/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors fridgerator Nick Franken - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fridgerator/google_maps_api"	"Google Maps API"	"true"
"Third-party APIs"	"google_translate"	"https://github.com/greyblake/crystal-google_translate"	"Client for Google Translate"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"1"	"0"	"GitHub - greyblake/crystal-google_translate: Google Translate client for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 2 Fork 0 greyblake/crystal-google_translate Code Issues 0 Pull requests 0 Pulse Graphs Google Translate client for Crystal 7 commits 1 branch 3 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.2.1 v0.2.0 v0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. examples spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md Crystal GoogleTranslate Crystal client for GoogleTranslate Installation Add this to your application's shard.yml: dependencies:   google_translate:     github: greyblake/crystal-google_translate Usage require ""google_translate"" Example The following code translates german word tanzen with a typo(double n) and prints the result: client = GoogleTranslate::Client.new tr = client.translate(""de"", ""en"", ""tanzenn"")  puts ""#{tr.source_lang} -> #{tr.target_lang}"" puts ""Query: #{tr.query}"" puts ""Corrected query: #{tr.corrected_query}"" puts ""Text: #{tr.text}"" tr.variants.each do |word_class, words|   puts word_class   words.each do |word|     puts ""  #{word}""   end end Output: de -> en Query: tanzenn Corrected query: tanzen Text: dance verb   dance   hop   spin   bob   foot  Development To run specs: crystal spec  Contributors greyblake Sergey Potapov - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/greyblake/crystal-google_translate"	"Client for Google Translate"	"true"
"Third-party APIs"	"gravatar.cr"	"https://github.com/fg/gravatar.cr.git"	"A library to use Gravatar service"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"1"	"1"	"GitHub - fg/gravatar.cr Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 4 Fork 1 fg/gravatar.cr Code Issues 0 Pull requests 0 Pulse Graphs No description or website provided. 7 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md gravatar.cr Installation Add this to your application's shard.yml: dependencies:   gravatar:     github: fg/gravatar.cr Usage Add this to your application's shard.yml: require ""gravatar""  puts Gravatar::Picture.profile_picture(""example@email.com"") # => http://www.gravatar.com/avatar/8455938a1db5c475a87d76edacb6284e Contributors fg Fatih GÜRSOY - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fg/gravatar.cr.git"	"A library to use Gravatar service"	"true"
"Third-party APIs"	"openweather.cr"	"https://github.com/lucasocon/openweather.cr"	"A wrapper for the Openweather API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"0"	"0"	"GitHub - lucasocon/openweather.cr: A Crystal wrapper for the Openweather API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 0 Star 2 Fork 0 lucasocon/openweather.cr Code Issues 0 Pull requests 0 Pulse Graphs A Crystal wrapper for the Openweather API 3 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md Openweather.cr A Crystal wrapper for the Openweather API Installation Add this to your application's shard.yml: dependencies:   openweather:     github: lucasocon/openweather.cr Usage require ""openweather"" Get Weather Openweather::Client.new.get(""london"").sys.country # => GB Data available here: http://openweathermap.org/current#current_JSON Contributing Fork it ( https://github.com/[your-github-name]/openweather/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors lucasocon Lucas Ocon - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lucasocon/openweather.cr"	"A wrapper for the Openweather API"	"true"
"Third-party APIs"	"shorturl.cr"	"https://github.com/veelenga/shorturl.cr"	"A library to use URL shortening services"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5"	"1"	"0"	"GitHub - veelenga/shorturl.cr: A tiny library to use URL shortening services Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 5 Fork 0 veelenga/shorturl.cr Code Issues 0 Pull requests 0 Pulse Graphs A tiny library to use URL shortening services 16 commits 1 branch 3 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.2.0 v0.1.1 0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. bin spec src .gitignore .travis.yml LICENSE README.md shard.lock shard.yml README.md shorturl.cr A simple library to use URL shortening services. Inspired by Robby Russell's shorturl. Installation As a dependency in shards.yml: dependencies:   shorturl:     github: veelenga/shorturl.cr     branch: master Usage As easy as it could be: require ""shorturl""  # shorten ShortURL.shorten ""http://google.com""           # => ""http://tinyurl.com/2tx"" ShortURL.shorten ""http://google.com"", :tinyurl # => ""http://tinyurl.com/2tx"" ShortURL.shorten ""http://google.com"", :isgd    # => ""http://is.gd/OwycZW""  # expand ShortURL.expand ""http://tinyurl.com/2tx""       # => ""http://google.com"" Binary As an addition, shorturl binary available for you: $ crystal build bin/shorturl && ./shorturl -h Usage: shorturl [arguments]     -u URL, --url=URL                URL to be shortened     -s SERVICE, --service=SERVICE    Shortening service     -V, --verbose                    Verbose output     -v, --version                    Version     -h, --help                       Prints this help  $ ./shorturl http://google.com http://tinyurl.com/2tx Available services Here is a list of available shortening services in shorturl.cr: is.gd shorl.com tinyurl.com v.gd Contributing Fork it Create your feature branch Implement your feature Run tests with crystal spec Commit your changes Push to the branch Create a new Pull Request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/veelenga/shorturl.cr"	"A library to use URL shortening services"	"true"
"Third-party APIs"	"soundcloud-crystal"	"https://github.com/sferik/soundcloud-crystal"	"A library to access the SoundCloud API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"1"	"1"	"GitHub - sferik/soundcloud-crystal: A library to access the SoundCloud API using Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 8 Fork 1 sferik/soundcloud-crystal Code Issues 0 Pull requests 0 Pulse Graphs A library to access the SoundCloud API using Crystal 1 commit 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.markdown README.markdown A library to access the SoundCloud API using Crystal Example Register a new SoundCloud application at http://soundcloud.com/you/apps/new require ""./src/soundcloud""  client = SoundCloud::REST::Client.new(""YOUR_CLIENT_ID"")  pp client.user(""erik"") pp client.track(206048516) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sferik/soundcloud-crystal"	"A library to access the SoundCloud API"	"true"
"Third-party APIs"	"spotify.cr"	"https://github.com/marceloboeira/spotify.cr"	"A library to access the Spotify API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"23"	"5"	"5"	"GitHub - marceloboeira/spotify.cr: A Crystal wrapper for the Spotify Web API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 23 Fork 5 marceloboeira/spotify.cr Code Issues 4 Pull requests 0 Pulse Graphs 🎧 A Crystal wrapper for the Spotify Web API 69 commits 2 branches 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags abstract-resource master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. example spec src .editorconfig .gitignore .guardian.yml .travis.yml CONTRIBUTING.md doc: Add contributing guide Mar 5, 2016 LICENSE README.md shard.yml README.md spotify.cr A Crystal wrapper for the Spotify API Installation Add this to your application's shard.yml: dependencies:   spotify:     github: marceloboeira/spotify.cr Usage Track require ""spotify""  puts Spotify::Track.find(""23MrkN7g6Q5U7GLIxNHN1B"").name # => Foxey Lady Album require ""spotify""  puts Spotify::Album.find(""7rSZXXHHvIhF4yUFdaOCy9"").name # => Are You Experienced Artist require ""spotify""  puts Spotify::Artist.find(""776Uo845nYHJpNaStv1Ds4"").name # => Jimi Hendrix Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/marceloboeira/spotify.cr"	"A library to access the Spotify API"	"true"
"Third-party APIs"	"TelegramBot"	"https://github.com/hangyas/TelegramBot"	"A wrapper for the Telegram Bot API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"2"	"2"	"GitHub - hangyas/TelegramBot: Telegram Bot API Wrapper for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 10 Fork 2 hangyas/TelegramBot Code Issues 0 Pull requests 0 Pulse Graphs Telegram Bot API Wrapper for Crystal 💎 71 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src LICENSE README.md shard.yml README.md TelegramBot Telegram Bot API wrapper for Crystal Current features all messages type command handler long polling inline queries white & black lists updates via webhooks async requests Usage Create your bot by inheriting from TelegramBot::Bot. Commands Define which commands your bot handles via the cmd method in the CmdHandler module. For example, respond world to /hello and perform simple calculation with /add: require ""TelegramBot""  class MyBot < TelegramBot::Bot   include TelegramBot::CmdHandler    def initialize     super(""MyBot"", TOKEN)      cmd ""hello"" do |msg|       reply msg, ""world!""     end      # /add 5 7 => 12     cmd ""add"" do |msg, params|       reply msg, ""#{params[0].to_i + params[1].to_i}""     end   end end  my_bot = MyBot.new my_bot.polling Custom handlers Override any of the following handle methods to handle Telegram updates, be it messages, inline queries, chosen inline results or callback queries: def handle(message : Message)  def handle(inline_query : InlineQuery)  def handle(inline_query : ChoosenInlineResult)  def handle(callback_query : CallbackQuery) For example, to echo all messages sent to the bot: class EchoBot < TelegramBot::Bot   def handle(message : Message)     if text = message.text       reply message, text     end   end end  EchoBot.new.polling Or to answer inline queries with a list of articles: class InlineBot < TelegramBot::Bot   def handle(inline_query : TelegramBot::InlineQuery)     results = Array(TelegramBot::InlineQueryResult).new     results << TelegramBot::InlineQueryResultArticle.new(""article/1"", ""My first article"", ""Article details"")     answer_inline_query(inline_query.id, results)   end end  InlineBot.new.polling Remember to enable inline mode in BotFather to support inline queries. Webhooks All the examples above use the getUpdates method, constantly polling Telegram for new updates, by invoking the polling method on the bot. Another option is to use the setWebhook method to tell Telegram where to POST any updates for your bot. Note that you must use HTTPS in this endpoint for Telegram to work, and you can use a self-signed certificate, which you can provide as part of the setWebhook method: # Certificate has the contents of the certificate, not the path to it bot.set_webhook(url, certificate) After invoking setWebhook, have your bot start an HTTPS server with the serve command: bot.serve(""0.0.0.0"", 443, ""path/to/ssl/certificate"", ""path/to/ssl/key"") If you run your bot behind a proxy that performs SSL offloading (ie the proxy presents the certificate to Telegram, and then forwards the request to your app using plain HTTP), you may skip the last two parameters, and the bot will listen for HTTP requests instead of HTTPS. When running your bot in serve mode, the bot will favour executing any methods by sending a response as part of the Telegram request, rather than executing a new request. White/blacklists However it's not part of the API you can set black or white lists in the bot's constructor to filter your users by username. whitelist: if user is not present on the list (or doesn't have username) the message won't be handled blacklist: if user is present on the list the message won't be handled Installation Add this to your application's shard.yml: dependencies:   TelegramBot:     github: hangyas/TelegramBot Contributing Contributing is very welcomed! Fork it ( https://github.com/hangyas/TelegramBot/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors hangyas Krisztián Ádám - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hangyas/TelegramBot"	"A wrapper for the Telegram Bot API"	"true"
"Third-party APIs"	"twitter-crystal"	"https://github.com/sferik/twitter-crystal"	"A library to access the Twitter API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"46"	"4"	"5"	"GitHub - sferik/twitter-crystal: A library to access the Twitter API using Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 46 Fork 5 sferik/twitter-crystal Code Issues 1 Pull requests 1 Pulse Graphs A library to access the Twitter API using Crystal 26 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.markdown shard.yml README.markdown A library to access the Twitter API using Crystal Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sferik/twitter-crystal"	"A library to access the Twitter API"	"true"
"Third-party APIs"	"wit-crystal"	"https://github.com/spalladino/wit-crystal"	"Crystal SDK for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5"	"3"	"0"	"GitHub - spalladino/wit-crystal: Crystal SDK for wit.ai Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 5 Fork 0 spalladino/wit-crystal Code Issues 0 Pull requests 0 Pulse Graphs Crystal SDK for wit.ai 13 commits 1 branch 4 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.3.0 v1.2.0 v1.1.0 v1.0.1 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. examples spec src .crystal-version .gitignore .travis.yml LICENSE README.md shard.yml README.md wit-crystal Crystal SDK for Wit.ai. Supports Wit.ai API version 20160526. Runs on Crystal >= 0.17.2. Installation Add this to your application's shard.yml: dependencies:   wit:     github: spalladino/wit-crystal Examples Understand A query to the /message endpoint can be issued by running: crystal examples/understand.cr <access-token> In Buenos Aires > Extracted entities from 'In Buenos Aires' >  location=[{""confidence"" => 0.957859, ""type"" => ""value"", ""value"" => ""Buenos Aires"", ""suggested"" => true}] Context Shows how using a context changes how message entities are understood, by processing message Last week both with and without a reference time. crystal examples/context.cr <access-token> > Understanding message 'Last week' >  Without context:  2016-05-09T00:00:00.000-07:00 >  Ref 2012-03-08:   2012-02-27T00:00:00.000Z Quickstart The code for the quickstart weather application can be executed by running: crystal examples/quickstart.cr <access-token> Usage wit-crystal provides a Wit::App class with the following methods: message - the Wit message API converse - the low-level Wit converse API run_actions - a higher-level method to the Wit converse API interactive - starts an interactive conversation with your bot Refer to the examples folder for sample usage. TODOs Generate and upload documentation Add more specs using webmock or similar tool Acknowledgements The Wit.ai team for building such an awesome tool The developers of the Ruby SDK for Wit.ai, on which this library is heavily inspired Contributors spalladino Santiago Palladino - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/spalladino/wit-crystal"	"Crystal SDK for"	"true"
"Third-party APIs"	"wit.ai"	"https://wit.ai/"	"Crystal SDK for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Wit — landing"	"null"	"null"	"Crystal SDK for"	"true"
"Virtualization"	"rcpu"	"https://github.com/ddfreyne/rcpu"	"A virtual machine emulator and assembler"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"21"	"3"	"3"	"GitHub - ddfreyne/rcpu: VM emulator and assembler written in Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 21 Fork 3 ddfreyne/rcpu Code Issues 0 Pull requests 0 Pulse Graphs VM emulator and assembler written in Crystal http://ddfreyne.github.io/rcpu/ 198 commits 5 branches 0 releases Fetching contributors Crystal 98.4% Makefile 1.6% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages interrupts master soundcloud-tech-talk strange-group-tech-talk Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. samples spec src .gitignore Makefile Projectfile Rewrite emulator in Crystal Mar 14, 2015 README.adoc shard.lock shard.yml README.adoc RCPU RCPU is a virtual machine emulator and assembler written in Crystal. Caution This project is very much a work in progress. Table of Contents Building Usage Tests Architecture Registers Instruction format Instruction set Memory layout Assembly language syntax To do Building You will need Crystal to build RCPU. Once you have Crystal, run make, which will generate the compiled assembler and emulator binaries in the current directory. Usage To assemble a file, use rcpu-assemble, passing the input filename (with the rcs extension). This will generate a corresponding rcb file. For example: % ./rcpu-assemble samples/fib.rcs To run a file, use rcpu-emulate, passing the input filename (with the rcb extension). For example: % ./rcpu-emulate samples/fib.rcb The rcs extension is used for RCPU source files, while rcb is for RCPU binary (i.e. compiled) files. Tests Run make spec to compile and run the tests. Architecture Registers Name Code Size (bytes) Purpose r0 0x00 4 general-purpose r1 0x01 4 general-purpose r2 0x02 4 general-purpose r3 0x03 4 general-purpose r4 0x04 4 general-purpose r5 0x05 4 general-purpose r6 0x06 4 general-purpose r7 0x07 4 general-purpose rpc 0x08 4 program counter (a.k.a instruction pointer) rflags 0x09 1 contains result of cmp(i) rsp 0x0a 4 stack pointer rbp 0x0b 4 base pointer rr 0x0c 4 return value Instruction format Instructions are of variable length. The first byte is the opcode. Register arguments are one byte long, and label/immediate arguments are four bytes long. Instruction set Mnemonic Opcode Arguments Effect Function handling call(i) 0x01, 0x02 reg/imm ret 0x03 (none) Stack management push(i) 0x04, 0x05 reg/imm push a0 onto stack pop 0x06 reg pop into a0 Branching j(i) 0x07, 0x08 reg/imm pc ← a0 je(i) 0x09, 0x0a reg/imm if = then pc ← a0 jne(i) 0x0b, 0x0c reg/imm if ≠ then pc ← a0 jg(i) 0x0d, 0x0e reg/imm if > then pc ← a0 jge(i) 0x0f, 0x10 reg/imm if ≥ then pc ← a0 jl(i) 0x11, 0x12 reg/imm if < then pc ← a0 jle(i) 0x13, 0x14 reg/imm if ≤ then pc ← a0 Arithmetic cmp(i) 0x15, 0x16 reg, reg/imm (see below) mod(i) 0x17, 0x18 reg, reg, reg/imm a0 ← a1 % a2 add(i) 0x19, 0x1a reg, reg, reg/imm a0 ← a1 + a2 sub(i) 0x1b, 0x1c reg, reg, reg/imm a0 ← a1 - a2 mul(i) 0x1d, 0x1e reg, reg, reg/imm a0 ← a1 * a2 div(i) 0x1f, 0x20 reg, reg, reg/imm a0 ← a1 / a2 xor(i) 0x21, 0x22 reg, reg, reg/imm a0 ← a1 ^ a2 or(i) 0x23, 0x24 reg, reg, reg/imm a0 ← a1 | a2 and(i) 0x25, 0x26 reg, reg, reg/imm a0 ← a1 & a2 shl(i) 0x27, 0x28 reg, reg, reg/imm a0 ← a1 << a2 shr(i) 0x29, 0x2a reg, reg, reg/imm a0 ← a1 >> a2 not 0x2b reg, reg a0 ← ~a1 Register handling mov 0x2c reg, reg a0 ← a1 li 0x2d reg, imm a0 ← a1 Memory handling lw 0x2e reg, imm (see below) lh 0x2f reg, imm (see below) lb 0x30 reg, imm (see below) sw 0x31 reg, imm (see below) sh 0x32 reg, imm (see below) sb 0x33 reg, imm (see below) Special sleep 0xfd imm sleep for a0 ms prn 0xfe reg print a0 halt 0xff (none) stops emulation cmp(i) updates the flags register and sets the 0x01 bit to true if the arguments are equal, and the 0x02 bit to true if the first argument is greater than the second. lw, lh and lb load data from memory into a register. lw loads a word (4 bytes), lh loads a half word (2 bytes) and lb loads a byte. Similarly, sw, sh and sb store data from a register into memory. Several opcodes have an (i) variant. These variants take a four-byte immediate argument (meaning the data is encoded in the instruction) rather than a register name. For opcodes that have immediate variants, the Opcode column contains the non-immediate variant followed by the immediate variant. Label arguments are identical to immediate arguments. Memory layout Range Use 0x00 – … Program code … – 0xffff Stack (grows downward, word-aligned) 0x00010000 - 0x00014b00 Video memory (160 by 120 pixels, 1 byte per pixel) Assembly language syntax A lines can be an instruction line, a label line, or a data directive line. Blank lines are ignored. Comments start with the # character and can appear anywhere on a line, including a blank line. For example: 	# load coords 	li r2, 0                 # x (in px) 	li r3, 0                 # y (in px) An instruction line starts with a tab character, followed by the instruction mnemonic, and arguments separated by commas. For example: 	li r3, 0                 # y (in px) 	jei @print-string-done 	addi rsp, rsp, 12 Register arguments are indicated with an r prefix (e.g. rsp or r0). Immediate values can be given in decimal (e.g. 123), in hexadecimal (starting with 0x, e.g. 0xfe), or in binary (starting with 0b, e.g. 0b10010000). Label arguments start with the @ character. A label line starts with an identifier, followed by a colon. For example: print-string-loop: A data directive line starts with a period, followed by the directive name, followed by optional arguments. For example: .byte 0x73 # s .byte 0x6c # l .byte 0x65 # e .byte 0x65 # e .byte 0x70 # p  .word @char-left-parenthesis  # ( .word @char-right-parenthesis # ) .word @char-question-mark     # * - TODO .word @char-question-mark     # + - TODO .word @char-comma             # , .word @char-dash              # - .word @char-period            # . .word @char-slash             # / The supported data directives are .byte, .half and .word; they insert a byte, a half word (two bytes) or a word (four bytes), respectively. See the examples in the samples directory for inspiration. To do Finish implementing all opcodes Tests Line/column numbers in parser error messages RCPU prefix in binaries Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ddfreyne/rcpu"	"A virtual machine emulator and assembler"	"true"
"Web Frameworks"	"amatista"	"https://github.com/werner/amatista"	"A web framework to create quick applications"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"43"	"6"	"3"	"GitHub - werner/amatista: Web Framework for Crystal http://crystal-lang.org Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 43 Fork 3 werner/amatista Code Issues 0 Pull requests 0 Pulse Graphs Web Framework for Crystal http://crystal-lang.org 187 commits 1 branch 6 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.5.2 v0.5.1 v0.5.0 v0.4.1 v0.4.0 v0.3.1 Nothing to show New pull request Latest commit 8e7f67c Dec 24, 2015 werner change Dir.working_directory to Dir.current and require ""html"" to make … it compatible to crystal version 0.10.0 Permalink Failed to load latest commit information. spec fix a bug related to a possible global nil value in specs Oct 18, 2015 src change Dir.working_directory to Dir.current and require ""html"" to make Dec 24, 2015 .gitignore add shards dependency manager Sep 20, 2015 .travis.yml try to solve bug in travis with crystal v0.8.0, requiring shards binary Sep 19, 2015 LICENSE add license file (MIT) Aug 24, 2015 Projectfile add an empty Projectfile file, so Travis CI can run the crystal deps Sep 21, 2015 README.md Update Readme with shard app name Oct 15, 2015 shard.lock update webmock to version 0.4.0 Nov 4, 2015 shard.yml change Dir.working_directory to Dir.current and require ""html"" to make Dec 24, 2015 README.md Amatista This is a web framework build in Crystal to create quick applications. Shard file shard.yml name: myapp version: 0.0.1  dependencies:   amatista:     github: werner/amatista Basic Usage require ""amatista""  class HelloWorldController < Amatista::Controller   get ""/"" do     html = %(<h1> Hello World </h1>)     respond_to(:html, html)   end end  class Main < Amatista::Base   configure do |conf|     conf[:secret_key] = ""secret""   end end  app = Main.new  app.run 3000 Callbacks class ApplicationController < Amatista::Controller   #It will be a redirection if the condition is fulfilled,   #it should not be a session with a key user_id for the redirect to works   before_filter(condition: -> { !get_session(""user_id"") }) do     redirect_to(""/sessions/new"")   end end View System class HelloWorldController < Amatista::Controller   get ""/tasks"" do     tasks = Task.all     # You're going to need a LayoutView class as      # a layout for set_view method to work     respond_to(:html, IndexView.new(tasks).set_view)   end    get ""/tasks.json"" do     tasks = Task.all     respond_to(:json, tasks.to_s.to_json)   end end  class LayoutView < Amatista::BaseView   def initialize(@include)   end    set_ecr ""layout"" end  class IndexView < Amatista::BaseView   def initialize(@tasks)   end    def tasks_count     @tasks.count   end    set_ecr ""index"" end  #Views:  #layout.ecr <html>   <head>     <title>Todo App</title>     <link rel=""stylesheet"" type=""text/css"" href=""/app/assets/stylesheets/bootstrap-theme.min.css"" media=""all"">     <link rel=""stylesheet"" type=""text/css"" href=""/app/assets/stylesheets/bootstrap.min.css"" media=""all"">   </head>   <body>     <div class=""container"">       <div class=""row"">         <div class=""col-xs-8"">           <%= @include %>         </div>       </div>     </div>     <script src=""/app/assets/javascripts/jquery-2.1.3.min.js""></script>     <script src=""/app/assets/javascripts/main.js""></script>     <script src=""/app/assets/javascripts/bootstrap.min.js""></script>   </body> </html>  #index.ecr <div class=""panel panel-success"">   <div class=""panel-heading"">     <h2 class=""panel-title"">Todo Tasks</h2>   </div>    <div class=""panel-body"">     <table class=""table"">       <tbody>       <% @tasks.each do |task| %>         <tr>           <td>             <%= check_box_tag(:task, ""id#{task[0]}"", task[0], task[2], { class: ""checkTask"" }) %>             <%= label_tag(""task_id#{task[0]}"", task[1].to_s) %>           </td>           <td>             <%= link_to(""Edit"", ""/tasks/edit/#{task[0]}"", { class: ""btn btn-success btn-xs"" }) %>           </td>           <td>             <%= link_to(""Delete"", ""/tasks/delete/#{task[0]}"", { class: ""del btn btn-danger btn-xs"" }) %>           </td>         <tr>       <% end %>       <tbody>     </table>     <%= link_to(""New Task"", ""/tasks/new"", { class: ""btn btn-info btn-xs"" } ) %>     <%= label_tag(""total"", ""Total: #{tasks_count}"" ) %>   </div> </div>  Example Contributing Fork it ( https://github.com/werner/amatista/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/werner/amatista"	"A web framework to create quick applications"	"true"
"Web Frameworks"	"amethyst"	"https://github.com/Codcore/Amethyst"	"A Rails inspired web-framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"356"	"36"	"29"	"GitHub - Codcore/amethyst: Amethyst is a Rails inspired web-framework for Crystal language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 36 Star 356 Fork 29 Codcore/amethyst Code Issues 12 Pull requests 0 Wiki Pulse Graphs Amethyst is a Rails inspired web-framework for Crystal language http://codcore.github.io/amethyst/ 295 commits 4 branches 5 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags crystal-head gh-pages master mini-test Nothing to show v0.1.7 v0.1.3 v0.1 v0.0.7 v0.0.2 Nothing to show New pull request Latest commit 0a54e30 Nov 6, 2015 Codcore Merge pull request #62 from etmnk/bugfix_http_request … bugfix http request Permalink Failed to load latest commit information. spec Removed length from Array since it's not longer support in Crystal 0.8.0 Sep 24, 2015 src bugfix http request Oct 30, 2015 .gitignore Added shards support Sep 20, 2015 .travis.yml test against Crystal nightly on Travis Oct 21, 2015 LICENSE Inititialized crystal project May 23, 2015 Projectfile Fix travis.yml, removed unnecessary deps from Projectfile Jun 12, 2015 README.md Added amethyst-bin to README.md for quickly generating new applications Jul 21, 2015 shard.lock Added shards support Sep 20, 2015 shard.yml Added shards support Sep 20, 2015 README.md Amethyst is a web framework written in the Crystal language. The goals of Amethyst are to be extremely fast and to provide agility in application development, much like Rails. Why did I call it ""Amethyst""? Because Github uses a light purple color for the Crystal language similar to the amethyst gemstone. Latest version - 0.1.7 Note that Amethyst is at it early stages, so it lacks for whole bunch of things. But you can give a hand with contributing. Roadmap Amethyst examples For detailed information, see docs on our wiki below: Installation Usage Controllers Routing Middleware Static files Applications Here are some benchmarking results For now, next things are implemented: class-based controllers with method-based actions views for actions (*.ecr) filters for action middleware support simple REST routing default routes for controller path, GET and POST params inside actions basic cookies support static files serving http logger and timer for developers simple environments support simple session support Example Here is classic 'Hello World' in Amethyst require ""amethyst""  class WorldController < Base::Controller   actions :hello    view ""hello"", ""#{__DIR__}/views""   def hello     @name = ""World""     respond_to do |format|       format.html { render ""hello"" }     end   end end  class HelloWorldApp < Base::App   routes.draw do     all ""/"",      ""world#hello""     get ""/hello"", ""world#hello""     register WorldController   end end  app = HelloWorldApp.new app.serve  # /views/hello.ecr Hello, <%= name %> Using amethyst-bin to quickly generate your application amethyst-bin is an executable shell script to help you quickly generate your Amethyst application. It handles installing the base dependencies, views / controllers folder generation and main application file generation. curl https://raw.githubusercontent.com/Sdogruyol/amethyst-bin/master/amethyst > amethyst && chmod +x amethyst ./amethyst sample  Voila! Your app is ready now you can run it cd sample && crystal run src/sample.cr Development Feel free to fork project and make pull-requests. Contributing I would be glad for any help with contributing. Fork it ( https://github.com/Codcore/amethyst/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors Andrew Yaroshuk Codcore - creator, maintainer Support Amethyst is not a commercial project,it is developed on pure enthusiasm, so if you want to support Amethyst developing, you can help with donating. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Codcore/Amethyst"	"A Rails inspired web-framework"	"true"
"Web Frameworks"	"carbon-crystal"	"https://github.com/benoist/carbon-crystal"	"A framework with Rails in mind"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"36"	"4"	"3"	"GitHub - benoist/carbon-crystal: Carbon Crystal - Web framework for Crystal Lang Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 36 Fork 3 benoist/carbon-crystal Code Issues 0 Pull requests 0 Pulse Graphs Carbon Crystal - Web framework for Crystal Lang 118 commits 4 branches 2 releases Fetching contributors Crystal 99.0% Other 1.0% Crystal Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master old_callback_style update-0.16 view_helpers Nothing to show v.0.1.0 v0.1.0 Nothing to show New pull request Latest commit 3ec4bf3 Apr 14, 2016 benoist Merge branch 'master' of github.com:benoist/carbon-crystal Permalink Failed to load latest commit information. bin added first support for tags in views Dec 20, 2015 example added first support for tags in views Dec 20, 2015 spec update to 0.14.2 Mar 23, 2016 src fix content type for head Apr 14, 2016 .gitignore Fix specs Nov 30, 2015 .travis.yml update travis Jan 24, 2016 Guardfile added simple CarbonSupport::Callbacks Oct 25, 2015 LICENSE first commit Sep 25, 2015 Makefile Added Makefile Oct 6, 2015 README.md fixed spec and updated readme Nov 30, 2015 VERSION Added Makefile Oct 6, 2015 shard.yml remove duktape dep Mar 23, 2016 README.md carbon Carbon Crystal A framework with Rails in mind. Status Only works on latest master. To use locally build it from source or on osx use brew install crystal-lang --HEAD. Right now it's still alpha stage. I am testing this in production on a small project, but I wouldn't recommend to do it unless you really want to :) Release goal For the first release I'm aiming towards a 15 min blog post screencast. TODO Notifications (ActiveSupport like) Middleware Send file Static File Runtime RequestId Logger RemoteIP Exceptions ParamsParser Head Cookies Sessions Cookie Store Flash ConditionalGet ETag Resourceful routing Action filters Conditional Halting Generators Asset pipeline View helpers Write specs Contributing Fork it ( https://github.com/[your-github-name]/carbon/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors benoist Benoist Claassen - creator, maintainer JanDintel JanDintel - contributor Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/benoist/carbon-crystal"	"A framework with Rails in mind"	"true"
"Web Frameworks"	"chocolate"	"https://github.com/Grabli66/chocolate"	"Simple web framework and template engine"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"1"	"0"	"GitHub - Grabli66/chocolate: Simple web framework and template engine Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 10 Fork 0 Grabli66/chocolate Code Issues 0 Pull requests 0 Wiki Pulse Graphs Simple web framework and template engine 16 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 02ec19f Oct 25, 2015 Grabli66 new error handler. bug fix Permalink Failed to load latest commit information. spec init Oct 3, 2015 src new error handler. bug fix Oct 25, 2015 .gitignore init Oct 3, 2015 .travis.yml init Oct 3, 2015 LICENSE init Oct 3, 2015 README.md new error handler. bug fix Oct 25, 2015 shard.yml init Oct 3, 2015 README.md chocolate Simple web framework and template engine Installation Add this to your application's shard.yml: dependencies:   chocolate:     github: Grabli66/chocolate Usage Need latest crystal compiler to compile some samples. Hello world require ""chocolate""  include Zephyr include Chocolate  get ""/"" do   ""Hello, world!"" end  listen {   port 8080 } Hello with template require ""chocolate""  include Zephyr include Chocolate  get ""/"" do   html {     head {       title(text: ""Hello world"")           }         body {       div(text: ""Hello, world!"")     }   } end  listen {   port 8080 } Hello with view require ""chocolate""  include Zephyr include Chocolate  class HelloView   def render     html {       head {         title(text: ""Hello world"")             }           body {         div(text: ""Hello, world!"")       }     }   end end  get ""/"" do   HelloView.new end  listen {   port 8080 } Handle params require ""chocolate""  include Zephyr include Chocolate  get ""/registration/success"" do   html {     body {       div(css: ""result"", text: ""Success"")     }   } end  get ""/blog/:id"" do |req|   blog = Database.get_blog(req.params[""id""])   blog.to_s end  post ""/registration/singup"" do |req|   Database.save_user(req.params[""email""], req.params[""password""])     redirect(""/registration/success"") end Handle static files require ""chocolate"" include chocolate include zephyr  listen {   port 8080   static_dir ""./static"" } Handle errors require ""chocolate""  include Zephyr include Chocolate  on_exception ResourceNotFoundException do   ""NOT FOUND"" end  on_exception Exception do   ""INTERNAL ERROR"" end  listen {   port 8080   } JSON response require ""json"" require ""chocolate""  include Zephyr include Chocolate  class Database   def self.get_user(id)     User.new(1, ""John"", ""Doe"")   end end  class User   JSON.mapping({     id: Int32,     name: String,     email: String   })    def initialize(@id, @name, @email)   end end  get ""/user/:id"" do |req|   user = Database.get_user(req.params[""id""] as String)   json(user) end  listen {   port 8080 } View inheritance require ""chocolate""  include Zephyr include Chocolate  abstract class RootView < View   abstract def render_content    def render     html {       head {         title(text: @title)       }       body {         header {           ul(css: ""menu"") {             li(text: ""Home"") {               css_add(""active"") if @location == :home             }             li(text: ""Blog"") {               css_add(""active"") if @location == :blog             }           }         }          include_element(render_content)       }     }   end end  class HomeView < RootView   def initialize     @title = ""Home""     @location = :home   end    def render_content     div(css: ""home"") {       h1(text: ""HOME"")     }   end end  class BlogView < RootView   def initialize     @title = ""Blog""     @location = :blog   end    def render_content     div(css: ""blog"") {       h1(text: ""Blog"")     }   end end  get ""/"" do   HomeView.new end  get ""/blog"" do   BlogView.new end  listen {   port 8080 } Route group require ""../chocolate/src/**""  include Chocolate include Zephyr  class SessionNotFoundException < Exception end  on_exception SessionNotFoundException do   ""SESSION NOT FOUND"" end  group do   before do |req|     raise SessionNotFoundException.new unless req.params[""session_id""]?   end    get ""/user/:id"" do |req|     req.params[""id""] as String   end    get ""/blog/:id"" do |req|     req.params[""id""] as String   end end  listen {   port 8080 } Contributing Fork it ( https://github.com/Grabli66/chocolate/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors Grabli66 (https://github.com/Grabli66) Grabli66 - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Grabli66/chocolate"	"Simple web framework and template engine"	"true"
"Web Frameworks"	"frost"	"https://github.com/ysbaddaden/frost"	"Full featured MVC Web Framework, largely inspired by Ruby on Rails"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"70"	"15"	"5"	"GitHub - ysbaddaden/frost: Full Featured Web Framework for the Crystal Programming Language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 70 Fork 5 ysbaddaden/frost Code Issues 6 Pull requests 1 Pulse Graphs Full Featured Web Framework for the Crystal Programming Language 81 commits 3 branches 5 releases 2 contributors Crystal 99.5% Other 0.5% Crystal Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix-ivars gh-pages master Nothing to show v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit aa68878 Mar 23, 2016 ysbaddaden Release: v0.2.3 Permalink Failed to load latest commit information. bin .env for testing Nov 7, 2015 guides Correct errors in guides Jan 3, 2016 src Fix: invalid memory access in Frost::Query::Data#dup Mar 23, 2016 test Fix: Crystal 0.14.0 compatibility Mar 22, 2016 .env.example Rename to Frost! Dec 14, 2015 .gitignore .env for testing Nov 7, 2015 .travis.yml TravisCI Dec 28, 2015 CHANGELOG.md Release: v0.2.3 Mar 23, 2016 CODE_OF_CONDUCT.md README, CONTRIBUTING + CODE OF CONDUCT Dec 14, 2015 CONTRIBUTING.md Documentation: getting started Dec 24, 2015 MIT-LICENSE First import: router, dispatcher, controllers, records, database, que… Aug 1, 2015 Makefile Fix: application generator Jan 22, 2016 README.md README: Correct CONTRIBUTING link Jan 22, 2016 shard.lock Fix: Crystal 0.14.0 compatibility Mar 22, 2016 shard.yml Release: v0.2.3 Mar 23, 2016 README.md Frost Full featured MVC Web Framework for the Crystal programming language, largely inspired by Ruby on Rails (ie. implements most of its API). Frost is to Ruby on Rails what Crystal is to Ruby: similar API, developer hapiness and productivity, but enhanced with static typing (mostly hidden) and incredible performance. STATUS: DEVELOPER PREVIEW Frost is in developer preview, and must be considered alpha software until further notice. Features may be added, dropped, tweaked, or changed at any time. Please experiment with Frost, contribute to Frost, let's make it incredible, but build software with it at your own risk! TLDR: using Frost is like using Crystal. It's great, but be prepared to fix your software on a regular basis. You've been warned :-) INSTALL Start by cloning the Frost repository, then use the application generator to bootstrap your project. For example for a myapp application: $ git clone https://github.com/ysbaddaden/frost.git $ crystal frost/src/cli.cr -- new myapp $ cd myapp $ crystal deps install  Getting Started Nothing fancy, just the regular flow: Data: write migrations in db/migrations; create models in app/models; write tests in test/models. Application Logic: add routes to config/routes.cr; create controllers and actions in app/controllers; design views in app/views; write tests in test/controllers. See Getting Started With Frost for an example. Requirements Since Crystal introduces changes on a regular basis, Frost may not compile with the version of Crystal you are using. The Frost master branch should follow changes in Crystal's master branch, and thus require the Crystal master branch. Frost releases should always be usable with the latest Crystal release. In some cases it may require the previous Crystal release. In this case, switching to the Frost master branch should fix the compilation errors until a new Frost release is made. Contribute Thanks for considering to contribute! Please see CONTRIBUTING to get started. License Distributed under the MIT License. See MIT-LICENSE Authors The Ruby on Rails Team that modeled an awesome framework. Julien Portalier (@ysbaddaden) for bringing it to Crystal. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ysbaddaden/frost"	"Full featured MVC Web Framework, largely inspired by Ruby on Rails"	"true"
"Web Frameworks"	"iceberg"	"https://github.com/adlerhsieh/iceberg"	"A full-stack web framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"21"	"5"	"0"	"GitHub - adlerhsieh/iceberg: A full-stack web framework in Crystal-lang Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 21 Fork 0 adlerhsieh/iceberg Code Issues 0 Pull requests 0 Pulse Graphs A full-stack web framework in Crystal-lang 33 commits 2 branches 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master parameters Nothing to show Nothing to show New pull request Latest commit b175c9b Dec 28, 2015 adlerhsieh Merge pull request #1 from naltun/patch-1 … fix grammar error in README Permalink Failed to load latest commit information. spec remove invalid tests Oct 1, 2015 src update setup Oct 11, 2015 .gitignore ignore compiled files in bin dir Oct 11, 2015 .travis.yml update .travis.yml Sep 27, 2015 LICENSE init Sep 26, 2015 README.md Update README.md Dec 24, 2015 shard.yml init Sep 25, 2015 README.md Iceberg (Pre-Alpha) Iceberg is a full-stack web framework in crystal-lang. It aims to serve as a MVC framework for developers to quickly create a functional website or software. NOTE: It is in its very earlier stage and should not be used in production environment. However, feel free to try it out, request features, or report bugs. Requirement At least Crystal 0.8.0 installed. Installation 1. Create a Crystal project $ crystal init app project_name  2. Add to shard.yml dependencies:   iceberg:     github: adlerhsieh/iceberg 3. Run shards command. 4. Run ./libs/iceberg/iceberg/bin/setup command. It creates the necessary config files for you. My First App Check src/controllers/app_controller.cr. There should be an index action. # This is default. class AppController < Iceberg::Controller   def index     view :index   end end And the same in src/views/app/index.cr. # This is default. class AppIndexView < Iceberg::View   def process   end   html :app, :index end No need to change anything above for our first app. Now, go to src/routes.cr and route root to AppController: Iceberg::Router.draw do   # Add this   get ""/"", :app end And add the following to src/views/app/html/index.ecr. Hello World!  Finally: Run ./server command in root directory. Go to http://localhost:2000. You will see Hello World. Yay! Configuration Routing Route mapping is in src/routes.cr file. Available syntax: Iceberg::Router.draw do   get ""/"", :app              #=> route ""/"" to AppController#index   get ""/app"", ""app#index""    #=> ditto   get ""/new_app"", ""app#new""  #=> route ""/new_app"" to AppController#new action   post ""/new_app"", ""app#new"" #=> ditto, but with POST request end Controller Controller receives http request and decides what to process. It is designed to handle only http requests so don't put any business logic here. Leave it to view classes. Current functionality: Render HTML The controller passes the action to View and handles all operations there. A View returns a string of HTML that will respond to the browser. The syntax is view :action, where Iceberg looks for a view class name contains both Controller name and Action name. For example: class MyController < Iceberg::Controller   def index     # this action looks for MyIndexView in `views` directory      view :index    end end You can either specify another view file. class MyController < Iceberg::Controller   def index     # this action looks for MyAppView in `views` directory      view :app   end end However, it is recommended to pair the names of a view and controller action together. View View is where your logic is. It uses ECR library to embed Crystal into HTML text. The most important part is that it brings instance variables into HTML, like ERB in Ruby. Check ECR library usage in Crystal official repo. One view class renders one file. This is a little different from Rails in which view is defined in a controller action. The process action is necessary since Iceberg takes it as the main function in this class, like func main in Golang. It works like this: class AppIndexView < Iceberg::View   def process     @name = ""John""   end   html :app, :index end And in your index.ecr file: Hello, <%= @name %> You will see Hello, John in browser. In addition, it is recommended to organize your view folder structure like: src |--views   |--app     |--index.cr     |--html       |--index.ecr  Under the views directory, app is the name of a controller class, and index is its action. The html folder contains all ecr files. Stay Tuned Everything is still in progress. It will be officially released once it's ready! Contributing Fork it ( https://github.com/adlerhsieh/iceberg/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/adlerhsieh/iceberg"	"A full-stack web framework"	"true"
"Web Frameworks"	"kemal"	"https://github.com/sdogruyol/kemal"	"Lightning Fast, Super Simple web framework. Inspired by Sinatra"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"804"	"42"	"56"	"GitHub - sdogruyol/kemal: Lightning Fast, Super Simple web framework for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 42 Star 804 Fork 56 sdogruyol/kemal Code Issues 4 Pull requests 0 Pulse Graphs Lightning Fast, Super Simple web framework for Crystal http://kemalcr.com 385 commits 6 branches 20 releases 26 contributors Crystal 99.3% Other 0.7% Crystal Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags content-for error-404-customize error-handler gh-pages instance-vars master Nothing to show v0.14.1 v0.14.0 v0.13.0 v0.12.0 v0.11.2 v0.11.1 v0.11.0 v0.10.0 v0.9.3 v0.9.2 v0.9.1 v0.9.0 v0.8.0 v0.7.0 v0.6.0 v0.5.0 0.4.0 0.3.0 0.2.0 0.1.1 Nothing to show New pull request Latest commit 09d82ed Jul 14, 2016 sdogruyol Add context store Permalink Failed to load latest commit information. samples Update websocket_server.cr Mar 19, 2016 spec Add context store Jul 14, 2016 src Add context store Jul 14, 2016 .gitignore Implement radix algorithm for routing (thanks to beryl) Jan 22, 2016 .travis.yml Update .travis.yml Dec 6, 2015 Guardfile Added Guardfile Oct 28, 2015 LICENSE Add LICENSE Jun 15, 2016 README.md Update README.md Mar 19, 2016 shard.yml Bump version Jul 13, 2016 README.md Kemal Lightning Fast, Super Simple web framework for Crystal. Inspired by Sinatra but with superior performance and built-in WebSocket support. Super Simple ⚡️ require ""kemal""  # Matches GET ""http://host:port/"" get ""/"" do   ""Hello World!"" end  # Creates a WebSocket handler. # Matches ""ws://host:port/socket"" ws ""/socket"" do |socket|   socket.send ""Hello from Kemal!"" end  Kemal.run Start your application! crystal src/kemal_sample.cr  Go to http://localhost:3000 Check documentation or samples for more. Super Fast 🚀 Numbers speak louder than words. Framework Request Per Second Avg. Response Time Kemal (Production) 100238 395.44μs Sinatra (Thin) 2274 43.82ms These results were achieved with wrk on a Macbook Pro Late 2013. (2Ghz i7 8GB Ram OS X Yosemite) Features Support all REST verbs Websocket support Request/Response context, easy parameter handling Middlewares Built-in JSON support Built-in static file serving Built-in view templating via Kilt Documentation You can read the documentation at the official site kemalcr.com Thanks Thanks to Manas for their awesome work on Frank. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sdogruyol/kemal"	"Lightning Fast, Super Simple web framework. Inspired by Sinatra"	"true"
"Web Frameworks"	"kemalyst"	"https://github.com/drujensen/kemalyst"	"A rails like framework based on kemal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"20"	"3"	"2"	"GitHub - drujensen/kemalyst: A rails like framework based on kemal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 20 Fork 2 drujensen/kemalyst Code Issues 0 Pull requests 0 Pulse Graphs A rails like framework based on kemal 191 commits 2 branches 1 release Fetching contributors Crystal 90.8% HTML 5.4% CSS 3.8% Crystal HTML CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.1.0 Nothing to show New pull request Latest commit aa5110b Jul 7, 2016 drujensen fix markup Permalink Failed to load latest commit information. config re-enable sqlite May 31, 2016 doc update docs and remove .watch.out Jun 30, 2016 spec add logger helper and remove param to logger handler Jun 30, 2016 src add logger helper and remove param to logger handler Jul 1, 2016 .env suppport 0.18.2 Jun 21, 2016 .gitignore upload docs May 31, 2016 .travis.yml try upgrading docker Apr 15, 2016 Dockerfile use drujensen/crystal-0.18 image Jun 25, 2016 LICENSE initial checkin Feb 23, 2016 README.md fix markup Jul 7, 2016 docker-compose.yml remove docker database dependencies Jun 25, 2016 shard.lock update model shard Jun 30, 2016 shard.yml rename resources to templates Jun 29, 2016 README.md WIP (Work In Progress) Kemalyst Kemalyst is a yarlf (yet another rails like framework) that is based on on super fast kemal. The framework leverages the http handlers which are similar to Rack middleware. The router and controllers are an extension of the same middleware so you can chain any compatible HTTP::Handler before or after the routing handler so you can limit a particular handler to a sub-tree of your routes. The model is a simple ORM mapping and supports MySQL, PG and SQLite. The views are handled using kilt and several macros to simplify development. Installation Install Crystal You can find instructions on how to install Crystal from Crystal's Website. I recommend using crenv to manage your crystal versions. Create a Crystal App crystal init app [your_app] cd [your_app]  Add kemalyst dependency to your shard.yml dependencies:   kemalyst:     github: drujensen/kemalyst     branch: master   # optional   pg:     github: will/crystal-pg     branch: master   mysql:     github: waterlink/crystal-mysql     branch: master   sqlite3:     github: manastech/crystal-sqlite3     branch: master  and run shards update. Post Install To keep a similar structure to yarlf, several directories and files will be installed. This structure should look familiar to you if your coming from a Rails background. config - Each handler may have its own config. The database.yml and routes.cr are also here. db - holds the migrate.cr script and any other db related artifacts. libs - shards are installed here. public - Default location for html/css/js files. The static handler points to this directory. spec - all the crystal specs go here. src - all the source code goes here. In rails, this would be your apps folder. The post install will only run if it doesn't find a src/app.cr file. You may want to remove the remnants of crystal init: rm -r src/[your_app] rm spec/[your_app_spec].cr rm spec/spec_helper.cr_old  Usage Run Locally To test the demo app locally: create a postgres database called [your_app] run export DATABASE_URL=postgres://[username]:[password]@localhost:5432/[your_app] migrate the database: crystal db/migrate.cr run the specs: crystal spec To build the demo app locally: build the app crystal build --release src/app.cr run with ./app visit http://0.0.0.0:3000/ Run with docker compose To run the demo app, we are including a Dockerfile and docker-compose.yml. If you have docker setup, you should be able to run: docker-compose build docker-compose run web crystal db/migrate.cr docker-compose up web  This will download an ubuntu/cedar image compatible with heroku and has all the dependencies installed including crystal. Now you should be able to hit the site: open ""http://$(docker-machine ip default)""  Cookie Session You will need to set a secret for the session. Run the following command: crystal eval ""require \""secure_random\""; puts SecureRandom.hex(64)""  copy the secret and set this in config/session.cr. Sample Applications Several sample applications are provided: Blog Kemalyst Chat Kemalyst ToDo Backend Kemalyst Configure App All config settings are in the /config folder. Each handler has its own settings. You will find the database.yml and routes.cr here. Checkout the samples that demonstrates a traditional blog site and a websocket chat app. Middleware HTTP::Handlers There are 6 handlers that are pre-configured for Kemalyst: Logger.instance(@logger) - Logs all requests/responses to the @logger provided Error.instance - Handles any Exceptions and renders a response. Static.instance - Delivers any static assets from the ./public folder. Session.instance - Provides a Cookie Session that can be accessed from the context.session Params.instance - Unifies the parameters into context.params Router.instance - Routes requests to other handlers\controllers based on the HTTP method and path. Other handlers available for Kemalyst: BasicAuth.instance(username, password) - Provides Basic Authentication. CORS.instance - Handles Cross Origin Resource Sharing. CSRF.instance - Helps prevent Cross Site Request Forgery. You may want to add, replace or remove handlers based on your situation. You can do that in the Application configuration config/application.cr: Kemalyst::Application.config do |config|   # handlers will be chained in the order provided   config.handlers = [     Kemalyst::Handler::Logger.instance(config.logger),     Kemalyst::Handler::Error.instance,     Kemalyst::Handler::Params.instance,     Kemalyst::Handler::CORS.instance, # Enable CORS     Kemalyst::Handler::Router.instance   ] end  Router The router will perform a lookup based on the method and path and return the chain of handlers you specify in the routes.cr file. An example of a route would be: get ""/"",   DemoController::Index.instance  You may chain multiple handlers in a route using an array: get ""/"", [ BasicAuth.instance(""username"", ""password""),            DemoController::Index.instance ]  This is how you would configure a WebSocket Controller: get ""/"", [ ChatController::Chat.instance,            ChatController::Index.instance ]  See below for more information on how to create a WebSocket Controller. You can use any of the following methods: get, post, put, patch, delete, all You can use a * to chain a handler for all children of this path: all    ""/posts/*"",   BasicAuth.instance(""admin"", ""password"")  # all of these will be secured with the BasicAuth handler. get    ""/posts/:id"", DemoController::Show.instance put    ""/posts/:id"", DemoController::Update.instance delete ""/posts/:id"", DemoController::Delete.instance   You can use :variable in the path and it will set a context.params[""variable""] to the value in the url. Controllers The Controller inherits from HTTP::Handler which is the middleware similar to Rack's middleware. The handlers are chained together in a linked-list and each will perform some action against the HTTP::Server::Context and then call the next handler in the chain. The router will continue this chain for a specific route. The final handler should return the String that will be rendered as the body and then the chain will unwind and perform post handling. An example of a controller: require ""../models/post""  class Index < Kemalyst::Controller   def call(context)     posts = Post.all(""ORDER BY created_at DESC"")     render ""post/index.ecr"", ""main.ecr""   end end  There are several helper macros that set content type and response.   render   ""filename.ecr""       # renders an .ecr template   render   ""filename.ecr"", ""layout.ecr"" # renders an .ecr template with layout   redirect ""path""               #redirect to path   text     ""body"", 200          #render text/plain with status code of 200   json     ""{}"".to_json, 200    #render application/json with status code of 200   html     ""<html></html>"", 200 #render text/html with status code of 200  WebSocket Controllers The WebSocket Controller will handle upgrading a HTTP Request to a WebSocket Connection. An example WebSocket Controller: class Chat < Kemalyst::WebSocket   @sockets = [] of HTTP::WebSocket   @messages = [] of String    def call(socket : HTTP::WebSocket)     @sockets.push socket     socket.on_message do |message|       @messages.push message       @sockets.each do |a_socket|         a_socket.send @messages.to_json       end     end   end end The Chat class will override the call method that is expecting an HTTP::WebSocket to be passed which it would maintain and properly handle messages to and from each socket. This class will manage an array of HTTP::Websockets and configures the on_message callback that will manage the messages that will be then be passed on to all of the other sockets. It's important to realize that if the request is not asking to be upgraded to a websocket, it will call the next handler in the path. If there is no more handlers configured, a 404 will be returned. Here is an example routing configuration: get ""/"", [ ChatController::Chat.instance,            ChatController::Index.instance ] The first one is a WebSocket Controller and the second is a standard Controller. If the request is not a WebSocket upgrade request, it will pass-through and call the second one that will return the html page. To see a full example application, checkout Chat Kemalyst Views Views are rendered using Kilt. Currently, there are 4 different templating languages supported by Kilt: ecr, mustache, slang and temel. Kilt will select the templating engine based on the extension of the file so index.ecr will render the file using the ECR engine. The render method is configured to look in the ""src/views"" path to keep the controllers simple. You may also render with a layout which will look for this in the ""src/views/layouts"" directory. render ""post/index.ecr"", ""main.ecr""   This will render the index.ecr template inside the main.ecr layout. All local variables assigned in the controller are available in the templates. An example views/post/index.ecr: <% posts.each do |post| %>   <div>     <h2><%= post.name %></h2>     <p><%= post.body %></p>     <p>       <a href=""/posts/<%= post.id %>"">read</a>       | <a href=""/posts/<%= post.id %>/edit"">edit</a> |       <a href=""/posts/<%= post.id %>?_method=delete"" onclick=""return confirm('Are you sure?');"">delete</a>     </p>   </div> <% end %>  And an example of views/layouts/main.ecr: <!DOCTYPE html> <html>   <head>     <title>Example Layout</title>     <link rel=""stylesheet"" href=""/stylesheets/main.css"">   </head>   <body>     <div class=""container"">       <div class=""row"">         <div class=""col-sm-12"">           <%= content %>         </div>       </div>     </div>   </body> </html>  The <%= content %> is where the template will be rendered in the layout. Models The models are a simple ORM mechanism that will map objects to rows in the database. There is no dependency on using this model. I recommend looking at Active Record.cr by waterlink as an alternative to this simplistic approach. The mapping is done using a sql_mapping macro. An example models/post.cr require ""kemalyst-model/adapter/pg""  class Post < Kemalyst::Model   adapter pg    sql_mapping({     name: [""VARCHAR(255)"", String],     body: [""TEXT"", String]   })  end  The mapping will automatically create the id, created_at and updated_at column mapping that follows the active_record convention in Rails. There are several methods that are provided in the model. self.drop - DROP table... self.create - CREATE table... self.clear - DELETE from table self.migrate = Add/Update columns to match model definition self.prune - Remove any undefined fields from the database save - Insert or Update depending on if ID is set destroy - DELETE FROM table WHERE id = this.id all(where) SELECT * FROM table #{WHERE clause};"" find(id) - SELECT * FROM table WHERE id = this.id LIMIT 1;"" You can find more details at Kemalyst Model Validation Another Library included with Kemalyst is validation of your models. You can find more details at Kemalyst Validators Contributing Fork it ( https://github.com/drujensen/kemalyst/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors drujensen drujensen - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/drujensen/kemalyst"	"A rails like framework based on kemal"	"true"
"Web Frameworks"	"moonshine"	"https://github.com/dhruvrajvanshi/Moonshine"	"A minimal web framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"123"	"10"	"14"	"GitHub - dhruvrajvanshi/Moonshine: Web framework for Crystal language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 123 Fork 14 dhruvrajvanshi/Moonshine Code Issues 4 Pull requests 1 Pulse Graphs Web framework for Crystal language 96 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 674ff60 Jun 10, 2016 dhruvrajvanshi Deprecation Permalink Failed to load latest commit information. examples Some refactoring, added some aliases and added a static dir middlewar… Dec 12, 2015 spec Some refactoring, added some aliases and added a static dir middlewar… Dec 12, 2015 src Added StaticDirs to Utils Dec 12, 2015 .gitignore Initial commit Apr 25, 2015 .travis.yml test against Crystal nightly on Travis Oct 21, 2015 LICENCE Added MIT licence May 2, 2015 README.md Deprecation Jun 10, 2016 shard.yml Version bump in shard.yml Dec 12, 2015 README.md Moonshine Notice: This repository is no longer maintained. Kemal does pretty much what Moonshine does and it has better documentation. Moonshine is a minimal sinatra like web framework for the Crystal language. Installation Add this to your application's shard.yml: dependencies:   moonshine:     github: dhruvrajvanshi/Moonshine Usage Code speaks louder than words, so here's an example. require ""moonshine""  include Moonshine include Moonshine::Utils::Shortcuts include Moonshine  app = App.new  # respond to all HTTP verbs app.route ""/"", do |request|   ok(""Hello Moonshine!"") end  # or particular HTTP verbs app.get ""/get"", do |request|   ok(""This is a get response"") end  # you can set response headers app.get ""/api"", do |request|   res = ok(""{\""name\"": \""moonshine\""}"")   res.headers[""Content-type""] = ""text/json""   res end  app.run(8000) Form Parameters Moonshine automatically parses POST and GET parameters for you. The get and post properties are hashes of these params. app.get ""/putparams"", do |request|   ok(""<h1>POST<h1><p>#{request.post}</p><h2>GET<h2><p>#{request.get}</p>"") end Controllers Controllers are objects which can respond to multiple routes. Set the @rotuer instance variable of a controller to specify routing within controller. Add the controller to the app using app.controller method. @router maps between a route and an action. Action can be any object with a call method (usually a Proc). # Inherit from Moonshine::Controller to define a controller class HomeController < Moonshine::Controller   def initialize()     @viewcount = 0     @router = {       ""GET /"" => ->get(Request),     }   end    def get(req)     @viewcount += 1     ok(""This page has been visited #{@viewcount} times."")   end end  # Bind controller to the app object app.controller ""/"", HomeController.new An action can also be a string containing the method name provided that the method is defined in the controller, and the controller name symbol has been passed to the actions macro in the controller definition. class PostController < Moonshine::Controller   actions :get_all_posts, :get_post   def initialize()     @posts = [           Post.new(""Post1""),           Post.new(""Post2"")          ] of Post     @router = {       ""GET /posts"" =>""get_all_posts"",       ""GET /posts/:id"" => ""get_post""     }   end    def get_post(req)     ...   end    def get_all_posts(req)     ...   end end  app.controller(PostController.new) String and proc actions can also be mixed in a single router. Middleware You can either create middleware classes or individual methods that process request or response Middleware Classes You can add middleware classes to your application by inheriting from Moonshine::Middleware. Your class can override process_request and process_response methods to globally alter request and response objects. class Hello < Moonshine::Middleware   def process_request(req)     req.headers[""User""] = ""Annonymous""   end    def process_response(req, res)     req.body += ""\nFooter""   end end app.middleware_object Hello.new Request Middleware # add request middleware app.request_middleware do |req|   unless req.get.has_key? ""user""     Moonshine::Http::Response.new(200, ""Not allowed"")   else     nil   end end To add a request middleware, call app.request_middleware with a block that returns a response or nil. If the method returns nil, the response chain continues, otherwise, the response is sent back. Response Middleware # add response middleware app.response_middleware do |req, res|   res.body = ""Modified""   res end Response middleware methods take request and response arguments and return a response. This is used to globally alter the response of the application. Response middleware are processed in order. Changelog 0.3.0 : Renamed base module to core.         Aliased Moonshine::App = Moonshine::Core::App (Previously Moonshine::Base::App)         Aliased Moonshine::Controller = Moonshine::Core::Controller         Moved Moonshine::Middleware::Base => Moonshine::Core::Middleware         Aliased Moonshine::Middleware = Moonshine::Core::Middleware         Added Moonshine::Utils::StaticDirs middleware class. It can serve multiple directories  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dhruvrajvanshi/Moonshine"	"A minimal web framework"	"true"
"Web Servers"	"fast-http-server"	"https://github.com/sdogruyol/fast-http-server"	"Super fast, zero configuration command line HTTP Server."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"70"	"4"	"6"	"GitHub - sdogruyol/fast-http-server: Super fast, zero configuration command line HTTP Server. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 70 Fork 6 sdogruyol/fast-http-server Code Issues 1 Pull requests 1 Pulse Graphs Super fast, zero configuration command line HTTP Server. 21 commits 1 branch 5 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.4.1 v0.4.0 v0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit 8dd907c Mar 12, 2016 sdogruyol Update benchmark Permalink Failed to load latest commit information. dist/mac spec src 0.4.0 Mar 12, 2016 .gitignore .travis.yml First commit Dec 23, 2015 LICENSE README.md Update benchmark Mar 12, 2016 shard.yml README.md fast-http-server Super fast, zero configuration command line HTTP Server written in Crystal programming language. Usage Zero configuration. fast-http-server By default fast-http-server listens port 3000. Go to localhost:3000. To listen on a different port you can start fast-http-server with -p --port option. fast-http-server -p 5050 Fast Numbers speak louder than words. Server Request Per Second Avg. Response Time fast-http-server (Crystal) 18348.47 8.67ms http-server (Node.js) 2105.55 47.92ms SimpleHTTPServer (Python) 785.14 1.91ms Installation OS X You can install fast-http-server via Brew. brew tap sdogruyol/fast-http-server brew install fast-http-server  Manual fast-http-server requires Crystal 0.10.0. You can install it here git clone https://github.com/sdogruyol/fast-http-server crystal build --release src/fast-http-server.cr mv fast-http-server /usr/local/bin/fast-http-server  Contributing Fork it ( https://github.com/sdogruyol/fast-http-server/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors sdogruyol Serdar Dogruyol - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sdogruyol/fast-http-server"	"Super fast, zero configuration command line HTTP Server."	"true"
"Web Servers"	"kamber"	"https://github.com/f/kamber"	"Blog server based on Kemal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"120"	"6"	"7"	"GitHub - f/kamber: Static site server (basically blogs) with Crystal Language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 120 Fork 7 f/kamber Code Issues 0 Pull requests 0 Pulse Graphs Static site server (basically blogs) with Crystal Language https://kamber-test.herokuapp.com/ 35 commits 1 branch 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit c1b862e Apr 13, 2016 f Merge pull request #3 from enderahmetyurt/update_kamber … Update kamber Permalink Failed to load latest commit information. asset Add screenshots Dec 8, 2015 posts Update README.md Dec 8, 2015 spec Initial commit Dec 6, 2015 src Update syntax. Apr 13, 2016 .gitignore Initial commit Dec 6, 2015 .travis.yml Initial commit Dec 6, 2015 LICENSE Initial commit Dec 6, 2015 README.md Merge branch 'master' of github.com:f/kamber Dec 8, 2015 app.json Create app.json Dec 8, 2015 shard.lock Update shards.yml Apr 13, 2016 shard.yml Update shards.yml Apr 12, 2016 README.md Kamber Kamber is a blog server based on Kemal. This is not a static blog generator, it's a static blog server. It doesn't require any other HTTP servers. It uses Crystal and Kemal to generate HTML and also serve it. Quickstart Deploy on Heroku and start blogging in a minute! View an Heroku example Features Supports many post types: Markdown Posts GitHub Gist Tweet Embeds Video Embeds Disqus Comments Very fast, ~15x faster than other static site generators/servers, since it's based on Kemal. See Benchmarks Easy to develop. Just add contents to posts.yml file. Custom themes. Getting Started 1. Install Crystal and Kamber brew install crystal-lang git clone https://github.com/f/kamber myblog cd myblog shards install  2. Add Contents Edit kamber/config.cr and set your title. Edit posts/posts.yml file and add some content. 3. Build and Run crystal build --release src/kamber.cr ./kamber  To run in production, add -e production flag. ./kamber -e production  Themes Kamber has theme support. Theme GitHub Kamber Default Theme f/kamber-theme-default Kamber Dark Theme f/kamber-theme-dark How to install themes Writing Custom Themes Kamber has a simple API to build your own themes. To start quickly, just fork the kamber-theme-default and start hacking it. We are waiting for your themes! Configuration You can set your blog title from config.cr $BLOG_TITLE = ""My Awesome Blog"" $BLOG_DESC = ""programming journal"" $GOOGLE_ANALYTICS = ""UA-XXXXX-X""  # Activate Theme require ""kamber-theme-default"" Post Types posts/posts.yml has multiple YAML documents, each represents a blog item (aka post type). Post (Markdown) type: post title: Example Post abstract: Lorem ipsum dolor sit amet, consectetur adipisicing elit file: posts/example-post.md disqus: true Link type: link title: Example Link url: ""http://crystal-lang.org"" Video Kamber supports Youtube and Vimeo videos. The main pattern of video is [video provider]/[video id] type: video title: Example Video abstract: video: youtube/YE3GkCB3t_0 If you will use Vimeo, change video key to video: vimeo/147842467 Tweet This type embeds Tweets to the index. The pattern is [username]/[tweet id] type: tweet title: Example Tweet tweet: fkadev/673506301415194625 Gist This type embeds GitHub Gists to the index. The pattern is [username]/[gist id] type: gist title: Example Gist gist: f/c12af6b9e7d53bd9224d Deploy to Heroku Kamber uses custom buildpack to run in Heroku. heroku create myblog --buildpack https://github.com/f/heroku-buildpack-kamber git push heroku master  Screenshots Contributing Fork it ( https://github.com/f/kamber/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Roadmap Add base post types and make it run Add page support Contributors f Fatih Kadir Akın - creator, maintainer Kambersiz düğün olmaz. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/f/kamber"	"Blog server based on Kemal"	"true"
"Web Servers"	"prax.cr"	"https://github.com/ysbaddaden/prax.cr"	"Rack proxy server for development"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"49"	"10"	"4"	"GitHub - ysbaddaden/prax.cr: Rack proxy server for development (Crystal port) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 49 Fork 4 ysbaddaden/prax.cr Code Issues 5 Pull requests 5 Wiki Pulse Graphs Rack proxy server for development (Crystal port) 111 commits 3 branches 7 releases 3 contributors Crystal 68.2% Shell 13.6% Ruby 11.2% C 3.8% Makefile 3.2% Crystal Shell Ruby C Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags errno-exceptions master packages/rpm Nothing to show v0.5.1 v0.5.0 v0.4.2 v0.4.1 v0.4.0 v0.3.0 v0.2.0 Nothing to show New pull request Latest commit 3a239f1 Apr 14, 2016 ysbaddaden Fix: declare ivar types (Crystal > 0.15) Permalink Failed to load latest commit information. bin GIT-like prax-* commands (copied from Ruby Prax) Feb 9, 2015 ext NSSwitch extension (copied from Prax Ruby) Feb 9, 2015 install Move iptables rules to 'prax iptables' command Mar 19, 2016 libexec Move iptables rules to 'prax iptables' command Mar 19, 2016 src Fix: declare ivar types (Crystal > 0.15) Apr 14, 2016 test Vagrant box to build debian/ubuntu packages Jun 8, 2015 .gitignore Vagrant box to build debian/ubuntu packages Jun 8, 2015 CHANGELOG.md Release: v0.5.1 Jan 24, 2016 Gemfile Test suite Feb 22, 2015 Gemfile.lock Vagrant box to build debian/ubuntu packages Jun 8, 2015 LICENSE CeCILL license Feb 6, 2015 Makefile Makefile: use ?= operator Jan 24, 2016 README.md Make INSTALL more prominent Mar 19, 2016 Rakefile Test suite Feb 22, 2015 VERSION Release: v0.5.1 Jan 24, 2016 Vagrantfile Vagrant box to build debian/ubuntu packages Jun 8, 2015 README.md Prax Rack proxy server for development This is an (almost) complete rewrite of Prax in Crystal, a Ruby-inspired language that compiles down to LLVM. This version should avoid problems with version managers, since Prax is now a binary application that don't rely on Ruby anymore (except for Rack and rackup). Please refer to the wiki for more information: User Guide Install You can download a Debian / Ubuntu package for 64bits kernel on the releases page. For other systems, you'll have to follow the Manual Install Guide. How it works resolves *.dev domains to 127.0.0.1 / ::1 (localhost) redirects the :80 and :443 ports to :20559 and :20558 receives incoming HTTP requests and extracts the hostname (eg: myapp.dev) spawns a Rack applications (found at ~/.prax/myapp) if any proxies the request to the spawned Rack aplication or to the specified port. .dev TLD Prax proposes 2 solutions to resolve .dev domains: an NSSwitch extension, only compatible wih glibc and no longer compatible with Google Chrome/Chromium; a dnsmasq configuration, either throught NetworkManager or by installing dnsmasq manually (eg. through your Linux distribution package). Prax also supports http://xip.io domains, so you may use myapp.129.168.0.1.xip.io for example. This is very useful when using an external device like a smartphone or tablet or another computer. Port Redirections The port redirections are iptables rules, that are installed and removed using an initd script. The script redirects the port :80 and :443 on 127.0.0.1 and for each wlanX and ethX devices found on your machine, to allow incoming traffic, so you may use xip.io to test on external devices, as mentioned above. License Prax is distributed under the CeCILL 2.1 license. Please see LICENSE for details. HTML templates for rendering errors are from Pow!!, by Sam Stephenson and Basecamp, and are under the MIT license. The NSSwitch extension originaly come from Hoof, by pyromaniac, and is under the MIT license. Credits Julien Portalier julien@portalier.com Prax wouldn't exist without Pow!! by Sam Stephenson and Basecamp. Prax is nothing more but a reimplementation (in another language) with Linux compatibility in mind. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ysbaddaden/prax.cr"	"Rack proxy server for development"	"true"
"Services and Apps"	"carc.in"	"https://carc.in/"	"A web service that runs your code and displays the result"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Compile & run code in"	"null"	"null"	"A web service that runs your code and displays the result"	"true"
"Services and Apps"	"Crank"	"https://github.com/arktisklada/crank"	"A Procfile-based application manager (like Foreman)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"3"	"0"	"GitHub - arktisklada/crank: Foreman port to crystal. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 14 Fork 0 arktisklada/crank Code Issues 0 Pull requests 0 Pulse Graphs Foreman port to crystal. 18 commits 1 branch 1 release Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.0 Nothing to show New pull request Latest commit 6188ff6 Mar 14, 2016 arktisklada Updating license Permalink Failed to load latest commit information. bin Crank Mar 14, 2016 src Crank Mar 14, 2016 .gitignore Removing test files Mar 12, 2016 README.md Updating license Mar 14, 2016 README.md Crank Foreman in Crystal This is very much a work in progress. Installation Clone this repo git clone https://github.com/arktisklada/crank.cr Symlink /usr/bin/crank (or your bin folder) to bin/crank in your cloned repo. Usage With the following Procfile: web: bin/server 7000 worker: bin/worker queue=FOO  Run crank 17:12:48 web    | listening on port 7000 17:12:48 worker | listening to queue FOO  Credits Inspired by the original Foreman by David Dollar (@ddollar). License (Apache 2.0)[http://www.apache.org/licenses/LICENSE-2.0] © 2016 Clayton Liggitt Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/arktisklada/crank"	"A Procfile-based application manager (like Foreman)"	"true"
"Services and Apps"	"crystalshards"	"https://crystalshards.herokuapp.com/"	"A web service that lists all available Crystal shards"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Crystalshards Crystalshards There are a total of 903 shards Sort by: stars updated forks Filter: crystal (5325 stars) - The Crystal Programming Language kemal (804 stars) - Lightning Fast, Super Simple web framework for Crystal awesome-crystal (445 stars) - 💎 A collection of awesome Crystal libraries, tools, frameworks and software amethyst (356 stars) - Amethyst is a Rails inspired web-framework for Crystal language sidekiq.cr (225 stars) - Simple, efficient job processing for Crystal shards (210 stars) - Dependency manager for the Crystal language Moonshine (123 stars) - Web framework for Crystal language kamber (120 stars) - Static site server (basically blogs) with Crystal Language crystal-redis (106 stars) - Full featured Redis client for Crystal crystal-pg (98 stars) - a postgres driver for crystal hoop (98 stars) - Building native OSX apps. active_record.cr (92 stars) - Active Record pattern implementation for Crystal. guardian (87 stars) - Guardian watches over your files and run assigned tasks. crystal-by-example (84 stars) - Crystal By Example cryload (80 stars) - HTTP benchmarking tool written in Crystal frost (70 stars) - Full Featured Web Framework for the Crystal Programming Language fast-http-server (70 stars) - Super fast, zero configuration command line HTTP Server. crystal-icr (68 stars) - Interactive console for Crystal programming language crul (68 stars) - Command line HTTP client written in Crystal progress (63 stars) - [==..] Progress bar for Crystal Programming Language crsfml (63 stars) - Crystal bindings to SFML multimedia/game library immutable (62 stars) - Thread-safe, persistent, immutable collections for the Crystal language crystal_ruby (61 stars) - Write Ruby extensions in Crystal crystalline (56 stars) - A collection of containers & algorithms for the crystal programming language equiv (55 stars) - It finds equivalents of the things. frank (55 stars) - A small Sinatra clone for Crystal prax.cr (49 stars) - Rack proxy server for development (Crystal port) twitter-crystal (46 stars) - A library to access the Twitter API using Crystal amatista (43 stars) - Web Framework for Crystal http://crystal-lang.org crystal_lib (42 stars) - Automatic binding generator for native libraries in Crystal faker (40 stars) - Faker is a Crystal library that generates fake data for you spec2.cr (39 stars) - Enhanced `spec` testing library for [Crystal](http://crystal-lang.org/). fikri (39 stars) - Simple CLI To-Do App written in Crystal slang (37 stars) - Slim-inspired templating language for Crystal carbon-crystal (36 stars) - Carbon Crystal - Web framework for Crystal Lang awesome-osx (35 stars) - 📦 Awesome stuff for OSX onyx-lang (34 stars) - ONYX Programming Language (Onyx → Crystal AST → LLVM-IR → Machine Code) crystal-mysql (33 stars) - Basic mysql bindings for crystal. power_assert.cr (33 stars) - PowerAssert provides the more powerful assertion to you. duktape.cr (33 stars) - Evaluate JavaScript from Crystal! commander (32 stars) - Command-line interface builder for the Crystal programming language. crystal-cossack (31 stars) - Simple and flexible HTTP client for Crystal with middleware and test support. mongo.cr (30 stars) - Crystal binding for MongoDB C Driver carc.in (29 stars) - Compile & run code in msgpack-crystal (29 stars) - MessagePack implementation in Crystal msgpack.org[Crystal] crystal-sqlite3 (29 stars) - SQLite3 bindings for Crystal temel (28 stars) - Extensible Markup DSL for Crystal crystalshards (28 stars) - A listing of all crystal shards completion (27 stars) - Easy Command Line Completion for Crystal crystal_api (27 stars) - Simple PostgreSQL REST API in Crystal with devise-like auth. spinner (27 stars) - Terminal Spinner for Crystal Programming Language minitest.cr (27 stars) - Test Unit for the Crystal programming language artanis (26 stars) - Sinatra-like DSL for the Crystal language (abusing macros) libui.cr (26 stars) - Crystal-lang bindings for libui DeBot (25 stars) - My IRC Bot ohm-crystal (25 stars) - Ohm for Crystal crystal-gl (25 stars) - OpenGL bindings for the Crystal language crystal-futures (24 stars) - Future type implementation for Crystal language crystal-db (24 stars) - Common db api for crystal crake (24 stars) - CRystal mAKE library evented (23 stars) - Publish and Subscribe for Crystal objects spotify.cr (23 stars) - 🎧 A Crystal wrapper for the Spotify Web API crustache (22 stars) - {{Mustache}} for Crystal 💎 toro (22 stars) - Tree oriented routing kilt (22 stars) - Generic template interface for Crystal rcpu (21 stars) - VM emulator and assembler written in Crystal iceberg (21 stars) - A full-stack web framework in Crystal-lang crystal-jwt (20 stars) - JWT implementation in Crystal spellout (20 stars) - A command-line tool that converts input into the International Radiotelephony Spelling Alphabet kemalyst (20 stars) - A rails like framework based on kemal nes.cr (19 stars) - A NES emulator written in Crystal webmock.cr (19 stars) - Mock HTTP::Client lambda.cr (18 stars) - Uniformed function call syntax for Crystal Language. mpp (18 stars) - The mini pre processor parses files and resolves C-style #include and #define macros haydari (18 stars) - Parser combinator library for crystal programming language. baked_file_system (17 stars) - Virtual File System for Crystal language generate (17 stars) - Generic tool for generating whole Crystal project structure, or any part of it during lifetime of project beryl (17 stars) - Action-focused HTTP routing library for Crystal ssh2.cr (16 stars) - libssh2 binding for Crystal language pool (16 stars) - Generic (connection) pools for Crystal crystal-sdl2 (16 stars) crystal-patterns (15 stars) - 📖 Examples of GOF patterns written in Crystal amqp.cr (15 stars) - AMQP client for Crystal language crystal-gobject (15 stars) - gobject-introspection for Crystal crystal_samples (15 stars) - session (15 stars) - Cookie based sessions in Crystal HTTP applications http2 (15 stars) - HTTP/2 Protocol Implementation for the Crystal Language spec-kemal (14 stars) - Easy testing for Kemal kemal-pg (14 stars) - Easily add Postgresql database to Kemal biplane (14 stars) - A configuration-based management and automation tool for Kong crotest (14 stars) - A tiny and simple test framework for crystal crank (14 stars) - Foreman port to crystal. crystal-toml (14 stars) - TOML parser for Crystal crsfml-examples (13 stars) - Simple games made with CrSFML crystal-routing (13 stars) - Extensible library to deal with http request and string based routing in Crystal crystal_redis (13 stars) - Redis client for Crystal vicr (13 stars) - ✌️ Vim-like Interactive CRystal Crisp (13 stars) - Lisp dialect implemented with Crystal crystal-memcached (13 stars) - Memcached client for Crystal language radix (13 stars) - Radix Tree implementation for Crystal"	"null"	"null"	"A web service that lists all available Crystal shards"	"true"
"Services and Apps"	"DeBot"	"https://github.com/jhass/DeBot"	"IRC bot written in Crystal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"25"	"3"	"13"	"GitHub - jhass/DeBot: My IRC Bot Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 25 Fork 13 jhass/DeBot Code Issues 1 Pull requests 1 Pulse Graphs My IRC Bot 195 commits 2 branches 0 releases Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master ruby Nothing to show Nothing to show New pull request Latest commit c2954c4 Jun 16, 2016 jhass Update Crystal wordlist to Crystal 0.18.0 Permalink Failed to load latest commit information. bot Update Crystal wordlist to Crystal 0.18.0 Jun 16, 2016 core_ext/src/core_ext Port to Crystal 0.18 Jun 3, 2016 framework/src/framework Finish porting to Crystal 0.18 Jun 15, 2016 irc Finish porting to Crystal 0.18 Jun 14, 2016 thread/src/thread Finish porting to Crystal 0.18 Jun 14, 2016 .gitignore Initial commit Jan 26, 2015 LICENSE Initial commit Jan 26, 2015 README.md Ensure no more than 100 runnable handlers for now Aug 25, 2015 README.md CeBot CeBot is an IRC bot written in Crystal. Currently this repository contains not only the bot but also the underlying libraries and tools until they are mature enough to be extracted into their own projects. irc Base library that handles establishing and maintaining an connection to an IRC network, message de-/serialization and calling handlers for received messages. Dependencies Crystal thread core_ext framework Abstraction layer to provide an easy to use API and commonly used tools for developing IRC bots. Dependencies Crystal irc thread core_ext bot The actual bot, consisting of plugins and a file to actually instantiate the bot. Dependencies Crystal framework core_ext sandbox (if crystal_eval plugin is activated) core_ext A collection of monkey patches to stdlib classes that might or might not be upstreamed into Crystal Dependencies Crystal thread A collection of threading primitives such as a Queue and a ReadWriteLock. Currently doesn't make much sense for Crystal 0.7. Dependencies Crystal Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jhass/DeBot"	"IRC bot written in Crystal"	"true"
"Services and Apps"	"docrystal"	"http://docrystal.org/"	"A web application that hosts documentation for Crystal packages"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"2"	"1"	"GitHub - docrystal/docrystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 1 Fork 1 docrystal/docrystal Code Issues 4 Pull requests 1 Pulse Graphs http://docrystal.org/ 47 commits 1 branch 0 releases Fetching contributors Ruby 77.1% HTML 17.9% CSS 4.9% JavaScript 0.1% Ruby HTML CSS JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. app bin config db lib log public test vendor/assets .gitignore Capfile Gemfile Gemfile.lock Guardfile README.rdoc Rakefile config.ru package.json README.rdoc README This README would normally document whatever steps are necessary to get the application up and running. Things you may want to cover: Ruby version System dependencies Configuration Database creation Database initialization How to run the test suite Services (job queues, cache servers, search engines, etc.) Deployment instructions … Please feel free to use a different markup language if you do not plan to run rake doc:app. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/docrystal/docrystal"	"A web application that hosts documentation for Crystal packages"	"true"
"Services and Apps"	"fikri"	"https://github.com/askn/fikri"	"Simple CLI To-Do App"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"39"	"2"	"2"	"GitHub - askn/fikri: Simple CLI To-Do App written in Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 39 Fork 2 askn/fikri Code Issues 3 Pull requests 0 Pulse Graphs Simple CLI To-Do App written in Crystal 9 commits 1 branch 1 release Fetching contributors Crystal 100.0% Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.0.1 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore .travis.yml LICENSE README.md shard.yml README.md Fikri Fikri: Simple CLI To-Do App written in Crystal. Installation From Source git clone https://github.com/askn/fikri.git && cd fikri crystal build src/fikri.cr --release  OS X brew tap askn/fikri brew install fikri Usage Fikri has a very simple interface to manage your project. Add TODO list to your project. Fikri creates a TODO file and manage your tasks, share with your code collaborators. fikri init  will initialize a .todos.yml file into your project. Adding a task To add a task, you need to pass -a parameter. fikri -a ""Buy some eggs.""  Toggling a task You can switch a task to undone or done. fikri -t 1  Listin all tasks To see the status of the tasks, use -l option. fikri -l  Roadmap Add TODO: .* search feature in tasks. Add GitHub issue sync feature. Contributing Fork it ( https://github.com/askn/fikri/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors askn Aşkın Gedik - creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/askn/fikri"	"Simple CLI To-Do App"	"true"
"Services and Apps"	"icr"	"https://github.com/greyblake/crystal-icr"	"Interactive console for Crystal (like IRB for Ruby)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"68"	"4"	"6"	"GitHub - greyblake/crystal-icr: Interactive console for Crystal programming language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 68 Fork 6 greyblake/crystal-icr Code Issues 1 Pull requests 1 Pulse Graphs Interactive console for Crystal programming language 76 commits 5 branches 12 releases Fetching contributors Crystal 97.3% Makefile 2.7% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix-travis-2 fix-travis master reduce-dependecies travis2 Nothing to show v0.2.8 v0.2.7 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit a236c88 Jun 15, 2016 greyblake Use compile command instead of build Permalink Failed to load latest commit information. bin Create Make file and few tasks Jan 20, 2016 demo Add GIF demo Feb 7, 2016 spec Fix exit issue #16 Mar 29, 2016 src Version 0.2.8 May 16, 2016 .gitignore Create Make file and few tasks Jan 20, 2016 .travis.yml Simplify Travis CI setup May 6, 2016 CHANGELOG.md Version 0.2.8 May 16, 2016 LGPL-LICENSE.txt Add LGPL license #13 Mar 21, 2016 Makefile Use compile command instead of build Jun 15, 2016 README.md Use compile command instead of build Jun 15, 2016 shard.yml initial commit Jan 20, 2016 README.md ICR - Interactive Crystal Interactive console for Crystal Programming Language. Usage Require local files Installation Arch Linux How does it work? Development Contributors Usage It's like irb, but for Crystal: Require local files You can require local files by relative path (starts with ./): require ""./src/my_cool_lib""  Installation Prerequisites: The latest version of crystal (0.18.0). Readline (for Debian/Ubuntu install libreadline6-dev package). LLVM development files. Clone the repo: git clone https://github.com/greyblake/crystal-icr.git  Switch to repo-directory: cd crystal-icr  Build: make  And create symlink of ./bin/icr in to direcotory that is listed in your $PATH, e.g.: sudo ln -s $(realpath ./bin/icr) /usr/bin/icr  (it's necessary only for the first time) Enjoy!) Arch Linux Arch Linux users can install ICR from AUR. How does it work? Every time you press Enter it adds new instruction, generates new crystal program and executes it. The output is split into 2 parts: regular program output (e.g. output from puts 10) and value returned by the last command The regular output is saved, and when you type a new instruction, new program is generated. The saved output is subtracted from the new output, and the difference is printed out. It makes an illusion that only new instructions are executed :) Development To run tests: make test  Contributors greyblake Potapov Sergey - creator, maintainer BlaXpirit Oleh Prypin - fixes for Crystal 0.16 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/greyblake/crystal-icr"	"Interactive console for Crystal (like IRB for Ruby)"	"true"
"Services and Apps"	"nes"	"https://github.com/romeroadrian/nes.cr"	"A NES emulator"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"19"	"4"	"3"	"GitHub - romeroadrian/nes.cr: A NES emulator written in Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 19 Fork 3 romeroadrian/nes.cr Code Issues 0 Pull requests 1 Pulse Graphs A NES emulator written in Crystal 62 commits 1 branch 0 releases Fetching contributors Crystal 99.8% Makefile 0.2% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit ecfcb93 Dec 23, 2015 romeroadrian Update README.md Permalink Failed to load latest commit information. docs sdl Rendering and input controls using SDL May 15, 2015 src .deps.lock PPU Apr 29, 2015 .gitignore LICENSE Makefile Projectfile README.md main.cr PPU Apr 29, 2015 main_sdl.cr README.md nes.cr Compile make  Run ./nes rom_file.nes  Controls: Arrows: arrows Z: A X: B O: Start P: Select TODO Audio (implement Nes APU) More mappers (currently NROM and UNROM are supported) Issues Some graphical issues (vblank handling in PPU?) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/romeroadrian/nes.cr"	"A NES emulator"	"true"
"Services and Apps"	"vicr"	"https://github.com/veelenga/vicr.git"	"Vim-like Interactive CRystal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"13"	"2"	"1"	"GitHub - veelenga/vicr: Vim-like Interactive CRystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 13 Fork 1 veelenga/vicr Code Issues 2 Pull requests 0 Pulse Graphs ✌️ Vim-like Interactive CRystal 39 commits 1 branch 6 releases Fetching contributors Crystal 98.0% Makefile 2.0% Crystal Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.4.1 v0.4.0 v0.3.1 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. bin spec src .gitignore .travis.yml LICENSE Makefile README.md shard.yml README.md Vicr stands for ""Vim-like Interactive CRystal"" and represents a tiny command line application that designed to quickly execute Crystal code with fast feedback and options to proceed: Installation OS X $ brew tap veelenga/tap $ brew install vicr From sources: $ git clone https://github.com/veelenga/vicr $ cd vicr $ make $ sudo make install Usage Open terminal, run vicr, write your Crystal program, save and exit. Options Vicr is able to load file content for you to start playing with Crystal code straight away. For example: # loads local file $ vicr src/vicr/cli.cr  # loads Github file $ vicr https://github.com/manastech/crystal/blob/master/samples/2048.cr  # loads Github gist $ vicr https://gist.github.com/veelenga/a5b861ccd32ff559b7d2#file-benchmark_test-cr  # loads CarcIn file $ vicr https://carc.in/#/r/rlj  # loads play.crystal-lang.org file $ vicr https://play.crystal-lang.org/#/r/rlj  # loads raw file $ vicr http://example.com/program.cr Use help (-h flag) for more information. Customization It is possible to configure Vicr start-up settings using ~/.vicr/init.yaml configuration file. You can customize settings and use your favorite editor and even change compiler params: # ~/.vicr/init.yaml --- run_file: ~/.vicr/run.cr editor:   executable: nvim   args:     - ""--cmd""     - ""set paste""  compiler:   executable: crystal   args_before:     - ""run""     - ""--release"" Contributing If you feel like you have a good idea to be implemented, please open a discussion. If you found a defect and enough motivated to fix it, pull requests are welcome. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/veelenga/vicr.git"	"Vim-like Interactive CRystal"	"true"
"DevOps"	"crystal-cookbook"	"https://github.com/vjdhama/crystal-cookbook"	"Chef cookbook for installing crystal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"2"	"0"	"GitHub - vjdhama/crystal-cookbook: Chef cookbook for installing crystal. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 2 Fork 0 vjdhama/crystal-cookbook Code Issues 1 Pull requests 0 Pulse Graphs Chef cookbook for installing crystal. 18 commits 1 branch 0 releases Fetching contributors Ruby 100.0% Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. attributes recipes test/integration .gitignore .kitchen.docker.yml .kitchen.yml .travis.yml Berksfile Gemfile LICENSE README.md Rakefile chefignore metadata.rb README.md crystal-cookbook Chef cookbook for installing crystal. Usage Add below line to your Berksfile. cookbook 'crystal', github: 'vjdhama/crystal-cookbook'  TODO'S Add option for installing different versions. Add support for more platforms. Ubuntu Debian Centos Alpine Add travis for running kitchen tests. Contributing Fork it ( https://github.com/vjdhama/crystal-cookbook/fork ) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors vjdhama - Vijay Dhama : creator, maintainer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vjdhama/crystal-cookbook"	"Chef cookbook for installing crystal"	"true"
"Editor Plugins"	"crystal-tools"	"https://atom.io/packages/crystal-tools"	"Enables built in tools in Crystal compiler"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"5"	"1"	"GitHub - manastech/atom-crystal-tools: Atom package that integrates crystal tools Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 7 Fork 1 manastech/atom-crystal-tools Code Issues 3 Pull requests 0 Pulse Graphs Atom package that integrates crystal tools https://atom.io/packages/crystal-tools 22 commits 1 branch 3 releases Fetching contributors CoffeeScript 90.8% CSS 9.2% CoffeeScript CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. keymaps lib menus spec styles .gitignore CHANGELOG.md LICENSE.md README.md package.json README.md crystal-tools package Enables built in tools in crystal compiler to be used from atom. Note: requires crystal >= 0.7.7. Supported tools context: displays available context variables at a specific location implementations: over a method call, search for all possible definition of the method. Even across macro expansions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/manastech/atom-crystal-tools"	"Enables built in tools in Crystal compiler"	"true"
"Editor Plugins"	"language-crystal-actual"	"https://atom.io/packages/language-crystal-actual"	"Crystal language support in Atom"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"2"	"85"	"GitHub - atom-crystal/language-crystal: Crystal package for Atom Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 8 Fork 85 atom-crystal/language-crystal forked from atom/language-ruby Code Issues 0 Pull requests 0 Pulse Graphs Crystal package for Atom https://atom.io/packages/language-crystal-actual 265 commits 1 branch 34 releases Fetching contributors CoffeeScript 100.0% CoffeeScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.30.0 v0.29.0 v0.28.2 v0.28.1 v0.28.0 v0.27.0 v0.26.1 v0.26.0 v0.25.0 v0.24.0 v0.23.0 v0.22.0 v0.21.0 v0.20.0 v0.19.0 v0.18.0 v0.17.0 v0.16.0 v0.15.0 v0.14.0 v0.13.0 v0.12.0 v0.11.0 v0.10.0 v0.9.0 v0.8.0 v0.7.0 v0.6.0 v0.5.0 v0.4.1 v0.4.0 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Pull request Compare This branch is 96 commits ahead, 151 commits behind atom:master. Latest commit ec1e499 May 7, 2016 keplersj Prepare 0.30.0 release Permalink Failed to load latest commit information. grammars Rewrite Numeric highlighting. May 7, 2016 settings add rules for struct to fix indentation Feb 6, 2016 spec Add tests for Bools. Jul 12, 2015 .travis.yml make CI build faster Aug 20, 2014 CONTRIBUTING.md Add CONTRIBUTING.md Feb 22, 2014 LICENSE.md Add MIT license Feb 19, 2014 README.md Update README.md Apr 6, 2015 coffeelint.json Add coffeelint config. Jul 12, 2015 package.json Prepare 0.30.0 release May 7, 2016 README.md Crystal language support in Atom Adds syntax highlighting and snippets to Crystal files in Atom. Contributions are greatly appreciated. Please fork this repository and open a pull request to add snippets, make grammar tweaks, etc. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/atom-crystal/language-crystal"	"Crystal language support in Atom"	"true"
"Editor Plugins"	"linter-crystal"	"https://atom.io/packages/linter-crystal"	"Lint Crystal using the Crystal compiler in Atom"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"9"	"4"	"GitHub - atom-crystal/linter-crystal: Lint Crystal using the Crystal Compiler. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 8 Fork 4 atom-crystal/linter-crystal Code Issues 1 Pull requests 0 Pulse Graphs Lint Crystal using the Crystal Compiler. https://atom.io/packages/linter-crystal 108 commits 2 branches 28 releases Fetching contributors JavaScript 96.1% Crystal 3.9% JavaScript Crystal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags greenkeeper-atom-linter-6.0.0 master Nothing to show v3.5.1 v3.5.0 v3.4.0 v3.3.0 v3.2.5 v3.2.4 v3.2.3 v3.2.2 v3.2.1 v3.2.0 v3.1.0 v3.0.0 v2.0.0 v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.0 v1.0.1 v1.0.0 v0.3.0 v0.2.1 v0.2.0 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 01d1b68 Jul 3, 2016 keplersj Prepare 3.5.1 release Permalink Failed to load latest commit information. lib Work with shards, move config to JSON, refactor Jul 1, 2016 spec Don't ignore shard.lock Jul 3, 2016 .editorconfig Add .gitattributes and .editorconfig Feb 16, 2016 .eslintrc Convert main file to ES6. Jul 16, 2015 .gitattributes Add .gitattributes and .editorconfig Feb 16, 2016 .gitignore Directory clean up. May 31, 2015 .travis.yml Use stable crystal from homebrew. Feb 16, 2016 LICENSE.markdown Initial commit. Apr 6, 2015 README.md Add shields to readme Jun 26, 2016 package.json Prepare 3.5.1 release Jul 3, 2016 README.md linter-crystal A bridge between the Crystal compiler and the Atom text editor, showing compilation errors alongside your code. Installation Install from the command line or the Atom install settings page. As well please have a Crystal grammar, and a Linter consumer installed. Contributing If you would like to contribute enhancements or fixes, please do the following: Fork the plugin repository. Hack on a separate topic branch created from the latest master. Commit and push the topic branch. Make a pull request. welcome to the club Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/atom-crystal/linter-crystal"	"Lint Crystal using the Crystal compiler in Atom"	"true"
"Editor Plugins"	"emacs-crystal-mode"	"https://github.com/jpellerin/emacs-crystal-mode"	"Crystal language support for Emacs"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"17"	"6"	"6"	"GitHub - jpellerin/emacs-crystal-mode: A minimal crystal mode for emacs, based on ruby-mode (of course) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 17 Fork 6 jpellerin/emacs-crystal-mode Code Issues 8 Pull requests 2 Pulse Graphs A minimal crystal mode for emacs, based on ruby-mode (of course) 13 commits 1 branch 0 releases Fetching contributors Emacs Lisp 100.0% Emacs Lisp Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit a468942 Aug 14, 2015 jpellerin WIP fixing macro indentation Permalink Failed to load latest commit information. LICENSE Initial commit Jun 23, 2015 README.md Initial commit Jun 23, 2015 crystal-flycheck.el Fix flycheck setup Jul 28, 2015 crystal-mode.el WIP fixing macro indentation Aug 14, 2015 README.md emacs-crystal-mode A minimal crystal mode for emacs, based on ruby-mode (of course) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jpellerin/emacs-crystal-mode"	"Crystal language support for Emacs"	"true"
"Editor Plugins"	"sublime-crystal"	"https://github.com/manastech/sublime-crystal"	"Crystal syntax highlighting for sublime Text"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"26"	"6"	"4"	"GitHub - crystal-lang/sublime-crystal: Crystal syntax highlighting for Sublime Text Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 26 Fork 4 crystal-lang/sublime-crystal Code Issues 1 Pull requests 0 Pulse Graphs Crystal syntax highlighting for Sublime Text 48 commits 2 branches 4 releases Fetching contributors Python 98.0% JavaScript 2.0% Python JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cleanup master Nothing to show v0.0.4 v0.0.3 v0.0.2 v0.0.1 Nothing to show New pull request Latest commit 018f58f Mar 29, 2016 waj Properly color struct and union type names Permalink Failed to load latest commit information. preferences Added more indentation patterns (struct, union, lib, private and prot… Mar 29, 2016 snippets move files into folder May 11, 2014 Crystal.sublime-build Fixed the ""build"" command, capitalized the README Jan 31, 2015 Crystal.sublime-commands Format command Oct 10, 2015 Crystal.sublime-settings Allow auto formatting to be disabled Oct 13, 2015 Crystal.tmLanguage Properly color struct and union type names Mar 29, 2016 Default.sublime-keymap Replace scopes names borrowed from ruby package Jan 17, 2014 LICENSE update readme, add license Jun 18, 2015 Main.sublime-menu Format command Oct 10, 2015 README.md update readme, add license Jun 18, 2015 crystal_format.py Don't highlight line on error, just show dot to the left Feb 26, 2016 diff_match_patch.py Improve performance of auto formatting (using Google's diff-match-patch) Oct 13, 2015 README.md Sublime Text Crystal Package Package for Sublime Text 2/3 which provides syntax highlighting and various code completion snippets for crystal. Installation Sublime Package Control allows you to easily install or remove Crystal (and many other ST packages) from within the editor. It offers automatically updating packages as well so you no longer need to keep track of changes. Install Sublime Package Control (if you haven't done so already) from http://wbond.net/sublime_packages/package_control . Be sure to restart ST to complete the installation. Bring up the command palette (default ctrl+shift+p or cmd+shift+p) and start typing Package Control: Install Package then press return or click on that option to activate it. You will be presented with a new Quick Panel with the list of available packages. Type Crystal and press return or on its entry to install Crystal. If there is no entry for Crystal, you most likely already have it installed. Features Todo Add snippets for default classes like Exception Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/manastech/sublime-crystal"	"Crystal syntax highlighting for sublime Text"	"true"
"Editor Plugins"	"vim-crystal"	"https://github.com/rhysd/vim-crystal"	"Vim filetype support for Crystal"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"108"	"6"	"15"	"GitHub - rhysd/vim-crystal: Vim filetype and tools support for Crystal language. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 108 Fork 15 rhysd/vim-crystal Code Issues 3 Pull requests 0 Pulse Graphs Vim filetype and tools support for Crystal language. http://crystal-lang.org/ 141 commits 1 branch 0 releases Fetching contributors VimL 100.0% VimL Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit f567ba1 Jun 4, 2016 hkdnet committed with rhysd fix typo (#30) Permalink Failed to load latest commit information. autoload consider all files on syntax check for Crystal project (#27) Feb 23, 2016 ftdetect ecr files actually eruby files. Feb 1, 2016 ftplugin Make loading a bit more lazy and side effecting things more conservat… May 30, 2016 indent fix lint errors reported by vint Sep 29, 2015 plugin Make loading a bit more lazy and side effecting things more conservat… May 30, 2016 syntax add missing pseudo variable __DIR__ Oct 4, 2015 syntax_checkers/crystal consider all files on syntax check for Crystal project (#27) Feb 22, 2016 .travis.yml use container-based worker on Travis and set build status Sep 29, 2015 .vintrc.yaml add vint config Sep 29, 2015 README.md fix typo (#30) Jun 4, 2016 README.md Filetype Support for Crystal This is filetype support for Crystal programming language. crystal filetype detection Syntax highlight Indentation vim-matchit support crystal tool integration (implementations, context, formatter, and so on) crystal spec integration Syntax check (Using Syntastic) Completion (currently for variable names) Syntax Highlight This plugin was firstly imported from Ruby's filetype plugin. There are many differences between Ruby and Crystal but vim-crystal can't support all of them yet. In addition, Crystal is growing rapidly and being added many changes. If you've found some issues or points to improve, pull requests and issues are welcome. Spec Integration Running spec(s) and show the result in Vim. The output is colorful if possible as executed in CLI. :CrystalSpecSwitch (mapping to gss) It switches current source file and its spec file. This command assumes the standard directory layout which crystal init generates. If you don't set g:crystal_define_mappings to 0, you can use this feature with mapping gss. :CrystalSpecRunAll (mapping to gsa) It runs the all specs for current file's project. If you don't set g:crystal_define_mappings to 0, you can use this feature with mapping gsa. :CrystalSpecRunCurrent (mapping to gsc) It runs spec for current buffer. When current buffer is a spec source, :CrystalSpecRunCurrent runs the spec under the cursor. You should execute this command after moving cursor to it ... do line or describe ... do line. When current buffer is not a spec source, :CrystalSpecRunCurrent finds corresponding spec source and runs all specs in the source. If you don't set g:crystal_define_mappings to 0, you can use this feature with mapping gsc. Formatter Integration You can run formatter manually by :CrystalFormat or automatically at saving buffer. When you set g:crystal_auto_format to 1, current buffer is automatically formatted on BufWritePre. The variable is set to 0 by default because crystal tool format currently seems buggy. Tool Integration :CrystalDef (mapping to gd) It makes cursor jump to the definition of name under the curosr. This command uses crystal tool implementations. If you don't set g:crystal_define_mappings to 0, you can use this feature with mapping gd. :CrystalContext (mapping to gc) It shows the context under the cursor. Context includes variable names and their types. If you don't set g:crystal_define_mappings to 0, you can use this feature with mapping gc. :CrystalHierarchy It shows types hierarchy of current code. Completion Omni completion for crystal can be used by <C-x><C-o>. (Please see :help ins-completion) Currently you can complete variable names. License This plugin is distributed under the MIT License. Copyright (c) 2014-2015 rhysd  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rhysd/vim-crystal"	"Vim filetype support for Crystal"	"true"
"Editor Plugins"	"vim-slang"	"https://github.com/isaacsloan/vim-slang"	"Vim filetype support for Slang Templating Engine"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"0"	"1"	"0"	"GitHub - elorest/vim-slang Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 0 Fork 0 elorest/vim-slang Code Issues 0 Pull requests 0 Pulse Graphs No description or website provided. 62 commits 1 branch 0 releases Fetching contributors VimL 100.0% VimL Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. ftdetect indent syntax LICENSE.txt README.md README.md vim-slang for crystal-lang slang syntax highlighting for vim. Forked from vim-slim. Install with pathogen If you are already using pathogen, you can skip to step 3. Install pathogen (if you haven't already) mkdir -p ~/.vim/autoload ~/.vim/bundle; \ curl -so ~/.vim/autoload/pathogen.vim \ https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim  Edit ~/.vimrc to run pathogen as the first line of the file (if you haven't already) call pathogen#infect()  syntax enable filetype plugin indent on Install slang-vim pushd ~/.vim/bundle; \ git clone git://github.com/isaacsloan/vim-slang.git; \ popd  Install with vbundle Install Vundle into ~/.vim/bundle/. mkdir -p ~/.vim/bundle; pushd ~/.vim/bundle; \ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle popd  Configure your vimrc for Vundle. Here's a bare-minimum vimrc that enables vim-slang : set rtp+=~/.vim/bundle/vundle/ call vundle#rc()  Bundle 'isaacsloan/vim-slang.git'  syntax enable filetype plugin indent on If you're adding Vundle to a built-up vimrc, just make sure all these calls are in there and that they occur in this order. Open vim and run :PluginInstall. To update, open vim and run :PluginInstall! (notice the bang!) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/isaacsloan/vim-slang"	"Vim filetype support for Slang Templating Engine"	"true"
"Shell plugins"	"crystal-zsh"	"https://github.com/veelenga/crystal-zsh"	".oh-my-zsh plugin"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6"	"1"	"2"	"GitHub - veelenga/crystal-zsh: .oh-my-zsh plugin for Crystal Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 6 Fork 2 veelenga/crystal-zsh Code Issues 0 Pull requests 0 Pulse Graphs .oh-my-zsh plugin for Crystal 9 commits 1 branch 0 releases Fetching contributors Shell 100.0% Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 9430eba Jun 15, 2016 veelenga Deprecate build and add compile command Permalink Failed to load latest commit information. LICENSE README.md crystal.plugin.zsh Deprecate build and add compile command Jun 15, 2016 README.md .oh-my-zsh plugin for Crystal. cr aliases crystal cri aliases crystal init crb aliases crystal build (deprecated, use compile instead) crc aliases crystal compile crd aliases crystal deps crdo aliases crystal docs cren aliases crystal env cre aliases crystal eval crp aliases crystal play crs aliases crystal spec crr aliases crystal run crt aliases crystal tool crtc aliases crystal tool context crtf aliases crystal tool format crth aliases crystal tool hierarchy crti aliases crystal tool implementations crtt aliases crystal tool types Installation Antigen Add antigen bundle veelenga/crystal.zsh to your .zshrc with your other bundle commands. Antigen will handle cloning the plugin for you automatically the next time you start zsh. You can also add the plugin to a running zsh with antigen bundle veelenga/crystal.zsh for testing before adding it to your .zshrc. Oh-My-Zsh Clone repo into your custom plugins directory: git clone https://github.com/veelenga/crystal-zsh.git ~/.oh-my-zsh/custom/plugins/crystal Add crystal to the plugins line of your .zshrc file (e.g. plugins=(rails git crystal)) Zgen Add zgen load veelenga/crystal.zsh to your .zshrc file in the same function you're doing your other zgen load calls in. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/veelenga/crystal-zsh"	".oh-my-zsh plugin"	"true"
