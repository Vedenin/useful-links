"category"	"name"	"url"	"description"	"star"	"stackOverflow"	"stackOverflowUrl"	"license"	"licenseUrl"	"site"	"userGuide"	"newStars"	"newWatchs"	"newForks"	"pageText"	"newStackOverflow"	"github"	"allText"	"isExist"
"Dependency Management"	"Composer Installers"	"https://github.com/composer/installers"	"A multi framework Composer library installer."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"572"	"44"	"295"	"GitHub - composer/installers: A Multi-Framework Composer Library Installer Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 44 Star 572 Fork 295 composer/installers Code Issues 24 Pull requests 22 Pulse Graphs A Multi-Framework Composer Library Installer http://composer.github.com/installers 406 commits 2 branches 27 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.1.0 v1.0.25 v1.0.24 v1.0.23 v1.0.22 v1.0.21 v1.0.20 v1.0.19 v1.0.18 v1.0.17 v1.0.16 v1.0.15 v1.0.14 v1.0.13 v1.0.12 v1.0.11 v1.0.10 v1.0.9 v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit a3595c5 Jul 5, 2016 niksamokhvalov committed on GitHub Merge pull request #306 from micaherne/revert-201-patch-2 … Revert ""Support ""atto"" editor plugins introduced in Moodle 2.7+"" Permalink Failed to load latest commit information. src Merge pull request #306 from micaherne/revert-201-patch-2 Jul 5, 2016 tests Merge pull request #303 from jjpmann/master Jun 24, 2016 .editorconfig Add .editorconfig file Dec 3, 2012 .gitignore Prestashop test correction Jan 21, 2015 .travis.yml test(composer): Use Composer scripts to introduce composer test Apr 23, 2015 LICENSE Initial release Jun 18, 2012 README.md Merge pull request #303 from jjpmann/master Jun 24, 2016 composer.json update readme and composer May 22, 2016 phpunit.xml.dist Moving to composer namespace, updated README and package name Jun 24, 2012 README.md A Multi-Framework Composer Library Installer This is for PHP package authors to require in their composer.json. It will install their package to the correct location based on the specified package type. The goal of installers is to be a simple package type to install path map. Users can also customize the install path per package and package authors can modify the package name upon installing. installers isn't intended on replacing all custom installers. If your package requires special installation handling then by all means, create a custom installer to handle it. Natively Supported Frameworks: The following frameworks natively work with Composer and will be installed to the default vendor directory. composer/installers is not needed to install packages with these frameworks: Aura Symfony2 Yii Yii2 Current Supported Package Types: Stable types are marked as bold, this means that installation paths for those type will not be changed. Any adjustment for those types would require creation of brand new type that will cover required changes. Framework Types Aimeos aimeos-extension Asgard asgard-module asgard-theme AGL agl-module Bonefish bonefish-package AnnotateCms annotatecms-module annotatecms-component annotatecms-service Bitrix bitrix-module (deprecated) bitrix-component (deprecated) bitrix-theme (deprecated) bitrix-d7-module bitrix-d7-component bitrix-d7-template CakePHP 2+ cakephp-plugin Chef chef-cookbook chef-role CCFramework ccframework-ship ccframework-theme CodeIgniter codeigniter-library codeigniter-third-party codeigniter-module concrete5 concrete5-block concrete5-package concrete5-theme concrete5-update Craft craft-plugin Croogo croogo-plugin croogo-theme Decibel decibel-app DokuWiki dokuwiki-plugin dokuwiki-template Dolibarr dolibarr-module Drupal drupal-core drupal-module drupal-theme drupal-library drupal-profile drupal-drush Elgg elgg-plugin ExpressionEngine 3 ee3-addon ee3-theme FuelPHP v1.x fuel-module fuel-package fuel-theme FuelPHP v2.x fuelphp-component Grav grav-plugin grav-theme Hurad hurad-plugin hurad-theme ImageCMS imagecms-template imagecms-module imagecms-library Joomla joomla-component joomla-module joomla-template joomla-plugin joomla-library Kirby kirby-plugin kirby-field kirby-tag KodiCMS kodicms-plugin kodicms-media Kohana kohana-module Laravel laravel-library Lithium lithium-library lithium-source Magento magento-library magento-skin magento-theme Mako mako-package Mautic mautic-plugin mautic-theme MODX Evo modxevo-snippet modxevo-plugin modxevo-module modxevo-template modxevo-lib MediaWiki mediawiki-extension October october-module october-plugin october-theme OXID oxid-module oxid-theme oxid-out MODULEWork modulework-module Moodle moodle-* (Please check source for all supported types) Piwik piwik-plugin phpBB phpbb-extension phpbb-style phpbb-language Pimcore pimcore-plugin PPI ppi-module Puppet puppet-module RadPHP radphp-bundle REDAXO redaxo-addon Roundcube roundcube-plugin shopware shopware-backend-plugin shopware-core-plugin shopware-frontend-plugin shopware-theme SilverStripe silverstripe-module silverstripe-theme SMF smf-module smf-theme symfony1 symfony1-plugin Tusk tusk-task tusk-command tusk-asset TYPO3 Flow typo3-flow-package typo3-flow-framework typo3-flow-plugin typo3-flow-site typo3-flow-boilerplate typo3-flow-build TYPO3 CMS typo3-cms-extension (Deprecated in this package, use the TYPO3 CMS Installers instead) Wolf CMS wolfcms-plugin WordPress wordpress-plugin wordpress-theme wordpress-muplugin Zend zend-library zend-extra zend-module Zikula zikula-module zikula-theme Prestashop prestashop-module prestashop-theme Phifty phifty-bundle phifty-framework phifty-library Example composer.json File This is an example for a CakePHP plugin. The only important parts to set in your composer.json file are ""type"": ""cakephp-plugin"" which describes what your package is and ""require"": { ""composer/installers"": ""~1.0"" } which tells composer to load the custom installers. {     ""name"": ""you/ftp"",     ""type"": ""cakephp-plugin"",     ""require"": {         ""composer/installers"": ""~1.0""     } } This would install your package to the Plugin/Ftp/ folder of a CakePHP app when a user runs php composer.phar install. So submit your packages to packagist.org! Custom Install Paths If you are consuming a package that uses the composer/installers you can override the install path with the following extra in your composer.json: {     ""extra"": {         ""installer-paths"": {             ""your/custom/path/{$name}/"": [""shama/ftp"", ""vendor/package""]         }     } } A package type can have a custom installation path with a type: prefix. {     ""extra"": {         ""installer-paths"": {             ""your/custom/path/{$name}/"": [""type:wordpress-plugin""]         }     } } You can also have the same vendor packages with a custom installation path by using the vendor: prefix. {     ""extra"": {         ""installer-paths"": {             ""your/custom/path/{$name}/"": [""vendor:my_organization""]         }     } } These would use your custom path for each of the listed packages. The available variables to use in your paths are: {$name}, {$vendor}, {$type}. Custom Install Names If you're a package author and need your package to be named differently when installed consider using the installer-name extra. For example you have a package named shama/cakephp-ftp with the type cakephp-plugin. Installing with composer/installers would install to the path Plugin/CakephpFtp. Due to the strict naming conventions, you as a package author actually need the package to be named and installed to Plugin/Ftp. Using the following config within your package composer.json will allow this: {     ""name"": ""shama/cakephp-ftp"",     ""type"": ""cakephp-plugin"",     ""extra"": {         ""installer-name"": ""Ftp""     } } Please note the name entered into installer-name will be the final and will not be inflected. Contribute! Fork and clone. Run the command php composer.phar install to install the dependencies. This will also install the dev dependencies. See Composer. Use the command phpunit to run the tests. See PHPUnit. Create a branch, commit, push and send us a pull request. To ensure a consistent code base, you should make sure the code follows the Coding Standards which we borrowed from Symfony. If you would like to help, please take a look at the list of issues. Should we allow dynamic package types or paths? No. What are they? The ability for a package author to determine where a package will be installed either through setting the path directly in their composer.json or through a dynamic package type: ""type"": ""framework-install-here"". It has been proposed many times. Even implemented once early on and then removed. installers won't do this because it would allow a single package author to wipe out entire folders without the user's consent. That user would then come here to yell at us. Anyone still wanting this capability should consider requiring https://github.com/oomphinc/composer-installers-extender. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/composer/installers"	"A multi framework Composer library installer."	"true"
"Dependency Management"	"Composer"	"https://getcomposer.org/"	"/ - A package and dependency manager."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7961"	"521"	"2206"	"GitHub - composer/composer: Dependency Manager for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 521 Star 7,961 Fork 2,206 composer/composer Code Issues 136 Pull requests 21 Pulse Graphs Dependency Manager for PHP https://getcomposer.org/ 6,754 commits 2 branches 23 releases 562 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.1 master Nothing to show 1.2.0-RC 1.1.3 1.1.2 1.1.1 1.1.0 1.1.0-RC 1.0.3 1.0.2 1.0.1 1.0.0 1.0.0-beta2 1.0.0-beta1 1.0.0-alpha11 1.0.0-alpha10 1.0.0-alpha9 1.0.0-alpha8 1.0.0-alpha7 1.0.0-alpha6 1.0.0-alpha5 1.0.0-alpha4 1.0.0-alpha3 1.0.0-alpha2 1.0.0-alpha1 Nothing to show New pull request Latest commit 685ff86 Jul 12, 2016 Seldaek Capture output Permalink Failed to load latest commit information. .github Add issue template to try and curb reports lacking information Mar 17, 2016 bin remove spdx files, introduce external library Jul 16, 2015 doc typo Jul 9, 2016 res Fix typo Jun 19, 2016 src Capture output Jul 12, 2016 tests Fix tests Jul 12, 2016 .gitattributes enable blank-at-eof check May 28, 2015 .gitignore Add PHPCSFixer config Apr 15, 2015 .php_cs Run cs fixer and update config to latest master Apr 11, 2016 .travis.yml Speedup autoloading on PHP 5.6 & 7.0+ using static arrays Apr 11, 2016 CHANGELOG.md Fix typo Jul 4, 2016 LICENSE Update license to 2016 Mar 13, 2016 PORTING_INFO Import initial partial port of the libzypp satsolver. Apr 5, 2011 README.md Update install instructions Feb 10, 2016 appveyor.yml Speedup autoloading on PHP 5.6 & 7.0+ using static arrays Apr 11, 2016 composer.json Update json-schema & other deps, fixes #5374 May 26, 2016 composer.lock Update deps Jul 2, 2016 phpunit.xml.dist Stop running PEAR Repo test suite as it fails and is kinda irrelevant… Feb 25, 2016 README.md Composer - Dependency Management for PHP Composer helps you declare, manage and install dependencies of PHP projects, ensuring you have the right stack everywhere. See https://getcomposer.org/ for more information and documentation. Installation / Usage Download and install Composer by following the official instructions. Create a composer.json defining your dependencies. Note that this example is a short version for applications that are not meant to be published as packages themselves. To create libraries/packages please read the documentation. {     ""require"": {         ""monolog/monolog"": "">=1.0.0""     } } Run Composer: php composer.phar install Browse for more packages on Packagist. Global installation of Composer (manual) Follow instructions in the documentation Updating Composer Running php composer.phar self-update or equivalent will update a phar install to the latest version. Community IRC channels are on irc.freenode.org: #composer for users and #composer-dev for development. For support, Stack Overflow also offers a good collection of Composer related questions. Please note that this project is released with a Contributor Code of Conduct. By participating in this project and its community you agree to abide by those terms. Requirements PHP 5.3.2 or above (at least 5.3.4 recommended to avoid potential bugs) Authors Nils Adermann - naderman@naderman.de - https://twitter.com/naderman - http://www.naderman.de Jordi Boggiano - j.boggiano@seld.be - https://twitter.com/seldaek - http://seld.be See also the list of contributors who participated in this project. License Composer is licensed under the MIT License - see the LICENSE file for details Acknowledgments This project's Solver started out as a PHP port of openSUSE's Libzypp satsolver. This project uses hiddeninput.exe to prompt for passwords on windows, sources and details can be found on the github page of the project. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/composer/composer"	"/ - A package and dependency manager."	"true"
"Dependency Management"	"Packagist"	"https://packagist.org/"	"/ - A package and dependency manager."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"744"	"58"	"285"	"GitHub - composer/packagist: Package Repository Website Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 58 Star 744 Fork 285 composer/packagist Code Issues 58 Pull requests 2 Pulse Graphs Package Repository Website http://packagist.org/ 1,332 commits 1 branch 0 releases Fetching contributors PHP 67.5% HTML 19.7% CSS 6.8% JavaScript 4.2% ApacheConf 1.8% PHP HTML CSS JavaScript ApacheConf Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit becd028 Jul 13, 2016 Seldaek Remove usage of apc class loader Permalink Failed to load latest commit information. app Optimize dependents/suggesters queries by roughly a shitload Jun 9, 2016 bin update to Symfony 2.1 Jun 22, 2012 doc Push exact package_name match to top of results in search May 17, 2016 src change deprecated LoggerInterface type hint Jul 4, 2016 web Remove usage of apc class loader Jul 13, 2016 .gitignore Add cs cache to gitignore Jan 3, 2016 .travis.yml Remove 5.6 build on travis Jun 26, 2016 LICENSE Initial commit Jun 9, 2011 README.md Add KnpMenu, fix README file Feb 12, 2015 composer.json Remove tests from classmap, fixes #700 Jul 10, 2016 composer.lock Update snc redis bundle Jun 21, 2016 phpunit.xml.dist Deps update and fix deprecated stuff Dec 13, 2015 README.md Packagist Package Repository Website for Composer, see the about page on packagist.org for more. Requirements MySQL for the main data store Redis for some functionality (favorites, download statistics) Solr for search git/svn/hg depending on which repositories you want to support Installation Clone the repository Edit app/config/parameters.yml and change the relevant values for your setup. Install dependencies: php composer.phar install Run app/console doctrine:schema:create to setup the DB. Run app/console assets:install web to deploy the assets on the web dir. Make a VirtualHost with DocumentRoot pointing to web/ You should now be able to access the site, create a user, etc. Setting up search The search index uses Solr 3.6, so you will have to install that on your server. If you are running it on a non-standard host or port, you will have to adjust the configuration. See the NelmioSolariumBundle for more details. You will also have to configure Solr. Use the schema.xml provided in the doc/ directory for that. To index packages, just run app/console packagist:index. It is recommended to set up a cron job for this command, and have it run every few minutes. Day-to-Day Operation There are a few commands you should run periodically (ideally set up a cron job running every minute or so): app/console packagist:update --no-debug --env=prod app/console packagist:dump --no-debug --env=prod app/console packagist:index --no-debug --env=prod  The latter is optional and only required if you are running a solr server. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/composer/packagist"	"/ - A package and dependency manager."	"true"
"Dependency Management"	"Melody"	"http://melody.sensiolabs.org/"	"A tool to build one file Composer scripts."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"301"	"16"	"20"	"GitHub - sensiolabs/melody: One-file composer scripts Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 301 Fork 20 sensiolabs/melody Code Issues 3 Pull requests 2 Pulse Graphs One-file composer scripts http://melody.sensiolabs.org/ 109 commits 2 branches 0 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags autoload master Nothing to show Nothing to show New pull request Latest commit 69f42c0 Jun 13, 2016 lyrixx minor #80 Updated vendors (lyrixx) … This PR was merged into the master branch.  Discussion ----------  Updated vendors  Fixes #71  Commits -------  c0052a6 travis: only build 'master' branch 84c6961 Bumped to PHP 5.5 bf2ac07 Updated vendors Permalink Failed to load latest commit information. bin Fixed CS Jul 22, 2015 build Added initial set of files Dec 5, 2014 doc Add a requirements section to the installation documentation. Jan 29, 2016 src/SensioLabs/Melody Give more info in ParseException. Jun 10, 2016 .gitignore Added initial set of files Dec 5, 2014 .travis.yml travis: only build 'master' branch Jun 13, 2016 CONTRIBUTING.md Added initial set of files Dec 5, 2014 LICENSE Added initial set of files Dec 5, 2014 README.md fixed example Jan 5, 2015 box.json Add GZ compression to box.json configuration. Jan 20, 2016 composer.json Bumped to PHP 5.5 Jun 13, 2016 composer.lock Updated vendors Jun 13, 2016 phpunit.xml.dist Added initial set of files Dec 5, 2014 README.md Melody - One-file composer scripts Create a file named test.php: <?php <<<CONFIG packages:  - ""symfony/finder: ~2.5"" CONFIG;  $finder = Symfony\Component\Finder\Finder::create()     ->in(__DIR__)     ->files()     ->name('*.php') ;  foreach ($finder as $file) {     echo $file, ""\n""; } And simply run it: $ melody run test.php More Information Read the documentation for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sensiolabs/melody"	"A tool to build one file Composer scripts."	"true"
"Dependency Management"	"Pickle"	"https://github.com/FriendsOfPHP/pickle"	"A PHP extension installer."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"770"	"46"	"29"	"GitHub - FriendsOfPHP/pickle: PHP Extension installer Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 46 Star 770 Fork 29 FriendsOfPHP/pickle Code Issues 16 Pull requests 2 Wiki Pulse Graphs PHP Extension installer 586 commits 3 branches 5 releases Fetching contributors PHP 95.5% Cucumber 4.5% PHP Cucumber Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags deploy-phar master perm-issues-config Nothing to show v0.4.0 v0.3.0 v0.2.0 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit c16ca75 Jun 10, 2016 Hywan committed on GitHub Merge pull request #144 from ivan1986/patch-1 … Update link to the Box project Permalink Failed to load latest commit information. bin Use padraic/phar-updater to handle PAHR updates Jan 1, 2016 features Fix tests Jan 2, 2016 src extend error check to avoid warnings Feb 3, 2016 tests composer.json doesn't need to contain ext version Feb 3, 2016 .atoum.php Disable xDebug and code coverage on PHP7 Jan 2, 2016 .bootstrap.atoum.php Add the license file and blocks. Oct 26, 2015 .gitignore Use padraic/phar-updater to handle PAHR updates Jan 1, 2016 .scrutinizer.yml CRLF Jun 26, 2014 .travis.yml Merge pull request #138 from FriendsOfPHP/deploy-phar Jan 18, 2016 LICENSE Add the `LICENSE` file. Oct 26, 2015 README.md Update link to box in readme Jun 9, 2016 behat.yml Rearrange behat features to avoid duplicate tests Jun 20, 2014 box.json.dist Fix tests Jan 2, 2016 composer.json Use padraic/phar-updater to handle PAHR updates Jan 1, 2016 README.md pickle - PHP Extension installer Pickle installs PHP extensions easily on all platforms. Introduction Pickle is a new PHP extension installer. It is based on Composer and the plan is to get Composer to fully support it. See https://github.com/composer/composer/pull/2898#issuecomment-48439196 for the Composer part of the discussions. Pickle fully supports existing extensions in http://pecl.php.net, running the following will install the latest available version of the memcache extension: $ bin/pickle install memcache Windows is fully supported, to install binaries or from the sources (work in progress and given that you have a working build environment in place). The concept behind Pickle is to ease the life of both developers and end users. For end users, nothing changes much except that Pickle is based on modern concepts and works with multiple protocols (git or http(s) URLs). For developers, it drastically reduces the release work. Extension meta information is not duplicated anymore. Configuration options, files to package etc. are automatically fetched from the sources and the respective files are updated during the release process. There is no risk anymore of forgetting to update the version here or there, or to neglect to include a file. Installation Clone this repository and install the dependencies with Composer: $ composer install A phar is also available. If you like to create your own phar from the pickle sources, you will need to install Box (http://box-project.github.io/box2/). Then clone the repository and run the following commands: $ cd pickle $ composer install --no-dev --optimize-autoloader $ php -d phar.readonly=0 box.phar build Usage Usage is pretty straightforward. For example, to install the memcache extension run the following command: $ bin/pickle install memcache You can also use pickle from your extension directory, the following command: $ cd myext $ bin/pickle install A list of the commands is available using: $ bin/pickle list To get extended help for a given command, use: $ bin/pickle help install To convert a package (based on package.xml current PECL installer), use: $ bin/pickle convert /home/pierre/myext/ Or run it from the extension source directory. Contributing Fork the project, create a feature branch and send us a pull request. To ensure a consistent code base, you should make sure the code follows the PSR-1 and PSR-2 coding standards. To avoid CS issues, you should use php-cs-fixer: $ php-cs-fixer fix src/ Support Support is available via the issue tracker in the Github project page or via IRC, EFNet, channel #pickle. Running tests Unit tests are written using atoum. You will get atoum, among other dependencies, when running composer install. To run tests, you will need to run the following command: $ vendor/bin/atoum  # To run tests in a loop, ideal to do TDD $ vendor/bin/atoum --loop There are also some Behat tests. You will get Behat, among other dependencies, when running composer install. To run tests, you will need to run the following command: $ vendor/bin/behat  # To choose the test suite you want to run $ vendor/bin/behat -s pickle Pickle is covered using 4 Behat tests suites: pickle runs tests against pickle's sources pickle_phar runs tests against pickle's Phar which you have to manually build pecl tests PECL extensions conversion with pickle's sources phar_pecl tests PECL extensions conversion with pickle's Phar Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/FriendsOfPHP/pickle"	"A PHP extension installer."	"true"
"Dependency Management Extras"	"Composed"	"https://github.com/joshdifabio/composed"	"A library to parse your project's Composer environment at runtime."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"12"	"2"	"0"	"GitHub - joshdifabio/composed: Easily parse your project's Composer configuration, and those of its dependencies, at runtime Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 12 Fork 0 joshdifabio/composed Code Issues 1 Pull requests 0 Pulse Graphs Easily parse your project's Composer configuration, and those of its dependencies, at runtime 26 commits 1 branch 1 release Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.0 Nothing to show New pull request Latest commit afb05a9 Jun 6, 2016 joshdifabio Use installed.json to get installed packages … Previously we used composer.lock, but this doesn't allow us to tell whether dev packages were installed. Using vendor/composer/installed.json is superior in that it allows us to get all installed packages, ignoring dev packages for production builds and including them for dev builds. Permalink Failed to load latest commit information. src Use installed.json to get installed packages Jun 6, 2016 .gitattributes Fix line endings May 11, 2016 .gitignore nitial commit Jul 11, 2015 CHANGELOG.md nitial commit Jul 11, 2015 LICENSE nitial commit Jul 11, 2015 README.md Rename library to Composed Jul 16, 2015 composer.json Version 2.0-dev May 11, 2016 README.md Composed This library provides a set of utility functions designed to help you parse your project's Composer configuration, and those of its dependencies, at runtime. Usage The API combines functional and object-oriented approaches. Locate the vendor directory (Chicken and egg...) $absoluteVendorPath = Composed\VENDOR_DIR; Locate the project's base directory $absoluteProjectPath = Composed\BASE_DIR; Get the authors of a specific package You can fetch data from the composer.json file of a specific package. $authors = Composed\package_config('phpunit/phpunit', 'authors');  assert($authors === [     [         'name' => ""Sebastian Bergmann"",         'email' => ""sebastian@phpunit.de"",         'role' => ""lead"",     ], ]); Get licenses of all installed packages You can fetch data from all composer.json files in your project in one go. $licenses = Composed\package_configs('license');  assert($licenses === [   'joshdifabio/composed' => ""MIT"",   'doctrine/instantiator' => ""MIT"",   'phpunit/php-code-coverage' => ""BSD-3-Clause"", ]); Get the absolute path to a file in a package $path = Composed\package('phpunit/phpunit')->getPath('composer.json'); Get all packages installed on your project foreach (Composed\packages() as $packageName => $package) {     $pathToPackageConfig = $package->getPath('composer.json');     // ... } Get data from your project's Composer config You can also fetch data from the composer.json file located in your project root. $projectAuthors = Composed\project_config('authors');  assert($projectAuthors === [     [         'name' => 'Josh Di Fabio',         'email' => 'joshdifabio@somewhere.com',     ], ]); Installation Install Composed using composer. composer require joshdifabio/composed  Credits Credit goes to @igorw whose get-in library is partially copied into this library. Unfortunately, igorw/get-in requires PHP 5.4 while Composed aims for PHP 5.3 compatibility. License Composed is released under the MIT license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/joshdifabio/composed"	"A library to parse your project's Composer environment at runtime."	"true"
"Dependency Management Extras"	"Composer Checker"	"https://github.com/silpion/composer-checker"	"A tool to validate Composer configurations."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"6"	"0"	"GitHub - silpion/composer-checker Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 10 Fork 0 silpion/composer-checker Code Issues 1 Pull requests 0 Pulse Graphs No description or website provided. 14 commits 1 branch 4 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.3.0 v0.2.0 v0.1.1 v0.1 Nothing to show New pull request Latest commit 1673676 Oct 1, 2014 h4cc Added readme for `remove:*` commands. Permalink Failed to load latest commit information. Command Added commands for removing src and dist from a composer.lock Oct 1, 2014 bin Added commands for removing src and dist from a composer.lock Oct 1, 2014 test Added check:src command. Added --allow-empty flags. Added PHP 5.6 to … Jun 25, 2014 .travis.yml Added commands for removing src and dist from a composer.lock Oct 1, 2014 LICENSE Initial commit. Nov 18, 2013 README.md Added readme for `remove:*` commands. Oct 1, 2014 box.json Initial commit. Nov 18, 2013 composer.json Added commands for removing src and dist from a composer.lock Oct 1, 2014 README.md Composer Checker A simple tool for various composer related checks and validations. Usage $ php bin/composer-checker  Available commands:   help         Displays help for a command   list         Lists commands check   check:dist   Matching the dist urls in a composer.lock file against some patterns.   check:src    Matching the src urls in a composer.lock file against some patterns. remove   remove:dist   Removing dist urls from a composer.lock file.   remove:src    Removing src urls from a composer.lock file.  Check: Dist-Urls This check is intended to validate the dist-urls in a composer.lock file. When using a Satis Mirror for your packages, it might break your ci/deployment when external dist-urls are used in your composer.lock file. Simply run this command to check against the url ""satis.example.com"": $ php bin/composer-checker check:dist -p ""satis.example.com"" composer.lock  --- Invalid urls found --- +-----------------+-----------------------------------------------------------------------------------------------+ | Package         | Dist-URL                                                                                      | +-----------------+-----------------------------------------------------------------------------------------------+ | symfony/console | https://api.github.com/repos/symfony/Console/zipball/00848d3e13cf512e77c7498c2b3b0192f61f4b18 | +-----------------+-----------------------------------------------------------------------------------------------+  The output gives a hint, which packages do not comply with the given url pattern, which is basically just a regex. A positive example with a more complex regex: $ php bin/composer-checker check:dist -p ""^https://api.github.com/repos/(.+)/(.+)/zipball/([a-f0-9]+)$"" composer.lock All urls valid.  It is also possible to enforce to use only ""https"" dist-urls with a pattern like this: $ php bin/composer-checker check:dist -p ""^https://"" composer.lock  Allowing empty or missing dist urls can be done with the --allow-empty switch. Check: Source-Urls Parallel to the dist urls, the source urls can be checked too. $ php bin/composer-checker check:src -p ""git@git.example.com/foo.git"" composer.lock  Allowing empty or missing source urls can be done with the --allow-empty switch. Remove: Dist-Urls This command will remove distribution urls from a given composer.lock file. Forcing composer to install all packages from ""source"". It is possible to --except specific patterns like ""jquery.com"". These urls will not be removed. php bin/composer-checker remove:dist -e jquery.com composer.lock  Remove: Source-Urls Working the same as the remove:dist counterpart. Removing the ""source"" entries from a given composer.lock file. php bin/composer-checker remove:src -e jquery.com composer.lock  This command can be very useful for automated deploying. Because if a package mirror like Satis, holding ""dist"" copies, is not available, composer will silently fail back to using ""source"" packages creating a unnoticed dependency between production and the VCS. Removing all the ""source"" entries from a composer.lock file, will force composer to only use the ""dist"" urls or stop with a failure. LICENSE The license can be found here: LICENSE Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/silpion/composer-checker"	"A tool to validate Composer configurations."	"true"
"Dependency Management Extras"	"Composer Merge Plugin"	"https://github.com/wikimedia/composer-merge-plugin"	"A composer plugin to merge several composer.json files."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"140"	"18"	"25"	"GitHub - wikimedia/composer-merge-plugin: Merge one or more additional composer.json files at Composer runtime Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 140 Fork 25 wikimedia/composer-merge-plugin Code Issues 7 Pull requests 2 Pulse Graphs Merge one or more additional composer.json files at Composer runtime https://github.com/wikimedia/composer-merge-plugin 150 commits 1 branch 7 releases 10 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.3.1 v1.3.0 v1.2.1 v1.2.0 v1.1.0 v1.0.0 v0.5.0 Nothing to show New pull request Latest commit 54142e6 Jul 14, 2016 legoktm committed on GitHub Merge pull request #124 from bd808/prepend-repo-default … Always prepend repositories Permalink Failed to load latest commit information. example Better support for initial install of plugin Jun 27, 2015 src Always prepend repositories Jul 14, 2016 tests/phpunit Always prepend repositories Jul 14, 2016 .arcconfig Remove PhpunitTestEngine from arcconfig Jul 14, 2016 .arclint Add Arcanist config files Nov 1, 2015 .gitattributes Ignore differential files for export Nov 6, 2015 .gitignore Output test reports Dec 23, 2014 .scrutinizer.yml Updating Travis CI and Scrutinizer yaml files. Oct 27, 2015 .travis.yml TravisCI: fix YAML syntax errors (#116) Apr 22, 2016 LICENSE Touch up credits information Jun 26, 2015 README.md Always prepend repositories Jul 14, 2016 composer.json Always prepend repositories Jul 14, 2016 phpunit.xml.dist Enable all PHPUnit strict checks May 27, 2015 README.md Composer Merge Plugin Merge multiple composer.json files at Composer runtime. Composer Merge Plugin is intended to allow easier dependency management for applications which ship a composer.json file and expect some deployments to install additional Composer managed libraries. It does this by allowing the application's top level composer.json file to provide a list of optional additional configuration files. When Composer is run it will parse these files and merge their configuration settings into the base configuration. This combined configuration will then be used when downloading additional libraries and generating the autoloader. Composer Merge Plugin was created to help with installation of MediaWiki which has core library requirements as well as optional libraries and extensions which may be managed via Composer. Installation Composer Merge Plugin requires Composer 1.0.0 or newer. $ composer require wikimedia/composer-merge-plugin  Usage {     ""require"": {         ""wikimedia/composer-merge-plugin"": ""dev-master""     },     ""extra"": {         ""merge-plugin"": {             ""include"": [                 ""composer.local.json"",                 ""extensions/*/composer.json""             ],             ""require"": [                 ""submodule/composer.json""             ],             ""recurse"": true,             ""replace"": false,             ""merge-dev"": true,             ""merge-extra"": false,             ""merge-extra-deep"": false         }     } }  Plugin configuration The plugin reads its configuration from the merge-plugin section of your composer.json's extra section. An include setting is required to tell Composer Merge Plugin which file(s) to merge. include The include setting can specify either a single value or an array of values. Each value is treated as a PHP glob() pattern identifying additional composer.json style configuration files to merge into the root package configuration for the current Composer execution. The following sections of the found configuration files will be merged into the Composer root package configuration as though they were directly included in the top-level composer.json file: autoload autoload-dev (optional, see merge-dev below) conflict provide replace repositories require require-dev (optional, see merge-dev below) suggest extra (optional, see merge-extra below) require The require setting is identical to include except when a pattern fails to match at least one file then it will cause an error. recurse By default the merge plugin is recursive; if an included file has a merge-plugin section it will also be processed. This functionality can be disabled by adding a ""recurse"": false setting. replace By default, Composer's conflict resolution engine is used to determine which version of a package should be installed when multiple files specify the same package. A ""replace"": true setting can be provided to change to a ""last version specified wins"" conflict resolution strategy. In this mode, duplicate package declarations found in merged files will overwrite the declarations made by earlier files. Files are loaded in the order specified by the include setting with globbed files being processed in alphabetical order. merge-dev By default, autoload-dev and require-dev sections of included files are merged. A ""merge-dev"": false setting will disable this behavior. merge-extra A ""merge-extra"": true setting enables the merging the contents of the extra section of included files as well. The normal merge mode for the extra section is to accept the first version of any key found (e.g. a key in the master config wins over the version found in any imported config). If replace mode is active (see above) then this behavior changes and the last key found will win (e.g. the key in the master config is replaced by the key in the imported config). If ""merge-extra-deep"": true is specified then, the sections are merged similar to array_merge_recursive() - however duplicate string array keys are replaced instead of merged, while numeric array keys are merged as usual. The usefulness of merging the extra section will vary depending on the Composer plugins being used and the order in which they are processed by Composer. Note that merge-plugin sections are excluded from the merge process, but are always processed by the plugin unless recursion is disabled. Running tests $ composer install $ composer test  Contributing Bug, feature requests and other issues should be reported to the GitHub project. We accept code and documentation contributions via Pull Requests on GitHub as well. PSR-2 Coding Standard is used by the project. The included test configuration uses PHP Code Sniffer to validate the conventions. Tests are encouraged. Our test coverage isn't perfect but we'd like it to get better rather than worse, so please try to include tests with your changes. Keep the documentation up to date. Make sure README.md and other relevant documentation is kept up to date with your changes. One pull request per feature. Try to keep your changes focused on solving a single problem. This will make it easier for us to review the change and easier for you to make sure you have updated the necessary tests and documentation. License Composer Merge plugin is licensed under the MIT license. See the LICENSE file for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/wikimedia/composer-merge-plugin"	"A composer plugin to merge several composer.json files."	"true"
"Dependency Management Extras"	"Composition"	"https://github.com/bamarni/composition"	"A library to check your Composer environment at runtime."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"97"	"6"	"4"	"GitHub - bamarni/composition: Check your Composer dependencies at runtime. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 97 Fork 4 bamarni/composition Code Issues 0 Pull requests 0 Pulse Graphs Check your Composer dependencies at runtime. 12 commits 1 branch 1 release Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.0 Nothing to show New pull request Latest commit 4230f3e Mar 18, 2016 bamarni update Permalink Failed to load latest commit information. src removed a property Sep 8, 2012 tests fixed typo Aug 27, 2012 .gitignore initial commit Aug 25, 2012 .travis.yml update Mar 18, 2016 README.md update Mar 18, 2016 composer.json update Mar 18, 2016 phpunit.xml.dist initial commit Aug 25, 2012 README.md Composition Composition provides a lightweight and generic API, that you can use to check your environment at runtime, instead of manually go checking for regex in constants, classes/functions existence, matching a version against a class constant, ... It only works when using Composer as package management tool. Some examples A single command to check your PHP environment : if (!\Composition::has('vendor/super-package', '>=2.0') {     $this->markTestSkipped('The following tests require ""SuperPackage"" to be at least at 2.0'); }  \Composition::has('php', '5.4.*'); \Composition::has('ext-mongo'); Check the platform : if (\Composition::isWindows()) { // ... } Note This tool should mostly be used in your unit tests, and not be abused in production. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bamarni/composition"	"A library to check your Composer environment at runtime."	"true"
"Dependency Management Extras"	"NameSpacer"	"https://github.com/ralphschindler/Namespacer"	"A library to convert from underscores to namespaces."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"54"	"3"	"9"	"GitHub - ralphschindler/Namespacer: PHP Class converter to namepaces. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 54 Fork 9 ralphschindler/Namespacer Code Issues 1 Pull requests 0 Pulse Graphs PHP Class converter to namepaces. 5 commits 1 branch 0 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit d3dc5d0 Mar 4, 2013 ralphschindler Added phar link to readme Permalink Failed to load latest commit information. bin Fixed mapper/transformer Mar 4, 2013 config Added initial use statement processing Mar 1, 2013 src/Namespacer Fixed mapper/transformer Mar 4, 2013 Module.php Initial commit Mar 1, 2013 README.md Added phar link to readme Mar 4, 2013 composer.json Initial commit Mar 1, 2013 composer.lock Initial commit Mar 1, 2013 namespacer.phar Fixed mapper/transformer Mar 4, 2013 namespacer.php Initial commit Mar 1, 2013 README.md Namespacer This tool will assist you in taking older underscore/prefix spaced code and will namespace it as best as it can, and also make the files and class names ZF/PEAR compatible. This two step command will first scan files and produce a map. You can then view or edit the file before moving onto the second step. The second step does the actual transformation. These transformations will be done in place, so it is best to either do this in a separate copy of the code, or on top of a git repository where you can easily reset --hard if you need to. Download: https://github.com/ralphschindler/Namespacer/blob/master/namespacer.phar?raw=true First, create a map file: namespacer.phar map --mapfile types.php --source path/to/src  Second, transform the types located in the map file: namespacer.phar transform --mapfile types.php  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ralphschindler/Namespacer"	"A library to convert from underscores to namespaces."	"true"
"Dependency Management Extras"	"Patch Installer"	"https://github.com/goatherd/patch-installer"	"A library to install patches using Composer."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"46"	"6"	"2"	"GitHub - goatherd/patch-installer: Patch other composer packages on install or update Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 46 Fork 2 goatherd/patch-installer Code Issues 5 Pull requests 0 Pulse Graphs Patch other composer packages on install or update 3 commits 1 branch 1 release Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.0.1 Nothing to show New pull request Latest commit bc24129 Apr 20, 2013 goatherd #4 Permalink Failed to load latest commit information. Goatherd/Patch initial release Apr 12, 2013 COPYING #4 Apr 20, 2013 README.md initial release Apr 12, 2013 composer.json initial release Apr 12, 2013 README.md patch-installer Patch other composer packages on install or update. experimental feature Usage For a patch type change the install path to vendor directory and merge into other vendor directories. Your composer.json {     ""type"": ""patch"",     ""require"": {         ""some/dependency"": ""*"",         ""goatherd/patch-installer"": ""*""     },     ""extra"": {         ""patch-path"": ""some/dependency"",         ""patch-files"": [             ""path/to/firstFile.ext"",             ""config.xml""         ]     } } Limitations order of installation is important do not try to patch a patch can not uninstall (but updates) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/goatherd/patch-installer"	"A library to install patches using Composer."	"true"
"Dependency Management Extras"	"Prestissimo"	"https://github.com/hirak/prestissimo"	"A composer plugin which enables parallel install process."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1849"	"82"	"53"	"GitHub - hirak/prestissimo: composer parallel install plugin Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 82 Star 1,849 Fork 53 hirak/prestissimo Code Issues 4 Pull requests 0 Pulse Graphs composer parallel install plugin 318 commits 3 branches 27 releases Fetching contributors PHP 96.9% JavaScript 2.6% HTML 0.5% PHP JavaScript HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master v0.1 v0.2 Nothing to show 0.3.3 0.3.2 0.3.1 0.3.0 0.2.4 0.2.3 0.2.2 0.2.1 0.2.0 0.1.18 0.1.17 0.1.16 0.1.15 0.1.14 0.1.13 0.1.12 0.1.11 0.1.10 0.1.9 0.1.8 0.1.7 0.1.6 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 Nothing to show New pull request Latest commit be0dd2f Jul 9, 2016 hirak committed on GitHub Merge pull request #114 from hirak/enable-lazy-providers … Enabled lazy-providers Permalink Failed to load latest commit information. artifacts Added apigen, phpmetrics Feb 20, 2016 bin Added apigen, phpmetrics Feb 20, 2016 src Enabled lazy-providers Jul 9, 2016 tests add test Jul 9, 2016 .coveralls.yml Removed coveralls token Jan 31, 2016 .envrc Fixed coding styles Jun 12, 2016 .gitattributes Tweaked .git files Feb 20, 2016 .gitignore git ignore `tags` May 21, 2016 .scrutinizer.yml add scrutinizer.yml Jan 24, 2016 .travis.yml Fixed .travis.yml Jul 3, 2016 LICENSE initial commit Nov 30, 2015 README.md Update default version in composer require command Jun 5, 2016 apigen.neon Added apigen, phpmetrics Feb 20, 2016 composer.json Do not use unbound version for PHP Jun 16, 2016 composer.lock composer update Jul 9, 2016 gulpfile.js Fixed coding styles Jun 12, 2016 package.json update package.json Jul 9, 2016 phpcs.xml.dist Tweaked ParallelDownloader Feb 17, 2016 phpunit.xml.dist Added ctags generator May 21, 2016 README.md prestissimo (composer plugin) composer parallel install plugin. Requirements composer >=1.0.0 (includes dev-master) PHP >=5.3, (suggest >=5.5, because curl_share_init) ext-curl Install $ composer global require ""hirak/prestissimo:^0.3"" Uninstall $ composer global remove hirak/prestissimo Benchmark Example 288s -> 26s $ composer create-project laravel/laravel laravel1 --no-progress --profile --prefer-dist Config prestissimo ^0.3.x Recognize composer's options. You don't need to set any special configuration. config.capath config.cafile prestissimo ^0.2.x in local composer.json or ~/.composer/config.json {   ...   ""config"": {     ""prestissimo"": {       ""maxConnections"": 6,       ""minConnections"": 3,       ""verbose"": false,       ""insecure"": false,       ""cainfo"": ""/absolute/path/to/cacert.pem"",       ""userAgent"": ""Your Awesome User Agent"",       ""privatePackages"": [         ""myorg/private1"", ""myorg/private2"", ...       ]     }   }   ... } maxConnections (int) default: 6 Limit connections for parallel downloading. verbose (bool) default: false CURLOPT_VERBOSE option. insecure (bool) default: false If insecure is true, this plugin doesn't verify all https certs. (CURLOPT_SSL_VERIFYPEER is off) You SHOULD NOT change this option. cainfo (string) default: """" (empty) An absolute path to cacert.pem userAgent (string) default: """" (empty) User Agent for downloading. CURLOPT_USERAGENT option. If userAgent is empty, composer user agent is used. privatePackages (string[]) default: empty If you list packages in this option, the local redirector(api.github.com -> codeload.github.com) will be off. Composer authentication It is also recommended to use composer's authentication as you may run into access errors otherwise due to request restriction for anonymous user for external services like github. For github.com you can use an auth.json with an oauth access token placed on your on the same level as your composer.json: {     ""github-oauth"": {         ""github.com"": ""YOUR_GITHUB_ACCESS_TOKEN""     } } License MIT License. See the LICENSE file. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hirak/prestissimo"	"A composer plugin which enables parallel install process."	"true"
"Dependency Management Extras"	"Satis"	"https://github.com/composer/satis"	"A static Composer repository generator."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1143"	"70"	"261"	"GitHub - composer/satis: Simple static Composer repository generator Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 70 Star 1,143 Fork 261 composer/satis Code Issues 44 Pull requests 1 Pulse Graphs Simple static Composer repository generator 392 commits 1 branch 2 releases 56 contributors PHP 92.7% HTML 7.3% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.0.0-alpha2 1.0.0-alpha1 Nothing to show New pull request Latest commit 10439c1 Jun 17, 2016 alcohol committed on GitHub Merge pull request #338 from MatthiasKuehneEllerhold/bugfix/purge_exc… … …eption_nothing_needed  fix exception during purge command when nothing is needed Permalink Failed to load latest commit information. bin increase memory limit, like bin/composer not to run out of ram Dec 8, 2012 res Added possibility to dump packages into provider files by setting ""pr… May 20, 2016 src fix exception during purge command when nothing is needed Jun 17, 2016 tests Added base path to providers-url and version uids to packages for pro… May 20, 2016 views anchor to package name Feb 23, 2016 .gitattributes satis doesn't have *.test files Nov 21, 2015 .gitignore dont commit lock file Apr 5, 2016 .php_cs adjust for satis Feb 19, 2016 .travis.yml holy smokes, its a stable composer/composer tag Apr 5, 2016 Dockerfile Add sample Dockerfile, close composer#228 Feb 18, 2016 LICENSE cleanup Nov 21, 2015 README.md composer-satis-builder Community Tools Apr 18, 2016 box.json add satis schema in Phar Dec 15, 2015 composer.json holy smokes, its a stable composer/composer tag Apr 5, 2016 phpunit.xml.dist cleanup Nov 21, 2015 README.md Satis - Package Repository Generator Simple static Composer repository generator. It uses any composer.json file as input and dumps all the required (according to their version constraints) packages into a Composer Repository file. Usage Download Composer: curl -sS https://getcomposer.org/composer.phar -o composer.phar Install satis: php composer.phar create-project composer/satis --stability=dev --keep-vcs Build a repository: php bin/satis build <configuration file> <build-dir> Read the more detailed instructions in the documentation. Purge If you choose to archive packages in your server, you can have useless files. With the purge command, you delete these files. php bin/satis purge <composer.json> <build-dir>  Note: be careful if you reference your archives in your lock file. Updating Updating is as simple as running git pull && php composer.phar install in the satis directory. Contributing Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. Fork the project, create a feature branch, and send us a pull request. Requirements PHP 5.5+ Authors Jordi Boggiano - j.boggiano@seld.be - http://twitter.com/seldaek - http://seld.be Nils Adermann - naderman@naderman.de - http://twitter.com/naderman - http://www.naderman.de See also the list of contributors who participated in this project. Community Tools satis-go - A simple web server for managing Satis configuration and hosting the generated Composer repository. satisfy - Symfony based composer repository manager with a simple web UI. satis-control-panel - Simple web UI for managing your Satis Repository with optional CI integration. composer-satis-builder - Simple tool for updating the Satis configuration (satis.json) ""require"" key on the basis of the project composer.json. License Satis is licensed under the MIT License - see the LICENSE file for details Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/composer/satis"	"A static Composer repository generator."	"true"
"Dependency Management Extras"	"Toran Proxy"	"https://toranproxy.com/"	"A static Composer repository and proxy."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Toran Proxy Toran Proxy A Composer proxy for speed and reliability Built to work with Composer Toran is built by Jordi Boggiano, lead developer of Composer. As such he can make sure they work well together. No surprises. Reliable and fast Composer deployments Toran acts as a proxy for Packagist, GitHub and other repositories. It is meant to be set up on your own server or even inside your office. This offers a few benefits: Redundant infrastructure to ensure your deployments never fail and your developers can work at any time. Packages will be installed from your proxy with a fallback to GitHub, ensuring a maximum availability. Higher bandwidth for faster installations. You can set up Toran in your local network or on a server near you. Easily host private packages Toran is easy to install and configure, and provides you with a web interface to conveniently manage and list your private Composer packages. It uses a file-based configuration that is easy to manage from the command line but also allows changes over the web interface. Whatever suits you best. Support Composer and Packagist The Toran license fee not only goes towards improving Toran itself. It also funds Composer and Packagist development and hosting. Supporting Toran means supporting open-source, making sure the PHP package ecosystem as a whole remains healthy and that your developers can find the best open-source libraries faster. Get your Toran license Prices below include all updates for as long as you own a license. Personal Use Supporter Business Developers 1 1 Support None Need More Support? Email Need More Support? Priority Email Need More Support? Price Free for personal use CHF 9.- / month €10 or $10 per month* CHF 49.- / year for priority support CHF 8.- per developer per month Every 10th developer is free All updates included in your yearly license 50+ devs? Contact us for custom pricing Download Order Order * Billing is in CHF and invoiced yearly. Prices are VAT excl. Prices in EUR and USD are only indicative. Highlighted Features Hosts your private Composer packages Proxies code downloads, either as zip archives or git clones Proxies Packagist and alternative repositories for Drupal, Magento, WP, etc. Protects you from GitHub and other code hosts being down Faster downloads from a server near you on a server your own Server Requirements Toran Proxy requires PHP 5.3.9 or above (including PHP 7) and the following PHP extensions need to be enabled: OpenSSL, ctype, JSON, XML. Licenses are issued by Nelmio AG, CHE-236.742.577, and covered by the End User License Agreement. © Nelmio 2016 - Support - Contact - Terms of Services - Twitter"	"null"	"null"	"A static Composer repository and proxy."	"true"
"Frameworks"	"Aura PHP"	"http://auraphp.com/"	"A framework of independent components."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Aura for PHP Aura for PHP About Packages Framework Blog Community Contributing Learn more » © 2011-2016, Aura for PHP"	"null"	"null"	"A framework of independent components."	"true"
"Frameworks"	"CakePHP"	"http://cakephp.org/"	"A rapid application development framework (CP)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6597"	"657"	"2988"	"GitHub - cakephp/cakephp: CakePHP: The Rapid Development Framework for PHP - Official Repository Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 657 Star 6,597 Fork 2,988 cakephp/cakephp Code Issues 185 Pull requests 19 Wiki Pulse Graphs CakePHP: The Rapid Development Framework for PHP - Official Repository http://cakephp.org 30,042 commits 16 branches 215 releases 422 contributors PHP 99.7% Other 0.3% PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.next 2.x 3.next 3.0-time-leap-year-problems 3.0-tree-wrong 3.2-hash cid-image errorcontroller-requesthandler fix-travis fix/rollback-in-after-save gh-pages issue-9088 issue-9099 issue-9106 master-mysql-year master Nothing to show 3.3.0-beta 3.2.12 3.2.11 3.2.10 3.2.9 3.2.8 3.2.7 3.2.6 3.2.5 3.2.4 3.2.3 3.2.2 3.2.1 3.2.0 3.2.0-RC1 3.1.13 3.1.12 3.1.11 3.1.10 3.1.9 3.1.8 3.1.7 3.1.6 3.1.5 3.1.4 3.1.3 3.1.2 3.1.1 3.1.0 3.1.0-beta2 3.1.0-beta 3.1.0-RC1 3.0.18 3.0.17 3.0.16 3.0.15 3.0.14 3.0.13 3.0.12 3.0.11 3.0.10 3.0.9 3.0.8 3.0.7 3.0.6 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 3.0.0-dev3 3.0.0-dev2 3.0.0-dev1 3.0.0-beta3 3.0.0-beta2 3.0.0-beta1 3.0.0-alpha2 3.0.0-alpha1 3.0.0-RC2 3.0.0-RC1 2.8.5 2.8.4 2.8.3 2.8.2 2.8.1 2.8.0 2.8.0-RC1 2.7.11 2.7.10 2.7.9 2.7.8 2.7.7 2.7.6 2.7.5 2.7.4 2.7.3 2.7.2 2.7.1 2.7.0 2.7.0-RC 2.6.13 2.6.12 2.6.11 2.6.10 2.6.9 2.6.8 2.6.7 2.6.6 2.6.5 2.6.4 2.6.3 2.6.2 2.6.1 2.6.0 2.6.0-beta 2.6.0-RC1 2.5.9 2.5.8 2.5.7 Nothing to show New pull request Latest commit 22da067 Jul 15, 2016 dereuromark committed on GitHub Merge pull request #9117 from johanmeiring/master … Docblock fix: Controller::referer should support array-based URL structure too Permalink Failed to load latest commit information. .github Remove unneeded headings. Feb 23, 2016 config Re-add the Equifax Secure Certificate Authority Apr 12, 2016 contrib Add linting as suggested by @jrbasso Mar 30, 2015 src Controller::referer should support array-based URL structure too Jul 14, 2016 tests Fix CS error. Jul 14, 2016 .editorconfig Update editorconfig, supress warnings in Travis build, set cakephp-co… Dec 31, 2014 .gitattributes Remove metadata files from archived packages. Jul 6, 2016 .gitignore Add phpcs.xml to gitignore Jun 4, 2016 .scrutinizer.yml Add .scrutinizer.yml Jul 5, 2015 .stickler.yml Let Stickler CI ignore the 2.x related branches Jun 15, 2016 .travis.yml No need to install apcu_bc on travis. Jun 12, 2016 LICENSE.txt Update license year Dec 31, 2015 Makefile Fix makefile for building non-head packages. Apr 3, 2016 README.md Fix a missed bullet. Jul 5, 2016 VERSION.txt Update version number to 3.2.12 Jul 8, 2016 appveyor.yml update the checked branch name Feb 1, 2016 composer.json Use a packaged release of the code sniffer. Jul 13, 2016 phpcs.xml.dist Rename phpcs.xml to phpcs.xml.dist and fix slashes in path. Jun 4, 2016 phpunit.xml.dist apcu accepts similar runtime conf like apc Apr 1, 2016 README.md CakePHP Framework CakePHP is a rapid development framework for PHP which uses commonly known design patterns like Associative Data Mapping, Front Controller, and MVC. Our primary goal is to provide a structured framework that enables PHP users at all levels to rapidly develop robust web applications, without any loss to flexibility. Installing CakePHP via Composer You can install CakePHP into your project using Composer. If you're starting a new project, we recommend using the app skeleton as a starting point. For existing applications you can run the following: $ composer require cakephp/cakephp:""~3.2"" Running Tests Assuming you have PHPUnit installed system wide using one of the methods stated here, you can run the tests for CakePHP by doing the following: Copy phpunit.xml.dist to phpunit.xml. Add the relevant database credentials to your phpunit.xml if you want to run tests against a non-SQLite datasource. Run phpunit. Some Handy Links CakePHP - The rapid development PHP framework. CookBook - The CakePHP user documentation; start learning here! API - A reference to CakePHP's classes. Plugins - A repository of extensions to the framework. The Bakery - Tips, tutorials and articles. Community Center - A source for everything community related. Training - Join a live session and get skilled with the framework. CakeFest - Don't miss our annual CakePHP conference. Cake Software Foundation - Promoting development related to CakePHP. Get Support! Slack - Join us on Slack. #cakephp on irc.freenode.net - Come chat with us, we have cake. Forum - Offical CakePHP forum. GitHub Issues - Got issues? Please tell us! Roadmaps - Want to contribute? Get involved! Contributing CONTRIBUTING.md - Quick pointers for contributing to the CakePHP project. CookBook ""Contributing"" Section - Details about contributing to the project. Security If you’ve found a security issue in CakePHP, please use the following procedure instead of the normal bug reporting system. Instead of using the bug tracker, mailing list or IRC please send an email to security [at] cakephp.org. Emails sent to this address go to the CakePHP core team on a private mailing list. For each report, we try to first confirm the vulnerability. Once confirmed, the CakePHP team will take the following actions: Acknowledge to the reporter that we’ve received the issue, and are working on a fix. We ask that the reporter keep the issue confidential until we announce it. Get a fix/patch prepared. Prepare a post describing the vulnerability, and the possible exploits. Release new versions of all affected versions. Prominently feature the problem in the release announcement. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cakephp/cakephp"	"A rapid application development framework (CP)."	"true"
"Frameworks"	"Laravel 5"	"https://laravel.com/"	"Another PHP framework (L5)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"24374"	"3263"	"8036"	"GitHub - laravel/laravel: A PHP Framework For Web Artisans Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3,263 Star 24,374 Fork 8,036 laravel/laravel Code Pull requests 0 Pulse Graphs A PHP Framework For Web Artisans http://laravel.com 4,844 commits 5 branches 64 releases 337 contributors PHP 95.5% HTML 3.0% Other 1.5% PHP HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.0 5.0 5.1 develop master Nothing to show v5.2.31 v5.2.29 v5.2.27 v5.2.24 v5.2.23 v5.2.15 v5.2.0 v5.1.33 v5.1.11 v5.1.4 v5.1.3 v5.1.1 v5.1.0 v5.0.22 v5.0.16 v5.0.1 v5.0.0 v4.2.11 v4.2.0 v4.1.27 v4.1.18 v4.1.0 v4.0.9 v4.0.8 v4.0.7 v4.0.6 v4.0.5 v4.0.4 v4.0.0 v4.0.0-BETA4 v4.0.0-BETA3 v3.2.14 v3.2.13 v3.2.12 v3.2.11 v3.2.10 v3.2.9 v3.2.8 v3.2.7 v3.2.6 v3.2.5 v3.2.4 v3.2.3 v3.2.1 v3.2.0 v3.2.0-beta-2 v3.2.0-beta-1 v3.1.9 v3.1.8 v3.1.7 v3.1.6 v3.1.5 v3.1.4 v3.1.3 v3.1.2 v3.1.1 v3.1.0 v3.0.4 v3.0.3 v3.0.2 v3.0.1 v3.0.0 v3.0.0-rc-2 v3.0.0-beta-2 Nothing to show New pull request Latest commit e72d4a8 Jul 14, 2016 GrahamCampbell Merge branch '5.1' Permalink Failed to load latest commit information. app code formatting Jul 9, 2016 bootstrap Use the ::class notation Jun 8, 2015 config expire jobs after 90 seconds Jun 29, 2016 database Make password_resets.created_at nullable Jun 23, 2016 public handle authorization header Jan 23, 2016 resources Add fallback sans-serif font in case the custom font fails to load Jul 5, 2016 storage Ignore schedule files Mar 17, 2016 tests Make TestCase abstract Jun 2, 2016 .env.example working on formatting Jun 4, 2016 .gitattributes Switch to `.scss` Apr 22, 2016 .gitignore add to gitignore Feb 12, 2016 artisan Use the ::class notation Jun 8, 2015 composer.json Use ComposerScripts Mar 23, 2016 gulpfile.js Change comment to reflect the change of the default css preprocessor. Jun 27, 2015 package.json Use Bootstrap 3.3 May 1, 2016 phpunit.xml Backport the phpunit fixes Apr 5, 2016 readme.md clearing redundancy Feb 29, 2016 server.php Sync with 5.0 Jun 15, 2015 readme.md Laravel PHP Framework Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable, creative experience to be truly fulfilling. Laravel attempts to take the pain out of development by easing common tasks used in the majority of web projects, such as authentication, routing, sessions, queueing, and caching. Laravel is accessible, yet powerful, providing tools needed for large, robust applications. A superb inversion of control container, expressive migration system, and tightly integrated unit testing support give you the tools you need to build any application with which you are tasked. Official Documentation Documentation for the framework can be found on the Laravel website. Contributing Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the Laravel documentation. Security Vulnerabilities If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell at taylor@laravel.com. All security vulnerabilities will be promptly addressed. License The Laravel framework is open-sourced software licensed under the MIT license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/laravel/laravel"	"Another PHP framework (L5)."	"true"
"Frameworks"	"Nette"	"https://nette.org/"	"Another framework comprised of individual components."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"66"	"35"	"155"	"GitHub - nette/web-content: Documentation and website content. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 66 Fork 155 nette/web-content Code Issues 61 Pull requests 12 Pulse Graphs Documentation and website content. https://nette.org/en/writing 1,261 commits 10 branches 0 releases 133 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: doc-2.4 Switch branches/tags Branches Tags addons-portal convertor doc-0.9 doc-2.0 doc-2.1 doc-2.2 doc-2.3 doc-2.4 nette.org nettefoundation.com Nothing to show Nothing to show New pull request Latest commit b878403 Jul 13, 2016 xsusov committed with dg Fix Use-statment to newer coding standard in examples and updated las… … …t example for Custom router in CS translation to match newer version from EN translation in en/routing.texy (#459) Permalink Failed to load latest commit information. cs Fix Use-statment to newer coding standard in examples and updated las… Jul 13, 2016 en Fix Use-statment to newer coding standard in examples and updated las… Jul 13, 2016 files quickstart: sandbox replaced with web-project Jul 11, 2016 wip/book used short array syntax May 23, 2016 .gitignore initial commit Jul 1, 2013 .travis.yml travis: migrating to container-based infrastructure Jul 23, 2015 contributing.md used https://nette.org in links Aug 18, 2015 readme.md used https://nette.org in links Aug 17, 2015 readme.md Nette Framework Website Content Here is the most of content of https://nette.org website. You are free to make changes or translate existing pages. Before contributing, please read contributing information to make sure everything will be ok. Thank you for making documentation better! This content is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. By contributing you are agreeing to license your contribution under this license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nette/web-content"	"Another framework comprised of individual components."	"true"
"Frameworks"	"Phalcon"	"https://phalconphp.com/en/"	"A framework implemented as a C extension."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6963"	"676"	"1289"	"GitHub - phalcon/cphalcon: Web framework delivered as a C-extension for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 676 Star 6,963 Fork 1,289 phalcon/cphalcon Code Issues 665 Pull requests 48 Wiki Pulse Graphs Web framework delivered as a C-extension for PHP http://phalconphp.com 7,748 commits 34 branches 70 releases 153 contributors PHP 34.9% Zephir 28.1% C 25.0% PLpgSQL 11.1% Shell 0.5% M4 0.3% Other 0.1% PHP Zephir C PLpgSQL Shell M4 Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.4.5 0.5.0 0.5.1 0.5.2 0.5.3 0.6.0 0.6.1 0.7.0 0.8.0 0.9.0 0.9.1 1.0.0 1.0.1 1.1.0 1.2.0 1.2.1 1.2.2 1.2.3 1.2.4 1.2.5 1.2.6 1.3.0 1.3.1 1.3.2 1.3.3 1.3.4 1.3.5 1.3.6 2.0.x 2.0.0 2.1.x master php7-parsers php7-support Nothing to show v1.2.5 v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.0 v1.0.1 v1.0.0 v0.9.0 v0.8.0 v0.7.0 v0.6.1 v0.5.3 v0.4.5 phalcon-v2.0.13 phalcon-v2.0.12 phalcon-v2.0.11 phalcon-v2.0.10 phalcon-v2.0.9 phalcon-v2.0.8 phalcon-v2.0.7 phalcon-v2.0.6 phalcon-v2.0.5 phalcon-v2.0.4 phalcon-v2.0.3 phalcon-v2.0.2 phalcon-v2.0.1 phalcon-v2.0.0 phalcon-v1.3.4 phalcon-v1.3.3 phalcon-v1.3.2 phalcon-v1.3.1 phalcon-v1.3.0 phalcon-v1.2.6 phalcon-v1.2.5 phalcon-v1.2.4 phalcon-v1.2.3 phalcon-v1.2.2 phalcon-v1.2.1 phalcon-v1.2.0 phalcon-v1.1.0 phalcon-v1.0.1 phalcon-v1.0.0 phalcon-v0.9.0 phalcon-v0.8.0 phalcon-v0.7.0 phalcon-v0.6.1 phalcon-v0.5.3 phalcon-v0.4.5 Dao-v1.3.7 Dao-v1.3.6.3 Dao-v1.3.6.2 Dao-v1.3.6.1 Dao-v1.3.6 Dao-v1.3.6-RC Dao-v1.3.6-Final Dao-v1.3.5 Dao-v1.3.5-RC Dao-v1.3.4.2 Dao-v1.3.4.1 Dao-v1.3.4 Dao-v1.3.4-RC Dao-v1.3.3.3 Dao-v1.3.3.2 Dao-v1.3.3-beta Dao-v1.3.3-RC Dao-v1.3.3-Final Dao-v1.3.2-Release Dao-v1.3.0 Nothing to show New pull request Latest commit 9c66927 May 19, 2016 sergeyklay Merge pull request #11811 from phalcon/2.0.x … Updated CHANGELOG.md [ci skip] Permalink Failed to load latest commit information. build Regenerating builds [ci skip] May 17, 2016 docs Change the file type of DOCUMENTATION.txt Dec 25, 2015 ext Updating version to 2.0.13, using Zephir 0.9.2 May 17, 2016 optimizers Fixes #10301 May 10, 2015 phalcon Updating version to 2.0.13, using Zephir 0.9.2 May 17, 2016 php-tests 10646 improve translate replacePlaceHolders() Jul 17, 2015 tests Fixed issue #11324 Jan 19, 2016 unit-tests Fixed ConfigTest May 11, 2016 .gitignore Amended git ignores Aug 10, 2015 .gitmodules Fixing submodules Apr 16, 2015 .travis.yml Used stable Zephir May 11, 2016 CHANGELOG.md Updated CHANGELOG.md [ci skip] May 19, 2016 CONTRIBUTING.md Updated contributing guide (2) Aug 22, 2015 README.md Fixed typos. Apr 21, 2015 codecept.phar Replaced Codeception phar; rebuilt CD classes. Corrections to the Htt… Oct 30, 2014 codeception.yml Fixed Travis' MySQL credentials Jan 5, 2016 composer.json Update Composer config Sep 14, 2015 config.json Updating version to 2.0.13, using Zephir 0.9.2 May 17, 2016 config.py Merge branch 'master' into 1.3.0 Mar 17, 2014 run-tests.sh Updating CONTRIBUTING, renaming run-tests Apr 16, 2015 README.md Phalcon Framework Phalcon is an open source web framework delivered as a C extension for the PHP language providing high performance and lower resource consumption. Get Started Phalcon is written in Zephir/C with platform independence in mind. As a result, Phalcon is available on Microsoft Windows, GNU/Linux, and Mac OS X. You can either download a binary package for the system of your choice or build it from source. Windows To install Phalcon on Windows: Download Phalcon for Windows Extract the DLL file and copy it to your PHP extensions directory Edit your php.ini file and add this line: extension=php_phalcon.dll Finally, restart your webserver Hint: To ensure that your Phalcon installation was successful, debug with <?php phpinfo(); ?> and search for a section mentioning the Phalcon extension. Linux/Unix/Mac On a Unix-based platform you can easily compile and install the extension from sources. Requirements Prerequisite packages are: PHP 5.4.x/5.5.x/5.6.x development resources GCC compiler (Linux/Solaris) or Xcode (Mac) Ubuntu: sudo apt-get install php5-dev libpcre3-dev gcc make Suse: sudo zypper install php5-devel gcc make CentOS/Fedora/RHEL sudo yum install php-devel pcre-devel gcc make Compilation Follow these instructions to generate a binary extension for your platform: git clone git://github.com/phalcon/cphalcon.git cd cphalcon/build sudo ./install Add the extension to your php.ini: extension=phalcon.so Finally, restart the webserver. External Links Documentation Support Blog Zephir Twitter Current Build Status Phalcon Framework is built under the Travis CI service. Every commit pushed to this repository will queue a build into the continuous integration service and will run all PHPUnit tests to ensure that everything is going well and the project is stable. The current build status is: Meet the Incubator Our community is developing amazing extra features for Phalcon every day via Incubator. There are resources to enhance your experience with the framework and that enlarge the main features. Just give it a try and help us improve Phalcon even more! License Phalcon is open source software licensed under the New BSD License. See the docs/LICENSE.txt file for more Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phalcon/cphalcon"	"A framework implemented as a C extension."	"true"
"Frameworks"	"PPI Framework 2"	"http://www.ppi.io/"	"An interoperability framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PPI Framework: The PHP Meta Framework Home Blog Chat Docs Download GitHub Screencasts The PHP Framework Engine PPI is a framework delivery engine. Using the concept of microservices, it lets you choose which parts of frameworks you wish to use on a per-feature basis. As such each feature makes its own independent decisions, allowing you to pick the best tools from the best PHP frameworks Key Features Lightweight Everything is component based, so you don't get everything by default, but gradaully slot in what you need Clean Modular Design Light and simple modules, extending from Zend Framework's Module system. Routing Each feature can pick from a variety of supported routers. Templating Each feature can pick from a variety of supported templating engines Databases Our powerful datasource component easily loads up popular DB libraries. Found issues? Let us know on GitHub Get in touch We chat on Gitter The community and have GooglePlus, Facebook groups, or follow us on Twitter. Blog posts The Official PPI Interview New Sphinx Powered Documentation System Tutorial: GeoLocation with Foursquare and Google Maps New Blog Launched Google plus community launched"	"null"	"null"	"An interoperability framework."	"true"
"Frameworks"	"Symfony 2"	"http://symfony.com/"	"A framework comprised of individual components (SF2)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Symfony, High Performance PHP Framework for Web Development <img height=""1"" width=""1"" style=""display:none"" src=""https://www.facebook.com/tr?id=930183467075199&amp;ev=PageView&amp;noscript=1""> Download What is Symfony? Documentation Community Showcase Marketplace Jobs Business Solutions News Search Download Symfony is a set of reusable PHP components... The standard foundation on which the best PHP applications are built. Choose any of the 30 stand-alone components available for your own applications. Browse components ... and a PHP framework for web projects Speed up the creation and maintenance of your PHP web applications. End repetitive coding tasks and enjoy the power of controlling your code. What is Symfony Projects using Symfony Learn Symfony Hundreds of carefully written documentation pages covering all Symfony features exist and they are FREE and open-source licensed! The Symfony Book The comprehensive guide to learn and master the Symfony full-stack framework. Start reading Additional resources The Quick Tour tutorial Cookbook tutorials Components reference Upcoming training sessions Getting Started with Symfony 3 Paris - 2016-07-18 Web Development with Symfony 3 Paris - 2016-07-18 Mastering Symfony 3 Paris - 2016-07-20 View all sessions Upcoming Symfony Conferences Join us in the biggest Symfony event of the year. December 1-3rd, 2016. Information Register SymfonyLive London September 15-16 2016 Information Register SymfonyLive Chicago October 13-14 2016 Information Register News from the Symfony blog New in Symfony 3.2: HttpFoundation improvements July 15, 2016 New in Symfony 3.2: User value resolver for controllers July 13, 2016 New in Symfony 3.2: Lazy loading of form choices July 12, 2016 Visit The Symfony Blog In the news Symfony 3 Certification now available in 4,000 centers around the world! GET CERTIFIED Follow Symfony and SensioLabs is a trademark of Fabien Potencier. All rights reserved. What is Symfony? Symfony at a Glance Symfony Components Projects using Symfony Case Studies Symfony Roadmap Security Policy Logo & Screenshots Trademark & Licenses symfony1 Legacy Learn Symfony Book Cookbook Components Best Practices Bundles Reference Training Certification Community SensioLabs Connect Support How to be Involved Code Stats Downloads Stats Contributors Blog A week of symfony Case studies Community Documentation Living on the edge Meet the Bundle Releases Security Advisories Symfony CMF Community Events Services Our services Train developers Start a project Manage your project quality Improve your project performance Struggling with your project Support Contact us About SensioLabs Contributors Jobs Support"	"null"	"null"	"A framework comprised of individual components (SF2)."	"true"
"Frameworks"	"Yii2"	"https://github.com/yiisoft/yii2/"	"Another PHP framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8405"	"1216"	"4910"	"GitHub - yiisoft/yii2: Yii 2 framework main development repo Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,216 Star 8,405 Fork 4,910 yiisoft/yii2 Code Issues 855 Pull requests 168 Wiki Pulse Graphs Yii 2 framework main development repo http://www.yiiframework.com 15,035 commits 20 branches 13 releases 658 contributors PHP 98.2% JavaScript 1.4% PLSQL 0.3% Shell 0.1% Batchfile 0.0% Ruby 0.0% PHP JavaScript PLSQL Shell Batchfile Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.1-date-format-consistency 2.1 8627-invalidate-table-schema-cache 9899-cache-bug 11073-failing-test alias ar-bug batch-query-test composite-url-rule docker-build elasticsearch-migration expand-ipv6 fix-6545 i18n-language-normalization inverseof issue-11771 master mssql-types query-alias verb-filter Nothing to show 2.0.9 2.0.8 2.0.7 2.0.6 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 2.0.0-rc 2.0.0-beta 2.0.0-alpha Nothing to show New pull request Latest commit b9245f7 Jul 15, 2016 w3lifer committed with samdark Fixes #11967: added missing string of YII_ENV definition [skip ci] Permalink Failed to load latest commit information. .github fixed links in CONTRIBUTING.md Mar 28, 2016 build prepare for next release Jul 11, 2016 docs Fixes #11967: added missing string of YII_ENV definition [skip ci] Jul 15, 2016 framework Fixes #11965: fixed docs for MessageController only and except Jul 15, 2016 tests Fixes #11949: Fixed `ActiveField::end` generates close tag when it's … Jul 14, 2016 .editorconfig Handled special .editorconfig case for markdown Sep 28, 2015 .gitattributes Ignore .github meta directory Mar 23, 2016 .gitignore Made .gitignore patterns more specific Feb 26, 2016 .scrutinizer.yml Typo in word Nov 22, 2014 .travis.yml update documentation fxp/composer-asset-plugin to version ^1.2.0 (#11876 Jul 3, 2016 LICENSE.md updated license information. Nov 2, 2013 README.md Update Readme - fixed PDF link Jan 20, 2016 code-of-conduct.md Update code-of-conduct.md Jun 27, 2016 composer.json updated jQuery dependency to include 1.12.x Jul 6, 2016 composer.lock Fixed build on PHP 5.4 (update .lock) Apr 25, 2016 phpunit.xml.dist better unit test for generateRandomBytes() Apr 28, 2016 README.md Yii PHP Framework Version 2 Thank you for choosing Yii 2 - a modern PHP framework designed for professional Web development. Yii 2 is a complete rewrite of its previous version Yii 1.1 which is one of the most popular PHP frameworks. Yii 2 inherits the main spirit behind Yii for being simple, fast and highly extensible. Yii 2 requires PHP 5.4 and embraces the best practices and protocols found in modern Web application development. DIRECTORY STRUCTURE build/               internally used build tools docs/                documentation framework/           core framework code tests/               tests of the core framework code  REQUIREMENTS The minimum requirement by Yii is that your Web server supports PHP 5.4. DOCUMENTATION Yii 2.0 has a Definitive Guide and a Class Reference which cover every detail of Yii. There is also a PDF version of the Definitive Guide and a Definitive Guide Mirror which is updated every 15 minutes. For 1.1 users, you may refer to Upgrading from Yii 1.1 to have a general idea of what has changed in 2.0. HOW TO PARTICIPATE Your participation to Yii 2 development is very welcome! You may participate in the following ways: Report an issue Translate documentation or messages Give us feedback or start a design discussion Contribute to the core code or fix bugs Acknowledging or citing Yii 2 In presentations If you are giving a presentation or talk featuring work that makes use of Yii 2 and would like to acknowledge it, we suggest using our logo on your title slide. In projects If you are using Yii 2 as part of an OpenSource project, a way to acknowledge it is to use a special badge in your README: If your code is hosted at GitHub, you can place the following in your README.md file to get the badge: [![Yii2](https://img.shields.io/badge/Powered_by-Yii_Framework-green.svg?style=flat)](http://www.yiiframework.com/)  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/yiisoft/yii2/"	"Another PHP framework."	"true"
"Frameworks"	"Zend Framework 2"	"http://framework.zend.com/"	"Another framework comprised of individual components (ZF2)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"390"	"84"	"90"	"GitHub - zendframework/zend-expressive: Start to develop PSR-7 middleware applications in PHP in a minute! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 84 Star 390 Fork 90 zendframework/zend-expressive Code Issues 21 Pull requests 27 Pulse Graphs Start to develop PSR-7 middleware applications in PHP in a minute! 905 commits 3 branches 19 releases 35 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages master Nothing to show 1.0.0 1.0.0rc7 1.0.0rc6 1.0.0rc5 1.0.0rc4 1.0.0rc3 1.0.0rc2 1.0.0rc1 0.5.3 0.5.2 0.5.1 0.5.0 0.4.0 0.3.1 0.3.0 0.2.1 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit 29a6578 May 3, 2016 weierophinney Merge branch 'hotfix/340' … Close #340 Permalink Failed to load latest commit information. doc/book Merge branch 'hotfix/340' May 3, 2016 src Add support for PHP 7 exceptions Jan 27, 2016 test Ensure error middleware pipelines can be executed Jan 20, 2016 .coveralls.yml Enable test coverage report Oct 20, 2015 .gitattributes Exclude non-production files from tarballs Oct 20, 2015 .gitignore New landing page Jan 26, 2016 .travis.yml Updated GH_TOKEN value (encrypted) Jan 29, 2016 CHANGELOG.md Added CHANGELOG for #306 Feb 1, 2016 CONDUCT.md Added code manifesto as code of conduct Mar 5, 2016 CONTRIBUTING.md Fixed escaping in CONTRIBUTING.md Mar 7, 2016 LICENSE.md Happy new year 2016 Jan 1, 2016 NOTES.md Fixed typos Aug 26, 2015 README.md Removed references to rc/release candidate Jan 28, 2016 composer.json Preparation for 1.0.0rc5 Dec 22, 2015 mkdocs.yml Edited and expanded flash messenger recipe Feb 1, 2016 phpcs.xml Separate routers and templates to their own packages Oct 10, 2015 phpunit.xml.dist Minor improvement on phpunit.xml.dist Oct 20, 2015 README.md zend-expressive Develop PSR-7 middleware applications in minutes! zend-expressive builds on zend-stratigility to provide a minimalist PSR-7 middleware framework for PHP, with the following features: Routing. Choose your own router; we support: Aura.Router FastRoute ZF2's MVC router DI Containers, via container-interop. Middleware matched via routing is retrieved from the composed container. Optionally, templating. We support: Plates Twig ZF2's PhpRenderer Installation We provide two ways to install Expressive, both using Composer: via our skeleton project and installer, or manually. Using the skeleton + installer The simplest way to install and get started is using the skeleton project, which includes installer scripts for choosing a router, dependency injection container, and optionally a template renderer and/or error handler. The skeleton also provides configuration for officially supported dependencies. To use the skeleton, use Composer's create-project command: $ composer create-project zendframework/zend-expressive-skeleton <project dir> This will prompt you through choosing your dependencies, and then create and install the project in the <project dir> (omitting the <project dir> will create and install in a zend-expressive-skeleton/ directory). Manual Composer installation You can install Expressive standalone using Composer: $ composer require zendframework/zend-expressive However, at this point, Expressive is not usable, as you need to supply minimally: a router. a dependency injection container. We currently support and provide the following routing integrations: Aura.Router: composer require zendframework/zend-expressive-aurarouter FastRoute: composer require zendframework/zend-expressive-fastroute ZF2 MVC Router: composer require zendframework/zend-expressive-zendrouter We recommend using a dependency injection container, and typehint against container-interop. We can recommend the following implementations: zend-servicemanager: composer require zendframework/zend-servicemanager pimple-container-interop: composer require xtreamwayz/pimple-container-interop Aura.Di: composer require aura/di:3.0.*@beta Additionally, you may optionally want to install a template renderer implementation, and/or an error handling integration. These are covered in the documentation. Documentation Documentation is in the doc tree, and can be compiled using mkdocs: $ mkdocs build Additionally, public-facing, browseable documentation is available at https://zendframework.github.io/zend-expressive/ Architecture Architectural notes are in NOTES.md. Please see the tests for full information on capabilities. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zendframework/zend-expressive"	"Another framework comprised of individual components (ZF2)."	"true"
"Frameworks"	"Radar"	"https://github.com/radarphp/Radar.Adr"	"An Action-Domain-Responder implementation for PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"37"	"9"	"7"	"GitHub - radarphp/Radar.Adr: The Action-Domain-Responder core for Radar. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 37 Fork 7 radarphp/Radar.Adr Code Issues 2 Pull requests 0 Pulse Graphs The Action-Domain-Responder core for Radar. 121 commits 2 branches 10 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 1.x Switch branches/tags Branches Tags 1.x arbiter Nothing to show 1.1.0 1.0.0 1.0.0-beta1 1.0.0-alpha7 1.0.0-alpha6 1.0.0-alpha5 1.0.0-alpha4 1.0.0-alpha3 1.0.0-alpha2 1.0.0-alpha1 Nothing to show New pull request Latest commit 0f0ee20 Apr 5, 2016 pmjones update for release Permalink Failed to load latest commit information. src retain Route as a Request attribute Apr 4, 2016 tests Merge branch '1.x' of github.com:radarphp/Radar.Adr into 1.x Nov 12, 2015 .gitignore initial commit May 1, 2015 .scrutinizer.yml add scrutinizer May 2, 2015 .travis.yml whitespace change May 27, 2015 CHANGES.md update for release Apr 5, 2016 CONTRIBUTING.md add meta-files Jun 4, 2015 LICENSE prep for release Mar 7, 2016 README.md add README Mar 30, 2016 composer.json all required packages are now stable Mar 28, 2016 phpunit.php add phpunit May 2, 2015 phpunit.xml.dist add phpunit May 2, 2015 README.md Radar.Adr This is the ""core"" package for a Radar project. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/radarphp/Radar.Adr"	"An Action-Domain-Responder implementation for PHP."	"true"
"Frameworks"	"Ice"	"http://www.iceframework.org/"	"Another simple and fast PHP framework delivered as C-extension."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"126"	"19"	"25"	"GitHub - ice/framework: Source code of Ice framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 126 Fork 25 ice/framework Code Issues 6 Pull requests 0 Pulse Graphs Source code of Ice framework http://www.iceframework.org/ 411 commits 1 branch 8 releases Fetching contributors C 68.7% Zephir 28.1% PHP 2.4% Other 0.8% C Zephir PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags dev Nothing to show 1.1.5 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.0.37 1.0.0 Nothing to show New pull request Latest commit 7023d2f Jun 15, 2016 Ice Framework php7, 3b8357b: regenerate ice sources [ci skip] Permalink Failed to load latest commit information. build php7, 3b8357b: regenerate ice sources [ci skip] Jun 15, 2016 ice Version, Ice 1.1.5 Jun 15, 2016 tests Sleet, allow for multi-line tags, fix #118 Jun 7, 2016 vendor Version, Ice 1.0.2 Mar 4, 2015 .gitignore Build, change directories to lowercase May 5, 2016 .travis.yml Build, change directories to lowercase May 5, 2016 CHANGELOG.md Version, Ice 1.1.5 Jun 15, 2016 LICENSE Ice framework - initial commit Nov 14, 2014 README.md Copyright, update year Jun 9, 2016 composer.json Core, use the latest zephir Nov 25, 2015 config.json Version, Ice 1.1.5 Jun 15, 2016 id_pgp.enc Version, Ice 1.1.3 Apr 25, 2016 id_rsa.enc Version, Ice 1.1.3 Apr 25, 2016 install Build, change directories to lowercase May 5, 2016 README.md Ice framework Simple and fast PHP framework delivered as C-extension. Stage How to contribute? Fork the ice/framework repository. Create a new branch for each feature or improvement. Send a pull request from each feature branch to the dev branch*. *please do not send files from build/ directory (they are generated automatically), just those from the ice/. Benchmark Installation Ice is a C-extension, so you need to download a binary for your platform or compile it from source code. Download openSUSE package: php5-ice, php7-ice Windows: DLLs source code of stable releases Compilation* Compile on Linux/Unix/Mac. There are two ways to compile Ice framework from sources: compile from build/ directory and C-files - recommended for beginners and for production machines; C-files are generated by Ice Team after merge and tests pass build by zephir (generate, compile and install extension) - recommended for developers and for testing next release; by this way you generate C-files from Zep-files, so you can get newest features/fixes but it could be unstable; after generate by zephir the files will be located in the ext/ directory build on Windows *before compilation please read the Requirements. Compile from build/: Clone and install from GitHub: git clone --depth=1 https://github.com/ice/framework.git cd framework/ ./install or install using composer: composer create-project iceframework/framework --no-dev Add extension to your php.ini: extension=ice.so Finally restart the webserver Build by zephir* (generate, compile and install extension): By default ./vendor/bin/zephir runs zephir. To build Ice you must run zephir begin in the framework/ directory: cd framework/ ./vendor/bin/zephir build *if you don't have zephir you need to compile zephir. Compile zephir You can install zephir using composer. If you already have ice and you are inside framework/ directory: composer update or clone zephir repo: mkdir vendor/phalcon/ && cd $_ git clone https://github.com/phalcon/zephir.git  # Install zephir ./install  # Create symbolic link mkdir ../../bin && cd $_ ln -s ../phalcon/zephir/bin/zephir Run zephir first time: cd framework/ ./vendor/bin/zephir Requirements You can build from C-files or build by zephir To build the PHP extension: gcc >= 4.4/clang++ >= 3.x/vc++ 11 gnu make >= 3.81/Windows nmake php development headers and tools To compile zephir-parser re2c Ubuntu: sudo apt-get install php5-dev libpcre3-dev gcc make re2c Suse: sudo zypper install php5-devel pcre-devel gcc make re2c CentOS/Fedora/RHEL sudo yum install php-devel pcre-devel gcc make re2c Windows Zephir Installation License Ice is open-sourced software licensed under the New BSD License. See the LICENSE file for more information. Copyright (c) 2014-2016 Ice Team. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ice/framework"	"Another simple and fast PHP framework delivered as C-extension."	"true"
"Framework Extras"	"CakePHP CRUD"	"https://github.com/friendsofcake/crud"	"A Rapid Application Development (RAD) plugin for CakePHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"238"	"49"	"100"	"GitHub - FriendsOfCake/crud: Production-grade rapid controller development with build in love for API and Search Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 49 Star 238 Fork 100 FriendsOfCake/crud Code Issues 5 Pull requests 1 Pulse Graphs Production-grade rapid controller development with build in love for API and Search http://crud.readthedocs.org/en/latest/ 1,731 commits 3 branches 55 releases 47 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.0 gh-pages master Nothing to show v4.0.0 v3.0.10 v3.0.9 v3.0.8 v3.0.7 v3.0.6 v3.0.5 v3.0.4 v3.0.3 v3.0.2 v3.0.1 v3.0.0 v2.0.2 v2.0.1 v2.0.0 v1.8.1 v1.8.0 v1.7.4 v1.7.3 v1.7.2 v1.7.1 v1.7.0 v1.6.5 v1.6.4 v1.6.3 v1.6.2 v1.6.1 v1.6.0 v1.5.0 v1.4.1 v1.4.0 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.2 v1.2.1 v1.2.0 v1.1.0 v1.0.0 4.3.4 4.3.3 4.3.2 4.3.1 4.3.0 4.2.4 4.2.3 4.2.2 4.2.1 4.2.0 4.1.4 4.1.3 4.1.2 4.1.1 4.1.0 Nothing to show New pull request Latest commit 3528e5e Jul 11, 2016 jippi fix #434 Permalink Failed to load latest commit information. docs Fix missing parameters and an small error. Jul 2, 2016 src fix #434 Jul 11, 2016 tests Merge pull request #420 from bravo-kernel/renderer May 12, 2016 .editorconfig Update to PSR2 coding standard. Dec 24, 2014 .gitignore update .gitignore Apr 20, 2014 .scrutinizer.yml Update exclude paths for CakePHP 3 Apr 16, 2015 .travis.yml Use codecov and tweak other travis jobs. Mar 1, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Jul 19, 2013 LICENSE.txt Add LICENSE.txt and cleanup all doc blocks for copyright and license … Aug 6, 2013 README.md Version is not required in install command. Mar 1, 2016 composer.json Bump cakephp version to ^3.2.2. Mar 1, 2016 phpunit.xml.dist Use whitlist instead of blacklist for coverage. Jan 2, 2016 README.md Installation For CakePHP 3.x compatible version: composer require friendsofcake/crud  For CakePHP 2.x compatible version: composer require friendsofcake/crud:~3.0  Introduction Crud was built to be scaffolding on steroids, and allow developers to have enough flexibility to use it for both rapid prototyping and production applications, even on the same code base -- saving you time. Crud is very fast to install, a few minutes tops. Crud is very flexible and has tons of configuration options. Crud aims to stay out of your way, and if it happens to get in your way, you can change the undesired behavior very easily. Crud relies heavily on CakePHP events and is possible to override, extend, or disable almost all of Crud's functionality either globally or for one specific action. Usually, the basic code for controller CRUD actions are very simple and always looks the same. Crud will add the actions to your controller so you don't have to reimplement them over and over again. Crud does not have the same limitations as CakePHP's own scaffolding, which is ""my way or the highway."" Crud allows you to hook into all stages of a request, only building the controller code needed specifically for your business logic, outsourcing all the heavy boilerplating to Crud. Less boilerplate code means less code to maintain, and less code to spend time unit testing. Crud allows you to use your own views, baked or hand-crafted, in addition to adding the code needed to fulfill your application logic, using events. It is by default compatible with CakePHP's baked views. Crud also provides built in features for JSON and XML API for any action you have enabled through Crud, which eliminates maintaining both a HTML frontend and a JSON and/or XML interface for your applications -- saving you tons of time and having a leaner code base. Bugs If you happen to stumble upon a bug, please feel free to create a pull request with a fix (optionally with a test), and a description of the bug and how it was resolved. You can also create an issue with a description to raise awareness of the bug. Features If you have a good idea for a Crud feature, please join us on IRC and let's discuss it. Pull requests are always more than welcome. Support / Questions You can join us on IRC in the #FriendsOfCake channel for any support or questions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/friendsofcake/crud"	"A Rapid Application Development (RAD) plugin for CakePHP."	"true"
"Framework Extras"	"Knp RAD Bundle"	"http://rad.knplabs.com/"	"A Rapid Application Development (RAD) bundle for Symfony 2."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"40"	"25"	"20"	"GitHub - KnpLabs/rad-edition: The Knp Rad edition of Symfony2 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 40 Fork 20 KnpLabs/rad-edition Code Issues 6 Pull requests 2 Pulse Graphs The Knp Rad edition of Symfony2 http://rad.knplabs.com 113 commits 4 branches 2 releases Fetching contributors PHP 51.0% JavaScript 37.2% Ruby 5.5% HTML 5.4% ApacheConf 0.9% PHP JavaScript Ruby HTML ApacheConf Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bug/behat-3 feature/composer-registers-bundle feature/install-command master Nothing to show v2.3 2.2 Nothing to show New pull request Latest commit e270aea Jun 11, 2015 docteurklein Merge pull request #41 from KnpLabs/update/selenium … Update selenium version Permalink Failed to load latest commit information. app Introduce gruntfile for javascript Jan 17, 2014 features/Context Fixing FeatureContext template to work with last updates of Behat Feb 28, 2014 spec/App Creation of the rad edition Nov 26, 2012 src Follow rad bundle template Jul 2, 2014 web add debug in dev environment Sep 7, 2013 .bowerrc Change 'web/front/bower_components' to 'web/front/vendor' Jan 31, 2014 .editorconfig Create .editorconfig May 2, 2013 .gitignore Fix .gitignore ignoring non-rooted paths Jul 17, 2014 .scrutinizer.yml Update .scrutinizer.yml Jan 24, 2014 .travis.yml Redirect all the selenium output to /dev/null May 27, 2015 Capifony Creation of the rad edition Nov 26, 2012 Gruntfile.js Update grunt to use symlink and fix rev files May 23, 2014 LICENSE add MIT License Jan 30, 2013 README.md Update README.md Apr 19, 2013 behat.yml.dist Fix MinkExtension BC break in behat.yml.dist Jun 13, 2014 bower.json Integrate compass to grunt Jan 18, 2014 composer.json Replace Knp post-install script by Incenteev's one May 18, 2015 karma.conf.js Add karma and jasmine as default test runner :) Jan 31, 2014 package.json Update grunt to use symlink and fix rev files May 23, 2014 README.md rad-edition The Knp RAD edition of Symfony2 Read the full documentation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/KnpLabs/rad-edition"	"A Rapid Application Development (RAD) bundle for Symfony 2."	"true"
"Framework Extras"	"Symfony CMF"	"https://github.com/symfony-cmf/symfony-cmf"	"A Content Management Framework to create custom CMS."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"710"	"58"	"94"	"GitHub - symfony-cmf/symfony-cmf: Meta package tying together all the key packages of the Symfony2 CMF project. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 58 Star 710 Fork 94 symfony-cmf/symfony-cmf Code Issues 11 Pull requests 0 Wiki Pulse Graphs Meta package tying together all the key packages of the Symfony2 CMF project. http://cmf.symfony.com 433 commits 6 branches 25 releases 20 contributors Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 1.1 1.2 1.3 master styleci Nothing to show 1.3.0 1.3.0-RC1 1.2.1 1.2.0 1.2.0-RC1 1.1.0 1.1.0-RC2 1.1.0-RC1 1.0.1 1.0.0 1.0.0-beta6 1.0.0-beta5 1.0.0-beta4 1.0.0-beta3 1.0.0-beta2 1.0.0-beta1 1.0.0-alpha2 1.0.0-alpha1 1.0.0-RC7 1.0.0-RC6 1.0.0-RC5 1.0.0-RC4 1.0.0-RC3 1.0.0-RC2 1.0.0-RC1 Nothing to show New pull request Latest commit 10c1af9 Jul 2, 2016 WouterJ Require Doctrine PHPCR ODM 2.0 Permalink Failed to load latest commit information. .gitignore cleanup slides Oct 18, 2013 .travis.yml Update Travis config May 30, 2016 CONTRIBUTING.md make the text more readable May 22, 2015 LICENSE license year range updated Sep 8, 2013 README.md fix build status icon Apr 23, 2016 composer.json Require Doctrine PHPCR ODM 2.0 Jul 2, 2016 README.md Symfony Content Management Framework This bundle is part of the Symfony Content Management Framework (CMF) and licensed under the MIT License. Note the main purpose of this repository is to offer a composer package that ties together various packages that will be used in most CMF projects. The bulk of the development is done in other repositories on the https://github.com/symfony-cmf organization. The Symfony CMF project makes it easier for developers to add CMS functionality to applications built with the Symfony2 PHP framework. Key development principles for the provided set of bundles are scalability, usability, documentation and testing. Requirements Symfony 2.3+ See also the require section of composer.json Documentation For the install guide and reference, see: All Symfony CMF documentation- complete Symfony CMF reference Symfony CMF Website - introduction, live demo, support and community links Contributing Pull requests are welcome. Please see our CONTRIBUTING guide. Thanks to everyone who has contributed already. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/symfony-cmf/symfony-cmf"	"A Content Management Framework to create custom CMS."	"true"
"Components"	"CakePHP Plugins"	"http://plugins.cakephp.org/"	"A directory of CakePHP plugins."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Packages home | CakePackages CakePHP Downloads Releases Pear channel Documentation API Book Community Help & Support Issues The Bakery Stack Overflow Facebook Group Google+ Community YouTube Channel CakePHP Podcast Follow us on Twitter Google Group Contributors Plugins & Packages Get Involved Guidelines CakeFest Logo Services Certification Consultation Support Training plugins & packages Admin Interface Anti-spam API Creation Application Asset Handling Authentication Authorization Background Processing Caching Categorization Configuration Controller Datasources Deployment Developer Tools Email Error Handling Example File Managers/Uploading Forms Internationalization Maps Messaging Model Navigation Other/Unknown Payment Processing Personal Plugin Application Reporting Routing Search Security SEO Skeleton Social Testing Third-party Apis User Management Utility View WYSIWYG editors       Search For Packages Hidden label Search CakePackages is a directory of Plugins and Tools for your CakePHP projects Missing a package from Github? Let us know about it! Suggest! Popular Packages DebugKit Debugging toolbar and enhanced debugging tools AssetCompress An asset compression plugin for CakePHP Upload Handles file uploading sans ridiculous automagic CRUDPlugin Enables rapid prototyping of production ready code, JSON/XML APIs and more BootstrapUI Bootstrap Plugin for CakePHP CakePDF CakePHP plugin for creating and/or rendering PDF Footprint Allow passing currently logged in user to model layer JwtAuth Authentication using JSON Web Tokens Package Search Tips Package search will look through our repository of CakePHP code and try to find things that are most similar to your query. You can also filter the results by: max # of open issues open_issues:10 min # of forks forks:7 min # of watchers watchers:5 min # of collaborators collaborators:3 min # of contributors contributors:3 updated since (in quotes) since:yesterday has behavior/helper/... has:component version number version:3 Powered by CakePackages © 2009 - 2016 Jose Diaz Gonzalez CakePHP Package Indexer © 2011 - 2016 Cake Software Foundation, Inc."	"null"	"null"	"A directory of CakePHP plugins."	"true"
"Components"	"Hoa Project"	"http://hoa-project.net/En/"	"Another package of PHP components."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"A set of PHP libraries – Hoa Sources Literature Videos Blog Events Community Shop About Hoa is a modular, extensible and structured set of PHP libraries. Moreover, Hoa aims at being a bridge between industrial and research worlds. Compose and extend libraries to create applications or your own libraries! Acl Bench Cache Cli Compiler Consistency Console Database Devtools Dispatcher Dns Event Eventsource Exception Fastcgi File Graph Http Irc Iterator Json Locale Log Mail Math Memory Mime Model Notification Praspel Promise Protocol Prototype Realdom Regex Registry Router Ruler Serialize Session Socket Stream Stringbuffer Test Translate Tree Ustring View Visitor Websocket Worker Xml Xmlrpc Xyl Zformat Zombie   They trust us They support us Community Join more than 1100 people! Latest news WebSocket, safety, stability and performance (Jul '16) Healt of the project (May '16) The Nucleus release series (Jan '16) 1 million installations and a meta-shop (Nov '15) Reboot the contribution process (Aug '15) Activity commits per day of Central (2 last months) Choose your language: , , . Hoa is the creation of Ivan Enderlin, all rights reserved. See the license. Twitter, Github."	"null"	"null"	"Another package of PHP components."	"true"
"Components"	"League of Extraordinary Packages"	"https://thephpleague.com/"	"A PHP package development group."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"426"	"22"	"35"	"GitHub - thephpleague/shunt: PHP library for executing commands on multiple remote machines, via SSH Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 426 Fork 35 thephpleague/shunt Code Issues 4 Pull requests 4 Pulse Graphs PHP library for executing commands on multiple remote machines, via SSH 103 commits 1 branch 5 releases 5 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2.1.1 v2.1.0 v2.0.0 v1.0.2 v1.0.1 Nothing to show New pull request Latest commit 5184871 Sep 17, 2014 toopay Merge pull request #12 from aferrandini/fix-use-instructions … Fix typo in use instructions creating Shuntfile Permalink Failed to load latest commit information. bin Overhaul and refactor : Oct 16, 2013 src/League/Shunt Fixed typos Feb 1, 2014 .gitignore Tracking stub Oct 16, 2013 .noninteractive PECL non-interactive mode Oct 11, 2012 .shuntpwd Overhaul and refactor : Oct 16, 2013 .travis.yml Added 5.5 and 5.6 to unit-tests Feb 11, 2014 CHANGELOG.md Update changelog [ci skip] Oct 16, 2013 CONTRIBUTING.md Update contributing doc [ci skip] Oct 16, 2013 LICENSE Switch to MIT Jul 24, 2013 README.md Fix typo in use instructions creating Shuntfile Sep 17, 2014 composer.json Change organization references Jan 23, 2014 phpunit.xml.dist Overhaul and refactor : Oct 16, 2013 travis.xml.dist Change organization references Jan 22, 2014 README.md Shunt Inspired by Ruby's Capistrano, Shunt is PHP library for executing commands on multiple remote machines, via SSH. Specifically, this library was written to simplify and automate deployment of PHP applications to distributed environments. Install Via Composer {     ""require"": {         ""league/shunt"": ""~2.0""     } }  Requirement PHP >= 5.3.3 libssh2 ssh2.so Additional Features Secure copy (SCP) support Secure FTP (SFTP) support Assumptions Shunt has very firm ideas about how things ought to be done, and tries to force those ideas on you. Some of the assumptions behind these opinions are: You are using SSH to access the remote servers. You either have the same password to all target machines, or you have public keys in place to allow passwordless access to them. Do not expect these assumptions to change. Usage In general, you'll use Shunt as follows: Create a recipe file (Shuntfile). Use the shunt script to execute your recipe. From the root folder of your composer-based project, use the Shunt script as follows: vendor/bin/shunt some_task some_host,other_host  By default, the script will look for a file called Shuntfile, which contain hosts information, credential and your tasks. Here the structure of Shuntfile : <?php  return array(      'hosts' => array(         'staging' => 'staging.domain.com',         'repro' => 'backup.domain.com',         'production' => 'production.domain.com',     ),      'auth' => array(         'username' => 'shunt',         'password' => 'hearmyroar',         'pubkeyfile' => NULL,         'privkeyfile' => NULL,         'passphrase' => NULL,     ),      'tasks' => array(         'read_home_dir' => function($s) {             $s->run('ls');         },         'print_php_info' => function($s) {             $s->run('php -i');         },         'upload_foo_source' => function($s) {             $s->sftp()->mkdir('source');             $s->scp()->put('foo', 'source/foo');         }     ), );  The tasks collection indicates which tasks that available to execute. You can execute list command to see all the available tasks and available hosts. Based by above recipes, you could run : vendor/bin/shunt read_home_dir .  Above command will execute ls on all remote machines defined in hosts parameter. You could tell Shunt to run the task on specific host(s) by appending the host nickname right after the task : vendor/bin/shunt read_home_dir staging vendor/bin/shunt print_php_info staging,production  As you may already notice, you could easily access SCP and SFTP instance by calling scp() or sftp() method within your task. Bellow table shows available APIs for both SCP and SFTP instances : Type Method Signature Description SCP put($localFile = '', $remoteFile = '') Send a file from local to remote path SCP get($remoteFile = '', $localFile = '') Get a file from remote to local path SFTP chmod($filename = '', $mode = 0644) Attempts to change the mode of the specified file to that given in mode. SFTP lstat($path = '') Stats a symbolic link on the remote filesystem without following the link. SFTP stat($path = '') Stats a file on the remote filesystem following any symbolic links. SFTP mkdir($dirname = '', $mode = 0777, $recursive = false) Creates a directory on the remote file server with permissions set to mode. SFTP rmdir($dirname = '') Removes a directory from the remote file server. SFTP symlink($target = '',$link = '') Creates a symbolic link named link on the remote filesystem pointing to target. SFTP readlink($link = '') Returns the target of a symbolic link. SFTP realpath($filename = '') Translates filename into the effective real path on the remote filesystem. SFTP rename($from = '', $to = '') Renames a file on the remote filesystem. SFTP unlink($filename = '') Deletes a file on the remote filesystem. Changelog See the changelog file Contributing Please see CONTRIBUTING for details. Support Bugs and feature request are tracked on GitHub License Shunt is released under the MIT License. See the bundled LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/shunt"	"A PHP package development group."	"true"
"Components"	"Symfony2 Components"	"http://symfony.com/doc/master/components/index.html"	"The components that make Symfony 2."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1125"	"96"	"2516"	"GitHub - symfony/symfony-docs: The Symfony documentation Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 96 Star 1,125 Fork 2,516 symfony/symfony-docs Code Issues 211 Pull requests 50 Pulse Graphs The Symfony documentation http://symfony.com/doc 14,360 commits 15 branches 75 releases 1,078 contributors C++ 59.9% Python 15.9% PHP 7.5% Batchfile 6.9% Makefile 5.5% HTML 4.2% Assembly 0.1% C++ Python PHP Batchfile Makefile HTML Assembly Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 3.0 3.1 choice_value_entity_continuation custom_constraint_tweak master paxyknox-book-intro-text-modif Nothing to show vPR3 v2.3.4 v2.3.3 v2.3.2 v2.3.1 v2.3.0 v2.3.0-RC1 v2.3.0-BETA2 v2.3.0-BETA1 v2.2.6 v2.2.5 v2.2.4 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.2.0-RC3 v2.2.0-RC2 v2.2.0-RC1 v2.2.0-BETA2 v2.2.0-BETA1 v2.1.11 v2.1.10 v2.1.9 v2.1.8 v2.1.7 v2.1.5 v2.1.4 v2.1.3 v2.1.2 v2.1.1 v2.1.0 v2.1.0-RC2 v2.1.0-RC1 v2.1.0-BETA4 v2.1.0-BETA3 v2.1.0-BETA2 v2.1.0-BETA1 v2.0.23 v2.0.22 v2.0.20 v2.0.19 v2.0.18 v2.0.17 v2.0.16 v2.0.15 v2.0.14 v2.0.13 v2.0.12 v2.0.11 v2.0.10 v2.0.9 v2.0.8 v2.0.7 v2.0.6 v2.0.5 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v2.0.0PR12 v2.0.0PR11 v2.0.0PR10 v2.0.0BETA5 v2.0.0BETA4 v2.0.0BETA3 v2.0.0BETA2 v2.0.0BETA1 v2.0.0-RC6 v2.0.0-RC5 v2.0.0-RC4 v2.0.0-RC3 v2.0.0-RC2 v2.0.0-RC1 Nothing to show New pull request Latest commit dbaf02c Jul 10, 2016 weaverryan Merge branch '3.1' … * 3.1: (47 commits)   Removing old :term: stuff   Replacing missing link   Fixing typo   Final changes   [WIP] More changes   [WIP] More changes   [WIP] Removing multiple formats - it makes no sense here   [WIP] More changes   [WIP] Reading through the changes   changes according to comments after PR + some other typos   typo fix in hyperlink   typo fix in hyperlink   colon  corrections   made some new changes, corrected mistakes, undo some foolish deletions   [] changes in the first four ch of the book   [Form] Ambiguous block prefixes render incorrectly   Removing old :term: stuff   Replacing missing link   Fixing typo   Final changes   ... Permalink Failed to load latest commit information. .platform Move Sphinx files to _theme Aug 20, 2015 _theme [#5683] Small tweak Sep 26, 2015 best_practices Merge branch '2.8' into 3.0 Jul 8, 2016 book Merge branch '3.1' Jul 10, 2016 components Merge branch '3.1' Jul 10, 2016 contributing Merge branch '2.8' into 3.0 Jul 10, 2016 cookbook Merge branch '3.0' into 3.1 Jul 10, 2016 create_framework [#6422] Detailed proof-read after the great PR from @iltar Jul 5, 2016 images Merge branch '2.7' into 2.8 Jul 4, 2016 quick_tour Merge branch '2.8' into 3.0 Jul 8, 2016 reference Merge branch '3.0' into 3.1 Jul 8, 2016 .editorconfig Also apply it for .rst.inc files Jul 23, 2014 .gitignore don't ignore the _exts directory anymore Aug 21, 2015 .platform.app.yaml Better Sphinx version. Jul 15, 2015 .travis.yml stick to Sphinx 1.3.x for the moment Mar 30, 2016 CONTRIBUTING.md use HTTPS for links to symfony.com Jun 29, 2015 Makefile modify Symfony CMF configuration values in the build process so that … Apr 7, 2014 README.markdown reflect the EOM of Symfony 2.3 May 30, 2016 changelog.rst added June changelog Jul 2, 2016 conf.py Use pip instead of submodules Aug 20, 2015 index.rst added the new tutorial in the main index Nov 12, 2014 make.bat Fixed make file Nov 12, 2014 redirection_map Merge branch '2.3' into 2.7 May 29, 2016 README.markdown Symfony Documentation This documentation is rendered online at https://symfony.com/doc/current/ Contributing Note Unless you're documenting a feature that was introduced after Symfony 2.7 (e.g. in Symfony 2.8), all pull requests must be based off of the 2.7 branch, not the master or older branches. We love contributors! For more information on how you can contribute to the Symfony documentation, please read Contributing to the Documentation Platform.sh Pull requests are automatically built by Platform.sh. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/symfony/symfony-docs"	"The components that make Symfony 2."	"true"
"Components"	"Zend Framework 2 Components"	"https://packages.zendframework.com/"	"The components that make Zend Framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Zend Framework Composer Repository Toggle navigation Packages Zend Framework Composer Repository Last updated: Fri, 15 Jul 2016 21:04:33 +0000 Adding the repository to composer.json:  {     ""repositories"": [         {             ""type"": ""composer"",             ""url"": ""https://packages.zendframework.com""         }     ] }                 Filter by package name: zendframework/skeleton-application¶ Skeleton Application for Zend Framework zend-mvc applications Homepage http://framework.zend.com/ License BSD-3-Clause Releases dev-master, 3.0.0, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.8, 2.2.7, dev-develop Required by zendframework/zend-authentication¶ provides an API for authentication and includes concrete authentication adapters for common use case scenarios Homepage https://github.com/zendframework/zend-authentication License BSD-3-Clause Releases dev-master, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-mvc-plugin-identity zendframework/zendframework zfcampus/zf-mvc-auth zendframework/zend-barcode¶ provides a generic way to generate barcodes Homepage https://github.com/zendframework/zend-barcode License BSD-3-Clause Releases dev-master, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-cache¶ provides a generic way to cache any data Homepage https://github.com/zendframework/zend-cache License BSD-3-Clause Releases dev-master, 2.7.1, 2.7.0, 2.6.1, 2.6.0, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-captcha¶ Homepage https://github.com/zendframework/zend-captcha License BSD-3-Clause Releases dev-master, 2.6.0, 2.5.4, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-code¶ provides facilities to generate arbitrary code using an object oriented interface Homepage https://github.com/zendframework/zend-code License BSD-3-Clause Releases dev-master, 3.0.4, 3.0.3, 3.0.2, 3.0.1, 3.0.0, 2.6.3, 2.6.2, 2.6.1, 2.6.0, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-di zendframework/zend-mvc-form zendframework/zend-server zendframework/zendframework zfcampus/zf-apigility-admin zendframework/zend-component-installer¶ Composer plugin for automating component registration in zend-mvc and Expressive applications License BSD-3-Clause Releases dev-master, 0.3.0, 0.2.0, 0.1.0 Required by zendframework/skeleton-application zendframework/zend-skeleton-installer zendframework/zend-config¶ provides a nested object property based user interface for accessing this configuration data within application code Homepage https://github.com/zendframework/zend-config License BSD-3-Clause Releases dev-master, 2.6.0, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-expressive-skeleton zendframework/zend-modulemanager zendframework/zend-mvc zendframework/zendframework zendframework/zendoauth zendframework/zendservice-recaptcha zfcampus/zf-configuration zendframework/zend-console¶ Homepage https://github.com/zendframework/zend-console License BSD-3-Clause Releases dev-master, 2.6.0, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-mvc zendframework/zend-mvc-console zendframework/zend-test zendframework/zendframework zfcampus/zf-console zfcampus/zf-deploy zfcampus/zf-development-mode zendframework/zend-crypt¶ Homepage https://github.com/zendframework/zend-crypt License BSD-3-Clause Releases dev-master, 3.0.0, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-mail zendframework/zendframework zendframework/zendoauth zfcampus/zf-oauth2 zendframework/zend-db¶ Homepage https://github.com/zendframework/zend-db License BSD-3-Clause Releases dev-master, 2.8.1, 2.8.0, 2.7.1, 2.7.0, 2.6.2, 2.6.1, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zfcampus/zf-apigility zendframework/zend-debug¶ Homepage https://github.com/zendframework/zend-debug License BSD-3-Clause Releases dev-master, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-developer-tools zendframework/zendframework zendframework/zend-developer-tools¶ Module for developer and debug tools for use with zend-mvc applications. Homepage https://github.com/zendframework/ZendDeveloperTools License BSD-3-Clause Authors Evan Coury, Eric Boh Releases dev-master, 1.1.0, 1.0.0, 1.0.0-RC1, 1.0.0-BETA5, 1.0.0-BETA4, 1.0.0-BETA3, 1.0.0-BETA2, 1.0.0-BETA1, 1.0.0-ALPHA1, 0.0.2, 0.0.1, dev-develop Required by zendframework/zend-di¶ Homepage https://github.com/zendframework/zend-di License BSD-3-Clause Releases dev-master, 2.6.1, 2.6.0, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-mvc zendframework/zend-servicemanager-di zendframework/zendframework zendframework/zend-diactoros¶ PSR HTTP Message implementations Homepage https://github.com/zendframework/zend-diactoros License BSD-2-Clause Support Issues: https://github.com/zendframework/zend-diactoros/issues Source: https://github.com/zendframework/zend-diactoros Releases dev-master, 1.3.5, 1.3.4, 1.3.3, 1.3.2, 1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.4, 1.1.3, 1.1.2, 1.1.1, 1.1.0, 1.0.5, 1.0.4, 1.0.3, 1.0.2, 1.0.1, 1.0.0, dev-develop Required by zendframework/zend-expressive zendframework/zend-psr7bridge zendframework/zendframework zendframework/zend-dom¶ provides tools for working with DOM documents and structures Homepage https://github.com/zendframework/zend-dom License BSD-3-Clause Releases dev-master, 2.6.0, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-test zendframework/zendframework zendframework/zend-escaper¶ Homepage https://github.com/zendframework/zend-escaper License BSD-3-Clause Releases dev-master, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-debug zendframework/zend-feed zendframework/zend-stratigility zendframework/zend-tag zendframework/zend-uri zendframework/zendframework zfcampus/zf-hal zfcampus/zf-versioning zendframework/zend-eventmanager¶ Trigger and listen to events within a PHP application Homepage https://github.com/zendframework/zend-eventmanager License BSD-3-Clause Releases dev-master, 3.0.1, 3.0.0, 2.6.3, 2.6.2, 2.6.1, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-cache zendframework/zend-code zendframework/zend-developer-tools zendframework/zend-modulemanager zendframework/zend-mvc zendframework/zend-mvc-console zendframework/zend-session zendframework/zend-test zendframework/zend-view zendframework/zendframework zendframework/zendopenid zfcampus/zf-api-problem zfcampus/zf-apigility zfcampus/zf-apigility-admin zfcampus/zf-apigility-documentation-apiblueprint zfcampus/zf-apigility-documentation-swagger zfcampus/zf-content-negotiation zfcampus/zf-content-validation zfcampus/zf-hal zfcampus/zf-http-cache zfcampus/zf-mvc-auth zfcampus/zf-rest zfcampus/zf-rpc zfcampus/zf-versioning zendframework/zend-expressive¶ PSR-7 Middleware Microframework based on Stratigility License BSD-3-Clause Releases dev-master, 1.0.0, 1.0.0rc7, 1.0.0rc6, 1.0.0rc5, 1.0.0rc4, 1.0.0rc3, 1.0.0rc2, 1.0.0rc1, 0.5.3, 0.5.2, 0.5.1, 0.5.0, 0.4.0, 0.3.1, 0.3.0, 0.2.1, 0.2.0, 0.1.1, 0.1.0, dev-develop Required by zendframework/zend-expressive-aurarouter zendframework/zend-expressive-fastroute zendframework/zend-expressive-helpers zendframework/zend-expressive-platesrenderer zendframework/zend-expressive-skeleton zendframework/zend-expressive-twigrenderer zendframework/zend-expressive-zendrouter zendframework/zend-expressive-zendviewrenderer zendframework/zend-expressive-aurarouter¶ Aura.Router integration for Expressive License BSD-3-Clause Releases dev-master, 1.0.0, 0.3.0, 0.2.0, 0.1.1, 0.1.0, dev-develop Required by zendframework/zend-expressive-fastroute¶ FastRoute integration for Expressive License BSD-3-Clause Releases dev-master, 1.2.0, 1.1.1, 1.1.0, 1.0.1, 1.0.0, 0.3.0, 0.2.0, 0.1.2, 0.1.1, 0.1.0, dev-develop Required by zendframework/zend-expressive-helpers¶ Helper/Utility classes for Expressive License BSD-3-Clause Releases dev-master, 2.0.0, 1.4.0, 1.3.0, 1.2.1, 1.2.0, 1.1.0, 1.0.0, dev-develop Required by zendframework/zend-expressive-platesrenderer zendframework/zend-expressive-skeleton zendframework/zend-expressive-twigrenderer zendframework/zend-expressive-zendviewrenderer zendframework/zend-expressive-platesrenderer¶ Plates integration for Expressive License BSD-3-Clause Releases dev-master, 1.1.0, 1.0.0, 0.3.0, 0.2.0, 0.1.1, 0.1.0, dev-develop Required by zendframework/zend-expressive-router¶ Router subcomponent for Expressive License BSD-3-Clause Releases dev-master, 1.2.0, 1.1.0, 1.0.1, 1.0.0, dev-develop Required by zendframework/zend-expressive zendframework/zend-expressive-aurarouter zendframework/zend-expressive-fastroute zendframework/zend-expressive-helpers zendframework/zend-expressive-twigrenderer zendframework/zend-expressive-zendrouter zendframework/zend-expressive-zendviewrenderer zendframework/zend-expressive-skeleton¶ Zend expressive skelton. Begin developing PSR-7 middleware applications in seconds Homepage https://github.com/zendframework/zend-expressive-skeleton License BSD-3-Clause Authors Geert Eltink Releases dev-master, 1.0.2, 1.0.1, 1.0.0, 1.0.0rc8, 1.0.0rc7, 1.0.0rc6, 1.0.0rc5, 1.0.0rc4, 1.0.0rc3, 1.0.0rc2, 1.0.0rc1, 0.5.3, 0.5.2, 0.5.1, 0.5.0, 0.4.0, 0.3.0, 0.2.0, 0.1.1, 0.1.0, dev-develop Required by zendframework/zend-expressive-template¶ Template subcomponent for Expressive License BSD-3-Clause Releases dev-master, 1.0.3, 1.0.2, 1.0.1, 1.0.0, dev-develop Required by zendframework/zend-expressive zendframework/zend-expressive-platesrenderer zendframework/zend-expressive-twigrenderer zendframework/zend-expressive-zendviewrenderer zendframework/zend-expressive-twigrenderer¶ Twig integration for Expressive License BSD-3-Clause Releases dev-master, 1.1.1, 1.1.0, 1.0.1, 1.0.0, 0.3.1, 0.3.0, 0.2.1, 0.2.0, 0.1.1, 0.1.0, dev-develop Required by zendframework/zend-expressive-zendrouter¶ zend-mvc router support for Expressive License BSD-3-Clause Releases dev-master, 1.1.0, 1.0.1, 1.0.0, 0.3.0, 0.2.0, 0.1.1, 0.1.0, dev-develop Required by zendframework/zend-expressive-zendviewrenderer¶ zend-view PhpRenderer integration for Expressive License BSD-3-Clause Releases dev-master, 1.1.0, 1.0.1, 1.0.0, 0.4.1, 0.4.0, 0.3.1, 0.3.0, 0.2.0, 0.1.2, 0.1.1, 0.1.0, dev-develop Required by zendframework/zend-feed¶ provides functionality for consuming RSS and Atom feeds Homepage https://github.com/zendframework/zend-feed License BSD-3-Clause Releases dev-master, 2.7.0, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-file¶ Homepage https://github.com/zendframework/zend-file License BSD-3-Clause Releases dev-master, 2.7.0, 2.6.1, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-filter¶ provides a set of commonly needed data filters Homepage https://github.com/zendframework/zend-filter License BSD-3-Clause Releases dev-master, 2.7.1, 2.7.0, 2.6.1, 2.6.0, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-expressive-zendviewrenderer zendframework/zend-i18n zendframework/zend-inputfilter zendframework/zend-mvc-plugin-fileprg zendframework/zendframework zfcampus/zf-apigility-admin zfcampus/zf-content-negotiation zfcampus/zf-content-validation zfcampus/zf-deploy zfcampus/zf-hal zendframework/zend-form¶ Homepage https://github.com/zendframework/zend-form License BSD-3-Clause Releases dev-master, 2.9.0, 2.8.4, 2.8.3, 2.8.2, 2.8.1, 2.8.0, 2.7.1, 2.7.0, 2.6.0, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-mvc zendframework/zend-mvc-form zendframework/zend-mvc-plugin-fileprg zendframework/zendframework zendframework/zend-http¶ provides an easy interface for performing Hyper-Text Transfer Protocol (HTTP) requests Homepage https://github.com/zendframework/zend-http License BSD-3-Clause Releases dev-master, 2.5.4, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-json-server zendframework/zend-mvc zendframework/zend-psr7bridge zendframework/zend-router zendframework/zend-test zendframework/zend-xmlrpc zendframework/zendframework zendframework/zendoauth zendframework/zendopenid zendframework/zendservice-google-c2dm zendframework/zendservice-google-gcm zendframework/zendservice-recaptcha zfcampus/zf-api-problem zfcampus/zf-apigility-admin zfcampus/zf-content-negotiation zfcampus/zf-content-validation zfcampus/zf-hal zfcampus/zf-http-cache zfcampus/zf-mvc-auth zfcampus/zf-oauth2 zfcampus/zf-rpc zfcampus/zf-versioning zendframework/zend-hydrator¶ Homepage https://github.com/zendframework/zend-hydrator License BSD-3-Clause Releases dev-master, 2.2.1, 2.2.0, 2.1.0, 2.0.0, 1.1.0, 1.0.0, dev-develop Required by zendframework/zend-form zendframework/zend-mvc zendframework/zend-stdlib zendframework/zendframework zfcampus/zf-apigility-admin zfcampus/zf-hal zendframework/zend-i18n¶ Homepage https://github.com/zendframework/zend-i18n License BSD-3-Clause Releases dev-master, 2.7.3, 2.7.2, 2.7.1, 2.7.0, 2.6.0, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-expressive-zendviewrenderer zendframework/zend-mvc-form zendframework/zend-mvc-i18n zendframework/zend-validator zendframework/zendframework zendframework/zendoauth zendframework/zend-i18n-resources¶ Provides validator translations for zend-i18n's Translator License BSD-3-Clause Releases dev-master, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-inputfilter¶ Homepage https://github.com/zendframework/zend-inputfilter License BSD-3-Clause Releases dev-master, 2.7.2, 2.7.1, 2.7.0, 2.6.1, 2.6.0, 2.5.5, 2.5.4, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-form zendframework/zend-mvc-plugin-fileprg zendframework/zendframework zfcampus/zf-apigility-admin zfcampus/zf-apigility-documentation zfcampus/zf-content-validation zendframework/zend-json¶ provides convenience methods for serializing native PHP to JSON and decoding JSON to native PHP Homepage https://github.com/zendframework/zend-json License BSD-3-Clause Releases dev-master, 3.0.0, 2.6.1, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-json-server zendframework/zend-serializer zendframework/zend-version zendframework/zend-xml2json zendframework/zendframework zendframework/zendservice-apple-apns zendframework/zendservice-google-gcm zendframework/zendservice-recaptcha zfcampus/zf-api-problem zfcampus/zf-content-negotiation zfcampus/zf-hal zfcampus/zf-rest zendframework/zend-json-server¶ Zend Json-Server is a JSON-RPC server implementation. Homepage https://github.com/zendframework/zend-json-server License BSD-3-Clause Releases dev-master, 3.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-ldap¶ provides support for LDAP operations including but not limited to binding, searching and modifying entries in an LDAP directory Homepage https://github.com/zendframework/zend-ldap License BSD-3-Clause Releases dev-master, 2.7.1, 2.7.0, 2.6.1, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-loader¶ Homepage https://github.com/zendframework/zend-loader License BSD-3-Clause Releases dev-master, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-http zendframework/zend-mail zendframework/zend-view zendframework/zendframework zendframework/zendoauth zfcampus/zf-apigility-welcome zfcampus/zf-http-cache zfcampus/zf-rest zfcampus/zf-versioning zendframework/zend-log¶ component for general purpose logging Homepage https://github.com/zendframework/zend-log License BSD-3-Clause Releases dev-master, 2.9.0, 2.8.3, 2.8.2, 2.8.1, 2.8.0, 2.7.2, 2.7.1, 2.7.0, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-mail¶ provides generalized functionality to compose and send both text and MIME-compliant multipart e-mail messages Homepage https://github.com/zendframework/zend-mail License BSD-3-Clause Releases dev-master, 2.7.1, 2.7.0, 2.6.2, 2.6.1, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-math¶ Homepage https://github.com/zendframework/zend-math License BSD-3-Clause Releases dev-master, 3.0.0, 2.7.0, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-captcha zendframework/zend-crypt zendframework/zend-serializer zendframework/zend-xmlrpc zendframework/zendframework zendframework/zendoauth zendframework/zend-memory¶ Homepage https://github.com/zendframework/zend-memory License BSD-3-Clause Releases dev-master, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-mime¶ Homepage https://github.com/zendframework/zend-mime License BSD-3-Clause Releases dev-master, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-mail zendframework/zendframework zendframework/zend-modulemanager¶ Homepage https://github.com/zendframework/zend-modulemanager License BSD-3-Clause Releases dev-master, 2.7.2, 2.7.1, 2.7.0, 2.6.1, 2.6.0, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-developer-tools zendframework/zend-mvc zendframework/zend-mvc-console zendframework/zendframework zfcampus/zf-apigility-admin zfcampus/zf-apigility-documentation zfcampus/zf-apigility-welcome zfcampus/zf-configuration zfcampus/zf-doctrine-querybuilder zfcampus/zf-versioning zendframework/zend-mvc¶ Homepage https://github.com/zendframework/zend-mvc License BSD-3-Clause Releases dev-master, 3.0.2, 3.0.1, 3.0.0, 2.7.10, 2.7.9, 2.7.8, 2.7.7, 2.7.6, 2.7.5, 2.7.4, 2.7.3, 2.7.2, 2.7.1, 2.7.0, 2.6.3, 2.6.2, 2.6.1, 2.6.0, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/skeleton-application zendframework/zend-developer-tools zendframework/zend-expressive-zendrouter zendframework/zend-mvc-console zendframework/zend-mvc-plugin-fileprg zendframework/zend-mvc-plugin-flashmessenger zendframework/zend-mvc-plugin-identity zendframework/zend-mvc-plugin-prg zendframework/zend-test zendframework/zendframework zfcampus/zf-api-problem zfcampus/zf-apigility zfcampus/zf-apigility-admin zfcampus/zf-apigility-documentation zfcampus/zf-apigility-documentation-apiblueprint zfcampus/zf-apigility-documentation-swagger zfcampus/zf-apigility-welcome zfcampus/zf-content-negotiation zfcampus/zf-content-validation zfcampus/zf-development-mode zfcampus/zf-doctrine-querybuilder zfcampus/zf-hal zfcampus/zf-http-cache zfcampus/zf-mvc-auth zfcampus/zf-oauth2 zfcampus/zf-rest zfcampus/zf-rpc zfcampus/zf-versioning zendframework/zend-mvc-console¶ Homepage https://github.com/zendframework/zend-mvc-console License BSD-3-Clause Releases dev-master, 1.1.10, 1.1.9, 1.1.8, 1.1.7, 1.1.6, 1.1.5, 1.1.4, 1.1.3, 1.1.2, 1.1.1, 1.1.0, 1.0.0, 0.1.0, dev-develop Required by zendframework/zendframework zendframework/zend-mvc-form¶ Metapackage with all requirements needed to use zend-form with zend-mvc. Homepage https://github.com/zendframework/zend-mvc-form License BSD-3-Clause Releases dev-master, 1.0.0 Required by zendframework/zendframework zendframework/zend-mvc-i18n¶ Homepage https://github.com/zendframework/zend-mvc-i18n License BSD-3-Clause Releases dev-master, 1.0.0, 0.1.0, dev-develop Required by zendframework/zendframework zendframework/zend-mvc-plugin-fileprg¶ Homepage https://github.com/zendframework/zend-mvc-plugin-fileprg License BSD-3-Clause Releases dev-master, 1.0.0, 0.1.0, dev-develop Required by zendframework/zend-mvc-plugins zendframework/zend-mvc-plugin-flashmessenger¶ Homepage https://github.com/zendframework/zend-mvc-plugin-flashmessenger License BSD-3-Clause Releases dev-master, 1.0.0, 0.1.0, dev-develop Required by zendframework/zend-mvc-plugins zendframework/zend-mvc-plugin-identity¶ Homepage https://github.com/zendframework/zend-mvc-plugin-identity License BSD-3-Clause Releases dev-master, 1.0.0, 0.1.0, dev-develop Required by zendframework/zend-mvc-plugins zendframework/zend-mvc-plugin-prg¶ Homepage https://github.com/zendframework/zend-mvc-plugin-prg License BSD-3-Clause Releases dev-master, 1.0.0, 0.1.0, dev-develop Required by zendframework/zend-mvc-plugins zendframework/zend-mvc-plugins¶ Collection of all stable zend-mvc plugins served via separate packages. Homepage https://github.com/zendframework/zend-mvc-plugins License BSD-3-Clause Releases dev-master, 1.0.1, 1.0.0 Required by zendframework/zendframework zendframework/zend-navigation¶ provides support for managing trees of pointers to web pages Homepage https://github.com/zendframework/zend-navigation License BSD-3-Clause Releases dev-master, 2.8.1, 2.8.0, 2.7.2, 2.7.1, 2.7.0, 2.6.1, 2.6.0, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-paginator¶ Homepage https://github.com/zendframework/zend-paginator License BSD-3-Clause Releases dev-master, 2.7.0, 2.6.1, 2.6.0, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zfcampus/zf-apigility zfcampus/zf-hal zfcampus/zf-rest zendframework/zend-permissions-acl¶ provides a lightweight and flexible access control list (ACL) implementation for privileges management Homepage https://github.com/zendframework/zend-permissions-acl License BSD-3-Clause Releases dev-master, 2.6.0, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zfcampus/zf-mvc-auth zendframework/zend-permissions-rbac¶ provides a role-based access control management Homepage https://github.com/zendframework/zend-permissions-rbac License BSD-3-Clause Releases dev-master, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zfcampus/zf-mvc-auth zendframework/zend-progressbar¶ component to create and update progressbars in different environments Homepage https://github.com/zendframework/zend-progressbar License BSD-3-Clause Releases dev-master, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-psr7bridge¶ PSR-7 <-> Zend\Http bridge Homepage https://github.com/zendframework/zend-psr7bridge License BSD-3-Clause Support Issues: https://github.com/zendframework/zend-psr7bridge/issues Source: https://github.com/zendframework/zend-psr7bridge Releases dev-master, 0.2.2, 0.2.1, 0.2.0, 0.1.1, 0.1.0 Required by zendframework/zend-expressive-zendrouter zendframework/zend-mvc zendframework/zendframework zendframework/zend-router¶ Homepage https://github.com/zendframework/zend-router License BSD-3-Clause Releases dev-master, 3.0.2, 3.0.1, 3.0.0, 2.7.3, 2.7.2, 2.7.1, 2.7.0, 2.6.3, 2.6.2, 2.6.1, 2.6.0, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-expressive-zendrouter zendframework/zend-mvc zendframework/zend-mvc-console zendframework/zend-mvc-i18n zendframework/zend-serializer¶ provides an adapter based interface to simply generate storable representation of PHP types by different facilities, and recover Homepage https://github.com/zendframework/zend-serializer License BSD-3-Clause Releases dev-master, 2.8.0, 2.7.2, 2.7.1, 2.7.0, 2.6.1, 2.6.0, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-cache zendframework/zendframework zendframework/zend-server¶ Homepage https://github.com/zendframework/zend-server License BSD-3-Clause Releases dev-master, 2.7.0, 2.6.1, 2.6.0, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-json-server zendframework/zend-soap zendframework/zend-xmlrpc zendframework/zendframework zendframework/zend-servicemanager¶ Homepage https://github.com/zendframework/zend-servicemanager License BSD-3-Clause Releases dev-master, 3.1.1, 3.1.0, 3.0.3, 3.0.2, 3.0.1, 3.0.0, 2.7.6, 2.7.5, 2.7.4, 2.7.3, 2.7.2, 2.7.1, 2.7.0, 2.6.0, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-barcode zendframework/zend-cache zendframework/zend-crypt zendframework/zend-developer-tools zendframework/zend-expressive-zendviewrenderer zendframework/zend-feed zendframework/zend-log zendframework/zend-mvc zendframework/zend-mvc-console zendframework/zend-mvc-i18n zendframework/zend-mvc-plugin-identity zendframework/zend-router zendframework/zend-servicemanager-di zendframework/zend-test zendframework/zend-text zendframework/zend-validator zendframework/zendframework zfcampus/zf-apigility zfcampus/zf-apigility-admin zfcampus/zf-apigility-documentation zfcampus/zf-apigility-documentation-apiblueprint zfcampus/zf-apigility-documentation-swagger zfcampus/zf-content-negotiation zfcampus/zf-content-validation zfcampus/zf-doctrine-querybuilder zfcampus/zf-mvc-auth zfcampus/zf-oauth2 zfcampus/zf-rpc zfcampus/zf-versioning zendframework/zend-servicemanager-di¶ Homepage https://github.com/zendframework/zend-servicemanager-di License BSD-3-Clause Releases dev-master, 1.1.0, 1.0.1, 1.0.0, dev-develop Required by zendframework/zend-mvc zendframework/zendframework zendframework/zend-session¶ manage and preserve session data, a logical complement of cookie data, across multiple page requests by the same client Homepage https://github.com/zendframework/zend-session License BSD-3-Clause Releases dev-master, 2.7.3, 2.7.2, 2.7.1, 2.7.0, 2.6.2, 2.6.1, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-mvc-plugin-fileprg zendframework/zend-mvc-plugin-flashmessenger zendframework/zend-mvc-plugin-prg zendframework/zendframework zendframework/zendopenid zendframework/zend-skeleton-installer¶ Installer plugin for Zend Framework skeleton application License BSD-3-Clause Releases dev-master, 0.1.3, 0.1.2, 0.1.1, 0.1.0 Required by zendframework/skeleton-application zendframework/zend-soap¶ Homepage https://github.com/zendframework/zend-soap License BSD-3-Clause Releases dev-master, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-stdlib¶ Homepage https://github.com/zendframework/zend-stdlib License BSD-3-Clause Releases dev-master, 3.0.1, 3.0.0, 2.7.7, 2.7.6, 2.7.5, 2.7.4, 2.7.3, 2.7.2, 2.7.1, 2.7.0, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-authentication zendframework/zend-barcode zendframework/zend-cache zendframework/zend-captcha zendframework/zend-config zendframework/zend-console zendframework/zend-crypt zendframework/zend-db zendframework/zend-developer-tools zendframework/zend-di zendframework/zend-dom zendframework/zend-eventmanager zendframework/zend-expressive zendframework/zend-expressive-skeleton zendframework/zend-expressive-template zendframework/zend-feed zendframework/zend-file zendframework/zend-filter zendframework/zend-form zendframework/zend-http zendframework/zend-hydrator zendframework/zend-i18n zendframework/zend-inputfilter zendframework/zend-json zendframework/zend-ldap zendframework/zend-log zendframework/zend-mail zendframework/zend-mime zendframework/zend-modulemanager zendframework/zend-mvc zendframework/zend-mvc-console zendframework/zend-mvc-i18n zendframework/zend-mvc-plugin-fileprg zendframework/zend-mvc-plugin-flashmessenger zendframework/zend-mvc-plugin-prg zendframework/zend-navigation zendframework/zend-paginator zendframework/zend-progressbar zendframework/zend-router zendframework/zend-serializer zendframework/zend-server zendframework/zend-session zendframework/zend-soap zendframework/zend-tag zendframework/zend-test zendframework/zend-text zendframework/zend-validator zendframework/zend-view zendframework/zend-xmlrpc zendframework/zendframework zendframework/zendoauth zendframework/zendopenid zfcampus/zf-apigility zfcampus/zf-apigility-admin zfcampus/zf-configuration zfcampus/zf-content-negotiation zfcampus/zf-content-validation zfcampus/zf-hal zfcampus/zf-mvc-auth zfcampus/zf-rest zfcampus/zf-rpc zfcampus/zf-versioning zendframework/zend-stratigility¶ Middleware for PHP Homepage https://github.com/zendframework/zend-stratigility License BSD-3-Clause Support Issues: https://github.com/zendframework/zend-stratigility/issues Source: https://github.com/zendframework/zend-stratigility Releases dev-master, 1.2.1, 1.2.0, 1.1.3, 1.1.2, 1.1.1, 1.1.0, 1.0.2, 1.0.1, 1.0.0, dev-develop Required by zendframework/zend-expressive zendframework/zendframework zendframework/zend-tag¶ a component suite which provides a facility to work with taggable Items Homepage https://github.com/zendframework/zend-tag License BSD-3-Clause Releases dev-master, 2.6.1, 2.6.0, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-test¶ Homepage https://github.com/zendframework/zend-test License BSD-3-Clause Releases dev-master, 3.0.1, 3.0.0, 2.6.1, 2.6.0, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-text¶ Homepage https://github.com/zendframework/zend-text License BSD-3-Clause Releases dev-master, 2.6.0, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-mvc zendframework/zend-mvc-console zendframework/zendframework zendframework/zend-uri¶ a component that aids in manipulating and validating » Uniform Resource Identifiers (URIs) Homepage https://github.com/zendframework/zend-uri License BSD-3-Clause Releases dev-master, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-feed zendframework/zend-http zendframework/zend-mvc zendframework/zend-soap zendframework/zend-test zendframework/zendframework zendframework/zendoauth zendframework/zendservice-recaptcha zfcampus/zf-hal zfcampus/zf-versioning zendframework/zend-validator¶ provides a set of commonly needed validators Homepage https://github.com/zendframework/zend-validator License BSD-3-Clause Releases dev-master, 2.8.1, 2.8.0, 2.7.3, 2.7.2, 2.7.1, 2.7.0, 2.6.0, 2.5.4, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-barcode zendframework/zend-http zendframework/zend-inputfilter zendframework/zend-mail zendframework/zend-mvc-i18n zendframework/zend-mvc-plugin-fileprg zendframework/zend-uri zendframework/zendframework zfcampus/zf-apigility-admin zfcampus/zf-content-negotiation zfcampus/zf-content-validation zfcampus/zf-versioning zendframework/zend-version¶ Homepage https://github.com/zendframework/zend-version License BSD-3-Clause Releases dev-master, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-developer-tools zendframework/zend-feed zendframework/zendframework zendframework/zendservice-recaptcha zendframework/zend-view¶ provides a system of helpers, output filters, and variable escaping Homepage https://github.com/zendframework/zend-view License BSD-3-Clause Releases dev-master, 2.8.1, 2.8.0, 2.7.0, 2.6.8, 2.6.7, 2.6.6, 2.6.5, 2.6.4, 2.6.3, 2.6.2, 2.6.1, 2.6.0, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zend-developer-tools zendframework/zend-expressive-zendviewrenderer zendframework/zend-mvc zendframework/zend-mvc-console zendframework/zend-test zendframework/zendframework zfcampus/zf-api-problem zfcampus/zf-apigility-admin zfcampus/zf-apigility-admin-ui zfcampus/zf-apigility-documentation zfcampus/zf-apigility-documentation-apiblueprint zfcampus/zf-apigility-documentation-swagger zfcampus/zf-apigility-welcome zfcampus/zf-content-negotiation zfcampus/zf-hal zfcampus/zf-rpc zendframework/zend-xml2json¶ Provides functionality for converting XML to JSON, optionally including XML attributes Homepage https://github.com/zendframework/zend-xml2json License BSD-3-Clause Releases dev-master, 3.0.0, dev-develop Required by zendframework/zendframework zendframework/zend-xmlrpc¶ Homepage https://github.com/zendframework/zend-xmlrpc License BSD-3-Clause Releases dev-master, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, dev-develop Required by zendframework/zendframework zendframework/zenddiagnostics¶ A set of components for performing diagnostic tests in PHP applications Homepage https://github.com/zendframework/ZendDiagnostics License BSD-3-Clause Releases dev-master, v1.0.9, v1.0.8, v1.0.7, v1.0.6, v1.0.5, v1.0.4, v1.0.3, v1.0.2, v1.0.1, v1.0 Required by zendframework/zendframework¶ Zend Framework Homepage http://framework.zend.com/ License BSD-3-Clause Releases dev-master, 3.0.0, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.10, 2.4.9, 2.4.8, 2.4.7, 2.4.6, 2.4.5, 2.4.4, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.4.0rc7, 2.4.0rc6, 2.4.0rc5, 2.4.0rc4, 2.4.0rc3, 2.4.0rc2, 2.4.0rc1, 2.3.9, 2.3.8, 2.3.7, 2.3.6, 2.3.5, 2.3.4, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.10, 2.2.9, 2.2.8, 2.2.7, 2.2.6, 2.2.5, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.2.0rc3, 2.2.0rc2, 2.2.0rc1, 2.1.6, 2.1.5, 2.1.4, 2.1.3, 2.1.2, 2.1.1, 2.1.0, 2.0.8, 2.0.7, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, 2.0.0rc7, 2.0.0rc6, 2.0.0rc5, 2.0.0rc4, 2.0.0rc3, 2.0.0rc2, 2.0.0rc1, 2.0.0beta5, 2.0.0beta4, dev-develop Required by zendframework/skeleton-application zfcampus/zf-angular zfcampus/zf-apigility zfcampus/zf-apigility-admin zfcampus/zf-apigility-documentation zfcampus/zf-apigility-documentation-swagger zfcampus/zf-apigility-example zfcampus/zf-apigility-skeleton zfcampus/zf-apigility-welcome zfcampus/zf-configuration zfcampus/zf-content-negotiation zfcampus/zf-content-validation zfcampus/zf-mvc-auth zfcampus/zf-oauth2 zfcampus/zf-rpc zendframework/zendframework1¶ Zend Framework 1 Homepage http://framework.zend.com/ License BSD-3-Clause Releases dev-master, 1.12.19, 1.12.18, 1.12.17, 1.12.16, 1.12.15, 1.12.14, 1.12.13, 1.12.12, 1.12.11, 1.12.10, 1.12.9, 1.12.8, 1.12.7, 1.12.6, 1.12.5, 1.12.4, 1.12.3, 1.12.2, 1.12.1, 1.12.0 Required by zendframework/zf1-extras zendframework/zendoauth¶ Homepage http://packages.zendframework.com/ License BSD-3-Clause Releases dev-master, 2.0.3, 2.0.2, 2.0.1, 2.0.0, 2.0.0rc7, 2.0.0rc6, 2.0.0rc5, 2.0.0rc4, 2.0.0rc3, 2.0.0rc2, 2.0.0rc1 Required by zendframework/zendopenid¶ provides a simple API for building OpenID-enabled sites and identity providers Homepage http://packages.zendframework.com/ License BSD-3-Clause Releases dev-master, 2.0.2, 2.0.1, 2.0.0, 2.0.0rc7, 2.0.0rc6, 2.0.0rc5, 2.0.0rc4, 2.0.0rc3, 2.0.0rc2, 2.0.0rc1 Required by zendframework/zendservice-apple-apns¶ OOP Zend Framework 2 wrapper for Apple Push Notification Service Homepage http://packages.zendframework.com/ License BSD-3-Clause Releases dev-master, 1.2.0, 1.1.2, 1.1.1, 1.1.0, 1.0.5, 1.0.4, 1.0.3, 1.0.2, 1.0.1, 1.0.0, dev-develop Required by zendframework/zendservice-google-c2dm¶ OOP wrapper for Google Cloud 2 Device Messaging Homepage http://packages.zendframework.com/ License BSD-3-Clause Releases dev-master, 1.0.0 Required by zendframework/zendservice-google-gcm¶ OOP wrapper for Google Cloud Messaging Homepage http://packages.zendframework.com/ License BSD-3-Clause Releases dev-master, 1.0.3, 1.0.2, 1.0.1, 1.0.0 Required by zendframework/zendservice-recaptcha¶ OOP wrapper for the ReCaptcha web service Homepage http://packages.zendframework.com/ License BSD-3-Clause Releases dev-master, 2.0.1, 2.0.0, 2.0.0rc7, 2.0.0rc6, 2.0.0rc5, 2.0.0rc4, 2.0.0rc3, 2.0.0rc2, 2.0.0rc1, dev-develop Required by zendframework/zendxml¶ Utility library for XML usage, best practices, and security in PHP Homepage http://packages.zendframework.com/ License BSD-3-Clause Releases dev-master, 1.0.2, 1.0.1, 1.0.0, dev-develop Required by zendframework/zend-xml2json zendframework/zend-xmlrpc zendframework/zendframework zendframework/zf1-extras¶ Zend Framework 1 Extras Homepage http://framework.zend.com/ License BSD-3-Clause Releases dev-master, 1.12.19, 1.12.18, 1.12.16, 1.12.15, 1.12.13, 1.12.12, 1.12.11, 1.12.10, 1.12.8, 1.12.7, 1.12.6, 1.12.5, 1.12.4 Required by zfcampus/apigility-documentation¶ Apigility Documentation Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/apigility-documentation Issues: https://github.com/zfcampus/apigility-documentation/issues Releases dev-master, dev-develop Required by zfcampus/zf-angular¶ ZFAngular module for ZF2 Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-angular Issues: https://github.com/zfcampus/zf-angular/issues Releases dev-master, 0.6.0 Required by zfcampus/zf-api-problem¶ ZF2 Module providing API-Problem assets and rendering Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-api-problem Issues: https://github.com/zfcampus/zf-api-problem/issues Releases dev-master, 1.2.1, 1.2.0, 1.1.0, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 1.0.0beta1, 0.9.1, 0.9.0, 0.8.0, 0.7.0, 0.6.0, dev-develop Required by zfcampus/zf-apigility zfcampus/zf-apigility-admin zfcampus/zf-apigility-documentation-apiblueprint zfcampus/zf-apigility-documentation-swagger zfcampus/zf-apigility-example zfcampus/zf-apigility-skeleton zfcampus/zf-configuration zfcampus/zf-content-negotiation zfcampus/zf-content-validation zfcampus/zf-doctrine-querybuilder zfcampus/zf-hal zfcampus/zf-mvc-auth zfcampus/zf-oauth2 zfcampus/zf-rest zfcampus/zf-rpc zfcampus/zf-apigility¶ Apigility module for ZF2 Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-apigility Issues: https://github.com/zfcampus/zf-apigility/issues Releases dev-master, 1.2.1, 1.2.0, 1.1.0, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 1.0.0beta1, 0.9.1, 0.9.0, 0.8.0, 0.7.0, 0.6.0, dev-develop Required by zfcampus/zf-apigility-admin zfcampus/zf-apigility-doctrine zfcampus/zf-apigility-example zfcampus/zf-apigility-skeleton zfcampus/zf-apigility-admin¶ Apigility Admin module Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-apigility-admin Issues: https://github.com/zfcampus/zf-apigility-admin/issues Releases dev-master, 1.4.2, 1.4.1, 1.4.0, 1.3.3, 1.3.2, 1.3.1, 1.3.0, 1.2.2, 1.2.1, 1.2.0, 1.1.2, 1.1.1, 1.1.0, 1.0.5, 1.0.4, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 1.0.0beta1, 0.9.1, 0.9.0, 0.8.0, 0.7.0, 0.6.0, dev-develop Required by zfcampus/zf-apigility-admin-ui¶ Apigility Admin UI module Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-apigility-admin-ui Issues: https://github.com/zfcampus/zf-apigility-admin-ui/issues Releases dev-master, 1.2.3, 1.2.2, 1.2.1, 1.2.0, 1.1.6, 1.1.5, 1.1.4, 1.1.3, 1.1.2, 1.1.1, 1.1.0, 1.0.7, 1.0.6, 1.0.5, 1.0.4, dev-develop Required by zfcampus/zf-apigility-admin zfcampus/zf-apigility-doctrine¶ Doctrine in Apigility Homepage http://www.apigility.com/ License Apache-2.0 Authors Tom Anderson Releases dev-master, 2.0.5-beta, 2.0.4-beta, 2.0.3-beta, 2.0.2-beta, 2.0.1, 2.0.1-beta, 2.0.0, 1.1.1, 1.1.0, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 0.4.1, 0.4.0, 0.3.4, 0.3.3, 0.3.2, 0.3.1, 0.3.0, 0.2.7, 0.2.6, 0.2.5, 0.2.3, 0.2.2, 0.2.1, 0.2.0, 0.1.0, dev-develop Required by zfcampus/zf-apigility-documentation¶ Apigility API documentation module Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-apigility-documentation Issues: https://github.com/zfcampus/zf-apigility-documentation/issues Releases dev-master, 1.2.0, 1.1.1, 1.1.0, 1.0.6, 1.0.5, 1.0.4, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 1.0.0beta1, 0.9.1, 0.9.0, dev-develop Required by zfcampus/zf-apigility-documentation-apiblueprint zfcampus/zf-apigility-documentation-swagger zfcampus/zf-apigility-skeleton zfcampus/zf-apigility-documentation-apiblueprint¶ Apigility API Blueprint Documentation Module Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-apigility-documentation-apiblueprint Issues: https://github.com/zfcampus/zf-apigility-documentation-apiblueprint/issues Releases dev-master, 1.2.0, 1.1.0, 1.0.1, 1.0.0, dev-develop Required by zfcampus/zf-apigility-documentation-swagger¶ Apigility API Swagger documentation module Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-apigility-documentation-swagger Issues: https://github.com/zfcampus/zf-apigility-documentation-swagger/issues Releases dev-master, 1.2.0, 1.1.0, 1.0.5, 1.0.4, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 1.0.0beta1, 0.9.1, 0.9.0, dev-develop Required by zfcampus/zf-apigility-example¶ Apigility Example module Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-apigility-example Issues: https://github.com/zfcampus/zf-apigility-example/issues Releases dev-master, 0.6.0 Required by zfcampus/zf-apigility-provider¶ Apigility interfaces Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-apigility Issues: https://github.com/zfcampus/zf-apigility/issues Releases dev-master, 1.2.0, 1.1.0, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 1.0.0beta1, 0.9.1, 0.9.0, dev-develop Required by zfcampus/zf-apigility zfcampus/zf-apigility-admin zfcampus/zf-apigility-documentation zfcampus/zf-apigility-skeleton zfcampus/zf-apigility-skeleton¶ Skeleton Application for Apigility Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-apigility-skeleton Issues: https://github.com/zfcampus/zf-apigility-skeleton/issues Releases dev-master, 1.3.3, 1.3.2, 1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.1, 1.1.0, 1.0.5, 1.0.4, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 1.0.0beta1, 0.9.1, 0.9.0, 0.8.0, 0.7.0, 0.6.0, dev-develop Required by zfcampus/zf-apigility-welcome¶ Apigility Welcome Screen Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-apigility-welcome Issues: https://github.com/zfcampus/zf-apigility-welcome/issues Releases dev-master, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 1.0.0beta1, 0.9.1, 0.9.0, 0.8.0, 0.7.0, 0.6.0, dev-develop Required by zfcampus/zf-configuration¶ Zend Framework module providing a REST resource for manipulating configuration Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-configuration Issues: https://github.com/zfcampus/zf-configuration/issues Releases dev-master, 1.2.0, 1.1.0, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 1.0.0beta1, 0.9.1, 0.9.0, 0.8.0, 0.7.0, 0.6.0, dev-develop Required by zfcampus/zf-apigility-admin zfcampus/zf-apigility-documentation zfcampus/zf-apigility-skeleton zfcampus/zf-console¶ Library for creating and dispatching console commands Homepage http://framework.zend.com/ License BSD-3-Clause Support Source: https://github.com/zfcampus/zf-console Issues: https://github.com/zfcampus/zf-console/issues Releases dev-master, 1.3.0, 1.2.1, 1.2.0, 1.1.1, 1.1.0, 1.0.4, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 0.1.1, 0.1.0, dev-develop Required by zfcampus/zf-deploy zfcampus/zf-content-negotiation¶ ZF2 Module providing content-negotiation features Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-content-negotiation Issues: https://github.com/zfcampus/zf-content-negotiation/issues Releases dev-master, 1.2.1, 1.2.0, 1.1.2, 1.1.1, 1.1.0, 1.0.9, 1.0.8, 1.0.7, 1.0.6, 1.0.5, 1.0.4, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 1.0.0beta1, 0.9.1, 0.9.0, 0.8.0, 0.7.0, 0.6.0, dev-develop Required by zfcampus/zf-apigility zfcampus/zf-apigility-admin zfcampus/zf-apigility-documentation zfcampus/zf-apigility-documentation-apiblueprint zfcampus/zf-apigility-documentation-swagger zfcampus/zf-apigility-example zfcampus/zf-apigility-skeleton zfcampus/zf-configuration zfcampus/zf-content-validation zfcampus/zf-mvc-auth zfcampus/zf-oauth2 zfcampus/zf-rest zfcampus/zf-rpc zfcampus/zf-content-validation¶ Zend Framework module providing incoming content validation Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-content-validation Issues: https://github.com/zfcampus/zf-content-validation/issues Releases dev-master, 1.3.0, 1.2.0, 1.1.1, 1.1.0, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 1.0.0beta1, 0.9.1, 0.9.0, 0.8.0, dev-develop Required by zfcampus/zf-apigility zfcampus/zf-apigility-admin zfcampus/zf-apigility-example zfcampus/zf-apigility-skeleton zfcampus/zf-deploy¶ Deployment tool for Zend Framework applications Homepage http://framework.zend.com/ License BSD-3-Clause Support Source: https://github.com/zfcampus/zf-deploy Issues: https://github.com/zfcampus/zf-deploy/issues Releases dev-master, 1.2.0, 1.1.1, 1.1.0, 1.0.5, 1.0.4, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 0.2.0, dev-develop Required by zfcampus/zf-development-mode¶ Zend Framework development mode script Homepage http://github.com/zfcampus/zf-development-mode License BSD-3-Clause Releases dev-master, 3.0.0, 2.1.2, 2.1.1, 2.1.0, 2.0.6, 2.0.5, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0, 1.1, 1.0, 0.9.1, 0.9.0, dev-develop Required by zendframework/skeleton-application zfcampus/zf-apigility-skeleton zfcampus/zf-doctrine-querybuilder¶ QueryBuilder filters for Doctrine Homepage https://github.com/zfcampus/zf-doctrine-querybuilder-filter License BSD-3-Clause Authors Tom Anderson Releases dev-master, 1.4.6, 1.4.5, 1.4.4, 1.4.3, 1.4.2, 1.4.1, 1.4.0, 1.3.2, 1.3.1, 1.3.0, 1.2.0, 1.0.1, 1.0.0, 0.1.2, 0.1.1, 0.1.0, dev-develop Required by zfcampus/zf-hal¶ ZF2 Module providing Hypermedia Application Language assets and rendering Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-hal Issues: https://github.com/zfcampus/zf-hal/issues Releases dev-master, 1.4.0, 1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.1, 1.1.0, 1.0.5, 1.0.4, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 0.9.1, 0.9.0, 0.8.0, 0.7.0, 0.6.0, dev-develop Required by zfcampus/zf-apigility zfcampus/zf-apigility-admin zfcampus/zf-apigility-example zfcampus/zf-apigility-skeleton zfcampus/zf-doctrine-querybuilder zfcampus/zf-rest zfcampus/zf-http-cache¶ ZF2 Module providing http cache headers support Homepage http://apigility.org/ License BSD-3-Clause Authors Corentin Larose Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-http-cache Issues: https://github.com/zfcampus/zf-http-cache/issues Releases dev-master, 1.3.0, 1.2.3, 1.2.2, 1.2.1, 1.2.0, 1.1.0, 1.0.2, 1.0.1, 1.0.0, dev-develop Required by zfcampus/zf-mvc-auth¶ ZF2 Module providing Authentication and Authorization events and infrastructure License BSD-3-Clause Releases dev-master, 1.4.0, 1.3.2, 1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.3, 1.1.2, 1.1.1, 1.1.0, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 1.0.0beta1, 0.9.1, 0.9.0, 0.8.0, 0.7.0, dev-develop Required by zfcampus/zf-apigility zfcampus/zf-apigility-admin zfcampus/zf-apigility-example zfcampus/zf-apigility-skeleton zfcampus/zf-rest zfcampus/zf-oauth2¶ ZF2 module for implementing an OAuth2 server License BSD-3-Clause Releases dev-master, 1.4.0, 1.3.3, 1.3.2, 1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.3, 1.1.2, 1.1.1, 1.1.0, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 1.0.0beta1, 0.9.1, 0.9.0, 0.8.0, 0.7.0, dev-develop Required by zfcampus/zf-apigility zfcampus/zf-apigility-admin zfcampus/zf-apigility-example zfcampus/zf-apigility-skeleton zfcampus/zf-mvc-auth zfcampus/zf-rest zfcampus/zf-rest¶ ZF Module providing structure for RESTful resources Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-rest Issues: https://github.com/zfcampus/zf-rest/issues Releases dev-master, 1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.1, 1.1.0, 1.0.4, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 1.0.0beta1, 0.9.1, 0.9.0, 0.8.0, 0.7.0, 0.6.0, dev-develop Required by zfcampus/zf-apigility zfcampus/zf-apigility-admin zfcampus/zf-apigility-example zfcampus/zf-apigility-skeleton zfcampus/zf-rpc¶ ZF2 Module for simplifying the creation of RPC services Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-rpc Issues: https://github.com/zfcampus/zf-rpc/issues Releases dev-master, 1.3.0, 1.2.0, 1.1.0, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 1.0.0beta1, 0.9.1, 0.9.0, 0.8.0, 0.7.0, 0.6.0, dev-develop Required by zfcampus/zf-apigility zfcampus/zf-apigility-admin zfcampus/zf-apigility-example zfcampus/zf-apigility-skeleton zfcampus/zf-versioning¶ ZF2 Module providing listeners and route prototypes for implementing API versioning Homepage http://apigility.org/ License BSD-3-Clause Support Email: apigility-users@zend.com Irc: irc://irc.freenode.net/apigility Source: https://github.com/zfcampus/zf-versioning Issues: https://github.com/zfcampus/zf-versioning/issues Releases dev-master, 1.2.0, 1.1.0, 1.0.3, 1.0.2, 1.0.1, 1.0.0, 1.0.0-beta3, 1.0.0beta2, 1.0.0beta1, 0.9.1, 0.9.0, 0.8.0, 0.7.0, 0.6.0, dev-develop Required by zfcampus/zf-apigility zfcampus/zf-apigility-admin zfcampus/zf-apigility-example zfcampus/zf-apigility-skeleton Zend Framework framework.zend.com docs.zendframework.com apigility.org Copyright © 2006-2016 by Zend, a Rogue Wave Company. Contacts"	"null"	"null"	"The components that make Zend Framework."	"true"
"Micro Frameworks"	"Bullet PHP"	"http://bulletphp.com/"	"A micro framework for building REST APIs."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"304"	"22"	"41"	"GitHub - vlucas/bulletphp: A resource-oriented micro PHP framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 304 Fork 41 vlucas/bulletphp Code Issues 13 Pull requests 2 Wiki Pulse Graphs A resource-oriented micro PHP framework http://bulletphp.com 151 commits 8 branches 40 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags caching fix_qs_url gh-pages issue_34 master middleware options_header remaining-path Nothing to show v1.4.2 v1.4.1 v1.4.0 v1.3.6 v1.3.5 v1.3.4 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.9 v1.2.8 v1.2.7 v1.2.6 v1.2.5 v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.6 v1.1.5 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.9.2 v0.9.1 v0.9.0 v0.8.1 v0.8.0 Nothing to show New pull request Latest commit 6520149 Feb 27, 2015 vlucas Merge pull request #69 from ellotheth/issue-68/overload-response-hand… … …lers  Give users more control over response handlers (fixes #68) Permalink Failed to load latest commit information. src/Bullet rename the default response handler to `array_json` Feb 27, 2015 tests rename the default response handler to `array_json` Feb 27, 2015 .gitignore Fix $view reference in layout test Jan 10, 2013 .travis.yml Testing HHVM with Travis-CI Feb 13, 2014 LICENSE.txt Added BSD License May 2, 2012 README.md Fix typo in README segement -> segment Oct 22, 2014 composer.json Tweaked a version constraint Oct 13, 2014 index.php Updated README to emphasise Rackem is optional May 4, 2012 phpunit.xml Add 'url' and 'exceptionHanlder' methods w/tests Aug 6, 2012 README.md Bullet Bullet is a resource-oriented micro PHP framework built around HTTP URIs. Bullet takes a unique functional-style approach to URL routing by parsing each path part independently and one at a time using nested closures. The path part callbacks are nested to produce different responses and to follow and execute deeper paths as paths and parameters are matched. Requirements PHP 5.3+ (PHP 5.4 recommended) Composer for all package management and autoloading (may require command-line access) Rules Apps are built around HTTP URIs and defined paths, not forced MVC (but MVC-style separation of concerns is still highly recommenended and encouraged) Bullet handles one segment of the path at a time, and executes the callback for that path segment before proceesing to the next segment (path callbacks are executed from left to right, until the entire path is consumed). If the entire path cannot be consumed, a 404 error will be returned (note that some callbacks may have been executed before Bullet can know this due to the nature of callbacks and closures). Example: path /events/45/edit may return a 404 because there is no edit path callback, but paths events and 45 would have already been executed before Bullet can know to return a 404. This is why all your primary logic should be contained in get, post, or other method callbacks or in the model layer (and not in the bare path handlers). If the path can be fully consumed, and HTTP method handlers are present in the path but none are matched, a 405 ""Method Not Allowed"" response will be returned. If the path can be fully consumed, and format handlers are present in the path but none are matched, a 406 ""Not Acceptable"" response will be returned. Advantages Super flexible routing. Because of the way the routing callbacks are nested, Bullet's routing system is one of the most flexible of any other PHP framework or library. You can build any URL you want and respond to any HTTP method on that URL. Routes are not restricted to specific patterns or URL formats, and do not require a controller with specific method names to respond to specific HTTP methods. You can nest routes as many levels deep as you want to expose nested resources like posts/42/comments/943/edit with a level of ease not found in most other routing libraries or frameworks. Reduced code duplication (DRY). Bullet takes full advantage of its nested closure routing system to reduce a lot of typical code duplication required in most other frameworks. In a typical MVC framework controller, some code has to be duplicated across methods that perform CRUD operations to run ACL checks and load required resources like a Post object to view, edit or delete. With Bullet's nested closure style, this code can be written just once in a path or param callback, and then you can use the loaded object in subsequent path, param, or HTTP method handlers. This eliminates the need for ""before"" hooks and filters, because you can just run the checks and load objects you need before you define other nested paths and use them when required. Installing with Composer Use the basic usage guide, or follow the steps below: Setup your composer.json file at the root of your project {     ""require"": {         ""vlucas/bulletphp"": ""*""     } }  Install Composer curl -s http://getcomposer.org/installer | php  Install Dependencies (will download Bullet) php composer.phar install  Create index.php (use the minimal example below to get started) <?php require __DIR__ . '/vendor/autoload.php';  // Your App $app = new Bullet\App(); $app->path('/', function($request) {     return ""Hello World!""; });  // Run the app! (takes $method, $url or Bullet\Request object) echo $app->run(new Bullet\Request());  Use an .htaccess file for mod_rewrite (if you're using Apache) <IfModule mod_rewrite.c>   RewriteEngine On    # Reroute any incoming requestst that is not an existing directory or file   RewriteCond %{REQUEST_FILENAME} !-d   RewriteCond %{REQUEST_FILENAME} !-f   RewriteRule ^(.*)$ index.php?u=$1 [L,QSA,B] </IfModule>  View it in your browser! Syntax Bullet is not your typical PHP micro framework. Instead of defining a full path pattern or a typical URL route with a callback and parameters mapped to a REST method (GET, POST, etc.), Bullet parses only ONE URL segment at a time, and only has two methods for working with paths: path and param. As you may have guessed, path is for static path names like ""blog"" or ""events"" that won't change, and param is for variable path segments that need to be captured and used, like ""42"" or ""my-post-title"". You can then respond to paths using nested HTTP method callbacks that contain all the logic for the action you want to perform. This type of unique callback nesting eliminates repetitive code for loading records, checking authentication, and performing other setup work found in typical MVC frameworks or other microframeworks where each callback or action is in a separate scope or controller method. $app = new Bullet\App(array(     'template.cfg' => array('path' => __DIR__ . '/templates') ));  // 'blog' subdirectory $app->path('blog', function($request) use($app) {      $blog = somehowGetBlogMapper(); // Your ORM or other methods here      // 'posts' subdirectory in 'blog' ('blog/posts')     $app->path('posts', function() use($app, $blog) {          // Load posts once for handling by GET/POST/DELETE below         $posts = $blog->allPosts(); // Your ORM or other methods here          // Handle GET on this path         $app->get(function() use($posts) {             // Display all $posts             return $app->template('posts/index', compact('posts'));         });          // Handle POST on this path         $app->post(function() use($posts) {             // Create new post             $post = new Post($request->post());             $mapper->save($post);             return $this->response($post->toJSON(), 201);         });          // Handle DELETE on this path         $app->delete(function() use($posts) {             // Delete entire posts collection             $posts->deleteAll();             return 200;         });      }); });  // Run the app and echo the response echo $app->run(""GET"", ""blog/posts"");  Capturing Path Parameters Perhaps the most compelling use of URL routing is to capture path segments and use them as parameters to fetch items from a database, like /posts/42 and /posts/42/edit. Bullet has a special param handler for this that takes two arguments: a test callback that validates the parameter type for use, and and a Closure callback. If the test callback returns boolean false, the closure is never executed, and the next path segment or param is tested. If it returns boolean true, the captured parameter is passed to the Closure as the second argument. Just like regular paths, HTTP method handlers can be nested inside param callbacks, as well as other paths, more parameters, etc. $app = new Bullet\App(array(     'template.cfg' => array('path' => __DIR__ . '/templates') )); $app->path('posts', function($request) use($app) {     // Integer path segment, like 'posts/42'     $app->param('int', function($request, $id) use($app) {         $app->get(function($request) use($id) {             // View post             return 'view_' . $id;         });         $app->put(function($request) use($id) {             // Update resource             $post->data($request->post());             $post->save();             return 'update_' . $id;         });         $app->delete(function($request) use($id) {             // Delete resource             $post->delete();             return 'delete_' . $id;         });     });     // All printable characters except space     $app->param('ctype_graph', function($request, $slug) use($app) {         return $slug; // 'my-post-title'     }); });  // Results of above code echo $app->run('GET',   '/posts/42'); // 'view_42' echo $app->run('PUT',   '/posts/42'); // 'update_42' echo $app->run('DELETE', '/posts/42'); // 'delete_42'  echo $app->run('DELETE', '/posts/my-post-title'); // 'my-post-title'  Returning JSON (Useful for PHP JSON APIs) Bullet has built-in support for returning JSON responses. If you return an array from a route handler (callback), Bullet will assume the response is JSON and automatically json_encode the array and return the HTTP response with the appropriate Content-Type: application/json header. $app->path('/', function($request) use($app) {     $app->get(function($request) use($app) {         // Links to available resources for the API         $data = array(             '_links' => array(                 'restaurants' => array(                     'title' => 'Restaurants',                     'href' => $app->url('restaurants')                 ),                 'events' => array(                     'title' => 'Events',                     'href' => $app->url('events')                 )             )         );          // Format responders         $app->format('json', function($request), use($app, $data) {             return $data; // Auto json_encode on arrays for JSON requests         });         $app->format('xml', function($request), use($app, $data) {             return custom_function_convert_array_to_xml($data);         });         $app->format('html', function($request), use($app, $data) {             return $app->template('index', array('links' => $data));         });     }); });  HTTP Response Bullet Sends: Content-Type:application/json  {""_links"":{""restaurants"":{""title"":""Restaurants"",""href"":""http:\/\/yourdomain.local\/restaurants""},""events"":{""title"":""Events"",""href"":""http:\/\/yourdomain.local\/events""}}}  Bullet Response Types There are many possible values you can return from a route handler in Bullet to produce a valid HTTP response. Most types can be either returned directly, or wrapped in the $app->response() helper for additional customization. Strings $app = new Bullet\App(); $app->path('/', function($request) use($app) {     return ""Hello World""; }); $app->path('/', function($request) use($app) {     return $app->response(""Hello Error!"", 500); });  Strings result in a 200 OK response with a body containing the returned string. If you want to return a quick string response with a different HTTP status code, use the $app->response() helper. Booleans $app = new Bullet\App(); $app->path('/', function($request) use($app) {     return true; }); $app->path('notfound', function($request) use($app) {     return false; });  Boolean false results in a 404 ""Not Found"" HTTP response, and boolean true results in a 200 ""OK"" HTTP response. Integers $app = new Bullet\App(); $app->path('teapot', function($request) use($app) {     return 418; });  Integers are mapped to their corresponding HTTP status code. In this example, a 418 ""I'm a Teapot"" HTTP response would be sent. Arrays $app = new Bullet\App(); $app->path('foo', function($request) use($app) {     return array('foo' => 'bar'); }); $app->path('bar', function($request) use($app) {     return $app->response(array('bar' => 'baz'), 201); });  Arrays are automatically passed through json_encode and the appropriate Content-Type: application/json HTTP response header is sent. Templates // Configure template path with constructor $app = new Bullet\App(array(     'template.cfg' => array('path' => __DIR__ . '/templates') ));  // Routes $app->path('foo', function($request) use($app) {     return $app->template('foo'); }); $app->path('bar', function($request) use($app) {     return $app->template('bar', array('bar' => 'baz'), 201); });  The $app->template() helper returns an instance of Bullet\View\Template that is lazy-rendered on __toString when the HTTP response is sent. The first argument is a template name, and the second (optional) argument is an array of parameters to pass to the template for use. Nested Requests (HMVC style code re-use) Since you explicitly return values from Bullet routes instead of sending output directly, nested/sub requests are straightforward and easy. All route handlers will return Bullet\Response instances (even if they return a raw string or other data type, they are wrapped in a response object by the run method), and they can be composed to form a single HTTP response. $app = new Bullet\App(); $app->path('foo', function($request) use($app) {     return ""foo""; }); $app->path('bar', function($request) use($app) {     $foo = $app->run('GET', 'foo'); // $foo is now a `Bullet\Response` instance     return $foo->content() . ""bar""; }); echo $app->run('GET', 'bar'); // echos 'foobar' with a 200 OK status  Running Tests To run the Bullet test suite, simply run phpunit in the root of the directory where the bullet files are in. Please make sure to add tests and run the test suite before submitting pull requests for any contributions. Credits Bullet - and specifically path-based callbacks that fully embrace HTTP and encourage a more resource-oriented design - is something I have been thinking about for a long time, and was finally moved to create it after seeing @joshbuddy give a presentation on Renee (Ruby) at Confoo 2012 in Montréal. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vlucas/bulletphp"	"A micro framework for building REST APIs."	"true"
"Micro Frameworks"	"Lumen"	"https://lumen.laravel.com/"	"A micro-framework by Laravel."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3882"	"297"	"459"	"GitHub - laravel/lumen Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 297 Star 3,882 Fork 459 laravel/lumen Code Pull requests 0 Pulse Graphs No description or website provided. 130 commits 4 branches 7 releases 29 contributors PHP 97.2% ApacheConf 2.8% PHP ApacheConf Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 5.0 aliases develop master Nothing to show v5.2.1 v5.2.0 v5.1.4 v5.1.0 v5.0.4 v5.0.1 v5.0.0 Nothing to show New pull request Latest commit 9c052de Jun 21, 2016 taylorotwell committed on GitHub Merge pull request #71 from krienow/patch-d5b15e … [5.2] Add Type Hint Permalink Failed to load latest commit information. app Applied fixes from StyleCI Apr 15, 2016 bootstrap Updated the app bootstrap file Jan 7, 2016 database Add Type Hint Jun 21, 2016 public Fix wording Oct 15, 2015 resources/views Stub out directories. Jan 7, 2016 storage Add ignore file for file cache directory May 5, 2016 tests Pass parameters to assertEquals in correct order Apr 22, 2016 .env.example working on lumen 6.0 Nov 30, 2015 .gitignore Revert 3087f15 Nov 10, 2015 artisan Add executable attribute to artisan May 15, 2016 composer.json adding post root package install composer script May 17, 2016 phpunit.xml Update the phpunit config Apr 7, 2016 readme.md Fix section heading level in readme.md Jan 24, 2016 readme.md Lumen PHP Framework Laravel Lumen is a stunningly fast PHP micro-framework for building web applications with expressive, elegant syntax. We believe development must be an enjoyable, creative experience to be truly fulfilling. Lumen attempts to take the pain out of development by easing common tasks used in the majority of web projects, such as routing, database abstraction, queueing, and caching. Official Documentation Documentation for the framework can be found on the Lumen website. Security Vulnerabilities If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell at taylor@laravel.com. All security vulnerabilities will be promptly addressed. License The Lumen framework is open-sourced software licensed under the MIT license Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/laravel/lumen"	"A micro-framework by Laravel."	"true"
"Micro Frameworks"	"Proton"	"https://github.com/alexbilbie/Proton"	"A StackPHP compatible micro framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"243"	"21"	"27"	"GitHub - alexbilbie/Proton: A micro PHP framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 243 Fork 27 alexbilbie/Proton Code Issues 5 Pull requests 4 Pulse Graphs A micro PHP framework 135 commits 4 branches 14 releases 5 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master monolog older-symfony Nothing to show 1.4.1 1.4.0 1.3.0 1.2.1 1.2.0 1.1.0 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0 Nothing to show New pull request Latest commit a2f7600 Dec 29, 2015 alexbilbie Merge pull request #33 from GrahamCampbell/patch-1 … Corrected symfony version constraint Permalink Failed to load latest commit information. src Remove bad docblock Mar 26, 2015 tests Merge pull request #21 from sagikazarmark/events Feb 22, 2015 .gitignore Various docblock fixes Dec 12, 2014 .scrutinizer.yml Various docblock fixes Dec 12, 2014 .travis.yml Added PHP 7.0 testing Mar 3, 2015 CHANGELOG.md Changelog update Mar 26, 2015 LICENSE.md Create LICENSE.md Oct 2, 2014 README.md Updated README Feb 22, 2015 composer.json Corrected symfony version constraint Dec 26, 2015 phpunit.xml Various docblock fixes Dec 12, 2014 README.md Proton Proton is a StackPHP compatible micro framework. Under the hood it uses League\Route for routing, League\Container for dependency injection, and League\Event for event dispatching. Installation Just add ""alexbilbie/proton"": ""~1.4"" to your composer.json file. Setup Basic usage with anonymous functions: // index.php <?php  require __DIR__.'/../vendor/autoload.php';  $app = new Proton\Application();  $app->get('/', function ($request, $response) {     $response->setContent('<h1>It works!</h1>');     return $response; });  $app->get('/hello/{name}', function ($request, $response, $args) {     $response->setContent(         sprintf('<h1>Hello, %s!</h1>', $args['name'])     );     return $response; });  $app->run(); Basic usage with controllers: // index.php <?php  require __DIR__.'/../vendor/autoload.php';  $app = new Proton\Application();  $app['HomeController'] = function () {     return new HomeController(); };  $app->get('/', 'HomeController::index'); // calls index method on HomeController class  $app->run(); // HomeController.php <?php  use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response;  class HomeController {     public function index(Request $request, Response $response, array $args)     {         $response->setContent('<h1>It works!</h1>');         return $response;     } } Basic usage with StackPHP (using Stack\Builder and Stack\Run): // index.php <?php require __DIR__.'/../vendor/autoload.php';  $app = new Proton\Application();  $app->get('/', function ($request, $response) {     $response->setContent('<h1>It works!</h1>');     return $response; });  $stack = (new Stack\Builder())     ->push('Some/MiddleWare') // This will execute first     ->push('Some/MiddleWare') // This will execute second     ->push('Some/MiddleWare'); // This will execute third  $app = $stack->resolve($app); Stack\run($app); // The app will run after all the middlewares have run Debugging By default Proton runs with debug options disabled. To enable debugging add $app['debug'] = true; Proton has built in support for Monolog. To access a channel call: $app->getLogger('channel name'); For more information about channels read this guide - https://github.com/Seldaek/monolog/blob/master/doc/usage.md#leveraging-channels. Custom exception decoration $app->setExceptionDecorator(function (\Exception $e) {     $response = new \Symfony\Component\HttpFoundation\Response;     $response->setStatusCode(500);     $response->setContent('Epic fail!');     return $response; }); Events You can intercept requests and responses at three points during the lifecycle: request.received $app->subscribe('request.received', function ($event) {     // access the request using $event->getRequest() }) This event is fired when a request is received but before it has been processed by the router. response.created $app->subscribe('response.created', function ($event) {     // access the request using $event->getRequest()     // access the response using $event->getResponse() }) This event is fired when a response has been created but before it has been output. response.sent $app->subscribe('response.sent', function ($event) {     // access the request using $event->getRequest()     // access the response using $event->getResponse() }) This event is fired when a response has been output and before the application lifecycle is completed. Custom Events You can fire custom events using the event emitter directly: // Subscribe $app->subscribe('custom.event', function ($event, $time) {     return 'the time is '.$time; });  // Publish $app->getEventEmitter()->emit('custom.event', time()); Dependency Injection Container Proton uses League/Container as its dependency injection container. You can bind singleton objects into the container from the main application object using ArrayAccess: $app['db'] = function () {     $manager = new Illuminate\Database\Capsule\Manager;      $manager->addConnection([         'driver'    => 'mysql',         'host'      => $config['db_host'],         'database'  => $config['db_name'],         'username'  => $config['db_user'],         'password'  => $config['db_pass'],         'charset'   => 'utf8',         'collation' => 'utf8_unicode_ci'     ], 'default');      $manager->setAsGlobal();      return $manager; }; or by accessing the container directly: $app->getContainer()->singleton('db', function () {     $manager = new Illuminate\Database\Capsule\Manager;      $manager->addConnection([         'driver'    => 'mysql',         'host'      => $config['db_host'],         'database'  => $config['db_name'],         'username'  => $config['db_user'],         'password'  => $config['db_pass'],         'charset'   => 'utf8',         'collation' => 'utf8_unicode_ci'     ], 'default');      $manager->setAsGlobal();      return $manager; }); Multitons can be added using the add method on the container: $app->getContainer()->add('foo', function () {         return new Foo(); }); Service providers can be registered using the register method on the Proton app or addServiceProvider on the container: $app->register('\My\Service\Provider'); $app->getContainer()->addServiceProvider('\My\Service\Provider'); For more information about service providers check out this page - http://container.thephpleague.com/service-providers/. For easy testing down the road it is recommended you embrace constructor injection: $app->getContainer()->add('Bar', function () {         return new Bar(); });  $app->getContainer()->add('Foo', function () use ($app) {         return new Foo(             $app->getContainer()->get('Bar')         ); }); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/alexbilbie/Proton"	"A StackPHP compatible micro framework"	"true"
"Micro Frameworks"	"Silex"	"http://silex.sensiolabs.org/"	"A micro framework built around Symfony2 components."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Homepage - Silex - The PHP micro-framework based on the Symfony Components SILEX The PHP micro-framework based on the Symfony Components DOCUMENTATION DOWNLOAD DEVELOPMENT CONTRIBUTORS A PHP micro-framework standing on the shoulder of giants Silex is a PHP microframework for PHP. It is built on the shoulders of Symfony and Pimple and also inspired by sinatra. A microframework provides the guts for building simple single-file apps. Silex aims to be: Concise: Silex exposes an intuitive and concise API that is fun to use. Extensible: Silex has an extension system based around the Pimple micro service-container that makes it even easier to tie in third party libraries. Testable: Silex uses Symfony's HttpKernel which abstracts request and response. This makes it very easy to test apps and the framework itself. It also respects the HTTP specification and encourages its proper use. In a nutshell, you define controllers and map them to routes, all in one step: require_once __DIR__.'/../vendor/autoload.php';   $app = new Silex\Application();   $app->get('/hello/{name}', function($name) use($app) {      return 'Hello '.$app->escape($name);  });   $app->run();   All that is needed to get access to the Framework is to include the autoloader. Next we define a route to /hello/{name} that matches for GET requests. When the route matches, the function is executed and the return value is sent back to the client. Finally, the app is run. It's really that easy! Installing Silex is as easy as it can get. Download the archive file, extract it, and you're done! Want to learn more? Read the documentation. Who is behind Silex? Silex is brought to you by Fabien Potencier, the creator of the Symfony framework, and Igor Wiedler. Silex is released under the MIT license. This website is powered by Silex and Twig. The Silex logo is © 2010-2016 SensioLabs"	"null"	"null"	"A micro framework built around Symfony2 components."	"true"
"Micro Frameworks"	"Slim"	"http://www.slimframework.com/"	"Another simple micro framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Slim Framework - Slim Framework Toggle navigation Blog User Guide Support Contribute Goodies Slim a micro framework for PHP Slim is a PHP micro framework that helps you quickly write simple yet powerful web applications and APIs. <?php use \Psr\Http\Message\ServerRequestInterface as Request; use \Psr\Http\Message\ResponseInterface as Response;  require 'vendor/autoload.php';  $app = new \Slim\App; $app->get('/hello/{name}', function (Request $request, Response $response) {     $name = $request->getAttribute('name');     $response->getBody()->write(""Hello, $name"");      return $response; }); $app->run(); Blog User Guide Support Contribute Swag! We have some. Shop Now Download & Install We recommend you install the Slim Framework with the Composer dependency manager. The easiest way to start working with Slim is to create a project using Slim-Skeleton as a base by running this bash command: $ php composer.phar create-project slim/slim-skeleton [my-app-name] Replace [my-app-name] with the desired directory name for your new application. You can then run it with PHP's built-in webserver: $ cd [my-app-name]; php -S 0.0.0.0:8080 -t public public/index.php Features HTTP Router Slim provides a fast and powerful router that maps route callbacks to specific HTTP request methods and URIs. It supports parameters and pattern matching. Middleware Build your application with concentric middleware to tweak the HTTP request and response objects around your Slim app. PSR-7 Support Slim supports any PSR-7 HTTP message implementation so you may inspect and manipulate HTTP message method, status, URI, headers, cookies, and body. Dependency Injection Slim supports dependency injection so you have complete control of your external tools. Use any Container-Interop container. Latest News May 25, 2016 Slim 3.4.2 released 3.4.1 had a BC break when handling errors where the acceptable media type listed in the Accept header wasn’t the first one. This is now fixed. May 16, 2016 Slim 3.4.1 released This releases fixes a infinite loop bug discovered in version 3.4.0 and also adds additional unit tests. May 09, 2016 Slim 3.4.0 released This release add a number of new features and improvements. Firstly, we now support media type structured suffixes (+json & +xml) for our Request’s body parser and error response output. Routing has also seen some improvements with two new methods: removeNamedRoute() and setPattern() and you can now cache the parsed FastRoute route information to a cache file with the routerCacheFile setting. Older News Subscribe with RSS Newsletter Don't have Twitter? Join our newsletter and receive one email a week (at most) with the latest Slim Framework news, release announcements, and security updates. We hate spam, and we'll respect your inbox. You can unsubscribe at any time. Enter your email address Email Archives Chat on IRC The official Freenode IRC channel is #slimphp. You can chat with other Slim Framework developers to share code or troubleshoot tricky issues. My nick is codeguy if you have questions or need assistance in the IRC channel. Visit the IRC Channel Read real-time IRC logs on BotBot.me Follow @slimphp on Twitter Tweets by @slimphp Created and maintained by Josh Lockhart, Andrew Smith, Rob Allen, and the Slim Framework Team"	"null"	"null"	"Another simple micro framework."	"true"
"Micro Framework Extras"	"Silex Skeleton"	"https://github.com/silexphp/Silex-Skeleton"	"A project skeleton for Silex."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"681"	"83"	"198"	"GitHub - silexphp/Silex-Skeleton: A skeleton to get started with Silex Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 83 Star 681 Fork 198 silexphp/Silex-Skeleton Code Issues 0 Pull requests 1 Pulse Graphs A skeleton to get started with Silex 82 commits 2 branches 9 releases 19 contributors PHP 75.7% HTML 24.3% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.1 master Nothing to show v2.0.0 v1.1.5 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 2cd3048 May 18, 2016 fabpot switched Silex deps to stable Permalink Failed to load latest commit information. bin fixed paths Oct 11, 2013 config re-added the web profiler Nov 24, 2014 src Typo Oct 19, 2015 templates Add .twig file extension to templates Jun 1, 2015 tests added some more examples in the test example Sep 10, 2015 var Fix typos Apr 16, 2014 web Upgrade to Silex 2. The WebProfilerServiceProvider has been disabled … Sep 3, 2014 .gitignore Remove composer.lock form gitignore Feb 4, 2015 LICENSE updated LICENSE Mar 30, 2014 README.rst fixed README Oct 2, 2015 composer.json switched Silex deps to stable May 18, 2016 phpunit.xml.dist tweaked tests Sep 10, 2015 README.rst Silex Skeleton Welcome to the Silex Skeleton - a fully-functional Silex application that you can use as the skeleton for your new applications. This document contains information on how to start using the Silex Skeleton. Creating a Silex Application Silex uses Composer to ease the creation of a new project: $ composer create-project fabpot/silex-skeleton path/to/install ~2.0@dev Composer will create a new Silex project under the path/to/install directory. Browsing the Demo Application Congratulations! You're now ready to use Silex. To see a real-live Silex page in action, start the PHP built-in web server with command: $ cd path/to/install $ COMPOSER_PROCESS_TIMEOUT=0 composer run Then, browse to http://localhost:8888/. Getting started with Silex This distribution is meant to be the starting point for your Silex applications. A great way to start learning Silex is via the Documentation, which will take you through all the features of Silex. What's inside? The Silex Skeleton is configured with the following service providers: UrlGeneratorServiceProvider - Provides a service for generating URLs for named routes. ValidatorServiceProvider - Provides a service for validating data. It is most useful when used with the FormServiceProvider, but can also be used standalone. ServiceControllerServiceProvider - As your Silex application grows, you may wish to begin organizing your controllers in a more formal fashion. Silex can use controller classes out of the box, but with a bit of work, your controllers can be created as services, giving you the full power of dependency injection and lazy loading. TwigServiceProvider - Provides integration with the Twig template engine. WebProfilerServiceProvider - Enable the Symfony web debug toolbar and the Symfony profiler in your Silex application when developing. MonologServiceProvider - Enable logging in the development environment. Read the Providers documentation for more details about Silex Service Providers. Enjoy! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/silexphp/Silex-Skeleton"	"A project skeleton for Silex."	"true"
"Micro Framework Extras"	"Silex Web Profiler"	"https://github.com/silexphp/Silex-WebProfiler"	"A web debug toolbar for Silex."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"167"	"14"	"46"	"GitHub - silexphp/Silex-WebProfiler Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 167 Fork 46 silexphp/Silex-WebProfiler Code Issues 13 Pull requests 0 Pulse Graphs No description or website provided. 86 commits 3 branches 11 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 master var-dumper Nothing to show v2.0.1 v2.0.0 v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 605ebe9 Jun 15, 2016 fabpot minor #91 Allow symfony 3.1 (mvanbaak) … This PR was squashed before being merged into the 2.0.x-dev branch (closes #91).  Discussion ----------  Allow symfony 3.1  As I was updating my skeleton app, I found out the webprofiler did not support symfony 3.1 in composer.json. So I tried to update it.  Everything works great, except for the web-profiler-bundle. This PR broke it: symfony/symfony#17589  I don't know the best way to fix that. Maybe you have an idea? (I'm not that familiar with the silex and symfony development)  Commits -------  0a09d2a Allow symfony 3.1 Permalink Failed to load latest commit information. Tests Allow symfony 3.1 Jun 15, 2016 .editorconfig Add functional tests May 14, 2015 .gitignore Add functional tests May 14, 2015 .travis.yml Allow symfony 3.1 Jun 15, 2016 LICENSE added the initial set of files Feb 7, 2013 README.rst Allow symfony 3.1 Jun 15, 2016 WebProfilerServiceProvider.php Allow symfony 3.1 Jun 15, 2016 composer.json Allow symfony 3.1 Jun 15, 2016 phpunit.xml.dist Add functional tests May 14, 2015 README.rst Silex Web Profiler The Silex Web Profiler service provider allows you to use the wonderful Symfony web debug toolbar and the Symfony profiler in your Silex 2.x application. Note If you are using the 1.x Silex version, read the specific documentation. To install this library, run the command below and you will get the latest version: composer require 'silex/web-profiler:^2.0' And enable it in your application: use Silex\Provider;  $app->register(new Provider\WebProfilerServiceProvider(), array(     'profiler.cache_dir' => __DIR__.'/../cache/profiler',     'profiler.mount_prefix' => '/_profiler', // this is the default )); The provider depends on ServiceControllerServiceProvider, TwigServiceProvider, and HttpFragmentServiceProvider so you also need to enable those if that's not already the case: $app->register(new Provider\HttpFragmentServiceProvider()); $app->register(new Provider\ServiceControllerServiceProvider()); $app->register(new Provider\TwigServiceProvider()); If you are using FormServiceProvider, the WebProfilerServiceProvider will detect that and enable the corresponding panels. Make sure to register all other required or used service providers before WebProfilerServiceProvider. If you are using MonologServiceProvider for logs, you must also add symfony/monolog-bridge as a Composer dependency to get the logs in the profiler. If you are using VarDumperServiceProvider, add symfony/debug-bundle as a Composer dependency to display VarDumper dumps in the toolbar and the profiler. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/silexphp/Silex-WebProfiler"	"A web debug toolbar for Silex."	"true"
"Micro Framework Extras"	"Slim Skeleton"	"https://github.com/slimphp/Slim-Skeleton"	"A skeleton for Slim."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"436"	"45"	"141"	"GitHub - slimphp/Slim-Skeleton: Slim Framework 3 skeleton application Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 45 Star 436 Fork 141 slimphp/Slim-Skeleton Code Issues 2 Pull requests 2 Pulse Graphs Slim Framework 3 skeleton application http://www.slimframework.com 42 commits 2 branches 11 releases 9 contributors PHP 59.9% HTML 31.3% ApacheConf 8.8% PHP HTML ApacheConf Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.x master Nothing to show 3.0.3 3.0.2 3.0.1 3.0.0 2.1.2 2.1.1 2.1.0 2.0.0 1.1.0 1.0.1 1.0.0 Nothing to show New pull request Latest commit e15e4c9 Jun 29, 2016 silentworks committed on GitHub Merge pull request #36 from akrabat/addcontentlengthheader-setting … Set addContentLengthHeader to false Permalink Failed to load latest commit information. logs Init import Jul 4, 2012 public updated static file handling for built-in PHP server Jun 5, 2016 src Set addContentLengthHeader to false Jun 29, 2016 templates Added doctype to index.phtml template Mar 11, 2016 .gitignore Update for Slim 3 with PHP-View. Nov 19, 2015 CONTRIBUTING.md Update for Slim 3 with PHP-View. Nov 19, 2015 README.md Update for Slim 3 with PHP-View. Nov 19, 2015 composer.json Use ^3.1 in composer.json Feb 4, 2016 README.md Slim Framework 3 Skeleton Application Use this skeleton application to quickly setup and start working on a new Slim Framework 3 application. This application uses the latest Slim 3 with the PHP-View template renderer. It also uses the Monolog logger. This skeleton application was built for Composer. This makes setting up a new Slim Framework application quick and easy. Install the Application Run this command from the directory in which you want to install your new Slim Framework application. php composer.phar create-project slim/slim-skeleton [my-app-name]  Replace [my-app-name] with the desired directory name for your new application. You'll want to: Point your virtual host document root to your new application's public/ directory. Ensure logs/ is web writeable. That's it! Now go build something cool. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/slimphp/Slim-Skeleton"	"A skeleton for Slim."	"true"
"Micro Framework Extras"	"Slim View"	"https://github.com/slimphp/Slim-Views"	"A collection of custom views for Slim."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"279"	"26"	"58"	"GitHub - slimphp/Slim-Views: Slim Framework custom views Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 279 Fork 58 slimphp/Slim-Views Code Issues 9 Pull requests 11 Pulse Graphs Slim Framework custom views 42 commits 2 branches 4 releases 5 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit 8561c78 Dec 9, 2014 silentworks Merge branch 'develop' Permalink Failed to load latest commit information. SmartyPlugins Added in currentUrl for Smarty and also added into the README Dec 9, 2014 README.md Added in currentUrl for Smarty and also added into the README Dec 9, 2014 Smarty.php Updated the version to 0.1.3 and updated the readme for composer install Dec 9, 2014 Twig.php Updated the version to 0.1.3 and updated the readme for composer install Dec 9, 2014 TwigExtension.php Updated the version to 0.1.3 and updated the readme for composer install Dec 9, 2014 composer.json Updated to use PSR-4 Dec 9, 2014 README.md Slim Views This repository contains custom View classes for the template frameworks listed below. You can use any of these custom View classes by either requiring the appropriate class in your Slim Framework bootstrap file and initialize your Slim application using an instance of the selected View class or using Composer (the recommended way). Slim Views only officially support the following views listed below. Smarty Twig How to Install using Composer Install in your project by running the following composer command: $ php composer require slim/views Smarty How to use <?php require 'vendor/autoload.php';  $app = new \Slim\Slim(array(     'view' => new \Slim\Views\Smarty() )); To use Smarty options do the following: $view = $app->view(); $view->parserDirectory = dirname(__FILE__) . 'smarty'; $view->parserCompileDirectory = dirname(__FILE__) . '/compiled'; $view->parserCacheDirectory = dirname(__FILE__) . '/cache'; Twig How to use <?php require 'vendor/autoload.php';  $app = new \Slim\Slim(array(     'view' => new \Slim\Views\Twig() )); To use Twig options do the following: $view = $app->view(); $view->parserOptions = array(     'debug' => true,     'cache' => dirname(__FILE__) . '/cache' ); In addition to all of this we also have a few helper functions which are included for both view parsers. In order to start using these you can add them to their respective view parser as stated below: Twig $view->parserExtensions = array(     new \Slim\Views\TwigExtension(), ); Smarty $view->parserExtensions = array(     dirname(__FILE__) . '/vendor/slim/views/Slim/Views/SmartyPlugins', ); These helpers are listed below. urlFor siteUrl baseUrl currentUrl urlFor Twig Inside your Twig template you would write: {{ urlFor('hello', {""name"": ""Josh"", ""age"": ""19""}) }}  You can easily pass variables that are objects or arrays by doing: <a href=""{{ urlFor('hello', {""name"": person.name, ""age"": person.age}) }}"">Hello {{ name }}</a>  If you need to specify the appname for the getInstance method in the urlFor functions, set it as the third parameter of the function in your template: <a href=""{{ urlFor('hello', {""name"": person.name, ""age"": person.age}, 'admin') }}"">Hello {{ name }}</a>  Smarty Inside your Smarty template you would write: {urlFor name=""hello"" options=""name.Josh|age.26""}  or with the new array syntax: {urlFor name=""hello"" options=[""name"" => ""Josh"", ""age"" => ""26""]}  You can easily pass variables that are arrays as normal or using the (.): <a href=""{urlFor name=""hello"" options=""name.{$person.name}|age.{$person.age}""}"">Hello {$name}</a>  If you need to specify the appname for the getInstance method in the urlFor functions, set the appname parameter in your function: <a href=""{urlFor name=""hello"" appname=""admin"" options=""name.{$person.name}|age.{$person.age}""}"">Hello {$name}</a>  siteUrl Twig Inside your Twig template you would write: {{ siteUrl('/about/me') }}  Smarty Inside your Smarty template you would write: {siteUrl url='/about/me'}  baseUrl Twig Inside your Twig template you would write: {{ baseUrl() }}  Smarty Inside your Smarty template you would write: {baseUrl}  currentUrl Twig Inside your Twig template you would write: {{ currentUrl() }}  Smarty Inside your Smarty template you would write: {currentUrl}  Authors Josh Lockhart Andrew Smith License MIT Public License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/slimphp/Slim-Views"	"A collection of custom views for Slim."	"true"
"Routers"	"Fast Route"	"https://github.com/nikic/FastRoute"	"A fast routing library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1738"	"129"	"150"	"GitHub - nikic/FastRoute: Fast request router for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 129 Star 1,738 Fork 150 nikic/FastRoute Code Issues 10 Pull requests 1 Pulse Graphs Fast request router for PHP 87 commits 1 branch 10 releases 22 contributors PHP 97.0% Hack 3.0% PHP Hack Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.1 v1.0.0 v0.8.0 v0.7.0 v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 8ea9281 May 29, 2016 yyinsomnia committed with nikic Use type-strict comparison Permalink Failed to load latest commit information. src Use type-strict comparison Jun 12, 2016 test Support placeholder starting with underscore May 20, 2016 .hhconfig Add .hhconfig file, fix bad interface references in hhi Dec 11, 2015 .travis.yml Add PHP 7 to Travis Feb 26, 2015 FastRoute.hhi use classname<T> for option parameters Dec 11, 2015 LICENSE Initial commit Feb 17, 2014 README.md Indicate minimal PHP version supported May 5, 2016 composer.json Delegate autoloading to composer Apr 12, 2014 phpunit.xml Fix windows newlines Feb 22, 2014 README.md FastRoute - Fast request router for PHP This library provides a fast implementation of a regular expression based router. Blog post explaining how the implementation works and why it is fast. Install To install with composer: composer require nikic/fast-route Requires PHP 5.4 or newer. Usage Here's a basic usage example: <?php  require '/path/to/vendor/autoload.php';  $dispatcher = FastRoute\simpleDispatcher(function(FastRoute\RouteCollector $r) {     $r->addRoute('GET', '/users', 'get_all_users_handler');     // {id} must be a number (\d+)     $r->addRoute('GET', '/user/{id:\d+}', 'get_user_handler');     // The /{title} suffix is optional     $r->addRoute('GET', '/articles/{id:\d+}[/{title}]', 'get_article_handler'); });  // Fetch method and URI from somewhere $httpMethod = $_SERVER['REQUEST_METHOD']; $uri = $_SERVER['REQUEST_URI'];  // Strip query string (?foo=bar) and decode URI if (false !== $pos = strpos($uri, '?')) {     $uri = substr($uri, 0, $pos); } $uri = rawurldecode($uri);  $routeInfo = $dispatcher->dispatch($httpMethod, $uri); switch ($routeInfo[0]) {     case FastRoute\Dispatcher::NOT_FOUND:         // ... 404 Not Found         break;     case FastRoute\Dispatcher::METHOD_NOT_ALLOWED:         $allowedMethods = $routeInfo[1];         // ... 405 Method Not Allowed         break;     case FastRoute\Dispatcher::FOUND:         $handler = $routeInfo[1];         $vars = $routeInfo[2];         // ... call $handler with $vars         break; } Defining routes The routes are defined by calling the FastRoute\simpleDispatcher() function, which accepts a callable taking a FastRoute\RouteCollector instance. The routes are added by calling addRoute() on the collector instance: $r->addRoute($method, $routePattern, $handler); The $method is an uppercase HTTP method string for which a certain route should match. It is possible to specify multiple valid methods using an array: // These two calls $r->addRoute('GET', '/test', 'handler'); $r->addRoute('POST', '/test', 'handler'); // Are equivalent to this one call $r->addRoute(['GET', 'POST'], '/test', 'handler'); By default the $routePattern uses a syntax where {foo} specifies a placeholder with name foo and matching the regex [^/]+. To adjust the pattern the placeholder matches, you can specify a custom pattern by writing {bar:[0-9]+}. Some examples: // Matches /user/42, but not /user/xyz $r->addRoute('GET', '/user/{id:\d+}', 'handler');  // Matches /user/foobar, but not /user/foo/bar $r->addRoute('GET', '/user/{name}', 'handler');  // Matches /user/foo/bar as well $r->addRoute('GET', '/user/{name:.+}', 'handler'); Custom patterns for route placeholders cannot use capturing groups. For example {lang:(en|de)} is not a valid placeholder, because () is a capturing group. Instead you can use either {lang:en|de} or {lang:(?:en|de)}. Furthermore parts of the route enclosed in [...] are considered optional, so that /foo[bar] will match both /foo and /foobar. Optional parts are only supported in a trailing position, not in the middle of a route. // This route $r->addRoute('GET', '/user/{id:\d+}[/{name}]', 'handler'); // Is equivalent to these two routes $r->addRoute('GET', '/user/{id:\d+}', 'handler'); $r->addRoute('GET', '/user/{id:\d+}/{name}', 'handler');  // Multiple nested optional parts are possible as well $r->addRoute('GET', '/user[/{id:\d+}[/{name}]]', 'handler');  // This route is NOT valid, because optional parts can only occur at the end $r->addRoute('GET', '/user[/{id:\d+}]/{name}', 'handler'); The $handler parameter does not necessarily have to be a callback, it could also be a controller class name or any other kind of data you wish to associate with the route. FastRoute only tells you which handler corresponds to your URI, how you interpret it is up to you. Caching The reason simpleDispatcher accepts a callback for defining the routes is to allow seamless caching. By using cachedDispatcher instead of simpleDispatcher you can cache the generated routing data and construct the dispatcher from the cached information: <?php  $dispatcher = FastRoute\cachedDispatcher(function(FastRoute\RouteCollector $r) {     $r->addRoute('GET', '/user/{name}/{id:[0-9]+}', 'handler0');     $r->addRoute('GET', '/user/{id:[0-9]+}', 'handler1');     $r->addRoute('GET', '/user/{name}', 'handler2'); }, [     'cacheFile' => __DIR__ . '/route.cache', /* required */     'cacheDisabled' => IS_DEBUG_ENABLED,     /* optional, enabled by default */ ]); The second parameter to the function is an options array, which can be used to specify the cache file location, among other things. Dispatching a URI A URI is dispatched by calling the dispatch() method of the created dispatcher. This method accepts the HTTP method and a URI. Getting those two bits of information (and normalizing them appropriately) is your job - this library is not bound to the PHP web SAPIs. The dispatch() method returns an array whose first element contains a status code. It is one of Dispatcher::NOT_FOUND, Dispatcher::METHOD_NOT_ALLOWED and Dispatcher::FOUND. For the method not allowed status the second array element contains a list of HTTP methods allowed for the supplied URI. For example: [FastRoute\Dispatcher::METHOD_NOT_ALLOWED, ['GET', 'POST']]  NOTE: The HTTP specification requires that a 405 Method Not Allowed response include the Allow: header to detail available methods for the requested resource. Applications using FastRoute should use the second array element to add this header when relaying a 405 response. For the found status the second array element is the handler that was associated with the route and the third array element is a dictionary of placeholder names to their values. For example: /* Routing against GET /user/nikic/42 */  [FastRoute\Dispatcher::FOUND, 'handler0', ['name' => 'nikic', 'id' => '42']]  Overriding the route parser and dispatcher The routing process makes use of three components: A route parser, a data generator and a dispatcher. The three components adhere to the following interfaces: <?php  namespace FastRoute;  interface RouteParser {     public function parse($route); }  interface DataGenerator {     public function addRoute($httpMethod, $routeData, $handler);     public function getData(); }  interface Dispatcher {     const NOT_FOUND = 0, FOUND = 1, METHOD_NOT_ALLOWED = 2;      public function dispatch($httpMethod, $uri); } The route parser takes a route pattern string and converts it into an array of route infos, where each route info is again an array of it's parts. The structure is best understood using an example: /* The route /user/{id:\d+}[/{name}] converts to the following array: */ [     [         '/user/',         ['id', '\d+'],     ],     [         '/user/',         ['id', '\d+'],         '/',         ['name', '[^/]+'],     ], ]  This array can then be passed to the addRoute() method of a data generator. After all routes have been added the getData() of the generator is invoked, which returns all the routing data required by the dispatcher. The format of this data is not further specified - it is tightly coupled to the corresponding dispatcher. The dispatcher accepts the routing data via a constructor and provides a dispatch() method, which you're already familiar with. The route parser can be overwritten individually (to make use of some different pattern syntax), however the data generator and dispatcher should always be changed as a pair, as the output from the former is tightly coupled to the input of the latter. The reason the generator and the dispatcher are separate is that only the latter is needed when using caching (as the output of the former is what is being cached.) When using the simpleDispatcher / cachedDispatcher functions from above the override happens through the options array: <?php  $dispatcher = FastRoute\simpleDispatcher(function(FastRoute\RouteCollector $r) {     /* ... */ }, [     'routeParser' => 'FastRoute\\RouteParser\\Std',     'dataGenerator' => 'FastRoute\\DataGenerator\\GroupCountBased',     'dispatcher' => 'FastRoute\\Dispatcher\\GroupCountBased', ]); The above options array corresponds to the defaults. By replacing GroupCountBased by GroupPosBased you could switch to a different dispatching strategy. A Note on HEAD Requests The HTTP spec requires servers to support both GET and HEAD methods: The methods GET and HEAD MUST be supported by all general-purpose servers To avoid forcing users to manually register HEAD routes for each resource we fallback to matching an available GET route for a given resource. The PHP web SAPI transparently removes the entity body from HEAD responses so this behavior has no effect on the vast majority of users. However, implementers using FastRoute outside the web SAPI environment (e.g. a custom server) MUST NOT send entity bodies generated in response to HEAD requests. If you are a non-SAPI user this is your responsibility; FastRoute has no purview to prevent you from breaking HTTP in such cases. Finally, note that applications MAY always specify their own HEAD method route for a given resource to bypass this behavior entirely. Credits This library is based on a router that Levi Morrison implemented for the Aerys server. A large number of tests, as well as HTTP compliance considerations, were provided by Daniel Lowrey. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nikic/FastRoute"	"A fast routing library."	"true"
"Routers"	"Klein"	"https://github.com/klein/klein.php"	"A flexible router."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1828"	"104"	"210"	"GitHub - klein/klein.php: A fast & flexible router Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 104 Star 1,828 Fork 210 klein/klein.php Code Issues 42 Pull requests 14 Wiki Pulse Graphs A fast & flexible router 726 commits 2 branches 16 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v2.1.0 v2.0.2 v2.0.1 v2.0.0 v1.2.0 v1.1.0 v1.0.0 v0.9.0 v0.8.0 v0.7.0 v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit eb80e09 Dec 15, 2014 Rican7 Merge pull request #273 from ivansky/patch-1 … Fix Readme `Sending objects / files` Permalink Failed to load latest commit information. src/Klein Cleaning some extraneous whitespace Nov 9, 2014 tests Rewind array after foreach by reference in DataCollectionTest Nov 22, 2014 .gitignore typo fixed. Oct 6, 2014 .travis.yml Adding HHVM to the PHP test versions, but allowing Jan 4, 2014 CHANGELOG.md PHPdoc mention? Nov 7, 2014 CONTRIBUTING.md More clarification Nov 6, 2014 LICENSE Adding an explicit LICENSE file Mar 27, 2013 README.md Fix Readme `Sending objects / files` Dec 16, 2014 UPGRADING.md Ironed out some details in the UPGRADING doc Nov 7, 2014 composer.json Update PHPUnit to 4.1.x Nov 24, 2014 phpdoc.dist.xml Updating the meta-files to point to the right targets Jun 23, 2013 phpunit.xml.dist Updating the meta-files to point to the right targets Jun 23, 2013 README.md Klein.php klein.php is a fast & flexible router for PHP 5.3+ Flexible regular expression routing (inspired by Sinatra) A set of boilerplate methods for rapidly building web apps Almost no overhead => 2500+ requests/second Getting started PHP 5.3.x is required Install Klein using Composer (recommended) or manually Setup URL rewriting so that all requests are handled by index.php (Optional) Throw in some APC for good measure Composer Installation Get Composer Require Klein with php composer.phar require klein/klein Add the following to your application's main PHP file: require 'vendor/autoload.php'; Example Hello World - Obligatory hello world example <?php require_once __DIR__ . '/vendor/autoload.php';  $klein = new \Klein\Klein();  $klein->respond('GET', '/hello-world', function () {     return 'Hello World!'; });  $klein->dispatch(); Example 1 - Respond to all requests $klein->respond(function () {     return 'All the things'; }); Example 2 - Named parameters $klein->respond('/[:name]', function ($request) {     return 'Hello ' . $request->name; }); Example 3 - So RESTful $klein->respond('GET', '/posts', $callback); $klein->respond('POST', '/posts', $callback); $klein->respond('PUT', '/posts/[i:id]', $callback); $klein->respond('DELETE', '/posts/[i:id]', $callback); $klein->respond('OPTIONS', null, $callback);  // To match multiple request methods: $klein->respond(array('POST','GET'), $route, $callback);  // Or you might want to handle the requests in the same place $klein->respond('/posts/[create|edit:action]?/[i:id]?', function ($request, $response) {     switch ($request->action) {         //     } }); Example 4 - Sending objects / files $klein->respond(function ($request, $response, $service) {     $service->xml = function ($object) {         // Custom xml output function     }     $service->csv = function ($object) {         // Custom csv output function     } });  $klein->respond('/report.[xml|csv|json:format]?', function ($request, $response, $service) {     // Get the format or fallback to JSON as the default     $send = $request->param('format', 'json');     $response->$send($report); });  $klein->respond('/report/latest', function ($request, $response, $service) {     $response->file('/tmp/cached_report.zip'); }); Example 5 - All together $klein->respond(function ($request, $response, $service, $app) use ($klein) {     // Handle exceptions => flash the message and redirect to the referrer     $klein->onError(function ($klein, $err_msg) {         $klein->service()->flash($err_msg);         $klein->service()->back();     });      // The fourth parameter can be used to share scope and global objects     $app->db = new PDO(...);      // $app also can store lazy services, e.g. if you don't want to     // instantiate a database connection on every response     $app->register('db', function() {         return new PDO(...);     }); });  $klein->respond('POST', '/users/[i:id]/edit', function ($request, $response, $service, $app) {     // Quickly validate input parameters     $service->validateParam('username', 'Please enter a valid username')->isLen(5, 64)->isChars('a-zA-Z0-9-');     $service->validateParam('password')->notNull();      $app->db->query(...); // etc.      // Add view properties and helper methods     $service->title = 'foo';     $service->escape = function ($str) {         return htmlentities($str); // Assign view helpers     };      $service->render('myview.phtml'); });  // myview.phtml: <title><?php echo $this->escape($this->title) ?></title> Route namespaces $klein->with('/users', function () use ($klein) {      $klein->respond('GET', '/?', function ($request, $response) {         // Show all users     });      $klein->respond('GET', '/[:id]', function ($request, $response) {         // Show a single user     });  });  foreach(array('projects', 'posts') as $controller) {     // Include all routes defined in a file under a given namespace     $klein->with(""/$controller"", ""controllers/$controller.php""); } Included files are run in the scope of Klein ($klein) so all Klein methods/properties can be accessed with $this Example file for: ""controllers/projects.php"" // Routes to ""/projects/?"" $this->respond('GET', '/?', function ($request, $response) {     // Show all projects }); Lazy services Services can be stored lazily, meaning that they are only instantiated on first use. <?php $klein->respond(function ($request, $response, $service, $app) {     $app->register('lazyDb', function() {         $db = new stdClass();         $db->name = 'foo';         return $db;     }); });  //Later  $klein->respond('GET', '/posts', function ($request, $response, $service, $app) {     // $db is initialised on first request     // all subsequent calls will use the same instance     return $app->lazyDb->name; }); Validators To add a custom validator use addValidator($method, $callback) $service->addValidator('hex', function ($str) {     return preg_match('/^[0-9a-f]++$/i', $str); }); You can validate parameters using is<$method>() or not<$method>(), e.g. $service->validateParam('key')->isHex(); Or you can validate any string using the same flow.. $service->validate($username)->isLen(4,16); Validation methods are chainable, and a custom exception message can be specified for if/when validation fails $service->validateParam('key', 'The key was invalid')->isHex()->isLen(32); Routing [ match_type : param_name ] Some examples *                    // Match all request URIs [i]                  // Match an integer [i:id]               // Match an integer as 'id' [a:action]           // Match alphanumeric characters as 'action' [h:key]              // Match hexadecimal characters as 'key' [:action]            // Match anything up to the next / or end of the URI as 'action' [create|edit:action] // Match either 'create' or 'edit' as 'action' [*]                  // Catch all (lazy) [*:trailing]         // Catch all as 'trailing' (lazy) [**:trailing]        // Catch all (possessive - will match the rest of the URI) .[:format]?          // Match an optional parameter 'format' - a / or . before the block is also optional  Some more complicated examples /posts/[*:title][i:id]     // Matches ""/posts/this-is-a-title-123"" /output.[xml|json:format]? // Matches ""/output"", ""output.xml"", ""output.json"" /[:controller]?/[:action]? // Matches the typical /controller/action format  Note - all routes that match the request URI are called - this allows you to incorporate complex conditional logic such as user authentication or view layouts. e.g. as a basic example, the following code will wrap other routes with a header and footer $klein->respond('*', function ($request, $response, $service) { $service->render('header.phtml'); }); //other routes $klein->respond('*', function ($request, $response, $service) { $service->render('footer.phtml'); }); Routes automatically match the entire request URI. If you need to match only a part of the request URI or use a custom regular expression, use the @ operator. If you need to negate a route, use the ! operator // Match all requests that end with '.json' or '.csv' $klein->respond('@\.(json|csv)$', ...  // Match all requests that _don't_ start with /admin $klein->respond('!@^/admin/', ... Views You can send properties or helpers to the view by assigning them to the $service object, or by using the second arg of $service->render() $service->escape = function ($str) {     return htmlentities($str); };  $service->render('myview.phtml', array('title' => 'My View'));  // Or just: $service->title = 'My View'; myview.phtml <title><?php echo $this->escape($this->title) ?></title> Views are compiled and run in the scope of $service so all service methods can be accessed with $this $this->render('partial.html')           // Render partials $this->sharedData()->get('myvar')       // Access stored service variables echo $this->query(array('page' => 2))   // Modify the current query string API Below is a list of the public methods in the common classes you will most likely use. For a more formal source of class/method documentation, please see the PHPdoc generated documentation. $request->     id($hash = true)                    // Get a unique ID for the request     paramsGet()                         // Return the GET parameter collection     paramsPost()                        // Return the POST parameter collection     paramsNamed()                       // Return the named parameter collection     cookies()                           // Return the cookies collection     server()                            // Return the server collection     headers()                           // Return the headers collection     files()                             // Return the files collection     body()                              // Get the request body     params()                            // Return all parameters     params($mask = null)                // Return all parameters that match the mask array - extract() friendly     param($key, $default = null)        // Get a request parameter (get, post, named)     isSecure()                          // Was the request sent via HTTPS?     ip()                                // Get the request IP     userAgent()                         // Get the request user agent     uri()                               // Get the request URI     pathname()                          // Get the request pathname     method()                            // Get the request method     method($method)                     // Check if the request method is $method, i.e. method('post') => true     query($key, $value = null)          // Get, add to, or modify the current query string     <param>                             // Get / Set (if assigned a value) a request parameter  $response->     protocolVersion($protocol_version = null)       // Get the protocol version, or set it to the passed value     body($body = null)                              // Get the response body's content, or set it to the passed value     status()                                        // Get the response's status object     headers()                                       // Return the headers collection     cookies()                                       // Return the cookies collection     code($code = null)                              // Return the HTTP response code, or set it to the passed value     prepend($content)                               // Prepend a string to the response body     append($content)                                // Append a string to the response body     isLocked()                                      // Check if the response is locked     requireUnlocked()                               // Require that a response is unlocked     lock()                                          // Lock the response from further modification     unlock()                                        // Unlock the response     sendHeaders($override = false)                  // Send the HTTP response headers     sendCookies($override = false)                  // Send the HTTP response cookies     sendBody()                                      // Send the response body's content     send()                                          // Send the response and lock it     isSent()                                        // Check if the response has been sent     chunk($str = null)                              // Enable response chunking (see the wiki)     header($key, $value = null)                     // Set a response header     cookie($key, $value = null, $expiry = null)     // Set a cookie     cookie($key, null)                              // Remove a cookie     noCache()                                       // Tell the browser not to cache the response     redirect($url, $code = 302)                     // Redirect to the specified URL     dump($obj)                                      // Dump an object     file($path, $filename = null)                   // Send a file     json($object, $jsonp_prefix = null)             // Send an object as JSON or JSONP by providing padding prefix  $service->     sharedData()                                    // Return the shared data collection     startSession()                                  // Start a session and return its ID     flash($msg, $type = 'info', $params = array()   // Set a flash message     flashes($type = null)                           // Retrieve and clears all flashes of $type     markdown($str, $args, ...)                      // Return a string formatted with markdown     escape($str)                                    // Escape a string     refresh()                                       // Redirect to the current URL     back()                                          // Redirect to the referer     query($key, $value = null)                      // Modify the current query string     query($arr)     layout($layout)                                 // Set the view layout     yieldView()                                     // Call inside the layout to render the view content     render($view, $data = array())                  // Render a view or partial (in the scope of $response)     partial($view, $data = array())                 // Render a partial without a layout (in the scope of $response)     addValidator($method, $callback)                // Add a custom validator method     validate($string, $err = null)                  // Validate a string (with a custom error message)     validateParam($param, $err = null)                  // Validate a param     <callback>($arg1, ...)                          // Call a user-defined helper     <property>                                      // Get a user-defined property  $app->     <callback>($arg1, ...)                          //Call a user-defined helper  $validator->     notNull()                           // The string must not be null     isLen($length)                      // The string must be the exact length     isLen($min, $max)                   // The string must be between $min and $max length (inclusive)     isInt()                             // Check for a valid integer     isFloat()                           // Check for a valid float/decimal     isEmail()                           // Check for a valid email     isUrl()                             // Check for a valid URL     isIp()                              // Check for a valid IP     isAlpha()                           // Check for a-z (case insensitive)     isAlnum()                           // Check for alphanumeric characters     contains($needle)                   // Check if the string contains $needle     isChars($chars)                     // Validate against a character list     isRegex($pattern, $modifiers = '')  // Validate against a regular expression     notRegex($pattern, $modifiers ='')     is<Validator>()                     // Validate against a custom validator     not<Validator>()                    // The validator can't match     <Validator>()                       // Alias for is<Validator>() Unit Testing Unit tests are a crucial part of developing a routing engine such as Klein. Added features or bug-fixes can have adverse effects that are hard to find without a lot of testing, hence the importance of unit testing. This project uses PHPUnit as its unit testing framework. The tests all live in /tests and each test extends an abstract class AbstractKleinTest To test the project, simply run php composer.phar install --dev to download a common version of PHPUnit with composer and run the tests from the main directory with ./vendor/bin/phpunit Contributing See the contributing guide for more info More information See the wiki for more information Contributors Trevor N. Suarez License (MIT License) Copyright (c) 2010 Chris O'Hara cohara87@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/klein/klein.php"	"A flexible router."	"true"
"Routers"	"Pux"	"https://github.com/c9s/Pux"	"Another fast routing library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1175"	"90"	"80"	"GitHub - c9s/Pux: Pux is a fast PHP Router and includes out-of-box controller tools Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 90 Star 1,175 Fork 80 c9s/Pux Code Issues 17 Pull requests 0 Pulse Graphs Pux is a fast PHP Router and includes out-of-box controller tools 694 commits 7 branches 18 releases 8 contributors C 81.0% PHP 18.1% Shell 0.9% C PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 1.6 Switch branches/tags Branches Tags 1.6 develop feature/restful gh-pages master middleware r3 Nothing to show 2.0.0 1.6.1 1.6.0 1.5.2 1.5.1 1.5.0 1.4.1 1.4.0 1.3.3 1.3.2 1.3.1 1.3.0 1.2.0 1.1.4 1.1.3 1.1.2 1.1.1 1.0.0 Nothing to show New pull request Latest commit 69882d3 Jan 27, 2016 c9s Merge pull request #102 from Doelia/1.6 … Fix HTTPS conditon Permalink Failed to load latest commit information. benchmarks Rename Jan 7, 2014 bin Project rename Jan 7, 2014 eg use php5.3 array for compatibility Mar 15, 2014 ext fix memory leak Oct 25, 2014 scripts Rename Jan 6, 2014 src/Pux Fix HTTPS conditon Jan 25, 2016 test Remove necessary assertions Aug 17, 2015 .gitignore Add .gitignore file Feb 19, 2014 .travis.yml Fix coding style Aug 17, 2015 CHANGES.md Update 1.5.0 change logs May 26, 2014 CONTRIBUTORS.md added contributors file Feb 18, 2014 LICENSE Add LICENSE Jan 11, 2014 README.md Update description Aug 17, 2015 composer.json Checking in changes prior to tagging of version 1.6.1. Aug 24, 2015 phprelease.ini include compile script in phprelease.ini Jan 15, 2014 phpunit.xml Improve phpunit.xml test suites Aug 17, 2015 pux Checking in changes prior to tagging of version 1.6.1. Aug 24, 2015 README.md Pux Pux is a simple & fast PHP router. Pux is 48.5x faster than symfony router in static route dispatching, 31x faster in regular expression dispatching. (with pux extension installed) (Benchmark code and details here https://github.com/c9s/router-benchmark/blob/master/code) Pux tries not to consume computation time to build all routes dynamically (like Symfony/Routing, although the RouteCompiler of Symfony/Routing caches the compiled patterns, but there are still a lot of function call and class loading from your application code. however, function calls are pretty slow in PHP). Why It's Faster Pux uses simpler data structure (indexed array) to store the patterns and flags. (In PHP internals, zend_hash_index_find is faster than zend_hash_find). When matching routes, symfony uses a lot of function calls for each route: https://github.com/symfony/Routing/blob/master/Matcher/UrlMatcher.php#L124 Pux fetches the pattern from an indexed-array: https://github.com/c9s/Pux/blob/master/src/Pux/Mux.php#L189 Even you enabled APC or other bytecode cache extension, you are still calling methods and functions in the runtime. Pux reduces the route building to one static method call. __set_state. Pux separates static routes and dynamic routes automatically, Pux uses hash table to look up static routes without looping the whole route array. Pux\Mux is written in C extension, method calls are faster! With C extension, there is no class loading overhead. Pux compiles your routes to plain PHP array, the compiled routes can be loaded very fast. you don't need to call functions to register your routes before using it. Why It's Here Most of us use a lot of machines to run our applications, however, it uses too much energy and too many resources. By using Pux, you can also decrease your expense of servers on cloud. Also we believe that running softwares on slower machines should be easy as possible. Some people thinks routing is not the bottleneck, the truth is this project does not claim routing is the bottleneck. Actually the bottleneck is always different in different applications, if you have a lot of heavy db requests, then your bottleneck is your db; if you have a lot of complex computation, then the bottleneck should be your algorithm. You might start wondering since the bottleneck is not routing, why do we implement route dispatcher in C extension? The answer is simple, if you put a pure PHP routing component with some empty callbacks and use apache benchmark tool to see how many requests you can handle per second, you will find out the routing component consumes a lot of computation time and the request number will decrease quite a few. (and it does nothing, all it does is ... just routing!) So Pux reduces the overheads of loading PHP classes and the runtime method/function calls, and you can run your application faster without the overheads. Features Zero dependency. Low memory footprint (only 6KB with simple routes and extension installed) . High performance of dispatching routes. PCRE pattern path support. (Sinatra-style syntax) Request method condition support. Domain condition support. HTTPS condition support. Controller auto-mounting - you mount a controller automatically without specifying paths for each action. Controller annotation support - you may override the default path from controller through the annotations. Route with optional pattern. Pros & Cons of Grouped Pattern Matching Strategy An idea of matching routes is to combine all patterns into one pattern and compare the given path with pcre_match in one time. However this approach does not work if you have optional group or named capturing group, the pcre_match can not return detailed information about what pattern is matched if you use one of them. And since you compile all patterns into one, you can't compare with other same patterns with different conditions, for example: /users  # GET /users  # POST /users  # with HTTP_HOST=somedomain  The trade off in Pux is to compare routes in sequence because the same pattern might be in different HTTP method or different host name. The best approach is to merge & compile the regexp patterns into a FSM (Finite state machine), complex conditions can also be merged into this FSM, and let this FSM to dispatch routes. And this is the long-term target of Pux. Routing Path Format Static route: /post  PCRE route: /post/:id                  => matches /post/33  PCRE route with optional pattern: /post/:id(/:title)         => matches /post/33, /post/33/post%20title /post/:id(\.:format)       => matches /post/33, /post/33.json .. /post/33.xml  Requirement PHP 5.4.x PHP 5.5.x Installation You can install Pux with composer by defining the following requirement in your composer.json: {     ""require"": {         ""corneltek/pux"": ""~1.5""     } } Install Extension To install pux extension to boost the performance: git clone https://github.com/c9s/Pux.git cd Pux/ext phpize ./configure make && make install Or you can configure the optimization flag to gain more when running configure command.: CFLAGS=""-O3"" ./configure Then setup your php.ini config to load pux extension: extension=pux.so Synopsis The routing usage is dead simple: require 'vendor/autoload.php'; // use PCRE patterns you need Pux\PatternCompiler class. use Pux\Executor;  class ProductController {     public function listAction() {         return 'product list';     }     public function itemAction($id) {          return ""product $id"";     } } $mux = new Pux\Mux; $mux->any('/product', ['ProductController','listAction']); $mux->get('/product/:id', ['ProductController','itemAction'] , [     'require' => [ 'id' => '\d+', ],     'default' => [ 'id' => '1', ] ]); $mux->post('/product/:id', ['ProductController','updateAction'] , [     'require' => [ 'id' => '\d+', ],     'default' => [ 'id' => '1', ] ]); $mux->delete('/product/:id', ['ProductController','deleteAction'] , [     'require' => [ 'id' => '\d+', ],     'default' => [ 'id' => '1', ] ]); $route = $mux->dispatch('/product/1'); Executor::execute($route); Examples Basic Example require 'vendor/autoload.php'; use Pux\Mux; use Pux\Executor; $mux = new Mux; $mux->get('/get', ['HelloController','helloAction']); $mux->post('/post', ['HelloController','helloAction']); $mux->put('/put', ['HelloController','helloAction']);  $mux->mount('/hello', new HelloController);  $route = $mux->dispatch( $_SERVER['PATH_INFO'] ); echo Executor::execute($route); Through Compiled Mux Define your routing definition in routes.php: require 'vendor/autoload.php'; use Pux\Mux; $mux = new Mux; $mux->get('/get', ['HelloController','helloAction']); return $mux; Run pux command to compile your routing definition: curl -O https://raw.github.com/c9s/Pux/master/pux chmod +x pux pux compile -o mux.php routes.php Load the mux object from your application code: require 'vendor/autoload.php'; $mux = require 'mux.php'; $route = $mux->dispatch( $_SERVER['PATH_INFO'] ); echo Executor::execute($route); Please note that if you need PCRE pattern support for route, you must load Pux/PatternCompiler.php before you use. Mux Mux is where you define your routes, and you can mount multiple mux to a parent one. $mainMux = new Mux; $mainMux->expand = true;  $pageMux = new Mux; $pageMux->add('/page1', [ 'PageController', 'page1' ]); $pageMux->add('/page2', [ 'PageController', 'page2' ]);  // short-hand syntax $pageMux->add('/page2', 'PageController:page2'  );  $mainMux->mount('/sub', $pageMux);  foreach( ['/sub/page1', '/sub/page2'] as $p ) {     $r = $mainMux->dispatch($p);     ok($r, ""Matched route for $p""); } The expand option means whether to expand/merge submux routes to the parent mux. When expand is enabled, it improves dispatch performance when you have a lot of sub mux to dispatch. Methods Mux->add( {path}, {callback array or callable object}, { route options }) Mux->post( {path}, {callback array or callable object}, { route options }) Mux->get( {path}, {callback array or callable object}, { route options }) Mux->put( {path}, {callback array or callable object}, { route options }) Mux->any( {path}, {callback array or callable object}, { route options }) Mux->delete( {path}, {callback array or callable object}, { route options }) Mux->mount( {path}, {mux object}, { route options }) Mux->length() returns length of routes. Mux->export() returns Mux constructor via __set_state static method in php code. Mux->dispatch({path}) dispatch path and return matched route. Mux->getRoutes() returns routes array. Mux::__set_state({object member array}) constructs and returns a Mux object. Sorting routes You need to sort routes when not using compiled routes, it's because pux sorts longer path to front: $pageMux = new Mux; $pageMux->add('/', [ 'PageController', 'page1' ]); $pageMux->add('/pa', [ 'PageController', 'page1' ]); $pageMux->add('/page', [ 'PageController', 'page1' ]); $pageMux->sort(); This sorts routes to: /page /pa /  So pux first compares /page, /pa, than /. Different String Comparison Strategies When expand is enabled, the pattern comparison strategy for strings will match the full string. When expand is disabled, the pattern comparison strategy for strings will match the prefix. APCDispatcher Although Pux\Mux is already fast, you can still add APCDispatcher to boost the performance, which is to avoid re-lookup route. This is pretty useful when you have a lot of PCRE routes. use Pux\Dispatcher\APCDispatcher; $dispatcher = new APCDispatcher($mux, array(     'namespace' => 'app_',     'expiry' => ..., )); $route = $dispatcher->dispatch('/request/uri'); var_dump($route);  Persistent Dispatcher Rather than reload the mux object from php file everytime (or load from APC), there still a lot of overhead. Pux provides a persistent way to dispatch your route and keep the routes array in the persistent memory: $r = pux_persistent_dispatch('hello', 'hello_mux.php', '/hello'); Please note that the hello_mux.php must be a compiled mux PHP file. The pux_persistent_dispatch is only available in extension. NOTE: persistent dispatching is still in beta status. Controller Pux provides the ability to map your controller methods to paths automatically, done either through a simple, fast controller in the C extension or its pure PHP counterpart: class ProductController extends \Pux\Controller {     // translate to path """"     public function indexAction() { }      // translate to path ""/add""     public function addAction() { }      // translate to path ""/del""     public function delAction() { } }  $mux = new Pux\Mux; $submux = $controller->expand(); $mux->mount( '/product' , $submux );  // or even simpler $mux->mount( '/product' , $controller);  $mux->dispatch('/product');       // ProductController->indexAction $mux->dispatch('/product/add');   // ProductController->addAction $mux->dispatch('/product/del');   // ProductController->delAction You can also use @Route and @Method annotations to override the default \Pux\Controller::expand() functionality: class ProductController extends \Pux\Controller {     /**  * @Route(""/all"")  * @Method(""GET"")  */     public function indexAction() {         // now available via GET /all only     }      /**  * @Route(""/create"")  * @Method(""POST"")  */     public function addAction() {         // now available via POST /create only     }      /**  * @Route(""/destroy"")  * @Method(""DELETE"")  */     public function delAction() {         // now available via DELETE /destroy only     } } This is especially helpful when you want to provide more specific or semantic (e.g., HTTP method-specific) actions. Note that by default, expanded controller routes will be available via any HTTP method - specifying @Method will restrict it to the provided method. Pux\Controller::expand() returns an instance of \Pux\Mux that contains the controller's methods mapped to URIs, intended to be mounted as a sub mux in another instance of \Pux\Mux. Route Executor Pux\Executor executes your route by creating the controller object, and calling the controller action method. Route executor take the returned route as its parameter, you simply pass the route to executor the controller and get the execution result. Here the simplest example of the usage: use Pux\Executor; $mux = new Pux\Mux; $mux->any('/product/:id', ['ProductController','itemAction']); $route = $mux->dispatch('/product/1'); $result = Executor::execute($route); You can also define the arguments to the controller's constructor method:  class ProductController extends Pux\Controller {     public function __construct($param1, $param2) {         // do something you want     }     public function itemAction($id) {         return ""Product $id"";     } }  use Pux\Executor; $mux = new Pux\Mux; $mux->any('/product/:id', ['ProductController','itemAction'], [      'constructor_args' => [ 'param1', 'param2' ], ]); $route = $mux->dispatch('/product/1'); $result = Executor::execute($route); // returns ""Product 1"" MuxCompiler In your route definition file hello_routes.php, you simply return the Mux object at the end of file: <?php // load your composer autoload if it's needed // require '../vendor/autoload.php'; use Pux\Mux; $mux = new Mux; $mux->get('/hello', ['HelloController','helloAction']); return $mux; Pux provides a command-line tool for you to compile your route definitions. pux compile -o hello_mux.php hello_routes.php  In your application, you may load the compiled mux (router) through only one line: <?php $mux = require ""hello_mux.php""; $route = $mux->dispatch('/hello'); This can be very very fast if you have pux extension installed. Dispatching Strategy There are two route dispatching strategies in Pux while Symfony/Routing only provides PCRE pattern matching: Plain string comparison. PCRE pattern comparison. You've already knew that PCRE pattern matching is slower than plain string comparison, although PHP PCRE caches the compiled patterns. The plain string comparison is designed for static routing paths, it improves the performance while you have a lot of simple routes. The PCRE pattern comparison is used when you have some dynamic routing paths, for example, you can put some place holders in your routing path, and pass these path arguments to your controller later. Pux sorts and compiles your routes to single cache file, it also uses longest matching so it sorts patterns by pattern length in descending order before compiling the routes to cache. Pux uses indexed array as the data structure for storing route information so it's faster. Benchmarks Testing with route dispatch only. (no controller) Hardware: iMac Mid 2011 Processor 2.5 GHz Intel Core i5 Memory 12 GB 1333 MHz DDR3 Software OS X 10.9.1 (13B42) Environment: PHP 5.5.6 + APC Dispatch Speed With one static route: n=10000 Running pux extension (dispatch) - . 97487.768426386/s Running symfony/routing (dispatch) - . 2456.3512428418/s                                  Rate   Mem pux extension (dispatch) symfony/routing (dispatch)   pux extension (dispatch)  97.49K/s    0B                       --                        -2% symfony/routing (dispatch)   2.46K/s  524K                    3968%                         --   ================================== Bar Chart ==================================      pux extension (dispatch)  97.49K/s | ████████████████████████████████████████████████████████████  |   symfony/routing (dispatch)   2.46K/s | █                                                             |   ============================== System Information ==============================  PHP Version: 5.5.6 CPU Brand String: Intel(R) Core(TM) i5-3427U CPU @ 1.80GHz  With XDebug Extension.  With one pcre route: n=5000 Running pux extension (dispatch) - . 68264.888935184/s Running symfony/routing (dispatch) - . 2245.5539220463/s                                  Rate   Mem pux extension (dispatch) symfony/routing (dispatch)   pux extension (dispatch)  68.26K/s    3M                       --                        -3% symfony/routing (dispatch)   2.25K/s  786K                    3040%                         --   ================================== Bar Chart ==================================      pux extension (dispatch)  68.26K/s | ████████████████████████████████████████████████████████████  |   symfony/routing (dispatch)   2.25K/s | █                                                             |   ============================== System Information ==============================  PHP Version: 5.5.6 CPU Brand String: Intel(R) Core(TM) i5-3427U CPU @ 1.80GHz  Compare to other PHP routers (test code: https://github.com/c9s/router-benchmark/blob/master/code/dispatch.php ): n=10000 Runing php array - . 138796.45654569/s Runing pux - . 124982.98519026/s Runing klein - . 1801.5070399717/s Runing ham - . 13566.734991391/s Runing aura - . 39657.986477172/s Runing symfony/routing - . 1934.2415677861/s                       Rate   Mem php array pux aura ham symfony/routing klein       php array  138.8K/s    0B        ---90% -28% -9%             -1%   -1%             pux 124.98K/s    0B      111%  -- -31%-10%             -1%   -1%            aura  39.66K/s    0B      349%315%   ---34%             -4%   -4%             ham  13.57K/s    0B     1023%921% 292%  --            -14%  -13% symfony/routing   1.93K/s  786K     7175%6461%2050%701%              --  -93%           klein    1.8K/s  262K     7704%6937%2201%753%            107%    --   ================================== Bar Chart ==================================          php array  138.8K/s | ████████████████████████████████████████████████████████████  |               pux 124.98K/s | ██████████████████████████████████████████████████████        |              aura  39.66K/s | █████████████████                                             |               ham  13.57K/s | █████                                                         |   symfony/routing   1.93K/s |                                                               |             klein    1.8K/s |                                                               |   ============================== System Information ==============================  PHP Version: 5.5.6 CPU Brand String: Intel(R) Core(TM) i5-3427U CPU @ 1.80GHz  With XDebug Extension.  Through Apache Please see benchmark details here: https://github.com/c9s/router-benchmark Contributing Hacking Pux C extension: Discuss your main idea on GitHub issue page. Fork this project and open a branch for your hack. Development Cycle: cd ext ./compile ... hack hack hack ...  # compile and run phpunit test ./compile && ./test -- --debug tests/Pux/MuxTest.php  # use lldb to debug extension code ./compile && ./test -l -- tests/Pux/MuxTest.php  # use gdb to debug extension code ./compile && ./test -g -- tests/Pux/MuxTest.php  Commit! Send pull request and describe what you've done and what is changed. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/c9s/Pux"	"Another fast routing library."	"true"
"Routers"	"Route"	"https://github.com/thephpleague/route"	"A routing library built on top of Fast Route."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"219"	"21"	"41"	"GitHub - thephpleague/route: Fast router and dispatcher built on top of FastRoute Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 219 Fork 41 thephpleague/route Code Issues 0 Pull requests 3 Pulse Graphs Fast router and dispatcher built on top of FastRoute http://route.thephpleague.com 176 commits 7 branches 9 releases 16 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x 2.x decorators gh-pages-v1 gh-pages-v2 gh-pages master Nothing to show 2.0.0 2.0.0-RC1 1.2.3 1.2.2 1.2.1 1.2.0 1.1.0 1.0.1 1.0.0 Nothing to show New pull request Latest commit f5bdea7 Apr 13, 2016 philipobenito Merge pull request #118 from GrahamCampbell/patch-1 … Don't need branch alises here Permalink Failed to load latest commit information. src Merge remote-tracking branch 'origin/middleware' into middleware Apr 11, 2016 tests Updated collection and dispatcher tests Apr 12, 2016 .gitattributes Merge from Orno\Route to League\Route, git history before this point at Jan 12, 2015 .gitignore Merge from Orno\Route to League\Route, git history before this point at Jan 12, 2015 .scrutinizer.yml Increase timeout for scrutinizer code coverage report Feb 27, 2015 .travis.yml Remove hhvm completely as not officially supported Sep 23, 2015 CHANGELOG.md Changelog and Readme updates Mar 8, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Jan 5, 2016 LICENSE.md Prep for v2.0.0 Mar 11, 2016 README.md Update README.md Mar 13, 2016 composer.json Don't need branch alises here Apr 13, 2016 phpunit.xml.dist Merge from Orno\Route to League\Route, git history before this point at Jan 12, 2015 README.md Route This package is compliant with PSR-1, PSR-2, PSR-4 and PSR-7. If you notice compliance oversights, please send a patch via pull request. Install Via Composer $ composer require league/route Requirements The following versions of PHP are supported by this version. PHP 5.4 PHP 5.5 PHP 5.6 PHP 7 Documentation Route has full documentation, powered by Jekyll. Contribute to this documentation in the gh-pages branch. Testing $ vendor/bin/phpunit Contributing Please see CONTRIBUTING for details. Credits Phil Bennett Nikita Popov (FastRoute) All Contributors All Orno\Route contributions can be found here. License The MIT License (MIT). Please see License File for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/route"	"A routing library built on top of Fast Route."	"true"
"Templating"	"Foil"	"https://github.com/FoilPHP/Foil"	"Another native PHP templating library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"94"	"17"	"14"	"GitHub - FoilPHP/Foil: PHP template engine for native PHP templates Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 94 Fork 14 FoilPHP/Foil Code Issues 4 Pull requests 0 Pulse Graphs PHP template engine for native PHP templates http://www.foilphp.it/ 188 commits 4 branches 18 releases 6 contributors PHP 99.0% HTML 1.0% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev gh-pages issue-37 master Nothing to show 0.6.6 0.6.5 0.6.4 0.6.3 0.6.2 0.6.1 0.6.0 0.5.1 0.5.0 0.4.3 0.4.2 0.4.1 0.4.0 0.3.0 0.2.0 0.1.4 0.1.3 0.1.2 Nothing to show New pull request Latest commit 1838c31 Mar 13, 2016 Giuseppe-Mazzapica Introduce clear() to empty a layout section Permalink Failed to load latest commit information. docs fix documentation example May 11, 2016 inc Formatting Oct 21, 2015 src Introduce clear() to empty a layout section May 27, 2016 tests Introduce clear() to empty a layout section May 26, 2016 .gitattributes Set all files to unix eol Feb 22, 2016 .gitignore remove non needed blank lines from .gitignore Mar 6, 2016 .travis.yml Update .travis.yml Dec 16, 2015 LICENSE Update LICENSE Feb 1, 2015 README.md Readme shields changes Nov 1, 2015 composer.json Update phpunit version Nov 1, 2015 composer.lock Update dependencies in lock file Nov 1, 2015 phpunit.xml.dist Update phpunit version Nov 1, 2015 README.md FOIL PHP template engine, for PHP templates. Foil brings all the flexibility and power of modern template engines to native PHP templates. Write simple, clean and concise templates with nothing more than PHP. Key Features Templates inheritance (you'll never miss Twig or Blade) Clean, concise and DRY templates Dozen of ready-made helper functions and filters Easily extensible and customizable Multiple template folders with file auto-discover or custom picking Auto or manual data escape Powerful context API (preassign data to templates using conditions) Framework agnostic, centralized API for very easy integration Composer ready, fully unit and functional tested, PSR-1/2/4 compliant ...and many more Why? Templates engines like Twig, or Blade are a great thing, really. However, to use them one needs to learn another language with its own syntax and rules. Moreover, using compiled engines to use even a simple PHP function one needs to write engine extension. On its side, PHP is already a templating language, but honestly it's not a good one, because it's missing pivotal features of modern template engines, like template inheritance. Why not Plates? Then I discovered Plates, and it was love at first sight. But, you know, that kind of love rarely lasts a lifetime. Trying to do something serious with Plates, I encountered several problems which I had not when using compiled template engines. I wrote a blog post to explain why I am not happy with Plates anymore and so I decided to write Foil. Requirements Foil is framework agnostic, only thing needed is PHP 5.4+ and Composer to add Foil to you PHP project. Backward Incompatibility Notice Foil version 0.6 introduced backward incompatibility changes. Internal objects mechanism changed a lot, but core features and especially template functions were not affected. Please see v0.6 release notes to know more on the topic. License Foil is open source and released under MIT license. See LICENSE file for more info. Question? Issues? Foil is hosted on GitHub. Feel free to open issues there for suggestions, questions and real issues. Who's Behind Foil I'm Giuseppe, I deal with PHP since 2005. For questions, rants or chat ping me on Twitter (@gmazzap) or on ""The Loop"" (Stack Exchange) chat. Well, it's possible I'll ignore rants. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/FoilPHP/Foil"	"Another native PHP templating library."	"true"
"Templating"	"Lex"	"https://github.com/pyrocms/lex"	"A lightweight template parser."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"80"	"17"	"20"	"GitHub - pyrocms/lex: A lightweight template parser used by PyroCMS. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 80 Fork 20 pyrocms/lex Code Issues 4 Pull requests 0 Pulse Graphs A lightweight template parser used by PyroCMS. 149 commits 2 branches 12 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show 2.3.2 2.3.1 2.3.0 2.2.3 2.2.2 2.2.1 2.2.0 2.1.0 2.0.3 2.0.2 2.0.1 2.0.0 Nothing to show New pull request Latest commit af587bc Aug 14, 2014 philsturgeon Merge pull request #16 from Nyholm/patch-1 … Added PHP 5.6 and HHVM to travis.yml Permalink Failed to load latest commit information. lib/Lex Convert objects to arrays at beginning of parser(). Bring back PHP 5.… Feb 6, 2014 tests Add various tests for to assert the toArray() method. All passed. Jan 30, 2014 .gitignore Updated gitignore Sep 25, 2012 .travis.yml Added PHP 5.6 and HHVM to travis.yml Aug 14, 2014 README.md Convert objects to arrays at beginning of parser(). Bring back PHP 5.… Feb 7, 2014 composer.json Convert objects to arrays at beginning of parser(). Bring back PHP 5.… Feb 7, 2014 phpunit.xml Use composer as the autoloader for tests and other packages. Sep 25, 2012 README.md Lex Lex is a lightweight template parser. Lex is released under the MIT License and is Copyrighted 2011 - 2014 PyroCMS Team. Change Log 2.3.2 Convert objects with ->toArray() at the beginning of the parser() method only. As much as we want to say goodbye to PHP 5.3, we brought it back for now. 2.3.1 Added an ArrayableInterface that automatically converts objects to arrays. This allows an opportunity to define how an object will be converted to an array by adding a ->toArray() method. Looped data is now checked if it is an array or if it implements \IteratorAggregate. This prevents ""invalid arguments in foreach"" errors while allowing arrays and Collection objects to be iterated. Dropped support for PHP 5.3 2.3.0 Added support for self-closing Callback Tags (e.g. {{ foo.bar /}} instead of {{ foo.bar }}{{ /foo.bar }}). Rolled back the change to make Callback Tags less greedy. Callback Tags are now greedy again. If you want to use both Single and Block tags in the same template, you must close the Single tags. 2.2.3 Fixes issue which caused all callbacks to be processed as single tags, even if they were a block. 2.2.2 Fixed #7 - Conditionals inside looped data tags now work as expected. 2.2.1 Changed injectNoparse to be static. 2.2.0 Fixed a test which was PHP 5.4 only. Added PHPUnit as a composer dev requirement. Added a Lex\ParsingException class which is thrown when a parsing exception occurs. 2.1.1 Fixed an issue where strings returned by callbacks inside a comparison conditional were being processed incorrectly, causing the conditional to always fail. 2.1.0 Undefined variables in a conditional now evaluate to NULL, so {{ if foo }} now works properly. Added the exists keyword. Added the not keyword. 2.0.3 Fixes composer autoloading. Moved classes into lib folder. 2.0.2 Fixed a bug introduced in 2.0.1 where NULL variables were not being displayed. 2.0.1 Fixed a bug where variables with a ""falsey"" (e.g. 0, ""0"", -1, etc.) value were not displayed. 2.0.0 All code now follows PSR-0, 1 and 2. Lex_Parser has been moved to the Lex namespace and renamed to Parser. Lex_Autoloader has been removed. It is now PSR-0 compliant. Added the support for {{ unless }} and {{ elseunless }}. Basic Usage Using Lex Lex is a Composer package named pyrocms/lex. To use it, simply add it to the require section of you composer.json file. {     ""require"": {         ""pyrocms/lex"": ""2.2.*""     } }  After adding Lex to your composer.json file, simply use the class as normal. $parser = new Lex\Parser();  Using Lex Basic parsing of a file: $parser = new Lex\Parser(); $template = $parser->parse(file_get_contents('template.lex'), $data);  You can also set the Scope Glue (see ""Scope Glue"" under Syntax below): $parser = new Lex\Parser(); $parser->scopeGlue(':'); $template = $parser->parse(file_get_contents('template.lex'), $data);  To allow noparse extractions to accumulate so they don't get parsed by a later call to the parser set cumulativeNoparse to true: $parser = new Lex\Parser(); $parser->cumulativeNoparse(true); $template = $parser->parse(file_get_contents('template.lex'), $data); // Second parse on the same text somewhere else in your app $template = $parser->parse($template, $data); // Now that all parsing is done we inject the contents between the {{ noparse }} tags back into the template text Lex\Parser::injectNoparse($template);  If you only want to parse a data array and not worry about callback tags or comments, you can do use the parseVariables() method: $parser = new Lex\Parser(); $template = $parser->parseVariables(file_get_contents('template.lex'), $data);  PHP in Templates By default PHP is encoded, and not executed. This is for security reasons. However, you may at times want to enable it. To do that simply send true as the fourth parameter to your parse() call. $parser = new Lex\Parser(); $template = $parser->parse(file_get_contents('template.lex'), $data, $callback, true);  Syntax General All Lex code is delimeted by double curly braces ({{ }}). These delimeters were chosen to reduce the chance of conflicts with JavaScript and CSS. Here is an example of some Lex template code: Hello, {{name}}  Scope Glue Scope Glue is/are the character(s) used by Lex to trigger a scope change. A scope change is what happens when, for instance, you are accessing a nested variable inside and array/object, or when scoping a custom callback tag. By default a dot (.) is used as the Scope Glue, although you can select any character(s). Setting Scope Glue $parser->scopeGlue(':');  Whitespace Whitespace before or after the delimeters is allowed, however, in certain cases, whitespace within the tag is prohibited (explained in the following sections). Some valid examples: {{ name }} {{name }} {{ name}} {{  name  }} {{   name }}  Some invalid examples: {{ na me }} { {name} }  Comments You can add comments to your templates by wrapping the text in {{# #}}. Example {{# This will not be parsed or shown in the resulting HTML #}}  {{#     They can be multi-line too. #}}  Prevent Parsing You can prevent the parser from parsing blocks of code by wrapping it in {{ noparse }}{{ /noparse }} tags. Example {{ noparse }}     Hello, {{ name }}! {{ /noparse }}  Variable Tags When dealing with variables, you can: access single variables, access deeply nested variables inside arrays/objects, and loop over an array. You can even loop over nested arrays. Simple Variable Tags For our basic examples, lets assume you have the following array of variables (sent to the parser): array(     'title'     => 'Lex is Awesome!',     'name'      => 'World',     'real_name' => array(         'first' => 'Lex',         'last'  => 'Luther',     ) )  Basic Example: {{# Parsed: Hello, World! #}} Hello, {{ name }}!  {{# Parsed: <h1>Lex is Awesome!</h1> #}} <h1>{{ title }}</h1>  {{# Parsed: My real name is Lex Luther!</h1> #}} My real name is {{ real_name.first }} {{ real_name.last }}  The {{ real_name.first }} and {{ real_name.last }} tags check if real_name exists, then check if first and last respectively exist inside the real_name array/object then returns it. Looped Variable Tags Looped Variable tags are just like Simple Variable tags, except they correspond to an array of arrays/objects, which is looped over. A Looped Variable tag is a closed tag which wraps the looped content. The closing tag must match the opening tag exactly, except it must be prefixed with a forward slash (/). There can be no whitespace between the forward slash and the tag name (whitespace before the forward slash is allowed). Valid Example: {{ projects }} Some Content Here {{ /projects }}  Invalid Example: {{ projects }} Some Content Here {{/ projects }}  The looped content is what is contained between the opening and closing tags. This content is looped through and output for every item in the looped array. When in a Looped Tag you have access to any sub-variables for the current element in the loop. In the following example, let's assume you have the following array/object of variables: array(     'title'     => 'Current Projects',     'projects'  => array(         array(             'name' => 'Acme Site',             'assignees' => array(                 array('name' => 'Dan'),                 array('name' => 'Phil'),             ),         ),         array(             'name' => 'Lex',             'contributors' => array(                 array('name' => 'Dan'),                 array('name' => 'Ziggy'),                 array('name' => 'Jerel')             ),         ),     ), )  In the template, we will want to display the title, followed by a list of projects and their assignees. <h1>{{ title }}</h1> {{ projects }}     <h3>{{ name }}</h3>     <h4>Assignees</h4>     <ul>     {{ assignees }}         <li>{{ name }}</li>     {{ /assignees }}     </ul> {{ /projects }}  As you can see inside each project element we have access to that project's assignees. You can also see that you can loop over sub-values, exactly like you can any other array. Conditionals Conditionals in Lex are simple and easy to use. It allows for the standard if, elseif, and else but it also adds unless and elseunless. The unless and elseunless are the EXACT same as using {{ if ! (expression) }} and {{ elseif ! (expression) }} respectively. They are added as a nicer, more understandable syntax. All if blocks must be closed with the {{ endif }} tag. Variables inside of if Conditionals, do not, and should not, use the Tag delimeters (it will cause wierd issues with your output). A Conditional can contain any Comparison Operators you would do in PHP (==, !=, ===, !==, >, <, <=, >=). You can also use any of the Logical Operators (!, not, ||, &&, and, or). Examples {{ if show_name }}     <p>My name is {{real_name.first}} {{real_name.last}}</p> {{ endif }}  {{ if user.group == 'admin' }}     <p>You are an Admin!</p> {{ elseif user.group == 'user' }}     <p>You are a normal User.</p> {{ else }}     <p>I don't know what you are.</p> {{ endif }}  {{ if show_real_name }}     <p>My name is {{real_name.first}} {{real_name.last}}</p> {{ else }}     <p>My name is John Doe</p> {{ endif }}  {{ unless age > 21 }}     <p>You are to young.</p> {{ elseunless age < 80 }}     <p>You are to old...it'll kill ya!</p> {{ else }}     <p>Go ahead and drink!</p> {{ endif }}  The not Operator The not operator is equivilent to using the ! operator. They are completely interchangable (in-fact not is translated to ! prior to compilation). Undefined Variables in Conditionals Undefined variables in conditionals are evaluated to null. This means you can do things like {{ if foo }} and not have to worry if the variable is defined or not. Checking if a Variable Exists To check if a variable exists in a conditional, you use the exists keyword. Examples {{ if exists foo }}     Foo Exists {{ elseif not exists foo }}     Foo Does Not Exist {{ endif }}  You can also combine it with other conditions: {{ if exists foo and foo !== 'bar' }}     Something here {{ endif }}  The expression exists foo evaluates to either true or false. Therefore something like this works as well: {{ if exists foo == false }} {{ endif }}  Callback Tags in Conditionals Using a callback tag in a conditional is simple. Use it just like any other variable except for one exception. When you need to provide attributes for the callback tag, you are required to surround the tag with a single set of braces (you can optionally use them for all callback tags). Note: When using braces inside of a conditional there CANNOT be any whitespace after the opening brace, or before the closing brace of the callback tag within the conditional. Doing so will result in errors. Examples {{ if user.logged_in }} {{ endif }}  {{ if user.logged_in and {user.is_group group=""admin""} }} {{ endif }}  Callback Tags Callback tags allow you to have tags with attributes that get sent through a callback. This makes it easy to create a nice plugin system. Here is an example {{ template.partial name=""navigation"" }}  You can also close the tag to make it a Callback Block: {{ template.partial name=""navigation"" }} {{ /template.partial }}  Note that attributes are not required. When no attributes are given, the tag will first be checked to see if it is a data variable, and then execute it as a callback. {{ template.partial }}  The Callback The callback can be any valid PHP callable. It is sent to the parse() method as the third parameter: $parser->parse(file_get_contents('template.lex'), $data, 'my_callback');  The callback must accept the 3 parameters below (in this order): $name - The name of the callback tag (it would be ""template.partial"" in the above examples) $attributes - An associative array of the attributes set $content - If it the tag is a block tag, it will be the content contained, else a blank string  The callback must also return a string, which will replace the tag in the content. Example function my_callback($name, $attributes, $content) {     // Do something useful     return $result; }  Closing Callback Tags If a Callback Tag can be used in single or block form, then when using it in it's singular form, it must be closed (just like HTML). Example {{ foo.bar.baz }}{{ /foo.bar.baz }}  {{ foo.bar.baz }}     Content {{ /foo.bar.baz }}  Self Closing Callback Tags You can shorten the above by using self-closing tags, just like in HTML. You simply put a / at the end of the tag (there MUST be NO space between the / and the }}). Example {{ foo.bar.baz /}}  {{ foo.bar.baz }}     Content {{ /foo.bar.baz }}  Recursive Callback Blocks The recursive callback tag allows you to loop through a child's element with the same output as the main block. It is triggered by using the recursive keyword along with the array key name. The two words must be surrounded by asterisks as shown in the example below. Example function my_callback($name, $attributes, $content) {     $data = array(             'url'       => 'url_1',             'title'     => 'First Title',             'children'  => array(                 array(                     'url'       => 'url_2',                     'title'     => 'Second Title',                     'children'  => array(                         array(                             'url'   => 'url_3',                             'title' => 'Third Title'                         )                     )                 ),                 array(                     'url'       => 'url_4',                     'title'     => 'Fourth Title',                     'children'  => array(                         array(                             'url'   => 'url_5',                             'title' => 'Fifth Title'                         )                     )                 )             )     );      $parser = new Lex\Parser();     return $parser->parse($content, $data); }  In the template set it up as shown below. If children is not empty Lex will parse the contents between the {{ navigation }} tags again for each of children's arrays. The resulting text will then be inserted in place of {{ *recursive children* }}. This can be done many levels deep. <ul>     {{ navigation }}         <li><a href=""{{ url }}"">{{ title }}</a>             {{ if children }}                 <ul>                     {{ *recursive children* }}                 </ul>             {{ endif }}         </li>     {{ /navigation }} </ul>  Result <ul>     <li><a href=""url_1"">First Title</a>         <ul>             <li><a href=""url_2"">Second Title</a>                 <ul>                     <li><a href=""url_3"">Third Title</a></li>                 </ul>             </li>              <li><a href=""url_4"">Fourth Title</a>                 <ul>                     <li><a href=""url_5"">Fifth Title</a></li>                 </ul>             </li>         </ul>     </li> </ul>  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pyrocms/lex"	"A lightweight template parser."	"true"
"Templating"	"MtHaml"	"https://github.com/arnaud-lb/MtHaml"	"A PHP implementation of the HAML template language."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"305"	"21"	"41"	"GitHub - arnaud-lb/MtHaml: Multi target HAML (HAML for PHP, Twig, <your language here>) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 305 Fork 41 arnaud-lb/MtHaml Code Issues 12 Pull requests 6 Wiki Pulse Graphs Multi target HAML (HAML for PHP, Twig, <your language here>) 199 commits 2 branches 16 releases 16 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show php-5.3 1.8.0 1.7.1 1.7.0 1.6.0 1.5.0 1.4.0 1.3.1 1.3.0 1.2.2 1.2.1 1.2.0 1.1.1 1.1.0 1.0.1 1.0.0 Nothing to show New pull request Latest commit cfd0e33 Jul 6, 2016 arnaud-lb committed on GitHub Merge pull request #96 from weotch/patch-1 … Documenting the :plain filter Permalink Failed to load latest commit information. docs removed extension Sep 15, 2013 examples Changed docs and examples to proxy the Twig loader instead of the lexer Jun 8, 2014 lib/MtHaml Merge pull request #86 from pwhelan/compile-php Sep 11, 2015 test Fix test Dec 16, 2015 .gitignore added more examples Sep 2, 2013 .travis.yml Build on new travis infrastructure Dec 16, 2015 CHANGELOG 1.8.0 Dec 17, 2015 LICENSE MtHaml May 14, 2011 README.markdown Documenting the :plain filter Jul 5, 2016 composer.json Made MtHaml compatible with both Twig 1.x and 2.x Sep 11, 2015 phpunit.xml MtHaml May 14, 2011 README.markdown Multi target HAML MtHaml is a PHP implementation of the HAML language which can target multiple languages. Currently supported targets are PHP and Twig, and new ones can be added easily. Mt-Haml implements the exact same syntax as ruby-haml; the only difference is that any supported language can be used everywhere HAML expects Ruby code: HAML/Twig: %ul#users   - for user in users     %li.user       = user.name       Email: #{user.email}       %a(href=user.url) Home page Rendered: <ul id=""users"">   {% for user in users %}     <li class=""user"">       {{ user.name }}       Email: {{ user.email }}       <a href=""{{ user.url }}"">Home page</a>     </li>   {% endfor %} </ul> HAML/PHP: %ul#users   - foreach($users as $user)     %li.user       = $user->getName()       Email: #{$user->getEmail()}       %a(href=$user->getUrl()) Home page Rendered: <ul id=""users"">   <?php foreach($users as $user) { ?>     <li class=""user"">       <?php echo $user->getName(); ?>       Email: <?php echo $user->getEmail(); ?>       <a href=""<?php echo $user->getUrl(); ?>"">Home page</a>     </li>   <?php } ?> </ul> Usage PHP: <?php $haml = new MtHaml\Environment('php'); $executor = new MtHaml\Support\Php\Executor($haml, array(     'cache' => sys_get_temp_dir().'/haml', ));  // Compiles and executes the HAML template, with variables given as second // argument $executor->display('template.haml', array(     'var' => 'value', ));  Twig: <?php $haml = new MtHaml\Environment('twig', array('enable_escaper' => false));  // Use a custom loader, whose responsibility is to convert HAML templates // to Twig syntax, before handing them out to Twig: $hamlLoader = new MtHaml\Support\Twig\Loader($haml, $twig->getLoader()); $twig->setLoader($hamlLoader);  // Register the Twig extension before executing a HAML template $twig->addExtension(new MtHaml\Support\Twig\Extension());  // Render templates as usual $twig->render('template.haml', ...); See examples and MtHaml with Twig Escaping MtHaml escapes everything by default. Since Twig already supports auto escaping it is recommended to enable it in Twig and disable it in MtHaml: new MtHaml\Environment('twig', array('enable_escaper' => false)); HAML/PHP is rendered like this when auto escaping is enabled: Email #{$user->getEmail()} %a(href=$user->getUrl()) Home page Email <?php echo htmlspecialchars($user->getEmail(), ENT_QUOTES, 'UTF-8'); ?> <a href=""<?php echo htmlspecialchars($user->getUrl(), ENT_QUOTES, 'UTF-8'); ?>"">Home page</a> Twig Using Twig in HAML gives more control over what can be executed, what variables and functions are exposed to the templates, etc. This also allows to use all of Twig's awesome features like template inheritance, macros, blocks, filters, functions, tests, ... - extends ""some-template.haml""  - macro printSomething()   %p something  - block body   %h1 Title   = _self.printSomething() Integration in Twig MtHaml comes with an example Twig_Loader that will automatically convert HAML into Twig at loading time (Twig will then compile the resulting Twig script and cache it). Templates with a .haml extension, or whose source starts with {% haml %} will be converted, and the others will be left untouched. The loader acts as a proxy and takes an other loader as parameter: <?php  $haml = new MtHaml\Environment(...);  $twig_loader = new Twig_Loader_Filesystem(...); $twig_loader = new MtHaml\Support\Twig\Loader($haml, $twig_loader); Runtime support Compiled MtHaml/Twig templates need support from MtHaml at runtime in some cases. Because of this, a Twig extension must be loaded before executing the templates. <?php // Register the MtHaml extension before executing the template: $twig->addExtension(new MtHaml\Support\Twig\Extension()); $twig->render(""rendered_twig_template.twig""); Syntax The syntax is the same as HAML/Ruby's syntax, except that PHP or Twig have to be used where Ruby is expected. See the tutorial and the reference Performance MtHaml converts HAML to PHP or Twig code. The resulting code can be cached and executed any number of times, and doesn't depend on HAML at runtime. MtHaml has no runtime overhead. Helpers Helpers in HAML/Ruby are just ruby functions exposed to templates. Any function can be made available to HAML templates by the target language (the function only have to be available at runtime). In HAML/Twig you can use all of Twig's functions, filters, and tags. In HAML/PHP, you can use all PHP functions. Filters Filters take plain text input (with support for #{...} interpolations) and transform it, or wrap it. Example with the javascript filter: %p something :javascript   some.javascript.code(""#{var|escape('js')}""); <p>something</p> <script type=""text/javascript""> //<![CDATA[   some.javascript.code(""{{ var|escape('js') }}""); //]]> </script> The following filters are available: css: wraps with style tags cdata: wraps with CDATA markup coffee*: compiles coffeescript to javascript escaped: html escapes javascript: wraps with script tags less*: compiles as Lesscss markdown*: converts markdown to html php: executes the input as php code plain: does not parse the filtered text preseve: preserves preformatted text scss*: converts scss to css twig: executes the input as twig code Filter marked with * have runtime dependencies and are not enabled by default. Such filters need to be provided to MtHaml\Environment explicitly. Example with the Coffee filter: <?php  $coffeeFilter = new MtHaml\Filter\CoffeeScript(new CoffeeScript\Compiler);  $env = new MtHaml\Environment('twig', array(     'enable_escaper' => false, ), array(     'coffee' => $coffeeFilter, )); Sass Sass can be used in PHP projects without problem. It only depends on Ruby and does not need to be installed on production servers. So MtHaml will not re-implement Sass. Frameworks and CMS support CakePHP: https://github.com/TiuTalk/haml Drupal: https://github.com/antoinelafontaine/oxide FuelPHP: https://github.com/fuel/parser Laravel (PHP): https://github.com/BKWLD/laravel-haml Laravel (Twig): https://github.com/SimonDegraeve/laravel-twigbridge PHPixie: https://github.com/dracony/PHPixie-HAML Silex: https://github.com/arnaud-lb/Silex-MtHaml Sprockets-PHP: https://github.com/Nami-Doc/Sprockets-PHP Symfony2: https://github.com/arnaud-lb/MtHamlBundle Yii2 Framework: https://github.com/mervick/yii2-mthaml Zend Framework 1: https://github.com/bonndan/mthaml-zf1 PhileCMS: https://bitbucket.org/jacmoe/templatemthaml Add yours: https://github.com/arnaud-lb/MtHaml/edit/master/README.markdown License MtHaml is released under the MIT license (same as HAML/Ruby). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/arnaud-lb/MtHaml"	"A PHP implementation of the HAML template language."	"true"
"Templating"	"Mustache"	"https://github.com/bobthecow/mustache.php"	"A PHP implementation of the Mustache template language."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2348"	"123"	"369"	"GitHub - bobthecow/mustache.php: A Mustache implementation in PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 123 Star 2,348 Fork 369 bobthecow/mustache.php Code Issues 14 Pull requests 2 Wiki Pulse Graphs A Mustache implementation in PHP. http://mustache.github.io/ 754 commits 4 branches 43 releases 34 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev feature/production-filesystem-loader master tmp/template-inheritance-whitespace Nothing to show v2.10.0 v2.9.0 v2.8.0 v2.7.0 v2.6.1 v2.6.0 v2.5.1 v2.5.0 v2.4.1 v2.4.0 v2.3.1 v2.3.0 v2.2.0 v2.1.0 v2.0.2 v2.0.1 v2.0.0 v2.0.0-rc.1 v1.1.0 v1.0.0 v0.9.0 v0.8.1 2.6.1 1.0.0 0.8.0 0.7.1 0.7.0 0.6.0 0.5.2 0.5.1 0.5.0 0.4.0 0.3.0 0.2.7 0.2.6 0.2.5 0.2.4 0.2.3 0.2.2 0.2.1 0.2.0 0.1.1 0.1 Nothing to show New pull request Latest commit 0bb2f76 Feb 27, 2016 bobthecow Merge branch 'release/2.10.0' Permalink Failed to load latest commit information. bin Bump copyright dates. Aug 15, 2015 src/Mustache Bump to v2.10.0 Feb 27, 2016 test Make LambdaHelper invokable. Feb 14, 2016 vendor reverting vendor spec change Apr 4, 2014 .gitignore update PHP-CS-Fixer to 1.0 Nov 15, 2014 .gitmodules Remove unused submodule. Mar 12, 2013 .php_cs Update to latest php-cs-fixer config. Jul 18, 2015 .styleci.yml Update to latest php-cs-fixer config. Jul 18, 2015 .travis.yml We won't be needing this anymore. Jul 18, 2015 CONTRIBUTING.md Add submodule instructions to CONTRIBUTING. Aug 16, 2014 LICENSE Bump copyright dates. Aug 15, 2015 README.md Plural, too :) Dec 27, 2014 composer.json Use latest PHPUnit dev dependency. Feb 14, 2016 phpunit.xml.dist Update the test suite config to actually exclude FiveThree May 1, 2012 README.md Mustache.php A Mustache implementation in PHP. Usage A quick example: <?php $m = new Mustache_Engine; echo $m->render('Hello {{planet}}', array('planet' => 'World!')); // ""Hello World!"" And a more in-depth example -- this is the canonical Mustache template: Hello {{name}} You have just won {{value}} dollars! {{#in_ca}} Well, {{taxed_value}} dollars, after taxes. {{/in_ca}} Create a view ""context"" object -- which could also be an associative array, but those don't do functions quite as well: <?php class Chris {     public $name  = ""Chris"";     public $value = 10000;      public function taxed_value() {         return $this->value - ($this->value * 0.4);     }      public $in_ca = true; } And render it: <?php $m = new Mustache_Engine; $chris = new Chris; echo $m->render($template, $chris); And That's Not All! Read the Mustache.php documentation for more information. See Also Readme for the Ruby Mustache implementation. mustache(5) man page. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bobthecow/mustache.php"	"A PHP implementation of the Mustache template language."	"true"
"Templating"	"Phly Mustache"	"https://github.com/phly/phly_mustache"	"Another PHP implementation of the Mustache template language."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"125"	"8"	"13"	"GitHub - phly/phly_mustache: PHP 5.3 Mustache implementation Skip to content Personal Open source Business Explore Get started Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 125 Fork 13 phly/phly_mustache Code Issues 1 Pull requests 0 Wiki Pulse Graphs PHP 5.3 Mustache implementation 114 commits 6 branches 9 releases Fetching contributors PHP 96.2% HTML 3.8% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop feature/sphinx-docs features/php-5.2-support gh-pages master subviews Nothing to show 1.2.2 1.2.1 1.2.0 1.1.1 1.1.0 1.0.0 1.0.0rc3 1.0.0rc2 1.0.0rc1 Nothing to show New pull request Latest commit 01bdaba Sep 2, 2015 weierophinney Marked phly_mustache as abandoned, in favor of phly-mustache Permalink Failed to load latest commit information. .settings Rebuilt Studio project settings Sep 14, 2010 docs Edits to the text Hari sent Mar 5, 2013 library/Phly/Mustache Merge branch 'hotfix/28' Sep 1, 2015 tests only allow whitespace after the sigil Jun 8, 2015 .buildpath Rebuilt Studio project settings Sep 14, 2010 .gitignore Dev dependencies Mar 5, 2013 .project SUB-VIEWS pragma implementation Sep 13, 2010 .travis.yml .travis.yml - add PHP 5.5 Oct 25, 2013 .vimproject [#17] Confirmed issue Jul 31, 2012 LICENSE Updated license wording Aug 29, 2010 README.md Marked phly_mustache as abandoned, in favor of phly-mustache Sep 2, 2015 TODO.md Updated TODO Aug 27, 2015 composer.json Dev dependencies Mar 5, 2013 README.md Phly\Mustache MOVED! This package has moved to phly/phly-mustache, and the package name has changed to phly/phly-mustache. I have updated packagist to mark phly/mustache as abandoned and to point users to the new package name. All previous releases are available under the old package name, and have the same functionality. The new package contains the v2 code, however, which has never been released under the old name. Phly\Mustache is a Mustache (http://mustache.github.com) implementation written for PHP 5.3+. It conforms to the principles of mustache, and allows for extension of the format via pragmas. For full documentation, please visit ReadTheDocs. The mailing list is at https://groups.google.com/d/forum/phly_mustache At this time, Phly\Mustache has support for the following: PhlyTest\Mustache\Mustache Renders string templates Renders file templates Can use object properties for substitutions Can use method return value for substitutions Template may use conditionals Conditional is skipped if value is false Conditional is skipped if value is empty Template iterates arrays Template iterates traversable objects Higher order sections render inside out Template will dereference nested arrays Template will dereference nested objects Inverted sections render on empty values Renders partials Allows aliasing partials Escapes standard characters Triple mustaches prevent escaping Honors implicit iterator pragma Allows setting alternate template suffix Strips comments from rendered output Allows specifying alternate delimiters Alternate delimiters set in section only apply to that section Alternate delimiters apply to child sections Alternate delimiters do not carry to partials Pragmas are section specific Pragmas do not extend to partials Handles recursive partials Lexer strips unwanted whitespace from tokens Array values that refer to p h p built ins should not call them Object properties that refer to p h p built ins should not call them Array values that refer to static methods should not call them String values that refer to functions should not call them Array values that refer to static methods in array syntax should not call them Std class as view should not raise error Dot notation is exanded to sub property of view With dot notation if subproperty does not exist empty string is rendered PhlyTest\Mustache\HierarchicalViews Understands hierarchical templates Placeholders are rendered as unnamed sections Only placeholders with replacements receive substitutions Can render multiple placeholders Can render nested child placeholders Nested children can render placeholders defined in parent child PhlyTest\Mustache\DefaultResolver Resolves using mustache suffix by default Resolves using provided suffix Resolves using specified directory separator Uses path stack internally PhlyTest\Mustache\Pragma\SubViews Sub view content is captured in parent Renders nested sub views Sub view uses parent view when no view provided Should render sub view returned by closure Std class composing sub view should not raise error Architecture Phly\Mustache consists of five primary classes: Lexer: tokenizes mustache syntax. Renderer: renders a list of tokens, using substitions provided via a view. Pragma: interface for pragmas, which may modify how tokens are handled Resolver: resolves a template name to mustache syntax or tokens. Mustache: facade/gateway class. Tokenizes and renders templates, caches tokens, provides partial aliasing, and acts as primary interface for end-users. Usage Usage is fairly straightforward: include '/path/to/library/Phly/Mustache/_autoload.php'; use Phly\Mustache\Mustache;  $mustache = new Mustache(); echo $mustache->render('some-template', $view);  By default, phly_mustache will look under the current directory for templates ending with '.mustache'; you can create a stack of directories to search by using the setTemplatePath() method: $mustache->setTemplatePath($path1)          ->setTemplatePath($path2);  In the above, it will search first $path2, then $path1 to resolve the template. You may also change the suffix it will use to resolve templates: $mustache->setSuffix('html'); // use '.html' as the suffix  If your templates use pragmas, you must first add pragma handlers to the renderer. This can be done as follows: use Phly\Mustache\Pragma\ImplicitIterator as ImplicitIteratorPragma; $mustache->getRenderer()->addPragma(new ImplicitIteratorPragma()); $mustache->render('template-with-pragma', $view);  Views can be either associative arrays or objects. For objects, any public member, either a property or a method, may be referenced in your template. As an example: class View {     public $first_name = 'Matthew';      public $last_name  = ""Weier O'Phinney"";      public function full_name()     {         return $this->first_name . ' ' . $this->last_name;     } }  Any property (or array key) may also refer to a valid callback; in such cases, the return value of the callback will be used. $view = new \stdClass; $view->first_name = 'Matthew'; $view->last_name  = ""Weier O'Phinney""; $view->full_name  = function() use ($view) {     return $view->first_name . ' ' . $view->last_name; };  The following sections detail unique and/or advanced features of phly_mustache. Autoloading phly_mustache follows the PSR-0 standard for class naming conventions, meaning any PSR-0-compliant class loader will work. To simplify things out of the box, the component contains an ""_autoload.php"" file which will register an autoloader for the phly_mustache component with spl_autoload. You can simply include that file, and start using phly_mustache. Higher Order Sections ""Higher order sections"" refer to callbacks that return callbacks. As an example, consider the following template: {{#bolder}}Hi {{name}}.{{/bolder}}  and the following view: $view = new \stdClass; $view->name = 'Tater'; $view->bolder = function() {     return function($text, $renderer) {         return '<b>' . $renderer($text) . '</b>';     }; };  In this case, the contents of the section, ""Hi {{name}}."" will be passed as the first argument to the section, and a callback capable of rendering will be passed as the second (this is basically a closure that curries in the current Renderer object and calls the appropriate method). This allows you to re-use a given ""section"" in order to create re-usable capabilities; think of them like ""view helpers"" in systems like Zend_View, Solar_View, Savant, etc. Partials Partials are a basic form of inclusion within Mustache; anytime you find you have re-usable bits of templates, move them into a partial, and refer to the partial from the parent template. Typically, you will only reference partials within your templates, using standard syntax: {{>partial-name}}  However, you may optionally pass a list of partials when rendering. When you do so, the list should be a set of alias/template pairs: $mustache->render($template, array(), array(     'winnings' => 'user-winnings', ));  In the above example, 'winnings' refers to the template ""user-winnings.mustache"". Thus, within the $template being rendered, you may refer to the following partial: {{>winnings}}  and it will resolve to the appropriate aliased template. A few things to remember when using partials: The parent template may change tag delimiters, but if you want to use the same delimiters in your partial, you will need to make the same declaration. The parent template may utilize one or more pragmas, but those declarations will not perist to the partial; if you want those pragmas, you must reference them in your partial. Basically, partials render in their own scope. If you remember that one rule, you should have no problems. Hierarchical Views and Placeholders (Available in versions 1.1.0 and up). Placeholders are basically unnamed sections, and are denoted by the combination of {{$name}} and {{/name}}. When encountered by the renderer, any mustache content within will be rendered as normal mustache content. Placeholders are primarily of use with the concept of hierarchical views. These are denoted by the combination of {{<name}} and {{/name}}. When encountered, the template denoted by name will be tokenized, and any placeholders that are defined in the content will be used to replace those found in the parent template. As an example, consider the following parent template, ""super.mustache"": <html> <head><title>{{$title}}Default title{{/title}}</title></head> <body> <div class=""content""> {{$content}}Default content of the page{{/content}} </div> </body> </html>  If rendered by itself, it will result in the following: <html> <head><title>Default title</title></head> <body> <div class=""content""> Default content of the page </div> </body> </html>  Now, consider the following child template, ""sub.mustache"": {{<super}} {{$title}}Profile of {{username}}{{/title}} {{$content}} Here is {{username}}'s profile page {{/content}} {{/super}}  If we have a view that defines ""username"" as ""Matthew"" and render ""sub.mustache"", we'll get the following: <html> <head><title>Profile of Matthew</title></head> <body> <div class=""content""> Here is Matthew's profile page </div> </body> </html>  Notice how the child retains the view context of the parent, and that all mustache tokens defined in it are rendered as if they were simply another mustache template. Hierarchical templates may be nested arbitrarily deep. (This feature was inspired by https://gist.github.com/1854699) Whitespace Stripping Because this is a very literal compiler, whitespace can sometimes be an issue. A number of measures have been built in to reduce such issues by stripping whitespace (primarily newlines) surrounding certain tokens, but they come at a slight performance penalty. For markup languages like XML, XHTML or HTML5, you likely will not run into issues in the final rendered output. As such, you can optionally disable whitespace stripping: $mustache->getLexer()->disableStripWhitespace(true);  Caching Tokens Tokens from parsed templates may be cached for later usage; alternately, a new instance of phly_mustache may be seeded with cached tokens from a previous instance. To get the list of tokens, use the following: $tokens = $mustache->getAllTokens();  This will return a list of template name/token list pairs, based on the templates compiled by this instance. You may then seed another instance using the following: $mustache->restoreTokens($tokens);  This will overwrite any tokens already compiled by that instance. Since the tokens are template name/token list pairs, you can safely pass them to array_merge(), allowing multiple instances of phly_mustache to build up a large cache of template tokens. This will greatly improve performance when rendering templates on subsequent calls -- particularly if you cache the tokens in a memory store such as memcached. Pragmas Pragmas are tags of the form: {{%PRAGMA-NAME option=value}} where options are key/value pairs, and are entirely optional. Pragmas are user-defined, and can be used to extend and/or modify the capabilities of the renderer. Pragmas should implement Phly\Mustache\Pragma, which defines methods for retrieving the pragma name (used during registration of the pragma, and referenced by templates; this is case sensitive currently), determining whether or not the pragma can intercept rendering of a specific token type, and handling the token. Pragmas should be registered before rendering any template that references them. $this->mustache->getRenderer()->addPragma($pragmaObject); // ... $this->mustache->render(/*...*/);  When declared in a template, they exist for the duration of the current scope, which means: If declared in a section, they apply to that section and any child sections only If declared for a file, they apply to that file and all child sections only Pragmas are never passed on to partials; each partial is rendered with an empty set of pragmas, and must declare any pragmas it requires for appropriate rendering. For ideas on how you might use or implement pragmas, examine the pragmas shipped with phly_mustache. Pragmas shipped with phly_mustache IMPLICIT-ITERATOR This pragma allows iteration of indexed arrays or Traversable objects with scalar values, with the option of specifying the iterator ""key"" to use within the template. By default, a variable key ""."" will be replaced by the current value of the iterator. A sample template: {{#some_iterable_data}}     {{.}} {{/some_iterable_data}}  To use an explicit iterator key, specify it via the ""iterator"" option of the pragma: {{%IMPLICIT-ITERATOR iterator=bob}} {{#some_iterable_data}}     {{bob}} {{/some_iterable_data}}  SUB-VIEWS The Sub-Views pragma allows you to implement the two-step view pattern using Mustache. When active, any variable whose value is an instance of Phly\Mustache\Pragma\SubView will be substituted by rendering the template and view that object encapsulates. The SubView class takes a template name and a view as a constructor: use Phly\Mustache\Pragma\SubView; $subView = new SubView('some-partial', array('name' => 'Matthew'));  That object is then assigned as a value to a view key: $view = new \stdClass; $view->content = $subView;  The template might look like this: {{!layout}} {{%SUB-VIEWS}} <html> <body>     {{content}} </body> </html>  and the partial like this: {{!some-partial}} Hello, {{name}}!  Rendering the view: use Phly\Mustache\Mustache,     Phly\Mustache\Pragma\SubViews; $mustache = new Mustache(); $subViews = new SubViews($mustache); $rendered = $mustache->render('layout', $view);  will result in: <html> <body>     Hello, Matthew! </body> </html>  Sub views may be nested, and re-used. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phly/phly_mustache"	"Another PHP implementation of the Mustache template language."	"true"
"Templating"	"PHPTAL"	"http://phptal.org/"	"A PHP implementation of the templating language."	"null"	"null"	"null"	"TAL"	"https://en.wikipedia.org/wiki/Template_Attribute_Language"	"null"	"null"	"null"	"null"	"null"	"PHPTAL :: Introduction PHPTAL PHP Template Attribute Language News Introduction Download Manuals FAQ Mailinglist Wiki Introduction PHPTAL is a PHP implementation of ZPT work. To be short, PHPTAL is a XML/XHTML template library for PHP. While most web developpers continue to use ASP/JSP/PHP tags as the core language of their templates, the Zope community came with a refreshing idea named TAL. The idea was to move presentation actions inside XHTML attributes instead of using plain tags or elements. Let's start with a simple PHP exemple (usually reproduceable in ASP/JSP): <?php foreach ($values as $value): ?> <div class=""item"">   <div class=""title"">     <?php if ($value->hasDate()): ?><?=$value->getDate()?><?php endif; ?>     <a href=""<?= $value->getUrl() ?>""><?= 		htmlentities($value->getTitle()) 	?></a>   </div>   <div class=""content"">     <?= htmlentities($value->getContent()) ?>   </div> </div> <?php endforeach; ?>  Let's have a look at the TAL way: <div class=""item"" tal:repeat=""value values"">   <div class=""title"">     <span tal:condition=""value/hasDate"" tal:replace=""value/getDate""/>     <a tal:attributes=""href value/getUrl"" tal:content=""value/getTitle""/>   </div>   <div id=""content"" tal:content=""value/getContent""/> </div>  Now it's up to you to choose which version you prefer. Of course those tal:condition, tal:replace and tal:repeat may looks strange when begining with TAL. Just for fun let's modify this example:  <div class=""item"" tal:repeat=""value values"">   <div class=""title"">     <span tal:condition=""value/hasDate"" tal:replace=""value/getDate"">       2013-08-05     </span>     <a href=""sample.html""       tal:attributes=""href value/getUrl""       tal:content=""value/getTitle"">       My item title     </a>   </div>   <div class=""content"" tal:content=""value/getContent"">     This is a sample content which is replaced by the     real content when the template is run with real     data.   </div> </div>  More in the manual. Some PHPTAL advantages and features: enforces the separation between logic and presentation (the holy grail), warns you if you forget to close an HTML tag or have syntax errors in your template, no more htmlentities(), quite clean and readable templates, ability to insert sample text inside template to preview template result without PHP backend, integrates quite well with WYSIWYG HTML editors, data abstraction using XPath-like system, cool HTML macro system, integrated internationalization system (using gettext or your own backend), ability to replace XPath-like system with PHP expressions, nearly no speed loss (templates are compiled, expensive expressions can be replaced with plain PHP). compatible with PHP accelerators, which can improve performance even further, more than four years of ZPT community support (see zope website), extensible and easily hackable code, makes good use of PHP5 and SPL. Some PHPTAL drawbacks: a dependency for your application, some TAL, METAL, I18N and PHPTAL attributes to understand, you'll have to produce clean XHTML (PHPTAL can output HTML5 too). Newsfeed | Contact | © 2005-2013 Motion-Twin, Aardvark Media Ltd."	"null"	"null"	"A PHP implementation of the templating language."	"true"
"Templating"	"Plates"	"http://platesphp.com/"	"A native PHP templating library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"573"	"43"	"68"	"GitHub - thephpleague/plates: Native PHP template system Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 43 Star 573 Fork 68 thephpleague/plates Code Issues 22 Pull requests 14 Pulse Graphs Native PHP template system http://platesphp.com 180 commits 2 branches 14 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 3.1.1 3.1.0 3.0.3 3.0.2 3.0.1 3.0.0 2.1.0 2.0.0 1.2.1 1.1.0 1.0.11 1.0.10 1.0.9 1.0.8 Nothing to show New pull request Latest commit bc6bc61 Mar 22, 2016 reinink Merge pull request #114 from jamesdb/patch-1 … Update README.md Permalink Failed to load latest commit information. src Merge pull request #85 from localheinz/fix/docblock Dec 11, 2015 tests CS fixes Nov 25, 2014 .gitattributes Create .gitattributes Oct 22, 2014 .gitignore Massive rewrite. Sep 27, 2014 .scrutinizer.yml Remove tests from Scrutinizer checks. Sep 28, 2014 .travis.yml Merge pull request #89 from localheinz/fix/container Dec 11, 2015 CONTRIBUTING.md Update repository URLs as per recent GitHub username change. Jan 22, 2014 LICENSE Add license. Nov 14, 2013 README.md Update README.md Mar 22, 2016 composer.json Fix: Platform requirement Dec 11, 2015 phpunit.xml.dist Added Coveralls badge. May 3, 2014 README.md Plates Plates is a native PHP template system that's fast, easy to use and easy to extend. It's inspired by the excellent Twig template engine and strives to bring modern template language functionality to native PHP templates. Plates is designed for developers who prefer to use native PHP templates over compiled template languages, such as Twig or Smarty. Highlights Native PHP templates, no new syntax to learn Plates is a template system, not a template language Plates encourages the use of existing PHP functions Increase code reuse with template layouts and inheritance Template folders for grouping templates into namespaces Data sharing across templates Preassign data to specific templates Built-in escaping helpers Easy to extend using functions and extensions Framework-agnostic, will work with any project Decoupled design makes templates easy to test Composer ready and PSR-2 compliant Installation Plates is available via Composer: {     ""require"": {         ""league/plates"": ""3.*""     } } Documentation Full documentation can be found at platesphp.com. Testing $ phpunit Contributing Please see CONTRIBUTING for details. Security If you discover any security related issues, please email jonathan@reinink.ca instead of using the issue tracker. Credits Jonathan Reinink All Contributors License The MIT License (MIT). Please see License File for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/plates"	"A native PHP templating library."	"true"
"Templating"	"Smarty"	"http://www.smarty.net/"	"A template engine to complement PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"700"	"113"	"268"	"GitHub - smarty-php/smarty Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 113 Star 700 Fork 268 smarty-php/smarty Code Issues 28 Pull requests 5 Wiki Pulse Graphs No description or website provided. 4,401 commits 2 branches 24 releases 12 contributors PHP 95.6% Yacc 3.8% Smarty 0.6% PHP Yacc Smarty Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Smarty2 master Nothing to show v3.1.29 v3.1.28 v3.1.27 v3.1.26 v3.1.25 v3.1.24 v3.1.23 v3.1.21 v3.1.20 v3.1.19 v3.1.18 v3.1.17 v3.1.16 v3.1.15 v3.1.14 v3.1.13 v3.1.12 v3.1.11 v2.6.29 v2.6.28 v2.6.27 v2.6.26 v2.6.25 v2.6.24 Nothing to show New pull request Latest commit c666ec9 Jul 14, 2016 uwetews - bugfix wrong parameter on compileAllTemplates() and compileAllConfi… … …g() #231 Permalink Failed to load latest commit information. demo - reformat all code for unique style Feb 9, 2016 lexer fix passed parameter Mar 9, 2016 libs - bugfix wrong parameter on compileAllTemplates() and compileAllConfi… Jul 14, 2016 .gitattributes Upload version 3.1.20 Oct 18, 2014 .gitignore removed invalid .gitignore pattern Jul 6, 2015 .travis.yml whitespace cleanup Apr 24, 2016 COMPOSER_RELEASE_NOTES.txt add composer release notes Oct 18, 2014 COPYING.lib Added licence file and demo folder Oct 18, 2014 INHERITANCE_RELEASE_NOTES.txt - enhancement {block} tag names can now be variable #221 May 2, 2016 NEW_FEATURES.txt whitespace cleanup Apr 24, 2016 README Update README with correct plugin method signature Oct 8, 2015 README.md Provide new line to separate highlights Nov 28, 2015 SMARTY_2_BC_NOTES.txt Upload version 3.1.20 Oct 17, 2014 SMARTY_3.0_BC_NOTES.txt Upload version 3.1.20 Oct 17, 2014 SMARTY_3.1_NOTES.txt Upload version 3.1.20 Oct 17, 2014 change_log.txt - bugfix wrong parameter on compileAllTemplates() and compileAllConfi… Jul 14, 2016 composer.json add require-dev to load PHPUnit tests and lxer/parser generator (reve… May 4, 2015 travis.ini add memcache tests to travis Dec 31, 2015 README.md Smarty 3 template engine Distribution repository Smarty 3.1.28 introduces run time template inheritance Read the NEW_FEATURES and INHERITANCE_RELEASE_NOTES file for recent extensions to Smarty 3.1 functionality Smarty versions 3.1.11 or later are now on github and can be installed with Composer. The ""smarty/smarty"" package will start at libs/.... subfolder. To get the latest stable version of Smarty 3.1 use ""require"": {     ""smarty/smarty"": ""~3.1"" } in your composer.json file. To get the trunk version use ""require"": {     ""smarty/smarty"": ""~3.1@dev"" } For a specific version use something like ""require"": {     ""smarty/smarty"": ""3.1.19"" } PHPUnit test can be installed by corresponding composer entries like ""require"": {     ""smarty/smarty-phpunit"": ""3.1.19"" } Similar applies for the lexer/parser generator ""require"": {     ""smarty/smarty-lexer"": ""3.1.19"" } Or you could use ""require"": {     ""smarty/smarty-dev"": ""3.1.19"" } Which is a wrapper to install all 3 packages Composer can also be used for Smarty2 versions 2.6.24 to 2.6.28 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/smarty-php/smarty"	"A template engine to complement PHP."	"true"
"Templating"	"Twig"	"http://twig.sensiolabs.org/"	"A comprehensive templating language."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Homepage - Twig - The flexible, fast, and secure PHP template engine TWIG The flexible, fast, and secure template engine for PHP ABOUT DOCUMENTATION DEVELOPMENT CONTRIBUTORS Twig is a modern template engine for PHP Fast: Twig compiles templates down to plain optimized PHP code. The overhead compared to regular PHP code was reduced to the very minimum. Secure: Twig has a sandbox mode to evaluate untrusted template code. This allows Twig to be used as a template language for applications where users may modify the template design. Flexible: Twig is powered by a flexible lexer and parser. This allows the developer to define its own custom tags and filters, and create its own DSL. Stable: 1.24.1 Why yet another template engine? When it comes to template engines in PHP, many people will tell you that PHP itself is a template engine. But even if PHP started its life as a template language, it did not evolve like one in the recent years. As a matter of fact, it doesn't support many features modern template engines should have nowadays: Concise: The PHP language is verbose and becomes ridiculously verbose when it comes to output escaping: <?php echo $var ?> <?php echo htmlspecialchars($var, ENT_QUOTES, 'UTF-8') ?>  In comparison, Twig has a very concise syntax, which make templates more readable: {{ var }} {{ var|escape }} {{ var|e }}         {# shortcut to escape a variable #}  Template oriented syntax: Twig has shortcuts for common patterns, like having a default text displayed when you iterate over an empty array: {% for user in users %}     * {{ user.name }} {% else %}     No users have been found. {% endfor %}  Full Featured: Twig supports everything you need to build powerful templates with ease: multiple inheritance, blocks, automatic output-escaping, and much more: {% extends ""layout.html"" %}  {% block content %}     Content of the page... {% endblock %}  Easy to learn: The syntax is easy to learn and has been optimized to allow web designers to get their job done fast without getting in their way. Of course, PHP is also the language for which you can find the more template engine projects. But most of them are still developed with PHP4 in mind, and do not embrace web development best practices: Extensibility: Twig is flexible enough for all your needs, even the most complex ones. Thanks to an open architecture, you can implement your own language constructs (tags, filters, functions, and even operators) to create your very own DSL. Unit tested: Twig is fully unit-tested. The library is stable and ready to be used in large projects. Documented: Twig is fully documented, with a dedicated online book, and of course a full API documentation. Secure: When it comes to security, Twig has some unique features: Automatic output escaping: To be on the safe side, you can enable automatic output escaping globally or for a block of code: {% autoescape true %}     {{ var }}     {{ var|raw }}     {# var won't be escaped #}     {{ var|escape }}  {# var won't be doubled-escaped #} {% endautoescape %}  Sandboxing: Twig can evaluate any template in a sandbox environment where the user has access to a limited set of tags, filters, and object methods defined by the developer. Sandboxing can be enabled globally or locally for just some templates: {{ include('page.html', sandboxed = true) }}  Clean Error Messages: Whenever you have a syntax problem within a template, Twig outputs a helpful message with the filename and the line number where the problem occurred. It eases the debugging a lot. Fast: One of the goals of Twig is to be as fast as possible. To achieve the best speed possible, Twig compiles templates down to plain optimized PHP code. The overhead compared to regular PHP code was reduced to the very minimum. Who is behind Twig? Twig is brought to you by Fabien Potencier, the creator of the Symfony framework. Twig is released under the new BSD license. This website is powered by PHP and Twig. The Twig logo is © 2010-2016 SensioLabs"	"null"	"null"	"A comprehensive templating language."	"true"
"Templating"	"Tale Jade"	"http://jade.talesoft.io/"	"A PHP implementation of the Jade template language."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"A PHP implementation of the Jade template language."	"false"
"Static Site Generators"	"Couscous"	"http://couscous.io/"	"Couscous turns Markdown documentation into beautiful websites. It's GitHub Pages on steroids."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"444"	"26"	"46"	"GitHub - CouscousPHP/Couscous: Couscous is good. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 444 Fork 46 CouscousPHP/Couscous Code Issues 23 Pull requests 3 Pulse Graphs Couscous is good. http://couscous.io 400 commits 3 branches 24 releases 20 contributors PHP 71.3% HTML 17.7% CSS 9.3% JavaScript 1.5% Shell 0.2% PHP HTML CSS JavaScript Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/markdown-model gh-pages master Nothing to show 1.5.2 1.5.1 1.5.0 1.4.1 1.4.0 1.3.2 1.3.1 1.3.0 1.2.0 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.0.0 1.0.0-rc1 1.0.0-beta1 0.3.3 0.3.2 0.3.1 0.3.0 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit ba4459f Jun 26, 2016 pnowy committed with mnapoli Added new template to project (#170) Permalink Failed to load latest commit information. bin Update compile script and delete forgotten 'die' call. Feb 10, 2016 docs Add documentation for self-update command (#169) Jun 16, 2016 src Read excluded directories from the `.gitignore` file of the repository ( Jun 2, 2016 tests Read excluded directories from the `.gitignore` file of the repository ( Jun 2, 2016 website Added new template to project (#170) Jun 26, 2016 .gitattributes Added Travis integration Oct 25, 2014 .gitignore Adding livereload npm dependency to allow to automatically refresh we… Mar 17, 2016 .travis.yml Update Travis config in the hopes that it will solve the build issues Jul 29, 2015 CONTRIBUTING.md Read excluded directories from the `.gitignore` file of the repository ( Jun 2, 2016 LICENSE Changed the home readme Nov 3, 2014 README.md Update documentation Feb 8, 2015 composer.json Updated dependencies to allow using Symfony 3 (#161) May 18, 2016 couscous.yml Remove website/CNAME in Couscous docs and add CNAME by config Dec 28, 2015 phpunit.xml.dist Code coverage is taken into account only for tests using @covers anno… Oct 27, 2014 release.sh Do not package dev dependencies in the phar Jun 2, 2016 templates.md Added a ""Templates"" page to the website: list of templates Nov 29, 2014 README.md layout home Couscous generates a GitHub pages website from your markdown documentation. Everything is documented on couscous.io. What follows is the documentation for contributors. How Couscous works? Couscous was designed to be as simple as possible. By embracing simplicity, it becomes extremely simple to extend. Website generation The website generation is composed of a list of steps to process the Project model object: interface Step {     /**  * Process the given project.  *  * @param Project $project  */     public function __invoke(Project $project); } Steps are very granular, thus extremely easy to write and test. For example: LoadConfig: loads the couscous.yml config file RunBowerInstall LoadMarkdownFiles: load the content of all the *.md files in memory RenderMarkdown: render the markdown content WriteFiles: write the in-memory processed files to the target directory … For example, here is a step that would preprocess Markdown files to put the word ""Couscous"" in bold: class PutCouscousInBold implements \Couscous\Step {     public function __invoke(Project $project)     {         /** @var MarkdownFile[] $markdownFiles */         $markdownFiles = $project->findFilesByType('Couscous\Model\MarkdownFile');          foreach ($markdownFiles as $file) {             $file->content = str_replace('Couscous', '**Couscous**', $file->content);         }     } } Couscous uses PHP-DI for wiring everything together with dependency injection. The full list of steps is configured in src/Application/config.php. Website deployment Couscous deploys by cloning (in a temp directory) the current repository, checking out the gh-pages branch, generating the website inside it, committing and pushing. In the future, Couscous will support several deployment strategies. Contributing See the CONTRIBUTING file. License Couscous is released under the MIT License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CouscousPHP/Couscous"	"Couscous turns Markdown documentation into beautiful websites. It's GitHub Pages on steroids."	"true"
"Static Site Generators"	"Phrozn"	"https://github.com/Pawka/phrozn"	"Another tool that converts Textile, Markdown and Twig into HTML."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"483"	"38"	"72"	"GitHub - Pawka/phrozn: Phrozn is extremely flexible static site generator in PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 38 Star 483 Fork 72 Pawka/phrozn Code Issues 29 Pull requests 3 Pulse Graphs Phrozn is extremely flexible static site generator in PHP. http://phrozn.info 587 commits 4 branches 16 releases 16 contributors PHP 87.9% CSS 11.9% Other 0.2% PHP CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 feature/phr-server gh-pages master Nothing to show 0.5.6 0.5.5 0.5.4 0.5.3 0.5.2 0.5.1 0.5.0 0.4.1 0.4 0.3.3 0.3.2 0.3.1 0.3 0.2.2 0.2.1 0.2 Nothing to show New pull request Latest commit e46659c Aug 29, 2014 Pawka Merge pull request #107 from sasezaki/patch-2 … add PHP 5.6 to .travis.yml Permalink Failed to load latest commit information. Phrozn Fixed Less @import and tests. Dec 30, 2013 app phing -> phar package task Jan 27, 2013 bin Fixes #64: Get rid of PEAR builder artifacts Mar 14, 2013 configs Fixed Textile tests. Jan 6, 2014 extras extras/README Feb 23, 2011 skeleton Bootstrap statics added to repository. Jan 4, 2014 tests Fixed site tests. Jan 6, 2014 .gitignore Fixed conflict Feb 14, 2013 .travis.yml add PHP 5.6 to .travis.yml Aug 29, 2014 CONTRIBUTORS Bootstrap statics added to repository. Jan 4, 2014 LICENSE Added license Mar 22, 2011 NOTICE Added notice file Dec 9, 2011 README.textile Bootstrap statics added to repository. Jan 4, 2014 build.xml Bootstrap statics added to repository. Jan 4, 2014 composer.json Fixed package name for packagist. Nov 13, 2013 composer.lock Updated composer.lock Jan 4, 2014 phrozn.png phrozn.png added Mar 19, 2011 README.textile Phrozn Phrozn is extremely flexible static site generator in PHP. Philosophy Configurable: you should be able to tune it to your needs SCM-Enabled: no extra work to make your site git-enabled Install Clone repository from github and change to cloned directory. $ git clone https://github.com/Pawka/phrozn.git && cd phrozn Download composer and install required dependencies. $ curl -s https://getcomposer.org/installer | php $ php composer.phar install Dev Notes Unit tested API Documentation User manual Relies on SPL, Symfony 2 Components Runtime Dependencies: PEAR::Console_CommandLine PEAR::Console_Color2 PEAR::Console_Table PEAR::Archive_Tar Twig Symfony/Yaml Developer Dependencies PHPUnit PHPDocumentator 2 License See LICENSE Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Pawka/phrozn"	"Another tool that converts Textile, Markdown and Twig into HTML."	"true"
"Static Site Generators"	"Sculpin"	"https://sculpin.io/"	"A tool that converts Markdown and Twig into static HTML."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"990"	"68"	"149"	"GitHub - sculpin/sculpin: Sculpin — Static Site Generator Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 68 Star 990 Fork 149 sculpin/sculpin Code Issues 78 Pull requests 18 Pulse Graphs Sculpin — Static Site Generator https://sculpin.io 431 commits 3 branches 1 release 39 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 2.0 master Nothing to show v2.0.0 Nothing to show New pull request Latest commit 1f4b0ce Jul 7, 2016 WyriHaximus committed on GitHub Merge pull request #283 from TomasVotruba/patch-2 … travis: use container based build Permalink Failed to load latest commit information. bin Fix --project-dir. Dec 16, 2013 src/Sculpin Merge pull request #307 from DASPRiD/bugfix/proper-permalinks-for-tag… May 23, 2016 .editorconfig Create .editorconfig Mar 13, 2015 .gitignore Add base FunctionalTestCase test class Apr 22, 2015 .travis.yml Merge pull request #283 from TomasVotruba/patch-2 Jul 7, 2016 LICENSE update years on license Sep 25, 2014 README.md Update README.md Jul 3, 2015 box.json.dist Include .yml files as well? Jan 12, 2014 composer.json Update things to hopefully work better with PHP 7. May 21, 2016 composer.lock Update things to hopefully work better with PHP 7. May 21, 2016 phpunit.xml.dist Add functional tests to phpunit.xml config Apr 22, 2015 README.md Sculpin - PHP Static Site Generator Sculpin takes plain old text files (Markdown, Textile, etc.) and combines them with Twig templates to produce a set of static HTML files that can be easily deployed to almost any hosting platform. Visit sculpin.io for more information. Documentation Sculpin has documentation but also is ""learn by example"". If you are interested in trying out Sculpin you should fire up a Sculpin skeleton site to see Sculpin in action. Sculpin Skeletons Skeletons are starting points for a new Sculpin based site. While not strictly required (you can always start a site from scratch) using a skeleton is a good way to get a bunch of structure in place with little or no effort. Unless otherwise noted, the following skeletons are barebones. They will have minimal styles (if any at all) and are not intended to be pretty. You are expected to add all of the style magic yourself. Blog Skeleton A very basic Sculpin based blog. License MIT, see LICENSE. Community Want to get involved? Here are a few ways: Find us in the #sculpin IRC channel on irc.freenode.org. Join the Sculpin Users mailing list. Mention @getsculpin on Twitter. Not Invented Here There are other fine projects from which Sculpin has been inspired. Many are more mature than this one. If you are looking for a stable project with an established community, try something on the following admittedly incomplete list: Jekyll — Ruby Octopress — Ruby (framework on top of Jekyll) Hyde — Python Phrozn — PHP Pie Crust — PHP Pie Crust 2 — Python Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sculpin/sculpin"	"A tool that converts Markdown and Twig into static HTML."	"true"
"Static Site Generators"	"Spress"	"http://spress.yosymfony.com/"	"An extensible tool that converts Markdown and Twig into HTML."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"248"	"21"	"26"	"GitHub - spress/Spress: Static site generator in PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 248 Fork 26 spress/Spress Code Issues 7 Pull requests 0 Wiki Pulse Graphs Static site generator in PHP http://spress.yosymfony.com/ 1,050 commits 5 branches 25 releases Fetching contributors PHP 89.2% HTML 10.8% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 1.1 2.0 2.1 master Nothing to show v2.1.3 v2.1.2 v2.1.1 v2.1.0 v2.0.2 v2.0.1 v2.0.0 v2.0.0-rc v2.0.0-beta v2.0.0-alpha v1.1.1 v1.1.0 v1.1.0-rc.1 v1.1.0-beta.2 v1.1.0-beta.1 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v1.0.0-rc.3 v1.0.0-rc.2 v1.0.0-rc.1 v1.0.0-beta v0.2-alpha v0.1-alpha Nothing to show New pull request Latest commit 13efa9a Jul 3, 2016 yosymfony Updated dependencies Permalink Failed to load latest commit information. app New configuration value aimed to plugin manager builder for excluding… Jul 2, 2016 bin Avoids to stop Spress command if an error occurs when trying to load … Jul 2, 2016 src Merge branch '2.1': New configuration key: 'plugin_manager_builder' Jul 2, 2016 tests Fixed the truncated `title_path` attribute when the filename contains… Jun 3, 2016 .gitignore Deleted unused path Jan 2, 2016 .travis.yml Delete vendor folder to test Phar file generated Oct 15, 2015 CHANGELOG.md New configuration value aimed to plugin manager builder for excluding… Jul 2, 2016 LICENSE Minor changes Jul 24, 2015 README.md Fixed version Jun 5, 2016 appveyor.yml A few fixes related with PHPUnit Jan 9, 2016 box.json Fixed bug #33 Jan 25, 2015 build.xml Fixed a typo May 21, 2016 composer.json Fixed version Jun 5, 2016 composer.lock Updated dependencies Jul 3, 2016 phpunit.xml.dist Renamed Core/tests folder to Core/Tests Aug 5, 2015 README.md Spress - PHP Static site generator Spress is a static site generator built with Symfony components. See demo. License: MIT. Requirements Linux, Unix, Mac OS X or Windows. PHP >= 5.5. Composer. Community Documentation: spress.yosymfony.com. Mention @spress_cms on Twitter. Discuss and share your opinions in Gitter chat: Contributing When Contributing code to Spress, you must follow its coding standards. Spress follows PSR-2 coding style. Keep in mind a golden rule: Imitate the existing Spress code. Pull Resquests Fork the Spress repository. Create a new branch for each feature or improvement. New features: Send a pull request from each feature branch to master branch. Fixes: Send a pull request to 2.1 branch. Unit testing All pull requests must be accompanied by passing unit tests. Spress uses phpunit for testing. Getting Started Download the last release or clone repository git clone https://github.com/spress/Spress.git. Get vendors Create a blank site. Build your site. Get vendors Use Composer to get vendors: $ cd your-path $ composer.phar update spress command Spress command are located in bin/spress and you can use this command to create a new site or process your site. site:build Build your site in your configured destination, typically _site. site:build  [-s|--source=""./""] [--timezone=""...""] [--env=""dev""]             [--server] [--watch] [--drafts]             [--safe] --server The built-in server will run. --watch Watch for changes and regenerate your site automatically. --drafts To include draft posts in the generated site. --safe Disable all plugins. E.g $ spress site:build -s /your-site-dir How to load configuration for production environment: To create config_prod.yml with the options that will be overrided in config.yml. $ spress site:build --env=prod Scaffolding new:site Create a new site. new:site [path=""./""] [template=""blank""] [--force] [--all] --force option force to use the path even though exists and it's not empty. --all In blank template, creates the complete scaffold. E.g $ spress new:site /your-site-dir new:post The new:post command helps you generates new posts. By default, the command interacts with the developer to tweak the generation. Any passed option will be used as a default value for the interaction. new:post    [--title=""...""] [--layout=""default""] [--date=""...""]             [--tags=""...""] [--categories=""...""]` --title: The title of the post. --layout: The layout of the post. --date: The date assigned to the post. --tags: Comma separated list of tags. --categories: Comma separated list of categories. new:plugin The new:plugin command helps you generates new plugins. By default, the command interacts with the developer to tweak the generation. Any passed option will be used as a default value for the interaction. new:plugin  [--name=""...""] [--command-name=""...""] [--command-description=""...""]             [--command-help=""...""] [--author=""...""] [--email=""...""]             [--description=""...""] [--license=""MIT""] --name: The name of the plugins should follow the pattern vendor-name/plugin-name. --command-name: In case of you want to create a command plugin this is the name of the command. --command-description: The description of command in case of command plugin. --command-help: The description of command in case of command plugin. --author: The author of the plugin. --email: The Email of the author. --description: The description of your plugin. --license: The license under you publish your plugin. MIT by default. self-update self-update or selfupdate command replace your spress.phar by the latest version from spress.yosymfony.com. How to make spress.phar We are using Box Project for generating the .phar file. You may download Box: $ curl -LSs https://box-project.github.io/box2/installer.php | php Next: $ cd spress-folder $ box build  Unit tests You can run the unit tests with the following command: $ cd your-path $ composer.phar install $ phpunit Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/spress/Spress"	"An extensible tool that converts Markdown and Twig into HTML."	"true"
"HTTP"	"Buzz"	"https://github.com/kriswallsmith/Buzz"	"Another HTTP client."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1249"	"61"	"193"	"GitHub - kriswallsmith/Buzz: PHP's lightweight HTTP client Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 61 Star 1,249 Fork 193 kriswallsmith/Buzz Code Issues 48 Pull requests 23 Pulse Graphs PHP's lightweight HTTP client 351 commits 3 branches 15 releases 36 contributors PHP 99.1% Nginx 0.9% PHP Nginx Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags curlm master proxy Nothing to show v0.15 v0.14 v0.13 v0.12 v0.11 v0.10 v0.9 v0.8 v0.7 v0.6 v0.5 v0.4 v0.3 v0.2 v0.1 Nothing to show New pull request Latest commit d404166 Jun 25, 2015 kriswallsmith updated changelog Permalink Failed to load latest commit information. examples Squash Digest Auth into one Commit Jun 25, 2015 lib/Buzz Squash Digest Auth into one Commit Jun 25, 2015 test Squash Digest Auth into one Commit Jun 25, 2015 .gitignore Revert "".idea (phpstorm config) -> .gitignore"" Sep 4, 2014 .travis.yml Merge pull request #155 from sycamoreconsulting/travis-fix Jul 29, 2014 CHANGELOG.md updated changelog Jun 25, 2015 LICENSE Added MIT license Apr 7, 2011 README.md added travis image Apr 16, 2012 composer.json added phpunit to composer Feb 18, 2013 phpunit.xml.dist removed useless bootstrap Feb 27, 2013 README.md Buzz is a lightweight PHP 5.3 library for issuing HTTP requests. <?php  $browser = new Buzz\Browser(); $response = $browser->get('http://www.google.com');  echo $browser->getLastRequest().""\n""; echo $response; You can also use the low-level HTTP classes directly. <?php  $request = new Buzz\Message\Request('HEAD', '/', 'http://google.com'); $response = new Buzz\Message\Response();  $client = new Buzz\Client\FileGetContents(); $client->send($request, $response);  echo $request; echo $response; Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kriswallsmith/Buzz"	"Another HTTP client."	"true"
"HTTP"	"Guzzle"	"https://github.com/guzzle/guzzle"	"A comprehensive HTTP client."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7253"	"372"	"1140"	"GitHub - guzzle/guzzle: Guzzle, an extensible PHP HTTP client Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 372 Star 7,253 Fork 1,140 guzzle/guzzle Code Issues 35 Pull requests 5 Pulse Graphs Guzzle, an extensible PHP HTTP client http://guzzlephp.org/ 2,979 commits 2 branches 105 releases 235 contributors PHP 97.7% JavaScript 1.9% Makefile 0.4% PHP JavaScript Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 5.3 master Nothing to show v3.8.1 v3.8.0 v3.7.4 v3.7.3 v3.7.2 v3.7.1 v3.7.0 v3.6.0 v3.5.0 v3.4.3 v3.4.2 v3.4.1 v3.4.0 v3.3.1 v3.3.0 v3.2.0 v3.1.2 v3.1.1 v3.1.0 v3.0.7 v3.0.6 v3.0.5 v3.0.4 v3.0.3 v3.0.2 v3.0.1 v3.0.0 v2.8.8 v2.8.7 v2.8.6 v2.8.5 v2.8.4 v2.8.3 v2.8.2 v2.8.1 v2.8.0 v2.7.2 v2.7.1 v2.7.0 v2.6.6 v2.6.5 v2.6.4 v2.6.3 v2.6.2 v2.6.1 v2.6.0 v2.5.0 v2.4.1 v2.4.0 v2.3.2 v2.3.1 v2.3.0 v2.2.4 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.1.4 v2.1.3 v2.1.2 v2.1.1 v2.1.0 v2.0.5 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v1.0.0beta1 6.2.0 6.1.1 6.1.0 6.0.2 6.0.1 6.0.0 5.3.0 5.2.0 5.1.0 5.0.3 5.0.2 5.0.1 5.0.0 4.2.3 4.2.2 4.2.1 4.2.0 4.1.8 4.1.7 4.1.6 4.1.5 4.1.4 4.1.3 4.1.2 4.1.1 4.1.0 Nothing to show New pull request Latest commit 10a49d5 Jul 1, 2016 mtdowling committed on GitHub Merge pull request #1510 from guzzle/stream-read-content-length … Only read up to Content-Length in stream wrapper Permalink Failed to load latest commit information. build Vendoring burgomaster May 25, 2015 docs Fix typo in request-options.rst Jun 6, 2016 src Merge pull request #1510 from guzzle/stream-read-content-length Jul 1, 2016 tests Do not drain on HEAD requests Jul 1, 2016 .editorconfig Add editor config Apr 3, 2015 .gitattributes add .gitattributes, fix issue #1064 May 23, 2015 .gitignore Adding an easy way to package a zip and phar Aug 17, 2014 .travis.yml Merge pull request #1369 from Naktibalda/php-7.0-clean Jan 30, 2016 CHANGELOG.md 6.2.0 release Mar 21, 2016 LICENSE Update license year Jan 26, 2016 Makefile Updating makefile and travis.yml May 25, 2015 README.md Fixed a PHP namespace Jul 1, 2016 UPGRADING.md Adding mention of xml and json being removed. Closes #1238 Sep 6, 2015 composer.json require psr7 1.3.1 Jun 29, 2016 phpunit.xml.dist Adding the ability to add custom request options Sep 10, 2014 README.md Guzzle, PHP HTTP client Guzzle is a PHP HTTP client that makes it easy to send HTTP requests and trivial to integrate with web services. Simple interface for building query strings, POST requests, streaming large uploads, streaming large downloads, using HTTP cookies, uploading JSON data, etc... Can send both synchronous and asynchronous requests using the same interface. Uses PSR-7 interfaces for requests, responses, and streams. This allows you to utilize other PSR-7 compatible libraries with Guzzle. Abstracts away the underlying HTTP transport, allowing you to write environment and transport agnostic code; i.e., no hard dependency on cURL, PHP streams, sockets, or non-blocking event loops. Middleware system allows you to augment and compose client behavior. $client = new \GuzzleHttp\Client(); $res = $client->request('GET', 'https://api.github.com/user', [     'auth' => ['user', 'pass'] ]); echo $res->getStatusCode(); // 200 echo $res->getHeaderLine('content-type'); // 'application/json; charset=utf8' echo $res->getBody(); // {""type"":""User""...'  // Send an asynchronous request. $request = new \GuzzleHttp\Psr7\Request('GET', 'http://httpbin.org'); $promise = $client->sendAsync($request)->then(function ($response) {     echo 'I completed! ' . $response->getBody(); }); $promise->wait(); Help and docs Documentation stackoverflow Gitter Installing Guzzle The recommended way to install Guzzle is through Composer. # Install Composer curl -sS https://getcomposer.org/installer | php Next, run the Composer command to install the latest stable version of Guzzle: php composer.phar require guzzlehttp/guzzle After installing, you need to require Composer's autoloader: require 'vendor/autoload.php'; You can then later update Guzzle using composer: composer.phar update Version Guidance Version Status Packagist Namespace Repo Docs PSR-7 3.x EOL guzzle/guzzle Guzzle v3 v3 No 4.x EOL guzzlehttp/guzzle GuzzleHttp N/A N/A No 5.x Maintained guzzlehttp/guzzle GuzzleHttp v5 v5 No 6.x Latest guzzlehttp/guzzle GuzzleHttp v6 v6 Yes Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/guzzle/guzzle"	"A comprehensive HTTP client."	"true"
"HTTP"	"HTTPFul"	"https://github.com/nategood/httpful"	"A chainable HTTP client."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1091"	"78"	"232"	"GitHub - nategood/httpful: A Chainable, REST Friendly, PHP HTTP Client.  A sane alternative to cURL. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 78 Star 1,091 Fork 232 nategood/httpful Code Issues 40 Pull requests 18 Pulse Graphs A Chainable, REST Friendly, PHP HTTP Client. A sane alternative to cURL. http://phphttpclient.com 329 commits 4 branches 24 releases 40 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master r0.3.0 test-server Nothing to show v0.2.20 v0.2.19 v0.2.17 v0.2.16 v0.2.13 v0.2.12 v0.2.11 v0.2.10 v0.2.9 v0.2.8 v0.2.7 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.2 v0.1.0 Nothing to show New pull request Latest commit c1cd4d4 Oct 26, 2015 nategood Version bump Permalink Failed to load latest commit information. examples send May 21, 2014 src/Httpful Version bump Oct 26, 2015 tests Remove exec bits from non-exec files Jul 20, 2015 .gitignore cleanup Aug 3, 2013 .travis.yml travis: PHP 5.6 and 7.0 nightly added + few improvements Apr 28, 2015 LICENSE.txt adding MIT license Feb 15, 2012 README.md Version bump Oct 26, 2015 bootstrap.php more examples and helper functions Feb 27, 2012 build use /usr/bin/env php when building Mar 29, 2014 composer.json Version bump Oct 26, 2015 README.md Httpful Httpful is a simple Http Client library for PHP 5.3+. There is an emphasis of readability, simplicity, and flexibility – basically provide the features and flexibility to get the job done and make those features really easy to use. Features Readable HTTP Method Support (GET, PUT, POST, DELETE, HEAD, PATCH and OPTIONS) Custom Headers Automatic ""Smart"" Parsing Automatic Payload Serialization Basic Auth Client Side Certificate Auth Request ""Templates"" Sneak Peak Here's something to whet your appetite. Search the twitter API for tweets containing ""#PHP"". Include a trivial header for the heck of it. Notice that the library automatically interprets the response as JSON (can override this if desired) and parses it as an array of objects.  // Make a request to the GitHub API with a custom // header of ""X-Trvial-Header: Just as a demo"". $url = ""https://api.github.com/users/nategood""; $response = \Httpful\Request::get($url)     ->expectsJson()     ->withXTrivialHeader('Just as a demo')     ->send();  echo ""{$response->body->name} joined GitHub on "" .                         date('M jS', strtotime($response->body->created_at)) .""\n""; Installation Phar A PHP Archive (or .phar) file is available for downloading. Simply download the .phar, drop it into your project, and include it like you would any other php file. This method is ideal for smaller projects, one off scripts, and quick API hacking. include('httpful.phar'); $r = \Httpful\Request::get($uri)->sendIt(); ... Composer Httpful is PSR-0 compliant and can be installed using composer. Simply add nategood/httpful to your composer.json file. Composer is the sane alternative to PEAR. It is excellent for managing dependencies in larger projects. {     ""require"": {         ""nategood/httpful"": ""*""     } }  Install from Source Because Httpful is PSR-0 compliant, you can also just clone the Httpful repository and use a PSR-0 compatible autoloader to load the library, like Symfony's. Alternatively you can use the PSR-0 compliant autoloader included with the Httpful (simply require(""bootstrap.php"")). Build your Phar If you want the build your own Phar Archive you can use the build script included. Make sure that your php.ini has the Off or 0 value for the phar.readonly setting. Also you need to create ad empty downloads directory in the project root. Show Me More! You can checkout the Httpful Landing Page for more info including many examples and documentation. Contributing Httpful highly encourages sending in pull requests. When submitting a pull request please: All pull requests should target the dev branch (not master) Make sure your code follows the coding conventions Please use soft tabs (four spaces) instead of hard tabs Make sure you add appropriate test coverage for your changes Run all unit tests in the test directory via phpunit ./tests Include commenting where appropriate and add a descriptive pull request message Changelog 0.2.20 MINOR Move Response building logic into separate function PR #193 0.2.19 FEATURE Before send hook PR #164 MINOR More descriptive connection exceptions PR #166 0.2.18 FIX PR #149 FIX PR #150 FIX PR #156 0.2.17 FEATURE PR #144 Adds additional parameter to the Response class to specify additional meta data about the request/response (e.g. number of redirect). 0.2.16 FEATURE Added support for whenError to define a custom callback to be fired upon error. Useful for logging or overriding the default error_log behavior. 0.2.15 FEATURE I #131 Support for SOCKS proxy 0.2.14 FEATURE I #138 Added alternative option for XML request construction. In the next major release this will likely supplant the older version. 0.2.13 REFACTOR I #121 Throw more descriptive exception on curl errors REFACTOR I #122 Better proxy scrubbing in Request REFACTOR I #119 Better document the mimeType param on Request::body Misc code and test cleanup 0.2.12 REFACTOR I #123 Support new curl file upload method FEATURE I #118 5.4 HTTP Test Server FIX I #109 Typo FIX I #103 Handle also CURLOPT_SSL_VERIFYHOST for strictSsl mode 0.2.11 FIX I #99 Prevent hanging on HEAD requests 0.2.10 FIX I #93 Fixes edge case where content-length would be set incorrectly 0.2.9 FEATURE I #89 multipart/form-data support (a.k.a. file uploads)! Thanks @dtelaroli! 0.2.8 FIX Notice fix for Pull Request 86 0.2.7 FIX I #86 Remove Connection Established header when using a proxy 0.2.6 FIX I #85 Empty Content Length issue resolved 0.2.5 FEATURE I #80 I #81 Proxy support added with useProxy method. 0.2.4 FEATURE I #77 Convenience method for setting a timeout (seconds) $req->timeoutIn(10); FIX I #75 I #78 Bug with checking if digest auth is being used. 0.2.3 FIX Overriding default Mime Handlers FIX PR #73 Parsing http status codes 0.2.2 FEATURE Add support for parsing JSON responses as associative arrays instead of objects FEATURE Better support for setting constructor arguments on Mime Handlers 0.2.1 FEATURE PR #72 Allow support for custom Accept header 0.2.0 REFACTOR PR #49 Broke headers out into their own class REFACTOR PR #54 Added more specific Exceptions FIX PR #58 Fixes throwing an error on an empty xml response FEATURE PR #57 Adds support for digest authentication 0.1.6 Ability to set the number of max redirects via overloading followRedirects(int max_redirects) Standards Compliant fix to Accepts header Bug fix for bootstrap process when installed via Composer 0.1.5 Use DIRECTORY_SEPARATOR constant PR #33 PR #35 Added the raw_headers property reference to response. Compose request header and added raw_header to Request object. Fixed response has errors and added more comments for clarity. Fixed header parsing to allow the minimum (status line only) and also cater for the actual CRLF ended headers as per RFC2616. Added the perfect test Accept: header for all Acceptable scenarios see @b78e9e82cd9614fbe137c01bde9439c4e16ca323 for details. Added default User-Agent header User-Agent: Httpful/0.1.5 + curl version + server software + PHP version To bypass this ""default"" operation simply add a User-Agent to the request headers even a blank User-Agent is sufficient and more than simple enough to produce me thinks. Completed test units for additions. Added phpunit coverage reporting and helped phpunit auto locate the tests a bit easier. 0.1.4 Add support for CSV Handling PR #32 0.1.3 Handle empty responses in JsonParser and XmlParser 0.1.2 Added support for setting XMLHandler configuration options Added examples for overriding XmlHandler and registering a custom parser Removed the httpful.php download (deprecated in favor of httpful.phar) 0.1.1 Bug fix serialization default case and phpunit tests 0.1.0 Added Support for Registering Mime Handlers Created AbstractMimeHandler type that all Mime Handlers must extend Pulled out the parsing/serializing logic from the Request/Response classes into their own MimeHandler classes Added ability to register new mime handlers for mime types Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nategood/httpful"	"A chainable HTTP client."	"true"
"HTTP"	"PHP VCR"	"http://php-vcr.github.io/"	"A library for recording and replaying HTTP requests."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PHP-VCR | Record HTTP interactions while testing What? Features Documentation GITHUB Record HTTP interactions in your tests ...and replay them during future test runs for fast, deterministic and accurate tests. Disclaimer: Doing this in PHP is not as easy as in programming languages which support monkey patching – this project is not yet fully tested, so please use at your own risk! What? Instead of manually mocking API calls for your tests, record HTTP requests and replay them later. Faster tests If you run hundreds of tests, you don't want to hit a real API all the time. This slows down your test suite quite a bit. The faster your tests are, the faster you can iterate over code changes. Deterministic Can you run integration tests on your notebook? Testing against live APIs require those APIs to be online all the time, and you have to be online as well. Free yourself from those dependencies. Accurate One reason for manual mocking is, to get the exact same response every time your app makes a request. Not coding all those mocks for API responses speeds up your development process. This is a fork of the fabulous VCR for ruby library. Features Easy to use and extendable. Easy setup Automatically records and replays HTTP(s) interactions with minimal setup. No modifications to your production code necessary. Library support Supports common http functions and extensions like streamWrapper (fopen(), fread(), file_get_contents()), SoapClient and cUrl. HTTP isolation Disables all HTTP requests that you don't explicitly allow (except if configured). Configurable Easily configure request matching or add custom request matchers. Store HTTP interactions on disk in YAML or JSON. PHPUnit integration Supports PHPUnit. Recorded requests and responses can easily be inspected and edited. Soon: Privacy aware Automatically filters confidential or private information like emails, tokens and passwords. Lightningtalk Case Study with Behat PHP-VCR behat case study from Pascal Thormeier Documentation Still WIP but there is a little documentation. Quick install: composer require --dev php-vcr/php-vcr Installation Simple installation using composer. Turn on PHP-VCR in your test bootstrap file. More information Configuration Easily configure PHP-VCR to your needs. More information Code Examples Learn how to use PHP-VCR with: SoapClient and Guzzle PHP-VCR Contact:"	"null"	"null"	"A library for recording and replaying HTTP requests."	"true"
"HTTP"	"Requests"	"https://github.com/rmccue/Requests"	"A simple HTTP library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2141"	"127"	"308"	"GitHub - rmccue/Requests: Requests for PHP is a humble HTTP request library. It simplifies how you interact with other sites and takes away all your worries. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 127 Star 2,141 Fork 308 rmccue/Requests Code Issues 30 Pull requests 11 Pulse Graphs Requests for PHP is a humble HTTP request library. It simplifies how you interact with other sites and takes away all your worries. http://requests.ryanmccue.info/ 524 commits 5 branches 4 releases 34 contributors PHP 99.0% Other 1.0% PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages https-links master one-dot-six stream-input Nothing to show v1.6.1 v1.6.0 v1.5.0 v1.5 Nothing to show New pull request Latest commit 539cdfd Jul 12, 2016 rmccue committed on GitHub Merge pull request #223 from ocean90/proxy-instance … Support a Requests_Proxy_HTTP() instance for the proxy setting. Permalink Failed to load latest commit information. bin Add PEAR package builder Jun 16, 2012 docs Handles issue [#191](#191) Oct 29, 2015 examples Small doumentation change for readability May 5, 2015 library Docs: Add 'string' to the list of valid types for the proxy setting Jul 12, 2016 tests Tests: Fix RequestsTest_Proxy_HTTP::testConnectWithInstance() to use … Jul 12, 2016 .coveralls.yml Add Coveralls support Jul 31, 2013 .gitignore Add tests May 7, 2015 .travis.yml Fix mitmproxy to 0.15 Jan 31, 2016 CHANGELOG.md Update the changelog for 1.6 Oct 6, 2013 LICENSE Add IDNAEncoder class. Feb 6, 2012 README.md Merge pull request #164 from royopa/patch-1 Apr 19, 2016 composer.json Switch to Codecov for coverage reports Oct 2, 2015 package.xml.tpl Ensure the CA root data is included via PEAR Oct 6, 2013 README.md Requests for PHP Requests is a HTTP library written in PHP, for human beings. It is roughly based on the API from the excellent Requests Python library. Requests is ISC Licensed (similar to the new BSD license) and has no dependencies, except for PHP 5.2+. Despite PHP's use as a language for the web, its tools for sending HTTP requests are severely lacking. cURL has an interesting API, to say the least, and you can't always rely on it being available. Sockets provide only low level access, and require you to build most of the HTTP response parsing yourself. We all have better things to do. That's why Requests was born. $headers = array('Accept' => 'application/json'); $options = array('auth' => array('user', 'pass')); $request = Requests::get('https://api.github.com/gists', $headers, $options);  var_dump($request->status_code); // int(200)  var_dump($request->headers['content-type']); // string(31) ""application/json; charset=utf-8""  var_dump($request->body); // string(26891) ""[...]"" Requests allows you to send HEAD, GET, POST, PUT, DELETE, and PATCH HTTP requests. You can add headers, form data, multipart files, and parameters with simple arrays, and access the response data in the same way. Requests uses cURL and fsockopen, depending on what your system has available, but abstracts all the nasty stuff out of your way, providing a consistent API. Features International Domains and URLs Browser-style SSL Verification Basic/Digest Authentication Automatic Decompression Connection Timeouts Installation Install with Composer If you're using Composer to manage dependencies, you can add Requests with it. composer require rmccue/requests or {     ""require"": {         ""rmccue/requests"": "">=1.0""     } }  Install source from GitHub To install the source code: $ git clone git://github.com/rmccue/Requests.git  And include it in your scripts: require_once '/path/to/Requests/library/Requests.php';  You'll probably also want to register an autoloader: Requests::register_autoloader();  Install source from zip/tarball Alternatively, you can fetch a tarball or zipball: $ curl -L https://github.com/rmccue/Requests/tarball/master | tar xzv (or) $ wget https://github.com/rmccue/Requests/tarball/master -O - | tar xzv  Using a Class Loader If you're using a class loader (e.g., Symfony Class Loader) for PSR-0-style class loading: $loader->registerPrefix('Requests', 'path/to/vendor/Requests/library');  Documentation The best place to start is our prose-based documentation, which will guide you through using Requests. After that, take a look at the documentation for Requests::request(), where all the parameters are fully documented. Requests is 100% documented with PHPDoc. If you find any problems with it, create a new issue! Testing Requests strives to have 100% code-coverage of the library with an extensive set of tests. We're not quite there yet, but we're getting close. To run the test suite, first check that you have the PHP JSON extension enabled. Then simply: $ cd tests $ phpunit  If you'd like to run a single set of tests, specify just the name: $ phpunit Transport/cURL  Contribute Check for open issues or open a new issue for a feature request or a bug Fork the repository on Github to start making your changes to the master branch (or branch off of it) Write a test which shows that the bug was fixed or that the feature works as expected Send a pull request and bug me until I merge it Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rmccue/Requests"	"A simple HTTP library."	"true"
"HTTP"	"Retrofit"	"https://github.com/tebru/retrofit-php"	"A library to ease creation of REST API clients."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"73"	"9"	"12"	"GitHub - tebru/retrofit-php: Retrofit implementation in PHP.  A REST client for PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 73 Fork 12 tebru/retrofit-php Code Issues 11 Pull requests 1 Pulse Graphs Retrofit implementation in PHP. A REST client for PHP. 244 commits 2 branches 44 releases Fetching contributors PHP 97.5% Cucumber 1.3% ApacheConf 1.2% PHP Cucumber ApacheConf Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show v2.8.3 v2.8.2 v2.8.1 v2.8.0 v2.8.0-rc4 v2.8.0-rc3 v2.8.0-rc2 v2.8.0-rc1 v2.7.0 v2.6.1 v2.6.0 v2.5.5 v2.5.4 v2.5.3 v2.5.2 v2.5.1 v2.5.0 v2.4.0 v2.3.0 v2.2.0 v2.1.0 v2.0.6 v2.0.5 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v1.2.1 v1.2.0 v1.1.0 v1.0.0 v0.3.5 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.1 v0.2.0 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 540a050 May 11, 2016 natebrunette Merge pull request #65 from tonynelson19/patch-4 … Update installation.md Permalink Failed to load latest commit information. bin Removing coveralls, replacing with phar Apr 2, 2016 docs Merge pull request #65 from tonynelson19/patch-4 May 11, 2016 src Reversing logic of when to send after send event May 4, 2016 tests Reversing logic of when to send after send event May 4, 2016 .gitignore Updating gitignore Feb 4, 2016 .travis.yml Fixing issue with tests not working in prod env Apr 5, 2016 CHANGELOG.md Updating changelog Oct 14, 2015 CONTRIBUTING.md Update Documentation. Apr 2, 2015 CONTRIBUTORS.md Updated contributors Oct 14, 2015 LICENSE.md Add MIT license file. Apr 2, 2015 README.md Update README.md May 11, 2016 behat.yml Adding api to testing suite Apr 3, 2016 composer.json Adding option to dispatch events from http client adapter May 4, 2016 composer.lock Adding option to dispatch events from http client adapter May 4, 2016 phpunit.xml Adding api to testing suite Apr 4, 2016 README.md Retrofit PHP This library aims to ease creation of REST clients. It is blatantly stolen from square/retrofit and implemented in PHP. Overview Retrofit allows you to define your REST API with a simple interface. <?php  use Tebru\Retrofit\Annotation as Rest;  interface GitHubService {     /**  * @Rest\GET(""/users/{user}/list"")  * @Rest\Returns(""ArrayCollection<ListRepo>"")  */     public function listRepos($user); } Annotations are used to configure the endpoint. Then, the RestAdapter class generates a working implementation of the service interface. <?php  use Tebru\Retrofit\Adapter\RestAdapter;  $restAdapter = RestAdapter::builder()     ->setBaseUrl('https://api.github.com')     ->build();  $gitHubService = $restAdapter->create(GitHubService::class); Our newly created service is capable of making GET requests to /users/$user/list to return an ArrayCollection of ListRepo objects. $repos = $gitHubService->listRepos('octocat'); Usage examples are referenced from Square's documentation Installation & Usage composer require tebru/retrofit-php Please make sure you also install an http client. Currently guzzle is the only supported option composer require guzzlehttp/guzzle Documentation Detailed Installation Usage Annotation Reference License This project is licensed under the MIT license. Please see the LICENSE file for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tebru/retrofit-php"	"A library to ease creation of REST API clients."	"true"
"HTTP"	"zend-diactoros"	"https://github.com/zendframework/zend-diactoros"	"PSR-7 HTTP Message implementation."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"287"	"50"	"78"	"GitHub - zendframework/zend-diactoros: PSR-7 HTTP Message implementation Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 287 Fork 78 zendframework/zend-diactoros Code Issues 19 Pull requests 17 Pulse Graphs PSR-7 HTTP Message implementation 890 commits 3 branches 19 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages master Nothing to show 1.3.5 1.3.4 1.3.3 1.3.2 1.3.1 1.3.0 1.2.1 1.2.0 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit b4e7758 Apr 28, 2016 weierophinney Merge branch 'feature/mkdocs' … Close #170 Permalink Failed to load latest commit information. doc/book Prepared documentation for publication Apr 28, 2016 src Accept HTTP/2 protocol Mar 17, 2016 test Accept HTTP/2 protocol Mar 17, 2016 .coveralls.yml [travis-ci] Push coverage report to coveralls.io May 26, 2015 .gitattributes Re-added CONTRIBUTING.md, per @Maks3w Oct 16, 2015 .gitignore Prepared documentation for publication Apr 28, 2016 .scrutinizer.yml Added scrutinizer config Aug 25, 2014 .travis.yml Prepared documentation for publication Apr 28, 2016 CHANGELOG.md Added CHANGELOG for #170 Apr 28, 2016 CONDUCT.md Added code manifesto as code of conduct Mar 5, 2016 CONTRIBUTING.md Merge pull request #138 from settermjd/fix-typo-in-docs Mar 17, 2016 LICENSE.md Happy new year 2016 Dec 31, 2015 README.md Prepared documentation for publication Apr 28, 2016 composer.json Merge pull request #131 from snapshotpl/php-7 Mar 17, 2016 mkdocs.yml Prepared documentation for publication Apr 28, 2016 phpcs.xml [cs] Remove spaces in blank lines too Jun 2, 2015 phpunit.xml.dist Only perform coverage for the src directory Jun 24, 2015 README.md zend-diactoros Master: Develop: Diactoros (pronunciation: /dɪʌktɒrɒs/): an epithet for Hermes, meaning literally, ""the messenger."" This package supercedes and replaces phly/http. zend-diactoros is a PHP package containing implementations of the accepted PSR-7 HTTP message interfaces, as well as a ""server"" implementation similar to node's http.Server. File issues at https://github.com/zendframework/zend-diactoros/issues Issue patches to https://github.com/zendframework/zend-diactoros/pulls Documentation Documentation is available at: https://zendframework.github.io/zend-diactoros/ Source files for documentation are in the doc/ tree. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zendframework/zend-diactoros"	"PSR-7 HTTP Message implementation."	"true"
"Scraping"	"Embed"	"https://github.com/oscarotero/Embed"	"An information extractor from any web service or page."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"814"	"53"	"104"	"GitHub - oscarotero/Embed: Get info from any web service or page Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 53 Star 814 Fork 104 oscarotero/Embed Code Issues 1 Pull requests 0 Pulse Graphs Get info from any web service or page http://oscarotero.com/embed2/demo 745 commits 2 branches 87 releases 20 contributors PHP 99.6% CSS 0.4% PHP CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master v1.x Nothing to show v2.7.4 v2.7.3 v2.7.2 v2.7.1 v2.7.0 v2.6.9 v2.6.8 v2.6.7 v2.6.6 v2.6.5 v2.6.4 v2.6.3 v2.6.2 v2.6.1 v2.6.0 v2.5.12 v2.5.11 v2.5.10 v2.5.9 v2.5.8 v2.5.7 v2.5.6 v2.5.5 v2.5.4 v2.5.3 v2.5.2 v2.5.0 v2.4.5 v2.4.4 v2.4.3 v2.4.2 v2.4.1 v2.4.0 v2.3.0 v2.2.7 v2.2.6 v2.2.5 v2.2.4 v2.2.3 v2.2.2 v2.2.1 v2.2 v2.1.2 v2.1.1 v2.1.0 v2.0.1 v2.0 v1.8.4 v1.8.3 v1.8.2 v1.8.1 v1.8.0 v1.7.0 v1.6.0 v1.5.9 v1.5.8 v1.5.7 v1.5.6 v1.5.5 v1.5.4 v1.5.3 v1.5.2 v1.5.1 v1.5.0 v1.4.6 v1.4.5 v1.4.4 v1.4.3 v1.4.1 v1.4.0 v1.3.8 v1.3.7 v1.3.6 v1.3.5 v1.3.4 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.1 v1.2.0 v1.1.1 v1.1.0 v1.0.2 v1.0.1 2.5.1 1.4.2 Nothing to show New pull request Latest commit d43ee90 Jul 14, 2016 oscarotero committed on GitHub Merge pull request #155 from panakour/master … Fixed archive comment Permalink Failed to load latest commit information. demo added basic license implementation #125 Apr 7, 2016 src Fixed archive comment Jul 14, 2016 tests fixed scribd oembed Jul 9, 2016 .gitattributes included public suffix #150 Jun 9, 2016 .gitignore Remove platform specific files Nov 5, 2015 .travis.yml restore travis to execute all tests Feb 6, 2016 LICENSE Returning R letters Nov 5, 2015 README.md Update README.md May 24, 2016 composer.json removed php7cc Feb 5, 2016 phpunit.xml use Curl for tests Aug 24, 2015 README.md  Embed PHP library to get information from any web page (using oembed, opengraph, twitter-cards, scrapping the html, etc). It's compatible with any web service (youtube, vimeo, flickr, instagram, etc) and has adapters to some sites like (archive.org, github, facebook, etc). Requirements: PHP 5.4+ Curl library installed If you need PHP 5.3 support, use the 1.x version (but not maintained anymore) Online demo http://oscarotero.com/embed2/demo Installation This package is installable and autoloadable via Composer as embed/embed. $ composer require embed/embed  If you don't use composer, you have to download the package and include the autoloader: include('Embed/src/autoloader.php'); Usage use Embed\Embed;  //Load any url: $info = Embed::create('https://www.youtube.com/watch?v=PP1xn5wHtxE');  //Get content info  $info->title; //The page title $info->description; //The page description $info->url; //The canonical url $info->type; //The page type (link, video, image, rich) $info->tags; //The page keywords (tags)  $info->images; //List of all images found in the page $info->image; //The image choosen as main image $info->imageWidth; //The width of the main image $info->imageHeight; //The height of the main image  $info->code; //The code to embed the image, video, etc $info->width; //The width of the embed code $info->height; //The height of the embed code $info->aspectRatio; //The aspect ratio (width/height)  $info->authorName; //The resource author  $info->authorUrl; //The author url  $info->providerName; //The provider name of the page (Youtube, Twitter, Instagram, etc) $info->providerUrl; //The provider url $info->providerIcons; //All provider icons found in the page $info->providerIcon; //The icon choosen as main icon  $info->publishedDate; //The published date of the resource $info->license; //The license url of the resource $info->linkedData; //The linked-data info (http://json-ld.org/) Customization You can set some options using an array as second argument. In this array you can configure the adapters, providers, resolvers, etc. The adapter The adapter is the class that get all information of the page from the providers and choose the best result for each value. For example, a page can provide multiple titles from opengraph, twitter cards, oembed, the <title> html element, etc, so the adapter get all this titles and choose the best one. Embed has an generic adapter called ""Webpage"" to use in any web but has also some specific adapters for sites like archive.org, facebook, google, github, spotify, etc, that provides information using their own apis, or have any other special issue. You can configure these adapters and even create your own adapter, that must implement the Embed\Adapters\AdapterInterface. The available options for the adapters are: minImageWidth (int): Minimal image width used to choose the main image minImageHeight (int): Minimal image height used to choose the main image imagesBlacklist (array): Images that you don't want to be used. Could be plain text or Url match pattern. getBiggerImage (bool): Choose the bigger image as the main image (instead the first found, that usually is the most relevant). getBiggerIcon (bool): The same than getBiggerImage but used to choose the main icon $config = [     'adapter' => [         'class' => 'MyCustomClass', //Your custom adapter          'config' => [             'minImageWidth' => 16,             'minImageHeight' => 16,             'imagesBlacklist' => null,             'getBiggerImage' => false,             'getBiggerIcon' => false,         ]     ] ]; The providers The providers get the data from different sources. Each source has it's own provider. For example, there is a provider for opengraph, other for twitter cards, for oembed, html, etc. The providers that receive options are: oembed Used to get data from oembed api if it's available. It accepts two options: parameters (array): Extra query parameters to send with the oembed request embedlyKey (string): If it's defined, use embed.ly api as fallback oembed provider. iframelyKey (string): If it's defined, use iframe.ly api as fallback oembed provider. html Used to get data directly from the html code of the page: maxImages (int): Max number of images fetched from the html code (searching for the <img> elements). By default is -1 (no limit). Use 0 to no get images. externalImages (bool|array): By default is false, this means that images located in other domains are not allowed. You can set true (allow all) or provide an array of url patterns. google This provider is used only for google maps, to generate the embed code using the embed api key (string): the key used soundcloud Used only for soundcloud pages, to get information using its api. key (string): to get info from soundcloud API. The request resolver Embed uses the Embed\RequestResolvers\Curl class to resolve all requests using the curl library. You can set options to the curl request or use your custom resolver creating a class implementing the Embed\RequestResolvers\RequestResolverInterface. The resolver configuration is defined under the ""resolver"" key and it has two options: class: Your custom class name if you want to use your own implementation config: The options passed to the class. If you use the default curl class, the config are the same than the curl_setopt PHP function // CURL $config = [     'resolver' => [         'class' => 'Embed\\RequestResolvers\\Curl', // The default resolver used          'config' => [             CURLOPT_MAXREDIRS => 20,             CURLOPT_CONNECTTIMEOUT => 10,             CURLOPT_TIMEOUT => 10,             CURLOPT_SSL_VERIFYPEER => false,             CURLOPT_SSL_VERIFYHOST => false,             CURLOPT_ENCODING => '',             CURLOPT_AUTOREFERER => true,             CURLOPT_USERAGENT => 'Embed PHP Library',             CURLOPT_IPRESOLVE => CURL_IPRESOLVE_V4,         ]     ] ];  // Guzzle (5.x) $config = [     'resolver' => [         'class' => 'Embed\\RequestResolvers\\Guzzle5', // Guzzle5 resolver used          'config' => [             // optional: if you need to use your custom Guzzle instance             'client' => $myGuzzleClient,         ]     ] ]; You can see here the RequestResolvers included. Image info To check the images and get their mimetype and dimmensions, we have the class Embed\ImageInfo\Curl. This class uses curl to make request, get the first bytes to get the image type and dimmensions and close the connection. So the image wont be downloaded entirely, just until the downloaded data is enought to get this information. Like the resolver class, you can provide your own image class (it must implement the Embed\ImageInfo\ImageInfoInterface) and/or change the configuration. The available options are the same: class: Your custom class name if you want to use your own implementation config: The options passed to the class. If you use the default curl class, the config are the same than the curl_setopt PHP function //CURL $config = [     'image' => [         'class' => 'Embed\\ImageInfo\\Curl', //The default imageInfo used          'config' => [             CURLOPT_MAXREDIRS => 20,             CURLOPT_CONNECTTIMEOUT => 10,             CURLOPT_TIMEOUT => 10,             CURLOPT_SSL_VERIFYPEER => false,             CURLOPT_SSL_VERIFYHOST => false,             CURLOPT_ENCODING => '',             CURLOPT_AUTOREFERER => true,             CURLOPT_USERAGENT => 'Embed PHP Library',             CURLOPT_IPRESOLVE => CURL_IPRESOLVE_V4,         ]     ] ];  // Guzzle (5.x) $config = [     'image' => [         'class' => 'Embed\\ImageInfo\\Guzzle5',          'config' => [             'client' => $myGuzzleClient,         ]     ] ]; You can see here the ImageInfo implementations included. Full configuration example use Embed\Embed;  $config = [     'adapter' => [         'config' => [             'minImageWidth' => 16,             'minImageHeight' => 16,             'imagesBlacklist' => [                 'http://example.com/full/path/to/image.jpg',                 'http?://test.*/*.png/',                 '*/bad_image.gif'             ]         ]     ],     'providers' => [         'oembed' => [             'parameters' => [],             'embedlyKey' => null         ],         'html' => [             'maxImages' => 3         ],         'facebook' => [             'key' => 'our-access-token'         ]     ],     'resolver' => [         'config' => [             CURLOPT_USERAGENT => 'My spider',             CURLOPT_MAXREDIRS => 3         ]     ]     'image' => [         'class' => 'App\\MyImageInfoClass'     ] ];  //To use it: $info = Embed::create('https://www.youtube.com/watch?v=PP1xn5wHtxE', $config); Access to more data As said before, the adapter get the data from all providers and choose the best values. But you can get the data returned by a specific provider: use Embed\Embed;  //Get the info $info = Embed::create('https://www.youtube.com/watch?v=PP1xn5wHtxE');  //Get the oembed provider $oembed = $info->getProvider('oembed');  //Get the oembed title: echo $oembed->getTitle();  //Get any value returned by oembed api echo $oembed->bag->get('author_name'); In versions >= 2.7, you can access also to the data returned by the requests: use Embed\Embed;  //Get the info $info = Embed::create('https://www.youtube.com/watch?v=PP1xn5wHtxE');  //Get the request instance $request = $info->getRequest();  //Get the info returned by curl $request->getRequestInfo();  //Get all http headers $request->getHeaders();  //Get all images requests foreach ($info->getImagesRequests() as $url => $request) {     $request->getHeaders(); } Donations If this library is useful for you, consider to donate to the author. Buy me a beer 🍺 Thanks in advance! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/oscarotero/Embed"	"An information extractor from any web service or page."	"true"
"Scraping"	"Goutte"	"https://github.com/FriendsOfPHP/Goutte"	"A simple web scraper."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4109"	"270"	"566"	"GitHub - FriendsOfPHP/Goutte: Goutte, a simple PHP Web Scraper Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 270 Star 4,109 Fork 566 FriendsOfPHP/Goutte Code Issues 51 Pull requests 9 Pulse Graphs Goutte, a simple PHP Web Scraper 272 commits 2 branches 18 releases 57 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 master Nothing to show v3.1.2 v3.1.1 v3.1.0 v3.0.0 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.1.0 Nothing to show New pull request Latest commit 3cbc6ed Nov 5, 2015 fabpot feature #244 allow installation of this component with symfony3 (benj… … …i07)  This PR was merged into the 3.1-dev branch.  Discussion ----------  allow installation of this component with symfony3  I create this PR so I can run my Behat test with Symfony3 and the GoutteDriver  Commits -------  2b4e1d8 allow installation with symfony3 Permalink Failed to load latest commit information. Goutte Fix the handling of cookie for URLs with a custom port Aug 29, 2015 .gitignore removed the phar file from the repository Jan 10, 2014 .travis.yml Integrate Guzzle 6.0 Jun 21, 2015 LICENSE updated license year Jan 4, 2013 README.rst removed phar support Jun 29, 2015 box.json removed the phar file from the repository Jan 10, 2014 composer.json allow installation with symfony3 Nov 5, 2015 phpunit.xml.dist moved tests inside the Goutte directory May 15, 2012 README.rst Goutte, a simple PHP Web Scraper Goutte is a screen scraping and web crawling library for PHP. Goutte provides a nice API to crawl websites and extract data from the HTML/XML responses. Requirements Goutte depends on PHP 5.5+ and Guzzle 6+. Tip If you need support for PHP 5.4 or Guzzle 4-5, use Goutte 2.x (latest phar). If you need support for PHP 5.3 or Guzzle 3, use Goutte 1.x (latest phar). Installation Add fabpot/goutte as a require dependency in your composer.json file: composer require fabpot/goutte Usage Create a Goutte Client instance (which extends Symfony\Component\BrowserKit\Client): use Goutte\Client;  $client = new Client(); Make requests with the request() method: // Go to the symfony.com website $crawler = $client->request('GET', 'http://www.symfony.com/blog/'); The method returns a Crawler object (Symfony\Component\DomCrawler\Crawler). Fine-tune cURL options: $client->getClient()->setDefaultOption('config/curl/'.CURLOPT_TIMEOUT, 60); Click on links: // Click on the ""Security Advisories"" link $link = $crawler->selectLink('Security Advisories')->link(); $crawler = $client->click($link); Extract data: // Get the latest post in this category and display the titles $crawler->filter('h2 > a')->each(function ($node) {     print $node->text().""\n""; }); Submit forms: $crawler = $client->request('GET', 'http://github.com/'); $crawler = $client->click($crawler->selectLink('Sign in')->link()); $form = $crawler->selectButton('Sign in')->form(); $crawler = $client->submit($form, array('login' => 'fabpot', 'password' => 'xxxxxx')); $crawler->filter('.flash-error')->each(function ($node) {     print $node->text().""\n""; }); More Information Read the documentation of the BrowserKit and DomCrawler Symfony Components for more information about what you can do with Goutte. Pronunciation Goutte is pronounced goot i.e. it rhymes with boot and not out. Technical Information Goutte is a thin wrapper around the following fine PHP libraries: Symfony Components: BrowserKit, CssSelector and DomCrawler; Guzzle HTTP Component. License Goutte is licensed under the MIT license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/FriendsOfPHP/Goutte"	"A simple web scraper."	"true"
"Scraping"	"PHP Spider"	"https://github.com/mvdbos/php-spider"	"A configurable and extensible PHP web spider."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"441"	"48"	"98"	"GitHub - mvdbos/php-spider: A configurable and extensible PHP web spider Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 48 Star 441 Fork 98 mvdbos/php-spider Code Issues 5 Pull requests 2 Pulse Graphs A configurable and extensible PHP web spider https://mvdbos.github.io/php-spider/ 116 commits 3 branches 2 releases Fetching contributors PHP 86.6% HTML 12.4% Shell 1.0% PHP HTML Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/extract-discovereduris gh-pages master Nothing to show v0.2 v0.1 Nothing to show New pull request Latest commit faa1969 Feb 3, 2016 mvdbos Merge pull request #29 from ReadmeCritic/master … Update README URLs based on HTTP redirects Permalink Failed to load latest commit information. bin code style fixes Jan 29, 2016 docs added sphinx docs skeleton Mar 11, 2013 example removed loghander and statshandler dependency Jan 29, 2016 src/VDB/Spider added test to and cleanup of discovererset testcase Jan 29, 2016 tests/VDB/Spider/Tests added test to and cleanup of discovererset testcase Jan 29, 2016 .gitignore Added coveralls and phplint integration Dec 30, 2015 .php_cs code style fixes Jan 29, 2016 .scrutinizer.yml set failure conditions for Scrutinizer build Jan 2, 2016 .travis.yml Simplified deps and upgraded to Guzzle 6 Jan 3, 2016 LICENSE added license Mar 4, 2013 README.md Update README URLs based on HTTP redirects Feb 1, 2016 composer.json Simplified deps and upgraded to Guzzle 6 Jan 3, 2016 phpmd-tests.xml tweaks to PHPMD settings Dec 30, 2015 phpmd.xml tweaks to PHPMD settings Dec 30, 2015 phpunit.xml.dist Added coveralls and phplint integration Dec 30, 2015 README.md PHP-Spider Features supports two traversal algorithms: breadth-first and depth-first supports crawl depth limiting, queue size limiting and max downloads limiting supports adding custom URI discovery logic, based on XPath, CSS selectors, or plain old PHP comes with a useful set of URI filters, such as Domain limiting supports custom URI filters, both prefetch (URI) and postfetch (Resource content) supports custom request handling logic comes with a useful set of persistence handlers (memory, file. Redis soon to follow) supports custom persistence handlers collects statistics about the crawl for reporting dispatches useful events, allowing developers to add even more custom behavior supports a politeness policy will soon come with many default discoverers: RSS, Atom, RDF, etc. will soon support multiple queueing mechanisms (file, memcache, redis) will eventually support distributed spidering with a central queue Installation The easiest way to install PHP-Spider is with composer. Find it on Packagist. Usage This is a very simple example. This code can be found in example/example_simple.php. For a more complete example with some logging, caching and filters, see example/example_complex.php. That file contains a more real-world example. First create the spider $spider = new Spider('http://www.dmoz.org'); Add a URI discoverer. Without it, the spider does nothing. In this case, we want all <a> nodes from a certain <div> $spider->getDiscovererSet()->set(new XPathExpressionDiscoverer(""//div[@id='catalogs']//a"")); Set some sane options for this example. In this case, we only get the first 10 items from the start page. $spider->getDiscovererSet()->maxDepth = 1; $spider->getQueueManager()->maxQueueSize = 10; Add a listener to collect stats from the Spider and the QueueManager. There are more components that dispatch events you can use. $statsHandler = new StatsHandler(); $spider->getQueueManager()->getDispatcher()->addSubscriber($statsHandler); $spider->getDispatcher()->addSubscriber($statsHandler); Execute the crawl $spider->crawl(); When crawling is done, we could get some info about the crawl echo ""\n ENQUEUED: "" . count($statsHandler->getQueued()); echo ""\n SKIPPED: "" . count($statsHandler->getFiltered()); echo ""\n FAILED: "" . count($statsHandler->getFailed()); echo ""\n PERSISTED: "" . count($statsHandler->getPersisted()); Finally we could do some processing on the downloaded resources. In this example, we will echo the title of all resources echo ""\n\nDOWNLOADED RESOURCES: ""; foreach ($spider->getDownloader()->getPersistenceHandler() as $resource) {     echo ""\n - "" . $resource->getCrawler()->filterXpath('//title')->text(); }  Contributing Contributing to PHP-Spider is as easy as Forking the repository on Github and submitting a Pull Request. The Symfony documentation contains an excellent guide for how to do that properly here: Submitting a Patch. There a few requirements for a Pull Request to be accepted: Follow the coding standards: PHP-Spider follows the coding standards defined in the PSR-0, PSR-1 and PSR-2 Coding Style Guides; Prove that the code works with unit tests; Note: An easy way to check if your code conforms to PHP-Spider is by running PHP CodeSniffer on your local code. Please make sure you use the PSR-2 standard: --standard=PSR2 Support For things like reporting bugs and requesting features it is best to create an issue here on GitHub. It is even better to accompany it with a Pull Request. ;-) License PHP-Spider is licensed under the MIT license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mvdbos/php-spider"	"A configurable and extensible PHP web spider."	"true"
"Middlewares"	"PSR7-Middlewares"	"https://github.com/oscarotero/psr7-middlewares"	"Inspiring collection of handy middlewares."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"361"	"38"	"29"	"GitHub - oscarotero/psr7-middlewares: Collection of PSR-7 middlewares Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 38 Star 361 Fork 29 oscarotero/psr7-middlewares Code Issues 3 Pull requests 0 Pulse Graphs Collection of PSR-7 middlewares 503 commits 3 branches 61 releases 10 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 4.x-dev develop master Nothing to show v3.16.1 v3.16.0 v3.15.1 v3.15.0 v3.14.3 v3.14.2 v3.14.1 v3.14.0 v3.13.2 v3.13.1 v3.13.0 v3.12.4 v3.12.3 v3.12.2 v3.12.1 v3.12.0 v3.11.2 v3.11.1 v3.11.0 v3.10.2 v3.10.1 v3.10.0 v3.9.3 v3.9.2 v3.9.1 v3.9.0 v3.8.1 v3.8.0 v3.7.5 v3.7.4 v3.7.3 v3.7.2 v3.7.1 v3.7.0 v3.6.0 v3.5.1 v3.5.0 v3.4.0 v3.3.3 v3.3.2 v3.3.1 v3.3.0 v3.2.0 v3.1.0 v3.0.1 v3.0.0 v2.2.0 v2.1.1 v2.1.0 v2.0.2 v2.0.1 v2.0.0 v1.5.0 v1.4.0 v1.3.0 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.0 v1.0.0 Nothing to show New pull request Latest commit f5591f0 Jun 10, 2016 oscarotero added statusCode callable to ErrorHandler Permalink Failed to load latest commit information. src added statusCode callable to ErrorHandler Jun 10, 2016 tests ErrorHandler: created new empty body before execute the callback #35 May 22, 2016 .gitattributes fixed fileTrait Oct 2, 2015 .gitignore sensiolab fixes Jan 12, 2016 .travis.yml improved travis configuration Nov 28, 2015 LICENSE doc fixes Apr 19, 2016 README.md added middleman dispatcher to readme May 17, 2016 composer.json updated dev dependencies May 3, 2016 phpunit.xml tests and other fixes Dec 29, 2015 README.md psr7-middlewares Collection of PSR-7 middlewares. Requirements PHP >= 5.5 A PSR-7 HTTP Message implementation, for example zend-diactoros A PSR-7 middleware dispatcher compatible with the following signature: use Psr\Http\Message\RequestInterface; use Psr\Http\Message\ResponseInterface;  function (RequestInterface $request, ResponseInterface $response, callable $next) {     // ... } So, you can use these midlewares with: Relay Expressive Slim 3 Spiral Middleman etc... Installation This package is installable and autoloadable via Composer as oscarotero/psr7-middlewares. $ composer require oscarotero/psr7-middlewares  Usage example: use Psr7Middlewares\Middleware;  use Relay\RelayBuilder; use Zend\Diactoros\Response; use Zend\Diactoros\ServerRequestFactory; use Zend\Diactoros\Stream;  //Set a stream factory used by some middlewares //(Required only if Zend\Diactoros\Stream is not detected) Middleware::setStreamFactory(function ($file, $mode) {     return new Stream($file, $mode); });  //Create a relay dispatcher and add some middlewares: $relay = new RelayBuilder();  $dispatcher = $relay->newInstance([      //Calculate the response time     Middleware::responseTime(),      //Add an Uuid to request     Middleware::uuid(),      //Minify the result     Middleware::minify(),      //Handle errors     Middleware::errorHandler()->catchExceptions(true),      //Override the method using X-Http-Method-Override header     Middleware::methodOverride(),      //Parse the request payload     Middleware::payload(),      //Remove the path prefix     Middleware::basePath('/my-site/web'),      //Remove the trailing slash     Middleware::trailingSlash(),      //Digest authentication     Middleware::digestAuthentication(['username' => 'password']),      //Get the client ip     Middleware::clientIp(),      //Allow only some ips     Middleware::firewall(['127.0.0.*']),      //Detects the user preferred language     Middleware::languageNegotiator(['gl', 'es', 'en']),      //Detects the format     Middleware::formatNegotiator(),      //Adds the php debug bar     Middleware::debugBar(),      //Execute fast route     Middleware::fastRoute($app->get('dispatcher')), ]);  $response = $dispatcher(ServerRequestFactory::fromGlobals(), new Response()); Available middlewares AccessLog AttributeMapper AuraRouter AuraSession BasePath BasicAuthentication BlockSpam Cache ClientIp Cors Csp Csrf DebugBar Delay DetectDevice DigestAuthentication EncodingNegotiator ErrorHandler Expires FastRoute FormTimestamp Firewall FormatNegotiator Geolocate GoogleAnalytics Honeypot Https ImageTransformer LanguageNegotiation LeagueRoute MethodOverride Minify Payload PhpSession Piwik ReadResponse Recaptcha Rename ResponseTime Robots SaveResponse Shutdown TrailingSlash Uuid Whoops Www AccessLog To generate access logs for each request using the Apache's access log format. This middleware requires a Psr log implementation, for example monolog: use Psr7Middlewares\Middleware; use Psr7Middlewares\Middleware\AuraRouter; use Monolog\Logger; use Monolog\Handler\ErrorLogHandler;  //Create the logger $logger = new Logger('access'); $logger->pushHandler(new ErrorLogHandler());  $middlewares = [      //Required to get the Ip     Middleware::ClientIp(),      Middleware::AccessLog($logger) //Instance of Psr\Log\LoggerInterface         ->combined(true)           //(optional) To use the Combined Log Format instead the Common Log Format ]; AttributeMapper Maps middleware specific attribute to regular request attribute under desired name: use Psr7Middlewares\Middleware;  $middlewares = [      //Example with authentication     Middleware::BasicAuthentication([         'username1' => 'password1',         'username2' => 'password2'     ]),      //Map the key used by this middleware     Middleware::attributeMapper([         Middleware\BasicAuthentication::KEY => 'auth:username'     ]),      function ($request, $response, $next) {         //We can get the username as usual         $username = BasicAuthentication::getUsername($request);          //But also using the ""auth:username"" attribute name.         assert($username === $request->getAttribute('auth:username'));          return $next($request, $response);     } ]; AuraRouter To use Aura.Router (3.x) as a middleware: use Psr7Middlewares\Middleware; use Psr7Middlewares\Middleware\AuraRouter; use Aura\Router\RouterContainer;  //Create the router $router = new RouterContainer();  $map = $router->getMap();  $map->get('hello', '/hello/{name}', function ($request, $response, $myApp) {      //The route parameters are stored as attributes     $name = $request->getAttribute('name');      //You can get also the route instance     $route = AuraRouter::getRoute($request);      //Write directly in the response's body     $response->getBody()->write('Hello '.$name);      //or echo the output (it will be captured and writted into body)     echo 'Hello world';      //or return a string     return 'Hello world';      //or return a new response     return $response->withStatus(200); });  //Add to the dispatcher $middlewares = [      Middleware::AuraRouter($router) //Instance of Aura\Router\RouterContainer         ->arguments($myApp)         //(optional) append more arguments to the controller ]; AuraSession Creates a new Aura.Session instance with the request. use Psr7Middlewares\Middleware; use Psr7Middlewares\Middleware\AuraSession;  $middlewares = [      Middleware::AuraSession(),         ->factory($sessionFactory) //(optional) Intance of Aura\Session\SessionFactory         ->name('my-session-name'), //(optional) custom session name      function ($request, $response, $next) {         //Get the session instance         $session = AuraSession::getSession($request);          return $response;     } ]; BasePath Removes the prefix from the uri path of the request. This is useful to combine with routers if the root of the website is in a subdirectory. For example, if the root of your website is /web/public, a request with the uri /web/public/post/34 will be converted to /post/34. You can provide the prefix to remove or let the middleware autodetect it. In the router you can retrieve the prefix removed or a callable to generate more urls with the base path. use Psr7Middlewares\Middleware; use Psr7Middlewares\Middleware\BasePath;  $middlewares = [      Middleware::BasePath('/web/public') // (optional) The path to remove...         ->autodetect(true),             // (optional) ...or/and autodetect the base path      function ($request, $response, $next) {         //Get the removed prefix         $basePath = BasePath::getBasePath($request);          //Get a callable to generate full paths         $generator = BasePath::getGenerator($request);          $generator('/other/path'); // /web/public/other/path          return $response;     } ]; BasicAuthentication Implements the basic http authentication. You have to provide an array with all users and password: use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::BasicAuthentication([             'username1' => 'password1',             'username2' => 'password2'         ])         ->realm('My realm'), //(optional) change the realm value      function ($request, $response, $next) {         $username = BasicAuthentication::getUsername($request);          return $next($request, $response);     } ]; BlockSpam To block referral spam usin the piwik/referrer-spam-blacklist list use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::BlockSpam('spammers.txt'), //(optional) to set a custom spammers list instead the piwik's list ]; Cache Requires micheh/psr7-cache. Saves the responses' headers in cache and returns a 304 response (Not modified) if the request is cached. It also adds Cache-Control and Last-Modified headers to the response. You need a cache library compatible with psr-6. use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::Cache(new Psr6CachePool()) //the PSR-6 cache implementation         ->cacheControl('max-age=3600'),    //(optional) to add this Cache-Control header to all responses ]; ClientIp Detects the client ip(s). use Psr7Middlewares\Middleware; use Psr7Middlewares\Middleware\ClientIp;  $middlewares = [      Middleware::ClientIp()         ->remote()  // (optional) Hack to get the ip from localhost environment         ->headers([ // (optional) to change the trusted headers             'Client-Ip',             'X-Forwarded-For',             'X-Forwarded'         ]),      function ($request, $response, $next) {         //Get the user ip         $ip = ClientIp::getIp($request);          //Get all ips found in the headers         $all_ips = ClientIp::getIps($request);          return $next($request, $response);     } ]; Cors To use the neomerx/cors-psr7 library: use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::Cors($settings)                 //(optional) instance of Neomerx\Cors\Contracts\Strategies\SettingsStrategyInterface         ->origin('http://example.com:123')      //(optional) the server origin         ->allowedOrigins([                      //(optional) Allowed origins             'http://good.example.com:321' => true,             'http://evil.example.com:123' => null,         ])         ->allowedMethods([                      //(optional) Allowed methods. The second argument forces to add the allowed methods to preflight response             'GET' => true,             'PATCH' => null,             'POST' => true,             'PUT' => null,             'DELETE' => true,         ], true)         ->allowedHeaders([                      //(optional) Allowed headers. The second argument forces to add the allowed headers to preflight response             'content-type' => true,             'some-disabled-header' => null,             'x-enabled-custom-header' => true,         ], true)         ->exposedHeaders([                      //(optional) Headers other than the simple ones that might be exposed to user agent             'Content-Type' => true,             'X-Custom-Header' => true,             'X-Disabled-Header' => null,         ])         ->allowCredentials()                    //(optional) If access with credentials is supported by the resource.         ->maxAge(0)                             //(optional) Set pre-flight cache max period in seconds.         ->checkHost(true)                       //(optional) If request 'Host' header should be checked against server's origin. ]; Csp To use the paragonie/csp-builder library to add the Content-Security-Policy header to the response.  $middlewares = [      Middleware::csp($directives)                          //(optional) the array with the directives.         ->addSource('img-src', 'https://ytimg.com')       //(optional) to add extra sources to whitelist         ->addDirective('upgrade-insecure-requests', true) //(optional) to add new directives (if it doesn't already exist)         ->supportOldBrowsers(false)                       //(optional) support old browsers (e.g. safari). True by default ]; Csrf To add a protection layer agains CSRF (Cross Site Request Forgety). The middleware injects a hidden input with a token in all POST forms and them check whether the token is valid or not. Use ->autoInsert() to insert automatically the token or, if you prefer, use the generator callable:  $middlewares = [      //required to save the tokens in the user session     Middleware::AuraSession(),     //or     Middleware::PhpSession(),      //required to get the format of the request (only executed in html requests)     Middleware::FormatNegotiator(),      //required to get the user ip     Middleware::ClientIp(),      Middleware::Csrf()         ->autoInsert(), //(optional) To insert automatically the tokens in all POST forms      function ($request, $response, $next) {         //Get a callable to generate tokens (only if autoInsert() is disabled)         $generator = Middleware\Csrf::getGenerator($request);          //Use the generator (you must pass the action url)         $response->getBody()->write(             '<form action=""/action.php"" method=""POST"">'.             $generator('/action.php').             '<input type=""submit"">'.             '</form>'         );          return $next($request, $response);     } ]; DebugBar Inserts the PHP debug bar 1.x in the html body. This middleware requires Middleware::formatNegotiator executed before, to insert the debug bar only in Html responses. use Psr7Middlewares\Middleware; use DebugBar\StandardDebugBar;  $debugBar = new StandardDebugBar();  $middlewares = [      Middleware::FormatNegotiator(), //(recomended) to insert only in html responses      Middleware::DebugBar($debugBar) //(optional) Instance of debugbar         ->captureAjax(true)         //(optional) To send data in headers in ajax ]; Delay Delays the response to simulate slow bandwidth in local environments. You can use a number or an array to generate random values in seconds. use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::delay(3.5),      //delay the response 3.5 seconds      Middleware::delay([1, 2.5]), //delay the response between 1 and 1.5 seconds ]; DetectDevice Uses Mobile-Detect library to detect the client device. use Psr7Middlewares\Middleware; use Psr7Middlewares\Middleware\DetectDevice;  $middlewares = [      Middleware::DetectDevice(),      function ($request, $response, $next) {         //Get the device info         $device = DetectDevice::getDevice($request);          if ($device->isMobile()) {             //mobile stuff         }         elseif ($device->isTablet()) {             //tablet stuff         }         elseif ($device->is('bot')) {             //bot stuff         }          return $next($request, $response);     }, ]; DigestAuthentication Implements the digest http authentication. You have to provide an array with the users and password: use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::DigestAuthentication([             'username1' => 'password1',             'username2' => 'password2'         ])         ->realm('My realm') //(optional) custom realm value         ->nonce(uniqid()),   //(optional) custom nonce value      function ($request, $response, $next) {         $username = DigestAuthentication::getUsername($request);          return $next($request, $response);     } ]; EncodingNegotiator Uses willdurand/Negotiation (2.x) to detect and negotiate the encoding type of the document. use Psr7Middlewares\Middleware; use Psr7Middlewares\Middleware\EncodingNegotiator;  $middlewares = [      Middleware::EncodingNegotiator()         ->encodings(['gzip', 'deflate']), //(optional) configure the supported encoding types      function ($request, $response, $next) {         //get the encoding (for example: gzip)         $encoding = EncodingNegotiator::getEncoding($request);          return $next($request, $response);     } ]; ErrorHandler Executes a handler if the response returned by the next middlewares has any error (status code 400-599). You can catch also the exceptions throwed. use Psr7Middlewares\Middleware; use Psr7Middlewares\Middleware\ErrorHandler;  function handler($request, $response, $myApp) {     switch ($response->getStatusCode()) {         case 404:             return 'Page not found';          case 500:             //you can get the exception catched             $exception = ErrorHandler::getException($request);              return 'Server error: '.$exception->getMessage();          default:             return 'There was an error'     } }  $middlewares = [      Middleware::ErrorHandler('handler') //(optional) The error handler         ->arguments($myApp)             //(optional) extra arguments to the handler         ->catchExceptions()             //(optional) to catch exceptions ]; Expires Adds Expires and max-age directive of the Cache-Control header in the response. It's similar to the apache module mod_expires. By default uses the same configuration than h5bp apache configuration. Useful for static files. use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::formatNegotiator(), //(recomended) to detect the content-type header      Middleware::expires()         ->addExpire('text/css', '+1 week') //Add or edit the expire of some types ]; FastRoute To use FastRoute as middleware. use Psr7Middlewares\Middleware;  $router = FastRoute\simpleDispatcher(function (FastRoute\RouteCollector $r) {      $r->addRoute('GET', '/blog/{id:[0-9]+}', function ($request, $response, $app) {         return 'This is the post number'.$request->getAttribute('id');     }); });  $middlewares = [      Middleware::FastRoute($router) //Instance of FastRoute\Dispatcher         ->argument($myApp)         //(optional) arguments appended to the controller ]; Firewall Uses M6Web/Firewall to provide an IP filtering. This middleware deppends of ClientIp (to extract the ips from the headers). See the ip formats allowed for trusted/untrusted options: use Psr7Middlewares\Middleware;  $middlewares = [      //required to capture the user ips before     Middleware::ClientIp(),      //set the firewall     Middleware::Firewall()         ->trusted(['123.0.0.*'])   //(optional) ips allowed         ->untrusted(['123.0.0.1']) //(optional) ips not allowed ]; FormatNegotiator Uses willdurand/Negotiation (2.x) to detect and negotiate the format of the document using the url extension and/or the Accept http header. It also adds the Content-Type header to the response if it's missing. use Psr7Middlewares\Middleware; use Psr7Middlewares\Middleware\FormatNegotiator;  $middlewares = [      Middleware::FormatNegotiator()         ->defaultFormat('html') //(optional) default format if it's unable to detect. (by default is ""html"")         ->addFormat('tiff', ['image/tiff', 'image/x-tiff']), //(optional) add a new format associated with mimetypes      function ($request, $response, $next) {         //get the format (for example: html)         $format = FormatNegotiator::getFormat($request);          return $next($request, $response);     } ]; FormTimestamp Simple spam protection based on injecting a hidden input in all post forms with the current timestamp. On submit the form, check the time value. If it's less than (for example) 3 seconds ago, assumes it's a bot, so returns a 403 response. You can also set a max number of seconds before the form expires. use Psr7Middlewares\Middleware;  $middlewares = [      //(recomended) to detect html responses     Middleware::FormatNegotiator(),      Middleware::FormTimestamp()         ->key('my-secret-key'),   //Key used to encrypt/decrypt the input value.         ->min(5)                  //(optional) Minimum seconds needed to validate the request (default: 3)         ->max(3600)               //(optional) Life of the form in second. Default is 0 (no limit)         ->inputName('time-token') //(optional) Name of the input (default: hpt_time)         ->autoInsert(),           //(optional) To insert automatically the inputs in all POST forms      function ($request, $response, $next) {         //Get a callable to generate the inputs (only if autoInsert() is disabled)         $generator = Middleware\FormTimestamp::getGenerator($request);          //Use the generator (you must pass the action url)         $response->getBody()->write(             '<form action=""/action.php"" method=""POST"">'.             $generator().             '<input type=""submit"">'.             '</form>'         );          return $next($request, $response);     } ]; Geolocate Uses Geocoder library to geolocate the client using the ip. This middleware deppends of ClientIp (to extract the ips from the headers). use Psr7Middlewares\Middleware; use Psr7Middlewares\Middleware\Geolocate;  $middlewares = [      //(optional) only if you want to save the result in the user session     Middleware::PhpSession(),     //or     Middleware::AuraSession(),       //required to capture the user ips before     Middleware::ClientIp(),      Middleware::Geolocate($geocoder) //(optional) To provide a custom Geocoder instance         ->saveInSession(),           //(optional) To save the result to reuse in the future requests (required a session middleware before)      function ($request, $response, $next) {         //get the location         $addresses = Geolocate::getLocation($request);          //get the country         $country = $addresses->first()->getCountry();          $response->getBody()->write('Hello to '.$country);          return $next($request, $response);     } ]; GoogleAnalytics Inject the Google Analytics code in all html pages. use Psr7Middlewares\Middleware;  $middlewares = [      //(recomended) to detect html responses     Middleware::formatNegotiator(),      Middleware::GoogleAnalytics('UA-XXXXX-X') //The site id ]; Gzip Use gzip functions to compress the response body, inserting also the Content-Encoding header. use Psr7Middlewares\Middleware;  $middlewares = [      //required to get the preferred encoding type     Middleware::EncodingNegotiator(),      Middleware::Gzip() ]; Honeypot Implements a honeypot spam prevention. This technique is based on creating a input field that should be invisible and left empty by real users but filled by most spam bots. The middleware scans the html code and inserts this inputs in all post forms and check in the incoming requests whether this value exists and is empty (is a real user) or doesn't exist or has a value (is a bot) returning a 403 response. use Psr7Middlewares\Middleware;  $middlewares = [      //(recomended) to detect html responses     Middleware::formatNegotiator(),      Middleware::Honeypot()         ->inputName('my_name') //(optional) The name of the input field (by default ""hpt_name"")         ->inputClass('hidden') //(optional) The class of the input field (by default ""hpt_input"")         ->autoInsert(),        //(optional) To insert automatically the inputs in all POST forms      function ($request, $response, $next) {         //Get a callable to generate the inputs (only if autoInsert() is disabled)         $generator = Middleware\Honeypot::getGenerator($request);          //Use the generator (you must pass the action url)         $response->getBody()->write(             '<form action=""/action.php"" method=""POST"">'.             $generator().             '<input type=""submit"">'.             '</form>'         );          return $next($request, $response);     } ]; Https Returns a redirection to the https scheme if the request uri is http. It also adds the Strict Transport Security header to protect against protocol downgrade attacks and cookie hijacking. use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::Https()         ->maxAge(1000000)     //(optional) max-age directive for the Strict-Transport-Security header. By default is 31536000 (1 year)         ->includeSubdomains() //(optional) To add the ""includeSubDomains"" attribute to the Strict-Transport-Security header. ]; ImageTransformer Uses imagecow/imagecow 2.x to transform images on demand. You can resize, crop, rotate and convert to other formats. Use the the imagecow syntax to define the available sizes. To define the available sizes, you have to asign a filename prefix representing the size, so any file requested with this prefix will be dinamically transformed. There's also support for Client hints to avoid to serve images larger than needed (currently supported only in chrome and opera). If you want to save the transformed images in the cache, provide a library compatible with psr-6 for that. use Psr7Middlewares\Middleware;  $middlewares = [      //(recomended) to detect responses' mimetype     Middleware::formatNegotiator(),      Middleware::imageTransformer([   // The available sizes of the images.             'small.' => 'resizeCrop,50,50', //Creates a 50x50 thumb of any image prefixed with ""small."" (example: /images/small.avatar.jpg)             'medium.' => 'resize,500|format,jpg', //Resize the image to 500px and convert to jpg             'pictures/large.' => 'resize,1000|format,jpg', //Transform only images inside ""pictures"" directory (example: /images/pcitures/large.avatar.jpg)         ])         ->clientHints()              // (optional) To enable the client hints headers         ->cache(new Psr6CachePool()) // (optional) To save the transformed images in the cache      function ($request, $response, $next) {         //Get the generator to generate urls         $generator = Middleware\ImageTransformer::getGenerator($request);          //Use the generator         $response->getBody()->write('<img src=""'.$generator('images/picture.jpg', 'small.').'"">');          return $next($request, $response);     } ]; LanguageNegotiation Uses willdurand/Negotiation to detect and negotiate the client language using the Accept-Language header and (optionally) the uri's path. You must provide an array with all available languages: use Psr7Middlewares\Middleware; use Psr7Middlewares\Middleware\LanguageNegotiator;  $middlewares = [      Middleware::LanguageNegotiator(['gl', 'en']) //Available languages         ->usePath(true)                          //(optional) To search the language in the path: /gl/, /en/         ->redirect()                             //(optional) To return a redirection if the language is not in the path      function ($request, $response, $next) {         //Get the preferred language         $language = LanguageNegotiator::getLanguage($request);          return $next($request, $response);     } ]; LeagueRoute To use league/route (2.x) as a middleware: use Psr7Middlewares\Middleware; use League\Route\RouteCollection;  $router = new RouteCollection();  $router->get('/blog/{id:[0-9]+}', function ($request, $response, $vars) {     return 'This is the post number'.$vars['id']; });  $middlewares = [      Middleware::LeagueRoute($router) //The RouteCollection instance ]; MethodOverride Overrides the request method using the X-Http-Method-Override header. This is useful for clients unable to send other methods than GET and POST: use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::MethodOverride()         ->get(['HEAD', 'CONNECT', 'TRACE', 'OPTIONS']), //(optional) to customize the allowed GET overrided methods         ->post(['PATCH', 'PUT', 'DELETE', 'COPY', 'LOCK', 'UNLOCK']), //(optional) to customize the allowed POST overrided methods         ->parameter('method-override') //(optional) to use a parsed body and uri query parameter in addition to the header         ->parameter('method-override', false) //(optional) to use only the parsed body (but not the uri query) ]; Minify Uses mrclay/minify to minify the html, css and js code from the responses. use Psr7Middlewares\Middleware;  $middlewares = [      //(recomended) to detect the mimetype of the response     Middleware::formatNegotiator(),      Middleware::Minify() ]; Payload Parses the body of the request if it's not parsed and the method is POST, PUT or DELETE. It has support for json, csv and url encoded format. use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::Payload(),      function ($request, $response, $next) {         //Get the parsed body         $content = $request->getParsedBody();          return $next($request, $response);     } ]; PhpSession Initializes a php session using the request data. use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::PhpSession()         ->name('SessionId') //(optional) Name of the session         ->id('ABC123')      //(optional) Id of the session      function ($request, $response, $next) {         //Use the global $_SESSION variable to get/set data         $_SESSION['name'] = 'John';          return $next($request, $response);     } ]; Piwik To use the Piwik analytics platform. Injects the javascript code just before the </body> closing tag. use Psr7Middlewares\Middleware;  $middlewares = [      //(recomended) to detect html responses     Middleware::formatNegotiator(),      Middleware::Piwik()         ->piwikUrl('//example.com/piwik')    // The url of the installed piwik         ->siteId(1)                          // (optional) The site id (1 by default)         ->addOption('setDoNotTrack', 'true') // (optional) Add more options to piwik API ]; ReadResponse Read the response content from a file. It's the opposite of SaveResponse. The option continueOnError changes the behaviour of the middleware to continue with the next middleware if the response file is NOT found and returns directly the response if the file is found. This is useful to use the middleware as a file based cache and add a router middleware (or other readResponses) next in the queue. use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::ReadResponse('path/to/files') // Path where the files are stored         ->appendQuery(true)                   // (optional) to use the uri query in the filename         ->continueOnError(true)               // (optional) to continue with the next middleware on error or not ]; Recaptcha To use the google recaptcha library for spam prevention. use Psr7Middlewares\Middleware;  $middlewares = [      //required to get the user IP     Middleware::ClientIp(),      Middleware::Recapcha('secret') //The secret key ]; Rename Renames the request path. This is useful in some use cases: To rename public paths with random suffixes for security reasons, for example the path /admin to a more unpredictible /admin-19640983 Create pretty urls without use any router. For example to access to the path /static-pages/about-me.php under the more friendly /about-me Note that the original path wont be publicly accesible. On above examples, requests to /admin or /static-pages/about-me.php returns 404 responses. use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::Rename([         '/admin' => '/admin-19640983',     ]),      function ($request, $response, $next) {         $path = $request->getUri()->getPath(); // /admin          return $next($request, $response);     } ]; ResponseTime Calculates the response time (in miliseconds) and saves it into X-Response-Time header: use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::ResponseTime() ]; Robots Disables the robots of the search engines for non-production environment. Adds automatically the header X-Robots-Tag: noindex, nofollow, noarchive in all responses and returns a default body for /robots.txt request. use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::Robots(false) //(optional) Set true to allow search engines instead disallow ]; SaveResponse Saves the response content into a file if all of the following conditions are met: The method is GET The status code is 200 The Cache-Control header does not contain no-cache value The request has not query parameters. This is useful for cache purposes use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::SaveResponse('path/to/files') //Path directory where save the responses         ->appendQuery(true)                   // (optional) to append the uri query to the filename ]; Shutdown Useful to display a 503 maintenance page. You need to specify a handler. use Psr7Middlewares\Middleware;  function shutdownHandler ($request, $response, $app) {     $response->getBody()->write('Service unavailable'); }  $middlewares = [      Middleware::Shutdown('shutdownHandler') //(optional) Callable that generate the response         ->arguments($app)                   //(optional) to add extra arguments to the handler ]; TrailingSlash Removes (or adds) the trailing slash of the path. For example, /post/23/ will be converted to /post/23. If the path is / it won't be converted. Useful if you have problems with the router. use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::TrailingSlash(true) //(optional) set true to add the trailing slash instead remove         ->redirect(301)             //(optional) to return a 301 (seo friendly) or 302 response to the new path ]; Uuid Uses ramsey/uuid (3.x) to generate an Uuid (Universally Unique Identifiers) for each request (compatible with RFC 4122 versions 1, 3, 4 and 5). It's usefull for debugging purposes. use Psr7Middlewares\Middleware; use Psr7Middlewares\Middleware\Uuid;  $middlewares = [      Middleware::Uuid()         ->version(4)     //(optional) version of the identifier (1 by default). Versions 3 and 5 need more arguments (see https://github.com/ramsey/uuid#examples)         ->header(false), //(optional) Name of the header to store the identifier (X-Uuid by default). Set false to don't save header      function ($request, $response, $next) {         //Get the X-Uuid header         $id = $request->getHeaderLine('X-Uuid');          //Get the Uuid instance         $uuid = Uuid::getUuid($request);          echo $uuid->toString();          return $next($request, $response);     } ]; Whoops To use whoops 2.x as error handler. use Psr7Middlewares\Middleware; use Psr7Middlewares\Middleware\Whoops; use Whoops\Run;  $whoops = new Run();  $middlewares = [      //(recomended) to allows to choose the best handler according with the response mimetype     Middleware::formatNegotiator(),      Middleware::Whoops($whoops) //(optional) provide a custom whoops instance         ->catchErrors(false)    //(optional) to catch not only exceptions but also php errors (true by default) ]; Www Adds or removes the www subdomain in the host uri and, optionally, returns a redirect response. The following types of host values wont be changed: The one word hosts, for example: http://localhost. The ip based hosts, for example: http://0.0.0.0. The multi domain hosts, for example: http://subdomain.example.com. use Psr7Middlewares\Middleware;  $middlewares = [      Middleware::Www(true) //(optional) Add www instead remove it         ->redirect(301)   //(optional) to return a 301 (seo friendly), 302 response to the new host or false to don't redirect. (301 by default) ]; Lazy/conditional middleware creation You may want to create middleware in a lazy way under some circunstances: The middleware is needed only in a specific context (for example in development environments) The middleware creation is expensive and is not needed always (because a previous middleware returns a cached response) The middleware is needed only in a specific path To handle with this, you can use the Middleware::create() method that must return a callable or false. Example: use Psr7Middlewares\Middleware;  $middlewares = [      //This middleware can return a cached response     //so the next middleware may not be executed     Middleware::cache($myPsr6CachePool),      //Let's say this middleware is expensive, so use a proxy for lazy creation     Middleware::create(function () use ($app) {         return Middleware::auraRouter($app->get('router'));     }),      //This middleware is needed only in production     Middleware::create(function () {         return (getenv('ENV') !== 'production') ? false : Middleware::minify();     }),      //This middleware is needed in some cases     Middleware::create(function ($request, $response) {         if ($request->hasHeader('Foo')) {             return Middleware::www();         }          return false;     }),      //This middleware is needed only in a specific basePath     Middleware::create('/admin', function () {         return Middleware::DigestAuthentication(['user' => 'pass']);     }),      //This middleware is needed in some cases under a specific basePath     Middleware::create('/actions', function ($request, $response) {         if ($request->hasHeader('Foo')) {             return Middleware::responseTime();         }          return false;     }), ]; Extending middlewares Some middleware pieces use different functions to change the http messages, depending of some circunstances. For example, Payload parses the raw body content, and the method used depends of the type of the content: it can be json, urlencoded, csv, etc. Other example is the Minify middleware that needs a different minifier for each format (html, css, js, etc), or the Gzip that depending of the Accept-Encoding header, use a different method to compress the response body. The interface Psr7Middlewares\Transformers\ResolverInterface provides a way to resolve and returns the apropiate ""transformer"" in each case. The transformer is just a callable with a specific signature. You can create custom resolvers or extend the included in this package to add your owns. Let's see an example: use Psr7Middlewares\Transformers\BodyParser; use Psr\Http\Message\ServerRequestInterface;  class MyBodyParser extends BodyParser {     /**  * New parser used in request with the format ""php""  */     public function php(ServerRequestInterface $request)     {         $data = unserialize((string) $request->getBody());          return $request->withParsedBody($data);     } }  //Use the resolver $middlewares = [     Middleware::Payload()->resolver(new MyBodyParser()) ]; The following middlewares are using resolvers that you can customize: Payload To parse the body according with the format (json, urlencoded, csv, ...) Gzip To encode the body with the encoding method supported by the browser (gzip, deflate) Minify To use different minifiers for each format (html, css, js, ...) Contribution New middlewares are appreciated. Just create a pull request. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/oscarotero/psr7-middlewares"	"Inspiring collection of handy middlewares."	"true"
"Middlewares"	"Relay"	"https://github.com/relayphp/Relay.Relay"	"A PHP 5.5 PSR-7 middleware dispatcher"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"167"	"21"	"8"	"GitHub - relayphp/Relay.Relay: A PSR-7 middleware dispatcher. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 167 Fork 8 relayphp/Relay.Relay Code Issues 2 Pull requests 1 Wiki Pulse Graphs A PSR-7 middleware dispatcher. 43 commits 3 branches 5 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 1.x Switch branches/tags Branches Tags 1.x 2.x noresponse Nothing to show 1.1.0 1.0.0 0.2.0 0.1.0 0.0.1 Nothing to show New pull request Latest commit e4d94a0 May 16, 2016 pmjones add note about middlewares Permalink Failed to load latest commit information. src update docblocks Dec 17, 2015 tests Fix array detection bug in builder Dec 17, 2015 .gitattributes first commit Jun 5, 2015 .gitignore first commit Jun 5, 2015 .scrutinizer.yml go back to external coverage Oct 14, 2015 .travis.yml use new travis setup Oct 14, 2015 CHANGES.md update changes for release Dec 17, 2015 CONTRIBUTING.md update package info Jun 5, 2015 LICENSE first commit Jun 5, 2015 README.md add note about middlewares May 16, 2016 composer.json due to public demand, reduce by one namespace Jun 10, 2015 phpunit.php first commit Jun 5, 2015 phpunit.xml.dist first commit Jun 5, 2015 README.md Relay A PSR-7 middleware dispatcher. This package is installable and PSR-4 autoloadable via Composer as relay/relay. Alternatively, download a release or clone this repository, then map the Relay\ namespace to the package src/ directory. This package requires PHP 5.5 or later; it has been tested on PHP 5.6, PHP 7, and HHVM. You should use the latest available version of PHP as a matter of principle. To run the tests, issue composer install to install the test dependencies, then issue phpunit. Please see http://relayphp.com for documentation. For middleware to use with Relay, please review Relay.Middleware and oscarotero/psr7-middlewares. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/relayphp/Relay.Relay"	"A PHP 5.5 PSR-7 middleware dispatcher"	"true"
"Middlewares"	"Slim Middleware"	"https://github.com/slimphp/Slim-Middleware"	"A collection of custom middleware for Slim."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"40"	"8"	"13"	"GitHub - slimphp/Slim-Middleware: Slim Framework 2 middleware Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 40 Fork 13 slimphp/Slim-Middleware Code Issues 3 Pull requests 4 Pulse Graphs Slim Framework 2 middleware 13 commits 1 branch 1 release Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.0.0 Nothing to show New pull request Latest commit 1466f8e Sep 18, 2013 codeguy Fix Accept header name in \Slim\Middleware\ContentNegotiation.php Permalink Failed to load latest commit information. src/Slim/Middleware Fix Accept header name in \Slim\Middleware\ContentNegotiation.php Sep 18, 2013 tests Add ContentNegotiation middleware Sep 18, 2013 .gitignore Add gitignore Sep 18, 2013 CONTRIBUTING.md First commit Sep 18, 2013 LICENSE First commit Sep 18, 2013 README.md Fix README typo Sep 18, 2013 composer.json Add ContentNegotiation middleware Sep 18, 2013 phpunit.xml.dist Add ContentNegotiation middleware Sep 18, 2013 README.md Slim Framework Middleware This repository contains a library of optional middleware for your Slim Framework application. How to Install Update your composer.json manifest to require the slim/middleware package (see below). Run composer install or composer update to update your local vendor folder. {     ""require"": {         ""slim/middleware"": ""*""     } }  How to Contribute Pull Requests Fork this repository Create a new branch for each feature or improvement Send a pull request from your feature branch to this repository's master branch It is very important to separate new features or improvements into separate feature branches, and to send a pull request for each branch. This allows me to review and pull in new features or improvements individually. Style Guide All pull requests must adhere to the PSR-2 standard. Author The Slim Framework is created and maintained by Josh Lockhart. Josh is a senior web developer at New Media Campaigns. Josh also created and maintains PHP: The Right Way, a popular movement in the PHP community to introduce new PHP programmers to best practices and good information. License All code in this repository is released under the MIT public license. http://www.slimframework.com/license Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/slimphp/Slim-Middleware"	"A collection of custom middleware for Slim."	"true"
"Middlewares"	"Stack"	"https://github.com/stackphp"	"A library of stackable middleware for Silex/Symfony."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"stackphp · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization stackphp http://stackphp.com Repositories People 2 Filters Sources Forks PHP 21 7 CallableHttpKernel HttpKernelInterface implementation based on callables. Updated Jun 18, 2016 PHP 131 24 builder Builder for stack middlewares based on HttpKernelInterface. Updated Jun 2, 2016 PHP 41 11 url-map URL Map Stack middleware. Updated May 13, 2016 PHP 26 9 LazyHttpKernel HttpKernelInterface lazy proxy. Updated Dec 24, 2015 HTML 29 15 stackphp.com Website for Stack Updated Oct 5, 2015 PHP 22 4 run Shortcut function for handling HttpKernel front-controller boilerplate. Updated Apr 19, 2015 PHP 26 6 session Session stack middleware. Updated Apr 13, 2015 PHP 4 1 inline Inline stack middleware. Updated Apr 13, 2015 2 People CHH Christoph Hochstrasser simensen Beau Simensen Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/stackphp"	"A library of stackable middleware for Silex/Symfony."	"true"
"Middlewares"	"zend-stratigility"	"https://github.com/zendframework/zend-stratigility"	"Middleware for PHP built on top of PSR-7"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"145"	"43"	"37"	"GitHub - zendframework/zend-stratigility: Middleware for PHP built on top of PSR-7 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 43 Star 145 Fork 37 zendframework/zend-stratigility Code Issues 6 Pull requests 0 Pulse Graphs Middleware for PHP built on top of PSR-7 https://zendframework.github.io/zend-stratigility/ 418 commits 3 branches 9 releases 19 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages master Nothing to show 1.2.1 1.2.0 1.1.3 1.1.2 1.1.1 1.1.0 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit 4a0e906 May 11, 2016 weierophinney Merge branch 'hotfix/58' … Close #58 Permalink Failed to load latest commit information. doc/book Reviewed all documentation for content and formatting May 11, 2016 src Do not mark response as complete in FinalHandler Mar 24, 2016 test PHP 5.4 support in tests Mar 24, 2016 .gitignore Prepared doc build automation May 11, 2016 .scrutinizer.yml Adding scrutinizer-ci to toolchain Aug 11, 2014 .travis.yml Prepared doc build automation May 11, 2016 CHANGELOG.md Added CHANGELOG for #58 May 11, 2016 CONDUCT.md Added code manifesto as code of conduct Mar 5, 2016 CONTRIBUTING.md Fixed escaping in CONTRIBUTING.md Mar 7, 2016 LICENSE.md Happy new year 2016 Dec 31, 2015 README.md Reviewed all documentation for content and formatting May 11, 2016 composer.json Prepared doc build automation May 11, 2016 mkdocs.yml Reviewed all documentation for content and formatting May 11, 2016 phpcs.xml [cs] PHP_CodeSniffer config file Jun 7, 2015 phpunit.xml.dist Renamed to zend-stratigility / Zend\Stratigility May 21, 2015 README.md zend-stratigility From ""Strata"", Latin for ""layer"", and ""agility"". This package supercedes and replaces phly/conduit. Stratigility is a port of Sencha Connect to PHP. It allows you to create and dispatch middleware pipelines. File issues at https://github.com/zendframework/zend-stratigility/issues Issue patches to https://github.com/zendframework/zend-stratigility/pulls Documentation is at https://zendframework.github.io/zend-stratigility/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zendframework/zend-stratigility"	"Middleware for PHP built on top of PSR-7"	"true"
"URL"	"PHP Domain Parser"	"https://github.com/jeremykendall/php-domain-parser"	"A domain suffix parser library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"377"	"21"	"48"	"GitHub - jeremykendall/php-domain-parser: Public Suffix List based domain parsing implemented in PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 377 Fork 48 jeremykendall/php-domain-parser Code Issues 69 Pull requests 2 Pulse Graphs Public Suffix List based domain parsing implemented in PHP 275 commits 5 branches 27 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags Saeven-develop develop fix/updated-psl-breaks-tests master webhook-poc Nothing to show 4.0.0-alpha 3.0.0 2.0.3 2.0.2 2.0.1 2.0.0 1.4.6 1.4.5 1.4.4 1.4.3 1.4.2 1.4.1 1.4.0 1.3.1 1.3.0 1.2.1 1.2.0 1.1.0 1.0.0 0.0.8 0.0.7 0.0.6 0.0.5 0.0.4 0.0.3 0.0.2 0.0.1 Nothing to show New pull request Latest commit 45c89d2 Feb 16, 2016 jeremykendall Merge pull request #96 from mikegreiling/code_cleanup … Remove superfluous code Permalink Failed to load latest commit information. bin update bin/parse Jun 18, 2015 data Update to latest PSL. Fixes #77. Feb 8, 2016 src simplify parseHost as host validation is already handled within sub-m… Feb 16, 2016 tests Remove setters, update tests. Jan 23, 2016 .gitignore unit tests passed. Jun 18, 2015 .php_cs Update php-cs-fixer config file. Jan 22, 2016 .travis.yml Add PHP 7.0 to .travis.yml Jan 22, 2016 ASF-LICENSE-2.0 ASF 2 license. Attempting to comply with license for derived works Jan 13, 2013 CONTRIBUTING.md Adds contributing file Oct 30, 2013 LICENSE Updates copyright/license year Feb 2, 2014 README.md Overall modification prompted by magic functions breaking phpspec tests. Jan 22, 2016 build.properties Initial commit Jan 11, 2013 build.xml Specify php-cs-fixer config file in phing target. Jan 22, 2016 composer.json Add dev deps, refactor build.xml to run targets from ./vendor/bin Jan 22, 2016 example.php Overall modification prompted by magic functions breaking phpspec tests. Jan 22, 2016 phpunit.xml.dist Moves tests to tests/src, updates phpunit.xml.dist Aug 17, 2014 README.md PHP Domain Parser PHP Domain Parser is a Public Suffix List based domain parser implemented in PHP. Motivation While there are plenty of excellent URL parsers and builders available, there are very few projects that can accurately parse a url into its component subdomain, registrable domain, and public suffix parts. Consider the domain www.pref.okinawa.jp. In this domain, the public suffix portion is okinawa.jp, the registrable domain is pref.okinawa.jp, and the subdomain is www. You can't regex that. Other similar libraries focus primarily on URL building, parsing, and manipulation and additionally include public suffix domain parsing. PHP Domain Parser was built around accurate Public Suffix List based parsing from the very beginning, adding a URL object simply for the sake of completeness. Installation The only (currently) supported method of installation is via Composer. Create a composer.json file in the root of your project: {     ""require"": {         ""jeremykendall/php-domain-parser"": ""~2.0""     } } And then run: composer install Add the autoloader to your project: <?php  require_once 'vendor/autoload.php' You're now ready to begin using the PHP Domain Parser. Usage Parsing URLs Parsing URLs into their component parts is as simple as the example you see below. <?php  require_once '../vendor/autoload.php';  $pslManager = new Pdp\PublicSuffixListManager(); $parser = new Pdp\Parser($pslManager->getList()); $host = 'http://user:pass@www.pref.okinawa.jp:8080/path/to/page.html?query=string#fragment'; $url = $parser->parseUrl($host); var_dump($url); The above will output: class Pdp\Uri\Url#6 (8) {     private $scheme =>     string(4) ""http""     private $host =>     class Pdp\Uri\Url\Host#5 (3) {         private $subdomain =>         string(3) ""www""         private $registrableDomain =>         string(15) ""pref.okinawa.jp""         private $publicSuffix =>         string(10) ""okinawa.jp""     }     private $port =>     int(8080)     private $user =>     string(4) ""user""     private $pass =>     string(4) ""pass""     private $path =>     string(18) ""/path/to/page.html""     private $query =>     string(12) ""query=string""     private $fragment =>     string(8) ""fragment"" }  Convenience Methods A magic __get() method is provided to access the above object properties. Obtaining the public suffix for a parsed domain is as simple as: <?php  $host = 'waxaudio.com.au'; $url = $parser->parseUrl($host); $publicSuffix = $url->host->publicSuffix;  // $publicSuffix = 'com.au' IDNA Support IDN (Internationalized Domain Name) support was added in version 1.4.0. Both unicode domains and their ASCII equivalents are supported. IMPORTANT: PHP's intl extension is required for the IDN functions. PHP's mb_string extension is required for mb_strtolower. Unicode Parsing IDNA hosts is no different that parsing standard hosts. Setting $host = 'Яндекс.РФ'; (Russian-Cyrillic) in the Parsing URLs example would return: class Pdp\Uri\Url#6 (8) {   private $scheme =>   string(0) """"   private $host =>   class Pdp\Uri\Url\Host#5 (4) {     private $subdomain =>     NULL     private $registrableDomain =>     string(17) ""яндекс.рф""     private $publicSuffix =>     string(4) ""рф""     private $host =>     string(17) ""яндекс.рф""   }   private $port =>   NULL   private $user =>   NULL   private $pass =>   NULL   private $path =>   NULL   private $query =>   NULL   private $fragment =>   NULL }  ASCII (Punycode) If you choose to provide the ASCII equivalent of the unicode domain name ($host = 'http://xn--d1acpjx3f.xn--p1ai'; in the case of the Parsing URLs example), the ASCII equivalent will be returned by the parser: class Pdp\Uri\Url#6 (8) {   private $scheme =>   string(4) ""http""   private $host =>   class Pdp\Uri\Url\Host#5 (4) {     private $subdomain =>     NULL     private $registrableDomain =>     string(22) ""xn--d1acpjx3f.xn--p1ai""     private $publicSuffix =>     string(8) ""xn--p1ai""     private $host =>     string(22) ""xn--d1acpjx3f.xn--p1ai""   }   private $port =>   NULL   private $user =>   NULL   private $pass =>   NULL   private $path =>   NULL   private $query =>   NULL   private $fragment =>   NULL }  IPv6 Support Parsing IPv6 hosts is no different that parsing standard hosts. Setting $host = 'http://[2001:db8:85a3:8d3:1319:8a2e:370:7348]:8080/'; in the Parsing URLs example would return: class Pdp\Uri\Url#6 (8) {   private $scheme =>   string(4) ""http""   private $host =>   class Pdp\Uri\Url\Host#5 (4) {     private $subdomain =>     NULL     private $registrableDomain =>     NULL     private $publicSuffix =>     NULL     private $host =>     string(38) ""[2001:db8:85a3:8d3:1319:8a2e:370:7348]""   }   private $port =>   string(4) ""8080""   private $user =>   NULL   private $pass =>   NULL   private $path =>   string(1) ""/""   private $query =>   NULL   private $fragment =>   NULL }  IMPORTANT: IPv6 url host names must be enclosed in square brackets. They will not be parsed properly otherwise. Hat tip to @geekwright for adding IPv6 support in a bugfix pull request. Parsing Domains If you'd like to parse the domain (or host) portion only, you can use Parser::parseHost(). <?php  $host = $parser->parseHost('a.b.c.cy'); var_dump($host); The above will output: class Pdp\Uri\Url\Host#7 (3) {     private $subdomain =>     string(1) ""a""     private $registrableDomain =>     string(6) ""b.c.cy""     private $publicSuffix =>     string(4) ""c.cy"" }  Validation of Public Suffixes Public Suffix validation is available by calling Parser::isSuffixValid(): var_dump($parser->isSuffixValid('www.example.faketld'); // false  var_dump($parser->isSuffixValid('www.example.com.au'); // true  A suffix is considered invalid if it is not contained in the Public Suffix List. Huge thanks to @SmellyFish for submitting Add a way to validate TLDs to add public suffix validation to the project. Retrieving Domain Components Only If you're only interested in a domain component, you can use the parser to retrieve only the component you're interested in <?php  var_dump($parser->getSubdomain('www.scottwills.co.uk')); var_dump($parser->getRegistrableDomain('www.scottwills.co.uk')); var_dump($parser->getPublicSuffix('www.scottwills.co.uk')); The above will output: string(3) ""www"" string(16) ""scottwills.co.uk"" string(5) ""co.uk""  Sanity Check You can quickly parse a url from the command line with the provided parse vendor binary. From the root of your project, simply call: $ ./vendor/bin/parse <url> If you pass a url to parse, that url will be parsed and the output printed to screen. If you do not pass a url, http://user:pass@www.pref.okinawa.jp:8080/path/to/page.html?query=string#fragment will be parsed and the output printed to screen. Example: $ ./vendor/bin/parse http://www.waxaudio.com.au/  Array (     [scheme] => http     [user] =>     [pass] =>     [host] => www.waxaudio.com.au     [subdomain] => www     [registrableDomain] => waxaudio.com.au     [publicSuffix] => com.au     [port] =>     [path] => /     [query] =>     [fragment] => ) Host: http://www.waxaudio.com.au/ Example Script For more information on using the PHP Domain Parser, please see the provided example script. Refreshing the Public Suffix List While a cached PHP copy of the Public Suffix List is provided for you in the data directory, that copy may or may not be up to date (Mozilla provides an Atom change feed to keep up with changes to the list). Please use the provided vendor binary to refresh your cached copy of the Public Suffix List. From the root of your project, simply call: $ ./vendor/bin/update-psl You may verify the update by checking the timestamp on the files located in the data directory. Important: The vendor binary update-psl depends on an internet connection to update the cached Public Suffix List. Possible Unexpected Behavior PHP Domain Parser is built around PHP's parse_url() function and, as such, exhibits most of the same behaviors of that function. Just like parse_url(), this library is not meant to validate URLs, but rather to break a URL into its component parts. One specific, counterintuitive behavior is that PHP Domain Parser will happily parse a URL with spaces in the host part. Contributing Pull requests are always welcome! Please review the CONTRIBUTING.md document before submitting pull requests. Heads up: BC Break In All 1.4 Versions The 1.4 series introduced a backwards incompatible change by adding PHP's ext-mbstring and ext-intl as dependencies. This should have resulted in a major version bump. Instead I bumped the minor version from 1.3.1 to 1.4. I highly recommend reverting to 1.3.1 if you're running into extension issues and do not want to or cannot install ext-mbstring and ext-intl. You will lose IDNA and IPv6 support, however. Those are only available in versions >= 1.4. I apologize for any issues you may have encountered due my semver error. Attribution The HTTP adapter interface and the cURL HTTP adapter were inspired by (er, lifted from) Will Durand's excellent Geocoder project. His MIT license and copyright notice are below. Copyright (c) 2011-2013 William Durand <william.durand1@gmail.com>  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  Portions of the PublicSuffixListManager and the DomainParser are derivative works of the PHP registered-domain-libs. Those parts of this codebase are heavily commented, and I've included a copy of the Apache Software Foundation License 2.0 in this project. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jeremykendall/php-domain-parser"	"A domain suffix parser library."	"true"
"URL"	"Purl"	"https://github.com/jwage/purl"	"A URL manipulation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"591"	"34"	"63"	"GitHub - jwage/purl: Purl is a simple Object Oriented URL manipulation library for PHP 5.3+ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 34 Star 591 Fork 63 jwage/purl Code Issues 12 Pull requests 2 Pulse Graphs Purl is a simple Object Oriented URL manipulation library for PHP 5.3+ 101 commits 1 branch 7 releases 17 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.0.7 v0.0.6 v0.0.5 v0.0.4 v0.0.3 v0.0.2 v0.0.1 Nothing to show New pull request Latest commit 1242069 Mar 5, 2016 jwage Merge pull request #49 from acidvertigo/patch-1 … Update for https check Permalink Failed to load latest commit information. data Updates default public suffix list Apr 27, 2013 src/Purl Merge pull request #49 from acidvertigo/patch-1 Mar 5, 2016 tests Fix PHP notice message when calling method Purl\Url::fromCurrent() wi… Oct 18, 2015 .gitignore Adds phpunit.xml to .gitignore Dec 24, 2013 .travis.yml Added PHP 5.6 and HHVM to travis.yml Jul 28, 2014 LICENSE First Purl commit. Jan 11, 2013 README.markdown added how to install via composer Jun 30, 2015 composer.json Removes BC breaking PDP version Jul 30, 2014 phpunit.xml.dist Fix typo. Jan 11, 2013 README.markdown Purl Purl is a simple Object Oriented URL manipulation library for PHP 5.3+ Installation The suggested installation method is via composer: composer require jwage/purl Using Purl Creating Url instances is easy: $url = new \Purl\Url('http://jwage.com'); You can also create Url instances through the static parse method if you prefer that style: $url = \Purl\Url::parse('http://jwage.com'); One benefit of using this method is you can chain methods together after creating the Url: $url = \Purl\Url::parse('http://jwage.com')     ->set('scheme', 'https')     ->set('port', '443')     ->set('user', 'jwage')     ->set('pass', 'password')     ->set('path', 'about/me')     ->set('query', 'param1=value1&param2=value2')     ->set('fragment', 'about/me?param1=value1&param2=value2');  echo $url->getUrl(); // https://jwage:password@jwage.com:443/about/me?param1=value1&param2=value2#about/me?param1=value1&param2=value2  // $url->path becomes instanceof Purl\Path // $url->query becomes instanceof Purl\Query // $url->fragment becomes instanceof Purl\Fragment Path Manipulation $url = new \Purl\Url('http://jwage.com');  // add path segments one at a time $url->path->add('about')->add('me');  // set the path data from a string $url->path = 'about/me/another_segment'; // $url->path becomes instanceof Purl\Path  // get the path segments print_r($url->path->getData()); // array('about', 'me', 'another_segment') Query Manipulation $url = new \Purl\Url('http://jwage.com'); $url->query->set('param1', 'value1'); $url->query->set('param2', 'value2');  echo $url->query; // param1=value1&param2=value2 echo $url; // http://jwage.com?param1=value1&param2=value2  // set the query data from an array $url->query->setData(array(     'param1' => 'value1',     'param2' => 'value2' ));  // set the query data from a string $url->query = 'param1=value1&param2=value2'; // $url->query becomes instanceof Purl\Query print_r($url->query->getData()); //array('param1' => 'value1', 'param2' => 'value2') Fragment Manipulation $url = new \Purl\Url('http://jwage.com'); $url->fragment = 'about/me?param1=value1&param2=value2'; // $url->fragment becomes instanceof Purl\Fragment A Fragment is made of a path and a query and comes after the hashmark (#). echo $url->fragment->path; // about/me echo $url->fragment->query; // param1=value1&param2=value2 echo $url; // http://jwage.com#about/me?param1=value1&param2=value2 Domain Parts Purl can parse a URL in to parts and its canonical form. It uses the list of domains from http://publicsuffix.org to break the domain into its public suffix, registerable domain, subdomain and canonical form. $url = new \Purl\Url('http://about.jwage.com');  echo $url->publicSuffix; // com echo $url->registerableDomain; // jwage.com echo $url->subdomain; // about echo $url->canonical; // com.jwage.about/ Staying Up To Date The list of domains used to parse a URL into its component parts is updated from time to time. To ensure that you have the latest copy of the public suffix list, you can refresh the local copy of the list by running ./vendor/bin/pdp-psl data Extract URLs You can easily extract urls from a string of text using the extract method: $string = 'some text http://google.com http://jwage.com'; $urls = \Purl\Url::extract($string);  echo $urls[0]; // http://google.com/ echo $urls[1]; // http://jwage.com/ Join URLs You can easily join two URLs together using Purl: $url = new \Purl\Url('http://jwage.com/about?param=value#fragment'); $url->join('http://about.me/jwage'); echo $url; // http://about.me/jwage?param=value#fragment Or if you have another Url object already: $url1 = new \Purl\Url('http://jwage.com/about?param=value#fragment'); $url2 = new \Purl\Url('http://about.me/jwage'); $url1->join($url2); echo $url1; // http://about.me/jwage?param=value#fragment Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jwage/purl"	"A URL manipulation library."	"true"
"URL"	"sabre/uri"	"https://github.com/fruux/sabre-uri"	"A functional URI manipulation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"94"	"13"	"3"	"GitHub - fruux/sabre-uri: Functions for making sense out of URIs in PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 94 Fork 3 fruux/sabre-uri Code Issues 1 Pull requests 0 Pulse Graphs 🌏 Functions for making sense out of URIs in PHP http://sabre.io/uri/ 56 commits 4 branches 4 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cs-fixer master normalize php7 Nothing to show 1.1.0 1.0.1 1.0.0 0.0.1 Nothing to show New pull request Latest commit 1f30742 Mar 15, 2016 evert Merge pull request #8 from fruux/staabm-patch-1 … Disable xdebug to speedup travis build Permalink Failed to load latest commit information. lib no-op debug code :/ Mar 7, 2016 tests Fix for Issue #6. Bumped version Mar 7, 2016 .gitignore big bang Nov 17, 2014 .travis.yml wip Mar 14, 2016 CHANGELOG.md Fix for Issue #6. Bumped version Mar 8, 2016 LICENSE Happy new year! Dec 31, 2015 README.md use SVG instead of PNG travis build images Mar 23, 2015 composer.json Using php-cs-fixer to enforce coding standards. Apr 28, 2015 README.md sabre/uri sabre/uri is a lightweight library that provides several functions for working with URIs, staying true to the rules of RFC3986. Partially inspired by Node.js URL library, and created to solve real problems in PHP applications. 100% unitested and many tests are based on examples from RFC3986. The library provides the following functions: resolve to resolve relative urls. normalize to aid in comparing urls. parse, which works like PHP's parse_url. build to do the exact opposite of parse. split to easily get the 'dirname' and 'basename' of a URL without all the problems those two functions have. Further reading Installation Usage Build status branch status master Questions? Head over to the sabre/dav mailinglist, or you can also just open a ticket on GitHub. Made at fruux This library is being developed by fruux. Drop us a line for commercial services or enterprise support. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fruux/sabre-uri"	"A functional URI manipulation library."	"true"
"URL"	"Uri"	"https://github.com/thephpleague/uri"	"Another URL manipulation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"138"	"7"	"14"	"GitHub - thephpleague/uri: URI manipulation Library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 138 Fork 14 thephpleague/uri Code Issues 4 Pull requests 0 Pulse Graphs URI manipulation Library http://uri.thephpleague.com 962 commits 2 branches 4 releases 21 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 4.1.1 4.1.0 4.0.1 4.0.0 Nothing to show New pull request Latest commit f50b327 Jul 10, 2016 nyamsprod rename uri_get_meta_data to uri_getinfo Permalink Failed to load latest commit information. src rename uri_get_meta_data to uri_getinfo Jul 10, 2016 test rename uri_get_meta_data to uri_getinfo Jul 10, 2016 .gitattributes Improve settings Jan 18, 2016 .gitignore Simplify the package URI modification system Sep 2, 2015 .php_cs bug fix travis Apr 25, 2016 .scrutinizer.yml Update Package Settings Jan 4, 2016 .travis.yml rename uri_get_meta_data to uri_getinfo Jul 10, 2016 CHANGELOG.md rename uri_get_meta_data to uri_getinfo Jul 10, 2016 CONDUCT.md Adding the CONDUCT.md file Oct 6, 2015 CONTRIBUTING.md Improve Library Documentation Sep 21, 2015 LICENSE Update links from league\url to league\uri Jul 15, 2015 README.md Update README.md Mar 21, 2016 composer.json introducing a uri_get_meta_data function Jul 1, 2016 phpunit.xml introducing a uri_get_meta_data function Jul 1, 2016 README.md URI The Uri package provides simple and intuitive classes to create and manage URIs in PHP. Highlights Simple API RFC3986 compliant Implements the UriInterface from PSR-7 Fully documented Framework Agnostic Composer ready, PSR-2 and PSR-4 compliant Documentation Full documentation can be found at uri.thephpleague.com. Contribute to this documentation in the gh-pages branch System Requirements You need: PHP >= 5.5.0 or HHVM >= 3.6, but the latest stable version of PHP/HHVM is recommended the mbstring extension the intl extension To use the library. Install Install Uri using Composer. $ composer require league/uri  Testing Uri has a PHPUnit test suite and a coding style compliance test suite using PHP CS Fixer. To run the tests, run the following command from the project folder. $ composer test Contributing Contributions are welcome and will be fully credited. Please see CONTRIBUTING and CONDUCT for details. Security If you discover any security related issues, please email nyamsprod@gmail.com instead of using the issue tracker. Credits ignace nyamagana butera All Contributors License The MIT License (MIT). Please see License File for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/uri"	"Another URL manipulation library."	"true"
"Email"	"CssToInlineStyles"	"https://github.com/tijsverkoyen/CssToInlineStyles"	"A library to inline CSS in email templates."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"652"	"42"	"115"	"GitHub - tijsverkoyen/CssToInlineStyles: CssToInlineStyles is a class that enables you to convert HTML-pages/files into HTML-pages/files with inline styles. This is very usefull when you're sending emails. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 42 Star 652 Fork 115 tijsverkoyen/CssToInlineStyles Code Issues 9 Pull requests 4 Pulse Graphs CssToInlineStyles is a class that enables you to convert HTML-pages/files into HTML-pages/files with inline styles. This is very usefull when you're sending emails. 190 commits 2 branches 23 releases Fetching contributors PHP 73.1% CSS 16.0% HTML 10.9% PHP CSS HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0 master Nothing to show 2.0.0 1.5.5 1.5.4 1.5.3 1.5.2 1.5.1 1.5.0 1.4.4 1.4.3 1.4.2 1.4.1 1.4.0 1.3.0 1.2.1 1.2.0 1.1.0 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit 2ebaccb May 10, 2016 tijsverkoyen Merge pull request #131 from techi602/html-utf8-encoding … DOMDocument::loadHTML() UTF-8 issue Permalink Failed to load latest commit information. example Cleanup Dec 8, 2015 src DOMDocument::loadHTML() UTF-8 issue Mar 30, 2016 tests DOMDocument::loadHTML() UTF-8 issue Mar 30, 2016 .gitattributes Added a .gitattributes file Jul 26, 2014 .gitignore Gemfile isn't relevant Nov 20, 2015 .travis.yml Processed some feedback Dec 8, 2015 CHANGELOG.md Merge branch '2.0' Feb 23, 2016 LICENSE.md Fixed some issues detected with SensioLabsInsight Nov 20, 2015 README.md Add php highlight Apr 1, 2016 composer.json Allow Symfony/CssSelector v3.0 Dec 8, 2015 phpunit.xml.dist Processed some feedback Dec 8, 2015 README.md CssToInlineStyles class Installation CssToInlineStyles is a class that enables you to convert HTML-pages/files into HTML-pages/files with inline styles. This is very usefull when you're sending emails. About PHP CssToInlineStyles is a class to convert HTML into HTML with inline styles. Installation The recommended installation way is through Composer. $ composer require tijsverkoyen/css-to-inline-styles Example use TijsVerkoyen\CssToInlineStyles\CssToInlineStyles;  // create instance $cssToInlineStyles = new CssToInlineStyles();  $html = file_get_contents(__DIR__ . '/examples/sumo/index.htm'); $css = file_get_contents(__DIR__ . '/examples/sumo/style.css');  // output echo $cssToInlineStyles->convert(     $html,     $css ); Known issues no support for pseudo selectors no support for css-escapes UTF-8 charset is not always detected correctly. Make sure you set the charset to UTF-8 using the following meta-tag in the head: <meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />. (Note: using <meta charset=""UTF-8""> does NOT work!) Sites using this class Each site based on Fork CMS Print en Bind Tiki Wiki CMS Groupware (starting in Tiki 13) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tijsverkoyen/CssToInlineStyles"	"A library to inline CSS in email templates."	"true"
"Email"	"Email Reply Parser"	"https://github.com/willdurand/EmailReplyParser"	"An email reply parser library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"396"	"20"	"42"	"GitHub - willdurand/EmailReplyParser: PHP library for parsing plain text email content, based on GitHub's email_reply_parser library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 396 Fork 42 willdurand/EmailReplyParser Code Issues 4 Pull requests 4 Pulse Graphs PHP library for parsing plain text email content, based on GitHub's email_reply_parser library. 92 commits 1 branch 20 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2.4.1 v2.4.0 v2.3.1 v2.3.0 2.5.0 2.2.2 2.2.1 2.2.0 2.1.0 2.0.1 2.0.0 2.0.0-alpha1 1.1.0 1.0.1 1.0.0 0.0.5 0.0.4 0.0.3 0.0.2 0.0.1 Nothing to show New pull request Latest commit 11f4919 Feb 25, 2016 willdurand Prepare 2.5.0 release Permalink Failed to load latest commit information. src fix usenet official signature. #44 Feb 18, 2016 tests Merge branch 'hkdobrev-psr-4' Oct 1, 2015 .gitignore Refactored tests, improved multiline header detection May 13, 2012 .travis.yml Mark as PHP7 ready Dec 8, 2015 CONTRIBUTING.md Add contributing file Nov 26, 2013 LICENSE Added License Nov 16, 2011 README.md Mark as PHP7 ready Dec 8, 2015 composer.json Prepare 2.5.0 release Feb 25, 2016 phpunit.xml.dist Use PSR-4 and autoload-dev Oct 1, 2015 README.md EmailReplyParser EmailReplyParser is a PHP library for parsing plain text email content, based on GitHub's email_reply_parser library written in Ruby. Installation The recommended way to install EmailReplyParser is through Composer: composer require willdurand/email-reply-parser Usage Instantiate an EmailParser object and parse your email: <?php  use EmailReplyParser\Parser\EmailParser;  $email = (new EmailParser())->parse($emailContent); You get an Email object that contains a set of Fragment objects. The Email class exposes two methods: getFragments(): returns all fragments; getVisibleText(): returns a string which represents the content considered as ""visible"". The Fragment represents a part of the full email content, and has the following API: <?php  $fragment = current($email->getFragments());  $fragment->getContent();  $fragment->isSignature();  $fragment->isQuoted();  $fragment->isHidden();  $fragment->isEmpty(); Alternatively, you can rely on the EmailReplyParser to either parse an email or get its visible content in a single line of code: $email = \EmailReplyParser\EmailReplyParser::read($emailContent);  $visibleText = \EmailReplyParser\EmailReplyParser::parseReply($emailContent); Known Issues Quoted Headers Quoted headers aren't picked up if there's an extra line break: On <date>, <author> wrote:  > blah  Also, they're not picked up if the email client breaks it up into multiple lines. GMail breaks up any lines over 80 characters for you. On <date>, <author> wrote: > blah  The above On ....wrote: can be cleaned up with the following regex: $fragment_without_date_author = preg_replace(     '/\nOn(.*?)wrote:(.*?)$/si',     '',     $fragment->getContent() ); Note though that we're search for ""on"" and ""wrote"". Therefore, it won't work with other languages. Possible solution: Remove ""reply@reply.github.com"" lines... Weird Signatures Lines starting with - or _ sometimes mark the beginning of signatures: Hello  -- Rick  Not everyone follows this convention: Hello  Mr Rick Olson Galactic President Superstar Mc Awesomeville GitHub  **********************DISCLAIMER*********************************** * Note: blah blah blah                                            * **********************DISCLAIMER***********************************  Strange Quoting Apparently, prefixing lines with > isn't universal either: Hello  -- Rick  ________________________________________ From: Bob [reply@reply.github.com] Sent: Monday, March 14, 2011 6:16 PM To: Rick  Unit Tests Setup the test suite using Composer: $ composer install  Run it using PHPUnit: $ phpunit  Contributing See CONTRIBUTING file. Credits GitHub William Durand william.durand1@gmail.com License EmailReplyParser is released under the MIT License. See the bundled LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/willdurand/EmailReplyParser"	"An email reply parser library."	"true"
"Email"	"Email Validator"	"https://github.com/nojacko/email-validator"	"A small email address validation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"47"	"2"	"3"	"GitHub - nojacko/email-validator: Small PHP library to valid email addresses using a number of methods. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 47 Fork 3 nojacko/email-validator Code Issues 0 Pull requests 0 Pulse Graphs Small PHP library to valid email addresses using a number of methods. https://github.com/nojacko/email-validator 34 commits 1 branch 7 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.1.1 1.1.0 1.0.1 1.0.0 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit bd897da Dec 15, 2015 nojacko Updated dependancies. Permalink Failed to load latest commit information. src Updated README and remove old data file. Sep 24, 2015 tests Coding standards. Nov 11, 2014 .gitignore Init commit. Oct 20, 2014 .travis.yml Added Travis CI. Nov 11, 2014 LICENSE Init commit. Oct 20, 2014 README.md Removed version and some excess spacing from README. Sep 24, 2015 composer.json Pull data from email-data-disposable library. Sep 24, 2015 composer.lock Updated dependancies. Dec 15, 2015 phpunit.xml Init commit. Oct 20, 2014 README.md Email Validator Small PHP library to valid email addresses using a number of methods. Features Validates email address Checks for example domains (e.g. example.com) Checks for disposable email domains (e.g. mailinator.com) Checks for role-based addresses (e.g. abuse@) Checks for MX records (i.e. can receive email) Install (using Composer) composer require nojacko/email-validator:~1.0  Usage Generalised Functions isValid($email) Runs all the tests within this library. Returns true or false. isSendable($email) Checks isEmail, isExample and hasMx. Returns true or false. Specific Functions If you want more control, use these functions seperately. isEmail($email) Note: returns true or false only. isExample($email) isDisposable($email) isRole($email) hasMx($email) These functions take a single argument (an email address) and return: true, when function name is satisfied. false, when function name is not satisfied. null, when check is not possible, i.e. an invalid email is given. Examples $validator = new \EmailValidator\Validator();  $validator->isValid('example@google.com');              // true $validator->isValid('abuse@google.com');                // false $validator->isValid('example@example.com');             // false  $validator->isSendable('example@google.com');           // true $validator->isSendable('abuse@google.com');             // true $validator->isSendable('example@example.com');          // false  $validator->isEmail('example@example.com');             // true $validator->isEmail('example@example');                 // false  $validator->isExample('example@example.com');           // true $validator->isExample('example@google.com');            // false $validator->isExample('example.com');                   // null  $validator->isDisposable('example@example.com');        // false $validator->isDisposable('example@mailinater.com');     // true $validator->isDisposable('example.com');                // null  $validator->isRole('example@example.com');              // false $validator->isRole('abuse@example.com');                // true $validator->isRole('example.com');                      // null  $validator->hasMx('example@example.com');               // false $validator->hasMx('example@google.com');                // true $validator->hasMx('example.com');                       // null  Contribute Contributions welcome! Requirements Test-driven development Follow PSR-2 Coding Style Guide One change per pull request Add/Remove Disposable Domain See the email-data-disposable project. New Feature If you're planning a new feature, please raise an issue first to ensure it's in scope. The aim is to keep this library small and with one specific purpose. Other Contributions For anything that isn't a new feature (bug fix, tests, etc) just create a pull request. Testing Test are all located in tests folder. Run tests with phpunit. In root folder, execute phpunit in a CLI. Versioning Semantic Versioning 2.0.0 License The MIT License (MIT). See LICENCE file. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nojacko/email-validator"	"A small email address validation library."	"true"
"Email"	"Fetch"	"https://github.com/tedious/Fetch"	"An IMAP library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"365"	"40"	"131"	"GitHub - tedious/Fetch: An IMAP library for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 40 Star 365 Fork 131 tedious/Fetch Code Issues 23 Pull requests 21 Pulse Graphs An IMAP library for PHP http://www.tedivm.com 268 commits 3 branches 10 releases Fetching contributors PHP 99.5% Shell 0.5% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master supress_php_warning travis_updates Nothing to show v0.7.1 v0.6.1 v0.5.3 v0.5.2 v0.5.1 v0.4.5 v0.4.4 v0.4.3 v0.4.2 v0.4.1 Nothing to show New pull request Latest commit 3fbee96 Aug 5, 2015 tedivm Merge pull request #147 from linniksa/patch-mime-decoder … Provide mime text decoder by RFC2047 Permalink Failed to load latest commit information. src/Fetch Provide mime text decoder by RFC2047 Aug 5, 2015 tests Provide mime text decoder by RFC2047 Aug 5, 2015 .coveralls.yml Added code coverage and styling tests, refactored Apr 16, 2014 .gitignore Added code coverage and styling tests, refactored Apr 16, 2014 .travis.yml Fixed allowed_failures formatting Jan 7, 2015 CONTRIBUTING.md Added contributing file Apr 19, 2014 LICENSE Added License Jun 10, 2012 README.md Debian / Ubuntu installation NB added! May 6, 2015 autoload.php Formatting! PSR Compliance Apr 16, 2014 composer.json Updated php-cs-fixer Sep 24, 2014 phpunit.xml.dist Added code coverage and styling tests, refactored Apr 16, 2014 README.md Fetch Fetch is a library for reading email and attachments, primarily using the POP and IMAP protocols. Installing N.b. A note on Ubuntu 14.04 (probably other Debian-based / Apt managed systems), the install of php5-imap does not enable the extension for CLI (possibly others as well), which can cause composer to report fetch requires ext-imap sudo ln -s /etc/php5/mods-available/imap.ini /etc/php5/cli/conf.d/30-imap.ini  Composer Installing Fetch can be done through a variety of methods, although Composer is recommended. Until Fetch reaches a stable API with version 1.0 it is recommended that you review changes before even Minor updates, although bug fixes will always be backwards compatible. ""require"": {   ""tedivm/fetch"": ""0.6.*"" }  Pear Fetch is also available through Pear. $ pear channel-discover pear.tedivm.com $ pear install tedivm/Fetch  Github Releases of Fetch are available on Github. Sample Usage This is just a simple code to show how to access messages by using Fetch. It uses Fetch own autoload, but it can (and should be, if applicable) replaced with the one generated by composer. $server = new \Fetch\Server('imap.example.com', 993); $server->setAuthentication('dummy', 'dummy');   $messages = $server->getMessages(); /** @var $message \Fetch\Message */ foreach ($messages as $message) {     echo ""Subject: {$message->getSubject()}\nBody: {$message->getMessageBody()}\n""; }  License Fetch is licensed under the BSD License. See the LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tedious/Fetch"	"An IMAP library."	"true"
"Email"	"Mautic"	"https://github.com/mautic/mautic"	"Email marketing automation"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"874"	"133"	"312"	"GitHub - mautic/mautic: Mautic: Open Source Marketing Automation Software. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 133 Star 874 Fork 312 mautic/mautic Code Issues 525 Pull requests 19 Pulse Graphs Mautic: Open Source Marketing Automation Software. https://www.mautic.org 7,272 commits 2 branches 30 releases 54 contributors PHP 57.4% JavaScript 32.0% CSS 9.4% HTML 1.2% PHP JavaScript CSS HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: staging Switch branches/tags Branches Tags master staging Nothing to show 2.0.1 2.0.0 1.4.1 1.4.0 1.3.1 1.3.0 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.2.0-beta1 1.1.3 1.1.2 1.1.1 1.1.0 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 1.0.0-rc4 1.0.0-rc3 1.0.0-rc2 1.0.0-rc1 1.0.0-beta4 1.0.0-beta3 1.0.0-beta2 1.0.0-beta Nothing to show New pull request Latest commit 6e6b87e Jul 15, 2016 alanhartless Removed spaces in PR/Issue template tables because it makes a mess in… … … Github's UI Permalink Failed to load latest commit information. .github Removed spaces in PR/Issue template tables because it makes a mess in… Jul 15, 2016 app dev version bump Jul 12, 2016 build Fixed packaging script to not remove needed Test vendor folder Jul 12, 2016 media Updated prod assets Jul 12, 2016 plugins Delete message translated Jul 8, 2016 themes Form template added to the goldstar theme Jul 12, 2016 translations Added support for translations installed in root translations folder … Jan 23, 2015 vendor Restored accidentally removed .htaccess file Dec 15, 2014 .gitignore Merge staging Jun 23, 2016 .htaccess Fix #1504 by PatchRanger: Fixes AJAX response Jun 13, 2016 .travis.yml Fix for a fresh composer install that doesn't yet have a bootstra.php… Jun 13, 2016 Gruntfile.js Moved customHTML input to use the email/page builders to allow drag a… May 24, 2015 LICENSE.txt Merge staging Jun 23, 2016 README.md Fixed a typo in the localhost URL Dec 16, 2015 composer.json Updated phpoffice/excel dependency to fix fatal error on excel export Jun 30, 2016 composer.lock Updated phpoffice/excel dependency to fix fatal error on excel export Jun 30, 2016 favicon.ico Updated favicon, touch and notification icons Apr 29, 2015 index.php Upstream merge Jun 9, 2016 index_dev.php Upstream merge Jun 10, 2016 offline.php Added some pretification for dev debug error file Jun 15, 2016 package.json Remove Adminre less file and add new Mautic less file, Aug 28, 2014 robots.txt Converting ""addon"" to ""plugin"" Aug 1, 2015 upgrade.php Added PHP min/max check to upgrade.php script Jul 12, 2016 README.md Mautic Introduction Getting Started This is a simple 3 step installation process. You'll want to make sure you already have Composer available on your computer as this is a development release and you'll need to use Composer to download the vendor packages. Step 1 Step 2 Step 3 Download the repository zip Extract this zip to your web root. Run the following command to install required packages. composer install Open your browser and complete the installation through the web installer. Get stuck? No problem. Check out the Mautic community for help and answers. Disclaimer Installing from source is only recommended if you are comfortable using the command line. You'll be required to use various CLI commands to get Mautic working and to keep it working. If the source and/or database schema gets out of sync with Mautic's releases, the release updater may not work and will require manual updates. Also note that the source outside a tagged release should be considered ""alpha"" and may contain bugs, cause unexpected results, data corruption or loss, and is not recommended for use in a production environment. Use at your own risk. If you prefer, there are packaged downloads ready for install at https://www.mautic.org/download. Keeping Up-To-Date Source Files Each time you update Mautic's source after the initial setup/installation via a new checkout, download, git pull, etc; you will need to clear the cache. To do so, run the following command: $ cd /your/mautic/directory $ php app/console cache:clear --env=prod  (Note that if you are accessing Mautic through the dev environment (via index_dev.php), you would need to drop the --env=prod from the command). Database Schema Before running these commands, please make a backup of your database. If updating from a tagged release to a tagged release, schema changes will be included in a migrations file. To apply the changes, run $ php app/console doctrine:migrations:migrate --env=prod  If you are updating to the latest source (remember this is alpha), first run $ php app/console doctrine:schema:update --env=prod --dump-sql  This will list out the queries Doctrine wants to execute in order to get the schema up-to-date (no queries are actually executed). Review the queries to ensure there is nothing detrimental to your data. If you have doubts about a query, submit an issue here and we'll verify it. If you're satisfied with the queries, execute them with $ php app/console doctrine:schema:update --env=prod --force  Your schema should now be up-to-date with the source. Usage Learning how to use marketing automation can be challenging. The first step is to understand what marketing automation is and how it can help your business be more successful. This quick usage outline is not meant to be comprehensive but will outline a few key areas of Mautic and how to use each of them. You can find more detailed information at https://docs.mautic.org 1. Monitoring The act of monitoring website traffic and visitors is often the first step in a marketing automation system. This step involves collecting details and information about each visitor to your website. Visitor Types There are two types of visitor, anonymous and known. Anonymous visitors are all visitors which browse to your website. These visitors are monitored and certain key pieces of information are collected. This information includes: The visitor's IP address Country Pages visited Length of visit Any actions taken on site Known visitors are visitors which have provided an email address or some other identifying characteristic (e.g. social network handle). Much more information can be gathered from known visitors. Any information desired can be manually or automatically collected, here are just a few common ideas to get you started: Email address Photos/images Physical address Social network handles Social media posts Notes Events These fields may be automatically discovered and added by the Mautic system or they may be manually added by you or the visitor. Visitor Transitions You will probably want to know how to move a visitor from anonymous to known status. This is critical as the amount of information collected from known visitors is much more in-depth and valuable to your business. You will learn more about this transition process a bit later on. 2. Connecting The next step in the marketing automation process is connecting with your known visitors. These known visitors are your leads (You may call your potential clients something different, for simplicity they are called leads in these docs). Connecting with your leads is important in establishing a relationship and nurturing them along the sales cycle. This nurturing can be for any purpose you desire. You may wish to demonstrate your knowledge of a subject, encourage your leads to become involved, or generate a sale and become a customer. Methods for Connecting There are several ways to connect with your leads. The three most common are emails, social media, and landing pages. Emails are by far the most common way to connect with leads. These are tracked and monitored by Mautic for who opens the email, what links are clicked within that email, and what emails bounce (never reach the recipient). Social media is quickly becoming a more popular way for connecting with leads. Mautic helps you monitor the social profiles of your leads and can be used to interact with them through their preferred network. Landing pages are usually the first step in the connection process as these are used to make initial contact with leads and collect the information to move them from an anonymous visitor to a known visitor. These pages are used to funnel visitors to a specific call to action. This call to action is usually a form to collect the visitor's information. 3. Automating One of Mautic's main purposes is to enable automation of specific tasks. The task of connecting with leads is one such area where automation becomes increasingly valuable. Mautic allows you to define specific times, events, or actions when a connection should be triggered. Here is an example of an automation process. Example A visitor fills out a call-to-action form on your landing page. This form collects their email address and automatically moves them from an anonymous to a known visitor. As a known visitor they are now added as a new lead to a specific campaign. This campaign will send the new lead an email you have pre-defined. You can then define additional actions to be taken based on the lead's response to your email. This example demonstrates several uses of automation. First, the visitor is automatically moved from anonymous to known status. Second, the visitor is automatically added to a particular campaign. Lastly the visitor is sent an email automatically as a new lead. There are many more ways in which automation can be used throughout Mautic to improve efficiency and reduce the time you spend connecting with your leads. As mentioned earlier, refer to https://docs.mautic.org for more details. Customizing There are many benefits to using Mautic as your marketing automation tool. As the first and only community-driven, open source marketing automation platform there are many distinct advantages. If you are curious about those benefits and wish to read more about the value of choosing open source you can find more information on the Mautic website. One benefit of using Mautic is the ability to modify and customize the solution to fit your needs. Mautic allows you to quickly change to your preferred language, or modify any string through the language files. These language files are all stored on Transifex and if you are interested you can add more translations. Customizations don't stop with the language strings. You can also construct workflows and campaigns to fit your business situation rather than adjusting your business to fit Mautic. The code is available and can be easily edited by any skilled developer. Below is some useful technical information regarding making changes. Bundles Mautic has been configured to allow new features to be added by simply adding new bundles. These bundles can then be discovered by the software and installed from within Mautic. Each bundle contains the information for menus, routes, views, translations and more. These are self-contained objects but can interact with other bundles as necessary through triggers. You can view the existing bundles in the GitHub repository https://github.com/mautic/mautic/tree/master/app/bundles Templates Developers are also able to create customized templates to use within landing pages and emails. These are currently added directly through the /themes folder located in the root of the repository. Below is the structure of a template. /YourThemeName ../css ../../style.css ../html ../../base.html.php ../../email.html.php ../../message.html.php ../../page.html.php ..config.php  Required files: The only files required by Mautic for a theme is the config.php file. Every other file is optional. Workflows (Coming Soon) Another benefit to using Mautic, an open source platform, is the ability to share workflows and other helpful aspects of setting up a marketing automation implementation. These workflows may be the way a company handles campaigns, timing of emails, landing pages, assets, or other useful content. In a coming version of Mautic developers will be able to share these through the Mautic Marketplace™. This marketplace will provide a quick method for sharing, finding, and installing workflows. More detailed information regarding modifications and customizations as well as deeper tutorials on the above features can be found in the developer documentation when it is released. How to test a pull request Everyone can test submitted features and bug fixes. No programming skills are required. All you have to do is to follow the steps below. Requirements Mautic uses Git as a version control system. Download and install git for your OS from https://git-scm.com/. Install a server, PHP and MySql/Posgres to be able to run Mautic locally. Easy option is _AMP package for your OS. Install Composer, the dependency manager for PHP. Install the latest GitHub version Open a Terminal/Console window. Change directory to the server root (i.e. cd /var/www if your local server root is at /var/www). Clone the repository (git clone https://github.com/mautic/mautic.git) The mautic directory should appear in the server root. Change directory to mautic directory (cd mautic). Install dependencies (composer install). Visit Mautic in a browser (probably at http://localhost/mautic) and follow installation steps. Test a pull request (PR) Select a PR to test. Read the description and steps to test. If it's a bug fix, follow the steps if you'll be able to recreate the issue. Use development environment for testing. To do that, add index_dev.php after the Mautic URL. Eg. http://localhost/mautic/index_dev.php/s/ Apply the PR Clear cache for development environment (app/console cache:clear -e dev). Follow the steps from the PR description again to see if the result is as described. Write a comment how the test went. If there is a problem, provide as many information as possible including error log messages. FAQ and Contact Information Marketing automation has historically been a difficult tool to implement in a business. The Mautic community is a rich environment for you to learn from others and share your knowledge as well. Open source means more than open code. Open source is providing equality for all and a chance to improve. If you have questions then the Mautic community can help provide the answers. Ready to get started with the community? You can get more involved on the Mautic website. Or follow Mautic on social media just to stay current with what's happening! Contact Info https://www.mautic.org @mautic [Twitter] @trymautic [Facebook] +MauticOrg [Google+] Developers We love testing our user interface on as many platforms as possible (even those browsers we prefer to not mention). In order to help us do this we use and recommend BrowserStack. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mautic/mautic"	"Email marketing automation"	"true"
"Email"	"PHPMailer"	"https://github.com/PHPMailer/PHPMailer"	"Another mailer solution."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6610"	"614"	"3862"	"GitHub - PHPMailer/PHPMailer: The classic email sending library for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 614 Star 6,610 Fork 3,862 PHPMailer/PHPMailer Code Issues 32 Pull requests 10 Wiki Pulse Graphs The classic email sending library for PHP 770 commits 18 branches 27 releases 104 contributors PHP 99.1% Shell 0.9% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 5.0-dev 5.0-phpdocs 5.2-stable 6.0 autotls gh-pages longlines master mimesign phpmailer-2.0 phpmailer-2.3.0-msg-limit-patch phpmailer-5.2.0 qmail revert-565-back-compat smtp-refactor travis vendor xoauth Nothing to show v6.0.0rc2 v6.0.0rc1 v5.2.16 v5.2.15 v5.2.14 v5.2.13 v5.2.12 v5.2.11 v5.2.10 v5.2.9 v5.2.8 v5.2.7 v5.2.6 v5.2.5 v5.2.4 v5.1.0 v5.0.2 v5.0.0 v2.3.0 v2.2.1 v2.0.3 phpmailer-5.1 phpmailer-5.0.2 phpmailer-5.0.0 phpmailer-2.3.0@186 phpmailer-2.3.0 phpmailer-2.0.3 Nothing to show New pull request Latest commit fcf9cb7 Jul 8, 2016 arnested committed with Synchro Fix ISO-639-1 code for Danish (#764) … The ISO-639-1 code for Danish is `da` (`dk` is the ISO 3166-1 alpha-2 for Denmark). Permalink Failed to load latest commit information. docs Prefer setFrom() over separate From and FromName Sep 18, 2015 examples fix warning (#761) Jul 6, 2016 extras [TASK] Sep 28, 2015 language Fix ISO-639-1 code for Danish (#764) Jul 8, 2016 test Reset encoding on simple bodies, hopefully will fix #728! May 22, 2016 .gitignore Platform/IDE-specific entries should not be in project .gitignore Jun 6, 2016 .scrutinizer.yml Scrutinizer fix Mar 4, 2015 .travis.yml Fix travis config for PHP 7 May 7, 2015 LICENSE Centralise check for debug output Jul 30, 2013 PHPMailerAutoload.php Docs cleanup, some markdown, make file comments consistent Apr 8, 2014 README.md Fix file links Mar 22, 2016 VERSION Bump version to 5.2.16 Jun 6, 2016 changelog.md Bump version to 5.2.16 Jun 6, 2016 class.phpmailer.php Fix ISO-639-1 code for Danish (#764) Jul 8, 2016 class.phpmaileroauth.php Correct documented type of OAuth property. Will probably need to chan… Oct 14, 2015 class.phpmaileroauthgoogle.php Standards Nov 23, 2015 class.pop3.php Bump version to 5.2.16 Jun 6, 2016 class.smtp.php Bump version to 5.2.16 Jun 6, 2016 composer.json Point at Google-specific OAuth2 lib since that's the only provider su… Jan 7, 2016 composer.lock Update deps Jun 29, 2016 get_oauth_token.php Point at Google-specific OAuth2 lib since that's the only provider su… Jan 7, 2016 travis.phpunit.xml.dist Remove deprecated PHPUnit param May 6, 2015 README.md PHPMailer - A full-featured email creation and transfer class for PHP Build status: Class Features Probably the world's most popular code for sending email from PHP! Used by many open-source projects: WordPress, Drupal, 1CRM, SugarCRM, Yii, Joomla! and many more Integrated SMTP support - send without a local mail server Send emails with multiple TOs, CCs, BCCs and REPLY-TOs Multipart/alternative emails for mail clients that do not read HTML email Support for UTF-8 content and 8bit, base64, binary, and quoted-printable encodings SMTP authentication with LOGIN, PLAIN, NTLM, CRAM-MD5 and Google's XOAUTH2 mechanisms over SSL and TLS transports Error messages in 47 languages! DKIM and S/MIME signing support Compatible with PHP 5.0 and later Much more! Why you might need it Many PHP developers utilize email in their code. The only PHP function that supports this is the mail() function. However, it does not provide any assistance for making use of popular features such as HTML-based emails and attachments. Formatting email correctly is surprisingly difficult. There are myriad overlapping RFCs, requiring tight adherence to horribly complicated formatting and encoding rules - the vast majority of code that you'll find online that uses the mail() function directly is just plain wrong! Please don't be tempted to do it yourself - if you don't use PHPMailer, there are many other excellent libraries that you should look at before rolling your own - try SwiftMailer, Zend_Mail, eZcomponents etc. The PHP mail() function usually sends via a local mail server, typically fronted by a sendmail binary on Linux, BSD and OS X platforms, however, Windows usually doesn't include a local mail server; PHPMailer's integrated SMTP implementation allows email sending on Windows platforms without a local mail server. License This software is distributed under the LGPL 2.1 license. Please read LICENSE for information on the software availability and distribution. Installation & loading PHPMailer is available via Composer/Packagist (using semantic versioning), so just add this line to your composer.json file: ""phpmailer/phpmailer"": ""~5.2"" or composer require phpmailer/phpmailer If you want to use the Gmail XOAUTH2 authentication class, you will also need to add a dependency on the league/oauth2-client package. Alternatively, copy the contents of the PHPMailer folder into one of the include_path directories specified in your PHP configuration. If you don't speak git or just want a tarball, click the 'zip' button at the top of the page in GitHub. If you're not using composer's autoloader, PHPMailer provides an SPL-compatible autoloader, and that is the preferred way of loading the library - just require '/path/to/PHPMailerAutoload.php'; and everything should work. The autoloader does not throw errors if it can't find classes so it prepends itself to the SPL list, allowing your own (or your framework's) autoloader to catch errors. SPL autoloading was introduced in PHP 5.1.0, so if you are using a version older than that you will need to require/include each class manually. PHPMailer does not declare a namespace because namespaces were only introduced in PHP 5.3. If you want to use Google's XOAUTH2 authentication mechanism, you need to be running at least PHP 5.4, and load the dependencies listed in composer.json. Minimal installation While installing the entire package manually or with composer is simple, convenient and reliable, you may want to include only vital files in your project. At the very least you will need class.phpmailer.php. If you're using SMTP, you'll need class.smtp.php, and if you're using POP-before SMTP, you'll need class.pop3.php. For all of these, we recommend you use the autoloader too as otherwise you will either have to require all classes manually or use some other autoloader. You can skip the language folder if you're not showing errors to users and can make do with English-only errors. You may need the additional classes in the extras folder if you are using those features, including NTLM authentication and ics generation. If you're using Google XOAUTH2 you will need class.phpmaileroauth.php and class.oauth.php classes too, as well as the composer dependencies. A Simple Example <?php require 'PHPMailerAutoload.php';  $mail = new PHPMailer;  //$mail->SMTPDebug = 3; // Enable verbose debug output  $mail->isSMTP();                                      // Set mailer to use SMTP $mail->Host = 'smtp1.example.com;smtp2.example.com';  // Specify main and backup SMTP servers $mail->SMTPAuth = true;                               // Enable SMTP authentication $mail->Username = 'user@example.com';                 // SMTP username $mail->Password = 'secret';                           // SMTP password $mail->SMTPSecure = 'tls';                            // Enable TLS encryption, `ssl` also accepted $mail->Port = 587;                                    // TCP port to connect to  $mail->setFrom('from@example.com', 'Mailer'); $mail->addAddress('joe@example.net', 'Joe User');     // Add a recipient $mail->addAddress('ellen@example.com');               // Name is optional $mail->addReplyTo('info@example.com', 'Information'); $mail->addCC('cc@example.com'); $mail->addBCC('bcc@example.com');  $mail->addAttachment('/var/tmp/file.tar.gz');         // Add attachments $mail->addAttachment('/tmp/image.jpg', 'new.jpg');    // Optional name $mail->isHTML(true);                                  // Set email format to HTML  $mail->Subject = 'Here is the subject'; $mail->Body    = 'This is the HTML message body <b>in bold!</b>'; $mail->AltBody = 'This is the body in plain text for non-HTML mail clients';  if(!$mail->send()) {     echo 'Message could not be sent.';     echo 'Mailer Error: ' . $mail->ErrorInfo; } else {     echo 'Message has been sent'; } You'll find plenty more to play with in the examples folder. That's it. You should now be ready to use PHPMailer! Localization PHPMailer defaults to English, but in the language folder you'll find numerous (46 at the time of writing!) translations for PHPMailer error messages that you may encounter. Their filenames contain ISO 639-1 language code for the translations, for example fr for French. To specify a language, you need to tell PHPMailer which one to use, like this: // To load the French version $mail->setLanguage('fr', '/optional/path/to/language/directory/'); We welcome corrections and new languages - if you're looking for corrections to do, run the phpmailerLangTest.php script in the tests folder and it will show any missing translations. Documentation Examples of how to use PHPMailer for common scenarios can be found in the examples folder. If you're looking for a good starting point, we recommend you start with the Gmail example. There are tips and a troubleshooting guide in the GitHub wiki. If you're having trouble, this should be the first place you look as it's the most frequently updated. Complete generated API documentation is available online. You'll find some basic user-level docs in the docs folder, and you can generate complete API-level documentation using the generatedocs.sh shell script in the docs folder, though you'll need to install PHPDocumentor first. You may find the unit tests a good source of how to do various operations such as encryption. If the documentation doesn't cover what you need, search the many questions on Stack Overflow, and before you ask a question about ""SMTP Error: Could not connect to SMTP host."", read the troubleshooting guide. Tests There is a PHPUnit test script in the test folder. Build status: If this isn't passing, is there something you can do to help? Contributing Please submit bug reports, suggestions and pull requests to the GitHub issue tracker. We're particularly interested in fixing edge-cases, expanding test coverage and updating translations. With the move to the PHPMailer GitHub organisation, you'll need to update any remote URLs referencing the old GitHub location with a command like this from within your clone: git remote set-url upstream https://github.com/PHPMailer/PHPMailer.git Please don't use the SourceForge or Google Code projects any more. Sponsorship Development time and resources for PHPMailer are provided by Smartmessages.net, a powerful email marketing system. Other contributions are gladly received, whether in beer 🍺, T-shirts 👕, Amazon wishlist raids, or cold, hard cash 💰. Changelog See changelog. History PHPMailer was originally written in 2001 by Brent R. Matzelle as a SourceForge project. Marcus Bointon (coolbru on SF) and Andy Prevost (codeworxtech) took over the project in 2004. Became an Apache incubator project on Google Code in 2010, managed by Jim Jagielski. Marcus created his fork on GitHub. Jim and Marcus decide to join forces and use GitHub as the canonical and official repo for PHPMailer. PHPMailer moves to the PHPMailer organisation on GitHub. What's changed since moving from SourceForge? Official successor to the SourceForge and Google Code projects. Test suite. Continuous integration with Travis-CI. Composer support. Public development. Additional languages and language strings. CRAM-MD5 authentication support. Preserves full repo history of authors, commits and branches from the original SourceForge project. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PHPMailer/PHPMailer"	"Another mailer solution."	"true"
"Email"	"Stampie"	"https://github.com/henrikbjorn/Stampie"	"A library for email services such as,, and."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"24"	"3"	"23"	"GitHub - henrikbjorn/Stampie: Library for using online Email providers Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 24 Fork 23 henrikbjorn/Stampie forked from flint/Stampie Code Pull requests 0 Pulse Graphs Library for using online Email providers http://henrik.bjrnskov.dk 191 commits 5 branches 14 releases Fetching contributors PHP 99.4% Shell 0.6% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages mailgun master next-version remove-phar Nothing to show v0.7.0 v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.3 v0.1.2 v0.1.1 v0.1.0 v0.0.1 0.10.0 0.9.0 0.8.0 Nothing to show New pull request Pull request Compare This branch is 9 commits behind flint:master. Latest commit 68582cb Dec 14, 2014 henrikbjorn Update README.md Permalink Failed to load latest commit information. build 0.7 release Jan 15, 2013 lib/Stampie Change the Guzzle3 typehint to allow using guzzle/http only Dec 12, 2014 tests Change the Guzzle3 typehint to allow using guzzle/http only Dec 11, 2014 .gitattributes git attributes for export Oct 18, 2012 .gitignore Insight fixes Jul 21, 2013 .semver 0.7 release Jan 15, 2013 .travis.yml Update .travis.yml Jul 3, 2014 LICENSE Add license and fix composer.json file for packagist. [ci skip] Nov 28, 2011 README.md Update README.md Dec 14, 2014 build.sh Strip files from comments and whitespace Dec 22, 2011 composer.json Change the Guzzle3 typehint to allow using guzzle/http only Dec 11, 2014 phpunit.xml.dist Insight fixes Jul 21, 2013 sami.php sami Dec 17, 2012 README.md Stampie Stampie have been moved to the ""Flint"" organization in order to get a better collaborative flow. Stampie is a simple API Wrapper for different email providers such as Postmark and SendGrid. It is very easy to use and to integrate into your application as demonstrated below with a SendGrid mailer. Providers Postmark SendGrid MailGun Mandrill <?php  // Stampie.phar does Autoloading through its Stup.php require '/path/to/stampie.phar';  class Message extends \Stampie\Message {     public function getFrom() { return 'alias@domain.tld'; }     public function getSubject() { return 'You are trying out Stampie'; }     public function getText() { return 'So what do you think about it?'; } }  $adapter = new Stampie\Adapter\Buzz(new Buzz\Browser()); $mailer = new Stampie\Mailer\SendGrid($adapter, 'username:password');  // Returns Boolean true on success or throws an HttpException for error // messages not recognized by SendGrid api or ApiException for known errors. $mailer->send(new Message('reciever@domain.tld')); This simple example shows a few different things about how Stampie works under the hood and is developed. Because others are so much better than us to do Http communication Stampie uses a Adapter Pattern to integrate with known libraries such as Buzz and Guzzle. Every mailer takes a $serverToken as the second argument in their constructor. This is what is used for authentication. In the Postmark mailer this is a hash but in SendGrid it is a username:password pattern that is split into two pieces and send as arguments. A Mailer is responsible for formatting the request needed for a given API. A Message or MessageInterface is a simple storage class that holds information about the message sent to an API such as the email address this is from and who should recieve it together with html and text bodies. Last their is an Interface for every type of class or abstract implementation that should be used when adding new Mailer's or Adapter's. Documentation There is generated API documentation for all tags and released versions. Those can be found at henrikbjorn.github.com/Stampie/api/master. Extensions StampieExtra provides extensions to Stampie using the Symfony2 EventDispatcher component. Framework integration Stampie is itself completly decoupled and does not depend on any framework. Integrations HBStampieBundle it is also on packagist Testing Stampie is Continuous Integration tested with Travis and aims for a high coverage percentage. Developing As mentioned above if integrating new mailers or adapters please rely on the interfaces or abstract classes already in this package. Furthermore unit tests should be provided aswell. Feedback This is a project created to test TDD along the way and maybe have some scars from that. But you are always welcome to send feedback or Github, Twitter, Github issue or Pull Request. Same goes if something is wrong or you have ideas for a better or smarter implementation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/henrikbjorn/Stampie"	"A library for email services such as,, and."	"true"
"Email"	"SendGrid"	"http://sendgrid.com/"	"A library for email services such as,, and."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Marketing & Transactional Email Service | SendGrid Blog Support Sign Up ▾ Dashboard Sign Out Log In Pricing Solutions Overview One platform for all your email needs. Transactional Email Ensure delivery of your most important emails. Email Marketing Build beautiful, engaging marketing campaigns. Expert Services Professional services from SendGrid's email experts. Resources Overview Expert advice to enhance your email program. Case Studies How SendGrid has helped companies like you. Best Practice Guides Top tips on email sending practices. Webcasts Email how-tos hosted by industry experts. Videos Quick tips on improving your email program. Documentation Overview Web API SMTP API Webhooks API Libraries Blog Login Contact Us Contact Us Fill out the form below and a sales representative will be in touch with you shortly: Delivering your transactional and marketing email through one reliable platform. Get Started Try for Free Transactional Email Easily integrate via API to ensure your most important emails reach the inbox. Learn More Email Marketing Build beautiful, engaging email marketing campaigns that deliver powerful results. Learn More Solutions Transactional Email Email Marketing Expert Services Sales Contact Us Pricing Partners Solutions Providers Support Contact Support Documentation Report Spam Community Blog Github Forum Company About Our Team Careers Contact Us Press SendGrid Labs ©2016 SendGrid / Legal and Security Twitter Linked In Facebook Google Plus RSS Feed"	"null"	"null"	"A library for email services such as,, and."	"true"
"Email"	"PostMark"	"https://postmarkapp.com/"	"A library for email services such as,, and."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Postmark – Unmatched email delivery & troubleshooting   Postmark Why Postmark? Pricing API Docs Guides Blog Need help? Need help? Articles & FAQ API Docs System Status Contact Sales Contact Support Chat Closed Open Sign Up or Log In Postmark Customers Postmark really impressed us with their focus on transactional email. Learn how Asana relies on Postmark for two-way email infrastructure. Cliff Chang Product Engineer at Asana Read the story Try it free Postmark has helped us easily scale the business to 10,000 customers. Learn how Postmark consistently delivers LiveChat’s emails to the inbox. Bartosz Olchówka Head of Development at LiveChat Read the story Try it free Postmark blows every other transactional email product out of the water. Learn why Proposify trusts Postmark to deliver proposals and monitor open rates for their customers. Kyle Racki CEO at Proposify Read the story Try it free Postmark is reliable, cost effective, and gets the job done. They're best at what they do. See why Yapmo decided to trust Postmark to power email for their app. Claire Schlafly VP of Operations at Yapmo Read the story Try it free Instead of email being one part of our stack we have to fight with and maintain, Postmark takes care of everything for us. Learn how VSCO got started using Postmark. Joel Flory CEO at VSCO Read the story Try it free I really liked the simplicity and power of Postmark's API. When I read about their support for bootstrapped businesses, I was 100% sold. See how Nolan uses Postmark to power email for his bootstrapped business. Nolan Madge Founder at Pennant Wars Read the story Try it free IKEA litmus desk minecraft livestream UNICEF Asana Code Climate LiveChat 1Password Unmatched email delivery & troubleshooting 100% inbox rates Since we send transactional only, ISPs love us. Our infrastructure combined with proper content and delivery practices means higher response rates from your customers. See our delivery rates Troubleshoot email delivery View 45 days of searchable sending history including full content, bounces, and spam complaints. Track email performance See who opened your emails, where they opened it, what clients and platforms they used, and even how long they read the email. Recipient statistics View a history for each recipient, including opens, location, read time, client, and platform. Campaign statistics Aggregate statistics using tags for campaigns or specific types of content such as your drip emails, welcome emails, invoices, and more. Process inbound email into your app Let your users reply to your emails and post them directly into your web app. With our inbound parsing, we process incoming email and send it to your app via an easily readable JSON document. All inbound emails can be searched and retrieved directly in the app or API. Give Postmark a try Try it free First 25,000 emails free Global, fast, and secure infrastructure Global We have redundant data centers in five locations around the world, ensuring you never lose an email. Fast With Geographic Load Balancing, you get the lowest latency and fastest sending for your app. Secure We keep your data safe and secure with N+2 redundancy, regular security audits, and the latest encryption. Extensive API to integrate into your app All of your data (really, all of it!) is available in our API, making it simple to integrate your emails, stats, and bounces into your app. Rails .NET PHP Python Java You still haven’t signed up? Let’s get personal. Postmark is run by Wildbit, a software company founded in 1999 in Philadelphia. We built Postmark while running Beanstalk, and we felt completely blind for emails being sent from our web app. With existing knowledge in email delivery, we decided to tackle the problem ourselves. We’re profitable, debt-free and privately owned. Since 2010 we’ve sent billions of emails for customers, bringing better visibility and inbox rates for transactional email. The entire team here is truly committed to making Postmark an amazing experience for you. When you get in touch, you will not only hear from Dana and Patrick on support. Every person gets involved to give you the best answers possible, whether it is from a developer, the systems team or Chris and Natalie (the founders). Get to know the team: Dana Patrick Chris Natalie Rian Artem Andrew Igor Jake Milan Nick Benjamin Mike Andrey Derek Eugene Garrett Shane Have more questions? Email us or open a chat. We’d love to hear from you. Try it free First 25,000 emails free Product Home Pricing Guides Blog Twitter Shop Support Articles & FAQ API Docs System Status Contact Legal Privacy Policy Terms of Service Safe Harbor Policy Sign Up Log In A Wildbit product © Wildbit, LLC, 2016. All rights reserved. The Postmark logo and name are trademarks of Wildbit, LLC. Close Wildbit Hi, we're Wildbit, a distributed software company founded in 1999 in Philadelphia. We're obsessed with improving the way web apps are built, run, and deployed. About Us Our Writing Follow @wildbit Beanstalk Host, review, and deploy code all in one app Postmark Transactional email delivery for web apps DeployBot Deploy your code anywhere"	"null"	"null"	"A library for email services such as,, and."	"true"
"Email"	"MailGun"	"http://www.mailgun.com/"	"A library for email services such as,, and."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"36"	"26"	"2"	"GitHub - mailgun/hiring: Open positions at Mailgun Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 36 Fork 2 mailgun/hiring Code Issues 3 Pull requests 0 Pulse Graphs Open positions at Mailgun http://www.mailgun.com 84 commits 2 branches 0 releases Fetching contributors Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master sasha-edits Nothing to show Nothing to show New pull request Latest commit 7b6c379 Nov 17, 2015 jrodom Update README.md Permalink Failed to load latest commit information. README.md Update README.md Nov 17, 2015 fullstack.md add requirement for on-call participation and expand REST service dev… Sep 14, 2015 marketing-data-analyst.md Update marketing-data-analyst.md Oct 13, 2015 product-designer.md Update product-designer.md Oct 12, 2015 README.md Who we are Mailgun is the e-mail service for developers – our easy to use APIs make it simple to integrate reliable mail delivery into an application with tools to track, route, and analyze how users are responding. We’re ex-YC and were acquired by Rackspace in 2012, but remain an independent team with dedicated engineering, support, sales, and marketing. We have all of the resources of a large company, but the flexibility of a startup. Jobs at Mailgun Full Stack Developer (San Francisco, CA / Austin, TX) Marketing Data Analyst (San Antonio, TX / Austin, TX) About our team We believe in contributing back to the community. Many of the tools and libraries we’ve developed are open source (https://github.com/mailgun) We move fast and don’t believe in having unnecessary silos and red tape that keep teams from shipping software. As a developer on the team, you are responsible for not only building great software, but ensuring it is operating properly once it’s been deployed. We have a passion for solving hard problems – our services are responsible for processing billions of messages each month and have to not only scale, but be highly reliable. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mailgun/hiring"	"A library for email services such as,, and."	"true"
"Email"	"Mandrill"	"http://www.mandrill.com/"	"A library for email services such as,, and."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Transactional Email from MailChimp - Mandrill Mandrill by MailChimp Features Pricing Docs Blog Sign Up Log In On April 27, Mandrill became a paid MailChimp add-on. More information about this transition is in this blog post. Log in to Mandrill here. Transactional Email for MailChimp Mandrill is a transactional email API for MailChimp users. It's reliable, powerful, and ideal for sending data-driven emails, including targeted e-commerce and personalized one-to-one messages. Sign Up Billions of emails delivered each month More than 10 million people and businesses around the world use MailChimp. Built on the same powerful infrastructure as MailChimp, Mandrill delivers transactional emails in seconds. API Uptime 99.9% SMTP Uptime 99.93% API Error Rate 99.9% Status Updated: Feb 22, 2016 15:45 UTC Easy to integrate API Docs SMTP Docs Wrappers Rapid SMTP and API integration Don't spend all day wiring up your own bulky custom solution. Get started with Mandrill's SMTP or API integration in no time. Try Mandrill Send a Message Php Ruby Python example_script.php <?php    include_once ""swift_required.php"";    //    $transport = Swift_SmtpTransport::newInstance('smtp.mandrillapp.com', 587);   $transport->setUsername($MANDRILL_USERNAME);   $transport->setPassword($MANDRILL_PASSWORD);   $swift = Swift_Mailer::newInstance($transport);    //  ?>  require 'mail'  Mail.defaults do   delivery_method :smtp, {     :port      => 587,     :address   => ""smtp.mandrillapp.com"",     :user_name => MANDRILL_USERNAME,     :password  => MANDRILL_PASSWORD   } end  import os import smtplib  from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText  ##  username = MANDRILL_USERNAME password = MANDRILL_PASSWORD  s = smtplib.SMTP('smtp.mandrillapp.com', 587) s.login(username, password)  ##  Mandrill is a transactional email API created by MailChimp, a company with more than 10 years of experience building a robust email marketing platform. MailChimp sends 20 billion emails every month for more than 10 million users. About Us About MailChimp Blog Jobs Support Status API Docs SMTP Docs Help Legal Terms of Use Privacy Policy API Use Policy Copyright Policy Report Abuse ©2016 All rights reserved. Mandrill® is a registered trademark of The Rocket Science Group. It is also the world’s largest species of monkey."	"null"	"null"	"A library for email services such as,, and."	"true"
"Email"	"SwiftMailer"	"http://swiftmailer.org/"	"A mailer solution."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Powerful component based mailing library for PHP – Swift Mailer home installation documentation bugs current 5.4.2 Free Feature-rich PHP Mailer Swift Mailer integrates into any web app written in PHP 5, offering a flexible and elegant object-oriented approach to sending emails with a multitude of features. Send emails using SMTP, sendmail, postfix or a custom Transport implementation of your own Support servers that require username & password and/or encryption Protect from header injection attacks without stripping request data content Send MIME compliant HTML/multipart emails Use event-driven plugins to customize the library Handle large attachments and inline/embedded images with low memory use Get Started Download User Guide & Book Get Help Documentation Report a Bug Google Group"	"null"	"null"	"A mailer solution."	"true"
"Files"	"Apache MIME Types"	"https://github.com/dflydev/dflydev-apache-mime-types"	"A library that parses Apache MIME types."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"36"	"1"	"5"	"GitHub - dflydev/dflydev-apache-mime-types: Apache MIME Types Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 36 Fork 5 dflydev/dflydev-apache-mime-types Code Issues 0 Pull requests 1 Pulse Graphs Apache MIME Types 21 commits 1 branch 2 releases 2 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 381da0f Feb 21, 2014 simensen Merge pull request #4 from h4cc/patch-1 … Added PHP 5.6 and HHVM to travis. Permalink Failed to load latest commit information. bin Give proper instructions for getting the project setup. Dec 6, 2012 resources Generate PHP Repository. Dec 6, 2012 src/Dflydev/ApacheMimeTypes Added Array and Composite repositories. May 13, 2013 tests/Dflydev/ApacheMimeTypes Added Array and Composite repositories. May 14, 2013 .gitignore Initial drop. Dec 5, 2012 .travis.yml Added PHP 5.6 and HHVM to travis. Feb 21, 2014 README.md Moved buld status to the next line. Jan 22, 2014 composer.json Generate PHP Repository. Dec 6, 2012 phpunit.xml.dist Initial drop. Dec 5, 2012 README.md Apache MIME Types Parses Apache MIME Types files and provides a simple interface to find extensions by type and type by extension. Features Bundles mime.types from the Apache HTTP Project. (see here) Bundles a JSON representation of Apache mime.types. Provides an interface for reading either flat Apache HTTP mime.types or a JSON representation. Requirements PHP 5.3.3+ Installation Through Composer as dflydev/apache-mime-types. Usage Parser Parses Apache MIME Types in the format of mime.types found here. <?php $parser = new Dflydev\ApacheMimeTypes\Parser;  $map = $parser->parse('/path/to/mime.types'); The return value from parse is an array mapping types to an array of extensions. <?php array(     'text/html' => array('html', 'htm'), ); PhpRepository A repository backed by static PHP arrays. <?php $repository = new Dflydev\ApacheMimeTypes\PhpRepository;  $type = $repository->findType('html'); $extensions = $repository->findExtensions('text/html');  var_dump($type); var_dump($extensions);  // // Result // // string(9) ""text/html"" // array(2) { // [0]=> // string(4) ""html"" // [1]=> // string(3) ""htm"" // } // JsonRepository A repository backed by a JSON map of type to extensions. {     ""text/html"": [""html"", ""htm""] } To use the embedded JSON: <?php $repository = new Dflydev\ApacheMimeTypes\JsonRepository;  $type = $repository->findType('html'); $extensions = $repository->findExtensions('text/html');  var_dump($type); var_dump($extensions);  // // Result // // string(9) ""text/html"" // array(2) { // [0]=> // string(4) ""html"" // [1]=> // string(3) ""htm"" // } // To specify a specific JSON mapping: <?php $repository = new Dflydev\ApacheMimeTypes\JsonRepository('/path/to/mime.types.json'); FlatRepository A repository backed by Apache MIME Types formatted mime.types. To use the embedded mime.types: <?php $repository = new Dflydev\ApacheMimeTypes\FlatRepository;  $type = $repository->findType('html'); $extensions = $repository->findExtensions('text/html');  var_dump($type); var_dump($extensions);  // // Result // // string(9) ""text/html"" // array(2) { // [0]=> // string(4) ""html"" // [1]=> // string(3) ""htm"" // } // To specify a specific mime.types mapping: <?php $repository = new Dflydev\ApacheMimeTypes\FlatRepository('/path/to/mime.types'); License MIT, see LICENSE. Community If you have questions or want to help out, join us in the #dflydev channel on irc.freenode.net. Not Invented Here This project is based heavily on skyzyx/mimetypes. The major difference is that skyzyx/mimetypes is focussed on creating JSON files from Apache mime.types rather than providing a way to interact with Apache MIME Types as a data source. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dflydev/dflydev-apache-mime-types"	"A library that parses Apache MIME types."	"true"
"Files"	"Canal"	"https://github.com/dflydev/dflydev-canal"	"A library to determine internet media types."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"23"	"3"	"4"	"GitHub - dflydev/dflydev-canal: Analyze content to determine the appropriate Internet media type Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 23 Fork 4 dflydev/dflydev-canal Code Issues 0 Pull requests 0 Pulse Graphs Analyze content to determine the appropriate Internet media type 12 commits 1 branch 1 release 1 contributor PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.0 Nothing to show New pull request Latest commit 668af21 May 14, 2013 simensen equals() and factory access. Permalink Failed to load latest commit information. src/Dflydev/Canal equals() and factory access. May 14, 2013 tests/Dflydev/Canal equals() and factory access. May 14, 2013 .gitignore Initial drop. Jan 3, 2013 .travis.yml Started adding testing. Jan 4, 2013 LICENSE Added license. Jan 3, 2013 README.md Cleaned up the example code in the README. Jan 4, 2013 composer.json Corrected name. Jan 7, 2013 phpunit.xml.dist Started adding testing. Jan 4, 2013 README.md Canal Content analysis for the purpose of determining Internet media types. Requirements PHP 5.3+ Installation Through Composer as dflydev/canal. Usage <?php  // Instantiate the Analyzer $analyzer = new Dflydev\Canal\Analyzer\Analyzer;  // Detect a media type from a filename (file does not need to exist) $internetMediaType = $analyzer->detectFromFilename('/path/to/whatever.png');  // See the media type as a string print $internetMediaType->asString().""\n\n"";  // See the media type's type print $internetMediaType->getType().""\n\n"";  // See the media type's subtype print $internetMediaType->getSubtype().""\n\n"";  // image/png // // image // // png License MIT, see LICENSE. Not Invented Here This work was heavily influenced by Apache Tika and Ferret. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dflydev/dflydev-canal"	"A library to determine internet media types."	"true"
"Files"	"CSV"	"https://github.com/thephpleague/csv"	"A CSV data manipulation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"902"	"39"	"114"	"GitHub - thephpleague/csv: CSV data manipulation made easy in PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 39 Star 902 Fork 114 thephpleague/csv Code Issues 0 Pull requests 1 Pulse Graphs CSV data manipulation made easy in PHP http://csv.thephpleague.com 548 commits 2 branches 32 releases 15 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 8.1.0 8.0.0 7.2.0 7.1.2 7.1.1 7.1.0 7.0.1 7.0.0 6.3.0 6.2.0 6.1.0 6.0.1 6.0.0 5.4.0 5.3.1 5.3.0 5.2.0 5.1.0 5.0.0 4.2.1 4.2.0 4.1.2 4.1.1 4.1.0 4.0.0 3.3.0 3.2.0 3.1.0 3.0.1 3.0.0 2.0.0 1.0.0 Nothing to show New pull request Latest commit 63f2fc3 May 30, 2016 nyamsprod prepare 8.1.0 release Permalink Failed to load latest commit information. examples Update examples for version 8.0 Dec 11, 2015 src prepare 8.1.0 release May 30, 2016 test fix use class keyword May 2, 2016 .gitattributes Improve code Oct 21, 2015 .gitignore Create .gitignore Dec 2, 2013 .php_cs Improve Package Testing tools Sep 25, 2015 .scrutinizer.yml Improve Library settings Dec 3, 2015 .travis.yml Improve Library settings Dec 3, 2015 CHANGELOG.md prepare 8.1.0 release May 30, 2016 CONDUCT.md Adding the CONDUCT.md file Oct 6, 2015 CONTRIBUTING.md Update CSV MD files Dec 3, 2015 LICENSE prepare for 6.3 release Jan 20, 2015 README.md Update CSV MD files Dec 3, 2015 autoload.php Adding an autoloader script May 23, 2016 composer.json Improve Library settings Dec 3, 2015 phpunit.xml CS fixes Nov 8, 2014 README.md CSV Csv is a simple library to ease CSV parsing, writing and filtering in PHP. The goal of the library is to be powerful while remaining lightweight, by utilizing PHP native classes whenever possible. Highlights Simple API Read and Write to CSV documents in a memory efficient and scalable way Use SPL to interact with the CSV documents Support PHP Stream filtering capabilities Transform CSV documents into popular format (JSON, XML or HTML) Fully documented Fully unit tested Framework-agnostic Composer ready, PSR-2 and PSR-4 compliant Documentation Full documentation can be found at csv.thephpleague.com. Contribute to this documentation in the gh-pages branch System Requirements You need PHP >= 5.5.0 and the mbstring extension to use Csv but the latest stable version of PHP/HHVM is recommended. Install Install Csv using Composer. $ composer require league/csv  Configuration Warning: If your CSV document was created or is read on a Macintosh computer, add the following lines before using the library to help PHP detect line ending. if (!ini_get(""auto_detect_line_endings"")) {     ini_set(""auto_detect_line_endings"", '1'); } Testing Csv has a PHPUnit test suite and a coding style compliance test suite using PHP CS Fixer. To run the tests, run the following command from the project folder. $ composer test Contributing Contributions are welcome and will be fully credited. Please see CONTRIBUTING and CONDUCT for details. Security If you discover any security related issues, please email nyamsprod@gmail.com instead of using the issue tracker. Credits ignace nyamagana butera All Contributors License The MIT License (MIT). Please see LICENSE for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/csv"	"A CSV data manipulation library."	"true"
"Files"	"Ferret"	"https://github.com/versionable/Ferret"	"A MIME detection library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"0"	"6"	"GitHub - versionable/Ferret: Mime detection library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 0 Star 14 Fork 6 versionable/Ferret Code Issues 0 Pull requests 1 Pulse Graphs Mime detection library 44 commits 1 branch 0 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 33cf973 Nov 14, 2014 haswalt Merge pull request #5 from simensen/autoloader-and-tweaks … Changed autoloader handling, minor tweaks to unstick Travis. Permalink Failed to load latest commit information. src/Versionable/Ferret DetectorAbstract changes Oct 21, 2011 test Merge pull request #5 from simensen/autoloader-and-tweaks Nov 14, 2014 vendor Adding autoload for test Apr 13, 2011 .gitignore Changed autoloader handling, minor tweaks to unstick Travis. Dec 20, 2012 .travis.yml Changed autoloader handling, minor tweaks to unstick Travis. Dec 20, 2012 LICENSE Updated license Dec 12, 2012 README.md Rename readme Aug 6, 2012 build.xml Updating build to not run ExternalLibrary groups Oct 30, 2010 composer.json Fix autoload Jun 2, 2012 phpunit.xml.dist Changed autoloader handling, minor tweaks to unstick Travis. Dec 20, 2012 README.md Ferret Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/versionable/Ferret"	"A MIME detection library."	"true"
"Files"	"Flysystem"	"https://github.com/thephpleague/Flysystem"	"Another filesystem abstraction layer."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2861"	"142"	"309"	"GitHub - thephpleague/flysystem: Abstraction for local and remote filesystems Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 142 Star 2,861 Fork 309 thephpleague/flysystem Code Issues 18 Pull requests 1 Wiki Pulse Graphs Abstraction for local and remote filesystems http://flysystem.thephpleague.com 1,220 commits 6 branches 88 releases 97 contributors PHP 99.4% Shell 0.6% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature-mountmanager-plugins feature/http-guzzle-adapter ftp-windows gh-pages master twistor-configurable-permissions Nothing to show 1.0.24 1.0.23 1.0.22 1.0.21 1.0.20 1.0.19 1.0.18 1.0.17 1.0.16 1.0.15 1.0.14 1.0.13 1.0.12 1.0.11 1.0.10 1.0.9 1.0.8 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 1.0.0-alpha1 0.5.12 0.5.11 0.5.10 0.5.9 0.5.8 0.5.7 0.5.6 0.5.5 0.5.4 0.5.3 0.5.2 0.5.1 0.5.0 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 0.2.15 0.2.14 0.2.13 0.2.12 0.2.11 0.2.10 0.2.9 0.2.8 0.2.7 0.2.6 0.2.5 0.2.4 0.2.3 0.2.2 0.2.1 0.2.0 0.1.20 0.1.19 0.1.18 0.1.17 0.1.16 0.1.15 0.1.14 0.1.13 0.1.12 0.1.11 0.1.10 0.1.9 0.1.8 0.1.7 0.1.6 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit 00472d1 Jul 13, 2016 frankdejonge Remove validation of composer installable, breaks after version updates. Permalink Failed to load latest commit information. build Remove validation of composer installable, breaks after version updates. Jul 13, 2016 spec Made has('') explicitly return false. Apr 22, 2016 src Some cleanup and added a test for FTP read/readstream failure. Jul 13, 2016 stub Newlines Feb 22, 2015 tests Some cleanup and added a test for FTP read/readstream failure. Jul 13, 2016 .gitattributes Change readme.md to README.md in .gitattributes Oct 8, 2015 .gitignore Remove user-specific gitignore rule Oct 30, 2015 .php_cs Tightened CS. Dec 19, 2015 .scrutinizer.yml The duplication checks are wrong, ignore them. Jul 21, 2015 .travis.yml Test on OS X Jun 7, 2016 LICENSE Update license year to 2016 Jan 16, 2016 README.md Added badge Jun 6, 2016 appveyor.yml appveyor update Jun 6, 2016 changelog.md Pre-release changelog Jun 3, 2016 composer.json appveyor update Jun 6, 2016 phpspec.yml Made phpspec use the psr-4 prefix Jul 8, 2015 phpunit.hhvm.xml Fixes Dec 11, 2014 phpunit.php Skip visibility & permission related tests on windows Jan 26, 2015 phpunit.xml Tested ListWith plugin Jan 12, 2015 README.md League\Flysystem Flysystem is a filesystem abstraction which allows you to easily swap out a local filesystem for a remote one. Goals Have a generic API for handling common tasks across multiple file storage engines. Have consistent output which you can rely on. Integrate well with other packages/frameworks. Be cacheable. Emulate directories in systems that support none, like AwsS3. Support third party plugins. Make it easy to test your filesystem interactions. Support streams for big file handling. Installation Through Composer, obviously: composer require league/flysystem  You can also use Flysystem without using Composer by registering an autoloader function: spl_autoload_register(function($class) {     $prefix = 'League\\Flysystem\\';      if ( ! substr($class, 0, 17) === $prefix) {         return;     }      $class = substr($class, strlen($prefix));     $location = __DIR__ . 'path/to/flysystem/src/' . str_replace('\\', '/', $class) . '.php';      if (is_file($location)) {         require_once($location);     } }); Integrations Want to get started quickly? Check out some of these integrations: Laravel integration: https://github.com/GrahamCampbell/Laravel-Flysystem Symfony integration: https://github.com/1up-lab/OneupFlysystemBundle Zend Framework integration: https://github.com/bushbaby/BsbFlysystem CakePHP integration: https://github.com/WyriHaximus/FlyPie Silex integration: https://github.com/WyriHaximus/SliFly Cilex integration: https://github.com/WyriHaximus/cli-fly Yii 2 integration: https://github.com/creocoder/yii2-flysystem Backup manager: https://github.com/heybigname/backup-manager Drupal: https://www.drupal.org/project/flysystem elFinder: https://github.com/barryvdh/elfinder-flysystem-driver Adapters Local Amazon Web Services - S3 V2: https://github.com/thephpleague/flysystem-aws-s3-v2 Amazon Web Services - S3 V3: https://github.com/thephpleague/flysystem-aws-s3-v3 Rackspace Cloud Files: https://github.com/thephpleague/flysystem-rackspace Dropbox: https://github.com/thephpleague/flysystem-dropbox OneDrive: https://github.com/jacekbarecki/flysystem-onedrive Ftp Sftp (through phpseclib): https://github.com/thephpleague/flysystem-sftp Zip (through ZipArchive): https://github.com/thephpleague/flysystem-ziparchive WebDAV (through SabreDAV): https://github.com/thephpleague/flysystem-webdav PHPCR: https://github.com/thephpleague/flysystem-phpcr Azure Blob Storage NullAdapter Redis (through Predis): https://github.com/danhunsaker/flysystem-redis Fallback: https://github.com/Litipk/flysystem-fallback-adapter Memory: https://github.com/thephpleague/flysystem-memory Google Cloud Storage: https://github.com/Superbalist/flysystem-google-storage SinaAppEngine Storage: https://github.com/litp/flysystem-sae-storage Gaufrette: https://github.com/jenkoian/flysystem-gaufrette Caching Memory (array caching) Redis (through Predis) Memcached Adapter Stash Documentation Check out the documentation Security If you discover any security related issues, please email frenky@frenky.net instead of using the issue tracker. Enjoy Oh and if you've come down this far, you might as well follow me on twitter. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/Flysystem"	"Another filesystem abstraction layer."	"true"
"Files"	"Gaufrette"	"https://github.com/KnpLabs/Gaufrette"	"A filesystem abstraction layer."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1704"	"89"	"300"	"GitHub - KnpLabs/Gaufrette: PHP5 library that provides a filesystem abstraction layer − will be a feast for your files! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 89 Star 1,704 Fork 300 KnpLabs/Gaufrette Code Issues 64 Pull requests 25 Pulse Graphs PHP5 library that provides a filesystem abstraction layer − will be a feast for your files! http://knplabs.github.io/Gaufrette 753 commits 8 branches 12 releases 102 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop feature/appveyor feature/better-documentation feature/exceptions feature/file-metadata-refactoring feature/reamde-image gh-pages master Nothing to show v0.1.9 v0.1.8 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1 0.2.1 0.2.0 Nothing to show New pull request Latest commit ea6f4d4 May 31, 2016 akovalyov Merge pull request #413 from NiR-/fix/remove-unneeded-str-replace … Remove useless str_replace Permalink Failed to load latest commit information. doc Remove login/password from phpseclib adapter, closes #403 Apr 9, 2016 spec/Gaufrette Merge pull request #402 from symm/mime-info-in-memory May 25, 2016 src/Gaufrette Merge pull request #413 from NiR-/fix/remove-unneeded-str-replace May 31, 2016 tests Fix tests Feb 6, 2016 .editorconfig Split README into multiple files (one per adapter) Jan 17, 2016 .gitignore Setup couscous doc structure Mar 3, 2016 .travis.yml Travis adjustments and tuning Mar 4, 2016 LICENSE Add license Feb 3, 2011 README.md Make badges uniform wth shields.io Mar 5, 2016 composer.json Added league/flysystem as a dev dependency Mar 7, 2016 phpunit.xml.dist Move functional test to separate directory. Stared create adapter unit Sep 10, 2012 README.md Gaufrette Gaufrette provides a filesystem abstraction layer. Why use Gaufrette? Imagine you have to manage a lot of medias in a PHP project. Lets see how to take this situation in your advantage using Gaufrette. The filesystem abstraction layer permits you to develop your application without the need to know were all those medias will be stored and how. Another advantage of this is the possibility to update the files location without any impact on the code apart from the definition of your filesystem. In example, if your project grows up very fast and if your server reaches its limits, you can easily move your medias in an Amazon S3 server or any other solution. Documentation Read the official Gaufrette documentation. Symfony integration Symfony integration is available through KnpLabs/KnpGaufretteBundle. Setup the vendor libraries As some filesystem adapters use vendor libraries, you should install the vendors: $ cd gaufrette $ php composer.phar install $ sh bin/configure_test_env.sh  It will avoid skip a lot of tests. Launch the Test Suite In the Gaufrette root directory: To check if classes specification pass: $ php bin/phpspec run  To check basic functionality of the adapters (adapters should be configured you will see many skipped tests): $ bin/phpunit  Is it green? Note This project does not have any stable release yet but we do not want to break BC now. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/KnpLabs/Gaufrette"	"A filesystem abstraction layer."	"true"
"Files"	"Hoa Mime"	"https://github.com/hoaproject/Mime"	"Another MIME detection library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"62"	"16"	"10"	"GitHub - hoaproject/Mime: The Hoa\Mime library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 62 Fork 10 hoaproject/Mime Code Issues 0 Pull requests 0 Pulse Graphs The Hoa\Mime library. http://hoa-project.net/ 99 commits 1 branch 14 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 3.16.01.15 3.16.01.14 3.16.01.11 2.15.10.29 2.15.07.28 2.15.05.29 2.15.02.24 2.14.12.10 2.14.11.26 2.14.11.09 2.14.09.23 2.14.09.22 2.14.09.17 1.14.09.16 Nothing to show New pull request Latest commit c26f02f Jan 14, 2016 Hywan Prepare 3.16.01.15. Permalink Failed to load latest commit information. Documentation s/@lh/@hack Dec 13, 2014 Exception Quality: Run devtools:cs. Jan 9, 2016 Test/Unit Quality: Run devtools:cs. Jan 9, 2016 .State Add the state of the library. Feb 10, 2014 .gitignore Add a `.gitignore` file. Aug 3, 2015 CHANGELOG.md Prepare 3.16.01.15. Jan 14, 2016 Mime.php Quality: Run devtools:cs. Jan 9, 2016 Mime.types updated Mime.types with new MIME types Jan 19, 2015 README.md Quality: Drop PHP5.4. Jan 11, 2016 composer.json Composer: Forget to add a new stable library. Jan 14, 2016 README.md Hoa is a modular, extensible and structured set of PHP libraries. Moreover, Hoa aims at being a bridge between industrial and research worlds. Hoa\Mime This library allows to manipulate a MIME types database and get some related informations about streams. Installation With Composer, to include this library into your dependencies, you need to require hoa/mime: {     ""require"": {         ""hoa/mime"": ""~3.0""     } } Please, read the website to get more informations about how to install. Quick usage As a quick overview, we will see how to get general and stream-related informations. General informations All we need is static methods Hoa\Mime\Mime::getExtensionsFromMime to get extensions from a type and Hoa\Mime\Mime::getMimeFromExtension to get type from an extension: print_r(Hoa\Mime\Mime::getExtensionsFromMime('text/html'));  /**  * Will output:  * Array  * (  * [0] => html  * [1] => htm  * )  */  var_dump(Hoa\Mime\Mime::getMimeFromExtension('webm'));  /**  * Will output:  * string(10) ""video/webm""  */ By default, Hoa\Mime\Mime uses the hoa://Library/Mime/Mime.types file as database. We can change this behavior by calling the Hoa\Mime\Mime::compute before any computations: Hoa\Mime\Mime::compute('/etc/mime.types'); Stream-related informations By instanciating the Hoa\Mime\Mime class with a stream, we are able to get some informations about the stream, such as its extension, others extensions, type, etc. Thus: $type = new Hoa\Mime\Mime(new Hoa\File\Read('index.html'));  var_dump(     $type->getExtension(),     $type->getOtherExtensions(),     $type->getMime(),     $type->isExperimental() );  /**  * Will output:  * string(4) ""html""  * array(1) {  * [0]=>  * string(3) ""htm""  * }  * string(9) ""text/html""  * bool(false)  */ Documentation Different documentations can be found on the website: http://hoa-project.net/. License Hoa is under the New BSD License (BSD-3-Clause). Please, see LICENSE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hoaproject/Mime"	"Another MIME detection library."	"true"
"Files"	"Lurker"	"https://github.com/henrikbjorn/Lurker"	"A resource tracking library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"0"	"15"	"GitHub - henrikbjorn/Lurker: Resource Tracking Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 0 Star 4 Fork 15 henrikbjorn/Lurker forked from flint/Lurker Code Pull requests 0 Pulse Graphs Resource Tracking 97 commits 1 branch 1 release 7 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.0.0 Nothing to show New pull request Pull request Compare This branch is 6 commits behind flint:master. Latest commit 2aa0763 Oct 27, 2015 henrikbjorn add Docs Permalink Failed to load latest commit information. docs add Docs Oct 27, 2015 src/Lurker Fix wrong usage of resource in inotify ResourceStateChecker.php Oct 23, 2015 tests The __toString() method changed in symfony for DirectoryResource. Fixes Oct 23, 2015 .gitignore dont ignore composer May 17, 2013 .travis.yml fix alignment Oct 23, 2015 CHANGELOG.md Add changelog Sep 26, 2013 LICENSE ResourceWatcher is now Lurker a seperate library May 17, 2013 README.md add Docs Oct 27, 2015 composer.json fix alias May 17, 2013 mkdocs.yml add Docs Oct 27, 2015 phpunit.xml.dist ResourceWatcher is now Lurker a seperate library May 17, 2013 README.md Lurker Resource tracking for PHP. Watch files and/or directories. For more information look at the documentation here. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/henrikbjorn/Lurker"	"A resource tracking library."	"true"
"Files"	"PHP FFmpeg"	"https://github.com/PHP-FFmpeg/PHP-FFmpeg/"	"A wrapper for the video library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1078"	"90"	"260"	"GitHub - PHP-FFMpeg/PHP-FFMpeg: An object oriented PHP driver for FFMpeg binary Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 90 Star 1,078 Fork 260 PHP-FFMpeg/PHP-FFMpeg Code Issues 49 Pull requests 8 Wiki Pulse Graphs An object oriented PHP driver for FFMpeg binary 408 commits 5 branches 23 releases 19 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.3 0.4 hhvm master v0.1 Nothing to show 0.6.1 0.6.0 0.5.1 0.5.0 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 0.2.4 0.2.3 0.2.2 0.2.1 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit e9f87ee May 2, 2016 seblavoie committed with patkar Added documentation for the watermark filter (#221) … Added documentation for the watermark filter Permalink Failed to load latest commit information. .github Update github templates Mar 23, 2016 docs/source/API/API Update docs Aug 13, 2014 src/FFMpeg Remove unused statement Mar 5, 2016 tests Cleanup phpunit configs and PSR-4 autoloading and namespaces for tests Mar 6, 2016 .gitignore Cleanup composer, ignore lock, add me as a maintainer to the authors ;) Mar 6, 2016 .sami.php Address insight recommendations Jul 5, 2013 .travis.yml Build pushes only on master and pull requests only Mar 7, 2016 CHANGELOG.md Updated changelog to follow keepachangelog.com style Mar 9, 2016 LICENSE Add License Apr 13, 2012 README.md Added documentation for the watermark filter (#221) May 2, 2016 composer.json Improve travis builds and test PHP 7.0 and HHVM (with allow failures) Mar 7, 2016 phpunit.xml.dist Cleanup phpunit configs and PSR-4 autoloading and namespaces for tests Mar 6, 2016 README.md PHP FFmpeg An Object Oriented library to convert video/audio files with FFmpeg / AVConv. Check another amazing repo : PHP FFMpeg extras, you will find lots of Audio/Video formats there. Your attention please How this library works : This library requires a working FFMpeg install. You will need both FFMpeg and FFProbe binaries to use it. Be sure that these binaries can be located with system PATH to get the benefit of the binary detection, otherwise you should have to explicitely give the binaries path on load. For Windows users : Please find the binaries at http://ffmpeg.zeranoe.com/builds/. Known issues : Using rotate and resize will produce a corrupted output when using libav 0.8. The bug is fixed in version 9. This bug does not appear in latest ffmpeg version. Installation The recommended way to install PHP-FFMpeg is through Composer. {     ""require"": {         ""php-ffmpeg/php-ffmpeg"": ""~0.5""     } } Basic Usage $ffmpeg = FFMpeg\FFMpeg::create(); $video = $ffmpeg->open('video.mpg'); $video     ->filters()     ->resize(new FFMpeg\Coordinate\Dimension(320, 240))     ->synchronize(); $video     ->frame(FFMpeg\Coordinate\TimeCode::fromSeconds(10))     ->save('frame.jpg'); $video     ->save(new FFMpeg\Format\Video\X264(), 'export-x264.mp4')     ->save(new FFMpeg\Format\Video\WMV(), 'export-wmv.wmv')     ->save(new FFMpeg\Format\Video\WebM(), 'export-webm.webm'); Documentation This documentation is an introduction to discover the API. It's recommended to browse the source code as it is self-documented. FFMpeg FFMpeg\FFMpeg is the main object to use to manipulate medias. To build it, use the static FFMpeg\FFMpeg::create : $ffmpeg = FFMpeg\FFMpeg::create(); FFMpeg will autodetect ffmpeg and ffprobe binaries. If you want to give binary paths explicitely, you can pass an array as configuration. A Psr\Logger\LoggerInterface can also be passed to log binary executions. $ffmpeg = FFMpeg\FFMpeg::create(array(     'ffmpeg.binaries'  => '/opt/local/ffmpeg/bin/ffmpeg',     'ffprobe.binaries' => '/opt/local/ffmpeg/bin/ffprobe',     'timeout'          => 3600, // The timeout for the underlying process     'ffmpeg.threads'   => 12,   // The number of threads that FFMpeg should use ), $logger); Manipulate media FFMpeg\FFMpeg creates media based on URIs. URIs could be either a pointer to a local filesystem resource, an HTTP resource or any resource supported by FFmpeg. Note : To list all supported resource type of your FFmpeg build, use the -protocols command : ffmpeg -protocols  To open a resource, use the FFMpeg\FFMpeg::open method. $ffmpeg->open('video.mpeg'); Two types of media can be resolved : FFMpeg\Media\Audio and FFMpeg\Media\Video. A third type, FFMpeg\Media\Frame, is available through videos. Video FFMpeg\Media\Video can be transcoded, ie : change codec, isolate audio or video. Frames can be extracted. Transcoding You can transcode videos using the FFMpeg\Media\Video:save method. You will pass a FFMpeg\Format\FormatInterface for that. Please note that audio and video bitrate are set on the format. $format = new Format\Video\X264(); $format->on('progress', function ($video, $format, $percentage) {     echo ""$percentage % transcoded""; });  $format     -> setKiloBitrate(1000)     -> setAudioChannels(2)     -> setAudioKiloBitrate(256);  $video->save($format, 'video.avi'); Transcoding progress can be monitored in realtime, see Format documentation below for more informations. Extracting image You can extract a frame at any timecode using the FFMpeg\Media\Video::frame method. This code return a FFMpeg\Media\Frame instance corresponding to the second 42. You can pass any FFMpeg\Coordinate\TimeCode as argument, see dedicated documentation below for more information. $frame = $video->frame(FFMpeg\Coordinate\TimeCode::fromSeconds(42)); $frame->save('image.jpg'); Filters You can apply filters on FFMpeg\Media\Video with the FFMpeg\Media\Video::addFilter method. Video accepts Audio and Video filters. You can build your own filters and some are bundled in PHP-FFMpeg - they are accessible through the FFMpeg\Media\Video::filters method. Filters are chainable $video     ->filters()     ->resize($dimension, $mode, $useStandards)     ->framerate($framerate, $gop)     ->synchronize(); Rotate Rotates a video to a given angle. $video->filters()->rotate($angle); The $angle parameter must be one of the following constants : FFMpeg\Filters\Video\RotateFilter::ROTATE_90 : 90° clockwise FFMpeg\Filters\Video\RotateFilter::ROTATE_180 : 180° FFMpeg\Filters\Video\RotateFilter::ROTATE_270 : 90° counterclockwise Resize Resizes a video to a given size. $video->filters()->resize($dimension, $mode, $useStandards); The resize filter takes three parameters : $dimension, an instance of FFMpeg\Coordinate\Dimension $mode, one of the constants FFMpeg\Filters\Video\ResizeFilter::RESIZEMODE_* constants $useStandards, a boolean to force the use of the nearest aspect ratio standard. Watermark Watermark a video with a given image. $video     ->filters()     ->watermark($watermarkPath, array(         'position' => 'relative',         'bottom' => 50,         'right' => 50,     )); The watermark filter takes two parameters: $watermarkPath, the path to your watermark file. $coordinates, an array defining how you want your watermark positioned. You can use relative positioning as demonstrated above or absolute as such: $video     ->filters()     ->watermark($watermarkPath, array(         'position' => 'absolute',         'x' => 1180,         'y' => 620,     )); Framerate Changes the frame rate of the video. $video->filters()->framerate($framerate, $gop); The framerate filter takes two parameters : $framerate, an instance of FFMpeg\Coordinate\Framerate $gop, a GOP value (integer) Synchronize Synchronizes audio and video. Some containers may use a delay that results in desynchronized outputs. This filters solves this issue. $video->filters()->synchronize(); Clip Cuts the video at a desired point. $video->filters()->clip(FFMpeg\Coordinate\TimeCode::fromSeconds(30), FFMpeg\Coordinate\TimeCode::fromSeconds(15)); The clip filter takes two parameters: $start, an instance of FFMpeg\Coordinate\TimeCode, specifies the start point of the clip $duration, optional, an instance of FFMpeg\Coordinate\TimeCode, specifies the duration of the clip Audio FFMpeg\Media\Audio can be transcoded, ie : change codec, isolate audio or video. Frames can be extracted. Transcoding You can transcode audios using the FFMpeg\Media\Audio:save method. You will pass a FFMpeg\Format\FormatInterface for that. Please note that audio kilobitrate is set on the audio format. $ffmpeg = FFMpeg\FFMpeg::create(); $audio = $ffmpeg->open('track.mp3');  $format = new FFMpeg\Format\Audio\Flac(); $format->on('progress', function ($audio, $format, $percentage) {     echo ""$percentage % transcoded""; });  $format     -> setAudioChannels(2)     -> setAudioKiloBitrate(256);  $audio->save($format, 'track.flac'); Transcoding progress can be monitored in realtime, see Format documentation below for more informations. Filters You can apply filters on FFMpeg\Media\Audio with the FFMpeg\Media\Audio::addFilter method. It only accepts audio filters. You can build your own filters and some are bundled in PHP-FFMpeg - they are accessible through the FFMpeg\Media\Audio::filters method. Resample Resamples an audio file. $audio->filters()->resample($rate); The resample filter takes two parameters : $rate, a valid audio sample rate value (integer) Frame A frame is a image at a timecode of a video ; see documentation above about frame extraction. You can save frames using the FFMpeg\Media\Frame::save method. $frame->save('target.jpg'); This method has a second optional boolean parameter. Set it to true to get accurate images ; it takes more time to execute. Formats A format implements FFMpeg\Format\FormatInterface. To save to a video file, use FFMpeg\Format\VideoInterface, and FFMpeg\Format\AudioInterface for audio files. Format can also extends FFMpeg\Format\ProgressableInterface to get realtime informations about the transcoding. Predefined formats already provide progress informations as events. $format = new Format\Video\X264(); $format->on('progress', function ($video, $format, $percentage) {     echo ""$percentage % transcoded""; });  $video->save($format, 'video.avi'); The callback provided for the event can be any callable. Create your own format The easiest way to create a format is to extend the abstract FFMpeg\Format\Video\DefaultVideo and FFMpeg\Format\Audio\DefaultAudio. and implement the following methods. class CustomWMVFormat extends FFMpeg\Format\Video\DefaultVideo {     public function __construct($audioCodec = 'wmav2', $videoCodec = 'wmv2')     {         $this             ->setAudioCodec($audioCodec)             ->setVideoCodec($videoCodec);     }      public function supportBFrames()     {         return false;     }      public function getAvailableAudioCodecs()     {         return array('wmav2');     }      public function getAvailableVideoCodecs()     {         return array('wmv2');     } } Coordinates FFMpeg use many units for time and space coordinates. FFMpeg\Coordinate\AspectRatio represents an aspect ratio. FFMpeg\Coordinate\Dimension represent a dimension. FFMpeg\Coordinate\FrameRate represent a framerate. FFMpeg\Coordinate\Point represent a point. FFMpeg\Coordinate\TimeCode represent a timecode. FFProbe FFMpeg\FFProbe is used internally by FFMpeg\FFMpeg to probe medias. You can also use it to extract media metadata. $ffprobe = FFMpeg\FFProbe::create(); $ffprobe     ->streams('/path/to/video/mp4') // extracts streams informations     ->videos()                      // filters video streams     ->first()                       // returns the first video stream     ->get('codec_name');            // returns the codec_name property $ffprobe = FFMpeg\FFProbe::create(); $ffprobe     ->format('/path/to/video/mp4') // extracts file informations     ->get('duration');             // returns the duration property Using with Silex Microframework Service provider is easy to set up : $app = new Silex\Application(); $app->register(new FFMpeg\FFMpegServiceProvider());  $video = $app['ffmpeg']->open('video.mpeg'); Available options are as follow : $app->register(new FFMpeg\FFMpegServiceProvider(), array(     'ffmpeg.configuration' => array(         'ffmpeg.threads'   => 4,         'ffmpeg.timeout'   => 300,         'ffmpeg.binaries'  => '/opt/local/ffmpeg/bin/ffmpeg',         'ffprobe.timeout'  => 30,         'ffprobe.binaries' => '/opt/local/ffmpeg/bin/ffprobe',     ),     'ffmpeg.logger' => $logger, )); API Browser Browse the API License This project is licensed under the MIT license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PHP-FFmpeg/PHP-FFmpeg/"	"A wrapper for the video library."	"true"
"Files"	"FFmpeg"	"http://www.ffmpeg.org/"	"A wrapper for the video library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"FFmpeg FFmpeg About News Download Documentation Community Mailing Lists IRC Forums Bug Reports Wiki Developers Source Code Contribute FATE Code Coverage More Donate Hire Developers Contact Security Legal FFmpeg A complete, cross-platform solution to record, convert and stream audio and video. Download Converting video and audio has never been so easy. $ ffmpeg -i input.mp4 output.avi Discover more       News July 10th, 2016, ffserver program being dropped After thorough deliberation, we're announcing that we're about to drop the ffserver program from the project starting with the next release. ffserver has been a problematic program to maintain due to its use of internal APIs, which complicated the recent cleanups to the libavformat library, and block further cleanups and improvements which are desired by API users and will be easier to maintain. Furthermore the program has been hard for users to deploy and run due to reliability issues, lack of knowledgable people to help and confusing configuration file syntax. Current users and members of the community are invited to write a replacement program to fill the same niche that ffserver did using the new APIs and to contact us so we may point users to test and contribute to its development. July 1st, 2016, FFmpeg 3.1.1 ""Laplace"" FFmpeg 3.1.1, a new point release from the 3.1 release branch, is now available! It mainly deals with a few ABI issues introduced in the previous release. We strongly recommend users, distributors, and system integrators, especially those who experienced issues upgrading from 3.0, to upgrade unless they use current git master. June 27th, 2016, FFmpeg 3.1 ""Laplace"" FFmpeg 3.1 ""Laplace"", a new major release, is now available! Some of the highlights: DXVA2-accelerated HEVC Main10 decoding fieldhint filter loop video filter and aloop audio filter Bob Weaver deinterlacing filter firequalizer filter datascope filter bench and abench filters ciescope filter protocol blacklisting API MediaCodec H264 decoding VC-2 HQ RTP payload format (draft v1) depacketizer and packetizer VP9 RTP payload format (draft v2) packetizer AudioToolbox audio decoders AudioToolbox audio encoders coreimage filter (GPU based image filtering on OSX) libdcadec removed bitstream filter for extracting DTS core ADPCM IMA DAT4 decoder musx demuxer aix demuxer remap filter hash and framehash muxers colorspace filter hdcd filter readvitc filter VAAPI-accelerated format conversion and scaling libnpp/CUDA-accelerated format conversion and scaling Duck TrueMotion 2.0 Real Time decoder Wideband Single-bit Data (WSD) demuxer VAAPI-accelerated H.264/HEVC/MJPEG encoding DTS Express (LBR) decoder Generic OpenMAX IL encoder with support for Raspberry Pi IFF ANIM demuxer & decoder Direct Stream Transfer (DST) decoder loudnorm filter MTAF demuxer and decoder MagicYUV decoder OpenExr improvements (tile data and B44/B44A support) BitJazz SheerVideo decoder CUDA CUVID H264/HEVC decoder 10-bit depth support in native utvideo decoder libutvideo wrapper removed YUY2 Lossless Codec decoder VideoToolbox H.264 encoder We strongly recommend users, distributors, and system integrators to upgrade unless they use current git master. March 16th, 2016, Google Summer of Code FFmpeg has been accepted as a Google Summer of Code open source organization. If you wish to participate as a student see our project ideas page. You can already get in contact with mentors and start working on qualification tasks as well as register at google and submit your project proposal draft. Good luck! February 15th, 2016, FFmpeg 3.0 ""Einstein"" FFmpeg 3.0 ""Einstein"", a new major release, is now available! Some of the highlights: The native FFmpeg AAC encoder has seen extensive improvements and is no longer considered experimental Removed support for libvo-aacenc and libaacplus Over 30 new filters have been added Many ASM optimizations VP9 Hardware Acceleration (DXVA2 and VA-API) Cineform HD decoder New DCA decoder based on libdcadec with full support for DTS-HD extensions As with all major releases expect major backward incompatible API/ABI changes See the Changelog for a list of more updates We strongly recommend users, distributors, and system integrators to upgrade unless they use current git master. January 30, 2016, Removing support for two external AAC encoders We have just removed support for VisualOn AAC encoder (libvo-aacenc) and libaacplus in FFmpeg master. Even before marking our internal AAC encoder as stable, it was known that libvo-aacenc was of an inferior quality compared to our native one for most samples. However, the VisualOn encoder was used extensively by the Android Open Source Project, and we would like to have a tested-and-true stable option in our code base. When first committed in 2011, libaacplus filled in the gap of encoding High Efficiency AAC formats (HE-AAC and HE-AACv2), which was not supported by any of the encoders in FFmpeg at that time. The circumstances for both have changed. After the work spearheaded by Rostislav Pehlivanov and Claudio Freire, the now-stable FFmpeg native AAC encoder is ready to compete with much more mature encoders. The Fraunhofer FDK AAC Codec Library for Android was added in 2012 as the fourth supported external AAC encoder, and the one with the best quality and the most features supported, including HE-AAC and HE-AACv2. Therefore, we have decided that it is time to remove libvo-aacenc and libaacplus. If you are currently using libvo-aacenc, prepare to transition to the native encoder (aac) when updating to the next version of FFmpeg. In most cases it is as simple as merely swapping the encoder name. If you are currently using libaacplus, start using FDK AAC (libfdk_aac) with an appropriate profile option to select the exact AAC profile that fits your needs. In both cases, you will enjoy an audible quality improvement and as well as fewer licensing headaches. Enjoy! January 16, 2016, FFmpeg 2.8.5, 2.7.5, 2.6.7, 2.5.10 We have made several new point releases (2.8.5, 2.7.5, 2.6.7, 2.5.10). They fix various bugs, as well as CVE-2016-1897 and CVE-2016-1898. Please see the changelog for each release for more details. We recommend users, distributors and system integrators to upgrade unless they use current git master. December 5th, 2015, The native FFmpeg AAC encoder is now stable! After seven years the native FFmpeg AAC encoder has had its experimental flag removed and declared as ready for general use. The encoder is transparent at 128kbps for most samples tested with artifacts only appearing in extreme cases. Subjective quality tests put the encoder to be of equal or greater quality than most of the other encoders available to the public. Licensing has always been an issue with encoding AAC audio as most of the encoders have had a license making FFmpeg unredistributable if compiled with support for them. The fact that there now exists a fully open and truly free AAC encoder integrated directly within the project means a lot to those who wish to use accepted and widespread standards. The majority of the work done to bring the encoder up to quality was started during this year's GSoC by developer Claudio Freire and Rostislav Pehlivanov. Both continued to work on the encoder with the latter joining as a developer and mainainer, working on other parts of the project as well. Also, thanks to Kamedo2 who does comparisons and tests, the original authors and all past and current contributors to the encoder. Users are suggested and encouraged to use the encoder and provide feedback or breakage reports through our bug tracker. October 13th, 2015, Telepoint & MediaHub are now supporting our project A big thank you note goes to our newest supporters: MediaHub and Telepoint. Both companies have donated a dedicated server with free of charge internet connectivity. Here is a little bit about them in their own words: Telepoint is the biggest carrier-neutral data center in Bulgaria. Located in the heart of Sofia on a cross-road of many Bulgarian and International networks, the facility is a fully featured Tier 3 data center that provides flexible customer-oriented colocation solutions (ranging from a server to a private collocation hall) and a high level of security. MediaHub Ltd. is a Bulgarian IPTV platform and services provider which uses FFmpeg heavily since it started operating a year ago. ""Donating to help keep FFmpeg online is our way of giving back to the community"" . Thanks Telepoint and MediaHub for their support! September 29th, 2015, GSoC 2015 results FFmpeg participated to the latest edition of the Google Summer of Code Project. FFmpeg got a total of 8 assigned projects, and 7 of them were successful. We want to thank Google, the participating students, and especially the mentors who joined this effort. We're looking forward to participating in the next GSoC edition! Below you can find a brief description of the final outcome of each single project. Basic servers for network protocols, mentee: Stephan Holljes, mentor: Nicolas George Stephan Holljes's project for this session of Google Summer of Code was to implement basic HTTP server features for libavformat, to complement the already present HTTP client and RTMP and RTSP server code. The first part of the project was to make the HTTP code capable of accepting a single client; it was completed partly during the qualification period and partly during the first week of the summer. Thanks to this work, it is now possible to make a simple HTTP stream using the following commands:      ffmpeg -i /dev/video0 -listen 1 -f matroska \     -c:v libx264 -preset fast -tune zerolatency http://:8080     ffplay http://localhost:8080/   The next part of the project was to extend the code to be able to accept several clients, simultaneously or consecutively. Since libavformat did not have an API for that kind of task, it was necessary to design one. This part was mostly completed before the midterm and applied shortly afterwards. Since the ffmpeg command-line tool is not ready to serve several clients, the test ground for that new API is an example program serving hard-coded content. The last and most ambitious part of the project was to update ffserver to make use of the new API. It would prove that the API is usable to implement real HTTP servers, and expose the points where more control was needed. By the end of the summer, a first working patch series was undergoing code review. Browsing content on the server, mentee: Mariusz Szczepańczyk, mentor: Lukasz Marek Mariusz finished an API prepared by the FFmpeg community and implemented Samba directory listing as qualification task. During the program he extended the API with the possibility to remove and rename files on remote servers. He completed the implementation of these features for file, Samba, SFTP, and FTP protocols. At the end of the program, Mariusz provided a sketch of an implementation for HTTP directory listening. Directshow digital video capture, mentee: Mate Sebok, mentor: Roger Pack Mate was working on directshow input from digital video sources. He got working input from ATSC input sources, with specifiable tuner. The code has not been committed, but a patch of it was sent to the ffmpeg-devel mailing list for future use. The mentor plans on cleaning it up and committing it, at least for the ATSC side of things. Mate and the mentor are still working trying to finally figure out how to get DVB working. Implementing full support for 3GPP Timed Text Subtitles, mentee: Niklesh Lalwani, mentor: Philip Langdale Niklesh's project was to expand our support for 3GPP Timed Text subtitles. This is the native subtitle format for mp4 containers, and is interesting because it's usually the only subtitle format supported by the stock playback applications on iOS and Android devices. ffmpeg already had basic support for these subtitles which ignored all formatting information - it just provided basic plain-text support. Niklesh did work to add support on both the encode and decode side for text formatting capabilities, such as font size/colour and effects like bold/italics, highlighting, etc. The main challenge here is that Timed Text handles formatting in a very different way from most common subtitle formats. It uses a binary encoding (based on mp4 boxes, naturally) and stores information separately from the text itself. This requires additional work to track which parts of the text formatting applies to, and explicitly dealing with overlapping formatting (which other formats support but Timed Text does not) so it requires breaking the overlapping sections into separate non-overlapping ones with different formatting. Finally, Niklesh had to be careful about not trusting any size information in the subtitles - and that's no joke: the now infamous Android stagefright bug was in code for parsing Timed Text subtitles. All of Niklesh's work is committed and was released in ffmpeg 2.8. libswscale refactoring, mentee: Pedro Arthur, mentors: Michael Niedermayer, Ramiro Polla Pedro Arthur has modularized the vertical and horizontal scalers. To do this he designed and implemented a generic filter framework and moved the existing scaler code into it. These changes now allow easily adding removing, splitting or merging processing steps. The implementation was benchmarked and several alternatives were tried to avoid speed loss. He also added gamma corrected scaling support. An example to use gamma corrected scaling would be:      ffmpeg -i input -vf scale=512:384:gamma=1 output   Pedro has done impressive work considering the short time available, and he is a FFmpeg committer now. He continues to contribute to FFmpeg, and has fixed some bugs in libswscale after GSoC has ended. AAC Encoder Improvements, mentee: Rostislav Pehlivanov, mentor: Claudio Freire Rostislav Pehlivanov has implemented PNS, TNS, I/S coding and main prediction on the native AAC encoder. Of all those extensions, only TNS was left in a less-than-usable state, but the implementation has been pushed (disabled) anyway since it's a good basis for further improvements. PNS replaces noisy bands with a single scalefactor representing the energy of that band, gaining in coding efficiency considerably, and the quality improvements on low bitrates are impressive for such a simple feature. TNS still needs some polishing, but has the potential to reduce coding artifacts by applying noise shaping in the temporal domain (something that is a source of annoying, notable distortion on low-entropy bands). Intensity Stereo coding (I/S) can double coding efficiency by exploiting strong correlation between stereo channels, most effective on pop-style tracks that employ panned mixing. The technique is not as effective on classic X-Y recordings though. Finally, main prediction improves coding efficiency by exploiting correlation among successive frames. While the gains have not been huge at this point, Rostislav has remained active even after the GSoC, and is polishing both TNS and main prediction, as well as looking for further improvements to make. In the process, the MIPS port of the encoder was broken a few times, something he's also working to fix. Animated Portable Network Graphics (APNG), mentee: Donny Yang, mentor: Paul B Mahol Donny Yang implemented basic keyframe only APNG encoder as the qualification task. Later he wrote interframe compression via various blend modes. The current implementation tries all blend modes and picks one which takes the smallest amount of memory. Special care was taken to make sure that the decoder plays correctly all files found in the wild and that the encoder produces files that can be played in browsers that support APNG. During his work he was tasked to fix any encountered bug in the decoder due to the fact that it doesn't match APNG specifications. Thanks to this work, a long standing bug in the PNG decoder has been fixed. For latter work he plans to continue working on the encoder, making it possible to select which blend modes will be used in the encoding process. This could speed up encoding of APNG files. September 9th, 2015, FFmpeg 2.8 We published release 2.8 as new major version. It contains all features and bug fixes of the git master branch from September 8th. Please see the changelog for a list of the most important changes. We recommend users, distributors and system integrators to upgrade unless they use current git master. August 1st, 2015, A message from the FFmpeg project Dear multimedia community, The resignation of Michael Niedermayer as leader of FFmpeg yesterday has come by surprise. He has worked tirelessly on the FFmpeg project for many years and we must thank him for the work that he has done. We hope that in the future he will continue to contribute to the project. In the coming weeks, the FFmpeg project will be managed by the active contributors. The last four years have not been easy for our multimedia community - both contributors and users. We should now look to the future, try to find solutions to these issues, and to have reconciliation between the forks, which have split the community for so long. Unfortunately, much of the disagreement has taken place in inappropriate venues so far, which has made finding common ground and solutions difficult. We aim to discuss this in our communities online over the coming weeks, and in person at the VideoLAN Developer Days in Paris in September: a neutral venue for the entire open source multimedia community. The FFmpeg project. July 4th, 2015, FFmpeg needs a new host UPDATE: We have received more than 7 offers for hosting and servers, thanks a lot to everyone! After graciously hosting our projects (FFmpeg, MPlayer and rtmpdump) for 4 years, Arpi (our hoster) has informed us that we have to secure a new host somewhere else immediately. If you want to host an open source project, please let us know, either on ffmpeg-devel mailing list or irc.freenode.net #ffmpeg-devel. We use about 4TB of storage and at least 4TB of bandwidth / month for various mailing lists, trac, samples repo, svn, etc. March 16, 2015, FFmpeg 2.6.1 We have made a new major release (2.6) and now one week afterward 2.6.1. It contains all features and bugfixes of the git master branch from the 6th March. Please see the Release Notes for a list of note-worthy changes. We recommend users, distributors and system integrators to upgrade unless they use current git master. March 4, 2015, Google Summer of Code FFmpeg has been accepted as a Google Summer of Code Project. If you wish to participate as a student see our project ideas page. You can already get in contact with mentors and start working on qualification tasks. Registration at Google for students will open March 16th. Good luck! March 1, 2015, Chemnitzer Linux-Tage We happily announce that FFmpeg will be represented at Chemnitzer Linux-Tage (CLT) in Chemnitz, Germany. The event will take place on 21st and 22nd of March. More information can be found here We demonstrate usage of FFmpeg, answer your questions and listen to your problems and wishes. If you have media files that cannot be processed correctly with FFmpeg, be sure to have a sample with you so we can have a look! For the first time in our CLT history, there will be an FFmpeg workshop! You can read the details here. The workshop is targeted at FFmpeg beginners. First the basics of multimedia will be covered. Thereafter you will learn how to use that knowledge and the FFmpeg CLI tools to analyse and process media files. The workshop is in German language only and prior registration is necessary. The workshop will be on Saturday starting at 10 o'clock. We are looking forward to meet you (again)! December 5, 2014, FFmpeg 2.5 We have made a new major release (2.5) It contains all features and bugfixes of the git master branch from the 4th December. Please see the Release Notes for a list of note-worthy changes. We recommend users, distributors and system integrators to upgrade unless they use current git master. October 10, 2014, FFmpeg is in Debian unstable again We wanted you to know there are FFmpeg packages in Debian unstable again. A big thank-you to Andreas Cadhalpun and all the people that made it possible. It has been anything but simple. Unfortunately that was already the easy part of this news. The bad news is the packages probably won't migrate to Debian testing to be in the upcoming release codenamed jessie. Read the argumentation over at Debian. However things will come out in the end, we hope for your continued remarkable support! October 8, 2014, FFmpeg secured a place in OPW! Thanks to a generous 6K USD donation by Samsung (Open Source Group), FFmpeg will be welcoming at least 1 ""Outreach Program for Women"" intern to work with our community for an initial period starting December 2014 (through March 2015). We all know FFmpeg is used by the industry, but even while there are countless products building on our code, it is not at all common for companies to step up and help us out when needed. So a big thank-you to Samsung and the OPW program committee! If you are thinking on participating in OPW as an intern, please take a look at our OPW wiki page for some initial guidelines. The page is still a work in progress, but there should be enough information there to get you started. If you, on the other hand, are thinking on sponsoring work on FFmpeg through the OPW program, please get in touch with us at opw@ffmpeg.org. With your help, we might be able to secure some extra intern spots for this round! September 15, 2014, FFmpeg 2.4 We have made a new major release (2.4) It contains all features and bugfixes of the git master branch from the 14th September. Please see the Release Notes for a list of note-worthy changes. We recommend users, distributors and system integrators to upgrade unless they use current git master. August 20, 2014, FFmpeg 2.3.3, 2.2.7, 1.2.8 We have made several new point releases (2.3.3, 2.2.7, 1.2.8). They fix various bugs, as well as CVE-2014-5271 and CVE-2014-5272. Please see the changelog for more details. We recommend users, distributors and system integrators to upgrade unless they use current git master. July 29, 2014, Help us out securing our spot in OPW Following our previous post regarding our participation on this year's OPW (Outreach Program for Women), we are now reaching out to our users (both individuals and companies) to help us gather the needed money to secure our spot in the program. We need to put together 6K USD as a minimum but securing more funds would help us towards getting more than one intern. You can donate by credit card using Click&Pledge and selecting the ""OPW"" option. If you would like to donate by money transfer or by check, please get in touch by e-mail and we will get back to you with instructions. Thanks! July 20, 2014, New website The FFmpeg project is proud to announce a brand new version of the website made by db0. While this was initially motivated by the need for a larger menu, the whole website ended up being redesigned, and most pages got reworked to ease navigation. We hope you'll enjoy browsing it. July 17, 2014, FFmpeg 2.3 We have made a new major release (2.3) It contains all features and bugfixes of the git master branch from the 16th July. Please see the Release Notes for a list of note-worthy changes. We recommend users, distributors and system integrators to upgrade unless they use current git master. July 3, 2014, FFmpeg and the Outreach Program For Women FFmpeg has started the process to become an OPW includer organization for the next round of the program, with internships starting December 9. The OPW aims to ""Help women (cis and trans) and genderqueer to get involved in free and open source software"". Part of the process requires securing funds to support at least one internship (6K USD), so if you were holding on your donation to FFmpeg, this is a great chance for you to come forward, get in touch and help both the project and a great initiative! We have set up an email address you can use to contact us about donations and general inquires regarding our participation in the program. Hope to hear from you soon! June 29, 2014, FFmpeg 2.2.4, 2.1.5, 2.0.5, 1.2.7, 1.1.12, 0.10.14 We have made several new point releases (2.2.4, 2.1.5, 2.0.5, 1.2.7, 1.1.12, 0.10.14). They fix a security issue in the LZO implementation, as well as several other bugs. See the git log for details. We recommend users, distributors and system integrators to upgrade unless they use current git master. May 1, 2014, LinuxTag Once again FFmpeg will be represented at LinuxTag in Berlin, Germany. The event will take place from 8th to 10th of May. Please note that this year's LinuxTag is at a different location closer to the city center. We will have a shared booth with XBMC and VideoLAN. If you have media files that cannot be processed correctly with FFmpeg, be sure to have a sample with you so we can have a look! More information about LinuxTag can be found here We are looking forward to see you in Berlin! April 18, 2014, OpenSSL Heartbeat bug Our server hosting the Trac issue tracker was vulnerable to the attack against OpenSSL known as ""heartbleed"". The OpenSSL software library was updated on 7th of April, shortly after the vulnerability was publicly disclosed. We have changed the private keys (and certificates) for all FFmpeg servers. The details were sent to the mailing lists by Alexander Strasser, who is part of the project server team. Here is a link to the user mailing list archive . We encourage you to read up on ""OpenSSL heartbleed"". It is possible that login data for the issue tracker was exposed to people exploiting this security hole. You might want to change your password in the tracker and everywhere else you used that same password. April 11, 2014, FFmpeg 2.2.1 We have made a new point releases (2.2.1). It contains bug fixes for Tickets #2893, #3432, #3469, #3486, #3495 and #3540 as well as several other fixes. See the git log for details. March 24, 2014, FFmpeg 2.2 We have made a new major release (2.2) It contains all features and bugfixes of the git master branch from 1st March. A partial list of new stuff is below:      - HNM version 4 demuxer and video decoder     - Live HDS muxer     - setsar/setdar filters now support variables in ratio expressions     - elbg filter     - string validation in ffprobe     - support for decoding through VDPAU in ffmpeg (the -hwaccel option)     - complete Voxware MetaSound decoder     - remove mp3_header_compress bitstream filter     - Windows resource files for shared libraries     - aeval filter     - stereoscopic 3d metadata handling     - WebP encoding via libwebp     - ATRAC3+ decoder     - VP8 in Ogg demuxing     - side & metadata support in NUT     - framepack filter     - XYZ12 rawvideo support in NUT     - Exif metadata support in WebP decoder     - OpenGL device     - Use metadata_header_padding to control padding in ID3 tags (currently used in     MP3, AIFF, and OMA files), FLAC header, and the AVI ""junk"" block.     - Mirillis FIC video decoder     - Support DNx444     - libx265 encoder     - dejudder filter     - Autodetect VDA like all other hardware accelerations   We recommend users, distributors and system integrators to upgrade unless they use current git master. February 3, 2014, Chemnitzer Linux-Tage We happily announce that FFmpeg will be represented at `Chemnitzer Linux-Tage' in Chemnitz, Germany. The event will take place on 15th and 16th of March. More information can be found here We invite you to visit us at our booth located in the Linux-Live area! There we will demonstrate usage of FFmpeg, answer your questions and listen to your problems and wishes. If you have media files that cannot be processed correctly with FFmpeg, be sure to have a sample with you so we can have a look! We are looking forward to meet you (again)! February 9, 2014, trac.ffmpeg.org / trac.mplayerhq.hu Security Breach The server on which FFmpeg and MPlayer Trac issue trackers were installed was compromised. The affected server was taken offline and has been replaced and all software reinstalled. FFmpeg Git, releases, FATE, web and mailinglists are on other servers and were not affected. We believe that the original compromise happened to a server, unrelated to FFmpeg and MPlayer, several months ago. That server was used as a source to clone the VM that we recently moved Trac to. It is not known if anyone used the backdoor that was found. We recommend all users to change their passwords. Especially users who use a password on Trac that they also use elsewhere, should change that password at least elsewhere. November 12, 2013, FFmpeg RFP in Debian Since the splitting of Libav the Debian/Ubuntu maintainers have followed the Libav fork. Many people have requested the packaging of ffmpeg in Debian, as it is more feature-complete and in many cases less buggy. Rogério Brito, a Debian developer, has proposed a Request For Package (RFP) in the Debian bug tracking system. Please let the Debian and Ubuntu developers know that you support packaging of the real FFmpeg! See Debian ticket #729203 for more details. October 28, 2013, FFmpeg 2.1 We have made a new major release (2.1) It contains all features and bugfixes of the git master branch from 28th October. A partial list of new stuff is below:      - aecho filter     - perspective filter ported from libmpcodecs     - ffprobe -show_programs option     - compand filter     - RTMP seek support     - when transcoding with ffmpeg (i.e. not streamcopying), -ss is now accurate     even when used as an input option. Previous behavior can be restored with     the -noaccurate_seek option.     - ffmpeg -t option can now be used for inputs, to limit the duration of     data read from an input file     - incomplete Voxware MetaSound decoder     - read EXIF metadata from JPEG     - DVB teletext decoder     - phase filter ported from libmpcodecs     - w3fdif filter     - Opus support in Matroska     - FFV1 version 1.3 is stable and no longer experimental     - FFV1: YUVA(444,422,420) 9, 10 and 16 bit support     - changed DTS stream id in lavf mpeg ps muxer from 0x8a to 0x88, to be     more consistent with other muxers.     - adelay filter     - pullup filter ported from libmpcodecs     - ffprobe -read_intervals option     - Lossless and alpha support for WebP decoder     - Error Resilient AAC syntax (ER AAC LC) decoding     - Low Delay AAC (ER AAC LD) decoding     - mux chapters in ASF files     - SFTP protocol (via libssh)     - libx264: add ability to encode in YUVJ422P and YUVJ444P     - Fraps: use BT.709 colorspace by default for yuv, as reference fraps decoder does     - make decoding alpha optional for prores, ffv1 and vp6 by setting     the skip_alpha flag.     - ladspa wrapper filter     - native VP9 decoder     - dpx parser     - max_error_rate parameter in ffmpeg     - PulseAudio output device     - ReplayGain scanner     - Enhanced Low Delay AAC (ER AAC ELD) decoding (no LD SBR support)     - Linux framebuffer output device     - HEVC decoder, raw HEVC demuxer, HEVC demuxing in TS, Matroska and MP4     - mergeplanes filter   We recommend users, distributors and system integrators to upgrade unless they use current git master. Past news"	"null"	"null"	"A wrapper for the video library."	"true"
"Streams"	"Streamer"	"https://github.com/fzaninotto/Streamer"	"A simple object-orientated stream wrapper library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"181"	"8"	"22"	"GitHub - fzaninotto/Streamer: Object-Oriented API for PHP streams Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 181 Fork 22 fzaninotto/Streamer Code Issues 4 Pull requests 0 Pulse Graphs Object-Oriented API for PHP streams 17 commits 1 branch 1 release Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.0.1 Nothing to show New pull request Latest commit 9c1f96e Jul 13, 2015 fzaninotto Merge pull request #6 from royopa/patch-1 … add how to install with composer Permalink Failed to load latest commit information. Streamer Updated with indent probs Jan 6, 2015 tests Add `Stream::getLine()` Jul 2, 2012 .gitignore Initial Commit Jun 26, 2012 LICENSE Initial Commit Jun 25, 2012 README.md add Jul 10, 2015 composer.json Initial Commit Jun 25, 2012 phpunit.xml.dist Initial Commit Jun 25, 2012 README.md Streamer Streamer is an Object-Oriented API for PHP streams. Why should I use Streams? A stream is a flow of bytes from one container to the other. You already use streams a lot in PHP, for instance each time you load a file into memory (file_get_contents()). You should explicitly use streams each time that: You need to access data from a container, but you don't know the size of this container (e.g. reading from STDIN, or a web service using streaming) You need to start processing data from a container before the whole transfer is finished (e.g. start zipping a file before it's all in memory) You need to save time and memory What is Streamer? PHP has a very elaborate stream API ; unfortunately, it uses functions for most stream operations (except for wrappers - go figure). Streamer is a generic library focusing on offering an object-oriented API to streams, and only that. Installation Streamer is published on packagist.org, so you can add it to your composer.json file for an easy installation: composer require fzaninotto/Streamer or {     ""require"": {         ""fzaninotto/Streamer"": ""0.0.1""     } } Example <?php use Streamer\Stream,     Streamer\FileStream,     Streamer\NetworkStream;  // basic usage $stream = new Stream(fopen('smiley.png', 'r')); $image = ''; while (!$stream->isEOF()) {   $image .= $stream->read(); }  // pipe dreams! $stream1 = new Stream(fopen('smiley.png', 'r')); $stream2 = new Stream(fopen('tmp.png', 'w')); // copy the contents from the first stream to the second one $stream1->pipe($stream2);  // factory $fileStream = FileStream::create('smiley.png', 'r'); print_r($fileStream);  $networkStream = NetworkStream::create('tcp://www.google.com:80'); print_r($networkStream);  Credits Streamer is heavily inspired by other Stream class implementations: Guzzle Joomla's Filesystem Stream Node.Js Stream API Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fzaninotto/Streamer"	"A simple object-orientated stream wrapper library."	"true"
"Dependency Injection"	"Acclimate"	"https://github.com/jeremeamia/acclimate-container"	"A common interface to dependency injection containers and service locators."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"151"	"11"	"14"	"GitHub - jeremeamia/acclimate-container: Adapters for PHP framework containers to an interoperable interface Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 151 Fork 14 jeremeamia/acclimate-container Code Issues 3 Pull requests 3 Pulse Graphs Adapters for PHP framework containers to an interoperable interface 82 commits 4 branches 5 releases 10 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.1 2.0 deprecating-guzzle master Nothing to show 1.0.0 1.0.0-rc.1 0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit 7de0d2e Mar 3, 2016 Sam-Burns Merge pull request #40 from jeremeamia/deprecating-guzzle … Deprecating Guzzle Permalink Failed to load latest commit information. src Marking Guzzle as deprecated Mar 1, 2016 tests Revert ""Merge pull request #26 from Sam-Burns/remove-guzzle"" Mar 1, 2016 .gitignore Updated all the configs, the README, and a few tests Mar 19, 2014 .scrutinizer.yml Trying to fix scrutinizer coverage badge Feb 22, 2016 .travis.yml PHP7 compatibility Feb 22, 2016 LICENSE.md Lots of changes: renamed package, factored out interfaces into a sepa… Dec 17, 2013 README.md Marking Guzzle as deprecated Mar 1, 2016 composer.json composer.json fix Mar 1, 2016 phpunit.xml.dist Updated all the configs, the README, and a few tests Mar 19, 2014 README.md Acclimate - Container Adapters Get Acclimated! Use any third-party dependency injection containers and service locators in your code by adapting them to a common container interface. Acclimate was created by Jeremy Lindblom. Introduction It seems like every framework has its own container object. They come in many shapes and sizes (service locator, service manager, service container, dependency injection (DI) container, registry, etc.), but are all generally used in a similar way. The wide variety of implementations makes it hard for other frameworks, framework-agnostic libraries, or some applications to get the full benefits of using an inversion of control (IoC) system, because they either need to: Write their own container implementation (NIH Syndrome) Have a long-term dependency on a particular, third-party container implementation (and force that dependency on their users, which may already be using a different container implementation) Implement an abstraction layer to support one or more third-party containers Acclimate is a library that does #3 for you. It provides a set of adapters for the most popular container implementations. This allows you to adapt, or ""acclimate"", instances of these containers to a common, normalized, and interoperable interface. Using Acclimate allows your framework, library, or application to retrieve items from the container objects of third-party libraries. That's interoperability! The Container Interface The ContainerInterface used by Acclimate comes from the container-interop/container-interop project. It attempts to normalize the various implementations of container interfaces (whether they be for service locators, dependency injection containers, or something else similar) to a simple, readonly interface, that allows users to retrieve entries from any third-party container in a consistent way. The ContainerInterface looks like this: namespace Interop\Container;  interface ContainerInterface {     /**  * @param string $id  * @return mixed  * @throws NotFoundException  * @throws ContainerException  */     public function get($id);      /**  * @param string $id  * @return bool  */     public function has($id); } Installation Install the acclimate/container package using Composer. This will also also install container-interop/container-interop, which provides the ContainerInterface. Warning: If you install Acclimate with dev dependencies, you will get A LOT of packages from various frameworks (e.g., ZF, Symfony, Laravel, etc.). These packages are required for testing only to ensure that all of the adapter classes work correctly. They are not included when you run Composer with --no-dev. Note: We recommend using Composer and Composer's autoloader to load this library. If you are not using Composer's autoloader, be sure to use a PSR-4 compliant autoloader and map the namespace prefix Acclimate\Container\ to the src/ directory in order to correct autoload the classes. Basic Usage Acclimate: Container provides a ContainerAcclimator object that is used to adapt a container object to a normalized ContainerInterface. In terms of design patterns, it's essentially a factory for adapters. Here is an example of how to use the ContainerAcclimator: <?php  // Require the Composer autoloader require 'vendor/autoload.php';  use Acclimate\Container\ContainerAcclimator;  // Create a `Pimple` container and store an `SplQueue` object in it $pimple = new Pimple(); $pimple['queue'] = function() {     $queue = new SplQueue();     $queue->enqueue('Hello!');     return $queue; };  // Create a `ContainerAcclimator` and use it to adapt the `Pimple` container to the Acclimate `ContainerInterface` $acclimator = new ContainerAcclimator; $container = $acclimator->acclimate($pimple);  // Use the adapted container via the common interface to fetch the queue object $queue = $container->get('queue'); echo $queue->dequeue(); // Look! The queue object still works! #> Hello! Now you can use the container from your favorite framework and acclimate it into your other code. :-) Container Decorators The default behavior of a container implementing the ContainerInterface is to throw a Interop\Container\Exception\NotFoundException when using get() to retrieve an entry that does not actually exist in the container. In some cases, you may want to change this default behavior to do something else instead (e.g., return null). Container decorators allow you to easily modify the behavior of a container. acclimate\container ships with 3 decorators (NullOnMissContainer, CallbackOnMissContainer, and FailoverOnMissContainer), but allows you to easily create your own by extending Acclimate\Container\Decorator\AbstractContainerDecorator. Here is an example of how to use the NullOnMissContainer decorator: <?php  // Require the Composer autoloader require 'vendor/autoload.php';  use Acclimate\Container\ArrayContainer; use Acclimate\Container\Decorator\NullOnMissContainer; use Interop\Container\Exception\NotFoundException;  // Create an empty, basic container following the `ContainerInterface` $container = new ArrayContainer();  // Normally, this container will throw an exception on missing items try {     $item = $container->get('foo'); } catch (NotFoundException $e) {     echo $e->getMessage() . ""\n""; } # There is no entry found in the container for the identifier ""foo"".  // Decorate the container so that null is returned instead of throwing an exception $container = new NullOnMissContainer($container); $item = $container->get('foo'); var_dump($item); #> NULL Composite Container You can create composite containers if your use case requires that you need to fetch data from two or more different container objects. For the sake of the following example, we will say the you have a Symfony Container stored in the variable $sfContainer, and a Zend ServiceManager stored in the variable $zfContainer. use Acclimate\Container\ContainerAcclimator; use Acclimate\Container\CompositeContainer;  // First, let's acclimate these containers $acclimator = new ContainerAcclimator; $sfContainer = $acclimator->acclimate($sfContainer); $zfContainer = $acclimator->acclimate($zfContainer);  // Now, we will put these two containers together $container = new CompositeContainer([$sfContainer, $zfContainer]);  // When we execute the `has()` method of the container, it will return `true` // if at least one of these containers contains an item identified by ""foo"" $exists = $container->has('foo'); This is essentially a way to support container chaining, but uses the Composite design pattern instead of the Chain of Command design pattern. You can also use the FailoverOnMissContainer decorator to support chaining. Supported Containers Aura.Di Container Laravel Container Nette DI Container PHP-DI Container Pimple Symfony Dependency Injection Container ZF2 Dependency Injection ZF2 Service Manager ZF2 Dependency Injection Phalcon DI Any other container-like object that implements ArrayAccess (see ArrayAccess in the PHP Manual) Also, the Silex Application and other projects descending from Pimple can be used with Acclimate as well. Deprecated Containers Support for the following containers is deprecated in version 1.1, and will be removed in 2.0: Guzzle Service Builder What if the Container I use is not supported? Please consider submitting a Pull Request with an adapter for your container and a corresponding test. Before you get to that point though, you can create the adapter yourself (which is really easy to do actually, just look at the included ones), and use the ContainerAcclimator::registerAdapter() method to wire up your adapter to Acclimate. You will need to provide the fully qualified class name (FQCN) of both the adapter class and the base class or interface of the container you want to be able to adapt (the ""adaptee""). Assuming that you have a $container object that implements Your\Favorite\ContainerInterface, and you have written an adapter class named Your\Favorite\ContainerAdapter, here is an example of how you can make these work in Acclimate: use Acclimate\Container\ContainerAcclimator;  // Instantiate the `ContainerAcclimator` and register your custom adapter $acclimator = new ContainerAcclimator; $acclimator->registerAdapter('Your\Favorite\ContainerAdapter', 'Your\Favorite\ContainerInterface');  // Use Acclimate to adapt your container $adaptedContainer = $acclimator->acclimate($container); Resources Container Interop project Service container usage comparison Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jeremeamia/acclimate-container"	"A common interface to dependency injection containers and service locators."	"true"
"Dependency Injection"	"Auryn"	"https://github.com/rdlowrey/Auryn"	"A recursive dependency injector."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"366"	"32"	"41"	"GitHub - rdlowrey/auryn: IoC Dependency Injector Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 366 Fork 41 rdlowrey/auryn Code Issues 22 Pull requests 2 Pulse Graphs IoC Dependency Injector 339 commits 2 branches 34 releases 21 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bug109 master Nothing to show v1.4.0 v1.3.0 v1.2.0 v1.1.0 v1.0.2 v1.0.1 v1.0.0 v1.0.0-alpha v0.15.2 v0.15.1 v0.15.0 v0.14.2 v0.14.1 v0.14.0 v0.13.0 v0.12.0 v0.11.0 v0.10.0 v0.9.1 v0.9.0 v0.8.1 v0.8.0 v0.7.1 v0.7.0 v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.1 v0.2.0 v0.1.0 1.2.0 1.2 1.1.0 Nothing to show New pull request Latest commit 2e42407 Mar 14, 2016 rdlowrey Revert ""remove sharing/alias conflict limitation"" … This reverts commit 2fdd89d. Permalink Failed to load latest commit information. lib Revert ""remove sharing/alias conflict limitation"" Mar 14, 2016 test Revert ""remove sharing/alias conflict limitation"" Mar 14, 2016 .gitignore Rework tests and autoloader for use with composer Sep 22, 2014 .php_cs PSR-2 style compliance Jul 15, 2015 .travis.yml added athletic benchmark Apr 8, 2015 CONTRIBUTING.md fix copy/paste derp in contributing.md Jul 21, 2015 LICENSE fix file modes Mar 7, 2015 README.md Fixed typographical error, changed accomodate to accommodate in README. Sep 30, 2015 composer.json update composer Jul 15, 2015 phpunit.xml fix file modes Mar 7, 2015 README.md auryn auryn is a recursive dependency injector. Use auryn to bootstrap and wire together S.O.L.I.D., object-oriented PHP applications. How It Works Among other things, auryn recursively instantiates class dependencies based on the parameter type-hints specified in class constructor signatures. This requires the use of Reflection. You may have heard that ""reflection is slow"". Let's clear something up: anything can be ""slow"" if you're doing it wrong. Reflection is an order of magnitude faster than disk access and several orders of magnitude faster than retrieving information (for example) from a remote database. Additionally, each reflection offers the opportunity to cache the results if you're worried about speed. auryn caches any reflections it generates to minimize the potential performance impact. auryn is NOT a Service Locator. DO NOT turn it into one by passing the injector into your application classes. Service Locator is an anti-pattern; it hides class dependencies, makes code more difficult to maintain and makes a liar of your API! You should only use an injector for wiring together the disparate parts of your application during your bootstrap phase. The Guide Basic Usage Basic Instantiation Injection Definitions Type-Hint Aliasing Non-Class Parameters Global Parameter Definitions Advanced Usage Instance Sharing Instantiation Delegates Prepares and Setter Injection Injecting for Execution Dependency Resolution Example Use Cases Avoiding Evil Singletons Application Bootstrapping Requirements and Installation auryn requires PHP 5.3 or higher. Installation Github You can clone the latest auryn iteration at anytime from the github repository: $ git clone git://github.com/rdlowrey/auryn.git Composer You may also use composer to include auryn as a dependency in your projects composer.json. The relevant package is rdlowrey/auryn. Alternatively require the package using composer cli: composer require rdlowrey/auryn Manual Download Archived tagged release versions are also available for manual download on the project tags page Basic Usage To start using the injector, simply create a new instance of the Auryn\Injector (""the Injector"") class: <?php $injector = new Auryn\Injector; Basic Instantiation If a class doesn't specify any dependencies in its constructor signature there's little point in using the Injector to generate it. However, for the sake of completeness consider that you can do the following with equivalent results: <?php $injector = new Auryn\Injector; $obj1 = new SomeNamespace\MyClass; $obj2 = $injector->make('SomeNamespace\MyClass');  var_dump($obj2 instanceof SomeNamespace\MyClass); // true Concrete Type-hinted Dependencies If a class only asks for concrete dependencies you can use the Injector to inject them without specifying any injection definitions. For example, in the following scenario you can use the Injector to automatically provision MyClass with the required SomeDependency and AnotherDependency class instances: <?php class SomeDependency {}  class AnotherDependency {}  class MyClass {     public $dep1;     public $dep2;     public function __construct(SomeDependency $dep1, AnotherDependency $dep2) {         $this->dep1 = $dep1;         $this->dep2 = $dep2;     } }  $injector = new Auryn\Injector; $myObj = $injector->make('MyClass');  var_dump($myObj->dep1 instanceof SomeDependency); // true var_dump($myObj->dep2 instanceof AnotherDependency); // true Recursive Dependency Instantiation One of the Injector's key attributes is that it recursively traverses class dependency trees to instantiate objects. This is just a fancy way of saying, ""if you instantiate object A which asks for object B, the Injector will instantiate any of object B's dependencies so that B can be instantiated and provided to A"". This is perhaps best understood with a simple example. Consider the following classes in which a Car asks for Engine and the Engine class has concrete dependencies of its own: <?php class Car {     private $engine;     public function __construct(Engine $engine) {         $this->engine = $engine;     } }  class Engine {     private $sparkPlug;     private $piston;     public function __construct(SparkPlug $sparkPlug, Piston $piston) {         $this->sparkPlug = $sparkPlug;         $this->piston = $piston;     } }  $injector = new Auryn\Injector; $car = $injector->make('Car'); var_dump($car instanceof Car); // true Injection Definitions You may have noticed that the previous examples all demonstrated instantiation of classes with explicit, type-hinted, concrete constructor parameters. Obviously, many of your classes won't fit this mold. Some classes will type-hint interfaces and abstract classes. Some will specify scalar parameters which offer no possibility of type-hinting in PHP. Still other parameters will be arrays, etc. In such cases we need to assist the Injector by telling it exactly what we want to inject. Defining Class Names for Constructor Parameters Let's look at how to provision a class with non-concrete type-hints in its constructor signature. Consider the following code in which a Car needs an Engine and Engine is an interface: <?php interface Engine {}  class V8 implements Engine {}  class Car {     private $engine;     public function __construct(Engine $engine) {         $this->engine = $engine;     } } To instantiate a Car in this case, we simply need to define an injection definition for the class ahead of time: <?php $injector = new Auryn\Injector; $injector->define('Car', ['engine' => 'V8']); $car = $injector->make('Car');  var_dump($car instanceof Car); // true The most important points to notice here are: A custom definition is an array whose keys match constructor parameter names The values in the definition array represent the class names to inject for the specified parameter key Because the Car constructor parameter we needed to define was named $engine, our definition specified an engine key whose value was the name of the class (V8) that we want to inject. Custom injection definitions are only necessary on a per-parameter basis. For example, in the following class we only need to define the injectable class for $arg2 because $arg1 specifies a concrete class type-hint: <?php class MyClass {     private $arg1;     private $arg2;     public function __construct(SomeConcreteClass $arg1, SomeInterface $arg2) {         $this->arg1 = $arg1;         $this->arg2 = $arg2;     } }  $injector = new Auryn\Injector; $injector->define('MyClass', ['arg2' => 'SomeImplementationClass']);  $myObj = $injector->make('MyClass'); NOTE: Injecting instances where an abstract class is type-hinted works in exactly the same way as the above examples for interface type-hints. Using Existing Instances in Injection Definitions Injection definitions may also specify a pre-existing instance of the requisite class instead of the string class name: <?php interface SomeInterface {}  class SomeImplementation implements SomeInterface {}  class MyClass {     private $dependency;     public function __construct(SomeInterface $dependency) {         $this->dependency = $dependency;     } }  $injector = new Auryn\Injector; $dependencyInstance = new SomeImplementation; $injector->define('MyClass', [':dependency' => $dependencyInstance]);  $myObj = $injector->make('MyClass');  var_dump($myObj instanceof MyClass); // true NOTE: Since this define() call is passing raw values (as evidenced by the colon : usage), you can achieve the same result by omitting the array key(s) and relying on parameter order rather than name. Like so: $injector->define('MyClass', [$dependencyInstance]); Specifying Injection Definitions On the Fly You may also specify injection definitions at call-time with Auryn\Injector::make. Consider: <?php interface SomeInterface {}  class SomeImplementationClass implements SomeInterface {}  class MyClass {     private $dependency;     public function __construct(SomeInterface $dependency) {         $this->dependency = $dependency;     } }  $injector = new Auryn\Injector; $myObj = $injector->make('MyClass', ['dependency' => 'SomeImplementation']);  var_dump($myObj instanceof MyClass); // true The above code shows how even though we haven't called the Injector's define method, the call-time specification allows us to instantiate MyClass. NOTE: on-the-fly instantiation definitions will override a pre-defined definition for the specified class, but only in the context of that particular call to Auryn\Injector::make. Type-Hint Aliasing Programming to interfaces is one of the most useful concepts in object-oriented design (OOD), and well-designed code should type-hint interfaces whenever possible. But does this mean we have to assign injection definitions for every class in our application to reap the benefits of abstracted dependencies? Thankfully the answer to this question is, ""NO."" The Injector accommodates this goal by accepting ""aliases"". Consider: <?php interface Engine {} class V8 implements Engine {} class Car {     private $engine;     public function __construct(Engine $engine) {         $this->engine = $engine;     } }  $injector = new Auryn\Injector;  // Tell the Injector class to inject an instance of V8 any time // it encounters an Engine type-hint $injector->alias('Engine', 'V8');  $car = $injector->make('Car'); var_dump($car instanceof Car); // bool(true) In this example we've demonstrated how to specify an alias class for any occurrence of a particular interface or abstract class type-hint. Once an implementation is assigned, the Injector will use it to provision any parameter with a matching type-hint. IMPORTANT: If an injection definition is defined for a parameter covered by an implementation assignment, the definition takes precedence over the implementation. Non-Class Parameters All of the previous examples have demonstrated how the Injector class instantiates parameters based on type-hints, class name definitions and existing instances. But what happens if we want to inject a scalar or other non-object variable into a class? First, let's establish the following behavioral rule: IMPORTANT: The Injector assumes all named-parameter definitions are class names by default. If you want the Injector to treat a named-parameter definition as a ""raw"" value and not a class name, you must prefix the parameter name in your definition with a colon character :. For example, consider the following code in which we tell the Injector to share a PDO database connection instance and define its scalar constructor parameters: <?php $injector = new Auryn\Injector; $injector->share('PDO'); $injector->define('PDO', [     ':dsn' => 'mysql:dbname=testdb;host=127.0.0.1',     ':username' => 'dbuser',     ':passwd' => 'dbpass' ]);  $db = $injector->make('PDO'); The colon character preceding the parameter names tells the Injector that the associated values ARE NOT class names. If the colons had been omitted above, auryn would attempt to instantiate classes of the names specified in the string and an exception would result. Also, note that we could just as easily specified arrays or integers or any other data type in the above definitions. As long as the parameter name is prefixed with a :, auryn will inject the value directly without attempting to instantiate it. NOTE: As mentioned previously, since this define() call is passing raw values, you may opt to assign the values by parameter order rather than name. Since PDO's first three parameters are $dsn, $username, and $password, in that order, you could accomplish the same result by leaving out the array keys, like so: $injector->define('PDO', ['mysql:dbname=testdb;host=127.0.0.1', 'dbuser', 'dbpass']); Global Parameter Definitions Sometimes applications may reuse the same value everywhere. However, it can be a hassle to manually specify definitions for this sort of thing everywhere it might be used in the app. auryn mitigates this problem by exposing the Injector::defineParam() method. Consider the following example ... <?php $myUniversalValue = 42;  class MyClass {     public $myValue;     public function __construct($myValue) {         $this->myValue = $myValue;     } }  $injector = new Auryn\Injector; $injector->defineParam('myValue', $myUniversalValue); $obj = $injector->make('MyClass'); var_dump($obj->myValue === 42); // bool(true) Because we specified a global definition for myValue, all parameters that are not in some other way defined (as below) that match the specified parameter name are auto-filled with the global value. If a parameter matches any of the following criteria the global value is not used: A typehint A predefined injection definition A custom call time definition Advanced Usage Instance Sharing One of the more ubiquitous plagues in modern OOP is the Singleton anti-pattern. Coders looking to limit classes to a single instance often fall into the trap of using static Singleton implementations for things like configuration classes and database connections. While it's often necessary to prevent multiple instances of a class, the Singleton method spells death to testability and should generally be avoided. Auryn\Injector makes sharing class instances across contexts a triviality while allowing maximum testability and API transparency. Let's consider how a typical problem facing object-oriented web applications is easily solved by wiring together your application using auryn. Here, we want to inject a single database connection instance across multiple layers of an application. We have a controller class that asks for a DataMapper that requires a PDO database connection instance: <?php class DataMapper {     private $pdo;     public function __construct(PDO $pdo) {         $this->pdo = $pdo;     } }  class MyController {     private $mapper;     public function __construct(DataMapper $mapper) {         $this->mapper = $mapper;     } }  $db = new PDO('mysql:host=localhost;dbname=mydb', 'user', 'pass');  $injector = new Auryn\Injector; $injector->share($db);  $myController = $injector->make('MyController'); In the above code, the DataMapper instance will be provisioned with the same PDO database connection instance we originally shared. This example is contrived and overly simple, but the implication should be clear: By sharing an instance of a class, Auryn\Injector will always use that instance when provisioning classes that type-hint the shared class. A Simpler Example Let's look at a simple proof of concept: <?php class Person {     public $name = 'John Snow'; }  $injector = new Auryn\Injector; $injector->share('Person');  $person = $injector->make('Person'); var_dump($person->name); // John Snow  $person->name = 'Arya Stark';  $anotherPerson = $injector->make('Person'); var_dump($anotherPerson->name); // Arya Stark var_dump($person === $anotherPerson); // bool(true) because it's the same instance! Defining an object as shared will store the provisioned instance in the Injector's shared cache and all future requests to the provider for an injected instance of that class will return the originally created object. Note that in the above code, we shared the class name (Person) instead of an actual instance. Sharing works with either a class name or an instance of a class. The difference is that when you specify a class name, the Injector will cache the shared instance the first time it is asked to create it. NOTE: Once the Injector caches a shared instance, call-time definitions passed to Auryn\Injector::make will have no effect. Once shared, an instance will always be returned for instantiations of its type until the object is un-shared or refreshed: Instantiation Delegates Often factory classes/methods are used to prepare an object for use after instantiation. auryn allows you to integrate factories and builders directly into the injection process by specifying callable instantiation delegates on a per-class basis. Let's look at a very basic example to demonstrate the concept of injection delegates: <?php class MyComplexClass {     public $verification = false;     public function doSomethingAfterInstantiation() {         $this->verification = true;     } }  $complexClassFactory = function() {     $obj = new MyComplexClass;     $obj->doSomethingAfterInstantiation();      return $obj; };  $injector = new Auryn\Injector; $injector->delegate('MyComplexClass', $complexClassFactory);  $obj = $injector->make('MyComplexClass'); var_dump($obj->verification); // bool(true) In the above code we delegate instantiation of the MyComplexClass class to a closure, $complexClassFactory. Once this delegation is made, the Injector will return the results of the specified closure when asked to instantiate MyComplexClass. Available Delegate Types Any valid PHP callable may be registered as a class instantiation delegate using Auryn\Injector::delegate. Additionally you may specify the name of a delegate class that specifies an __invoke method and it will be automatically provisioned and have its __invoke method called at delegation time. Instance methods from uninstantiated classes may also be specified using the ['NonStaticClassName', 'factoryMethod'] construction. For example: <?php class SomeClassWithDelegatedInstantiation {     public $value = 0; } class SomeFactoryDependency {} class MyFactory {     private $dependency;     function __construct(SomeFactoryDependency $dep) {         $this->dependency = $dep;     }     function __invoke() {         $obj = new SomeClassWithDelegatedInstantiation;         $obj->value = 1;         return $obj;     }     function factoryMethod() {         $obj = new SomeClassWithDelegatedInstantiation;         $obj->value = 2;         return $obj;     } }  // Works because MyFactory specifies a magic __invoke method $injector->delegate('SomeClassWithDelegatedInstantiation', 'MyFactory'); $obj = $injector->make('SomeClassWithDelegatedInstantiation'); var_dump($obj->value); // int(1)  // This also works $injector->delegate('SomeClassWithDelegatedInstantiation', 'MyFactory::factoryMethod'); $obj = $injector->make('SomeClassWithDelegatedInstantiation'); $obj = $injector->make('SomeClassWithDelegatedInstantiation'); var_dump($obj->value); // int(2) Prepares and Setter Injection Constructor injection is almost always preferable to setter injection. However, some APIs require additional post-instantiation mutations. auryn accommodates these use cases with its Injector::prepare() method. Users may register any class or interface name for post-instantiation modification. Consider: <?php  class MyClass {     public $myProperty = 0; }  $injector->prepare('MyClass', function($myObj, $injector) {     $myObj->myProperty = 42; });  $myObj = $injector->make('MyClass'); var_dump($myObj->myProperty); // int(42) While the above example is contrived, the usefulness should be clear. Injecting for Execution In addition to provisioning class instances using constructors, auryn can also recursively instantiate the parameters of any valid PHP callable. The following examples all work: <?php $injector = new Auryn\Injector; $injector->execute(function(){}); $injector->execute([$objectInstance, 'methodName']); $injector->execute('globalFunctionName'); $injector->execute('MyStaticClass::myStaticMethod'); $injector->execute(['MyStaticClass', 'myStaticMethod']); $injector->execute(['MyChildStaticClass', 'parent::myStaticMethod']); $injector->execute('ClassThatHasMagicInvoke'); $injector->execute($instanceOfClassThatHasMagicInvoke); $injector->execute('MyClass::myInstanceMethod'); Additionally, you can pass in the name of a class for a non-static method and the injector will automatically provision an instance of the class (subject to any definitions or shared instances already stored by the injector) before provisioning and invoking the specified method: <?php class Dependency {} class AnotherDependency {} class Example {     function __construct(Dependency $dep){}     function myMethod(AnotherDependency $arg1, $arg2) {         return $arg2;     } }  $injector = new Auryn\Injector;  // outputs: int(42) var_dump($injector->execute('Example::myMethod', $args = [':arg2' => 42])); Dependency Resolution Auryn\Injector resolves dependencies in the following order: If a shared instance exists for the class in question, the shared instance will always be returned If a delegate callable is assigned for a class, its return result will always be used If a call-time definition is passed to Auryn\Injector::make, that definition will be used If a pre-defined definition exists, it will be used If a dependency is type-hinted, the Injector will recursively instantiate it subject to any implementations or definitions If no type-hint exists and the parameter has a default value, the default value is injected If a global parameter value is defined that value is used Throw an exception because you did something stupid Example Use Cases Dependency Injection Containers (DIC) are generally misunderstood in the PHP community. One of the primary culprits is the misuse of such containers in the mainstream application frameworks. Often, these frameworks warp their DICs into Service Locator anti-patterns. This is a shame because a good DIC should be the exact opposite of a Service Locator. auryn Is NOT A Service Locator! There's a galaxy of differences between using a DIC to wire together your application versus passing the DIC as a dependency to your objects (Service Locator). Service Locator (SL) is an anti-pattern -- it hides class dependencies, makes code difficult to maintain and makes a liar of your API. When you pass a SL into your constructors it makes it difficult to determine what the class dependencies really are. A House object depends on Door and Window objects. A House object DOES NOT depend on an instance of ServiceLocator regardless of whether the ServiceLocator can provide Door and Window objects. In real life you wouldn't build a house by transporting the entire hardware store (hopefully) to the construction site so you can access any parts you need. Instead, the foreman (__construct()) asks for the specific parts that will be needed (Door and Window) and goes about procuring them. Your objects should function in the same way; they should ask only for the specific dependencies required to do their jobs. Giving the House access to the entire hardware store is at best poor OOP style and at worst a maintainability nightmare. The takeaway here is this: IMPORTANT: do not use auryn like a Service Locator! Avoiding Evil Singletons A common difficulty in web applications is limiting the number of database connection instances. It's wasteful and slow to open up new connections each time we need to talk to a database. Unfortunately, using singletons to limit these instances makes code brittle and hard to test. Let's see how we can use auryn to inject the same PDO instance across the entire scope of our application. Say we have a service class that requires two separate data mappers to persist information to a database: <?php  class HouseMapper {     private $pdo;     public function __construct(PDO $pdo) {         $this->pdo = $pdo;     }     public function find($houseId) {         $query = 'SELECT * FROM houses WHERE houseId = :houseId';          $stmt = $this->pdo->prepare($query);         $stmt->bindValue(':houseId', $houseId);          $stmt->setFetchMode(PDO::FETCH_CLASS, 'Model\\Entities\\House');         $stmt->execute();         $house = $stmt->fetch(PDO::FETCH_CLASS);          if (false === $house) {             throw new RecordNotFoundException(                 'No houses exist for the specified ID'             );         }          return $house;     }      // more data mapper methods here ... }  class PersonMapper {     private $pdo;     public function __construct(PDO $pdo) {         $this->pdo = $pdo;     }     // data mapper methods here }  class SomeService {     private $houseMapper;     private $personMapper;     public function __construct(HouseMapper $hm, PersonMapper $pm) {         $this->houseMapper = $hm;         $this->personMapper = $pm;     }     public function doSomething() {         // do something with the mappers     } } In our wiring/bootstrap code, we simply instantiate the PDO instance once and share it in the context of the Injector: <?php $pdo = new PDO('sqlite:some_sqlite_file.db'); $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);  $injector = new Auryn\Injector;  $injector->share($pdo); $mapper = $injector->make('SomeService'); In the above code, the DIC instantiates our service class. More importantly, the data mapper classes it generates to do so are injected with the same database connection instance we originally shared. Of course, we don't have to manually instantiate our PDO instance. We could just as easily seed the container with a definition for how to create the PDO object and let it handle things for us: <?php $injector->define('PDO', [     ':dsn' => 'sqlite:some_sqlite_file.db' ]); $injector->share('PDO'); $service = $injector->make('SomeService'); In the above code, the injector will pass the string definition as the $dsn argument in the PDO::__construct method and generate the shared PDO instance automatically only if one of the classes it instantiates requires a PDO instance! App-Bootstrapping DICs should be used to wire together the disparate objects of your application into a cohesive functional unit (generally at the bootstrap or front-controller stage of the application). One such usage provides an elegant solution for one of the thorny problems in object-oriented (OO) web applications: how to instantiate classes in a routed environment where the dependencies are not known ahead of time. Consider the following front controller code whose job is to: Load a list of application routes and pass them to the router Generate a model of the client's HTTP request Route the request instance given the application's route list Instantiate the routed controller and invoke a method appropriate to the HTTP request <?php  define('CONTROLLER_ROUTES', '/hard/path/to/routes.xml');  $routeLoader = new RouteLoader(); $routes = $routeLoader->loadFromXml(CONTROLLER_ROUTES); $router = new Router($routes);  $requestDetector = new RequestDetector(); $request = $requestDetector->detectFromSuperglobal($_SERVER);  $requestUri = $request->getUri(); $requestMethod = strtolower($request->getMethod());  $injector = new Auryn\Injector; $injector->share($request);  try {     if (!$controllerClass = $router->route($requestUri, $requestMethod)) {         throw new NoRouteMatchException();     }      $controller = $injector->make($controllerClass);     $callableController = array($controller, $requestMethod);      if (!is_callable($callableController)) {         throw new MethodNotAllowedException();     } else {         $callableController();     }  } catch (NoRouteMatchException $e) {     // send 404 response } catch (MethodNotAllowedException $e) {     // send 405 response } catch (Exception $e) {     // send 500 response } And elsewhere we have various controller classes, each of which ask for their own individual dependencies: <?php  class WidgetController {     private $request;     private $mapper;     public function __construct(Request $request, WidgetDataMapper $mapper) {         $this->request = $request;         $this->mapper = $mapper;     }     public function get() {         // do something for HTTP GET requests     }     public function post() {         // do something for HTTP POST requests     } } In the above example the auryn DIC allows us to write fully testable, fully OO controllers that ask for their dependencies. Because the DIC recursively instantiates the dependencies of objects it creates we have no need to pass around a Service Locator. Additionally, this example shows how we can eliminate evil Singletons using the sharing capabilities of the auryn DIC. In the front controller code, we share the request object so that any classes instantiated by the Auryn\Injector that ask for a Request will receive the same instance. This feature not only helps eliminate Singletons, but also the need for hard-to-test static properties. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rdlowrey/Auryn"	"A recursive dependency injector."	"true"
"Dependency Injection"	"Container"	"https://github.com/thephpleague/container"	"Another flexible dependency injection container."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"194"	"17"	"27"	"GitHub - thephpleague/container: Small but powerful dependency injection container Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 194 Fork 27 thephpleague/container Code Issues 5 Pull requests 8 Pulse Graphs Small but powerful dependency injection container http://container.thephpleague.com 201 commits 3 branches 14 releases 11 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x gh-pages master Nothing to show 2.2.0 2.1.0 2.0.3 2.0.2 2.0.1 2.0.0 1.3.2 1.3.1 1.3.0 1.2.1 1.2.0 1.1.1 1.1.0 1.0.0 Nothing to show New pull request Latest commit 93b3f4f Apr 14, 2016 philipobenito Merge pull request #100 from Blackskyliner/patch-invokables … Fixes ReflectionContainer::call for invokable objects. Permalink Failed to load latest commit information. src Fixes ReflectionContainer::call for invokable objects. Mar 26, 2016 tests Fixes ReflectionContainer::call for invokable objects. Mar 26, 2016 .gitattributes Merge from Orno\Di to League\Container, git history before this point… Jan 12, 2015 .gitignore Improved test suite (Resolves #4) Jan 13, 2015 .scrutinizer.yml Ignore PHP7 and HHVM code coverage Aug 12, 2015 .travis.yml Fixed indentation Aug 14, 2015 CHANGELOG.md Allow for service providers to be added multiple times by giving them… Mar 17, 2016 CONTRIBUTING.md Fix references for name change Jan 12, 2015 LICENSE.md Merge from Orno\Di to League\Container, git history before this point… Jan 12, 2015 README.md Update README.md Mar 13, 2016 composer.json Allow for service providers to be added multiple times by giving them… Mar 17, 2016 phpunit.xml.dist Merge from Orno\Di to League\Container, git history before this point… Jan 12, 2015 README.md Container (Dependency Injection) This package is compliant with PSR-1, PSR-2 and PSR-4. If you notice compliance oversights, please send a patch via pull request. Install Via Composer $ composer require league/container Requirements The following versions of PHP are supported by this version. PHP 5.4 PHP 5.5 PHP 5.6 PHP 7.0 HHVM Documentation Container has full documentation, powered by Jekyll. Contribute to this documentation in the gh-pages branch. Testing $ vendor/bin/phpunit Contributing Please see CONTRIBUTING for details. Security If you discover any security related issues, please email philipobenito@gmail.com instead of using the issue tracker. Credits Phil Bennett All Contributors All Orno\Di contributions can be found here. License The MIT License (MIT). Please see License File for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/container"	"Another flexible dependency injection container."	"true"
"Dependency Injection"	"PHP-DI"	"http://php-di.org/"	"A dependency injection container that supports autowiring."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"32"	"4"	"8"	"GitHub - PHP-DI/demo: Demo of a simple application built using PHP-DI Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 32 Fork 8 PHP-DI/demo Code Issues 0 Pull requests 0 Pulse Graphs Demo of a simple application built using PHP-DI 7 commits 1 branch 0 releases Fetching contributors PHP 78.9% HTML 21.1% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 8c67d46 Oct 23, 2015 mnapoli Update README.md Permalink Failed to load latest commit information. app First commit Jun 1, 2015 src/SuperBlog Add an example of a class command Jun 1, 2015 web First commit Jun 1, 2015 .gitignore First commit Jun 1, 2015 LICENSE First commit Jun 1, 2015 README.md Update README.md Oct 23, 2015 composer.json First commit Jun 1, 2015 console.php Add an example of a class command Jun 1, 2015 screenshot.png Added screenshot Jun 1, 2015 README.md PHP-DI application demo This repository demonstrates how to write a simple application using PHP-DI without any framework. Screenshot Disclaimer Watch out, this project is meant to show how to build an application from scratch with PHP-DI in the simplest way possible. Be aware that this code is only meant for learning purposes and should probably not go to production as-is. Improvements and pull requests are welcome. Run To run this demo, you need to clone it and install dependencies: git clone https://github.com/PHP-DI/demo.git cd demo/ composer install  You can then run the web application using PHP's built-in server: php -S 0.0.0.0:8000 -t web/  The web application is running at http://localhost:8000. You can also run the CLI application: php console.php  The following commands are available: php console.php articles: lists the blog articles php console.php article [id]: displays a blog article by its ID Architecture The container is created in app/bootstrap.php. The configuration file for the container is app/config.php. Both the web application and the CLI application require app/bootstrap.php to get the container: the web application (web/index.php) uses FastRoute for routing, and then creates and invokes the controller using PHP-DI the CLI application (console.php) uses Silly: Silly uses the container to create and invoke the commands You will note that in both case, the controllers/commands are instantiated and invoked by PHP-DI: this is to benefit from dependency injection in those classes. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PHP-DI/demo"	"A dependency injection container that supports autowiring."	"true"
"Dependency Injection"	"Pimple"	"http://pimple.sensiolabs.org/"	"A tiny dependency injection container."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1309"	"113"	"215"	"GitHub - silexphp/Pimple: A small PHP 5.3 dependency injection container Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 113 Star 1,309 Fork 215 silexphp/Pimple Code Issues 5 Pull requests 5 Pulse Graphs A small PHP 5.3 dependency injection container http://pimple.sensiolabs.org 202 commits 3 branches 11 releases 31 contributors PHP 52.3% C 47.7% PHP C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.1 circular-references master Nothing to show v3.0.2 v3.0.1 v3.0.0 v2.1.1 v2.1.0 v2.0.0 v1.1.1 v1.1.0 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 64e0f83 Sep 11, 2015 fabpot bumped version to 3.0.3-DEV Permalink Failed to load latest commit information. ext/pimple bumped version to 3.0.3-DEV Sep 11, 2015 src/Pimple fixed CS Aug 1, 2015 .gitignore removed the bootstrap file for tests Apr 29, 2014 .travis.yml fixed Travis config for C tests Jul 13, 2014 CHANGELOG bumped version to 3.0.3-DEV Sep 11, 2015 LICENSE Update license year. Jan 3, 2015 README.rst Fix PHP extension installation doc Jan 26, 2015 composer.json removed 5.3 mention in composer.json Sep 11, 2015 phpunit.xml.dist moved tests under src/ Jul 24, 2014 README.rst Pimple Caution! This is the documentation for Pimple 3.x. If you are using Pimple 1.x, read the Pimple 1.x documentation. Reading the Pimple 1.x code is also a good way to learn more about how to create a simple Dependency Injection Container (recent versions of Pimple are more focused on performance). Pimple is a small Dependency Injection Container for PHP. Installation Before using Pimple in your project, add it to your composer.json file: $ ./composer.phar require pimple/pimple ~3.0 Alternatively, Pimple is also available as a PHP C extension: $ git clone https://github.com/silexphp/Pimple $ cd Pimple/ext/pimple $ phpize $ ./configure $ make $ make install Usage Creating a container is a matter of creating a Container instance: use Pimple\Container;  $container = new Container(); As many other dependency injection containers, Pimple manages two different kind of data: services and parameters. Defining Services A service is an object that does something as part of a larger system. Examples of services: a database connection, a templating engine, or a mailer. Almost any global object can be a service. Services are defined by anonymous functions that return an instance of an object: // define some services $container['session_storage'] = function ($c) {     return new SessionStorage('SESSION_ID'); };  $container['session'] = function ($c) {     return new Session($c['session_storage']); }; Notice that the anonymous function has access to the current container instance, allowing references to other services or parameters. As objects are only created when you get them, the order of the definitions does not matter. Using the defined services is also very easy: // get the session object $session = $container['session'];  // the above call is roughly equivalent to the following code: // $storage = new SessionStorage('SESSION_ID'); // $session = new Session($storage); Defining Factory Services By default, each time you get a service, Pimple returns the same instance of it. If you want a different instance to be returned for all calls, wrap your anonymous function with the factory() method $container['session'] = $container->factory(function ($c) {     return new Session($c['session_storage']); }); Now, each call to $container['session'] returns a new instance of the session. Defining Parameters Defining a parameter allows to ease the configuration of your container from the outside and to store global values: // define some parameters $container['cookie_name'] = 'SESSION_ID'; $container['session_storage_class'] = 'SessionStorage'; If you change the session_storage service definition like below: $container['session_storage'] = function ($c) {     return new $c['session_storage_class']($c['cookie_name']); }; You can now easily change the cookie name by overriding the session_storage_class parameter instead of redefining the service definition. Protecting Parameters Because Pimple sees anonymous functions as service definitions, you need to wrap anonymous functions with the protect() method to store them as parameters: $container['random_func'] = $container->protect(function () {     return rand(); }); Modifying Services after Definition In some cases you may want to modify a service definition after it has been defined. You can use the extend() method to define additional code to be run on your service just after it is created: $container['session_storage'] = function ($c) {     return new $c['session_storage_class']($c['cookie_name']); };  $container->extend('session_storage', function ($storage, $c) {     $storage->...();      return $storage; }); The first argument is the name of the service to extend, the second a function that gets access to the object instance and the container. Extending a Container If you use the same libraries over and over, you might want to reuse some services from one project to the next one; package your services into a provider by implementing Pimple\ServiceProviderInterface: use Pimple\Container;  class FooProvider implements Pimple\ServiceProviderInterface {     public function register(Container $pimple)     {         // register some services and parameters         // on $pimple     } } Then, register the provider on a Container: $pimple->register(new FooProvider()); Fetching the Service Creation Function When you access an object, Pimple automatically calls the anonymous function that you defined, which creates the service object for you. If you want to get raw access to this function, you can use the raw() method: $container['session'] = function ($c) {     return new Session($c['session_storage']); };  $sessionFunction = $container->raw('session'); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/silexphp/Pimple"	"A tiny dependency injection container."	"true"
"Dependency Injection"	"Symfony DI"	"https://github.com/symfony/dependency-injection"	"A dependency injection container component (SF2)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"82"	"8"	"33"	"GitHub - symfony/dependency-injection: [READ-ONLY] Subtree split of the Symfony DependencyInjection Component Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 82 Fork 33 symfony/dependency-injection Code Pull requests 1 Pulse Graphs [READ-ONLY] Subtree split of the Symfony DependencyInjection Component https://github.com/symfony/symfony 1,484 commits 12 branches 180 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 3.0 3.1 master Nothing to show v3.1.2 v3.1.1 v3.1.0 v3.1.0-RC1 v3.1.0-BETA1 v3.0.8 v3.0.7 v3.0.6 v3.0.5 v3.0.4 v3.0.3 v3.0.2 v3.0.1 v3.0.0 v3.0.0-BETA1 v2.8.8 v2.8.7 v2.8.6 v2.8.5 v2.8.4 v2.8.3 v2.8.2 v2.8.1 v2.8.0 v2.8.0-BETA1 v2.7.15 v2.7.14 v2.7.13 v2.7.12 v2.7.11 v2.7.10 v2.7.9 v2.7.8 v2.7.7 v2.7.6 v2.7.5 v2.7.4 v2.7.3 v2.7.2 v2.7.1 v2.7.0 v2.7.0-BETA2 v2.7.0-BETA1 v2.6.13 v2.6.12 v2.6.11 v2.6.10 v2.6.9 v2.6.8 v2.6.7 v2.6.6 v2.6.5 v2.6.4 v2.6.3 v2.6.2 v2.6.1 v2.6.0 v2.6.0-BETA2 v2.6.0-BETA1 v2.5.12 v2.5.11 v2.5.10 v2.5.9 v2.5.8 v2.5.7 v2.5.6 v2.5.5 v2.5.4 v2.5.3 v2.5.2 v2.5.1 v2.5.0 v2.5.0-RC1 v2.5.0-BETA2 v2.5.0-BETA1 v2.4.10 v2.4.9 v2.4.8 v2.4.7 v2.4.6 v2.4.5 v2.4.4 v2.4.3 v2.4.2 v2.4.1 v2.4.0 v2.4.0-RC1 v2.4.0-BETA2 v2.4.0-BETA1 v2.3.42 v2.3.41 v2.3.40 v2.3.39 v2.3.38 v2.3.37 v2.3.36 v2.3.35 v2.3.34 v2.3.33 v2.3.32 Nothing to show New pull request Latest commit 54c33a9 Jul 1, 2016 nicolas-grekas Merge branch '3.1' … * 3.1: (22 commits)   [travis] Fix deps=low/high builds   [Form] Fix depreciation triggers   fixed CS   skip test with current phpunit bridge   Fix for #19183 to add support for new PHP MongoDB extension in sessions.   [Console] Fix for block() padding formatting after #19189   [Security][Guard] check if session exist before using it   bumped Symfony version to 3.1.3   updated VERSION for 3.1.2   updated CHANGELOG for 3.1.2   bumped Symfony version to 3.0.9   updated VERSION for 3.0.8   updated CHANGELOG for 3.0.8   bumped Symfony version to 2.8.9   updated VERSION for 2.8.8   updated CHANGELOG for 2.8.8   bumped Symfony version to 2.7.16   updated VERSION for 2.7.15   update CONTRIBUTORS for 2.7.15   updated CHANGELOG for 2.7.15   ...  Conflicts: 	src/Symfony/Component/HttpKernel/Kernel.php Permalink Failed to load latest commit information. Compiler [DependencyInjection] Autowiring: add setter injection support Jul 1, 2016 Config [DI] fix Autowiring tests of #18144 Apr 13, 2016 Dumper feature #19146 [DependencyInjection] deprecate access to private shar… Jun 29, 2016 Exception Merge branch '2.8' into 3.0 Apr 14, 2016 Extension [DependencyInjection] fix phpDoc Apr 11, 2016 LazyProxy fixed CS Jun 29, 2016 Loader [DependencyInjection] Add support for short services configurators sy… Jun 29, 2016 ParameterBag Merge branch '2.8' into 3.0 Apr 14, 2016 Tests Merge branch '3.1' Jul 1, 2016 .gitignore Added missing files .gitignore Jul 21, 2013 Alias.php [DependencyInjection] fix phpDoc Apr 11, 2016 CHANGELOG.md [DependencyInjection] Autowiring: add setter injection support Jul 1, 2016 Container.php [DependencyInjection] deprecate access to private shared services. Fi… Jun 28, 2016 ContainerAwareInterface.php [DI] Clean a phpdoc Nov 4, 2015 ContainerAwareTrait.php Merge branch '2.3' into 2.7 Nov 4, 2015 ContainerBuilder.php feature #19146 [DependencyInjection] deprecate access to private shar… Jun 29, 2016 ContainerInterface.php Merge branch '2.8' Sep 29, 2015 Definition.php [DependencyInjection] Add support for short services configurators sy… Jun 29, 2016 DefinitionDecorator.php Merge branch '2.8' into 3.0 Jun 29, 2016 ExpressionLanguage.php Fixed minor typo - override Jan 3, 2015 ExpressionLanguageProvider.php [DependencyInjection] added support for custom expression language fu… Sep 25, 2014 LICENSE Update copyright year Jan 1, 2016 Parameter.php [DependencyInjection] fix phpDoc Apr 11, 2016 README.md Updated all the README files Mar 4, 2016 Reference.php Merge branch '2.8' into 3.0 Apr 14, 2016 ResettableContainerInterface.php Implement resettable containers Jul 22, 2015 TaggedContainerInterface.php remove api tags from code Sep 28, 2015 Variable.php [DependencyInjection] fix phpDoc Apr 11, 2016 composer.json [DI] added support for PHP constants in yaml configuration files Jun 23, 2016 phpunit.xml.dist Add missing exclusions from phpunit.xml.dist Nov 18, 2015 README.md DependencyInjection Component The DependencyInjection component allows you to standardize and centralize the way objects are constructed in your application. Resources Documentation Contributing Report issues and send Pull Requests in the main Symfony repository Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/symfony/dependency-injection"	"A dependency injection container component (SF2)."	"true"
"Imagery"	"Color Extractor"	"https://github.com/thephpleague/color-extractor"	"A library for extracting colours from images."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"504"	"17"	"52"	"GitHub - thephpleague/color-extractor: Extract colors from an image like a human would do. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 504 Fork 52 thephpleague/color-extractor Code Issues 2 Pull requests 1 Pulse Graphs Extract colors from an image like a human would do. http://thephpleague.com 99 commits 2 branches 13 releases 7 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags imagick master Nothing to show 0.3.1 0.3.0 0.2.0 0.1.9 0.1.8 0.1.7 0.1.6 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit aba310c Apr 14, 2016 MatTheCat add fromIntToRgb and fromRgbToInt methods Permalink Failed to load latest commit information. src/League/ColorExtractor add fromIntToRgb and fromRgbToInt methods Apr 14, 2016 tests handle transparency Mar 25, 2016 .gitignore version 0.2.0 Jan 12, 2016 .php_cs drop PHP 5.3 compatibility and use short array syntax Jan 12, 2016 .travis.yml drop PHP 5.3 compatibility and use short array syntax Jan 12, 2016 CONTRIBUTING.md Added CONTRIBUTING.md Aug 8, 2013 LICENSE replace name placeholder Mar 25, 2016 README.md update package version Mar 25, 2016 composer.json drop PHP 5.3 compatibility and use short array syntax Jan 12, 2016 phpunit.xml.dist version 0.2.0 Jan 12, 2016 README.md ColorExtractor Extract colors from an image like a human would do. Install Via Composer $ composer require league/color-extractor:0.3.* Usage require 'vendor/autoload.php';  use League\ColorExtractor\Color; use League\ColorExtractor\ColorExtractor; use League\ColorExtractor\Palette;  $palette = Palette::fromFilename('./some/image.png');  // $palette is an iterator on colors sorted by pixel count foreach($palette as $color => $count) {     // colors are represented by integers     echo Color::fromIntToHex($color), ': ', $count, ""\n""; }  // it offers some helpers too $topFive = $palette->getMostUsedColors(5);  $colorCount = count($palette);  $blackCount = $palette->getColorCount(Color::fromHexToInt('#000000'));   // an extractor is built from a palette $extractor = new ColorExtractor($palette);  // it defines an extract method which return the most “representative” colors $colors = $extractor->extract(5);  Handling transparency By default any pixel with alpha value greater than zero will be discarded. This is because transparent colors are not perceived as is. For exemple fully transparent black would be seen white on a white background. So if you want to take transparency into account when building a palette you have to specify this background color. You can do this with the second argument of Palette constructors. Its default value is null, meaning a color won't be added to the palette if its alpha component exists and is greater than zero. You can set it as an integer representing the color, then transparent colors will be blended before addition to the palette. // we set a white background so fully transparent colors will be added as white in the palette // pure red #FF0000 at 50% opacity will be stored as #FF8080 as it would be perceived $palette = Palette::fromFilename('./some/image.png', Color::fromHexToInt('#FFFFFF')); Contributing Please see CONTRIBUTING for details. Credits Mathieu Lechat All Contributors License The MIT License (MIT). Please see License File for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/color-extractor"	"A library for extracting colours from images."	"true"
"Imagery"	"GIF Creator"	"https://github.com/Sybio/GifCreator"	"A library to create GIF animations from multiple images."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"181"	"22"	"57"	"GitHub - Sybio/GifCreator: GifCreator is a PHP class that creates animated GIF from multiple images Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 181 Fork 57 Sybio/GifCreator Code Issues 4 Pull requests 7 Pulse Graphs GifCreator is a PHP class that creates animated GIF from multiple images 17 commits 1 branch 1 release Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.0.0 Nothing to show New pull request Latest commit 250fc2f Oct 13, 2012 Sybio Merge branch 'master' of github.com:Sybio/GifCreator Permalink Failed to load latest commit information. src/GifCreator Added a namespace to the class Oct 13, 2012 README.md Update README.md Sep 26, 2012 composer.json Adding GifCreator to composer Sep 25, 2012 README.md ================================ GifCreator ================================ GifCreator is a PHP class to create animated GIF from multiple images For what ? This class helps you to create an animated GIF image: give multiple images and their duration and that's it ! Usage 1 - Creation: // Create an array containing file paths, resource var (initialized with imagecreatefromXXX),  // image URLs or even binary code from image files. // All sorted in order to appear. $frames = array(     imagecreatefrompng(""/../images/pic1.png""), // Resource var     ""/../images/pic2.png"", // Image file path     file_get_contents(""/../images/pic3.jpg""), // Binary source code     'http://thisisafakedomain.com/images/pic4.jpg', // URL );  // Create an array containing the duration (in millisecond) of each frames (in order too) $durations = array(40, 80, 40, 20);  // Initialize and create the GIF ! $gc = new GifCreator(); $gc->create($frames, $durations, 5); The 3rd parameter of create() method allows you to choose the number of loop of your animated gif before it stops. In the previous example, I chose 5 loops. Set 0 (zero) to get an infinite loop. 2 - Get the result: You can now get the animated GIF binary: $gifBinary = $gc->getGif(); Then you can show it in the navigator: header('Content-type: image/gif'); header('Content-Disposition: filename=""butterfly.gif""'); echo $gifBinary; exit; Or save it in a folder as a GIF: file_put_contents('/myfolder/animated_picture.gif', $gifBinary); Behavior The transparency is based on the first given frame. It will be saved only if you give multiple frames with same transparent background. The dimensions of the generated GIF are based on the first frame. If you need to resize your frames to get the same dimension, you can use this class: https://github.com/Sybio/ImageWorkshop About The class reuses some part of code of ""GIFEncoder.class.php"" by László Zsidi (thanks to him). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Sybio/GifCreator"	"A library to create GIF animations from multiple images."	"true"
"Imagery"	"GIF Frame Extractor"	"https://github.com/Sybio/GifFrameExtractor"	"A library to extract GIF animation frame information."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"70"	"12"	"27"	"GitHub - Sybio/GifFrameExtractor: GifFrameExtractor is a PHP class that separates all the frames (and their duration) of an animated GIF Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 70 Fork 27 Sybio/GifFrameExtractor Code Issues 7 Pull requests 2 Pulse Graphs GifFrameExtractor is a PHP class that separates all the frames (and their duration) of an animated GIF 18 commits 1 branch 1 release Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.0.0 Nothing to show New pull request Latest commit 13e9880 Oct 13, 2012 Sybio - Added a return array to the extract method … - Added a namespace to the class Permalink Failed to load latest commit information. src/GifFrameExtractor - Added a return array to the extract method Oct 13, 2012 README.md - Fixing a bug depending of the GIF disposal method, the class can be… Sep 26, 2012 composer.json Adding the class to composer Sep 23, 2012 README.md ================================ GifFrameExtractor ================================ GifFrameExtractor is a PHP class that separates all the frames (and their duration) of an animated GIF For what ? The class helps you to separate all the frames of an animated GIF, for example to watermark them and then to generate a new watermarked and animated GIF. Usage GifFrameExtractor is really easy to use: 1 - Extraction: $gifFilePath = 'path/images/picture.gif';  if (GifFrameExtractor::isAnimatedGif($gifFilePath)) { // check this is an animated GIF      $gfe = new GifFrameExtractor();     $gfe->extract($gifFilePath);      // Do something with extracted frames ... } 2 - Getting the frames and their duration: foreach ($gfe->getFrames() as $frame) {      // The frame resource image var     $img = $frame['image'];      // The frame duration     $duration = $frame['duration']; } You can also get separately an array of images and an array of durations: $frameImages = $gfe->getFrameImages(); $frameDurations = $gfe->getFrameDurations(); And obtain usefull informations: $totalDuration = $gfe->getTotalDuration(); // Total duration of the animated GIF $frameNumber = $gfe->getFrameNumber(); // Number of extracted frames var_dump($gfe->getFrameDimensions()); // An array containing the dimension of each extracted frame var_dump($gfe->getFramePositions()); // An array containing the original positions of each extracted frame inside the GIF Option: You can choose if you want to get the original frames (with transparency background) or frames pasted on the first one with the second parameter of extract() method: $gfe->extract('path/images/picture.gif', true); // Can get transparency orignal frames This option is false by default. About The class reuses some part of code of ""PHP GIF Animation Resizer"" by Taha PAKSU (thanks to him). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Sybio/GifFrameExtractor"	"A library to extract GIF animation frame information."	"true"
"Imagery"	"Glide"	"https://github.com/thephpleague/glide"	"An on-demand image manipulation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"798"	"48"	"56"	"GitHub - thephpleague/glide: Wonderfully easy on-demand image manipulation library with an HTTP based API. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 48 Star 798 Fork 56 thephpleague/glide Code Issues 9 Pull requests 3 Pulse Graphs Wonderfully easy on-demand image manipulation library with an HTTP based API. http://glide.thephpleague.com 224 commits 3 branches 12 releases 11 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.3.x gh-pages master Nothing to show 1.0.1 1.0.0 0.3.6 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit 4218b54 Jun 13, 2016 reinink committed on GitHub Merge pull request #137 from jackmu95/rewind-error-fix … Make sure stream is seekable before using `rewind()` Permalink Failed to load latest commit information. src Make sure stream is seeable before using `rewind` Jun 7, 2016 tests Fix issue with leading slashes when generating HTTP signatures. Dec 26, 2015 .gitattributes Initial commit. Dec 22, 2014 .gitignore Temporarily add composer.lock back in to fix CI. Dec 22, 2015 .scrutinizer.yml Add tests for PsrResponseFactory. Dec 22, 2015 .travis.yml Add full support HHVM. Dec 22, 2015 CHANGELOG.md Update for 0.3.1. Feb 2, 2015 CONTRIBUTING.md Convert to League namespace. Jan 3, 2015 LICENSE Convert to League namespace. Jan 3, 2015 README.md Update dependencies and README for 1.0 release. Dec 26, 2015 composer.json Update dependencies and README for 1.0 release. Dec 26, 2015 composer.lock Update composer.lock (for CI only). Dec 26, 2015 phpunit.xml.dist Refactor classes for testing. Dec 25, 2014 README.md Glide Glide is a wonderfully easy on-demand image manipulation library written in PHP. Its straightforward API is exposed via HTTP, similar to cloud image processing services like Imgix and Cloudinary. Glide leverages powerful libraries like Intervention Image (for image handling and manipulation) and Flysystem (for file system abstraction). © Photo Joel Reynolds Highlights Adjust, resize and add effects to images using a simple HTTP based API. Manipulated images are automatically cached and served with far-future expires headers. Create your own image processing server or integrate Glide directly into your app. Supports both the GD library and the Imagick PHP extension. Supports many response methods, including PSR-7, HttpFoundation and more. Ability to secure image URLs using HTTP signatures. Works with many different file systems, thanks to the Flysystem library. Powered by the battle tested Intervention Image image handling and manipulation library. Framework-agnostic, will work with any project. Composer ready and PSR-2 compliant. Documentation Full documentation can be found at glide.thephpleague.com. Installation Glide is available via Composer: $ composer require league/glide Testing Glide has a PHPUnit test suite. To run the tests, run the following command from the project folder: $ phpunit Contributing Contributions are welcome and will be fully credited. Please see CONTRIBUTING for details. Security If you discover any security related issues, please email jonathan@reinink.ca instead of using the issue tracker. Credits Jonathan Reinink All Contributors License The MIT License (MIT). Please see LICENSE for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/glide"	"An on-demand image manipulation library."	"true"
"Imagery"	"Image Hash"	"https://github.com/jenssegers/imagehash"	"A library for generating perceptual image hashes."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"489"	"29"	"44"	"GitHub - jenssegers/imagehash: Perceptual image hashing for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 29 Star 489 Fork 44 jenssegers/imagehash Code Issues 2 Pull requests 2 Pulse Graphs Perceptual image hashing for PHP http://jenssegers.com 64 commits 2 branches 11 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show v0.4.0 v0.3.0 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v.0.1.4 v.0.1.3 v.0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 906ea46 Jul 6, 2016 jenssegers Update docblock Permalink Failed to load latest commit information. src Update docblock Jul 6, 2016 tests Add tests for hex/dec mode Feb 20, 2016 .gitattributes Remove styleci config and add .gitattributes Sep 24, 2015 .gitignore Initial version Dec 5, 2014 .travis.yml Update .travis.yml Dec 6, 2015 README.md Update readme with decimal mode Feb 20, 2016 composer.json Update composer.json Nov 15, 2015 phpunit.xml Initial version Dec 5, 2014 README.md ImageHash A perceptual hash is a fingerprint of a multimedia file derived from various features from its content. Unlike cryptographic hash functions which rely on the avalanche effect of small changes in input leading to drastic changes in the output, perceptual hashes are ""close"" to one another if the features are similar. Perceptual hashes are a different concept compared to cryptographic hash functions like MD5 and SHA1. With cryptographic hashes, the hash values are random. The data used to generate the hash acts like a random seed, so the same data will generate the same result, but different data will create different results. Comparing two SHA1 hash values really only tells you two things. If the hashes are different, then the data is different. And if the hashes are the same, then the data is likely the same. In contrast, perceptual hashes can be compared -- giving you a sense of similarity between the two data sets. This code was based on: https://github.com/kennethrapp/phasher http://www.phash.org http://www.hackerfactor.com/blog/?/archives/529-Kind-of-Like-That.html http://www.hackerfactor.com/blog/?/archives/432-Looks-Like-It.html http://blog.iconfinder.com/detecting-duplicate-images-using-python WARNING: the PerceptualHash implementation is still under development. Installation Install using composer: composer require jenssegers/imagehash  It is suggested that you also install the GMP extension for PHP. This will result in faster Hamming distance calculations. Usage Calculating a perceptual hash for an image using the default implementation: use Jenssegers\ImageHash\ImageHash;  $hasher = new ImageHash; $hash = $hasher->hash('path/to/image.jpg'); The resulting hash is a 64 bit hexadecimal image fingerprint that can be stored in your database once calculated. The hamming distance is used to compare two image fingerprints for similarities. Low distance values will indicate that the images are similar or the same, high distance values indicate that the images are different. Use the following method to detect if images are similar or not: $distance = $hasher->distance($hash1, $hash2); Equal images will not always have a distance of 0, so you will need to decide at which distance you will evaluate images as equal. For the image set that I tested, a max distance of 5 was acceptable. But this will depend on the implementation, the images and the number of images. For example; when comparing a small set of images, a lower maximum distances should be acceptable as the chances of false positives are quite low. If however you are comparing a large amount of images, 5 might already be too much. Calculating a perceptual hash for an image using a different implementation: use Jenssegers\ImageHash\Implementations\DifferenceHash; use Jenssegers\ImageHash\ImageHash;  $implementation = new DifferenceHash; $hasher = new ImageHash($implementation); $hash = $hasher->hash('path/to/image.jpg'); Compare 2 images and get their hamming distance: $distance = $hasher->compare('path/to/image1.jpg', 'path/to/image2.jpg'); If you prefer to have decimal image hashes, you can change the mode during the construction of the ImageHash instance: $hasher = new ImageHash($implementation, ImageHash::DECIMAL); Demo These images are similar: Image 1 hash: 3c3e0e1a3a1e1e1e (0011110000111110000011100001101000111010000111100001111000011110) Image 2 hash: 3c3e0e3e3e1e1e1e (0011110000111110000011100011111000111110000111100001111000011110) Hamming distance: 3  These images are different: Image 1 hash: 69684858535b7575 (0010100010101000101010001010100010101011001010110101011100110111) Image 2 hash: e1e1e2a7bbaf6faf (0111000011110000111100101101001101011011011101010011010101001111) Hamming distance: 32  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jenssegers/imagehash"	"A library for generating perceptual image hashes."	"true"
"Imagery"	"Image Optimizer"	"https://github.com/psliwa/image-optimizer"	"A library for optimizing images."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"178"	"23"	"30"	"GitHub - psliwa/image-optimizer: Image optimization / compression library. This library is able to optimize png, jpg and gif files in very easy and handy way. It uses optipng, pngquant, pngcrush, pngout, gifsicle, jpegoptim and jpegtran tools. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 178 Fork 30 psliwa/image-optimizer Code Issues 4 Pull requests 3 Pulse Graphs Image optimization / compression library. This library is able to optimize png, jpg and gif files in very easy and handy way. It uses optipng, pngquant, pngcrush, pngout, gifsicle, jpegoptim and jpegtran tools. 15 commits 1 branch 7 releases 4 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit 1baef5d Jan 16, 2016 psliwa Merge branch 'patch-2' Permalink Failed to load latest commit information. src/ImageOptimizer Merge branch 'patch-2' Jan 16, 2016 tests add tests for advpng Jan 16, 2016 .gitignore initial design and few optimizers Aug 2, 2014 LICENSE add project type to composer + license Aug 3, 2014 README.md Add ability to pass arguments via options Nov 9, 2015 Vagrantfile optimizers for jpg, gif and configure smart optimizer Aug 3, 2014 composer.json [#10] fix support for Symfony 3.+ Jan 6, 2016 phpunit.xml initial design and few optimizers Aug 2, 2014 README.md Image Optimizer This library is handy and very easy to use optimizer for image files. It uses optipng, pngquant, jpegoptim and few more libraries, so before use it you should install proper libraries on your server. Project contains Vagrantfile that defines testing virtual machine with all libraries installed, so you can check Vagrantfile how to install all those stuff. Thanks to ImageOptimizer and librares that it uses, your image files can be 10%-70% smaller. Basic usage      $factory = new \ImageOptimizer\OptimizerFactory();     $optimizer = $factory->get();      $filepath = /* path to image */;      $optimizer->optimize($filepath);     //optimized file overwrites original one  Configuration By default optimizer does not throw any exception, if file can not be optimized or optimizing library for given file is not installed, optimizer will not touch original file. This behaviour is ok when you want to eventually optimize files uploaded by user. When in your use case optimization fault should cause exception, ignore_errors option was created especially for you. This library is very smart, you do not have to configure paths to all binaries of libraries that are used by ImageOptimizer, library will be looking for those binaries in few places, so if binaries are placed in standard places, it will be found automatically. Supported options: ignore_errors (default: true) optipng_options (default: array('-i0', '-o2', '-quiet')) - an array of arguments to pass to the library pngquant_options (default: array('--force')) pngcrush_options (default: array('-reduce', '-q', '-ow')) pngout_options (default: array('-s3', '-q', '-y')) gifsicle_options (default: array('-b', '-O5')) jpegoptim_options (default: array('--strip-all', '--all-progressive')) jpegtran_options (default: array('-optimize', '-progressive')) optipng_bin (default: will be guessed) - you can enforce paths to binaries, but by default it will be guessed pngquant_bin pngcrush_bin pngout_bin gifsicle_bin jpegoptim_bin jpegtran_bin You can pass array of options as first argument of ImageOptimizer\OptimizerFactory constructor. Second argument is optionally Psr\LoggerInterface.      $factory = new \ImageOptimizer\OptimizerFactory(array('ignore_errors' => false), $logger);  Supported optimizers default (smart) - it guess file type and choose optimizer for this file type png - chain of optimizers for png files, by default it uses pngquant and optipng. pngquant is lossy optimization jpg - first of two optimizations will be executed: jpegtran or jpegoptim gif - alias to gifsicle pngquant - homepage optipng - homepage pngcrush - homepage pngout - homepage jpegtran - homepage jpegoptim - homepage gifsicle - homepage You can obtain concrete optimizer by passing his name to ImageOptimizer\OptimizerFactory::get method:      //default optimizer is `smart`     $optimizer = $factory->get();      //png optimizer     $pngOptimizer = $factory->get('png');      //jpegoptim optimizer etc.     $jpgOptimizer = $factory->get('jpegoptim');  License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/psliwa/image-optimizer"	"A library for optimizing images."	"true"
"Imagery"	"Image With Text"	"https://github.com/nmcteam/image-with-text"	"A library for embedding text into images."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"71"	"9"	"23"	"GitHub - nmcteam/image-with-text: Create images with embedded text using advanced typography Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 71 Fork 23 nmcteam/image-with-text Code Issues 6 Pull requests 2 Pulse Graphs Create images with embedded text using advanced typography 9 commits 1 branch 8 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 2.0.2 2.0.1 2.0.0 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit 51f6442 Nov 20, 2013 codeguy Bug fixes in Text rendering … Version bump Permalink Failed to load latest commit information. example Allow for multiple text boxes Nov 15, 2013 src/NMC/ImageWithText Bug fixes in Text rendering Nov 20, 2013 .gitignore First commit Nov 14, 2013 CONTRIBUTING.md First commit Nov 14, 2013 LICENSE First commit Nov 14, 2013 README.md Bug fixes in Text rendering Nov 20, 2013 composer.json Fix composer requirements Nov 14, 2013 README.md Image with Text This class makes it super easy to render images with multiple, independently styled text blocks. You can control each text block's alignment, color, font, line height, and size. You may also position each text block with specific X and Y coordinates relative to the source image. Installation Install this library with Composer. Add this to your composer.json file: {     ""require"": {         ""nmcteam/image-with-text"": ""~2.0""     } }  Then run composer install. Usage Here's a quick demonstration. You can find this full working demo in the example/ directory. <?php require '../vendor/autoload.php';  // Create image $image = new \NMC\ImageWithText\Image(dirname(__FILE__) . '/source.jpg');  // Add styled text to image $text1 = new \NMC\ImageWithText\Text('Thanks for using our image text PHP library!', 3, 25); $text1->align = 'left'; $text1->color = 'FFFFFF'; $text1->font = dirname(__FILE__) . '/Ubuntu-Medium.ttf'; $text1->lineHeight = 36; $text1->size = 24; $text1->startX = 40; $text1->startY = 40; $image->addText($text1);  // Add another styled text to image $text2 = new \NMC\ImageWithText\Text('No, really, thanks!', 1, 30); $text2->align = 'left'; $text2->color = '000000'; $text2->font = dirname(__FILE__) . '/Ubuntu-Medium.ttf'; $text2->lineHeight = 20; $text2->size = 14; $text2->startX = 40; $text2->startY = 140; $image->addText($text2);  // Render image $image->render(dirname(__FILE__) . '/destination.jpg');  How to Contribute Fork the repo on GitHub and send a pull request Find a list of TODOs on the GitHub issue tracker We have not written any unit tests just yet, but we hope to do that soon. Author Josh Lockhart Copyright (c) 2013 New Media Campaigns License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nmcteam/image-with-text"	"A library for embedding text into images."	"true"
"Imagery"	"Imagine"	"http://imagine.readthedocs.io/en/latest/index.html"	"An image manipulation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2803"	"157"	"447"	"GitHub - avalanche123/Imagine: PHP 5.3 Object Oriented image manipulation library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 157 Star 2,803 Fork 447 avalanche123/Imagine Code Issues 57 Pull requests 35 Pulse Graphs PHP 5.3 Object Oriented image manipulation library http://imagine.readthedocs.org 1,082 commits 5 branches 25 releases 81 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags 0.5 develop feature/border-filter feature/wrappers master Nothing to show v0.6.3 v0.6.1 v0.6.0 v0.5.0 v0.4.1 v0.4.0 v0.3.1 v0.3.0 v0.2.8 v0.2.7 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 0.6.2 0.2.4 Nothing to show New pull request Latest commit 68d416e Jul 5, 2016 avalanche123 committed on GitHub Merge pull request #502 from curtisgibby/patch-1 … Remove Bad Apostrophe Permalink Failed to load latest commit information. docs Remove Bad Apostrophe Jul 5, 2016 lib/Imagine Merge pull request #486 from romainneutron/fix-302 Mar 6, 2016 tests Fix #254 : Do not read stream more than once Sep 20, 2015 .gitattributes Ignore all test and documentation with the ""export-ignore"" attribute Mar 18, 2015 .gitignore Fix: Add composer.lock to .gitignore Jul 10, 2015 .travis.yml Fix PHP7 travis configuration Mar 6, 2016 CHANGELOG.md Update changelog Sep 19, 2015 LICENSE Add colormanagement.org license information Jul 19, 2013 README.md remove broken image Mar 18, 2016 composer.json composer.archive.exclude: .git and other dot files from root, /tests … Jul 10, 2015 phpunit.xml.dist initial commit Feb 3, 2011 README.md Imagine Tweet about it using the #php_imagine hashtag. Image manipulation library for PHP 5.3 inspired by Python's PIL and other image libraries. Requirements The Imagine library has the following requirements: PHP 5.3+ Depending on the chosen Image implementation, you may need one of the following: GD2 Imagick Gmagick Installation using composer php composer.phar require imagine/imagine Basic Principles The main purpose of Imagine is to provide all the necessary functionality to bring all native low level image processing libraries in PHP to the same simple and intuitive OO API. Several things are necessary to accomplish that: Image manipulation tools, such as resize, crop, etc. Drawing API - to create basic shapes and advanced charts, write text on the image Masking functionality - ability to apply black&white or grayscale images as masks, leading to semi-transparency or absolute transparency of the image the mask is being applied to The above tools should be the basic foundation for a more powerful set of tools that are called Filters in Imagine. Some of the ideas for upcoming filters: Charting and graphing filters - pie and bar charts, linear graphs with annotations Reflection - apple style Rounded corners - web 2.0 Documentation Hosted by Read The Docs Presentations Introduction to Imagine How to Take Over the World with Lithium Articles Image Processing with Imagine Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/avalanche123/Imagine"	"An image manipulation library."	"true"
"Imagery"	"Intervention Image"	"https://github.com/Intervention/image"	"Another image manipulation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3808"	"181"	"515"	"GitHub - Intervention/image: PHP Image Manipulation Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 181 Star 3,808 Fork 515 Intervention/image Code Issues 81 Pull requests 6 Pulse Graphs PHP Image Manipulation http://image.intervention.io 493 commits 3 branches 89 releases 43 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.6 develop master Nothing to show 2.3.7 2.3.6 2.3.5 2.3.4 2.3.3 2.3.2 2.3.1 2.3.0 2.2.2 2.2.1 2.2.0 2.1.4 2.1.3 2.1.2 2.1.1 2.1.0 2.0.17 2.0.16 2.0.15 2.0.14 2.0.13 2.0.12 2.0.11 2.0.10 2.0.9 2.0.8 2.0.7 2.0.6 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 2.0.0-beta.2 2.0.0-beta 1.6.5 1.6.4 1.6.3 1.6.2 1.6.1 1.6.0 1.5.13 1.5.12 1.5.11 1.5.10 1.5.9 1.5.8 1.5.7 1.5.6 1.5.5 1.5.4 1.5.3 1.5.2 1.5.1 1.5.0 1.4.5 1.4.4 1.4.3 1.4.2 1.4.1 1.4.0 1.3.11 1.3.10 1.3.9 1.3.8 1.3.7 1.3.6 1.3.5 1.3.4 1.3.3 1.3.2 1.3.1 1.3.0 1.2.6 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.1.5 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.0.1 1.0.0 Nothing to show New pull request Latest commit 6886d43 Jun 22, 2016 olivervogel committed on GitHub Merge pull request #574 from alokrajiv/master … Updated provides.json Backslash syntax error Permalink Failed to load latest commit information. src throw NotReadableException if try read partially saved image Apr 26, 2016 tests throw NotReadableException if try read partially saved image Apr 26, 2016 .gitattributes Add .gitattributes files Dec 21, 2015 .gitignore minor changes Jun 28, 2015 .travis.yml Fix: Enable imagick extension on PHP5.4 Jan 2, 2016 LICENSE v2 May 10, 2014 README.md changed requirement in readme Jun 28, 2015 composer.json Update composer.json Jul 10, 2015 phpunit.xml v2 May 10, 2014 provides.json Updated provides.json Backslash syntax error Jun 22, 2016 README.md Intervention Image Intervention Image is a PHP image handling and manipulation library providing an easier and expressive way to create, edit, and compose images. The package includes ServiceProviders and Facades for easy Laravel integration. Requirements PHP >=5.4 Fileinfo Extension Supported Image Libraries GD Library (>=2.0) Imagick PHP extension (>=6.5.7) Getting started Installation Laravel Framework Integration Official Documentation Code Examples // open an image file $img = Image::make('public/foo.jpg');  // resize image instance $img->resize(320, 240);  // insert a watermark $img->insert('public/watermark.png');  // save image in desired format $img->save('public/bar.jpg'); Refer to the documentation to learn more about Intervention Image. Contributing Contributions to the Intervention Image library are welcome. Please note the following guidelines before submiting your pull request. Follow PSR-2 coding standards. Write tests for new functions and added features API calls should work consistently with both GD and Imagick drivers License Intervention Image is licensed under the MIT License. Copyright 2014 Oliver Vogel Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Intervention/image"	"Another image manipulation library."	"true"
"Imagery"	"PHP Image Workshop"	"https://github.com/Sybio/ImageWorkshop"	"Another image manipulation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"704"	"69"	"151"	"GitHub - Sybio/ImageWorkshop: ImageWorkshop is a PHP5.3+ library that helps you to manage images based on GD library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 69 Star 704 Fork 151 Sybio/ImageWorkshop Code Issues 10 Pull requests 5 Pulse Graphs ImageWorkshop is a PHP5.3+ library that helps you to manage images based on GD library http://phpimageworkshop.com/ 151 commits 2 branches 13 releases 12 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/font-spacing master Nothing to show 2.0.9 2.0.8 2.0.7 2.0.6 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 1.3.4 1.3.3 1.3.0 Nothing to show New pull request Latest commit c5f9db3 Jan 25, 2016 jdecool Remove version reference into ImageWorkshop class Permalink Failed to load latest commit information. fixtures Add unit test for ImageWorkshop::initFromPath factory through HTTP Jul 5, 2015 src/PHPImageWorkshop Remove version reference into ImageWorkshop class Jan 25, 2016 tests Add unit test for ImageWorkshop::initFromPath factory through HTTP Jul 5, 2015 .gitignore Add .gitignore Feb 27, 2015 .travis.yml Add unit test for ImageWorkshop::initFromPath factory through HTTP Jul 5, 2015 LICENCE.txt New version: 2.0.0 Nov 20, 2012 README.md Update README with latest changelog Jul 5, 2015 composer.json Update composer.json Mar 25, 2015 phpunit.xml.dist Default PHPUnit configuration Mar 13, 2015 README.md ================================ ImageWorkshop class ================================ Summary and features Really flexible and easy-to-use PHP class to work with images using the GD Library http://phpimageworkshop.com/ Latest updates Version 2.0.9 - 2015-07-05 Fix ImageWorkshop::initFromPath with remote URL Version 2.0.8 - 2015-06-01 Fix exception code when file not found Version 2.0.7 - 2015-03-22 Allow ImageWorkshop::initFromPath factory working with remote URL Improve PHP >= 5.5 compatibility Add fixOrientation method to layer to change image orientation based on EXIF orientation data Fix background color when value is setting to ""000000"" Version 2.0.6 - 2014-08-01 @jasny (https://github.com/jasny) contribution, new methods : ImageWorkshopLayer::resizeToFit() resizes an image to fit a bounding box. ImageWorkshopLayer::cropToAspectRatio() crops either to width or height of the document to match the aspect ratio. Documentation here : https://github.com/Sybio/ImageWorkshop/pull/37#issue-28704248 Version 2.0.5 - 2013-11-12 Implementing interlace mode (http://php.net/manual/en/function.imageinterlace.php) on save() method to display progessive JPEG image     $interlace = true; // set true to enable interlace, false by default     $layer->save($dirPath, $filename, $createFolders, $backgroundColor, $imageQuality, $interlace); Thanks @dripolles (https://github.com/dripolles) & @johnhunt (https://github.com/johnhunt) Version 2.0.4 - 2013-09-11 Fix a major bug when resizing both sides AND conserving proportion : layer stack problem (current layer has a new nested level in its stack, not expected), and translations with positionX and positionY are wrong. Fixed. (Initial problem : https://github.com/Sybio/ImageWorkshop/pull/14) Add a parameter to clearStack() method Version 2.0.2 - 2013-06-14 Fix a new bug : when resizing or cropping, small images can have 0 pixel of width or height (because of round), which is impossible and script crashes. Now width and height are 1 pixel minimum. Note: $layer->resizeInPixel(null, 0 /* or negative number */, null); It will generate a 1 pixel height image, not 0. Version 2.0.1 - 2013-06-03 Fix an opacity bug : pure black color (#000000) always displayed fully transparent (from 0 to 99% opacity). Bug fixed ! (no known bug anymore) Add some Exceptions to help debugging Version 2.0.0 - 2012-11-21 New version of ImageWorkshop ! The library is now divided in 3 main classes for cleaned code: ImageWorkshopLayer: the class which represents a layer, that you manipulate ImageWorkshop: a factory that is used to generate layers ImageWorkshopLib: a class containing some tools (for calculations, etc...), used by both classes Technically, only the initialization change compared with the 1.3.x versions, check the documentation: http://phpimageworkshop.com/documentation.html#chapter-initialization-of-a-layer Here an example, before and now:     // before     $layer = new ImageWorkshop(array(         'imageFromPath' => '/path/to/images/picture.jpg',     ));     // now     $layer = ImageWorkshop::initFromPath('/path/to/images/picture.jpg'); And also the installation of the class: http://phpimageworkshop.com/installation.html The documentation has been updated, you can now check the documentation of each version since 1.3.3: (Ex: http://phpimageworkshop.com/doc/9/initialize-from-an-image-file.html?version=2.0.0, http://phpimageworkshop.com/doc/9/initialize-from-an-image-file.html?version=1.3.3) Installation The class is designed for PHP 5.3+, but it can work with older PHP versions... Check how to install the class here: http://phpimageworkshop.com/installation.html Usage Learn how to use the class in 5 minutes: http://phpimageworkshop.com/quickstart.html The complete documentation: http://phpimageworkshop.com/documentation.html Usefull tutorials: http://phpimageworkshop.com/tutorials.html What's new in the doc' ? Installation guide: http://phpimageworkshop.com/installation.html Adding the flip documentation: http://phpimageworkshop.com/doc/25/flip-vertical-horizontal-mirror.html Adding the opacity documentation which was omitted: http://phpimageworkshop.com/doc/24/opacity-transparency.html Tutorial ""Manage animated GIF with ImageWorkshop (and GiFFrameExtractor & GifCreator)"": http://phpimageworkshop.com/tutorial/5/manage-animated-gif-with-imageworkshop.html @todo Adding a method to add easily borders to a layer (external, inside and middle border) Check given hexa' color and remove # if exists. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Sybio/ImageWorkshop"	"Another image manipulation library."	"true"
"Testing"	"Alice"	"https://github.com/nelmio/alice"	"An expressive fixture generation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1055"	"55"	"150"	"GitHub - nelmio/alice: Expressive fixtures generator Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 55 Star 1,055 Fork 150 nelmio/alice Code Issues 34 Pull requests 4 Pulse Graphs Expressive fixtures generator 517 commits 3 branches 21 releases 66 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 2.x Switch branches/tags Branches Tags 1.x 2.x master Nothing to show 2.2.2 2.2.1 2.2.0 2.1.4 2.1.3 2.1.2 2.1.1 2.1.0 2.0.0 1.7.2 1.7.1 1.7.0 1.6.0 1.5.2 1.5.1 1.5.0 1.4.0 1.3.0 1.2.0 1.1.0 1.0.0 Nothing to show New pull request Latest commit be940d3 Jul 15, 2016 theofidry Update changlog for 2.2.2 Permalink Failed to load latest commit information. doc Fix typo about $fake closure (#422) Jul 12, 2016 src/Nelmio/Alice Fix support for hyphens (#431) Jul 15, 2016 tests/Nelmio/Alice Fix support for hyphens (#431) Jul 15, 2016 .gitignore Remove composer.lock Oct 5, 2015 .php_cs Bump requirement to php5.4 Nov 15, 2014 .travis.yml Harden parameters and references (#355) Jul 6, 2016 CHANGELOG.md Update changlog for 2.2.2 Jul 15, 2016 LICENSE Initial commit Oct 28, 2012 README.md Fix quotes (#417) Jul 3, 2016 UPGRADE.md Added new documentation for 2.0 Mar 17, 2015 composer.json Fix minimum PHP version requred Jul 11, 2016 phpunit.xml.dist Add PhpunitBridge May 11, 2016 README.md Alice - Expressive fixtures generator Relying on fzaninotto/Faker, Alice allows you to create a ton of fixtures/fake data for use while developing or testing your project. It gives you a few essential tools to make it very easy to generate complex data with constraints in a readable and easy to edit way, so that everyone on your team can tweak the fixtures if needed. Note: v3 is on its way, get involved! Table of Contents Installation Example Getting Started Basic Usage Detailed Usage Complete Reference Creating Fixtures Fixture Ranges Calling Methods Specifying Constructor Arguments Custom Setter Optional Data Handling Unique Constraints Handling Relations References Multiple References Self reference Passing references to providers Keep Your Fixtures Dry Fixture Inheritance Including files Variables Parameters Customize Data Generation Faker Data Reuse generated data using objects value Custom Faker Data Providers Event handling with Processors Third-party libraries Other references: Tutorial: Using Alice in Symfony Installation This is installable via Composer as nelmio/alice: composer require nelmio/alice  Example Here is a complete example of entity declaration: Nelmio\Entity\User:     user{1..10}:         username: '<username()>'         fullname: '<firstName()> <lastName()>'         birthDate: '<date()>'         email: '<email()>'         favoriteNumber: '50%? <numberBetween(1, 200)>'  Nelmio\Entity\Group:     group1:         name: Admins         owner: '@user1'         members: '<numberBetween(1, 10)>x @user*'         created: '<dateTimeBetween(""-200 days"", ""now"")>'         updated: '<dateTimeBetween($created, ""now"")>' You can then load them easily with: $objects = \Nelmio\Alice\Fixtures::load(__DIR__.'/fixtures.yml', $objectManager); For more information, refer to the documentation. Third-party libraries Symfony: hautelook/AliceBundle h4cc/AliceFixturesBundle knplabs/rad-fixtures-load Nette Zenify/DoctrineFixtures Zend Framework 2: ma-si/aist-alice-fixtures License Released under the MIT License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nelmio/alice"	"An expressive fixture generation library."	"true"
"Testing"	"AspectMock"	"https://github.com/Codeception/AspectMock"	"A mocking framework for PHPUnit/Codeception."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"461"	"34"	"62"	"GitHub - Codeception/AspectMock: The most powerful and flexible mocking framework for PHPUnit / Codeception. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 34 Star 461 Fork 62 Codeception/AspectMock Code Issues 22 Pull requests 1 Wiki Pulse Graphs The most powerful and flexible mocking framework for PHPUnit / Codeception. 202 commits 2 branches 21 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags custom_transformer master Nothing to show 2.0.0 2.0.0-RC 1.0.0 0.5.5 0.5.4 0.5.3 0.5.1 0.5.0 0.5.0-beta2 0.5.0-beta 0.4.2 0.4.1 0.4.0 0.3.3 0.3.2 0.3.0 0.2.2 0.2.1 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit 1a7a185 Jun 23, 2016 DavertMik updated docs and version Permalink Failed to load latest commit information. docs updated docs and version Jun 23, 2016 src/AspectMock revered back stacked stub support :( Jun 23, 2016 tests Revert ""Add stacked stub support"" Jun 23, 2016 .gitignore updated changelog, removed compoer.lock Mar 14, 2016 .travis.yml AspectMock v2 to run on PHP 5.6+ only Jun 23, 2016 CHANGELOG.md revered back stacked stub support :( Jun 23, 2016 LICENSE Initial commit Jul 20, 2013 README.md updated readme with badges Mar 14, 2016 RoboFile.php tests for php7 Jun 23, 2016 VERSION updated docs and version Jun 23, 2016 codeception.yml initial commit Jul 21, 2013 composer.json AspectMock v2 to run on PHP 5.6+ only Jun 23, 2016 README.md AspectMock AspectMock is not an ordinary PHP mocking framework. With the power of Aspect Oriented programming and the awesome Go-AOP library, AspectMock allows you to stub and mock practically anything in your PHP code! Documentation | Test Doubles Builder | ClassProxy | InstanceProxy | FuncProxy Motivation PHP is a language that was not designed to be testable. Really. How would you fake the time() function to produce the same result for each test call? Is there any way to stub a static method of a class? Can you redefine a class method at runtime? Dynamic languages like Ruby or JavaScript allow us to do this. These features are essential for testing. AspectMock to the rescue! Thousands of lines of untested code are written everyday in PHP. In most cases, this code is not actually bad, but PHP does not provide capabilities to test it. You may suggest rewriting it from scratch following test driven design practices and use dependency injection wherever possible. Should this be done for stable working code? Well, there are much better ways to waste time. With AspectMock you can unit-test practically any OOP code. PHP powered with AOP incorporates features of dynamic languages we have long been missing. There is no excuse for not testing your code. You do not have to rewrite it from scratch to make it testable. Just install AspectMock with PHPUnit or Codeception and try to write some tests. It's really, really simple! Features Create test doubles for static methods. Create test doubles for class methods called anywhere. Redefine methods on the fly. Simple syntax that's easy to remember. Code Pitch Allows stubbing and mocking of static methods. Let's redefine static methods and verify their calls at runtime. <?php function testTableName() {     $this->assertEquals('users', UserModel::tableName());        $userModel = test::double('UserModel', ['tableName' => 'my_users']);     $this->assertEquals('my_users', UserModel::tableName());     $userModel->verifyInvoked('tableName');  } ?> Allows replacement of class methods. Testing code developed with the ActiveRecord pattern. Does the use of the ActiveRecord pattern sound like bad practice? No. But the code below is untestable in classic unit testing. <?php class UserService {     function createUserByName($name)         $user = new User;         $user->setName($name);         $user->save();     } } ?> Without AspectMock you need to introduce User as an explicit dependency into class UserService to get it tested. But lets leave the code as it is. It works. Nevertheless, we should still test it to avoid regressions. We don't want the $user->save method to actually get executed, as it will hit the database. Instead we will replace it with a dummy and verify that it gets called by createUserByName: <?php function testUserCreate() {     $user = test::double('User', ['save' => null]));     $service = new UserService;     $service->createUserByName('davert');     $this->assertEquals('davert', $user->getName());     $user->verifyInvoked('save'); } ?> Intercept even parent class methods and magic methods <?php // User extends ActiveRecord function testUserCreate() {     $AR = test::double('ActiveRecord', ['save' => null]));     test::double('User', ['findByNameAndEmail' => new User(['name' => 'jon'])]));      $user = User::findByNameAndEmail('jon','jon@coltrane.com'); // magic method     $this->assertEquals('jon', $user->getName());     $user->save(['name' => 'miles']); // ActiveRecord->save did not hit database     $AR->verifyInvoked('save');     $this->assertEquals('miles', $user->getName()); } ?> Override even standard PHP functions <?php namespace demo; test::func('demo', 'time', 'now'); $this->assertEquals('now', time()); Beautifully simple Only 4 methods are necessary for method call verification and one method to define test doubles: <?php function testSimpleStubAndMock() {        $user = test::double(new User, ['getName' => 'davert']);     $this->assertEquals('davert', $user->getName());     $user->verifyInvoked('getName');     $user->verifyInvokedOnce('getName');     $user->verifyNeverInvoked('setName');     $user->verifyInvokedMultipleTimes('setName',1); } ?> To check that method setName was called with davert as argument. <?php $user->verifyMethodInvoked('setName', ['davert']); ?> Wow! But how does it work? No PECL extensions is required. The Go! AOP library does the heavy lifting by patching autoloaded PHP classes on the fly. By introducing pointcuts to every method call, Go! allows intercepting practically any call to a method. AspectMock is a very tiny framework consisting of only 8 files using the power of the Go! AOP Framework. Check out Aspect Oriented Development and the Go! library itself. Requirements PHP >= 5.4 + Go! AOP Requirements Installation 1. Add aspect-mock to your composer.json. {     ""require-dev"": {         ""codeception/aspect-mock"": ""*""     } }  2. Install AspectMock with Go! AOP as a dependency. php composer.phar update  Configuration Include AspectMock\Kernel class into your tests bootstrap file. With Composer's Autoloader <?php include __DIR__.'/../vendor/autoload.php'; // composer autoload  $kernel = \AspectMock\Kernel::getInstance(); $kernel->init([     'debug' => true,     'includePaths' => [__DIR__.'/../src'] ]); ?> If your project uses Composer's autoloader, that's all you need to get started. With Custom Autoloader If you use a custom autoloader (like in Yii/Yii2 frameworks), you should explicitly point AspectMock to modify it: <?php include __DIR__.'/../vendor/autoload.php'; // composer autoload  $kernel = \AspectMock\Kernel::getInstance(); $kernel->init([     'debug' => true,     'includePaths' => [__DIR__.'/../src'] ]); $kernel->loadFile('YourAutoloader.php'); // path to your autoloader ?> Load all autoloaders of your project this way, if you do not rely on Composer entirely. Without Autoloader If it still doesn't work for you... Explicitly load all required files before testing: <?php include __DIR__.'/../vendor/autoload.php'; // composer autoload  $kernel = \AspectMock\Kernel::getInstance(); $kernel->init([     'debug' => true,     'includePaths' => [__DIR__.'/../src'] ]); require 'YourAutoloader.php'; $kernel->loadPhpFiles('/../common'); ?> Customization There are a few options you can customize setting up AspectMock. All them are defined in Go! Framework. They might help If you still didn't get AspectMock running on your project. appDir defines the root of web application which is being tested. All classes outside the root will be replaced with the proxies generated by AspectMock. By default it is a directory in which vendor dir of composer if located. If you don't use Composer or you have custom path to composer's vendor's folder, you should specify appDir cacheDir a dir where updated source PHP files can be stored. If this directory is not set, proxie classes will be built on each run. Otherwise all PHP files used in tests will be updated with aspect injections and stored into cacheDir path. includePaths directories with files that should be enhanced by Go Aop. Should point to your applications source files as well as framework files and any libraries you use.. excludePaths a paths in which PHP files should not be affected by aspects. You should exclude your tests files from interception. Example: <?php $kernel = \AspectMock\Kernel::getInstance(); $kernel->init([     'appDir'    => __DIR__ . '/../../',     'cacheDir'  => '/tmp/myapp',     'includePaths' => [__DIR__.'/../src']     'excludePaths' => [__DIR__] // tests dir should be excluded ]); ?> More configs for different frameworks. It's pretty important to configure AspectMock properly. Otherwise it may not work as expected or you get side effects. Please make sure you included all files that you need to mock, but your test files as well as testing frameworks are excluded. Usage in PHPUnit Use newly created bootstrap in your phpunit.xml configuration. Also disable backupGlobals: <phpunit bootstrap=""bootstrap.php"" backupGlobals=""false""> Clear the test doubles registry between tests. <?php use AspectMock\Test as test;  class UserTest extends \PHPUnit_Framework_TestCase {     protected function tearDown()     {         test::clean(); // remove all registered test doubles     }      public function testDoubleClass()     {         $user = test::double('demo\UserModel', ['save' => null]);         \demo\UserModel::tableName();         \demo\UserModel::tableName();         $user->verifyInvokedMultipleTimes('tableName',2);     }  ?> Usage in Codeception. Include AspectMock\Kernel into tests/_bootstrap.php. We recommend including a call to test::clean() from your CodeHelper class: <?php namespace Codeception\Module;  class CodeHelper extends \Codeception\Module {     function _after(\Codeception\TestCase $test)     {         \AspectMock\Test::clean();     } } ?> Improvements? There is guaranteed to be room for improvements. This framework was not designed to do everything you might ever need (see notes below). But if you feel like you require a feature, please submit a Pull Request. It's pretty easy since there's not much code, and the Go! library is very well documented. Credits Follow @codeception for updates. Daveloped by Michael Bodnarchuk. License: MIT. Powered by Go! Aspect-Oriented Framework Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Codeception/AspectMock"	"A mocking framework for PHPUnit/Codeception."	"true"
"Testing"	"Atoum"	"https://github.com/atoum/atoum"	"A simple testing library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"865"	"49"	"135"	"GitHub - atoum/atoum: The modern, simple and intuitive PHP unit testing framework. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 49 Star 865 Fork 135 atoum/atoum Code Issues 31 Pull requests 13 Wiki Pulse Graphs The modern, simple and intuitive PHP unit testing framework. http://atoum.org 2,933 commits 14 branches 27 releases Fetching contributors PHP 98.4% Other 1.6% PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.7.x 2.8.x Hywan-patch-2 directory fcgi master virtual-hooks Nothing to show 2.8.1 2.8.0 2.7.0 2.6.1 2.6.0 2.5.2 2.5.1 2.5.0 2.4.1 2.4.0 2.3.0 2.2.2 2.2.1 2.2.0 2.1.0 2.0.2 2.0.1 2.0.0 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.1.0 1.0.0 0.0.1 Nothing to show New pull request Latest commit 67104f2 Jul 11, 2016 jubianchi Fix changelog Permalink Failed to load latest commit information. bin Remove `?>`. Mar 5, 2015 classes Exclude vendor and composer.lock from phar Jul 1, 2016 resources Add test, fix some mistakes Jul 11, 2016 scripts Set version to 2.8.1. Jul 1, 2016 tests Add test, fix some mistakes Jul 11, 2016 .gitignore Add telemtry report to CI builds May 6, 2016 .travis.yml Add PHP7.1 as an allowed failure in CI Jul 8, 2016 ABOUT ABOUT and COPYING are mandatory for phar generator. Dec 19, 2013 CHANGELOG.md Fix changelog Jul 11, 2016 CONTRIBUTING.md Document how to send PRs Jan 6, 2016 COPYING Update license Jan 19, 2016 CREDITS.md Use markdown everywhere. Dec 17, 2013 FAQ.md mv mageekguy.atoum.phar atoum.phar Dec 17, 2014 README.md Add gitter badge Jun 20, 2016 appveyor.yml Configure gitter notifications Jun 20, 2016 composer.json Update license Jan 18, 2016 constants.php Set version to dev-master. Jul 1, 2016 README.md atoum A simple, modern and intuitive unit testing framework for PHP! Just like SimpleTest or PHPUnit, atoum is a unit testing framework specific to the PHP language. However, it has been designed from the start with the following ideas in mind: Can be implemented rapidly ; Simplify test development ; Allow for writing reliable, readable, and clear unit tests ; To accomplish that, it massively uses capabilities provided by PHP, to give the developer a whole new way of writing unit tests. Therefore, it can be installed and integrated inside an existing project extremely easily, since it is only a single PHAR archive, which is the one and only entry point for the developper. Also, thanks to its fluent interface, it allows for writing unit tests in a fashion close to natural language. It also makes it easier to implement stubbing within tests, thanks to intelligent uses of anonymous functions and closures. atoum natively, and by default, performs the execution of each unit test within a separate PHP process, to warrant isolation. Of course, it can be used seamlessly for continuous integration, and given its design, it can be made to cope with specific needs extremely easily. atoum also accomplishes all of this without affecting performance, since it has been developed to boast a reduced memory footprint while allowing for hastened test execution. It can also generate unit test execution reports in the Xunit format, which makes it compatible with continuous integration tools such as Jenkins. atoum also generates code coverage reports, in order to make it possible to supervise unit tests. Finally, even though it is developed mainly on UNIX, it can also work on Windows. Why atoum? atoum is really easy to install: clone it from github, download its PHAR or simply use composer, atoum provides a high level of security during test execution by isolating each test method in its own PHP process. Of course, this feature is available out of the box, no need to install any additional extension, atoum runs tests in a parallelized environment making the suite run as fast as possible by taking advantage of today's multi-core CPUs, atoum provides a full-featured set of natural and expressive assertions making tests as readable as possible. Here is an example: <?php $this     ->integer(150)         ->isGreaterThan(100)         ->isLowerThanOrEqualTo(200) ; atoum supports a BDD-like syntax with a lot of structural keywords: <?php $this     ->given($testedInstance = new testedClass())     ->and($testedClass[] = $firstValue = uniqid())     ->then         ->sizeof($testedInstance)->isEqualTo(1)         ->string($testedClass[0])->isEqualTo($firstValue) ; atoum provides a dead simple, yet very powerful, mock engine: <?php $this     ->given($testedInstance = new testedClass())     ->and($aMock = new \mock\foo\bar()) // here a mock of the class \foo\bar is created dynamically     ->and($this->calling($aMock)->doOtherThing = true) // each call to doOtherThing() by the instance will return true     ->and($testedInstance->setDependency($aMock))     ->then         ->boolean($testedInstance->doSomething())->isTrue()         ->mock($aMock)             ->call('doOtherThing')->withArguments($testedInstance)->once() // Asserts that the doOtherThing() method of $aMock was called once ; atoum provides a clear API to assert on exceptions: <?php $this     ->given($testedInstance = new testedClass())     ->and($aMock = new \mock\foo\bar()) // here a mock of the class \foo\bar is created dynamically     ->and($this->calling($aMock)->doOtherThing->throw = $exception = new \exception()) // Call to doOtherThing() will throw an exception     ->and($testedInstance->setDependency($aMock))     ->then         ->exception(function() use ($testedInstance) { $testedInstance->doSomething(); })             ->isIdenticalTo($exception) ; atoum also lets you mock native PHP functions. Again, this is available out of the box: <?php $this     ->given($this->function->session_start = false)     ->and($session = new testedClass())     ->then         ->exception(function() use ($session) { $session->start(); })             ->isInstanceOf('project\namespace\exception')             ->hasMessage('Unable to start session')         ->function('session_start')->wasCalled()->once() ; atoum is able to produce several reports like TAP, clover, xUnit to be easily integrated with Jenkins or any other continuous integration tool, atoum supports data providers, atoum tests support autorun: just include the atoum runner and launch your test using php path/to/test/file.php, atoum's configuration file is exclusively written in PHP (no XML, YAML or any other format) giving you the best flexibility: <?php $script->addDefaultArguments('--test-it', '-ncc');  $runner->addTestsFromDirectory(__DIR__ . '/tests/units/classes');  $testGenerator = new mageekguy\atoum\test\generator(); $testGenerator     ->setTestClassesDirectory(__DIR__ . '/tests/units/classes');     ->setTestClassNamespace('mageekguy\atoum\tests\units');     ->setTestedClassesDirectory(__DIR__ . '/classes');     ->setTestedClassNamespace('mageekguy\atoum')     ->setRunnerPath(__DIR__ . '/scripts/runner.php') ;  $runner->setTestGenerator($testGenerator); atoum provides an automatic test template generator, atoum provides a loop mode to easily retrigger failed tests, atoum is full of other interesting features that you will discover over the time. Prerequisites to use atoum atoum absolutely requires PHP >= 5.3.3 or later to work. On UNIX, in order to check whether you have the right PHP version, you just need to run the following command in your terminal: # php -v | grep -oE 'php 5\.3\.(?:[3-9]|[1-9][0-9])|5\.[4-6]\.[0-9]+|[5-7]\.[0-9]+\.[0-9]+'  If PHP 5.6.x or equivalent gets displayed, then you have the right PHP version installed. Should you want to use atoum using its PHAR archive, you also need PHP to be able to access the phar module, which is normally available by default. On UNIX, in order to check whether you have this module or not, you just need to run the following command in your terminal: # php -m | grep -i phar  If Phar or equivalent gets displayed, then the module is properly installed. Generating reports in the Xunit format requires the xml module. On UNIX, in order to check whether you have this module or not, you just need to run the following command in your terminal: # php -m | grep -i xml  If Xml or equivalent gets displayed, then the module is properly installed. Should you wish to monitor the coverage rate of your code by the unit tests, the Xdebug 2.2 module will be required. On UNIX, in order to check whether you have this module or not, you just need to run the following command in your terminal: # php -v | grep -oi 'xdebug v2.2.[0-9]*'  If Xdebug v2.2.x or equivalent gets displayed, then the module is properly installed. A unit testing framework that can be made operational in 5 minutes! Step 1: Install atoum You just have to download its PHAR archive and store it where you wish, for example under /path/to/project/tests/atoum.phar. This PHAR archive contains the latest development version to pass the totality of atoum's unit tests. atoum's source code is also available via the github repository. To check if atoum works correctly with your configuration, you can execute all its unit tests. To do that, you just need to run the following command in your terminal: # php atoum.phar --test-it  Step 2: Write your tests Using your preferred text editor, create the file path/to/project/tests/units/helloWorld.php and add the following code: <?php  namespace vendor\project\tests\units;  require_once 'path/to/atoum.phar';  include_once 'path/to/project/classes/helloWorld.php';  use \mageekguy\atoum; use \vendor\project;  class helloWorld extends atoum\test {     public function testSay()     {         $helloWorld = new project\helloWorld();          $this->string($helloWorld->say())->isEqualTo('Hello World!')         ;     } } Step 3: Run your test with the commandline Launch your terminal and run the following command: # php path/to/test/file[enter]  You should get the following result, or something equivalent: > atoum version XXX by Frédéric Hardy. Error: Unattended exception: Tested class 'vendor\project\helloWorld' does not exist for test class 'vendor\project\tests\units\helloWorld'  Step 4: Write the class corresponding to your test Using again your preferred text editor, create the file path/to/project/classes/helloWorld.php and add the following code: <?php  namespace vendor\project;  class helloWorld {     public function say()     {         return 'Hello World!';     } } Step 5: Run your test once more In the same terminal, run the following command once again: # php path/to/test/file[enter]  You should get the following result, or something equivalent: > atoum version 288 by Frédéric Hardy. > Run vendor\project\tests\units\helloWorld... [S___________________________________________________________][1/1] => Test duration: 0.00 second. => Memory usage: 0.25 Mb. > Total test duration: 0.00 second. > Total test memory usage: 0.25 Mb. > Code coverage value: 100.00% > Running duration: 0.08 second. > Success (1 test, 1 method, 2 assertions, 0 error, 0 exception)!  Step 6: Complete your tests and restart the cycle from Step 3 <?php  namespace vendor\project\tests\units;  require_once 'path/to/atoum.phar';  include_once 'path/to/project/classes/helloWorld.php';  use mageekguy\atoum; use vendor\project;  class helloWorld extends atoum\test {     public function test__construct()     {         $helloWorld = new project\helloWorld();          $this             ->string($helloWorld->say())->isEqualTo('Hello!')             ->string($helloWorld->say($name = 'Frédéric Hardy'))->isEqualTo('Hello ' . $name . '!')         ;     } } To go further atoum's documentation is still being written. Any help to improve it will be appreciated. However, if you want to further explore immediately atoum's possibilities, we recommend: Running in your terminal, either the command php atoum.phar -h, or the command php scripts/runner.php -h ; Exploring the contents of the configurations directory in atoum's source, as it contains configuration file samples ; Exploring the contents of the tests/unit/classes directory in atoum's source, as it contains all of the unit tests ; Read the (french) conference slides about it, available online ; Read the (french) wiki ; Join the IRC channel ##atoum on the freenode network ; Ask questions by e-mail at the address support[AT]atoum(DOT)org ; Troubleshooting atoum's PHAR archive seems to not be working In this case, the first thing you will want to do is confirm whether you have the latest version of the archive. You just need to download it again. If it still doesn't work, run the following command in a terminal window: # php -n atoum.phar -v  If you get atoum's version number, then the problem is coming from your PHP configuration. In most cases, the cause would be within extensions, that might be incompatible with the PHAR format, or that would prevent executing PHAR archives as a security measure. The ioncube extension for instance seems incompatible with PHAR archives, and you must therefore deactivate it if you are using it, by commenting the following line out of your php.ini, by prefixing it with the ; character: zend_extension = /path/to/ioncube_loader*.*  The suhosin extension prevents executing PHAR archives, therefore its default configuration must be modified in order to be able to use atoum, by adding the following line in your php.ini file: suhosin.executor.include.whitelist=""phar""  Finally, if running atoum causes the screen to display characters looking like ???%, this would be because the detect_unicode directive inside your php.ini file is set to 1. To fix the problem, you just need to set it to 0 by editing your php.ini file or by running atoum with the following command: # php -d detect_unicode=0 atoum.phar [options]  If these three operations do not allow atoum to work, we suggest you send an e-mail to the address support[AT]atoum(DOT)org, describing in detail your configuration and your problem. You can also ask for help from the atoum development staff on the IRC channel ##atoum on the freenode network. Error: Constant COMPILER_HALT_OFFSET already defined /path/to/atoum.phar This error comes from the fact the atoum PHAR archive is included in more than one place within your code using include or require. To fix this problem, you just need to include the archive by using only include_once or require_once, in order to ensure it is not included several times. APC seems not work with atoum APC is a free, open, and robust framework for caching and optimizing PHP intermediate code distributed under the form of a PHP extension. When testing classes that use APC, you may get some failure message showing that apc_fetch function is unable to retrieve a value. As all PHP extension, APC has some configuration options to enable it: apc.enabled whether to enable or disable APC ; apc.enable_cli, whether to enable or disable APC for PHP CLI ; In order to use APC with atoum, you have to set apc.enabled and apc.enable_cli to 1, otherwise, it won't be enabled for the PHP CLI version, which is used by atoum. Getting segfault when mocking objects When using atoum and mocking objects, you will sometime get segfaults coming from PHP. These segfaults are caused by XDebug in version less than 2.1.0 which has problem handling reflection in some cases. To check the current version of XDebug, you can run php -v. To fix this issue, you have to update XDebug to the latest stable version. If you can't update XDebug on your system, you can still disable the extension to avoid getting segfaults. To be sure that XDebug has been succefully updated or disabled, you can run php -v. When you are done updating or disabling XDebug, run php atoum.phar --test-it to be sure that all the segfaults have gone and that atoum is working. Roadmap Looking for a roadmap? Here is the work in progress, And there what will come in next releases. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/atoum/atoum"	"A simple testing library."	"true"
"Testing"	"Behat"	"http://docs.behat.org/en/v2.5/"	"A behaviour driven development (BDD) testing framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1840"	"147"	"401"	"GitHub - Behat/Behat: BDD framework for PHP 5.3+ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 147 Star 1,840 Fork 401 Behat/Behat Code Issues 69 Pull requests 5 Pulse Graphs BDD framework for PHP 5.3+ http://behat.org 2,487 commits 3 branches 109 releases 101 contributors PHP 75.7% Cucumber 24.3% PHP Cucumber Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.5 feature/testers-refactoring master Nothing to show v3.1.0 v3.1.0rc2 v3.1.0rc1 v3.0.15 v3.0.14 v3.0.13 v3.0.12 v3.0.11 v3.0.10 v3.0.9 v3.0.8 v3.0.7 v3.0.6 v3.0.5 v3.0.4 v3.0.3 v3.0.2 v3.0.1 v3.0.0 v3.0.0rc3 v3.0.0rc2 v3.0.0rc1 v3.0.0beta8 v3.0.0beta7 v3.0.0beta6 v3.0.0beta5 v3.0.0beta4 v3.0.0beta3 v3.0.0beta2 v3.0.0beta1 v2.5.5 v2.5.4 v2.5.3 v2.5.2 v2.5.1 v2.5.0 v2.4.6 v2.4.5 v2.4.4 v2.4.3 v2.4.2 v2.4.1 v2.4.0 v2.4.0beta5 v2.4.0beta4 v2.4.0beta3 v2.4.0beta2 v2.4.0beta1 v2.3.5 v2.3.4 v2.3.3 v2.3.2 v2.3.1 v2.3.0 v2.2.8 v2.2.7 v2.2.6 v2.2.5 v2.2.4 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.1.3 v2.1.2 v2.1.1 v2.1.0 v2.0.5 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v1.1.9 v1.1.8 v1.1.7 v1.1.6 v1.1.5 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.0.0 v1.0.0RC6 v1.0.0RC5 v1.0.0RC4 v1.0.0RC3 v1.0.0RC2 v1.0.0RC1 v0.3.7 v0.3.6 v0.3.5 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.5 v0.2.4 Nothing to show New pull request Latest commit ebcc5b4 Jul 4, 2016 stof committed on GitHub Merge pull request #895 from ciaranmcnulty/refactor/no-xdebug-travis … Speed up travis Permalink Failed to load latest commit information. bin Use only one autoloader if possible Mar 30, 2016 features Added JUnitSetupPrinter Mar 7, 2016 src/Behat Merge pull request #823 from sherakama/symlink Mar 31, 2016 tests/Behat/Tests/Testwork/Subject Migrate from prophecy-phpunit package Dec 30, 2015 .gitattributes [git] Added /features and .scrutinizer.yml to .gitattributes Mar 31, 2016 .gitignore Ignore php_version_tags.php Feb 21, 2016 .scrutinizer.yml Change back php_sim to php_cpd Jul 17, 2014 .travis.yml Disable Xdebug to make composer and tests faster Jul 2, 2016 CHANGES.md Commit 3.1.0 in CHANGES Mar 28, 2016 CONTRIBUTING.md Updated the contribution guidelines for the branch renaming Apr 27, 2014 LICENSE Update LICENSE file Jan 1, 2014 README.md Changed urls to link to a tag Jun 21, 2016 box.json Exclude phpspec and phpunit dependencies from phar generation May 6, 2014 composer.json Switch to new composer `OR` syntax Mar 31, 2016 i18n.php added romanian translation Feb 26, 2016 phpunit.xml.dist Added tests for the GroupedSubjectIterator Jan 13, 2014 README.md Behat is a BDD framework for PHP to help you test business expectations. Installing Behat The easiest way to install Behat is by using Composer: $> curl -sS https://getcomposer.org/installer | php $> php composer.phar require behat/behat='~3.0.6' After that you'll be able to run Behat via: $> vendor/bin/behat Installing Development Version Clone the repository and install dependencies via Composer: $> curl -sS https://getcomposer.org/installer | php $> php composer.phar install After that you will be able to run development version of Behat via: $> bin/behat Contributing Before contributing to Behat, please take a look at the CONTRIBUTING.md document. Versioning Starting from v3.0.0, Behat is following Semantic Versioning v2.0.0. This basically means that if all you do is implement interfaces (like this one) and use service constants (like this one), you would not have any backwards compatibility issues with Behat up until v4.0.0 (or later major) is released. Exception could be an extremely rare case where BC break is introduced as a measure to fix a serious issue. You can read detailed guidance on what BC means in Symfony2 BC guide. Useful Links The main website is at http://behat.org The documentation is at http://docs.behat.org/en/latest/ Official Google Group is at http://groups.google.com/group/behat IRC channel on #freenode is #behat Note on Patches/Pull Requests Contributors Konstantin Kudryashov everzet [lead developer] Other awesome developers Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Behat/Behat"	"A behaviour driven development (BDD) testing framework."	"true"
"Testing"	"Codeception"	"https://github.com/Codeception/Codeception"	"A full stack testing framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2273"	"164"	"842"	"GitHub - Codeception/Codeception: Full-stack testing PHP framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 164 Star 2,273 Fork 842 Codeception/Codeception Code Issues 277 Pull requests 5 Wiki Pulse Graphs Full-stack testing PHP framework http://codeception.com 5,421 commits 13 branches 100 releases 367 contributors PHP 97.5% HTML 2.0% Other 0.5% PHP HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 2.2 Switch branches/tags Branches Tags 1.6 1.7 1.8 2.0 2.1 2.2 auto-rebuild-enh codefix fix-failed-chars fixlogger http-codes master module/db/doc Nothing to show v1.0.1 2.2.2 2.2.1 2.2.0 2.2.0-beta 2.2.0-RC2 2.2.0-RC 2.1.11 2.1.10 2.1.9 2.1.8 2.1.7 2.1.6 2.1.5 2.1.4 2.1.3 2.1.2 2.1.1 2.1.0 2.1.0-rc1 2.1.0-beta 2.0.16 2.0.15 2.0.14 2.0.13 2.0.12 2.0.11 2.0.10.1 2.0.10 2.0.9 2.0.8 2.0.7 2.0.6 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 2.0.0-beta 2.0.0-alpha 2.0.0-RC2 2.0.0-RC 1.8.7 1.8.6 1.8.5 1.8.4 1.8.3 1.8.2 1.8.1 1.8.0.1 1.8.0 1.7.4 1.7.3 1.7.2 1.7.1 1.7.0.2 1.7.0.1 1.7.0 1.6.12 1.6.11 1.6.8.1 1.6.8 1.6.7 1.6.6 1.6.5 1.6.4.2 1.6.4.1 1.6.4 1.6.3.1 1.6.3 1.6.2 1.6.1.1 1.6.1 1.6.0.4 1.6.0.3 1.6.0.1 1.6.0 1.5.7 1.5.6 1.5.5 1.5.4 1.5.3 1.5.2 1.5.1 1.5.0 1.1.5 1.1.4 1.1.3 1.1.2 1.1.0 1.01 1.01a 1.0.14 1.0.13 1.0.12 1.0.11 1.0.10 1.0.9 1.0.1 Nothing to show New pull request Latest commit dcb5ad8 Jul 11, 2016 jstewmc committed with Naktibalda Update ZF2 module (#3325) … [ZF2] Grab the application's response *after* the application has run. Permalink Failed to load latest commit information. docs PhpBrowser doesn't support session (#3321) Jul 7, 2016 ext Fixed Logger extension Jun 8, 2016 package fixed phar build Jun 6, 2016 src/Codeception Update ZF2 module (#3325) Jul 11, 2016 tests Moved FB tests to separate suite (#3283) Jun 28, 2016 .gitattributes added .gitattributes Jan 24, 2015 .gitignore merged with 2.1 Jun 8, 2016 .travis.yml Merge pull request #3304 from Naktibalda/2.2-zf2-addServiceToContainer Jul 4, 2016 CHANGELOG.md [REST] Display better diff output in seeResponseContainsJson (#3320) Jul 11, 2016 CONTRIBUTING.md PSR-2 compliance (#3105) May 16, 2016 Dockerfile Feature/docker support (#3067) May 25, 2016 LICENSE Fixes #2207: added license file Jul 23, 2015 RoboFile.php reverting composer.json after publish:base Jun 29, 2016 appveyor.yml merged with origin/2.1 May 11, 2016 autoload.php refactored to have multiple independent test formats Jan 25, 2016 codecept added dry-run command (#3023) Apr 25, 2016 codecept.bat fix to #8 Feb 28, 2012 codeception.yml Changed lint to true, because ParserTest::testCeptValidation fails if… Mar 22, 2016 composer.json fixed bad merge Jun 29, 2016 nitpick.json added nitpick ignores Mar 22, 2016 readme.md Moved FB tests to separate suite (#3283) Jun 28, 2016 ruleset.xml PSR-2 compliance (#3105) May 16, 2016 shim.php shim to be autoloaded only for PHPUnit 5.4+ Jun 3, 2016 readme.md Codeception Modern PHP Testing for everyone Codeception is a modern full-stack testing framework for PHP. Inspired by BDD, it provides you an absolutely new way of writing acceptance, functional and even unit tests. Powered by PHPUnit. General Windows Webdriver Facebook Contributions At Codeception we are glad to receive contributions from the community. If you want to send additions or fixes to the code or the documentation please check the Contributing guide. At a Glance Describe what you test and how you test it. Use PHP to write descriptions faster. Run tests and see what actions were taken and what results were seen. Sample acceptance test <?php  $I = new FunctionalTester($scenario); $I->wantTo('create wiki page'); $I->amOnPage('/'); $I->click('Pages'); $I->click('New'); $I->see('New Page'); $I->submitForm('form#new_page', array('title' => 'Tree of Life Movie Review','body' => ""Next time don't let Hollywood create art-house!"")); $I->see('page created'); // notice generated $I->see('Tree of Life Movie Review','h1'); // head of page of is our title $I->seeInCurrentUrl('pages/tree-of-life-movie-review'); // slug is generated $I->seeInDatabase('pages', array('title' => 'Tree of Life Movie Review')); // data is stored in database ?> For unit testing you can stay on classic PHPUnit tests, as Codeception can run them too. Documentation Documentation on Github Documentation is currently included within the project. Look for it in the 'docs' directory. Installation Phar Download codecept.phar Copy it into your project. You can also make Codeception an executable and it put it into your $PATH, for instance: wget http://codeception.com/codecept.phar  chmod +x codecept.phar  sudo mv codecept.phar /usr/local/bin/codecept   You can then run Codecept in the command line using: codecept bootstrap, codecept run, etc Run CLI utility: php codecept.phar  Composer php composer.phar require ""codeception/codeception""  Read Also Installation | QuickStart Getting Started If you successfully installed Codeception, run this command: codecept bootstrap  this will create a default directory structure and default test suites See Documentation for more information. License MIT (c) Michael Bodnarchuk ""Davert"" 2011-2016 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Codeception/Codeception"	"A full stack testing framework."	"true"
"Testing"	"DBUnit"	"https://github.com/sebastianbergmann/dbunit"	"A database testing library for PHPUnit."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"145"	"16"	"78"	"GitHub - sebastianbergmann/dbunit: DbUnit port for PHP/PHPUnit. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 145 Fork 78 sebastianbergmann/dbunit Code Issues 66 Pull requests 3 Pulse Graphs DbUnit port for PHP/PHPUnit. https://phpunit.de/ 447 commits 5 branches 25 releases 39 contributors PHP 99.3% Shell 0.7% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 1.1 1.2 1.4 master Nothing to show 2.0.2 2.0.1 2.0.0 1.4.1 1.4.0 1.3.2 1.3.1 1.3.0 1.2.3 1.2.2 1.2.1 1.2.0 1.2.0RC1 1.1.2 1.1.1 1.1.0 1.1.0RC2 1.1.0RC1 1.0.3 1.0.2 1.0.1 1.0.0 1.0.0beta1 1.0.0RC2 1.0.0RC1 Nothing to show New pull request Latest commit 1174eec Jun 9, 2016 JohnWE committed with sebastianbergmann SQLite Multiple Column Primary Key (#176) … When you have a primary key with multiple columns, getTablePrimaryKeys() only returns the first column, not all of them.    This is due to line 99 which only checks for the value 1.  It's ""0"" when the column is not a part of the primary key, and the index inside the key otherwise.  So only the first column shows up because it's the only one with the value ""1"".  See: http://sqlite.org/pragma.html#pragma_table_info Permalink Failed to load latest commit information. build Leftover from 3ccd225 Nov 3, 2015 samples/BankAccountDB Cleanup Aug 8, 2015 src/Extensions/Database SQLite Multiple Column Primary Key (#176) Jun 9, 2016 tests Cleanup Aug 8, 2015 .gitattributes Make the output of git-diff and git-grep more useful for PHP sourcefi… Jan 24, 2012 .gitignore Cleanup Aug 8, 2015 .travis.yml Cleanup Aug 8, 2015 ChangeLog.md Cleanup Aug 8, 2015 LICENSE Update license and copyright in all files Jan 2, 2015 Vagrantfile Added a Vagrantfile Jul 11, 2014 build.xml Cleanup Aug 8, 2015 composer.json Allow usage with PHP >= 5.4 and PHPUnit 4.x Nov 3, 2015 dbunit Cleanup Aug 8, 2015 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sebastianbergmann/dbunit"	"A database testing library for PHPUnit."	"true"
"Testing"	"Faker"	"https://github.com/fzaninotto/Faker"	"A fake data generator library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8891"	"445"	"1352"	"GitHub - fzaninotto/Faker: Faker is a PHP library that generates fake data for you Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 445 Star 8,891 Fork 1,352 fzaninotto/Faker Code Issues 14 Pull requests 32 Pulse Graphs Faker is a PHP library that generates fake data for you 1,750 commits 6 branches 7 releases 261 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags country_names faster_barcode master norwegian_locale picture_test prepare_1_5 Nothing to show v1.6.0 v1.5.0 v1.4.0 v1.3.0 v1.2.0 v1.1.0 v1.0.0 Nothing to show New pull request Latest commit 039eeba Jul 11, 2016 fzaninotto committed on GitHub Merge pull request #962 from fzaninotto/ro_cnp_fix … Remove cnp formatter from RO_ro locale (fails tests) Permalink Failed to load latest commit information. src Merge pull request #962 from fzaninotto/ro_cnp_fix Jul 11, 2016 test Remove cnp formatter from RO_ro locale (fails tests) Jul 11, 2016 .gitignore Corrected .gitignore Nov 10, 2014 .travis.yml Enhancement: Cache dependencies installed with Composer between builds Jul 20, 2015 CHANGELOG.md Update changelog for 1.6 Apr 29, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Jul 21, 2015 LICENSE Ensured files end in a single new line Jul 28, 2014 Makefile Fix: Prefer dependencies installed from dist May 8, 2016 composer.json composer: allow PHP 7 in safer way Apr 6, 2016 phpunit.xml.dist Enhancement: Use colors option when running phpunit Jul 16, 2015 readme.md Remove cnp formatter from RO_ro locale (fails tests) Jul 11, 2016 readme.md Faker Faker is a PHP library that generates fake data for you. Whether you need to bootstrap your database, create good-looking XML documents, fill-in your persistence to stress test it, or anonymize data taken from a production service, Faker is for you. Faker is heavily inspired by Perl's Data::Faker, and by ruby's Faker. Faker requires PHP >= 5.3.3. Table of Contents Installation Basic Usage Formatters Base Lorem Ipsum Text Person Address Phone Number Company Real Text Date and Time Internet User Agent Payment Color File Image Uuid Barcode Miscellaneous Biased Modifiers Localization Populating Entities Using an ORM or an ODM Seeding the Generator Faker Internals: Understanding Providers Real Life Usage Language specific formatters Third-Party Libraries Extending/Based On Faker License Installation composer require fzaninotto/faker Basic Usage Use Faker\Factory::create() to create and initialize a faker generator, which can generate data by accessing properties named after the type of data you want. <?php // require the Faker autoloader require_once '/path/to/Faker/src/autoload.php'; // alternatively, use another PSR-0 compliant autoloader (like the Symfony2 ClassLoader for instance)  // use the factory to create a Faker\Generator instance $faker = Faker\Factory::create();  // generate data by accessing properties echo $faker->name;   // 'Lucy Cechtelar'; echo $faker->address;   // ""426 Jordy Lodge   // Cartwrightshire, SC 88120-6700"" echo $faker->text;   // Dolores sit sint laboriosam dolorem culpa et autem. Beatae nam sunt fugit   // et sit et mollitia sed.   // Fuga deserunt tempora facere magni omnis. Omnis quia temporibus laudantium   // sit minima sint. Even if this example shows a property access, each call to $faker->name yields a different (random) result. This is because Faker uses __get() magic, and forwards Faker\Generator->$property calls to Faker\Generator->format($property). <?php for ($i=0; $i < 10; $i++) {   echo $faker->name, ""\n""; }   // Adaline Reichel   // Dr. Santa Prosacco DVM   // Noemy Vandervort V   // Lexi O'Conner   // Gracie Weber   // Roscoe Johns   // Emmett Lebsack   // Keegan Thiel   // Wellington Koelpin II   // Ms. Karley Kiehn V Tip: For a quick generation of fake data, you can also use Faker as a command line tool thanks to faker-cli. Formatters Each of the generator properties (like name, address, and lorem) are called ""formatters"". A faker generator has many of them, packaged in ""providers"". Here is a list of the bundled formatters in the default locale. Faker\Provider\Base randomDigit             // 7 randomDigitNotNull      // 5 randomNumber($nbDigits = NULL) // 79907610 randomFloat($nbMaxDecimals = NULL, $min = 0, $max = NULL) // 48.8932 numberBetween($min = 1000, $max = 9000) // 8567 randomLetter            // 'b' // returns randomly ordered subsequence of a provided array randomElements($array = array ('a','b','c'), $count = 1) // array('c') randomElement($array = array ('a','b','c')) // 'b' shuffle('hello, world') // 'rlo,h eoldlw' shuffle(array(1, 2, 3)) // array(2, 1, 3) numerify('Hello ###') // 'Hello 609' lexify('Hello ???') // 'Hello wgt' bothify('Hello ##??') // 'Hello 42jz' asciify('Hello ***') // 'Hello R6+' regexify('[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}'); // sm0@y8k96a.ej  Faker\Provider\Lorem word                                             // 'aut' words($nb = 3, $asText = false)                  // array('porro', 'sed', 'magni') sentence($nbWords = 6, $variableNbWords = true)  // 'Sit vitae voluptas sint non voluptates.' sentences($nb = 3, $asText = false)              // array('Optio quos qui illo error.', 'Laborum vero a officia id corporis.', 'Saepe provident esse hic eligendi.') paragraph($nbSentences = 3, $variableNbSentences = true) // 'Ut ab voluptas sed a nam. Sint autem inventore aut officia aut aut blanditiis. Ducimus eos odit amet et est ut eum.' paragraphs($nb = 3, $asText = false)             // array('Quidem ut sunt et quidem est accusamus aut. Fuga est placeat rerum ut. Enim ex eveniet facere sunt.', 'Aut nam et eum architecto fugit repellendus illo. Qui ex esse veritatis.', 'Possimus omnis aut incidunt sunt. Asperiores incidunt iure sequi cum culpa rem. Rerum exercitationem est rem.') text($maxNbChars = 200)                          // 'Fuga totam reiciendis qui architecto fugiat nemo. Consequatur recusandae qui cupiditate eos quod.'  Faker\Provider\en_US\Person title($gender = null|'male'|'female')     // 'Ms.' titleMale                                 // 'Mr.' titleFemale                               // 'Ms.' suffix                                    // 'Jr.' name($gender = null|'male'|'female')      // 'Dr. Zane Stroman' firstName($gender = null|'male'|'female') // 'Maynard' firstNameMale                             // 'Maynard' firstNameFemale                           // 'Rachel' lastName                                  // 'Zulauf'  Faker\Provider\en_US\Address cityPrefix                          // 'Lake' secondaryAddress                    // 'Suite 961' state                               // 'NewMexico' stateAbbr                           // 'OH' citySuffix                          // 'borough' streetSuffix                        // 'Keys' buildingNumber                      // '484' city                                // 'West Judge' streetName                          // 'Keegan Trail' streetAddress                       // '439 Karley Loaf Suite 897' postcode                            // '17916' address                             // '8888 Cummings Vista Apt. 101, Susanbury, NY 95473' country                             // 'Falkland Islands (Malvinas)' latitude($min = -90, $max = 90)     // 77.147489 longitude($min = -180, $max = 180)  // 86.211205  Faker\Provider\en_US\PhoneNumber phoneNumber             // '201-886-0269 x3767' tollFreePhoneNumber     // '(888) 937-7238' e164PhoneNumber     // '+27113456789'  Faker\Provider\en_US\Company catchPhrase             // 'Monitored regional contingency' bs                      // 'e-enable robust architectures' company                 // 'Bogan-Treutel' companySuffix           // 'and Sons' jobTitle                // 'Cashier'  Faker\Provider\en_US\Text realText($maxNbChars = 200, $indexSize = 2) // ""And yet I wish you could manage it?) 'And what are they made of?' Alice asked in a shrill, passionate voice. 'Would YOU like cats if you were never even spoke to Time!' 'Perhaps not,' Alice replied.""  Faker\Provider\DateTime unixTime($max = 'now')                // 58781813 dateTime($max = 'now', $timezone = date_default_timezone_get()) // DateTime('2008-04-25 08:37:17', 'UTC') dateTimeAD($max = 'now', $timezone = date_default_timezone_get()) // DateTime('1800-04-29 20:38:49', 'Europe/Paris') iso8601($max = 'now')                 // '1978-12-09T10:10:29+0000' date($format = 'Y-m-d', $max = 'now') // '1979-06-09' time($format = 'H:i:s', $max = 'now') // '20:49:42' dateTimeBetween($startDate = '-30 years', $endDate = 'now', $timezone = date_default_timezone_get()) // DateTime('2003-03-15 02:00:49', 'Africa/Lagos') dateTimeInInterval($startDate = '-30 years', $interval = '+ 5 days', $timezone = date_default_timezone_get()) // DateTime('2003-03-15 02:00:49', 'Antartica/Vostok') dateTimeThisCentury($max = 'now')     // DateTime('1915-05-30 19:28:21') dateTimeThisDecade($max = 'now')      // DateTime('2007-05-29 22:30:48') dateTimeThisYear($max = 'now')        // DateTime('2011-02-27 20:52:14') dateTimeThisMonth($max = 'now')       // DateTime('2011-10-23 13:46:23') amPm($max = 'now')                    // 'pm' dayOfMonth($max = 'now')              // '04' dayOfWeek($max = 'now')               // 'Friday' month($max = 'now')                   // '06' monthName($max = 'now')               // 'January' year($max = 'now')                    // '1993' century                               // 'VI' timezone                              // 'Europe/Paris'  Faker\Provider\Internet email                   // 'tkshlerin@collins.com' safeEmail               // 'king.alford@example.org' freeEmail               // 'bradley72@gmail.com' companyEmail            // 'russel.durward@mcdermott.org' freeEmailDomain         // 'yahoo.com' safeEmailDomain         // 'example.org' userName                // 'wade55' password                // 'k&|X+a45*2[' domainName              // 'wolffdeckow.net' domainWord              // 'feeney' tld                     // 'biz' url                     // 'http://www.skilesdonnelly.biz/aut-accusantium-ut-architecto-sit-et.html' slug                    // 'aut-repellat-commodi-vel-itaque-nihil-id-saepe-nostrum' ipv4                    // '109.133.32.252' localIpv4               // '10.242.58.8' ipv6                    // '8e65:933d:22ee:a232:f1c1:2741:1f10:117c' macAddress              // '43:85:B7:08:10:CA'  Faker\Provider\UserAgent userAgent              // 'Mozilla/5.0 (Windows CE) AppleWebKit/5350 (KHTML, like Gecko) Chrome/13.0.888.0 Safari/5350' chrome                 // 'Mozilla/5.0 (Macintosh; PPC Mac OS X 10_6_5) AppleWebKit/5312 (KHTML, like Gecko) Chrome/14.0.894.0 Safari/5312' firefox                // 'Mozilla/5.0 (X11; Linuxi686; rv:7.0) Gecko/20101231 Firefox/3.6' safari                 // 'Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_7_1 rv:3.0; en-US) AppleWebKit/534.11.3 (KHTML, like Gecko) Version/4.0 Safari/534.11.3' opera                  // 'Opera/8.25 (Windows NT 5.1; en-US) Presto/2.9.188 Version/10.00' internetExplorer       // 'Mozilla/5.0 (compatible; MSIE 7.0; Windows 98; Win 9x 4.90; Trident/3.0)'  Faker\Provider\Payment creditCardType          // 'MasterCard' creditCardNumber        // '4485480221084675' creditCardExpirationDate // 04/13 creditCardExpirationDateString // '04/13' creditCardDetails       // array('MasterCard', '4485480221084675', 'Aleksander Nowak', '04/13') // Generates a random IBAN. Set $countryCode to null for a random country iban($countryCode)      // 'IT31A8497112740YZ575DJ28BP4' swiftBicNumber          // 'RZTIAT22263'  Faker\Provider\Color hexcolor               // '#fa3cc2' rgbcolor               // '0,255,122' rgbColorAsArray        // array(0,255,122) rgbCssColor            // 'rgb(0,255,122)' safeColorName          // 'fuchsia' colorName              // 'Gainsbor'  Faker\Provider\File fileExtension          // 'avi' mimeType               // 'video/x-msvideo' // Copy a random file from the source to the target directory and returns the fullpath or filename file($sourceDir = '/tmp', $targetDir = '/tmp') // '/path/to/targetDir/13b73edae8443990be1aa8f1a483bc27.jpg' file($sourceDir, $targetDir, false) // '13b73edae8443990be1aa8f1a483bc27.jpg'  Faker\Provider\Image // Image generation provided by LoremPixel (http://lorempixel.com/) imageUrl($width = 640, $height = 480) // 'http://lorempixel.com/640/480/' imageUrl($width, $height, 'cats')     // 'http://lorempixel.com/800/600/cats/' imageUrl($width, $height, 'cats', true, 'Faker') // 'http://lorempixel.com/800/400/cats/Faker' imageUrl($width, $height, 'cats', true, 'Faker', true) // 'http://lorempixel.com/grey/800/400/cats/Faker/' Monochrome image image($dir = '/tmp', $width = 640, $height = 480) // '/tmp/13b73edae8443990be1aa8f1a483bc27.jpg' image($dir, $width, $height, 'cats')  // 'tmp/13b73edae8443990be1aa8f1a483bc27.jpg' it's a cat! image($dir, $width, $height, 'cats', false) // '13b73edae8443990be1aa8f1a483bc27.jpg' it's a filename without path image($dir, $width, $height, 'cats', true, false) // it's a no randomize images (default: `true`) image($dir, $width, $height, 'cats', true, true, 'Faker') // 'tmp/13b73edae8443990be1aa8f1a483bc27.jpg' it's a cat with 'Faker' text. Default, `null`.  Faker\Provider\Uuid uuid                   // '7e57d004-2b97-0e7a-b45f-5387367791cd'  Faker\Provider\Barcode ean13          // '4006381333931' ean8           // '73513537' isbn13         // '9790404436093' isbn10         // '4881416324'  Faker\Provider\Miscellaneous boolean // false boolean($chanceOfGettingTrue = 50) // true md5           // 'de99a620c50f2990e87144735cd357e7' sha1          // 'f08e7f04ca1a413807ebc47551a40a20a0b4de5c' sha256        // '0061e4c60dac5c1d82db0135a42e00c89ae3a333e7c26485321f24348c7e98a5' locale        // en_UK countryCode   // UK languageCode  // en currencyCode  // EUR  Faker\Provider\Biased // get a random number between 10 and 20, // with more chances to be close to 20 biasedNumberBetween($min = 10, $max = 20, $function = 'sqrt')  Modifiers Faker provides three special providers, unique(), optional(), and valid(), to be called before any provider. // unique() forces providers to return unique values $values = array(); for ($i=0; $i < 10; $i++) {   // get a random digit, but always a new one, to avoid duplicates   $values []= $faker->unique()->randomDigit; } print_r($values); // [4, 1, 8, 5, 0, 2, 6, 9, 7, 3]  // providers with a limited range will throw an exception when no new unique value can be generated $values = array(); try {   for ($i=0; $i < 10; $i++) {     $values []= $faker->unique()->randomDigitNotNull;   } } catch (\OverflowException $e) {   echo ""There are only 9 unique digits not null, Faker can't generate 10 of them!""; }  // you can reset the unique modifier for all providers by passing true as first argument $faker->unique($reset = true)->randomDigitNotNull; // will not throw OverflowException since unique() was reset // tip: unique() keeps one array of values per provider  // optional() sometimes bypasses the provider to return a default value instead (which defaults to NULL) $values = array(); for ($i=0; $i < 10; $i++) {   // get a random digit, but also null sometimes   $values []= $faker->optional()->randomDigit; } print_r($values); // [1, 4, null, 9, 5, null, null, 4, 6, null]  // optional() accepts a weight argument to specify the probability of receiving the default value. // 0 will always return the default value; 1 will always return the provider. Default weight is 0.5 (50% chance). $faker->optional($weight = 0.1)->randomDigit; // 90% chance of NULL $faker->optional($weight = 0.9)->randomDigit; // 10% chance of NULL  // optional() accepts a default argument to specify the default value to return. // Defaults to NULL. $faker->optional($weight = 0.5, $default = false)->randomDigit; // 50% chance of FALSE $faker->optional($weight = 0.9, $default = 'abc')->word; // 10% chance of 'abc'  // valid() only accepts valid values according to the passed validator functions $values = array(); $evenValidator = function($digit) {     return $digit % 2 === 0; }; for ($i=0; $i < 10; $i++) {     $values []= $faker->valid($evenValidator)->randomDigit; } print_r($values); // [0, 4, 8, 4, 2, 6, 0, 8, 8, 6]  // just like unique(), valid() throws an overflow exception when it can't generate a valid value $values = array(); try {   $faker->valid($evenValidator)->randomElement(1, 3, 5, 7, 9); } catch (\OverflowException $e) {   echo ""Can't pick an even number in that set!""; } Localization Faker\Factory can take a locale as an argument, to return localized data. If no localized provider is found, the factory fallbacks to the default locale (en_EN). <?php $faker = Faker\Factory::create('fr_FR'); // create a French faker for ($i=0; $i < 10; $i++) {   echo $faker->name, ""\n""; }   // Luce du Coulon   // Auguste Dupont   // Roger Le Voisin   // Alexandre Lacroix   // Jacques Humbert-Roy   // Thérèse Guillet-Andre   // Gilles Gros-Bodin   // Amélie Pires   // Marcel Laporte   // Geneviève Marchal You can check available Faker locales in the source code, under the Provider directory. The localization of Faker is an ongoing process, for which we need your help. Don't hesitate to create localized providers to your own locale and submit a PR! Populating Entities Using an ORM or an ODM Faker provides adapters for Object-Relational and Object-Document Mappers (currently, Propel, Doctrine2, CakePHP, Spot2 and Mandango are supported). These adapters ease the population of databases through the Entity classes provided by an ORM library (or the population of document stores using Document classes provided by an ODM library). To populate entities, create a new populator class (using a generator instance as parameter), then list the class and number of all the entities that must be generated. To launch the actual data population, call the execute() method. Here is an example showing how to populate 5 Author and 10 Book objects: <?php $generator = \Faker\Factory::create(); $populator = new Faker\ORM\Propel\Populator($generator); $populator->addEntity('Author', 5); $populator->addEntity('Book', 10); $insertedPKs = $populator->execute(); The populator uses name and column type guessers to populate each column with relevant data. For instance, Faker populates a column named first_name using the firstName formatter, and a column with a TIMESTAMP type using the dateTime formatter. The resulting entities are therefore coherent. If Faker misinterprets a column name, you can still specify a custom closure to be used for populating a particular column, using the third argument to addEntity(): <?php $populator->addEntity('Book', 5, array(   'ISBN' => function() use ($generator) { return $generator->ean13(); } )); In this example, Faker will guess a formatter for all columns except ISBN, for which the given anonymous function will be used. Tip: To ignore some columns, specify null for the column names in the third argument of addEntity(). This is usually necessary for columns added by a behavior: <?php $populator->addEntity('Book', 5, array(   'CreatedAt' => null,   'UpdatedAt' => null, )); Of course, Faker does not populate autoincremented primary keys. In addition, Faker\ORM\Propel\Populator::execute() returns the list of inserted PKs, indexed by class: <?php print_r($insertedPKs); // array( // 'Author' => (34, 35, 36, 37, 38), // 'Book' => (456, 457, 458, 459, 470, 471, 472, 473, 474, 475) // ) In the previous example, the Book and Author models share a relationship. Since Author entities are populated first, Faker is smart enough to relate the populated Book entities to one of the populated Author entities. Lastly, if you want to execute an arbitrary function on an entity before insertion, use the fourth argument of the addEntity() method: <?php $populator->addEntity('Book', 5, array(), array(   function($book) { $book->publish(); }, )); Seeding the Generator You may want to get always the same generated data - for instance when using Faker for unit testing purposes. The generator offers a seed() method, which seeds the random number generator. Calling the same script twice with the same seed produces the same results. <?php $faker = Faker\Factory::create(); $faker->seed(1234);  echo $faker->name; // 'Jess Mraz I'; Tip: DateTime formatters won't reproduce the same fake data if you don't fix the $max value: <?php // even when seeded, this line will return different results because $max varies $faker->dateTime(); // equivalent to $faker->dateTime($max = 'now') // make sure you fix the $max parameter $faker->dateTime('2014-02-25 08:37:17'); // will return always the same date when seeded Tip: Formatters won't reproduce the same fake data if you use the rand() php function. Use $faker or mt_rand() instead: <?php // bad $faker->realText(rand(10,20)); // good $faker->realText($faker->numberBetween(10,20)); Faker Internals: Understanding Providers A Faker\Generator alone can't do much generation. It needs Faker\Provider objects to delegate the data generation to them. Faker\Factory::create() actually creates a Faker\Generator bundled with the default providers. Here is what happens under the hood: <?php $faker = new Faker\Generator(); $faker->addProvider(new Faker\Provider\en_US\Person($faker)); $faker->addProvider(new Faker\Provider\en_US\Address($faker)); $faker->addProvider(new Faker\Provider\en_US\PhoneNumber($faker)); $faker->addProvider(new Faker\Provider\en_US\Company($faker)); $faker->addProvider(new Faker\Provider\Lorem($faker)); $faker->addProvider(new Faker\Provider\Internet($faker)); Whenever you try to access a property on the $faker object, the generator looks for a method with the same name in all the providers attached to it. For instance, calling $faker->name triggers a call to Faker\Provider\Person::name(). And since Faker starts with the last provider, you can easily override existing formatters: just add a provider containing methods named after the formatters you want to override. That means that you can easily add your own providers to a Faker\Generator instance. A provider is usually a class extending \Faker\Provider\Base. This parent class allows you to use methods like lexify() or randomNumber(); it also gives you access to formatters of other providers, through the protected $generator property. The new formatters are the public methods of the provider class. Here is an example provider for populating Book data: <?php  namespace Faker\Provider;  class Book extends \Faker\Provider\Base {   public function title($nbWords = 5)   {     $sentence = $this->generator->sentence($nbWords);     return substr($sentence, 0, strlen($sentence) - 1);   }    public function ISBN()   {     return $this->generator->ean13();   } } To register this provider, just add a new instance of \Faker\Provider\Book to an existing generator: <?php $faker->addProvider(new \Faker\Provider\Book($faker)); Now you can use the two new formatters like any other Faker formatter: <?php $book = new Book(); $book->setTitle($faker->title); $book->setISBN($faker->ISBN); $book->setSummary($faker->text); $book->setPrice($faker->randomNumber(2)); Tip: A provider can also be a Plain Old PHP Object. In that case, all the public methods of the provider become available to the generator. Real Life Usage The following script generates a valid XML document: <?php require_once '/path/to/Faker/src/autoload.php'; $faker = Faker\Factory::create(); ?> <?xml version=""1.0"" encoding=""UTF-8""?> <contacts> <?php for ($i=0; $i < 10; $i++): ?>   <contact firstName=""<?php echo $faker->firstName ?>"" lastName=""<?php echo $faker->lastName ?>"" email=""<?php echo $faker->email ?>""/>     <phone number=""<?php echo $faker->phoneNumber ?>""/> <?php if ($faker->boolean(25)): ?>     <birth date=""<?php echo $faker->dateTimeThisCentury->format('Y-m-d') ?>"" place=""<?php echo $faker->city ?>""/> <?php endif; ?>     <address>       <street><?php echo $faker->streetAddress ?></street>       <city><?php echo $faker->city ?></city>       <postcode><?php echo $faker->postcode ?></postcode>       <state><?php echo $faker->state ?></state>     </address>     <company name=""<?php echo $faker->company ?>"" catchPhrase=""<?php echo $faker->catchPhrase ?>""> <?php if ($faker->boolean(33)): ?>       <offer><?php echo $faker->bs ?></offer> <?php endif; ?> <?php if ($faker->boolean(33)): ?>       <director name=""<?php echo $faker->name ?>"" /> <?php endif; ?>     </company> <?php if ($faker->boolean(15)): ?>     <details> <![CDATA[ <?php echo $faker->text(400) ?> ]]>     </details> <?php endif; ?>   </contact> <?php endfor; ?> </contacts> Running this script produces a document looking like: <?xml version=""1.0"" encoding=""UTF-8""?> <contacts>   <contact firstName=""Ona"" lastName=""Bednar"" email=""schamberger.frank@wuckert.com""/>     <phone number=""1-265-479-1196x714""/>     <address>       <street>182 Harrison Cove</street>       <city>North Lloyd</city>       <postcode>45577</postcode>       <state>Alabama</state>     </address>     <company name=""Veum, Funk and Shanahan"" catchPhrase=""Function-based stable solution"">       <offer>orchestrate compelling web-readiness</offer>     </company>     <details> <![CDATA[ Alias accusantium voluptatum autem nobis cumque neque modi. Voluptatem error molestiae consequatur alias. Illum commodi molestiae aut repellat id. Et sit consequuntur aut et ullam asperiores. Cupiditate culpa voluptatem et mollitia dolor. Nisi praesentium qui ut. ]]>     </details>   </contact>   <contact firstName=""Aurelie"" lastName=""Paucek"" email=""alfonzo55@durgan.com""/>     <phone number=""863.712.1363x9425""/>     <address>       <street>90111 Hegmann Inlet</street>       <city>South Geovanymouth</city>       <postcode>69961-9311</postcode>       <state>Colorado</state>     </address>     <company name=""Krajcik-Grimes"" catchPhrase=""Switchable cohesive instructionset"">     </company>   </contact>   <contact firstName=""Clifton"" lastName=""Kshlerin"" email=""kianna.wiegand@framiwyman.info""/>     <phone number=""692-194-4746""/>     <address>       <street>9791 Nona Corner</street>       <city>Harberhaven</city>       <postcode>74062-8191</postcode>       <state>RhodeIsland</state>     </address>     <company name=""Rosenbaum-Aufderhar"" catchPhrase=""Realigned asynchronous encryption"">     </company>   </contact>   <contact firstName=""Alexandre"" lastName=""Orn"" email=""thelma37@erdmancorwin.biz""/>     <phone number=""189.655.8677x027""/>     <address>       <street>11161 Schultz Via</street>       <city>Feilstad</city>       <postcode>98019</postcode>       <state>NewJersey</state>     </address>     <company name=""O'Hara-Prosacco"" catchPhrase=""Re-engineered solution-oriented algorithm"">       <director name=""Dr. Berenice Auer V"" />     </company>     <details> <![CDATA[ Ut itaque et quaerat doloremque eum praesentium. Rerum in saepe dolorem. Explicabo qui consequuntur commodi minima rem. Harum temporibus rerum dolores. Non molestiae id dolorem placeat. Aut asperiores nihil eius repellendus. Vero nihil corporis voluptatem explicabo commodi. Occaecati omnis blanditiis beatae quod aspernatur eos. ]]>     </details>   </contact>   <contact firstName=""Katelynn"" lastName=""Kohler"" email=""reinger.trudie@stiedemannjakubowski.com""/>     <phone number=""(665)713-1657""/>     <address>       <street>6106 Nader Village Suite 753</street>       <city>McLaughlinstad</city>       <postcode>43189-8621</postcode>       <state>Missouri</state>     </address>     <company name=""Herman-Tremblay"" catchPhrase=""Object-based explicit service-desk"">       <offer>expedite viral synergies</offer>       <director name=""Arden Deckow"" />     </company>   </contact>   <contact firstName=""Blanca"" lastName=""Stark"" email=""tad27@feest.net""/>     <phone number=""168.719.4692x87177""/>     <address>       <street>7546 Kuvalis Plaza</street>       <city>South Wilfrid</city>       <postcode>77069</postcode>       <state>Georgia</state>     </address>     <company name=""Upton, Braun and Rowe"" catchPhrase=""Visionary leadingedge pricingstructure"">     </company>   </contact>   <contact firstName=""Rene"" lastName=""Spencer"" email=""anibal28@armstrong.info""/>     <phone number=""715.222.0095x175""/>     <birth date=""2008-08-07"" place=""Zulaufborough""/>     <address>       <street>478 Daisha Landing Apt. 510</street>       <city>West Lizethhaven</city>       <postcode>30566-5362</postcode>       <state>WestVirginia</state>     </address>     <company name=""Wiza Inc"" catchPhrase=""Persevering reciprocal approach"">       <offer>orchestrate dynamic networks</offer>       <director name=""Erwin Nienow"" />     </company>     <details> <![CDATA[ Dolorem consequatur voluptates unde optio unde. Accusantium dolorem est est architecto impedit. Corrupti et provident quo. Reprehenderit dolores aut quidem suscipit repudiandae corporis error. Molestiae enim aperiam illo. Et similique qui non expedita quia dolorum. Ex rem incidunt ea accusantium temporibus minus non. ]]>     </details>   </contact>   <contact firstName=""Alessandro"" lastName=""Hagenes"" email=""tbreitenberg@oharagorczany.com""/>     <phone number=""1-284-958-6768""/>     <address>       <street>1251 Koelpin Mission</street>       <city>North Revastad</city>       <postcode>81620</postcode>       <state>Maryland</state>     </address>     <company name=""Stiedemann-Bruen"" catchPhrase=""Re-engineered 24/7 success"">     </company>   </contact>   <contact firstName=""Novella"" lastName=""Rutherford"" email=""claud65@bogisich.biz""/>     <phone number=""(091)825-7971""/>     <address>       <street>6396 Langworth Hills Apt. 446</street>       <city>New Carlos</city>       <postcode>89399-0268</postcode>       <state>Wyoming</state>     </address>     <company name=""Stroman-Legros"" catchPhrase=""Expanded 4thgeneration moratorium"">       <director name=""Earlene Bayer"" />     </company>   </contact>   <contact firstName=""Andreane"" lastName=""Mann"" email=""meggie17@ornbaumbach.com""/>     <phone number=""941-659-9982x5689""/>     <birth date=""1934-02-21"" place=""Stantonborough""/>     <address>       <street>2246 Kreiger Station Apt. 291</street>       <city>Kaydenmouth</city>       <postcode>11397-1072</postcode>       <state>Wyoming</state>     </address>     <company name=""Lebsack, Bernhard and Kiehn"" catchPhrase=""Persevering actuating framework"">       <offer>grow sticky portals</offer>     </company>     <details> <![CDATA[ Quia dolor ut quia error libero. Enim facilis iusto earum et minus rerum assumenda. Quia doloribus et reprehenderit ut. Occaecati voluptatum dolor voluptatem vitae qui velit quia. Fugiat non in itaque sunt nobis totam. Sed nesciunt est deleniti cumque alias. Repudiandae quo aut numquam modi dicta libero. ]]>     </details>   </contact> </contacts> Language specific formatters Faker\Provider\ar_SA\Person <?php  echo $faker->idNumber;      // ID number echo $faker->nationalIdNumber // Citizen ID number echo $faker->foreignerIdNumber // Foreigner ID number Faker\Provider\at_AT\Payment <?php  echo $faker->vat;           // ""AT U12345678"" - Austrian Value Added Tax number echo $faker->vat(false);    // ""ATU12345678"" - unspaced Austrian Value Added Tax number Faker\Provider\bg_BG\Payment <?php  echo $faker->vat;           // ""BG 0123456789"" - Bulgarian Value Added Tax number echo $faker->vat(false);    // ""BG0123456789"" - unspaced Bulgarian Value Added Tax number Faker\Provider\cs_CZ\Address <?php  echo $faker->region; // ""Liberecký kraj"" Faker\Provider\cs_CZ\Company <?php  // Generates a valid IČO echo $faker->ico; // ""69663963"" Faker\Provider\cs_CZ\DateTime <?php  echo $faker->monthNameGenitive; // ""prosince"" echo $faker->formattedDate; // ""12. listopadu 2015"" Faker\Provider\cs_CZ\Person <?php  echo $faker->birthNumber; // ""7304243452"" Faker\Provider\da_DK\Person <?php  // Generates a random CPR number echo $faker->cpr; // ""051280-2387"" Faker\Provider\da_DK\Address <?php  // Generates a random 'kommune' name echo $faker->kommune; // ""Frederiksberg""  // Generates a random region name echo $faker->region; // ""Region Sjælland"" Faker\Provider\da_DK\Company <?php  // Generates a random CVR number echo $faker->cvr; // ""32458723""  // Generates a random P number echo $faker->p; // ""5398237590"" Faker\Provider\en_NZ\Phone <?php  // Generates a cell (mobile) phone number echo $faker->cellNumber; // ""021 123 4567""  // Generates a toll free number echo $faker->tollFreeNumber; // ""0800 123 456""  // Area Code echo $faker->areaCode; // ""03"" Faker\Provider\en_US\Payment <?php  echo $faker->bankAccountNumber;  // '51915734310' echo $faker->bankRoutingNumber;  // '212240302' Faker\Provider\en_ZA\Company <?php  // Generates a random company registration number echo $faker->companyNumber; // 1999/789634/01 Faker\Provider\en_ZA\PhoneNumber <?php  // Generates a special rate toll free phone number echo $faker->tollFreeNumber; // 0800 555 5555  // Generates a mobile phone number echo $faker->mobileNumber; // 082 123 5555 Faker\Provider\es_ES\Person <?php  // Generates a Documento Nacional de Identidad (DNI) number echo $faker->dni; // '77446565E' Faker\Provider\fr_BE\Payment <?php  echo $faker->vat;           // ""BE 0123456789"" - Belgian Value Added Tax number echo $faker->vat(false);    // ""BE0123456789"" - unspaced Belgian Value Added Tax number Faker\Provider\fr_FR\Address <?php  // Generates a random department name echo $faker->departmentName; // ""Haut-Rhin""  // Generates a random department number echo $faker->departmentNumber; // ""2B""  // Generates a random department info (department number => department name) $faker->department; // array('18' => 'Cher');  // Generates a random region echo $faker->region; // ""Saint-Pierre-et-Miquelon"" Faker\Provider\fr_FR\Company <?php  // Generates a random SIREN number echo $faker->siren; // 082 250 104  // Generates a random SIRET number echo $faker->siret; // 347 355 708 00224 Faker\Provider\hu_HU\Payment <?php  // Generates a random bank account number echo $faker->bankAccountNumber; // ""HU09904437680048220079300783"" Faker\Provider\it_IT\Company <?php  // Generates a random Vat Id echo $faker->vatId(); // ""IT98746784967"" Faker\Provider\it_IT\Person <?php  // Generates a random Tax Id code (Codice fiscale) echo $faker->taxId(); // ""DIXDPZ44E08F367A"" Faker\Provider\ja_JP\Person <?php  // Generates a 'kana' name echo $faker->kanaName; // ""アオタ ミノル""  // Generates a 'kana' first name echo $faker->firstKanaName; // ""ハルカ""  // Generates a 'kana' last name echo $faker->lastKanaName; // ""ナカジマ"" Faker\Provider\ka_GE\Payment <?php  // Generates a random bank account number echo $faker->bankAccountNumber; // ""GE33ZV9773853617253389"" Faker\Provider\kk_KZ\Company <?php  // Generates an business identification number echo $faker->businessIdentificationNumber; // ""150140000019"" Faker\Provider\kk_KZ\Payment <?php  // Generates a random bank name echo $faker->bank; // ""Қазкоммерцбанк""  // Generates a random bank account number echo $faker->bankAccountNumber; // ""KZ1076321LO4H6X41I37"" Faker\Provider\kk_KZ\Person <?php  // Generates an individual identification number echo $faker->individualIdentificationNumber; // ""780322300455"" Faker\Provider\ko_KR\Address <?php  // Generates a metropolitan city echo $faker->metropolitanCity; // ""서울특별시""  // Generates a borough echo $faker->borough; // ""강남구"" Faker\Provider\lv_LV\Person <?php  // Generates a random personal identity card number echo $faker->personalIdentityNumber; // ""140190-12301"" Faker\Provider\ne_NP\Address <?php  //Generates a Nepali district name echo $faker->district;  //Generates a Nepali city name echo $faker->cityName; Faker\Provider\nl_BE\Payment <?php  echo $faker->vat;           // ""BE 0123456789"" - Belgian Value Added Tax number echo $faker->vat(false);    // ""BE0123456789"" - unspaced Belgian Value Added Tax number Faker\Provider\nl_NL\Company <?php  echo $faker->vat; // ""NL123456789B01"" - Dutch Value Added Tax number echo $faker->btw; // ""NL123456789B01"" - Dutch Value Added Tax number (alias) Faker\Provider\no_NO\Payment <?php  // Generates a random bank account number echo $faker->bankAccountNumber; // ""NO3246764709816"" Faker\Provider\pl_PL\Person <?php  // Generates a random PESEL number echo $faker->pesel; // ""40061451555"" // Generates a random personal identity card number echo $faker->personalIdentityNumber; // ""AKX383360"" // Generates a random taxpayer identification number (NIP) echo $faker->taxpayerIdentificationNumber; // '8211575109' Faker\Provider\pl_PL\Company <?php  // Generates a random REGON number echo $faker->regon; // ""714676680"" // Generates a random local REGON number echo $faker->regonLocal; // ""15346111382836"" Faker\Provider\pl_PL\Payment <?php  // Generates a random bank name echo $faker->bank; // ""Narodowy Bank Polski"" // Generates a random bank account number echo $faker->bankAccountNumber; // ""PL14968907563953822118075816"" Faker\Provider\pt_PT\Person <?php  // Generates a random taxpayer identification number (in portuguese - Número de Identificação Fiscal NIF) echo $faker->taxpayerIdentificationNumber; // '165249277' Faker\Provider\pt_BR\Address <?php  // Generates a random region name echo $faker->region; // 'Nordeste'  // Generates a random region abbreviation echo $faker->regionAbbr; // 'NE' Faker\Provider\pt_BR\PhoneNumber <?php  echo $faker->areaCode;  // 21 echo $faker->cellphone; // 9432-5656 echo $faker->landline;  // 2654-3445 echo $faker->phone;     // random landline, 8-digit or 9-digit cellphone number  // Using the phone functions with a false argument returns unformatted numbers echo $faker->cellphone(false); // 74336667  // cellphone() has a special second argument to add the 9th digit. Ignored if generated a Radio number echo $faker->cellphone(true, true); // 98983-3945 or 7343-1290  // Using the ""Number"" suffix adds area code to the phone echo $faker->cellphoneNumber;       // (11) 98309-2935 echo $faker->landlineNumber(false); // 3522835934 echo $faker->phoneNumber;           // formatted, random landline or cellphone (obbeying the 9th digit rule) echo $faker->phoneNumberCleared;    // not formatted, random landline or cellphone (obbeying the 9th digit rule) Faker\Provider\pt_BR\Person <?php  // The name generator may include double first or double last names, plus title and suffix echo $faker->name; // 'Sr. Luis Adriano Sepúlveda Filho'  // Valid document generators have a boolean argument to remove formatting echo $faker->cpf;        // '145.343.345-76' echo $faker->cpf(false); // '45623467866' echo $faker->rg;         // '84.405.736-3' Faker\Provider\pt_BR\Company <?php  // Generates a Brazilian formated and valid CNPJ echo $faker->cnpj;        // '23.663.478/0001-24' echo $faker->cnpj(false); // '23663478000124' Faker\Provider\ro_MD\Payment <?php  // Generates a random bank account number echo $faker->bankAccountNumber; // ""MD83BQW1CKMUW34HBESDP3A8"" Faker\Provider\ro_RO\Payment <?php  // Generates a random bank account number echo $faker->bankAccountNumber; // ""RO55WRJE3OE8X3YQI7J26U1E"" Faker\Provider\ro_RO\Person <?php  // Generates a random male name prefix/title echo $faker->prefixMale; // ""ing."" // Generates a random female name prefix/title echo $faker->prefixFemale; // ""d-na."" // Generates a random male fist name echo $faker->firstNameMale; // ""Adrian"" // Generates a random female fist name echo $faker->firstNameFemale; // ""Miruna"" Faker\Provider\ro_RO\PhoneNumber <?php  // Generates a random toll-free phone number echo $faker->tollFreePhoneNumber; // ""0800123456"" // Generates a random premium-rate phone number echo $faker->premiumRatePhoneNumber; // ""0900123456"" Faker\Provider\ru_RU\Payment <?php  // Generates a Russian bank name (based on list of real russian banks) echo $faker->bank; // ""ОТП Банк"" Faker\Provider\sv_SE\Payment <?php  // Generates a random bank account number echo $faker->bankAccountNumber; // ""SE5018548608468284909192"" Faker\Provider\sv_SE\Person <?php  //Generates a valid Swedish personal identity number (in Swedish - Personnummer) echo $faker->personalIdentityNumber() // '950910-0799'  //Since the numbers are different for male and female persons, optionally you can specify gender. echo $faker->personalIdentityNumber('female') // '950910-0781' Faker\Provider\zh_CN\Payment <?php  // Generates a random bank name (based on list of real chinese banks) echo $faker->bank; // '中国建设银行' Third-Party Libraries Extending/Based On Faker Symfony2 bundles: BazingaFakerBundle: Put the awesome Faker library into the Symfony2 DIC and populate your database with fake data. AliceBundle, AliceFixturesBundle: Bundles for using Alice and Faker with data fixtures. Able to use Doctrine ORM as well as Doctrine MongoDB ODM. FakerServiceProvider: Faker Service Provider for Silex faker-cli: Command Line Tool for the Faker PHP library Factory Muffin: enable the rapid creation of objects (PHP port of factory-girl) CompanyNameGenerator: Generate names for English tech companies with class PlaceholdItProvider: Generate images using placehold.it datalea A highly customizable random test data generator web app newage-ipsum: A new aged ipsum provider for the faker library inspired by http://sebpearce.com/bullshit/ xml-faker: Create fake XML with Faker faker-context: Behat context using Faker to generate testdata CronExpressionGenerator: Faker provider for generating random, valid cron expressions. pragmafabrik/Pomm2Faker: Faker client for Pomm database framework (PostgreSQL) nelmio/alice: Fixtures/object generator with a yaml DSL that can use Faker as data generator. CakePHP 2.x Fake Seeder Plugin A CakePHP 2.x shell to seed your database with fake and/or fixed data. images-generator: An image generator provider using GD for placeholder type pictures License Faker is released under the MIT Licence. See the bundled LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fzaninotto/Faker"	"A fake data generator library."	"true"
"Testing"	"HTTP Mock"	"https://github.com/InterNations/http-mock"	"A library for mocking HTTP requests in unit tests."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"241"	"23"	"23"	"GitHub - InterNations/http-mock: Mock HTTP requests on the server side in your PHP unit tests Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 241 Fork 23 InterNations/http-mock Code Issues 3 Pull requests 2 Pulse Graphs Mock HTTP requests on the server side in your PHP unit tests http://www.internations.org 147 commits 2 branches 7 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/seperate-mock-builder master Nothing to show 0.8.0 0.7.8 0.7.4 0.7.2 0.7.0 0.6.0 0.4.0 Nothing to show New pull request Latest commit 18a5ef8 May 20, 2016 lstrojny We can actually run that test with PHP 7 Permalink Failed to load latest commit information. build #21 small refactoring, better PHP compatibility Apr 21, 2016 doc Query param matcher API (#31) May 20, 2016 public PSR-0 to PSR-4 Apr 22, 2016 src Query param matcher API (#31) May 20, 2016 state Initial commit May 23, 2013 tests We can actually run that test with PHP 7 May 20, 2016 .gitignore #21 small refactoring, better PHP compatibility Apr 20, 2016 .travis.yml Reflect PHP version requirements May 19, 2016 README.md Move server docs Apr 27, 2016 build.xml Enable debugging for CI May 24, 2013 composer.json Update to PHP 5.6 minimum (fixes #29) Apr 22, 2016 phpunit.xml.dist Compatibility with Superclosure ~2 Feb 7, 2015 README.md HTTP Mock for PHP Mock HTTP requests on the server side in your PHP unit tests. HTTP Mock for PHP mocks the server side of an HTTP request to allow integration testing with the HTTP side. It uses PHP’s builtin web server to start a second process that handles the mocking. The server allows registering request matcher and responses from the client side. BIG FAT WARNING: software like this is inherently insecure. Only use in trusted, controlled environments. Usage Read the docs Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/InterNations/http-mock"	"A library for mocking HTTP requests in unit tests."	"true"
"Testing"	"Kahlan"	"https://github.com/crysalead/kahlan"	"Full stack Unit/BDD testing framework with built-in stub, mock and code-coverage support."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"382"	"32"	"30"	"GitHub - crysalead/kahlan: Unit/BDD PHP Test Framework for Freedom, Truth, and Justice Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 382 Fork 30 crysalead/kahlan Code Issues 0 Pull requests 0 Wiki Pulse Graphs Unit/BDD PHP Test Framework for Freedom, Truth, and Justice 574 commits 3 branches 46 releases 15 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.3 dev master Nothing to show 2.5.4 2.5.3 2.5.2 2.5.1 2.5.0 2.4.1 2.4.0 2.3.2 2.3.1 2.3.0 2.2.0 2.1.0 2.0.1 2.0.0 1.3.2 1.3.1 1.3.0 1.2.11 1.2.10 1.2.9 1.2.8 1.2.7 1.2.6 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.1.9 1.1.8 1.1.7 1.1.6 1.1.5 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit 0f5deb7 Jun 15, 2016 jails Creates the 2.5.4 release. Permalink Failed to load latest commit information. bin Loads composer its the relative path first. Jan 17, 2016 docs Updates the README. May 27, 2016 spec Fixes class extends normalization during JIT parsing. May 10, 2016 src Creates the 2.5.4 release. Jun 15, 2016 .gitignore Added .idea folder into .gitignore Feb 4, 2015 .scrutinizer.yml Update CI file. Dec 24, 2013 .travis.yml Updates the CI script. May 10, 2016 CHANGELOG.md Creates the 2.5.4 release. Jun 15, 2016 LICENSE.txt Add MIT license. Sep 29, 2014 README.md Updates the README. May 26, 2016 composer.json Changes namespaces naming convention to PascalCase since the evil won. Dec 6, 2015 kahlan-config.travis.php Added JSON reporter support Mar 16, 2016 mkdocs.yml Update README. Mar 17, 2015 README.md Kahlan is a full-featured Unit & BDD test framework a la RSpec/JSpec which uses a describe-it syntax and moves testing in PHP one step forward. Kahlan embraces the KISS principle and makes Unit & BDD testing fun again! Killer feature: Kahlan allows to stub or monkey patch your code directly like in Ruby or JavaScript without any required PECL-extentions. Video Warren Seymour presentation at Unified Diff (2015) IRC chat.freenode.net (server) #kahlan (channel) Documentation See the whole documentation here (documentation for Kahlan <= 1.3.0 can still be found here) Requirements PHP 5.5+ Composer Xdebug (if you want to perform code coverage analysis) Main Features Simple API Code Coverage metrics (xdebug or phpdbg required) Handy stubbing system (mockery or prophecy are no longer needed) Set stubs on your class methods directly (i.e allows dynamic mocking) Ability to Monkey Patch your code (i.e. allows replacement of core functions/classes on the fly) Check called methods on your class/instances Built-in Reporters (Terminal or HTML reporting through istanbul or lcov) Built-in Exporters (Coveralls, Code Climate, Scrutinizer, Clover) Extensible, customizable workflow Small code base (~10 times smaller than PHPUnit) Syntax  describe(""Example"", function() {      it(""passes if true === true"", function() {          expect(true)->toBe(true);      });      it(""passes if false !== true"", function() {          expect(false)->not->toBe(true);      });  });  Screenshots Example of default reporting: Example of verbose reporting: Example of code coverage on a specific scope: Installation via Composer $ composer require --dev crysalead/kahlan Note: Kahlan uses the ferver versioning so a ""~x.y"" version constraint shouldn't ever BC-break. via Git clone git clone git://github.com/crysalead/kahlan.git cd kahlan composer install bin/kahlan              # to run specs or, bin/kahlan --coverage=4 # to run specs with coverage info for namespaces, classes & methods (require xdebug)  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/crysalead/kahlan"	"Full stack Unit/BDD testing framework with built-in stub, mock and code-coverage support."	"true"
"Testing"	"Mink"	"http://mink.behat.org/en/latest/"	"Web acceptance testing."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"136"	"22"	"178"	"GitHub - Behat/MinkExtension: Mink extension (tight integration and configuration) for Behat Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 136 Fork 178 Behat/MinkExtension Code Issues 27 Pull requests 5 Pulse Graphs Mink extension (tight integration and configuration) for Behat 402 commits 3 branches 16 releases Fetching contributors PHP 99.4% Cucumber 0.6% PHP Cucumber Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.2 1.3 master Nothing to show v2.2 v2.1.0 v2.0.1 v2.0.0 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.0 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 694c9ee Jul 11, 2016 stof committed on GitHub Merge pull request #252 from bocharsky-bw/patch-1 … Bump number of supported drivers Permalink Failed to load latest commit information. doc Bump number of supported drivers Jul 10, 2016 features removed FeatureContext as we don't need it anymore May 11, 2012 i18n Merge pull request #218 from josgilmo/master Feb 15, 2016 spec/Behat/MinkExtension Create AppiumFactorySpec.php Feb 11, 2015 src/Behat/MinkExtension Merge pull request #244 from roukmoute/fix_checkbox Jun 27, 2016 .gitignore initial commit May 6, 2012 .travis.yml Improve the Travis setup Sep 29, 2015 LICENSE added license and phar builder May 6, 2012 README.md fix number of supported languages in readme Dec 8, 2015 behat.yml.dist Renamed the extension class to follow the Behat shortcut convention May 8, 2014 build.php updated build script to be sourcecode-agnostic May 7, 2012 composer.json Allow Symfony 3.0 Dec 1, 2015 init.php Renamed the extension class to follow the Behat shortcut convention May 8, 2014 README.md MinkExtension MinkExtension is an integration layer between Behat 3.0+ and Mink 1.5+ and it provides: Additional services for Behat (Mink, Sessions, Drivers). Behat\MinkExtension\Context\MinkAwareContext which provides Mink instance for your contexts. Base Behat\MinkExtension\Context\MinkContext context which provides base step definitions and hooks for your contexts or subcontexts. Or it could be even used as context on its own. Docs Official documentation. Translated languages For now exist 11 translated languages: cs,de,es,fr,ja,nl,pl,pt,ro,ru,sv. Note: The ja,nl and sv are outdated. How to add a new translated language? If you want to translate another language, you can use as reference the ru language file under translations folder. Important: The filename must match with the same translated language name in Behat and Gherkin in order to work correctly. If the language does not exist in Gherkin. You should consider contributing to Gherkin translations. Copyright Copyright (c) 2012 Konstantin Kudryashov (ever.zet). See LICENSE for details. Contributors Konstantin Kudryashov everzet [lead developer] Other awesome developers Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Behat/MinkExtension"	"Web acceptance testing."	"true"
"Testing"	"Mockery"	"https://github.com/padraic/mockery"	"A mock object library for testing."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1967"	"73"	"245"	"GitHub - padraic/mockery: Mockery is a simple yet flexible PHP mock object framework for use in unit testing with PHPUnit, PHPSpec or any other testing framework. Its core goal is to offer a test double framework with a succint API capable of clearly defining all possible object operations and interactions using a human readable Domain Specific Language (DSL). Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 73 Star 1,967 Fork 245 padraic/mockery Code Issues 85 Pull requests 13 Pulse Graphs Mockery is a simple yet flexible PHP mock object framework for use in unit testing with PHPUnit, PHPSpec or any other testing framework. Its core goal is to offer a test double framework with a succint API capable of clearly defining all possible object operations and interactions using a human readable Domain Specific Language (DSL). 1,093 commits 2 branches 13 releases 83 contributors PHP 99.8% Shell 0.2% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.9 master Nothing to show 0.9.5 0.9.4 0.9.3 0.9.2 0.9.1 0.9.0 0.8.0 0.7.2 0.7.0 0.6.3 0.6.2 0.6.1 0.6.0 Nothing to show New pull request Latest commit ee06e7b Jul 6, 2016 davedevelopment committed on GitHub Merge pull request #612 from lucasmichot/feature/master/composer.json … Use PRETTY_PRINT syntax and reorder keywords Permalink Failed to load latest commit information. docs Merge pull request #587 from davedevelopment/deprecate-listener Apr 28, 2016 examples/starship call mockery close Apr 12, 2016 library Updated the Magic Pass to use the proper standard for toString Jun 2, 2016 tests Updated the Magic Pass to use the proper standard for toString Jun 2, 2016 travis travis: use native PHP 7.0 Feb 26, 2015 .coveralls.yml Build fixes Jan 19, 2014 .gitignore Update php_cs and use cache Jul 6, 2016 .php_cs Update php_cs and use cache Jul 6, 2016 .scrutinizer.yml Removed ""--dev"" option from composer install command since this optio… Jan 28, 2016 .styleci.yml Exclude SemiReservedWordsAsMethods.php on StyleCI Jun 1, 2016 .travis.yml Drop 5.3 support Apr 2, 2015 CHANGELOG.md #459 - Added summary line to changelog file Feb 3, 2016 CONTRIBUTING.md Remove traces of PEAR Apr 26, 2016 LICENSE Massive documentation improvements Feb 24, 2014 README.md Fixed the current version in the readme Jun 1, 2016 composer.json Use PRETTY_PRINT syntax and reorder keywords Jul 6, 2016 phpunit.xml.dist Merge pull request #587 from davedevelopment/deprecate-listener Apr 28, 2016 README.md Mockery Mockery is a simple yet flexible PHP mock object framework for use in unit testing with PHPUnit, PHPSpec or any other testing framework. Its core goal is to offer a test double framework with a succinct API capable of clearly defining all possible object operations and interactions using a human readable Domain Specific Language (DSL). Designed as a drop in alternative to PHPUnit's phpunit-mock-objects library, Mockery is easy to integrate with PHPUnit and can operate alongside phpunit-mock-objects without the World ending. Mockery is released under a New BSD License. The current released version on Packagist is 0.9.5. Composer users may opt to use 0.9.* for the current stable package, or ~1.0@dev for the current master branch. Latest version released through PEAR was 0.9.0; channel is now closed. Installation To install Mockery, run the command below and you will get the latest version composer require --dev mockery/mockery If you want to run the tests: vendor/bin/phpunit Note The current Mockery 0.9.5 release is the final version to have PHP 5.3 as a minimum requirement. The minimum PHP requirement has been moved to PHP 5.4 for future releases. Also, the PEAR channel has gone offline permanently since 30 June 2015. Mock Objects In unit tests, mock objects simulate the behaviour of real objects. They are commonly utilised to offer test isolation, to stand in for objects which do not yet exist, or to allow for the exploratory design of class APIs without requiring actual implementation up front. The benefits of a mock object framework are to allow for the flexible generation of such mock objects (and stubs). They allow the setting of expected method calls and return values using a flexible API which is capable of capturing every possible real object behaviour in way that is stated as close as possible to a natural language description. Prerequisites Mockery requires PHP 5.3.2 or greater for versions 0.9.5 or lower. The current master and future versions are using PHP 5.4 at minimum. This is subject to change as PHP versions reach their published end of life dates. Documentation The current version can be seen at docs.mockery.io. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/padraic/mockery"	"A mock object library for testing."	"true"
"Testing"	"ParaTest"	"https://github.com/brianium/paratest"	"A parallel testing library for PHPUnit."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"369"	"26"	"91"	"GitHub - brianium/paratest: Parallel testing for PHPUnit Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 369 Fork 91 brianium/paratest Code Issues 26 Pull requests 4 Pulse Graphs Parallel testing for PHPUnit 591 commits 14 branches 41 releases 39 contributors PHP 99.9% Other 0.1% PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cleanup-phpunit-get-runner-options code-style-fixes configuration enhancement/scrutinizer giorgiosironi-reuse_bootstrap-merged_master giorgiosironi-reuse_bootstrap hhvm master merge-65 packagist-shield percentage-fix php7 pr-78 stability-fix Nothing to show v0.7.0 v0.6.1 v0.6.0 v0.5.0 v0.4.4 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.2 v0.3.1 v0.3.0 v0.2.0 v0.1.5 v0.1.4 v0.1.3 v0.1.0 0.13.3 0.13.2 0.13.1 0.13.0 0.12.5 0.12.4 0.12.3 0.12.1 0.12.0 0.11.0 0.10.0 0.9.7 0.9.6 0.9.5 0.9.4 0.9.3 0.9.2 0.9.1 0.9.0 0.8.1 0.8.0 0.7.3 0.7.2 0.7.1 Nothing to show New pull request Latest commit 54fb040 Jul 6, 2016 julianseeger committed on GitHub require php 5.5.11 because of SplFileObject::fread Permalink Failed to load latest commit information. bin removed temporary file Nov 4, 2014 src/ParaTest Merge pull request #215 from hboomsma/feature/concurrency Jul 6, 2016 test Merge pull request #215 from hboomsma/feature/concurrency Jul 6, 2016 .gitignore Remove overly fragile tests, name fixtures so their purpose is clearer. Oct 12, 2014 .scrutinizer.yml remove Feb 18, 2015 .travis.yml don't build phpunit5 with php5.5 Dec 5, 2015 Guardfile initial commit Oct 12, 2012 LICENSE include LICENSE file and update LICENSE to MIT Jun 15, 2013 README.md Correct README parameter name --max-batch-size Jan 18, 2016 TODO.txt The standard behavior in case of Fatal Error is to interrupt the whol… Mar 3, 2013 composer.json require php 5.5.11 because of SplFileObject::fread Jul 6, 2016 phpunit.xml.dist whitelist for paratest tests Dec 5, 2015 README.md ParaTest The objective of ParaTest is to support parallel testing in PHPUnit. Installation Composer To install with composer add the following to your composer.json file: ""require"": {     ""brianium/paratest"": ""dev-master"" } Then run php composer.phar install Usage After installation, the binary can be found at vendor/bin/paratest. Usage is as follows: Usage:  paratest [-p|--processes=""...""] [-f|--functional] [--no-test-tokens] [-h|--help] [--coverage-clover=""...""] [--coverage-html=""...""] [--coverage-php=""...""] [-m|--max-batch-size=""...""] [--filter=""...""] [--phpunit=""...""] [--runner=""...""] [--bootstrap=""...""] [-c|--configuration=""...""] [-g|--group=""...""] [--exclude-group=""...""] [--stop-on-failure] [--log-junit=""...""] [--colors] [--testsuite[=""...""]] [--path=""...""] [path]  Arguments:  path                  The path to a directory or file containing tests. (default: current directory)  Options:  --processes (-p)      The number of test processes to run. (default: 5)  --functional (-f)     Run methods instead of suites in separate processes.  --no-test-tokens      Disable TEST_TOKEN environment variables. (default: variable is set)  --help (-h)           Display this help message.  --coverage-clover     Generate code coverage report in Clover XML format.  --coverage-html       Generate code coverage report in HTML format.  --coverage-php        Serialize PHP_CodeCoverage object to file.  --max-batch-size (-m) Max batch size (only for functional mode). (default: 0)  --filter              Filter (only for functional mode).  --phpunit             The PHPUnit binary to execute. (default: vendor/bin/phpunit)  --runner              Runner or WrapperRunner. (default: Runner)  --bootstrap           The bootstrap file to be used by PHPUnit.  --configuration (-c)  The PHPUnit configuration file to use.  --group (-g)          Only runs tests from the specified group(s).  --exclude-group       Don't run tests from the specified group(s).  --stop-on-failure     Don't start any more processes after a failure.  --log-junit           Log test execution in JUnit XML format to file.  --colors              Displays a colored bar as a test result.  --testsuite           Filter which testsuite to run  --path                An alias for the path argument.   Optimizing Speed To get the most out of paratest, you have to adjust the parameters carefully. Adjust the number of processes with -p To allow full usage of your cpu cores, you should have at least one process per core. More processes allow better resource usage but keep in mind that each process has it's own costs for spawning. Choose between per-testcase- and per-testmethod-parallelization with -f Given you have few testcases (classes) with many long running methods, you should use the -f option to enable the functional mode and allow different methods of the same class to be executed in parallel. Keep in mind that the default is per-testcase-parallelization to address inter-testmethod dependencies. Use the WrapperRunner if possible The default Runner for PHPUnit spawns a new process for each testcase (or method in functional mode). This provides the highest compatibility but comes with the cost of many spawned processes and a bootstrapping for each process. Especially when you have a slow bootstrapping in your tests (like a database setup) you should try the WrapperRunner with --runner WrapperRunner. It spawns one ""worker""-process for each parallel process (-p), executes the bootstrapping once and reuses these processes for each test executed. That way the overhead of process spawning and bootstrapping is reduced to the minimum. Tune batch max size --max-batch-size. Batch size will affect on max amount of atomic tests which will be used for single test method. One atomic test will be either one test method from test class if no data provider available for method or will be only one item from dataset for method. Increase this value to reduce per-process overhead and in most cases it will also reduce parallel efficiency. Decrease this value to increase per-process overhead and in most cases it will also increase parallel efficiency. If amount of all tests less then max batch size then everything will be processed in one process thread so paratest is completely useless in that case. The best way to find the most effective batch size is to test with different batch size values and select best. Max batch size = 0 means that grouping in batches will not be used and one batch will equal to all method tests (one or all from data provider). Max batch size = 1 means that each batch will contain only one test from data provider or one method if data provider is not used. Bigger max batch size can significantly increase phpunit command line length so process can failed. Decrease max batch size to reduce command line length. Windows has limit around 32k, Linux - 2048k, Mac OS X - 256k. Windows Windows users be sure to use the appropriate batch files. An example being: vendor\bin\paratest.bat --phpunit vendor\bin\phpunit.bat ... ParaTest assumes PSR-0 for loading tests. For convenience paratest windows version use 79 columns mode to prevent blank lines in standard 80x25 windows console. PHPUnit Xml Config Support When running PHPUnit tests, ParaTest will automatically pass the phpunit.xml or phpunit.xml.dist to the phpunit runner via the --configuration switch. ParaTest also allows the configuration path to be specified manually. ParaTest will rely on the testsuites node of phpunit's xml configuration to handle loading of suites. The following phpunit config file is used for ParaTest's test cases. <?xml version=""1.0"" encoding=""UTF-8""?> <phpunit backupGlobals=""false""          backupStaticAttributes=""false""          bootstrap=""../bootstrap.php""          colors=""true""          convertErrorsToExceptions=""true""          convertNoticesToExceptions=""true""          convertWarningsToExceptions=""true""          processIsolation=""false""          stopOnFailure=""false""          syntaxCheck=""false""         >     <testsuites>         <testsuite name=""ParaTest Fixtures"">             <directory>./tests/</directory>         </testsuite>     </testsuites> </phpunit> Test token The TEST_TOKEN environment variable is guaranteed to have a value that is different from every other currently running test. This is useful to e.g. use a different database for each test: if (getenv('TEST_TOKEN') !== false) {  // Using partest     $dbname = 'testdb_' . getenv('TEST_TOKEN'); } else {     $dbname = 'testdb'; } Running Tests ParaTest's test suite depends on PHPUnit being installed via composer. Make sure you run composer install after cloning. Note that The display_errors php.ini directive must be set to stderr to run the test suite. To run unit tests: vendor/bin/phpunit test/unit To run functional tests: vendor/bin/phpunit test/functional You can run all tests at once by running phpunit from the project directory. vendor/bin/phpunit ParaTest can run its own test suite by running it from the bin directory. bin/paratest For an example of ParaTest out in the wild check out the example. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/brianium/paratest"	"A parallel testing library for PHPUnit."	"true"
"Testing"	"Peridot"	"https://github.com/peridot-php/peridot"	"An event driven test framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"172"	"10"	"16"	"GitHub - peridot-php/peridot: Event driven BDD test framework for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 172 Fork 16 peridot-php/peridot Code Issues 10 Pull requests 0 Wiki Pulse Graphs Event driven BDD test framework for PHP http://peridot-php.github.io/ 468 commits 2 branches 42 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0 master Nothing to show 1.18.1 1.18.0 1.17.0 1.16.0 1.15.2 1.15.1 1.15.0 1.14.0 1.13.0 1.12.0 1.11.1 1.11.0 1.10.0 1.9.0 1.8.5 1.8.4 1.8.3 1.8.2 1.8.1 1.8.0 1.7.1 1.7.0 1.6.1 1.6.0 1.5.0 1.4.0 1.3.1 1.3.0 1.2.3 1.2.2 1.2.1 1.2.0 1.1.7 1.1.6 1.1.4 1.1.3 1.1.1 1.1.0 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit 01fa66e Jul 12, 2016 brianium committed on GitHub Update CHANGELOG.md Permalink Failed to load latest commit information. bin include autoload relative to vendor/bin Dec 27, 2014 fixtures Tests now fail when an error occurs. Mar 11, 2016 specs Tests now fail when an error occurs. Mar 11, 2016 src release 1.18.1 Apr 22, 2016 .gitignore ignore build directory Oct 29, 2014 .scrutinizer.yml Tests now fail when an error occurs. Mar 11, 2016 .travis.yml add php 7 nightly to travis buid Feb 25, 2015 CHANGELOG.md Update CHANGELOG.md Jul 12, 2016 CONTRIBUTING.md swap code and test steps Nov 11, 2014 LICENSE update license date Jan 15, 2015 README.md Update README.md Jul 6, 2016 RoboFile.php release 1.5.0 Nov 2, 2014 apigen.neon update doc path to include peridot scope Nov 16, 2014 box.json remove references to scope and clean up box build Nov 14, 2014 composer.json Bumped symfony/console version Apr 7, 2016 logo.png shorten left side of log Dec 14, 2014 output-sample.png add output sample to README.md Oct 25, 2014 peridot.php add php 7 nightly to travis buid Feb 25, 2015 README.md The highly extensible, highly enjoyable, PHP testing framework. Read more at peridot-php.github.io or head over to the wiki. Building PHAR Peridot's phar is built using Box. Once box is installed, the phar can be built using the following command from the project directory: box build  Generating Peridot's documentation Peridot API documentation is generated using apigen. Once apigen is installed, run the following command from the project directory: apigen generate  This will output documentation to the docs/ directory. Running Peridot's tests Peridot's test suite can be run using Peridot: $ bin/peridot  And a sample of output: Release We use Robo for releases. robo release [version] [site-path]  using assert for expectations Peridot sets ASSERT_CALLBACK via assert_options in order to throw exceptions when using the native assert function. Peridot specs are considered passing if they don't throw an exception; if you are using assert for expectations and you find your specs are triggering false positives, you may need to update zend.assertions to 1 in your php.ini. This is set to -1 by default in PHP 7+ If you aren't too keen on using assert for testing, there are a ton of assertion/expectation libraries out there. Anything that throws exceptions in response to a failed assertion will do. The peridot-php org has authored Leo, and this library offers a richer assertion vocabulary for testing. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/peridot-php/peridot"	"An event driven test framework."	"true"
"Testing"	"Phake"	"https://github.com/mlively/Phake"	"Another mock object library for testing."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"380"	"21"	"52"	"GitHub - mlively/Phake: PHP Mocking Framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 380 Fork 52 mlively/Phake Code Issues 11 Pull requests 4 Wiki Pulse Graphs PHP Mocking Framework http://phake.readthedocs.org/en/2.1/ 491 commits 15 branches 33 releases Fetching contributors PHP 99.9% Shell 0.1% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 2.0 2.1 bugfix/212 feature/support-type-hints feature/update-phpunit-support feature/185 feature/195 feature/214 feature/215 gh-pages hhvm-fix issue/142 master user-original-parameters Nothing to show v2.3.0 v2.2.1 v2.2.0 v2.1.1 v2.1.0 v2.0.2 v2.0.1 v2.0.0-rc1 v2.0.0-beta5 v2.0.0-beta4 v2.0.0-beta3 v2.0.0-beta2 v2.0.0-beta1 v2.0.0-alpha4 v2.0.0-alpha3 v2.0.0-alpha2 v2.0.0-alpha1 v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v1.0.0alpha6 v1.0.0alpha5 v1.0.0alpha4 v1.0.0alpha3 v1.0.0alpha2 v1.0.0alpha V2.0.0 Nothing to show New pull request Latest commit 2202d36 Mar 4, 2016 mlively Merge pull request #217 from mlively/feature/214 … Added ability to mock ""unsafe classes"" Permalink Failed to load latest commit information. .travis Fixing the install script for hhvm Apr 26, 2015 docs Merge pull request #213 from mlively/bugfix/212 Feb 13, 2016 src Merge pull request #217 from mlively/feature/214 Mar 4, 2016 tests Merge pull request #217 from mlively/feature/214 Mar 4, 2016 .codeclimate.yml Adding support for code climate Sep 3, 2015 .gitignore Merge commit '76fc7fd9d81d3b43cb65a099dfd2972270070e47' Jan 26, 2015 .scrutinizer.yml Setting up code coverage Apr 10, 2015 .travis.yml hhvm does not really handle changing the method in the hierarchy that… Feb 13, 2016 CHANGELOG.markdown Prepping next release. Also starting over on the change log sorta. May 9, 2015 LICENSE Committing copyright update and the packages.xml fixes Jan 1, 2012 README.markdown Update README.markdown May 9, 2015 composer.json reverting @dev tag, it is unnecessary, added preferred stability inst… Sep 27, 2015 phpunit.xml.dist Use .dist phpunit.xml file. Ignore composer.phar. May 25, 2013 README.markdown Phake Phake is a framework for PHP that aims to provide mock objects, test doubles and method stubs. Phake was inspired by a lack of flexibility and ease of use in the current mocking frameworks combined with a recent experience with Mockito for Java. A key conceptual difference in mocking between Phake and most of php mocking frameworks (ie: mock functionality in PHPUnit, PHPMock, and mock functionality in SimpleTest) is that Phake (like Mockito) employs a verification strategy to ensure that calls get made. That is to say, you call your code as normal and then after you have finished the code being tested you can verify whether or not expected methods were called. This is very different from the aforementioned products for php which use an expectation strategy where you lay out your expectations prior to any calls being made. Installation - Composer Phake can be installed using Composer. Add Phake as a dependency. You'll usually want this as a development dependency, so the example shows it in the require-dev section. ""require-dev"": {     ""phake/phake"": ""2.*"" } Run Composer: php composer.phar install --dev or php composer.phar update phake/phake Installation - Source You can also of course install it from source by downloading it from our github repository: https://github.com/mlively/Phake Links There are a few links that have information on how you can utilize Phake. Phake Documentation Initial Phake Announcement If you have an article or tutorial that you would like to share, feel free to open an issue on github and I will add it to this list Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mlively/Phake"	"Another mock object library for testing."	"true"
"Testing"	"Pho"	"https://github.com/danielstjules/pho"	"Another behaviour driven development testing framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"257"	"21"	"16"	"GitHub - danielstjules/pho: BDD test framework for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 257 Fork 16 danielstjules/pho Code Issues 0 Pull requests 0 Pulse Graphs BDD test framework for PHP 182 commits 1 branch 6 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.1.3 1.1.2 1.1.1 1.1.0 1.0.0 0.1.0 Nothing to show New pull request Latest commit c9a74fe Mar 24, 2016 danielstjules 1.1.3 Permalink Failed to load latest commit information. bin Renamed compile.php to compile Feb 1, 2014 spec Fix exit code on spec failure Jan 25, 2015 src 1.1.3 Mar 24, 2016 .gitignore Light cleanup of Watcher Mar 24, 2014 .travis.yml Add PHP 7.0 to travis Mar 23, 2016 CHANGELOG.md 1.1.3 Mar 24, 2016 LICENSE Initial commit Oct 10, 2013 README.md 1.1.0 Dec 28, 2014 composer.json Start using PSR-4 Jan 3, 2014 README.md BDD test framework for PHP, inspired by Jasmine and RSpec. Features a familiar syntax, and a watch command to automatically re-run specs during development. It can also be extended with custom matchers and reporters. Installation Usage Writing Specs Running Specs Expectations/Matchers Custom Matchers Reporters Mocking Namespace Installation The following instructions outline installation using Composer. If you don't have Composer, you can download it from http://getcomposer.org/ Run either of the following commands, depending on your environment: $ composer global require danielstjules/pho:dev-master $ php composer.phar global require danielstjules/pho:dev-master  Edit your ~/.bash_profile or ~/.profile and add: export PATH=$HOME/.composer/vendor/bin:$PATH  Usage Usage: pho [options] [files]  Options     -a   --ascii                     Show ASCII art on completion    -b   --bootstrap   <bootstrap>   Bootstrap file to load    -f   --filter      <pattern>     Run specs containing a pattern    -h   --help                      Output usage information    -n   --namespace                 Only use namespaced functions    -r   --reporter    <name>        Specify the reporter to use    -s   --stop                      Stop on failure    -v   --version                   Display version number    -w   --watch                     Watch files for changes and rerun specs    -C   --no-color                  Disable terminal colors Writing Specs Pho exposes a DSL for organizing and writing your tests, which includes the following functions: describe, context, it, before, after, beforeEach, afterEach and expect. Equivalent functions for disabling specs and suites also exist via xdescribe, xcontext and xit. To create a suite, describe and context can be used by passing them a string and function. Both are interchangeable, though context is more often nested in a describe to group some set of behaviour. it is then used to create a spec, or test. A spec may contain multiple expectations or assertions, and will pass so long as all assertions pass and no exception is uncaught. For asserting values in pho, expect can be used. The function accepts the value to be tested, and may be chained with a handful of matchers. <?php  describe('A suite', function() {     it('contains specs with expectations', function() {         expect(true)->toBe(true);     });      it('can have specs that fail', function() {         expect(false)->not()->toBe(false);     });      it('can have incomplete specs'); }); Objects may be passed between suites and specs with php's use keyword. Here's an example: describe('Example', function() {     $object = new stdClass();     $object->name = 'pho';      context('name', function() use ($object) {         it('is set to pho', function()  use ($object) {             expect($object->name)->toBe('pho');         });     }); }); Things can get a bit verbose when dealing with multiple objects that need to be passed into closures with use. To avoid such long lists of arguments, $this can be used to set and retrieve values between suites and specs. describe('SomeClass', function() {     $this->key1 = 'initialValue';     $this->key2 = 'initialValue';      context('methodOne()', function() {         $this->key1 = 'changedValue';          it('contains a spec', function() {             expect($this->key1)->toBe('changedValue');             expect($this->key2)->toBe('initialValue');         });     });      context('methodTwo()', function() {         it('contains another spec', function() {             expect($this->key1)->toBe('initialValue');             expect($this->key2)->toBe('initialValue');         });     }); }); Hooks are available for running functions as setups and teardowns. before is ran prior to any specs in a suite, and after, once all in the suite have been ran. beforeEach and afterEach both run their closures once per spec. Note that beforeEach and afterEach are both stackable, and will apply to specs within nested suites. describe('Suite with Hooks', function() {     $this->count = 0;      beforeEach(function() {         $this->count = $this->count + 1;     });      it('has a count equal to 1', function() {         expect($this->count)->toEqual(1);         // A single beforeEach ran     });      context('nested suite', function() {         beforeEach(function() {             $this->count = $this->count + 1;         });          it('has a count equal to 3', function() {             expect($this->count)->toEqual(3);             // Both beforeEach closures incremented the value         });     }); }); Running Specs By default, pho looks for specs in either a test or spec folder under the working directory. It will recurse through all subfolders and run any files ending with Spec.php, ie: userSpec.php. Furthermore, continuous testing is as easy as using the --watch option, which will monitor all files in the path for changes, and rerun specs on save. Expectations/Matchers Type Matching expect('pho')->toBeA('string'); expect(1)->notToBeA('string'); expect(1)->not()->toBeA('string');  expect(1)->toBeAn('integer'); // Alias for toBeA expect('pho')->notToBeAn('integer'); expect('pho')->not()->toBeA('integer'); Instance Matching expect(new User())->toBeAnInstanceOf('User'); expect(new User())->not()->toBeAnInstanceOf('Post'); expect(new User())->notToBeAnInstanceOf('Post'); Strict Equality Matching expect(true)->toBe(true); expect(true)->not()->toBe(false); expect(true)->notToBe(false);  expect(['foo'])->toEqual(['foo']); // Alias for toBe expect(['foo'])->not()->toEqual(true); expect(['foo'])->notToEqual(true); Loose Equality Matching expect(1)->toEql(true); expect(new User('Bob'))->not()->ToEql(new User('Alice')) expect(new User('Bob'))->notToEql(new User('Alice')) Length Matching expect(['tdd', 'bdd'])->toHaveLength(2); expect('pho')->not()->toHaveLength(2); expect('pho')->notToHaveLength(2);  expect([])->toBeEmpty(); expect('pho')->not()->toBeEmpty(); expect('pho')->notToBeEmpty(); Inclusion Matching expect('Spectacular!')->toContain('Spec'); expect(['a', 'b'])->not()->toContain('c'); expect(['a', 'b'])->notToContain('c');  expect('testing')->toContain('test', 'ing'); // Accepts multiple args expect(['tdd', 'test'])->not()->toContain('bdd', 'spec'); expect(['tdd', 'test'])->notToContain('bdd', 'spec');  expect(['name' => 'pho'])->toHaveKey('name'); expect(['name' => 'pho'])->not()->toHaveKey('id'); expect(['name' => 'pho'])->notToHaveKey('id'); Pattern Matching expect('tdd')->toMatch('/\w[D]{2}/i'); expect('pho')->not()->toMatch('/\d+/'); expect('pho')->notToMatch('/\d+/');  expect('username')->toStartWith('user'); expect('spec')->not()->toStartWith('test'); expect('spec')->notToStartWith('test');  expect('username')->toEndWith('name'); expect('spec')->not()->toEndWith('s'); expect('spec')->notToEndtWith('s'); Numeric Matching expect(2)->toBeGreaterThan(1); expect(2)->not()->toBeGreaterThan(2); expect(1)->notToBeGreaterThan(2);  expect(2)->toBeAbove(1); // Alias for toBeGreaterThan expect(2)->not()->toBeAbove(2); expect(1)->notToBeAbove(2);  expect(1)->toBeLessThan(2); expect(1)->not()->toBeLessThan(1); expect(2)->notToBeLessThan(1);  expect(1)->toBeBelow(2); // Alias for toBeLessThan expect(1)->not()->toBeBelow(1); expect(2)->notToBeBelow(1);  expect(1)->toBeWithin(1, 10); // Inclusive expect(-2)->not()->toBeWithin(-1, 0); expect(-2)->notToBeWithin(-1, 0); Print Matching $callable = function() {   echo 'test' };  expect($callable)->toPrint('test'); expect($callable)->not()->toPrint('testing'); expect($callable)->notToPrint('testing'); Exception Matching $callable = function() {   throw new Custom\Exception('error!'); };  expect($callable)->toThrow('Custom\Exception'); expect($callable)->not()->toThrow('\ErrorException'); expect($callable)->notToThrow('\ErrorException'); Custom Matchers Custom matchers can be added by creating a class that implements pho\Expectation\Matcher\MatcherInterface and registering the matcher with pho\Expectation\Expectation::addMatcher(). Below is an example of a basic matcher: namespace example;  use pho\Expectation\Matcher\MatcherInterface;  class ExampleMatcher implements MatcherInterface {     protected $expectedValue;      public function __construct($expectedValue)     {         $this->expectedValue = $expectedValue;     }      public function match($actualValue)     {         return ($actualValue === $this->expectedValue);     }      public function getFailureMessage($negated = false)     {         if (!$negated) {             return ""Expected value to be {$this->expectedValue}"";         } else {             return ""Expected value not to be {$this->expectedValue}"";         }     } } Registering it: use pho\Expectation\Expectation;  // Register the matcher Expectation::addMatcher('toHaveValue', '\example\ExampleMatcher'); And that's it! You would now have access to the following: expect($actual)->toHaveValue($expected); expect($actual)->not()->toHaveValue($expected); expect($actual)->notToHaveValue($expected); Reporters dot (default) $ pho --reporter dot exampleSpec.php  .FI  Failures:  ""A suite can have specs that fail"" FAILED /Users/danielstjules/Desktop/exampleSpec.php:9 Expected false not to be false  Finished in 0.00125 seconds  3 specs, 1 failure, 1 incomplete  spec $ pho --reporter spec exampleSpec.php  A suite     contains specs with expectations     can have specs that fail     can have incomplete specs  Failures:  ""A suite can have specs that fail"" FAILED /Users/danielstjules/Desktop/exampleSpec.php:9 Expected false not to be false  Finished in 0.0012 seconds  3 specs, 1 failure, 1 incomplete  list $ pho --reporter list exampleSpec.php  A suite contains specs with expectations A suite can have specs that fail A suite can have incomplete specs  Failures:  ""A suite can have specs that fail"" FAILED /Users/danielstjules/Desktop/exampleSpec.php:9 Expected false not to be false  Finished in 0.0012 seconds  3 specs, 1 failure, 1 incomplete  Mocking Pho doesn't currently provide mocks/stubs out of the box. Instead, it's suggested that a mocking framework such as prophecy or mockery be used. Note: Tests cannot be failed within a test hook. If you need to check mock object expectations after running a spec, make sure you do so within the spec body. In the following example this is achieved using the $teardown closure, although the name is not significant. describe('A suite', function() {     // Any last checks that could fail a test would go here     $this->teardown = function() {         Mockery::close();     };      it('should check mock object expectations', function() {         $mock = Mockery::mock('simplemock');         $mock->shouldReceive('foo')->with(5)->once()->andReturn(10);         expect($mock->foo(5))->toBe(10);          $this->teardown();     }); }); Namespace If you'd rather not have pho use the global namespace for its functions, you can set the --namespace flag to force it to only use the pho namespace. This will be a nicer alternative in PHP 5.6 with https://wiki.php.net/rfc/use_function pho\describe('A suite', function() {     pho\it('contains specs with expectations', function() {         pho\expect(true)->toBe(true);     });      pho\it('can have specs that fail', function() {         pho\expect(false)->not()->toBe(false);     }); }); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/danielstjules/pho"	"Another behaviour driven development testing framework."	"true"
"Testing"	"PHPSpec"	"https://github.com/phpspec/phpspec"	"A design by specification unit testing library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1025"	"77"	"202"	"GitHub - phpspec/phpspec: SpecBDD Framework for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 77 Star 1,025 Fork 202 phpspec/phpspec Code Issues 88 Pull requests 3 Wiki Pulse Graphs SpecBDD Framework for PHP http://www.phpspec.net 2,284 commits 3 branches 53 releases 96 contributors PHP 83.8% Cucumber 15.5% Other 0.7% PHP Cucumber Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.5 logo master Nothing to show phpspec-1.3.0beta phpspec-1.2.2beta phpspec-1.2.1beta phpspec-1.2.0beta phpspec-1.2 phpspec-1.1.3 phpspec-1.1.2 phpspec-1.1.1beta phpspec-1.1.0.1 phpspec-1.1.0beta phpspec-1.0.0beta phpspec-0.2.2 3.0.0-rc1 3.0.0-beta2 3.0.0-beta 2.5.0 2.5.0-rc1 2.5.0-beta 2.4.1 2.4.0 2.4.0-rc1 2.4.0-beta 2.4.0-alpha2 2.4.0-alpha1 2.3.0 2.3.0-rc1 2.3.0-beta3 2.3.0-beta2 2.3.0-beta 2.2.1 2.2.0 2.2.0-RC1 2.2.0-BETA2 2.2.0-BETA 2.1.1 2.1.0 2.1.0-RC3 2.1.0-RC2 2.1.0-RC1 2.0.1 2.0.0 2.0.0-RC4 2.0.0-RC3 2.0.0-RC2 2.0.0-RC1 2.0.0-BETA4 2.0.0-BETA3 2.0.0-BETA2 2.0.0-BETA1 1.4.3 1.4.2 1.4.1 1.4.0 Nothing to show New pull request Latest commit 0b0a337 Jul 9, 2016 ciaranmcnulty committed on GitHub Merge pull request #970 from gnugat/patch-1 … Documented migration changes from 3.0@beta2 Permalink Failed to load latest commit information. .phpspec PhpSpec project classes should be final and contain docblock Jun 3, 2015 bin RC-1 release Jul 9, 2016 docs Took @stof's feedback into account Jul 4, 2016 features Merge pull request #961 from ciaranmcnulty/refactor/simplify-container Jul 2, 2016 integration/PhpSpec Remove Symfony\DialogHelper usage Mar 30, 2016 spec/PhpSpec Merge pull request #961 from ciaranmcnulty/refactor/simplify-container Jul 2, 2016 src/PhpSpec Update custom matcher logic to fit new container Jul 2, 2016 .gitattributes initial version of RTD documentation, with test README Jul 29, 2014 .gitignore change output to not use magic replacement as it does not work on eve… Nov 27, 2014 .scrutinizer.yml Only care about new coding style issues Feb 13, 2016 .travis.yml Merge branch '2.5' Jul 2, 2016 CHANGES.md Updating CHANGES.md Jul 2, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Mar 31, 2016 LICENSE locking into a range type of license date Sep 11, 2014 Makefile Check for composer Nov 24, 2014 README.rst Update README.rst Feb 15, 2016 appveyor.yml Don't cache vendor folder Feb 16, 2016 behat.yml.dist Switch to extension for PHP version detection Jun 5, 2016 box.json change output to not use magic replacement as it does not work on eve… Nov 27, 2014 composer.json Homogenized composer version configuration Jun 24, 2016 phpunit.xml Missing linebreaks at file ends Jan 18, 2015 README.rst phpspec The main website with documentation is at http://www.phpspec.net. Installing Dependencies Dependencies are handled via composer: wget -nc http://getcomposer.org/composer.phar php composer.phar install  Developer's mailing list For development discussion subscribe to phpspec-dev@googlegroups.com. Community Check out #phpspec on irc.freenode.net. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phpspec/phpspec"	"A design by specification unit testing library."	"true"
"Testing"	"PHPT"	"https://qa.php.net/write-test.php"	"A test tool used by PHP itself."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PHP: Quality Assurance QA Goals What is RC? Contributing Handling Reports Reports Github PRs Creating new test files #phpt Test Basics The first thing you need to know about tests is that we need more!!! Although PHP works just great 99.99% of the time, not having a very comprehensive test suite means that we take more risks every time we add to or modify the PHP implementation. The second thing you need to know is that if you can write PHP you can write tests. Thirdly - we are a friendly and welcoming community, don't be scared about writing to (php-qa@lists.php.net) - we won't bite! So what are phpt tests? A phpt test is a little script used by the php internal and quality assurance teams to test PHP's functionality. It can be used with new releases to make sure they can do all the things that previous releases can, or to help find bugs in current releases. By writing phpt tests you are helping to make PHP more stable. What skills are needed to write a phpt test? All that is really needed to write a phpt test is a basic understanding of the PHP language, a text editor, and a way to get the results of your code. That is it. So if you have been writing and running PHP scripts already - you have everything you need. What do you write phpt tests on? Basically you can write a phpt test on one of the various php functions available. You can write a test on a basic language function (a string function or an array function) , or a function provided by one of PHP's numerous extensions (a mysql function or a image function or a mcrypt function). You can find out what functions already have phpt tests by looking in the html version of the git repository (ext/standard/tests/ is a good place to start looking - though not all the tests currently written are in there). If you look at the gcov pages you can see which functions have lots of tests and which need more, although these pages only show which lines of code are covered by test cases so even if the coverage looks good there may be more interesting tests to write - for example covering error cases. There is also a table here that shows which functions and methods are called from PHPT tests. If you want more guidance than that you can always ask the PHP Quality Assurance Team on their mailing list (php-qa@lists.php.net) where they would like you to direct your attentions. How is a phpt test is used? When a test is called by the run-tests.php script it takes various parts of the phpt file to name and create a .php file. That .php file is then executed. The output of the .php file is then compared to a different section of the phpt file. If the output of the script ""matches"" the output provided in the phpt script - it passes. What should a phpt test do? Basically - it should try and break the PHP function. It should check not only the functions normal parameters, but it should also check edge cases. Intentionally generating an error is allowed and encouraged. #Writing phpt Tests #Naming Conventions Phpt tests follow a very strict naming convention. This is done to easily identify what each phpt test is for. Tests should be named according to the following list: Tests for bugs        bug<bugid>.phpt (bug17123.phpt) Tests for a function's basic behaviour        <functionname>_basic.phpt (dba_open_basic.phpt) Tests for a function's error behaviour        <functionname>_error.phpt (dba_open_error.phpt) Tests for variations in a function's behaviour        <functionname>_variation.phpt (dba_open_variation.phpt) General tests for extensions        <extname><no>.phpt (dba_003.phpt) The convention of using _basic, _error and _variation was introduced when we found that writing a single test case for each function resulted in unacceptably large test cases. It's quite hard to debug problems when the test case generates 100s of lines of output. The ""basic"" test case for a function should just address the single most simple thing that the function is designed to do. For example, if writing a test for the sin() function a basic test would just be to check that sin() returns the correct values for some known angles - eg 30, 90, 180. The ""error"" tests for a function are test cases which are designed to provoke errors, warnings or notices. There can be more than one error case, if so the convention is to name the test cases mytest_error1.phpt, mytest_error2.phpt and so on. The ""variation"" tests are any tests that don't fit into ""basic"" or ""error"" tests. For example one might use a variation tests to test boundary conditions. #How big is a test case? Small. Really - the smaller the better, a good guide is no more than 10 lines of output. The reason for this is that if we break something in PHP and it breaks your test case we need to be able to find out quite quickly what we broke, going through 1000s of line of test case output is not easy. Having said that it's sometimes just not practical to stay within the 10 line guideline, in this case you can help a lot by commenting the output. You may find plenty of much longer tests in PHP - the small tests message is something that we learnt over time, in fact we are slowly going through and splitting tests up when we need to. #Comments Comments help. Not an essay - just a couple of lines on what the objective of the test is. It may seem completely obvious to you as you write it, but it might not be to someone looking at it later on #Basic Format A test must contain the sections TEST, FILE and either EXPECT or EXPECTF at a minimum. The example below illustrates a minimal test. ext/standard/tests/strings/strtr.phpt  --TEST-- strtr() function - basic test for strtr() --FILE-- <?php /* Do not change this test it is a README.TESTING example. */ $trans = array(""hello""=>""hi"", ""hi""=>""hello"", ""a""=>""A"", ""world""=>""planet""); var_dump(strtr(""# hi all, I said hello world! #"", $trans)); ?> --EXPECT-- string(32) ""# hello All, I sAid hi planet! #""  As you can see the file is divided into several sections. The TEST section holds a one line title of the phpt test, this shoudl be a simple description and shouldn't ever excede one line, if you need to write more explanation add comments in the body of the test case. The phpt files name is used when generating a .php file. The FILE section is used as the body of the .php file, so don't forget to open and close your php tags. The EXPECT section is the part used as a comparison to see if the test passes. It is a good idea to generate output with var_dump() calls. #PHPT structure details A phpt test can have many more parts than just the minimum. In fact some of the mandatory parts have alternatives that may be used if the situation warrants it. The phpt sections are documented here. There is also a very useful set of slides, written by Marcus Boerger here. Look at the talk entitled ""The need for speed, ERM testing"". #Autogenerating test cases It isn't possible (or even sensible) to try and generate complete test cases for PHP. However there is a script in PHP5.3 which will help to generate the framework. It can save you some typing and ensure that you get a good basic format. See test case generation for instructions on how to use it. #Analyzing failing tests While writing tests you will probably run into tests not passing while you think they should. The 'make test' command provides you with debug information. Several files will be added per test in the same directory as the .phpt file itself. Considering your test file is named foo.phpt, these files provide you with information that can help you find out what went wrong: foo.diff        A diff file between the expected output (be it in EXPECT, EXPECTF or another option) and the actual output. foo.exp        The expected output. foo.log        A log containing expected output, actual output and results. Most likely very similar to info in the other files. foo.out        The actual output of your .phpt test part. foo.php        The php code that was executed for this test. foo.sh        An executable file that executes the test for you as it was executed during failure. # Testing your test cases Most people who write tests for PHP don't have access to a huge number of operating systems but the tests are run on every system that runs PHP. It's good to test your test on as many platforms as you can - Linux and Windows are the most important, it's increasingly important to make sure that tests run on 64 bit as well as 32 bit platforms. If you only have access to one operating system - don't worry, if you have karma, commit the test but watch php-qa@lists.php.net for reports of failures on other platforms. If you don't have karma to commit have a look at the next section. When you are testing your test case it's really important to make sure that you clean up any temporary resources (eg files) that you used in the test. There is a special --CLEAN-- section to help you do this - see here. Another good check is to look at what lines of code in the PHP source your test case covers. This is easy to do, there are some instructions on the PHP Wiki. #What should I do with my test case when I've written and tested it? The next step is to get someone to review it. If it's short you can paste it into a note and send it to php-qa@lists.php.net. If the test is a bit too long for that then put it somewhere were people can download it (pastebin is sometimes used). Appending tests to notes as files doesn't work well - so please don't do that. Your note to php-qa@lists.php.net should say what level of PHP you have tested it on and what platform(s) you've run it on. Someone from the PHP QA group will review your test and reply to you. They may ask for some changes or suggest better ways to do things, or they may commit it to PHP. #Writing Portable PHP Tests Writing portable tests can be hard if you don't have access to all the many platforms that PHP can run on. Do your best. If in doubt, don't disable a test. It is better that the test runs in as many environments as possible. If you know a new test won't run in a specific environment, try to write the complementary test for that environment. Make sure sets of data are consistently ordered. SQL queries are not guaranteed to return results in the same order unless an ORDER BY clause is used. Directory listings are another example that can vary: use an appropriate PHP function to sort them befor printing. Both of these examples have affected PHP tests in the past. Make sure that any test touching parsing or display of dates uses a hard-defined timezone - preferable 'UTC'. It is important tha this is defined in the file section using:  date_default_timezone_set('UTC');  and not in the INI section. This is because of the order in which settings are checked which is:  date_default_timezone_set() -> TZ environmental -> INI setting -> System Setting  If a TZ environmental varaibale is found the INI setting will be ignored. Tests that run, or only have have matching EXPECT output, on 32bit platforms can use a SKIPIF section like:  --SKIPIF-- <?php  if (PHP_INT_SIZE != 4) die(""skip this test is for 32bit platforms only""); ?>  Tests for 64bit platforms can use:  --SKIPIF-- <?php  if (PHP_INT_SIZE != 8) die(""skip this test is for 64bit platforms only""); ?>  To run a test only on Windows  --SKIPIF-- <?php  if (substr(PHP_OS, 0, 3) != 'WIN') die(""skip this test is for Windows platforms only""); ?>  To run a test only on Linux  --SKIPIF-- <?php  if (!stristr(PHP_OS, ""Linux"")) die(""skip this test is Linux platforms only""); ?>  To skip a test on Mac OS X Darwin  --SKIPIF-- <?php  if (!stristr(PHP_OS, ""Darwin"")) die(""skip this test is for Mac OS X platforms only""); ?>  #Examples #EXPECTF /ext/standard/tests/strings/str_shuffle.phpt is a good example for using EXPECTF instead of EXPECT. From time to time the algorithm used for shuffle changed and sometimes the machine used to execute the code has influence on the result of shuffle. But it always returns a three character string detectable by %s (that matches any string until the end of the line). Other scan-able forms are %a for any amount of chars (at least one), %i for integers, %d for numbers only, %f for floating point values, %c for single characters, %x for hexadecimal values, %w for any number of whitespace characters and %e for DIRECTORY_SEPARATOR ('\' or '/'). See also EXPECTF details /ext/standard/tests/strings/str_shuffle.phpt  --TEST-- Testing str_shuffle. --FILE-- <?php /* Do not change this test it is a README.TESTING example. */ $s = '123'; var_dump(str_shuffle($s)); var_dump($s); ?> --EXPECTF-- string(3) ""%s"" string(3) ""123""  #EXPECTREGEX /ext/standard/tests/strings/strings001.phpt is a good example for using EXPECTREGEX instead of EXPECT. This test also shows that in EXPECTREGEX some characters need to be escaped since otherwise they would be interpreted as a regular expression. /ext/standard/tests/strings/strings001.phpt  --TEST-- Test whether strstr() and strrchr() are binary safe. --FILE-- <?php /* Do not change this test it is a README.TESTING example. */ $s = ""alabala nica"".chr(0).""turska panica""; var_dump(strstr($s, ""nic"")); var_dump(strrchr($s,"" nic"")); ?> --EXPECTREGEX-- string\(18\) \""nica\x00turska panica\"" string\(19\) \"" nica\x00turska panica\""  #SKIPIF Some tests depend on modules or functions available only in certain versions or they even require minimum version of php or zend. These tests should be skipped when the requirement cannot be fulfilled. To achieve this you can use the SKIPIF section. To tell run-tests.php that your test should be skipped the SKIPIF section must print out the word ""skip"" followed by a reason why the test should skip. /ext/exif/tests/exif005.phpt  --TEST-- Check for exif_read_data, unusual IFD start --SKIPIF-- <?php  	if (!extension_loaded('exif')) print 'skip exif extension not available'; ?> --FILE-- <?php /* Do not change this test it is a README.TESTING example.  * test5.jpg is a 1*1 image that contains an Exif section with ifd = 00000009h  */ $image  = exif_read_data('./ext/exif/tests/test5.jpg','',true,false); var_dump($image['IFD0']); ?> --EXPECT-- array(2) {   [""ImageDescription""]=>   string(11) ""Ifd00000009""   [""DateTime""]=>   string(19) ""2002:10:18 20:06:00"" }  Test script and SKIPIF code should be directly written into *.phpt. However, it is recommended to use include files when more test scripts depend on the same SKIPIF code or when certain test files need the same values for some input. Note: no file used by any test should have one of the following extensions: "".php"", "".log"", "".mem"", "".exp"", "".out"" or "".diff"". When you use an include file for the SKIPIF section it should be named ""skipif.inc"" and an include file used in the FILE section of many tests should be named ""test.inc"". #Final Notes #Cleaning up after running a test Sometimes test cases create files or directories as part of the test case and it's important to remove these after the test ends, the --CLEAN-- section is provided to help with this. The PHP code in the --CLEAN-- section is executed separately from the code in the --FILE-- section. For example, this code:  --TEST-- Will fail to clean up --FILE-- <?php       $temp_filename = ""fred.tmp"";       $fp = fopen($temp_filename, ""w"");       fwrite($fp, ""Hello Boys!"");       fclose($fp); ?> --CLEAN-- <?php       unlink($temp_filename); ?> --EXPECT--  will not remove the temporary file because the variable $filename is not defined in the --CLEAN-- section. Here is a better way to write the code:  --TEST-- This will remove temporary files --FILE-- <?php 	$temp_filename = dirname(__FILE__).""/fred.tmp""; 	$fp = fopen($temp_filename, ""w""); 	fwrite ($fp, ""Hello Boys!\n""); 	fclose($fp); ?> --CLEAN-- <?php 	$temp_filename = dirname(__FILE__).""/fred.tmp""; 	unlink($temp_filename); ?> --EXPECT--  Note the use of the dirname(__FILE__) construct which will ensure that the temporary file is created in the same directory as the phpt test script. When creating temporary files it is a good idea to use an extension that indicates the use of the file, eg .tmp. It's also a good idea to avoid using extensions that are already used for other purposes, eg .inc, .php. Similarly, it is helpful to give the temporary file a name that is clearly related to the test case. For example, mytest.phpt should create mytest.tmp (or mytestN.tmp, N=1, 2,3,...) then if by any chance the temporary file isnt't removed properly it will be obvious which test case created it. When writing and debugging a test case with a --CLEAN-- section it is helpful to remember that the php code in the --CLEAN-- section is executed separately from the code in the --FILE-- section. For example, in a test case called mytest.phpt, code from the --FILE-- section is run from a file called mytest.php and code from the --CLEAN-- section is run from a file called mytest.clean.php. If the test passes, both the .php and .clean.php files are removed by run-tests.php. You can prevent the removal by using the --keep option of run-tests.php, this is a very useful option if you need to check that the --CLEAN-- section code is working as you intended. Finally - if you are using CVS it's helpful to add the extension that you use for test-related temporary files to the .cvsignore file - this will help to prevent you from accidentally checking temporary files into CVS. #Redirecting tests Using --REDIRECTTEST-- it is possible to redirect from one test to a bunch of other tests. That way multiple extensions can refer to the same set of test scripts probably using it with a different configuration. The block is eval'd and supposed to return an array describing how to redirect. The resulting array must contain the key 'TEST' that stores the redirect target as a string. This string usually is the directory where the test scripts are located and should be relative. Optionally you can use the 'ENV' as an array configuring the environment to be set when executing the tests. This way you can pass configuration to the executed tests. Redirect tests may especially contain --SKIPIF--, --ENV-- and --ARGS-- sections but they no not use any --EXPECT-- section. The redirected tests themselves are just normal tests. #Error reporting in tests All tests should run correctly with error_reporting(E_ALL) and display_errors=1. This is the default when called from run-tests.php. If you have a good reason for lowering the error reporting, use --INI-- section and comment this in your testcode. If your test intentionally generates a PHP warning message use $php_errormsg variable, which you can then output. This will result in a consistent error message output across all platforms and PHP configurations, preventing your test from failing due inconsistencies in the error message content. Alternatively you can use --EXPECTF-- and check for the message by replacing the path of the source of the message with ""%s"" and the line number with ""%d"". The end of a message in a test file ""example.phpt"" then looks like ""in %sexample.php on line %d"". We explicitly dropped the last path devider as that is a system dependent character '/' or '\'. #Last bit Often you want to run test scripts without run-tests.php by simply executing them on command line like any other php script. But sometimes it disturbs having a long --EXPECT-- block, so that you don't see the actual output as it scrolls away overwritten by the blocks following the actual file block. The workaround is to use terminate the --FILE-- section with the two lines ""===DONE==="" and ""<?php exit(0); ?>. When doing so run-tests.php does not execute the line containing the exit call as that would suppress leak messages. Actually run-tests.php ignores any part after a line consisting only of ""===DONE==="". Here is an example:  --TEST-- Test hypot() - dealing with mixed number/character input  --INI-- precision=14 --FILE-- <?php         $a=""23abc"";         $b=-33;         echo ""$a :$b "";         $res = hypot($a, $b);         var_dump($res); ?> ===DONE=== <?php exit(0); ?> --EXPECTF-- 23abc :-33 float(40.224370722238) ===DONE===  If executed as PHP script the output will stop after the code on the --FILE-- section has been run. Copyright © 2001-2015 The PHP Group Other PHP.net sites Privacy policy"	"null"	"null"	"A test tool used by PHP itself."	"true"
"Testing"	"PHPUnit"	"https://github.com/sebastianbergmann/phpunit"	"A unit testing framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5321"	"328"	"1238"	"GitHub - sebastianbergmann/phpunit: The PHP Unit Testing framework. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 328 Star 5,321 Fork 1,238 sebastianbergmann/phpunit Code Issues 102 Pull requests 18 Wiki Pulse Graphs The PHP Unit Testing framework. https://phpunit.de/ 7,044 commits 29 branches 396 releases 204 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.3 2.3 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 4.0 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 5.0 5.1 5.2 5.3 5.4 issue-2111/assertNotContains-fails-when-array-contains-boolean issue-2145/stop-on-failure-fails-to-stop master refactor/symfony-process refactoring/symfony-var-dumper Nothing to show 5.4.6 5.4.5 5.4.4 5.4.3 5.4.2 5.4.1 5.4.0 5.3.5 5.3.4 5.3.3 5.3.2 5.3.1 5.3.0 5.2.12 5.2.11 5.2.10 5.2.9 5.2.8 5.2.7 5.2.6 5.2.5 5.2.4 5.2.3 5.2.2 5.2.1 5.2.0 5.1.7 5.1.6 5.1.5 5.1.4 5.1.3 5.1.2 5.1.1 5.1.0 5.0.10 5.0.9 5.0.8 5.0.7 5.0.6 5.0.5 5.0.4 5.0.3 5.0.2 5.0.1 5.0.0 4.8.26 4.8.25 4.8.24 4.8.23 4.8.22 4.8.21 4.8.20 4.8.19 4.8.18 4.8.17 4.8.16 4.8.15 4.8.14 4.8.13 4.8.12 4.8.11 4.8.10 4.8.9 4.8.8 4.8.7 4.8.6 4.8.5 4.8.4 4.8.3 4.8.2 4.8.1 4.8.0 4.7.7 4.7.6 4.7.5 4.7.4 4.7.3 4.7.2 4.7.1 4.7.0 4.6.10 4.6.9 4.6.8 4.6.7 4.6.6 4.6.5 4.6.4 4.6.3 4.6.2 4.6.1 4.6.0 4.5.1 4.5.0 4.4.5 4.4.4 4.4.3 4.4.2 4.4.1 4.4.0 4.3.5 Nothing to show New pull request Latest commit aace781 Jul 13, 2016 sebastianbergmann Merge branch '5.4' Permalink Failed to load latest commit information. build Merge branch '5.3' into 5.4 Jun 5, 2016 src Merge branch '5.4' Jul 13, 2016 tests Merge branch '5.4' Jun 17, 2016 .gitattributes Ignore /build directory Jun 5, 2016 .gitignore Set up phpDox for documentation generation Jun 5, 2016 .php_cs Merge branch '4.8' into 5.0 Oct 9, 2015 .travis.yml Merge branch '4.8' into 5.0 May 10, 2016 CODE_OF_CONDUCT.md Closes #2040 Jan 19, 2016 CONTRIBUTING.md Merge branch '4.8' into 5.0 Apr 4, 2016 ChangeLog-4.0.md Initial work on following the http://keepachangelog.com/ principles Jul 12, 2015 ChangeLog-4.1.md Initial work on following the http://keepachangelog.com/ principles Jul 12, 2015 ChangeLog-4.2.md Initial work on following the http://keepachangelog.com/ principles Jul 12, 2015 ChangeLog-4.3.md Initial work on following the http://keepachangelog.com/ principles Jul 12, 2015 ChangeLog-4.4.md Initial work on following the http://keepachangelog.com/ principles Jul 12, 2015 ChangeLog-4.5.md Initial work on following the http://keepachangelog.com/ principles Jul 12, 2015 ChangeLog-4.6.md Initial work on following the http://keepachangelog.com/ principles Jul 12, 2015 ChangeLog-4.7.md Prepare release Jul 13, 2015 ChangeLog-4.8.md Update ChangeLog Jun 17, 2016 ChangeLog-5.0.md Prepare release Nov 30, 2015 ChangeLog-5.1.md Leftover from d0f7ae4 Feb 2, 2016 ChangeLog-5.2.md Prepare release Mar 15, 2016 ChangeLog-5.3.md Prepare release Jun 3, 2016 ChangeLog-5.4.md Update ChangeLog Jul 13, 2016 ChangeLog-5.5.md Interpret an AssertionError raised by an assert() in the tested code … Jun 14, 2016 LICENSE Bump year Jan 13, 2016 README.md Merge branch '5.0' Aug 31, 2015 build.xml Closes #2219 Jun 16, 2016 composer.json Merge branch '5.4' Jun 11, 2016 phpunit Merge branch '4.8' into 5.0 Aug 10, 2015 phpunit.xml Cleanup Apr 2, 2016 phpunit.xsd Leftover from 42d5920 Jun 4, 2016 README.md PHPUnit PHPUnit is a programmer-oriented testing framework for PHP. It is an instance of the xUnit architecture for unit testing frameworks. Installation We distribute a PHP Archive (PHAR) that has all required (as well as some optional) dependencies of PHPUnit bundled in a single file: $ wget https://phar.phpunit.de/phpunit.phar  $ chmod +x phpunit.phar  $ mv phpunit.phar /usr/local/bin/phpunit You can also immediately use the PHAR after you have downloaded it, of course: $ wget https://phar.phpunit.de/phpunit.phar  $ php phpunit.phar Alternatively, you may use Composer to download and install PHPUnit as well as its dependencies. Please refer to the documentation for details on how to do this. Contribute Please refer to CONTRIBUTING.md for information on how to contribute to PHPUnit and its related projects. List of Contributors Thanks to everyone who has contributed to PHPUnit! You can find a detailed list of contributors on every PHPUnit related package on GitHub. This list shows only the major components: PHPUnit PHP_CodeCoverage PHPUnit_MockObject A very special thanks to everyone who has contributed to the documentation and helps maintain the translations: PHPUnit Documentation Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sebastianbergmann/phpunit"	"A unit testing framework."	"true"
"Testing"	"Prophecy"	"https://github.com/phpspec/prophecy"	"A highly opinionated mocking framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"737"	"49"	"113"	"GitHub - phpspec/prophecy: Highly opinionated mocking framework for PHP 5.3+ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 49 Star 737 Fork 113 phpspec/prophecy Code Issues 50 Pull requests 2 Pulse Graphs Highly opinionated mocking framework for PHP 5.3+ 355 commits 1 branch 20 releases 58 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.6.1 v1.6.0 v1.5.0 v1.4.1 v1.4.0 v1.3.1 v1.3.0 v1.2.1 v1.2.0 v1.1.2 v1.1.1 v1.1.0 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v1.0.0-BETA2 v1.0.0-BETA1 1.1.2 Nothing to show New pull request Latest commit 58a8137 Jun 7, 2016 stof Update the changelog file Permalink Failed to load latest commit information. spec/Prophecy Merge pull request #238 from pamil/splfileobject-supprot May 9, 2016 src/Prophecy Mark tag retrievers as internal Jun 6, 2016 .gitignore Ignore the composer.lock May 27, 2016 .travis.yml Require phpdocumentor/reflection-docblock ^3.0.2 Jun 6, 2016 CHANGES.md Update the changelog file Jun 7, 2016 CONTRIBUTING.md Grammar & Composer deprecation Nov 20, 2015 LICENSE Initial commit Mar 25, 2013 README.md Update README.md Oct 11, 2015 composer.json Require phpdocumentor/reflection-docblock ^3.0.2 Jun 6, 2016 README.md Prophecy Prophecy is a highly opinionated yet very powerful and flexible PHP object mocking framework. Though initially it was created to fulfil phpspec2 needs, it is flexible enough to be used inside any testing framework out there with minimal effort. A simple example <?php  class UserTest extends PHPUnit_Framework_TestCase {     private $prophet;      public function testPasswordHashing()     {         $hasher = $this->prophet->prophesize('App\Security\Hasher');         $user   = new App\Entity\User($hasher->reveal());          $hasher->generateHash($user, 'qwerty')->willReturn('hashed_pass');          $user->setPassword('qwerty');          $this->assertEquals('hashed_pass', $user->getPassword());     }      protected function setup()     {         $this->prophet = new \Prophecy\Prophet;     }      protected function tearDown()     {         $this->prophet->checkPredictions();     } } Installation Prerequisites Prophecy requires PHP 5.3.3 or greater. Setup through composer First, add Prophecy to the list of dependencies inside your composer.json: {     ""require-dev"": {         ""phpspec/prophecy"": ""~1.0""     } } Then simply install it with composer: $> composer install --prefer-dist You can read more about Composer on its official webpage. How to use it First of all, in Prophecy every word has a logical meaning, even the name of the library itself (Prophecy). When you start feeling that, you'll become very fluid with this tool. For example, Prophecy has been named that way because it concentrates on describing the future behavior of objects with very limited knowledge about them. But as with any other prophecy, those object prophecies can't create themselves - there should be a Prophet: $prophet = new Prophecy\Prophet; The Prophet creates prophecies by prophesizing them: $prophecy = $prophet->prophesize(); The result of the prophesize() method call is a new object of class ObjectProphecy. Yes, that's your specific object prophecy, which describes how your object would behave in the near future. But first, you need to specify which object you're talking about, right? $prophecy->willExtend('stdClass'); $prophecy->willImplement('SessionHandlerInterface'); There are 2 interesting calls - willExtend and willImplement. The first one tells object prophecy that our object should extend specific class, the second one says that it should implement some interface. Obviously, objects in PHP can implement multiple interfaces, but extend only one parent class. Dummies Ok, now we have our object prophecy. What can we do with it? First of all, we can get our object dummy by revealing its prophecy: $dummy = $prophecy->reveal(); The $dummy variable now holds a special dummy object. Dummy objects are objects that extend and/or implement preset classes/interfaces by overriding all their public methods. The key point about dummies is that they do not hold any logic - they just do nothing. Any method of the dummy will always return null and the dummy will never throw any exceptions. Dummy is your friend if you don't care about the actual behavior of this double and just need a token object to satisfy a method typehint. You need to understand one thing - a dummy is not a prophecy. Your object prophecy is still assigned to $prophecy variable and in order to manipulate with your expectations, you should work with it. $dummy is a dummy - a simple php object that tries to fulfil your prophecy. Stubs Ok, now we know how to create basic prophecies and reveal dummies from them. That's awesome if we don't care about our doubles (objects that reflect originals) interactions. If we do, we need to use stubs or mocks. A stub is an object double, which doesn't have any expectations about the object behavior, but when put in specific environment, behaves in specific way. Ok, I know, it's cryptic, but bear with me for a minute. Simply put, a stub is a dummy, which depending on the called method signature does different things (has logic). To create stubs in Prophecy: $prophecy->read('123')->willReturn('value'); Oh wow. We've just made an arbitrary call on the object prophecy? Yes, we did. And this call returned us a new object instance of class MethodProphecy. Yep, that's a specific method with arguments prophecy. Method prophecies give you the ability to create method promises or predictions. We'll talk about method predictions later in the Mocks section. Promises Promises are logical blocks, that represent your fictional methods in prophecy terms and they are handled by the MethodProphecy::will(PromiseInterface $promise) method. As a matter of fact, the call that we made earlier (willReturn('value')) is a simple shortcut to: $prophecy->read('123')->will(new Prophecy\Promise\ReturnPromise(array('value'))); This promise will cause any call to our double's read() method with exactly one argument - '123' to always return 'value'. But that's only for this promise, there's plenty others you can use: ReturnPromise or ->willReturn(1) - returns a value from a method call ReturnArgumentPromise or ->willReturnArgument($index) - returns the nth method argument from call ThrowPromise or ->willThrow - causes the method to throw specific exception CallbackPromise or ->will($callback) - gives you a quick way to define your own custom logic Keep in mind, that you can always add even more promises by implementing Prophecy\Promise\PromiseInterface. Method prophecies idempotency Prophecy enforces same method prophecies and, as a consequence, same promises and predictions for the same method calls with the same arguments. This means: $methodProphecy1 = $prophecy->read('123'); $methodProphecy2 = $prophecy->read('123'); $methodProphecy3 = $prophecy->read('321');  $methodProphecy1 === $methodProphecy2; $methodProphecy1 !== $methodProphecy3; That's interesting, right? Now you might ask me how would you define more complex behaviors where some method call changes behavior of others. In PHPUnit or Mockery you do that by predicting how many times your method will be called. In Prophecy, you'll use promises for that: $user->getName()->willReturn(null);  // For PHP 5.4 $user->setName('everzet')->will(function () {     $this->getName()->willReturn('everzet'); });  // For PHP 5.3 $user->setName('everzet')->will(function ($args, $user) {     $user->getName()->willReturn('everzet'); });  // Or $user->setName('everzet')->will(function ($args) use ($user) {     $user->getName()->willReturn('everzet'); }); And now it doesn't matter how many times or in which order your methods are called. What matters is their behaviors and how well you faked it. Arguments wildcarding The previous example is awesome (at least I hope it is for you), but that's not optimal enough. We hardcoded 'everzet' in our expectation. Isn't there a better way? In fact there is, but it involves understanding what this 'everzet' actually is. You see, even if method arguments used during method prophecy creation look like simple method arguments, in reality they are not. They are argument token wildcards. As a matter of fact, ->setName('everzet') looks like a simple call just because Prophecy automatically transforms it under the hood into: $user->setName(new Prophecy\Argument\Token\ExactValueToken('everzet')); Those argument tokens are simple PHP classes, that implement Prophecy\Argument\Token\TokenInterface and tell Prophecy how to compare real arguments with your expectations. And yes, those classnames are damn big. That's why there's a shortcut class Prophecy\Argument, which you can use to create tokens like that: use Prophecy\Argument;  $user->setName(Argument::exact('everzet')); ExactValueToken is not very useful in our case as it forced us to hardcode the username. That's why Prophecy comes bundled with a bunch of other tokens: IdenticalValueToken or Argument::is($value) - checks that the argument is identical to a specific value ExactValueToken or Argument::exact($value) - checks that the argument matches a specific value TypeToken or Argument::type($typeOrClass) - checks that the argument matches a specific type or classname ObjectStateToken or Argument::which($method, $value) - checks that the argument method returns a specific value CallbackToken or Argument::that(callback) - checks that the argument matches a custom callback AnyValueToken or Argument::any() - matches any argument AnyValuesToken or Argument::cetera() - matches any arguments to the rest of the signature StringContainsToken or Argument::containingString($value) - checks that the argument contains a specific string value And you can add even more by implementing TokenInterface with your own custom classes. So, let's refactor our initial {set,get}Name() logic with argument tokens: use Prophecy\Argument;  $user->getName()->willReturn(null);  // For PHP 5.4 $user->setName(Argument::type('string'))->will(function ($args) {     $this->getName()->willReturn($args[0]); });  // For PHP 5.3 $user->setName(Argument::type('string'))->will(function ($args, $user) {     $user->getName()->willReturn($args[0]); });  // Or $user->setName(Argument::type('string'))->will(function ($args) use ($user) {     $user->getName()->willReturn($args[0]); }); That's it. Now our {set,get}Name() prophecy will work with any string argument provided to it. We've just described how our stub object should behave, even though the original object could have no behavior whatsoever. One last bit about arguments now. You might ask, what happens in case of: use Prophecy\Argument;  $user->getName()->willReturn(null);  // For PHP 5.4 $user->setName(Argument::type('string'))->will(function ($args) {     $this->getName()->willReturn($args[0]); });  // For PHP 5.3 $user->setName(Argument::type('string'))->will(function ($args, $user) {     $user->getName()->willReturn($args[0]); });  // Or $user->setName(Argument::type('string'))->will(function ($args) use ($user) {     $user->getName()->willReturn($args[0]); });  $user->setName(Argument::any())->will(function () { }); Nothing. Your stub will continue behaving the way it did before. That's because of how arguments wildcarding works. Every argument token type has a different score level, which wildcard then uses to calculate the final arguments match score and use the method prophecy promise that has the highest score. In this case, Argument::type() in case of success scores 5 and Argument::any() scores 3. So the type token wins, as does the first setName() method prophecy and its promise. The simple rule of thumb - more precise token always wins. Getting stub objects Ok, now we know how to define our prophecy method promises, let's get our stub from it: $stub = $prophecy->reveal(); As you might see, the only difference between how we get dummies and stubs is that with stubs we describe every object conversation instead of just agreeing with null returns (object being dummy). As a matter of fact, after you define your first promise (method call), Prophecy will force you to define all the communications - it throws the UnexpectedCallException for any call you didn't describe with object prophecy before calling it on a stub. Mocks Now we know how to define doubles without behavior (dummies) and doubles with behavior, but no expectations (stubs). What's left is doubles for which we have some expectations. These are called mocks and in Prophecy they look almost exactly the same as stubs, except that they define predictions instead of promises on method prophecies: $entityManager->flush()->shouldBeCalled(); Predictions The shouldBeCalled() method here assigns CallPrediction to our method prophecy. Predictions are a delayed behavior check for your prophecies. You see, during the entire lifetime of your doubles, Prophecy records every single call you're making against it inside your code. After that, Prophecy can use this collected information to check if it matches defined predictions. You can assign predictions to method prophecies using the MethodProphecy::should(PredictionInterface $prediction) method. As a matter of fact, the shouldBeCalled() method we used earlier is just a shortcut to: $entityManager->flush()->should(new Prophecy\Prediction\CallPrediction()); It checks if your method of interest (that matches both the method name and the arguments wildcard) was called 1 or more times. If the prediction failed then it throws an exception. When does this check happen? Whenever you call checkPredictions() on the main Prophet object: $prophet->checkPredictions(); In PHPUnit, you would want to put this call into the tearDown() method. If no predictions are defined, it would do nothing. So it won't harm to call it after every test. There are plenty more predictions you can play with: CallPrediction or shouldBeCalled() - checks that the method has been called 1 or more times NoCallsPrediction or shouldNotBeCalled() - checks that the method has not been called CallTimesPrediction or shouldBeCalledTimes($count) - checks that the method has been called $count times CallbackPrediction or should($callback) - checks the method against your own custom callback Of course, you can always create your own custom prediction any time by implementing PredictionInterface. Spies The last bit of awesomeness in Prophecy is out-of-the-box spies support. As I said in the previous section, Prophecy records every call made during the double's entire lifetime. This means you don't need to record predictions in order to check them. You can also do it manually by using the MethodProphecy::shouldHave(PredictionInterface $prediction) method: $em = $prophet->prophesize('Doctrine\ORM\EntityManager');  $controller->createUser($em->reveal());  $em->flush()->shouldHaveBeenCalled(); Such manipulation with doubles is called spying. And with Prophecy it just works. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phpspec/prophecy"	"A highly opinionated mocking framework."	"true"
"Testing"	"Samsui"	"https://github.com/mauris/samsui"	"Another fake data generator library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"29"	"6"	"1"	"GitHub - mauris/samsui: Samsui is a factory library for building PHP objects useful for setting up test data in your applications. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 29 Fork 1 mauris/samsui Code Issues 0 Pull requests 0 Pulse Graphs Samsui is a factory library for building PHP objects useful for setting up test data in your applications. 284 commits 3 branches 1 release Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master scrutinizer-patch-1 scrutinizer-patch-2 Nothing to show 1.0.0 Nothing to show New pull request Latest commit b59f1b3 Aug 20, 2014 mauris added null check and exception throwing Permalink Failed to load latest commit information. data updated email definition May 20, 2014 src/Samsui added null check and exception throwing Aug 20, 2014 test added more test for Color Aug 20, 2014 .gitignore fixed up gitignore Nov 21, 2013 .travis.yml updated travis config Apr 26, 2014 composer.json added Carbon datetime May 1, 2014 composer.lock added Carbon datetime May 1, 2014 license.md added license file May 1, 2014 readme.md updated readme Aug 20, 2014 readme.md Samsui Samsui is a factory library for building PHP objects useful for setting up test data in your applications. It is mainly inspired by Rosie for JavaScript and factory_girl for Ruby. Samsui women refers to a group of Chinese immigrants who came to Singapore to work in construction and industries. Their hardwork contributed to Singapore's development as a colony and young nation. With Samsui, you can quickly build prototype application and generate as many data as you need for testing your prototype. Samsui was created by and maintained by Sam Yong. Samsui uses Travis CI to check that the code works. Samsui uses [Scrutinizer CI] to check code quality and test coverage. Samsui uses Composer to load and manage its dependencies. Samsui is licensed under the BSD 3-Clause license. Installation Samsui is a PHP library that manages its dependencies using Composer. You can directly use Samsui in your application through Composer: {     ""require"": {       ""mauris/samsui"": ""1.0.*""     } }  Then just run Composer: $ php composer.phar install  Usage You can provide definition of your objects to Samsui: use Samsui\Factory;  $factory = new Factory();  // define an object quickly $factory->define('person')     ->sequence('personId')     ->attr('firstName', 'James')     ->attr('lastName', 'Clark')     ->attr('email', function ($i, $o) {         return strtolower($o->firstName . '.' . $o->lastName . '@example.com');     })     ->attr('createdTime', function () {         return time();     });  You can build one at a time, or hundreds of them on the go! // build them on the go! $person = $factory->build('person');  // or build many!~ $people = $factory->build('person', 500);  The output of a person object would be (well, after JSON encoding): {     ""personId"": ""1"",     ""firstName"": ""James"",     ""lastName"": ""Clark"",     ""email"": ""james.clark@example.com"",     ""createdTime"": ""1383465074"" }  You can also use Samsui's fake data generator to fill your objects with real variety and randomity: use Samsui\Factory; use Samsui\Generator\Generator;  $factory = new Factory();  // define an object quickly $factory->define('person')     ->sequence('personId')     ->attr('firstName', Generator::person()->firstName)     ->attr('lastName', Generator::person()->lastName)     ->attr('email', function ($i, $o) {         return Generator::email()->emailAddress(             array(                 'firstName' => $o->firstName,                 'lastName' => $o->lastName,                 'domains' => array(                     'hotmail.com',                     'gmail.com',                     'example.com'                 )             )         );     })     ->attr('createdTime', function () {         return time();     });  Upcoming Generation of data based on locale (location+language) Implementation of Data Generators for use with attributes Names (different locale) Email addresses Addresses and Postal Codes Age (based on age groups defined) Gender (with Natural Birth Ratio) IP Address v4 and v6 URLs Lorem Ipsum text Date/Times (based on range or sequence) Hash functions output (SHA-1, SHA-256 etc.) GPS latitude / longitude, land coordiates Handphone numbers Colors (RGB array, Hexadecimal) Images (Avatar, Sized) Improved JSON reader Generation of Factory definitions to PHP classes directly Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mauris/samsui"	"Another fake data generator library."	"true"
"Testing"	"VFS Stream"	"https://github.com/mikey179/vfsStream"	"A virtual filesystem stream wrapper for testing."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"631"	"38"	"71"	"GitHub - mikey179/vfsStream: vfsStream is a stream wrapper for a virtual file system that may be helpful in unit tests to mock the real file system. It can be used with any unit test framework, like PHPUnit or SimpleTest. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 38 Star 631 Fork 71 mikey179/vfsStream Code Issues 8 Pull requests 4 Wiki Pulse Graphs vfsStream is a stream wrapper for a virtual file system that may be helpful in unit tests to mock the real file system. It can be used with any unit test framework, like PHPUnit or SimpleTest. http://vfs.bovigo.org/ 421 commits 3 branches 29 releases 18 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags compress_zlib_support linking master Nothing to show v1.6.3 v1.6.2 v1.6.1 v1.6.0 v1.5.0 v1.4.0 v1.3.0 v1.2.0 v1.1.0 v1.1.0-beta1 v1.0.0 v1.0.0-beta5 v1.0.0-beta4 v1.0.0-beta3 v1.0.0-beta2 v1.0.0-beta1 RELEASE-0.11.2 RELEASE-0.11.1 RELEASE-0.11.0 RELEASE-0.10.1 RELEASE-0.10.0 RELEASE-0.9.0 RELEASE-0.8.0 RELEASE-0.7.0 RELEASE-0.6.0 RELEASE-0.5.0 RELEASE-0.4.0 RELEASE-0.3.2 RELEASE-0.3.0 Nothing to show New pull request Latest commit 5f36325 Jun 6, 2016 mikey179 Merge pull request #132 from codeskull/master … Removed ?> and calibrated linebreaks at the end of files Permalink Failed to load latest commit information. examples upgrade examples Jan 14, 2012 src Removed ?> and calibrated linebreaks at the end of files Jun 4, 2016 .coveralls.yml improve coveralls integration Mar 23, 2016 .gitattributes provide tests in export for downstream distributions, fixes #108 Oct 6, 2015 .gitignore fix dependencies Oct 6, 2015 .travis.yml don't allow PHP 7 to fail anymore, finally close #120 Mar 23, 2016 CHANGELOG.md ensure last dir is not skipped if name is '0', fixes #131 Apr 9, 2016 LICENSE raise year Mar 29, 2015 README.md fix badge url Mar 23, 2016 appveyor.yml use x64 version, otherwise large file support can't be tested properly Mar 23, 2016 composer.json raise version because of new unregister feature Oct 6, 2015 composer.lock raise version because of new unregister feature Oct 6, 2015 phpdoc.dist.xml upgrade docblox to phpdoc2 Mar 28, 2012 phpunit.xml.dist add test which reproduces PHP 7 test failure in smallest possible way Jan 5, 2016 README.md You can find documentation in the wiki. Also you might want to check vfsStream examples. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mikey179/vfsStream"	"A virtual filesystem stream wrapper for testing."	"true"
"Testing"	"VFS"	"https://github.com/adlawson/php-vfs"	"Another virtual filesystem for testing."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"280"	"12"	"15"	"GitHub - adlawson/php-vfs: Virtual File System Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 280 Fork 15 adlawson/php-vfs Code Issues 5 Pull requests 1 Pulse Graphs Virtual File System https://packagist.org/packages/adlawson/vfs 61 commits 2 branches 9 releases 4 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop master Nothing to show 0.12.1 0.12.0 0.11.0 0.10.0 0.9.4 0.9.3 0.9.2 0.9.1 0.9.0 Nothing to show New pull request Latest commit 610649d Apr 22, 2016 adlawson Merge pull request #18 from igrizzli/develop … Readdir infinity reading fix Permalink Failed to load latest commit information. example Add eval example Sep 6, 2014 src Fix directory reading. Return FALSE on directory end instead empty st… Apr 21, 2016 test Fix directory reading. Return FALSE on directory end instead empty st… Apr 21, 2016 .gitignore Add windows support. Feb 20, 2016 .travis.yml Update composer on travis install Jul 22, 2015 LICENSE Update license year to 2015 Jul 21, 2015 README.md Add mount to README example Jul 22, 2015 composer.json Set verbose flag on phpunit Jul 24, 2015 phpunit.xml.dist Add `file_get_contents` acceptance tests Sep 6, 2014 README.md VFS (Virtual File System) VFS is a virtual file system for PHP built using the stream wrapper API. Streams are exposed just as typical file:// or http:// streams are to PHP's built-in functions and keywords like fopen and require. This implementation attempts to stay true to the typical streams, including triggering warnings and handling edge cases appropriately. It can be installed in whichever way you prefer, but I recommend Composer. {     ""require"": {         ""adlawson/vfs"": ""*""     } } Documentation After creating and mounting the file system, you have the option of manipulating the virtual file system either via PHP's built-in functions, the VFS interfaces, or interfaces provided by another file system library. <?php use Vfs\FileSystem; use Vfs\Node\Directory; use Vfs\Node\File;  // Create and mount the file system $fs = FileSystem::factory('vfs://'); $fs->mount();  // Add `/foo` and `/foo/bar.txt` $foo = new Directory(['bar.txt' => new File('Hello, World!')]); $fs->get('/')->add('foo', $foo);  // Get contents of `/foo/bar.txt` $fs->get('/foo/bar.txt')->getContent(); // Hello, World! file_get_contents('vfs://foo/bar.txt'); // Hello, World!  // Add `/foo/bar` and `/foo/bar/baz.php` mkdir('vfs://foo/bar'); file_put_contents('vfs://foo/bar.php', '<?php echo ""Hello, World!"";');  // Require `/foo/bar.php` require 'vfs://foo/baz.php';  // Works with any other file system library too $symfony = new Symfony\Component\Filesystem\Filesystem(); $symfony->mkdir('vfs://foo/bar/baz'); $laravel = new Illuminate\Filesystem(); $laravel->isDirectory('vfs://foo/bar/baz'); //true  // Triggers PHP warnings on error just like typical streams rename('vfs://path/to/nowhere', 'vfs://path/to/somewhere'); // PHP Warning: rename(vfs://path/to/nowhere,vfs://path/to/somewhere): No such file or directory in /srv/index.php on line 1; triggered in /srv/src/Logger/PhpErrorLogger.php on line 32 Example use cases If you need to ask what you'd use a virtual file system for, you probably don't need one, but just in case, I've compiled a small list of examples: Testing file system libraries without writing to disc Runtime evaluation without eval (via write and require) ...we need some more! Todo Current tasks are listed on the github issues page, but some are listed here for reference: Symlinks File locks Permissions/ACL Contributing Contributions are accepted via Pull Request, but passing unit tests must be included before it will be considered for merge. $ curl -O https://raw.githubusercontent.com/adlawson/vagrantfiles/master/php/Vagrantfile $ vagrant up $ vagrant ssh ...  $ cd /srv $ composer install $ vendor/bin/phpunit License The content of this library is released under the MIT License by Andrew Lawson. You can find a copy of this license in LICENSE or at http://opensource.org/licenses/mit. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/adlawson/php-vfs"	"Another virtual filesystem for testing."	"true"
"Continuous Integration"	"GitlabCi"	"https://about.gitlab.com/gitlab-ci/"	"Let GitLab CI test, build, deploy your code. TravisCi like."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GitLab Continuous Integration | GitLab Toggle Navigation rainbow-alt-wm-no-bg Download Features Pricing Community Explore Blog Sign In GitLab Continuous Integration GitLab has integrated CI to test, build and deploy your code What Are The Advantages? Integrated: GitLab CI is part of GitLab. You can use it for free on GitLab.com Easy to learn: See our Quick Start guide Beautiful: GitLab CI offers the same great experience as GitLab. Familiar, easy to use, and beautiful. Scalable: Tests run distributed on separate machines of which you can add as many as you want Faster results: Each build can be split in multiple jobs that run in parallel on multiple machines Open source: CI is included with both the open source GitLab Community Edition and the proprietary GitLab Enterprise Edition Features Multi-platform: you can execute builds on Unix, Windows, OSX, and any other platform that supports Go. Multi-language: build scripts are command line driven and work with Java, PHP, Ruby, C, and any other language. Stable: your builds run on a different machine than GitLab. Parallel builds: GitLab CI splits builds over multiple machines, for fast execution. Realtime logging: a link in the merge request takes you to the current build log that updates dynamically. Versioned tests: a .gitlab-ci.yml file that contains your tests, allowing everyone to contribute changes and ensuring every branch gets the tests it needs. Pipeline: you can define multiple jobs per stage and you can trigger other builds. Autoscaling: you can automatically spin up and down VM's to make sure your builds get processed immediately and minimize costs. Build artifacts: you can upload binaries and other build artifacts to GitLab and browse and download them. Test locally there are multiple executors and you can reproduce tests locally. Docker support: you can easily spin up other Docker containers as a service as part of the test and build docker images. Continuous Delivery (CD): Continuous delivery and deployment are easy with multiple types of jobs, and secure environmental variables. Fully integrated with GitLab Fully integrated with GitLab. Quick project setup: Add projects with a single click, all hooks are setup automatically via the GitLab API. Merge request integration: See the status of each build within the Merge Request in GitLab. Architecture GitLab CI is a part of GitLab, a web application with an API that stores its state in a database. It manages projects/builds and provides a nice user interface, besides all the features of GitLab. GitLab Runner is an application which processes builds. It can be deployed separately and works with GitLab CI through an API. In order to run tests, you need at least one GitLab instance and one GitLab Runner. GitLab Runner To perform the actual build, you need to install GitLab Runner which is written in Go. It can run on any platform for which you can build Go binaries, including Linux, OSX, Windows, FreeBSD and Docker. It can test any programming language including .Net, Java, Python, C, PHP and others. GitLab Runner has many features including autoscaling, Install GitLab Runner Help and More Information Please see Getting help for GitLab if you have questions. Propose and discuss new features of CI in the GitLab CE issue tracker and tag them with the 'CI' label. The documentation can be found in the doc for CE. Since version 8.0, GitLab CE/EE and GitLab CI are a single product. Twitter Facebook YouTube LinkedIn Products Community Edition Enterprise Edition GitLab.com Services Pricing Consultancy Development Training Community Core Team Contributors Documentation Getting Help Contributing Applications Hall of Fame Resellers Company Blog Press and Logos Primer About Us Team Jobs Terms Contact Us This page is generated from a public file on GitLab.com — merge requests with improvements are very welcome."	"null"	"null"	"Let GitLab CI test, build, deploy your code. TravisCi like."	"true"
"Continuous Integration"	"Jenkins"	"https://jenkins.io/index.html"	"A continous integration platform with."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"26"	"9"	"82"	"GitHub - jenkins-infra/jenkins.io: A static site for the Jenkins automation server Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 26 Fork 82 jenkins-infra/jenkins.io Code Pull requests 7 Pulse Graphs A static site for the Jenkins automation server https://jenkins.io 934 commits 2 branches 0 releases 48 contributors HTML 60.9% JavaScript 34.6% CSS 3.5% Other 1.0% HTML JavaScript CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 85d8c5c Jul 14, 2016 daniel-beck committed on GitHub Blog post on 2.7.1 re-release (#308) … * Blog post on 2.7.1 re-release  * Rename file for better URL  * Fix grammar Permalink Failed to load latest commit information. content Blog post on 2.7.1 re-release (#308) Jul 14, 2016 gradle/wrapper Upgrade to the latest JRuby/Gradle and Gradle distributions Jul 7, 2016 scripts Add the blog post about EC2 spot fleet Jun 9, 2016 .gitignore code block formatting now consistent Mar 22, 2016 CONTRIBUTING.adoc Remove the sidebar on posts until we can fix the CSS for real (#269) May 27, 2016 Gemfile Add a Gemfile to support the ""advanced"" usage for local building of t… Mar 7, 2016 HANDBOOK.adoc Add a work in progress outline for the handbook Mar 18, 2016 Jenkinsfile Remove our env.BRANCH_NAME guard from the Jenkinsfile May 23, 2016 LICENSE.adoc Introduce code and content licensing for the site Jan 14, 2016 README.adoc Switching URLs to jenkins.io Mar 24, 2016 STYLEGUIDE.adoc Add some notes on syntax/formatting for documentation Apr 11, 2016 build.gradle Upgrade to the latest JRuby/Gradle and Gradle distributions Jul 7, 2016 gradle.properties Remove an old korean-text URL which broke builds on newer JRubies Feb 26, 2016 gradlew Initial commit Oct 12, 2015 gradlew.bat Initial commit Oct 12, 2015 README.adoc jenkins.io This repository is what powers the Jenkins website. This uses awestruct with Asciidoctor under the hood to provide a very useful and compelling web presence for the Jenkins automation server. If you’re interested in contributing to the site, please see our Contributing document Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jenkins-infra/jenkins.io"	"A continous integration platform with."	"true"
"Continuous Integration"	"PHP support"	"http://jenkins-php.org/index.html"	"A continous integration platform with."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Template for Jenkins Jobs for PHP Projects Toggle Navigation Template for Jenkins Jobs for PHP Projects Home Installation Automation Configuration Integration Example Support Template for Jenkins Jobs for PHP Projects Most web applications are changed and adapted quite frequently and quickly. Their environment, for example the size and the behaviour of the user base, are constantly changing. What was sufficient yesterday can be insufficient today. Especially in a web environment it is important to monitor and continuously improve the internal quality not only when developing, but also when maintaining the software. Jenkins is the leading open-source continuous integration server. Thanks to its thriving plugin ecosystem, it supports building and testing virtually any project. The goal of this project is to provide a standard template for Jenkins jobs for PHP projects. Simply follow these four steps to get started: Install the required Jenkins plugins and PHP tools Orchestrate the PHP tools using Apache Ant Configure the PHP tools for use with Jenkins job template Create a Jenkins job for your PHP project The ""Template for Jenkins Jobs for PHP Projects"" by Sebastian Bergmann and his contributors is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License."	"null"	"null"	"A continous integration platform with."	"true"
"Continuous Integration"	"JoliCi"	"https://github.com/jolicode/JoliCi"	"A continuous integration client written in PHP and powered by Docker."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"552"	"51"	"33"	"GitHub - jolicode/JoliCi: JoliCi - Run your TravisCi builds locally Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 51 Star 552 Fork 33 jolicode/JoliCi Code Issues 15 Pull requests 0 Pulse Graphs ✅ JoliCi - Run your TravisCi builds locally 125 commits 2 branches 9 releases Fetching contributors PHP 95.5% HTML 4.5% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/local-services master Nothing to show v0.3.1 v0.3.0 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit c042812 Feb 21, 2016 joelwurtz Merge branch 'master' of github.com:jolicode/JoliCi Permalink Failed to load latest commit information. bin Add update image command Apr 1, 2015 docs Update run.md Aug 8, 2015 resources Update to docker-php stable release Feb 21, 2016 src/Joli/JoliCi Merge branch 'master' of github.com:jolicode/JoliCi Feb 21, 2016 tests/Joli/JoliCi Merge branch 'master' of github.com:jolicode/JoliCi Feb 21, 2016 .gitignore some clean ups Apr 25, 2014 .gush.yml plug .gush.yml and support Gushphp.org Jul 9, 2014 .pharcc.yml some clean ups Apr 26, 2014 .travis.yml Update to docker-php stable release Feb 21, 2016 CHANGELOG.md Preparing v0.3.1 Apr 2, 2015 CONTRIBUTING.md [WIP] Rewriting docs Feb 25, 2015 LICENSE Translate LICENCE in English :) Jul 21, 2014 README.md Preparing v0.3.1 Apr 2, 2015 composer.json Update to docker-php stable release Feb 21, 2016 composer.lock Update to docker-php stable release Feb 21, 2016 phpunit.xml Only generate coverage of the source code Sep 4, 2015 README.md JoliCi JoliCi is a free and open source Continuous Integration Client written in PHP (5.4 minimum) and powered by Docker (please use a recent version). It has been written to be compliant with existent Ci services like Travis-Ci and not create a new standard. (Remove that smile, I KNOW what you're thinking.) This project is still in beta, there may be bugs and missing features  Usage Have a .travis.yml in your project Download the last version of jolici and run it, i.e. for v0.3.1: wget https://github.com/jolicode/JoliCi/releases/download/v0.3.1/jolici.phar php jolici.phar run First run can be quite long since it has to build everything from the beginning. Subsequent build should be faster thanks to docker caching. If you want to see what happens behind this black box: php jolici.phar run -v  Ci supported Travis-Ci ... I want to read more Installation Usage The run command The clean command The images-update command Strategies (a.k.a. how to create a build from a configuration file) Travis-Ci JoliCi Credits All contributors Some parts of this project are inspired by : Docker Client This README is heavily inspired by a @willdurand blog post. @ubermuda for accepting many pull requests on docker-php library License View the LICENSE file attach to this project. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jolicode/JoliCi"	"A continuous integration client written in PHP and powered by Docker."	"true"
"Continuous Integration"	"PHPCI"	"https://www.phptesting.org/"	"An open source continuous integration platform for PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PHPCI - Continuous Integration for PHP Projects Toggle navigation Donate Hosted PHPCI My Account Install Wiki News PHPCI on Github Free and open source continuous integration specifically designed for PHP. Install PHPCI Sign up for Hosted PHPCI Follow @php_ci Tweet PHPCI is a free and open source continuous integration tool specifically designed for PHP. Built with simplicity in mind and featuring integrations with all of your favourite testing tools, we've created the very best platform for testing your PHP projects. What is PHPCI? PHPCI provides a continuous integration platform, allowing you to test that every commit your team makes passes your tests and meets your standards. We've developed a large selection of integrations, all of which are included by default within PHPCI, including: Atoum Behat Campfire Codeception Composer Email Grunt IRC PHP Lint MySQL PDepend PostgreSQL PHP Code Sniffer PHP Copy/Paste Detector PHP Spec PHP Unit Shell Commands Tar / Zip Why PHPCI? Why use PHPCI over an alternative CI solution?   PHPCI Jenkins Travis CI Bamboo Free? Yes Yes Yes No Open Source? Yes Yes Yes No Self Hosted? Yes Yes Yes Yes Hosted Option Available? Yes Yes Yes Yes 2 Minute Setup? Yes No Yes Yes Designed for PHP? Yes No No No Closed-source projects? Yes Yes Paid Yes Written in PHP? Yes No No No Test PHP projects with zero config? Yes No No No Get involved Got any questions, problems or want to contribute? Bug reports and suggestions Please use the Github issue tracker for any bug reports or suggestions you may have. Contributing PHPCI is open source, released under the BSD 2-Clause Licence. We are very supportive of third party contributions, so don't be afraid to submit a pull request. If you don't know what to work on, join us on the mailing list. Subscribe to the PHPCI Newsletter Sign up PHPCI is proudly supported by Block 8 - Macclesfield Web Development Specialists Copyright © 2015, Block 8 Limited Registered in England and Wales, company number: 08189639 Registered office: 1 Park Street, Macclesfield, SK11 6SR"	"null"	"null"	"An open source continuous integration platform for PHP."	"true"
"Continuous Integration"	"SemaphoreCI"	"https://semaphoreci.com/"	"A continuous integration platform for open source and private projects."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Semaphore - Continuous Integration & Deployment Toggle navigation Product Enterprise Pricing Documentation Tutorials Blog Sign In Sign Up Make continuous delivery easy Hosted continuous integration and deployment for fast development cycles and a workflow that scales as you grow. Start Free Account Semaphore helps you work smarter Test your code on every change Automated tests help you find bugs before they reach your users. Semaphore runs over 5,000,000 test files for thousands of projects every day. Deploy quickly and with confidence Provide value to your users faster than ever. Semaphore is already powering over 10,000 critical deployment pipelines. Continuous deployment for Docker containers Semaphore's Docker-optimized platform has all the tools you need to build, run, test and deploy your Docker or rkt containers. Extensive, easily customizable platform Semaphore has out of the box support for 40+ languages and tools. The platform is updated monthly and runs on the latest Ubuntu LTS. Full customization is only one line of Bash away. Simple to use. Flexible to scale. Easy to get started Set up continuous integration from GitHub or Bitbucket in under a minute with just a few clicks. Built to scale As you grow, easily add more capacity and manage your projects with organization accounts. All-round customer support All paid plans provide you with direct contact with the engineering team for quick, quality customer support via email or live chat. Helping successful companies deliver new features every day “We love Semaphore! Really smooth onramp process, getting collaborators from GitHub was a snap and it was easy to get the build running. Kudos!” Rich Thornett, Cofounder, Dribbble See why 500px chose Semaphore for their CI Free continuous integration for open source projects Move your project to Semaphore and experience faster builds with unmatched platform flexibility. CoreOS coreos/rkt Calico calico/calico-docker GitLab gitlabhq/gitlabhq British Antarctic Survey antarctica/ansible-apache Intel Soletta solettaproject/soletta-machine-learning GNU D Compiler d-programming-gdc/gdc Semaphore is the nicest CI I've used. TJ Holowaychuk, open source developer (Apex, Koa.js, Express.js) New to CI or migrating? Let’s talk. Our team is ready to answer your questions and help you get up and running. Get in Touch Subscribe to our newsletter Subscribe © 2009-2016 Rendered Text. All rights reserved. Semaphore Product Enterprise Changelog Pricing Resources Press Contact us Documentation Tutorials Blog API About Our story Company Jobs Terms Privacy Security © 2009-2016 Rendered Text. All rights reserved."	"null"	"null"	"A continuous integration platform for open source and private projects."	"true"
"Continuous Integration"	"Shippable"	"https://app.shippable.com/"	"A docker based continious integration platform for open source and private projects."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Continuous Integration with Docker | Shippable Toggle navigation PRODUCT overview integrations PRICING DOCS BLOG COMPANY LOGIN github bitbucket how continuous delivery is done Deliver apps with the speed and reliability you've always wanted. Learn more GitHub Bitbucket Sign up for free, no credit card required See What's New! Improved predictability for build durations, full CI config within yml, Docker Compose, dedicated build machines, pipeline visualizations. Learn more! The one platform you need to ship code faster any cloud, any datacenter, any combination Easily manage your application pipelines across any cloud, including migrations between clouds, or leverage your existing datacenter investments with hybrid and on-prem configurations. We fit your environment, not the other way around. built for today, ready for tomorrow Whether n-tier applications or a microservices architecture, manage it all with a single platform. Increase dev/test speed with containers now and know you're on the right platform to adopt containers and microservices across all of your environments in the future. integrated, so you can innovate We integrate with the most popular tools and platforms so you don't have to. Free up your development time to spend on product innovation, not CI/CD infrastructure. Leave that to us. Learn more! any cloud, any datacenter, any combination Easily manage your application pipelines across any cloud, including migrations between clouds, or leverage your existing datacenter investments with hybrid and on-prem configurations. We fit your environment, not the other way around. built for today, ready for tomorrow Whether n-tier applications or a microservices architecture, manage it all with a single platform. Increase dev/test speed with containers now and know you're on the right platform to adopt containers and microservices across all of your environments in the future. integrated, so you can innovate We integrate with the most popular tools and platforms so you don't have to. Free up your development time to spend on product innovation, not CI/CD infrastructure. Leave that to us. Learn more! Over 100,000 builds per month by software innovators Chris Kinsman, Chief Architect “With Shippable, our team is out of the business of building and maintaining DevOps plumbing, and can focus on delivering new features to our customers and moving to a single tenant architecture means we consistently get faster builds, which makes our team more productive.” Aaron Welch, Senior Vice President of Product “We use the preview of Shippable’s new build plan, which lets us run builds on our own infrastructure. By pairing the power of Shippable with dedicated hardware, our API build times dropped from 25+ minutes to less than seven minutes, and many other service builds were reduced by over 90%. To put the impact of this change in context, we will save something like 504 hours in 2016, not waiting for builds to finish. That's huge for our developers, and it's huge for our business.” Read the Packet Case Study. Aaron Welch, Senior Vice President of Product “We use the preview of Shippable’s new build plan, which lets us run builds on our own infrastructure. By pairing the power of Shippable with dedicated hardware, our API build times dropped from 25+ minutes to less than seven minutes, and many other service builds were reduced by over 90%. To put the impact of this change in context, we will save something like 504 hours in 2016, not waiting for builds to finish. That's huge for our developers, and it's huge for our business.” How will you use Shippable? Shippable is the continuous delivery platform that helps you ship code faster - try it today or contact us with any questions! Sign up github bitbucket Sign up for free, no credit card required"	"null"	"null"	"A docker based continious integration platform for open source and private projects."	"true"
"Continuous Integration"	"Sismo"	"http://sismo.sensiolabs.org/"	"A continuous testing server library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"634"	"42"	"88"	"GitHub - FriendsOfPHP/Sismo: Your Continuous Testing Server Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 42 Star 634 Fork 88 FriendsOfPHP/Sismo Code Issues 6 Pull requests 0 Pulse Graphs Your Continuous Testing Server http://sismo.sensiolabs.org 253 commits 1 branch 4 releases 40 contributors PHP 96.3% CSS 2.1% HTML 1.5% ApacheConf 0.1% PHP CSS HTML ApacheConf Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.3 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 0b35bd0 Mar 4, 2016 lyrixx feature #131 Implement Logger Notifier (arduanov) … This PR was squashed before being merged into the master branch (closes #131).  Discussion ----------  Implement Logger Notifier  Use Monolog or any other PSR logger as notifier  Commits -------  540a276 Implement Logger Notifier Permalink Failed to load latest commit information. src feature #131 Implement Logger Notifier (arduanov) Mar 4, 2016 tests feature #131 Implement Logger Notifier (arduanov) Mar 4, 2016 web Use PHP CS Fixer and update .travis.yml Nov 17, 2014 .gitignore Ignore composer.phar Aug 2, 2013 .travis.yml updated travis.yml (sudo:false, php versions) Jul 30, 2015 LICENSE updated license year Jan 4, 2013 README.rst remove dev option Jul 27, 2015 compile Fixed typo Feb 18, 2015 composer.json Implement Logger Notifier Mar 4, 2016 composer.lock composer require --dev phpunit/phpunit Aug 2, 2013 phpunit.xml.dist Fixing compilation errors related to outdated code Jun 1, 2012 sismo merged branch davedevelopment/master (PR #54) Jul 28, 2012 README.rst Sismo: Your Continuous Testing Server Sismo is a Continuous Testing Server written in PHP. Unlike more ""advanced"" Continuous Integration Servers (like Jenkins), Sismo does not try to do more than getting your code, running your tests, and send you notifications. What makes Sismo special? Sismo has been optimized to run locally on your computer for your Git projects. Even if it can test remote repositories, Sismo is better used as a local post-commit hook. Whenever you commit changes locally, Sismo runs the tests and give you immediate feedback before you actually push your modifications to the remote repository. So, Sismo is a nice complement to your Continuous Integration Server. Sismo is language and tool agnostic. Just give it a command that knows how to run your tests and returns a non-zero exit code when tests do not pass. Sounds good? There is more. Sismo is insanely easy to install (there is only one PHP file to download), easy to configure, and it comes with a gorgeous web interface. Installation Installing Sismo is as easy as downloading the sismo.php file and put it somewhere under your web root directory. That's it, the CLI tool and the web interface is packed into a single PHP file. Note that Sismo needs at least PHP 5.3.3 to run. Configuration By default, Sismo reads its configuration from ~/.sismo/config.php: <?php  $projects = array();  // create a Growl notifier (for MacOS X) $notifier = new Sismo\Notifier\GrowlNotifier('pa$$word');  // create a DBus notifier (for Linux) //$notifier = new Sismo\Notifier\DBusNotifier();  // create a CrossFinger notifier (notify on failed or recovering build) //$notifier = new Sismo\Contrib\CrossFingerNotifier($notifier); // or if you want to chain multiple notifiers //$notifier = new Sismo\Contrib\CrossFingerNotifier(array($mailNotifier, $myAwesomeNotifier));  // add a local repository hosted on Github $projects[] = new Sismo\GithubProject('Twig (Local)', '/Users/fabien/Twig', $notifier);  // add a remote Github repository $projects[] = new Sismo\GithubProject('Twig', 'twigphp/Twig', $notifier);  // add a project with custom settings $sf2 = new Sismo\Project('Symfony'); $sf2->setRepository('https://github.com/symfony/symfony.git'); $sf2->setBranch('master'); $sf2->setCommand('./vendors.sh; phpunit'); $sf2->setSlug('symfony-local'); $sf2->setUrlPattern('https://github.com/symfony/symfony/commit/%commit%'); $sf2->addNotifier($notifier); $projects[] = $sf2;  return $projects; For notifications, you can also use any Cruise Control ""tray"" software as Sismo also exposes an XML file in the Cruise Control format: http://path/to/sismo.php/dashboard/cctray.xml  Use CCMenu on Mac, CCTray on Windows, JCCTray on Windows or Linux, or CCMonitor for Firefox. Using Sismo Build all configured projects by running the build command: $ php sismo.php build --verbose  If a build fails, Sismo will send notifications. Use the output command to see the latest build output of a project: $ php sismo.php output twig  If you have configured Sismo to be accessible from the web interface, you can also check the build outputs there: If your web server runs under a different user than the one you use on the CLI, you will need to set some environment variables in your virtual host configuration: SetEnv SISMO_DATA_PATH ""/path/to/sismo/data"" SetEnv SISMO_CONFIG_PATH ""/path/to/sismo/config.php"" The build command is quite powerful and has many options. Learn more by appending --help: $ php sismo.php build --help To make Sismo run whenever you commit some changes, save this script in your project as .git/hooks/post-commit and make sure it's executable: #!/bin/sh  nohup php /path/to/sismo.php --quiet --force build symfony-local `git log -1 HEAD --pretty=""%H""` &>/dev/null & symfony-local is the slug of the project. You can also create a post-merge script if you want to run Sismo when you merge branches. If you are running Sismo (with the single PHP file) with PHP 5.4.0, you can use the Sismo build-in web server: $ php sismo.php run localhost:9000 And then open the browser and point it to http://localhost:9000/sismo.php Limitations Sismo is small and simple and it will stay that way. Sismo will never have the following: a queue (if a project is already being built, newer commits are ignored); a web interface for configuration; metrics support; plugin support; other SCM support; slaves support; built-in authentication. ... and probably the feature you have in mind right now and all the ones you will think of later on ;) Tips and Recipes Change the default Location Set the following environment variables to customize the default locations used by Sismo: # in a .htaccess or httpd.conf Apache configuration file  SetEnv SISMO_DATA_PATH ""/path/to/sismo/data"" SetEnv SISMO_CONFIG_PATH ""/path/to/sismo/config.php""  # for the CLI tool  export SISMO_DATA_PATH=/path/to/sismo/data/ export SISMO_CONFIG_PATH=/path/to/sismo/config.php Tracking multiple Branches To track multiple branches of a project, just make their names unique and set the branch name: $projects[] = new Sismo\GithubProject('Twig (master branch)', '/Users/fabien/Twig');  $projects[] = new Sismo\GithubProject('Twig (feat-awesome branch)', '/Users/fabien/Twig@feat-awesome');  Note that Sismo uses the same clone for projects sharing the same repositories URL. Running Sismo for Remote Repositories Using Sismo for remote repositories is as simple as adding the Sismo building tool in a crontab entry: 0 12 * * * php /path/to/sismo.php --quiet  For GitHub projects, and other systems that support post-receive URL hooks, you can set up Sismo to build automatically when a new revision is pushed. You need to set an environment variable in your Apache configuration: # in a .htaccess or httpd.conf Apache configuration file  SetEnv SISMO_BUILD_TOKEN ""YOUR_TOKEN"" You can also set an environment variable in your config file (~/.sismo/config.php): putenv('SISMO_BUILD_TOKEN=YOUR_TOKEN'); Replace YOUR_TOKEN with something more secure, as anyone with this token could use it to trigger builds. Then set your post-receive URL appropriately. For example: http://path/to/sismo.php/your_project/build/YOUR_TOKEN  History in the Web Interface The build history for a project in the web interface is different from the project history. It is sorted in the order of the builds so that the latest build output is always at your fingertips. Adding a Notifier Sismo comes with the most common notifiers but you can create new ones very easily: extend the SismoNotifierNotifier abstract class and implement the notify() method: public function notify(Commit $commit) {     // do something with the commit } The Commit object has many methods that gives you a lot of information about the commit and its build. You can also get general information about the project by calling getProject(). Use Sismo with composer If a majority of your projects use composer, you can configure Sismo to install dependencies before running phpunit. Add the following code to your config file: Sismo\Project::setDefaultCommand('if [ -f composer.json ]; then composer install; fi && phpunit'); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fabpot/Sismo"	"A continuous testing server library."	"true"
"Continuous Integration"	"Travis CI"	"https://travis-ci.org/"	"A continuous integration platform."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"A continuous integration platform."	"true"
"Continuous Integration"	"Wercker"	"http://wercker.com/"	"A continuous integration platform"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"12"	"0"	"GitHub - wercker/support: Wercker Support - Drop your issues and problems that you are running into Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 15 Fork 0 wercker/support Code Issues 90 Pull requests 0 Pulse Graphs Wercker Support - Drop your issues and problems that you are running into 7 commits 2 branches 0 releases Fetching contributors Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master update_readme Nothing to show Nothing to show New pull request Latest commit 7605eb0 Feb 18, 2016 hatchan Create issue_template.md Permalink Failed to load latest commit information. .github Create issue_template.md Feb 18, 2016 README.md Update README.md Oct 9, 2015 README.md Wercker support Join us in our slack room: Checkout the ""Issues"" chapter to report any issues. Feel free to report any feedback as well! team wercker Issues If you are experiencing issues running wercker locally, please create a issue containing the following: Which OS are you using? Which Docker environment are you using? (Boot2docker, custom, etc) Create a gist containing the following information: The entire log when running wercker with the --debug log. (ie. wercker --debug build) The wercker.yml file that causes the issues. If you are experiencing issues running builds or deploys on hosted wercker, please do the following: Try running the build again to see if the error occurs again. If it does, turn on support for the application, and create an issue with the following information: The application owner and application name. The ID of the build or deploy that failed. If you want to create a private bug report do the same as above, but instead create an issue using uservoice. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/wercker/support"	"A continuous integration platform"	"true"
"Security"	"Halite"	"https://paragonie.com/project/halite"	"A simple library for encryption using."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"308"	"24"	"17"	"GitHub - paragonie/halite: High-level cryptography interface powered by libsodium Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 308 Fork 17 paragonie/halite Code Issues 2 Pull requests 0 Pulse Graphs High-level cryptography interface powered by libsodium https://paragonie.com/project/halite 194 commits 5 branches 26 releases 4 contributors PHP 99.0% Shell 1.0% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags mad-science master stable v2.0 v2.1 Nothing to show v2.1.2 v2.1.1 v2.1.0 v2.0.1 v2.0.0 v1.5.0 1.4.0 1.3.2 1.3.1 1.3.0 1.2.0 1.1.0 1.0.0 0.8.1 0.8.0 0.7.0 0.6.0 0.5.2 0.5.1 0.5.0 0.4.0 0.3.2 0.3.1 0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit b42118e Jul 15, 2016 paragonie-security Add password test Permalink Failed to load latest commit information. doc Drop support for Halite v1. Jul 11, 2016 src Deal with character encoding better. Jul 15, 2016 stub This is supposed to be a static method. (Also, fix the Stub constants.) May 7, 2016 test Add password test Jul 15, 2016 .gitignore Get rid of needless interfaces Jan 15, 2016 .travis.yml We don't need to remind people of the 5.x branch anymore. May 7, 2016 CHANGELOG.md Drop support for Halite v1. Jul 12, 2016 LICENSE Initial commit Sep 21, 2015 README.md We don't need to remind people of the 5.x branch anymore. May 7, 2016 autoload.php Add autoloader that doesn't depend on composer. Oct 17, 2015 composer.json Add constant-time encoding as a dependency Jul 11, 2016 README.md Halite Halite is a high-level cryptography interface that relies on libsodium for all of its underlying cryptography operations. Halite was created by Paragon Initiative Enterprises as a result of our continued efforts to improve the ecosystem and make cryptography in PHP safer and easier to implement. It's released under the GPLv3 license. Commercial licenses are available from Paragon Initiative Enterprises if you wish to implement Halite in an application without making your source code available under a GPL-compatible license. Using Halite in Your Applications Install Libsodium and the PHP Extension composer require paragonie/halite Halite Version 2 requires PHP 7.0.0 or newer! Using Halite in Your Project Check out the documentation. The basic Halite API is designed for simplicity: Encryption Symmetric Symmetric\Crypto::encrypt(string, EncryptionKey, bool?): string Symmetric\Crypto::decrypt(string, EncryptionKey, bool?): string Asymmetric Anonymous Asymmetric\Crypto::seal(string, EncryptionPublicKey, bool?): string Asymmetric\Crypto::unseal(string, EncryptionSecretKey, bool?): string Authenticated Asymmetric\Crypto::encrypt(string, EncryptionSecretKey, EncryptionPublicKey, bool?): string Asymmetric\Crypto::decrypt(string, EncryptionSecretKey, EncryptionPublicKey, bool?): string Authentication Symmetric Symmetric\Crypto::authenticate(string, AuthenticationKey, bool?): string Symmetric\Crypto::verify(string, AuthenticationKey, string, bool?): bool Asymmetric Asymmetric\Crypto::sign(string, SignatureSecretKey, bool?): string Asymmetric\Crypto::verify(string, SignaturePublicKey, string, bool?): bool Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/paragonie/halite"	"A simple library for encryption using."	"true"
"Security"	"libsodium"	"https://github.com/jedisct1/libsodium"	"A simple library for encryption using."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3007"	"247"	"400"	"GitHub - jedisct1/libsodium: A modern and easy-to-use crypto library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 247 Star 3,007 Fork 400 jedisct1/libsodium Code Issues 9 Pull requests 0 Pulse Graphs A modern and easy-to-use crypto library. 2,320 commits 4 branches 24 releases 53 contributors C 94.5% Assembly 2.4% M4 1.6% Shell 0.7% Makefile 0.6% Batchfile 0.1% Other 0.1% C Assembly M4 Shell Makefile Batchfile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags arm coverity_scan master stable Nothing to show 1.0.10 1.0.9 1.0.8 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.1 1.0.0 0.7.1 0.7.0 0.6.1 0.6.0 0.5.0 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4 0.3 0.2 0.1 Nothing to show New pull request Latest commit 351ae49 Jul 6, 2016 jedisct1 cpuid is not available on i686-nacl Permalink Failed to load latest commit information. builds Version bump (not released yet) Jun 30, 2016 dist-build CRLF Jun 5, 2016 m4 Import ax_pthread.m4 Apr 19, 2016 msvc-scripts Version bump (not released yet) Jun 30, 2016 packaging/nuget https Apr 12, 2016 src crit_{enter,leave} can fail Jul 6, 2016 test Add dist-build/nativeclient-x86-64.sh Apr 29, 2016 .gitignore Forgot to ignore libsodium-uninstalled.pc Jun 4, 2016 .travis.yml Travis: Limit the double compilation to a single OS Dec 11, 2015 AUTHORS Add crypto_core/curve25519 Mar 16, 2016 ChangeLog Update ChangeLog Jun 29, 2016 LICENSE Add license title Jun 30, 2016 Makefile.am CRLF Mar 17, 2016 README.markdown Link text = ""installation"" only Mar 17, 2016 THANKS THANKS << Scott Arciszewski Nov 28, 2015 appveyor.yml Update appveyor version Apr 4, 2016 autogen.sh pkg-config is not required Dec 25, 2015 configure.ac cpuid is not available on i686-nacl Jul 6, 2016 libsodium-uninstalled.pc.in Update description Mar 17, 2016 libsodium.pc.in Update description Mar 17, 2016 libsodium.sln Retarget the top solution to Visual Studio 2015 Nov 1, 2015 libsodium.vcxproj Add blake2b-compress-avx2.c to the top-level Visual Studio solution Mar 17, 2016 libsodium.vcxproj.filters Add blake2b-compress-avx2.c to the top-level Visual Studio solution Mar 17, 2016 logo.png Larger logo, less prominent saltcellar Apr 19, 2016 README.markdown Sodium is a new, easy-to-use software library for encryption, decryption, signatures, password hashing and more. It is a portable, cross-compilable, installable, packageable fork of NaCl, with a compatible API, and an extended API to improve usability even further. Its goal is to provide all of the core operations needed to build higher-level cryptographic tools. Sodium supports a variety of compilers and operating systems, including Windows (with MingW or Visual Studio, x86 and x64), iOS and Android. Documentation The documentation is a work-in-progress, and is being written using Gitbook: libsodium documentation - online, requires Javascript. offline documentation in PDF, MOBI and ePUB formats. Integrity Checking The integrity checking instructions (including the signing key for libsodium) are available in the installation section of the documentation. Community A mailing-list is available to discuss libsodium. In order to join, just send a random mail to sodium-subscribe {at} pureftpd {dot} org. License ISC license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jedisct1/libsodium"	"A simple library for encryption using."	"true"
"Security"	"HTML Purifier"	"https://github.com/ezyang/htmlpurifier"	"A standards compliant HTML filter."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"745"	"50"	"121"	"GitHub - ezyang/htmlpurifier: Standards compliant HTML filter written in PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 745 Fork 121 ezyang/htmlpurifier Code Issues 13 Pull requests 2 Pulse Graphs Standards compliant HTML filter written in PHP http://htmlpurifier.org 1,512 commits 6 branches 51 releases Fetching contributors PHP 94.5% HTML 4.7% XSLT 0.5% CSS 0.2% JavaScript 0.1% Shell 0.0% PHP HTML XSLT CSS JavaScript Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags hiphop imgcache master pi-tests punycode xml Nothing to show v4.7.0 v4.6.0 v4.5.0 v4.4.0 v4.3.0 v4.2.0 v4.1.1 v4.1.0 v4.0.0 v3.3.0 v3.2.0 v3.1.1.2 v3.1.1.1 v3.1.1 v3.1.0 v3.1.0rc1 v3.0.0 v2.1.5 v2.1.4 v2.1.3 v2.1.3-strict v2.1.2 v2.1.2-strict v2.1.1 v2.1.1-strict v2.1.0 v2.1.0-strict v2.0.1 v2.0.1-strict v2.0.0 v2.0.0-strict v1.6.1 v1.6.1-strict v1.6.0 v1.6.0-strict v1.5.0 v1.5.0-strict v1.4.1 v1.4.1-strict v1.4.0 v1.4.0-strict v1.3.2 v1.3.1 v1.3.0 v1.2.0 v1.1.2 v1.1.1 v1.1.0 v1.0.1 v1.0.0 v1.0.0beta Nothing to show New pull request Latest commit 0166c37 Jul 1, 2016 ezyang Stop trying to chmod if SerializerPermissions is null, fixes #71 … Signed-off-by: Edward Z. Yang <ezyang@cs.stanford.edu> Permalink Failed to load latest commit information. art [2.0.1] Implement haphazard error collection for AttrValidator. Jun 27, 2007 benchmarks Don't use PHP4-style constructors Mar 16, 2016 configdoc Stop trying to chmod if SerializerPermissions is null, fixes #71 Jul 1, 2016 docs tel protocol support. Jun 30, 2016 extras PSR-2 reformatting PHPDoc corrections Aug 17, 2013 library Stop trying to chmod if SerializerPermissions is null, fixes #71 Jul 1, 2016 maintenance Release 4.7.0. Aug 4, 2015 plugins PSR-2 reformatting PHPDoc corrections Aug 18, 2013 smoketests New smoketest for testing configuration HTML form. Jul 1, 2016 tests Partial border-radius support. Jun 30, 2016 .gitattributes Export maintenance and path2class scripts in composer. Mar 24, 2016 .gitignore Improve gitignore. Oct 13, 2013 CREDITS Add vim modelines to all files. Dec 6, 2008 Doxyfile Release 4.7.0. Aug 5, 2015 INSTALL Don't suggest 777, only 775. Mar 27, 2016 INSTALL.fr.utf8 Remove BOM from file INSTALL.fr.utf8 It's only one file with BOM amon… Mar 24, 2016 LICENSE Add vim modelines to all files. Dec 6, 2008 NEWS Hack to fix #85 Jul 1, 2016 README.md Added more info in README Mar 24, 2016 TODO Release 4.7.0. Aug 5, 2015 VERSION Release 4.7.0. Aug 5, 2015 WHATSNEW Release 4.7.0. Aug 5, 2015 WYSIWYG Add vim modelines to all files. Dec 6, 2008 composer.json Revert ""Fix autoloading in Composer."" Jun 14, 2015 package.php Add doxygen doc scripts, and fix package.php Jul 8, 2009 phpdoc.ini Add vim modelines to all files. Dec 6, 2008 release1-update.php Add vim modelines to all files. Dec 6, 2008 release2-tag.php Add vim modelines to all files. Dec 6, 2008 test-settings.sample.php Update to work with Git version of SimpleTest. Mar 24, 2016 README.md HTML Purifier HTML Purifier is an HTML filtering solution that uses a unique combination of robust whitelists and agressive parsing to ensure that not only are XSS attacks thwarted, but the resulting HTML is standards compliant. HTML Purifier is oriented towards richly formatted documents from untrusted sources that require CSS and a full tag-set. This library can be configured to accept a more restrictive set of tags, but it won't be as efficient as more bare-bones parsers. It will, however, do the job right, which may be more important. Places to go: See INSTALL for a quick installation guide See docs/ for developer-oriented documentation, code examples and an in-depth installation guide. See WYSIWYG for information on editors like TinyMCE and FCKeditor HTML Purifier can be found on the web at: http://htmlpurifier.org/ Installation Package available on Composer. If you're using Composer to manage dependencies, you can use $ composer require ""ezyang/htmlpurifier"": ""dev-master""  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ezyang/htmlpurifier"	"A standards compliant HTML filter."	"true"
"Security"	"IniScan"	"https://github.com/psecio/iniscan"	"A tool that scans PHP INI files for security."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1036"	"56"	"76"	"GitHub - psecio/iniscan: A php.ini scanner for best security practices Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 56 Star 1,036 Fork 76 psecio/iniscan Code Issues 14 Pull requests 6 Pulse Graphs A php.ini scanner for best security practices 350 commits 1 branch 22 releases Fetching contributors PHP 99.0% HTML 1.0% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 3.6.4 3.6.3 3.6.2 3.6.1 3.6 3.5 3.4 3.3 3.2 3.1 3.0 2.9 2.8 2.7 2.6 2.5 2.4 2.3 2.2 2.1 2.0 1.0 Nothing to show New pull request Latest commit f83bc6e Mar 24, 2016 enygma Merge pull request #99 from dperjar/master … Corrected session.lazy_write warning text Permalink Failed to load latest commit information. bin adding ""info"" command to the executable Nov 18, 2013 src/Psecio/Iniscan Corrected session.lazy_write warning text Mar 24, 2016 tests/Psecio/Iniscan isVersion was not respecting the version passed by the --php=? CLI op… Jan 29, 2016 .gitignore Added composer option so that bin dir is specified as ./bin Nov 8, 2013 .travis.yml Updated required PHP version for symfony/console and Travis CI Feb 7, 2016 LICENSE updating to correct code violations (formatting mostly) Sep 7, 2014 README.md Update README.md Sep 4, 2015 box.json Add a single executable cli Phar file. Nov 15, 2013 composer.json Updated required PHP version for symfony/console and Travis CI Feb 7, 2016 composer.lock Updated required PHP version for symfony/console and Travis CI Feb 7, 2016 phpunit.xml updating to correct code violations (formatting mostly) Sep 7, 2014 README.md Scanner for PHP.ini The Iniscan is a tool designed to scan the given php.ini file for common security practices and report back results. Currently it is only for use on the command line and reports the results back to the display for both Pass and Fail on each test. Installation Using Composer composer require psecio/iniscan The only current dependency is the Symfony console. Global Composer installation Additionally, you can install it outside of a project with the global functionality Composer provides. From any directory you can use: $ ./composer.phar global require psecio/iniscan $ ~/.composer/vendor/bin/iniscan  Using a single Phar file First make sure you run composer.phar install curl -LSs https://box-project.github.io/box2/installer.php | php php box.phar build  This should result in a iniscan.phar file being created in the root folder. Instead of using vendor/bin/iniscan in the examples use ./iniscan.phar instead. Example vendor/bin/iniscan scan --path=/path/to/php.ini  Results for /private/etc/php.ini: ============ Status | Severity | PHP Version | Key                      | Description ---------------------------------------------------------------------- PASS   | ERROR    |             | session.use_cookies      | Accepts cookies to manage sessions PASS   | ERROR    | 4.3.0       | session.use_only_cookies | Must use cookies to manage sessions, don't accept session-ids in a link  1 passing 2 failure(s)  NOTE: When the scan runs, if it cannot find a setting in the php.ini given, it will use ini_get to pull the current setting (possibly the default). Command line usage Iniscan offers a few commands for both checking and showing the contents of your php.ini. Scan The scan command will be the most used - it runs the rules checks against the given ini file and reports back the results. For example: vendor/bin/iniscan scan --path=/path/to/php.ini  If the path is omitted, iniscan will try to find it based off the current configuration (a ""php -i"" call). By default, this reports back both the pass and fail results of the checks. If you'd like to only return the failures, you can use the fail-only argument: vendor/bin/iniscan scan --path=/path/to/php.ini --fail-only  The scan command will return an exit code based on the results: 0: No errors 1: Failures found Scan Level Threshold You can request the only scan for rules that are on or above a threshold: vendor/bin/iniscan scan --path=/path/to/php.ini --threshold=ERROR  There are 3 levels you can use: WARNING ERROR FATAL (No rules uses that level at the moment) Show The show command lists out the contents of your php.ini file with a bit of extra formatting. vendor/bin/iniscan show --path=/path/to/php.ini  List The list-tests command shows a listing of the current rules being checked and their related php.ini key. vendor/bin/iniscan list-tests  Output formats By default iniscan will output information directly to the console in a human-readable result. You can also specify other output formats that may be easier to parse programatically (like JSON). Use the --format option to change the output: vendor/bin/iniscan show --path=/path/to/php.ini --format=json  the list-tests command also supports JSON output: vendor/bin/iniscan list-tests --path=/path/to/php.ini --format=json  NOTE: Currently, only the scan command supports alternate output formats - console, JSON, XML and HTML. The HTML output option requires an --output option of the directory to write the file: vendor/bin/iniscan scan --format=html --output=/var/www/output  The result will be written to a file named something like iniscan-output-20131212.html Contexts The scanner also supports the concept of ""contexts"" - environments you may be executing the scanner in. For example, in your development environment, it may be okay to have display_errors on. In production, however, this is a bad idea. The scanner's default assumes you're using it in prod, so it uses the strictest checks unless you tell it otherwise. To do so, use the context command line option: vendor/bin/iniscan show --path=/path/to/php.ini --context=dev  In this case, we've told it we're running in dev, so anything that specifically mentions ""prod"" isn't executed. Deprecated reporting As the scanner runs, it will compare the configuration key to a list of deprecated items. If the version is at or later than the version defined in the rules, an error will be shown in the output. For example, in the console, you'd see: WARNING: deprecated configuration items found: -> register_globals It's recommended that these settings be removed as they will be removed from future PHP versions.  This is default behavior and does not need to be enabled. @author Chris Cornutt ccornutt@phpdeveloper.org Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/psecio/iniscan"	"A tool that scans PHP INI files for security."	"true"
"Security"	"Optimus"	"https://github.com/jenssegers/optimus"	"Id obfuscation based on Knuth's multiplicative hashing method."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"470"	"20"	"16"	"GitHub - jenssegers/optimus: Id obfuscation based on Knuth's multiplicative hashing method for PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 470 Fork 16 jenssegers/optimus Code Issues 8 Pull requests 0 Pulse Graphs Id obfuscation based on Knuth's multiplicative hashing method for PHP. https://jenssegers.com 37 commits 1 branch 7 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.2.1 v0.2.0 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 86d94fb Feb 20, 2016 jenssegers Apply PSR2 and reduce phar size … Apply PSR2 and reduce phar size Permalink Failed to load latest commit information. bin Use box to create optimus.phar May 4, 2015 src Apply PSR2 and reduce phar size Feb 20, 2016 tests Apply PSR2 and reduce phar size Feb 20, 2016 .gitattributes Add .gitattributes Sep 24, 2015 .gitignore First version May 3, 2015 .travis.yml Update .travis.yml Dec 6, 2015 README.md Add gmp mode for 32 bit systems, see #12 Oct 28, 2015 box.json Apply PSR2 and reduce phar size Feb 20, 2016 composer.json Apply PSR2 and reduce phar size Feb 20, 2016 optimus Apply PSR2 and reduce phar size Feb 20, 2016 phpunit.xml First version May 3, 2015 README.md Optimus id transformation With this library, you can transform your internal id's to obfuscated integers based on Knuth's integer hash. It is similar to Hashids, but will generate integers instead of random strings. It is also super fast. Installation Install using composer: composer require jenssegers/optimus  For 32 bit systems it is required to install the GMP extension. For debian/ubuntu you can install the extension with: apt-get install php5-gmp  Usage To get started you will need 3 things; Large prime number lower than 2147483647 The inverse prime so that (PRIME * INVERSE) & MAXID == 1 A large random integer lower than 2147483647 Luckily for you, I have included a console command that can do all of this for you. To get started, just run the following command: > php vendor/bin/optimus spark  Prime: 2123809381 Inverse: 1885413229 Random: 146808189  If you prefer to choose your own prime number (from this list for example), you can pass it to the command to calculate the remaining numbers: > php vendor/bin/optimus spark 1580030173  Prime: 1580030173 Inverse: 59260789 Random: 1163945558  Using those numbers, you can start creating instances of Optimus($prime, $inverted, $random): use Jenssegers\Optimus\Optimus;  new Optimus(1580030173, 59260789, 1163945558); NOTE: Make sure that you are using the same constructor values throughout your entire application! Encoding and decoding To encode id's, use the encode method: $encoded = $optimus->encode(20); // 1535832388 To decode the resulting 1535832388 back to its original value, use the decode method: $original = $optimus->decode(1535832388); // 20 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jenssegers/optimus"	"Id obfuscation based on Knuth's multiplicative hashing method."	"true"
"Security"	"PHP Encryption"	"https://github.com/defuse/php-encryption"	"Secure PHP Encryption Library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"837"	"82"	"111"	"GitHub - defuse/php-encryption: Simple Encryption in PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 82 Star 837 Fork 111 defuse/php-encryption Code Issues 6 Pull requests 6 Wiki Pulse Graphs Simple Encryption in PHP. 437 commits 3 branches 6 releases 17 contributors PHP 96.6% Shell 2.6% Makefile 0.8% PHP Shell Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ctr-mode-exception master t278-remove-large-jpg Nothing to show v2.0.1 v2.0.0 v1.2.1 v1.2 v1.1 v1.0 Nothing to show New pull request Latest commit 6aab2f4 Jul 12, 2016 defuse committed on GitHub Merge pull request #279 from defuse/t278-remove-large-jpg … Remove large.jpg Permalink Failed to load latest commit information. dist disable shebang. #269 May 20, 2016 docs Fix mistake in tutorial Jun 22, 2016 src Delete autoload.php and random_compat May 15, 2016 test Remove large.jpg Jul 12, 2016 .gitattributes exclude travis from (github tarball) export May 15, 2016 .gitignore Add signed phar to .gitignore May 16, 2016 .php_cs Exclude random_compat from phpcs Apr 22, 2016 .travis.yml Add phar building to Travis-CI May 16, 2016 LICENSE Remove BSD license comments and fix copyright attribution. Apr 3, 2016 README.md Actually fix the link this time. May 16, 2016 composer.json Increment the version number. May 20, 2016 test.sh update test to check for null output May 20, 2016 README.md php-encryption This is a library for encrypting data with a key or password in PHP. It requires PHP 5.4 or newer. The current version is v2.0.0, which is expected to remain stable and supported by its authors with security and bugfixes until at least January 1st, 2019. The library is a joint effort between Taylor Hornby and Scott Arciszewski as well as numerous open-source contributors. What separates this library from other PHP encryption libraries is, firstly, that it is secure. The authors used to encounter insecure PHP encryption code on a daily basis, so they created this library to bring more security to the ecosystem. Secondly, this library is ""difficult to misuse."" Like libsodium, its API is designed to be easy to use in a secure way and hard to use in an insecure way. Dependencies This library requres no special dependencies except for PHP 5.4 or newer with the OpenSSL extensions enabled (this is the default). It uses random_compat, which is bundled in with this library so that your users will not need to follow any special installation steps. Getting Started Start with the Tutorial. You can find instructions for obtaining this library's code securely in the Installing and Verifying documentation. After you've read the tutorial and got the code, refer to the formal documentation for each of the classes this library provides: Crypto File Key KeyProtectedByPassword If you encounter difficulties, see the FAQ answers. The fixes to the most commonly-reported problems are explained there. If you're a cryptographer and want to understand the nitty-gritty details of how this library works, look at the Cryptography Details documentation. If you're interested in contributing to this library, see the Internal Developer Documentation. Examples If the documentation is not enough for you to understand how to use this library, then you can look at an example project that uses this library: encutil Security Audit Status This code has not been subjected to a formal, paid, security audit. However, it has received lots of review from members of the PHP security community, and the authors are experienced with cryptography. In all likelihood, you are safer using this library than almost any other encryption library for PHP. If you use this library as a part of your business and would like to help fund a formal audit, please contact Taylor Hornby. Public Keys The GnuPG public key used to sign releases is available in dist/signingkey.asc. Its fingerprint is: 2FA6 1D8D 99B9 2658 6BAC  3D53 385E E055 A129 1538  You can verify it against the Taylor Hornby's contact page and twitter. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/defuse/php-encryption"	"Secure PHP Encryption Library."	"true"
"Security"	"PHP IDS"	"https://github.com/PHPIDS/PHPIDS"	"A structured PHP security layer."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"463"	"91"	"148"	"GitHub - PHPIDS/PHPIDS: PHPIDS (PHP-Intrusion Detection System) is a simple to use, well structured, fast and state-of-the-art security layer for your PHP based web application Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 91 Star 463 Fork 148 PHPIDS/PHPIDS Code Issues 27 Pull requests 1 Wiki Pulse Graphs PHPIDS (PHP-Intrusion Detection System) is a simple to use, well structured, fast and state-of-the-art security layer for your PHP based web application 1,167 commits 1 branch 5 releases Fetching contributors PHP 97.6% CSS 2.4% PHP CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.7 0.6.5+pl1 0.6.4 0.6.3.1 0.6.3 Nothing to show New pull request Latest commit dfc1476 Sep 3, 2014 lstrojny Merge pull request #63 from sasezaki/patch-1 … add PHP 5.6 to .travis.yml Permalink Failed to load latest commit information. docs trying to fix example Jun 26, 2013 lib/IDS Add converter and filter to fix sqli bypass May 30, 2014 tests/IDS/Tests Add converter and filter to fix sqli bypass May 30, 2014 tmp Add tmp-folder Feb 6, 2013 .gitignore gitignore: ignore phpunit.xml Feb 6, 2013 .travis.yml add PHP 5.6 to .travis.yml Aug 29, 2014 LICENSE added LGPL license file and changed the file headers Nov 4, 2008 README.md Update README.md Oct 3, 2012 build.xml Quoting version string Oct 3, 2012 composer.json Refactored testsuite to run against JSON and XML rules alike Feb 3, 2013 phpunit.xml.dist Removed unused and duplicated environment vars/constants Feb 10, 2013 README.md PHPIDS PHPIDS (PHP-Intrusion Detection System) is a simple to use, well structured, fast and state-of-the-art security layer for your PHP based web application. The IDS neither strips, sanitizes nor filters any malicious input, it simply recognizes when an attacker tries to break your site and reacts in exactly the way you want it to. Based on a set of approved and heavily tested filter rules any attack is given a numerical impact rating which makes it easy to decide what kind of action should follow the hacking attempt. This could range from simple logging to sending out an emergency mail to the development team, displaying a warning message for the attacker or even ending the user’s session. PHPIDS enables you to see who’s attacking your site and how and all without the tedious trawling of logfiles or searching hacker forums for your domain. Last but not least it’s licensed under the fair LGPL! Contributions If you would like to contribute, please open a pull request. If you need something to do, have a look at our open issues. Credits The project was started by Christian Matthies ch0012@gmail.com and Mario Heiderich mario.heiderich@gmail.com. Mario spend a lot of time maintaining PHPIDS mostly on his own. Huge props for that. Currently Lars Strojny lars@strojny.net merges pull requests. An incomplete list of contributors: LeverOne for his outstanding work, testing and XSS vectors from the depths of markup hell Kishor for providing cutting edge XSS and great help in the group Martin Hinks for great hints, the .NETIDS and help with false positives SirDarckCat for providing XSS so advanced it made us shiver Gareth Heyes for his help enhancing the rules and very creative XSS vectors Kevin Schroeder for the audit and great help on testing and enhancing the PHPIDS xorrer for his help optimizing the rules against his cryptic and sophisticated XSS vectors Johannes Dahse for his help optimizing the SQLI rules Roberto Salgado for helping hardening the SQLI rules with his SQL-Fu tx for even more outstanding SQLI stuff and almost magic PHP code injection vectors Giorgio Maone for redefining the word JavaScript with his vectors thornmaker for submitting smart and very hard to detect JavaScript concatenation vectors Martin Trauth for helping us with the design and giving hints on estate usability Ronald v.d. Heetkamp for helping on the SQLI and XSS detection issues Dan for helping i18n-ing the PHPIDS CrYpTiC_MauleR for providing great hints and XSS magic Robert Hansen for providing (sl|h)a.ckers.org and the XSS cheat sheet beford for providing great hints and esoteric but working XSS Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PHPIDS/PHPIDS"	"A structured PHP security layer."	"true"
"Security"	"PHP SSH"	"https://github.com/Herzult/php-ssh"	"An experimental object orientated SSH wrapper library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"230"	"21"	"57"	"GitHub - Herzult/php-ssh: An experimental object oriented SSH api in PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 230 Fork 57 Herzult/php-ssh Code Issues 12 Pull requests 4 Pulse Graphs An experimental object oriented SSH api in PHP 100 commits 2 branches 6 releases 17 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bug/29 master Nothing to show v1.1.1 v1.1.0 v1.0.1 v1.0.0 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit c56875c Jun 6, 2016 h4cc Merge pull request #55 from Jean85/patch-2 … Test on PHP 7.0 Permalink Failed to load latest commit information. src/Ssh 29 strict output check in scan directory Oct 1, 2015 tests Rely on last command exit status to raise error Mar 17, 2015 .gitignore this is a library Oct 16, 2014 .noninteractive Fix travis conf Jan 27, 2013 .travis.yml Test on PHP 7.0 Jun 3, 2016 LICENSE Add license - close #5 Jan 21, 2013 README.markdown Fix spelling mistakes Jan 28, 2015 composer.json Add branch alias Jun 15, 2014 phpunit.xml.dist First try on functional testing. Mar 5, 2014 README.markdown PHP SSH (master) Provides an object-oriented wrapper for the php ssh2 extension. Requirements You need PHP version 5.3+ with the SSH2 extension. Installation The best way to add the library to your project is using composer. $ composer require herzult/php-ssh:~1.0  Usage Configuration of the connection To establish an SSH connection, you must first define its configuration. For that, create a Configuration instance with all the needed parameters. <?php  // simple configuration to connect ""my-host"" $configuration = new Ssh\Configuration('my-host'); The available configuration classes are: Configuration SshConfigFileConfiguration Both connection configuration and public/private key authentication can be obtained from a ssh config file such as ~/.ssh/config <?php  // simple configuration to connect ""my-host"" $configuration = new Ssh\SshConfigFileConfiguration('/Users/username/.ssh/config', 'my-host'); $authentication = $configuration->getAuthentication('optional_passphrase', 'optional_username'); Create a session The session is the central access point to the SSH functionality provided by the library. <?php  // ... the configuration creation  $session = new Ssh\Session($configuration); Authentication The authentication classes allow you to authenticate over a SSH session. When you define an authentication for a session, it will authenticate on connection. <?php  $configuration = new Ssh\Configuration('myhost'); $authentication = new Ssh\Authentication\Password('John', 's3cr3t');  $session = new Session($configuration, $authentication); The available authentication are: None for username based authentication Password for password authentication PublicKeyFile to authenticate using a public key HostBasedFile to authenticate using a public hostkey Agent to authenticate using an ssh-agent Authentication from SshConfigFileConfiguration If you use an ssh config file you can load your authentication and configuration from it as follows: <?php  $configuration = new Ssh\SshConfigFileConfiguration('~/.ssh/config', 'my-host');  $session = new Session($configuration, $configuration->getAuthentication()); This will pick up your public and private keys from your config file Host and Identity declarations. Subsystems Once you are authenticated over a SSH session, you can use the subsystems. Sftp You can easily access the sftp subsystem of a session using the getSftp() method: <?php  // the session creation  $sftp = $session->getSftp(); See the Ssh\Sftp class for more details on the available methods. Publickey The session also provides the getPublickey() method to access the publickey subsystem: <?php  // ... the session creation  $publickey = $session->getPublickey(); See the Ssh\Publickey class for more details on the available methods. Exec The session provides the getExec() method to access the exec subsystem <?php  // ... the session creation  $exec = $session->getExec();  echo $exec->run('ls -lah'); See the Ssh\Exec class for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Herzult/php-ssh"	"An experimental object orientated SSH wrapper library."	"true"
"Security"	"PHPSecLib"	"http://phpseclib.sourceforge.net/"	"A pure PHP secure communications library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1083"	"95"	"327"	"GitHub - phpseclib/phpseclib: PHP Secure Communications Library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 95 Star 1,083 Fork 327 phpseclib/phpseclib Code Issues 89 Pull requests 4 Wiki Pulse Graphs PHP Secure Communications Library http://phpseclib.sourceforge.net 2,494 commits 3 branches 21 releases 56 contributors PHP 99.7% Shell 0.3% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 2.0 master Nothing to show 2.0.2 2.0.1 2.0.0 1.0.2 1.0.1 1.0.0 0.3.10 0.3.9 0.3.8 0.3.7 0.3.6 0.3.5 0.3.1 0.3.0 0.2.2 0.2.1 0.2.0 0.1.5 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit f7585d9 Jul 10, 2016 terrafrost Merge branch '2.0' Permalink Failed to load latest commit information. build Merge branch 'PSR2-1.0' into PSR2-2.0 Jul 17, 2015 phpseclib Merge branch '2.0' Jul 10, 2016 tests Merge branch '2.0' Jul 10, 2016 travis Revert ""Merge branch '2.0'"" Apr 10, 2016 .gitattributes Revert ""Merge branch '2.0'"" Apr 10, 2016 .gitignore Only apply git ignores relative to repository root. Nov 23, 2013 .travis.yml Travis: a dev dep broke bc by upping the php reqs Jun 22, 2016 AUTHORS Revert ""Merge branch '2.0'"" Apr 10, 2016 CHANGELOG.md CHANGELOG: update for 2.0.2 release Jun 4, 2016 LICENSE Revert ""Merge branch '2.0'"" Apr 10, 2016 README.md Merge branch '2.0' May 7, 2016 composer.json Use paragonie/constant_time_encoding May 21, 2016 composer.lock composer.lock update Jun 18, 2016 phpunit.xml.dist Split Unit/Functional Test Suites. Jun 1, 2014 README.md phpseclib - PHP Secure Communications Library MIT-licensed pure-PHP implementations of an arbitrary-precision integer arithmetic library, fully PKCS#1 (v2.1) compliant RSA, DES, 3DES, RC4, Rijndael, AES, Blowfish, Twofish, SSH-1, SSH-2, SFTP, and X.509 Download (1.0.2) Browse Git Code Coverage Report PEAR Channel: phpseclib.sourceforge.net Documentation Documentation / Manual API Documentation (generated by Sami) Support Need Support? Checkout Questions and Answers on Stack Overflow Create a Support Ticket on GitHub Browse the Support Forum (no longer in use) Installing Development Dependencies Dependencies are managed via Composer. Download the composer.phar executable as per the Composer Download Instructions, e.g. by running curl -sS https://getcomposer.org/installer | php Install Dependencies php composer.phar install Contributing Fork the Project Install Development Dependencies Create a Feature Branch (Recommended) Run the Test Suite vendor/bin/phpunit (Recommended) Check whether your code conforms to our Coding Standards by running vendor/bin/phing -f build/build.xml sniff Send us a Pull Request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phpseclib/phpseclib"	"A pure PHP secure communications library."	"true"
"Security"	"RandomLib"	"https://github.com/ircmaxell/RandomLib"	"A library for generating random numbers and strings."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"474"	"35"	"69"	"GitHub - ircmaxell/RandomLib: A library for generating random numbers and strings Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 474 Fork 69 ircmaxell/RandomLib Code Issues 11 Pull requests 7 Pulse Graphs A library for generating random numbers and strings 56 commits 4 branches 2 releases 17 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 cipher_mixer improved_string_presets master Nothing to show v1.1.0 v1.0.0 Nothing to show New pull request Latest commit 91fec07 Jul 4, 2016 ramsey committed on GitHub Merge pull request #48 from hansott/patch-1 … Add installation instructions Permalink Failed to load latest commit information. lib/RandomLib Consider ""OpenSSL"" source as medium strong prior PHP 5.6.10 Feb 22, 2016 test Reset file permissions to 644 Feb 13, 2015 .gitignore Initial commit of random support Feb 13, 2013 .travis.yml add PHP 5.5, 5.6 to .travis.yml Aug 29, 2014 LICENSE Added license and community information. Jul 30, 2013 README.md Add installation instructions Jul 3, 2016 composer.json Use SecurityLib\Util (squashed commit) Mar 20, 2015 composer.lock Use SecurityLib\Util (squashed commit) Mar 20, 2015 phpunit.xml.dist Initial commit of random support Feb 13, 2013 README.md RandomLib A library for generating random numbers and strings of various strengths. This library is useful in security contexts. Install Via Composer $ composer require ircmaxell/random-lib Usage Factory A factory is used to get generators of varying strength: $factory = new RandomLib\Factory; $generator = $factory->getGenerator(new SecurityLib\Strength(SecurityLib\Strength::MEDIUM)); A factory can be configured with additional mixers and sources but can be used out of the box to create both medium and low strength generators. Convenience methods are provided for creating high, medium, and low strength generators. Example: $generator = $factory->getMediumStrengthGenerator(); $factory->getLowStrengthGenerator() Convenience method to get a low strength random number generator. Low Strength should be used anywhere that random strings are needed in a non-cryptographical setting. They are not strong enough to be used as keys or salts. They are however useful for one-time use tokens. $factory->getMediumStrengthGenerator() Convenience method to get a medium strength random number generator. Medium Strength should be used for most needs of a cryptographic nature. They are strong enough to be used as keys and salts. However, they do take some time and resources to generate, so they should not be over-used $factory->getHighStrengthGenerator() Convenience method to get a high strength random number generator. High Strength keys should ONLY be used for generating extremely strong cryptographic keys. Generating them is very resource intensive and may take several minutes or more depending on the requested size. There are currently no mixers shipped with this package that are capable of creating a high space generator. This will not work out of the box! Generator A generator is used to generate random numbers and strings. Example: // Generate a random string that is 32 bytes in length. $bytes = $generator->generate(32);  // Generate a whole number between 5 and 15. $randomInt = $generator->generateInt(5, 15);  // Generate a 32 character string that only contains the letters // 'a', 'b', 'c', 'd', 'e', and 'f'. $randomString = $generator->generateString(32, 'abcdef'); $generator->generate($size) Generate a random byte string of the requested size. $generator->generateInt($min = 0, $max = PHP_INT_MAX) Generate a random integer with the given range. If range ($max - $min) is zero, $max will be used. $generator->generateString($length, $characters = '') Generate a random string of specified length. This uses the supplied character list for generating the new result string. The list of characters should be specified as a string containing each allowed character. If no character list is specified, the following list of characters is used: 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+/  Examples: // Give the character list 'abcdef': print $generator->generateString(32, 'abcdef').""\n"";  // One would expect to receive output that only contained those // characters: // // adaeabecfbddcdaeedaedfbbcdccccfe // adfbfdbfddadbfcbbefebcacbefafffa // ceeadbcabecbccacdcaabbdccfadbafe // abadcffabdcacdbcbafcaecabafcdbbf // dbdbddacdeaceabfaefcbfafebcacdca License MIT, see LICENSE. Community If you have questions or want to help out, join us in the #php.security channel on irc.freenode.net. Security Vulnerabilities If you have found a security issue, please contact the author directly at me@ircmaxell.com. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ircmaxell/RandomLib"	"A library for generating random numbers and strings."	"true"
"Security"	"SecurityMultiTool"	"https://github.com/padraic/SecurityMultiTool"	"A PHP security library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"108"	"8"	"19"	"GitHub - padraic/SecurityMultiTool: A multitool library offering access to recommended security related libraries, standardised implementations of security defences, and secure implementations of commonly performed tasks. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 108 Fork 19 padraic/SecurityMultiTool Code Issues 2 Pull requests 3 Pulse Graphs A multitool library offering access to recommended security related libraries, standardised implementations of security defences, and secure implementations of commonly performed tasks. 55 commits 1 branch 0 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 0033f35 Feb 11, 2014 padraic Merge pull request #3 from Mischosch/master … bump zendframework/zend-uri to 2.2.* Permalink Failed to load latest commit information. library/SecurityMultiTool Add base redirector test Mar 29, 2013 tests Add base redirector test Mar 29, 2013 .gitignore Add sanitized BBCode parser Mar 18, 2013 LICENSE Add New BSD License Mar 12, 2013 README.md Updated README Mar 18, 2013 composer.json bump zendframework/zend-uri to 2.2.* Aug 16, 2013 README.md SecurityMultiTool A multitool library offering access to recommended security related libraries, standardised implementations of security defences, and secure implementations of commonly performed tasks. The purpose of the library is to serve as both a useful set of utilities and to act as a set of reference implementations which can be learned from. It may be used by applications regardless of whether they are web application framework based or not. The use of a web application framework does not guarantee your security. Yet Another Security Library? There are actually few security related metapackages available in PHP and many are outdated and/or insecure. Feeding this problem is a lack of concrete information about best practices in PHP. SecurityMultiTool extracts source code, patterns and best practices from a variety of sources to offer a singular point of reference. The source code will be opinionated. For example, SecurityMultiTool\Html\Sanitizer uses HTMLPurifier and does not allow for that dependency to be substituted (because there is NO other secure HTML sanitizer in PHP!). You may choose to use SecurityMultiTool as a dependency in your projects. You can use it as a useful set of examples of what you should be doing. You can use it as a benchmark to check if your own code and its dependencies are straying from the recommended path. You can copy and paste the code to fit your needs (and I won't go beserk if you don't attribute me). You can pass around URLs to the code, if useful, to recommend improved practices to others. I'm more than happy to accept PRs for new features with the understanding that they should be rigorously tested, provably secure and in compliance with secure practices. Current Features The following features are available and tested as of 18 March 2013: HTML Output Escaping (SecurityMultiTool\Html\Escaper) HTML Sanitization (SecurityMultiTool\Html\Sanitizer) Random Number/Bytes Generator (SecurityMultiTool\Random\Generator) HTTP Strict-Transport-Security & X-CSRFToken Headers (SecurityMultiTool\Http\Header) HTTPS Detector (SecurityMultiTool\Http\HttpsDetector) Sanitized Markdown and BBCode Parsers (SecurityMultiTool\Markdown|BBcode\Parser) Anti Timing-Attack String Comparison (SecurityMultiTool\String\FixedTimeComparison) The following libraries are dependencies installed with SecurityMultiTool which you may use independently of SecurityMultiTool: HTMLPurifier http://www.htmlpurifier.org RandomLib https://github.com/ircmaxell/RandomLib There is a lot more to come! Reporting Security Vulnerabilities If you locate a potential vulnerability in the source code, you should report it directly to padraic.brady@gmail.com. I undertake to resolve any such reports within 30 days of receipt and I will confirm receipt of any report within 3 days. Any resolving source code will be made available to the reporter for review prior to it being committed to this repository. You are free to publicly disclose any vulnerability, once fixed or after any period you require when sending a report, as you should already know. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/padraic/SecurityMultiTool"	"A PHP security library."	"true"
"Security"	"SensioLabs Security Check"	"https://security.sensiolabs.org/"	"A web tool to check your Composer dependencies for security advisories."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"536"	"84"	"72"	"GitHub - FriendsOfPHP/security-advisories: A database of PHP security advisories Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 84 Star 536 Fork 72 FriendsOfPHP/security-advisories Code Issues 4 Pull requests 6 Pulse Graphs A database of PHP security advisories http://security.sensiolabs.org 345 commits 3 branches 0 releases 44 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags license master revert-97-fixing_dates Nothing to show Nothing to show New pull request Latest commit eff0d01 May 25, 2016 fabpot Merge pull request #149 from cedricziel/typo3 … Add TYPO3 CMS vulnerability Permalink Failed to load latest commit information. aws/aws-sdk-php be more strict with the YAML syntax being used Dec 12, 2015 cakephp/cakephp be more strict with the YAML syntax being used Dec 12, 2015 codeigniter/framework Correcting syntax error in `codigniter/framework` advisories Dec 12, 2015 composer/composer add CVE-2015-8371.yaml Feb 14, 2016 contao/core be more strict with the YAML syntax being used Dec 12, 2015 doctrine Correcting syntax error in `doctrine/doctrine-bundle` advisories Dec 12, 2015 dompdf/dompdf Add more “disclosed” dompdf issues Feb 6, 2016 firebase/php-jwt Add the advisory for the firebase/php-jwt vulnerability Apr 2, 2015 friendsofsymfony be more strict with the YAML syntax being used Dec 12, 2015 illuminate be more strict with the YAML syntax being used Dec 12, 2015 joomla/session Correct version Dec 14, 2015 laravel be more strict with the YAML syntax being used Dec 12, 2015 monolog/monolog be more strict with the YAML syntax being used Dec 12, 2015 namshi/jose be more strict with the YAML syntax being used Dec 12, 2015 oro be more strict with the YAML syntax being used Dec 12, 2015 phpmailer/phpmailer Add CVE-2015-8476 in PHPMailer Mar 7, 2016 pusher/pusher-php-server Add the advisory for the pusher-php-server vulnerability May 15, 2015 sabre/dav be more strict with the YAML syntax being used Dec 12, 2015 shopware/shopware Add CVE identifier for shopware/shopware Vulnerability Apr 25, 2016 silverstripe Adding latest silverstripe notices Mar 6, 2016 simplesamlphp/simplesamlphp Remove the 1.14 branch, not really needed. Mar 15, 2016 socalnick/scn-social-auth ScnSocialAuth XSS Vulnerability Jan 15, 2015 swiftmailer/swiftmailer be more strict with the YAML syntax being used Dec 12, 2015 symfony add CVE-2403 May 10, 2016 thelia be more strict with the YAML syntax being used Dec 12, 2015 twig/twig be more strict with the YAML syntax being used Dec 12, 2015 typo3 Add TYPO3 CMS vulnerability May 24, 2016 willdurand/js-translation-bundle Add entry for willdurand/js-translation-bundle Jul 29, 2014 yiisoft be more strict with the YAML syntax being used Dec 12, 2015 zendframework adds ZF2016-01: Potential Insufficient Entropy Vulnerability in ZF1 Apr 20, 2016 zf-commons/zfc-user Add CVE Jan 13, 2015 zfcampus/zf-apigility-doctrine be more strict with the YAML syntax being used Dec 12, 2015 zfr/zfr-oauth2-server-module Fix package name inconsistencies May 20, 2015 .gitignore Remove lock file Oct 29, 2015 .travis.yml Switch to the docker-based infrastructure on Travis Aug 12, 2015 LICENSE added the missing license Oct 26, 2014 README.md be more strict with the YAML syntax being used Dec 12, 2015 composer.json Add formatting to the validator Apr 18, 2016 validator.php Add formatting to the validator Apr 18, 2016 README.md PHP Security Advisories Database The PHP Security Advisories Database references known security vulnerabilities in various PHP projects and libraries. This database must not serve as the primary source of information for security issues, it is not authoritative for any referenced software, but it allows to centralize information for convenience and easy consumption. License The PHP security advisories database is free and unencumbered software released into the public domain. Browsing Vulnerabilities You can browse the database entries on https://security.sensiolabs.org/database. Checking for Vulnerabilities There are several possibilities to check for vulnerabilities in your applications beside manual checks: Upload your composer.lock file on https://security.sensiolabs.org/; Use the CLI tool: php checker security:check /path/to/composer.lock  Use the web service: curl -H ""Accept: text/plain"" https://security.sensiolabs.org/check_lock -F lock=@/path/to/composer.lock  It will return all vulnerabilities detected in your dependencies in plain text. You can also retrieve the information in the JSON format: curl -H ""Accept: application/json"" https://security.sensiolabs.org/check_lock -F lock=@/path/to/composer.lock  Contributing Contributing security advisories is as easy as it can get: You can contribute a new entry by sending a pull request or by creating a file directly via the Github interface; Create a directory based on the Composer name of the software where the security issue exists (use symfony/http-foundation for an issue in the Symfony HttpFoundation component for instance); Each security issue must be saved in a file where the name is the CVE identifier (preferred) or the date when the security issue was announced followed by an increment (2012-12-12-1 for instance); The file is in the YAML format and must contain the following entries (have a look at existing entries for examples): title: A text that describes the security issue in a few words; link: A link to the official security issue announcement; reference: A unique reference to identify the software (the only supported scheme is composer:// followed by the Composer identifier); branches: A hash of affected branches, where the name is the branch name (like 2.0.x), and the value is a hash with the following entries: time: The date when the security issue was fixed (most of the time the date of the commit that fixed the issue (2012-08-27 19:17:44) -- this information must be as accurate as possible as it is used to determined if a software is affected or not; versions: An array of constraints describing affected versions for this branch (this is the same format as the one used for Composer -- ['>=2.0.0', '<2.0.17']). If you have a CVE identifier, add it under the cve key. Make sure your file validates by running php validator.php from the root of this project. This script needs some dependencies to be installed via composer, so you need to run composer install before. If some affected code is available through different Composer entries (like when you have read-only subtree splits of a main repository), duplicate the information in several files. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sensiolabs/security-advisories"	"A web tool to check your Composer dependencies for security advisories."	"true"
"Security"	"TCrypto"	"https://github.com/timoh6/TCrypto"	"A simple encrypted key-value storage library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"48"	"5"	"10"	"GitHub - timoh6/TCrypto: TCrypto is a simple and flexible PHP 5.3+ in-memory key-value storage library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 48 Fork 10 timoh6/TCrypto Code Issues 0 Pull requests 0 Pulse Graphs TCrypto is a simple and flexible PHP 5.3+ in-memory key-value storage library 112 commits 1 branch 1 release Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.9 Nothing to show New pull request Latest commit 987aedb May 26, 2016 timoh6 Add installation note about Composer Permalink Failed to load latest commit information. bin Rename Keytool config file Aug 28, 2012 library/TCrypto Fix PHP 7 incompatibilities Dec 4, 2015 tests File missing from commit Dec 4, 2015 .travis.yml Add PHP 7 on Travis Dec 4, 2015 LICENSE Updated LICENSE, fixed typo (@thows => @throws) Dec 5, 2011 README.markdown Add installation note about Composer May 26, 2016 composer.json Add composer.json Mar 16, 2012 phpunit.xml.dist Rename phpunit.xml Aug 9, 2012 README.markdown About TCrypto is a simple and flexible PHP 5.3+ in-memory key-value storage library. By default, a cookie will be used as a storage backend. TCrypto has been designed from the ground up with security in mind. Safe algorithms and modes. Automatic and safe initialization vector creation. Encryption and authentication key creation (Keytool) using strong randomness. Key rotation (versioned keys). TCrypto can be used as a scalable ""session handler"". Especially scalable, if cookies are used as a storage backend. This is a bit like Ruby on Rails sessions. There's an article outlining basic TCrypto usage at websec.io: TCrypto: Encrypted data storage for PHP applications This is a preview release (although considered stable). Keyfile encryption will be available in version 1.0.0. Otherwise no other changes are planned between current dev-master and 1.0.0. Important security note about data compression: Prior to August 6 2013, TCrypto allowed to use data compression when the data was also being encrypted. This may lead to disclosure of the (confidential) plain text. All TCrypto users are encouraged to update to the current dev-master. Especially if CompressPlugin() was used with data encryption. TCrypto is placed in the public domain. Requirements TCrypto requires PHP version 5.3 or greater. To use encryption, either Mcrypt or OpenSSL extension must be available. If OpenSSL is used for encryption, PHP 5.3.3 or greater is required. Optional compression plugin requires zlib. Installation note TCrypto supports installation using Composer, but make sure you use at least Composer version 1.0.0-beta1 to install TCrypto (Composer was vulnerable to MITM attacks before 1.0.0-beta1): tcrypto/tcrypto Backward incompatible changes 04 Dec 2015 String() StorageHandler was renamed to PlainString(). TCrypto Keymanager and Keytool Keytool is a small command-line application, which is used to create encryption and authentication keys. Keytool can also be used to remove inactive keys. Before you start using TCrypto, run Keytool and create your first set of keys: $ cd /path/to/TCrypto/bin $ php keytool  Make sure the right keyfile is selected (if necessary, change keyfile) and select option 1 ""Add new keys"". To remove inactive keys, run Keytool and select option 2 ""Remove inactive keys"". You should always remove inactive keys before you add new keys. This is because inactive keys are determined comparing the (current) primary key timestamp and key lifetime (keys that can not be active are removed). There are a few Keytool settings you can tweak. File TCrypto/bin/keytool.config.php: 'keyfile_permissions': the default filesystem permissions for the keyfile 'bytes_in_key_name': key name length 'key_max_lifetime': this should be the same as $_macMaxLifetime in TCrypto 'keyfile_location': the default keyfile location If you remove or comment out 'keyfile_permissions' setting, chmod() won't be run at all for the keyfile. Keytool stores keys as a plain PHP array. The key format is as follows: <?php array (   'tcrypto_key_data' =>    array (     'keys' =>      array (       'index_xxx' =>        array (         'encryption' => 'key_xxx',         'authentication' => 'key_xxx',         'time' => xxx,       ),     ),     'meta_data' =>      array (       'primary_index' => 'index_xxx',       'last_key_creation_time' => xxx,     ),   ), ); 'index_xxx' means a unique array index. Keytool will (by default) use 3 bytes of entropy in a key name (hexadecimal format). 3 bytes can produce about 4096 distinct keys without collisions. Given that you should probably have no more than a few keys in your keyfile, 3 bytes of entropy in a key name will be easily enough. 'meta_data' is used to identify the current primary key index. There can be multiple keys in the 'keys' array. However, you should remove constantly inactive keys (to avoid filling your key file with ""junk""). It is a good idea to always remove inactive keys before you add new keys. Examples <?php require '/path/to/library/TCrypto/Loader.php'; $loader = new TCrypto\Loader(); $loader->register(); <?php // Keymanager handles encryption/authentication keys. By default, Filesystem() // method looks the keyfile from `TCrypto/Keystore/default` file. If you want to use // another keyfile, simply give the full path of the keyfile to Filesystem()'s // constructor. E.g. // $keymanager = new TCrypto\KeyManager\Filesystem('/path/to/keyfile'); $keymanager = new TCrypto\KeyManager\Filesystem(); // You can also inject the key data as a plain PHP array using setKeysAsArray(): // $keymanager->setKeysAsArray(array('tcrypto_key_data'...));  // The data will be stored to a cookie. $storage = new TCrypto\StorageHandler\Cookie(); // You can pass a boolean false as the first parameter for Cookie, // this makes it possible to use cookies even if there is no HTTPS connection, // although this is not recommended. // The second parameter for Cookie specifies the name of the cookie. // $storage = new TCrypto\StorageHandler\Cookie(false, 'my_cookie_name');  // or, to get TCrypto payload immediately back as a string: // $storage = new TCrypto\StorageHandler\PlainString(); // $tcryptoPayload = $tcrypto->save(); // To feed back previously used TCrypto payload, pass it as a first argument to PlainString(): // $storage = new TCrypto\StorageHandler\PlainString($tcryptoPayload);  // In short, you can save TCrypto payload to, say, a database // (without the need to use a specific database StorageHandler). // Then you can fetch the TCrypto payload from the database, and // feed it back into TCrypto. // NOTE, using PlainString() StorageHandler will make // $tcrypto->save() to output the actual payload.  // Initialize encryption using either OpenSSL or Mcrypt (optional). $crypto = new TCrypto\CryptoHandler\OpenSslAes128Cbc(); // or $crypto = new TCrypto\CryptoHandler\OpenSslAes256Cbc(); // or $crypto = new TCrypto\CryptoHandler\McryptAes128Cbc(); // or $crypto = new TCrypto\CryptoHandler\McryptAes256Cbc();  // Initialize the default plugin (serialize/unserialize). $plugins = new TCrypto\PluginContainer();  // Attach an extra plugin (compress/uncompress) (optional). $plugins->attachPlugin(new TCrypto\Plugin\CompressPlugin());  // Available options: // (array) 'entropy_pool' // (int) 'max_lifetime' // (bool) 'save_on_set' $options = array('max_lifetime' => 6400);  // Create a new Crypto instance and inject the needed dependencies. $tcrypto = new TCrypto\Crypto($keymanager, $storage, $plugins, $crypto, $options);  // If you create a new TCrypto instance without passing any of the dependencies, // e.g. $tc = new TCrypto\Crypto(), TCrypto will use the following defaults: // $keyManager = new KeyManager\Filesystem(); // Uses the default keyfile. // $storage = new StorageHandler\Cookie(); // Requires HTTPS connection. // $plugins = new PluginContainer(); // Default serialize/unserialize plugin. // $crypto = null // No encryption. // $options = array() // No options are modified.  // Value can be any serializable data type.  $tcrypto->setValue('key', 'value'); $tcrypto->setValue('object', new stdClass()); $tcrypto->removeValue('object');  echo $tcrypto->getValue('key'); // ""value"" echo $tcrypto->getValue('object'); // ""NULL""  // Saves the data to a storage. $tcrypto->save(); // If PlainString() StorageHandler is being used, $tcrypto->save() will output // the TCrypto payload (you need to store the payload by some other means).  // Destroys the data both from memory and storage. $tcrypto->destroy(); About symmetric encryption Currently there are four choices for an encryption provider: Crypto\CryptoHandler\OpenSslAes128Cbc Crypto\CryptoHandler\McryptAes128Cbc  and Crypto\CryptoHandler\OpenSslAes256Cbc Crypto\CryptoHandler\McryptAes256Cbc  OpenSslAes128Cbc/McryptAes128Cbc and OpenSslAes256Cbc/McryptAes256Cbc both implement AES in CBC mode using a random initializing vector. Only the key size differs between them. 128-bit key size should be unbreakable with foreseeable technology. But on the other hand, 256-bit keys provides more margin of security (against side channels etc.). Encrypting with 128-bit keys should be somewhat faster than encrypting with 256-bit keys. However, in a typical web application usage scenario, this speed difference is probably insignificant. If you feel paranoid (the bigger, the better fetish), use McryptAes256Cbc. Otherwise use McryptAes128Cbc. TCrypto derives encryption keys from variable data (timestamps, initializing vector, key seeds and user supplied extra entropy sources). This guarantees that a fresh and random key will be used for each encryption operation. The key setup combined with (truncated) SHA512 hashing ensures (currently known) related-key attacks does not apply against AES-256 (McryptAes256Cbc). If your system supports OpenSSL, use OpenSSL based encryption (OpenSslAes128Cbc or OpenSslAes256Cbc). Plugins TCrypto comes with a simple ""plugin system"". Plugins are run in two separate places. Before saving the data to a storage. After extracting the data from a storage (plugins are run in reverse order). It is important to note that you can not use data compression plugins if you are using data encryption. If you configure TCrypto to use data compression at the same time data is being encrypted, the PluginContainer will automatically skip data compression plugins. This is important because compressing confidential (encrypted) data may leak information about the plain text. This creates the required serialize/unserialize plugin: <?php // PluginContainer() automatically attaches DefaultPlugin(), which handles // serializing and unserializing. $plugins = new TCrypto\PluginContainer(); You can also attach more plugins: <?php // NOTE: CompressPlugin will not be run if data encryption is being used. // This is because data compression leaks information about the plain text. $plugins->attachPlugin(new TCrypto\Plugin\CompressPlugin()); Now the data will be first serialized and then compressed (when saving). When extracting the data from a storage, the data will be first uncompressed and then unserialized. NOTE: $plugins->attach() is not supported anymore. Use $plugins->attachPlugin() instead of $plugins->attach(). Security notes Keystore TCrypto Keytool will write all encryption/authentication keys to a filesystem. Make sure this keyfile can not be read by anyone else. It is probably a good idea to use chmod 0600 setting for the keyfile (depending on your server settings). Cookies as a storage backend By default, TCrypto uses browser cookies as a ""permanent"" storage backend. If you do not use encryption, anyone who you send the data can read (but not modify) it. It is up to you to decide does the data need to be encrypted. It should be pointed out that TCrypto does not address replay of old cookies. Legitimate client can send previous (old) cookies within the ""max_lifetime"" period. HTTPS connection is another important concern about browser cookies. If there is no ""secure connection"", the data may be captured (and replayed) by whoever is eavesdropping on the line. Plugins When extracting the data from a storage, an HMAC value will be checked BEFORE the plugins are run. This could potentially lead to bugs or security issues. If you use any extra plugins, make sure they operate correctly. Issues or questions? Mail me at timoh6@gmail.com or use GitHub. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/timoh6/TCrypto"	"A simple encrypted key-value storage library."	"true"
"Security"	"True Random"	"https://github.com/pixeloution/true-random"	"A library that generates random numbers using."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"36"	"4"	"3"	"GitHub - pixeloution/true-random: Fetches random integers from random.org instead of using PHP's PRNG implementation Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 36 Fork 3 pixeloution/true-random Code Issues 1 Pull requests 0 Pulse Graphs Fetches random integers from random.org instead of using PHP's PRNG implementation 25 commits 2 branches 1 release 1 contributor PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master v2api Nothing to show 1.0.0 Nothing to show New pull request Latest commit a7209f6 Jul 20, 2013 pixeloution update README Permalink Failed to load latest commit information. src/Pixeloution/Random default value for UA email, remove userAgent method Jul 20, 2013 tests added tests both with and without network access Jul 20, 2013 .gitignore added composer.lock to .gitignore Jul 20, 2013 README.md update README Jul 20, 2013 composer.json update composer.json; set min-php version == to guzzle's, add descrip… Jul 20, 2013 phpunit.xml added tests both with and without network access Jul 21, 2013 README.md TrulyRandom Composer-compatible library to interact with random.org's API in order to generate truly random lists of integers, sequences of integers, and random alpha-numeric strings. Random.org does limit the amount of random numbers/strings you can generate in a day, and this program will check your remaining quota before sending requests. If you need more than the free allowance, there are instructions on random.org for purchasing additional. I have nothing to do with random.org other then thinking its a cool service. Installation Install via Packagist ""require"" :  {    ""pixeloution/true-random"" : ""*""  },  in your composer.json file Set-Up use Pixeloution\Random\Randomizer;  # takes a partial User Agent as an argument; random.org requests you use your # email address in case of issues $generator = new Randomizer( 'name@example.com' );  Generate Lists of Integers Returns an array of non-unique integers between min, max $generator->integers( $minimum_value, $maximum_value, $quantity );  Generate A Sequence of Integers Returns an array of a integers from $start to $end, each integer appearing once. $generator->sequence( $start, $end );  Generate a list of random strings Returns an array of strings $length characters long, made up of character types specified via bitwise options. The default value is ALL ^ UNIQUE Options are: Randomizer::DIGITS Randomizer::UPPERCASE Randomizer::LOWERCASE Randomizer::UNIQUE Randomizer::ALL Some examples: # returns all strings containing uppercase and lowercase only $generator->strings( $len, $qty, Randomizer::UPPERCASE | Randomizer::LOWERCASE );  # returns lowercase strings, no repeated letters $generator->strings( $len, $qty, Randomizer::LOWERCASE | Randomizer::UNIQUE );  # returns uppercase, lowercase, numeric with non-unique charaters. this is the default $generator->strings( $len, $qty, Randomizer::ALL ^ Randomizer::UNIQUE );      Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pixeloution/true-random"	"A library that generates random numbers using."	"true"
"Security"	"www.random.org"	"https://www.random.org/"	"A library that generates random numbers using."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"RANDOM.ORG - True Random Number Service Home Games Lottery Quick Pick Keno Quick Pick Coin Flipper Dice Roller Playing Card Shuffler Birdie Fund Generator Numbers Integers Sequences Integer Sets Gaussian Numbers Decimal Fractions Raw Bytes Lists & More List Randomizer Strings Passwords Clock Times Calendar Dates Geographic Coordinates Bitmaps Hex Color Codes Pregenerated Files Jazz Scales Pure White Audio Noise Samuel Beckett Drawings How to Pick a Winner (FREE) Third-Party Draw Service Step by Step Guide Step by Step Video Price Calculator Public Records Terms and Conditions Drawing FAQ Web Tools Widgets for Your Pages API for Automated Clients Old API for Automated Clients Old Guidelines for Automated Clients Banned Hosts Statistics Real-Time Statistics Graph Browser Testing Random Numbers Total Bit Tally Your Quota Testimonials Lotteries and Drawings Games and Gambling Random Sampling Simulation and Modelling Security The Arts Miscellaneous Learn More About & Contact Terms and Conditions FAQ Introduction to Randomness History of RANDOM.ORG Acknowledgements Media and Scientific Citations Newsletter Quotations about Randomness What's New! Login Search RANDOM.ORG   True Random Number Service Warning: Your browser does not support JavaScript – RANDOM.ORG may not work as expected Do you own an iOS or Android device? Check out our app! The numbers generated by this widget come from RANDOM.ORG's true random number generator. What's this fuss about true randomness? Perhaps you have wondered how predictable machines like computers can generate randomness. In reality, most random numbers used in computer programs are pseudo-random, which means they are generated in a predictable fashion using a mathematical formula. This is fine for many purposes, but it may not be random in the way you expect if you're used to dice rolls and lottery drawings. RANDOM.ORG offers true random numbers to anyone on the Internet. The randomness comes from atmospheric noise, which for many purposes is better than the pseudo-random number algorithms typically used in computer programs. People use RANDOM.ORG for holding drawings, lotteries and sweepstakes, to drive online games, for scientific applications and for art and music. The service has existed since 1998 and was built by Dr Mads Haahr of the School of Computer Science and Statistics at Trinity College, Dublin in Ireland. Today, RANDOM.ORG is operated by Randomness and Integrity Services Ltd. As of today, RANDOM.ORG has generated 1.31 trillion random bits for the Internet community. FREE services Games and Lotteries Lottery Quick Pick is perhaps the Internet's most popular with over 280 lotteries Keno Quick Pick for the popular game played in many countries Coin Flipper will give you heads or tails in many currencies Dice Roller does exactly what it says on the tin Playing Card Shuffler will draw cards from multiple shuffled decks Birdie Fund Generator will create birdie holes for golf courses PAID service Random Drawings Q3.1 in the FAQ explains how to pick a winner for your giveaway for FREE Third-Party Draw Service is the premier solution to holding random drawings online Step by Step Guide explains how to hold a drawing with the Third-Party Draw Service Step by Step Video shows how to hold a drawing with the Third-Party Draw Service Price Calculator tells exactly how much your drawing will cost Drawing FAQ answers common questions about holding drawings Public Records shows all completed drawings going back five years Drawing Result Widget can be used to publish your winners on your web page Terms and Conditions are the rules that govern the use of RANDOM.ORG FREE services Numbers Integer Generator makes random numbers in configurable intervals Sequence Generator will randomize an integer sequence of your choice Integer Set Generator makes sets of non-repeating integers Gaussian Generator makes random numbers to fit a normal distribution Decimal Fraction Generator makes numbers in the [0,1] range with configurable decimal places Raw Random Bytes are useful for many cryptographic purposes FREE services Lists and Strings and Maps, Oh My! List Randomizer will randomize a list of anything you have (names, phone numbers, etc.) String Generator makes random alphanumeric strings Password Generator makes secure passwords for your Wi-Fi or that extra Gmail account Clock Time Generator will pick random times of the day Calendar Date Generator will pick random days across nearly three and a half millennia Geographic Coordinate Generator will pick a random spot on our planet's surface Bitmaps in black and white Hexadecimal Color Code Generator will pick color codes, for example for use as web colors Pregenerated Files contain large amounts of downloadable random bits Pure White Audio Noise for composition or just to test your audio equipment Jazz Scales to practice improvisation for students of jazz guitar Samuel Beckett's randomly generated short prose DNA Protein Sequence Randomizer (at Bio-Web) FREE services Web Tools and Widgets for Your Pages Integer Widget Wizard will put a mini-RANDOM.ORG on your web page or blog Draw Widget Wizard will put the result of a paid drawing on your web page or blog HTTP API to get true random numbers into your own code Guidelines describe how to avoid getting in trouble Banned Hosts lists who didn't behave and have been blocked Learn about Randomness Introduction to Randomness explains what true random numbers are and why they're interesting History explains how RANDOM.ORG started and where it is today Many Testimonials from folks who have found very creative uses for random numbers Acknowledgements to all the generous folks who have helped out Quotations about randomness in science, the arts and in life generally Media Coverage and Scientific Citations lists popular print and scientific mention of the service News about the latest additions to the site Statistics Real-Time Statistics show how the generator is performing right now Statistical Analysis explains how you test random numbers for randomness Bit Tally shows how much randomness has been generated since 1998 (hint: lots!) Your Quota tells how many random bits you have left for today Contact and Help FAQ contains answers to frequently asked questions Newsletter appears quite irregularly, but do sign up Contact Details in case you want to get in touch © 1998-2016 RANDOM.ORG Terms and Conditions About Us Follow @RandomOrg"	"null"	"null"	"A library that generates random numbers using."	"true"
"Security"	"VAddy"	"http://vaddy.net/"	"A continuous security testing platform for web applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"VAddy, The Automated Web Vulnerability Scanner for DevOps <img height=""1"" width=""1"" style=""display:none"" src=""https://www.facebook.com/tr?id=503525023172392&amp;ev=PageView&amp;noscript=1""> Japanese Tweet Login Features Docs Blog Contact VAddy integrates with your existing CI tools and performs robust security checks — so your developers can code secure. How secure is your code? VAddy gives you insight into the security of your web apps — and easily hooks into your standard deployment process. Help your developers code securely With VAddy, there’s no need for your developers to be security experts. Easily discover vulnerabilities, and deal with them before they become entrenched in your code. Find vulnerabilities in new features or maintenance VAddy automatically runs as part of your existing CI process. VAddy runs after every code change, and alerts you when a commit contains vulnerabilities. Reduce last-minute vulnerability scans We’ve all had projects where a vulnerability found just before release threw the entire project off-schedule. Help prevent last-minute surprises by continually performing high-quality security analysis throughout your development process. Quickly identify bad coding trends VAddy allows you to visualize the frequency of security vulnerabilities caused by each team member or code module. Quickly identify problem areas, and increase education to improve areas or developers with weak security knowledge. Why Use VAddy? No Security Knowledge Needed Our diagnostic engine is continually being tuned and updated with the latest threats by our security experts. That allows your team to easily develop secure applications without special domain knowledge. Integrates with your existing process VAddy integrates easily with CI tools such as Jenkins and TravisCI, and performs security checks and audits automatically on every build — without disturbing your existing development flow. Compatible with all languages VAddy is built around large library of security issues and technical experts over a wide range of languages and frameworks. Whatever tech stack you use, Vaddy has a solution for you. “VAddy made it easy to implement continuous security tests, giving us greater peace of mind whenever we add new features.” Yusuke Tamukai CEO at Velc “Because we can connect VAddy with our continuous integration tools, we no longer have to put off vulnerability testing until the last minute. We are currently evaluating VAddy as we run it through its paces with just one of our services, but we are considering future plans to use VAddy with all of our other services, as well.” Tomonari Nakamura Software Developer & Build Engineer at Nulab “VAddy is easy to configure and gives us fine-grained control over which URLs to scan, so it is convenient to use for highly targeted tests. We can also connect VAddy to our test automation tools to scan for vulnerabilities with a single click whenever we revise code.” Takayuki Ichikawa CEO at SimpleMaker “VAddy has been very helpful in allowing us to scan our API servers for vulnerabilities with ease. We plan to keep using VAddy so we can continuously test for vulnerabilities throughout our application development process.” Hideo Mukaida Senior Developer at WILL GROUP Plans   Free Standard Professional Unlimited scans SQL injection tests Cross-site scripting (XSS) tests Remote file inclusion (RFI) tests   Command injection tests   Directory traversal tests   Jenkins/CircleCI integrations Web API access Team size   5 users/domain 50 users/domain Maximum time per scan 5 minutes 60 minutes 180 minutes Scan speed Normal Fast Very Fast Scan history 1 month 1 year 3 years Scan targets (included) 3 domains 3 domains 3 domains Scan targets (additional)   $30 per domain/month $90 per domain/month Pricing $0 per month $100 per month $300 per month You can try VAddy’s Standard plan free for 14 days! >>What Does VAddy Test? INFORMATION 27 MayTestimonials:Security Tests Are a Selling Point for Software Businesses 3 DecWe will attend ""SCALE14x"" as Silver Sponsor! 6 Oct You became able to view scan results for up to 1 year and 3years in the premium plans 8 OctWe will attend ""php[world] 2015"" as the Exhibitor! BLOG Loading... Tweets by @vaddy_support Tweet TEAM Yasushi Ichikawa Product Manager & Developer Twitter: @ichikaway Tadashi Satoh Security Expert & Developer Twitter: @kinyuka Katsuya Nishino Public Relations & Marketing Twitter: @vaddy_support Terms Security Privacy Contact Company Copyright © 2014- Bitforest. Co., Ltd."	"null"	"null"	"A continuous security testing platform for web applications."	"true"
"Security"	"Zed"	"https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"	"An integrated penetration testing tool for web applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"OWASP Zed Attack Proxy Project - OWASP OWASP Zed Attack Proxy Project From OWASP Jump to: navigation, search [edit] Main Screenshots Talks News ZAP Gear Supporters Functionality Features Languages Roadmap Get Involved Review this project. The OWASP Zed Attack Proxy (ZAP) is one of the world’s most popular free security tools and is actively maintained by hundreds of international volunteers*. It can help you automatically find security vulnerabilities in your web applications while you are developing and testing your applications. Its also a great tool for experienced pentesters to use for manual security testing. Please help us to make ZAP even better for you by answering the ZAP User Questionnaire! For a quick overview of ZAP and an introduction to version 2.4.0 see these tutorial videos on YouTube:   For more videos see the links on the wiki videos page. Interested in a ZAP talk or training event? See the talks tab. Not one near you? Contact a Zap Evangelist to arrange one! funds to OWASP earmarked for Zed Attack Proxy. For general information about ZAP: Twitter - official ZAP announcements (low volume) Blog - official ZAP blog For help using ZAP: Getting Started Guide (pdf) - an introductory guide you can print Tutorial Videos User Guide - online version of the User Guide included with ZAP User Group - ask questions about using ZAP Add-ons - help for the optional add-ons you can install StackOverflow - because some people use this for all everything ;) To learn more about ZAP development: Source Code - for all of the ZAP related projects Wiki - lots of detailed info Developer Group - ask questions about the ZAP internals Crowdin (GUI) - help translate the ZAP GUI Crowdin (User Guide) - help translate the ZAP User Guide OpenHub - FOSS analytics BountySource - Vote on ZAP issues (you can also donate money here, but 10% taken out) Justification Justification for the statements made in the tagline at the top;) Popularity: ToolsWatch Annual Best Free/Open Source Security Tool Survey: 2015 1st 2014 2nd 2013 1st Contributors: Code Contributors ZAP core i18n Contributors ZAP help i18n Contributors Share this:  Quick Download Download OWASP ZAP! News and Events Please see the News and Talks tabs Change Log zaproxy zap-extensions Code Repo zaproxy zap-extensions Email List Questions? Please ask on the ZAP User Group Project Leader Project Leader Simon Bennetts @ Related Projects OWASP WTE OWASP OWTF Ohloh https://www.openhub.net/p/zaproxy Classifications Apache 2 License ZAP History Filter Screen Shot ZAP Search Tab Screen Shot Upcoming Talks/Training: For details of upcoming ZAP related talks or training please see the latest ZAP Monthly Newsletter Latest News: 2016/05/26 ZAP bug bounty program launched 2016/02/23 ZAP declared the Top Security Tool of 2015 as voted by ToolsWatch.org readers 2016/02/19 ZAP February newsletter published 2016/01/04 ZAP January newsletter published 2015/12/15 ZAP December newsletter published 2015/12/04 Version 2.4.3 released 2015/11/02 ZAP November newsletter published 2015/09/07 Version 2.4.2 released 2015/07/31 ZAP Scripting Competition launched 2015/07/30 Version 2.4.1 released 2015/05/05 ZAP featured in the ThoughtWorks Technology Radar 2015/04/14 Version 2.4.0 released 2015/01/14 ZAP came second in the Top Security Tools of 2014 as voted by ToolsWatch.org readers 2015/01/02 ZAP Community Scripts repo launched 2014/05/21 Version 2.3.1 released 2014/04/10 Version 2.3.0 released 2014/03/10 Hacking ZAP blog post series started: http://zaproxy.blogspot.co.uk/2014/03/hacking-zap-1-why-should-you.html 2014/02/17 ZAP included as one of the SourceForge projects of the week 2013/12/20 ZAP declared the Top Security Tool of 2013 as voted by ToolsWatch.org readers 2013/11/04 ZAP Evangelists initiative launched 2013/10/29 Simon won Best Project Leader WASPY Award 2013/09/27 Version 2.2.2 released 2013/09/11 Version 2.2.0 released 2013/07/29 New language file including support for Bosnian 2013/06/17 ZAP user questionnaire launched, now in both English and Spanish 2013/06/05 ZAP questions can now be asked on irc 2013/05/10 5 ZAP related projects accepted for Google Summer of Code 2013/04/18 Version 2.1.0 released 2013/01/30 Version 2.0.0 released 2012/11/27 Started a new zaproxy-test project of unit and integrations tests 2012/10/29 Adopted Crowdin for translations 2012/10/22 Started generating weekly releases 2012/10/12 ZAP Overview tutorial video published 2012/09/18 ZAP Gear Store goes live 2012/08/05 Version 1.4.1 released 2012/07/08 Version 1.4.0.1 downloaded over 15,000 times 2012/07/05 Python API released 2012/06/15 ZAP accepted for the OWASP Project Reboot 2012/06/13 Using ZAP for Security Regression tests video published 2012/06/04 Version 1.4.0.1 downloaded over 10,000 times 2012/05/28 Simon's Introduction to ZAP talk at App Sec USA becomes the most watched OWASP video on vimeo 2012/04/23 3 ZAP related Google Summer of Code 2012 projects accepted. To find out how these are progressing please see their wiki pages. 2012/04/23 OWASP ZAP SmartCard Project officially launched. 2012/04/08 Version 1.4.0.1 released 2012/02/10 Version 1.3.4 downloaded over 10,000 times 2012/02/01 OWASP ZAP is named the Toolsmith Tool of the Year for 2011! Yes, you can now buy ZAP related gear! All of the artwork for ZAP swag is released under the Creative Common License and can be downloaded from the zap-swag repo. You can of course use the artwork from this repo with any other online store that you like. A range of products can be purchased from Redbubble Stickers can be purchased from Stickermule T-shirts can be purchased from Cafepress ZAP is developed by a worldwide team of volunteers. But we have also been helped by many organizations, either financially or by encouraging their employees to work on ZAP: Mozilla The Linux Foundation OWASP Sage Google Microsoft Hacktics, Ernst & Young DinoSec Denim Group Aspect Security SecureIdeas UtiliSec encription Accenture Digital Some of ZAP's functionality: Intercepting Proxy Traditional and AJAX spiders Automated scanner Passive scanner Forced browsing Fuzzer Dynamic SSL certificates Smartcard and Client Digital Certificates support Web sockets support Support for a wide range of scripting languages Plug-n-Hack support Authentication and session support Powerful REST based API Automatic updating option Integrated and growing marketplace of add-ons Some of ZAP's features: Open source Cross platform (it even runs on a Raspberry Pi!) Easy to install (just requires java 1.7) Completely free (no paid for 'Pro' version) Ease of use a priority Comprehensive help pages Fully internationalized Translated into over 20 languages Community based, with involvement actively encouraged Under active development by an international team of volunteers ZAP is a fork of the well regarded Paros Proxy. ZAP supports the following languages: English Arabic Bosnian Brazilian Portuguese Chinese Danish Filipino French German Greek Indonesian Italian Japanese Korean Persian Polish Russian Sinhala Spanish Urdu You can use Crowdin to help improve these translations or add new ones right now! Release 2.4.3 ZAP 2.4.3 has been released, this is a bug fix and enhancement release For more details see https://github.com/zaproxy/zap-core-help/wiki/HelpReleases2_4_3 Involvement in the development of ZAP is actively encouraged! You do not have to be a security expert in order to contribute. Some of the ways you can help: Feature Requests Please raise new feature requests as enhancement requests here: https://github.com/zaproxy/zaproxy/issues If there are existing requests you are also interested in then please 'star' them - that way we can see which features people are most interested in and can prioritize them accordingly. Feedback Please use the zaproxy-users Google Group for feedback: What do like? What don't you like? What features could be made easier to use? How could the help pages be improved? Log issues Have you had a problem using ZAP? If so and its not already been logged then please report it Localization Are you fluent in another language? Can you help translate ZAP into that language? You can use Crowdin to do that! Development If you fancy having a go at adding functionality to ZAP then please get in touch via the zaproxy-develop Google Group. Again, you do not have to be a security expert to contribute code - working on ZAP could be great way to learn more about web application security! If you actively contribute to ZAP then you will be invited to join the project. Retrieved from ""http://www.owasp.org/index.php?title=OWASP_Zed_Attack_Proxy_Project&oldid=217503"" Categories: OWASP Project OWASP Tool OWASP Release Quality Tool OWASP Download Popular SAMM-ST-2 Navigation menu Personal tools Log in Request account Namespaces Page Discussion Variants Views Read View source View history Actions Search Navigation Home About OWASP Acknowledgements Advertising AppSec Events Books Brand Resources Chapters Donate to OWASP Downloads Funding Governance Initiatives Mailing Lists Membership Merchandise News Community portal Presentations Press Projects Video Volunteer Reference Activities Attacks Code Snippets Controls Glossary How To... Java Project .NET Project Principles Technologies Threat Agents Vulnerabilities Language English español Tools What links here Related changes Special pages Printable version Permanent link Page information This page was last modified on 31 May 2016, at 06:36. This page has been accessed 2,051,472 times. Content is available under a Creative Commons 3.0 License unless otherwise noted. Privacy policy About OWASP Disclaimers"	"null"	"null"	"An integrated penetration testing tool for web applications."	"true"
"Passwords"	"GenPhrase"	"https://github.com/timoh6/GenPhrase"	"A library for generating secure random passphrases."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"35"	"2"	"0"	"GitHub - timoh6/GenPhrase: GenPhrase is a secure passphrase generator for PHP applications. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 35 Fork 0 timoh6/GenPhrase Code Issues 0 Pull requests 0 Pulse Graphs GenPhrase is a secure passphrase generator for PHP applications. 44 commits 1 branch 2 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 38a8c92 May 26, 2016 timoh6 Add installation note about Composer Permalink Failed to load latest commit information. library/GenPhrase Set upper limits for $_maxPoolSize and $_powerOfTwo Aug 15, 2014 tests Set upper limits for $_maxPoolSize and $_powerOfTwo Aug 15, 2014 .gitattributes Add MockRandomBytes.php to .gitattributes as it is only needed in tes… Oct 23, 2014 .travis.yml Add PHP 7.0 on Travis Dec 4, 2015 CHANGELOG.markdown Set upper limits for $_maxPoolSize and $_powerOfTwo Aug 15, 2014 LICENSE Initial commit Jul 24, 2012 README.markdown Add installation note about Composer May 26, 2016 composer.json Composer Jul 24, 2012 phpunit.xml.dist Rename phpunit.xml Aug 9, 2012 README.markdown About GenPhrase is a secure passphrase generator for PHP applications. GenPhrase is based on passwdqc's pwqgen program. See http://www.openwall.com/passwdqc/ GenPhrase can be used to generate secure and easy to memorize random passphrases. For example output, see examples. GenPhrase can use arbitrary size wordlists. Words for a passphrase are selected uniformly at random from the wordset. GenPhrase has a series of small security bug bounties. For more information, see GenPhrase Security Bug Bounties. Requirements GenPhrase requires PHP version 5.3 or greater with BC Math (--enable-bcmath). mbstring extension must be available if words are modified (e.g. capitalized). HHVM compatibility HipHop VM v2.3 and later is confirmed to support GenPhrase. Earlier versions of HHVM may work as well. Installation GenPhrase supports installation using Composer, but make sure you use at least Composer version 1.0.0-beta1 to install GenPhrase (Composer was vulnerable to MITM attacks before 1.0.0-beta1): genphrase/genphrase Passphrase generation with GenPhrase By default, GenPhrase generates passphrases using english words (english.lst). Those passphrases will have at least 50 bits of entropy. GenPhrase has currently two built-in wordlists: english.lst (default) and diceware.lst. You can add/remove/combine wordlists as you like. More about the original english wordlist via Openwall: http://cvsweb.openwall.com/cgi/cvsweb.cgi/Owl/packages/passwdqc/passwdqc/wordset_4k.c?rev=1.5;content-type=text%2Fplain The only modification between the GenPhrase english wordlist and the Openwall wordlist is we changed all the words to be lowercase. What kind of passphrases GenPhrase generate? A few examples to demonstrate the output: With default settings, the passphrase would be for example like: Alter Berlin Paint meaning  Generating a passphrase having 40 bits of entropy: musica$Menu&Quota  A passphrase having 50 bits of entropy and separator characters and word capitalizing disabled: setthenrolegiftdancing  Usage <?php require '/path/to/library/GenPhrase/Loader.php'; $loader = new GenPhrase\Loader(); $loader->register(); <?php $gen = new GenPhrase\Password();  // Generate a passphrase using english words and (at least) 50 bits of entropy. $gen->generate();  // Generate a passphrase using english words and custom amount of entropy. // Entropy must be between 26.0 and 120.0 bits. $gen->generate(46);  // Remove the default (english) wordlist. This is because we want to use only // the Diceware list. If you add a new wordlist, but you do not remove the // default wordlist, then GenPhrase will combine those wordlists. $gen->removeWordlist('default');  // Add Diceware wordlist. // $gen->addWordlist('/path/to/GenPhrase/Wordlists/diceware.lst', 'diceware'); // Or more simply (if you give just a filename, GenPhrase will look this // filename from ""Wordlists"" folder automatically): $gen->addWordlist('diceware.lst', 'diceware'); // When creating Diceware phrases, it is recommended not to capitalize any // words and not to add separator characters (not even space). To make that // happen, we configure GenPhrase a little bit more: $gen->disableSeparators(true); // No separator characters are inserted $gen->disableWordModifier(true); // No words are capitalized or changed to lower case (words are not modified) echo $gen->generate(65) // This will output six ""word"" passphrases.  // It is possible to force GenPhrase to always use separator characters // (whether it ""makes sense"" or not). // For example, if you generate a passphrase having 35 bits of entropy, // with default settings, you would get something like: ""word1 word2 word3"". // If you force the usage of separators, you would get something like: // ""word1!word2*word3"". $gen->alwaysUseSeparators(true); // For possible use cases, see pull request #1.  // NOTE that Diceware wordlist has a few one character ""words"": // !, a, $, "", =, ?, z // etc. Also, a few two character words are in the list etc. While the // probability of the generated passphrase containing only those short ""words"" // is very low when you generate, say, 6 word passphrase, but it is still good // to keep in mind. You should not probable generate low entropy Diceware // passhrases at all.  // Change the separator characters. $gen->setSeparators('123456789'); // NOTE: separator characters must be single-byte characters. // NOTE: you must not use space as a separator character, because space is // automatically added when appropriate. // NOTE: minimum number of separator characters is 2. If you use setSeparators() // to set just one separator character, no separators are used (except ' ').  // Set character encoding. The encoding is used internally by GenPhrase when // calling mb_ functions. $gen->setEncoding('iso-8859-1'); // By default GenPhrase uses utf-8 encoding. How is entropy calculated? As long as we have only unique elements in our wordlist and each element is equally likely to be chosen, we can calculate the entropy per ""element"" (usually a word) as follows: log2(count_of_elements) If we choose, say, 4 elements, the total entropy is: 4 * log2(count_of_elements) If we choose 2 elements and one separator element: 2 * log2(count_of_elements) + log2(count_of_separators) By default, GenPhrase will randomly (50:50 change) modify the first character of a word to either lower or upper case (""Apple"" becomes ""apple"", ""orange"" becomes ""Orange"" etc. In terms of entropy, this means we are actually doubling the ""unique element count"" (our wordlist has, say, a word ""apple"", so we could come up with a word ""apple"" or ""Apple""): log2(2 * count_of_elements) Issues or questions? Mail me at timoh6@gmail.com or use GitHub. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/timoh6/GenPhrase"	"A library for generating secure random passphrases."	"true"
"Passwords"	"Password Compat"	"https://github.com/ircmaxell/password_compat"	"A compatibility library for the new PHP 5.5 password functions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1728"	"148"	"328"	"GitHub - ircmaxell/password_compat: Compatibility with the password_* functions that ship with PHP 5.5 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 148 Star 1,728 Fork 328 ircmaxell/password_compat Code Issues 8 Pull requests 4 Pulse Graphs Compatibility with the password_* functions that ship with PHP 5.5 91 commits 3 branches 5 releases 17 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master nicholas-grekas-xor-fix v1.0 Nothing to show v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 1ecb013 Aug 11, 2015 3 ircmaxell Improve random generation to only trust openssl if strong is true (wh… … …ich is still bad due to openssl, but better) Permalink Failed to load latest commit information. lib Improve random generation to only trust openssl if strong is true (wh… Aug 11, 2015 test/Unit Fix a bunch of minor issues, including process isolation #64, formatt… Nov 20, 2014 .gitattributes Added .gitattributes Nov 15, 2014 .gitignore Fixed .gitignore Nov 15, 2014 .travis.yml Fixed the test config Nov 15, 2014 CHANGELOG.md Add changelog Nov 20, 2014 LICENSE.md Update license information to MIT License Sep 17, 2012 README.md Update README.md Apr 23, 2015 composer.json Composer fixes Nov 15, 2014 phpunit.xml.dist Fixed the test config Nov 15, 2014 version-test.php add PasswordCompat\binary\check() in the library Jul 28, 2014 README.md password_compat This library is intended to provide forward compatibility with the password_* functions that ship with PHP 5.5. See the RFC for more detailed information. Requirements This library requires PHP >= 5.3.7 OR a version that has the $2y fix backported into it (such as RedHat provides). Note that Debian's 5.3.3 version is NOT supported. The runtime checks have been removed due to this version issue. To see if password_compat is available for your system, run the included version-test.php. If it outputs ""Pass"", you can safely use the library. If not, you cannot. If you attempt to use password-compat on an unsupported version, attempts to create or verify hashes will return false. You have been warned! The reason for this is that PHP prior to 5.3.7 contains a security issue with its BCRYPT implementation. Therefore, it's highly recommended that you upgrade to a newer version of PHP prior to using this layer. Installation To install, simply require the password.php file under lib. You can also install it via Composer by using the Packagist archive. Usage Creating Password Hashes To create a password hash from a password, simply use the password_hash function.     $hash = password_hash($password, PASSWORD_BCRYPT); Note that the algorithm that we chose is PASSWORD_BCRYPT. That's the current strongest algorithm supported. This is the BCRYPT crypt algorithm. It produces a 60 character hash as the result. BCRYPT also allows for you to define a cost parameter in the options array. This allows for you to change the CPU cost of the algorithm:     $hash = password_hash($password, PASSWORD_BCRYPT, array(""cost"" => 10)); That's the same as the default. The cost can range from 4 to 31. I would suggest that you use the highest cost that you can, while keeping response time reasonable (I target between 0.1 and 0.5 seconds for a hash, depending on use-case). Another algorithm name is supported:     PASSWORD_DEFAULT This will use the strongest algorithm available to PHP at the current time. Presently, this is the same as specifying PASSWORD_BCRYPT. But in future versions of PHP, it may be updated to use a stronger algorithm if one is introduced. It can also be changed if a problem is identified with the BCRYPT algorithm. Note that if you use this option, you are strongly encouraged to store it in a VARCHAR(255) column to avoid truncation issues if a future algorithm increases the length of the generated hash. It is very important that you should check the return value of password_hash prior to storing it, because a false may be returned if it encountered an error. Verifying Password Hashes To verify a hash created by password_hash, simply call:     if (password_verify($password, $hash)) {         /* Valid */     } else {         /* Invalid */     } That's all there is to it. Rehashing Passwords From time to time you may update your hashing parameters (algorithm, cost, etc). So a function to determine if rehashing is necessary is available:     if (password_verify($password, $hash)) {         if (password_needs_rehash($hash, $algorithm, $options)) {             $hash = password_hash($password, $algorithm, $options);             /* Store new hash in db */         }     } Security Vulnerabilities If you have found a security issue, please contact the author directly at ircmaxell@php.net. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ircmaxell/password_compat"	"A compatibility library for the new PHP 5.5 password functions."	"true"
"Passwords"	"Password Policy"	"https://github.com/ircmaxell/password-policy"	"A password policy library for PHP and JavaScript."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"41"	"7"	"11"	"GitHub - ircmaxell/password-policy: A password policy enforcer for PHP and JavaScript Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 41 Fork 11 ircmaxell/password-policy Code Issues 8 Pull requests 5 Pulse Graphs A password policy enforcer for PHP and JavaScript 5 commits 1 branch 0 releases 2 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit db26ad2 Jan 23, 2013 ircmaxell Merge pull request #1 from radmen/patch-1 … Fixed stupid typo Permalink Failed to load latest commit information. lib/PasswordPolicy Update readme, and fix minor bug Jan 22, 2013 .gitignore initial commit Jan 22, 2013 README.md Fixed stupid typo Jan 22, 2013 composer.json initial commit Jan 22, 2013 README.md PasswordPolicy A tool for checking and creating password policies in PHP and JS. Installation Use composer to setup an autoloader php composer.phar install  Require the composer autoload file: require_once 'vendor/autoload.php';  Usage: To use, first instantiate the core policy object: $policy = new \PasswordPolicy\Policy;  Then, add rules: $policy->contains('lowercase', $policy->atLeast(2));  Supported rule helper methods are: contains($class, $constraint = null, $description = ''): Checks to see if a password contains a class of chars Supported Short-Cut classes: letter - a-zA-Z lowercase - a-z uppercase - A-Z digit - 0-9 symbol - ^a-zA-Z0-9 (in other words, non-alpha-numeric) null - \0 alnum - a-zA-Z0-9 The second param is a constraint (optional) length($constraint): Checks the length of the password matches a constraint endsWith($class, $description = ''): Checks to see if the password ends with a character class. startsWith($class, $description = ''): Checks to see if the password starts with a character class. notMatch($regex, $description): Checks if the password does not match a regex. match($regex, $description): Checks if the password matches the regex. Supported Constraints: The policy also has short-cut helpers for creating constraints: atLeast($n): At least the param matches Equivilant to between($n, PHP_INT_MAX) atMost($n): At most the param matches Equivilant to between(0, $n) between($min, $max): Between $min and $max number of matches never(): No matches Equivilant to between(0, 0) Testing the policy Once you setup the policy, you can then test it in PHP using the test($password) method. $result = $policy->test($password);  The result return is a stdclass object with two members, result and messages. $result->result - A boolean if the password is valid. $result->messages - An array of messages Each message is an object of two members: $message->result - A boolean indicating if the rule passed $message->message - A textual description of the rule Using JavaScript Once you've built the policy, you can call toJavaScript() to generate a JS anonymous function for injecting into JS code. $js = $policy->toJavaScript(); echo ""var policy = $js;"";  Then, the policy object in JS is basically a wrapper for $policy->test($password), and behaves the same (same return values). var result = policy(password); if (!result.result) {     /* Process Messages To Display Failure To User */ }  One note for the JavaScript, any regular expressions that you write need to be deliminated by / and be valid JS regexes (no PREG specific functionality is allowed). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ircmaxell/password-policy"	"A password policy library for PHP and JavaScript."	"true"
"Passwords"	"Password Validator"	"https://github.com/jeremykendall/password-validator"	"A library for validating and upgrading password hashes."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"127"	"9"	"8"	"GitHub - jeremykendall/password-validator: Validates passwords against PHP's password_hash function using PASSWORD_DEFAULT. Will rehash when needed, and will upgrade legacy passwords with the Upgrade decorator. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 127 Fork 8 jeremykendall/password-validator Code Issues 2 Pull requests 0 Pulse Graphs Validates passwords against PHP's password_hash function using PASSWORD_DEFAULT. Will rehash when needed, and will upgrade legacy passwords with the Upgrade decorator. 58 commits 5 branches 13 releases 5 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags dead-feature/phpass-implementation develop feature/coveralls master remove-salt Nothing to show 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 2.0.3 2.0.3-beta 2.0.2-beta 2.0.1-beta 2.0.0-beta 1.1.0-beta 1.0.0 1.0.0-beta Nothing to show New pull request Latest commit 0ba4156 Mar 9, 2016 jeremykendall Merge pull request #23 from garethellis36/readme-update … Update composer instructions in README to reflect current best practices for installation Permalink Failed to load latest commit information. bin Initial import Jan 3, 2014 src/JeremyKendall/Password Fix warnings in PHP7 Jan 26, 2016 tests Fix warnings in PHP7 Jan 26, 2016 .gitignore Update gitignore to ignore vendor folder Jan 7, 2016 .scrutinizer.yml Config now inherits Jan 13, 2014 .travis.yml Add PHP7 to Travis Jan 26, 2016 CONTRIBUTING.md Initial import Jan 4, 2014 LICENSE Initial import Jan 4, 2014 README.md Update composer instructions in README to reflect current best practi… Mar 9, 2016 composer.json Update php-cli-tools dependency Mar 25, 2015 phpdoc.dist.xml Initial import Jan 4, 2014 phpunit.xml.dist Fixes big bug where password_needs_rehash didn't get options passed Jan 28, 2014 travis.phpunit.xml Fixes big bug where password_needs_rehash didn't get options passed Jan 29, 2014 README.md Password Validator Password Validator validates password_hash generated passwords, rehashes passwords as necessary, and will upgrade legacy passwords. Read the introductory blog post: PHP Password Hashing: A Dead Simple Implementation Password Validator is available for all versions of PHP >= 5.3.7. Motivation Why? Because one must always encrypt passwords for highest level of security, and the new PHP password hashing functions provide that level of security. The Password Validator library makes it (more) trivial to use the new password hash functions in your application. Just add the validator to your authentication script and you're up and running. The really big deal here is the ease of upgrading from your current legacy hashes to the new, more secure PHP password hash hashes. Simply wrap the PasswordValidator in the UpgradeDecorator, provide a callback to validate your existing password hashing scheme, and BOOM, you're using new password hashes in a manner completely transparent to your application's users. Nifty, huh? Usage Password Validation If you're already using password_hash generated passwords in your application, you need do nothing more than add the validator in your authentication script. The validator uses password_verify to test the validity of the provided password hash. use JeremyKendall\Password\PasswordValidator;  $validator = new PasswordValidator(); $result = $validator->isValid($_POST['password'], $hashedPassword);  if ($result->isValid()) {     // password is valid } If your application requires options other than the password_hash defaults, you can set the cost option with PasswordValidator::setOptions(). $options = array(     'cost' => 11 ); $validator->setOptions($options); IMPORTANT: PasswordValidator uses a default cost of 10. If your existing hash implementation requires a different cost, make sure to specify it using PasswordValidator::setOptions(). If you do not do so, all of your passwords will be rehashed using a cost of 10. Rehashing Each valid password is tested using password_needs_rehash. If a rehash is necessary, the valid password is hashed using password_hash with the provided options. The result code Result::SUCCESS_PASSWORD_REHASHED will be returned from Result::getCode() and the new password hash is available via Result::getPassword(). if ($result->getCode() === Result::SUCCESS_PASSWORD_REHASHED) {     $rehashedPassword = $result->getPassword();     // Persist rehashed password } IMPORTANT: If the password has been rehashed, it's critical that you persist the updated password hash. Otherwise, what's the point, right? Upgrading Legacy Passwords You can use the PasswordValidator whether or not you're currently using password_hash generated passwords. The validator will transparently upgrade your current legacy hashes to the new password_hash generated hashes as each user logs in. All you need to do is provide a validator callback for your password hash and then decorate the validator with the UpgradeDecorator. use JeremyKendall\Password\Decorator\UpgradeDecorator;  // Example callback to validate a sha512 hashed password $callback = function ($password, $passwordHash, $salt) {     if (hash('sha512', $password . $salt) === $passwordHash) {         return true;     }      return false; };  $validator = new UpgradeDecorator(new PasswordValidator(), $callback); $result = $validator->isValid('password', 'password-hash', 'legacy-salt'); The UpgradeDecorator will validate a user's current password using the provided callback. If the user's password is valid, it will be hashed with password_hash and returned in the Result object, as above. All password validation attempts will eventually pass through the PasswordValidator. This allows a password that has already been upgraded to be properly validated, even when using the UpgradeDecorator. Alternate Upgrade Technique Rather than upgrading each user's password as they log in, it's possible to preemptively rehash persisted legacy hashes all at once. PasswordValidator and the UpgradeDecorator can then be used to validate passwords against the rehashed legacy hashes, at which point the user's plain text password will be hashed with password_hash, completing the upgrade process. For more information on this technique, please see Daniel Karp's Rehashing Password Hashes blog post, and review JeremyKendall\Password\Tests\Decorator\KarptoniteRehashUpgradeDecoratorTest to see a sample implementation. Persisting Rehashed Passwords Whenever a validation attempt returns Result::SUCCESS_PASSWORD_REHASHED, it's important to persist the updated password hash. if ($result->getCode() === Result::SUCCESS_PASSWORD_REHASHED) {     $rehashedPassword = $result->getPassword();     // Persist rehashed password } While you can always perform the test and then update your user database manually, if you choose to use the Storage Decorator all rehashed passwords will be automatically persisted. The Storage Decorator takes two constructor arguments: An instance of PasswordValidatorInterface and an instance of the JeremyKendall\Password\Storage\StorageInterface. StorageInterface The StorageInterface includes a single method, updatePassword(). A class honoring the interface might look like this: <?php  namespace Example;  use JeremyKendall\Password\Storage\StorageInterface;  class UserDao implements StorageInterface {     public function __construct(\PDO $db)     {         $this->db = $db;     }      public function updatePassword($identity, $password)     {         $sql = 'UPDATE users SET password = :password WHERE username = :identity';         $stmt = $this->db->prepare($sql);         $stmt->execute(array('password' => $password, 'identity' => $identity));     } } Storage Decorator With your UserDao in hand, you're ready to decorate a PasswordValidatorInterface. use Example\UserDao; use JeremyKendall\Password\Decorator\StorageDecorator;  $storage = new UserDao($db); $validator = new StorageDecorator(new PasswordValidator(), $storage);  // If validation results in a rehash, the new password hash will be persisted $result = $validator->isValid('password', 'passwordHash', null, 'username'); IMPORTANT: You must pass the optional fourth argument ($identity) to isValid() when calling StorageDecorator::isValid(). If you do not do so, the StorageDecorator will throw an IdentityMissingException. Combining Storage Decorator with Upgrade Decorator It is possible to chain decorators together thanks to the Decorator Pattern. A great way to use this is to combine the StorageDecorator and UpgradeDecorator together to first update a legacy hash and then save it. Doing so is very simple - you just need to pass an instance of the StorageDecorator as a constructor argument to UpgradeDecorator: use Example\UserDao; use JeremyKendall\Password\Decorator\StorageDecorator; use JeremyKendall\Password\Decorator\UpgradeDecorator;  // Example callback to validate a sha512 hashed password $callback = function ($password, $passwordHash, $salt) {     if (hash('sha512', $password . $salt) === $passwordHash) {         return true;     }      return false; };  $storage = new UserDao($db); $storageDecorator = new StorageDecorator(new PasswordValidator(), $storage); $validator = new UpgradeDecorator($storageDecorator, $callback);  // If validation results in a rehash, the new password hash will be persisted $result = $validator->isValid('password', 'passwordHash', null, 'username'); Validation Results Each validation attempt returns a JeremyKendall\Password\Result object. The object provides some introspection into the status of the validation process. Result::isValid() will return true if the attempt was successful Result::getCode() will return one of three possible int codes: Result::SUCCESS if the validation attempt was successful Result::SUCCESS_PASSWORD_REHASHED if the attempt was successful and the password was rehashed Result::FAILURE_PASSWORD_INVALID if the attempt was unsuccessful Result::getPassword() will return the rehashed password, but only if the password was rehashed Database Schema Changes As mentioned above, because this library uses the PASSWORD_DEFAULT algorithm, it's important your password field be VARCHAR(255) to account for future updates to the default password hashing algorithm. Helper Scripts After running composer install, there are two helper scripts available, both related to the password hash functions. version-check If you're not already running PHP 5.5+, you should run version-check to ensure your version of PHP is capable of using password-compat, the userland implementation of the PHP password hash functions. Run ./vendor/bin/version-check from the root of your project. The result of the script is pass/fail. cost-check The default cost used by password_hash is 10. This may or may not be appropriate for your production hardware, and it's entirely likely you can use a higher cost than the default. cost-check is based on the finding a good cost example in the PHP documentation. Simply run ./vendor/bin/cost-check from the command line and an appropriate cost will be returned. NOTE: The default time target is 0.2 seconds. You may choose a higher or lower target by passing a float argument to cost-check, like so: $ ./vendor/bin/cost-check 0.4 Appropriate 'PASSWORD_DEFAULT' Cost Found:  13 Installation The only officially supported method of installation is via Composer. Running the following command will add the latest version of the library to your project: $ composer require jeremykendall/password-validator You can update to the latest version with this command: $ composer update jeremykendall/password-validator If you're not already using Composer in your project, add the autoloader to your project: <?php  require_once '../vendor/autoload.php' You're now ready to begin using the Password Validator. Contributing Pull requests are always welcome. Please review the CONTRIBUTING.md document before submitting pull requests. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jeremykendall/password-validator"	"A library for validating and upgrading password hashes."	"true"
"Passwords"	"Password-Generator"	"https://github.com/hackzilla/password-generator"	"PHP library to generate random passwords."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"42"	"2"	"11"	"GitHub - hackzilla/password-generator: PHP Library to generate random passwords Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 42 Fork 11 hackzilla/password-generator Code Issues 1 Pull requests 0 Pulse Graphs PHP Library to generate random passwords http://hackzilla.org 152 commits 3 branches 24 releases Fetching contributors PHP 99.9% Makefile 0.1% PHP Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop feature/human-length master Nothing to show 1.2.0 1.1.1 1.1.0 1.0.1 1.0 1.0-alpha3 1.0-alpha2 1.0-alpha 0.8 0.7.5 0.7.4 0.7.3 0.7.2 0.7.1 0.7 0.6.2 0.6.1 0.6 0.5 0.4.1 0.4 0.3 0.2 0.1 Nothing to show New pull request Latest commit f22cb3d May 6, 2016 hackzilla Merge branch 'hotfix/documentation-patch' Permalink Failed to load latest commit information. Exception throw exception if no words between min and max length May 2, 2016 Generator if the code is working then these checks are unneeded May 6, 2016 Model Fix CS Apr 25, 2016 RandomGenerator Fix CS Apr 25, 2016 Tests add missing setLength exception test May 6, 2016 .coveralls.yml remove src_dir from .coveralls.yml Dec 23, 2015 .gitignore PHP-CS-Fixer config (with StyleCI bridge) Apr 25, 2016 .php_cs PHP-CS-Fixer config (with StyleCI bridge) Apr 25, 2016 .styleci.yml PHP-CS-Fixer config (with StyleCI bridge) Apr 25, 2016 .travis.yml move coveralls into after_sucess event in travis config Dec 26, 2015 Makefile move coveralls into after_sucess event in travis config Dec 26, 2015 README.md Correct link title May 6, 2016 composer.json PHP-CS-Fixer config (with StyleCI bridge) Apr 25, 2016 phpunit.xml.dist Merge branch 'refs/heads/feature/better-options' into 1.0-alpha2 Jan 1, 2015 travis.phpunit.xml add travis version of phpunit file Jan 1, 2015 README.md Password Generator Library Simple library for generating random passwords. Requirements PHP >= 5.3.2 Installation Install Composer curl -sS https://getcomposer.org/installer | php mv composer.phar /usr/local/bin/composer  Now tell composer to download the library by running the command: $ composer require hackzilla/password-generator Composer will add the library to your composer.json file and install it into your project's vendor/hackzilla directory. Simple Usage use Hackzilla\PasswordGenerator\Generator\ComputerPasswordGenerator;  $generator = new ComputerPasswordGenerator();  $generator   ->setOptionValue(ComputerPasswordGenerator::OPTION_UPPER_CASE, true)   ->setOptionValue(ComputerPasswordGenerator::OPTION_LOWER_CASE, true)   ->setOptionValue(ComputerPasswordGenerator::OPTION_NUMBERS, true)   ->setOptionValue(ComputerPasswordGenerator::OPTION_SYMBOLS, false) ;  $password = $generator->generatePassword(); More Passwords Usage If you want to generate 10 passwords that are 12 characters long. use Hackzilla\PasswordGenerator\Generator\ComputerPasswordGenerator;  $generator = new ComputerPasswordGenerator();  $generator   ->setUppercase()   ->setLowercase()   ->setNumbers()   ->setSymbols(false)   ->setLength(12);  $password = $generator->generatePasswords(10); Hybrid Password Generator Usage use Hackzilla\PasswordGenerator\Generator\HybridPasswordGenerator;  $generator = new HybridPasswordGenerator();  $generator   ->setUppercase()   ->setLowercase()   ->setNumbers()   ->setSymbols(false)   ->setSegmentLength(3)   ->setSegmentCount(4)   ->setSegmentSeparator('-');  $password = $generator->generatePasswords(10); If you can think of a better name for this password generator then let me know. The segment separator will be remove from the possible characters. Human Password Generator Usage use Hackzilla\PasswordGenerator\Generator\HumanPasswordGenerator;  $generator = new HumanPasswordGenerator();  $generator   ->setWordList('/usr/share/dict/words')   ->setWordCount(3)   ->setWordSeparator('-');  $password = $generator->generatePasswords(10); Example Implementations Password Generator App [https://github.com/hackzilla/password-generator-app] Password Generator Bundle [https://github.com/hackzilla/password-generator-bundle] Caution This library uses mt_rand which is does not generate cryptographically secure values. Basically an attacker could predict the random passwords this library produces given the right conditions. If you have a source of randomness you can inject it into the PasswordGenerator, using RandomGeneratorInterface. PHP 7 has random_int function which they say is good to use for cryptographic random integers. use Hackzilla\PasswordGenerator\Generator\HumanPasswordGenerator; use Hackzilla\PasswordGenerator\RandomGenerator\Php7RandomGenerator;  $generator = new HumanPasswordGenerator();  $generator   ->setRandomGenerator(new Php7RandomGenerator())   ->setWordList('/usr/share/dict/words')   ->setWordCount(3)   ->setWordSeparator('-');  $password = $generator->generatePasswords(10); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hackzilla/password-generator"	"PHP library to generate random passwords."	"true"
"Passwords"	"PHP Password Lib"	"https://github.com/ircmaxell/PHP-PasswordLib"	"A library for generating and validating passwords."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"336"	"28"	"43"	"GitHub - ircmaxell/PHP-PasswordLib: A library for generating and validating passwords Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 336 Fork 43 ircmaxell/PHP-PasswordLib Code Issues 6 Pull requests 5 Pulse Graphs A library for generating and validating passwords 199 commits 2 branches 4 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master v1.0 Nothing to show 1.0.0beta1 1.0.0-beta1 1.0.0-alpha2 1.0.0-alpha1 Nothing to show New pull request Latest commit 2a6b729 Feb 4, 2015 ircmaxell Update README.markdown … Add security contact Permalink Failed to load latest commit information. build Enable travis build Feb 4, 2013 examples Refactor password implementation to support passing an array of param… Jan 16, 2013 lib/PasswordLib Update PasswordLib.php May 3, 2013 test Updating BigMath test. Mar 27, 2013 .gitignore Update VFS dependency to use composer --dev Feb 4, 2013 .travis.yml Update VFS dependency to use composer --dev Feb 4, 2013 README.markdown Update README.markdown Feb 4, 2015 composer.json Update VFS dependency to use composer --dev Feb 4, 2013 composer.lock Update VFS dependency to use composer --dev Feb 4, 2013 phpunit.xml.dist Enable travis build Feb 4, 2013 README.markdown PHP-PasswordLib Build Status Version The current version is considered Beta. This means that it is ready enough to test and use, but beware that you should update frequently. As this software is BETA, Use at your own risk! About PHP-PasswordLib aims to be an all-inclusive cryptographic library for all cryptographic needs. It is meant to be easy to install and use, yet extensible and powerful enough for even the most experienced developer. Installation PasswordLib supports multiple installation methods. PHAR From the downloads tab, download the latest phar build. Then, just require the phar in your code! require_once '/path/to/PasswordLib.phar';  Composer Add a composer.json file to your project with the following: {     ""require"": {         ""PasswordLib/PasswordLib"": ""*""     } }  Then, inside that folder, just run php composer.phar install. Then, in your code, just use the composer autoloader: require_once 'vendor/.composer/autoload.php';  That's it! Usage Most use-cases can simply use the root PasswordLib class. $lib = new PasswordLib\PasswordLib(); $hash = $lib->createPasswordHash($password); $boolean = $lib->verifyPasswordHash($password, $hash);  By default, createPasswordHash will create a blowfish hash, which is the most secure available. To create other types, just pass the prefix of the type as a second parameter. So, to create a drupal hash: $hash = $lib->createPasswordHash($password, '$S$');  Or to create a SHA512 hash: $hash = $lib->createPasswordHash($password, '$6$');  It will automatically create a secure salt, and generate the hash. You can also specify options for the hash. So to use a bcrypt cost of 12, $hash = $lib->createPasswordHash($password, '$2a$', array('cost' => 12));  verifyPasswordHash will attempt to determine what type of hash is passed in. So one API call can verify multiple types of hashes. This allows for applications to be portable and authenticate against multiple databases with one API. The PasswordLib class has other API methods for getting random data. Two of particular use are getRandomNumber and getRandomToken. getRandomNumber([$min] [, $max] - gets a secure random integer between the given parameters. getRandomToken($size) returns a random string using base64 characters (a-zA-Z0-9./). This is useful for generating nonce's and tokens to send to clients. The library also contains other methods for generating random data and hashing data, so look around! Design Goals 100% Portable That means there are no hard (meaning required) dependencies on extensions or non-standard server configurations. Certain configurations will have better performance for certain features, but all configurations should be supported. Well Designed The code will use industry standard design patterns as well as follow guidelines for clean and testable code. Well Tested That means that the code should be well covered by unit tests. In addition to unit tests, standard test vectors should be run for custom implementations of algorithms to ensure proper behavior. Easy To Install PHP-PasswordLib will support three install methods. The first method is a pear based installer. The second is a single file PHAR archive. The third is support via Composer. Easy To Use One goal of this system is to provide a simple interface which has secure defaults for standard cryptographic needs (Random token generation, password hashing and verifying, etc). If more power is needed, additional layers of abstraction are available to wire together however is needed. Easy To Extend The library should be very easy to extend and add new functionality. Features Optional Autoloading If you include PasswordLib via a PHAR package, it will automatically autoload all of the classes for you, no extra step necessary. Simply: require 'path/to/PasswordLib.phar';  If you include PasswordLib via a filesystem install, you can use the internal autoloader by either loading the bootstrap.php file, or loading the PasswordLib.php file require_once 'path/to/PasswordLib/bootstrap.php  or require_once 'path/to/PasswordLib/PasswordLib.php  You can also use any PSR-0 autoloader. PasswordLib will automatically detect if an autoloader is setup for its namespace, and will not declare its own if it finds one (it does this by testing if the class PasswordLib\Core\AutoLoader can be found. If so, that means that an autoloader was declared already. If not, it loads the core implementation). $classLoader = new SplClassLoader('PasswordLib', 'path/to/'); $classLoader->register();  Note that the path you supply is the directory which contains the PasswordLib directory. Not the PasswordLib directory itself. Secure Random Number/String Generation PHP-PasswordLib implements a method specified in RFC 4086 - Randomness Requirements for Security. Basically, it generates randomness from a number of pseudo random sources, and ""mixes"" them together to get better quality random data out. When you specify the ""strength"" of random generator, you are actually telling the system which sources you would like to use. The higher the strength, the slower and potentially more fragile the source it will use. The mixing function is also dependent upon the strength required. For non-cryptographic numbers, a simple XOR mixing function is used (for speed). As strength requirements increase, it will use a SHA512 based mixing function, then a DES based mixing function and finally an AES-128 based mixing function at ""High"" strength. And all of this is hidden behind a simple API. To generate user-readable strings, you can use the PasswordLib class (which generates medium strength numbers by default): $crypt = new PasswordLib\PasswordLib; $token = $crypt->getRandomToken(16);  Or you can use the core generator to get more control: $factory = new PasswordLib\Random\Factory; $generator = $factory->getHighStrengthGenerator(); $token = $generator->generateString(16);  To generate salts, simple use PasswordLib::getRandomString() or Generator::generate() Password Hashing And Validation A number of password hashing algorithms are supported. When creating a new hash, the algorithm is chosen via a prefix (a CRYPT() style prefix). The library will do the rest (salt generation, etc): $crypt = new PasswordLib\PasswordLib; $hash = $crypt->createPasswordHash($password, '$2a$'); // Blowfish $hash = $crypt->createPasswordHash($password, '$S$'); // Drupal  When validating password hashes, where possible, the library will actually auto-detect the algorithm used from the format and verify. That means it's as simple as: $crypt = new PasswordLib\PasswordLib; if (!$crypt->verifyPasswordHash($password, $hash)) {     //Invalid Password! }  You can bypass the auto-detection and manually verify: $hasher = new PasswordLib\Password\Implementation\Joomla; $hash = $hasher->create($password); if (!$hasher->verify($password, $hash)) {     //Invalid Hash! }  Specifications Supported Password Storage Functions APR1 - Apache's internal password function Blowfish - BCrypt Crypt - Crypt DES hashing Drupal - Drupal's SHA512 based algorithm Hash - Raw md5, sha1, sha256 and sha512 detected by length Joomla - Joomla's MD5 based algorithm Crypt MD5 - Support for Crypt's MD5 algorithm PBKDF - A PBKDF implementation (which supports any supported password based key derivation) PHPASS - An implementation of the portable hash from the PHPASS library PHPBB - PHPBB's MD5 based algorithm Crypt SHA256 - Crypt's SHA256 algorithm Crypt SHA512 - Crypt's SHA512 algorithm Supported Random Number Sources - **CAPICOM**   - A COM object method call available on Windows systems - **MTRand**    - Generation based upon the mt_rand() functions - **MicroTime** - A low entropy source based upon the server's microtime - **Rand**      - A low entropy source based upon rand() - **URandom**   - Generation from the system's /dev/urandom source - **UniqID**    - A low entropy source based upon uniqid()  Library Dependencies: The only dependency PHP-PasswordLib has to use as a library is the PHP version. It is made to be completely indepedent of extensions, implementing functionality natively where possible. Required PHP >= 5.3.2 Optional MCrypt Support Compiled In Build (Testing) Dependencies: These dependencies are necessary to build the project for your environment (including running unit tests, packaging and code-quality checks) Pear Dependencies PDepend Channel (pear.pdepend.org) pdepend/PHP_Depend >= 0.10.0 Phing Channel (pear.phing.info) phing/Phing >= 2.4.0 PHPMD Channel (pear.phpmd.org) phpmd/PHP_PMD >= 1.1.0 PHPUnit Channel (pear.phpunit.de) phpunit/PHPUnit >=3.5.0 phpunit/PHP_CodeBrowser >= 1.0.0 phpunit/phpcpd >= 1.3.0 phpunit/phploc >= 1.6.0 PHP-Tools Channel (pear.php-tools.net) pat/vfsStream >= 0.8.0 Default Pear Channel pear/PHP_CodeSniffer >= 1.3.0 pear/PHP_UML >= 1.5.0 Note: You can install all of them with the following commands: pear channel-discover pear.pdepend.org pear channel-discover pear.phing.info pear channel-discover pear.phpmd.org pear channel-discover pear.phpunit.de pear channel-discover pear.php-tools.net pear channel-discover components.ez.no pear channel-discover pear.symfony-project.com  pear install pdepend/PHP_Depend pear install phpmd/PHP_PMD pear install pat/vfsStream pear install PHP_CodeSniffer pear install PHP_UML pear install phpunit/PHPUnit pear install phpunit/PHP_CodeBrowser pear install phpunit/phpcpd pear install phpunit/phploc pear install phing/Phing  PHP Dependencies PHP >= 5.3.2 php.ini Settings: phar.readonly = Off PHP Extensions XDebug MCrypt Hash (usually enabled) Phar Zip (For Packaging) BZ2 (For Packaging) XSL (For Documentation) Security Vulnerabilities If you have found a security issue, please contact the author directly at me@ircmaxell.com. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ircmaxell/PHP-PasswordLib"	"A library for generating and validating passwords."	"true"
"Passwords"	"phpass"	"http://www.openwall.com/phpass/"	"A portable password hashing framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Portable PHP password hashing (""password encryption"") framework Products Openwall GNU/*/Linux   server OS John the Ripper   password cracker Free & Open Source for any platform Pro for Linux (RPM package) Pro for Mac OS X (dmg package) Wordlists   for password cracking passwdqc   policy enforcement phpass   password hashing in PHP crypt_blowfish   ditto in C/C++ tcb   better password shadowing Pluggable Authentication Modules scanlogd   port scan detector popa3d   tiny POP3 daemon blists   web interface to mailing lists msulogin   single user mode login php_mt_seed   mt_rand() cracker Services Publications Articles Presentations Resources Mailing lists Community wiki Source code repository (CVSweb) File archive & mirrors How to verify digital signatures OVE IDs What's new Follow us on Twitter or via RSS feeds with complete announcement texts or excerpts Portable PHP password hashing framework Please note that password hashing is often wrongly referred to as ""password encryption"". Hashing is a more appropriate term since encryption is something that is supposed to be easily reversible. phpass (pronounced ""pH pass"") is a portable public domain password hashing framework for use in PHP applications. It is meant to work with PHP 3 and above, and it has actually been tested with at least PHP 3.0.18 through 5.4.x so far. (PHP 3 support is likely to be dropped in next revision.) The preferred (most secure) hashing method supported by phpass is the OpenBSD-style Blowfish-based bcrypt, also supported with our public domain crypt_blowfish package (for C applications), and known in PHP as CRYPT_BLOWFISH, with a fallback to BSDI-style extended DES-based hashes, known in PHP as CRYPT_EXT_DES, and a last resort fallback to MD5-based salted and variable iteration count password hashes implemented in phpass itself (also referred to as portable hashes). To ensure that the fallbacks will never occur, PHP 5.3.0+ or the Suhosin patch may be used. PHP 5.3.0+ and Suhosin integrate crypt_blowfish into the PHP interpreter such that bcrypt is available for use by PHP scripts even if the host system lacks support for it. Included in the package are a PHP source file implementing the PasswordHash PHP class, a tiny PHP application demonstrating the use of the PasswordHash class, and a C reimplementation of the portable hashes (used for testing correctness of the primary implementation only). There's a lengthy article/tutorial on introducing password hashing with phpass into a PHP application, as well as on other aspects of managing users and passwords. This article along with sample programs referenced from it is also available for download below. Some of you might prefer this much shorter third-party article focusing solely on introducing phpass into a PHP application. Finally, also relevant is our presentation on the history of password security. Download: phpass 0.3 and its signature phpass article, revision 3 in tar.gz (signature) and ZIP (signature) format These and other related files are also available from the Openwall file archive. The source code of phpass may be browsed via CVSweb. Follow this link for information on verifying the signatures. We may help you integrate phpass into your applications, please check out our services. Contributed resources: Python port of phpass 0.3 (git) by exavolt Python port of phpass 0.1 by Alexander Chemeris (only password checking against existing portable hashes is supported) mod_auth_mysql patched to support phpass portable hashes by Nikolay The Authen::Passphrase::PHPass Perl module reimplements the support for portable hashes introduced in phpass, but in Perl. phpass has been integrated into WordPress 2.5+ (more info), bbPress (more info), Vanilla, PivotX 2.1.0+, Chyrp, Textpattern 4.4.0+, and concrete5 5.6.3+. A cut-down version of phpass (supporting the portable hashes only) has been integrated into phpBB3 (although they have changed the hash type identifier string from ""$P$"" to ""$H$"", the hashes are otherwise compatible with those of genuine phpass). Similarly, phpass forced to use the portable hashes only has been integrated into Joomla starting with versions 2.5.18 and 3.2.1. A cut-down and reworked version of phpass (supporting the portable hashes only and requiring PHP 5+) has been integrated into development versions of Drupal leading to the Drupal 7 release, after a lengthy discussion and many proposed patches against various development versions of Drupal. There's a notion of upgraded hashes - these are phpass portable hashes of md5() hashes (which were used by older versions of Drupal), with the final hash encodings prefixed with a ""U"" (for ""upgraded""). A more recent lengthy discussion has resulted in Drupal 7 switching from MD5 to SHA-512 for the underlying cryptographic primitive in phpass' ""portable"" hashes (making them less portable) while preserving ""read-only"" support for the MD5-based portable hashes. This change was made primarily for ""political"" reasons. Drupal 7's SHA-512 based phpass-like hash encoding strings use ""$S$"" as the hash type identifier. There's also a module for Drupal 5 & 6 that makes the original phpass available with those versions of Drupal, including support for the more secure but not nearly as portable CRYPT_BLOWFISH and CRYPT_EXT_DES hashes. A revision of phpass modified to use SHA-1 in the portable hashes, with the ""$Q$"" prefix to distinguish those, has been integrated into Escher CMS 0.9.2. After Drupal, this is another example of a project breaking compatibility for no good reason. Please don't do things like that! Finally, there's an extension for the TYPO3 CMS that integrates support for phpass portable hashes into TYPO3 (using Drupal-derived phpass code, but supporting the original phpass portable hashes, not Drupal 7's modified ones). phpass is a registered project with Open Hub. The development of phpass and efforts on getting it into Drupal are partially supported by CivicActions, a Drupal consulting company. Quick Comment: 811071"	"null"	"null"	"A portable password hashing framework."	"true"
"Passwords"	"Zxcvbn PHP"	"https://github.com/bjeavons/zxcvbn-php"	"A realistic PHP password strength estimate library based on Zxcvbn JS."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"236"	"12"	"23"	"GitHub - bjeavons/zxcvbn-php: Realistic PHP password strength estimate library based on Zxcvbn JS Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 236 Fork 23 bjeavons/zxcvbn-php Code Issues 4 Pull requests 2 Pulse Graphs Realistic PHP password strength estimate library based on Zxcvbn JS 33 commits 1 branch 5 releases 1 contributor PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit 24af172 Jun 7, 2016 bjeavons Update README … Correct version constraint. Fixes #13 Permalink Failed to load latest commit information. src/ZxcvbnPhp Better format of user input, documenting, fixes PR 6 Oct 8, 2014 test Better format of user input, documenting, fixes PR 6 Oct 8, 2014 .coveralls.yml fix for incorrect RepeatMatch entropy, code coverage & coveralls Dec 17, 2013 .gitignore fix for incorrect RepeatMatch entropy, code coverage & coveralls Dec 17, 2013 .travis.yml travis call coveralls Dec 17, 2013 LICENSE.txt Changed license to MIT Apr 6, 2014 README.md Update README Jun 7, 2016 composer.json Update composer for MIT license Apr 7, 2014 phpunit.xml fix for incorrect RepeatMatch entropy, code coverage & coveralls Dec 17, 2013 README.md Zxcvbn-PHP is a password strength estimator using pattern matching and minimum entropy calculation. Zxcvbn-PHP is based on the Javascript zxcvbn project from Dropbox and @lowe. ""zxcvbn"" is bad password, just like ""qwerty"" and ""123456"". zxcvbn attempts to give sound password advice through pattern matching and conservative entropy calculations. It finds 10k common passwords, common American names and surnames, common English words, and common patterns like dates, repeats (aaa), sequences (abcd), and QWERTY patterns. Installation The library can be installed with Composer by adding it as a dependency to your composer.json file. {     ""require"": {         ""bjeavons/zxcvbn-php"": ""^0.1""     } } After running php composer.phar update on the command line, include the autoloader in your PHP scripts so that the ZxcvbnPhp class is available. require_once 'vendor/autoload.php'; Usage use ZxcvbnPhp\Zxcvbn;  $userData = array(   'Marco',   'marco@example.com' );  $zxcvbn = new Zxcvbn(); $strength = $zxcvbn->passwordStrength('password', $userData); echo $strength['score']; // will print 0  $strength = $zxcvbn->passwordStrength('correct horse battery staple'); echo $strength['score']; // will print 4 Acknowledgements Thanks to @lowe for the original Javascript Zxcvbn and @Dreyer's port for reference. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bjeavons/zxcvbn-php"	"A realistic PHP password strength estimate library based on Zxcvbn JS."	"true"
"Code Analysis"	"Athletic"	"https://github.com/polyfractal/athletic"	"An annotation based benchmark framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"300"	"22"	"24"	"GitHub - polyfractal/athletic: PHP Benchmarking Framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 300 Fork 24 polyfractal/athletic Code Issues 13 Pull requests 9 Pulse Graphs PHP Benchmarking Framework 100 commits 1 branch 9 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.8 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 403bbb0 Apr 11, 2016 polyfractal Update Readme with notice about maintenance Permalink Failed to load latest commit information. bin use a bin script instead of bootstrap file Jul 17, 2013 src/Athletic Merge pull request #29 from gabrielsch/patch-1 Nov 14, 2014 tests Right-align the iterations count. Nov 9, 2014 .gitignore phpunit.xml should be ignored Dec 22, 2013 .travis.yml Enabling HHVM for travis builds Dec 22, 2013 bootstrap.php Initial working commit Jun 14, 2013 box.json.dist Add box.json, support for generating PHAR file Jun 25, 2013 composer.json Update dependency versions Jun 3, 2014 phpunit.xml.dist Wrong test suite name Dec 22, 2013 readme.md Update Readme with notice about maintenance Apr 11, 2016 readme.md Athletic Athletic is a benchmarking framework. It allows developers to benchmark their code without littering microtime() calls everywhere. Athletic was inspired by the annotation format that PHPUnit uses. Benchmark tests extend the AthleticEvent class and are annotated with specific docblock parameters. The benchmark suite is then run with the Athletic command-line tool. Branch Unit Tests Coverage WARNING: No longer maintained Athletic is not currently being maintained, so it may have bugs or other problems. I would recommend using PhpBench, which was inspired by Athletic. It is far more capable, and actively maintained Why Benchmark? Because fast code is good! While premature optimization is certainly evil, optimization is always an important component of software development. And sometimes you just really need to see if one solution to a problem is faster than an alternative. Why Use Athletic? Because it makes benchmarking easy! Athletic is built around annotations. Simply create a benchmarking class and annotate a few methods: /**  * @iterations 1000  */ public function fastIndexingAlgo() {     $this->fast->index($this->data); } Without Athletic, you have to litter your code with microtime() calls and build timing metrics yourself. Or you end up building a benchmark harness remarkably similar to Athletic (but probably with less syntactic sugar...because who builds throw-away code to read test annotations and fancy output?) Why can't I use xDebug? xDebug is an excellent profiling tool, but it is not a benchmarking tool. xdebug (and by extension, cachegrind) will show you what is fast/slow inside your method, and is indispensable for actually optimizing your code. But it is not useful for running 1000 iterations of a particular function and determining average execution time. Quick Installation via Composer You can easily install Athletic through Composer in two steps: # Install Composer curl -sS https://getcomposer.org/installer | php  # Add Athletic as a dev dependency php composer.phar require athletic/athletic:~0.1 --dev You can find out more on how to install Composer, configure autoloading, and other best-practices for defining dependencies at getcomposer.org. Usage To begin using Athletic, you must create an Event. This is the analog of a PHPUnit Test Case. An Event will benchmark one or more functions related to your code, compile the results and output them to the command line. Here is a sample Event: <?php  namespace Vendor\Package\Benchmarks\Indexing;  use Vendor\Package\Indexing; use Athletic\AthleticEvent;  class IndexingEvent extends AthleticEvent {     private $fast;     private $slow;     private $data;      public function setUp()     {         $this->fast = new Indexing\FastIndexer();         $this->slow = new Indexing\SlowIndexer();         $this->data = array('field' => 'value');     }       /**  * @iterations 1000  */     public function fastIndexingAlgo()     {         $this->fast->index($this->data);     }       /**  * @iterations 1000  */     public function slowIndexingAlgo()     {         $this->slow->index($this->data);     }  } Let's look at how this works. <?php  namespace Vendor\Package\Benchmarks\Indexing;  use Vendor\Package\Indexing; use Athletic\AthleticEvent; First, we have a PHP file that is included in your project's repo, just like unit tests. In this example, the Event is saved under the Vendor\Package\Benchmarks\Indexing namespace. It uses classes from your project located at Vendor\Package\Indexing. It also uses a class from the Athletic framework. class IndexingEvent extends AthleticEvent { Next, we declare an indexing class that extends \Athletic\AthleticEvent. This is important because it tells Athletic that this class should be benchmarked. AthleticEvent is an abstract class that provides code to inspect your class and actually run the benchmarks.     private $fast;     private $slow;     private $data;      public function setUp()     {         $this->fast = new Indexing\FastIndexer();         $this->slow = new Indexing\SlowIndexer();         $this->data = array('field' => 'value');     } Next, we have some private variables and a setUp() method. The setUp() method is invoked once at the beginning of each benchmark iteration. This is a good place to instantiate variables that are important to the benchmark itself, populate data, build database connections, etc. In this example, we are building two ""Indexing"" classes and a sample piece of data. (More details about setup and tear down are further down in this document)     /**  * @iterations 1000  */     public function fastIndexingAlgo()     {         $this->fast->index($this->data);     }       /**  * @iterations 1000  */     public function slowIndexingAlgo()     {         $this->slow->index($this->data);     } Finally, we get to the meat of the benchmark. Here we have two methods that are annotated with @iterations in the docblock. The @iterations annotation tells Athletic how many times to repeat the method. If a method does not have an iterations annotation, it will not be benchmarked. That's it! Now you are ready to run the benchmark. Running Athletic A benchmark test is run from the command line: $ php ./vendor/bin/athletic -p /home/ProjectDir/benchmarks/ -b /home/ProjectDir/vendor/autoload.php The tool has a few flags that can be set: Flag Long Form Required Description -p --path Yes Specifies the path to the Events to benchmark. Will recursively load all files/classes that extend AthleticEvent -b --bootstrap Sets the path to an optional bootstrap file which is included before anything else. This is often used to include an autoloader for your project. -f --formatter User-configured formatter to use instead of DefaultFormatter -h --help Help screen with options and their descriptions Note: Athletic is intended to be used as a single Phar archive, but that process has not been built yet. Soon! Output So what does the output of a benchmark look like? $ php ./vendor/bin/athletic -p /home/ProjectDir/benchmarks/ -b /home/ProjectDir/vendor/autoload.php  Vendor\Package\Benchmarks\Indexing\IndexingEvent     Method Name             Iterations    Average Time      Ops/second     ---------------------  ------------  --------------    -------------     fastIndexingAlgo:      [1000      ] [0.0020904064178] [478.37588]     slowIndexingAlgo:      [1000      ] [0.0048114223480] [177.59184]  The default formatter outputs the Event class name, each method name, the number of iterations, average time and operations per second. More advanced formatters will be created in the near future (CSVFormatter, database export, advanced statistics, etc). Further Information SetUps and TearDowns Athletic offers several methods to setup and tear down data/variables. Method Description classSetUp() Invoked at the beginning of the Event before anything else has occurred setUp() Invoked once before each iteration of the method being benchmark. classTearDown() Invoked at the end of the event after everything else has occurred. tearDown() Invoked after each iteration of a benchmark has completed. There are two levels of setup and tear down to prevent ""state leakage"" between benchmarks. For example, an object that caches calculations will perform faster on subsequent calls to the method. If the goal is to benchmark the initial calculation, it makes sense to place the instantiation of the object in setUp(). If the goal, however, is to benchmark the entire process (initial calculation and subsequent caching), then it makes more sense to instantiate the object in classSetUp() so that it is only built once. Calibration Athletic uses Reflection and variable functions to invoke the methods in your Event. Because there is some internal overhead to variable functions, Athletic performs a ""calibration"" step before each iteration. This step calls an empty calibration method and times how long it takes. This time is then subtracted from the iterations total time, providing a more accurate total time. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/polyfractal/athletic"	"An annotation based benchmark framework."	"true"
"Code Analysis"	"Code Climate"	"https://codeclimate.com/"	"An automated code review."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Code Climate: Static analysis from your command line to the cloud. Code Climate Product Engines Features Pricing Open Source Enterprise Developers Sign up Login Have a promo code? Redeem it on your Plans & Billing tab after you sign up. Healthy code ships faster. Get automated code review for test coverage, complexity, duplication, security, style, and more, and merge with confidence. Get Started Free with GitHub or use your email instead Code Climate monitors the health of your code, from your command line to the cloud, so you can fix issues sooner and ship better code, faster. Local Open source CLI reduces the feedback loop with results before you push. Hosted Automated code review that analyzes every commit, branch and pull request. On-Premise Easily deploy and scale in your own datacenter or cloud instance. The open and extensible static analysis platform, for everyone. CoffeeScript Ember Go JavaScript Python PHP Ruby RubyMotion Sass More Get better code now. Join over 50,000 software developers, who trust Code Climate to improve the quality of their code, across style, complexity, duplication, security and more. Simple pricing for teams big and small. Always free for OSS. Start Your 14-day Free Trial Today Trusted by the best in the business. Code Climate helps us deliver higher quality software to our customers and fix critical security issues in our applications. It’s as indispensable to us as GitHub. Chad Pytel, CEO of thoughtbot Help Docs We're hiring! About Blog Terms Privacy Security Status @codeclimate"	"null"	"null"	"An automated code review."	"true"
"Code Analysis"	"Dissect"	"https://github.com/jakubledl/dissect"	"A set of tools for lexical and syntactical analysis."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"167"	"16"	"12"	"GitHub - jakubledl/dissect: A set of tools for lexical and syntactical analysis written in pure PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 167 Fork 12 jakubledl/dissect Code Issues 4 Pull requests 5 Pulse Graphs A set of tools for lexical and syntactical analysis written in pure PHP. 72 commits 6 branches 3 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags 1.0 develop kernelset master operators regex-lexer Nothing to show v1.0.1 v1.0.0 v0.9.0 Nothing to show New pull request Latest commit 4074bc6 Feb 2, 2013 jakubledl Todolist update [ci skip] Permalink Failed to load latest commit information. bin EOL fix and credit where it's due Jan 2, 2013 docs Documentation fixes Feb 2, 2013 src/Dissect Correct resolutions for nonassociative tokens Jan 31, 2013 tests A working implementation, will subject to further testing. Jan 30, 2013 .gitignore Initial commit Oct 6, 2012 .travis.yml Update for travis Jan 21, 2013 CHANGELOG.md CHANGELOG update Jan 29, 2013 README.md Final cleanup Jan 15, 2013 TODO.md Todolist update [ci skip] Feb 2, 2013 UNLICENSE Basic readme and unlicense Oct 6, 2012 composer.json Another take at the CLI Jan 2, 2013 phpunit.xml Initial commit Oct 6, 2012 README.md Welcome to Dissect! master - this branch always contains the last stable version. develop - the unstable development branch. Dissect is a set of tools for lexical and syntactical analysis written in pure PHP. Documentation? Here. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jakubledl/dissect"	"A set of tools for lexical and syntactical analysis."	"true"
"Code Analysis"	"Exakat"	"http://www.exakat.io/"	"A static analysis engine for PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Turn PHP into Analytics - Exakat <iframe src=""//www.googletagmanager.com/ns.html?id=GTM-PDT4RG"" height=""0"" width=""0"" style=""display:none;visibility:hidden""> NEW : Exakat is now PHP7 ready × Login 0 items - 0€ Product What is Exakat? What’s new in Exakat Rules list Public analyses Use Case Developers Get Started Contribute to Rules Forum Documentation Blog Get Exakat Download exakat Free Trial Exakat Cloud Get Expertise Product What is Exakat? What’s new in Exakat Rules list Public analyses Use Case Developers Get Started Contribute to Rules Forum Documentation Blog Get Exakat Download exakat Free Trial Exakat Cloud Get Expertise Introducing Exakat Turn your PHP code into analytics with Exakat Download Free Trial the most reliable open source php static analyser tool Exakat Cloud Get ready with PHP7 Exakat provides the most advanced PHP7 compatibility analyses Get the rules Professional Services Accelerate your PHP7 journey with custom work on your project PHP7 Bootcamp PHP7 Workshop PHP AT A GLANCE ! Exakat provides a real time PHP code analyser from PHP 4 to PHP 7 that check PHP version compliance, spot security risks, reinforce development best practices or validate your code in continus integration based on a PHP expertise knowledge base with more +100 rules. COMPARE EXAKAT EDITIONS Choose the Way to Discover Exakat that Matches Your Needs Community Edition Ideal for learning about Exakat and do-it-yourself projects for on-premise execution Download Now! Free Trial Ideal for discovering Exakat for free on small public project Discover Now ! Cloud The same features as Community Edition for big private projects that require support Discover Now ! WHO USES EXAKAT ? Entreprise “reinforcing” their PHP development with automated static analysis UNMATCHED PHP EXPERTISE Check out our current offerings and contact us with your needs PHP7 Compliance Workshop Accelerate your PHP7 journey with a custom work where we analyse the PHP7 compliance of your project Contact us or Buy online PHP7 Compliance Bootcamp Accelerate your PHP7 journey with a hands-on engagement that consists of two days of extensive insight of PHP7 and static analysis and two days of custom work where we analyse the PHP7 compliance of your project and the approach to tackle the migration. Contact us or Buy online Recent Blog Posts Upgraded Exakat : serie 0.7.x 12 Jul 2016 0 Upgraded Exakat : serie 0.7.x There is an upgraded Exakat version available. Since May, we’ve been working hard on a major upgrade of ...Read More » Rewrite PHP code with unit tests 17 Jun 2016 0 Rewrite PHP code with unit tests There are two moments in the life cycle of a project where you can apply a long known ...Read More » LEARN EXAKAT ON PUBLIC PROJECTS Discover ready to use practical analyses on well know open source project About us Exakat is an Open Source PHP Code Analysis Engine and an Open Content Rules Library designed for PHP developers looking for efficient answers to their code quality needs Recent Posts Upgraded Exakat : serie 0.7.x Rewrite PHP code with unit tests Static analysis helps migrate to PHP 7 7 new PHP static analysis with Exakat 0.6.0 PHP bug-fixes help your code Keep in touch with us Copyright ® 2014-2016 Exakat Ltd.. All rights reserved."	"null"	"null"	"A static analysis engine for PHP."	"true"
"Code Analysis"	"GrumPHP"	"https://github.com/phpro/grumphp"	"A composer plugin to defend code quality."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1132"	"54"	"70"	"GitHub - phpro/grumphp: A PHP code-quality tool Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 54 Star 1,132 Fork 70 phpro/grumphp Code Issues 10 Pull requests 8 Wiki Pulse Graphs A PHP code-quality tool 475 commits 1 branch 26 releases Fetching contributors PHP 99.2% Other 0.8% PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.9.1 v0.9.0 v0.8.0 v0.7.2 v0.7.1 v0.7.0 v0.6.0 v0.5.2 v0.5.1 v0.5.0 v0.4.1 v0.4.0 v0.3.5 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.0 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 2c2ea29 Jul 11, 2016 veewee committed on GitHub Merge pull request #162 from dansoap/xmllint-file-extensions … added triggered_by option for xml linter Permalink Failed to load latest commit information. .github Add default templates for issues and templates. Feb 29, 2016 bin Allow both project as user specific autoloaders. Nov 9, 2015 doc Merge pull request #162 from dansoap/xmllint-file-extensions Jul 11, 2016 resources Use sh instead of bash. May 31, 2016 spec/GrumPHP Merge pull request #162 from dansoap/xmllint-file-extensions Jul 11, 2016 src/GrumPHP Merge pull request #162 from dansoap/xmllint-file-extensions Jul 11, 2016 test Introduce the jsonlint task Dec 26, 2015 .gitignore Fix insights errors. Apr 4, 2016 .travis.yml Updated travis config Jul 2, 2016 CONTRIBUTING.md Improve documentation. Dec 13, 2015 LICENSE Update copyright year Jan 28, 2016 Makefile Force GPG signed tags Apr 14, 2016 README.md Configurable process timeout parameter May 30, 2016 appveyor.yml Add Windows CI Feb 8, 2016 composer.json fabpot-cs-fixer is abandoned, use the friendsofphp version instead (#154 Jun 9, 2016 grumphp.yml.dist Make it possible to support dist files. Mar 30, 2016 phpunit.xml.dist Add xmllint task. Dec 22, 2015 README.md GrumPHP Sick and tired of defending code quality over and over again? GrumPHP will do it for you! This composer plugin will register some git hooks in your package repository. When somebody commits changes, GrumPHP will run some tests on the committed code. If the tests fail, you won't be able to commit your changes. This handy tool will not only improve your codebase, it will also teach your co-workers to write better code following the best practices you've determined as a team. GrumPHP has a set of common tasks built-in. You will be able to use GrumPHP with a minimum of configuration. We don't want to bore you with all the details, so quick: install it yourself and unleash the power of GrumPHP! Demo Installation If you are trying to install GrumPHP on Windows: please read the windows pre-install section. This package is a composer plugin and should be installed to your project's dev dependency using composer: composer require --dev phpro/grumphp When the package is installed, GrumPHP will attach itself to the git hooks of your project. You will see following message in the composer logs: Watch out! GrumPHP is sniffing your commits! To make GrumPHP even more awesome, it will suggest installing some extra packages: behat/behat : ~3.0 codegyre/robo : ~0.7 fabpot/php-cs-fixer : ~1.10 malukenho/kawaii-gherkin : ~0.1 phing/phing : ~2.0 phpspec/phpspec : ~2.1 phpunit/phpunit : ~4.5 roave/security-advisories : dev-master@dev squizlabs/php_codesniffer : ~2.3 codeception/codeception : ~2.1 sensiolabs/security-checker : ~3.0 GrumPHP will never push you into using a specific task. You can choose the tasks that fit your needs, and activate or deactivate any task in no time! Having trouble installing GrumPHP? Find out how to: Install globally Install with an exotic project structure Install on Windows Configuration Some things in GrumPHP can be configured in a grumphp.yml or grumphp.yml.dist file in the root of your project (the directory where you run the grumphp command). You can specify a custom config filename and location in composer.json or in the --config option of the console commands. # grumphp.yml parameters:     bin_dir: ""./vendor/bin""     git_dir: "".""     hooks_dir: ~     hooks_preset: local     stop_on_failure: false     ignore_unstaged_changes: false     process_timeout: 60     ascii:         failed: grumphp-grumpy.txt         succeeded: grumphp-happy.txt     tasks:         ant: ~         behat: ~         codeception: ~         composer: ~         gherkin: ~         git_blacklist: ~         git_commit_message: ~         grunt: ~         gulp: ~         jsonlint: ~         phing: ~         phpcs: ~         phpcsfixer: ~         phpspec: ~         phpunit: ~         robo: ~         securitychecker: ~         shell: ~         xmllint: ~         yamllint: ~     extensions: [] You can find a detailed overview of the configurable options in these sections: Parameters Tasks Events Extensions Commands Since GrumPHP is just a CLI tool, these commands can be triggered: configure git:init git:deinit git:pre-commit git:commit-msg run Compatibility GrumPHP works with PHP 5.3 or above, and is also tested to work with HHVM. This package has been tested with following git clients: CLI Unix CLI Mac CLI Windows PhpStorm Git Atlassian SourceTree Syntevo SmartGit Roadmap Following tasks are still on the roadmap: phpmd phpcpd phpdcd twig lint symfony validation npm tests humbug ... New features or bugfixes can be logged at the issue tracker. Want to help out? Feel free to contact us! Build your own conventions checker You can see an example of how to build your own conventions checker. Solving issues GrumPHP does not work with submodules About Submitting bugs and feature requests Bugs and feature request are tracked on GitHub. Please take a look at our rules before contributing your code. License GrumPHP is licensed under the MIT License - see the LICENSE file for details Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phpro/grumphp"	"A composer plugin to defend code quality."	"true"
"Code Analysis"	"Mondrian"	"https://github.com/Trismegiste/Mondrian"	"A code analysis tool using Graph Theory."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"295"	"21"	"15"	"GitHub - Trismegiste/Mondrian: A static php code analysis tool using the Graph Theory Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 295 Fork 15 Trismegiste/Mondrian Code Issues 6 Pull requests 2 Wiki Pulse Graphs A static php code analysis tool using the Graph Theory http://trismegiste.github.io/Mondrian/ 595 commits 2 branches 8 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.3.3 v1.3.2 v1.3.1 v1.3.0-dev v1.2.5 v1.2.4 v1.1 v1.0 Nothing to show New pull request Latest commit a1f74e1 Sep 16, 2014 Trismegiste test json exporter Permalink Failed to load latest commit information. bin/box new release with html rendering Sep 12, 2014 doc adding missing trait method visitor Sep 16, 2014 src fix a bug in hidden coupling since trait can now own an implementation Sep 16, 2014 tests test json exporter Sep 16, 2014 .gitignore switching to PSR-4 : it's freakingly easy Sep 11, 2014 .mondrian.yml new command default config generation May 19, 2013 .travis.yml trying to workaround the BC break of php unserialize() Sep 11, 2014 README.md bad link Sep 13, 2014 box.json new release with html rendering Sep 12, 2014 composer.json tuning autoloading for box2 and phpunit Sep 11, 2014 mondrian.php removing notice Sep 9, 2014 phpdoc.xml switching to PSR-4 : it's freakingly easy Sep 10, 2014 phpunit.xml replacing new visitor seems ok Sep 15, 2014 README.md Mondrian Ok guyz, you have a master degree in Graph Theory, you follow Law of Demeter and you live on S.O.L.I.D principles ? Let's have some Fun ! (^ω^) What It is a set of CLI tools to help you to analyse and refactor highly coupled classes. As you know Law of Demeter and S.O.L.I.D guidances, you need your classes loosely coupled. And for this, there is one only rule : ABSTRACTION This app provides some helpers to add abstraction into concrete classes with minimum pain. Getting started Download the PHAR : mondrian.phar Try to run a simple command with a few files (or a small part of a project) $ mondrian.phar digraph /home/dev/project  This command produces a DOT file for GraphViz. Other formats are available : html : interactive graph with the d3.js awesome library svg : open standard for vector graphics (requires GraphViz) json : format for d3.js for example Example with html format $ php mondrian.php d --ignore=tests --ignore=vendor --format=html ./MyPhpProject/  Note: The generated html file does not require any dependencies nor a connection. Ecosystem Running unit tests with PHPUnit $ phpunit.phar  Building the documentation with phpDocumentor $ phpDocumentor.phar  Building mondrian.phar from the sources with box2 $ box.phar b  Examples Default digraph on trismegiste/dokudoki Which components are bottleneck ? Reduced graph to LSP violations on trismegiste/prolog How Read the concept here Read the online documentation here And the API here (not up to date) Extensible You can easily add plugins to this tool to make your own algorithm, coloring scheme or new generator. I try to make the API mostly decoupled, re-usable and with great SRP and OCP concerns. Look into the ""About"" plugin to understand a basic stub of plugin. Third party Packages used in this project : nikic/php-parser for parsing PHP symfony/console for creating CLI app with swag alom/graphviz for rendering DOT files symfony/finder for searching files through filesystem symfony/config for managing yaml configuration without headache D3.js for graph rendering in html Phar builded with Box Special thanks William Gibson JS Bach Dream Theater Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Trismegiste/Mondrian"	"A code analysis tool using Graph Theory."	"true"
"Code Analysis"	"PHP Analyser"	"https://github.com/scrutinizer-ci/php-analyzer"	"A library for analysing PHP code to find bugs and errors."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"448"	"19"	"57"	"GitHub - scrutinizer-ci/php-analyzer: Performs advanced static analysis on PHP code Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 448 Fork 57 scrutinizer-ci/php-analyzer Code Pull requests 2 Pulse Graphs Performs advanced static analysis on PHP code https://scrutinizer-ci.com/docs/tools/php/php-analyzer/ 3 commits 2 branches 0 releases 1 contributor Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags legacy master Nothing to show Nothing to show New pull request Latest commit 5e7dafd Jun 15, 2016 schmittjoh committed on GitHub Update README.md Permalink Failed to load latest commit information. README.md Update README.md Jun 15, 2016 README.md PHP Analyzer Please report bugs or feature requests via our website support system ? in bottom right or by emailing support@scrutinizer-ci.com. Contributing Stubs PHP Analyzer uses stubs for built-in PHP classes and functions. These stubs look like regular PHP code and define the available parameters, their types, properties, methods etc. If you would like to contribute a fix or additional stubs, please fork and submit a patch to the legacy branch: https://github.com/scrutinizer-ci/php-analyzer/tree/legacy/res Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/scrutinizer-ci/php-analyzer"	"A library for analysing PHP code to find bugs and errors."	"true"
"Code Analysis"	"PHP Code Sniffer"	"https://github.com/squizlabs/PHP_CodeSniffer"	"A library that detects PHP, CSS and JS coding standard violations."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2514"	"126"	"596"	"GitHub - squizlabs/PHP_CodeSniffer: PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 126 Star 2,514 Fork 596 squizlabs/PHP_CodeSniffer Code Issues 64 Pull requests 22 Wiki Pulse Graphs PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards. http://pear.php.net/package/PHP_CodeSniffer 3,555 commits 4 branches 46 releases 121 contributors PHP 97.8% JavaScript 1.8% Other 0.4% PHP JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.5 3.0 gh-pages master Nothing to show 2.6.2 2.6.1 2.6.0 2.5.1 2.5.0 2.4.0 2.3.4 2.3.3 2.3.2 2.3.1 2.3.0 2.2.0 2.1.0 2.0.0 2.0.0a2 2.0.0a1 2.0.0RC4 2.0.0RC3 2.0.0RC2 2.0.0RC1 1.5.6 1.5.5 1.5.4 1.5.3 1.5.2 1.5.1 1.5.0 1.5.0RC4 1.5.0RC3 1.5.0RC2 1.5.0RC1 1.4.8 1.4.7 1.4.6 1.4.5 1.4.4 1.4.3 1.4.2 1.4.1 1.4.0 1.3.6 1.3.5 1.3.4 1.3.3 1.3.2 1.3.1 Nothing to show New pull request Latest commit e05973a Jul 15, 2016 gsherwood Squiz.WhiteSpace.LanguageConstructSpacing no longer checks for spaces… … … if parenthesis are being used (request #1062) Permalink Failed to load latest commit information. CodeSniffer Squiz.WhiteSpace.LanguageConstructSpacing no longer checks for spaces… Jul 15, 2016 scripts Coding standard fixes Jan 16, 2015 tests PEAR and Squiz FunctionComment sniffs now support variadic functions … Jan 13, 2016 .gitattributes Ignoring all other test directories as well Jan 8, 2013 .gitignore gitignore: composer.lock that is already missing added Jun 25, 2016 .travis.yml nightly -> 7.0 Dec 8, 2015 CONTRIBUTING.md Fixed standard name Nov 28, 2014 CodeSniffer.conf.dist Fix typo in config. Jun 10, 2013 CodeSniffer.php Squiz.WhiteSpace.LanguageConstructSpacing no longer checks for spaces… Jul 14, 2016 README.md Update README.md May 6, 2016 composer.json Require SimpleXML Mar 2, 2016 licence.txt Included whole licence inside included licence file + standardise lic… Aug 14, 2012 package.xml Squiz.WhiteSpace.LanguageConstructSpacing no longer checks for spaces… Jul 14, 2016 phpcs.xml.dist No need to hard-code the report Jul 5, 2016 phpunit.xml.dist Now using .dist files for PHPCS and PHPUnit Dec 22, 2015 README.md About PHP_CodeSniffer is a set of two PHP scripts; the main phpcs script that tokenizes PHP, JavaScript and CSS files to detect violations of a defined coding standard, and a second phpcbf script to automatically correct coding standard violations. PHP_CodeSniffer is an essential development tool that ensures your code remains clean and consistent. Requirements PHP_CodeSniffer requires PHP version 5.1.2 or greater, although individual sniffs may have additional requirements such as external applications and scripts. See the Configuration Options manual page for a list of these requirements. The SVN pre-commit hook requires PHP version 5.2.4 or greater due to its use of the vertical whitespace character. Installation The easiest way to get started with PHP_CodeSniffer is to download the Phar files for each of the commands: curl -OL https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar php phpcs.phar -h  curl -OL https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar php phpcbf.phar -h  If you use PEAR, you can install PHP_CodeSniffer using the PEAR installer. This will make the phpcs and phpcbf commands immediately available for use. To install PHP_CodeSniffer using the PEAR installer, first ensure you have installed PEAR and then run the following command: pear install PHP_CodeSniffer  If you prefer using Composer you can easily install PHP_CodeSniffer system-wide with the following command: composer global require ""squizlabs/php_codesniffer=*""  Make sure you have ~/.composer/vendor/bin/ in your PATH. Or alternatively, include a dependency for squizlabs/php_codesniffer in your composer.json file. For example: {     ""require-dev"": {         ""squizlabs/php_codesniffer"": ""2.*""     } } You will then be able to run PHP_CodeSniffer from the vendor bin directory: ./vendor/bin/phpcs -h ./vendor/bin/phpcbf -h  You can also download the PHP_CodeSniffer source and run the phpcs and phpcbf commands directly from the Git clone: git clone https://github.com/squizlabs/PHP_CodeSniffer.git cd PHP_CodeSniffer php scripts/phpcs -h php scripts/phpcbf -h  Documentation The documentation for PHP_CodeSniffer is available on the Github wiki. Information about upcoming features and releases is available on the Squiz Labs blog. Issues Bug reports and feature requests can be submitted on the Github Issue Tracker or the PEAR bug tracker. Contributing See CONTRIBUTING.md for information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/squizlabs/PHP_CodeSniffer"	"A library that detects PHP, CSS and JS coding standard violations."	"true"
"Code Analysis"	"PHP CS Fixer"	"https://github.com/FriendsOfPHP/PHP-CS-Fixer"	"A coding standards fixer library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3419"	"148"	"517"	"GitHub - FriendsOfPHP/PHP-CS-Fixer: A tool to automatically fix PHP coding standards issues Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 148 Star 3,419 Fork 517 FriendsOfPHP/PHP-CS-Fixer Code Issues 98 Pull requests 28 Pulse Graphs A tool to automatically fix PHP coding standards issues http://cs.sensiolabs.org 1,680 commits 3 branches 44 releases Fetching contributors PHP 99.9% Shell 0.1% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 1.11 Switch branches/tags Branches Tags 1.11 1.12 master Nothing to show v2.0.0-alpha v1.11.5 v1.11.4 v1.11.3 v1.11.2 v1.11.1 v1.11 v1.10.3 v1.10.2 v1.10.1 v1.10 v1.9.3 v1.9.2 v1.9.1 v1.9 v1.8.1 v1.8 v1.7.1 v1.7 v1.6.2 v1.6.1 v1.6 v1.5.2 v1.5.1 v1.5 v1.4.2 v1.4.1 v1.4 v1.3 v1.2 v1.1 v1.0 v0.5.7 v0.5.6 v0.5.5 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 2afe85e Jul 14, 2016 keradus bug #2072 LowercaseKeywordsFixer - handle CT_CLASS_CONSTANT (tgabi333) … This PR was squashed before being merged into the 1.11 branch (closes #2072).  Discussion ----------  LowercaseKeywordsFixer - handle CT_CLASS_CONSTANT  Two changes plus tests: `CT_CLASS_CONSTANT ` is recognized case insensitive mode `CT_CLASS_CONSTANT ` was added to list of known keywords  Closes #2070  Commits -------  7eff696 LowercaseKeywordsFixer - handle CT_CLASS_CONSTANT Permalink Failed to load latest commit information. Symfony/CS LowercaseKeywordsFixer - handle CT_CLASS_CONSTANT Jul 14, 2016 .coveralls.yml add support for Coveralls Dec 13, 2014 .editorconfig use UNIX-style line endings Sep 10, 2014 .gitignore Alphabetically sort entries in .gitignore Nov 29, 2015 .php_cs PhpUnitConstructFixer - fix performance and add to local .php_cs Jul 26, 2015 .travis.yml Properly build phar file for lowest supported PHP version Jul 4, 2016 CHANGELOG.md prepared the 1.11.5 release Jul 7, 2016 CONTRIBUTING.md CONTRIBUTING.md - add link to PSR-5 Aug 5, 2015 COOKBOOK-FIXERS.md Update coding guide in cookbook Nov 25, 2015 LICENSE update license year Jan 3, 2016 README.rst prepared the 1.11.5 release Jul 6, 2016 appveyor.yml appveyor - fix build Feb 3, 2016 benchmark.sh Benchmark script - as requested by Keradus Jan 22, 2015 box.json switched to Box to create the PHAR Jan 18, 2014 composer.json Bump supported HHVM version, improve ShortEchoTagFixer on HHVM Jun 23, 2016 php-cs-fixer Bump supported HHVM version, improve ShortEchoTagFixer on HHVM Jun 23, 2016 phpunit.xml.dist phpunit.xml.dist - disable gc Sep 29, 2015 README.rst PHP Coding Standards Fixer The PHP Coding Standards Fixer tool fixes most issues in your code when you want to follow the PHP coding standards as defined in the PSR-1 and PSR-2 documents. If you are already using PHP_CodeSniffer to identify coding standards problems in your code, you know that fixing them by hand is tedious, especially on large projects. This tool does the job for you. Requirements PHP needs to be a minimum version of PHP 5.3.6. Installation Locally Download the php-cs-fixer.phar file and store it somewhere on your computer. Globally (manual) You can run these commands to easily access php-cs-fixer from anywhere on your system: $ wget https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v1.11.5/php-cs-fixer.phar -O php-cs-fixer or with curl: $ curl -L https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v1.11.5/php-cs-fixer.phar -o php-cs-fixer then: $ sudo chmod a+x php-cs-fixer $ sudo mv php-cs-fixer /usr/local/bin/php-cs-fixer Then, just run php-cs-fixer. Globally (Composer) To install PHP-CS-Fixer, install Composer and issue the following command: $ ./composer.phar global require fabpot/php-cs-fixer Then, make sure you have ~/.composer/vendor/bin in your PATH, and you're good to go: export PATH=""$PATH:$HOME/.composer/vendor/bin"" Globally (homebrew) PHP-CS-Fixer is part of the homebrew-php project. Follow the installation instructions at https://github.com/homebrew/homebrew-php if you don't already have it. $ brew install homebrew/php/php-cs-fixer Update Locally The self-update command tries to update php-cs-fixer itself: $ php php-cs-fixer.phar self-update Globally (manual) You can update php-cs-fixer through this command: $ sudo php-cs-fixer self-update Globally (Composer) You can update php-cs-fixer through this command: $ ./composer.phar global update fabpot/php-cs-fixer Globally (homebrew) You can update php-cs-fixer through this command: $ brew upgrade php-cs-fixer Usage The fix command tries to fix as much coding standards problems as possible on a given file or directory: php php-cs-fixer.phar fix /path/to/dir php php-cs-fixer.phar fix /path/to/file The --verbose option show applied fixers. When using txt format (default one) it will also displays progress notification. The --level option limits the fixers to apply on the project: php php-cs-fixer.phar fix /path/to/project --level=psr0 php php-cs-fixer.phar fix /path/to/project --level=psr1 php php-cs-fixer.phar fix /path/to/project --level=psr2 php php-cs-fixer.phar fix /path/to/project --level=symfony By default, all PSR-2 fixers and some additional ones are run. The ""contrib level"" fixers cannot be enabled via this option; you should instead set them manually by their name via the --fixers option. The --fixers option lets you choose the exact fixers to apply (the fixer names must be separated by a comma): php php-cs-fixer.phar fix /path/to/dir --fixers=linefeed,short_tag,indentation You can also blacklist the fixers you don't want by placing a dash in front of the fixer name, if this is more convenient, using -name_of_fixer: php php-cs-fixer.phar fix /path/to/dir --fixers=-short_tag,-indentation When using combination with exact and blacklist fixers, apply exact fixers along with above blacklisted result: php php-cs-fixer.phar fix /path/to/dir --fixers=linefeed,-short_tag A combination of --dry-run and --diff will display summary of proposed fixes, leaving your files unchanged. The command can also read from standard input, in which case it won't automatically fix anything: cat foo.php | php php-cs-fixer.phar fix --diff - Choose from the list of available fixers: psr0 [PSR-0] Classes must be in a path that matches their namespace, be at least one namespace deep, and the class name should match the file name. encoding [PSR-1] PHP code MUST use only UTF-8 without BOM (remove BOM). short_tag [PSR-1] PHP code must use the long <?php ?> tags or the short-echo <?= ?> tags; it must not use the other tag variations. braces [PSR-2] The body of each structure MUST be enclosed by braces. Braces should be properly placed. Body of braces should be properly indented. elseif [PSR-2] The keyword elseif should be used instead of else if so that all control keywords looks like single words. eof_ending [PSR-2] A file must always end with a single empty line feed. function_call_space [PSR-2] When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis. function_declaration [PSR-2] Spaces should be properly placed in a function declaration. indentation [PSR-2] Code MUST use an indent of 4 spaces, and MUST NOT use tabs for indenting. line_after_namespace [PSR-2] There MUST be one blank line after the namespace declaration. linefeed [PSR-2] All PHP files must use the Unix LF (linefeed) line ending. lowercase_constants [PSR-2] The PHP constants true, false, and null MUST be in lower case. lowercase_keywords [PSR-2] PHP keywords MUST be in lower case. method_argument_space [PSR-2] In method arguments and method call, there MUST NOT be a space before each comma and there MUST be one space after each comma. multiple_use [PSR-2] There MUST be one use keyword per declaration. parenthesis [PSR-2] There MUST NOT be a space after the opening parenthesis. There MUST NOT be a space before the closing parenthesis. php_closing_tag [PSR-2] The closing ?> tag MUST be omitted from files containing only PHP. single_line_after_imports [PSR-2] Each namespace use MUST go on its own line and there MUST be one blank line after the use statements block. trailing_spaces [PSR-2] Remove trailing whitespace at the end of non-blank lines. visibility [PSR-2] Visibility MUST be declared on all properties and methods; abstract and final MUST be declared before the visibility; static MUST be declared after the visibility. array_element_no_space_before_comma [symfony] In array declaration, there MUST NOT be a whitespace before each comma. array_element_white_space_after_comma [symfony] In array declaration, there MUST be a whitespace after each comma. blankline_after_open_tag [symfony] Ensure there is no code on the same line as the PHP open tag and it is followed by a blankline. concat_without_spaces [symfony] Concatenation should be used without spaces. double_arrow_multiline_whitespaces [symfony] Operator => should not be surrounded by multi-line whitespaces. duplicate_semicolon [symfony] Remove duplicated semicolons. empty_return [symfony] A return statement wishing to return nothing should be simply ""return"". extra_empty_lines [symfony] Removes extra empty lines. function_typehint_space [symfony] Add missing space between function's argument and its typehint. include [symfony] Include and file path should be divided with a single space. File path should not be placed under brackets. join_function [symfony] Implode function should be used instead of join function. list_commas [symfony] Remove trailing commas in list function calls. multiline_array_trailing_comma [symfony] PHP multi-line arrays should have a trailing comma. namespace_no_leading_whitespace [symfony] The namespace declaration line shouldn't contain leading whitespace. new_with_braces [symfony] All instances created with new keyword must be followed by braces. no_blank_lines_after_class_opening [symfony] There should be no empty lines after class opening brace. no_empty_lines_after_phpdocs [symfony] There should not be blank lines between docblock and the documented element. object_operator [symfony] There should not be space before or after object T_OBJECT_OPERATOR. operators_spaces [symfony] Binary operators should be surrounded by at least one space. phpdoc_indent [symfony] Docblocks should have the same indentation as the documented subject. phpdoc_inline_tag [symfony] Fix PHPDoc inline tags, make inheritdoc always inline. phpdoc_no_access [symfony] @access annotations should be omitted from phpdocs. phpdoc_no_empty_return [symfony] @return void and @return null annotations should be omitted from phpdocs. phpdoc_no_package [symfony] @package and @subpackage annotations should be omitted from phpdocs. phpdoc_params [symfony] All items of the @param, @throws, @return, @var, and @type phpdoc tags must be aligned vertically. phpdoc_scalar [symfony] Scalar types should always be written in the same form. ""int"", not ""integer""; ""bool"", not ""boolean""; ""float"", not ""real"" or ""double"". phpdoc_separation [symfony] Annotations in phpdocs should be grouped together so that annotations of the same type immediately follow each other, and annotations of a different type are separated by a single blank line. phpdoc_short_description [symfony] Phpdocs short descriptions should end in either a full stop, exclamation mark, or question mark. phpdoc_to_comment [symfony] Docblocks should only be used on structural elements. phpdoc_trim [symfony] Phpdocs should start and end with content, excluding the very first and last line of the docblocks. phpdoc_type_to_var [symfony] @type should always be written as @var. phpdoc_types [symfony] The correct case must be used for standard PHP types in phpdoc. phpdoc_var_without_name [symfony] @var and @type annotations should not contain the variable name. pre_increment [symfony] Pre incrementation/decrementation should be used if possible. print_to_echo [symfony] Converts print language construct to echo if possible. remove_leading_slash_use [symfony] Remove leading slashes in use clauses. remove_lines_between_uses [symfony] Removes line breaks between use statements. return [symfony] An empty line feed should precede a return statement. self_accessor [symfony] Inside a classy element ""self"" should be preferred to the class name itself. short_bool_cast [symfony] Short cast bool using double exclamation mark should not be used. single_array_no_trailing_comma [symfony] PHP single-line arrays should not have trailing comma. single_blank_line_before_namespace [symfony] There should be exactly one blank line before a namespace declaration. single_quote [symfony] Convert double quotes to single quotes for simple strings. spaces_before_semicolon [symfony] Single-line whitespace before closing semicolon are prohibited. spaces_cast [symfony] A single space should be between cast and variable. standardize_not_equal [symfony] Replace all <> with !=. ternary_spaces [symfony] Standardize spaces around ternary operator. trim_array_spaces [symfony] Arrays should be formatted like function/method arguments, without leading or trailing single line space. unalign_double_arrow [symfony] Unalign double arrow symbols. unalign_equals [symfony] Unalign equals symbols. unary_operators_spaces [symfony] Unary operators should be placed adjacent to their operands. unneeded_control_parentheses [symfony] Removes unneeded parentheses around control statements. unused_use [symfony] Unused use statements must be removed. whitespacy_lines [symfony] Remove trailing whitespace at the end of blank lines. align_double_arrow [contrib] Align double arrow symbols in consecutive lines. align_equals [contrib] Align equals symbols in consecutive lines. concat_with_spaces [contrib] Concatenation should be used with at least one whitespace around. echo_to_print [contrib] Converts echo language construct to print if possible. ereg_to_preg [contrib] Replace deprecated ereg regular expression functions with preg. Warning! This could change code behavior. header_comment [contrib] Add, replace or remove header comment. logical_not_operators_with_spaces [contrib] Logical NOT operators (!) should have leading and trailing whitespaces. logical_not_operators_with_successor_space [contrib] Logical NOT operators (!) should have one trailing whitespace. long_array_syntax [contrib] Arrays should use the long syntax. multiline_spaces_before_semicolon [contrib] Multi-line whitespace before closing semicolon are prohibited. newline_after_open_tag [contrib] Ensure there is no code on the same line as the PHP open tag. no_blank_lines_before_namespace [contrib] There should be no blank lines before a namespace declaration. ordered_use [contrib] Ordering use statements. php4_constructor [contrib] Convert PHP4-style constructors to __construct. Warning! This could change code behavior. php_unit_construct [contrib] PHPUnit assertion method calls like ""->assertSame(true, $foo)"" should be written with dedicated method like ""->assertTrue($foo)"". Warning! This could change code behavior. php_unit_strict [contrib] PHPUnit methods like ""assertSame"" should be used instead of ""assertEquals"". Warning! This could change code behavior. phpdoc_order [contrib] Annotations in phpdocs should be ordered so that param annotations come first, then throws annotations, then return annotations. phpdoc_var_to_type [contrib] @var should always be written as @type. short_array_syntax [contrib] PHP arrays should use the PHP 5.4 short-syntax. short_echo_tag [contrib] Replace short-echo <?= with long format <?php echo syntax. strict [contrib] Comparison should be strict. Warning! This could change code behavior. strict_param [contrib] Functions should be used with $strict param. Warning! This could change code behavior. The --config option customizes the files to analyse, based on some well-known directory structures: # For the Symfony 2.3+ branch php php-cs-fixer.phar fix /path/to/sf23 --config=sf23 Choose from the list of available configurations: default A default configuration magento The configuration for a Magento application sf23 The configuration for the Symfony 2.3+ branch The --dry-run option displays the files that need to be fixed but without actually modifying them: php php-cs-fixer.phar fix /path/to/code --dry-run Instead of using command line options to customize the fixer, you can save the configuration in a .php_cs file in the root directory of your project. The file must return an instance of Symfony\CS\ConfigInterface, which lets you configure the fixers, the level, the files, and directories that need to be analyzed. The example below will add two contrib fixers to the default list of symfony-level fixers: <?php  $finder = Symfony\CS\Finder\DefaultFinder::create()     ->exclude('somedir')     ->in(__DIR__) ;  return Symfony\CS\Config\Config::create()     ->fixers(array('strict_param', 'short_array_syntax'))     ->finder($finder) ; If you want complete control over which fixers you use, you may use the empty level and then specify all fixers to be used: <?php  $finder = Symfony\CS\Finder\DefaultFinder::create()     ->in(__DIR__) ;  return Symfony\CS\Config\Config::create()     ->level(Symfony\CS\FixerInterface::NONE_LEVEL)     ->fixers(array('trailing_spaces', 'encoding'))     ->finder($finder) ; You may also use a blacklist for the Fixers instead of the above shown whitelist approach. The following example shows how to use all symfony Fixers but the psr0 fixer. Note the additional - in front of the Fixer name. <?php  $finder = Symfony\CS\Finder\DefaultFinder::create()     ->exclude('somedir')     ->in(__DIR__) ;  return Symfony\CS\Config\Config::create()     ->fixers(array('-psr0'))     ->finder($finder) ; The symfony level is set by default, you can also change the default level: <?php  return Symfony\CS\Config\Config::create()     ->level(Symfony\CS\FixerInterface::PSR2_LEVEL) ; In combination with these config and command line options, you can choose various usage. For example, default level is symfony, but if you also don't want to use the psr0 fixer, you can specify the --fixers=""-psr0"" option. But if you use the --fixers option with only exact fixers, only those exact fixers are enabled whether or not level is set. With the --config-file option you can specify the path to the .php_cs file. Caching You can enable caching by returning a custom config with caching enabled. This will speed up further runs. <?php  return Symfony\CS\Config\Config::create()     ->setUsingCache(true) ; Helpers Dedicated plugins exist for: Atom NetBeans PhpStorm Sublime Text Vim Contribute The tool comes with quite a few built-in fixers and finders, but everyone is more than welcome to contribute more of them. Fixers A fixer is a class that tries to fix one CS issue (a Fixer class must implement FixerInterface). Configs A config knows about the CS level and the files and directories that must be scanned by the tool when run in the directory of your project. It is useful for projects that follow a well-known directory structures (like for Symfony projects for instance). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/FriendsOfPHP/PHP-CS-Fixer"	"A coding standards fixer library."	"true"
"Code Analysis"	"PHP Manipulator"	"https://github.com/schmittjoh/php-manipulator"	"A library for analysing and modifying PHP Source Code."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"102"	"9"	"10"	"GitHub - schmittjoh/php-manipulator: Library for Analyzing and Modifying PHP Source Code Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 102 Fork 10 schmittjoh/php-manipulator Code Issues 2 Pull requests 0 Pulse Graphs Library for Analyzing and Modifying PHP Source Code http://jmsyst.com/libs/php-manipulator 30 commits 1 branch 0 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 9ea6f16 May 18, 2014 schmittjoh Merge pull request #9 from marcioAlmada/bug/negative-multiplier … Patch for AbstractToken::getIndentation Permalink Failed to load latest commit information. doc fix typo on documentation Nov 7, 2012 src/JMS/PhpManipulator just code style fix, please squash this commit May 16, 2014 tests just code style fix, please squash this commit May 16, 2014 .gitignore initial commit Nov 7, 2012 .travis.yml adds configs for automated testing/inspection Nov 7, 2012 LICENSE initial commit Nov 7, 2012 README.md initial commit Nov 7, 2012 composer.json Update composer.json Jan 1, 2013 composer.lock fixes cases where array items where assigned by ref (closes schmittjo… Dec 3, 2012 phpunit.xml.dist initial commit Nov 7, 2012 README.md PHP Manipulator Learn more about it in its documentation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/schmittjoh/php-manipulator"	"A library for analysing and modifying PHP Source Code."	"true"
"Code Analysis"	"PHP Mess Detector"	"https://phpmd.org/"	"A library that scans code for bugs, sub-optimal code, unused parameters and more."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PHPMD - PHP Mess Detector PHPMD - PHP Mess Detector PHPMD - PHP Mess Detector This is the project site of PHPMD. It is a spin-off project of PHP Depend and aims to be a PHP equivalent of the well known Java tool PMD. PHPMD can be seen as an user friendly and easy to configure frontend for the raw metrics measured by PHP Depend. What PHPMD does is: It takes a given PHP source code base and look for several potential problems within that source. These problems can be things like: Possible bugs Suboptimal code Overcomplicated expressions Unused parameters, methods, properties PHPMD is a young project and so it only provides a limited set of pre defined rules, compared with its brother PMD, that detect code smells and possible errors within the analyzed source code. Checkout the rules section to learn more about all implemented rules. Recent Releases Version 2.4.2 Release date 2016/03/10; 3 bugs fixed; 1 feature implemented Version 2.4.1 Release date 2016/03/08 Version 2.4.0 Release date 2016/03/08; 1 bug fixed; 2 features implemented Version 2.3.3 Release date 2016/03/08 Version 2.3.2 Release date 2015/09/24; 1 feature implemented Release archive Overview About Documentation Rules Download People behind Support & Contact By Manuel Pichler at Thu, 21 Apr 2016 09:02:49 +0200 licensed under CC by-nc-sa Displayed with WCV licensed under GPLv3 RDF | HTML | Text"	"null"	"null"	"A library that scans code for bugs, sub-optimal code, unused parameters and more."	"true"
"Code Analysis"	"PHP Metrics"	"https://github.com/phpmetrics/PhpMetrics"	"A static metric library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"838"	"60"	"109"	"GitHub - phpmetrics/PhpMetrics: Static analysis tool for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 60 Star 838 Fork 109 phpmetrics/PhpMetrics Code Issues 15 Pull requests 7 Pulse Graphs Static analysis tool for PHP http://www.phpmetrics.org/ 522 commits 11 branches 32 releases Fetching contributors PHP 50.4% HTML 49.4% Makefile 0.2% PHP HTML Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags features/default-ruleset features/offline-mode features/192-compatibility-with-sf3 features/210-check-for-graphviz-when-bubbles-chart-is-generated fix/travis-and-bintray fonsecas72-look_for_a_yml_config_by_default gh-pages master php7 plugins v2 Nothing to show v1.10.0 v1.9.2 v1.9.1 v1.9.0 v1.8.5 v1.8.4 v1.8.3 v1.8.2 v1.8.1 v1.8.0 v1.7.0 v1.6.3 v1.6.2 v1.6.1 v1.6.0 v1.5.2 v1.5.1 v1.5.0 v1.3.0 v1.2.0 v1.1.1 v1.1.0 v1.0.1 v1.0.0 v0.0.8 v0.0.7 v0.0.6 v0.0.5 v0.0.4 v0.0.3 v0.0.2 0.0.1 Nothing to show New pull request Latest commit a99e2b5 Apr 5, 2016 Halleck45 added information about composer plugin in README Permalink Failed to load latest commit information. .github releasing v1.10.0 Apr 5, 2016 artifacts releasing v1.10.0 Apr 5, 2016 bin releasing v1.10.0 Apr 5, 2016 build releasing v1.10.0 Apr 5, 2016 src/Hal Merge pull request #197 from phpmetrics/features/192-compatibility-wi… Apr 5, 2016 templates/html releasing v1.10.0 Apr 5, 2016 tests Merge pull request #202 from phpmetrics/plugins Apr 5, 2016 .gitignore phar is now pushed to bintray Feb 18, 2016 .phpmetrics.yml.dist Fixed test related with #98 - default config Aug 20, 2015 .semver releasing v1.10.0 Apr 5, 2016 .travis.yml fixed an error in travis with bintray deploy Mar 22, 2016 LICENSE cleanup Dec 13, 2013 Makefile added template for new issues on github Mar 23, 2016 README.md added information about composer plugin in README Apr 5, 2016 compatibility.php [PHP7] extractor of PHP7 code works even in <PHP7 Dec 7, 2015 composer.json added compatibility with Symfony3 Mar 30, 2016 phpunit.xml.dist issue #55 : removing devs dependencies and tests from phar. Saved aro… Nov 8, 2014 README.md PhpMetrics Gives metrics about PHP project and classes. Installation Usage Conditions of failure IDE integration Jenkins and CI Configuration Installation As a phar archive: You can install the .phar package by command line running the following commands: wget https://github.com/phpmetrics/PhpMetrics/raw/master/build/phpmetrics.phar chmod +x phpmetrics.phar mv phpmetrics.phar /usr/local/bin/phpmetrics Then, if you need to update: phpmetrics self-update  As a composer dependency: composer global require 'phpmetrics/phpmetrics'  Usage Do not hesitate to visit the official documentation. The command command phpmetrics --report-cli <folder or filename> will output: If you want to get the summary HTML report (with charts): phpmetrics --report-html=/path/of/your/choice.html <folder or filename>  No panic : you can read the How to read the HTML report page If you need a pure string representation of the reports in StdOut, just use phpmetrics -q --report-xml=php://stdout <folder or filename>  Compatibility PhpMetrics can parse PHP code from PHP 5.3 to PHP 7.x. I want to parse PHP7 code but I use PHP 5.x You can parse PHP7 code, but your interpreter will detect syntax errors in your code. To prevent this, please use the --ignore-errors option.  Extensions / Plugins PhpMetrics supports plugins. Use the --plugins=<path-of-plugin1> option, or update your config file as following:   plugins:     - <path-of-plugin1.php`   Official plugins: Symfony2 Composer Conditions of failure Customizing the conditions of failure is very easy with the--failure-condition option. For example: --failure-condition=""average.maintainabilityIndex < 100 or sum.loc > 10000""  With this example, PhpMetrics script returns 1 if the average of Maintainability index is lower than 100 or if the total number of lines of code is greater than 10000. You can also work with package: --failure-condition=""My/Package1/XXXX.average.bugs > 0.35""  Remember that in PhpMetrics packages are file oriented (and not object oriented). Conditions are evaluated with the Hoa Ruler component. Available operators are and, or, xor, not, = (is as an alias), !=, >, >=, <, <=, in and sum List of availables metrics is documented here.  IDE integration PhpMetrics plugin for PhpStorm  Jenkins and CI You'll find a complete tutorial in the documentation You can easily export results to XML with the --report-xml option: phpmetrics --report-xml=/path/of/your/choice.xml <folder or filename>  You can also export results as violations (MessDetector report), in XML format with the --violations-xml option: phpmetrics --violations-xml=/path/of/your/choice.xml <folder or filename>  Configuration Configuration options --report-html - Path to save report in HTML format. Example: --report-html=/tmp/report.html --report-xml - Path to save summary report in XML format. Example: --report-xml=/tmp/report.xml --report-cli - Enable report in terminal. --violations-xml - Path to save violations in XML format. Example: --violations-xml=/tmp/report.xml --report-csv - Path to save summary report in CSV format. Example: --report-csv=/tmp/report.csv --report-json - Path to save detailed report in JSON format. Example: --report-json=/tmp/report.json --chart-bubbles - Path to save Bubbles chart, in SVG format. Example: --chart-bubbles=/tmp/chart.svg. Graphviz IS required --level - Depth of summary report. --extensions - Regex of extensions to include. --excluded-dirs - Regex of subdirectories to exclude. --symlinks - Enable following symlinks. --without-oop - If provided, tool will not extract any information about OOP model (faster). --ignore-errors - If provided, files will be analyzed even with syntax errors --failure-condition - Optional failure condition, in english. Example: --failure-condition=""average.maintainabilityIndex < 50 or sum.loc > 10000"" --config - Config file (YAML). Example: --config=myconfig.yml --template-title - Title for the HTML summary report. A complete example command line: phpmetrics --report-html=report.html --report-xml=report.xml --report-cli=true --violations-xml=violations.xml --report-csv=report.csv --report-json=report.json --chart-bubbles=chart.svg --level=3 --extensions=php|inc --excluded-dirs=""cache|logs"" --symlinks=true --without-oop=true --failure-condition=""average.maintainabilityIndex < 50 or sum.loc > 10000"" --template-title=""My Report"" /path/to/source  Configuration file You can customize configuration with the --config=<file> option. The file should be a valid yaml file. For example: # file <my-config.yml> myconfig:     # paths to explore     path:         extensions: php|inc         exclude: Features|Tests|tests      # report and violations files     logging:         report:             xml:    ./log/phpmetrics.xml             html:   ./log/phpmetrics.html             csv:    ./log/phpmetrics.csv         violations:             xml:    ./log/violations.xml         chart:             bubbles: ./log/bubbles.svg      # condition of failure     failure: average.maintainabilityIndex < 50 or sum.loc > 10000      # rules used for color ([ critical, warning, good ])     rules:       cyclomaticComplexity: [ 10, 6, 2 ]       maintainabilityIndex: [ 0, 69, 85 ]       [...]  Each rule is composed from three values. If A < B < C : A: min, B: yellow limit, C: max If A > B > C : A: max, B: yellow limit, C: min You can save the configuration in a .phpmetrics.yml file in the root directory of your project. PhpMetrics will look for it and use it. Contribute In order to run unit tests, please install the dev dependencies: curl -sS https://getcomposer.org/installer | php php composer.phar install  Then, in order to run the test suite: ./vendor/bin/phpunit  Finally, build the phar: make build   Author Jean-François Lépine <www.lepine.pro>  License See the LICENSE file. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phpmetrics/PhpMetrics"	"A static metric library."	"true"
"Code Analysis"	"PHP Parser"	"https://github.com/nikic/PHP-Parser"	"A PHP parser written in PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2342"	"168"	"326"	"GitHub - nikic/PHP-Parser: A PHP parser written in PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 168 Star 2,342 Fork 326 nikic/PHP-Parser Code Issues 19 Pull requests 2 Wiki Pulse Graphs A PHP parser written in PHP 692 commits 4 branches 23 releases 49 contributors PHP 88.2% Yacc 11.8% PHP Yacc Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.9 1.x 2.x master Nothing to show v2.1.0 v2.0.1 v2.0.0 v2.0.0beta1 v2.0.0alpha1 v1.4.1 v1.4.0 v1.3.0 v1.2.2 v1.2.1 v1.2.0 v1.1.0 v1.0.2 v1.0.1 v1.0.0 v1.0.0beta2 v1.0.0beta1 v0.9.5 v0.9.4 v0.9.3 v0.9.2 v0.9.1 v0.9.0 Nothing to show New pull request Latest commit 574665b Jul 9, 2016 nikic PHP 7.1: list() with keys … Expr\List will now contain ArrayItems instead of plain variables. I'm reusing ArrayItem, because code handling list() must also handle arrays, and this allows both to go through the same code path.  This also renames Expr\List->vars to ->items.  TODO: Should Expr\List be dropped in favor of Expr\Array with an extra flag? Permalink Failed to load latest commit information. bin Drop superfluous newlines before help text Apr 15, 2016 doc Document that XDebug is super slow Apr 19, 2016 grammar PHP 7.1: list() with keys Jul 9, 2016 lib PHP 7.1: list() with keys Jul 9, 2016 test PHP 7.1: list() with keys Jul 9, 2016 test_old Run test_old using php -n Apr 10, 2016 .gitignore Use composer PSR-4 autoloader Sep 16, 2015 .travis.yml Remove support for PHP 5.4 Jul 5, 2016 CHANGELOG.md Targeting PHP-Parser 3.0 Jul 5, 2016 LICENSE fix typos Jun 26, 2011 README.md Mark 1.x as unsupported Feb 28, 2016 UPGRADE-1.0.md Fix typos Sep 12, 2014 UPGRADE-2.0.md Release PHP-Parser 2.0.0 Dec 4, 2015 UPGRADE-3.0.md Targeting PHP-Parser 3.0 Jul 5, 2016 composer.json Remove support for PHP 5.4 Jul 5, 2016 phpunit.xml.dist Split parsing tests into code tests and other stuff Jun 20, 2015 README.md PHP Parser This is a PHP 5.2 to PHP 7.0 parser written in PHP. Its purpose is to simplify static code analysis and manipulation. Documentation for version 2.x (stable; for running on PHP >= 5.4; for parsing PHP 5.2 to PHP 7.0). Documentation for version 1.x (unsupported; for running on PHP >= 5.3; for parsing PHP 5.2 to PHP 5.6). In a Nutshell The parser turns PHP source code into an abstract syntax tree. For example, if you pass the following code into the parser: <?php echo 'Hi', 'World'; hello\world('foo', 'bar' . 'baz'); You'll get a syntax tree looking roughly like this: array(     0: Stmt_Echo(         exprs: array(             0: Scalar_String(                 value: Hi             )             1: Scalar_String(                 value: World             )         )     )     1: Expr_FuncCall(         name: Name(             parts: array(                 0: hello                 1: world             )         )         args: array(             0: Arg(                 value: Scalar_String(                     value: foo                 )                 byRef: false             )             1: Arg(                 value: Expr_Concat(                     left: Scalar_String(                         value: bar                     )                     right: Scalar_String(                         value: baz                     )                 )                 byRef: false             )         )     ) ) You can then work with this syntax tree, for example to statically analyze the code (e.g. to find programming errors or security issues). Additionally, you can convert a syntax tree back to PHP code. This allows you to do code preprocessing (like automatedly porting code to older PHP versions). Installation The preferred installation method is composer: php composer.phar require nikic/php-parser  Documentation Introduction Usage of basic components Other node tree representations Code generation Component documentation: Error Lexer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nikic/PHP-Parser"	"A PHP parser written in PHP."	"true"
"Code Analysis"	"PHP Refactoring Browser"	"https://github.com/QafooLabs/php-refactoring-browser"	"A command line utility for refactoring PHP code."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"506"	"50"	"33"	"GitHub - QafooLabs/php-refactoring-browser: A command line refactoring tool for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 506 Fork 33 QafooLabs/php-refactoring-browser Code Issues 21 Pull requests 3 Pulse Graphs A command line refactoring tool for PHP http://qafoolabs.github.com/php-refactoring-browser 254 commits 3 branches 5 releases Fetching contributors PHP 87.6% Cucumber 12.0% Shell 0.4% PHP Cucumber Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bash-autocomplete gh-pages master Nothing to show v0.1 v0.0.4 v0.0.3 v0.0.2 v0.0.1 Nothing to show New pull request Latest commit 3ff0f7b Apr 14, 2015 beberlei Fix test with new patch builder. Permalink Failed to load latest commit information. docs VIM plugin is now maintained in a seperate repository Dec 27, 2013 features Fix test with new patch builder. Apr 14, 2015 setup @ 37629af Add ABC build setup Apr 3, 2013 src Merge branch 'master' into GH-39 Apr 14, 2015 .gitignore ignore sublimes Jun 19, 2013 .gitmodules Add ABC build setup Apr 3, 2013 .travis.yml Use ~ versioning instead of ^ Apr 14, 2015 CHANGELOG.md Update CHANGELOG.md Aug 18, 2013 LICENSE Add LICENSE and update README.md Mar 28, 2013 README.md Add link to emacs plugin May 26, 2014 build.properties More ant love Apr 3, 2013 build.xml Fix build.xml project name Aug 18, 2013 composer.json Remove minimum-stability=dev Apr 14, 2015 composer.lock Remove minimum-stability=dev Apr 14, 2015 phpunit.xml Unit test for RenameLocalVariable Mar 23, 2013 README.md PHP Refactoring Browser Note: This software is under development and in alpha state. Refactorings do not contain all necessary pre-conditions and might mess up your code. Check the diffs carefully before applying the patches.  Automatic Refactorings for PHP Code by generating diffs that describe the refactorings steps. To prevent simple mistakes during refactorings, an automated tool is a great. See a screenshot of extract-method in action. The library is standing on the shoulder of giants, using multiple existing libraries: PHP Parser by Nikic PHP Token Reflection from Ondřej Nešpor Based on data from these sources the Refactoring Browser consists of two distinct components: Patches allows to build patches based on change operations on a file. Refactoring contains the actual Refactoring domain and adapters to third party libraries. Collections adds some collection semantics on top of PHP arrays. Currently contains a Set type. Install & Basic Usage Download PHAR The refactoring browser is used with: php refactor.phar <refactoring> <arg1>...<argN>  It outputs a diff to the screen and you can apply it to your code by piping it to patch -p1: php refactor.phar <refactoring> <arg1>...<argN> | patch -p1  Editor Plugins There are third-party plugins available for using PHP refactorings within different text editors. These separately maintained projects can be found at the links below: vim : https://github.com/vim-php/vim-php-refactoring emacs : https://github.com/keelerm84/php-refactor-mode.el Why? Users of PHPStorm (or Netbeans) might wonder why this project exists, all the refactorings are available in this IDE. We feel there are several reasons to have such a tool in PHP natively: We are VIM users and don't want to use an IDE for refactorings. Also we are independent of an IDE and users of any (non PHP Storm) editor can now benefit from the practice of automated refactorings. The non-existence of a simple refactoring tool leads to programmers not refactoring ""just to be safe"". This hurts long time maintainability of code. Refactoring is one of the most important steps during development and just come easy. Generating patches for refactorings before applying them allows to easily verify the operation yourself or sending it to a colleague. The libraries (see above) to build such a tool are available, so why not do it. The project is an academic of sorts as well, as you can see in the Design Goals we try to be very strict about the Ports and Adapters architecture and a Domain Driven Design. Refactorings Extract Method Extract a range of lines into a new method and call this method from the original location: php refactor.phar extract-method <file> <line-range> <new-method>  This refactoring automatically detects all necessary inputs and outputs from the function and generates the argument list and return statement accordingly. Rename Local Variable Rename a local variable from one to another name: php refactor.phar rename-local-variable <file> <line> <old-name> <new-name>  Convert Local to Instance Variable Converts a local variable into an instance variable, creates the property and renames all the occurrences in the selected method to use the instance variable: php refactor.phar convert-local-to-instance-variable <file> <line> <variable>  Rename Class and Namespaces Batch Operation to rename classes and namespaces by syncing class-names (IS-state) to filesystem names (SHOULD-state) based on the assumption of PSR-0. Fix class and namespace names to correspond to the current filesystem layout, given that the project uses PSR-0. This means you can use this tool to rename classes and namespaces by renaming folders and files and then applying the command to fix class and namespaces. php refactor.phar fix-class-names <dir>  Optimize use statements Optimizes the use of Fully qualified names in a file so that FQN is imported with ""use"" at the top of the file and the FQN is replaced with its classname. All other use statements will be untouched, only new ones will be added. php refactor.phar optimize-use <file>  Roadmap Not prioritized. Integration: Vim Plugin to apply refactorings from within Vim. List of Refactorings to implement: Extract Method (Prototype Done) Rename Local Variable (Prototype Done) Optimize use statements (Done) Convert Local Variable to Instance Variable (Prototype Done) Rename Class PSR-0 aware (Done) Rename Namespace PSR-0 aware (Done) Convert Magic Value to Constant Rename Method Private Methods Only first Rename Instance Variable Private Variables Only First Extract Interface Internals Design Goals Be independent of third-party libraries and any Type Inference Engine (PDepend, PHP Analyzer) via Ports+Adapters Apply Domain-Driven-Design and find suitable Bounded Contexts and Ubiquitous Language within them Avoid primitive obsession by introducing value objects for useful constructs in the domain Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/QafooLabs/php-refactoring-browser"	"A command line utility for refactoring PHP code."	"true"
"Code Analysis"	"PHP Semantic Versioning Checker"	"https://github.com/tomzx/php-semver-checker"	"A command line utility that compares two source sets and determines the appropriate semantic versioning to apply."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"320"	"16"	"13"	"GitHub - tomzx/php-semver-checker: Compares two source sets and determines the appropriate semantic versioning to apply. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 320 Fork 13 tomzx/php-semver-checker Code Issues 22 Pull requests 2 Pulse Graphs Compares two source sets and determines the appropriate semantic versioning to apply. 130 commits 1 branch 16 releases 5 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.10.0 v0.9.1 v0.9.0 v0.8.1 v0.8.0 v0.7.0 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.0 v0.4.1 v0.4.0 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit e297087 May 14, 2016 tomzx Bump composer branch-alias to 0.11-dev. Permalink Failed to load latest commit information. bin [#75] InputMerger not merging options with defaults properly Jan 23, 2016 docs Add support to check for function, class/interface/trait methods sign… May 7, 2016 scripts Add support to check for function, class/interface/trait methods sign… May 7, 2016 src/PHPSemVerChecker Code cleanup. May 7, 2016 tests Update trait-related tests to use the new Trait_ constructor (which e… May 7, 2016 .gitattributes Initial .gitattributes to exclude files from being exported. Sep 19, 2015 .gitignore Add composer.phar and log directory to .gitignore. Jun 24, 2015 .scrutinizer.yml Increased scrutinizer-ci code coverage timeout from 600 to 1800. Jan 18, 2015 .travis.yml Remove support for PHP 5.4. May 7, 2016 CHANGELOG.md Changelog for v0.10.0. May 13, 2016 LICENSE Revert ""Update LICENSE year to 2016."" Jan 23, 2016 README.md Update README.md to indicate new preferred installation method. Jan 23, 2016 box.json Added support for self-updating the .phar file. Feb 6, 2015 composer.json Bump composer branch-alias to 0.11-dev. May 14, 2016 php-semver-checker-git.yml.dist Move composer from before_script to install in .travis.yml. Jan 31, 2016 phpunit.xml.dist Configured travis-ci to upload code coverage to scrutinizer-ci. Jan 18, 2015 README.md PHP Semantic Versioning Checker PHP Semantic Versioning Checker is a console/library which allows you to inspect a set of before and after source code. After the inspection is completed, you are given a list of changes that have occurred between the two changesets. For each of these changes, the level of the change (MAJOR, MINOR, PATCH) will be given, as well as the location of the change (file and line number) and a reason as to why this level change is suggested. Getting started As this is still an alpha package, it is not suggested to include php-semver-checker directly in your composer.json. There are however a couple ways to use the tool: Preferred method Download the latest .phar build. Note that the .phar build is generally less bleeding edge than the following methods. php composer.phar create-project tomzx/php-semver-checker --stability=dev will clone to a new php-semver-checker folder in your current working directory git clone https://github.com/tomzx/php-semver-checker.git and php composer.phar install in the newly cloned directory. Current ruleset & verification codes See docs/Ruleset.md for an exhaustive list of currently supported (and to come) ruleset. Verification codes are a mean to uniquely identify a semantic versioning trigger (a condition which upon detection, requires your code changes to be versioned). Example php bin/php-semver-checker compare tests/fixtures/before tests/fixtures/after  Suggested semantic versioning change: MAJOR  Class (MAJOR) +-------+--------------------------------------------------------------+------------------------------------------------------------+--------------------------------------------+------+ | Level | Location                                                     | Target                                                     | Reason                                     | Code | +-------+--------------------------------------------------------------+------------------------------------------------------------+--------------------------------------------+------+ | MAJOR | tests\fixtures\before\ClassRemoved.php:5                     | fixtures\ClassRemoved                                      | Class was removed.                         | V005 | | MAJOR | tests\fixtures\after\ClassMethodAdded.php:7                  | fixtures\ClassMethodAdded::publicMethod                    | [public] Method has been added.            | V015 | | MAJOR | tests\fixtures\after\ClassMethodAdded.php:12                 | fixtures\ClassMethodAdded::protectedMethod                 | [protected] Method has been added.         | V016 | | MAJOR | tests\fixtures\after\ClassMethodParameterChanged.php:7       | fixtures\ClassMethodParameterChanged::publicMethod         | [public] Method parameter changed.         | V010 | | MAJOR | tests\fixtures\after\ClassMethodParameterChanged.php:12      | fixtures\ClassMethodParameterChanged::protectedMethod      | [protected] Method parameter changed.      | V011 | | MAJOR | tests\fixtures\before\ClassMethodRemoved.php:7               | fixtures\ClassMethodRemoved::publicMethod                  | [public] Method has been removed.          | V006 | | MAJOR | tests\fixtures\before\ClassMethodRemoved.php:12              | fixtures\ClassMethodRemoved::protectedMethod               | [protected] Method has been removed.       | V007 | | MAJOR | tests\fixtures\after\ClassPropertyAdded.php:7                | fixtures\ClassPropertyAdded::$a                            | [public] Property has been added.          | V019 | | MAJOR | tests\fixtures\after\ClassPropertyAdded.php:9                | fixtures\ClassPropertyAdded::$b                            | [protected] Property has been added.       | V020 | | MAJOR | tests\fixtures\before\ClassPropertyRemoved.php:7             | fixtures\ClassPropertyRemoved::$a                          | [public] Property has been removed.        | V008 | | MAJOR | tests\fixtures\before\ClassPropertyRemoved.php:9             | fixtures\ClassPropertyRemoved::$b                          | [protected] Property has been removed.     | V009 | | MINOR | tests\fixtures\after\ClassAdded.php:5                        | fixtures\ClassAdded                                        | Class was added.                           | V014 | | PATCH | tests\fixtures\after\ClassMethodAdded.php:17                 | fixtures\ClassMethodAdded::privateMethod                   | [private] Method has been added.           | V028 | | PATCH | tests\fixtures\after\ClassMethodImplementationChanged.php:7  | fixtures\ClassMethodImplementationChanged::publicMethod    | [public] Method implementation changed.    | V023 | | PATCH | tests\fixtures\after\ClassMethodImplementationChanged.php:12 | fixtures\ClassMethodImplementationChanged::protectedMethod | [protected] Method implementation changed. | V024 | | PATCH | tests\fixtures\after\ClassMethodImplementationChanged.php:17 | fixtures\ClassMethodImplementationChanged::privateMethod   | [private] Method implementation changed.   | V025 | | PATCH | tests\fixtures\after\ClassMethodParameterChanged.php:17      | fixtures\ClassMethodParameterChanged::privateMethod        | [private] Method parameter changed.        | V031 | | PATCH | tests\fixtures\after\ClassMethodParameterNameChanged.php:7   | fixtures\ClassMethodParameterNameChanged::publicMethod     | [public] Method parameter name changed.    | V060 | | PATCH | tests\fixtures\after\ClassMethodParameterNameChanged.php:12  | fixtures\ClassMethodParameterNameChanged::protectedMethod  | [protected] Method parameter name changed. | V061 | | PATCH | tests\fixtures\after\ClassMethodParameterNameChanged.php:17  | fixtures\ClassMethodParameterNameChanged::privateMethod    | [private] Method parameter name changed.   | V062 | | PATCH | tests\fixtures\before\ClassMethodRemoved.php:17              | fixtures\ClassMethodRemoved::privateMethod                 | [private] Method has been removed.         | V029 | | PATCH | tests\fixtures\after\ClassPropertyAdded.php:11               | fixtures\ClassPropertyAdded::$c                            | [private] Property has been added.         | V026 | | PATCH | tests\fixtures\before\ClassPropertyRemoved.php:11            | fixtures\ClassPropertyRemoved::$c                          | [private] Property has been removed.       | V027 | +-------+--------------------------------------------------------------+------------------------------------------------------------+--------------------------------------------+------+  Function (MAJOR) +-------+----------------------------------------------------------+-----------------------------------------------------------------------+----------------------------------+------+ | Level | Location                                                 | Target                                                                | Reason                           | Code | +-------+----------------------------------------------------------+-----------------------------------------------------------------------+----------------------------------+------+ | MAJOR | tests\fixtures\before\FunctionRemoved.php:5              | fixtures\functionRemoved::functionRemoved                             | Function has been removed.       | V001 | | MAJOR | tests\fixtures\before\FunctionParameterChanged.php:5     | fixtures\functionParameterChanged::functionParameterChanged           | Function parameter changed.      | V002 | | MINOR | tests\fixtures\after\FunctionAdded.php:5                 | fixtures\functionAdded::functionAdded                                 | Function has been added.         | V003 | | PATCH | tests\fixtures\after\FunctionImplementationChanged.php:5 | fixtures\functionImplementationChanged::functionImplementationChanged | Function implementation changed. | V004 | | PATCH | tests\fixtures\before\FunctionParameterNameChanged.php:5 | fixtures\functionParameterNameChanged::functionParameterNameChanged   | Function parameter name changed. | V067 | +-------+----------------------------------------------------------+-----------------------------------------------------------------------+----------------------------------+------+  Interface (MAJOR) +-------+---------------------------------------------------------------+------------------------------------------------------------+-----------------------------------------+------+ | Level | Location                                                      | Target                                                     | Reason                                  | Code | +-------+---------------------------------------------------------------+------------------------------------------------------------+-----------------------------------------+------+ | MAJOR | tests\fixtures\before\InterfaceRemoved.php:5                  | fixtures\InterfaceRemoved                                  | Interface was removed.                  | V033 | | MAJOR | tests\fixtures\after\InterfaceMethodAdded.php:7               | fixtures\InterfaceMethodAdded::newMethod                   | [public] Method has been added.         | V034 | | MAJOR | tests\fixtures\after\InterfaceMethodParameterChaged.php:7     | fixtures\InterfaceMethodParameterChanged::newMethod        | [public] Method parameter changed.      | V036 | | MAJOR | tests\fixtures\before\InterfaceMethodRemoved.php:7            | fixtures\InterfaceMethodRemoved::newMethod                 | [public] Method has been removed.       | V035 | | MINOR | tests\fixtures\after\InterfaceAdded.php:5                     | fixtures\InterfaceAdded                                    | Interface was added.                    | V032 | | PATCH | tests\fixtures\after\InterfaceMethodParameterNameChaged.php:7 | fixtures\InterfaceMethodParameterNameChanged::publicMethod | [public] Method parameter name changed. | V063 | +-------+---------------------------------------------------------------+------------------------------------------------------------+-----------------------------------------+------+  Trait (MAJOR) +-------+--------------------------------------------------------------+------------------------------------------------------------+--------------------------------------------+------+ | Level | Location                                                     | Target                                                     | Reason                                     | Code | +-------+--------------------------------------------------------------+------------------------------------------------------------+--------------------------------------------+------+ | MAJOR | tests\fixtures\before\TraitRemoved.php:5                     | fixtures\TraitRemoved                                      | Trait was removed.                         | V037 | | MAJOR | tests\fixtures\after\TraitMethodAdded.php:7                  | fixtures\TraitMethodAdded::publicMethod                    | [public] Method has been added.            | V047 | | MAJOR | tests\fixtures\after\TraitMethodAdded.php:12                 | fixtures\TraitMethodAdded::protectedMethod                 | [protected] Method has been added.         | V048 | | MAJOR | tests\fixtures\after\TraitMethodAdded.php:17                 | fixtures\TraitMethodAdded::privateMethod                   | [private] Method has been added.           | V057 | | MAJOR | tests\fixtures\after\TraitMethodParameterChanged.php:7       | fixtures\TraitMethodParameterChanged::publicMethod         | [public] Method parameter changed.         | V042 | | MAJOR | tests\fixtures\after\TraitMethodParameterChanged.php:12      | fixtures\TraitMethodParameterChanged::protectedMethod      | [protected] Method parameter changed.      | V043 | | MAJOR | tests\fixtures\after\TraitMethodParameterChanged.php:17      | fixtures\TraitMethodParameterChanged::privateMethod        | [private] Method parameter changed.        | V059 | | MAJOR | tests\fixtures\before\TraitMethodRemoved.php:7               | fixtures\TraitMethodRemoved::publicMethod                  | [public] Method has been removed.          | V038 | | MAJOR | tests\fixtures\before\TraitMethodRemoved.php:12              | fixtures\TraitMethodRemoved::protectedMethod               | [protected] Method has been removed.       | V039 | | MAJOR | tests\fixtures\before\TraitMethodRemoved.php:17              | fixtures\TraitMethodRemoved::privateMethod                 | [private] Method has been removed.         | V058 | | MAJOR | tests\fixtures\after\TraitPropertyAdded.php:7                | fixtures\TraitPropertyAdded::$a                            | [public] Property has been added.          | V049 | | MAJOR | tests\fixtures\after\TraitPropertyAdded.php:9                | fixtures\TraitPropertyAdded::$b                            | [protected] Property has been added.       | V050 | | MAJOR | tests\fixtures\after\TraitPropertyAdded.php:11               | fixtures\TraitPropertyAdded::$c                            | [private] Property has been added.         | V055 | | MAJOR | tests\fixtures\before\TraitPropertyRemoved.php:7             | fixtures\TraitPropertyRemoved::$a                          | [public] Property has been removed.        | V040 | | MAJOR | tests\fixtures\before\TraitPropertyRemoved.php:9             | fixtures\TraitPropertyRemoved::$b                          | [protected] Property has been removed.     | V041 | | MAJOR | tests\fixtures\before\TraitPropertyRemoved.php:11            | fixtures\TraitPropertyRemoved::$c                          | [private] Property has been removed.       | V056 | | MINOR | tests\fixtures\after\TraitAdded.php:5                        | fixtures\TraitAdded                                        | Trait was added.                           | V046 | | PATCH | tests\fixtures\after\TraitMethodImplementationChanged.php:7  | fixtures\TraitMethodImplementationChanged::publicMethod    | [public] Method implementation changed.    | V052 | | PATCH | tests\fixtures\after\TraitMethodImplementationChanged.php:12 | fixtures\TraitMethodImplementationChanged::protectedMethod | [protected] Method implementation changed. | V053 | | PATCH | tests\fixtures\after\TraitMethodImplementationChanged.php:17 | fixtures\TraitMethodImplementationChanged::privateMethod   | [private] Method implementation changed.   | V054 | | PATCH | tests\fixtures\after\TraitMethodParameterNameChanged.php:7   | fixtures\TraitMethodParameterNameChanged::publicMethod     | [public] Method parameter name changed.    | V064 | | PATCH | tests\fixtures\after\TraitMethodParameterNameChanged.php:12  | fixtures\TraitMethodParameterNameChanged::protectedMethod  | [protected] Method parameter name changed. | V065 | | PATCH | tests\fixtures\after\TraitMethodParameterNameChanged.php:17  | fixtures\TraitMethodParameterNameChanged::privateMethod    | [private] Method parameter name changed.   | V066 | +-------+--------------------------------------------------------------+------------------------------------------------------------+--------------------------------------------+------+  [Scanned files] Before: 26, After: 27, Identical: 0 Time: 1.43 seconds, Memory: 5.123 MB License The code is licensed under the MIT license. See LICENSE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tomzx/php-semver-checker"	"A command line utility that compares two source sets and determines the appropriate semantic versioning to apply."	"true"
"Code Analysis"	"PHPCheckstyle"	"https://github.com/PHPCheckstyle/phpcheckstyle"	"A tool to help adhere to certain coding conventions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"57"	"11"	"14"	"GitHub - PHPCheckstyle/phpcheckstyle: PHPCheckstyle is an open-source tool that helps PHP programmers adhere to certain coding conventions. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 57 Fork 14 PHPCheckstyle/phpcheckstyle Code Issues 17 Pull requests 0 Wiki Pulse Graphs PHPCheckstyle is an open-source tool that helps PHP programmers adhere to certain coding conventions. https://phpcheckstyle.github.io 274 commits 4 branches 1 release 5 contributors PHP 99.1% Other 0.9% PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags code-cleanup master npath-complexity prefer-quotes-check Nothing to show V0.13.1 Nothing to show New pull request Latest commit 3c92784 Jul 11, 2015 tchule Merge pull request #54 from royopa/patch-1 … added how to install via composer command line Permalink Failed to load latest commit information. checkstyle_result Moved CheckStyleConfig into an abstract class, CheckXMLStyleConfig Aug 19, 2014 config add a new check with '$this must not be used inside a static function' Nov 19, 2014 html HTML template will also display when the report was generated at Sep 24, 2014 src/PHPCheckstyle add a new check with '$this must not be used inside a static function' Nov 19, 2014 test Added a test file for #32 on GitHub Sep 2, 2014 .anorak.yml Create .anorak.yml Aug 27, 2014 .gitignore Added style-report to .gitignore Sep 14, 2014 LICENSE.txt Réorganisation dans SVN Nov 27, 2013 README.md added how to install via composer command line Jul 11, 2015 RELEASE_NOTES.txt add a new check with '$this must not be used inside a static function' Nov 19, 2014 build.xml Improved indentation in XMLs Sep 14, 2014 composer.json Removed trailing whitespace; unified EOL to unix Sep 14, 2014 index.php Improved indentation Sep 14, 2014 phpcheckstyle.cmd Removed trailing whitespace; unified EOL to unix Sep 14, 2014 phpcheckstyle.sh Auto loading is done! PHPCheckstyle should now be PSR-0 compatible Aug 19, 2014 run.php Issue 89: Allow searching files for keywords or patterns (regex) and Nov 7, 2014 runFromWeb.php Fixed very long lines Sep 14, 2014 README.md PHPCheckstyle 1. Overview PHPCheckstyle is an open-source tool that helps PHP programmers adhere to certain coding conventions. The tools checks the input PHP source code and reports any deviations from the coding convention. The tool uses the PEAR Coding Standards as the default coding convention. But it allows you to configure it to suit your coding standards. Please visit http://code.google.com/p/phpcheckstyle/ for more information and documentation 2. Requirements PHP 5.0 or newer. Web browser to view the checkstyle report (only for html view) That's all. 3. Installation Installation with Composer composer require phpcheckstyle/phpcheckstyle or Add phpcheckstyle/phpcheckstyle as a requirement to composer.json: {     ""require"": {         ""phpcheckstyle/phpcheckstyle"": ""dev-master""     } } Update your packages with composer update or if installing from fresh, with composer install. Manual Installation Just unzip the distribution. $> unzip PhpCheckstyle.zip This will create a directory called phpcheckstyle and expand all files in it. 4. Usage Change directory to the PHPCheckstyle installation directory. $> cd phpcheckstyle Execute the run.php script providing the --src option. $> php run.php --src <php source directory/file> Use the --help option to see more options $> php run.php --help License See LICENSE Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PHPCheckstyle/phpcheckstyle"	"A tool to help adhere to certain coding conventions."	"true"
"Code Analysis"	"PHPCPD"	"https://github.com/sebastianbergmann/phpcpd"	"A library that detects copied and pasted code."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1057"	"64"	"109"	"GitHub - sebastianbergmann/phpcpd: Copy/Paste Detector (CPD) for PHP code. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 64 Star 1,057 Fork 109 sebastianbergmann/phpcpd Code Issues 11 Pull requests 4 Pulse Graphs Copy/Paste Detector (CPD) for PHP code. 279 commits 3 branches 25 releases 21 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.4 2.0 master Nothing to show 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 2.0.0-BETA2 2.0.0-BETA1 1.4.3 1.4.2 1.4.1 1.4.0 1.3.5 1.3.4 1.3.3 1.3.3RC2 1.3.3RC1 1.3.2 1.3.1 1.3.0 1.2.2 1.2.1 1.2.0 1.1.1 1.1.0 1.0.0 Nothing to show New pull request Latest commit b37fc82 Apr 17, 2016 sebastianbergmann Merge branch '2.0' Permalink Failed to load latest commit information. build Update PHPUnit configuration Feb 10, 2016 composer/bin Update license and copyright in all files Jan 2, 2015 src Leftover from 78ca17f Feb 10, 2016 tests Fix CS/WS issues Feb 10, 2016 .gitattributes Make the output of git-diff and git-grep more useful for PHP sourcefi… Jan 24, 2012 .gitignore Implement PHAR signing Mar 26, 2015 .travis.yml Leftover from d98280b Feb 10, 2016 LICENSE Bump copyright year Feb 10, 2016 README.md Changed single quotes to double qoutes Mar 11, 2015 build.xml Sync with sebastianbergmann/php-timer@e28b45b Jun 13, 2015 composer.json Merge branch '2.0' Apr 17, 2016 phpcpd Update license and copyright in all files Jan 2, 2015 README.md PHP Copy/Paste Detector (PHPCPD) phpcpd is a Copy/Paste Detector (CPD) for PHP code. Installation PHP Archive (PHAR) The easiest way to obtain PHPCPD is to download a PHP Archive (PHAR) that has all required dependencies of PHPCPD bundled in a single file: wget https://phar.phpunit.de/phpcpd.phar chmod +x phpcpd.phar mv phpcpd.phar /usr/local/bin/phpcpd  You can also immediately use the PHAR after you have downloaded it, of course: wget https://phar.phpunit.de/phpcpd.phar php phpcpd.phar  Composer Simply add a dependency on sebastian/phpcpd to your project's composer.json file if you use Composer to manage the dependencies of your project. Here is a minimal example of a composer.json file that just defines a development-time dependency on PHPCPD: {     ""require-dev"": {         ""sebastian/phpcpd"": ""*""     } }  For a system-wide installation via Composer, you can run: composer global require ""sebastian/phpcpd=*""  Make sure you have ~/.composer/vendor/bin/ in your path. Usage Example ➜ ~ phpcpd /tmp/wordpress-3.8.1/wp-includes phpcpd 2.0.1 by Sebastian Bergmann.  Found 34 exact clones with 1273 duplicated lines in 11 files:    - /tmp/wordpress-3.8.1/wp-includes/class-snoopy.php:165-195     /tmp/wordpress-3.8.1/wp-includes/class-snoopy.php:225-255    .   .   .    - /tmp/wordpress-3.8.1/wp-includes/SimplePie/Misc.php:1769-1830     /tmp/wordpress-3.8.1/wp-includes/SimplePie/Parse/Date.php:710-771  0.86% duplicated lines out of 147877 total lines of code.  Time: 24.67 seconds, Memory: 159.00Mb  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sebastianbergmann/phpcpd"	"A library that detects copied and pasted code."	"true"
"Code Analysis"	"PhpDependencyAnalysis"	"https://github.com/mamuz/PhpDependencyAnalysis"	"A tool to create customisable dependency graphs."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"188"	"15"	"9"	"GitHub - mamuz/PhpDependencyAnalysis: Static code analysis to provide and verify a dependency graph against a defined architecture Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 188 Fork 9 mamuz/PhpDependencyAnalysis Code Issues 5 Pull requests 0 Wiki Pulse Graphs 🔍 Static code analysis to provide and verify a dependency graph against a defined architecture 469 commits 2 branches 27 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.2.0 v1.1.1 v1.1.0 v1.0.0 v0.6.1 v0.6.0 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.2 v0.4.1 v0.4.0 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.1 v0.2.0 v0.1.3 v0.1.0 v0.1.0-beta v0.0.1 v0.0.1-beta.3 v0.0.1-beta.2 v0.0.1-beta Nothing to show New pull request Latest commit 1730329 Jul 1, 2016 mamuz committed on GitHub Update CHANGELOG.md Permalink Failed to load latest commit information. bin update legal text Feb 3, 2016 examples typo fix Jun 21, 2015 src release preparation Feb 20, 2016 tests add ut for generating absolute path of target option Feb 20, 2016 .gitattributes move code-coverage to scrutinizer Jun 21, 2015 .gitignore Add support to build phar Jun 30, 2016 .scrutinizer.yml move code-coverage to scrutinizer Jun 21, 2015 .travis.yml remove support running on php5.3 and php5.4 machines Feb 7, 2016 CHANGELOG.md Update CHANGELOG.md Jul 1, 2016 CODE_OF_CONDUCT.md add code of conduct Feb 20, 2016 CONTRIBUTING.md add Reporting Bugs section Jan 13, 2015 LICENSE update legal text Feb 3, 2016 README.md release preparation Feb 20, 2016 box.json Add support to build phar Jun 30, 2016 composer.json Add support to build phar Jun 30, 2016 phpda.yml.dist Add FQCN filter Sep 13, 2015 phpunit.xml Add FQCN filter Sep 13, 2015 README.md PhpDependencyAnalysis PhpDependencyAnalysis is an extendable static code analysis for object-oriented PHP-Projects to provide dependency graphs for abstract datatypes (Classes, Interfaces and Traits) based on namespaces. Dependencies can be aggregated to build graphs for several levels, like Package-Level or Layer-Level. Each dependency can be verified to your defined architecture. Read the Introduction-Chapter for further informations. Example See more examples. Installation For graph creation GraphViz is required on your machine, which is an open source graph visualization software and available for the most platforms. After installing GraphViz the recommended way to install mamuz/php-dependency-analysis is through composer by adding dependency to your composer.json: {     ""require-dev"": {         ""mamuz/php-dependency-analysis"": ""1.*""     } } PHP-Version To run the newest version of this tool, it requires PHP >= 5.5. For running on machines with PHP < 5.5 have a look to 0.* releases. Features Providing high customizing level Dependency graph creation on customized levels respectively different scopes and layers Supports Usage-Graph, Call-Graph and Inheritance-Graph Dependencies can be aggregated to a package, a module or a layer Detecting cycles and violations between layers in a tiered architecture Verifiying dependency graph against a user-defined reference architecture Collected Namespaces of dependencies are modifiable to meet custom use cases Printing graphs in several formats (HTML, SVG, DOT, JSON) Extandable by adding user-defined plugins for collecting and displaying dependencies Compatible to PHP7 Features, like Return Type Declarations and Anonymous Classes Configuration This tool is configurable by a YAML file. You can copy a prepared file from the vendor directory. cp ./vendor/mamuz/php-dependency-analysis/phpda.yml.dist ./myconfig.yml See prepared configuration and read the Configuration-Chapter for available options. Usage Run this command line to create a dependecy graph: ./vendor/bin/phpda analyze ./myconfig.yml After that open created report file with your prefered tool. Wiki Introduction Requirements Configuration Examples Plugins Code of Conduct As contributors and maintainers of this project you have to respect the Code of Coduct Changelog See record of changes made to this project here Contributing Before opening up a pull-request please read the Contributing-Guideline Alternatives Check the resources in Code Analysis Section at Awesome PHP Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mamuz/PhpDependencyAnalysis"	"A tool to create customisable dependency graphs."	"true"
"Code Analysis"	"PHPLOC"	"https://github.com/sebastianbergmann/phploc"	"A tool for quickly measuring the size of a PHP project."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"946"	"49"	"103"	"GitHub - sebastianbergmann/phploc: A tool for quickly measuring the size of a PHP project. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 49 Star 946 Fork 103 sebastianbergmann/phploc Code Issues 7 Pull requests 1 Pulse Graphs A tool for quickly measuring the size of a PHP project. 433 commits 3 branches 37 releases 27 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0 2.1 master Nothing to show 3.0.1 3.0.0 2.1.5 2.1.4 2.1.3 2.1.2 2.1.1 2.1.0 2.0.6 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 2.0.0-BETA1 1.7.4 1.7.3 1.7.2 1.7.1 1.7.0 1.6.4 1.6.3 1.6.2 1.6.2RC1 1.6.1 1.6.0 1.5.1 1.5.0 1.4.0 1.3.2 1.3.1 1.3.0 1.2.0 1.1.1 1.1.0 1.0.0 Nothing to show New pull request Latest commit 04ccf84 Apr 26, 2016 sebastianbergmann Issue #138 was not fixed Permalink Failed to load latest commit information. build Update PHPUnit configuration Apr 25, 2016 src Prepare release Apr 25, 2016 tests test #139 Mar 6, 2016 .gitattributes Make the output of git-diff and git-grep more useful for PHP sourcefi… Jan 24, 2012 .gitignore Implement PHAR signing Mar 6, 2015 .travis.yml Fix failing Travis builds Jun 6, 2015 ChangeLog.md Issue #138 was not fixed Apr 26, 2016 LICENSE Bump year Jan 13, 2016 README.md Cleanup Feb 15, 2014 build.xml Implement PHAR signing Mar 6, 2015 composer.json Allow version 2.0 Apr 18, 2016 phploc Update license and copyright in all files Jan 2, 2015 README.md PHPLOC phploc is a tool for quickly measuring the size and analyzing the structure of a PHP project. Installation PHP Archive (PHAR) The easiest way to obtain PHPLOC is to download a PHP Archive (PHAR) that has all required dependencies of PHPLOC bundled in a single file: wget https://phar.phpunit.de/phploc.phar chmod +x phploc.phar mv phploc.phar /usr/local/bin/phploc  You can also immediately use the PHAR after you have downloaded it, of course: wget https://phar.phpunit.de/phploc.phar php phploc.phar  Composer Simply add a dependency on phploc/phploc to your project's composer.json file if you use Composer to manage the dependencies of your project. Here is a minimal example of a composer.json file that just defines a development-time dependency on PHPLOC: {     ""require-dev"": {         ""phploc/phploc"": ""*""     } }  For a system-wide installation via Composer, you can run: composer global require 'phploc/phploc=*'  Make sure you have ~/.composer/vendor/bin/ in your path. Usage Examples Analyse a directory and print the result ➜ ~ phploc src phploc 2.0.4 by Sebastian Bergmann.  Directories                                          3 Files                                                8  Size   Lines of Code (LOC)                             1858   Comment Lines of Code (CLOC)                     560 (30.14%)   Non-Comment Lines of Code (NCLOC)               1298 (69.86%)   Logical Lines of Code (LLOC)                     289 (15.55%)     Classes                                        260 (89.97%)       Average Class Length                          37       Average Method Length                          9     Functions                                        5 (1.73%)       Average Function Length                        5     Not in classes or functions                     24 (8.30%)  Complexity   Cyclomatic Complexity / LLOC                    0.67   Cyclomatic Complexity / Number of Methods       7.86  Dependencies   Global Accesses                                    2     Global Constants                                 2 (100.00%)     Global Variables                                 0 (0.00%)     Super-Global Variables                           0 (0.00%)   Attribute Accesses                                48     Non-Static                                      48 (100.00%)     Static                                           0 (0.00%)   Method Calls                                      96     Non-Static                                      91 (94.79%)     Static                                           5 (5.21%)  Structure   Namespaces                                         4   Interfaces                                         0   Traits                                             0   Classes                                            7     Abstract Classes                                 0 (0.00%)     Concrete Classes                                 7 (100.00%)   Methods                                           28     Scope       Non-Static Methods                            28 (100.00%)       Static Methods                                 0 (0.00%)     Visibility       Public Method                                 10 (35.71%)       Non-Public Methods                            18 (64.29%)   Functions                                          1     Named Functions                                  0 (0.00%)     Anonymous Functions                              1 (100.00%)   Constants                                          1     Global Constants                                 1 (100.00%)     Class Constants                                  0 (0.00%)  Analyse a directory for each revision in a Git repository and write the result in CSV format ➜ ~ phploc --log-csv log.csv --progress --git-repository . src phploc 2.0.4 by Sebastian Bergmann.   295/295 [============================] 100%  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sebastianbergmann/phploc"	"A tool for quickly measuring the size of a PHP project."	"true"
"Code Analysis"	"PHPQA"	"https://github.com/EdgedesignCZ/phpqa"	"A tool for running QA tools (phploc, phpcpd, phpcs, pdepend, phpmd, phpmetrics)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"37"	"7"	"5"	"GitHub - EdgedesignCZ/phpqa: Analyze PHP code with one command Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 37 Fork 5 EdgedesignCZ/phpqa Code Issues 1 Pull requests 0 Pulse Graphs Analyze PHP code with one command https://edgedesigncz.github.io/phpqa 140 commits 2 branches 14 releases Fetching contributors XSLT 59.4% PHP 36.6% HTML 3.0% Shell 1.0% XSLT PHP HTML Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.5.1 v1.5.0 v1.4.0 v1.3.0 v1.2.1 v1.2.0 v1.1.0 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit ef9384b May 6, 2016 zdenekdrahos Changelog Permalink Failed to load latest commit information. app phpcs template loads jQuery from HTTPS URLs Mar 23, 2016 bin Readme - add output modes examples Apr 29, 2016 src phpmetrics will generate an XML report in addition to html May 5, 2016 tests Execution - add option Jan 27, 2016 .gitignore Custom robo runner (caller use relative paths) May 25, 2015 .phpqa.yml Report - load XSL templates from .phpqa.yml, don't escape path in config Jan 12, 2016 .travis.yml CI - add github token to avoid reaching API limit Jan 27, 2016 CHANGELOG.md Changelog May 6, 2016 LICENSE Update copyright Apr 5, 2016 README.md Readme - phpmetrics.xml is generated May 6, 2016 RoboFile.php Report - refine CLI output Jan 12, 2016 composer.json Downgrade symfony/yaml to PHP 5.4 version Apr 29, 2016 composer.lock Upgrade QA tools May 6, 2016 phpqa CI - fix php 5.4 support Jan 6, 2016 phpunit.xml Add phpunit May 22, 2015 README.md PHPQA CLI Analyze PHP code with one command.  Requirements PHP >= 5.4.0 xsl extension for HTML reports Why? Every analyzer has different arguments and options in different formats (no surprise in PHP world :). If you ever tried to get ignoring directories to work then you know what I mean. On the other hand CLI tools are cool because you can analyze any directory or file. Unfortunately Jenkins, Travis, Scrutiziner needs special configuration file. What if you want to analyze every bundle in your Symfony app? Will you create e.g. Jenkins project/task for each bundle? I want to analyze selected directory without complex configuration and creating extra files/tasks I don't care about format of ignored directories in phploc, phpmd, ... I don't want to update all projects when QA tool is updated or if I've found cool tool like PHPMetrics I don't want to analyze XML files → tool should be able to build html reports I want fast execution time → tools should run in parallel (thanks Robo) Available tools Tool Description phploc Measure the size of a PHP project phpcpd Copy/Paste Detector (CPD) for PHP code phpcs Detect violations of a coding standard pdepend PHP adaptation of JDepend phpmd Scan PHP project for messy code phpmetrics Static analysis tool for PHP Install  Without composer # install phpqa git clone https://github.com/EdgedesignCZ/phpqa.git composer install --no-dev  # make phpqa globally accessible ## you can symlink binary sudo ln -s /path-to-phpqa-repository/phpqa /usr/bin/phpqa ## or add this directory to your PATH in your ~/.bash_profile (or ~/.bashrc) export PATH=~/path-to-phpqa-repository-from-pwd:$PATH  Composer composer global require edgedesign/phpqa --update-no-dev # Make sure you have ~/.composer/vendor/bin/ in your PATH. Of course you can add dependency to require-dev section in your composer.json. But I wouldn't recommend it. In my experience one QA tool which analyzes N projects is better than N projects with N analyzers. It's up to you how many repositories you want to update when new version is released. Analyze Command Description phpqa --help Show help - available options, tools, default values, ... phpqa --analyzedDir ./ --buildDir ./build Analyze current directory and save output to build directory phpqa --ignoredDirs build,vendor Ignore directories phpqa --ignoredFiles RoboFile.php Ignore files phpqa --tools phploc,phpcs Run only selected tools phpqa --verbose Show output from executed tools phpqa --quiet Show no output at all phpqa --output cli CLI output instead of creating files in --buildDir phpqa --execution no-parallel Don't use parallelism if --execution != parallel phpqa --config ./my-config Use custom configuration phpqa --report Build html reports phpqa tools Show versions of available tools Output modes Tool --output file (default) - generated files --output cli phploc phploc.xml ✓ phpcpd phpcpd.xml ✓ phpcs checkstyle.xml full report pdepend pdepend-jdepend.xml, pdepend-summary.xml, pdepend-jdepend.svg, pdepend-pyramid.svg ✗ phpmd phpmd.xml ✓ phpmetrics phpmetrics.html, phpmetrics.xml ✓ Advanced configuration - .phpqa.yml Override tools' settings with .phpqa.yml: Tool Settings Default Value Your value phpcs Coding standard PSR2 Name of existing standard (PEAR, PHPCS, PSR1, PSR2, Squiz, Zend), or path to your coding standard phpmd Ruleset Edgedesign's standard Path to ruleset phpcpd Minimum number of lines/tokens for copy-paste detection 5 lines, 70 tokens .phpqa.yml is automatically detected in current working directory, but you can specify directory via option: # use .phpqa.yml from defined directory phpqa --config path-to-directory-with-config You don't have to specify full configuration. Missing or empty values are replaced with default values from our .phpqa.yml. Example of minimal config that defines only standard for CodeSniffer: phpcs:     standard: Zend Tip: use PHP Coding Standard Generator for generating phpcs/phpmd standards. HTML reports If you don't have Jenkins or other CI server, then you can use HTML reports. HTML files are built when you add option --report. Take a look at report from phpqa. # build html reports phpqa --report Custom templates Define custom templates if you don't like default templates. You have to define path to xsl files in your .phpqa.yml: # use different template for PHPMD, use default for other tools report:     phpmd: my-templates/phpmd.xsl  Be aware that all paths are relative to .phpqa.yml. Don't copy-paste section report if you don't have custom templates!  Requirements xsl extension must be installed and enabled for exporting HTML reports. Otherwise you'll get error PHP Fatal error: Class 'XSLTProcessor' not found. # install xsl extension in Ubuntu sudo apt-get update sudo apt-get install php5-xsl sudo service apache2 restart Continuous integration We use Jenkins-CI in Edgedesign. Below you can find examples of Phing, Robo and bash tasks.  Project with one directory Typically in Symfony project you have project with src directory with all the code and tests. So you don't need ignore vendors, web directory etc. Phing - build.xml <target name=""ci-phpqa"">     <exec executable=""phpqa"" passthru=""true"">         <arg value=""--analyzedDir=./src"" />         <arg value=""--buildDir=./build/logs"" />         <arg value=""--report"" />     </exec> </target> Robo - RoboFile.php public function ciPhpqa() {     $this->taskExec('phpqa')         ->option('analyzedDir', './src')         ->option('buildDir', './build/logs')         ->option('report')         ->run(); }  Project with multiple directories (src, tests, ...) When you analyze root directory of your project don't forget to ignore vendors and other non-code directories. Otherwise the analysis could take a very long time. Phing - build.xml <target name=""ci-phpqa"">     <exec executable=""phpqa"" passthru=""true"">         <arg value=""--analyzedDir=./"" />         <arg value=""--buildDir=./build/logs"" />         <arg value=""--ignoredDirs=app,bin,build,vendor,web"" />         <arg value=""--ignoredFiles= "" />         <arg value=""--verbose"" />         <arg value=""--report"" />     </exec> </target> Robo - RoboFile.php public function ciPhpqa() {     $this->taskExec('phpqa')         ->option('verbose')         ->option('report')         ->option('analyzedDir', './')         ->option('buildDir', './build')         ->option('ignoredDirs', 'build,bin,vendor')         ->option('ignoredFiles', 'RoboFile.php,error-handling.php')         ->run(); } Bash phpqa --verbose --report --analyzedDir ./ --buildDir ./var/CI --ignoredDirs=bin,log,temp,var,vendor,www Contributing Contributions from others would be very much appreciated! Send pull request/ issue. Thanks! License Copyright (c) 2015, 2016 Edgedesign.cz. MIT Licensed, see LICENSE for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/EdgedesignCZ/phpqa"	"A tool for running QA tools (phploc, phpcpd, phpcs, pdepend, phpmd, phpmetrics)."	"true"
"Code Analysis"	"PHPPHP"	"https://github.com/ircmaxell/PHPPHP"	"A PHP VM implementation in PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"596"	"50"	"51"	"GitHub - ircmaxell/PHPPHP: A PHP VM implementation in PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 596 Fork 51 ircmaxell/PHPPHP Code Issues 2 Pull requests 1 Pulse Graphs A PHP VM implementation in PHP 160 commits 3 branches 0 releases 8 contributors PHP 99.9% Shell 0.1% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags closure fix-php-sh master Nothing to show Nothing to show New pull request Latest commit 6d5d62a Nov 19, 2013 ircmaxell Merge pull request #24 from ircmaxell/fix-php-sh … fix php.sh to support double quotes Permalink Failed to load latest commit information. lib/PHPPHP Merge branch 'master' of github.com:ircmaxell/PHPPHP Mar 7, 2013 .gitignore Add support for casting Jan 2, 2013 LICENSE.md Create LICENSE.md Dec 29, 2012 README.md Composer installs by default dev dependencies Jul 20, 2013 composer.json More work completely breaking things. Trying to refactor zvals to use… Jan 1, 2013 composer.lock More work completely breaking things. Trying to refactor zvals to use… Jan 2, 2013 full-test-results.html.md A bunch of refactoring, fix array assignment Mar 7, 2013 full-tests.sh A bunch of refactoring, fix array assignment Mar 7, 2013 php.bat Moar memories Jan 4, 2013 php.php Add core shim, refactor extensions slightly Jan 3, 2013 php.sh fix php.sh to support double quotes Nov 17, 2013 run-tests.bat Add run-tests support via composer-installed php source code Dec 31, 2012 run-tests.sh Allowed to run only one test Jan 4, 2013 test-results.html.md Update test results Mar 7, 2013 README.md PHPPHP A PHP VM implementation written in PHP. This is a basic VM implemented in PHP using the AST generating parser developed by @nikic To see what's supported so far, check out the opcodes. Right now, functions (definitions and calls) are supported, if statements (with basic boolean operations), if statements, as are variables and some basic variable operations... To see the current state of the implementation versus the Core Language Test Suite, check out the test results file. Installation To get the dependencies you need to use composer: curl -s https://getcomposer.org/installer | php php composer.phar install  Grab a cup of coffee while it runs, as it will fetch the entire PHP source code in the process which can take a while (~10 minutes). Usage Linux/OSX Use the php.sh shell script to invoke php.php. This requires that php be in your system path. ./php.sh -r ""var_dump('foo');""  Windows Use the php.bat shell script to invoke php.php. This requires that php.exe be in your system path. php.bat -r ""var_dump('foo');""  Manual You can run the implementation from the command line using the php.php file directly. php php.php -r ""var_dump('foo');""  Or with a file: php php.php ../test.php  It only supports relative includes off the base file now (no include path parsing yet)... Testing run-tests To run the test suite (which mostly fails right now), install composer using the --dev flag (to install the test suite along side php's source code). Then use the run-tests.(sh|bat) file to execute them. Linux/OSX ./run-tests.sh  Windows Before running tests on Windows, some lines must be removed or commented out from runtests.php (if installed via composer it will be located in vendor/php/php-src/runtests.php). Starting from line 185: if (function_exists('is_executable') && !is_executable($php)) {     error(""invalid PHP executable specified by TEST_PHP_EXECUTABLE  = $php""); }  To run test suite simply type run-tests.bat  Manual If you choose not to install php's source code from composer, but have it elsewhere in your system path, you can use it directly. php path/to/runtests.php -p path/to/php.sh path/to/tests  TODO: Major things left to do: Implement references properly Implement Error Handling Implement classes and objects Implement Output Buffering. Refactor output control to use SAPI modules Implement true array hash tables (as opposed to the current reliance on the underlying hash table) Implement Error Handling Implement Exception Handling Implement parameter parsing for core functions For The Love Of God, Why? There are a number of reasons why I did this... It was something that I always wanted to do. For no particular reason other than I wanted to do it. I knew it was possible, but possible and doing it are two very different things. It was far easier than I thought. The time to the initial commit (basic working VM) was only about 6 hours of work. So it's not like I spent a year building it... It could be a useful education tool. For me learning the intricacies of the Zend VM better (I know it fairly well, but knowing and building give two different amounts of knowledge). But also for teaching others how the VM works. By giving a PHP implementation reference, hopefully more people can understand how the C implementation works (they both operate off the same generic implementation at this point). It can enable certain interesting things. For example, we could hypothetically build an Opcode optimizer in PHP which parses the generated opcodes and optimizes things (removing redundant opcodes, statically compiling static expressions, etc). Then, we could build a PECL extension that would render those optimized opcodes directly into APC cache (or some other opcode cache mechanism). It can be used to quickly mock up future functionality changes. Consider that it's easier to alter a PHP VM simply because you don't need to worry about memory management at all. So whipping up a POC for a significant feature should be a lot easier in PHP than C (at least for many non-full-time C developers). It can be used to actually debug PHP code without working knowledge of GDB (and the underlying C structures). I wouldn't recommend this, as the chances of us getting it working 100% the same as the C implementation are practically 0, but it's a concept. It could wind up becoming a full implementation (like PYPY). If we can compile the implementation using HipHop, and do some other lower-level tricks, there's a chance we could achieve performance somewhere near the C implementation. I doubt it, but it's possible. Especially if we add a JIT component (or a way of rendering out to machine code certain opcodes)... Why not? About The Authors Anthony Ferrara - @ircmaxell blog.ircmaxell.com Nikita Popov - @nikita_ppv nikic.github.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ircmaxell/PHPPHP"	"A PHP VM implementation in PHP."	"true"
"Code Analysis"	"PHPSandbox"	"https://github.com/fieryprophet/php-sandbox"	"A PHP sandbox environment."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"195"	"17"	"23"	"GitHub - fieryprophet/php-sandbox: A full-scale PHP 5.3.2+ sandbox class that utilizes PHPParser to prevent sandboxed code from running unsafe code. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 195 Fork 23 fieryprophet/php-sandbox Code Issues 0 Pull requests 0 Pulse Graphs A full-scale PHP 5.3.2+ sandbox class that utilizes PHPParser to prevent sandboxed code from running unsafe code. http://www.fieryprophet.com/phpsandbox 152 commits 2 branches 7 releases Fetching contributors PHP 87.9% HTML 12.1% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master v1.4 Nothing to show v1.3.11 v1.3.10 v1.3.9 v1.3.8 v1.3.7 v1.3.6 v1.3.5 Nothing to show New pull request Latest commit 31eb2b1 Feb 10, 2016 fieryprophet Update README.md Permalink Failed to load latest commit information. docs - Added the optional ability to sandbox included files and added two … Apr 24, 2015 src Fix references error in PHP 5.6 Oct 27, 2015 tests - Updated documentation Jun 19, 2014 toolkit - Toolkit shows generated code as part of its output Sep 22, 2014 .gitignore Fix references error in PHP 5.6 Oct 27, 2015 .scrutinizer.yml - Minor updates to .scrutinizer.yml May 7, 2014 .travis.yml Fix references error in PHP 5.6 Oct 27, 2015 CHANGELOG.md - Added the optional ability to sandbox included files and added two … Apr 24, 2015 LICENSE - Addressed potential vulnerabilities related to SandboxedStrings whe… Mar 10, 2014 MANUAL.html - Added the optional ability to sandbox included files and added two … Apr 24, 2015 README.md Update README.md Feb 10, 2016 composer.json Updated README Sep 25, 2015 composer.lock Fixed zendframework repositories in composer.json Jul 23, 2015 phpunit.xml.dist Initial commit of PHPUnit tests and added PHPUnit as a ""require-dev"" … Mar 1, 2013 README.md DEPRECATED: The PHPSandbox project has transfered to Corveda/PHPSandbox and will be actively maintained there. This branch is no longer being actively maintained. Update your dependencies as follows: {     ""require"": {         ""corveda/php-sandbox"": ""2.*""     } }  A full-scale PHP 5.3.2+ sandbox class that utilizes PHP-Parser to prevent sandboxed code from running unsafe code. It also utilizes FunctionParser to disassemble callables passed to the sandbox, so that PHP callables can also be run in sandboxes without first converting them into strings. Manual: http://manual.phpsandbox.org Online API Documentation: http://docs.phpsandbox.org Features: Finegrained whitelisting and blacklisting, with sensible defaults configured. Includes dynamic demonstration system that allows for local testing of custom sandbox configurations Can redefine internal PHP and other functions to make them more secure for sandbox usage. Can redefine superglobals and magic constants to expose your own values to sandboxed code. Can overwrite the get_defined_* and get_declared_* functions to show only allowed functions, classes, etc. to the sandboxed code. Can selectively allow and disallow function creation, class declarations, constant definitions, keywords, and much more. Can prepend and append trusted code to setup and tear down the sandbox, and automatically whitelist the classes, functions, variables, etc. they define for the sandbox. Can retrieve the generated sandbox code for later usage. Can pass arguments directly to the sandboxed code through the execute method to reveal chosen outside variables to the sandbox. Can access the parsed, prepared and generated code ASTs for further analysis or for serialization. Can define custom validation functions for fine-grained control of every element of the sandbox. Can specify a custom error handler to intercept PHP errors and handle them with custom logic. Can specify a custom exception handler to intercept thrown exceptions and handle them with custom logic. Can specify a validation error handler to intercept thrown validation errors and handle them with custom logic. Can intercept callbacks and validate them against function whitelists and blacklists, even if they are called as strings Example usage: function test($string){     return 'Hello ' . $string; }  $sandbox = new PHPSandbox\PHPSandbox; $sandbox->whitelist_func('test'); $result = $sandbox->execute(function(){     return test('world'); });  var_dump($result);  //Hello world  Custom validation example: function custom_func(){     echo 'I am valid!'; }  $sandbox = new PHPSandbox\PHPSandbox; //this will mark any function valid that begins with ""custom_"" $sandbox->set_func_validator(function($function_name, PHPSandbox\PHPSandbox $sandbox){     return (substr($function_name, 0, 7) == 'custom_');  //return true if function is valid, false otherwise }); $sandbox->execute(function(){     custom_func(); }); //echoes ""I am valid!""  Custom validation error handler example: $sandbox = new PHPSandbox\PHPSandbox; //this will intercept parser validation errors and quietly exit, otherwise it will throw the validation error $sandbox->set_validation_error_handler(function(PHPSandbox\Error $error, PHPSandbox\PHPSandbox $sandbox){     if($error->getCode() == PHPSandbox\Error::PARSER_ERROR){ //PARSER_ERROR == 1         exit;     }     throw $error; }); $sandbox->execute('<?php i am malformed PHP code; ?>'); //does nothing  Disable validation example: $sandbox = new PHPSandbox\PHPSandbox; //this will disable function validation $sandbox->set_option('validate_functions', false); // or $sandbox->validate_functions = false; $sandbox->execute('<?php echo system(""ping google.com""); ?>'); //Pinging google.com. . .  Requirements PHP 5.3.2+ PHP-Parser FunctionParser (if you wish to use closures) PHP should be compiled with --enable-tokenizer option (it typically is) Installation To install using composer, simply add the following to your composer.json file in the root of your project: {     ""minimum-stability"": ""dev"",     ""require"": {         ""fieryprophet/php-sandbox"": ""1.3.*""     } }  Then run composer install --dry-run to check for any potential problems, and composer install to install. LICENSE Copyright (c) 2013-2015 by Elijah Horton (fieryprophet [at] yahoo.com)  Some rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:      * Redistributions of source code must retain the above copyright       notice, this list of conditions and the following disclaimer.      * Redistributions in binary form must reproduce the above       copyright notice, this list of conditions and the following       disclaimer in the documentation and/or other materials provided       with the distribution.      * The names of the contributors may not be used to endorse or       promote products derived from this software without specific       prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fieryprophet/php-sandbox"	"A PHP sandbox environment."	"true"
"Code Analysis"	"Qafoo Quality Analyzer"	"https://github.com/Qafoo/QualityAnalyzer"	"A tool to visualize metrics and source code."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"310"	"22"	"18"	"GitHub - Qafoo/QualityAnalyzer: Tool helping us to analyze software projects Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 310 Fork 18 Qafoo/QualityAnalyzer Code Issues 7 Pull requests 1 Pulse Graphs Tool helping us to analyze software projects 372 commits 137 branches 0 releases Fetching contributors JavaScript 92.6% CSS 6.5% Other 0.9% JavaScript CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags greenkeeper-babel-core-6.3.2 greenkeeper-babel-core-6.3.13 greenkeeper-babel-core-6.3.15 greenkeeper-babel-core-6.3.17 greenkeeper-babel-core-6.3.21 greenkeeper-babel-core-6.3.26 greenkeeper-babel-core-6.4.0 greenkeeper-babel-core-6.4.5 greenkeeper-babel-core-6.5.0 greenkeeper-babel-core-6.5.1 greenkeeper-babel-core-6.5.2 greenkeeper-babel-core-6.6.0 greenkeeper-babel-core-6.6.4 greenkeeper-babel-core-6.6.5 greenkeeper-babel-core-6.7.0 greenkeeper-babel-core-6.7.2 greenkeeper-babel-core-6.7.4 greenkeeper-babel-core-6.7.5 greenkeeper-babel-eslint-4.1.7 greenkeeper-babel-eslint-4.1.8 greenkeeper-babel-eslint-5.0.0 greenkeeper-babel-eslint-5.0.1 greenkeeper-babel-eslint-6.0.0 greenkeeper-babel-eslint-6.0.1 greenkeeper-babel-eslint-6.0.2 greenkeeper-babel-loader-6.2.1 greenkeeper-babel-loader-6.2.2 greenkeeper-babel-loader-6.2.3 greenkeeper-babel-loader-6.2.4 greenkeeper-bootstrap-sass-loader-1.0.10 greenkeeper-css-loader-0.23.1 greenkeeper-d3-3.5.11 greenkeeper-d3-3.5.12 greenkeeper-d3-3.5.13 greenkeeper-d3-3.5.14 greenkeeper-d3-3.5.15 greenkeeper-d3-3.5.16 greenkeeper-eslint-2.0.0 greenkeeper-eslint-2.1.0 greenkeeper-eslint-2.2.0 greenkeeper-eslint-2.3.0 greenkeeper-eslint-2.4.0 greenkeeper-eslint-2.5.0 greenkeeper-eslint-2.5.1 greenkeeper-eslint-2.5.2 greenkeeper-eslint-2.5.3 greenkeeper-eslint-2.6.0 greenkeeper-eslint-2.7.0 greenkeeper-eslint-config-standard-5.0.0 greenkeeper-eslint-config-standard-5.1.0 greenkeeper-eslint-plugin-react-3.11.3 greenkeeper-eslint-plugin-react-3.12.0 greenkeeper-eslint-plugin-react-3.13.0 greenkeeper-eslint-plugin-react-3.13.1 greenkeeper-eslint-plugin-react-3.14.0 greenkeeper-eslint-plugin-react-3.15.0 greenkeeper-eslint-plugin-react-3.16.0 greenkeeper-eslint-plugin-react-3.16.1 greenkeeper-eslint-plugin-react-4.0.0 greenkeeper-eslint-plugin-react-4.1.0 greenkeeper-eslint-plugin-react-4.2.0 greenkeeper-eslint-plugin-react-4.2.1 greenkeeper-eslint-plugin-react-4.2.2 greenkeeper-eslint-plugin-react-4.2.3 greenkeeper-eslint-plugin-react-4.3.0 greenkeeper-eslint-plugin-standard-1.3.2 greenkeeper-extract-text-webpack-plugin-1.0.0 greenkeeper-extract-text-webpack-plugin-1.0.1 greenkeeper-grunt-1.0.0 greenkeeper-grunt-1.0.1 greenkeeper-grunt-cli-1.0.0 greenkeeper-grunt-cli-1.0.1 greenkeeper-grunt-cli-1.1.0 greenkeeper-grunt-cli-1.2.0 greenkeeper-grunt-contrib-watch-1.0.0 greenkeeper-grunt-eslint-17.3.2 greenkeeper-grunt-eslint-18.0.0 greenkeeper-grunt-karma-0.12.2 greenkeeper-history-1.14.0 greenkeeper-history-1.15.0 greenkeeper-history-1.16.0 greenkeeper-history-1.17.0 greenkeeper-history-2.0.0 greenkeeper-history-2.0.1 greenkeeper-jasmine-2.4.1 greenkeeper-jasmine-core-2.4.1 greenkeeper-jquery-2.2.0 greenkeeper-jquery-2.2.1 greenkeeper-jquery-2.2.2 greenkeeper-jquery-2.2.3 greenkeeper-jszip-2.6.0 greenkeeper-karma-0.13.16 greenkeeper-karma-0.13.17 greenkeeper-karma-0.13.18 greenkeeper-karma-0.13.19 greenkeeper-karma-0.13.20 greenkeeper-karma-0.13.21 greenkeeper-karma-0.13.22 greenkeeper-karma-jasmine-0.3.7 greenkeeper-karma-jasmine-0.3.8 greenkeeper-karma-junit-reporter-0.4.0 greenkeeper-karma-junit-reporter-0.4.1 greenkeeper-karma-phantomjs-launcher-0.2.2 greenkeeper-karma-phantomjs-launcher-0.2.3 greenkeeper-karma-phantomjs-launcher-1.0.0 greenkeeper-node-sass-v3.4.2 greenkeeper-phantomjs-2.1.1 greenkeeper-phantomjs-2.1.2 greenkeeper-phantomjs-2.1.3 greenkeeper-phantomjs-2.1.7 greenkeeper-react-0.14.4 greenkeeper-react-0.14.5 greenkeeper-react-0.14.6 greenkeeper-react-0.14.7 greenkeeper-react-0.14.8 greenkeeper-react-15.0.0 greenkeeper-react-dom-0.14.4 greenkeeper-react-dom-0.14.5 greenkeeper-react-dom-0.14.6 greenkeeper-react-dom-0.14.7 greenkeeper-react-dom-0.14.8 greenkeeper-react-dom-15.0.0 greenkeeper-react-router-1.0.1 greenkeeper-react-router-1.0.2 greenkeeper-react-router-1.0.3 greenkeeper-react-router-2.0.0 greenkeeper-react-router-2.0.1 greenkeeper-react-router-v1.0.3 greenkeeper-sass-loader-3.2.0 greenkeeper-style-loader-0.13.1 greenkeeper-webpack-1.12.10 greenkeeper-webpack-1.12.11 greenkeeper-webpack-1.12.12 greenkeeper-webpack-1.12.13 greenkeeper-webpack-1.12.14 greenkeeper-xml2js-0.4.16 master Nothing to show Nothing to show New pull request Latest commit aa67fc3 May 6, 2016 kore Merge pull request #207 from thanosp/update-pdepend … Updated pdepend for PHP7 support Permalink Failed to load latest commit information. ant @ e9ed97a Updated ant reference Oct 30, 2015 assets Implemented simple paging in metrics view Apr 28, 2016 bin CS Oct 26, 2015 data Added data directory Oct 15, 2015 src Implemented simple paging in metrics view Apr 28, 2016 test Fixed broken assert Nov 2, 2015 .gitignore Do not ignore packaged files Oct 20, 2015 .gitmodules Initialized build environment Sep 23, 2015 .travis.yml Added .travis.yml Oct 21, 2015 Gruntfile.js Removed broken include Dec 3, 2015 LICENSE Added a license Oct 16, 2015 README.rst Also reference parallel execution example Nov 20, 2015 build.xml Fixed project name in build.xml. Mar 18, 2016 composer.json Stay with PHPUnit 4 to not enforce PHP 5.6 just because… Oct 29, 2015 composer.lock Updated pdepend to work with PHP7 Apr 1, 2016 environment Build JS & CSS only in dev mode Oct 20, 2015 index.html Added simple logo Nov 4, 2015 package.json Implemented simple paging in metrics view Apr 28, 2016 phpunit.xml Fixed PHPUnit setup Oct 29, 2015 webpack.config.js Implemented base path resolver Oct 30, 2015 README.rst Qafoo Quality Analyzer This software is a tool to visualize metrics and source code. We use this software for Code Reviews together with our customers. Running the analyzers requires the respective PHP tools, which are installed using composer and can all be run using a convenience command. You may also run the tools in your common build process, though. To display the metrics a pure JavaScript / CSS stack is used so you could build and serve the results inside continuous integration tools like Jenkins. This might seem strange but it works really well even with software spanning 800,000 lines of PHP code. If you want to improve, enhance the software or just fix some annoying bugs, you are very welcome to do so. The technology stack involved sadly is not that simple, though (PHP, Symfony2, Ant, Babel, D3, Grunt, Jasmine, Karma, SASS, PhantomJs, React, React-Router, Underscore, Webpack). A Code of Conduct applies for any interaction with this project – if you feel like it is violated get in contact with Kore. Setup To use the software there are very few steps involved. The only requirement is a current version of PHP. Run the following commands to install the software: git clone https://github.com/Qafoo/QualityAnalyzer.git cd QualityAnalyzer composer install  In the next step you can already analyze some software using something like this: bin/analyze analyze src/php/  See ""Usage"" for more details on the command. The results of this command can be found in the data/ folder. Finally you can start the webserver to view the results: bin/analyze serve  Click around and enjoy the data! Usage You start by analyzing a certain project or providing the tool with the paths to existing analyze files, like code coverage reports: bin/analyze analyze /path/to/source  With the default command the tool will analyze the source code itself. For tools like PHPMD or PDepend this makes a lot of sense since the tool already knows which options to use for each tool. There are some reports we cannot generate ourselves like code coverage from your tests. You can tell the tool where to find certain files to make sure they are available and ready to be used: bin/analyze \     --coverage=/path/to/clover.xml \     --tests=/path/to/junit.xml \     analyze /path/to/source  You can also specify already generated files for all the other tools. But the visualization might behave strangely if some reports are generated in the wrong formats or some options are missing. We do not verify this (yet) properly. Ignore Sub-Directories You might also want to tell the tools which directories there are to ignore by the tools. This is especially important if you have (large) libraries in your source directory – you do not want to analyze those. For this you may use the --exclude option: bin/analyze \     --coverage=/path/to/clover.xml \     --tests=/path/to/junit.xml \     --exclude=libraries,vendor \     analyze /path/to/source  After the analyzer has finished use bin/analyze serve or similar means to access the index.html with your browser and enjoy the results visualization. Customize Tools If you want to customize tool execution you can always run all the tools yourself and pass the existing result files to the analyze command. An example customizable ant build file doing this can be found here: src/examples/customize.xml or src/examples/parallel.xml. The parameters to pass you custom results, which wil omit running the tool by the analyzer command itself are: --pdepend=PDEPEND            Path to PDepend summary XML file --dependencies=DEPENDENCIES  Path to PDepend dependencies XML file --phpmd=PHPMD                Path to mess detector (PMD / PHPMD) XML file --checkstyle=CHECKSTYLE      Path to checkstyle violations (PHP Code Sniffer) XML file --cpd=CPD                    Path to C&P violations (PHP Copy Paste Detector) XML file --phploc=PHPLOC              Path to PHPLoc result XML file  Feel free to provide examples using different build environments by creating a pull request. Building & Developing The Software The build system of the Quality Analyzer is based on ant. You must have ant >= 1.8 installed. To be able to use it you should first initilaize the submodule containing the build commons: git submodule update --init  To develop the Quality Analyzer we heavily depend on a JavaScript build stack. For this you must have node and npm installed. All other required tools will be installed by the build tool. To set the project into development mode run: echo env=dev > environment.local  As long as you do not remove this line from the environment.local file any more or change it to prod all development tools and libraries will be installed and used. This also means JavaScript and CSS will be compiled by commands like ant serve. Running The Tests You can run the tests by executing ant. It will run run tests through Karma & Jasmine for parts of the JavaScript stack and PHPUnit tests for the PHP stack (once we have some). Building CSS & JavaScript The project uses ECMAScript 6 and transpiles it using Babel. Thus we need to update the bundle.js when working on the client. This is done when the project is prepared but can also be executed continuously using: ant watch  This also compiles the SASS from the project and Bootstrap file into a single CSS file. Trying Out The Project If you want to try out the project you can serve the root directory with basically any webserver. The webserver should rewrite all requests to unknown resources to the index.html file which does the routing using JavaScript. For your convenience we included a working server setup using PHPs internal webserver. You can start it using: ant serve  Generating The Bundle Files The following task ensures the bundle files are generated, compressed and comitted: ant deploy  Use this command to update the distributed files. It will run the package task first (after running all tests, of course). If there are changes in the assets/ folder those changes will be comitted and the current development state will then be pushed. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Qafoo/QualityAnalyzer"	"A tool to visualize metrics and source code."	"true"
"Code Analysis"	"Scrutinizer"	"https://scrutinizer-ci.com/"	"A web tool to scrutinise PHP code."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Measure and Improve Code Quality continuously with Scrutinizer Toggle Features Pricing Documentation Blog Login Build quality software, better. Powerful tools for measuring and improving code quality for open- and closed-source development projects. 1 Developing Code 2 Pushing to Hosting 3 Automated Code Reviews Continuous Integration 4 Deploying code to server 5 Happy Developers, and even Happier Customers Get started with Github Get started with Bitbucket Start your 14-day free trial today, no credit card required. Supported Languages Planned Planned Why to use Scrutinizer Improve code quality and find bugs before they hit production with our continuous inspection platform Improve Code Quality Increase developer knowledge and understanding of code quality issues. Find Bugs Quickly identify code improvements and quick wins. Intuitive Code Rating Easily track metric changes with our intuitive code rating system. Trends & Reports Our weekly quality reports help you track your progress and set goals. Integration Automatic Inspection of Git pushes, and pull requests of GitHub, Bitbucket or self-hosted repositories. Safe & Secure Protecting your data is very important to us. Scrutinizer takes several measures to ensure your data is safe. View all features Trusted by over 5000 projects and companies around the world: Scrutinizer is a continuous inspection platform helping you to create better software. Take the tour Explore projects twitter Justin Sainton @JS_Zao @chrislema @ryancduff We <3 Scrutinizer. Realized that our codebase improved by 26% in one major release because of @scrutinizerci twitter Björn Schotte  @BjoernSchotte folks, you should follow @scrutinizerci for bells & whistles about Continuous Inspection Start your 14-day free trial today, no credit card required. Get started with Github Get started with Bitbucket Not convinced, yet? Check out our features or explore open-source projects using Scrutinizer. Features Scrutinizer is a continuous inspection platform helping you to write better software. Learn more: Continously measure and track code quality Eliminate bugs before they hit production Code metrics simplified and easy to understand Feedback on code quality changes between versions Receive weekly code quality reports Supported Languages PHP Python Ruby   Documentation Getting Started Configuring Scrutinizer Refactorings API Reference Blog Posts View Analysis Results inside GitHub PHP Security Analysis finds XSS Vulnerabilities in Popular WordPress Plugins Composer, the GC performance improvement, and who else might be affected Security Audit of Request Data for PHP 2016 © scrutinizer-ci. All Rights Reserved. Legal Notice Terms of Service Service Status twitter rss"	"null"	"null"	"A web tool to scrutinise PHP code."	"true"
"Code Analysis"	"UBench"	"https://github.com/devster/ubench"	"A simple micro benchmark library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"372"	"24"	"47"	"GitHub - devster/ubench: Micro PHP benchmark library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 372 Fork 47 devster/ubench Code Issues 1 Pull requests 0 Pulse Graphs Micro PHP benchmark library 13 commits 1 branch 4 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.2.0 1.1.1 1.1.0 1.0.0 Nothing to show New pull request Latest commit 4b5c821 Jun 2, 2015 devster Update dev-master alias Permalink Failed to load latest commit information. src Adding run method May 29, 2015 tests Adding run method May 29, 2015 README.md Adding run method May 29, 2015 composer.json Update dev-master alias Jun 2, 2015 phpunit.xml.dist add round param to readable functions + add getMemoryUsage method Dec 7, 2012 README.md Ubench Ubench is a PHP micro library for benchmark Installation Old school require src/Ubench.php in your project. Composer Add this to your composer.json {     ""require"": {         ""devster/ubench"": ""1.1.*-dev""     } } Usage require_once 'src/Ubench.php';  $bench = new Ubench;  $bench->start();  // Execute some code  $bench->end();  // Get elapsed time and memory echo $bench->getTime(); // 156ms or 1.123s echo $bench->getTime(true); // elapsed microtime in float echo $bench->getTime(false, '%d%s'); // 156ms or 1s  echo $bench->getMemoryPeak(); // 152B or 90.00Kb or 15.23Mb echo $bench->getMemoryPeak(true); // memory peak in bytes echo $bench->getMemoryPeak(false, '%.3f%s'); // 152B or 90.152Kb or 15.234Mb  // Returns the memory usage at the end mark echo $bench->getMemoryUsage(); // 152B or 90.00Kb or 15.23Mb  // Runs `Ubench::start()` and `Ubench::end()` around a callable // Accepts a callable as the first parameter. Any additional parameters will be passed to the callable. $result = $bench->run(function ($x) {     return $x; }, 1); echo $bench->getTime(); License Ubench is licensed under the MIT License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/devster/ubench"	"A simple micro benchmark library."	"true"
"Architectural"	"Compose"	"https://github.com/igorw/compose"	"A function composition library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"70"	"5"	"4"	"GitHub - igorw/compose: Function composition. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 70 Fork 4 igorw/compose Code Issues 1 Pull requests 0 Pulse Graphs Function composition. 5 commits 2 branches 2 releases 1 contributor PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master retain-type-hints Nothing to show v1.0.1 v1.0.0 Nothing to show New pull request Latest commit c8708d0 Apr 20, 2013 igorw Prepare v1.0.1 Permalink Failed to load latest commit information. src Improve argument validation Apr 18, 2013 tests Improve argument validation Apr 18, 2013 .gitignore init Apr 18, 2013 CHANGELOG.md Prepare v1.0.1 Apr 20, 2013 LICENSE init Apr 17, 2013 README.md Add output from command Apr 18, 2013 composer.json init Apr 17, 2013 phpunit.xml.dist init Apr 17, 2013 README.md igorw/compose Function composition. Allows you to stitch functions together to form a pipeline. This can be useful if you have to transform data in many steps and you want to describe those steps on a high level. compose Generally, function composition means taking two functions f and g, and producing a new function z, which applies f to the result of g. z = compose(f, g) ; z(x) => f(g(x))  This library provides a compose function that does just this. $z = igorw\compose($f, $g); var_dump($z($x));  It supports an arbitrary number of functions to be composed via varargs. $z = igorw\compose($f, $g, $h, $i);  The innermost function (the last one in the list) can take an arbitrary number of arguments, whereas the others may only take a single argument. $z = igorw\compose($f, $g); $z('a', 'b', 'c'); // => $f($g('a', 'b', 'c'))  pipeline pipeline is the same as compose, but the arguments are reversed. This is more easy to read in some cases, because you can list the functions in the order they will be called. It is quite similar to a unix pipe in that regard. Examples function transform_data($data) {     return [         'name' => $data['firstname'].' '.$data['lastname'],     ]; }  $transformJson = igorw\pipeline(     function ($json) { return json_decode($json, true); },     'transform_data',     'json_encode' );  $json = <<<EOF {""firstname"": ""Igor"", ""lastname"": ""Wiedler""} {""firstname"": ""Beau"", ""lastname"": ""Simensen""} EOF;  $list = explode(""\n"", $json); $newList = array_map($transformJson, $list); $newJson = implode(""\n"", $newList);  // => // {""name"": ""Igor Wiedler""} // {""name"": ""Beau Simensen""}  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/igorw/compose"	"A function composition library."	"true"
"Architectural"	"Design Patterns PHP"	"https://github.com/domnikl/DesignPatternsPHP"	"A repository of software patterns implemented in PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10170"	"987"	"2122"	"GitHub - domnikl/DesignPatternsPHP: sample code for several design patterns in PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 987 Star 10,170 Fork 2,122 domnikl/DesignPatternsPHP Code Issues 7 Pull requests 4 Pulse Graphs sample code for several design patterns in PHP 628 commits 4 branches 0 releases Fetching contributors PHP 86.2% Python 5.2% Makefile 4.1% Batchfile 4.0% Other 0.5% PHP Python Makefile Batchfile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags analysis-Xkd11q flyweight german-translation master Nothing to show Nothing to show New pull request Latest commit 2b515f1 Jun 22, 2016 domnikl committed on GitHub Merge pull request #222 from aik84from/patch-1 … Update Bicycle.php Permalink Failed to load latest commit information. Behavioral Fixed style Jun 14, 2016 Creational Update Bicycle.php Jun 22, 2016 More update all .po files Jun 4, 2016 Structural Merge pull request #221 from krizalys/fix-style Jun 16, 2016 ansible Removed Pear & Pecl from Ansible scripts Aug 18, 2015 locale Fixed typo Jun 14, 2016 .gitignore composer phar added to gitignore Aug 15, 2015 .travis.yml Enhancement: Validate composer.json and composer.lock on Travis Jul 15, 2015 LICENSE added license (MIT license) Oct 30, 2011 Makefile sphinx-quickstart Apr 2, 2015 README.md update all .po files Jun 3, 2016 README.rst update all .po files Jun 3, 2016 Vagrantfile vagrant & ansible scripts added inc docs in README Aug 15, 2015 composer.json updated phpunit to 4.8.18 which also works with php <= 5.3.3 Nov 18, 2015 composer.lock updated phpunit to 4.8.18 which also works with php <= 5.3.3 Nov 18, 2015 conf.py add Brazilian Portuguese, Spanish, Catalan translation initial files May 28, 2015 make.bat sphinx-quickstart Apr 1, 2015 phpunit.xml.dist create a Test folder for each pattern May 5, 2014 README.md DesignPatternsPHP Read the Docs of DesignPatternsPHP or Download as PDF/Epub This is a collection of known design patterns and some sample code how to implement them in PHP. Every pattern has a small list of examples (most of them from Zend Framework, Symfony2 or Doctrine2 as I'm most familiar with this software). I think the problem with patterns is that often people do know them but don't know when to apply which. Installation You should look at and run the tests to see what happens in the example. To do this, you should install dependencies with Composer first: [optional] Using a Virtual Machine (VM) If you wish to use a ready made VM environment, you can easily create one with Vagrant and Ansible. $ vagrant up Then vagrant ssh and cd /vagrant More information on vagrant Install dependencies $ composer install Read more about how to install and use Composer on your local machine here. Running test suite $ ./vendor/bin/phpunit Patterns The patterns can be structured in roughly three different categories. Please click on the 📓 for a full explanation of the pattern on Wikipedia. Creational AbstractFactory 📓 Builder 📓 FactoryMethod 📓 Multiton (is considered an anti-pattern! ⛔) Pool 📓 Prototype 📓 SimpleFactory Singleton 📓 (is considered an anti-pattern! ⛔) StaticFactory Structural Adapter 📓 Bridge 📓 Composite 📓 DataMapper 📓 Decorator 📓 DependencyInjection 📓 Facade 📓 FluentInterface 📓 Flyweight 📓 Proxy 📓 Registry 📓 Behavioral ChainOfResponsibilities 📓 Command 📓 Iterator 📓 Mediator 📓 Memento 📓 NullObject 📓 Observer 📓 Specification 📓 State 📓 Strategy 📓 TemplateMethod 📓 Visitor 📓 More Delegation 📓 ServiceLocator 📓 Repository EAV 📓 Contribute Please feel free to fork and extend existing or add your own examples and send a pull request with your changes! To establish a consistent code quality, please check your code using PHP_CodeSniffer against PSR2 standard using ./vendor/bin/phpcs -p --standard=PSR2 --ignore=vendor .. License (The MIT License) Copyright (c) 2011 - 2016 Dominik Liebler and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/domnikl/DesignPatternsPHP"	"A repository of software patterns implemented in PHP."	"true"
"Architectural"	"Finite"	"http://yohan.giarel.li/Finite/"	"A simple PHP finite state machine."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"730"	"57"	"109"	"GitHub - yohang/Finite: A Simple PHP Finite State Machine Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 57 Star 730 Fork 109 yohang/Finite Code Issues 21 Pull requests 11 Pulse Graphs A Simple PHP Finite State Machine http://yohan.giarel.li/Finite 207 commits 10 branches 7 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 apply_additional_param compatibility-symfony3 feature-context-graph-aware feature-new-docs gh-pages-feature-event-callbacks gh-pages master refactor-callback-handler scrutinizer-patch-1 Nothing to show 1.1.0 1.0.3 1.0.2 1.0.1 1.0.0 1.0.0-BETA2 1.0.0-BETA1 Nothing to show New pull request Latest commit 128e93d Apr 18, 2016 yohang Merge pull request #115 from realshadow/master … ArrayLoader should respect state accessor Permalink Failed to load latest commit information. docs Added documentation for using events Dec 4, 2015 examples Merge pull request #51 from yohang/refactor-callback-handler Dec 1, 2015 src/Finite ArrayLoader should respect state machines state accessor Apr 18, 2016 tests ArrayLoader should respect state machines state accessor Apr 18, 2016 .gitignore Inited a Sphinx documentation Dec 2, 2015 .gitmodules Removed old docs submodule Dec 2, 2015 .travis.yml Updated travis to not generate code coverage with HHVM Nov 30, 2015 LICENSE Added README and LICENSE Nov 3, 2012 README.md Updated README Dec 2, 2015 composer.json Switched to caret operator for version constraints in composer.json Dec 1, 2015 phpunit.xml.dist Added test structure Sep 28, 2012 README.md Finite, A Simple PHP Finite State Machine Finite is a Simple State Machine, written in PHP. It can manage any Stateful object by defining states and transitions between these states. Features Managing State/Transition graph for an object Defining and retrieving properties for states Event Listenable transitions Symfony2 integration Custom state graph loaders Twig Extension Documentation Documentation for master (1.1) Getting started Installation (via composer) {       ""require"": {         ""yohang/finite"": ""~1.1""     } } Version note : If your are using this library in a Symfony project, 1.1 version is only compatible with Symfony >=2.6. 1.0 is compatible with Symfony >=2.3, <2.6. Define your Stateful Object Your stateful object just need to implement the StatefulInterface Interface. use Finite\StatefulInterface;  class Document implements StatefulInterface {         private $state;         public function setFiniteState($state)         {                 $this->state = $state;         }          public function getFiniteState()         {             return $this->state;         } } Initializing a simple StateMachine use Finite\StateMachine\StateMachine; use Finite\State\State; use Finite\State\StateInterface;  // $document = retrieve your stateful object  $sm = new StateMachine();  // Define states $sm->addState(new State('s1', StateInterface::TYPE_INITIAL)); $sm->addState('s2'); $sm->addState('s3'); $sm->addState(new State('s4', StateInterface::TYPE_FINAL));  // Define transitions $sm->addTransition('t12', 's1', 's2'); $sm->addTransition('t23', 's2', 's3'); $sm->addTransition('t34', 's3', 's4'); $sm->addTransition('t42', 's4', 's2');  // Initialize $sm->setObject($document); $sm->initialize();  // Retrieve current state $sm->getCurrentState();  // Can we process a transition ? $sm->can('t34');  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/yohang/Finite"	"A simple PHP finite state machine."	"true"
"Architectural"	"Functional PHP"	"https://github.com/lstrojny/functional-php"	"A functional programming library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"712"	"50"	"89"	"GitHub - lstrojny/functional-php: Primitives for functional programming in PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 712 Fork 89 lstrojny/functional-php Code Issues 0 Pull requests 3 Pulse Graphs Primitives for functional programming in PHP 515 commits 5 branches 12 releases 29 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev-php56 develop feature/partial master playground Nothing to show 1.2.3 1.2.1 1.2.0 1.0.0 1.0.0-alpha5 1.0.0-alpha4 1.0.0-alpha3 1.0.0-alpha2 1.0.0-alpha1 0.6.0 0.0.5 0.0.1 Nothing to show New pull request Latest commit b6e0e74 Jul 8, 2016 elazar committed with lstrojny Remove callable typehint from compose() (#98) … This is due to lack of support in HHVM.  See facebook/hhvm#6954 Permalink Failed to load latest commit information. docs Removed character & from anchor links in the documentation. (#94) Jun 1, 2016 src/Functional Remove callable typehint from compose() (#98) Jul 8, 2016 tests/Functional #95: deprecate invocation of (#96) Jul 1, 2016 .gitignore Remove C extension Jun 23, 2015 .scrutinizer.yml Enable rating Jun 18, 2015 .travis.yml Use the proper phpunit version Jun 24, 2016 README.md Unified docs with generated TOC (#92) May 30, 2016 build.xml Preparing for CI Nov 11, 2013 composer.json Update version requirements Jun 24, 2016 phpunit.xml.dist Welcome 2016 Jun 24, 2016 README.md Functional PHP: Functional primitives for PHP NOTE: functional-php used to come with a C extension that implemented most of the functions natively. As the performance differences weren’t that huge compared to the maintenance cost it has been removed. A set of functional primitives for PHP, heavily inspired by Scala’s traversable collection, Dojo’s array functions and Underscore.js Works with arrays and everything implementing interface Traversable Consistent interface: for functions taking collections and callbacks, first parameter is always the collection, than the callback. Callbacks are always passed $value, $index, $collection. Strict comparison is the default but can be changed Calls 5.3 closures as well as usual callbacks All functions reside in namespace Functional to not raise conflicts with any other extension or library Installation Using composer Put the require statement for functional-php in your composer.json file and run php composer.phar install: {     ""require"": {         ""lstrojny/functional-php"": ""~1.2""     } } Manually Checkout functional-php and include the _import.php <?php include 'path/to/functional-php/src/Functional/_import.php'; Docs Read the docs Running the test suite To run the test suite use vendor/bin/phpunit tests/ Mailing lists General help and development list: http://groups.google.com/group/functional-php Commit list: http://groups.google.com/group/functional-php-commits Thank you Richard Quadling and Pierre Joye for Windows build help David Soria Parra for various ideas and the userland version of Functional\flatten() Max Beutel for Functional\unique(), Functional\invoke_first(), Functional\invoke_last() and all the discussions The people behind Travis CI for continuous integration Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lstrojny/functional-php"	"A functional programming library."	"true"
"Architectural"	"Galapagos"	"https://github.com/endel/galapagos"	"Evolutionary language transformation."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"3"	"8"	"GitHub - endel/galapagos: Evolutionary language transformation. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 10 Fork 8 endel/galapagos forked from camspiers/galapagos Code Issues 0 Pull requests 0 Pulse Graphs Evolutionary language transformation. 38 commits 1 branch 0 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Pull request Compare This branch is 15 commits ahead of camspiers:master. Latest commit 2b389ba Mar 7, 2015 endel fix array dereferencing with method calls. closes #1 Permalink Failed to load latest commit information. src fix array dereferencing with method calls. closes #1 Mar 7, 2015 tests fix array dereferencing with method calls. closes #1 Mar 7, 2015 .editorconfig add phpunit to composer file Dec 28, 2014 .gitignore init Jul 20, 2013 LICENSE init Jul 20, 2013 README.md add 'authors' to composer.json. update README. Dec 30, 2014 autoload.php Move generic functions to core.php Jul 24, 2013 composer.json add 'authors' to composer.json. update README. Dec 30, 2014 composer.lock add 'authors' to composer.json. update README. Dec 30, 2014 galapagos.png Add logo Jul 26, 2013 phpunit.xml.dist uppercase class names for consistency Jul 24, 2013 README.md Galapagos Evolutionary language transformation. Fork of igorw's initial work. Read the related blog post. Backport existing PHP features to previous versions through AST compilation. Inspired by lisp macros. Using the incredible nikic/PHP-Parser. Missing features 5.4 Binary number format Closure rebinding Edge cases: Calling private methods from within closure Ensure $that gets passed to nested closures State There needs to be a strategy for managing state. A trait transformer needs to keep track of the traits it found. That is currently missing. Preservation There should be a way to preserve existing code formatting, especially for code that wasn't actually modified. Instead of pretty-printing everything, only changed parts of the AST should be changed in source. Three-way-diff may help with this. Line numbers Is there any way to do something like source maps to refer to the original line numbers, so that code remains at all debuggable? Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/endel/galapagos"	"Evolutionary language transformation."	"true"
"Architectural"	"Iter"	"https://github.com/nikic/iter"	"A library that provides iteration primitives using generators."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"477"	"28"	"26"	"GitHub - nikic/iter: Iteration primitives using generators Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 477 Fork 26 nikic/iter Code Issues 1 Pull requests 4 Pulse Graphs Iteration primitives using generators 41 commits 1 branch 4 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.3.0 v1.2.0 v1.1.0 v1.0.0 Nothing to show New pull request Latest commit 5527ca4 Aug 24, 2015 Alex Davidovich committed with nikic Added $key parameter to reduction callbacks Permalink Failed to load latest commit information. src Added $key parameter to reduction callbacks Aug 25, 2015 test Added $key parameter to reduction callbacks Aug 25, 2015 .travis.yml Add PHP 7 to Travis Feb 26, 2015 LICENSE Add rewindable variants, add into to README Jul 4, 2013 README.md Add isIterable function Jul 3, 2015 composer.json Added PHP5.5+ requirement Dec 30, 2013 phpunit.xml.dist Add bootstrap.php and more tests Nov 28, 2013 README.md Iteration primitives using generators This library implements iteration primitives like map() and filter() using generators. To a large part this serves as a repository for small examples of generator usage, but of course the functions are also practically quite useful. All functions in this library accept arbitrary iterables, i.e. arrays, traversables, iterators and aggregates, which makes it quite different from functions like array_map() (which only accept arrays) and the SPL iterators (which usually only accept iterators, not even aggregates). The operations are of course lazy. Install To install with composer: composer require nikic/iter Functionality A small usage example for the map() and range() functions: <?php  use iter, iter\fn;  require 'path/to/vendor/autoload.php';  $nums = iter\range(1, 10); $numsTimesTen = iter\map(fn\operator('*', 10), $nums); // => iter(10, 20, 30, 40, 50, 60, 70, 80, 90, 100) You can find documentation and usage examples for the individual functions in iter.php, here I only list the function signatures as an overview: Iterator map(callable $function, iterable $iterable) Iterator mapKeys(callable $function, iterable $iterable) Iterator reindex(callable $function, iterable $iterable) Iterator filter(callable $predicate, iterable $iterable) Iterator reductions(callable $function, iterable $iterable, mixed $startValue = null) Iterator zip(iterable... $iterables) Iterator zipKeyValue(iterable $keys, iterable $values) Iterator chain(iterable... $iterables) Iterator product(iterable... $iterables) Iterator slice(iterable $iterable, int $start, int $length = INF) Iterator take(int $num, iterable $iterable) Iterator drop(int $num, iterable $iterable) Iterator takeWhile(callable $predicate, iterable $iterable) Iterator dropWhile(callable $predicate, iterable $iterable) Iterator keys(iterable $iterable) Iterator values(iterable $iterable) Iterator flatten(iterable $iterable) Iterator flip(iterable $iterable) Iterator chunk(iterable $iterable, int $size) Iterator toIter(iterable $iterable)  Iterator range(number $start, number $end, number $step = null) Iterator repeat(mixed $value, int $num = INF)  mixed    reduce(callable $function, iterable $iterable, mixed $startValue = null) bool     any(callable $predicate, iterable $iterable) bool     all(callable $predicate, iterable $iterable) mixed    search(callable $predicate, iterable $iterable) void     apply(callable $function, iterable $iterable) string   join(string $separator, iterable $iterable) int      count(iterable $iterable) array    toArray(iterable $iterable) array    toArrayWithKeys(iterable $iterable) bool     isIterable($value)  As the functionality is implemented using generators the resulting iterators are by default not rewindable. This library implements additional functionality to allow creating rewindable generators. You can find documentation for this in iter.rewindable.php, here is just a small usage example of the two main functions: <?php  use iter, iter\fn;  /* Create a rewindable map function which can be used multiple times */ $rewindableMap = iter\makeRewindable('iter\\map'); $res = $rewindableMap(fn\operator('*', 3), [1, 2, 3]);  /* Do a rewindable call to map, just once */ $res = iter\callRewindable('iter\\map', fn\operator('*', 3), [1, 2, 3]); The above functions are only useful for your own generators though, for the iter generators rewindable variants are directly provided with an iter\rewindable prefix: $res = iter\rewindable\map(fn\operator('*', 3), [1, 2, 3]); // etc  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nikic/iter"	"A library that provides iteration primitives using generators."	"true"
"Architectural"	"Monad PHP"	"https://github.com/ircmaxell/monad-php"	"A simple Monad library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"182"	"15"	"28"	"GitHub - ircmaxell/monad-php: A simple Monad library for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 182 Fork 28 ircmaxell/monad-php Code Issues 1 Pull requests 7 Pulse Graphs A simple Monad library for PHP 13 commits 1 branch 0 releases 2 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit c9a4970 Dec 4, 2013 ircmaxell Update README.md … Fix bug in closure Permalink Failed to load latest commit information. lib/MonadPHP Merge branch 'bugfix-listmonad-traversable' of github.com:jaapverloop… Jul 5, 2013 test/MonadPHP wqAdd in helper callback contant ::unit to the monads Jul 5, 2013 .gitignore Switch unit to being static Jul 5, 2013 README.md Update README.md Dec 4, 2013 composer.json Switch unit to being static Jul 5, 2013 phpunit.xml.dist Switch unit to being static Jul 5, 2013 README.md MonadPHP This is a basic Monad library for PHP. Usage Values are ""wrapped"" in the monad via either the constructor: new MonadPHP\Identity($value) or the unit() method on an existing instance: $monad->unit($value); Functions can be called on the wrapped value using bind(): use MonadPHP\Identity; $monad = new Identity(1); $monad->bind(function($value) { var_dump($value); }); // Prints int(1)  All calls to bind return a new monad instance wrapping the return value of the function.  use MonadPHP\Identity; $monad = new Identity(1); $monad->bind(function($value) {         return 2 * $value;     })->bind(function($value) {          var_dump($value);      }); // Prints int(2)  Additionally, ""extracting"" the raw value is supported as well (since this is PHP and not a pure functional language)... use MonadPHP\Identity; $monad = new Identity(1); var_dump($monad->extract()); // Prints int(1)  Maybe Monad One of the first useful monads, is the Maybe monad. The value here is that it will only call the callback provided to bind() if the value it wraps is not null. use MonadPHP\Maybe; $monad = new Maybe(1); $monad->bind(function($value) { var_dump($value); }); // prints int(1)  $monad = new Maybe(null); $monad->bind(function($value) { var_dump($value); }); // prints nothing (callback never called)...  The included Chain monad does the same thing, but providing a short-cut implementation for objects: use MonadPHP\Chain; $monad = new Chain($someChainableObject); $obj = $monad->call1()->call2()->nonExistantMethod()->call4()->extract(); var_dump($obj); // null  This can prevent errors when used with chaining... List Monad This abstracts away the concept of a list of items (an array): use MonadPHP\ListMonad; $monad = new ListMonad(array(1, 2, 3, 4)); $doubled = $monad->bind(function($value) { return 2 * $value; }); var_dump($doubled->extract()); // Prints array(2, 4, 6, 8)  Note that the passed in function gets called once per value, so it only ever deals with a single element, never the entire array... It also works with any Traversable object (like iterators, etc). Just be aware that returning the new monad that's wrapped will alwyas become an array... Composition These Monads can be composed together to do some really useful things: use MonadPHP\ListMonad; use MonadPHP\Maybe;  $monad = new ListMonad(array(1, 2, 3, null, 4)); $newMonad = $monad->bind(function($value) { return new Maybe($value); }); $doubled = $newMonad->bind(function($value) { return 2 * $value; }); var_dump($doubled->extract()); // Prints array(2, 4, 6, null, 8)  Or, what if you want to deal with multi-dimensional arrays? use MonadPHP\ListMonad; $monad = new ListMonad(array(array(1, 2), array(3, 4), array(5, 6))); $newMonad = $monad->bind(function($value) { return new ListMonad($value); }); $doubled = $newMonad->bind(function($value) { return 2 * $value; }); var_dump($doubled->extract()); // Prints array(array(2, 4), array(6, 8), array(10, 12))  There also exist helper constants on each of the monads to get a callback to the unit method: $newMonad = $monad->bind(Maybe::unit); // Does the same thing as above   Real World Example Imagine that you want to traverse a multi-dimensional array to create a list of values of a particular sub-key. For example: $posts = array(     array(""title"" => ""foo"", ""author"" => array(""name"" => ""Bob"", ""email"" => ""bob@example.com"")),     array(""title"" => ""bar"", ""author"" => array(""name"" => ""Tom"", ""email"" => ""tom@example.com"")),     array(""title"" => ""baz""),     array(""title"" => ""biz"", ""author"" => array(""name"" => ""Mark"", ""email"" => ""mark@example.com"")), );  What if we wanted to extract all author names from this data set. In traditional procedural programming, you'd likely have a number of loops and conditionals. With monads, it becomes quite simple. First, we define a function to return a particular index of an array: function index($key) {     return function($array) use ($key) {         return isset($array[$key]) ? $array[$key] : null;     }; }  Basically, this just creates a callback which will return a particular array key if it exists. With this, we have everything we need to get the list of authors. $postMonad = new MonadPHP\ListMonad($posts); $names = $postMonad     ->bind(MonadPHP\Maybe::unit)     ->bind(index(""author""))     ->bind(index(""name""))     ->extract();  Follow through and see what happens! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ircmaxell/monad-php"	"A simple Monad library."	"true"
"Architectural"	"Patchwork"	"http://antecedent.github.io/patchwork/"	"A library for redefining userland functions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"259"	"13"	"28"	"GitHub - antecedent/patchwork: Method redefinition (monkey-patching) functionality for PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 259 Fork 28 antecedent/patchwork Code Issues 13 Pull requests 2 Pulse Graphs Method redefinition (monkey-patching) functionality for PHP. http://antecedent.github.io/patchwork 216 commits 2 branches 24 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 1.4.3 1.4.2 1.4.1 1.4.0 1.3.5 1.3.4 1.3.2 1.3.1 1.3.0 1.2.9 1.2.8 1.2.7 1.2.6 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.1.3 1.1.2 1.1.1 1.1.0 1.0.0 Nothing to show New pull request Latest commit 6e1a0a0 Jul 2, 2016 antecedent #40 Permalink Failed to load latest commit information. src #40 Jul 2, 2016 tests Trying to locate the HHVM issue (6) Apr 9, 2016 .gitattributes http://www.reddit.com/r/PHP/comments/2jzp6k/i_dont_need_your_tests_in… Dec 8, 2014 .gitignore Updated .gitignore Jan 18, 2016 .travis.yml Initial implementation of wildcards Oct 21, 2015 LICENSE Multiple redefinition behavior change & year tag bump Jan 14, 2016 Patchwork.php Missed method notifications now opt-in + tentative fix for #39 Apr 8, 2016 README.md Updated README.md for version 1.4.3 Apr 9, 2016 composer.json Update Composer description tag Feb 12, 2016 README.md Patchwork 1.4 (.phar) Patchwork implements the redefinition (monkey-patching) of user-defined methods in PHP. Internally, it uses a stream wrapper on file:// to inject a simple interceptor snippet to the beginning of every method. Example: a DIY profiler use function Patchwork\{redefine, relay, getMethod};  $profiling = fopen('profiling.csv', 'w');  redefine('App\*', function(...$args) use ($profiling) {     $begin = microtime(true);     relay(); # calls the original definition     $end = microtime(true);     fputcsv($profiling, [getMethod(), $end - $begin]); }); Notes Method redefinition is the internally preferred metaphor for Patchwork's behavior. restoreAll() and restore($handle) end the lifetime of, respectively, all redefinitions, or only one of them, where $handle = redefine(...). Closure $this is automatically re-bound to the enclosing class of the method being redefined. The behavior of __CLASS__, static::class etc. inside redefinitions disregards the metaphor. getClass(), getCalledClass(), getMethod() and getFunction() from the Patchwork namespace should be used instead. Testing-related uses Patchwork can be used to stub static methods, which, however, is a controversial practice. It should be applied prudently, that is, only after making oneself familiar with its pitfalls and temptations in other programming languages. For instance, in Javascript, Ruby, Python and some others, the native support for monkey-patching has made its testing-related uses more commonplace than in PHP. Tests that use monkey-patching are no longer unit tests, because they become sensitive to details of implementation, not only those of interface: for example, such a test might no longer pass after switching from time() to DateTime. That being said, they still have their place where the only economically viable alternative is having no tests at all. Other use cases The current version of Patchwork is not suggested for AOP and other kinds of production usage. The next one will switch from stream wrappers to stream filters, which will ensure interoperability with opcode caches. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/antecedent/patchwork"	"A library for redefining userland functions."	"true"
"Architectural"	"PHP Option"	"https://github.com/schmittjoh/php-option"	"An option type library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"454"	"20"	"25"	"GitHub - schmittjoh/php-option: Option Type for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 454 Fork 25 schmittjoh/php-option Code Issues 3 Pull requests 6 Pulse Graphs Option Type for PHP 62 commits 1 branch 7 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.5.0 1.4.0 1.3.0 1.2.0 1.1.0 1.0.0 0.9.0 Nothing to show New pull request Latest commit 94e644f Jul 25, 2015 schmittjoh Merge pull request #27 from matteosister/patch-1 … small typo in Option.php doc comment Permalink Failed to load latest commit information. src/PhpOption small typo in Option.php doc comment Jul 25, 2015 tests Option::make renamed to Option::ensure Jun 7, 2015 .gitignore Use local composer, ignore composer.lock Jun 7, 2015 .travis.yml Test PHP 5.5 and HHVM on travis Dec 22, 2013 LICENSE initial commit Nov 5, 2012 README.md Update README.md Apr 3, 2014 composer.json Use local composer, ignore composer.lock Jun 7, 2015 phpunit.xml.dist renames PHPOption to PhpOption Nov 7, 2012 README.md PHP Option Type This adds an Option type for PHP. The Option type is intended for cases where you sometimes might return a value (typically an object), and sometimes you might return no value (typically null) depending on arguments, or other runtime factors. Often times, you forget to handle the case where no value is returned. Not intentionally of course, but maybe you did not account for all possible states of the system; or maybe you indeed covered all cases, then time goes on, code is refactored, some of these your checks might become invalid, or incomplete. Suddenly, without noticing, the no value case is not handled anymore. As a result, you might sometimes get fatal PHP errors telling you that you called a method on a non-object; users might see blank pages, or worse. On one hand, the Option type forces a developer to consciously think about both cases (returning a value, or returning no value). That in itself will already make your code more robust. On the other hand, the Option type also allows the API developer to provide more concise API methods, and empowers the API user in how he consumes these methods. Installation Installation is super-easy via composer composer require phpoption/phpoption  or add it to your composer.json file. Usage Using the Option Type in your API class MyRepository {     public function findSomeEntity($criteria)     {         if (null !== $entity = $this->em->find(...)) {             return new \PhpOption\Some($entity);         }          // We use a singleton, for the None case.         return \PhpOption\None::create();     } } If you are consuming an existing library, you can also use a shorter version which by default treats null as None, and everything else as Some case: class MyRepository {     public function findSomeEntity($criteria)     {         return \PhpOption\Option::fromValue($this->em->find(...));          // or, if you want to change the none value to false for example:         return \PhpOption\Option::fromValue($this->em->find(...), false);     } } Case 1: You always Require an Entity in Calling Code $entity = $repo->findSomeEntity(...)->get(); // returns entity, or throws exception Case 2: Fallback to Default Value If Not Available $entity = $repo->findSomeEntity(...)->getOrElse(new Entity());  // Or, if you want to lazily create the entity. $entity = $repo->findSomeEntity(...)->getOrCall(function() {     return new Entity(); }); More Examples No More Boiler Plate Code // Before if (null === $entity = $this->findSomeEntity()) {     throw new NotFoundException(); } echo $entity->name;  // After echo $this->findSomeEntity()->get()->name; No More Control Flow Exceptions // Before try {     $entity = $this->findSomeEntity(); } catch (NotFoundException $ex) {     $entity = new Entity(); }  // After $entity = $this->findSomeEntity()->getOrElse(new Entity()); More Concise Null Handling // Before $entity = $this->findSomeEntity(); if (null === $entity) {     return new Entity(); }  return $entity;  // After return $this->findSomeEntity()->getOrElse(new Entity()); Trying Multiple Alternative Options If you'd like to try multiple alternatives, the orElse method allows you to do this very elegantly: return $this->findSomeEntity()             ->orElse($this->findSomeOtherEntity())             ->orElse($this->createEntity()); The first option which is non-empty will be returned. This is especially useful with lazy-evaluated options, see below. Lazy-Evaluated Options The above example has the flaw that we would need to evaluate all options when the method is called which creates unnecessary overhead if the first option is already non-empty. Fortunately, we can easily solve this by using the LazyOption class: return $this->findSomeEntity()             ->orElse(new LazyOption(array($this, 'findSomeOtherEntity')))             ->orElse(new LazyOption(array($this, 'createEntity'))); This way, only the options that are necessary will actually be evaluated. Performance Considerations Of course, performance is important. Attached is a performance benchmark which you can run on a machine of your choosing. The overhead incurred by the Option type comes down to the time that it takes to create one object, our wrapper. Also, we need to perform one additional method call to retrieve the value from the wrapper. Overhead: Creation of 1 Object, and 1 Method Call Average Overhead per Invocation (some case/value returned): 0.000000761s (that is 761 nano seconds) Average Overhead per Invocation (none case/null returned): 0.000000368s (that is 368 nano seconds) The benchmark was run under Ubuntu precise with PHP 5.4.6. As you can see the overhead is surprisingly low, almost negligible. So in conclusion, unless you plan to call a method thousands of times during a request, there is no reason to stick to the object|null return value; better give your code some options! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/schmittjoh/php-option"	"An option type library."	"true"
"Architectural"	"Pipeline"	"https://github.com/thephpleague/pipeline"	"A pipeline pattern implementation."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"243"	"21"	"25"	"GitHub - thephpleague/pipeline: League\Pipeline Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 243 Fork 25 thephpleague/pipeline Code Issues 4 Pull requests 0 Pulse Graphs League\Pipeline http://pipeline.thephpleague.com 70 commits 3 branches 4 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/callable-stages gh-pages master Nothing to show 0.2.2 0.2.1 0.2.0 0.1.0 Nothing to show New pull request Latest commit 2a384f0 Jun 14, 2016 frankdejonge Corrected docblock. Permalink Failed to load latest commit information. spec Extracted processor, created and interruptible processor. Jun 3, 2016 src Corrected docblock. Jun 14, 2016 stub Converted stage hinting to callable hinting for flexibility and bette… Sep 2, 2015 .gitattributes Converted stage hinting to callable hinting for flexibility and bette… Sep 1, 2015 .gitignore Newline fixes Jun 25, 2015 .php_cs PSR-2 it up Jun 25, 2015 .scrutinizer.yml Yay for syntax errors in tests Jun 25, 2015 .travis.yml Make use of available tools Jul 21, 2015 CHANGELOG.md Updated changelog Mar 23, 2016 LICENSE Added LICENSE Mar 24, 2016 README.md Fix example typo in README.md May 8, 2016 UPGRADE.md Updated changelog and added upgrade guide Dec 4, 2015 composer.json Converted stage hinting to callable hinting for flexibility and bette… Sep 1, 2015 phpspec.no-coverage.yml Newline fixes Jun 24, 2015 phpspec.yml.dist Added text coverage Nov 22, 2015 README.md League\Pipeline This package provides a pipeline pattern implementation. Pipeline Pattern The pipeline pattern allows you to easily compose sequential stages by chaining stages. In this particular implementation the interface consists of two parts: StageInterface PipelineInterface A pipeline consists of zero, one, or multiple stages. A pipeline can process a payload. During the processing the payload will be passed to the first stage. From that moment on the resulting value is passed on from stage to stage. In the simplest form, the execution chain can be represented as a foreach: $result = $payload;  foreach ($stages as $stage) {     $result = $stage($result); }  return $result; Effectively this is the same as: $result = $stage3($stage2($stage1($payload))); Immutability Pipelines are implemented as immutable stage chains. When you pipe a new stage, a new pipeline will be created with the added stage. This makes pipelines easy to reuse, and minimizes side-effects. Usage Operations in a pipeline, stages, can be anything that satisfies the callable type-hint. So closures and anything that's invokable is good. $pipeline = (new Pipeline)->pipe(function ($payload) {     return $payload * 10; }); Class based stages. Class based stages are also possible. The StageInterface can be implemented which ensures you have the correct method signature for the __invoke method. use League\Pipeline\Pipeline; use League\Pipeline\StageInterface;  class TimesTwoStage implements StageInterface {     public function __invoke($payload)     {         return $payload * 2;     } }  class AddOneStage implements StageInterface {     public function __invoke($payload)     {         return $payload + 1;     } }  $pipeline = (new Pipeline)     ->pipe(new TimesTwoStage)     ->pipe(new AddOneStage);  // Returns 21 $pipeline->process(10); Re-usable Pipelines Because the PipelineInterface is an extension of the StageInterface pipelines can be re-used as stages. This creates a highly composable model to create complex execution patterns while keeping the cognitive load low. For example, if we'd want to compose a pipeline to process API calls, we'd create something along these lines: $processApiRequest = (new Pipeline)     ->pipe(new ExecuteHttpRequest) // 2     ->pipe(new ParseJsonResponse); // 3  $pipeline = (new Pipeline)     ->pipe(new ConvertToPsr7Request) // 1     ->pipe($processApiRequest) // (2,3)     ->pipe(new ConvertToResponseDto); // 4   $pipeline->process(new DeleteBlogPost($postId)); Pipeline Builders Because pipelines themselves are immutable, pipeline builders are introduced to facilitate distributed composition of a pipeline. The pipeline builders collect stages and allow you to create a pipeline at any given time. use League\Pipeline\PipelineBuilder;  // Prepare the builder $pipelineBuilder = (new PipelineBuilder)     ->add(new LogicalStage)     ->add(new AnotherStage)     ->add(new LastStage);  // Build the pipeline $pipeline = $pipelineBuilder->build(); Exception handling This package is completely transparent when dealing with exceptions. In no case will this package catch an exception or silence an error. Exceptions should be dealt with on a per-case basis. Either inside a stage or at the time the pipeline processes a payload. $pipeline = (new Pipeline)->pipe(function () {     throw new LogicException(); });  try {     $pipeline->process($payload); } catch(LogicException $e) {     // Handle the exception. } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/pipeline"	"A pipeline pattern implementation."	"true"
"Architectural"	"Ruler"	"https://github.com/bobthecow/Ruler"	"A simple stateless production rules engine."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"669"	"54"	"88"	"GitHub - bobthecow/Ruler: A simple stateless production rules engine for PHP 5.3+ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 54 Star 669 Fork 88 bobthecow/Ruler Code Issues 7 Pull requests 4 Pulse Graphs A simple stateless production rules engine for PHP 5.3+ 92 commits 3 branches 3 releases 8 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master tmp/hhvm-4463-test Nothing to show v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 7076f4b Sep 2, 2014 bobthecow Merge branch 'release/0.3.0' Permalink Failed to load latest commit information. src/Ruler Registering non-string namespace should throw InvalidArgumentException. Apr 12, 2014 tests/Ruler/Test Registering non-string namespace should throw InvalidArgumentException. Apr 13, 2014 .gitignore 5.3 revert and .gitignore fix Nov 9, 2013 .travis.yml allow hhvm to fail Apr 8, 2014 CONTRIBUTING.md markdown -> md Aug 5, 2013 LICENSE Reformat LICENSE file. Apr 15, 2013 README.md Add the new operators to the README. Sep 2, 2014 composer.json Remove dependency on Pimple. Mar 24, 2014 phpunit.xml.dist Altering vendor path so travis will pass. Aug 28, 2013 README.md Ruler Ruler is a simple stateless production rules engine for PHP 5.3+. Ruler has an easy, straightforward DSL ... provided by the RuleBuilder: $rb = new RuleBuilder; $rule = $rb->create(     $rb->logicalAnd(         $rb['minNumPeople']->lessThanOrEqualTo($rb['actualNumPeople']),         $rb['maxNumPeople']->greaterThanOrEqualTo($rb['actualNumPeople'])     ),     function() {         echo 'YAY!';     } );  $context = new Context(array(     'minNumPeople' => 5,     'maxNumPeople' => 25,     'actualNumPeople' => function() {         return 6;     }, ));  $rule->execute($context); // ""Yay!"" Of course, if you're not into the whole brevity thing ... you can use it without a RuleBuilder: $actualNumPeople = new Variable('actualNumPeople'); $rule = new Rule(     new Operator\LogicalAnd(array(         new Operator\LessThanOrEqualTo(new Variable('minNumPeople'), $actualNumPeople),         new Operator\GreaterThanOrEqualTo(new Variable('maxNumPeople'), $actualNumPeople)     )),     function() {         echo 'YAY!';     } );  $context = new Context(array(     'minNumPeople' => 5,     'maxNumPeople' => 25,     'actualNumPeople' => function() {         return 6;     }, ));  $rule->execute($context); // ""Yay!"" But that doesn't sound too fun, does it? Things you can do with your Ruler Compare things // These are Variables. They'll be replaced by terminal values during Rule evaluation.  $a = $rb['a']; $b = $rb['b'];  // Here are bunch of Propositions. They're not too useful by themselves, but they // are the building blocks of Rules, so you'll need 'em in a bit.  $a->greaterThan($b);                      // true if $a > $b $a->greaterThanOrEqualTo($b);             // true if $a >= $b $a->lessThan($b);                         // true if $a < $b $a->lessThanOrEqualTo($b);                // true if $a <= $b $a->equalTo($b);                          // true if $a == $b $a->notEqualTo($b);                       // true if $a != $b $a->stringContains($b);                   // true if strpos($b, $a) !== false $a->stringDoesNotContain($b);             // true if strpos($b, $a) === false $a->stringContainsInsensitive($b);        // true if stripos($b, $a) !== false $a->stringDoesNotContainInsensitive($b);  // true if stripos($b, $a) === false $a->startsWith($b);                       // true if strpos($b, $a) === 0 $a->startsWithInsensitive($b);            // true if stripos($b, $a) === 0 $a->endsWith($b);                         // true if strpos($b, $a) === len($a) - len($b) $a->endsWithInsensitive($b);              // true if stripos($b, $a) === len($a) - len($b) $a->sameAs($b);                           // true if $a === $b $a->notSameAs($b);                        // true if $a !== $b Math even more things $c = $rb['c']; $d = $rb['d'];  // Mathematical operators are a bit different. They're not Propositions, so // they don't belong in rules all by themselves, but they can be combined // with Propositions for great justice.  $rb['price']   ->add($rb['shipping'])   ->greaterThanOrEqualTo(50)  // Of course, there are more.  $c->add($d);          // $c + $d $c->subtract($d);     // $c - $d $c->multiply($d);     // $c * $d $c->divide($d);       // $c / $d $c->modulo($d);       // $c % $d $c->exponentiate($d); // $c ** $d $c->negate();         // -$c $c->ceil();           // ceil($c) $c->floor();          // floor($c) Reason about sets $e = $rb['e']; // These should both be arrays $f = $rb['f'];  // Manipulate sets with set operators  $e->union($f); $e->intersect($f); $e->complement($f); $e->symmetricDifference($f); $e->min(); $e->max();  // And use set Propositions to include them in Rules.  $e->containsSubset($f); $e->doesNotContainSubset($f); $e->setContains($a); $e->setDoesNotContain($a); Combine Rules // Create a Rule with an $a == $b condition $aEqualsB = $rb->create($a->equalTo($b));  // Create another Rule with an $a != $b condition $aDoesNotEqualB = $rb->create($a->notEqualTo($b));  // Now combine them for a tautology! // (Because Rules are also Propositions, they can be combined to make MEGARULES) $eitherOne = $rb->create($rb->logicalOr($aEqualsB, $aDoesNotEqualB));  // Just to mix things up, we'll populate our evaluation context with completely // random values... $context = new Context(array(     'a' => rand(),     'b' => rand(), ));  // Hint: this is always true! $eitherOne->evaluate($context); Combine more Rules $rb->logicalNot($aEqualsB);                  // The same as $aDoesNotEqualB :) $rb->logicalAnd($aEqualsB, $aDoesNotEqualB); // True if both conditions are true $rb->logicalOr($aEqualsB, $aDoesNotEqualB);  // True if either condition is true $rb->logicalXor($aEqualsB, $aDoesNotEqualB); // True if only one condition is true evaluate and execute Rules evaluate() a Rule with Context to figure out whether it is true. $context = new Context(array(     'userName' => function() {         return isset($_SESSION['userName']) ? $_SESSION['userName'] : null;     } ));  $userIsLoggedIn = $rb->create($rb['userName']->notEqualTo(null));  if ($userIsLoggedIn->evaluate($context)) {     // Do something special for logged in users! } If a Rule has an action, you can execute() it directly and save yourself a couple of lines of code. $hiJustin = $rb->create(     $rb['userName']->equalTo('bobthecow'),     function() {         echo ""Hi, Justin!"";     } );  $hiJustin->execute($context);  // ""Hi, Justin!"" Even execute a whole grip of Rules at once $hiJon = $rb->create(     $rb['userName']->equalTo('jwage'),     function() {         echo ""Hey there Jon!"";     } );  $hiEveryoneElse = $rb->create(     $rb->logicalAnd(         $rb->logicalNot($rb->logicalOr($hiJustin, $hiJon)), // The user is neither Justin nor Jon         $userIsLoggedIn                                     // ... but a user nonetheless     ),     function() use ($context) {         echo sprintf(""Hello, %s"", $context['userName']);     } );  $rules = new RuleSet(array($hiJustin, $hiJon, $hiEveryoneElse));  // Let's add one more Rule, so non-authenticated users have a chance to log in $redirectForAuthentication = $rb->create($rb->logicalNot($userIsLoggedIn), function() {     header('Location: /login');     exit; });  $rules->addRule($redirectForAuthentication);  // Now execute() all true Rules. // // Astute readers will note that the Rules we defined are mutually exclusive, so // at most one of them will evaluate to true and execute an action... $rules->executeRules($context); Dynamically populate your evaluation Context Several of our examples above use static values for the context Variables. While that's good for examples, it's not as useful in the Real World. You'll probably want to evaluate Rules based on all sorts of things... You can think of the Context as a ViewModel for Rule evaluation. You provide the static values, or even code for lazily evaluating the Variables needed by your Rules. $context = new Context;  // Some static values... $context['reallyAnnoyingUsers'] = array('bobthecow', 'jwage');  // You'll remember this one from before $context['userName'] = function() {     return isset($_SESSION['userName']) ? $_SESSION['userName'] : null; };  // Let's pretend you have an EntityManager named `$em`... $context['user'] = function() use ($em, $context) {     if ($userName = $context['userName']) {         return $em->getRepository('Users')->findByUserName($userName);     } };  $context['orderCount'] = function() use ($em, $context) {     if ($user = $context['user']) {         return $em->getRepository('Orders')->findByUser($user)->count();     }      return 0; }; Now you have all the information you need to make Rules based on Order count or the current User, or any number of other crazy things. I dunno, maybe this is for a shipping price calculator? If the current User has placed 5 or more orders, but isn't ""really annoying"", give 'em free shipping. $rb->create(     $rb->logicalAnd(         $rb['orderCount']->greaterThanOrEqualTo(5),         $rb['reallyAnnoyingUsers']->doesNotContain($rb['userName'])     ),     function() use ($shipManager, $context) {         $shipManager->giveFreeShippingTo($context['user']);     } ); Access variable properties As an added bonus, Ruler lets you access properties, methods and offsets on your Context Variable values. This can come in really handy. Say we wanted to log the current user's name if they are an administrator: // Reusing our $context from the last example...  // We'll define a few context variables for determining what roles a user has, // and their full name:  $context['userRoles'] = function() use ($em, $context) {     if ($user = $context['user']) {         return $user->roles();     } else {         // return a default ""anonymous"" role if there is no current user         return array('anonymous');     } };  $context['userFullName'] = function() use ($em, $context) {     if ($user = $context['user']) {         return $user->fullName;     } };   // Now we'll create a rule to write the log message  $rb->create(     $rb->logicalAnd(         $userIsLoggedIn,         $rb['userRoles']->contains('admin')     ),     function() use ($context, $logger) {         $logger->info(sprintf(""Admin user %s did a thing!"", $context['userFullName']));     } ); That was a bit of a mouthful. Instead of creating context Variables for everything we might need to access in a rule, we can use VariableProperties, and their convenient RuleBuilder interface: // We can skip over the Context Variable building above. We'll simply set our, // default roles on the VariableProperty itself, then go right to writing rules:  $rb['user']['roles'] = array('anonymous');  $rb->create(     $rb->logicalAnd(         $userIsLoggedIn,         $rb['user']['roles']->contains('admin')     ),     function() use ($context, $logger) {         $logger->info(sprintf(""Admin user %s did a thing!"", $context['user']['fullName']);     } ); If the parent Variable resolves to an object, and this VariableProperty name is ""bar"", it will do a prioritized lookup for: A method named bar A public property named bar ArrayAccess + offsetExists named bar If the Variable resolves to an array it will return: Array index bar If none of the above are true, it will return the default value for this VariableProperty. Add your own Operators If none of the default Ruler Operators fit your needs, you can write your own! Just define additional operators like this:  namespace My\Ruler\Operators;  use Ruler\Context; use Ruler\Operator\VariableOperator; use Ruler\Proposition; use Ruler\Value;  class ALotGreaterThan extends VariableOperator implements Proposition {     public function evaluate(Context $context)     {         list($left, $right) = $this->getOperands();         $value = $right->prepareValue($context)->getValue() * 10;          return $left->prepareValue($context)->greaterThan(new Value($value));     }      protected function getOperandCardinality()     {         return static::BINARY;     } } Then you can use them with RuleBuilder like this: $rb->registerOperatorNamespace('My\Ruler\Operators'); $rb->create(     $rb['a']->aLotGreaterThan(10); ); But that's not all... Check out the test suite for more examples (and some hot CS 320 combinatorial logic action). Ruler is plumbing. Bring your own porcelain. Ruler doesn't bother itself with where Rules come from. Maybe you have a RuleManager wrapped around an ORM or ODM. Perhaps you write a simple DSL and parse static files. Whatever your flavor, Ruler will handle the logic. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bobthecow/Ruler"	"A simple stateless production rules engine."	"true"
"Architectural"	"RulerZ"	"https://github.com/K-Phoen/rulerz"	"A powerful rule engine and implementation of the Specification pattern."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"333"	"21"	"21"	"GitHub - K-Phoen/rulerz: Powerful implementation of the Specification pattern in PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 333 Fork 21 K-Phoen/rulerz Code Issues 6 Pull requests 1 Pulse Graphs Powerful implementation of the Specification pattern in PHP 378 commits 3 branches 36 releases 15 contributors PHP 93.9% Cucumber 3.0% Pascal 1.9% Other 1.2% PHP Cucumber Pascal Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags doctrine-compile-time-metadata master runtime-operators Nothing to show 0.19.1 0.19.0 0.18.1 0.18.0 0.17.0 0.16.3 0.16.2 0.16.1 0.16.0 0.15.0 0.14.1 0.14.0 0.13.1 0.13.0 0.12.0 0.11.0 0.10.1 0.10.0 0.9.0 0.8.2 0.8.1 0.8.0 0.7.0 0.6.0 0.5.3 0.5.2 0.5.1 0.5.0 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit 988d8e6 May 10, 2016 K-Phoen Only use rusty when PHP 7.0 is installed Permalink Failed to load latest commit information. doc Fix errors spotted by Rusty May 10, 2016 examples Fix elasticsearch and solarium bootstrap files Feb 22, 2016 scripts Release of new version 0.18.0 Jan 19, 2016 src Add a few code samples May 10, 2016 tests The positional parameters-related test should not be Doctrine-specific Apr 19, 2016 .env Start to work on solr support through solarium Dec 2, 2015 .gitattributes Start to work on solr support through solarium Dec 2, 2015 .gitignore Started to rewrite the examples to use the sample database Aug 15, 2015 .rmt.yml Add release config Oct 31, 2015 .travis.yml Only use rusty when PHP 7.0 is installed May 10, 2016 CHANGELOG Release of new version 0.19.1 Mar 18, 2016 CONTRIBUTING.md Update the contributing guide to mention elasticsearch Oct 31, 2015 LICENSE Add LICENSE file Jan 31, 2015 Makefile Only use rusty when PHP 7.0 is installed May 10, 2016 README.md Fix variable typo in readme Nov 25, 2015 Vagrantfile Moved the vagrant bootstrap script Oct 31, 2015 behat.yml Add a quick behat test for doctrine embeddables Jan 19, 2016 cli-config.php Release of new version 0.18.0 Jan 19, 2016 composer.json Only use rusty when PHP 7.0 is installed May 10, 2016 phpspec.yml Moved all the tests-related files in a tests directory Oct 31, 2015 README.md RulerZ The central idea of Specification is to separate the statement of how to match a candidate, from the candidate object that it is matched against. Specifications, explained by Eric Evans and Martin Fowler RulerZ is a PHP implementation of the Specification pattern which puts the emphasis on three main aspects: an easy and data-agnostic DSL to define business rules and specifications, the ability to check if a candidate satisfies a specification, the ability to filter or query any datasource to only retrieve candidates matching a specification. Introduction Business rules can be written as text using a dedicated language, very close to SQL, in which case we refer to them as rules or they can be encapsulated in single classes and referred to as specifications. Once a rule (or a specification) is written, it can be used to check if a single candidate satisfies it or directly to query a datasource. The currently supported datasources are: array of arrays, array of objects, Doctrine ORM QueryBuilders, Pomm models, Elasticsearch (using the official client or ruflin/Elastica) Laravel's Eloquent ORM. Killer feature: when working with Doctrine, Pomm, or Elasticsearch, RulerZ is able to convert rules directly in queries and does not need to fetch data beforehand. That's cool, but why do I need that? First of all, you get to express business rules in a dedicated, simple language. Then, these business rules can be encapsulated in specification classes, reused and composed to form more complex rules. Specifications are now reusable and testable. And last but not least, these rules can be used both to check if a candidate satisfies it and to filter any datasource. If you still need to be conviced, you can read the whole reasoning in this article. Quick usage As a quick overview, we propose to see a little example that manipulates a simple rule and several datasources. 1. Write a rule The rule hereafter describes a ""high ranked female player"" (basically, a female player having more than 9000 points). $highRankFemalesRule = 'gender = ""F"" and points > 9000'; 2. Define a datasource We have the following datasources: // a Doctrine QueryBuilder $playersQb = $entityManager     ->createQueryBuilder()     ->select('p')     ->from('Entity\Player', 'p');  // or an array of arrays $playersArr = [     ['pseudo' => 'Joe',   'gender' => 'M', 'points' => 2500],     ['pseudo' => 'Moe',   'gender' => 'M', 'points' => 1230],     ['pseudo' => 'Alice', 'gender' => 'F', 'points' => 9001], ];  // or an array of objects $playersObj = [     new Player('Joe',   'M', 40, 2500),     new Player('Moe',   'M', 55, 1230),     new Player('Alice', 'F', 27, 9001), ]; 3. Use a rule to query a datasource For any of our datasource, retrieving the results is as simple as calling the filter method: // converts the rule in DQL and makes a single query to the DB $highRankFemales = $rulerz->filter($playersQb, $highRankFemalesRule); // filters the array of arrays $highRankFemales = $rulerz->filter($playersArr, $highRankFemalesRule); // filters the array of objects $highRankFemales = $rulerz->filter($playersObj, $highRankFemalesRule); 3. (bis) Check if a candidate satisfies a rule Given a candidate, checking if it satisfies a rule boils down to calling the satisfies method: $isHighRankFemale = $rulerz->satisfies($playersObj[0], $highRankFemalesRule); Going further Check out the documentation to discover what RulerZ can do for you. License This library is under the MIT license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/K-Phoen/rulerz"	"A powerful rule engine and implementation of the Specification pattern."	"true"
"Debugging and Profiling"	"APM"	"http://pecl.php.net/package/APM"	"Monitoring extension collecting errors and statistics into SQLite/MySQL/StatsD."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"127"	"16"	"24"	"GitHub - patrickallaert/php-apm: PHP APM (Alternative PHP Monitor) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 127 Fork 24 patrickallaert/php-apm Code Issues 5 Pull requests 5 Pulse Graphs PHP APM (Alternative PHP Monitor) http://pecl.php.net/package/APM 376 commits 3 branches 9 releases 5 contributors C 92.4% M4 6.6% Other 1.0% C M4 Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Issue25 apm-PHP7-RFC-IECM master Nothing to show 2.1.1 2.1.0 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 1.1.0rc2 Nothing to show New pull request Latest commit 846ff27 Mar 29, 2016 patrickallaert Changed: bumping version 2.1.1 Permalink Failed to load latest commit information. .travis.scripts Added: Support for Travis CI Apr 19, 2015 tests Fixed: parse error test failing on PHP 5.4 Jan 25, 2014 .gitignore Changed: ignore .lo files Apr 21, 2015 .travis.yml Changed: travis email notification Apr 21, 2015 AUTHORS Added: authors file Nov 28, 2008 CONTRIBUTORS Fixed: possible segfault with PHP 5.5 Feb 22, 2014 LICENSE license change to PHP licence Nov 16, 2009 NEWS Changed: bumping version 2.1.1 Mar 29, 2016 README.md Added: collecting HTTP method Aug 7, 2015 apm.c fix php5/ZTS build Mar 29, 2016 apm.ini Fixed: missing apm.statsd_exception_mode and apm.socket_exception_mode Jun 2, 2015 backtrace.c Changed: refactoring some includes Mar 29, 2016 backtrace.h Added: preliminary support for PHP 7 Jul 31, 2015 config.m4 Allow to define sqlite3 default DB path at build time Mar 16, 2015 config.w32 Fixed: sqlite3.h file not found in Windows build Jun 2, 2015 driver_mysql.c fix php5/ZTS build Mar 29, 2016 driver_mysql.h Fixed: #13 ZTS build is broken (take 2) Feb 26, 2015 driver_socket.c fix php5/ZTS build Mar 29, 2016 driver_socket.h Fixed: #13 ZTS build is broken (take 2) Feb 26, 2015 driver_sqlite3.c fix php5/ZTS build Mar 29, 2016 driver_sqlite3.h Fixed: #13 ZTS build is broken (take 2) Feb 26, 2015 driver_statsd.c Added: preliminary support for PHP 7 Jul 31, 2015 driver_statsd.h Fixed: #13 ZTS build is broken (take 2) Feb 26, 2015 package.xml Changed: bumping version 2.1.1 Mar 29, 2016 php_apm.h Changed: bumping version 2.1.1 Mar 29, 2016 README.md APM (Alternative PHP Monitor) APM (Alternative PHP Monitor) is a monitoring extension enabling native Application Performance Management (APM) for PHP. It doesn't require any modification to your application's code and let's you collect performance metrics as well as catching issues that may arise. Installing From PECL: $ sudo pecl install apm From source: $ git clone https://github.com/patrickallaert/php-apm.git $ cd php-apm $ phpize Configure the extension, by default, sqlite3, MariaDB/MySQL, StatsD and Socket support are enabled: $ ./configure [--with-sqlite3[=DIR]] [--with-mysql[=DIR]] [--enable-statsd] [--enable-socket] [--with-debugfile[=FILE]]  To disable the support of a --with-* switch, use: --without-*, example: $ ./configure --without-sqlite3 To disable the support of a --enable-* switch, use: --disable-*, example: $ ./configure --disable-socket Compile it: $ make [-j]  Tip: use -j to activate parallel compilation. Install it: $ sudo make install  Upgrading From 2.0 to 2.1 MariaDB / MySQL    ALTER TABLE request ADD COLUMN method TEXT NOT NULL; SQLite    ALTER TABLE request ADD COLUMN method TEXT NOT NULL DEFAULT ''; Configuration Common Activate the extension in the php configuration by adding: extension=apm.so Note: APM depends on JSON, so the apm.so extension must be loaded after JSON! MariaDB/MySQL driver The MariaDB/MySQL driver lets you store errors and stats in a local, remote or shared database. Create a user/database for storing APM events. Set the following settings in the php configuration: apm.mysql_enabled=1 ; Error reporting level specific to the MariaDB/MySQL driver, same level as for PHP's *error_reporting* apm.mysql_error_reporting=E_ALL|E_STRICT apm.mysql_host=<host> ;apm.mysql_port=<port> apm.mysql_user=<user> apm.mysql_pass=<password> apm.mysql_db=<dbname> SQLite driver The SQLite driver lets you store errors and stats in a local SQLite database. Note that if performance matters, you should better use the MariaDB/MySQL driver. Create the directory for the SQLite database as it will be referenced in the setting: apm.sqlite_db_path (see next step): $ mkdir -p /var/php/apm/db/ $ chmod a+rwx /var/php/apm/db/  Set the following settings in the php configuration: apm.sqlite_enabled=1 ; The directory containing the ""events"" file apm.sqlite_db_path=""/path/to/directory/configured/in/previous/step."" ; Error reporting level specific to the SQLite3 driver, same level as for PHP's *error_reporting* apm.sqlite_error_reporting=E_ALL|E_STRICT StatsD driver The StatsD driver is handy to send performance metrics of your web sites/applications directly to StatsD, without interfering with your code. The most common backend for StatsD is Graphite, see [Etsy's blog post on StatsD/Graphite], but other backends exist as well. Install StatsD. Configure it in the php configuration: ; Whether to enable the statsd driver apm.statsd_enabled=On ; Host of the statsd server apm.statsd_host=localhost ; Port of the statsd server apm.statsd_port=3306 Socket driver The socket driver lets you send errors and stats directly by Unix and/or TCP sockets. This is handy if you want to write you own piece of code to handle those. Configure it in the php configuration: ; Whether to enable the socket driver apm.socket_enabled=On ; Socket path (accept multiple entries, separated by ""|"", prefixed with ""file:"" or ""tcp:"") ; Example: apm.socket_path=file:/var/tmp/apm.sock|tcp:localhost:1234 apm.socket_path=file:/tmp/apm.sock Web frontend The web frontend to visualize the data is now available at: https://github.com/patrickallaert/php-apm-web Advanced configuration ; Application identifier, helps identifying which application is being monitored apm.application_id=""My application"" ; Enable the capture of events such as errors, notices, warnings,... apm.event_enabled=On|Off ; Maximum duration in ms a request can take before it gets recorded apm.stats_duration_threshold=""100"" ; Maximum User CPU time in ms a request can take before it gets recorded apm.stats_user_cpu_threshold=""100"" ; Maximum System CPU time in ms a request can take before it gets recorded apm.stats_sys_cpu_threshold=""10"" ; Boolean controlling whether the stacktrace should be stored or not apm.store_stacktrace=On|Off ; Boolean controlling whether the ip should be stored or not apm.store_ip=On|Off ; Boolean controlling whether the cookies should be stored or not apm.store_cookies=On|Off ; Boolean controlling whether the POST variables should be stored or not apm.store_post=On|Off ; Maximum recursion depth used when dumping a variable ; NOTE: With today's application complexity, the amount of data collected in stacktraces ; including arguments can lead to several thousands of MiB of memory consumed. ; We recommend increasing this value with care. apm.dump_max_depth=1  ; For the configuration below, <driver_name> can be any of: sqlite, mysql, statsd or socket  ; Activate or deactivate a specific driver (note also that it must be compiled in to be activated). apm.<driver_name>_enabled=On|Off ; Whether to collect stats for this driver (ATTENTION: Has a small performance overhead when used with a DB drivers!) apm.<driver_name>_stats_enabled=On|Off ; Error reporting level specific to this driver apm.<driver_name>_error_reporting=E_ALL|E_STRICT ; Control which exceptions to collect (0: none exceptions collected, 1: collect uncaught exceptions (default), 2: collect ALL exceptions) apm.<driver_name>_exception_mode=1 ; Stores silenced events (Errors, warnings, notices,... that are muted with the PHP '@' operator) apm.<driver_name>_process_silenced_events=On|Off For a list of all PHP ini directives, take a look at the apm.ini file. Common issues SQLite database isn't created: this usually happens when your webserver or PHP process (fcgi, fpm) has no filesystem access: Check your configuration: maybe SQLite isn't configured properly for APM Check permissions on the directory and events file for the user that PHP runs as (sometimes it's your webserver user) Check open_basedir restrictions Not all data on the specific PHP scripts in which errors occur is collected: Usually an access issue, check permissions Sometimes this is due to open_basedir restrictions APM is configured correctly, but nothing shows up, and phpinfo() doesn't show anyting related to APM: APM wasn't actually loaded, check if the ini file you configured is actually used by PHP the APM module was tried, but fatal errors prevented it from loading; check the PHP error log, usually a dependency like JSON wasn't loaded yet Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/patrickallaert/php-apm"	"Monitoring extension collecting errors and statistics into SQLite/MySQL/StatsD."	"true"
"Debugging and Profiling"	"Barbushin PHP Console"	"https://github.com/barbushin/php-console"	"Another web debugging console using Google Chrome."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"827"	"80"	"166"	"GitHub - barbushin/php-console: Handle PHP errors, dump variables, execute PHP code remotely in Google Chrome Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 80 Star 827 Fork 166 barbushin/php-console Code Issues 34 Pull requests 1 Wiki Pulse Graphs Handle PHP errors, dump variables, execute PHP code remotely in Google Chrome https://chrome.google.com/webstore/detail/php-console/nfhmhhlpfleoednkpnnnkolmclajemef 108 commits 4 branches 8 releases 8 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.1 3.0 3.1 master Nothing to show 3.1.6 3.1.5 3.1.4 3.1.3 3.1.2 3.1.1 3.1 3.0 Nothing to show New pull request Latest commit 4ac8bfd Jun 29, 2016 barbushin committed on GitHub Merge pull request #125 from snowair/master … Fix header has sent error Permalink Failed to load latest commit information. examples Fixed: jQuery is loaded check in example Feb 3, 2014 src/PhpConsole bugfix: header has sent error May 15, 2016 tests Added trace calls ignore by array of class name prefix Mar 20, 2015 LICENSE PhpConsole release candidate version Oct 28, 2013 README.md Remove PHAR reference in README.md & fix phpdoc Feb 19, 2016 composer.json Update composer.json Jul 5, 2015 README.md PHP Console server library PHP Console allows you to handle PHP errors & exceptions, dump variables, execute PHP code remotely and many other things using Google Chrome extension PHP Console and PhpConsole server library. Overview See presentation video. Install Google Chrome extension PHP Console. See how it works on live demo page. PHP Console extension features list and screenshots. PHP Console server library features list. Requirements PHP Console extension must be installed on Google Chrome. PHP 5.3 (or later) on server. For projects with PHP < 5.3 you can try to use old deprecated version of PHP Console. But mention that actual last version is much more functional. Installation Composer {     ""require"": {         ""php-console/php-console"": ""~3.0""     } }  Or $ composer require php-console/php-console ~3.0  Monolog handler https://github.com/Seldaek/monolog/blob/master/src/Monolog/Handler/PHPConsoleHandler.php Symfony framework bundle https://github.com/Vitre/php-console-bundle Yii framework extension http://www.yiiframework.com/extension/php-console Slim framework https://github.com/amenadiel/SlimPHPConsole (thanks to @amenadiel) Silex framework service provider https://github.com/barbushin/php-console-silex (thanks to @Chi-teck) Laravel 4.* & 5.* framework service provider https://github.com/barbushin/php-console-laravel Drupal CMS module https://drupal.org/project/pc (thanks to @Chi-teck) WordPress plugin https://github.com/unfulvio/wp-php-console (thanks to @nekojira) Usage You can try most of PHP Console features on live demo server. Connector There is a PhpConsole\Connector class that initializes connection between PHP server and Google Chrome extension. Connection is initalized when PhpConsole\Connector instance is initialized: $connector = PhpConsole\Connector::getInstance();  Also it will be initialized when you call PhpConsole\Handler::getInstance() or PhpConsole\Helper::register(). Communication protocol PHP Console uses headers to communicate with client, so PhpConsole\Connector::getInstance() or PhpConsole\Handler::getInstance() must be called before any output. If headers are sent before script shut down or PHP Console response package size is out of web-server headers size limit, then PHP Console will store response data in PhpConsole\Storage implementation and send it to client in STDOUT, in additional HTTP request. So there is no limit in PHP Console response package size. Troubleshooting with $_SESSION handler overridden in some frameworks By default PHP Console uses PhpConsole\Storage\Session for postponed responses, so all temporary data will be stored in $_SESSION. But there is some problem with frameworks like Symfony and Laravel that overrides PHP session handler. In this case you should use any other PhpConsole\Storage implementation like: // Can be called only before PhpConsole\Connector::getInstance() and PhpConsole\Handler::getInstance() PhpConsole\Connector::setPostponeStorage(new PhpConsole\Storage\File('/tmp/pc.data'));  See all available PhpConsole\Storage implementations in /src/PhpConsole/Storage. Strip sources base path If you want to see errors sources and traces paths more short, call: $connector->setSourcesBasePath('/path/to/project');  So paths like /path/to/project/module/file.php will be displayed on client as /module/file.php. Works with different server encodings If your internal server encoding is not UTF-8, so you need to call: $connector->setServerEncoding('CP1251');  Initialization performance PhpConsole server library is optimized for lazy initialization only for clients that have Google Chrome extension PHP Console installed. There is example of correct initialization PhpConsole on your production server. Protect connection Protect by password $connector->setPassword('yohoho123', true);  Clients will need to enter a password to get access to PHP Console server data. All passwords are stored on client as SHA-256 hashes. Second argument says that the PHP Console authorization token will depend on the client IP. SSL only connection mode $connector->enableSslOnlyMode();  So all PHP Console clients will be automatically redirected to HTTPS. Protect connection by list of allowed IP masks $connector->setAllowedIpMasks(array('192.168.*.*'));  Handle errors There is a PhpConsole\Handler class that initializes PHP errors & exceptions handlers and provides the next features: Handle PHP errors (+fatal & memory limit errors) and exceptions. Ignore repeated errors. Call previously defined errors and exceptions handlers. Handle caught exceptions using $handler->handleException($exception). Debug vars using $handler->debug($var, 'some.tags'). Initialize PhpConsole\Handler in the top of your main project script: $handler = PhpConsole\Handler::getInstance(); /* You can override default Handler behavior:     $handler->setHandleErrors(false);  // disable errors handling     $handler->setHandleExceptions(false); // disable exceptions handling     $handler->setCallOldHandlers(false); // disable passing errors & exceptions to prviously defined handlers */ $handler->start(); // initialize handlers  Debug vars PHP Console has multifunctional and smart vars dumper that allows to Dump any type variable. Dump protected and private objects properties. Limit dump by level, items count, item size and total size(see $connector->getDumper()). Dump objects class name. Smart dump of callbacks and Closure. Detect dump call source & trace(call $connector->getDebugDispatcher()->detectTraceAndSource = true). How to call Longest native debug method call: PhpConsole\Connector::getInstance()->getDebugDispatcher()->dispatchDebug($var, 'some.tags');  Shorter call debug from Handler: PhpConsole\Handler::getInstance()->debug($var, 'some.tags');  Shortest call debug using global PC class PhpConsole\Helper::register(); // it will register global PC class // ... PC::debug($var, 'tag'); PC::tag($var);  Custom call debug by user defined function function d($var, $tags = null) {     PhpConsole\Connector::getInstance()->getDebugDispatcher()->dispatchDebug($var, $tags, 1); } d($var, 'some.tags');  Tags Debug tags argument is optional. Tags is a string with tags separated by dot(e.g. ""low.db""). Tags can be used to identify what exactly var was dumped. You can configure client to ignore displaying some tags. Remote PHP code execution PHP Console provide a way to execute PHP code on your server remotely, from Google Chrome extension terminal. Remote PHP code execution allowed only in password protected mode Every eval request is signed with unique SHA-256 token Result contains: output, return and time data Errors & exception occurred during PHP code execution will be handled Configuration $connector = PhpConsole\Connector::getInstance(); $connector->setPassword($password);  // Configure eval provider $evalProvider = $connector->getEvalDispatcher()->getEvalProvider(); $evalProvider->addSharedVar('post', $_POST); // so ""return $post"" code will return $_POST $evalProvider->setOpenBaseDirs(array(__DIR__)); // see http://php.net/open-basedir  $connector->startEvalRequestsListener(); // must be called in the end of all configurations  PSR-3 logger implementation There is PHP Console implementation of PSR-3 interface. to integrate PHP Console with PSR-3 compitable loggers(e.g. Monolog). See PhpConsole\PsrLogger. Jump to file Read this article if you want to configure PHP Console extension to open errors/exceptions source file:line right in your IDE, just by click on the button in Notification popup. Easy migrate from PhpConsole v1.x to v3.x If you have used PhpConsole v1.x and want to migrate to v3.x without any code changes, so just use PhpConsole\OldVersionAdapter: PhpConsole\OldVersionAdapter::register(); // register PhpConsole v1.x class emulator  // Call old PhpConsole v1 methods as is PhpConsole::start(true, true, $_SERVER['DOCUMENT_ROOT']); PhpConsole::debug('Debug using old method PhpConsole::debug()', 'some,tags'); debug('Debug using old function debug()', 'some,tags'); echo $undefinedVar; PhpConsole::getInstance()->handleException(new Exception('test'));  // Call new PhpConsole methods, if you want :) PhpConsole\Connector::getInstance()->setServerEncoding('cp1251'); PhpConsole\Helper::register(); PC::debug('Debug using new methods');  But, anyway, if you can't migrate to new version of PHP Console because of using PHP < 5.3 on your servers, then you can use old deprecated version of PHP Console. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/barbushin/php-console"	"Another web debugging console using Google Chrome."	"true"
"Debugging and Profiling"	"Blackfire.io"	"https://blackfire.io/"	"A low-overhead code profiler."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Blackfire.io: Continuous PHP Performance Testing Toggle navigation Features Docs Integrations Customers Pricing Services Blog Log In Sign Up Performance   View demo Fire up your PHP App Performance Blackfire empowers all developers and IT/Ops to continuously verify and improve their app’s performance, throughout its lifecycle, by getting the right information at the right moment. 40% of users abandon a website that takes more than 3 seconds to load. Performance Testing Blackfire.io helps you make sure you never let your app’s load times frustrate a user. You are able to thoroughly test your code according to your business logic. Learn more Improve your app performance at each step of its lifecycle. Performance Management Automation Automate testing and improve your app’s performance continuously, in all environments. Integrate performance management seemlessly in your existing workflows and tools. Learn more Your code is the first thing you should be looking at. Performance Profiling Gather detailed performance metrics from your code’s execution, and visualize it in Blackfire.io interactive call graphs. Find bottlenecks in the blink of an eye and check the impact of your changes by comparing iterations in development, staging and production servers. Learn more Learn best practices from experts. Performance Recommendations Blackfire Recommendations provide best practices teams can learn from our PHP performance experts. Integrated in any profiling or performance testing session, recommendations are prompted according to your framework and the environment you are profiling (development, test/staging, production). Fully documented, they tell your team what to improve at first and teach them how to avoid performance bottlenecks. Learn more There’s a Blackfire Edition for any need Sign up for free or View pricing © 2014-2016 Blackfire is a trademark of SensioLabs. All rights reserved. Terms and Conditions Privacy Policy Features Partners Integrations Customers Pricing Services Magento @blackfireio Feedback Feedback Idea Problem Question Praise Sales Reply to Submit Thanks! We value consumer feedback and read all of your suggestions. Our product development process iterates quickly, so come back soon, and you may very well see your idea implemented in Blackfire! The Blackfire Team Close Thank you for your request! Our Customer Success Team will get back to you shortly. If you haven't created an account on Blackfire yet, please click here. It's free! The Blackfire Team Close Oops! Something went wrong. We didn't receive your feedback, please try again. Validation error! Please fill your feedback correctly. Sending feedback... Please wait."	"null"	"null"	"A low-overhead code profiler."	"true"
"Debugging and Profiling"	"Kint"	"https://github.com/raveren/kint"	"A debugging and profiling tool."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1554"	"109"	"185"	"GitHub - raveren/kint: Kint - a powerful and modern PHP debugging tool. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 109 Star 1,554 Fork 185 raveren/kint Code Issues 27 Pull requests 9 Wiki Pulse Graphs Kint - a powerful and modern PHP debugging tool. http://raveren.github.io/kint/ 246 commits 3 branches 7 releases 20 contributors PHP 72.9% CSS 17.3% JavaScript 9.8% PHP CSS JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags deprecated-v0.9 gh-pages master Nothing to show v0.9.1 v0.9 1.0.10 1.0.6 1.0.3 1.0.2 1.0.0 Nothing to show New pull request Latest commit 1368541 Jun 17, 2016 raveren committed on GitHub Update readme Permalink Failed to load latest commit information. decorators minor fixes and removed unused code that used namespaces and thus bro… Sep 17, 2015 examples Fixed bugs; added splfileinfo to display custom info instead of addit… Feb 9, 2015 inc minor fixes and removed unused code that used namespaces and thus bro… Sep 17, 2015 parsers minor fixes and removed unused code that used namespaces and thus bro… Sep 17, 2015 view Make kint minitrace morereadable May 24, 2016 .gitignore restructured parsers to bypass _fits, restructured base parsers, fixe… Jun 10, 2012 CONTRIBUTING.md Add first (incomplete) version of contribution guidelines Jun 17, 2016 Kint.class.php Show caller info on collapsed mini trace in eval Apr 24, 2016 LICENCE Changed licence to MIT Aug 13, 2013 README.md Update readme Jun 17, 2016 composer.json added some description and composer update May 21, 2015 config.default.php return of the Kint::$charEncodings setting which was evidentially sti… Jul 2, 2015 README.md Kint - debugging helper for PHP developers What am I looking at? At first glance Kint is just a pretty replacement for var_dump(), print_r() and debug_backtrace(). However, it's much, much more than that. Even the excellent xdebug var_dump improvements don't come close - you will eventually wonder how you developed without it. Just to list some of the most useful features: The variable name and file + line where Kint was called from is displayed; You can disable all Kint output easily and on the fly - so you can even debug live systems without anyone knowing (even though you know you shouldn't be doing that!:). CLI is detected and formatted for automatically (but everything can be overridden on the fly) - if your setup supports it, the output is colored too: Debug backtraces are finally fully readable, actually informative and a pleasure to the eye. Kint has been in active development since 2010 and is shipped with Drupal 8 by default as part of its devel suite. You can trust it not being abandoned or getting left behind in features. Variable content is displayed in the most informative way - and you never, ever miss anything! Kint guarantees you see every piece of physically available information about everything you are dumping*; in some cases, the content is truncated where it would otherwise be too large to view anyway - but the user is always made aware of that; Some variable content types have an alternative display - for example you will be able see JSON in its raw form - but also as an associative array: There are more than ten custom variable type displays inbuilt and more are added periodically. Installation and Usage One of the main goals of Kint is to be zero setup. Download the archive and simply <?php require '/kint/Kint.class.php'; Or, if you use Composer: ""require"": {    ""raveren/kint"": ""^1.0"" } Or just run composer require raveren/kint That's it, you can now use Kint to debug your code: ########## DUMP VARIABLE ########################### Kint::dump($GLOBALS, $_SERVER); // pass any number of parameters  // or simply use d() as a shorthand: d($_SERVER);   ########## DEBUG BACKTRACE ######################### Kint::trace(); // or via shorthand: d(1);   ############# BASIC OUTPUT ######################### # this will show a basic javascript-free display s($GLOBALS);   ######### WHITESPACE FORMATTED OUTPUT ############## # this will be garbled if viewed in browser as it is whitespace-formatted only ~d($GLOBALS); // just prepend with the tilde   ########## MISCELLANEOUS ########################### # this will disable kint completely Kint::enabled(false);  ddd('Get off my lawn!'); // no effect  Kint::enabled(true); ddd( 'this line will stop the execution flow because Kint was just re-enabled above!' );   Note, that Kint does have configuration (like themes and IDE integration!), but it's in need of being rewritten, so I'm not documenting it yet. Tips & Tricks Kint is enabled by default, call Kint::enabled(false); to turn its funcionality completely off. The best practice is to enable Kint in DEVELOPMENT environment only (or for example Kint::enabled($_SERVER['REMOTE_ADDR'] === '<your IP>');) - so even if you accidentally leave a dump in production, no one will know. sd() and ddd() are shorthands for s();die; and d();die; respectively. Kint has keyboard shortcuts! When Kint is visible, press D on the keyboard and you will be able to traverse the tree with arrows and tab keys - and expand/collapse nodes with space or enter. Double clicking the [+] sign in the output will expand/collapse ALL nodes; triple clicking big blocks of text will select it all. To catch output from Kint just assign it to a variablebeta $o = Kint::dump($GLOBALS); // yes, the assignment is automatically detected, and $o // now holds whatever was going to be printed otherwise.  // it also supports modifiers (read on) for the variable: ~$o = Kint::dump($GLOBALS); // this output will be in whitespace There are a couple of real-time modifiers you can use: ~d($var) this call will output in plain text format. +d($var) will disregard depth level limits and output everything (careful, this can hang your browser on huge objects) !d($var) will show expanded rich output. -d($var) will attempt to ob_clean the previous output so if you're dumping something inside a HTML page, you will still see Kint output. You can combine modifiers too: ~+d($var) To force a specific dump output type just pass it to the Kint::enabled() method. Available options are: Kint::MODE_RICH (default), Kint::MODE_PLAIN, Kint::MODE_WHITESPACE and Kint::MODE_CLI: Kint::enabled(Kint::MODE_WHITESPACE); $kintOutput = Kint::dump($GLOBALS); // now $kintOutput can be written to a text log file and // be perfectly readable from there To change display theme, use Kint::$theme = '<theme name>'; where available options are: 'original' (default), 'solarized', 'solarized-dark' and 'aante-light'. Here's an (outdated) preview: Kint also includes a naïve profiler you may find handy. It's for determining relatively which code blocks take longer than others: Kint::dump( microtime() ); // just pass microtime() sleep( 1 ); Kint::dump( microtime(), 'after sleep(1)' ); sleep( 2 ); ddd( microtime(), 'final call, after sleep(2)' ); See the tiny arrows on the right of the output? Click them (not in the image though :) to open its parent node in a separate browser window. Author Rokas Šleinius (raveren) License Licensed under the MIT License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/raveren/kint"	"A debugging and profiling tool."	"true"
"Debugging and Profiling"	"PHP Console"	"https://github.com/Seldaek/php-console"	"A web debugging console."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"374"	"32"	"70"	"GitHub - Seldaek/php-console: PHP Debug Console Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 374 Fork 70 Seldaek/php-console Code Issues 3 Pull requests 1 Pulse Graphs PHP Debug Console 90 commits 1 branch 10 releases 9 contributors PHP 57.1% CSS 28.0% JavaScript 14.8% Makefile 0.1% PHP CSS JavaScript Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.4.0 1.3.0 1.2.3 1.2.2 1.2.1 1.2.0 1.1.2 1.1.1 1.1.0 1.0.0 Nothing to show New pull request Latest commit 6899b8c Jun 14, 2016 staabm renamed ""melody-timeout"" option to ""melody_timeout"" … for consistency with ""ip_whitelist"" Permalink Failed to load latest commit information. ace Updated ace editor to v1.1.8 Jan 5, 2015 clippy Update jQuery & move deps in their own folders Dec 16, 2011 krumo I think your meant to use is_readable() here May 5, 2013 lib melody sfProcess timeouts are now configurable via config.php Jun 10, 2016 .gitignore initial sensiolabs/melody integration Jan 26, 2015 LICENSE Initial import Aug 27, 2010 Makefile building some more automation with a makefile and adding it as a script Jul 10, 2013 README.mdown Add method with the internal PHP server Jul 26, 2015 composer.json initial sensiolabs/melody integration Jan 26, 2015 config.php.dist renamed ""melody-timeout"" option to ""melody_timeout"" Jun 14, 2016 index.php renamed ""melody-timeout"" option to ""melody_timeout"" Jun 14, 2016 jquery-1.9.1.min.js Update jQuery to 1.9.1 May 4, 2013 loader.gif Script execution is now done via an async js request, preventing die(… Aug 31, 2010 php-console.js added server-side runtime information (memory, rendertime) into the c… Nov 27, 2013 styles.css wrap elements + use flex css Jun 3, 2014 README.mdown PHP Console A web console to try your PHP code into Creating a test file or using php's interactive mode can be a bit cumbersome to try random php snippets. This allows you to run small bits of code easily right from your browser. It is secure since accessible only from the local host, and very easy to setup and use. Screenshot Installation Clone the git repo or download it as a zip/tarball, drop it somewhere in your local web document root and access it with http://localhost/path/to/php-console You can also install it with Composer using this command: composer create-project --stability=dev --keep-vcs seld/php-console  To update it just run git pull in the directory to pull the latest changes in. You can use the internal PHP server too. run php -S localhost:1337 in a terminal and go to http://localhost:1337/. Configuration Default settings are available in config.php.dist, if you would like to modify them, you can copy the file to config.php and edit settings. Contributing Code contributions or ideas are obviously much welcome. Send pull requests or issues on github. Author Jordi Boggiano - j.boggiano@seld.be http://seld.be/ - http://twitter.com/seldaek Changelog 1.5.0-dev Added melody-script integration. requires a composer binary within the systems/webservers PATH env variable. Updated bundled ACE editor to 1.1.8 Layout is now flex-css based Added a new bootstrap option to be include before source evaluation Moved tabsize, ip-whitelist into an option Added servers-side runtime information, to be rendered in the consoles statusbar Allow configuring options 1.4.0 Added control-char escaping to make them more visible 1.3.0 Added code persistence across sessions in localStorage + a reset button 1.2.3 Fixed syntax highlighting Fixed some styling issues Fixed ajax error handling for non responding backends 1.2.2 Updated ACE to latest version Added composer.json support 1.2.1 Performance fixes for ACE editor integration JS is no longer a requirement 1.2.0 Replaced built-in editor with ACE editor which provides highlighting and other features Handle old setups with magic_quotes enabled 1.1.2 Fixed issue with IPv6 loopback not being whitelisted 1.1.1 Cross-browser compatibility enhancements 1.1.0 Script execution is now done via an async js request, preventing die() and exception to mess up the entire console Added a status bar with char/line display Added a toggle button to expand/collapse all krumo sub-trees at once Cross-browser compatibility enhancements Removing a tab (i.e. 4 spaces) on backspace now Made tab character(s) configurable (see index.php) 1.0.0 Initial Public Release License PHP Console is licensed under the New BSD License, which means you can do pretty much anything you want with it. New BSD License - see the LICENSE file for details Acknowledgements PHP Console bundles the following libraries, and the work of their respective authors is very much appreciated: krumo licensed under the LGPL jQuery licensed under the MIT License ACE licensed under the MPL/LGPL/GPL Licenses Clippy licensed under the MIT License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Seldaek/php-console"	"A web debugging console."	"true"
"Debugging and Profiling"	"PHP Debug Bar"	"http://phpdebugbar.com/"	"A debugging toolbar."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PHP Debug Bar PHP Debug Bar Documentation Code Debugging in PHP has never been easier The DebugBar integrates easily in any projects and can display profiling data from any part of your application. It comes built-in with data collectors for standard PHP features and popular projects. Install the debug bar using Composer: {   ""require"": {     ""maximebf/debugbar"": ""1.*""   } } $ php composer.phar install The DebugBar has two parts: the main DebugBar object with data collectors and the renderer. Data collectors are objects collecting a specific set of data. To makes things easy, the StandardDebugBar has all the built-in collectors activated. <?php use DebugBar\StandardDebugBar;  $debugbar = new StandardDebugBar(); $debugbarRenderer = $debugbar->getJavascriptRenderer();  $debugbar[""messages""]->addMessage(""hello world!""); ?> <html> <head>     <?php echo $debugbarRenderer->renderHead() ?> </head> <body>     ...     <?php echo $debugbarRenderer->render() ?> </body> </html> Try it below! Features: Generic debug bar with no other dependencies Easy to integrate with any project Clean, fast and easy to use interface Handles AJAX request Includes generic data collectors and collectors for well known libraries The client side bar is 100% coded in javascript Easily create your own collectors and their associated view in the bar Save and re-open previous requests Very well documented Try it now at the bottom of the page! An Open Source project by maximebf I'm a freelance web developer specialized in PHP, Python and Javascript. I build well crafted components for backend development. Hire me for your next project Check out all my open source projects Atomik Framework PHP Debug Bar Beautiful Docs Events ConsoleKit CacheCache They are all hosted on Github © Maxime Bouroumeau-Fuseau 2013"	"null"	"null"	"A debugging toolbar."	"true"
"Debugging and Profiling"	"PHPBench"	"https://github.com/phpbench/phpbench"	"A benchmarking Framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"362"	"16"	"17"	"GitHub - phpbench/phpbench: PHP Benchmarking framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 362 Fork 17 phpbench/phpbench Code Issues 31 Pull requests 10 Wiki Pulse Graphs PHP Benchmarking framework 692 commits 40 branches 17 releases 9 contributors PHP 98.6% XSLT 1.2% Other 0.2% PHP XSLT Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.7 0.8.0 0.9 0.10 0.11 aggregation_refactoring allow_null_fname_xslt arg_params before_after_param better_reflection better_report_config_validation bliken_spacing_fix column_spec composite_gen_fix concurrent_runner counterweight div_zero faq fix_skip gh-pages git_detech graphs interface_suffix iterations_fix kernelestimate master pchart profiler profiling_fuck refactoring_to_xml report_steps rmt show_percentage_xdebug_trace simple_logger sqlite string_concat_bench subject_name timeunit use_classname xml_storage Nothing to show 0.11.2 0.11.1 0.11.0 0.10.0 0.9.2 0.9.1 0.9.0 0.8.1 0.8.0 0.7.0 0.6 0.5 0.3 0.2.2 0.2.1 0.2 0.1 Nothing to show New pull request Latest commit 7fa54f0 Jul 13, 2016 dantleech committed on GitHub Merge pull request #431 from phpbench/no_history_bug … Throw exception if trying to resolve latest UUID when no history. Permalink Failed to load latest commit information. .travis Box and automated PHAR build + deployment Mar 28, 2016 benchmarks XDebug trace support Jun 27, 2016 bin Allow additional extension autoloader to be configured May 7, 2016 docs XDebug trace support Jun 27, 2016 extensions Throw exception if trying to resolve latest UUID when no history. Jul 13, 2016 lib Merge pull request #431 from phpbench/no_history_bug Jul 13, 2016 tests Throw exception if trying to resolve latest UUID when no history. Jul 13, 2016 .gitignore Box and automated PHAR build + deployment Mar 28, 2016 .rmt.yml Use RMT (Release Management Tool) Mar 28, 2016 .styleci.yml Short array syntax Mar 2, 2016 .travis.yml Only include PHAR on deploy Mar 30, 2016 CHANGELOG Release of new version 0.11.0 Mar 28, 2016 LICENSE initial May 3, 2015 README.md Box and automated PHAR build + deployment Mar 28, 2016 RMT Use RMT (Release Management Tool) Mar 28, 2016 box.json.dist Bumped version Mar 28, 2016 composer.json Adjust lstrojny/functional-php dependency version Jul 8, 2016 phpbench.json.dist Result refactoring Jun 15, 2016 phpunit.xml.dist Doctrine DBAL Mar 6, 2016 README.md PhpBench PhpBench is a benchmarking framework for PHP. Features: Nice command line interface. Generate reports and render them to different mediums (Console, HTML, Markdown, etc). Benchmarks executed in a separate process, no effective overhead, no autoloader pollution. Control stability of results with multiple iterations and retry threshold. Memory usage statistics. Records environment (e.g. VCS info, OS info, etc.) Standard deviation and Z-Scores. Kernel density estimate used to estimate the mode. Time unit specification. Output mode specification (throughput, average time). Parameterized benchmarking cases. Per-project configuration. Store and query results. Before and After method / class specification. Pause (recover) between iterations. Extendable. More.. Installation Instructions You can install PHPBench either as as a PHAR or as a project dependency. Installing as sa PHAR allows you to easily self-update to the latest versions, but as PHPBench is unstable, you will be living on the edge. See the installation instructions for information on both methods of installation. Documentation See the official documentation. Screenshots Default output: Aggregate report with ""dots"" logger: Blinken logger: HTML report: Storage log: See also This library was influenced by the athletic benchmarking framework. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phpbench/phpbench"	"A benchmarking Framework."	"true"
"Debugging and Profiling"	"PHPDBG"	"http://phpdbg.com/"	"An interactive PHP debugger."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"706"	"49"	"48"	"GitHub - krakjoe/phpdbg: The Interactive PHP Debugger Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 49 Star 706 Fork 48 krakjoe/phpdbg Code Issues 27 Pull requests 0 Pulse Graphs The Interactive PHP Debugger http://phpdbg.com 1,347 commits 5 branches 6 releases 22 contributors C 95.2% PHP 2.8% C++ 1.2% Other 0.8% C PHP C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master opline_addr2func test test2 webdata_transfer Nothing to show v0.4.0 v0.3.2 v0.3.0 v0.2.0 v0.1.0 v0.0.1 Nothing to show New pull request Latest commit c6802cd Nov 15, 2014 bwoebi Begin adding actual examples for illustration Permalink Failed to load latest commit information. tests Fix last commit, and do not output unnecessary information Oct 27, 2014 travis Merge sapi/phpdbg into PHP-5.6 Jun 15, 2014 .gdbinit Merge branch 'master' of sapi/phpdbg into PHP-5.6 Dec 20, 2013 .gitignore Merge sapi/phpdbg into PHP-5.6 Jun 9, 2014 .phpdbginit Merge branch 'master' of sapi/phpdbg into PHP-5.6 Dec 20, 2013 .travis.yml Merge phpdbg into PHP-5.6 Sep 15, 2014 CREDITS credits file for phpdbg Dec 24, 2013 Changelog.md Merge branch 'master' of sapi/phpdbg into PHP-5.6 Dec 20, 2013 Makefile.frag Merge sapi/phpdbg into PHP-5.6 Jul 6, 2014 README.md Merge phpdbg into PHP-5.6 Sep 15, 2014 config.m4 Merge phpdbg into PHP-5.6 Oct 28, 2014 config.w32 fix sapi/phpdbg/config.w32 Oct 29, 2014 phpdbg.1 Merge sapi/phpdbg into PHP-5.6 Jun 25, 2014 phpdbg.c Merge php-src into phpdbg Nov 4, 2014 phpdbg.h Allow connections over tcp sockets too (wait command) Nov 4, 2014 phpdbg.init.d Merge branch 'master' of sapi/phpdbg into PHP-5.6 Dec 20, 2013 phpdbg_bp.c Begin adding actual examples for illustration Nov 15, 2014 phpdbg_bp.h Remove the ugly hack via a temp file to store breakpoints Oct 28, 2014 phpdbg_break.c Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_break.h Merge sapi/phpdbg into PHP-5.6 Apr 21, 2014 phpdbg_btree.c Fix readline/libedit (Thanks to @remicollet) Jun 29, 2014 phpdbg_btree.h Fix readline/libedit (Thanks to @remicollet) Jun 29, 2014 phpdbg_cmd.c Stabilize execution, always run destructors and extended file breakpo… Oct 27, 2014 phpdbg_cmd.h remove dodgy param parser, bring userland breakpoint api inline with … Oct 27, 2014 phpdbg_eol.c Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_eol.h Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_frame.c Fix 5.4/5.5 build Nov 4, 2014 phpdbg_frame.h Update year Jan 17, 2014 phpdbg_help.c Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_help.h Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_info.c Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_info.h Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_io.c Fix possibly unclosed <stream> tags Oct 28, 2014 phpdbg_io.h Add question to reset execution in run/exec/clean Oct 27, 2014 phpdbg_lexer.c Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_lexer.h Merge sapi/phpdbg into PHP-5.6 Jun 9, 2014 phpdbg_lexer.l Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_list.c Stabilize execution, always run destructors and extended file breakpo… Oct 26, 2014 phpdbg_list.h Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_opcode.c Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_opcode.h Update year Jan 17, 2014 phpdbg_out.c Fix possibly unclosed <stream> tags Oct 28, 2014 phpdbg_out.h Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_parser.c remove dodgy param parser, bring userland breakpoint api inline with … Oct 26, 2014 phpdbg_parser.h remove dodgy param parser, bring userland breakpoint api inline with … Oct 26, 2014 phpdbg_parser.y Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_print.c Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_print.h Merge sapi/phpdbg into PHP-5.6 Apr 21, 2014 phpdbg_prompt.c Fix 5.4/5.5 build Nov 4, 2014 phpdbg_prompt.h Remove the ugly hack via a temp file to store breakpoints Oct 28, 2014 phpdbg_rinit_hook.c Allow connections over tcp sockets too (wait command) Nov 4, 2014 phpdbg_rinit_hook.h Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_set.c Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_set.h Merge sapi/phpdbg into PHP-5.6 Apr 21, 2014 phpdbg_sigio_win32.c Merge phpdbg into PHP-5.6 Oct 27, 2014 phpdbg_sigio_win32.h Merge phpdbg into PHP-5.6 Oct 27, 2014 phpdbg_sigsafe.c Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_sigsafe.h Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_utils.c Use smarter, half-expanded args in backtrace Nov 1, 2014 phpdbg_utils.h Use smarter, half-expanded args in backtrace Nov 1, 2014 phpdbg_wait.c Allow connections over tcp sockets too (wait command) Nov 4, 2014 phpdbg_wait.h Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_watch.c Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_watch.h Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_webdata_transfer.c Export sapi_module.phpinfo_as_text via wait Oct 31, 2014 phpdbg_webdata_transfer.h Merge phpdbg into PHP-5.6 Oct 24, 2014 phpdbg_win.c Merge sapi/phpdbg into PHP-5.6 Apr 21, 2014 phpdbg_win.h Merge sapi/phpdbg into PHP-5.6 Apr 21, 2014 test.php Merge sapi/phpdbg into PHP-5.6 Apr 21, 2014 web-bootstrap.php Merge branch 'master' of sapi/phpdbg into PHP-5.6 Dec 20, 2013 xml.md Begin adding actual examples for illustration Nov 15, 2014 zend_mm_structs.h Merge phpdbg into PHP-5.6 Oct 24, 2014 README.md The interactive PHP debugger Implemented as a SAPI module, phpdbg can exert complete control over the environment without impacting the functionality or performance of your code. phpdbg aims to be a lightweight, powerful, easy to use debugging platform for PHP 5.4+ Features Stepthrough Debugging Flexible Breakpoints (Class Method, Function, File:Line, Address, Opcode) Easy Access to PHP with built-in eval() Easy Access to Currently Executing Code Userland API SAPI Agnostic - Easily Integrated PHP Configuration File Support JIT Super Globals - Set Your Own!! Optional readline Support - Comfortable Terminal Operation Remote Debugging Support - Bundled Java GUI Easy Operation - See Help :) Planned Improve Everything :) Installation To install phpdbg, you must compile the source against your PHP installation sources, and enable the SAPI with the configure command. cd /usr/src/php-src/sapi git clone https://github.com/krakjoe/phpdbg cd ../ ./buildconf --force ./configure --enable-phpdbg make -j8 make install-phpdbg  Where the source directory has been used previously to build PHP, there exists a file named config.nice which can be used to invoke configure with the same parameters as were used by the last execution of configure. Note: PHP must be configured with the switch --with-readline for phpdbg to support history, autocompletion, tab-listing etc. Command Line Options The following switches are implemented (just like cli SAPI): -n ignore php ini -c search for php ini in path -z load zend extension -d define php ini entry The following switches change the default behaviour of phpdbg: -v disables quietness -s enabled stepping -e sets execution context -b boring - disables use of colour on the console -I ignore .phpdbginit (default init file) -i override .phpgdbinit location (implies -I) -O set oplog output file -q do not print banner on startup -r jump straight to run -E enable step through eval() -l listen ports for remote mode -a listen address for remote mode -S override SAPI name Note: Passing -rr will cause phpdbg to quit after execution, rather than returning to the console. Getting Started See the website for tutorials/documentation http://phpdbg.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/krakjoe/phpdbg"	"An interactive PHP debugger."	"true"
"Debugging and Profiling"	"Tideways.io"	"https://tideways.io/"	"Monitoring and profiling tool"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Performance Monitoring and Profiling for PHP and HHVM - Tideways Toggle navigation Tideways Features Pricing About Blog Documentation Try for Free Login Profiling, Monitoring and Exception Tracking for PHP Try for Free Learn More Timeline and Callgraph Profiler Identify slow SQL, HTTP or PHP calls in your code at first sight, no need to dig through tons of data. Get full insights from callgraphs to uncover any slowdown. Application Performance Monitoring Our continuous production monitoring detects and highlights bottlenecks automatically. Error Tracking We catch and collect all the Fatal Errors and Uncaught Exceptions for you. Never Wait for a Trace Again All the interesting traces are collected every minute and you can always trigger more yourself. Up-to-Date with Trends and Alerts Get notified of trends regularly and in case of sudden slowdowns and emergencies. Built for PHP We provide full integration with many popular PHP Libraries and Frameworks, out of the box. Awesome Support We are dedicated to help you with all your questions and problems as soon as possible. Secure By Default Policy We use SSL/TLS everywhere, believe in Datensparsamkeit and host in Germany. View All Features Our Customers are Already in Full Control over Their Application Performance „Using Tideways we were able to optimize and speed up our transactions by 20% with minimum development effort. Additionally Tideways allows us to monitor our system performance in real-time which proves to be an essential enabler for our continuous deployment pipeline.” Anton Stöckl, Senior Manager DriveNow Software Development Henrik Mitsch, Executive Manager Product Development DriveNow Try Tideways for Performance Monitoring and Profiling Start Free 30 Days Trial No credit card required, plans start at 49 €/month. Testdrive Tideways with three fully functional demo applications We run demo applications of Wordpress, Symfony and Shopware to showcase all the features of Tideways. Create a demo account to get unlimited access to these demo applications and evaluate Tideways with zero effort before starting a trial. Access Demo Applications Imprint Status Terms of Service Privacy Contact Us @tidewaysio"	"null"	"null"	"Monitoring and profiling tool"	"true"
"Debugging and Profiling"	"Tracy"	"https://github.com/nette/tracy"	"A simple error detection, logging and time measuring library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"586"	"86"	"105"	"GitHub - nette/tracy: Tracy: debugging tool you will love ♥ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 86 Star 586 Fork 105 nette/tracy Code Issues 8 Pull requests 5 Pulse Graphs Tracy: debugging tool you will love ♥ https://tracy.nette.org 963 commits 5 branches 32 releases Fetching contributors PHP 69.5% JavaScript 12.4% HTML 12.2% CSS 5.9% PHP JavaScript HTML CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags console gh-pages master v2.2 v2.3 Nothing to show v2.4.1 v2.4.0 v2.4.0-beta v2.4.0-RC4 v2.4.0-RC3 v2.4.0-RC2 v2.4.0-RC1 v2.3.11 v2.3.10 v2.3.9 v2.3.8 v2.3.7 v2.3.6 v2.3.5 v2.3.4 v2.3.3 v2.3.2 v2.3.1 v2.3.0 v2.2.9 v2.2.8 v2.2.7 v2.2.6 v2.2.5 v2.2.4 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v0.9.1 v0.9.0 v0.7 Nothing to show New pull request Latest commit af97a2f Jul 14, 2016 dg travis: added PHP 7.1 Permalink Failed to load latest commit information. examples bar.js: tracy refresh can be disabled via 'window.TracyAutoRefresh = … Jun 6, 2016 src Debugger::enable() throws exception when output has been sent Jul 14, 2016 tests Removed nowdoc, is not compatible with nette.phar generator (#193) Jun 7, 2016 tools create-phar: fixed bugs Jun 6, 2016 .gitattributes added missing files (composer, testing) Mar 26, 2013 .gitignore added tools & examples Dec 13, 2013 .travis.yml travis: added PHP 7.1 Jul 14, 2016 appveyor.yml added appveyor.yml Nov 5, 2015 composer.json composer: used Tester 2 May 19, 2016 contributing.md used https Oct 5, 2015 license.md used https Oct 5, 2015 readme.md Debugger::$maxLen ⇒ $maxLength Jun 16, 2016 readme.md Tracy - PHP debugger Tracy library is a useful helper for everyday PHP programmers. It helps you to: quickly detect and correct errors log errors dump variables measure execution time of scripts/queries see memory consumption PHP is a perfect language for making hardly detectable errors because it gives a great flexibility to programmers. Tracy\Debugger is more valuable because of that. It is a ultimate tool among the diagnostic ones. If you are meeting Tracy the first time, believe me, your life starts to be divided one before the Tracy and the one with her. Welcome to the good part! Installation and requirements The best way how to install Tracy is to download a latest package or use a Composer: php composer.phar require tracy/tracy  Tracy requires PHP version 5.3.0 or newer (master requires PHP 5.4.4). Usage Activating Tracy is easy. Simply add these two lines of code, preferably just after library loading (using require 'src/tracy.php' or via Composer): use Tracy\Debugger;  Debugger::enable(); The first thing you will notice on the website is a Debugger Bar. Debugger Bar The Debugger Bar is a floating panel. It is displayed in the bottom right corner of a page. You can move it using the mouse. It will remember its position after the page reloading. You can add other useful panels into the Debugger Bar. You can find interesing ones in Addons or you can create your own. Visualization of errors and exceptions Surely, you know how PHP reports errors: there is something like this in the page source code: <b>Parse error</b>:  syntax error, unexpected '}' in <b>HomepagePresenter.php</b> on line <b>15</b>  or uncaught exception: <b>Fatal error</b>:  Uncaught Nette\MemberAccessException: Call to undefined method Nette\Application\UI\Form::addTest()? in /sandbox/vendor/nette/utils/src/Utils/ObjectMixin.php:100 Stack trace: #0 /sandbox/vendor/nette/utils/src/Utils/Object.php(75): Nette\Utils\ObjectMixin::call(Object(Nette\Application\UI\Form), 'addTest', Array) #1 /sandbox/app/forms/SignFormFactory.php(32): Nette\Object-&gt;__call('addTest', Array) #2 /sandbox/app/presenters/SignPresenter.php(21): App\Forms\SignFormFactory-&gt;create() #3 /sandbox/vendor/nette/component-model/src/ComponentModel/Container.php(181): App\Presenters\SignPresenter-&gt;createComponentSignInForm('signInForm') #4 /sandbox/vendor/nette/component-model/src/ComponentModel/Container.php(139): Nette\ComponentModel\Container-&gt;createComponent('signInForm') #5 /sandbox/temp/cache/latte/15206b353f351f6bfca2c36cc.php(17): Nette\ComponentModel\Co in <b>/sandbox/vendor/nette/utils/src/Utils/ObjectMixin.php</b> on line <b>100</b><br />  It is not so easy to navigate through this output. If you enable Tracy, both errors and exceptions are displayed in a completely different form: The error message literally screams. You can see a part of the source code with the highlighted line where the error occurred. A message clearly explains an error. The entire site is interactive, try it. And you know what? Fatal errors are captured and displayed in the same way. No need to install any extension (click for live example): Errors like a typo in a variable name or an attempt to open a nonexistent file generate reports of E_NOTICE or E_WARNING level. These can be easily overlooked and/or can be completely hidden in a web page graphic layout. Let Tracy manage them: Or they may be displayed like errors: Debugger::$strictMode = TRUE; If your site uses Content Security Policy, you'll need to add 'unsafe-inline' to style-src, and 'unsafe-inline' & 'unsafe-eval' to script-src for Tracy to work properly. Avoid adding these in production mode, if you can. Production mode and error logging As you can see, Tracy is quite eloquent. It is appreciated in a development environment, but on a production server it would cause a disaster. Any debugging information cannot be listed there. Therefore Tracy has an environment autodetection and logging functionality. Instead of showing herself, Tracy stores information into a log file and shows the visitor a user-comprehensible server error message: Production output mode suppresses all debugging information which is sent out via Debugger::dump() or Debugger::fireLog(), and of course all error messages generated by PHP. So, even if you forget Debugger::dump($obj) in the source code, you do not have to worry about it on your production server. Nothing will be seen. The output mode is set by the first parameter of Debugger::enable(). You can specify either a constant Debugger::PRODUCTION or Debugger::DEVELOPMENT. If it is not specified, the default value Debugger::DETECT is used. In this case the system detects a server by IP address. The production mode is chosen if an application is accessed via public IP address. A local IP address leads to development mode. It is not necessary to set the mode in most cases. The mode is correctly recognized when you are launching the application on your local server or in production. In the production mode, Tracy automatically captures all errors and exceptions into a text log. Unless you specify otherwise, it will be stored in log/error.log. This error logging is extremely useful. Imagine, that all users of your application are actually betatesters. They are doing cutting-edge work for free when hunting bugs and you would be silly if you threw away their valuable reports to a recycle bin unnoticed. If you need to log your own messages or caught exceptions, use the method log(): Debugger::log('Unexpected error'); // text message  try {     criticalOperation(); } catch (Exception $e) {     Debugger::log($e); // log exception     // or     Debugger::log($e, Debugger::ERROR) // also sends an email notification } A directory for errors logging can be set by the second parameter of the enable() method: Debugger::enable(Debugger::DETECT, __DIR__ . '/mylog'); If you want Tracy to log PHP errors like E_NOTICE or E_WARNING with detailed information (HTML report), set Debugger::$logSeverity: Debugger::$logSeverity = E_NOTICE | E_WARNING; For a real professional the error log is a crucial source of information and he or she wants to be notified about any new error immediately. Tracy helps him. She is capable of sending an email for every new error record. The variable $email identifies where to send these e-mails: Debugger::$email = 'admin@example.com'; To protect your e-mail box from flood, Tracy sends only one message and creates a file email-sent. When a developer receives the e-mail notification, he checks the log, corrects his application and deletes the email-sent monitoring file. This activates the e-mail sending again. Variable dumping Every debugging developer is a good friend with the function var_dump, which lists all contents of any variable in detail. Unfortunately, its output is without HTML formatting and outputs the dump into a single line of HTML code, not to mention context escaping. It is necessary to replace the var_dump by a handier function. That is just what Debugger::dump() is. $arr = array(10, 20.2, TRUE, NULL, 'hello');  dump($arr); // or Tracy\Debugger::dump($arr); generates the output: You can also change the nesting depth by Debugger::$maxDepth and displayed strings length by Debugger::$maxLength. Naturally, lower values accelerate Tracy rendering. Debugger::$maxDepth = 2; // default: 3 Debugger::$maxLength = 50; // default: 150 The dump() function can display other useful information. Tracy\Dumper::LOCATION_SOURCE adds tooltip with path to the file, where the function was called. Tracy\Dumper::LOCATION_LINK adds a link to the file. Tracy\Dumper::LOCATION_CLASS adds a tooltip to every dumped object containing path to the file, in which the object's class is defined. All these constants can be set in Debugger::$showLocation variable before calling the dump(). You can set multiple values at once using the | operator. Debugger::$showLocation = Tracy\Dumper::LOCATION_SOURCE; // Shows path to where the dump() was called Debugger::$showLocation = Tracy\Dumper::LOCATION_CLASS | Tracy\Dumper::LOCATION_LINK; // Shows both paths to the classes and link to where the dump() was called Debugger::$showLocation = FALSE; // Hides additional location information Debugger::$showLocation = TRUE; // Shows all additional location information Very handy alternative to Debugger::dump() is Debugger::barDump(). This allows us to dump variables in Debugger Bar. This is useful, because dumps don't mess up the output and we can also add a title to the dump. Debugger::barDump([2, 4, 6, 8], 'even numbers up to ten'); Debugger::barDump([1, 3, 5, 7, 9], 'odd numbers up to ten'); Timing Another useful tool is the debugger stopwatch with a precision of microseconds: Debugger::timer();  // sweet dreams my cherrie sleep(2);  $elapsed = Debugger::timer(); // $elapsed = 2 Multiple measurements at once can be achieved by an optional parameter. Debugger::timer('page-generating'); // some code  Debugger::timer('rss-generating'); // some code  $rssElapsed = Debugger::timer('rss-generating'); $pageElapsed = Debugger::timer('page-generating'); Debugger::timer(); // runs the timer  ... // some time consuming operation  echo Debugger::timer(); // elapsed time in seconds FireLogger You cannot always send debugging information to the browser window. This applies to AJAX requests, or generating XML files to output. In such cases, you can send the messages by a separate channel into FireLogger. Error, Notice and Warning levels are sent to FireLogger window automatically. It is also possible to log suppressed exceptions in running application when attention to them is important. How to do it? Firefox: install extension Firebug and FireLogger turn on Firebug (using F12 key), enable tabs Net and Logger (stay on Logger) Chrome: install extension FireLogger for Chrome turn on Chrome DevTools (using Ctrl-Shift-I key) and open Console Navigate to demo page and you will see messages sent from PHP. Because Tracy\Debugger communicates with FireLogger via HTTP headers, you must call the logging function before the PHP script sends anything to output. It is also possible to enable output buffering and delay the output. use Tracy\Debugger;  Debugger::fireLog('Hello World'); // send string into FireLogger console  Debugger::fireLog($_SERVER); // or even arrays and objects  Debugger::fireLog(new Exception('Test Exception')); // or exceptions The result looks like this: Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nette/tracy"	"A simple error detection, logging and time measuring library."	"true"
"Debugging and Profiling"	"xDebug"	"https://github.com/xdebug/xdebug"	"A debug and profile tool for PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"885"	"71"	"242"	"GitHub - xdebug/xdebug: Xdebug Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 71 Star 885 Fork 242 xdebug/xdebug Code Pull requests 7 Pulse Graphs Xdebug http://xdebug.org 3,742 commits 9 branches 110 releases 33 contributors PHP 52.1% C 37.7% Shell 9.5% Makefile 0.3% M4 0.2% VimL 0.1% Other 0.1% PHP C Shell Makefile M4 VimL Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master xdebug_1_0 xdebug_1_1 xdebug_1_3 xdebug_2_0 xdebug_2_1 xdebug_2_2 xdebug_2_3 xdebug_2_4 Nothing to show XDEBUG_2_4_0 XDEBUG_2_4_0beta1 XDEBUG_2_4_0RC4 XDEBUG_2_4_0RC3 XDEBUG_2_4_0RC2 XDEBUG_2_4_0RC1 XDEBUG_2_3_3 XDEBUG_2_3_2 XDEBUG_2_3_1 XDEBUG_2_3_0 XDEBUG_2_2_7 XDEBUG_2_2_6 XDEBUG_2_2_5 XDEBUG_2_2_4 XDEBUG_2_2_3 XDEBUG_2_2_2 XDEBUG_2_2_1 XDEBUG_2_2_0 XDEBUG_2_2_0RC2 XDEBUG_2_2_0RC1 XDEBUG_2_1_4 XDEBUG_2_1_3 XDEBUG_2_1_2 XDEBUG_2_1_1 XDEBUG_2_1_1RC1 XDEBUG_2_1_0 XDEBUG_2_1_0beta3 XDEBUG_2_1_0beta2 XDEBUG_2_1_0beta1 XDEBUG_2_0_5 XDEBUG_2_0_4 XDEBUG_2_0_3 XDEBUG_2_0_2 XDEBUG_2_0_1 XDEBUG_2_0_0 XDEBUG_2_0_0beta6 XDEBUG_2_0_0beta5 XDEBUG_2_0_0beta2 XDEBUG_2_0_0beta1 XDEBUG_2_0_0RC4 XDEBUG_2_0_0RC3 XDEBUG_2_0_0RC2 XDEBUG_2_0_0RC1 XDEBUG_1_3_2 XDEBUG_1_3_1 XDEBUG_1_3_0 XDEBUG_1_3_0rc2 XDEBUG_1_3_0rc1 XDEBUG_1_2_0 XDEBUG_1_2_0rc2 XDEBUG_1_2_0rc1 XDEBUG_1_1_0 XDEBUG_1_1_0pre2 XDEBUG_1_0_0rc1 XDEBUG_0_9_0 XDEBUG_0_8_0 XDEBUG_0_7_0 XDEBUG_0_6_0 2.3.3 2.3.2 2.3.1 2.3.0 2.2.7 2.2.6 2.2.5 2.2.4 2.2.3 2.2.2 2.2.1 2.2.0 2.2.0RC2 2.2.0RC1 2.1.4 2.1.3 2.1.2 2.1.1 2.1.1RC1 2.1.0 2.1.0beta3 2.1.0beta2 2.1.0beta1 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 2.0.0beta6 2.0.0beta5 2.0.0beta2 2.0.0beta1 2.0.0RC4 2.0.0RC3 2.0.0RC2 2.0.0RC1 1.3.2 1.3.1 1.3.0 1.3.0rc2 1.3.0rc1 Nothing to show New pull request Latest commit bcb45ac Jul 6, 2016 derickr Merge branch 'xdebug_2_4' Permalink Failed to load latest commit information. .travis.scripts Instead of defining, FAIL_SILENTLY, add the error conditions to the log Apr 30, 2016 contrib Added license template to tracefile analyser example. Mar 18, 2016 debugclient Merge branch 'xdebug_2_4' May 10, 2016 docs typo fixes - https://github.com/vlajos/misspell_fixer Jan 6, 2015 tests Merge branch 'xdebug_2_4' Jul 6, 2016 .cvsignore - Add missing entry Feb 3, 2006 .gitignore Added more file endings to .gitignore Jan 18, 2015 .travis.yml Fixed travis.yml syntax Jun 27, 2016 CONTRIBUTING.rst Tidy up some language. May 25, 2015 CREDITS - Update CREDITS Apr 6, 2003 LICENSE Welcome 2012. Jan 25, 2012 Makefile.frag Enable Travis-CI for Xdebug. Nov 23, 2014 Makefile.in - Move the allocation defines into xdebug_mm.h Oct 12, 2003 README.rst Update version in README instructions Dec 3, 2015 compile.bat - Windows build fixes Jan 13, 2004 config.m4 Restrict Xdebug 2.5 to PHP >= 5.5 May 7, 2016 config.w32 Separate monitoring into its own files May 25, 2015 package.xml Go with 2.4.0 Mar 3, 2016 php_xdebug.h master is now 2.5.x Apr 30, 2016 rebuild-32bit.sh Fixed issue #1212: Segfault with code coverage dead code analysis and… Nov 29, 2015 rebuild.sh Fixed compiler warnings (mostly size and signedness) Nov 29, 2015 template.rc master is now 2.5.x Apr 30, 2016 test.sh Allow test files to be passed as the TESTS env var. Apr 8, 2012 usefulstuff.c Hello 2016. Jan 19, 2016 usefulstuff.h Hello 2016. Jan 19, 2016 xdebug.c Merge branch 'xdebug_2_4' Jul 6, 2016 xdebug.ini Merge branch 'xdebug_2_2' Jan 6, 2015 xdebug_branch_info.c Fixed issue #1246: Path and branch coverage should be initialised per… May 29, 2016 xdebug_branch_info.h Hello 2016. Jan 19, 2016 xdebug_code_coverage.c Fixed issue #1263: Code coverage segmentation fault with opcache enabled May 14, 2016 xdebug_code_coverage.h Hello 2016. Jan 19, 2016 xdebug_com.c Instead of defining, FAIL_SILENTLY, add the error conditions to the log Apr 30, 2016 xdebug_com.h Instead of defining, FAIL_SILENTLY, add the error conditions to the log Apr 30, 2016 xdebug_compat.c Hello 2016. Jan 19, 2016 xdebug_compat.h Hello 2016. Jan 19, 2016 xdebug_handler_dbgp.c For PHP 7.1, we need to mess with track_errors too in eval() May 9, 2016 xdebug_handler_dbgp.h Hello 2016. Jan 19, 2016 xdebug_handlers.c Hello 2016. Jan 19, 2016 xdebug_handlers.h Hello 2016. Jan 19, 2016 xdebug_hash.c - Sort the symbol elements according to name. (Patch by Eric Promislow Nov 27, 2008 xdebug_hash.h - Implemented FR #131: XDebug needs to implement paged child object r… Jan 22, 2006 xdebug_llist.c - Reset the lists to NULL properly. It can't be done in the function … Feb 7, 2010 xdebug_llist.h - Added dumping of superglobals (patch by Harald Radi <phanto@php.net>). Feb 20, 2003 xdebug_mm.h Hello 2016. Jan 19, 2016 xdebug_monitor.c Hello 2016. Jan 19, 2016 xdebug_monitor.h Hello 2016. Jan 19, 2016 xdebug_private.c Hello 2016. Jan 19, 2016 xdebug_private.h PHP 7.1: Handle new zend_pass hackery to help out with arguments and … May 9, 2016 xdebug_profiler.c Hello 2016. Jan 19, 2016 xdebug_profiler.h Hello 2016. Jan 19, 2016 xdebug_set.c Fixed issue #1267: AIX build issues Feb 8, 2016 xdebug_set.h Hello 2016. Jan 19, 2016 xdebug_stack.c PHP 7.1: Handle changes on how to detect static vs. dynamic method calls May 9, 2016 xdebug_stack.h Hello 2016. Jan 19, 2016 xdebug_str.c Hello 2016. Jan 19, 2016 xdebug_str.h Hello 2016. Jan 19, 2016 xdebug_superglobals.c Fixed #1266: xdebug_dump_superglobals() always dumps empty stack on P… Feb 8, 2016 xdebug_superglobals.h Hello 2016. Jan 19, 2016 xdebug_trace_computerized.c Hello 2016. Jan 19, 2016 xdebug_trace_computerized.h Hello 2016. Jan 19, 2016 xdebug_trace_html.c Hello 2016. Jan 19, 2016 xdebug_trace_html.h Hello 2016. Jan 19, 2016 xdebug_trace_textual.c Hello 2016. Jan 19, 2016 xdebug_trace_textual.h Hello 2016. Jan 19, 2016 xdebug_tracing.c Hello 2016. Jan 19, 2016 xdebug_tracing.h Hello 2016. Jan 19, 2016 xdebug_var.c Merge branch 'xdebug_2_4' May 10, 2016 xdebug_var.h Hello 2016. Jan 19, 2016 xdebug_xml.c Hello 2016. Jan 19, 2016 xdebug_xml.h Hello 2016. Jan 19, 2016 README.rst Xdebug These are instructions for installing Xdebug. Please also refer to http://xdebug.org/support.php for support. You need to compile Xdebug separately from the rest of PHP. Note, however, that you need access to the scripts phpize and php-config. If your system does not have phpize and php-config, you will need to compile and install PHP from a source tarball first, as these script are by-products of the PHP compilation and installation processes. It is important that the source version matches the installed version as there are slight, but important, differences between PHP versions. Once you have access to phpize and php-config, do the following: Unpack the tarball: tar -xzf xdebug-2.4.x.tgz. Note that you do not need to unpack the tarball inside the PHP source code tree. Xdebug is compiled separately, all by itself, as stated above. cd xdebug-2.4.x Run phpize: phpize (or /path/to/phpize if phpize is not in your path). ./configure --enable-xdebug (or: ../configure --enable-xdebug --with-php-config=/path/to/php-config if php-config is not in your path) Run: make cp modules/xdebug.so /to/wherever/you/want/it add the following line to php.ini: zend_extension=""/wherever/you/put/it/xdebug.so"" Restart your webserver. Write a PHP page that calls phpinfo();. Load it in a browser and look for the info on the xdebug module. If you see it, you have been successful! Support If you think that you encountered a bug, please file a detailed bug report at http://bugs.xdebug.org. You are required to create an account, this is so that you can be contacted for additional information and to keep out spam. Derick Rethans — derick@xdebug.org Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/xdebug/xdebug"	"A debug and profile tool for PHP."	"true"
"Debugging and Profiling"	"XHProf"	"https://github.com/phacility/xhprof"	"A profiling tool originally developed by Facebook."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1633"	"150"	"554"	"GitHub - phacility/xhprof: XHProf is a function-level hierarchical profiler for PHP and has a simple HTML based user interface. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 150 Star 1,633 Fork 554 phacility/xhprof Code Issues 17 Pull requests 12 Pulse Graphs XHProf is a function-level hierarchical profiler for PHP and has a simple HTML based user interface. http://pecl.php.net/package/xhprof 87 commits 1 branch 0 releases 22 contributors PHP 47.0% C 21.3% HTML 18.8% JavaScript 11.8% CSS 1.1% PHP C HTML JavaScript CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 0bbf2a2 Feb 26, 2015 epriestley Use sys_get_temp_dir(), not hardcoded ""/tmp"" … See: <#55> Permalink Failed to load latest commit information. bin Add a failing test case for the XHProf PHP 5.5 segfault Aug 28, 2014 examples initial version 0.9.0 from source Mar 17, 2009 extension Fix a memory leak in the ignored function list Feb 26, 2015 scripts Add a failing test case for the XHProf PHP 5.5 segfault Aug 28, 2014 support/libxhprof Add a basic `arc unit` test binding to XHProf Aug 28, 2014 xhprof_html XHProf: add .arclint, fix some minor issues Aug 28, 2014 xhprof_lib Use sys_get_temp_dir(), not hardcoded ""/tmp"" Feb 26, 2015 .arcconfig Add a basic `arc unit` test binding to XHProf Aug 28, 2014 .arclint XHProf: add .arclint, fix some minor issues Aug 28, 2014 .gitignore Add a basic `arc unit` test binding to XHProf Aug 28, 2014 .travis.yml Support Travis-CI. Jan 25, 2014 CHANGELOG add support to ignore specified functions during profiling; more tests May 27, 2009 CREDITS Update .arcconfig and acknowledge that we're the new maintainers in X… Aug 27, 2014 LICENSE XHProf: add .arclint, fix some minor issues Aug 28, 2014 README XHProf: add .arclint, fix some minor issues Aug 28, 2014 package.xml Fix mismatched tag in contacts Aug 27, 2014 README For installation and usage notes refer to:    xhprof_html/docs/index.html  To view the latest version of the doc, go to:   http://pecl.php.net/package/xhprof ---> [View Documentation]  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phacility/xhprof"	"A profiling tool originally developed by Facebook."	"true"
"Debugging and Profiling"	"Z-Ray"	"http://www.zend.com/en/products/server/z-ray"	"A debug and profile tool for Zend Server."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Z-Ray: PHP Debug Solution from Zend Store Blog My Account Contact Us Products and Solutions Spotlight Learn what's new in the latest release     Products Z-Ray Zend Server for Development for Production Zend Studio Zend Guard PHP Developer Suite Open Source Eclipse PDT Apigility Zend Framework Solutions Enterprise PHP Cloud Solutions IBM i Solutions Power Linux PHP Debugger PHP Server PHP IDE PHP Encode - Decode PHP Development Tools Training Spotlight Training Programs Training Courses Training Tracks Help me choose Training Bundles Training Courses Schedule Training Partners PHP Training PHP Fundamentals I PHP Fundamentals II PHP I: for IBM i PHP for Experienced Programmers PHP Security PHP 7 Training PHP Unit Testing Zend Framework ZF2 Fundamentals ZF2 Advanced Concepts ZF1 Fundamentals ZF1 Advanced Concepts Certification Spotlight Be distinguished Be recognized ... Get Certified!   Certification Programs Summary and Benefits ZCE Directory Advisory Board FAQ PHP Certification PHP Certification Voucher PHP Study Guide PHP Test Prep Zend Framework Certification ZF Certification Voucher ZF2 Study Guide ZF2 Test Prep Class ZF1 Test Prep Class Services and Support Spotlight Introducing Zend Server Plus - Full PHP stack enterprise support. Learn more. Services Continuous Delivery Application Audit & Migration Start with PHP Zend Server Implementation Custom Implementation Support Documentation PHP Long Term Support Support Programs My Account Knowledgebase Forums Submit a Ticket Resources Spotlight Learn the basics of the most popular Framework from experts! Topics Continuous Delivery PHP Leadership Start with PHP Zend Server Zend Studio Zend Framework Enterprise PHP Resources Newsletters White Papers and Surveys Customer Success Stories Zend Developer Zone Do-It-Yourself PHP PHP 7 PHP 7 Performance News and Events Blog Webinars Events ZendCon Newsroom Industries Finance High-Tech Manufacturing Retail Try and Buy Spotlight Limited time only! Developer Edition Bundle: Zend Studio + Zend Server Try Now Zend Server Zend Server on Azure Z-Ray Test Drive Zend Studio Zend Guard Buy Now Zend Server Zend Studio Zend Guard Zend Certifications Zend Training Courses Company Spotlight   We empower companies to deliver innovation faster About Zend Company Overview Community Contact Zend Careers Newsroom Partners Solution Partners Training Partners Online Resellers Strategic Partners Affiliate Network Download Now Toggle navigation Products and Solutions Spotlight Learn what's new in the latest release     Products Z-Ray Zend Server for Development for Production Zend Studio Zend Guard PHP Developer Suite Open Source Eclipse PDT Apigility Zend Framework Solutions Enterprise PHP Cloud Solutions IBM i Solutions Power Linux PHP Debugger PHP Server PHP IDE PHP Encode - Decode PHP Development Tools Training Spotlight Training Programs Training Courses Training Tracks Help me choose Training Bundles Training Courses Schedule Training Partners PHP Training PHP Fundamentals I PHP Fundamentals II PHP I: for IBM i PHP for Experienced Programmers PHP Security PHP 7 Training PHP Unit Testing Zend Framework ZF2 Fundamentals ZF2 Advanced Concepts ZF1 Fundamentals ZF1 Advanced Concepts Certification Spotlight Be distinguished Be recognized ... Get Certified!   Certification Programs Summary and Benefits ZCE Directory Advisory Board FAQ PHP Certification PHP Certification Voucher PHP Study Guide PHP Test Prep Zend Framework Certification ZF Certification Voucher ZF2 Study Guide ZF2 Test Prep Class ZF1 Test Prep Class Services and Support Spotlight Introducing Zend Server Plus - Full PHP stack enterprise support. Learn more. Services Continuous Delivery Application Audit & Migration Start with PHP Zend Server Implementation Custom Implementation Support Documentation PHP Long Term Support Support Programs My Account Knowledgebase Forums Submit a Ticket Resources Spotlight Learn the basics of the most popular Framework from experts! Topics Continuous Delivery PHP Leadership Start with PHP Zend Server Zend Studio Zend Framework Enterprise PHP Resources Newsletters White Papers and Surveys Customer Success Stories Zend Developer Zone Do-It-Yourself PHP PHP 7 PHP 7 Performance News and Events Blog Webinars Events ZendCon Newsroom Industries Finance High-Tech Manufacturing Retail Try and Buy Spotlight Limited time only! Developer Edition Bundle: Zend Studio + Zend Server Try Now Zend Server Zend Server on Azure Z-Ray Test Drive Zend Studio Zend Guard Buy Now Zend Server Zend Studio Zend Guard Zend Certifications Zend Training Courses Company Spotlight   We empower companies to deliver innovation faster About Zend Company Overview Community Contact Zend Careers Newsroom Partners Solution Partners Training Partners Online Resellers Strategic Partners Affiliate Network Download Now Home / Products / Server / Z Ray The Ultimate PHP Productivity Solution Z-Ray is a revolutionary new addition to a PHP developer's toolkit.  It displays all the under-the-hood details of a page request, across all the PHP scripts involved in building the page. Z-Ray is injected into the response coming from your PHP app and shown right in the browser you're using for development: you get vastly greater insight without changing your development workflow. The PHP debug capabilities of Z-ray is unlike anything you've ever seen. Z-Ray is available with Zend Server  -OR- for installation on your PHP stack (Tech Preview)    Try it free   Live Preview Overview of PHP Debug Features Z-Ray is the only PHP debugging solution that provides: Under-the-hood PHP debug capabilities Page request details for all scripts involved Mobile and Web Services debugging capabilities Live Support functionality to troubleshoot user problems in real time Application support for WordPress, Drupal, and Magento Framework support for Zend Framework, Symfony and Laravel Custom app and framework support via Z-Ray extensibility API Production snapshots All information shown inside your browser       Framework specific information and Community-Driven Plugins Watch Video Live Preview Get insight into Magento Blocks, Events, Handlers, Requests and more Learn more > Watch Video Live Preview Get insight into Drupal Functions, Modules, Blocks and more Watch Video Live Preview  Get insight into WordPress Cache Objecs, Crons, Plugins and more Learn more > Watch Video Live Preview Get insight into Zend Framework Config, Events, Modules and more Learn more > Watch Video Live Preview Get insight into Laravel Events, Sessions, Routes and more Watch Video Live Preview Coming Soon! Or, build your own app-specific extension with the Z-Ray Extensibility API! Watch Video The new Zend Gallery aggregates and organizes all Z-Ray extensions and Zend Server plugins in an easy-to-use interface. The latest release introduces new plugins for Joomla, Doctrine2, Redis, OPcache, MariaDB, and LoS Modules!  View Gallery   Debug. Optimize. Monitor. Page Requests Inspect the requests sent from your page to the webserver, view their response, method, path and the time they took.    Errors and Warnings Analyze information related to errors generated during the page request by PHP itself or by its core functions.    Monitor Events Review the list of events triggered by a request, alerting you about PHP-errors, high memory usage, slow request execution and more.   Database Queries Get all the information related to SQL queries executed by the page request including result of the query, execution time and more.   Mobile and API Debugging With Z-Ray live you can easily debug mobile and web services requests originating from a browser, mobile device or machine-to-machine communications. The Z-Ray panel displays all the critical information related to any request that can be analysed to efficiently identify the weak spots in your PHP code. Z-Ray has been further improved and now allows you to look into traces of past requests using the new Z-Ray History page. You can also analyze CLI calls.     Production Snapshots of URLs Zend Server collects and presents information on some of the most interesting URLs on your Web server, giving you strong insight on critical URLs, such as the slowest, poorest performing, and most popular URLs.  Full Z-Ray snapshots for these URLs provides you with game-changing PHP Debug capabilities and unprecedented insight into what real-world requests look like, coming from real users. Support for Application end-users The Live Support functionality makes it easier to troubleshoot problems with live end-users in real time, addressing issues that are not otherwise visible or reproducible. A specific user’s session can be Z-Ray enabled, tracked and analyzed without exposing any sensitive information. The combination of these two features allows developers to get deep insights into a specific user’s requests without affecting the overall server performance and without disclosing sensitive information.     Download Now Products & Solutions Products Zend Server Zend Studio Zend Guard PHP Developer Suite Apigility Zend Framework Solutions Continuous Delivery Cloud Solutions IBM i Solutions PHP Debugger PHP Server PHP IDE PHP Encoding/Decoding PHP Development Tools Training Training PHP and ZF Course Catalog Help Me Choose Training Bundles PHP Training Schedule PHP Basics Training PHP Advanced Training PHP Security Training Non PHP Programmers Training PHP 7 Training ZF2 Basic Training ZF2 Advanced Training Certification PHP Certification Zend Framework 1 Certification Zend Framework 2 Certification Zend Certified Engineer Directory Services & Support Services Continuous Delivery Application Audit & Migration Start with PHP Zend Server Implementation Custom Implementation Support My Account Knowledgebase Forums Product Documentation Resources Topics Continuous Delivery PHP Leadership Zend Server Zend Studio Zend Framework Resources Newsletter White Papers and Surveys Zend Developer Zone PHP 7 PHP 7 Performance Webinars and Events Blog Webinars Events ZendCon Try & Buy Try Now Zend Server on Azure Zend Server Download Zend Studio Zend Guard Buy Now Zend Server Zend Studio Zend Guard Zend Certifications Zend Training Courses Partners Solution Partners Training Partners Online Resellers Affilate Network Strategic Partners About Zend Company Overview Community Contact Zend Careers Newsroom Privacy Policy Terms & Conditions Contact Us Site Map Zend Technologies Ltd 2015. All rights reserved. Submit"	"null"	"null"	"A debug and profile tool for Zend Server."	"true"
"Build Tools"	"Bob"	"https://github.com/CHH/bob"	"A simple project automation tool."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"92"	"6"	"3"	"GitHub - CHH/bob: Hi I'm Bob! I'm a tiny and messy build tool for PHP projects Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 92 Fork 3 CHH/bob Code Issues 3 Pull requests 0 Pulse Graphs Hi I'm Bob! I'm a tiny and messy build tool for PHP projects 274 commits 2 branches 4 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master release/1.0.0alpha3 Nothing to show v1.0.0alpha3 v1.0.0alpha2 v1.0.0alpha1 v0.1.0 Nothing to show New pull request Latest commit 69ba915 Nov 28, 2013 CHH Fail on composer error Permalink Failed to load latest commit information. bin Fail on composer error Nov 28, 2013 lib Fail on composer error Nov 28, 2013 tests Add missing test fixtures Jan 20, 2013 .gitattributes Do not export bob.phar in Github tarballs for Packagist Jan 9, 2013 .gitignore Use local composer executable through TaskLibrary Nov 28, 2013 .travis.yml Disable 5.5 on Travis-CI Jan 22, 2013 LICENSE.txt Added License Nov 28, 2011 README.md Put ""Hello World"" example more front and center Apr 15, 2013 bob_config.php Use local composer executable through TaskLibrary Nov 28, 2013 composer.json Use fileutils ~1.0 Feb 12, 2013 composer.lock Update dependencies Nov 28, 2013 phpunit.xml.dist added test task Jan 2, 2012 README.md Bob, your friendly builder Hello World Put this in a file named bob_config.php in your project's root: <?php  namespace Bob\BuildConfig;  task('default', ['hello']);  task('hello', function() {     echo ""Hello World!\n""; }); Run this on your shell: $ php composer.phar require chh/bob:~1.0@dev $ vendor/bin/bob  What is Bob? This is Bob. Bob is a lightweight project automation tool in PHP similar to Rake. Bob can be used as general build tool, but really shines when used in PHP projects as you are capable of reusing existing Application Code and Libraries in your buildfiles. How Bob compares to Pake: Bob uses a set of namespaced functions for the DSL, so PHP 5.3 is a must. If you need 5.2.x support, look at Pake. Bob's task definitions directly take a closure for the task's body, instead of performing magic with functions named run_<task name>. Bob has no file finder similar to pakeFinder, if you need this just use the Symfony Finder. How Bob compares to Phing: Bob does not use XML config files to define tasks. I think build files should be written in the language used to write the project itself so the barrier to contribution to build files is as low as possible. Also I think it's quite hilarious to use XML for a DSL with logic and such. Bob has nothing like plugins. To add new functions to Bob's DSL just put them into the Bob\BuildConfig namespace and require the file somehow at the beginning of your build file. Simply put: Bob's build configs are only PHP. Bob has no rich set of provided tasks and I do not plan to add this. Bob is lightweight. Getting Started Install Prerequisites Bob needs at least PHP 5.3.2 to run. If you plan to hack on Bob, please make sure you have set phar.readonly to Off in your php.ini. Otherwise you will have a tough luck creating a PHAR package of Bob. Install into a Composer-enabled Project (recommended) Add the chh/bob package to the require-dev section in your composer.json: {     ""require-dev"": {         ""chh/bob"": ""1.0.*@dev""     } }  Then run composer install --dev. You can invoke Bob with: php vendor/bin/bob  or: ./vendor/bin/bob  System-wide install (Unix-like OS only) To do a system-wide install, download either a Release or clone the Repository with: $ git clone git://github.com/CHH/bob.git $ cd Bob  To install all of Bob's dependencies download Composer and run composer install: $ wget http://getcomposer.org/composer.phar php composer.phar install  Then run php bin/bob install and you're done. By default the bob command is created in /usr/local/bin. To change this set a PREFIX environment variable, the command is then created in $PREFIX/bin. Prepare your project You can output a usage message by running $ php vendor/bin/bob --help  First run in your projects root directory Bob with the --init flag. This creates an empty bob_config.php with one example task: $ php vendor/bin/bob --init  Bob loads your tasks from a special file named bob_config.php in your project's root directory. Bob also includes all files found in a directory named bob_tasks, in the same directory as your bob_config.php. Files loaded from bob_tasks are treated the same way as regular Bob configs. It's important that you declare that this file belongs to the Bob\BuildConfig namespace with namespace Bob\BuildConfig;, otherwise the DSL functions are not available. Hint: It doesn't matter if you're in a sub-directory of your project, Bob will find your bob_config.php by wandering up the directory tree. Now let's define our first task. This task will output ""Hello World"": task('hello', function() {     println('Hello World'); });  Tasks are run by using their name as argument(s) on the command line: $ php vendor/bin/bob hello  When Bob is invoked without tasks it tries to invoke the default task. To set a task as default task assign the task as prerequisite of the default task: task('default', array('hello'));  You know, tasks should be self-documenting, you really don't want a manual for your build config or do you? Bob provides the desc function for that. Let's add some text to our task, which describes what the task is all about: desc('Prints Hello World to the Command Line'); task('hello', function() {     println('Hello World'); });  To view all tasks and their descriptions pass the --tasks flag: $ php vendor/bin/bob --tasks bob hello # Prints Hello World to the Command Line  To see more examples for how Bob can be used, simply look into Bob's bob_config.php. It contains all configuration to create Bob's build artifacts, for example the bob.phar and the composer config. File Tasks A file task is a special kind of task, which gets only run if either the target (the product of some operation) does not exist, or the prerequisites are newer than the target. So file tasks are very handy if you've some artifacts which are generated from other files, and which you don't want to regenerate if nothing has changed. For example: Let's write a task which concatenates three input files to one output file. First we have to create the prerequisites: $ echo ""foo\n"" > file1.txt $ echo ""bar\n"" > file2.txt $ echo ""baz\n"" > file3.txt  Then put this into your bob_config.php: fileTask('concat.txt', array('file1.txt', 'file2.txt', 'file3.txt'), function($task) {     println(""Concatenating"");     $concat = '';      foreach ($task->prerequisites as $file) {         $concat .= file_get_contents($file);     }      @file_put_contents($task->name, $concat); });  Let's run this task: $ php vendor/bin/bob concat.txt Concatenating  This will result in a concat.txt file in your project root: $ cat concat.txt foo bar baz  Let's run it again, without modifying the prerequisites: $ php vendor/bin/bob concat.txt  See it? The callback was not run, because the prerequisites were not modified. Let's verify this: $ touch file1.txt $ php vendor/bin/bob concat.txt Concatenating  The prerequisites of a file task are also resolved as task names, so they can depend on other file tasks too. Or you can put regular task names into the prerequisites, but then you've to be careful to not accidentally treat them as files when looping through all prerequisites. Packaging tasks for reusability Ever did write a collection of tasks which you want to put into a package and reuse across projects? Enter Task Libraries. All task libraries implement the \Bob\TaskLibraryInterface which defines two methods: register(\Bob\Application $app): Is called when the library is registered in the app. boot(\Bob\Application $app): is called just before the Bob is run on the command line. Register your tasks here. Here's a small example which registers a test task which uses PHPUnit: <?php  use Bob\Application; use Bob\TaskLibraryInterface; use Bob\BuildConfig as b;  class TestTasks implements TaskLibraryInterface {     function register(Application $app)     {}      function boot(Application $app)     {         $app->fileTask(""phpunit.xml"", array(""phpunit.dist.xml""), function($task) {             copy($task->prerequisites->current(), $task->name);         });          $app->task(""test"", array(""phpunit.xml""), function($task) {             b\sh(""./vendor/bin/phpunit"");          })->description = ""Runs the test suite"";     } } You can use task libraries by calling the register function within your build scripts: <?php  namespace Bob\BuildConfig;  register(new TestTasks); You will now see the test task when you run ./vendor/bin/bob --tasks. Hacking on Bob There are lots of ways to improve Bob, but the most useful for me is to simply submit Issues to the Issue Tracker. Contributing Code I'm using the Zend Framework Coding Standard in Bob and so should you when contributing code. Actually I'm using a loose version of it, the notable differences are: I'm treating the public keyword as optional in functions. var is okay for defining public instance variables. Documentation The Code Documentation is all done with Tomdoc, though there isn't anything generated for now. Testing I'm not requiring unit tests for contributions, though functionality which affects the command line tool should be at least tried a couple of times. This shouldn't prevent you from writing Unit Tests though. I'm using PHPUnit for this purpose. There's also a test task which runs phpunit (this handles the copying the phpunit.dist.xml to phpunit.xml too). I'm recommending php-build for doing tests with multiple versions of PHP. Building When you've done some changes and want to regenerate the bob.phar, simply run Bob on itself: $ php bin/bob.php  To run only the Test Suite: $ php bin/bob.php test  (In case you wonder that the PHAR gets sometimes not regenerated: It's only regenerated when the actual source files for the archive change.) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CHH/bob"	"A simple project automation tool."	"true"
"Build Tools"	"Box"	"https://github.com/box-project/box2"	"A utility to build PHAR files."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"874"	"43"	"55"	"GitHub - box-project/box2: An application for building and managing Phars. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 43 Star 874 Fork 55 box-project/box2 Code Issues 18 Pull requests 3 Wiki Pulse Graphs An application for building and managing Phars. http://box-project.github.io/box2/ 329 commits 4 branches 58 releases 20 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 2.0 Switch branches/tags Branches Tags 1.0 2.0 gh-pages master Nothing to show 2.7.3 2.7.2 2.7.1 2.7.0 2.6.1 2.6.0 2.5.3 2.5.2 2.5.1 2.5.0 2.4.4 2.4.3 2.4.2 2.4.1 2.4.0 2.3.0 2.2.1 2.2.0 2.1.0 2.0.0 2.0.0-rc.2 2.0.0-rc.1 2.0.0-beta.2 2.0.0-beta.1 2.0.0-alpha.4 2.0.0-alpha.3 2.0.0-alpha.2 2.0.0-alpha.1 1.0.9 1.0.8 1.0.7 1.0.6 1.0.5 1.0.5+build.1 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 1.0.0-rc.4 1.0.0-rc.3 1.0.0-rc.2 1.0.0-rc.1 1.0.0-beta.4 1.0.0-beta.3 1.0.0-beta.2 1.0.0-beta.1.3 1.0.0-beta.1.2 1.0.0-beta.1.1 1.0.0-beta.1 1.0.0-alpha.7 1.0.0-alpha.6 1.0.0-alpha.6+build.1 1.0.0-alpha.5 1.0.0-alpha.4 1.0.0-alpha.3 1.0.0-alpha.2 1.0.0-alpha.1 Nothing to show New pull request Latest commit ffa81c1 Jul 8, 2016 kherge committed on GitHub Merge pull request #144 from keradus/symfony_components_3.x … Allow to use Symfony 3.x components Permalink Failed to load latest commit information. bin Supporting some functionality without phar extension. Jul 23, 2013 res Adding an import option. (closes #104) Feb 24, 2016 src Outputting a message when no archive is generated. (fixes #134) Mar 21, 2016 .gitignore Ignoring GPG signatures. Mar 21, 2016 .travis.yml Improve the travis setup Sep 10, 2015 Gofile Adding build command. Jun 17, 2013 LICENSE Updating year on license. Mar 15, 2013 README.md Mention how to verify box.phar signature via GPG May 4, 2016 box.json.dist Switching to GitHub URLs. Aug 31, 2015 composer.json Allow to use Symfony 3.x components May 21, 2016 phpunit.xml.dist Defining BOX_PATH in bootstrap for testing. Mar 18, 2013 README.md Box What is it? The Box application simplifies the Phar building process. Out of the box (no pun intended), the application can do many great things: Add, replace, and remove files and stubs in existing Phars. Extract a whole Phar, or cherry pick which files you want. Retrieve information about the Phar extension, or a Phar file. List the contents of a Phar. Verify the signature of an existing Phar. Generate RSA (PKCS#1 encoded) private keys for OpenSSL signing. Extract public keys from existing RSA private keys. Use Git tags and short commit hashes for versioning. Since the application is based on the Box library, you get its benefits as well: On the fly search and replace of placeholders. Compact file contents based on file type. Generate custom stubs. How do I get started? You can use Box in one of three ways: As a Phar (Recommended) You may download a ready-to-use version of Box as a Phar: $ curl -LSs https://box-project.github.io/box2/installer.php | php The command will check your PHP settings, warn you of any issues, and the download it to the current directory. From there, you may place it anywhere that will make it easier for you to access (such as /usr/local/bin) and chmod it to 755. You can even rename it to just box to avoid having to type the .phar extension every time. $ box --version Whenever a new version of the application is released, you can simply run the update command to get the latest version: $ box update As a Global Composer Install This is probably the best way when you have other tools like phpunit and other tools installed in this way: $ composer global require kherge/box --prefer-source As a Composer Dependency You may also install Box as a dependency for your Composer managed project: $ composer require --dev kherge/box (or) {     ""require-dev"": {         ""kherge/box"": ""~2.5""     } } Be aware that using this approach requires additional configuration steps to prevent Box's own dependencies from accidentally being added to your Phar, causing file size bloat. You can find more information about this issue on the wiki. Once you have installed the application, you can run the help command to get detailed information about all of the available commands. This should be your go-to place for information about how to use Box. You may also find additional useful information on the wiki. If you happen to come across any information that could prove to be useful to others, the wiki is open for you to contribute. $ box help Creating a Phar To get started, you may want to check out the example application that is ready to be built by Box. How your project is structured is entirely up to you. All that Box requires is that you have a file called box.json at the root of your project directory. You can find a complete and detailed list of configuration settings available by seeing the help information for the build command: $ box help build You may find example configuration files for popular projects on the wiki. Once you have configured your project using box.json (or box.json.dist), you can simply run the build command in the directory containing box.json: $ box build -v The -v option enabled verbose output. This will provide you with a lot of useful information for debugging your build process. Once you are satisfied with the results, I recommend not using the verbose option. It may considerably slow down the build process. Contributing You can contribute in one of three ways: File bug reports using the issue tracker. Answer questions or fix bugs on the issue tracker. Contribute new features or update the wiki. The code contribution process is not very formal. You just need to make sure that you follow the PSR-0, PSR-1, and PSR-2 coding guidelines. Any new code contributions must be accompanied by unit tests where applicable. GPG Signature You can download Kevin Herrera's public key and verify the signature (box.phar.sig) of the box.phar. gpg --keyserver hkp://pgp.mit.edu --recv-keys 41515FE8 gpg --verify box.phar.sig box.phar  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/box-project/box2"	"A utility to build PHAR files."	"true"
"Build Tools"	"Phake"	"https://github.com/jaz303/phake"	"A rake PHP clone library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"380"	"21"	"36"	"GitHub - jaz303/phake: A rake/make clone for PHP 5.3 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 380 Fork 36 jaz303/phake Code Issues 9 Pull requests 7 Pulse Graphs A rake/make clone for PHP 5.3 122 commits 1 branch 4 releases Fetching contributors PHP 99.2% Shell 0.8% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.6.0 v0.5.2 v0.5.1 v0.5.0 Nothing to show New pull request Latest commit b5d58f2 Jun 22, 2016 jaz303 committed on GitHub Merge pull request #62 from QoboLtd/issue-61/stderr … Print fatal errors to STDERR (fixes #61) Permalink Failed to load latest commit information. bin Move bin logic to phake\Bin Aug 9, 2013 example put machinery in place for hiding tasks Apr 20, 2014 lib Print fata errors to STDERR (fixes #61) Jun 22, 2016 tests Merge branch 'orbgrp-feature/cycle-detection' Oct 7, 2014 .gitignore Initial revision Feb 8, 2009 .travis.yml Add skeleton for PHPUnit tests and travis Aug 20, 2013 Phakefile Use phake to build its own phar archive Aug 9, 2013 README.markdown Remove known bug! Yay! Oct 7, 2014 composer.json Remove composer autoload files Dec 21, 2013 phake_completion.sh Fix completion if word-to-complete contains colon (:) Sep 19, 2012 phpunit.xml.dist Add skeleton for PHPUnit tests and travis Aug 20, 2013 README.markdown phake - Rake/Make for PHP 5.3 © 2010 Jason Frame [ jason@onehackoranother.com / @jaz303 ] Released under the MIT License. A wee clone of Ruby's rake for PHP 5.3. Uses closures for ultimate coolness. Questions abut phake? Come and chat in #phake on Freenode! Usage Download Create a Phakefile in the current directory or a parent directory Invoke ./phake task:name to invoke task or ./phake -T to list defined tasks Defining Tasks Define tasks like this: task('dependency1', function() {     echo ""i will run first!\n""; });  task('dependency2', function() {     echo ""i will run second!\n""; });  task('task_name', 'dependency1', 'dependency2', function() {     echo ""i will run last!\n""; });  This task would be invoked from the command line by ./phake task_name Task bodies are optional if you want to create some sort of ""super-task"" that just invokes a bunch of others: task('foo', 'dep1', 'dep2');  And multiple bodies can be added to tasks, all of which will be executed when the task is invoked: task('foo', function() { echo ""task work item 1\n""; }); task('foo', function() { echo ""task work item 2\n""; });  Grouping Tasks Like Rake, we can group tasks: group('db', function() {     task('init', function() {         echo ""i'm initialising the database\n"";     }); });  This would be invoked by ./phake db:init Describing Tasks Call desc() immediately before defining a task to set its description: desc(""Initialises the database""); task('db_init', function() { echo ""oh hai it's a database\n""; });  Output from ./phake -T: db_init    Initialises the database  After/Before Blocks Sometimes you may want to specify that some code should run before or after a task (distinct from dependencies), a bit like Capistrano. Phake supports this: before('foo', function() { ... }); after('baz:bar', function() { ... });  Task Arguments Phake allows arguments to specified on the command line: # Execute task `quux` with the given args ./phake quux name=Jason city=Glasgow  This format must be matched exactly; do not put spaces between = and the argument name/value. If you need to put spaces in the argument value, place the entire assignment in quotes. Arguments are made available to tasks by the application object's ArrayAccess implementation: task('task_with_args', function($app) {     $name = $app['name'];     $city = $app['city'];     // do some stuff... });  Aborting Execution To abort execution of a task sequence, simply throw an exception. desc('Demonstrate failure'); task('fail', function() {     throw new Exception; });  Running phake fail will yield: - jason@disco phake % ./bin/phake fail (in /Users/jason/dev/projects/phake) aborted! Exception   (See full trace by running task with --trace)  A Somewhat More Complete Example This is what a complete Phakefile might look like. It also highlights some of the more complex name resolution issues arising when dealing with groups. <?php desc('Load the application environment'); task('environment', function() {     echo ""I am the outer environment. I should run first.\n""; });  desc('Initialises the database connection'); task('database', function() {     echo ""I am initialising the database...\n""; });  group('test', function() {      // 'environment' dependency for this task is resolved locally to     // task in same group. There is no 'database' task defined in this     // group so it drops back to a search of the root group.     desc('Run the unit tests');     task('units', 'environment', ':environment', 'database', function() {         echo ""Running unit tests...\n"";     });      // another level of nesting; application object is passed to all     // executing tasks     group('all', function() {         desc('Run absolutely every test everywhere!');         task('run', 'test:units', function($application) {             echo ""All tests complete! ($application)\n"";         });     });  });  // duplicate group definitions are merged group('test', function() {      // duplicate task definitions are merged     // (although the first description takes precedence when running with -T)     desc(""You won't see this description"");     task('units', function() {         echo ""Running a second batch of unit tests...\n"";     });      // use ':environment' to refer to task in root group     // we currently have no cyclic dependency checking, you have been warned.     task('environment', ':environment', function() {         echo ""I am the inner environment. I should run second.\n"";     });  });  task('default', 'test:all:run'); ?>  Here's the output from ./phake (implied task to run is default): jason@ratchet phake [master*] $ ./phake (in /Users/jason/dev/projects/phake) I am the outer environment. I should run first. I am the inner environment. I should run second. I am initialising the database... Running unit tests... Running a second batch of unit tests... All tests complete! (<phake\Application>)  And the corresponding output from phake -T: jason@ratchet phake [master*] $ ./phake -T (in /Users/jason/dev/projects/phake) database        Initialises the database connection environment     Load the application environment test:all:run    Run absolutely every test everywhere! test:units      Run the unit tests  Bash Autocompletion Bashkim Isai has created phake-autocomplete, a bash-completion script for phake task names. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jaz303/phake"	"A rake PHP clone library."	"true"
"Build Tools"	"Phing"	"http://www.phing.info/"	"A PHP project build system inspired by Apache Ant."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"659"	"56"	"243"	"GitHub - phingofficial/phing: PHing Is Not GNU make; it's a PHP project build system or build tool based on  Apache Ant. Please refer to the Phing site for the roadmap and issue tracking. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 56 Star 659 Fork 243 phingofficial/phing Code Pull requests 20 Pulse Graphs PHing Is Not GNU make; it's a PHP project build system or build tool based on Apache Ant. Please refer to the Phing site for the roadmap and issue tracking. http://www.phing.info 3,075 commits 3 branches 44 releases Fetching contributors PHP 96.9% XSLT 2.9% Batchfile 0.1% Shell 0.1% PLpgSQL 0.0% SQLPL 0.0% PHP XSLT Batchfile Shell PLpgSQL SQLPL Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.0 master unstable-3.0 Nothing to show 2.14.0 2.13.0 2.12.0 2.11.0 2.10.1 2.10.0 2.9.1 2.9.0 2.8.2 2.8.1 2.8.0 2.7.0 2.6.1 2.6.0 2.5.0 2.4.14 2.4.13 2.4.12 2.4.11 2.4.10 2.4.9 2.4.8 2.4.7.1 2.4.7 2.4.6 2.4.5 2.4.4 2.4.3 2.4.2 2.4.1 2.4.0 2.4.0RC3 2.4.0RC2 2.4.0RC1 2.3.3 2.3.2 2.3.1 2.3.0 2.3.0RC2 2.3.0RC1 2.2.0 2.2.0RC3 2.2.0RC2 2.2.0RC1 Nothing to show New pull request Latest commit 35d7016 Jul 12, 2016 kenguest committed with mrook Fix bug with hgupdate branch being ignored. (#508) Permalink Failed to load latest commit information. bin Removes executable bit. (#505) Jun 2, 2016 build Add an exit status code, to detect any initialization fail. Feb 23, 2016 classes/phing Fix bug with hgupdate branch being ignored. (#508) Jul 12, 2016 composer/bin Fix - use composer autoload Mar 22, 2013 docs Added escape attribute for ExecAttribute. (#506) Jun 12, 2016 etc Removes executable bit. (#505) Jun 2, 2016 test Removes executable bit. (#505) Jun 2, 2016 .gitattributes Export ignore docs file Dec 30, 2015 .gitignore Excluded phing related stuff May 2, 2016 .gitmodules Remove Parallel submodule Aug 25, 2012 .travis.php.ini Increase memory limit Aug 12, 2013 .travis.sh Add --prefer-dist Jul 29, 2015 .travis.yml make 7.0 tests permanent Mar 27, 2016 CHANGELOG.md Update changelog Mar 10, 2016 CREDITS.md - Added the attribute 'preservePermissions' to the CopyTask providing… Nov 9, 2012 LICENSE Documentation commits in preparation for release. May 11, 2008 README.md typofix - https://github.com/vlajos/misspell_fixer Aug 7, 2015 composer.json Fixes #566 - Add set of tasks for working with Mercurial May 18, 2016 composer.lock Fixes #566 - Add set of tasks for working with Mercurial May 18, 2016 README.md P H I N G Master: (PH)ing (I)s (N)ot (G)NU make; it's a PHP project build system or build tool based on Apache Ant. You can do anything with it that you could do with a traditional build system like GNU make, and its use of simple XML build files and extensible PHP ""task"" classes make it an easy-to-use and highly flexible build framework. Features include running PHPUnit and SimpleTest unit tests (including test result and coverage reports), file transformations (e.g. token replacement, XSLT transformation, Smarty template transformations), file system operations, interactive build support, SQL execution, CVS/SVN/GIT operations, tools for creating PEAR packages, documentation generation (DocBlox, PhpDocumentor) and much, much more. If you find yourself writing custom scripts to handle the packaging, deploying, or testing of your applications, then we suggest looking at Phing. Phing comes packaged with numerous out-of-the-box operation modules (tasks), and an easy-to-use OO model to extend or add your own custom tasks. Phing provides the following features: Simple XML buildfiles Rich set of provided tasks Easily extendable via PHP classes Platform-independent: works on UNIX, Windows, Mac OSX No required external dependencies Built for PHP5 The Latest Version Details of the latest version can be found on the Phing homepage https://www.phing.info/. Supported PHP versions We aim to keep Phing 2.x compatible with PHP 5.2 and higher. However, as this is getting increasingly hard to test, we encourage users to upgrade to PHP 5.3 or higher. Installation PEAR The preferred method to install Phing is through PEAR and the Phing PEAR channel. You can install Phing by adding the pear.phing.info channel to your PEAR environment and then installing Phing using the phing channel alias and phing package name:    $ pear channel-discover pear.phing.info    $ pear install [--alldeps] phing/phing  Composer Install Phing by adding a dependency to phing/phing to the require-dev or require section of your project's composer.json configuration file, and running 'composer install':    {        ""require-dev"": {            ""phing/phing"": ""2.*""        }    }  Phar Download the Phar archive. The archive can then be executed by running:    $ php phing-latest.phar  Running the (unit) tests To successfully run all Phing tests, the following conditions have to be met: PEAR installed, channel ""pear.phing.info"" discovered Packages ""python-docutils"" and ""subversion"" installed php.ini setting ""phar.readonly"" set to ""Off"" Then, perform the following steps (on a clone/fork of Phing):    $ composer install    $ cd test    $ ../bin/phing  Documentation Documentation is available in various formats in the docs/docbook5/en/output directory (generated from DocBook sources located in docs/docbook5/en/source). For online documentation, you can also visit the Phing website: https://www.phing.info/ Licensing This software is licensed under the terms you may find in the file named ""LICENSE"" in this directory. Thank you for using PHING! Contact Twitter: @phingofficial Website: https://www.phing.info IRC: Freenode, #phing GitHub: https://www.github.com/phingofficial/phing E-mail: dev-subscribe@phing.tigris.org (mailing list) Contributing We welcome contributions! Please keep your pull requests clean and concise: squash commits, don't introduce unnecessary (whitespace) changes, use verbose commit messages. Phing's source code is formatted according to the PSR-2 standard. Donations If you like Phing, we accept donations through Flattr. All donations will be used to help cover the costs for hosting the Phing site. PhpStorm License If you are contributing code to the Phing project and want to use PhpStorm for development feel free to ask Ben (bschultz.bb@gmail.com) for our Open Source License. Proud to use: Intelligent PHP IDE for coding, testing and debugging with pleasure Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phingofficial/phing"	"A PHP project build system inspired by Apache Ant."	"true"
"Task Runners"	"Bldr"	"http://bldr.io/"	"A PHP Task runner built on Symfony components."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"206"	"12"	"22"	"GitHub - bldr-io/bldr: Awesome Task Runner Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 206 Fork 22 bldr-io/bldr Code Issues 14 Pull requests 0 Pulse Graphs Awesome Task Runner http://bldr.io 505 commits 2 branches 80 releases Fetching contributors PHP 99.8% Shell 0.2% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master revert-129-hotfix-ignore-bldr-folder Nothing to show 9.1.2 9.1.1 9.1.0 9.0.2 9.0.1 9.0.0 8.4.0 8.3.0 8.2.0 8.1.2 8.1.1 8.1.0 8.0.3 8.0.2 8.0.1 8.0.0 7.3.3 7.3.2 7.3.1 7.3.0 7.2.1 7.2.0 7.1.2 7.1.1 7.1.0 7.0.5 7.0.4 7.0.3 7.0.2 7.0.1 7.0.0 6.5.0 6.4.0 6.3.3 6.3.2 6.3.1 6.3.0 6.2.0 6.1.1 6.1.0 6.0.0 5.0.3 5.0.2 5.0.1 5.0.0 4.2.0 4.1.4 4.1.3 4.1.2 4.1.1 4.1.0 4.0.0 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 2.1.1 2.1.0 2.0.8 2.0.7 2.0.6 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 1.4.1 1.4.0 1.3.3 1.3.2 1.3.1 1.3.0 1.2.0 1.1.0 1.0.1 1.0.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit 60bc51f Jun 13, 2016 aequasi committed on GitHub Merge pull request #154 from ekho/recursive-inheritance … Recursive inheritance Permalink Failed to load latest commit information. .bldr bin Adding parallel task Oct 29, 2015 docs script src tests .bldr.yml.dist .editorconfig .gitignore .gush.yml .travis.yml CHANGELOG.md CONTRIBUTING.md LICENSE README.md box.json.dist composer.json composer.lock phpcs.xml phpunit.xml.dist README.md Bldr Simplified Build System/Task Runner Uses Yaml, JSON, XML, PHP, or INI for configs Quick Usage To develop, run ./script/bootstrap, and then ./script/test to run the tests. Documentation Documentation is over at http://docs.bldr.io/en/latest/ Badges Tests are broken right now... Travis: - Until codeship supports PR's Codeship: Scrutinizer: The Waffle Board Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bldr-io/bldr"	"A PHP Task runner built on Symfony components."	"true"
"Task Runners"	"Jobby"	"https://github.com/jobbyphp/jobby"	"A PHP cron job manager without modifying crontab."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"461"	"39"	"77"	"GitHub - jobbyphp/jobby: Manage all your cron jobs without modifying crontab. Handles locking, logging, error emails, and more. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 39 Star 461 Fork 77 jobbyphp/jobby Code Issues 9 Pull requests 0 Pulse Graphs Manage all your cron jobs without modifying crontab. Handles locking, logging, error emails, and more. https://packagist.org/packages/hellogerard/jobby 180 commits 1 branch 20 releases 22 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v3.0.2 v3.0.1 v3.0.0 v2.2.0 v2.1.0 v2.0.13 v2.0.12 v2.0.11 v2.0.10 v2.0.9 v2.0.8 v2.0.7 v2.0.6 v2.0.5 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v1.0.0 Nothing to show New pull request Latest commit a0ce115 Apr 15, 2016 hellogerard Merge pull request #53 from Swader/patch-1 … Update BackgroundJob.php Permalink Failed to load latest commit information. bin Moved logic for running a job to separate file so BackgroundJob can b… Dec 7, 2015 resources Updated example to use Serializer and ""closure"" config key. Dec 7, 2015 src Update BackgroundJob.php Mar 23, 2016 tests Moved commands that are closures to ""closure"" option, so we don't hav… Dec 7, 2015 .gitignore Removed and ignored composer.lock Nov 6, 2015 .travis.yml [Travis] Not allowing PHP 7.0 to fail. Switch to running on new infra… Dec 7, 2015 CHANGELOG-2.1.md Added Changelog and Upgrade-instructions, which explain jobby minor-r… Jun 3, 2015 LICENSE Initial commit Oct 4, 2012 README.md Merge remote-tracking branch 'xabbuh/master' Feb 11, 2016 UPGRADE-2.1.md Added Changelog and Upgrade-instructions, which explain jobby minor-r… Jun 3, 2015 composer.json Apply actual changes for #49 Feb 11, 2016 phpunit.xml [PHPUnit] Simplify whitelist Nov 7, 2015 README.md Jobby, a PHP cron job manager Install the master jobby cron job, and it will manage all your offline tasks. Add jobs without modifying crontab. Jobby can handle logging, locking, error emails and more. NEW REPO: We have moved jobby to a Github org. Please update your remotes with git remote set-url origin https://github.com/jobbyphp/jobby.git. Features Maintain one master crontab job. Jobs run via PHP, so you can run them under any programmatic conditions. Use ordinary crontab schedule syntax (powered by the excellent cron-expression). Run only one copy of a job at a given time. Send email whenever a job exits with an error status. Run job as another user, if crontab user has sudo privileges. Run only on certain hostnames (handy in webfarms). Theoretical Windows support (but not ever tested) Example <?php   require_once __DIR__ . '/vendor/autoload.php';  $jobby = new Jobby\Jobby();  // Every job has a name $jobby->add('CommandExample', [     // Run a shell commands     'command'  => 'ls',      // Ordinary crontab schedule format is supported.     // This schedule runs every hour.     // You could also insert DateTime string in the format of Y-m-d H:i:s.     'schedule' => '0 * * * *',      // Stdout and stderr is sent to the specified file     'output'   => 'logs/command.log',      // You can turn off a job by setting 'enabled' to false     'enabled'  => true, ]);  $jobby->add('ClosureExample', [     // Invoke PHP closures     'closure'  => function() {         echo ""I'm a function!\n"";         return true;     },      // This function will run every other hour     'schedule' => '0 */2 * * *',      'output'   => 'logs/closure.log', ]);  $jobby->run(); Installation The recommended way to install Jobby is through Composer: $ composer require hellogerard/jobby  Then add the following line to your (or whomever's) crontab: * * * * * cd /path/to/project && php jobby.php 1>> /dev/null 2>&1  After Jobby installs, you can copy an example file to the project root. $ cp vendor/hellogerard/jobby/resources/jobby.php .  Supported Options Each job requires these: Key Type Description schedule string Crontab schedule format (man -s 5 crontab) or DateTime format (Y-m-d H:i:s) command string The shell command to run (exclusive-or with closure) closure Closure The anonymous PHP function to run (exclusive-or with command) The options listed below can be applied to an individual job or globally through the Jobby constructor. Global options will be used as default values, and individual jobs can override them. Option Type Default Description runAs string null Run as this user, if crontab user has sudo privileges debug boolean false Send jobby internal messages to 'debug.log' Filtering Options to determine whether the job should run or not environment string null or getenv('APPLICATION_ENV') Development environment for this job runOnHost string gethostname() Run jobs only on this hostname maxRuntime integer null Maximum execution time for this job (in seconds) enabled boolean true Run this job at scheduled times haltDir string null A job will not run if this directory contains a file bearing the job's name Logging Options for logging output string /dev/null Redirect stdout and stderr to this file dateFormat string Y-m-d H:i:s Format for dates on jobby log messages Mailing Options for emailing errors recipients string null Comma-separated string of email addresses mailer string sendmail Email method: sendmail or smtp or mail smtpHost string null SMTP host, if mailer is smtp smtpPort integer 25 SMTP port, if mailer is smtp smtpUsername string null SMTP user, if mailer is smtp smtpPassword string null SMTP password, if mailer is smtp smtpSecurity string null SMTP security option: ssl or tls, if mailer is smtp smtpSender string jobby@<hostname> The sender and from addresses used in SMTP notices smtpSenderName string Jobby The name used in the from field for SMTP messages Credits Developed before, but since inspired by whenever. Support this project Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jobbyphp/jobby"	"A PHP cron job manager without modifying crontab."	"true"
"Task Runners"	"Robo"	"https://github.com/Codegyre/Robo"	"A PHP Task runner with object-orientated configurations."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1280"	"77"	"157"	"GitHub - consolidation-org/Robo: Modern task runner for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 77 Star 1,280 Fork 157 consolidation-org/Robo Code Issues 63 Pull requests 13 Pulse Graphs Modern task runner for PHP http://robo.li 945 commits 45 branches 28 releases 67 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags annotation-command ask-in-task avoid-dynamicparams code-coverage collection-docs collection-tests collections-docs consolidation/robo coveralls docs-cleanup filesystem-capitalization filesystem-case fix-sniff formatters gh-pages git-stack jpstacey-bugfix/drupal-project-109-rename-across-filesystems load-all-tasks master moar-tests no-ask-in-task no-premature-exit passthrough-args process-hook progress-message refactor-gentask remove-generated revert-256-wrapper-task robo-beta rsync-oddity simulated-interface site sniffer-fixes standalone-scripts status-value-in-test stoponfail-default task-accessor task-builder-2 task-builder tasklib-2 tasklib type-safety use-message user-cancel yell-prefix Nothing to show 1.0.0-beta1 0.7.2 0.7.1 0.7.0 0.6.0 0.5.4 0.5.3 0.5.2 0.5.1 0.5.0 0.4.7 0.4.6 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 0.3.7 0.3.6 0.3.5 0.3.4 0.3.3 0.3.2 0.3.0 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit 6af485e Jul 6, 2016 greg-1-anderson committed on GitHub Merge pull request #374 from consolidation-org/collection-docs … Bring collections documentation up-to-date Permalink Failed to load latest commit information. build/logs Add build/logs directory. Apr 25, 2016 docs Merge pull request #374 from consolidation-org/collection-docs Jul 6, 2016 src Add missing 'inflect' in ImageMinify. Jul 1, 2016 tests Fix some miscapitalized references to 'FileSystem' (should be 'Filesy… Jul 5, 2016 .editorconfig Provide editorconfig file Mar 16, 2016 .gitignore Add --coverage-html option to ./robo test command. May 20, 2016 .travis.yml Add coveralls. Apr 25, 2016 CHANGELOG.md Use 'Filesystem' rather than 'FileSystem' consistently, to be in alig… May 20, 2016 CONTRIBUTING.md Fix example of sniff command. Mar 30, 2016 LICENSE Initial commit Jan 23, 2014 README.md Migrate more badges to new org Jul 1, 2016 RoboFile.php Test Runner May 22, 2016 codeception.yml updated deps, config fixed Apr 25, 2016 composer.json Maintain the version of the code coverage tool we have been using. Jun 30, 2016 composer.lock Maintain the version of the code coverage tool we have been using. Jul 1, 2016 robo Test Runner May 22, 2016 robo.phar improved phar publish script May 21, 2016 script.robo Standalone Robo scripts. Mar 9, 2016 README.md RoboTask Modern and simple PHP task runner inspired by Gulp and Rake aimed to automate common tasks: writing cross-platform scripts processing assets (less, sass, minification) running tests executing daemons (and workers) watching filesystem changes deployment with sftp/ssh/docker Installing Phar Download robo.phar > wget http://robo.li/robo.phar  To install globally put robo.phar in /usr/bin. chmod +x robo.phar && sudo mv robo.phar /usr/bin/robo  Now you can use it just like robo. Composer Run composer require consolidation/robo:~1 Use vendor/bin/robo to execute Robo tasks. Usage All tasks are defined as public methods in RoboFile.php. It can be created by running robo. All protected methods in traits that start with task prefix are tasks and can be configured and executed in your tasks. Examples The best way to learn Robo by example is to take a look into its own RoboFile or RoboFile of Codeception project Here are some snippets from them: Run acceptance test with local server and selenium server started. <?php class RoboFile extends \Robo\Tasks {      function testAcceptance($seleniumPath = '~/selenium-server-standalone-2.39.0.jar')     {        // launches PHP server on port 8000 for web dir        // server will be executed in background and stopped in the end        $this->taskServer(8000)             ->background()             ->dir('web')             ->run();         // running Selenium server in background         $this->taskExec('java -jar ' . $seleniumPath)             ->background()             ->run();          // loading Symfony Command and running with passed argument         $this->taskCommand(new \Codeception\Command\Run('run'))             ->arg('suite','acceptance')             ->run();     } } ?> If you execute robo you will see this task added to list of available task with name: test:acceptance. To execute it you shoud run robo test:acceptance. You may change path to selenium server by passing new path as a argument: robo test:acceptance ""C:\Downloads\selenium.jar""  Using watch task so you can use it for running tests or building assets. <?php class RoboFile extends \Robo\Tasks {      function watchComposer()     {         // when composer.json changes `composer update` will be executed         $this->taskWatch()->monitor('composer.json', function() {             $this->taskComposerUpdate()->run();         })->run();     } } ?> Cleaning logs and cache <?php class RoboFile extends \Robo\Tasks {     public function clean()     {         $this->taskCleanDir([             'app/cache'             'app/logs'         ])->run();          $this->taskDeleteDir([             'web/assets/tmp_uploads',         ])->run();     }  ?> This task cleans app/cache and app/logs dirs (ignoring .gitignore and .gitkeep files) Can be executed by running: robo clean  Creating Phar archive function buildPhar() {     $files = Finder::create()->ignoreVCS(true)->files()->name('*.php')->in(__DIR__);     $packer = $this->taskPackPhar('robo.phar');     foreach ($files as $file) {         $packer->addFile($file->getRelativePathname(), $file->getRealPath());     }     $packer->addFile('robo','robo')         ->executable('robo')         ->run(); } We need more tasks! Create your own tasks and send them as Pull Requests or create packages prefixed with robo- on Packagist. Credits Follow @robo_php for updates. Created by Michael Bodnarchuk @davert. License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Codegyre/Robo"	"A PHP Task runner with object-orientated configurations."	"true"
"Task Runners"	"Task"	"http://taskphp.github.io/"	"A pure PHP task runner inspired by Grunt and Gulp."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Task by taskphp Task Another PHP task runner. View project onGitHub Got a PHP project? Heard of Grunt and Gulp but don't use NodeJS? Task is a pure PHP task runner. Leverage PHP as a scripting language, and as your platform of choice. Use loads of nice features inspired by Grunt and Gulp (and Phing). Employ Symfony components for effortless CLI goodness. Extend with plugins. Ask us anything on Twitter at @taskphp. Example <?php  use Task\Plugin;  require 'vendor/autoload.php';  $project = new Task\Project('wow');  $project->inject(function ($container) {     $container['phpspec'] = new Plugin\PhpSpecPlugin;     $container['fs'] = new Plugin\FilesystemPlugin;     $container['sass'] = (new Plugin\Sass\ScssPlugin)         ->setPrefix('sass');     $container['watch'] = new Plugin\WatchPlugin; });  $project->addTask('welcome', function () {     $this->getOutput()->writeln('Hello!'); });  $project->addTask('test', ['phpspec', function ($phpspec) {     $phpspec->command('run')         ->setFormat('pretty')         ->setVerbose(true)         ->pipe($this->getOutput()); }]);  $project->addTask('css', ['fs', 'sass', function ($fs, $sass) {     $fs->open('my.scss')         ->pipe($sass)         ->pipe($fs->touch('my.css')); }]);  $project->addTask('css.watch', ['watch', function ($watch) {     $watch->init('my.scss')         ->addListener('modify', function ($event) {             $this->runTask('css', $this->getOutput());         })         ->start(); }]);  return $project;  Installation Add to your composer.json: ...     ""require"": {         ""task/task"": ""~0.5""     } ...  This will allow you to instantiate a Task\Project. To run tasks from the command line, install task/cli. You should probably do this now! There are 3 options for installation: #1 Composer global (recommended) $> composer global require task/cli ~0.2  If you haven't installed anything this way before you'll need to update your PATH: export PATH=$PATH:$HOME/.composer/vendor/bin  #2 Phar Download from Github: $> wget -O /usr/bin/task https://github.com/taskphp/cli/releases/download/v0.3.0/task.phar $> chmod +x /usr/bin/task  #3 Composer ... ""require-dev"": {     ""task/cli"": ""~0.2"" } ...  Run at ./vendor/bin/task. Usage The only requirements are that you implement a Taskfile that returns a Task\Project: <?php  # Include the task/task library and your dependencies. require 'vendor/autoload.php';  # Instantiate a project by giving it a name. $project = new Task\Project('foo');  # Return the project! return $project;  We suggest putting the Taskfile in the root of your project. The CLI package will look for a Taskfile in the current working directory, so cd in to your project and run: $> task foo version     --verbose        -v|vv|vvv Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug   --version        -V Display this application version.   --ansi              Force ANSI output.   --no-ansi           Disable ANSI output.   --no-interaction -n Do not ask any interactive question.  Available commands:   help Displays help for a command  list    Lists commands   shell  If you've used Symfony's Console component before this will look familiar! Your Task\Project is a Symfony\Component\Console\Application and so you have a pretty CLI application out of the box. Add a task: <?php  # Include the task/task library and your dependencies. require 'vendor/autoload.php';  # Instantiate a project by giving it a name. $project = new Task\Project('foo');  # Add a task $project->addTask('greet', function () {     # Write to stdout     $this->getOutput()->writeln('Hello, World!'); });  # Return the project! return $project;  As you can see, tasks are just Closures. To run it: $> task greet Hello, World!  Plugins Plugins are where the real work gets done. ...     ""require"": {         ""task/task"": ""~0.1"",         ""task/process"": ""~0.1""     } ...  <?php  use Task\Plugin\ProcessPlugin;  # Include the task/task library and your dependencies. require 'vendor/autoload.php';  # Instantiate a project by giving it a name. $project = new Task\Project('foo');  # Add your plugins to the project's DI container. $project->inject(function ($container) {     $container['ps'] = new ProcessPlugin; });  # Add a task. $project->addTask('greet', function () {     # Write to stdout.     $this->getOutput()->writeln('Hello, World!'); });  # Use the handy array syntax to inject plugins into tasks. $project->addTask('whoami', ['ps', function ($ps) {     # Use streams to pass data between plugins and interfaces.     $ps->build('whoami')->pipe($this->getOutput()); }]);  # Return the project! return $project;  $> task whoami mbfisher  This is a totally pointless example but it demonstrates some core concepts. DI Dependency injection is used to setup plugins and inject them into tasks. Project::inject allows you to fill a Pimple container up with anything you like. Injection Plugins are injected into tasks using Task\Injector. Instead of a Closure, pass Project::addTask an array with your task as the last element. The preceding elements should be IDs stored in the container; they will be retrieved and passed as arguments to the task. Streams Plugins are encouraged to use NodeJS-style streams for handling data flows. Task\Plugin\Stream\ReadableInterface provides read and pipe methods, Task\Plugin\Stream\WritableInterface provides a write method. In the example above ProcessPlugin::build returns a Task\Plugin\Process\ProcessBuilder, which implements ReadableInterface, allowing us to pipe a Task\Plugin\Console\Output\Output instance to it, which implements WritableInterface. Discussion See nikic's article on PHP over XML for a great argument for using pure PHP for configuration. Alternatives There's a few PHP task runners popping up: Bldr - http://bldr.io/ Robo - http://codegyre.github.io/Robo/ Download .zip file Download .tar.gz file Follow @taskphp This page was generated by GitHub Pages using the Architect theme by Jason Long. Plugins task/archive Build tar and zip archives task/box Run kherge/box commands task/console symfony/console tools task/filesystem symfony/filesystem and more task/phpspec Run PhpSpec tests task/phpunit Run PHPUnit tests task/process Subprocesses with symfony/process task/watch Filesystem event subscription Testimonials gaaah, just use bash! @glenjamin"	"null"	"null"	"A pure PHP task runner inspired by Grunt and Gulp."	"true"
"Navigation"	"Cartographer"	"https://github.com/tackk/cartographer"	"A sitemap generation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"277"	"15"	"12"	"GitHub - tackk/cartographer: A PHP sitemap generation tool. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 277 Fork 12 tackk/cartographer Code Issues 0 Pull requests 1 Pulse Graphs A PHP sitemap generation tool. http://tackk.github.io/cartographer/ 63 commits 2 branches 4 releases 4 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 1.1.0 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit 9f93849 May 1, 2015 dhrrgn Merge pull request #4 from romeOz/changed-flysystem-version-1.0 … Changed league/flysystem version: 0.5.* to 1.0.* Permalink Failed to load latest commit information. src ChangeFrequency class not found, when using only sitemap index Jan 23, 2015 tests Node Name was incorrect on sitemap index. Dummy May 2, 2014 .gitignore Initial Commit Apr 22, 2014 .scrutinizer.yml Scrutinizer Config update Apr 24, 2014 .travis.yml Add PHP 5.4 test, update the README a bit May 5, 2014 LICENSE Adding LICENSE Apr 22, 2014 README.md Fixed typos May 5, 2014 composer.json Changed league/flysystem version: 0.5 to 1.0. Feb 9, 2015 phpunit.xml.dist Initial Commit Apr 22, 2014 README.md Cartographer A sitemap generation tool for PHP following the Sitemap Protocol v0.9. Cartographer can handle Sitemaps of any size. When generating sitemaps with more than 50,000 entries (the limit), the sitemap becomes a ""map of maps"" (i.e. nested sitemaps). GitHub Repo: http://github.com/tackk/cartographer/ Documentation: http://tackk.github.io/cartographer/ Supported PHP/HHVM Versions PHP: >= 5.4 (including 5.6 beta1) HHVM: >= 3.0.0 Installation Composer CLI composer require tackk/cartographer:1.0.*  composer.json {     ""require"": {         ""tackk/cartographer"": ""1.0.*""     } } Basic Sitemap If you have a sitemap that is under 50,000 items, you can just use the Sitemap class, and avoid the Sitemap Generator. use Tackk\Cartographer\Sitemap; use Tackk\Cartographer\ChangeFrequency;  $sitemap = new Tackk\Cartographer\Sitemap(); $sitemap->add('http://foo.com', '2005-01-02', ChangeFrequency::WEEKLY, 1.0); $sitemap->add('http://foo.com/about', '2005-01-01');  // Write it to a file file_put_contents('sitemap.xml', (string) $sitemap);  // or simply echo it: header ('Content-Type:text/xml'); echo $sitemap->toString(); Output <?xml version=""1.0"" encoding=""UTF-8""?> <urlset xmlns=""http://www.sitemaps.org/schemas/sitemap/0.9"">   <url>     <loc>http://foo.com</loc>     <lastmod>2005-01-02T00:00:00+00:00</lastmod>     <changefreq>weekly</changefreq>     <priority>1</priority>   </url>   <url>     <loc>http://foo.com/about</loc>     <lastmod>2005-01-01T00:00:00+00:00</lastmod>   </url> </urlset> Basic Sitemap Index If you want to build a Sitemap Index, separate from the Sitemap Generator, you can! $sitemapIndex = new Tackk\Cartographer\SitemapIndex(); $sitemapIndex->add('http://foo.com/sitemaps/sitemap.1.xml', '2012-01-02'); $sitemapIndex->add('http://foo.com/sitemaps/sitemap.2.xml', '2012-01-02');  // Write it to a file file_put_contents('sitemap.xml', (string) $sitemapIndex);  // or simply echo it: header ('Content-Type:text/xml'); echo $sitemapIndex->toString(); Output <?xml version=""1.0"" encoding=""UTF-8""?> <sitemapindex xmlns=""http://www.sitemaps.org/schemas/sitemap/0.9"">   <url>     <loc>http://foo.com/sitemaps/sitemap.1.xml</loc>     <lastmod>2012-01-02T00:00:00+00:00</lastmod>   </url>   <url>     <loc>http://foo.com/sitemaps/sitemap.2.xml</loc>     <lastmod>2012-01-02T00:00:00+00:00</lastmod>   </url> </sitemapindex> Sitemap Factory The Sitemap Factory create Sitemaps and Sitemap Indexes and writes them to the Filesystem. Is is can be used to generate full Sitemaps with more than 50,000 URLs. If more than one sitemap is generated, it will create a Sitemap Index automatically. Instantiating The factory uses Flysystem to write the sitemaps. This means you can write the sitemaps to Local Disk, S3, Dropbox, wherever you want. <?php  use League\Flysystem\Filesystem; use League\Flysystem\Adapter\Local as LocalAdapter;  $adapter = new LocalAdapter(__DIR__.'/sitemaps'); $filesystem = new Filesystem($adapter); $sitemapFactory = new Tackk\Cartographer\SitemapFactory($filesystem);  Base URL The Base URL is used when generating the Sitemap Indexes, and for the returned entry point URL. You can set the Base URL: $sitemapFactory->setBaseUrl('http://foo.com/sitemaps/'); You can get the current base URL using getBaseUrl(). Creating a Sitemap To create a sitemap you use the createSitemap method. This method requires an Iterator as its only parameter. <?php  use League\Flysystem\Filesystem; use League\Flysystem\Adapter\Local as LocalAdapter;  $adapter = new LocalAdapter(__DIR__.'/sitemaps'); $filesystem = new Filesystem($adapter); $sitemapFactory = new Tackk\Cartographer\SitemapFactory($filesystem);  // Create an Iterator of your URLs somehow. $urls = get_url_iterator();  // Returns the URL to the main Sitemap/Index file $mainSitemap = $sitemapFactory->createSitemap($urls);  Return Value The two creation methods (createSitemap and createSitemapIndex) will return the URL of the root sitemap file. If there is only 1 sitemap created, it will return just that URL. If multiple sitemaps are created, then a Sitemap Index is generated and the URL to that is returned. List of Created Files You can get a list (array) of files the Factory has created by using the getFilesCreated method. $files = $sitemapFactory->getFilesCreated(); Running Tests This assumes you have ran composer update. From the repository root, run: vendor/bin/phpunit  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tackk/cartographer"	"A sitemap generation library."	"true"
"Navigation"	"KnpMenu"	"https://github.com/KnpLabs/KnpMenu"	"A menu library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"407"	"75"	"160"	"GitHub - KnpLabs/KnpMenu: Menu Library for PHP5 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 75 Star 407 Fork 160 KnpLabs/KnpMenu Code Issues 14 Pull requests 13 Wiki Pulse Graphs Menu Library for PHP5 http://KnpLabs.com 333 commits 5 branches 11 releases 39 contributors PHP 97.8% HTML 2.2% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.1.x breadcrumb_renderer feature/weightable master route-voter-integers Nothing to show v2.1.1 v2.1.0 v2.0.1 v2.0.0 v2.0.0-beta1 v2.0.0-alpha2 v2.0.0-alpha1 v1.1.2 v1.1.1 v1.1.0 v1.0.0 Nothing to show New pull request Latest commit e849f84 Jul 1, 2016 dbu committed on GitHub Merge pull request #245 from KnpLabs/clarify-current-as-link … improve documentation for renderer Permalink Failed to load latest commit information. doc Merge pull request #245 from KnpLabs/clarify-current-as-link Jul 1, 2016 src/Knp/Menu Fix Symfony 3 compatibility Nov 29, 2015 tests/Knp/Menu/Tests Stop mocking unused method call Jun 23, 2016 .gitignore Switched the testsuite to composer May 8, 2012 .travis.yml Improve the testsuite and the CI setup Sep 20, 2015 CHANGELOG.md prepare 2.1.1 release Jan 8, 2016 LICENSE Initial import of KnpMenuBundle decoupled classes with a new namespace Aug 18, 2011 README.markdown Merge pull request #246 from KnpLabs/fix/missing-doc-on-voters Jul 1, 2016 composer.json Fix Symfony 3 compatibility Nov 29, 2015 phpunit.xml.dist Improve the testsuite and the CI setup Sep 20, 2015 README.markdown KnpMenu The KnpMenu library provides object oriented menus for PHP 5.3. It is used by the KnpMenuBundle for Symfony2 but can now be used stand-alone. Installation KnpMenu uses Composer, please checkout the composer website for more information. The simple following command will install knp-menu into your project. It also add a new entry in your composer.json and update the composer.lock as well. $ composer require knplabs/knp-menu KnpMenu follows the PSR-0 convention names for its classes, which means you can easily integrate knp-menu classes loading in your own autoloader. Getting Started <?php  // Include dependencies installed with composer require 'vendor/autoload.php';  use Knp\Menu\MenuFactory; use Knp\Menu\Renderer\ListRenderer;  $factory = new MenuFactory(); $menu = $factory->createItem('My menu'); $menu->addChild('Home', array('uri' => '/')); $menu->addChild('Comments', array('uri' => '#comments')); $menu->addChild('Symfony2', array('uri' => 'http://symfony-reloaded.org/')); $menu->addChild('Coming soon');  $renderer = new ListRenderer(new \Knp\Menu\Matcher\Matcher()); echo $renderer->render($menu); The above menu would render the following HTML: <ul>   <li class=""first"">     <a href=""/"">Home</a>   </li>   <li class=""current"">     <a href=""#comments"">Comments</a>   </li>   <li>     <a href=""http://symfony-reloaded.org/"">Symfony2</a>   </li>   <li class=""last"">     <span>Coming soon</span>   </li> </ul> This way you can finally avoid writing an ugly template to show the selected item, the first and last items, submenus, ... The bulk of the documentation can be found in the doc directory. What now? Follow the tutorial in doc/01-Basic-Menus.markdown and doc/02-Twig-Integration.markdown to discover how KnpMenu will rock your world! Find all available documentation at doc/. Credits This bundle was originally ported from ioMenuPlugin, a menu plugin for symfony1. It has since been developed by KnpLabs and the Symfony community. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/KnpLabs/KnpMenu"	"A menu library."	"true"
"Asset Management"	"Assetic"	"https://github.com/kriswallsmith/assetic"	"An asset manager pipeline library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3312"	"151"	"539"	"GitHub - kriswallsmith/assetic: Asset Management for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 151 Star 3,312 Fork 539 kriswallsmith/assetic Code Issues 194 Pull requests 87 Pulse Graphs Asset Management for PHP 1,142 commits 9 branches 25 releases 118 contributors PHP 99.0% Other 1.0% PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags asset-locator css-crush-filter experimental/tree lessc-bin master node-visitor output-collisions pipeline-asset-locator twig-filter Nothing to show v1.3.2 v1.3.1 v1.3.0 v1.2.1 v1.2.0 v1.2.0-alpha1 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.1.0-beta1 v1.1.0-alpha4 v1.1.0-alpha3 v1.1.0-alpha2 v1.1.0-alpha1 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v1.0.0beta1 v1.0.0alpha2 v1.0.0alpha1 v1.0.0RC1 Nothing to show New pull request Latest commit 4bb27cf Feb 7, 2016 kriswallsmith Merge pull request #752 from mikeyclarke/libsass-filter … Add filter for PHP Libsass implementation Permalink Failed to load latest commit information. docs added japanese docs Jun 8, 2011 src Merge pull request #752 from mikeyclarke/libsass-filter Feb 7, 2016 tests Merge pull request #752 from mikeyclarke/libsass-filter Feb 7, 2016 .gitattributes do not exclude the readme and the changelog Dec 31, 2012 .gitignore moved ruby deps to a Gemfile May 11, 2013 .travis.yml Update the lowest bound of the Twig dev requirement Nov 24, 2015 CHANGELOG-1.0.md Updated the changelog Aug 28, 2012 CHANGELOG-1.1.md updated changelog Jul 18, 2013 CHANGELOG-1.2.md Updated the changelog for 1.2.0 Oct 14, 2014 Gemfile moved ruby deps to a Gemfile May 12, 2013 LICENSE update copyright date to 2015 Mar 26, 2015 README.md Merge pull request #752 from mikeyclarke/libsass-filter Feb 7, 2016 composer.json Update the lowest bound of the Twig dev requirement Nov 24, 2015 package.json Update the lowest bound of the Twig dev requirement Nov 24, 2015 phpunit.xml.dist moved node deps to package.json May 11, 2013 README.md Assetic Assetic is an asset management framework for PHP. <?php  use Assetic\Asset\AssetCollection; use Assetic\Asset\FileAsset; use Assetic\Asset\GlobAsset;  $js = new AssetCollection(array(     new GlobAsset('/path/to/js/*'),     new FileAsset('/path/to/another.js'), ));  // the code is merged when the asset is dumped echo $js->dump(); Assets An Assetic asset is something with filterable content that can be loaded and dumped. An asset also includes metadata, some of which can be manipulated and some of which is immutable. Property Accessor Mutator content getContent setContent mtime getLastModified n/a source root getSourceRoot n/a source path getSourcePath n/a target path getTargetPath setTargetPath The ""target path"" property denotes where an asset (or an collection of assets) should be dumped. Filters Filters can be applied to manipulate assets. <?php  use Assetic\Asset\AssetCollection; use Assetic\Asset\FileAsset; use Assetic\Asset\GlobAsset; use Assetic\Filter\LessFilter; use Assetic\Filter\Yui;  $css = new AssetCollection(array(     new FileAsset('/path/to/src/styles.less', array(new LessFilter())),     new GlobAsset('/path/to/css/*'), ), array(     new Yui\CssCompressorFilter('/path/to/yuicompressor.jar'), ));  // this will echo CSS compiled by LESS and compressed by YUI echo $css->dump(); The filters applied to the collection will cascade to each asset leaf if you iterate over it. <?php  foreach ($css as $leaf) {     // each leaf is compressed by YUI     echo $leaf->dump(); } The core provides the following filters in the Assetic\Filter namespace: AutoprefixerFilter: Parse and update vendor-specific properties using autoprefixer CoffeeScriptFilter: compiles CoffeeScript into Javascript CompassFilter: Compass CSS authoring framework CssEmbedFilter: embeds image data in your stylesheets CssImportFilter: inlines imported stylesheets CssMinFilter: minifies CSS CleanCssFilter: minifies CSS CssRewriteFilter: fixes relative URLs in CSS assets when moving to a new URL DartFilter: compiles Javascript using dart2js EmberPrecompileFilter: precompiles Handlebars templates into Javascript for use in the Ember.js framework GoogleClosure\CompilerApiFilter: compiles Javascript using the Google Closure Compiler API GoogleClosure\CompilerJarFilter: compiles Javascript using the Google Closure Compiler JAR GssFilter: compliles CSS using the Google Closure Stylesheets Compiler HandlebarsFilter: compiles Handlebars templates into Javascript JpegoptimFilter: optimize your JPEGs JpegtranFilter: optimize your JPEGs JSMinFilter: minifies Javascript JSMinPlusFilter: minifies Javascript JSqueezeFilter: compresses Javascript LessFilter: parses LESS into CSS (using less.js with node.js) LessphpFilter: parses LESS into CSS (using lessphp) OptiPngFilter: optimize your PNGs PackagerFilter: parses Javascript for packager tags PackerFilter: compresses Javascript using Dean Edwards's Packer PhpCssEmbedFilter: embeds image data in your stylesheet PngoutFilter: optimize your PNGs ReactJsxFilter: compiles React JSX into JavaScript Sass\SassFilter: parses SASS into CSS Sass\ScssFilter: parses SCSS into CSS SassphpFilter: parses Sass into CSS using the sassphp bindings for Libsass ScssphpFilter: parses SCSS using scssphp SeparatorFilter: inserts a separator between assets to prevent merge failures SprocketsFilter: Sprockets Javascript dependency management StylusFilter: parses STYL into CSS TypeScriptFilter: parses TypeScript into Javascript UglifyCssFilter: minifies CSS UglifyJs2Filter: minifies Javascript UglifyJsFilter: minifies Javascript Yui\CssCompressorFilter: compresses CSS using the YUI compressor Yui\JsCompressorFilter: compresses Javascript using the YUI compressor Asset Manager An asset manager is provided for organizing assets. <?php  use Assetic\AssetManager; use Assetic\Asset\FileAsset; use Assetic\Asset\GlobAsset;  $am = new AssetManager(); $am->set('jquery', new FileAsset('/path/to/jquery.js')); $am->set('base_css', new GlobAsset('/path/to/css/*')); The asset manager can also be used to reference assets to avoid duplication. <?php  use Assetic\Asset\AssetCollection; use Assetic\Asset\AssetReference; use Assetic\Asset\FileAsset;  $am->set('my_plugin', new AssetCollection(array(     new AssetReference($am, 'jquery'),     new FileAsset('/path/to/jquery.plugin.js'), ))); Filter Manager A filter manager is also provided for organizing filters. <?php  use Assetic\FilterManager; use Assetic\Filter\Sass\SassFilter; use Assetic\Filter\Yui;  $fm = new FilterManager(); $fm->set('sass', new SassFilter('/path/to/parser/sass')); $fm->set('yui_css', new Yui\CssCompressorFilter('/path/to/yuicompressor.jar')); Asset Factory If you'd rather not create all these objects by hand, you can use the asset factory, which will do most of the work for you. <?php  use Assetic\Factory\AssetFactory;  $factory = new AssetFactory('/path/to/asset/directory/'); $factory->setAssetManager($am); $factory->setFilterManager($fm); $factory->setDebug(true);  $css = $factory->createAsset(array(     '@reset',         // load the asset manager's ""reset"" asset     'css/src/*.scss', // load every scss files from ""/path/to/asset/directory/css/src/"" ), array(     'scss',           // filter through the filter manager's ""scss"" filter     '?yui_css',       // don't use this filter in debug mode ));  echo $css->dump(); The AssetFactory is constructed with a root directory which is used as the base directory for relative asset paths. Prefixing a filter name with a question mark, as yui_css is here, will cause that filter to be omitted when the factory is in debug mode. You can also register Workers on the factory and all assets created by it will be passed to the worker's process() method before being returned. See Cache Busting below for an example. Dumping Assets to static files You can dump all the assets an AssetManager holds to files in a directory. This will probably be below your webserver's document root so the files can be served statically. <?php  use Assetic\AssetWriter;  $writer = new AssetWriter('/path/to/web'); $writer->writeManagerAssets($am); This will make use of the assets' target path. Cache Busting If you serve your assets from static files as just described, you can use the CacheBustingWorker to rewrite the target paths for assets. It will insert an identifier before the filename extension that is unique for a particular version of the asset. This identifier is based on the modification time of the asset and will also take depended-on assets into consideration if the applied filters support it. <?php  use Assetic\Factory\AssetFactory; use Assetic\Factory\Worker\CacheBustingWorker;  $factory = new AssetFactory('/path/to/asset/directory/'); $factory->setAssetManager($am); $factory->setFilterManager($fm); $factory->setDebug(true); $factory->addWorker(new CacheBustingWorker());  $css = $factory->createAsset(array(     '@reset',         // load the asset manager's ""reset"" asset     'css/src/*.scss', // load every scss files from ""/path/to/asset/directory/css/src/"" ), array(     'scss',           // filter through the filter manager's ""scss"" filter     '?yui_css',       // don't use this filter in debug mode ));  echo $css->dump(); Internal caching A simple caching mechanism is provided to avoid unnecessary work. <?php  use Assetic\Asset\AssetCache; use Assetic\Asset\FileAsset; use Assetic\Cache\FilesystemCache; use Assetic\Filter\Yui;  $yui = new Yui\JsCompressorFilter('/path/to/yuicompressor.jar'); $js = new AssetCache(     new FileAsset('/path/to/some.js', array($yui)),     new FilesystemCache('/path/to/cache') );  // the YUI compressor will only run on the first call $js->dump(); $js->dump(); $js->dump(); Twig To use the Assetic Twig extension you must register it to your Twig environment: <?php  $twig->addExtension(new AsseticExtension($factory)); Once in place, the extension exposes a stylesheets and a javascripts tag with a syntax similar to what the asset factory uses: {% stylesheets '/path/to/sass/main.sass' filter='sass,?yui_css' output='css/all.css' %}     <link href=""{{ asset_url }}"" type=""text/css"" rel=""stylesheet"" /> {% endstylesheets %} This example will render one link element on the page that includes a URL where the filtered asset can be found. When the extension is in debug mode, this same tag will render multiple link elements, one for each asset referenced by the css/src/*.sass glob. The specified filters will still be applied, unless they are marked as optional using the ? prefix. This behavior can also be triggered by setting a debug attribute on the tag: {% stylesheets 'css/*' debug=true %} ... {% stylesheets %} These assets need to be written to the web directory so these URLs don't return 404 errors. <?php  use Assetic\AssetWriter; use Assetic\Extension\Twig\TwigFormulaLoader; use Assetic\Extension\Twig\TwigResource; use Assetic\Factory\LazyAssetManager;  $am = new LazyAssetManager($factory);  // enable loading assets from twig templates $am->setLoader('twig', new TwigFormulaLoader($twig));  // loop through all your templates foreach ($templates as $template) {     $resource = new TwigResource($twigLoader, $template);     $am->addResource($resource, 'twig'); }  $writer = new AssetWriter('/path/to/web'); $writer->writeManagerAssets($am); Assetic is based on the Python webassets library (available on GitHub). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kriswallsmith/assetic"	"An asset manager pipeline library."	"true"
"Asset Management"	"JShrink"	"https://github.com/tedious/JShrink"	"A JavaScript minifier library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"412"	"49"	"91"	"GitHub - tedious/JShrink: Javascript Minifier built in PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 49 Star 412 Fork 91 tedious/JShrink Code Issues 11 Pull requests 1 Pulse Graphs Javascript Minifier built in PHP http://www.tedivm.com 110 commits 1 branch 5 releases 5 contributors PHP 80.6% JavaScript 18.3% Shell 1.1% PHP JavaScript Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.1.0 v1.0.1 v1.0.0 v0.5.2 v0.5.1 Nothing to show New pull request Latest commit 688527a Jul 4, 2015 tedivm Merge pull request #48 from Pyton/master … UTF Char detection Permalink Failed to load latest commit information. src/JShrink Added UTF char detection Jul 3, 2015 tests Added UTF Char detection Test Jul 3, 2015 .coveralls.yml Coverall support, minor testing suite refactoring Apr 15, 2014 .gitignore Coverall support, minor testing suite refactoring Apr 15, 2014 .travis.yml Coverall support, minor testing suite refactoring Apr 15, 2014 CONTRIBUTING.md Updated Readme and Contributing File Apr 20, 2014 LICENSE Added license file Mar 10, 2012 README.md Updated readme links May 21, 2014 composer.json updating homepage May 21, 2014 phpunit.xml.dist Coverall support, minor testing suite refactoring Apr 15, 2014 README.md JShrink JShrink is a php class that minifies javascript so that it can be delivered to the client quicker. This code can be used by any product looking to minify their javascript on the fly (although caching the results is suggested for performance reasons). Unlike many other products this is not a port into php but a native application, resulting in better performance. Usage Minifying your code is simple call to a static function- <?php include('vendor/autoload.php');  // Basic (default) usage. $minifiedCode = \JShrink\Minifier::minify($js);  // Disable YUI style comment preservation. $minifiedCode = \JShrink\Minifier::minify($js, array('flaggedComments' => false)); Results Raw - 586,990 Gzip - 151,301 JShrink - 371,982 JShrink and Gzip - 93,507 Installing Composer Installing JShrink can be done through a variety of methods, although Composer is recommended. ""require"": {   ""tedivm/jshrink"": ""~1.0"" } Github Releases of JShrink are available on Github. License JShrink is licensed under the BSD License. See the LICENSE file for details. In the spirit of open source, use of this library for evil is discouraged but not prohibited. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tedious/JShrink"	"A JavaScript minifier library."	"true"
"Asset Management"	"Munee"	"https://github.com/meenie/munee"	"An asset optimiser library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"744"	"52"	"89"	"GitHub - meenie/munee: Munee: Standalone PHP 5.3 Asset Optimisation & Manipulation Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 52 Star 744 Fork 89 meenie/munee Code Issues 10 Pull requests 4 Pulse Graphs Munee: Standalone PHP 5.3 Asset Optimisation & Manipulation http://mun.ee 207 commits 3 branches 38 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages master Nothing to show 1.7.0 1.6.1 1.6.0 1.5.20 1.5.19 1.5.18 1.5.17 1.5.16 1.5.15 1.5.14 1.5.13 1.5.12 1.5.11 1.5.9 1.5.7 1.5.3 1.5.1 1.5.0 1.4.4 1.4.3 1.4.2 1.4.1 1.4.0 1.3.11 1.3.10 1.3.9 1.3.8 1.3.7 1.3.6 1.3.5 1.3.4 1.3.3 1.3.2 1.3.1 1.3.0 1.2.0 1.1.0 1.0.0 Nothing to show New pull request Latest commit 2511ab6 Apr 10, 2016 meenie Update README.md Permalink Failed to load latest commit information. cache Initial Commit Nov 22, 2012 config Implement better CSS parsing to fix relative links. Mar 17, 2015 src/Munee Disable multibyte in Sabberworm Jul 24, 2015 tests Implement better CSS parsing to fix relative links. Mar 18, 2015 .gitignore Introducing Dependency Injection instead of a half-assed Factory. Nov 30, 2012 .travis.yml travis: PHP 5.5+ added, run tests Mar 14, 2015 LICENSE Initial Commit Nov 21, 2012 README.md Update README.md Apr 10, 2016 composer.json Update some packages Aug 26, 2015 phpunit.xml.dist phpunit: make output colored Mar 14, 2015 README.md Munee: Standalone PHP 5.3 Asset Optimisation & Manipulation On-The-Fly Image Resizing, On-the-fly LESS, SCSS, CoffeeScript Compiling, CSS & JavaScript Combining/Minifying, and Smart Client Side and Server Side Caching Official Website Documentation API Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/meenie/munee"	"An asset optimiser library."	"true"
"Asset Management"	"Pipe"	"https://github.com/CHH/pipe"	"Another asset manager pipeline library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"121"	"11"	"10"	"GitHub - CHH/pipe: Put your assets into the pipe and smoke them. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 121 Fork 10 CHH/pipe Code Issues 14 Pull requests 0 Pulse Graphs Put your assets into the pipe and smoke them. 186 commits 1 branch 5 releases 2 contributors PHP 91.8% CSS 7.1% JavaScript 1.1% PHP CSS JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.0beta1 v1.0.0alpha3 v1.0.0alpha2 v1.0.0alpha1 v0.1.0 Nothing to show New pull request Latest commit 306ee3a Jan 22, 2014 CHH Add logicalPath() method to environment, fix JST to name dict entries… … … correctly Permalink Failed to load latest commit information. bin Updates loader logic Sep 10, 2012 lib/Pipe Add logicalPath() method to environment, fix JST to name dict entries… Jan 22, 2014 tests Add logicalPath() method to environment, fix JST to name dict entries… Jan 22, 2014 .gitignore Fixes CSS preprocessor Sep 7, 2012 .travis.yml Add 'composer self-update' to travis script Jan 31, 2013 LICENSE.txt Added initial README May 14, 2012 README.md Remove mentions of YAML config, it's deprecated. May 6, 2013 bob_config.php Convert Bob Tasks to Bob TaskLibrary, fixes #38 Jan 17, 2013 composer.json Remove meta-template repo, is on Packagist already May 6, 2013 phpunit.dist.xml Enable colors Jan 19, 2013 README.md Pipe Put your assets into the pipe and smoke them. Pipe is an asset pipeline in the spirit of Sprockets. It's meant as the practical way for managing assets. It aims to provide a useful out of the box setup for managing assets and support for common preprocessor languages found in the web environment, like CoffeeScript or LESS. What Pipe provides for you: Out of the box support for Less and CoffeeScript Integrated Dependency Managment. Support for multiple asset load paths, which allows you to untie your application's libraries from your vendor libraries. Tries to take the pain out of asset deployment, by being designed for dealing with cache busting and compression. Install Get composer (if you haven't): wget http://getcomposer.org/composer.phar  Then add this to a composer.json in your project's root: {     ""require"": {         ""chh/pipe"": ""*""     } }  Now install: php composer.phar install  Getting Started Environment First you need an instance of Pipe\Environment. The environment holds your load paths, is used to retrieve assets and maps processors/engines to your assets. The environment consists of multiple load paths. When retrieving an asset, it's looked up in every directory of the load paths. This way you can split your assets up in multiple directories, for example vendor_assets and assets. To add some load paths, use the appendPath method. Paths can be prepended by the prependPath method. But use this carefully, because you can override assets this way. <?php use Pipe\Environment;  $env = new Environment; $env->appendPath(""assets""); $env->appendPath(""vendor_assets""); Assets are retrieved by accessing an index of the environment instance, or by calling the find method. The find method returns either null when no asset was found or an asset instance. <?php  $asset = $env[""js/application.js""]; # equal to: $asset = $env->find(""js/application.js""); To get the asset's processed body, use the getBody method. <?php  echo $asset->getBody(); You can get the asset's last modified timestamp with the getLastModified method. Dumping an Asset to a File To dump an asset to a file, use the write method. The write method takes an array of options: dir (string): The directory is the prefix of the file. A hash of the asset's contents is automatically included in the resulting filename. include_digest (bool): Should the SHA1 hash of the asset's contents be included in the filename? compress (bool): Compresses the contents with GZIP and writes it with an .gz extension. Enabling Compression You can turn on compression by setting the js_compressor and css_compressor config keys, or by calling setJsCompressor or setCssCompressor on an Environment instance. Supported Javascript Compressors: uglify_js, uses the popular Uglify JS compressor built for NodeJS. Install with npm -g install uglify-js. yuglify_js, Compressor built upon Uglify JS, and behaves like YUI compressor. Install with npm -g install yuglify. Supported CSS Compressors: yuglify_css, uses the Yuglify compressor's ability to compress CSS using CSSmin. Requires the yuglify NPM package. Example: <?php  $env = new Environment; $env->appendPath(""assets/stylesheets""); $env->appendPath(""assets/vendor/stylesheets""); $env->appendPath(""assets/javascripts""); $env->appendPath(""assets/vendor/javascripts"");  $env->setJsCompressor('yuglify_js'); $env->setCssCompressor('yuglify_css');  # Compressors are Bundle Processors. Bundle Processors are only run on Bundled Assets. # Pass 'bundled' => true to get a Bundled Asset. $asset = $env->find('application.js', ['bundled' => true]);  echo $asset->getBody(); Directives Each file with content type application/javascript or text/css is processed by the DirectiveProcessor. The DirectiveProcessor parses the head of these files for special comments starting with an equals sign. /* CSS  *= require foo.css  *= depend_on bar.css  */  # CoffeeScript #= require foo.coffee  // Javascript //= require foo.js  The arguments for each directive are split by the Bourne Shell's rules. This means you have to quote arguments which contain spaces with either single or double quotes. //= require ""some name with spaces.js""  require Usage: require <path>  The require directive takes an asset path as argument, processes the asset and puts the dependency's contents before the asset's contents. The path can also start with ./, which skips the load path for the path resolution and looks up the file in the same path as the current asset. depend_on Usage: depend_on <path>  Defines that the path is a dependency of the current asset, but does not process anything. Assets defined this way get considered when the last modified time is calculated, but the contents get not prepended. require_tree Usage: require_tree <path>  Requires all files found in the directory specified by path. For example, if you have a directory for all individual widgets and a widget base prototype, then you could require_tree the widgets/ directory. This way every developer can just drop a file into the widgets/ directory without having to maintain a massive list of individual assets. // index.js //= require ./widget_base //= require_tree ./widgets  Engines Engines are used to process assets before they're dumped. Each engine is mapped to one or more file extension (e.g. CoffeeScript to .coffee). Each asset can be processed by one or more engines. Which engines are used on the asset and their order is determined by the asset's file extensions. For example, to process an asset first by the PHP engine and then by the LESS compiler, give the asset the .less.php suffix. Here's a list of the engines provided by default and their mapping to file extensions: Engine Extensions Requirements CoffeeScript .coffee coffee — install with npm install -g coffee-script LESS .less lessc — install with npm install -g less PHP .php, .phtml Mustache .mustache Add phly/mustache package Markdown .markdown, .md Add dflydev/markdown package Twig .twig Add twig/twig package TypeScript .ts tsc — install with npm install -g typescript Under the hood, Pipe Engines are meta-template templates. Look at its README for more information on building your own engines. To add an engine class to Pipe, use the environment's registerEngine method, which takes the engine's class name as first argument and an array of extensions as second argument. Serving Assets dynamically. Pipe includes a Pipe\Server which is able to serve assets dynamically via HTTP. The server is designed to be called in .php file, served via mod_php or FastCGI. To use the dynamic asset server, you've to additionally require symfony/http-foundation. The require section of your composer.json should look like this: {     ""require"": {         ""chh/pipe"": ""*@dev"",         ""symfony/http-foundation"": ""*""     } }  The server's constructor expects an environment as only argument. You can either construct the environment from scratch or use the Config class. Put this in a file named assets.php: <?php  use Pipe\Server,     Pipe\Environment,     Symfony\Component\HttpFoundation\Request;  $env = new Environment; $env->appendPath(""vendor_assets""); $env->appendPath(""assets"");  $server = new Server($env); $server->dispatch(Request::createFromGlobals())        ->send(); The server resolves all request URIs relative to the environment's load path. So to render the Javascript file js/index.js you would request the URI /assets.php/js/index.js. The server also applies some conditional caching via Last-Modified and If-Not-Modified-Since HTTP headers. Should a change to a dependency not be instantly visible, try to make a hard refresh in your browser or clear your browser's cache. Preparing Assets for Production Deployment It's a good idea to compile assets in a way that they don't need the runtime support of Pipe. The Pipe\Manifest class is responsible for just that. The Manifest is used to compile assets and writes a JSON encoded file which maps the logical paths (which the app knows anyway) to the paths including the digest (which the app can't know in advance). To add a file to the manifest, call the manifest's compile method: <?php  $env = new \Pipe\Environment; $env->appendPath('assets/javascripts');  $manifest = new \Pipe\Manifest($env, 'build/assets/manifest.json'); $manifest->compile('index.js');  This creates the index-<SHA1 digest>.js file, and a manifest.json both in the build/assets directory. This file looks a bit like this: {     ""assets"": {         ""index.js"": ""index-0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33.js""     } }  Then deploy everything located in build/assets, e.g. to some CDN or static file server. An app running in a production environment could use the manifest like this, to create links to the assets: <?php  # Better cache this, but omitted for brevity $manifest = json_decode(file_get_contents('/path/to/manifest.json'), true);  # Path where the contents of ""build/assets"" are deployed. # Could be a path to a CDN. $prefix = ""/assets"";  printf('<script type=""text/javascript"" src=""%s/%s""></script>', $prefix, $manifest['assets']['index.js']);  License The MIT License Copyright (c) 2012 Christoph Hochstrasser Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CHH/pipe"	"Another asset manager pipeline library."	"true"
"Asset Management"	"Puli"	"https://github.com/puli/repository"	"A library for determining assets absolute paths."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"420"	"29"	"27"	"GitHub - puli/repository: A filesystem-like repository for storing arbitrary resources. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 29 Star 420 Fork 27 puli/repository Code Pull requests 2 Pulse Graphs A filesystem-like repository for storing arbitrary resources. http://puli.io 618 commits 3 branches 14 releases 15 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 1.0 Switch branches/tags Branches Tags 1.0 fix-win master Nothing to show 1.0.0-beta10 1.0.0-beta9 1.0.0-beta8 1.0.0-beta7 1.0.0-beta6 1.0.0-beta5 1.0.0-beta4 1.0.0-beta3 1.0.0-beta2 1.0.0-beta 1.0.0-alpha4 1.0.0-alpha3 1.0.0-alpha2 1.0.0-alpha1 Nothing to show New pull request Latest commit 2dcef07 Feb 5, 2016 webmozart Merge branch '1.0.0-beta9-hotfix' into 1.0 Permalink Failed to load latest commit information. res/schema Fixed escaped slashes in the JSON schema Jan 14, 2016 src Merge pull request #92 from webmozart/discovery Feb 1, 2016 tests Merge pull request #92 from webmozart/discovery Feb 1, 2016 .composer-auth.json Updated the GitHub OAuth token Jan 12, 2016 .gitattributes Tweaked CI configuration for better performance Jan 6, 2016 .gitignore [docs] Moved documentation to separate repository Dec 2, 2014 .styleci.yml restored styleci phpdoc_types check Oct 8, 2015 .travis.yml Run --prefer-lowest build on PHP 7 Jan 6, 2016 CHANGELOG.md Merge branch '1.0.0-beta9-hotfix' into 1.0 Feb 5, 2016 LICENSE Initial import Jan 31, 2014 README.md Updated latest version to ""1.0.0-beta10"" Feb 5, 2016 appveyor.yml Upgraded PHP to PHP 7 in appveyor.yml Jan 6, 2016 composer.json Added ResourceBinding and ResourceBindingInitializer Feb 1, 2016 phpunit.xml.dist Updated phpunit.xml to enable correct code coverage Feb 23, 2014 README.md The Puli Repository Component Latest release: 1.0.0-beta10 PHP >= 5.3.9 The Puli Repository Component provides an API for storing arbitrary resources in a filesystem-like repository: use Puli\Repository\InMemoryRepository; use Puli\Repository\Resource\DirectoryResource;  $repo = new InMemoryRepository(); $repo->add('/config', new DirectoryResource('/path/to/resources/config'));  // /path/to/resources/config/routing.yml echo $repo->get('/config/routing.yml')->getBody(); The following ResourceRepository implementations are currently supported: InMemoryRepository FilesystemRepository NullRepository JsonRepository OptimizedJsonRepository The following Resource implementations are currently supported: GenericResource FileResource DirectoryResource LinkResource Authors Bernhard Schussek a.k.a. @webmozart The Community Contributors Installation Follow the [Getting Started] guide to install Puli in your project. Documentation Read the Puli Documentation to learn more about Puli. Contribute Contributions to Puli are always welcome! Report any bugs or issues you find on the issue tracker. You can grab the source code at Puli’s Git repository. Support If you are having problems, send a mail to bschussek@gmail.com or shout out to @webmozart on Twitter. License All contents of this package are licensed under the MIT license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/puli/repository"	"A library for determining assets absolute paths."	"true"
"Geolocation"	"GeoCoder"	"http://geocoder-php.org/"	"A geocoding library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2683"	"166"	"339"	"GitHub - geocoder-php/Geocoder: The most featured Geocoder library written in PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 166 Star 2,683 Fork 339 geocoder-php/Geocoder Code Issues 24 Pull requests 14 Pulse Graphs The most featured Geocoder library written in PHP. http://geocoder-php.org/Geocoder 971 commits 3 branches 54 releases 87 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.x gh-pages master Nothing to show v3.3.0 v3.2.0 v3.1.0 v3.0.0 v3.0.0-alpha3 v3.0.0-alpha2 v3.0.0-alpha1 2.8.2 2.8.1 2.8.0 2.7.0 2.6.0 2.5.0 2.4.2 2.4.1 2.4.0 2.3.2 2.3.1 2.3.0 2.2.0 2.1.0 2.0.1 2.0.0 1.7.1 1.7.0 1.6.0 1.5.1 1.5.0 1.4.0 1.3.0 1.2.1 1.2.0 1.1.6 1.1.5 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.0.14 1.0.13 1.0.12 1.0.11 1.0.10 1.0.9 1.0.8 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit c2373a6 Apr 26, 2016 willdurand Merge pull request #507 from mtmail/OpenCage-more-exception-cases … Handle invalid API key, over quota respones for OpenCage provider Permalink Failed to load latest commit information. src/Geocoder Handle invalid API key, over quota respones for OpenCage provider Apr 14, 2016 tests Handle invalid API key, over quota respones for OpenCage provider Apr 14, 2016 .gitattributes ignore tests for export Nov 30, 2015 .gitignore Update gitignore Sep 13, 2012 .travis.yml Fixes Travis-Build Dec 6, 2015 CHANGELOG.md Prepare 3.3.0 release Dec 6, 2015 CONTRIBUTING.md Update CONTRIBUTING.md Jul 8, 2013 LICENSE Update CHANGELOG Oct 13, 2014 README.md Add PHP7 badge Dec 8, 2015 composer.json Update PHP version syntax Mar 6, 2016 phpunit.xml.dist fix TomTom provider tests, doc, phpunit.dist and add new cached respo… Dec 17, 2014 README.md Geocoder Important: You are browsing the documentation of Geocoder 3.x. Documentation for version 2.x is available here: Geocoder 2.x documentation. Geocoder is a PHP library which helps you build geo-aware applications by providing a powerful abstraction layer for geocoding manipulations. Installation Usage Address & AddressCollection The ProviderAggregator TimedGeocoder HTTP Adapters Providers Address-based Providers ArcGISOnline GeoIP2 GoogleMaps GoogleMapsBusiness MaxMindBinary Nominatim TomTom Yandex IP-based Providers Locale Aware Providers The Chain Provider Dumpers GPS eXchange Format (GPX) GeoJSON Keyhole Markup Language (KML) Well-Known Binary (WKB) Well-Known Text (WKT) Formatters Extending Things Versioning Installation The recommended way to install Geocoder is through Composer: $ composer require willdurand/geocoder  Usage Geocoder and its companion Geocoder Extra provides a lot of providers. Choose the one that fits your need first. Let's say the GoogleMaps one is what you were looking for, so let's see how to use it. In the code snippet below, curl has been chosen as HTTP layer but it is up to you since each HTTP-based provider implements PSR-7. $curl     = new \Ivory\HttpAdapter\CurlHttpAdapter(); $geocoder = new \Geocoder\Provider\GoogleMaps($curl);  $geocoder->geocode(...); $geocoder->reverse(...); The Geocoder interface, which all providers implement, exposes two main methods: geocode($streetOrIpAddress) reverse($latitude, $longitude) It also contains methods to control the number of results: limit($limit) getLimit() Address & AddressCollection Both geocode() and reverse() methods return a collection of Address objects (AddressCollection), each providing the following API: getCoordinates() will return a Coordinates object (with latitude and longitude properties); getLatitude() will return the latitude value; getLongitude() will return the longitude value; getBounds() will return an Bounds object (with south, west, north and east properties); getStreetNumber() will return the street number/house number value; getStreetName() will return the street name value; getLocality() will return the locality or city; getPostalCode() will return the postalCode or zipcode; getSubLocality() will return the city district, or sublocality; getAdminLevels() will return an ordered collection (AdminLevelCollection) of AdminLevel object (with level, name and code properties); getCountry() will return a Country object (with name and code properties); getCountryCode() will return the ISO country code; getTimezone() will return the timezone. The AddressCollection exposes the following methods: count() (this class implements Countable); first() retrieves the first Address; slice($offset, $length = null) returns Address objects between $offset and length; get($index) fetches an Address using its $index; all() returns all Address objects; getIterator() (this class implements IteratorAggregate). The ProviderAggregator The ProviderAggregator is used to register several providers so that you can decide which provider to use later on. <?php  $geocoder = new \Geocoder\ProviderAggregator();  $geocoder->registerProviders([     new \Geocoder\Provider\GoogleMaps(         $adapter, $locale, $region, $useSsl     ),     new \Geocoder\Provider\GoogleMapsBusiness(         $adapter, '<CLIENT_ID>', '<PRIVATE_KEY>', $locale, $region, $useSsl     ),     new \Geocoder\Provider\Yandex(         $adapter, $locale, $toponym     ),     new \Geocoder\Provider\MaxMind(         $adapter, '<MAXMIND_API_KEY>', $service, $useSsl     ),     new \Geocoder\Provider\ArcGISOnline(         $adapter, $sourceCountry, $useSsl     ), ]);  $geocoder->registerProvider(     new \Geocoder\Provider\Nominatim(         $adapter, 'http://your.nominatim.server', $locale     ) );  $geocoder     ->using('google_maps')     ->geocode('...');  $geocoder     ->limit(10)     ->reverse($lat, $lng); The ProviderAggregator's API is fluent, meaning you can write: <?php  $addresses = $geocoder     ->registerProvider(new \My\Provider\Custom($adapter))     ->using('custom')     ->limit(10)     ->geocode('68.145.37.34')     ; The using() method allows you to choose the provider to use by its name. When you deal with multiple providers, you may want to choose one of them. The default behavior is to use the first one but it can be annoying. The limit() method allows you to configure the maximum number of results being returned. Depending on the provider you may not get as many results as expected, it is a maximum limit, not the expected number of results. TimedGeocoder The TimedGeocoder class profiles each geocode and reverse call. So you can easily figure out how many time/memory was spent for each geocoder/reverse call. // configure you geocoder object  $stopwatch = new \Symfony\Component\Stopwatch\Stopwatch(); $geocoder = new \Geocoder\TimedGeocoder($geocoder, $stopwatch);  $geocoder->geocode('Paris, France');  // Now you can debug your application We use the symfony/stopwatch component under the hood. Which means, if you use the Symfony framework the geocoder calls will appear in your timeline section in the Web Profiler. HTTP Adapters In order to talk to geocoding APIs, you need HTTP adapters. While it was part of the library in Geocoder 1.x and 2.x, Geocoder 3.x and upper now relies on the PSR-7 Standard which defines how HTTP message should be implemented. Choose any library that follows this PSR and implement the specified interfaces to use with Geocoder. As making choices is rather hard, Geocoder ships with the egeloen/http-adapter library by default, but it is up to you to choose a different implementation. Note: not all providers are HTTP-based. Providers Providers perform the geocoding black magic for you (talking to the APIs, fetching results, dealing with errors, etc.) and are highly configurable. Address-based Providers Provider Name Reverse? SSL? Coverage Multiple? Terms ArcGIS Online arcgis_online yes supported worldwide yes requires API key. 1250 requests free Bing Maps bing_maps yes no worldwide yes requires API key. Limit 10,000 requests per month Chain chain meta provider which iterates over a list of providers Geonames geonames yes no worldwide yes requires registration, no free tier Google Maps google_maps yes supported worldwide yes requires API key. Limit 2500 requests per day Google Maps for Business google_maps_business yes supported worldwide yes requires API key. Limit 100,000 requests per day MapQuest map_quest yes no worldwide yes both open and commercial service require API key Nominatim nominatim yes supported worldwide yes requires a domain name (e.g. local installation) OpenCage opencage yes supported worldwide yes requires API key. 2500 requests/day free OpenStreetMap openstreetmap yes no worldwide yes heavy users (>1q/s) get banned TomTom tomtom yes required worldwide yes requires API key. First 2500 requests or 30 days free Yandex yandex yes no worldwide yes Below, you will find more information for these providers. ArcGISOnline It is possible to specify a sourceCountry to restrict result to this specific country thus reducing request time (note that this doesn't work on reverse geocoding). GeoIP2 It requires either the database file, or the webservice - represented by the GeoIP2 , which is injected to the GeoIP2Adapter. The geoip2/geoip2 package must be installed. This provider will only work with the corresponding GeoIP2Adapter: <?php  // Maxmind GeoIP2 Provider: e.g. the database reader $reader   = new \GeoIp2\Database\Reader('/path/to/database');  $adapter  = new \Geocoder\Adapter\GeoIP2Adapter($reader); $geocoder = new \Geocoder\Provider\GeoIP2($adapter);  $address   = $geocoder->geocode('74.200.247.59')->first(); GoogleMaps Locale and/or region can be specified: $geocoder = new \Geocoder\Provider\GoogleMaps(     $httpAdapter,     $locale,     $region,     $useSsl, // true|false     $apiKey ); GoogleMapsBusiness A valid Client ID is required. The private key is optional. This provider also supports SSL, and extends the GoogleMaps provider. MaxMindBinary This provider requires a data file, and the geoip/geoip package must be installed. It is worth mentioning that this provider has serious performance issues, and should not be used in production. For more information, please read issue #301. Nominatim Access to a Nominatim server is required. See the Nominatim Wiki Page for more information. TomTom The default language-locale is en, you can choose between de, es, fr, it, nl, pl, pt and sv. Yandex The default language-locale is ru-RU, you can choose between uk-UA, be-BY, en-US, en-BR and tr-TR. This provider can also reverse information based on coordinates (latitude, longitude). It's possible to precise the toponym to get more accurate result for reverse geocoding: house, street, metro, district and locality. IP-based Providers Provider Name IPv4? IPv6? Multiple? Terms Notes FreeGeoIp free_geo_ip yes yes no GeoIPs geo_ips yes no no requires API key GeoIP2 (Maxmind) maxmind_geoip2 yes yes no GeoPlugin geo_plugin yes yes no HostIp host_ip yes no no IpInfoDB ip_info_db yes no no requires API key city precision Geoip geoip yes no no wrapper around the PHP extension which must be installed MaxMind web service maxmind yes yes no requires Omni API key City/ISP/Org and Omni services, IPv6 on country level MaxMind Binary file maxmind_binary yes no no needs locally installed database files Important: the Geocoder Extra library contains even more official providers! Locale Aware Providers Providers that are locale aware expose the following methods: $geocoder->setLocale('xyz');  $locale = $geocoder->getLocale(); The Chain Provider The Chain provider is a special provider that takes a list of providers and iterates over this list to get information. Note that it stops its iteration when a provider returns a result. The result is returned by GoogleMaps because FreeGeoIp and HostIp cannot geocode street addresses. BingMaps is ignored. $geocoder = new \Geocoder\ProviderAggregator(); $adapter  = new \Ivory\HttpAdapter\CurlHttpAdapter();  $chain = new \Geocoder\Provider\Chain([     new \Geocoder\Provider\FreeGeoIp($adapter),     new \Geocoder\Provider\HostIp($adapter),     new \Geocoder\Provider\GoogleMaps($adapter, 'fr_FR', 'France', true),     new \Geocoder\Provider\BingMaps($adapter, '<API_KEY>'),     // ... ]);  $geocoder->registerProvider($chain);  try {     $geocode = $geocoder->geocode('10 rue Gambetta, Paris, France');     var_export($geocode); } catch (Exception $e) {     echo $e->getMessage(); } Everything is ok, enjoy! Dumpers Geocoder provides dumpers that aim to transform an Address object in standard formats. GPS eXchange Format (GPX) The GPS eXchange format is designed to share geolocated data like point of interests, tracks, ways, but also coordinates. Geocoder provides a dumper to convert an Address object in an GPX compliant format. Assuming we got a $address object as seen previously: <?php  $dumper = new \Geocoder\Dumper\Gpx(); $strGpx = $dumper->dump($address);  echo $strGpx; It will display: <gpx     version=""1.0""     creator=""Geocoder"" version=""1.0.1-dev""     xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""     xmlns=""http://www.topografix.com/GPX/1/0""     xsi:schemaLocation=""http://www.topografix.com/GPX/1/0 http://www.topografix.com/GPX/1/0/gpx.xsd"">     <bounds minlat=""2.388911"" minlon=""48.863151"" maxlat=""2.388911"" maxlon=""48.863151""/>     <wpt lat=""48.8631507"" lon=""2.3889114"">         <name><![CDATA[Paris]]></name>         <type><![CDATA[Address]]></type>     </wpt> </gpx> GeoJSON GeoJSON is a format for encoding a variety of geographic data structures. Keyhole Markup Language (KML) Keyhole Markup Language is an XML notation for expressing geographic annotation and visualization within Internet-based, two-dimensional maps and three-dimensional Earth browsers. Well-Known Binary (WKB) The Well-Known Binary (WKB) representation for geometric values is defined by the OpenGIS specification. Well-Known Text (WKT) Well-known text (WKT) is a text markup language for representing vector geometry objects on a map, spatial reference systems of spatial objects and transformations between spatial reference systems. Formatters A common use case is to print geocoded data. Thanks to the StringFormatter class, it's simple to format an Address object as a string: <?php  // $address is an instance of Address $formatter = new \Geocoder\Formatter\StringFormatter();  $formatter->format($address, '%S %n, %z %L'); // 'Badenerstrasse 120, 8001 Zuerich'  $formatter->format($address, '<p>%S %n, %z %L</p>'); // '<p>Badenerstrasse 120, 8001 Zuerich</p>' Here is the mapping: Street Number: %n Street Name: %S City: %L City District: %D Zipcode: %z Admin Level Name: %A1, %A2, %A3, %A4, %A5 Admin Level Code: %a1, %a2, %a3, %a4, %a5 Country: %C Country Code: %c Timezone: %T Extending Things You can write your own provider by implementing the Provider interface. You can provide your own dumper by implementing the Dumper interface. Versioning Geocoder follows Semantic Versioning. End Of Life 1.x As of December 2014, branch 1.7 is not officially supported anymore, meaning major version 1 reached end of life. Last version is: 1.7.1. 2.x As of December 2014, version 2.x is in a feature frozen state. All new features should be contributed to version 3.0 and upper. Last version is: 2.8.1. Major version 2 will reach end of life on December 2015. Stable Version Version 3.x is the current major stable version of Geocoder. Contributing See CONTRIBUTING file. Unit Tests In order to run the test suite, install the development dependencies: $ composer install --dev  Then, run the following command: $ phpunit  You'll obtain some skipped unit tests due to the need of API keys. Rename the phpunit.xml.dist file to phpunit.xml, then uncomment the following lines and add your own API keys: <php>     <!-- <server name=""IPINFODB_API_KEY"" value=""YOUR_API_KEY"" /> -->     <!-- <server name=""BINGMAPS_API_KEY"" value=""YOUR_API_KEY"" /> -->     <!-- <server name=""GEOIPS_API_KEY"" value=""YOUR_API_KEY"" /> -->     <!-- <server name=""MAXMIND_API_KEY"" value=""YOUR_API_KEY"" /> -->     <!-- <server name=""GEONAMES_USERNAME"" value=""YOUR_USERNAME"" /> -->     <!-- <server name=""TOMTOM_MAP_KEY"" value=""YOUR_MAP_KEY"" /> -->     <!-- <server name=""GOOGLE_GEOCODING_KEY"" value=""YOUR_GEOCODING_KEY"" /> -->     <!-- <server name=""OPENCAGE_API_KEY"" value=""YOUR_API_KEY"" /> --> </php> You're done. Credits William Durand william.durand1@gmail.com All contributors Contributor Code of Conduct As contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities. We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, age, or religion. Examples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. Project maintainers who do not follow the Code of Conduct may be removed from the project team. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers. This Code of Conduct is adapted from the Contributor Covenant, version 1.0.0, available at http://contributor-covenant.org/version/1/0/0/ License Geocoder is released under the MIT License. See the bundled LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/geocoder-php/Geocoder"	"A geocoding library."	"true"
"Geolocation"	"GeoJSON"	"https://github.com/jmikola/geojson"	"A GeoJSON implementation."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"109"	"14"	"20"	"GitHub - jmikola/geojson: GeoJSON implementation for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 109 Fork 20 jmikola/geojson Code Issues 2 Pull requests 3 Pulse Graphs GeoJSON implementation for PHP http://jmikola.github.io/geojson/ 40 commits 2 branches 3 releases Fetching contributors PHP 98.5% Makefile 1.5% PHP Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.0.0 1.0.2 1.0.1 Nothing to show New pull request Latest commit 6ec3016 Sep 27, 2015 jmikola Merge pull request #20 from jmikola/docs … Create gh-pages docs with MkDocs and ApiGen Permalink Failed to load latest commit information. docs Create gh-pages docs with MkDocs and ApiGen (closes #11) Sep 27, 2015 src/GeoJson Fix php warning on LinearRing creation with invalid params Sep 24, 2015 stubs Implement Feature and Geometry objects Jun 10, 2013 tests Adjust BoundingBox test values for bounds verification fix (see #5) Jan 16, 2014 .gitignore Create gh-pages docs with MkDocs and ApiGen (closes #11) Sep 27, 2015 .scrutinizer.yml Add code coverage for builds Apr 23, 2014 .travis.yml Remove testing against hhvm-nightly Sep 27, 2015 LICENSE Initial commit Jun 10, 2013 Makefile Create gh-pages docs with MkDocs and ApiGen (closes #11) Sep 27, 2015 README.md Create gh-pages docs with MkDocs and ApiGen (closes #11) Sep 27, 2015 apigen.neon Create gh-pages docs with MkDocs and ApiGen (closes #11) Sep 27, 2015 composer.json Require PHP 5.3.3+, which we explicitly test for in Travis Nov 12, 2013 mkdocs.yml Create gh-pages docs with MkDocs and ApiGen (closes #11) Sep 27, 2015 phpunit.xml.dist Implement Feature and Geometry objects Jun 10, 2013 README.md GeoJson PHP Library This library implements the GeoJSON format specification. The GeoJson namespace includes classes for each data structure defined in the GeoJSON specification. Core GeoJSON objects include geometries, features, and collections. Geometries range from primitive points to more complex polygons. Classes also exist for bounding boxes and coordinate reference systems. Installation The library is published as a package and is installable via Composer: $ composer require ""jmikola/geojson=~1.0""  More Resources Documentation API reference Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jmikola/geojson"	"A GeoJSON implementation."	"true"
"Geolocation"	"GeoTools"	"https://github.com/thephpleague/geotools"	"A library of geo-related tools."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"673"	"47"	"62"	"GitHub - thephpleague/geotools: Geo-related tools PHP 5.4+ library built atop Geocoder and React libraries Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 47 Star 673 Fork 62 thephpleague/geotools Code Issues 11 Pull requests 6 Pulse Graphs Geo-related tools PHP 5.4+ library built atop Geocoder and React libraries http://geotools-php.org 382 commits 2 branches 26 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 0.7.0 0.6.0 0.5.0 0.4.0 0.3.3 0.3.2 0.3.1 0.3.0 0.2.4 0.2.3 0.2.2 0.2.1 0.2.0 0.1.12 0.1.11 0.1.10 0.1.9 0.1.8 0.1.7 0.1.6 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit 7ba1484 Feb 12, 2016 toin0u Merge pull request #83 from codisart/add-other-coordinate-method … [TECH] Add a method to vertex to get the other coordinate. Permalink Failed to load latest commit information. bin [TECH] Rename the CLI Command Point namespace to Vertex Oct 16, 2015 src [TECH] Add a method to vertex to get the other coordinate. Feb 12, 2016 tests [TECH] Add a method to vertex to get the other coordinate. Feb 12, 2016 .gitattributes add gitattributes file Feb 4, 2015 .gitignore remove specific file in .gitignore Nov 3, 2013 .scrutinizer.yml add scrutinizer config file Feb 3, 2015 .travis.yml cache vendor in travis Jan 23, 2016 CHANGELOG.md bump version to 0.7.1-dev Feb 3, 2016 CONTRIBUTING.md Updated: Contribution doc Apr 9, 2013 LICENSE Initial import Feb 6, 2013 README.md [DOC] Add vertex documentation Feb 12, 2016 composer.json prepare release 0.7.0 Feb 3, 2016 phpunit.xml.dist use psr-4 ! Jul 30, 2014 README.md Geotools Geotools is a PHP geo-related library, built atop Geocoder and React libraries. Features Batch geocode & reverse geocoding request(s) in series / in parallel against one or a set of providers. » Cache geocode & reverse geocoding result(s) with Redis, Memcached or MongoDB to improve performances. » Compute geocode & reverse geocoding in the command-line interface (CLI) + dumpers and formatters. » Accept almost all kind of WGS84 geographic coordinates as coordinates. » Support 23 different ellipsoids and it's easy to provide a new one if needed. » Convert and format decimal degrees coordinates to decimal minutes or degrees minutes seconds coordinates. » Convert decimal degrees coordinates in the Universal Transverse Mercator (UTM) projection. » Compute the distance in meter (by default), km, mi or ft between two coordinates using flat, great circle, haversine or vincenty algorithms. » Compute the initial and final bearing from the origin coordinate to the destination coordinate in degrees. » Compute the initial and final cardinal point (direction) from the origin coordinate to the destination coordinate, read more in wikipedia. » Compute the half-way point (coordinate) between the origin and the destination coordinates. » Compute the destination point (coordinate) with given bearing in degrees and a distance in meters. » Encode a coordinate to a geo hash string and decode it to a coordinate, read more in wikipedia and on geohash.org. » Encode a coordinate via the 10:10 algorithm. » Polygon class provides methods to check either a poing (coordinate) is in, or on the polygon's boundaries. » A command-line interface (CLI) for Distance, Point, Geohash and Convert classes. » Integration with Frameworks: Laravel 4, Silex ... » ... more to come ... Installation Geotools can be found on Packagist. The recommended way to install Geotools is through composer. Run the following on the command line: php composer require league/geotools=@stable  Protip: you should browse the league/geotools page to choose a stable version to use, avoid the @stable meta constraint. Important: you should use the 0.4 version if you use Geocoder 2.x or/and PHP 5.3. And install dependencies: $ curl -sS https://getcomposer.org/installer | php $ php composer.phar install Now you can add the autoloader, and you will have access to the library: <?php  require 'vendor/autoload.php'; Usage & API Coordinate & Ellipsoid The default geodetic datum is WGS84 and coordinates are in decimal degrees. Here are the available ellipsoids: AIRY, AUSTRALIAN_NATIONAL, BESSEL_1841, BESSEL_1841_NAMBIA, CLARKE_1866, CLARKE_1880, EVEREST, FISCHER_1960_MERCURY, FISCHER_1968, GRS_1967, GRS_1980, HELMERT_1906, HOUGH, INTERNATIONAL, KRASSOVSKY, MODIFIED_AIRY, MODIFIED_EVEREST, MODIFIED_FISCHER_1960, SOUTH_AMERICAN_1969, WGS60, WGS66, WGS72, and WGS84. If you need to use an other ellipsoid, just create an array like this: <?php  $myEllipsoid = \League\Geotools\Coordinate\Ellipsoid::createFromArray([     'name' => 'My Ellipsoid', // The name of the Ellipsoid     'a'    => 123.0, // The semi-major axis (equatorial radius) in meters     'invF' => 456.0 // The inverse flattening ]); Geotools is built atop Geocoder. It means it's possible to use the \Geocoder\Model\Address directly but it's also possible to use a string or a simple array with its latitude and longitude. It supports valid and acceptable geographic coordinates like: 40:26:46N,079:56:55W 40:26:46.302N 079:56:55.903W 40°26′47″N 079°58′36″W 40d 26′ 47″ N 079d 58′ 36″ W 40.446195N 79.948862W 40.446195, -79.948862 40° 26.7717, -79° 56.93172 Latitudes below -90.0 or above 90.0 degrees are capped through \League\Geotools\Coordinate\Coordinate::normalizeLatitude(). Longitudes below -180.0 or above 180.0 degrees are wrapped through \League\Geotools\Coordinate\Coordinate::normalizeLongitude(). <?php  use League\Geotools\Coordinate\Coordinate; use League\Geotools\Coordinate\Ellipsoid;  // from an \Geocoder\Model\Address instance within Airy ellipsoid $coordinate = new Coordinate($geocoderResult, Ellipsoid::createFromName(Ellipsoid::AIRY)); // or in an array of latitude/longitude coordinate within GRS 1980 ellipsoid $coordinate = new Coordinate([48.8234055, 2.3072664], Ellipsoid::createFromName(Ellipsoid::GRS_1980)); // or in latitude/longitude coordinate within WGS84 ellipsoid $coordinate = new Coordinate('48.8234055, 2.3072664'); // or in degrees minutes seconds coordinate within WGS84 ellipsoid $coordinate = new Coordinate('48°49′24″N, 2°18′26″E'); // or in decimal minutes coordinate within WGS84 ellipsoid $coordinate = new Coordinate('48 49.4N, 2 18.43333E'); // the result will be: printf(""Latitude: %F\n"", $coordinate->getLatitude()); // 48.8234055 printf(""Longitude: %F\n"", $coordinate->getLongitude()); // 2.3072664 printf(""Ellipsoid name: %s\n"", $coordinate->getEllipsoid()->getName()); // WGS 84 printf(""Equatorial radius: %F\n"", $coordinate->getEllipsoid()->getA()); // 6378136.0 printf(""Polar distance: %F\n"", $coordinate->getEllipsoid()->getB()); // 6356751.317598 printf(""Inverse flattening: %F\n"", $coordinate->getEllipsoid()->getInvF()); // 298.257224 printf(""Mean radius: %F\n"", $coordinate->getEllipsoid()->getArithmeticMeanRadius()); // 6371007.772533 // it's also possible to modify the coordinate without creating an other coodinate $coordinate->setFromString('40°26′47″N 079°58′36″W'); printf(""Latitude: %F\n"", $coordinate->getLatitude()); // 40.446388888889 printf(""Longitude: %F\n"", $coordinate->getLongitude()); // -79.976666666667 Convert It provides methods (and aliases) to convert decimal degrees WGS84 coordinates to degrees minutes seconds or decimal minutes WGS84 coordinates. You can format the output string easily. You can also convert them in the Universal Transverse Mercator (UTM) projection (Southwest coast of Norway and the region of Svalbard are covered). <?php  $geotools   = new \League\Geotools\Geotools(); $coordinate = new \League\Geotools\Coordinate\Coordinate('40.446195, -79.948862'); $converted  = $geotools->convert($coordinate); // convert to decimal degrees without and with format string printf(""%s\n"", $converted->toDecimalMinutes()); // 40 26.7717N, -79 56.93172W printf(""%s\n"", $converted->toDM('%P%D°%N %p%d°%n')); // 40°26.7717 -79°56.93172 // convert to degrees minutes seconds without and with format string printf(""%s\n"", $converted->toDegreesMinutesSeconds('<p>%P%D:%M:%S, %p%d:%m:%s</p>')); // <p>40:26:46, -79:56:56</p> printf(""%s\n"", $converted->toDMS()); // 40°26′46″N, 79°56′56″W // convert in the UTM projection (standard format) printf(""%s\n"", $converted->toUniversalTransverseMercator()); // 17T 589138 4477813 printf(""%s\n"", $converted->toUTM()); // 17T 589138 4477813 (alias) Here is the mapping: Decimal minutes Latitude Longitude Positive or negative sign %P %p Direction %L %l Degrees %D %d Decimal minutes %N %n Degrees minutes seconds Latitude Longitude Positive or negative sign %P %p Direction %L %l Degrees %D %d Minutes %M %m Seconds %S %s Batch It provides a very handy way to batch geocode and reverse geocoding requests in serie or in parallel against a set of providers. Thanks to Geocoder and React libraries. It's possible to batch one request (a string) or a set of request (an array) against one provider or set of providers. You can use a provided cache engine or use your own by setting a cache object which should implement League\Geotools\Cache\CacheInterface and extend League\Geotools\Cache\AbstractCache if needed. At the moment Geotools supports: Redis, packagist and github Redis(array $client = [], $expire = 0) $client should be an array with host, port and database keys $expire should be an integer, no expire value by default flush() method deletes all the keys of the currently selected database which is 0 by default Memcached, php.net Memcached($server = self::DEFAULT_SERVER, $port = self::DEFAULT_PORT, $expire = 0) $server can be address like example.com or an IP, localhost is the default one $port can be an integer like 11211 (by default) $expire should be an integer, no expire value by default flush() method invalidates all items in the cache MongoDB, driver and php.net MongoDB($server = null, $database = self::DATABASE, $collection = self::COLLECTION) $server can be a string like mongodb://example.com:65432 $database can be a string like geotools (by default) $collection can be a string like geotools_cache (by default) flush() method drops the current collection NB: Before you implement caching in your app please be sure that doing so does not violate the Terms of Service for your(s) geocoding provider(s). <?php  $geocoder = new \Geocoder\ProviderAggregator(); // or \Geocoder\TimedGeocoder $adapter  = new \Ivory\HttpAdapter\CurlHttpAdapter();  $geocoder->registerProviders([     new \Geocoder\Provider\GoogleMapsProvider($adapter),     new \Geocoder\Provider\OpenStreetMapProvider($adapter),     new \Geocoder\Provider\BingMapsProvider($adapter, '<FAKE_API_KEY>'), // throws InvalidCredentialsException     new \Geocoder\Provider\YandexProvider($adapter),     new \Geocoder\Provider\FreeGeoIpProvider($adapter),     new \Geocoder\Provider\GeoipProvider(), ]);  try {     $geotools = new \League\Geotools\Geotools();     $cache    = new \League\Geotools\Cache\MongoDB();     // or     $cache    = new \League\Geotools\Cache\Redis([         'host'     => '127.0.0.1',         'port'     => 6379,         'database' => 15 // the last database ID     ]);     $results  = $geotools->batch($geocoder)->setCache($cache)->geocode([         'Paris, France',         'Copenhagen, Denmark',         '74.200.247.59',         '::ffff:66.147.244.214'     ])->parallel(); } catch (\Exception $e) {     die($e->getMessage()); }  $dumper = new \Geocoder\Dumper\WktDumper(); foreach ($results as $result) {     // if a provider throws an exception (UnsupportedException, InvalidCredentialsException ...)     // an custom /Geocoder/Result/Geocoded instance is returned which embedded the name of the provider,     // the query string and the exception string. It's possible to use dumpers     // and/or formatters from the Geocoder library.     printf(""%s|%s|%s\n"",         $result->getProviderName(),         $result->getQuery(),         '' == $result->getExceptionMessage() ? $dumper->dump($result) : $result->getExceptionMessage()     ); } You should get 24 results (4 values to geocode against 6 providers) something like: google_maps|Paris, France|POINT(2.352222 48.856614) google_maps|Copenhagen, Denmark|POINT(12.568337 55.676097) google_maps|74.200.247.59|The GoogleMapsProvider does not support IP addresses. google_maps|::ffff:66.147.244.214|The GoogleMapsProvider does not support IP addresses. openstreetmaps|Paris, France|POINT(2.352133 48.856506) openstreetmaps|Copenhagen, Denmark|POINT(12.570072 55.686724) openstreetmaps|74.200.247.59|Could not execute query http://nominatim.openstreetmap.org/search?q=74.200.247.59&format=xml&addressdetails=1&limit=1 openstreetmaps|::ffff:66.147.244.214|The OpenStreetMapProvider does not support IPv6 addresses. bing_maps|Paris, France|Could not execute query http://dev.virtualearth.net/REST/v1/Locations/?q=Paris%2C+France&key=<FAKE_API_KEY> bing_maps|Copenhagen, Denmark|Could not execute query http://dev.virtualearth.net/REST/v1/Locations/?q=Copenhagen%2C+Denmark&key=<FAKE_API_KEY> bing_maps|74.200.247.59|The BingMapsProvider does not support IP addresses. bing_maps|::ffff:66.147.244.214|The BingMapsProvider does not support IP addresses. yandex|Paris, France|POINT(2.341198 48.856929) yandex|Copenhagen, Denmark|POINT(12.567602 55.675682) yandex|74.200.247.59|The YandexProvider does not support IP addresses. yandex|::ffff:66.147.244.214|The YandexProvider does not support IP addresses. free_geo_ip|Paris, France|The FreeGeoIpProvider does not support Street addresses. free_geo_ip|Copenhagen, Denmark|The FreeGeoIpProvider does not support Street addresses. free_geo_ip|74.200.247.59|POINT(-122.415600 37.748400) free_geo_ip|::ffff:66.147.244.214|POINT(-111.613300 40.218100) geoip|Paris, France|The GeoipProvider does not support Street addresses. geoip|Copenhagen, Denmark|The GeoipProvider does not support Street addresses. geoip|74.200.247.59|POINT(-122.415604 37.748402) geoip|::ffff:66.147.244.214|The GeoipProvider does not support IPv6 addresses.  Batch reverse geocoding is something like: <?php  // ... $geocoder like the previous example ... // If you want to reverse one coordinate try {     $results = $geotools->batch($geocoder)->reverse(         new \League\Geotools\Coordinate\Coordinate([2.307266, 48.823405])     )->parallel(); } catch (\Exception $e) {     die($e->getMessage()); } // Or if you want to reverse geocoding 3 coordinates $coordinates = [     new \League\Geotools\Coordinate\Coordinate([2.307266, 48.823405]),     new \League\Geotools\Coordinate\Coordinate([12.568337, 55.676097]),     new \League\Geotools\Coordinate\Coordinate('-74.005973 40.714353')), ]; $results = $geotools->batch($geocoder)->reverse($coordinates)->parallel(); // ... If you want to batch it in serie, replace the method parallel() by serie(). To optimize batch requests you need to register providers according to their capabilities and what you're looking for (geocode street addresses, geocode IPv4, geocode IPv6 or reverse geocoding), please read more at the Geocoder library doc. Distance It provides methods to compute the distance in meter (by default), km, mi or ft between two coordinates using flat (most performant), great circle, haversine or vincenty (most accurate) algorithms. Those coordinates should be in the same ellipsoid. <?php  $geotools = new \League\Geotools\Geotools(); $coordA   = new \League\Geotools\Coordinate\Coordinate([48.8234055, 2.3072664]); $coordB   = new \League\Geotools\Coordinate\Coordinate([43.296482, 5.36978]); $distance = $geotools->distance()->setFrom($coordA)->setTo($coordB);  printf(""%s\n"",$distance->flat()); // 659166.50038742 (meters) printf(""%s\n"",$distance->greatCircle()); // 659021.90812846 printf(""%s\n"",$distance->in('km')->haversine()); // 659.02190812846 printf(""%s\n"",$distance->in('mi')->vincenty()); // 409.05330679648 printf(""%s\n"",$distance->in('ft')->flat()); // 2162619.7519272 Point It provides methods to compute the initial and final bearing in degrees, the initial and final cardinal direction, the middle point and the destination point. The middle and the destination points returns a \League\Geotools\Coordinate\Coordinate object with the same ellipsoid. <?php  $geotools = new \League\Geotools\Geotools(); $coordA   = new \League\Geotools\Coordinate\Coordinate([48.8234055, 2.3072664]); $coordB   = new \League\Geotools\Coordinate\Coordinate([43.296482, 5.36978]); $vertex    =  $geotools->vertex()->setFrom($coordA)->setTo($coordB);  printf(""%d\n"", $vertex->initialBearing()); // 157 (degrees) printf(""%s\n"", $vertex->initialCardinal()); // SSE (SouthSouthEast) printf(""%d\n"", $vertex->finalBearing()); // 160 (degrees) printf(""%s\n"", $vertex->finalCardinal()); // SSE (SouthSouthEast)  $middlePoint = $vertex->middle(); // \League\Geotools\Coordinate\Coordinate printf(""%s\n"", $middlePoint->getLatitude()); // 46.070143125815 printf(""%s\n"", $middlePoint->getLongitude()); // 3.9152401085931  $destinationPoint = $geotools->vertex()->setFrom($coordA)->destination(180, 200000); // \League\Geotools\Coordinate\Coordinate printf(""%s\n"", $destinationPoint->getLatitude()); // 47.026774650075 printf(""%s\n"", $destinationPoint->getLongitude()); // 2.3072664 Geohash It provides methods to get the geo hash and its bounding box's coordinates (SouthWest & NorthEast) of a coordinate and the coordinate and its bounding box's coordinates (SouthWest & NorthEast) of a geo hash. <?php  $geotools       = new \League\Geotools\Geotools(); $coordToGeohash = new \League\Geotools\Coordinate\Coordinate('43.296482, 5.36978');  // encoding $encoded = $geotools->geohash()->encode($coordToGeohash, 4); // 12 is the default length / precision // encoded printf(""%s\n"", $encoded->getGeohash()); // spey // encoded bounding box $boundingBox = $encoded->getBoundingBox(); // array of \League\Geotools\Coordinate\CoordinateInterface $southWest   = $boundingBox[0]; $northEast   = $boundingBox[1]; printf(""http://www.openstreetmap.org/?minlon=%s&minlat=%s&maxlon=%s&maxlat=%s&box=yes\n"",     $southWest->getLongitude(), $southWest->getLatitude(),     $northEast->getLongitude(), $northEast->getLatitude() ); // http://www.openstreetmap.org/?minlon=5.2734375&minlat=43.2421875&maxlon=5.625&maxlat=43.41796875&box=yes  // decoding $decoded = $geotools->geohash()->decode('spey61y'); // decoded coordinate printf(""%s\n"", $decoded->getCoordinate()->getLatitude()); // 43.296432495117 printf(""%s\n"", $decoded->getCoordinate()->getLongitude()); // 5.3702545166016 // decoded bounding box $boundingBox = $decoded->getBoundingBox(); //array of \League\Geotools\Coordinate\CoordinateInterface $southWest   = $boundingBox[0]; $northEast   = $boundingBox[1]; printf(""http://www.openstreetmap.org/?minlon=%s&minlat=%s&maxlon=%s&maxlat=%s&box=yes\n"",     $southWest->getLongitude(), $southWest->getLatitude(),     $northEast->getLongitude(), $northEast->getLatitude() ); // http://www.openstreetmap.org/?minlon=5.3695678710938&minlat=43.295745849609&maxlon=5.3709411621094&maxlat=43.297119140625&box=yes 10:10 Represent a location with 10m accuracy using a 10 character code that includes features to prevent errors in entering the code. Read more about the algorithm here. <?php  $tenten = new \League\Geotools\Tests\Geohash\TenTen; $tenten->encode(new Coordinate([51.09559, 1.12207])); // MEQ N6G 7NY5 Vertex Represents a segment with a direction. You can find if two vertexes are on the same line. <?php     $vertexA->setFrom(48.8234055);     $vertexA->setTo(2.3072664);      $vertexB->setFrom(48.8234055);     $vertexB->setTo(2.3072664);     $vertexA->isOnSameLine($vertexB); Polygon It helps you to know if a point (coordinate) is in a Polygon or on the Polygon's boundaries and if this in on a Polygon's vertex. First you need to create the polygon, you can provide: an array of arrays an array of Coordinate a CoordinateCollection <?php  $polygon = new \League\Geotools\Polygon([     [48.9675969, 1.7440796],     [48.4711003, 2.5268555],     [48.9279131, 3.1448364],     [49.3895245, 2.6119995], ]);  $polygon->setPrecision(5); // set the comparision precision $polygon->pointInPolygon(new \League\Geotools\Coordinate\Coordinate([49.1785607, 2.4444580])); // true $polygon->pointInPolygon(new \League\Geotools\Coordinate\Coordinate([49.1785607, 5])); // false $polygon->pointOnBoundary(new \League\Geotools\Coordinate\Coordinate([48.7193486, 2.13546755])); // true $polygon->pointOnBoundary(new \League\Geotools\Coordinate\Coordinate([47.1587188, 2.87841795])); // false $polygon->pointOnVertex(new \League\Geotools\Coordinate\Coordinate([48.4711003, 2.5268555])); // true $polygon->pointOnVertex(new \League\Geotools\Coordinate\Coordinate([49.1785607, 2.4444580])); // false $polygon->getBoundingBox(); // return the BoundingBox object CLI It provides command lines to compute methods provided by Distance, Point, Geohash and Convert classes. Thanks to the Symfony Console Component. $ php geotools list // list of available commands $ php geotools help distance:flat // get the help $ php geotools distance:flat ""40° 26.7717, -79° 56.93172"" ""30°16′57″N 029°48′32″W"" // 4690203.1048522 $ php geotools distance:haversine ""35,45"" ""45,35"" --ft  // 4593030.9787593 $ php geotools distance:vincenty ""35,45"" ""45,35"" --km  // 1398.4080717661 $ php geotools d:v ""35,45"" ""45,35"" --km --ellipsoid=WGS60 // 1398.4145201642 $ php geotools point:initial-cardinal ""40:26:46.302N 079:56:55.903W"" ""43.296482, 5.36978"" // NE (NordEast) $ php geotools point:final-cardinal ""40:26:46.302N 079:56:55.903W"" ""43.296482, 5.36978"" // ESE (EastSouthEast) $ php geotools point:destination ""40° 26.7717, -79° 56.93172"" 25 10000 // 40.527599285543, -79.898914904538 $ php geotools p:d ""40° 26.7717, -79° 56.93172"" 25 10000 --ellipsoid=GRS_1980 // 40.527599272782, -79.898914912379 $ php geotools geohash:encode ""40° 26.7717, -79° 56.93172"" --length=3 // dpp $ php geotools convert:dm ""40.446195, -79.948862"" --format=""%P%D°%N %p%d°%n"" // 40°26.7717 -79°56.93172 $ php geotools convert:dms ""40.446195, -79.948862"" --format=""%P%D:%M:%S, %p%d:%m:%s"" // 40:26:46, -79:56:56 $ php geotools convert:utm ""60.3912628, 5.3220544"" // 32V 297351 6700644 $ php geotools c:u ""60.3912628, 5.3220544"" --ellipsoid=AIRY // 32V 297371 6700131 ... Compute street addresses, IPv4s or IPv6s geocoding and reverse geocoding right in your console. It's possible to define and precise your request through these options: --adapter: socket, buzz, zend, guzzle or curl by default. --provider: bing_maps, yahoo, maxmind... google_maps is the default one. See the full list here. --cache: mongodb, memcached or redis as a fallback. --raw: the result output in RAW format, shows Adapter, Provider and Arguments if any. --json: the result output in JSON string format. --args: this option accepts multiple values (e.g. --args=""API_KEY"" --args=""LOCALE"") if your provider needs or can have arguments. --dumper: this option is available for geocoding, gpx, geojson, kml, wkb and wkt by default. Read more here. --format: this option is available for reverse geocoding, see the mapping here. $ php geotools help geocoder:geocode // get the help $ php geotools geocoder:geocode ""Copenhagen, Denmark"" // 55.6760968, 12.5683371 $ php geotools geocoder:geocode ""74.200.247.59"" --provider=""free_geo_ip"" --adapter=""socket"" // 37.7484, -122.4156 $ php geotools geocoder:geocode Paris --args=""fr_FR"" --args=""France"" --args=""true"" // 48.856614, 2.3522219 $ php geotools geocoder:geocode Paris --dumper=wkt // POINT(2.352222 48.856614) ... $ php geotools geocoder:reverse ""48.8631507, 2.388911"" // Avenue Gambetta 10, 75020 Paris $ php geotools geocoder:reverse ""48.8631507, 2.388911"" --format=""%L, %R, %C"" // Paris, Île-De-France, France $ php geotools geocoder:reverse ""48.8631507, 2.388911"" --format=""%L, %R, %C"" --provider=""openstreetmaps"" // Paris, Île-De-France, France Métropolitaine ... $ php geotools geocoder:geocode ""Tagensvej 47, Copenhagen"" --raw --args=da_DK --args=Denmark --adapter=socket --cache=redis The last command will show an output like this: Adapter:       \Ivory\HttpAdapter\SocketHttpAdapter Provider:      \Geocoder\Provider\GoogleMaps Cache:         \League\Geotools\Cache\Redis Arguments:     da_DK,Denmark --- Latitude:      55.699953 Longitude:     12.552736 Bounds  - South: 55.699953  - West:  12.552736  - North: 55.699953  - East:  12.552736 Street Number: 47 Street Name:   Tagensvej Zipcode:       2200 City:          Copenhagen City District: København N County:        København County Code:   KØBENHAVN Region:        Capital Region Of Denmark Region Code:   CAPITAL REGION OF DENMARK Country:       Denmark Country Code:  DK Timezone:  Integration with Frameworks Laravel 4 & 5 Silex ... Unit Tests To run unit tests, you'll need the cURL extension and a set of dependencies, you can install them using Composer: $ php composer.phar install --dev Once installed, just launch the following command: $ phpunit --coverage-text Credits Antoine Corcy Pascal Borreli Phil Sturgeon Gabriel Bull All contributors Acknowledgments Geocoder - MIT ReactPHP - MIT Symfony Console Component - MIT Symfony Serializer Component - MIT PHP client library for Redis - MIT Geokit, Geotools-for-CodeIgniter, geotools-php ... Changelog See the changelog file Contributing Please see CONTRIBUTING for details. Support Bugs and feature request are tracked on GitHub Contributor Code of Conduct As contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities. We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, age, or religion. Examples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. Project maintainers who do not follow the Code of Conduct may be removed from the project team. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers. This Code of Conduct is adapted from the Contributor Covenant, version 1.0.0, available at http://contributor-covenant.org/version/1/0/0/ License Geotools is released under the MIT License. See the bundled LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/geotools"	"A library of geo-related tools."	"true"
"Geolocation"	"PHPGeo"	"https://github.com/mjaschen/phpgeo"	"A simple geo library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"654"	"60"	"109"	"GitHub - mjaschen/phpgeo: Simple Geo Library for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 60 Star 654 Fork 109 mjaschen/phpgeo Code Issues 4 Pull requests 0 Pulse Graphs Simple Geo Library for PHP 117 commits 5 branches 18 releases 4 contributors PHP 99.9% Makefile 0.1% PHP Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop-0.4 develop-1.0 develop documentation master Nothing to show v0.2.1 v0.2.0 v0.1.0 1.3.2 1.3.1 1.3.0 1.2.1 1.2.0 1.1.1 1.1.0 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 0.3.0 0.2.3 0.2.2 Nothing to show New pull request Latest commit 61962ed Apr 18, 2016 mjaschen docs: replace Piwik snippet Permalink Failed to load latest commit information. docs docs: replace Piwik snippet Apr 18, 2016 src/Location feat: start work on corridor around a line Apr 1, 2016 tests tests: add test for setSeparator() method Apr 2, 2016 .gitignore chore: update ignore file Mar 21, 2016 .scrutinizer.yml Removed external code coverage setting from Scrutinizer config Dec 9, 2014 .travis.yml Dropped support for PHP 5.3; Code style fixes Oct 29, 2015 CHANGELOG.md docs: change log Mar 29, 2016 CONTRIBUTING.md docs: add contribution docs Mar 17, 2016 LICENSE docs: add GPL 3 as license for phpgeo; tagging release 1.0.0 Feb 11, 2016 Makefile docs: insert Piwik snippet when building documentation Mar 21, 2016 README.md docs: update README Mar 29, 2016 composer.json docs: update homepage URL and keywords in composer.json Apr 8, 2016 phpunit.xml initial Commit Feb 12, 2013 README.md phpgeo - A Simple Geo Library for PHP phpgeo provides abstractions to geographical coordinates (including support for different ellipsoids) and allows you to calculate geographical distances between coordinates with high precision. Requirements Documentation Installation Features Examples/Usage Distance between two coordinates (Vincenty's Formula) Simplifying a polyline Polygon contains a point (e.g. ""GPS geofence"") Formatted output of coordinates Decimal Degrees Degrees/Minutes/Seconds (DMS) GeoJSON Credits Requirements Minimum required PHP version is 5.4. PHP 5.3 compatibility was dropped with release of version 0.4. Documentation The documentation is available at https://phpgeo.marcusjaschen.de/ Installation Using Composer, just add it to your composer.json by running: composer require mjaschen/phpgeo  Features Info: Please visit the documentation site for complete and up-to-date documentation! phpgeo provides the following features (follow the links for examples): abstractions of several geometry objects (coordinate/point, line, polyline/GPS track, polygon support for different ellipsoids, e. g. WGS-84 length/distance/perimeter calculations with different implementations (Haversine, Vincenty) Geofence calculation, i. e. answering the question ""Is this point contained in that area/polygon?"" formatting and output of geometry objects (GeoJSON, nice strings, e. g. 18° 54′ 41″ -155° 40′ 42″) calculation of bearing angle between two points (spherical or with Vincenty's formula) calculation of a destination point for a given starting point, bearing angle, and distance (spherical or with Vincenty's formula) calculation of the perpendicular distance between a point and a line getting segments of a polyline /polygon, reversing direction of polyline/polygon Examples/Usage This list is incomplete, please visit the documentation site for the full monty of documentation and examples! Distance between two coordinates (Vincenty's Formula) Use the calculator object directly: <?php  use Location\Coordinate; use Location\Distance\Vincenty;  $coordinate1 = new Coordinate(19.820664, -155.468066); // Mauna Kea Summit $coordinate2 = new Coordinate(20.709722, -156.253333); // Haleakala Summit  $calculator = new Vincenty();  echo $calculator->getDistance($coordinate1, $coordinate2); // returns 128130.850 (meters; ≈128 kilometers) or call the getDistance() method of a Coordinate object by injecting a calculator object: <?php  use Location\Coordinate; use Location\Distance\Vincenty;  $coordinate1 = new Coordinate(19.820664, -155.468066); // Mauna Kea Summit $coordinate2 = new Coordinate(20.709722, -156.253333); // Haleakala Summit  echo $coordinate1->getDistance($coordinate2, new Vincenty()); // returns 128130.850 (meters; ≈128 kilometers) Simplifying a polyline Polylines can be simplified to save storage space or bandwidth. Simplification is done with the Ramer–Douglas–Peucker algorithm (AKA Douglas-Peucker algorithm). <?php  use Location\Coordinate; use Location\Polyline; use Location\Distance\Vincenty;  $polyline = new Polyline(); $polyline->addPoint(new Coordinate(10.0, 10.0)); $polyline->addPoint(new Coordinate(20.0, 20.0)); $polyline->addPoint(new Coordinate(30.0, 10.0));  $processor = new Simplify($polyline);  // remove all points which perpendicular distance is less // than 1500 km from the surrounding points. $simplified = $processor->simplify(1500000);  // simplified is the polyline without the second point (which // perpendicular distance is ~1046 km and therefore below // the simplification threshold) Polygon contains a point (e.g. ""GPS geofence"") phpgeo has a polygon implementation which can be used to determinate if a point is contained in it or not. A polygon consists of at least three points. Points are instances of the Coordinate class. Warning: The calculation gives wrong results if the polygons has points on both sides of the 180/-180 degrees meridian. <?php  use Location\Coordinate; use Location\Polygon;  $geofence = new Polygon();  $geofence->addPoint(new Coordinate(-12.085870,-77.016261)); $geofence->addPoint(new Coordinate(-12.086373,-77.033813)); $geofence->addPoint(new Coordinate(-12.102823,-77.030938)); $geofence->addPoint(new Coordinate(-12.098669,-77.006476));  $outsidePoint = new Coordinate(-12.075452, -76.985079); $insidePoint = new Coordinate(-12.092542, -77.021540);  var_dump($geofence->contains($outsidePoint)); // returns bool(false) the point is outside the polygon var_dump($geofence->contains($insidePoint)); // returns bool(true) the point is inside the polygon Formatted output of coordinates You can format a coordinate in different styles. Decimal Degrees <?php  use Location\Coordinate; use Location\Formatter\Coordinate\DecimalDegrees;  $coordinate = new Coordinate(19.820664, -155.468066); // Mauna Kea Summit  echo $coordinate->format(new DecimalDegrees()); Degrees/Minutes/Seconds (DMS) <?php  use Location\Coordinate; use Location\Formatter\Coordinate\DMS;  $coordinate = new Coordinate(18.911306, -155.678268); // South Point, HI, USA  $formatter = new DMS();  echo $coordinate->format($formatter); // 18° 54′ 41″ -155° 40′ 42″  $formatter->setSeparator("", "")     ->useCardinalLetters(true)     ->setUnits(DMS::UNITS_ASCII);  echo $coordinate->format($formatter); // 18° 54' 41"" N, 155° 40' 42"" W GeoJSON <?php  use Location\Coordinate; use Location\Formatter\Coordinate\GeoJSON;  $coordinate = new Coordinate(18.911306, -155.678268); // South Point, HI, USA  echo $coordinate->format(new GeoJSON()); // { ""type"" : ""point"" , ""coordinates"" : [ -155.678268, 18.911306 ] } Credits Marcus Jaschen mail@marcusjaschen.de Chris Veness - JavaScript implementation of the Vincenty formula for distance calculation Ersts,P.J., Horning, N., and M. Polin[Internet] Perpendicular Distance Calculator(version 1.2.2) Documentation. American Museum of Natural History, Center for Biodiversity and Conservation. Available from http://biodiversityinformatics.amnh.org/open_source/pdc. Accessed on 2013-07-07. W. Randolph Franklin, PNPOLY - Point Inclusion in Polygon Test Documentation Richard Barnes Polyline GeoJSON Formatter Paul Vidal Polygon Implementation Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mjaschen/phpgeo"	"A simple geo library."	"true"
"Date and Time"	"CalendR"	"http://yohan.giarel.li/CalendR/"	"A calendar management library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"352"	"24"	"46"	"GitHub - yohang/CalendR: The missing PHP 5.3+ calendar management library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 352 Fork 46 yohang/CalendR Code Issues 5 Pull requests 1 Pulse Graphs The missing PHP 5.3+ calendar management library. http:/yohan.giarel.li/CalendR 214 commits 5 branches 14 releases 7 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 1.1 feature-recurring-events gh-pages master Nothing to show 2.0.0 1.1.1 1.1.0 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 1.0.0-beta4 1.0.0-beta3 1.0.0-beta2 1.0.0-beta Nothing to show New pull request Latest commit 019c651 Apr 17, 2016 yohang Merge pull request #43 from garak/patch-1 … Allow Symfony3 Permalink Failed to load latest commit information. docs @ 177ecbf Bumped docs Mar 4, 2013 src/CalendR Allow Symfony3 Mar 8, 2016 tests Made factory mandatory for period construction Dec 28, 2015 .gitignore Updated dependencies (FIX tests) Sep 5, 2013 .gitmodules Updated modules for Travis (fail in SSH - publickey) Jul 28, 2012 .travis.yml Removed some deprecations Dec 28, 2015 CHANGELOG.md Made factory mandatory for period construction Dec 28, 2015 LICENSE Refactored periods, exeptions and added License to files Feb 14, 2012 README.md Added 1.1 branch build status Dec 28, 2015 composer.json Allow Symfony3 Mar 8, 2016 phpunit.xml.dist Added source code Jan 20, 2012 README.md CalendR CalendR is an Object Oriented Calendar management library on top of PHP5.3+ Date objects. You can use it to deal with all your needs about calendars and events. Complete documentation Complete documentation is available here. Installation CalendR is hosted on packagist, you can install it with composer. Create a composer.json file     {         ""require"": {             ""yohang/calendr"": ""^1.1""         }     } Install composer and run it     wget http://getcomposer.org/composer.phar     php composer.phar install (Optional) Autoload CalendR     require 'vendor/autoload.php'; Contribute Calendar is open to contributions. Merging delays can vary depending to my free time, but always be welcome. License CalendR is licensed under the MIT License - see the LICENSE file for details Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/yohang/CalendR"	"A calendar management library."	"true"
"Date and Time"	"Carbon"	"https://github.com/briannesbitt/Carbon"	"A simple DateTime API extension."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4543"	"207"	"538"	"GitHub - briannesbitt/Carbon: A simple PHP API extension for DateTime. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 207 Star 4,543 Fork 538 briannesbitt/Carbon Code Issues 53 Pull requests 38 Pulse Graphs A simple PHP API extension for DateTime. http://carbon.nesbot.com/ 899 commits 6 branches 23 releases 88 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags analysis-8AP5Ay analysis-XVB9nw analysis-XZnerP analysis-qo74MK gh-pages master Nothing to show 1.21.0 1.20.0 1.19.0 1.18.0 1.17.0 1.16.0 1.15.0 1.14.0 1.13.0 1.12.0 1.11.0 1.10.0 1.9.0 1.8.0 1.7.0 1.6.0 1.5.0 1.4.0 1.3.0 1.2.0 1.1.0 1.0.1 1.0.0 Nothing to show New pull request Latest commit 36c134b Jun 27, 2016 1 briannesbitt committed on GitHub Merge pull request #677 from lucasmichot/feature/master/muted-codecov … Mute codecov PR comments Permalink Failed to load latest commit information. src/Carbon Applied fixes from StyleCI Jun 27, 2016 tests Applied fixes from StyleCI Jun 27, 2016 .codecov.yml Mute codecov comments Jun 26, 2016 .editorconfig Handle yams files in editorconfig Nov 5, 2015 .gitattributes Mute codecov comments Jun 26, 2016 .gitignore Add .php_cs file and .styleci.yml files Nov 3, 2015 .php_cs Merge pull request #595 from lucasmichot/feature/master/cs-adjustement Jun 24, 2016 .styleci.yml Merge pull request #595 from lucasmichot/feature/master/cs-adjustement Jun 24, 2016 .travis.yml Cache packages and use --prefer-dist Jun 26, 2016 LICENSE CS fixes Jul 9, 2014 composer.json Fix branch-alias to reference next minor version Nov 28, 2015 phpunit.xml.dist There is no syntaxCheck option Nov 4, 2015 readme.md Climb version May 2, 2016 readme.md Carbon A simple PHP API extension for DateTime. http://carbon.nesbot.com use Carbon\Carbon;  printf(""Right now is %s"", Carbon::now()->toDateTimeString()); printf(""Right now in Vancouver is %s"", Carbon::now('America/Vancouver'));  //implicit __toString() $tomorrow = Carbon::now()->addDay(); $lastWeek = Carbon::now()->subWeek(); $nextSummerOlympics = Carbon::createFromDate(2012)->addYears(4);  $officialDate = Carbon::now()->toRfc2822String();  $howOldAmI = Carbon::createFromDate(1975, 5, 21)->age;  $noonTodayLondonTime = Carbon::createFromTime(12, 0, 0, 'Europe/London');  $worldWillEnd = Carbon::createFromDate(2012, 12, 21, 'GMT');  // Don't really want to die so mock now Carbon::setTestNow(Carbon::createFromDate(2000, 1, 1));  // comparisons are always done in UTC if (Carbon::now()->gte($worldWillEnd)) {     die(); }  // Phew! Return to normal behaviour Carbon::setTestNow();  if (Carbon::now()->isWeekend()) {     echo 'Party!'; } echo Carbon::now()->subMinutes(2)->diffForHumans(); // '2 minutes ago'  // ... but also does 'from now', 'after' and 'before' // rolling up to seconds, minutes, hours, days, months, years  $daysSinceEpoch = Carbon::createFromTimestamp(0)->diffInDays(); Installation With Composer $ composer require nesbot/carbon  {     ""require"": {         ""nesbot/carbon"": ""~1.21""     } } <?php require 'vendor/autoload.php';  use Carbon\Carbon;  printf(""Now: %s"", Carbon::now()); Without Composer Why are you not using composer? Download Carbon.php from the repo and save the file into your project path somewhere. <?php require 'path/to/Carbon.php';  use Carbon\Carbon;  printf(""Now: %s"", Carbon::now()); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/briannesbitt/Carbon"	"A simple DateTime API extension."	"true"
"Date and Time"	"ExpressiveDate"	"https://github.com/jasonlewis/expressive-date"	"Another DateTime API extension."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"242"	"25"	"30"	"GitHub - jasonlewis/expressive-date: A fluent extension to PHPs DateTime class. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 242 Fork 30 jasonlewis/expressive-date Code Issues 6 Pull requests 2 Pulse Graphs A fluent extension to PHPs DateTime class. 31 commits 1 branch 3 releases 3 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 1215d09 May 17, 2013 jasonlewis Merge pull request #9 from msurguy/patch-1 … Added details about instance with no parameters Permalink Failed to load latest commit information. src Added date comparisons. Apr 20, 2013 tests Refactoring tests. Apr 20, 2013 .travis.yml Initial commit of travis Dec 14, 2012 LICENSE Added the license and readme. Dec 14, 2012 README.md Added details about instance with no parameters May 17, 2013 composer.json Remove mockery dependency. Apr 20, 2013 phpunit.xml Added phpunit and composer Dec 14, 2012 README.md Expressive Date A fluent extension to PHPs DateTime class. Table of Contents Installation Composer Manually Laravel 4 Usage Getting Instances Quick Helpers Cloning Manipulating Dates Differences Between Dates Comparing Dates Interacting With Dates Formatting Dates Working With Timezones Changelog License Installation Composer Add Expressive Date to your composer.json file. ""jasonlewis/expressive-date"": ""1.0.*""  Run composer install to get the latest version of the package. Manually It's recommended that you use Composer, however you can download and install from this repository. Laravel 4 Expressive Date comes with a service provider for Laravel 4. You'll need to add it to your composer.json as mentioned in the above steps, then register the service provider with your application. Open app/config/app.php and find the providers key. Add ExpressiveDateServiceProvider to the array. You can get an instance of Expressive Date through the applications container. $date = App::make('date');  // Or if you have access to an instance of the application. $date = $app['date']; You can also use the other instantiation methods described below. Usage Expressive Date is an extension to PHPs DateTime class. This means that if you can't do something with Expressive Date you still have the flexibility of DateTime at your disposal. Getting Instances Before you can begin working with dates you'll need to get an instance of ExpressiveDate. You have a number of options available to you. // Instantiate a new instance of Expressive Date. // This will create an instance and use the current date and time $date = new ExpressiveDate;  // Use the static make method to get an instance of Expressive Date. $date = ExpressiveDate::make(); Both of these methods accepts two parameters, a time string and a timezone. This is identical to the DateTime constructor except the second parameters timezone does not need to be an intance of DateTimeZone. // Pass a valid timezone as the second parameter. $date = new ExpressiveDate(null, 'Australia/Melbourne');  // Or you can still use a DateTimeZone instance. $timezone = new DateTimeZone('Australia/Melbourne');  $date = new ExpressiveDate(null, $timezone); Alternatively, you can make a date from existing dates or times. // You can use existing dates to get an instance of Expressive Date. $date = ExpressiveDate::makeFromDate(2012, 1, 31);  // If you have the time, you can use that instead. $date = ExpressiveDate::makeFromTime(14, 30, 0); If you use null as any of the parameters then Expressive Date will use the current respective value. The only exception to this is if you supply an hour to ExpressiveDate::makeFromTime() but no minute or second, instead of defaulting to the current minute or second it will set them to 0. This mimicks the existing functionality when interacting with dates using PHP. Quick Helpers There are a couple of quick helper methods available to you when using Expressive Date. $date = new ExpressiveDate; // Creates an instance that uses current date and time  $date->today(); // Sets to todays date, e.g., 1991-01-31 00:00:00  $date->tomorrow(); // Sets to tomorrows date, e.g., 1991-02-01 00:00:00  $date->yesterday(); // Sets to yesterdays date, e.g., 1991-01-30 00:00:00 These helpers also set the time to midnight. Cloning You can clone an instance of ExpressiveDate with the clone() method. $date = new ExpressiveDate;  $clone = $date->clone(); A clone is identical to the original instance and is useful when you need to compare or manipulate a date without affecting the original instance. Manipulating Dates When working with dates you'll often want to manipulate it in a number of ways. Expressive Date eases this process with a simple and intuitive syntax. $date = new ExpressiveDate('December 1, 2012 12:00:00 PM');  $date->addOneDay(); // December 2, 2012 12:00:00 PM $date->addDays(10); // December 12, 2012 12:00:00 PM $date->minusOneDay(); // December 11, 2012 12:00:00 PM $date->minusDays(10); // December 1, 2012 12:00:00 PM  $date->addOneWeek(); // December 8, 2012 12:00:00 PM $date->addWeeks(10); // February 16, 2013, at 12:00:00 PM $date->minusOneWeek(); // February 9, 2013 12:00:00 PM $date->minusWeeks(10); // December 1, 2012 12:00:00 PM  $date->addOneMonth(); // January 1, 2013 12:00:00 PM $date->addMonths(10); // November 1, 2013 12:00:00 PM $date->minusOneMonth(); // October 1, 2013 12:00:00 PM $date->minusMonths(10); // December 1, 2012 12:00:00 PM  $date->addOneYear(); // December 1, 2013 12:00:00 PM $date->addYears(10); // December 1, 2023 12:00:00 PM $date->minusOneYear(); // December 1, 2022 12:00:00 PM $date->minusYears(10); // December 1, 2012 12:00:00 PM  $date->addOneHour(); // December 1, 2012 1:00:00 PM $date->addHours(10); // December 1, 2012 11:00:00 PM $date->minusOneHour(); // December 1, 2012 10:00:00 PM $date->minusHours(10); // December 1, 2012 12:00:00 PM  $date->addOneMinute(); // December 1, 2012 12:01:00 PM $date->addMinutes(10); // December 1, 2012 12:11:00 PM $date->minusOneMinute(); // December 1, 2012 12:10:00 PM $date->minusMinutes(10); // December 1, 2012 12:00:00 PM  $date->addOneSecond(); // December 1, 2012 12:00:01 PM $date->addSeconds(10); // December 1, 2012 12:00:11 PM $date->minusOneSecond(); // December 1, 2012 12:00:10 PM $date->minusSeconds(10); // December 1, 2012 12:00:00 PM You can also set the unit manually using one of the setters. $date = new ExpressiveDate('December 1, 2012 12:00:00 PM');  $date->setDay(31); // December 31, 2012 12:00:00 PM $date->setMonth(1); // January 31, 2012 12:00:00 PM $date->setYear(1991); // January 31, 1991 12:00:00 PM $date->setHour(6); // January 31, 1991 6:00:00 AM $date->setMinute(30); // January 31, 1991 6:30:00 AM $date->setSecond(53); // January 31, 1991 6:30:53 AM There are also several methods to quick jump to the start or end of a day, month, or week. $date = new ExpressiveDate('December 1, 2012 12:00:00 PM');  $date->startOfDay(); // December 1, 2012 12:00:00 AM $date->endOfDay(); // December 1, 2012 11:59:59 PM  $date->startOfWeek(); // 25th November, 2012 at 12:00 AM $date->endOfWeek(); // 1st December, 2012 at 11:59 PM  $date->startOfMonth(); // December 1, 2012 12:00:00 AM $date->endOfMonth(); // December 31, 2012 11:59:59 PM The start and end of the week are influenced by what day you configure to be the start of the week. In America, the start of the week is Sunday and for most other places it's Monday. By default the start of the week is Sunday. $date = new ExpressiveDate('December 1, 2012 12:00:00 PM');  // Set the week start day to Monday, to set it to Sunday you'd use 0. $date->setWeekStartDay(1);  // You can also use the actual name of the day so it makes more sense. $date->setWeekStartDay('monday');  $date->startOfWeek(); // 26th November, 2012 at 12:00 AM Lastly you can set the timestamp directly or set it from a string. $date = new ExpressiveDate;  $date->setTimestamp(time()); // Set the timestamp to the current time. $date->setTimestampFromString('31 January 1991'); // Set timestamp from a string. Differences Between Dates Getting the difference between two dates is very easy with Expressive Date. Let's see how long it's been since my birthday, which was on the 31st January, 1991. $date = new ExpressiveDate('January 31, 1991'); $now = new ExpressiveDate('December 1, 2012');  $date->getDifferenceInYears($now); // 21 $date->getDifferenceInMonths($now); // 262 $date->getDifferenceInDays($now); // 7975 $date->getDifferenceInHours($now); // 191400 $date->getDifferenceInMinutes($now); // 11484000 $date->getDifferenceInSeconds($now); // 689040000 Wow, I'm over 689040000 seconds old! In the above example I'm explicitly passing in another instance to compare against. You don't have to, by default it'll use the current date and time. $date = new ExpressiveDate('January 31, 1991');  $date->getDifferenceInYears(); // Will use the current date and time to get the difference. Comparing Dates Being able to compare two dates is important in many applications. Expressive Date allows you to compare two ExpressiveDate instances against one another in a variety of ways. $date = new ExpressiveDate;  $date->equalTo($date->clone()); // true $date->sameAs($date->clone()->minusOneDay()); // false $date->notEqualTo($date->clone()); // false $date->greaterThan($date->clone()->minusOneDay()); // true $date->lessThan($date->clone()->addOneDay()); // true $date->greaterOrEqualTo($date->clone()); // true $date->lessOrEqualTo($date->clone()->minusOneDay()); // false The methods themselves should be self explanatory. The sameAs() method is an alias of equalTo(). Interacting With Dates Expressive Date provides a number of helpful methods for interacting with your dates and times. $date = new ExpressiveDate('December 1, 2012 2:30:50 PM');  $date->getDay(); // 1 $date->getMonth(); // 12 $date->getYear(); // 2012 $date->getHour(); // 14 $date->getMinute(); // 30 $date->getSecond(); // 50 $date->getDayOfWeek(); // Saturday $date->getDayOfWeekAsNumeric(); // 6 $date->getDaysInMonth(); // 31 $date->getDayOfYear(); // 335 $date->getDaySuffix(); // st $date->getGmtDifference(); // +1100 $date->getSecondsSinceEpoch(); // 1354320000 $date->isLeapYear(); // true $date->isAmOrPm(); // PM $date->isDaylightSavings(); // true $date->isWeekday(); // false $date->isWeekend(); // true Formatting Dates It's now time to display your date and time to everyone. Expressive Date comes with a couple of predefined formatting methods for your convenience. $date = new ExpressiveDate('December 1, 2012 2:30:50 PM');  $date->getDate(); // 2012-12-01 $date->getDateTime(); // 2012-12-01 14:30:50 $date->getShortDate(); // Dec 1, 2012 $date->getLongDate(); // December 1st, 2012 at 2:30pm $date->getTime(); // 14:30:50  // You can still define your own formats. $date->format('jS F, Y'); // 31st January, 2012 You can set a default date format on each instance of Expressive Date which will then be used when you cast the object to a string. $date = new ExpressiveDate('December 1, 2012 2:30:50 PM');  echo $date; // 1st December, 2012 at 2:30pm  $date->setDefaultDateFormat('d M y');  echo $date; // 1 Dec 12 Expressive Date also comes with a human readable or relative date method. $date = new ExpressiveDate('December 1, 2012 2:30:50 PM');  $date->getRelativeDate(); // Would show something similar to: 4 days ago You can also pass in an instance of Expressive Date to compare against, and it's date can also be in the future. $now = new ExpressiveDate('December 1, 2012 2:30:50 PM'); $future = new ExpressiveDate('December 9, 2012 7:45:32 AM');  $now->getRelativeDate($future); // 1 week from now Working with Timezones It's always important to factor in timezones when working with dates and times. Because Expressive Date uses PHPs DateTime class it'll default to using the date defined with date_default_timezone_set(). If you need to you can manipulate the timezone on the fly. $date = new ExpressiveDate;  $date->setTimezone('Australia/Darwin');  // Or use an instance of DateTimeZone. $timezone = new DateTimeZone('Australia/Darwin');  $date->setTimezone($timezone); You can also get an instance of PHPs DateTimeZone if you need it for other manipulations. $date = new ExpressiveDate;  $timezone = $date->getTimezone(); Or you can just get the name of the timezone. $date = new ExpressiveDate;  $timezone = $date->getTimezoneName(); // Australia/Melbourne Changelog 1.0.2 Added copy method. Added docblock for magic method hints. Added startOfWeek, endOfWeek, setWeekStartDay, and getWeekStartDay methods. Allowed setWeekStartDay to accept the name of the day as a parameter, e.g., Monday. Fixed exceptions being thrown when using floats for manipulation, e.g., ExpressiveDate::addDays(0.5). Added makeFromDate, makeFromTime, and makeFromDateTime methods. Fixed bug with the week start day being inclusive resulting in 8 day weeks. Added equalTo, sameAs, greaterThan, lessThan, greaterOrEqualTo, and lessOrEqualTo methods. 1.0.1 Added the setDefaultDate method. Added __toString method which uses the default date. Removed the String suffix from date formatting methods. 1.0.0 Initial release. License Expressive Date is licensed under the 2-clause BSD, see the LICENSE file for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jasonlewis/expressive-date"	"Another DateTime API extension."	"true"
"Date and Time"	"Moment.php"	"https://github.com/fightbulc/moment.php"	"Moment.js inspired PHP DateTime handler with i18n support."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"303"	"28"	"68"	"GitHub - fightbulc/moment.php: Parse, validate, manipulate, and display dates in PHP w/ i18n support. Inspired by moment.js Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 303 Fork 68 fightbulc/moment.php Code Issues 12 Pull requests 1 Pulse Graphs Parse, validate, manipulate, and display dates in PHP w/ i18n support. Inspired by moment.js 260 commits 4 branches 69 releases Fetching contributors PHP 95.3% HTML 4.7% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop feature/te/i18n master revert-39-master Nothing to show 1.20.9 1.20.8 1.20.7 1.20.6 1.20.5 1.20.4 1.20.3 1.20.2 1.20.1 1.20.0 1.19.0 1.18.0 1.17.1 1.17.0 1.16.0 1.15.0 1.14.2 1.14.1 1.14.0 1.13.0 1.12.1 1.12.0 1.11.5 1.11.4 1.11.3 1.11.2 1.11.1 1.11.0 1.10.4 1.10.3 1.10.2 1.10.1 1.10.0 1.9.1 1.9.0 1.8.2 1.8.1 1.8.0 1.7.2 1.7.1 1.7.0 1.6.5 1.6.4 1.6.3 1.6.2 1.6.1 1.6.0 1.5.4 1.5.3 1.5.2 1.5.1 1.5.0 1.4.1 1.4.0 1.3.5 1.3.4 1.3.3 1.3.2 1.3.1 1.3.0 1.2.2 1.2.1 1.2.0 1.1.3 1.1.2 1.1.1 1.1.0 1.0.3 1.0.2 Nothing to show New pull request Latest commit f7c1967 Jun 29, 2016 fightbulc updated README Permalink Failed to load latest commit information. src Fix russian locale and add unit test Jun 29, 2016 tests Fix test last week weekend Jun 29, 2016 .gitignore added vendor and composer.lock Oct 19, 2012 .travis.yml needs to pass php7 Jan 5, 2016 README.md updated README Jun 29, 2016 composer.json added some keywords Apr 2, 2015 README.md                                       _           _             _ __ ___   ___  _ __ ___   ___ _ __ | |_   _ __ | |__  _ __   | '_ ` _ \ / _ \| '_ ` _ \ / _ \ '_ \| __| | '_ \| '_ \| '_ \ | | | | | | (_) | | | | | |  __/ | | | |_ _| |_) | | | | |_) | |_| |_| |_|\___/|_| |_| |_|\___|_| |_|\__(_) .__/|_| |_| .__/                                            |_|         |_|      Change log Intro What is moment.php? Date library for parsing, manipulating and formatting dates w/ i18n. Any dependencies? PHP 5.3 or later since moment.php is based on php's DateTime Class. Install Easy install via composer. Still no idea what composer is? Inform yourself here. {     ""require"": {         ""fightbulc/moment"": ""*""     } } Quick examples Get a moment $m = new \Moment\Moment(); // default is ""now"" UTC echo $m->format(); // e.g. 2012-10-03T10:00:00+0000  $m = new \Moment\Moment('now', 'Europe/Berlin'); echo $m->format(); // e.g. 2012-10-03T12:00:00+0200 Accepted date formats Moment parses the following date formats as input: const ATOM = 'Y-m-d\TH:i:sP'; // 2005-08-15T15:52:01+00:00 const COOKIE = 'l, d-M-y H:i:s T'; // Monday, 15-Aug-2005 15:52:01 UTC const ISO8601 = 'Y-m-d\TH:i:sO'; // 2005-08-15T15:52:01+0000 const RFC822 = 'D, d M y H:i:s O'; // Mon, 15 Aug 05 15:52:01 +0000 const RFC850 = 'l, d-M-y H:i:s T'; // Monday, 15-Aug-05 15:52:01 UTC const RFC1036 = 'D, d M y H:i:s O'; // Mon, 15 Aug 05 15:52:01 +0000 const RFC1123 = 'D, d M Y H:i:s O'; // Mon, 15 Aug 2005 15:52:01 +0000 const RFC2822 = 'D, d M Y H:i:s O'; // Mon, 15 Aug 2005 15:52:01 +0000 const RSS = 'D, d M Y H:i:s O'; // Mon, 15 Aug 2005 15:52:01 +0000 const W3C = 'Y-m-d\TH:i:sP'; // 2005-08-15T15:52:01+00:00  // Moment also tries to parse dates without timezone or without seconds  const NO_TZ_MYSQL = 'Y-m-d H:i:s'; // 2005-08-15 15:52:01 const NO_TZ_NO_SECS = 'Y-m-d H:i'; // 2005-08-15 15:52  // time fractions "".000"" will be automatically removed $timeWithFraction = '2016-05-04T10:00:00.000'; Switch locale Have a look at the Locales folder to see all supported languages. Default locale is en_GB. $m = new \Moment\Moment(); echo $m->format('[Weekday:] l'); // e.g. Weekday: Wednesday  // set german locale \Moment\Moment::setLocale('de_DE');  $m = new \Moment\Moment(); echo $m->format('[Wochentag:] l'); // e.g. Wochentag: Mittwoch Supported languages so far: ca_ES Catalan zh_CN Chinese zh_TW Chinese (traditional) cs_CZ Czech da_DK Danish nl_NL Dutch en_GB English (British) en_US English (American) fr_FR French (Europe) de_DE German (Germany) in_ID Indonesian it_IT Italian ja_JP Japanese pl_PL Polish pt_BR Portuguese (Brazil) ru_RU Russian (Basic version) es_ES Spanish (Europe) se_SV Swedish th_TH Thai Switch timezones $m = new \Moment\Moment('2012-04-25T03:00:00', 'CET'); echo $m->setTimezone('UTC')->format(); // 2012-04-25T01:00:00+0000 Custom format I. PHP only (Standard) $m = new \Moment\Moment('2012-04-25T03:00:00', 'CET'); echo $m->format('l, dS F Y / H:i (e)'); // Wednesday, 25th April 2012 / 03:00 (Europe/Berlin) Formats are based on PHP's Date function and DateTime class. II. Non-php formats You can now inject different format handling by passing along a class which implements the FormatsInterface. You can find an example within the test folder for implementing all formats from moment.js. Thanks to Ashish for taking the time to match moment.js formats to those of PHP. Have a look at the test script to see the example in action. Everybody can write format classes in the same manner. Its easy and scalable. // get desired formats class // create a moment $m = new \Moment\Moment('2012-04-25T03:00:00', 'CET');  // format with moment.js definitions echo $m->format('LLLL', new \Moment\CustomFormats\MomentJs()); // Wednesday, April 25th 2012 3:00 AM III. Easy text escaping Just wrap all your text within [] and all characters will be automatically escaped for you. $m = new \Moment\Moment('2012-04-25T03:00:00', 'CET'); echo $m->format('[We are in the month of:] F'); // We are in the month of: April IV. Fixed ordinal representations PHP's interal ordinal calculation seems to be buggy. I added a quick fix to handle this issue. The following example prints the week of the year of the given date. It should print 22nd: // internal function date('WS', mktime(12, 22, 0, 5, 27, 2014)); // 22th  // moment.php $m = new \Moment\Moment('2014-05-27T12:22:00', 'CET'); $m->format('WS'); // 22nd Create custom moments and manipulate it I. Past/Future moments $m = new \Moment\Moment('2012-05-15T12:30:00', 'CET'); echo $m->addHours(2)->format(); // 2012-05-15T14:30:00+0200  $m = new \Moment\Moment('2012-05-15T12:30:00', 'CET'); echo $m->subtractDays(7)->subtractMinutes(15)->format(); // 2012-05-08T12:15:00+0200  $m = new \Moment\Moment('@1401443979', 'CET'); // unix time echo $m->subtractDays(7)->subtractMinutes(15)->format(); // 2014-05-23T09:44:39+0000 II. Clone a given moment Sometimes its useful to take a given moment and work with it without changing the origin. For that use cloning(). $m = new \Moment\Moment('2012-05-15T12:30:00', 'CET'); $c = $m->cloning()->addDays(1);  echo $m->getDay(); // 15 echo $c->getDay(); // 16 Alternately, you can enable immutable mode on the origin. $m = new \Moment\Moment('2012-05-15T12:30:00', 'CET', true); $c = $m->addDays(1);  echo $m->getDay(); // 15 echo $c->getDay(); // 16  // You can also change the immutable mode after creation: $m->setImmutableMode(false)->subtractDays(1);  echo $m->getDay(); // 14 Immutable mode makes all modification methods call cloning() implicitly before applying their modifications. III. Methods for manipulating the date/time Add Subtract addSeconds($s) subtractSeconds($s) addMinutes($i) subtractMinutes($i) addHours($h) subtractHours($h) addDays($d) subtractDays($d) addWeeks($w) subtractWeeks($w) addMonths($m) subtractMonths($m) addYears($y) subtractYears($y) IV. Setter/Getter Setter Getter setSecond($s) getSecond() setMinute($m) getMinute() setHour($h) getHour() setDay($d) getDay() setMonth($m) getMonth() setYear($y) getYear() -- getQuarter() Difference between dates $m = new \Moment\Moment('2013-02-01T07:00:00'); $momentFromVo = $m->fromNow();  // or from a specific moment $m = new \Moment\Moment('2013-02-01T07:00:00'); $momentFromVo = $m->from('2011-09-25T10:00:00');  // result comes as a value object class echo $momentFromVo->getDirection()  // ""future"" echo $momentFromVo->getSeconds()    // -42411600 echo $momentFromVo->getMinutes()    // -706860 echo $momentFromVo->getHours()      // -11781 echo $momentFromVo->getDays()       // -490.88 echo $momentFromVo->getWeeks()      // -70.13 echo $momentFromVo->getMonths()     // -17.53 echo $momentFromVo->getYears()      // -1.42 echo $momentFromVo->getRelative()   // in a year Get date periods (week, month, quarter) Sometimes its helpful to get the period boundaries of a given date. For instance in case that today is Wednesday and I need the starting-/end dates from today's week. Allowed periods are week, month and quarter. $m = new \Moment\Moment('2013-10-23T10:00:00'); $momentPeriodVo = $m->getPeriod('week');  // results comes as well as a value object class echo $momentPeriodVo     ->getStartDate()     ->format('Y-m-d'); // 2013-10-21  echo $momentPeriodVo     ->getEndDate()     ->format('Y-m-d'); // 2013-10-27  echo $momentPeriodVo     ->getRefDate()     ->format('Y-m-d'); // 2013-10-23  echo $momentPeriodVo->getInterval(); // 43 = week of year Same procedure for monthly and quarterly periods: $momentPeriodVo = $m->getPeriod('month'); $momentPeriodVo = $m->getPeriod('quarter'); Calendar Times Calendar time displays time relative to now, but slightly differently than Moment::fromNow(). Moment::calendar() will format a date with different strings depending on how close to today the date is. (new \Moment\Moment('2014-03-30T16:58:00', 'CET'))->subtractDays(6)->calendar(); // last week (new \Moment\Moment('2014-03-30T16:58:00', 'CET'))->subtractDays(1)->calendar(); // yesterday (new \Moment\Moment('2014-03-30T16:58:00', 'CET'))->calendar(); // today (new \Moment\Moment('2014-03-30T16:58:00', 'CET'))->addDays(1)->calendar(); // tomorrow (new \Moment\Moment('2014-03-30T16:58:00', 'CET'))->addDays(3)->calendar(); // next week (new \Moment\Moment('2014-03-30T16:58:00', 'CET'))->addDays(10)->calendar(); // everything else Time Display Last week Last Monday at 15:54 The day before Yesterday at 15:54 The same day Today at 15:54 The next day Tomorrow at 15:54 The next week Wednesday at 15:54 Everything else 04/09/2014 Note: Use $moment->calendar(false) to leave out the time at 00:00. startOf / endOf Same process as for moment.js: mutates the original moment by setting it to the start/end of a unit of time. $m = new \Moment\Moment('20140515T10:15:23', 'CET');  $m->startOf('year');    // set to January 1st, 00:00 this year $m->startOf('quarter');  // set to the beginning of the current quarter, 1st day of months, 00:00 $m->startOf('month');   // set to the first of this month, 00:00 $m->startOf('week');    // set to the first day of this week, 00:00 $m->startOf('day');     // set to 00:00 today $m->startOf('hour');    // set to now, but with 0 mins, 0 secs $m->startOf('minute');  // set to now, but with 0 seconds  $m->endOf('year');    // set to December 31st, 23:59 this year $m->endOf('quarter');  // set to the end of the current quarter, last day of month, 23:59 $m->endOf('month');   // set to the last of this month, 23:59 $m->endOf('week');    // set to the last day of this week, 23:59 $m->endOf('day');     // set to 23:59 today $m->endOf('hour');    // set to now, but with 59 mins, 59 secs $m->endOf('minute');  // set to now, but with 59 seconds Note: I ignored the period of second since we are not dealing with milliseconds. Get dates for given weekdays for upcoming weeks For one of my customers I needed to get moments by selected weekdays. The task was: give me the dates for Tuesdays and Thursdays for the next three weeks. So I added a small handler which does exactly this. As result you will receive an array filled with Moment Objects. // 1 - 7 = Mon - Sun $weekdayNumbers = [     2, // tuesday     4, // thursday ];  $m = new \Moment\Moment(); $dates = $m->getMomentsByWeekdays($weekdayNumbers, 3);  // $dates = [Moment, Moment, Moment ...] You can now run through the result and put it formatted into a drop-down field or for whatever you might need it. Roadmap Try to port useful methods from moment.js Add unit tests Changelog 1.20.9 fixed: Russian locale added: Russian locale tests 1.20.8 fixed: Polish locale Calculation of seconds 1.20.7 fixed: Russian: more relative time fixes 1.20.6 fixed: Russian locale relative time: day handling 1.20.5 fixed: missing immutable handling 1.20.4 fixed: Improved Polish locale (added Nominativ) 1.20.3 fixed: Chinese locale 1.20.2 added accepted formats to README 1.20.1 fixed: Thai locale 1.20.0 added: Catalan locale fixed: Polish locale test 1.19.0 added: Russian locale fixed: Polish locale test 1.18.0 added: Immutable mode fixed: Polish locale 1.17.0 added: Polish locale 1.16.0 added: Indonesian locale 1.15.0 added: Japanese locale 1.14.1 fixed: typo in Dutch locale 1.14.0 added: Dutch locale 1.13.0 added: Swedish locale 1.12.0 added: Danish locale 1.11.4 fixed: fixed starting/ending weekday for Romanian locale 1.11.3 fixed: adding delimiter character to Italian locale 1.11.1 fixed: passing back new instance for startOf/endOf for week, month, quarter 1.11.0 added: locale Czech 1.10.4 added: calendar locale receives as \Closure the following params function(Moment $m) {} relativeTime locale receives as \Closure the following params function($count, $direction, Moment $m) {} 1.10.3 added: fixed passing closures to locale (calendar, relativeTime) set correct german locale information 1.10.2 added: fixed Thai locale strings 1.10.1 added: locale traditional Chinese 1.10.0 added: locale Chinese ordinal formatter receives now the token e.g. the token within dS is d 1.9.1 fixed: english ordinal issue for numbers between 11 - 13 1.9.0 added: locale Italian 1.8.1 fixed: english ordinal issue 1.8.0 added: locale Portuguese 1.7.2 fixed: Locale displayed wrong month name (#34) Changed the order of weekdays within locale files 1.7.1 added: getWeekdayNameLong() getWeekdayNameShort() getMonthNameLong() getMonthNameShort() 1.7.0 added: Locale: Thai 1.6.0 added: Locale MomentFromVo: getMonths() getYears() getRelative() fixed: MomentFromVo: getSeconds() shows now direction as well 1.5.3 fixed: timezone issue which occured only for unixtime dates other: MomentFromVo: direction returns now: ""future"" (-) / ""past"" (+) time values are now type casted as floats 1.5.2 fixed: unrecognised timezone when constructing a Moment 1.5.1 added: getMomentsByWeekdays() getWeekday() getWeekOfYear() other: escaped text 1.5.0 added: startOf and endOf as implemented by moment.js get the quarter period of a given date setDay() getDay() setMonth() getMonth() setYear() getYear() getQuarter() setSecond() getSecond() setMinute() getMinute() setHour() getHour() added cloning() create a new mutable moment based of the given instance added getInterval() to MomentPeriodVo to indicate the interval of the given period week = week of the year month = month of the year quarter = quarter of the year added a static class MomentHelper get the period for a given quarter in a given year fixed PHP's internal ordinal calculation (also in combination with moment.js formatting) e.g. WS for 21th week of the year shows now correct 21th etc. you can now escape text by wrapping it in [] e.g. [Hello World] will be automatically transformed into \H\e\l\l\o \W\o\r\l\d removed: add() subtract() 1.4.0 added: calendar format as implemented by moment.js 1.3.0 fixed: incompatibility w/ PHP 5.3 added: Exception throw as MomentException Date validation on instantiation: test for dates w/ format YYYY-mm-dd and YYYY-mm-ddTHH:ii:ss throws MomentException on invalid dates addSeconds() addMinutes() addHours() addDays() addWeeks() addMonths() addYears() subtractSeconds() subtractMinutes() subtractHours() subtractDays() subtractWeeks() subtractMonths() subtractYears() deprecated: add() subtract() License Moment.php is freely distributable under the terms of the MIT license. Copyright (c) 2014 Tino Ehrich Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fightbulc/moment.php"	"Moment.js inspired PHP DateTime handler with i18n support."	"true"
"Event"	"Amp"	"https://github.com/amphp/amp"	"An event driven non-blocking I/O library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"348"	"35"	"25"	"GitHub - amphp/amp: A non-blocking concurrency framework for PHP applications Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 348 Fork 25 amphp/amp Code Issues 2 Pull requests 2 Pulse Graphs A non-blocking concurrency framework for PHP applications http://amphp.org/docs/amp/ 424 commits 3 branches 51 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master react-promises reactor-bound-state Nothing to show v1.2.2 v1.2.1 v1.2.0 v1.1.1 v1.1.0 v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v1.0.0-beta5 v1.0.0-beta4 v1.0.0-beta3 v1.0.0-beta2 v1.0.0-beta v1.0.0-alpha v0.17.0 v0.16.0 v0.15.3 v0.15.2 v0.15.1 v0.15.0 v0.14.0 v0.13.0 v0.12.1 v0.12.0 v0.11.4 v0.11.3 v0.11.2 v0.11.1 v0.11.0 v0.10.2 v0.10.1 v0.10.0 v0.9.0 v0.8.1 v0.8.0 v0.7.1 v0.7.0 v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 77bfdd5 May 12, 2016 kelunik Improve changelog formatting Permalink Failed to load latest commit information. lib Fix notices in NativeReactor; prepare tag 1.2.2 May 12, 2016 test Add tests for resolve callables May 11, 2016 .coveralls.yml support file updates Jul 19, 2015 .gitattributes support file updates Jul 19, 2015 .gitignore support file updates Jul 19, 2015 .php_cs support file updates Jul 19, 2015 .travis.yml Cache composer dependecies for faster builds Apr 1, 2016 CHANGELOG.md Improve changelog formatting May 12, 2016 CONTRIBUTING.md update contributing file Jul 22, 2015 LICENSE update license Jul 22, 2015 README.md Add note about extension backends Oct 31, 2015 composer.json Add branch alias for dev-master Aug 18, 2015 phpunit.xml support file updates Jul 19, 2015 README.md amp amphp/amp is a non-blocking concurrency framework for PHP applications. Learn more about amphp/amp in the guide. Required PHP Version PHP 5.5+ Optional Extension Backends Extensions are only needed if your app necessitates high numbers of concurrent socket connections. ev libevent php-uv (experimental fork, requires PHP7) Installation $ composer require amphp/amp Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/amphp/amp"	"An event driven non-blocking I/O library."	"true"
"Event"	"Broadway"	"https://github.com/qandidate-labs/broadway"	"An event source and CQRS library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"698"	"72"	"115"	"GitHub - qandidate-labs/broadway: Infrastructure and testing helpers for creating CQRS and event sourced applications. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 72 Star 698 Fork 115 qandidate-labs/broadway Code Issues 27 Pull requests 23 Pulse Graphs Infrastructure and testing helpers for creating CQRS and event sourced applications. http://labs.qandidate.com/blog/2014/08/26/broadway-our-cqrs-es-framework-open-sourced/ 283 commits 2 branches 14 releases 38 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master mongo-config Nothing to show 0.9.0 0.8.0 0.7.1 0.7.0 0.6.0 0.5.2 0.5.1 0.5.0 0.4.0 0.3.0 0.2.1 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit 18d289a Jun 14, 2016 wjzijderveld committed on GitHub Merge pull request #265 from unkind/feature-reflection-aggregate-factory … Add ReflectionAggregateFactory Permalink Failed to load latest commit information. examples Small typo fix in example code Oct 23, 2015 src/Broadway Merge pull request #265 from unkind/feature-reflection-aggregate-factory Jun 14, 2016 test Add ReflectionAggregateFactory Jun 14, 2016 .gitignore Commit composer.lock to speed up tests Jul 13, 2015 .php_cs configured and ran php-cs-fixer Nov 25, 2014 .travis.yml test PHP7 on Travis CI Jan 8, 2016 CHANGELOG.md Updated changelog Apr 19, 2016 LICENSE Open source! Aug 26, 2014 README.md Update composer version Jul 16, 2015 composer.json Updated branch-alias Apr 19, 2016 composer.lock Updated branch-alias Apr 19, 2016 phpunit.xml.dist Open source! Aug 26, 2014 README.md Broadway Broadway is a project providing infrastructure and testing helpers for creating CQRS and event sourced applications. Broadway tries hard to not get in your way. The project contains several loosely coupled components that can be used together to provide a full CQRS\ES experience. Note: while broadway is currently used in production, you should probably know what you're doing. ;) Feel free to join #qandidate on freenode with questions and remarks! About Read the blog post about this repository at: http://labs.qandidate.com/blog/2014/08/26/broadway-our-cqrs-es-framework-open-sourced/ Installation $ composer require broadway/broadway  Examples Examples can be found in the examples/ directory. Most of the examples focus on showing how one of the components works. There is also a more deliberate example using several components and showing how you can test your event sourced model. Components Broadway consists of several components. Check out the README's of each component for more information. Auditing CommandHandling Domain EventDispatcher EventHandling EventSourcing EventStore Processor ReadModel Repository Saga Serializer Integrations The broadway project ships with a bundle to use with a Symfony application. A Laravel package is also available to allow the use of Broadway inside a Laravel application. Contributions for integrations with other projects are appreciated! Acknowledgements The broadway project is heavily inspired by other open source project such as AggregateSource, Axon Framework and Ncqrs. We also like to thank Benjamin, Marijn and Mathias for the conversations we had along the way that helped us shape the broadway project. In particular Marijn for giving us access to his in-house developed CQRS framework. License MIT, see LICENSE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/qandidate-labs/broadway"	"An event source and CQRS library."	"true"
"Event"	"Cake Event"	"https://github.com/cakephp/event"	"An event dispatcher library (CP)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"23"	"2"	"GitHub - cakephp/event: [READ-ONLY] The event dispatcher library for CakePHP. This repo is a split of the main code that can be found in https://github.com/cakephp/cakephp Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 10 Fork 2 cakephp/event Code Pull requests 0 Pulse Graphs [READ-ONLY] The event dispatcher library for CakePHP. This repo is a split of the main code that can be found in https://github.com/cakephp/cakephp 81 commits 7 branches 48 releases 13 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3-0 3-1 3.next 3.0 3.1 3.2 master Nothing to show 3.3.0-beta 3.2.12 3.2.11 3.2.10 3.2.9 3.2.8 3.2.7 3.2.6 3.2.5 3.2.4 3.2.3 3.2.2 3.2.1 3.2.0 3.2.0-RC1 3.1.13 3.1.10 3.1.9 3.1.8 3.1.7 3.1.6 3.1.5 3.1.4 3.1.3 3.1.2 3.1.1 3.1.0 3.1.0-beta2 3.1.0-beta 3.1.0-RC1 3.0.18 3.0.15 3.0.13 3.0.12 3.0.10 3.0.9 3.0.8 3.0.7 3.0.6 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 3.0.0-beta3 3.0.0-RC2 3.0.0-RC1 Nothing to show New pull request Latest commit f318f3e Jun 2, 2016 burzum Fixing the return type in a doc block Permalink Failed to load latest commit information. Event.php Fix return type hint. Nov 2, 2015 EventDispatcherInterface.php Fix CS Sep 14, 2015 EventDispatcherTrait.php Use full namespaces in docblocks. Jul 21, 2015 EventList.php Renaming event stack to event list. May 31, 2016 EventListenerInterface.php Fix method PSR-2 braces in docblock code examples Jan 26, 2015 EventManager.php Fixing the return type in a doc block Jun 2, 2016 EventManagerTrait.php Use full namespaces in docblocks. Jul 21, 2015 LICENSE.txt Adds license file and badges for Event subtree split Feb 9, 2016 README.md Adds license file and badges for Event subtree split Feb 9, 2016 composer.json Declare splits as stable. Jan 28, 2016 README.md CakePHP Event Library This library emulates several aspects of how events are triggered and managed in popular JavaScript libraries such as jQuery: An event object is dispatched to all listeners. The event object holds information about the event, and provides the ability to stop event propagation at any point. Listeners can register themselves or can delegate this task to other objects and have the chance to alter the state and the event itself for the rest of the callbacks. Usage Listeners need to be registered into a manager and events can then be triggered so that listeners can be informed of the action. use Cake\Event\Event; use Cake\Event\EventDispatcherTrait;  class Orders {      use EventDispatcherTrait;      public function placeOrder($order)     {         $this->doStuff();         $event = new Event('Orders.afterPlace', $this, [             'order' => $order         ]);         $this->eventManager()->dispatch($event);     } }  $orders = new Orders(); $orders->eventManager()->on(function ($event) {     // Do something after the order was placed     ... }, 'Orders.afterPlace');  $orders->placeOrder($order); The above code allows you to easily notify the other parts of the application that an order has been created. You can then do tasks like send email notifications, update stock, log relevant statistics and other tasks in separate objects that focus on those concerns. Documentation Please make sure you check the official documentation Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cakephp/event"	"An event dispatcher library (CP)."	"true"
"Event"	"Elephant.io"	"https://github.com/Wisembly/Elephant.io"	"Yet another web socket library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"793"	"85"	"206"	"GitHub - Wisembly/elephant.io: Ça trompe énormément Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 85 Star 793 Fork 206 Wisembly/elephant.io Code Issues 25 Pull requests 0 Wiki Pulse Graphs Ça trompe énormément http://elephant.io 126 commits 3 branches 13 releases 11 contributors PHP 90.3% JavaScript 9.1% HTML 0.6% PHP JavaScript HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages legacy-2.0 master Nothing to show v3.0.0 v3.0.0-beta2 v3.0.0-beta v3.0.0-RC2 v3.0.0-RC v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v2.0.0-alpha v1.0.0-alpha 3.1.0 Nothing to show New pull request Latest commit ceb607d Jun 15, 2016 Taluu committed on GitHub Merge pull request #141 from NickelMedia/missing_import … Add missing use statement, closes #123 Permalink Failed to load latest commit information. example/socket.io Add examples using namespaces Sep 12, 2015 src Add missing use statement Jun 14, 2016 test Add some tests for the decoder Aug 12, 2014 .gitignore Add some tests for the payload Aug 12, 2014 .travis.yml Add some tests for the payload Aug 12, 2014 LICENCE Composer & README updates Aug 1, 2014 README.md Add notice about this library Apr 6, 2016 composer.json Discard the use of the Guzzle Stream Aug 12, 2014 phpunit.xml Composer & README updates Aug 1, 2014 README.md Elephant.io         ___     _,.--.,_         Elephant.io is a rough websocket client       .-~   ~--""~-.   ._ ""-.     written in PHP. Its goal is to ease the      /      ./_    Y    ""-. \    communications between your PHP Application and     Y       :~     !         Y   a real-time server.     lq p    |     /         .|  _   \. .-, l    /          |j   Requires PHP 5.4 and openssl, licensed under ()\___) |/   \_/"";          !    the MIT License.  \._____.-~\  .  ~\.      ./             Y_ Y_. ""vr""~  T      Built-in Engines :             (  (    |L    j      - Socket.io 1.x             [nn[nn..][nn..]      - Socket.io 0.x (courtesy of @kbu1564)           ~~~~~~~~~~~~~~~~~~~  NOTICE As we are not using Elephant.io anymore at Wisembly, and not having the time to maintain this library, we are looking for maintainers. Please look at the dedicated issue #135 ! Installation You have multiple ways to install Elephant.io. If you are unsure what to do, go with the archive release. Once the library is downloaded and extracted wherever you want it to be, it should be loaded through a PSR-4 autoload mecanism, with a Wisembly\ElepehantIO prefix. This is not necessary with the composer way, as it is handling this part by itself. Archive Release Download the most recent release from the release page Unpack the archive Move the files somewhere in your project Development version Install Git git clone git://github.com/Wisembly/elephant.io.git Via Composer Install composer in your project: curl -s http://getcomposer.org/installer | php Create a composer.json file (or update it) in your project root:   {     ""require"": {       ""wisembly/elephant.io"": ""~3.0""     }   } Install via composer : php composer.phar install Documentation The docs are not written yet, but you should check the example directory to have a basic knownledge on how this library is meant to work. Special Thanks Special thanks goes to Mark Karpeles who helped the project founder to understand the way websockets works. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Wisembly/Elephant.io"	"Yet another web socket library."	"true"
"Event"	"Evenement"	"https://github.com/igorw/evenement"	"An event dispatcher library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"464"	"29"	"48"	"GitHub - igorw/evenement: Événement is a very simple event dispatching library for PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 29 Star 464 Fork 48 igorw/evenement Code Issues 3 Pull requests 8 Pulse Graphs Événement is a very simple event dispatching library for PHP. 70 commits 2 branches 5 releases 5 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 master Nothing to show v2.0.0 v1.0.0 v0.1.3 v0.1.2 v0.1.0 Nothing to show New pull request Latest commit 35e8754 Jul 9, 2014 igorw Merge pull request #21 from Nyholm/patch-1 … Added PHP 5.6 and HHVM to travis.yml Permalink Failed to load latest commit information. doc Initial set of docs Nov 3, 2012 src/Evenement Assignment in Condition Sep 28, 2013 tests Add failing test for previous merge Sep 4, 2012 .gitignore rm sf classloader, recommend composer, test against 5.4 Jan 1, 2012 .travis.yml Added PHP 5.6 and HHVM to travis.yml Jul 9, 2014 CHANGELOG.md Adjust CHANGELOG release date, prepare v2.0.0 release Nov 2, 2012 LICENSE hello Evenement Aug 16, 2011 README.md Merge branch '1.0' Nov 2, 2012 composer.json Merge branch '1.0' Nov 2, 2012 phpunit.xml.dist coverage whitelist filter Jan 1, 2012 README.md Événement Événement is a very simple event dispatching library for PHP. It has the same design goals as Silex and Pimple, to empower the user while staying concise and simple. It is very strongly inspired by the EventEmitter API found in node.js. Fetch The recommended way to install Événement is through composer. Just create a composer.json file for your project: {     ""require"": {         ""evenement/evenement"": ""2.0.*""     } } Note: The 2.0.* version of Événement requires PHP 5.4. If you are using PHP 5.3, please use the 1.0.* version: {     ""require"": {         ""evenement/evenement"": ""1.0.*""     } } And run these two commands to install it: $ curl -s http://getcomposer.org/installer | php $ php composer.phar install  Now you can add the autoloader, and you will have access to the library: <?php require 'vendor/autoload.php'; Usage Creating an Emitter <?php $emitter = new Evenement\EventEmitter(); Adding Listeners <?php $emitter->on('user.created', function (User $user) use ($logger) {     $logger->log(sprintf(""User '%s' was created."", $user->getLogin())); }); Emitting Events <?php $emitter->emit('user.created', array($user)); Tests $ phpunit  License MIT, see LICENSE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/igorw/evenement"	"An event dispatcher library."	"true"
"Event"	"Event"	"https://github.com/thephpleague/event"	"An event library with a focus on domain events."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"204"	"18"	"19"	"GitHub - thephpleague/event: Event package for your app and domain Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 204 Fork 19 thephpleague/event Code Issues 2 Pull requests 0 Pulse Graphs Event package for your app and domain http://event.thephpleague.com 155 commits 2 branches 11 releases 10 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 2.1.2 2.1.1 2.1.0 2.0.0 1.0.1 1.0.0 0.3.1 0.3.0 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit ebc612b Mar 21, 2016 frankdejonge Merge pull request #67 from jamesdb/patch-1 … Update readme.md Permalink Failed to load latest commit information. spec Merge branch 'feature/buffered-emitter' of github.com:thephpleague/ev… Sep 6, 2015 src Fix: Let it be Dec 14, 2015 stubs Merge branch 'master' of github.com:thephpleague/event Jan 17, 2015 .gitattributes More cool stuff Dec 11, 2014 .gitignore Fixes Dec 10, 2014 .php_cs More cool stuff Dec 11, 2014 .scrutinizer.yml Fixed scrutinizer filter Nov 10, 2014 .travis.yml Enhancement: Send builds to container-based infrastructure Sep 14, 2015 LICENSE Rename LICENCE to LICENSE Dec 21, 2015 changelog.md Pre release changelog update May 21, 2015 composer.json Enhancement: Require more recent phpspec/phpspec Sep 5, 2015 phpspec.hhvm.yml Renamed hhvm specific files Dec 11, 2014 phpspec.yml Fixed scrutinizer code coverage Nov 10, 2014 readme.md Update readme.md Mar 13, 2016 upgrade.md Exposed part of the EmitterInterface in the ListenerAwareInterface to… Nov 18, 2014 readme.md League\Event Installation composer require league/event  Read the documentation Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/event"	"An event library with a focus on domain events."	"true"
"Event"	"Hoa EventSource"	"https://github.com/hoaproject/Eventsource"	"An event source library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"60"	"15"	"11"	"GitHub - hoaproject/Eventsource: The Hoa\Eventsource library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 60 Fork 11 hoaproject/Eventsource Code Issues 0 Pull requests 0 Pulse Graphs The Hoa\Eventsource library. http://hoa-project.net/ 80 commits 1 branch 12 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 3.16.01.14 3.16.01.11 2.15.08.13 2.15.05.29 2.15.04.13 2.15.02.19 2.14.12.10 2.14.11.26 2.14.11.09 2.14.09.23 2.14.09.17 1.14.09.16 Nothing to show New pull request Latest commit e607b4e Jan 14, 2016 Hywan Prepare 3.16.01.14. Permalink Failed to load latest commit information. Documentation Move to PSR-1 and PSR-2. May 12, 2015 .State Add the state of the library. Feb 10, 2014 .gitignore Add a `.gitignore` file. Aug 3, 2015 CHANGELOG.md Prepare 3.16.01.14. Jan 14, 2016 Exception.php Quality: Run devtools:cs. Jan 9, 2016 README.md Quality: Drop PHP5.4. Jan 11, 2016 Server.php Quality: Run devtools:cs. Jan 9, 2016 composer.json Composer: New stable library. Jan 14, 2016 README.md Hoa is a modular, extensible and structured set of PHP libraries. Moreover, Hoa aims at being a bridge between industrial and research worlds. Hoa\Eventsource This library allows to manipulate the EventSource (aka Server-Sent Events) technology by creating a server. Installation With Composer, to include this library into your dependencies, you need to require hoa/eventsource: {     ""require"": {         ""hoa/eventsource"": ""~3.0""     } } Please, read the website to get more informations about how to install. Quick usage We propose as a quick overview to send an unlimited number of events from the server to the client. The client will display all received events. Thus, in Server.php: $server = new Hoa\Eventsource\Server();  while (true) {     // “tick” is the event name.     $server->tick->send(time());     sleep(1); } And in index.html, our client: <pre id=""output""></pre> <script> var output = document.getElementById('output');  try {     var source    = new EventSource('Server.php');     source.onopen = function () {         output.appendChild(document.createElement('hr'));          return;     };     source.addEventListener('tick', function (evt) {         var samp       = document.createElement('samp');         samp.innerHTML = evt.data + '\n';         output.appendChild(samp);          return;     }); } catch (e) {     console.log(e); } </script> Start your HTTP server and then open index.html. The Hoa\Eventsource\Server::setReconnectionTime method allows to redefine the time before the client will reconnect after a disconnection. The Hoa\Eventsource\Server::getLastId method allows to retrieve the last ID sent to the client. Awecode The following awecodes show this library in action: Hoa\Eventsource: why and how to use Hoa\Eventsource\Server? A simple and daily useful example will illustrate the EventSource technology (or Server-Send Events). Documentation Different documentations can be found on the website: http://hoa-project.net/. License Hoa is under the New BSD License (BSD-3-Clause). Please, see LICENSE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hoaproject/Eventsource"	"An event source library."	"true"
"Event"	"Hoa WebSocket"	"https://github.com/hoaproject/Websocket"	"Another web socket library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"214"	"17"	"33"	"GitHub - hoaproject/Websocket: The Hoa\Websocket library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 214 Fork 33 hoaproject/Websocket Code Issues 4 Pull requests 1 Pulse Graphs The Hoa\Websocket library. http://hoa-project.net/ 251 commits 1 branch 13 releases 8 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 3.16.07.05 3.16.05.09 3.16.03.15 3.16.01.14 3.16.01.11 2.15.08.05 2.15.05.29 2.15.02.16 2.14.12.10 2.14.11.09 2.14.09.23 2.14.09.17 1.14.09.16 Nothing to show New pull request Latest commit 3eca298 Jul 5, 2016 Hywan Prepare 3.16.07.05. Permalink Failed to load latest commit information. Bin Quality: Run devtools:cs. Jan 9, 2016 Documentation Documentation: Introduce `ws://` and `wss://`. Feb 15, 2016 Exception Quality: Run devtools:cs. Jan 9, 2016 Protocol Protocol: Relax UTF-8 checking when sending. Jul 5, 2016 Test Test: Write integration test suite. Jul 5, 2016 .State Add the state of the library. Feb 10, 2014 .gitignore Add `.gitignore` file. Aug 3, 2015 CHANGELOG.md Prepare 3.16.07.05. Jul 5, 2016 Client.php Quality: Fix API documentation. Jun 17, 2016 Connection.php Quality: Fix API documentation. Jun 17, 2016 Node.php Quality: Fix CS. Feb 9, 2016 README.md Documentation: Introduce `ws://` and `wss://`. Feb 15, 2016 Server.php Quality: Fix API documentation. Jun 17, 2016 Socket.php Quality: Fix API documentation. Jun 17, 2016 composer.json Test: Write test suite of `…ket\Protocol\Rfc6455`. Jun 17, 2016 README.md Hoa is a modular, extensible and structured set of PHP libraries. Moreover, Hoa aims at being a bridge between industrial and research worlds. Hoa\Websocket This library allows to manipulate the WebSocket protocol and proposes a server and a client. It supports two specifications RFC6455 and Hybi (at the same time). Installation With Composer, to include this library into your dependencies, you need to require hoa/websocket: {     ""require"": {         ""hoa/websocket"": ""~3.0""     } } Please, read the website to get more informations about how to install. Quick usage As a quick overview, we propose to start a websocket server and echo messages. The class Hoa\Websocket\Server proposes six listeners: open, message, binary-message, ping, close and error. Thus: $websocket = new Hoa\Websocket\Server(     new Hoa\Socket\Server('ws://127.0.0.1:8889') ); $websocket->on('open', function (Hoa\Event\Bucket $bucket) {     echo 'new connection', ""\n"";      return; }); $websocket->on('message', function (Hoa\Event\Bucket $bucket) {     $data = $bucket->getData();     echo '> message ', $data['message'], ""\n"";     $bucket->getSource()->send($data['message']);     echo '< echo', ""\n"";      return; }); $websocket->on('close', function (Hoa\Event\Bucket $bucket) {     echo 'connection closed', ""\n"";      return; }); $websocket->run(); Finally, we have to write a client in HTML and Javascript: <input type=""text"" id=""input"" placeholder=""Message…"" /> <hr /> <pre id=""output""></pre>  <script>   var host   = 'ws://127.0.0.1:8889';   var socket = null;   var input  = document.getElementById('input');   var output = document.getElementById('output');   var print  = function (message) {       var samp       = document.createElement('samp');       samp.innerHTML = message + '\n';       output.appendChild(samp);        return;   };    input.addEventListener('keyup', function (evt) {       if (13 === evt.keyCode) {           var msg = input.value;            if (!msg) {               return;           }            try {               socket.send(msg);               input.value = '';               input.focus();           } catch (e) {               console.log(e);           }            return;       }   });    try {       socket = new WebSocket(host);       socket.onopen = function () {           print('connection is opened');           input.focus();            return;       };       socket.onmessage = function (msg) {           print(msg.data);            return;       };       socket.onclose = function () {           print('connection is closed');            return;       };   } catch (e) {       console.log(e);   } </script> Here we are. All sent messages are echoed. Awecode The following awecodes show this library in action: Hoa\Websocket: why and how to use Hoa\Websocket\Server and Hoa\Websocket\Client? A simple example will illustrate the WebSocket protocol. Documentation Different documentations can be found on the website: http://hoa-project.net/. License Hoa is under the New BSD License (BSD-3-Clause). Please, see LICENSE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hoaproject/Websocket"	"Another web socket library."	"true"
"Event"	"Icicle"	"https://github.com/icicleio/icicle"	"An asynchronous library with coroutines, non-blocking I/O, and multithreading."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"852"	"70"	"34"	"GitHub - icicleio/icicle: Icicle is a PHP library for writing asynchronous code using synchronous coding techniques Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 70 Star 852 Fork 34 icicleio/icicle Code Issues 1 Pull requests 0 Pulse Graphs Icicle is a PHP library for writing asynchronous code using synchronous coding techniques https://icicle.io 584 commits 3 branches 32 releases 5 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master v0.9.x v1.x Nothing to show v1.0.0-beta4 v1.0.0-beta3 v1.0.0-beta2 v1.0.0-beta1 v0.9.6 v0.9.5 v0.9.4 v0.9.3 v0.9.2 v0.9.1 v0.9.0 v0.8.3 v0.8.2 v0.8.1 v0.8.0 v0.7.1 v0.7.0 v0.6.0 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.1 v0.4.0 v0.3.0 v0.2.2 v0.2.1 v0.2.0 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 6ece722 Mar 31, 2016 trowski Merge branch 'v1.x' Permalink Failed to load latest commit information. examples Merge branch 'v1.x' Feb 21, 2016 src Merge branch 'v1.x' Mar 31, 2016 tests Merge branch 'v1.x' Mar 31, 2016 .gitattributes Remove phpunit.xml.dist from distributions Jun 13, 2015 .gitignore Ignore local phpunit.xml Jun 9, 2015 .travis.yml Use xdebug for coverage Nov 22, 2015 CHANGELOG.md Update changelog Mar 31, 2016 CONTRIBUTING.md Fix issues and pulls links Nov 19, 2015 LICENSE Update license Sep 14, 2015 README.md Update readme Feb 21, 2016 composer.json Merge branch 'v1.x' Mar 8, 2016 phpdoc.dist.xml Added branch aliases and moved to phpdoc. Apr 14, 2015 phpunit.xml.dist Add execute() function Mar 8, 2016 README.md Icicle Icicle is a PHP library for writing asynchronous code using synchronous coding techniques. Icicle uses Coroutines built with Awaitables and Generators to facilitate writing asynchronous code using techniques normally used to write synchronous code, such as returning values and throwing exceptions, instead of using nested callbacks typically found in asynchronous code. Library Components Coroutines are interruptible functions for building asynchronous code using synchronous coding patterns and error handling. Awaitables act as placeholders for future values of asynchronous operations. Awaitables can be yielded in coroutines to define interruption points. Callbacks registered with awaitables may return values and throw exceptions. Observables represent asynchronous sets of values, providing operations usually associated with sets such as map, filter, and reduce. Observables also can be iterated over asynchronously within a coroutine. Loop (event loop) is used to schedule functions, run timers, handle signals, and poll sockets for pending data or await for space to write. Available Packages Stream: Common coroutine-based interface for reading and writing data. Socket: Asynchronous stream socket server and client. Concurrent: Provides an easy to use interface for parallel execution with non-blocking communication and task execution. DNS: Asynchronous DNS query executor, resolver and connector. Filesystem: Asynchronous filesystem access. HTTP: Asynchronous HTTP server and client. WebSocket: Asynchronous WebSocket server and client. React Adapter: Adapts the event loop and awaitables of Icicle to interfaces compatible with components built for React. Documentation and Support Full API Documentation Official Twitter Gitter Chat Requirements PHP 5.5+ for v0.9.x branch (current stable) and v1.x branch (mirrors current stable) PHP 7 for v2.0 (master) branch supporting generator delegation and return expressions Installation The recommended way to install Icicle is with the Composer package manager. (See the Composer installation guide for information on installing and using Composer.) Run the following command to use Icicle in your project: composer require icicleio/icicle You can also manually edit composer.json to add Icicle as a project requirement. // composer.json {     ""require"": {         ""icicleio/icicle"": ""^0.9""     } } Suggested pcntl extension: Enables custom signal handling. ev extension: Extension providing the most performant event loop implementation. uv extension (PHP 7 only): Another extension providing a more performant event loop implementation (experimental). Example The example script below demonstrates how awaitables can be yielded in a coroutine to create interruption points. Fulfillment values of awaitables are sent to the coroutine and rejection exceptions are thrown into the coroutine. #!/usr/bin/env php <?php  require dirname(__DIR__) . '/vendor/autoload.php';  use Icicle\Awaitable; use Icicle\Coroutine\Coroutine; use Icicle\Loop;  $generator = function () {     try {         // Sets $start to the value returned by microtime() after approx. 1 second.         $start = (yield Awaitable\resolve(microtime(true))->delay(1));          echo ""Sleep time: "", microtime(true) - $start, ""\n"";          // Throws the exception from the rejected promise into the coroutine.         yield Awaitable\reject(new Exception('Rejected promise'));     } catch (Exception $e) { // Catches promise rejection reason.         echo ""Caught exception: "", $e->getMessage(), ""\n"";     }      yield Awaitable\resolve('Coroutine completed'); };  $coroutine = new Coroutine($generator());  $coroutine->done(function ($data) {     echo $data, ""\n""; });  Loop\run(); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/icicleio/icicle"	"An asynchronous library with coroutines, non-blocking I/O, and multithreading."	"true"
"Event"	"Prooph Event Store"	"https://github.com/prooph/event-store"	"An event source component to persist event messages"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"114"	"11"	"13"	"GitHub - prooph/event-store: PHP 5.5+ EventStore Implementation. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 114 Fork 13 prooph/event-store Code Issues 4 Pull requests 1 Pulse Graphs PHP 5.5+ EventStore Implementation. http://getprooph.org 367 commits 3 branches 32 releases 10 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master v2.x-lts Nothing to show v6.3.0 v6.2.0 v6.1.2 v6.1.1 v6.1 v6.0 v6.0-beta.1 v5.1 v5.0 v5.0-beta.3 v5.0-beta.2 v5.0-beta.1 v4.0.1 v4.0 v3.1 v3.0 v2.1.1 v2.1.0 v2.0.1 v2.0 v1.1.2 v1.1.1 v1.1.0 v1.0.0 0.5.0 0.4.2 0.4.1 0.4.0 0.3.1 0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit 5308bfc Jul 14, 2016 prolic committed on GitHub Merge pull request #176 from bweston92/patch-1 … Foreach loop can be optimised into 1 internal function call. Permalink Failed to load latest commit information. docs Setup metadata_enrichers option in container factory Feb 27, 2016 examples Example - Array to Iterator May 24, 2016 src Whoops no -1 Jul 14, 2016 tests Fix PHPDoc May 24, 2016 .coveralls.yml remove src_dir from coveralls config Feb 27, 2016 .gitattributes Update .gitattributes Jul 12, 2016 .gitignore added bookdown.io documentation Nov 10, 2015 .php_cs Restructure and improve documentation Aug 25, 2015 .travis.yml better build matrix May 14, 2016 LICENSE Update LICENSE Jul 26, 2015 README.md Update docs to better support bookdown docs Nov 21, 2015 composer.json better build matrix May 14, 2016 phpunit.xml.dist enable convertErrorsToExceptions in phpunit Sep 24, 2015 README.md ProophEventStore PHP 5.5+ EventStore Implementation. Overview Prooph Event Store is capable of persisting event messages that are organized in streams. Prooph\EventStore\EventStore itself is a facade for different persistence adapters (see the list below) and adds event-driven hook points for Prooph\EventStore\Plugin\Plugins which make the Event Store highly customizable. Installation You can install prooph/event-store via composer by adding ""prooph/event-store"": ""^6.0"" as requirement to your composer.json. Available Persistence Adapters Mongo DB - stable Doctrine DBAL - stable Available Snapshot Adapters Mongo DB - stable Doctrine DBAL - stable Memcached - stable Quick Start For a short overview please see the annotated Quickstart in the examples folder. Documentation Documentation is in the doc tree, and can be compiled using bookdown. $ php ./vendor/bin/bookdown docs/bookdown.json $ php -S 0.0.0.0:8080 -t docs/html/ Then browse to http://localhost:8080/ Support Ask questions on prooph-users mailing list. File issues at https://github.com/prooph/event-store/issues. Say hello in the prooph gitter chat. Contribute Please feel free to fork and extend existing or add new plugins and send a pull request with your changes! To establish a consistent code quality, please provide unit tests for all your changes and may adapt the documentation. License Released under the New BSD License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/prooph/event-store"	"An event source component to persist event messages"	"true"
"Event"	"Ratchet"	"https://github.com/ratchetphp/Ratchet"	"A web socket library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2982"	"195"	"379"	"GitHub - ratchetphp/Ratchet: Asynchronous WebSocket server Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 195 Star 2,982 Fork 379 ratchetphp/Ratchet Code Issues 36 Pull requests 6 Pulse Graphs Asynchronous WebSocket server http://socketo.me 607 commits 3 branches 21 releases Fetching contributors PHP 99.4% Makefile 0.6% PHP Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.4 master wamp-sync-bug Nothing to show v0.3.5 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.8 v0.2.7 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1 Nothing to show New pull request Latest commit b5cceca May 25, 2016 cboden v0.3.5 prep Permalink Failed to load latest commit information. src/Ratchet v0.3.5 prep May 25, 2016 tests Added unit tests for serialize, formatting May 25, 2016 .gitignore remove local project folder from gitignore Sep 12, 2014 .travis.yml misc: PHP ""7"", deps, license May 24, 2015 CHANGELOG.md v0.3.5 prep May 25, 2016 LICENSE v0.3.4 prep Dec 23, 2015 Makefile [Tests] Added AB LibEv to suite, cleaned up scripts Jan 27, 2014 README.md Fix version badge Jun 15, 2014 composer.json Added composer.json requirement for symfony/http-foundation at versio… Dec 22, 2015 phpunit.xml.dist [Tests] Added Guzzle integration tests Jun 16, 2013 README.md Ratchet A PHP 5.3 library for asynchronously serving WebSockets. Build up your application through simple interfaces and re-use your application without changing any of its code just by combining different components. WebSocket Compliance Supports the RFC6455, HyBi-10+, and Hixie76 protocol versions (at the same time) Tested on Chrome 13+, Firefox 6+, Safari 5+, iOS 4.2+, IE 8+ Ratchet passes the Autobahn Testsuite (non-binary messages) Requirements Shell access is required and root access is recommended. To avoid proxy/firewall blockage it's recommended WebSockets are requested on port 80 or 443 (SSL), which requires root access. In order to do this, along with your sync web stack, you can either use a reverse proxy or two separate machines. You can find more details in the server conf docs. PHP 5.3.9 (or higher) is required. If you have access, PHP 5.4 (or higher) is highly recommended for its performance improvements. Documentation User and API documentation is available on Ratchet's website: http://socketo.me See https://github.com/cboden/Ratchet-examples for some out-of-the-box working demos using Ratchet. Need help? Have a question? Want to provide feedback? Write a message on the Google Groups Mailing List. A quick example <?php use Ratchet\MessageComponentInterface; use Ratchet\ConnectionInterface;      // Make sure composer dependencies have been installed     require __DIR__ . '/vendor/autoload.php';  /**  * chat.php  * Send any incoming messages to all connected clients (except sender)  */ class MyChat implements MessageComponentInterface {     protected $clients;      public function __construct() {         $this->clients = new \SplObjectStorage;     }      public function onOpen(ConnectionInterface $conn) {         $this->clients->attach($conn);     }      public function onMessage(ConnectionInterface $from, $msg) {         foreach ($this->clients as $client) {             if ($from != $client) {                 $client->send($msg);             }         }     }      public function onClose(ConnectionInterface $conn) {         $this->clients->detach($conn);     }      public function onError(ConnectionInterface $conn, \Exception $e) {         $conn->close();     } }      // Run the server application through the WebSocket protocol on port 8080     $app = new Ratchet\App('localhost', 8080);     $app->route('/chat', new MyChat);     $app->route('/echo', new Ratchet\Server\EchoServer, array('*'));     $app->run(); $ php chat.php      // Then some JavaScript in the browser:     var conn = new WebSocket('ws://localhost:8080/echo');     conn.onmessage = function(e) { console.log(e.data); };     conn.send('Hello Me!'); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ratchetphp/Ratchet"	"A web socket library."	"true"
"Event"	"React"	"https://github.com/reactphp/react"	"An event driven non-blocking I/O library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4327"	"333"	"425"	"GitHub - reactphp/react: Nuclear Reactor written in PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 333 Star 4,327 Fork 425 reactphp/react Code Issues 37 Pull requests 2 Wiki Pulse Graphs Nuclear Reactor written in PHP. http://reactphp.org 861 commits 3 branches 18 releases 26 contributors PHP 92.3% Shell 7.7% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.3 0.4 master Nothing to show v0.4.2 v0.4.1 v0.4.0 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.7 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit fdcc980 Mar 19, 2015 cboden Merge pull request #317 from e3betht/code-climate-badge … Adding the event-loop badge for Code Climate to the readme per conversat... Permalink Failed to load latest commit information. benchmark [Benchmark] Update 1000 to variable for users to adjust Mar 13, 2013 examples [fix] fix broken url in examples/parallel-download.php Aug 9, 2014 resources Replace logo with real pixel art by @julien-c, close #153 Apr 14, 2013 scripts Source is now a compilation of smaller repositories May 25, 2014 tests Source is now a compilation of smaller repositories May 25, 2014 .gitignore Replacing crappy scripts with the amazing git-subsplit Jul 14, 2012 .travis.yml Added PHP 5.6 to travis. Feb 28, 2014 CHANGELOG.md v0.4.1 changelog, child-process split, v0.4.* for readme Apr 13, 2014 LICENSE add chris boden to the LICENSE file Jan 9, 2014 README.md Merge pull request #317 from e3betht/code-climate-badge Mar 19, 2015 UPGRADE-0.3.md [SocketClient] Rename Connector::createTcp to Connector::create Apr 14, 2013 composer.json Real dep versions for tag Dec 10, 2014 composer.lock Real dep versions for tag Dec 11, 2014 phpunit.xml.dist Source is now a compilation of smaller repositories May 25, 2014 README.md React Event-driven, non-blocking I/O with PHP. Notice - (May 25th, 2014) As of 2014-05-25 we have reversed roles of this and the component repositories. Instead of reactphp/react being the master code repository it is now the sum of React's parts. All PRs should be made against their corresponding repository found in /reactphp. All existing PRs will be evaluated and work will be done with the submitter to merge it into the proper component. Install The recommended way to install React is through composer. Type the following command in your shell environment: php ~/composer.phar require react/react  What is it? React is a low-level library for event-driven programming in PHP. At its core is an event loop, on top of which it provides low-level utilities, such as: Streams abstraction, async dns resolver, network client/server, http client/server, interaction with processes. Third-party libraries can use these components to create async network clients/servers and more. The event loop is based on the reactor pattern (hence the name) and strongly inspired by libraries such as EventMachine (Ruby), Twisted (Python) and Node.js (V8). Design goals Usable with a bare minimum of PHP extensions, add more extensions to get better performance. Provide a standalone event-loop component that can be re-used by other libraries. Decouple parts so they can be replaced by alternate implementations. React is non-blocking by default. Use workers for blocking I/O. High-level abstractions There are two main abstractions that make dealing with control flow a lot more manageable. Stream: A stream represents an I/O source (ReadableStream) or destination (WritableStream). These can be used to model pipes, similar to a unix pipe that is composed of processes. Streams represent very large values as chunks. Promise: A promise represents an eventual return value. Promises can be composed and are a lot easier to deal with than traditional CPS callback spaghetti and allow for almost sane error handling. Promises represent the computation for producing single values. You should use these abstractions whenever you can. Usage Here is an example of a simple HTTP server listening on port 1337: <?php  $i = 0;  $app = function ($request, $response) use (&$i) {     $i++;      $text = ""This is request number $i.\n"";     $headers = array('Content-Type' => 'text/plain');      $response->writeHead(200, $headers);     $response->end($text); };  $loop = React\EventLoop\Factory::create(); $socket = new React\Socket\Server($loop); $http = new React\Http\Server($socket);  $http->on('request', $app);  $socket->listen(1337); $loop->run(); Documentation Superficial documentation can be found in the README files of the individual components. See vendor/react/*/src/README.md. Community Check out #reactphp on irc.freenode.net. Also follow @reactphp on twitter. Tests To run the test suite, you need install the dependencies via composer, then run PHPUnit. $ composer install $ phpunit  License MIT, see LICENSE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/reactphp/react"	"An event driven non-blocking I/O library."	"true"
"Event"	"Rx.PHP"	"https://github.com/asm89/Rx.PHP"	"A reactive extension library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"208"	"28"	"19"	"GitHub - asm89/Rx.PHP: Reactive extensions for PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 208 Fork 19 asm89/Rx.PHP Code Issues 2 Pull requests 0 Pulse Graphs Reactive extensions for PHP. 216 commits 2 branches 6 releases 6 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags do-on-error-on-completed master Nothing to show 0.5.0 0.4.0 0.3.0 0.2.1 0.2.0 0.1.0 Nothing to show New pull request Latest commit eb08c5f Jan 23, 2016 asm89 Abandon package. Redirect folks to new ReactiveX/RxPHP repository. Permalink Failed to load latest commit information. demo TimeoutOperator, tests and demo Jan 14, 2016 lib/Rx TimeoutOperator, tests and demo Jan 15, 2016 test TimeoutOperator, tests and demo Jan 15, 2016 .gitignore Remove Phpstorm nonsense Oct 19, 2015 .travis.yml Update .travis.yml configuration Oct 18, 2015 LICENSE Initial commit Apr 16, 2013 README.md Abandon package. Redirect folks to new ReactiveX/RxPHP repository. Jan 23, 2016 composer.json Abandon package. Redirect folks to new ReactiveX/RxPHP repository. Jan 23, 2016 phpunit.xml.dist Initial commit Apr 16, 2013 README.md This package is abandoned. Use https://github.com/ReactiveX/RxPHP instead Rx.PHP Reactive extensions for PHP. The reactive extensions for PHP are a set of libraries to compose asynchronous and event-based programs using observable collections and LINQ-style query operators in PHP. Quick start for demos Install dependencies using composer. $ composer.phar install Have fun running the demos in /demo. Demo application rxphp-chat, a demo chat application using Rx.PHP. License Rx.PHP is licensed under the MIT License - see the LICENSE file for details I am providing code in this repository to you under an open source license. Because this is my personal repository, the license you receive to my code is from me and not from my employer (Facebook). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/asm89/Rx.PHP"	"A reactive extension library."	"true"
"Event"	"Workerman"	"https://github.com/walkor/Workerman"	"An event driven non-blocking I/O library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2696"	"277"	"894"	"GitHub - walkor/Workerman: An asynchronous event driven PHP framework for easily building fast, scalable network applications. Supports HTTP, Websocket and other custom protocols. Supports libevent, HHVM, PHP7. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 277 Star 2,696 Fork 894 walkor/Workerman Code Issues 3 Pull requests 0 Wiki Pulse Graphs An asynchronous event driven PHP framework for easily building fast, scalable network applications. Supports HTTP, Websocket and other custom protocols. Supports libevent, HHVM, PHP7. http://www.workerman.net 742 commits 1 branch 20 releases 13 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v3.3.3 v3.3.1 v3.3.0 v3.2.9 v3.2.8 v3.2.7 v3.2.6 v3.2.5 v3.2.2 v3.2.0 v3.1.9 v3.1.8 v3.1.7 v3.1.6 v3.1.5 v3.1.4 v3.1.3 v3.1.2 v3.1.1 v2.1.6 Nothing to show New pull request Latest commit 2fa51b7 Jul 10, 2016 walkor update Http Protocol Permalink Failed to load latest commit information. Connection check buffer Jul 1, 2016 Events log exception May 24, 2016 Lib fix syntax error Apr 5, 2016 Protocols update Http Protocol Jul 10, 2016 .gitignore ignore phpstorm config file Jun 17, 2015 Autoloader.php Change coding style to PSR-2 Mar 11, 2016 MIT-LICENSE.txt Create MIT-LICENSE.txt Apr 10, 2015 README.md Update README.md Mar 25, 2016 WebServer.php Update WebServer.php Jun 1, 2016 Worker.php workerman.log Jul 5, 2016 composer.json Update composer.json Nov 23, 2015 README.md Workerman What is it Workerman is a library for event-driven programming in PHP. It has a huge number of features. Each worker is able to handle thousands of connections. Requires PHP 5.3 or Higher A POSIX compatible operating system (Linux, OSX, BSD) POSIX and PCNTL extensions for PHP Installation composer require workerman/workerman  Basic Usage A websocket server test.php <?php use Workerman\Worker; require_once './Workerman/Autoloader.php';  // Create a Websocket server $ws_worker = new Worker(""websocket://0.0.0.0:2346"");  // 4 processes $ws_worker->count = 4;  // Emitted when new connection come $ws_worker->onConnect = function($connection) {     echo ""New connection\n"";  };  // Emitted when data received $ws_worker->onMessage = function($connection, $data) {     // Send hello $data     $connection->send('hello ' . $data); };  // Emitted when connection closed $ws_worker->onClose = function($connection) {     echo ""Connection closed\n""; };  // Run worker Worker::runAll(); An http server test.php require_once './Workerman/Autoloader.php'; use Workerman\Worker;  // #### http worker #### $http_worker = new Worker(""http://0.0.0.0:2345"");  // 4 processes $http_worker->count = 4;  // Emitted when data received $http_worker->onMessage = function($connection, $data) {     // $_GET, $_POST, $_COOKIE, $_SESSION, $_SERVER, $_FILES are available     var_dump($_GET, $_POST, $_COOKIE, $_SESSION, $_SERVER, $_FILES);     // send data to client     $connection->send(""hello world \n""); };  // run all workers Worker::runAll(); A WebServer test.php require_once './Workerman/Autoloader.php'; use Workerman\WebServer;  // WebServer $web = new WebServer(""http://0.0.0.0:80"");  // 4 processes $web->count = 4;  // Set the root of domains $web->addRoot('www.your_domain.com', '/your/path/Web'); $web->addRoot('www.another_domain.com', '/another/path/Web'); // run all workers Worker::runAll(); A tcp server test.php require_once './Workerman/Autoloader.php'; use Workerman\Worker;  // #### create socket and listen 1234 port #### $tcp_worker = new Worker(""tcp://0.0.0.0:1234"");  // 4 processes $tcp_worker->count = 4;  // Emitted when new connection come $tcp_worker->onConnect = function($connection) {     echo ""New Connection\n""; };  // Emitted when data received $tcp_worker->onMessage = function($connection, $data) {     // send data to client     $connection->send(""hello $data \n""); };  // Emitted when new connection come $tcp_worker->onClose = function($connection) {     echo ""Connection closed\n""; };  Worker::runAll(); Custom protocol Protocols/MyTextProtocol.php namespace Protocols; /**  * User defined protocol  * Format Text+""\n""  */ class MyTextProtocol {     public static function input($recv_buffer)     {         // Find the position of the first occurrence of ""\n""         $pos = strpos($recv_buffer, ""\n"");         // Not a complete package. Return 0 because the length of package can not be calculated         if($pos === false)         {             return 0;         }         // Return length of the package         return $pos+1;     }      public static function decode($recv_buffer)     {         return trim($recv_buffer);     }      public static function encode($data)     {         return $data.""\n"";     } } test.php require_once './Workerman/Autoloader.php'; use Workerman\Worker;  // #### MyTextProtocol worker #### $text_worker = new Worker(""MyTextProtocol://0.0.0.0:5678"");  $text_worker->onConnect = function($connection) {     echo ""New connection\n""; };  $text_worker->onMessage =  function($connection, $data) {     // send data to client     $connection->send(""hello world \n""); };  $text_worker->onClose = function($connection) {     echo ""Connection closed\n""; };  // run all workers Worker::runAll(); Timer test.php require_once './Workerman/Autoloader.php'; use Workerman\Worker; use Workerman\Lib\Timer;  $task = new Worker(); $task->onWorkerStart = function($task) {     // 2.5 seconds     $time_interval = 2.5;      $timer_id = Timer::add($time_interval,          function()         {             echo ""Timer run\n"";         }     ); };  // run all workers Worker::runAll(); run with: php test.php start Available commands php test.php start php test.php start -d php test.php status php test.php stop php test.php restart php test.php reload Documentation 中文主页:http://www.workerman.net 中文文档: http://doc3.workerman.net Documentation:https://github.com/walkor/workerman-manual Benchmarks CPU:      Intel(R) Core(TM) i3-3220 CPU @ 3.30GHz and 4 processors totally Memory:   8G OS:       Ubuntu 14.04 LTS Software: ab PHP:      5.5.9  Codes <?php use Workerman\Worker; $worker = new Worker('tcp://0.0.0.0:1234'); $worker->count=3; $worker->onMessage = function($connection, $data) {     $connection->send(""HTTP/1.1 200 OK\r\nConnection: keep-alive\r\nServer: workerman\r\nContent-Length: 5\r\n\r\nhello""); }; Worker::runAll(); Result ab -n1000000 -c100 -k http://127.0.0.1:1234/ This is ApacheBench, Version 2.3 <$Revision: 1528965 $> Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/  Benchmarking 127.0.0.1 (be patient) Completed 100000 requests Completed 200000 requests Completed 300000 requests Completed 400000 requests Completed 500000 requests Completed 600000 requests Completed 700000 requests Completed 800000 requests Completed 900000 requests Completed 1000000 requests Finished 1000000 requests   Server Software:        workerman/3.1.4 Server Hostname:        127.0.0.1 Server Port:            1234  Document Path:          / Document Length:        5 bytes  Concurrency Level:      100 Time taken for tests:   7.240 seconds Complete requests:      1000000 Failed requests:        0 Keep-Alive requests:    1000000 Total transferred:      73000000 bytes HTML transferred:       5000000 bytes Requests per second:    138124.14 [#/sec] (mean) Time per request:       0.724 [ms] (mean) Time per request:       0.007 [ms] (mean, across all concurrent requests) Transfer rate:          9846.74 [Kbytes/sec] received  Connection Times (ms)               min  mean[+/-sd] median   max Connect:        0    0   0.0      0       5 Processing:     0    1   0.2      1       9 Waiting:        0    1   0.2      1       9 Total:          0    1   0.2      1       9  Percentage of the requests served within a certain time (ms)   50%      1   66%      1   75%      1   80%      1   90%      1   95%      1   98%      1   99%      1  100%      9 (longest request)  Demos tadpole Live demo Source code BrowserQuest Live demo Source code web vmstat Live demo Source code live-ascii-camera Live demo camera page Live demo receive page Source code live-camera Live demo camera page Live demo receive page Source code chat room Live demo Source code PHPSocket.IO Live demo Source code statistics Live demo Source code flappybird Live demo Source code jsonRpc Source code thriftRpc Source code web-msg-sender Live demo send page Live demo receive page Source code shadowsocks-php Source code queue Source code LICENSE Workerman is released under the MIT license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/walkor/Workerman"	"An event driven non-blocking I/O library."	"true"
"Logging"	"Analog"	"https://github.com/jbroadway/analog"	"A closure-based micro logging package."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"226"	"20"	"22"	"GitHub - jbroadway/analog: PHP 5.3+ micro logging package that is highly extendable via closures. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 226 Fork 22 jbroadway/analog Code Issues 1 Pull requests 0 Pulse Graphs PHP 5.3+ micro logging package that is highly extendable via closures. 111 commits 1 branch 10 releases 8 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show analog_1_0_0_stable analog_0_9_0_beta analog_0_8_0_beta 1.0.7-stable 1.0.6-stable 1.0.5-stable 1.0.4-stable 1.0.3-stable 1.0.2-stable 1.0.1-stable Nothing to show New pull request Latest commit c68d2a2 Mar 29, 2016 jbroadway Merge pull request #24 from tessus/mongodb … use new mongodb driver (if available) instead of the legacy driver Permalink Failed to load latest commit information. examples Renamed Null to Ignore for PHP7 compatibility May 25, 2015 lib change help text Mar 28, 2016 tests Fixed typo in \@covers Apr 15, 2015 .gitignore - Moved dependency ""psr/log"" from /lib to install-with-composer Jan 16, 2013 .travis.yml Added php 7, improved composer install Mar 10, 2015 LICENSE Created license file, closes #2 Dec 30, 2012 README.md Renamed Null to Ignore for PHP7 compatibility May 25, 2015 composer.json - Moved dependency ""psr/log"" from /lib to install-with-composer Jan 16, 2013 phpunit.xml.dist - Moved dependency ""psr/log"" from /lib to install-with-composer Jan 16, 2013 README.md Analog - PHP 5.3+ micro logging package Copyright: (c) 2012 Johnny Broadway License: http://www.opensource.org/licenses/mit-license.php A MicroPHP logging package based on the idea of using closures for configurability and extensibility. It functions as a static class, but you can completely control the writing of log messages through a closure function (aka anonymous functions), or use the Analog\Logger wrapper that implements the PSR-3 specification. By default, this class will write to a file named sys_get_temp_dir() . '/analog.txt' using the format ""machine - date - level - message\n"", making it usable with no customization necessary. Analog also comes with over a dozen pre-written handlers in the Analog/Handlers folder, with examples for each in the examples folder. These include: Amon - Send logs to the Amon server monitoring tool Buffer - Buffer messages to send all at once (works with File, Mail, Stderr, and Variable handlers) ChromeLogger - Sends messages to Chrome Logger browser plugin File - Append messages to a file FirePHP - Send messages to FirePHP browser plugin GELF - Send message to the Graylog2 log management server Ignore - Do nothing LevelBuffer - Buffer messages and send only if sufficient error level reached Mail - Send email notices Mongo - Save to MongoDB collection Multi - Send different log levels to different handlers Post - Send messages over HTTP POST to another machine Stderr - Send messages to STDERR Syslog - Send messages to syslog Threshold - Only writes log messages above a certain threshold Variable - Buffer messages to a variable reference. So while it's a micro class, it's highly extensible and very capable out of the box too. Rationale I wrote this because I wanted something very small and simple like KLogger, and preferably not torn out of a wider framework if possible. After searching, I wasn't happy with the single-purpose libraries I found. With KLogger for example, I didn't want an object instance but rather a static class, and I wanted more flexibility in the back-end. I also found some that had the flexibility also had more complexity, for example Monolog is 25 source files (not incl. tests). With closures, this seemed to be a good balance of small without sacrificing flexibility. What about Analog, the logfile analyzer? Well, since it hasn't been updated since 2004, I think it's safe to call a single-file PHP logging class the same thing without it being considered stepping on toes :) Usage Basic usage, with a custom handler function: <?php  require_once 'Analog.php';  // Default logging to /tmp/analog.txt Analog::log ('Log this error');  // Log to a MongoDB log collection Analog::handler (function ($info) {     static $conn = null;     if (! $conn) {         $conn = new Mongo ('localhost:27017');     }     $conn->mydb->log->insert ($info); });  // Log an alert Analog::log ('The sky is falling!', Analog::ALERT);  // Log some debug info Analog::log ('Debugging info', Analog::DEBUG);  ?> Usage with PSR-0, Composer, and the FirePHP handler: 1. Create a composer.json file in the root of your project with the following contents. {     ""require"": {         ""analog/analog"": ""dev-master""     } } 2. Run php composer.phar install from the terminal in the root of your project. 3. Include Composer's autoloader and use the Analog\Analog class. <?php  require_once 'vendor/autoload.php';  use Analog\Analog;  Analog::log ('Log this error');  Analog::handler (\Analog\Handler\FirePHP::init ());  Analog::log ('Take me to your browser');  ?> Usage with PSR-3, Composer, and the Variable handler: 1. Create a composer.json file in the root of your project with the following contents. {     ""require"": {         ""analog/analog"": ""dev-master""     } } 2. Run php composer.phar install from the terminal in the root of your project. 3. Include Composer's autoloader and use the Analog\Logger class. <?php  require_once 'vendor/autoload.php';  $logger = new Analog\Logger;  $log = '';  $logger->handler (Analog\Handler\Variable::init ($log));  $logger->alert ('Things are really happening right now!');  var_dump ($log);  ?> For more examples, see the examples folder. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jbroadway/analog"	"A closure-based micro logging package."	"true"
"Logging"	"KLogger"	"https://github.com/katzgrau/KLogger"	"An easy-to-use PSR-3 compliant logging class."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"669"	"56"	"243"	"GitHub - katzgrau/KLogger: A Simple Logging Class For PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 56 Star 669 Fork 243 katzgrau/KLogger Code Issues 3 Pull requests 3 Wiki Pulse Graphs A Simple Logging Class For PHP http://codefury.net/projects/klogger/ 91 commits 3 branches 6 releases 8 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master padding Nothing to show v0.2 v0.1 1.2.0 1.1.0 1.0.0 0.2.0 Nothing to show New pull request Latest commit 8773526 Nov 4, 2015 Kenny Katzgrau Update version Permalink Failed to load latest commit information. src Relaxed visibility of some elements to protected Oct 1, 2015 tests Add third options param in constructor, add support for prefixes and … Mar 5, 2015 .gitignore Add option for visual alignment of log levels with level-padding form… Sep 1, 2015 README.markdown Update copyright Sep 21, 2015 composer.json Update version Nov 4, 2015 phpunit.xml Preparing for Unit Tests. Mar 18, 2014 README.markdown KLogger: Simple Logging for PHP A project written by Kenny Katzgrau and Dan Horrigan. About KLogger is an easy-to-use PSR-3 compliant logging class for PHP. It isn't naive about file permissions (which is expected). It was meant to be a class that you could quickly include into a project and have working right away. If you need a logger that supports PHP < 5.3, see past releases for KLogger versions < 1.0.0. Installation Composer From the Command Line: composer require katzgrau/klogger:dev-master  In your composer.json: {     ""require"": {         ""katzgrau/klogger"": ""dev-master""     } } Basic Usage <?php  require 'vendor/autoload.php';  $users = [     [         'name' => 'Kenny Katzgrau',         'username' => 'katzgrau',     ],     [         'name' => 'Dan Horrigan',         'username' => 'dhrrgn',     ], ];  $logger = new Katzgrau\KLogger\Logger(__DIR__.'/logs'); $logger->info('Returned a million search results'); $logger->error('Oh dear.'); $logger->debug('Got these users from the Database.', $users); Output [2014-03-20 3:35:43.762437] [INFO] Returned a million search results [2014-03-20 3:35:43.762578] [ERROR] Oh dear. [2014-03-20 3:35:43.762795] [DEBUG] Got these users from the Database.     0: array(         'name' => 'Kenny Katzgrau',         'username' => 'katzgrau',     )     1: array(         'name' => 'Dan Horrigan',         'username' => 'dhrrgn',     )  PSR-3 Compliant KLogger is PSR-3 compliant. This means it implements the Psr\Log\LoggerInterface. See Here for the interface definition. Setting the Log Level Threshold You can use the Psr\Log\LogLevel constants to set Log Level Threshold, so that any messages below that level, will not be logged. Default Level The default level is DEBUG, which means everything will be logged. Available Levels <?php use Psr\Log\LogLevel;  // These are in order of highest priority to lowest. LogLevel::EMERGENCY; LogLevel::ALERT; LogLevel::CRITICAL; LogLevel::ERROR; LogLevel::WARNING; LogLevel::NOTICE; LogLevel::INFO; LogLevel::DEBUG; Example <?php // The  $logger = new Katzgrau\KLogger\Logger('/var/log/', Psr\Log\LogLevel::WARNING); $logger->error('Uh Oh!'); // Will be logged $logger->info('Something Happened Here'); // Will be NOT logged Additional Options KLogger supports additional options via third parameter in the constructor: <?php // Example $logger = new Katzgrau\KLogger\Logger('/var/log/', Psr\Log\LogLevel::WARNING, array (     'extension' => 'log', // changes the log file extension )); Here's the full list: Option Default Description dateFormat 'Y-m-d G:i:s.u' The format of the date in the start of the log lone (php formatted) extension 'txt' The log file extension filename [prefix][date].[extension] Set the filename for the log file. This overrides the prefix and extention options. flushFrequency false (disabled) How many lines to flush the output buffer after prefix 'log_' The log file prefix logFormat false Format of log entries appendContext true When false, don't append context to log entries Log Formatting The logFormat option lets you define what each line should look like and can contain parameters representing the date, message, etc. When a string is provided, it will be parsed for variables wrapped in braces ({ and }) and replace them with the appropriate value: Parameter Description date Current date (uses dateFormat option) level The PSR log level level-padding The whitespace needed to make this log level line up visually with other log levels in the log file priority Integer value for log level (see $logLevels) message The message being logged context JSON-encoded context Tab-separated Same as default format but separates parts with tabs rather than spaces: $logFormat = ""[{date}]\t[{level}]\t{message}"";  Custom variables and static text Inject custom content into log messages: $logFormat = ""[{date}] [$var] StaticText {message}"";  JSON To output pure JSON, set appendContext to false and provide something like the below as the value of the logFormat option: $logFormat = json_encode([     'datetime' => '{date}',     'logLevel' => '{level}',     'message'  => '{message}',     'context'  => '{context}', ]);  The output will look like: {""datetime"":""2015-04-16 10:28:41.186728"",""logLevel"":""INFO"",""message"":""Message content"",""context"":""{""1"":""foo"",""2"":""bar""}""}  Pretty Formatting with Level Padding For the obsessive compulsive $logFormat = ""[{date}] [{level}]{level-padding} {message}"";  ... or ... $logFormat = ""[{date}] [{level}{level-padding}] {message}"";  Why use KLogger? Why not? Just drop it in and go. If it saves you time and does what you need, go for it! Take a line from the book of our C-code fathers: ""build upon the work of others"". Who uses KLogger? Klogger has been used in projects at: * The University of Iowa * The University of Laverne * The New Jersey Institute of Technology * Middlesex Hospital in NJ  Additionally, it's been used in numerous projects, both commercial and personal. Special Thanks Special thanks to all contributors: Dan Horrigan Brian Fenton Tim Kinnane Onno Vos Cameron Will License The MIT License Copyright (c) 2008-2015 Kenny Katzgrau katzgrau@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/katzgrau/KLogger"	"An easy-to-use PSR-3 compliant logging class."	"true"
"Logging"	"Monolog"	"https://github.com/Seldaek/monolog"	"A comprehensive logger."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4945"	"282"	"922"	"GitHub - Seldaek/monolog: Sends your logs to files, sockets, inboxes, databases and various web services Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 282 Star 4,945 Fork 922 Seldaek/monolog Code Issues 15 Pull requests 4 Wiki Pulse Graphs Sends your logs to files, sockets, inboxes, databases and various web services 1,586 commits 2 branches 33 releases 247 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x master Nothing to show 1.20.0 1.19.0 1.18.2 1.18.1 1.18.0 1.17.2 1.17.1 1.17.0 1.16.0 1.15.0 1.14.0 1.13.1 1.13.0 1.12.0 1.11.0 1.10.0 1.9.1 1.9.0 1.8.0 1.7.0 1.6.0 1.5.0 1.4.1 1.4.0 1.3.1 1.3.0 1.2.1 1.2.0 1.1.0 1.0.2 1.0.1 1.0.0 1.0.0-RC1 Nothing to show New pull request Latest commit f16e67d Jul 2, 2016 Seldaek CS fixes Permalink Failed to load latest commit information. doc CS fixes Jul 2, 2016 src/Monolog CS fixes Jul 2, 2016 tests CS fixes Jul 2, 2016 .gitattributes Exclude development stuff from repository autogenerated ZIP archives May 19, 2016 .gitignore CS fixes Jul 14, 2015 .php_cs Move to strict mode and fix tests May 27, 2016 .travis.yml Fix tests May 27, 2016 CHANGELOG.mdown Update CHANGELOG Jul 2, 2016 LICENSE Change copyright's end date from 2015 to 2016 Apr 1, 2016 README.mdown Added the Fuel PHP framework to the integrations list May 2, 2016 UPGRADE.md Split interfaces and base/abstract classes into more sensible pieces Dec 18, 2015 composer.json Fix deps May 30, 2016 phpunit.xml.dist Set default date format to have a timezone, fixes #196 May 26, 2016 README.mdown Monolog - Logging for PHP Monolog sends your logs to files, sockets, inboxes, databases and various web services. See the complete list of handlers below. Special handlers allow you to build advanced logging strategies. This library implements the PSR-3 interface that you can type-hint against in your own libraries to keep a maximum of interoperability. You can also use it in your applications to make sure you can always use another compatible logger at a later time. As of 1.11.0 Monolog public APIs will also accept PSR-3 log levels. Internally Monolog still uses its own level scheme since it predates PSR-3. Installation Install the latest version with $ composer require monolog/monolog Basic Usage <?php  use Monolog\Logger; use Monolog\Handler\StreamHandler;  // create a log channel $log = new Logger('name'); $log->pushHandler(new StreamHandler('path/to/your.log', Logger::WARNING));  // add records to the log $log->warning('Foo'); $log->error('Bar'); Documentation Usage Instructions Handlers, Formatters and Processors Utility classes Extending Monolog Third Party Packages Third party handlers, formatters and processors are listed in the wiki. You can also add your own there if you publish one. About Requirements Monolog works with PHP 5.3 or above, and is also tested to work with HHVM. Submitting bugs and feature requests Bugs and feature request are tracked on GitHub Framework Integrations Frameworks and libraries using PSR-3 can be used very easily with Monolog since it implements the interface. Symfony2 comes out of the box with Monolog. Silex comes out of the box with Monolog. Laravel 4 & 5 come out of the box with Monolog. Lumen comes out of the box with Monolog. PPI comes out of the box with Monolog. CakePHP is usable with Monolog via the cakephp-monolog plugin. Slim is usable with Monolog via the Slim-Monolog log writer. XOOPS 2.6 comes out of the box with Monolog. Aura.Web_Project comes out of the box with Monolog. Nette Framework can be used with Monolog via Kdyby/Monolog extension. Proton Micro Framework comes out of the box with Monolog. FuelPHP come out of the box with Monolog. Author Jordi Boggiano - j.boggiano@seld.be - http://twitter.com/seldaek See also the list of contributors which participated in this project. License Monolog is licensed under the MIT License - see the LICENSE file for details Acknowledgements This library is heavily inspired by Python's Logbook library, although most concepts have been adjusted to fit to the PHP world. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Seldaek/monolog"	"A comprehensive logger."	"true"
"E-commerce"	"Money"	"https://github.com/moneyphp/money"	"A PHP implementation of Fowler's money pattern."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"938"	"58"	"126"	"GitHub - moneyphp/money: PHP implementation of Fowler's Money pattern. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 58 Star 938 Fork 126 moneyphp/money Code Issues 10 Pull requests 3 Pulse Graphs PHP implementation of Fowler's Money pattern. http://blog.verraes.net/2011/04/fowler-money-pattern-in-php/ 329 commits 5 branches 7 releases 22 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x analysis-qrd5OD currency_pair_float formatter_subunits master Nothing to show v3.0.0-beta v3.0.0-alpha v1.3.0 1.2.1 1.2.0 1.1.0 1.0.0 Nothing to show New pull request Latest commit d71d5e3 Jul 6, 2016 sagikazarmark committed on GitHub Merge pull request #234 from Sharom/money-spec-refactoring … Improves MoneySpec. Makes test of a subtraction more accurate. Permalink Failed to load latest commit information. doc Documentation improvements May 3, 2016 resources Fix currency list dependency size issue, fixes #175, closes #160 Feb 29, 2016 spec Improves MoneySpec. Makes test of a subtraction more accurate. Jul 5, 2016 src chunk amount string to check if the supplied amount is an integer tha… May 3, 2016 tests improve test readability May 3, 2016 .editorconfig Improve package Dec 28, 2015 .gitattributes Improve package Dec 28, 2015 .gitignore Documentation improvements May 3, 2016 .php_cs Add styleci Feb 3, 2016 .styleci.yml Also check tests/ folder Feb 10, 2016 .travis.yml Documentation improvements May 3, 2016 CHANGELOG.md update changelog, all removed features are bc breaks Mar 11, 2016 LICENSE Bump year Jan 16, 2016 README.md Documentation improvements May 3, 2016 composer.json Use autoloading for ""spec"" namespace May 23, 2016 phpspec.yml.ci Replace PHPUnit tests with spec testing Apr 24, 2016 phpspec.yml.dist Replace PHPUnit tests with spec testing Apr 24, 2016 phpunit.xml.dist Improve phpunit config and code coverage Jan 16, 2016 README.md Money PHP 5.5+ library to make working with money safer, easier, and fun! ""If I had a dime for every time I've seen someone use FLOAT to store currency, I'd have $999.997634"" -- Bill Karwin In short: You shouldn't represent monetary values by a float. Wherever you need to represent money, use this Money value object. Since version 3.0 this library uses strings internally in order to support unlimited integers. <?php  use Money\Money;  $fiveEur = Money::EUR(500); $tenEur = $fiveEur->add($fiveEur);  list($part1, $part2, $part3) = $tenEur->allocate(array(1, 1, 1)); assert($part1->equals(Money::EUR(334))); assert($part2->equals(Money::EUR(333))); assert($part3->equals(Money::EUR(333))); The documentation is available at http://money.readthedocs.org Installation Install the library using composer. composer require mathiasverraes/money Features JSON Serialization Big integer support utilizing different, transparent calculation logic upon availability (bcmath, gmp, plain php) Money formatting (including intl formatter) Currency repositories (ISO currencies included) Money exchange (including Swap implementation) Integration See MoneyBundle or TbbcMoneyBundle for Symfony integration. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/moneyphp/money"	"A PHP implementation of Fowler's money pattern."	"true"
"E-commerce"	"OmniPay"	"https://github.com/thephpleague/omnipay"	"A framework agnostic multi-gateway payment processing library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2950"	"204"	"536"	"GitHub - thephpleague/omnipay: A framework agnostic, multi-gateway payment processing library for PHP 5.3+ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 204 Star 2,950 Fork 536 thephpleague/omnipay Code Issues 28 Pull requests 1 Wiki Pulse Graphs A framework agnostic, multi-gateway payment processing library for PHP 5.3+ http://omnipay.thephpleague.com/ 433 commits 7 branches 24 releases 59 contributors Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 1.1 3.0-container 3.0 gh-pages master update Nothing to show v2.3.1 v2.3.0 v2.1.0 v2.0.0 v1.1.0 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.9.3 v0.9.2 v0.9.1 v0.9.0 v0.8.4 v0.8.3 v0.8.2 v0.8.1 v0.8.0 v0.7.1 v0.7.0 v0.6.1 v0.6.0 2.3.2 Nothing to show New pull request Latest commit c279d7b Jul 7, 2016 barryvdh committed on GitHub Add note about Symfony 3 Permalink Failed to load latest commit information. .gitignore Knasher Mar 3, 2015 .travis.yml Test that package installs successfully Nov 17, 2013 CONTRIBUTING.md - Forgot to tag it all for packagist.. Jun 8, 2015 LICENSE Omnipay Feb 12, 2013 README.md Add note about Symfony 3 Jul 7, 2016 composer.json Add Global Alipay Jan 28, 2016 README.md Omnipay An easy to use, consistent payment processing library for PHP 5.3+ Omnipay is a payment processing library for PHP. It has been designed based on ideas from Active Merchant, plus experience implementing dozens of gateways for [CI Merchant]. It has a clear and consistent API, is fully unit tested, and even comes with an example application to get you started. Why use Omnipay instead of a gateway's official PHP package/example code? Because you can learn one API and use it in multiple projects using different payment gateways Because if you need to change payment gateways you won't need to rewrite your code Because most official PHP payment gateway libraries are a mess Because most payment gateways have exceptionally poor documentation Because you are writing a shopping cart and need to support multiple gateways Important Note: Compatibility with Symfony 3 Event Dispatcher If you are using Symfony 3 (or Symfony 3 components), please note that Omnipay 2.x still relies on Guzzle3, which in turn depends on symfony/event-dispatcher 2.x. This conflicts with Symfony 3 (standard install), so cannot be installed. Development for Omnipay 3.x is still in progress at the moment. If you are just using the Symfony 3 components (eg. stand-alone or Silex/Laravel etc), you could try to force the install of symfony/event-dispatcher:^2.8, which is compatible with both Symfony 3 components and Guzzle 3. composer require symfony/event-dispatcher:^2.8  TL;DR Just want to see some code? use Omnipay\Omnipay;  $gateway = Omnipay::create('Stripe'); $gateway->setApiKey('abc123');  $formData = array('number' => '4242424242424242', 'expiryMonth' => '6', 'expiryYear' => '2016', 'cvv' => '123'); $response = $gateway->purchase(array('amount' => '10.00', 'currency' => 'USD', 'card' => $formData))->send();  if ($response->isSuccessful()) {     // payment was successful: update database     print_r($response); } elseif ($response->isRedirect()) {     // redirect to offsite payment gateway     $response->redirect(); } else {     // payment failed: display message to customer     echo $response->getMessage(); } As you can see, Omnipay has a consistent, well thought out API. We try to abstract as much as possible the differences between the various payments gateways. Package Layout Omnipay is a collection of packages which all depend on the omnipay/common package to provide a consistent interface. There are no dependencies on official payment gateway PHP packages - we prefer to work with the HTTP API directly. Under the hood, we use the popular and powerful Guzzle library to make HTTP requests. New gateways can be created by cloning the layout of an existing package. When choosing a name for your package, please don't use the omnipay vendor prefix, as this implies that it is officially supported. You should use your own username as the vendor prefix, and prepend omnipay- to the package name to make it clear that your package works with Omnipay. For example, if your GitHub username was santa, and you were implementing the giftpay payment library, a good name for your composer package would be santa/omnipay-giftpay. If you want to transfer your gateway to the omnipay GitHub organization and add it to the list of officially supported gateways, please open a pull request on the omnipay/common package. Before new gateways will be accepted, they must have 100% unit test code coverage, and follow the conventions and code style used in other Omnipay gateways. Installation Omnipay is installed via Composer. For most uses, you will need to require an individual gateway: composer require omnipay/paypal:~2.0  To install all officially supported gateways: composer require omnipay/omnipay:~2.0  This will require ALL ~25 Omnipay gateways and is generally discouraged. Payment Gateways All payment gateways must implement GatewayInterface, and will usually extend AbstractGateway for basic functionality. The following gateways are available: Gateway Composer Package Maintainer 2Checkout omnipay/2checkout Kayla Daniels 2Checkout Improved collizo4sky/omnipay-2checkout Agbonghama Collins Agms agmscode/omnipay-agms Maanas Royy Alipay(Global) lokielse/omnipay-global-alipay Loki Else Alipay lokielse/omnipay-alipay Loki Else Authorize.Net omnipay/authorizenet Kayla Daniels Barclays ePDQ samvaughton/omnipay-barclays-epdq Sam Vaughton Beanstream lemonstand/omnipay-beanstream LemonStand BKM Express yasinkuyu/omnipay-bkm Yasin Kuyu Buckaroo omnipay/buckaroo Kayla Daniels CardGate cardgate/omnipay-cardgate CardGate CardSave omnipay/cardsave Kayla Daniels Checkout.com fotografde/checkoutcom fotograf.de Coinbase omnipay/coinbase Kayla Daniels Creditcall meebio/omnipay-creditcall John Jablonski Cybersource dioscouri/omnipay-cybersource Dioscouri Design Cybersource SOAP dabsquared/omnipay-cybersource-soap DABSquared DataCash coatesap/omnipay-datacash Andrew Coates Dummy omnipay/dummy Kayla Daniels ecoPayz dercoder/omnipay-ecopayz Alexander Fedra Elavon lemonstand/omnipay-elavon LemonStand eWAY omnipay/eway Kayla Daniels Fasapay andreas22/omnipay-fasapay Andreas Christodoulou Fat Zebra delatbabel/omnipay-fatzebra Del First Data omnipay/firstdata Andrew Coates Flo2cash guisea/omnipay-flo2cash Aaron Guise Globalcloudpay dercoder/omnipay-globalcloudpay Alexander Fedra GoCardless omnipay/gocardless Kayla Daniels GVP (Garanti) yasinkuyu/omnipay-gvp Yasin Kuyu Helcim academe/omnipay-helcim Jason Judge IfthenPay ifthenpay/omnipay-ifthenpay Rafael Almeida Iyzico yasinkuyu/omnipay-iyzico Yasin Kuyu Komerci (Rede, former RedeCard) byjg/omnipay-komerci João Gilberto Magalhães Komoju vink/omnipay-komoju Danny Vink Manual omnipay/manual Kayla Daniels Migs omnipay/migs Kayla Daniels Mollie omnipay/mollie Kayla Daniels MOLPay leesiongchan/molpay Lee Siong Chan MultiCards incube8/omnipay-multicards Del MultiSafepay omnipay/multisafepay Alexander Deruwe NestPay (EST) yasinkuyu/omnipay-nestpay Yasin Kuyu Netaxept (BBS) omnipay/netaxept Kayla Daniels Netbanx omnipay/netbanx Maks Rafalko Neteller alfaproject/omnipay-neteller João Dias NetPay netpay/omnipay-netpay NetPay Network Merchants Inc. (NMI) mfauveau/omnipay-nmi Matthieu Fauveau Pacnet mfauveau/omnipay-pacnet Matthieu Fauveau Pagar.me descubraomundo/omnipay-pagarme Descubra o Mundo PayFast omnipay/payfast Kayla Daniels Payflow omnipay/payflow Kayla Daniels PaymentExpress (DPS) omnipay/paymentexpress Kayla Daniels PaymentSense coatesap/omnipay-paymentsense Andrew Coates PaymentWall incube8/omnipay-paymentwall Del PayPal omnipay/paypal Kayla Daniels PayPro paypronl/omnipay-paypro Fruitcake Studio Paysafecard dercoder/omnipay-paysafecard Alexander Fedra PayTrace softcommerce/omnipay-paytrace Oleg Ilyushyn PayU omnipay/payu efesaid Pin Payments omnipay/pin Kayla Daniels Portmanat dercoder/omnipay-portmanat Alexander Fedra Posnet yasinkuyu/omnipay-posnet Yasin Kuyu Postfinance bummzack/omnipay-postfinance Roman Schmid Realex coatesap/omnipay-realex Andrew Coates RedSys nazka/sermepa-omnipay Javier Sampedro RentMoola rentmoola/omnipay-rentmoola Geoff Shaw Sage Pay omnipay/sagepay Kayla Daniels SecPay justinbusschau/omnipay-secpay Justin Busschau SecurePay omnipay/securepay Kayla Daniels Secure Trading meebio/omnipay-secure-trading John Jablonski Sisow fruitcakestudio/omnipay-sisow Fruitcake Studio Skrill alfaproject/omnipay-skrill João Dias Sofort aimeoscom/omnipay-sofort Aimeos GmbH Stripe omnipay/stripe Kayla Daniels TargetPay omnipay/targetpay Alexander Deruwe UnionPay lokielse/omnipay-unionpay Loki Else Vantiv lemonstand/omnipay-vantiv LemonStand Veritrans andylibrian/omnipay-veritrans Andy Librian WebMoney dercoder/omnipay-webmoney Alexander Fedra WeChat labs7in0/omnipay-wechat 7IN0's Labs WechatPay lokielse/omnipay-wechatpay Loki Else WePay collizo4sky/omnipay-wepay Agbonghama Collins Wirecard igaponov/omnipay-wirecard Igor Gaponov WorldPay omnipay/worldpay Kayla Daniels WorldPay XML Direct teaandcode/omnipay-worldpay-xml Dave Nash Yandex.Money aTastyCookie/yandexmoney_omnipay Roman Ananyev Gateways are created and initialized like so: use Omnipay\Omnipay;  $gateway = Omnipay::create('PayPal_Express'); $gateway->setUsername('adrian'); $gateway->setPassword('12345'); Most settings are gateway specific. If you need to query a gateway to get a list of available settings, you can call getDefaultParameters(): $settings = $gateway->getDefaultParameters(); // default settings array format: array(     'username' => '', // string variable     'testMode' => false, // boolean variable     'landingPage' => array('billing', 'login'), // enum variable, first item should be treated as default ); Generally most payment gateways can be classified as one of two types: Off-site gateways such as PayPal Express, where the customer is redirected to a third party site to enter payment details On-site (merchant-hosted) gateways such as PayPal Pro, where the customer enters their credit card details on your site However, there are some gateways such as Sage Pay Direct, where you take credit card details on site, then optionally redirect if the customer's card supports 3D Secure authentication. Therefore, there is no point differentiating between the two types of gateway (other than by the methods they support). Credit Card / Payment Form Input User form input is directed to an CreditCard object. This provides a safe way to accept user input. The CreditCard object has the following fields: firstName lastName number expiryMonth expiryYear startMonth startYear cvv issueNumber type billingAddress1 billingAddress2 billingCity billingPostcode billingState billingCountry billingPhone shippingAddress1 shippingAddress2 shippingCity shippingPostcode shippingState shippingCountry shippingPhone company email Even off-site gateways make use of the CreditCard object, because often you need to pass customer billing or shipping details through to the gateway. The CreditCard object can be initialized with untrusted user input via the constructor. Any fields passed to the constructor which are not recognized will be ignored. $formInputData = array(     'firstName' => 'Bobby',     'lastName' => 'Tables',     'number' => '4111111111111111', ); $card = new CreditCard($formInputData); You can also just pass the form data array directly to the gateway, and a CreditCard object will be created for you. CreditCard fields can be accessed using getters and setters: $number = $card->getNumber(); $card->setFirstName('Adrian'); If you submit credit card details which are obviously invalid (missing required fields, or a number which fails the Luhn check), InvalidCreditCardException will be thrown. You should validate the card details using your framework's validation library before submitting the details to your gateway, to avoid unnecessary API calls. For on-site payment gateways, the following card fields are generally required: firstName lastName number expiryMonth expiryYear cvv You can also verify the card number using the Luhn algorithm by calling Helper::validateLuhn($number). Gateway Methods The main methods implemented by gateways are: authorize($options) - authorize an amount on the customer's card completeAuthorize($options) - handle return from off-site gateways after authorization capture($options) - capture an amount you have previously authorized purchase($options) - authorize and immediately capture an amount on the customer's card completePurchase($options) - handle return from off-site gateways after purchase refund($options) - refund an already processed transaction void($options) - generally can only be called up to 24 hours after submitting a transaction acceptNotification() - convert an incoming request from an off-site gateway to a generic notification object for further processing On-site gateways do not need to implement the completeAuthorize and completePurchase methods. Gateways that don't receive payment notifications don't need to implement acceptNotification. If any gateway does not support certain features (such as refunds), it will throw BadMethodCallException. All gateway methods except acceptNotification take an $options array as an argument. The acceptNotification method does not take any parameters and will access the HTTP URL variables or POST data implicitly. Each gateway differs in which parameters are required, and the gateway will throw InvalidRequestException if you omit any required parameters. All gateways will accept a subset of these options: card token amount currency description transactionId clientIp returnUrl cancelUrl Pass the options through to the method like so: $card = new CreditCard($formData); $request = $gateway->authorize(array(     'amount' => '10.00', // this represents $10.00     'card' => $card,     'returnUrl' => 'https://www.example.com/return', )); When calling the completeAuthorize or completePurchase methods, the exact same arguments should be provided as when you made the initial authorize or purchase call (some gateways will need to verify for example the actual amount paid equals the amount requested). The only parameter you can omit is card. To summarize the various parameters you have available to you: Gateway settings (e.g. username and password) are set directly on the gateway. These settings apply to all payments, and generally you will store these in a configuration file or in the database. Method options are used for any payment-specific options, which are not set by the customer. For example, the payment amount, currency, transactionId and returnUrl. CreditCard parameters are data which the user supplies. For example, you want the user to specify their firstName and billingCountry, but you don't want a user to specify the payment currency or returnUrl. The Payment Response The payment response must implement ResponseInterface. There are two main types of response: Payment was successful (standard response) Website requires redirect to off-site payment form (redirect response) Successful Response For a successful responses, a reference will normally be generated, which can be used to capture or refund the transaction at a later date. The following methods are always available: $response = $gateway->purchase(array('amount' => '10.00', 'card' => $card))->send();  $response->isSuccessful(); // is the response successful? $response->isRedirect(); // is the response a redirect? $response->getTransactionReference(); // a reference generated by the payment gateway $response->getTransactionId(); // the reference set by the originating website if available. $response->getMessage(); // a message generated by the payment gateway In addition, most gateways will override the response object, and provide access to any extra fields returned by the gateway. Redirect Response The redirect response is further broken down by whether the customer's browser must redirect using GET (RedirectResponse object), or POST (FormRedirectResponse). These could potentially be combined into a single response class, with a getRedirectMethod(). After processing a payment, the cart should check whether the response requires a redirect, and if so, redirect accordingly: $response = $gateway->purchase(array('amount' => '10.00', 'card' => $card))->send(); if ($response->isSuccessful()) {     // payment is complete } elseif ($response->isRedirect()) {     $response->redirect(); // this will automatically forward the customer } else {     // not successful } The customer isn't automatically forwarded on, because often the cart or developer will want to customize the redirect method (or if payment processing is happening inside an AJAX call they will want to return JS to the browser instead). To display your own redirect page, simply call getRedirectUrl() on the response, then display it accordingly: $url = $response->getRedirectUrl(); // for a form redirect, you can also call the following method: $data = $response->getRedirectData(); // associative array of fields which must be posted to the redirectUrl Error Handling You can test for a successful response by calling isSuccessful() on the response object. If there was an error communicating with the gateway, or your request was obviously invalid, an exception will be thrown. In general, if the gateway does not throw an exception, but returns an unsuccessful response, it is a message you should display to the customer. If an exception is thrown, it is either a bug in your code (missing required fields), or a communication error with the gateway. You can handle both scenarios by wrapping the entire request in a try-catch block: try {     $response = $gateway->purchase(array('amount' => '10.00', 'card' => $card))->send();     if ($response->isSuccessful()) {         // mark order as complete     } elseif ($response->isRedirect()) {         $response->redirect();     } else {         // display error to customer         exit($response->getMessage());     } } catch (\Exception $e) {     // internal error, log exception and display a generic message to the customer     exit('Sorry, there was an error processing your payment. Please try again later.'); } Token Billing Token billing allows you to store a credit card with your gateway, and charge it at a later date. Token billing is not supported by all gateways. For supported gateways, the following methods are available: createCard($options) - returns a response object which includes a cardReference, which can be used for future transactions updateCard($options) - update a stored card, not all gateways support this method deleteCard($options) - remove a stored card, not all gateways support this method Once you have a cardReference, you can use it instead of the card parameter when creating a charge: $gateway->purchase(array('amount' => '10.00', 'cardReference' => 'abc'));  Recurring Billing At this stage, automatic recurring payments functionality is out of scope for this library. This is because there is likely far too many differences between how each gateway handles recurring billing profiles. Also in most cases token billing will cover your needs, as you can store a credit card then charge it on whatever schedule you like. Feel free to get in touch if you really think this should be a core feature and worth the effort. Incoming Notifications Some gateways (e.g. Cybersource, GoPay) offer HTTP notifications to inform the merchant about the completion (or, in general, status) of the payment. To assist with handling such notifications, the acceptNotification() method will extract the transaction reference and payment status from the HTTP request and return a generic NotificationInterface. $notification = $gateway->acceptNotification();  $notification->getTransactionReference(); // A reference provided by the gateway to represent this transaction $notification->getTransactionStatus(); // Current status of the transaction, one of NotificationInterface::STATUS_* $notification->getMessage(); // Additional message, if any, provided by the gateway  // update the status of the corresponding transaction in your database Example Application An example application is provided in the omnipay/example repo. You can run it using PHP's built in web server (PHP 5.4+): $ php composer.phar update --dev $ php -S localhost:8000  For more information, see the Omnipay example application. Support If you are having general issues with Omnipay, we suggest posting on Stack Overflow. Be sure to add the omnipay tag so it can be easily found. If you want to keep up to date with release anouncements, discuss ideas for the project, or ask more detailed questions, there is also a mailing list which you can subscribe to. If you believe you have found a bug, please report it using the GitHub issue tracker for the appropriate package, or better yet, fork the library and submit a pull request. Security If you discover any security related issues, please email kayladnls@gmail.com instead of using the issue tracker. Feedback Please provide feedback! We want to make this library useful in as many projects as possible. Please head on over to the mailing list and point out what you do and don't like, or fork the project and make suggestions. No issue is too small. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/omnipay"	"A framework agnostic multi-gateway payment processing library."	"true"
"E-commerce"	"Payum"	"https://github.com/payum/payum"	"A payment abstraction library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"685"	"50"	"123"	"GitHub - Payum/Payum: PHP 5.5+ Payment processing library. It offers everything you need to work with payments: Credit card & offsite purchasing, subscriptions, payouts etc. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 685 Fork 123 Payum/Payum Code Issues 10 Pull requests 12 Pulse Graphs PHP 5.5+ Payment processing library. It offers everything you need to work with payments: Credit card & offsite purchasing, subscriptions, payouts etc. http://payum.org 2,206 commits 27 branches 93 releases 69 contributors PHP 99.6% Other 0.4% PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.3 0.5 0.6 0.7 0.8 0.9 0.10 0.11 0.12 0.13 0.14 0.15 1.2 be2bill-onsite doc-update-list-of-supported-gateways master obtain-credit-card-request payment-builder payment-config-form payment-details-encryption paypal-masspay php-7-on-travis request-change-meaning-of-capture-request security-token-factory sofort stripe-subscription symfony-3 Nothing to show 1.3.5 1.3.4 1.3.3 1.3.2 1.3.1 1.3.0 1.2.9 1.2.8 1.2.7 1.2.6 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.0.0 1.0.0-BETA4 1.0.0-BETA3 1.0.0-BETA2 1.0.0-BETA1 0.15.4 0.15.3 0.15.2 0.15.1 0.15.0 0.14.7 0.14.6 0.14.5 0.14.4 0.14.3 0.14.2 0.14.1 0.14.0 0.13.0 0.12.9 0.12.8 0.12.7 0.12.6 0.12.5 0.12.4 0.12.3 0.12.2 0.12.1 0.12.0 0.11.8 0.11.7 0.11.6 0.11.5 0.11.4 0.11.3 0.11.2 0.11.1 0.11.0 0.10.0 0.9.3 0.9.2 0.9.1 0.9.0 0.8.8 0.8.7 0.8.6 0.8.5 0.8.4 0.8.3 0.8.2 0.8.1 0.8.0 0.7.2 0.7.1 0.7.0 0.6.6 0.6.5 0.6.4 0.6.3 0.6.2 0.6.1 0.6.0 0.5.4 0.5.3 0.5.2 0.5.1 0.5.0 0.4.0 0.3.1 0.3.0 0.2.0 0.1 Nothing to show New pull request Latest commit 87e3bee Jul 13, 2016 makasim Release 1.3.5 Permalink Failed to load latest commit information. bin Release 1.3.5 Jul 13, 2016 src/Payum Made ApiAwareTrait interface tolerant Jul 12, 2016 .gitignore Using Httplug instead of Guzzle6 Mar 23, 2016 .travis.yml fix travis Jun 9, 2016 CHANGELOG.md Release 1.3.4 Jun 9, 2016 LICENSE licence owner is changed Aug 24, 2015 README.md Add Gitter badge Feb 17, 2016 UPGRADE.md [payout] Add Payout model and payout generic action for the given model. Mar 28, 2016 autoload.php.dist replace payment with gateways. Apr 6, 2015 composer.json Version fix May 12, 2016 phpunit.xml.dist [paypal][masspay] add some tests. Mar 28, 2016 README.md Payum Payum offers everything you need to work with payments. From simplest use cases to very advanced ones. Resources Documentation Questions Issue Tracker Twitter Support me There are lots of features were done and even more stuff in todo list. If the library made your life easier cosider support me. You can either hire me to do some payment related stuff or donate. You can also send a mail with a feedback. Tell me about your expiriens with Payum. License Payum is released under the MIT License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/payum/payum"	"A payment abstraction library."	"true"
"E-commerce"	"Sebastian Money"	"https://github.com/sebastianbergmann/money"	"Another library for working with monetary values."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"641"	"34"	"293"	"GitHub - sebastianbergmann/money: Value Object that represents a monetary value (using a currency's smallest unit). Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 34 Star 641 Fork 293 sebastianbergmann/money Code Pull requests 0 Pulse Graphs Value Object that represents a monetary value (using a currency's smallest unit). 192 commits 1 branch 11 releases 11 contributors PHP 99.7% Smarty 0.3% PHP Smarty Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.6.2 v1.6.1 v1.6.0 v1.5.1 v1.5.0 v1.4.0 v1.3.1 v1.3.0 v1.2.0 v1.1.0 v1.0.0 Nothing to show New pull request Latest commit 860b924 Jul 5, 2016 sebastianbergmann Update PHPUnit Permalink Failed to load latest commit information. build Update PHPUnit Jul 5, 2016 src Update tools Apr 17, 2016 tests Update PHPUnit Jul 5, 2016 .gitattributes Exclude build and tests from the dist downloads in composer Jun 24, 2015 .gitignore Update build Apr 17, 2016 ChangeLog.md Prepare release Apr 17, 2016 LICENSE Update license and copyright in all files Jan 2, 2015 README.md Update linktext May 2, 2016 build.xml Update build Apr 17, 2016 composer.json Update version constraints Apr 17, 2016 README.md This project has been abandoned. It was only ever intended to be used as an example for PHPUnit features etc. and not for usage in production. I am sorry that I failed to make that clear. Please have a look at moneyphp/money instead. Money Value Object that represents a monetary value using a currency's smallest unit. Installation Simply add a dependency on sebastian/money to your project's composer.json file if you use Composer to manage the dependencies of your project. Here is a minimal example of a composer.json file that just defines a dependency on Money: {     ""require"": {         ""sebastian/money"": ""^1.6""     } }  Usage Examples Creating a Money object and accessing its monetary value use SebastianBergmann\Money\Currency; use SebastianBergmann\Money\Money;  // Create Money object that represents 1 EUR $m = new Money(100, new Currency('EUR'));  // Access the Money object's monetary value print $m->getAmount();  // Access the Money object's monetary value converted to its base units print $m->getConvertedAmount(); The code above produces the output shown below: 100  1.00  Creating a Money object from a string value use SebastianBergmann\Money\Currency; use SebastianBergmann\Money\Money;  // Create Money object that represents 12.34 EUR $m = Money::fromString('12.34', new Currency('EUR'))  // Access the Money object's monetary value print $m->getAmount(); The code above produces the output shown below: 1234  Using a Currency-specific subclass of Money use SebastianBergmann\Money\EUR;  // Create Money object that represents 1 EUR $m = new EUR(100);  // Access the Money object's monetary value print $m->getAmount(); The code above produces the output shown below: 100  Please note that there is no subclass of Money that is specific to Turkish Lira as TRY is not a valid class name in PHP. Formatting a Money object using PHP's built-in NumberFormatter use SebastianBergmann\Money\Currency; use SebastianBergmann\Money\Money; use SebastianBergmann\Money\IntlFormatter;  // Create Money object that represents 1 EUR $m = new Money(100, new Currency('EUR'));  // Format a Money object using PHP's built-in NumberFormatter (German locale) $f = new IntlFormatter('de_DE');  print $f->format($m); The code above produces the output shown below: 1,00 €  Basic arithmetic using Money objects use SebastianBergmann\Money\Currency; use SebastianBergmann\Money\Money;  // Create two Money objects that represent 1 EUR and 2 EUR, respectively $a = new Money(100, new Currency('EUR')); $b = new Money(200, new Currency('EUR'));  // Negate a Money object $c = $a->negate(); print $c->getAmount();  // Calculate the sum of two Money objects $c = $a->add($b); print $c->getAmount();  // Calculate the difference of two Money objects $c = $b->subtract($a); print $c->getAmount();  // Multiply a Money object with a factor $c = $a->multiply(2); print $c->getAmount(); The code above produces the output shown below: -100 300 100 200  Comparing Money objects use SebastianBergmann\Money\Currency; use SebastianBergmann\Money\Money;  // Create two Money objects that represent 1 EUR and 2 EUR, respectively $a = new Money(100, new Currency('EUR')); $b = new Money(200, new Currency('EUR'));  var_dump($a->lessThan($b)); var_dump($a->greaterThan($b));  var_dump($b->lessThan($a)); var_dump($b->greaterThan($a));  var_dump($a->compareTo($b)); var_dump($a->compareTo($a)); var_dump($b->compareTo($a)); The code above produces the output shown below: bool(true) bool(false) bool(false) bool(true) int(-1) int(0) int(1)  The compareTo() method returns an integer less than, equal to, or greater than zero if the value of one Money object is considered to be respectively less than, equal to, or greater than that of another Money object. You can use the compareTo() method to sort an array of Money objects using PHP's built-in sorting functions: use SebastianBergmann\Money\Currency; use SebastianBergmann\Money\Money;  $m = array(     new Money(300, new Currency('EUR')),     new Money(100, new Currency('EUR')),     new Money(200, new Currency('EUR')) );  usort(     $m,     function ($a, $b) { return $a->compareTo($b); } );  foreach ($m as $_m) {     print $_m->getAmount() . ""\n""; } The code above produces the output shown below: 100 200 300  Allocate the monetary value represented by a Money object among N targets use SebastianBergmann\Money\Currency; use SebastianBergmann\Money\Money;  // Create a Money object that represents 0,99 EUR $a = new Money(99, new Currency('EUR'));  foreach ($a->allocateToTargets(10) as $t) {     print $t->getAmount() . ""\n""; } The code above produces the output shown below: 10 10 10 10 10 10 10 10 10 9  Allocate the monetary value represented by a Money object using a list of ratios use SebastianBergmann\Money\Currency; use SebastianBergmann\Money\Money;  // Create a Money object that represents 0,05 EUR $a = new Money(5, new Currency('EUR'));  foreach ($a->allocateByRatios(array(3, 7)) as $t) {     print $t->getAmount() . ""\n""; } The code above produces the output shown below: 2 3  Extract a percentage (and a subtotal) from the monetary value represented by a Money object use SebastianBergmann\Money\Currency; use SebastianBergmann\Money\Money;  // Create a Money object that represents 100,00 EUR $original = new Money(10000, new Currency('EUR'));  // Extract 21% (and the corresponding subtotal) $extract = $original->extractPercentage(21);  printf(     ""%d = %d + %d\n"",     $original->getAmount(),     $extract['subtotal']->getAmount(),     $extract['percentage']->getAmount() ); The code above produces the output shown below: 10000 = 8265 + 1735  Please note that this extracts the percentage out of a monetary value where the percentage is already included. If you want to get the percentage of the monetary value you should use multiplication (multiply(0.21), for instance, to calculate 21% of a monetary value represented by a Money object) instead. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sebastianbergmann/money"	"Another library for working with monetary values."	"true"
"E-commerce"	"Shopware"	"https://github.com/shopware/shopware"	"Highly customizable e-commerce software"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"476"	"121"	"329"	"GitHub - shopware/shopware: Shopware Repository Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 121 Star 476 Fork 329 shopware/shopware Code Pull requests 115 Pulse Graphs Shopware Repository http://www.shopware.com 11,083 commits 6 branches 55 releases Fetching contributors PHP 61.3% JavaScript 31.2% CSS 4.3% Smarty 2.2% HTML 0.6% Cucumber 0.3% Other 0.1% PHP JavaScript CSS Smarty HTML Cucumber Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 5.2 Switch branches/tags Branches Tags 4.3 5.0 5.1 5.2 experimental/webtestcase mnaczenski-fix-missing-word-wrap-for-items-in-documents Nothing to show v5.2.2 v5.2.1 v5.2.0 v5.2.0-RC3 v5.2.0-RC2 v5.2.0-RC1 v5.2.0-BETA1 v5.1.6 v5.1.5 v5.1.4 v5.1.3 v5.1.3-RC1 v5.1.2-RC2 v5.1.2-RC1 v5.1.1 v5.1.0 v5.1.0-RC3 v5.1.0-RC2 v5.0.4 v5.0.4-RC1 v5.0.3 v5.0.3-RC1 v5.0.2 v5.0.2-RC1 v5.0.1 v5.0.0 v5.0.0-RC3 v5.0.0-RC2 v5.0.0-RC1 4.3.7 4.3.6 4.3.5 4.3.4 4.3.3 4.3.2 4.3.1 4.3.0 4.2.3 4.2.2 4.2.1.1 4.2.1 4.2.0 4.1.4 4.1.3 4.1.2 4.1.1 4.1.0 4.0.8 4.0.7 4.0.6 4.0.5 4.0.4 4.0.3 4.0.2 4.0.1 Nothing to show New pull request Latest commit 8a12f4d Jul 15, 2016 Stephan Pohl Merge pull request #3836 in SW/shopware from sw-13724/5.2/fix-deep-as… … …sociation-reader to 5.2  * commit 'd7fcfa118ae23f748ccf73259578a3aa97041148':   SW-13724 - Add new application data reader which contains a fix for deep association loading Permalink Failed to load latest commit information. _sql SW-14768 - Allow configuration of attribute default values for plugins Jul 14, 2016 bin SW-9108 - Rename remaining Shopware 4 occurences Nov 28, 2014 build SW-15213 - Make unit test elastic search compatible Jun 3, 2016 custom/plugins SW-15062 - Move plugins to custom/plugins/ May 24, 2016 engine Merge pull request #3856 in SW/shopware from sw-14768/5.2/add-default… Jul 15, 2016 files SW-8427 - Add compatibility for Apache 2.4 .htaccess protections with… Oct 15, 2014 media SW-12620 - Activate media fallback by default Sep 23, 2015 recovery SW-15485 - Set default timezone Jun 27, 2016 snippets sw-15567 - updated snippets from crowdin Jul 5, 2016 tests Merge pull request #3856 in SW/shopware from sw-14768/5.2/add-default… Jul 15, 2016 themes Merge pull request #3836 in SW/shopware from sw-13724/5.2/fix-deep-as… Jul 15, 2016 var Fix OSX compatibility of clear_cache.sh Oct 2, 2015 vendor SW-10136 - Prevent direct access to php files inside vendor directory Feb 27, 2015 web/cache SW-7868 Refactored: The premium products have a totally new design Jul 9, 2014 .editorconfig SW-9108 - Rename remaining Shopware 4 occurences Nov 28, 2014 .gitignore SW-15062 - Move plugins to custom/plugins/ May 24, 2016 .htaccess SW-14866 - fix always_populate_raw_post_data problem Apr 25, 2016 .travis.yml Merge branch 5.1 into 5.2 Jun 28, 2016 CONTRIBUTING.md new command for executing migrations Jul 8, 2016 README.md Merge branch 5.1 into 5.2 Jun 28, 2016 UPGRADE.md SW-15634 - Add ""console.command"" which registers commands in a more S… Jul 11, 2016 autoload.php SW-13675 - Deprecate Enlight_Application Mar 7, 2016 composer.json Merge branch 5.1 into 5.2 Jul 7, 2016 composer.lock Update elasticsearch/elasticsearch to version 2.2.0 Jun 8, 2016 config.php.dist #NTR - Add sane gitattributes Dec 27, 2012 eula.txt SW-9108 - Rename remaining Shopware 4 occurences Nov 28, 2014 eula_en.txt SW-9108 - Rename remaining Shopware 4 occurences Nov 28, 2014 license.txt #NTR - Add sane gitattributes Dec 27, 2012 shopware.php SW-14659 - Update required PHP Version to 5.6.4 Apr 25, 2016 README.md Shopware 5 License: Dual license AGPL v3 / Proprietary Github Repository: https://github.com/shopware/shopware Issue Tracker: https://issues.shopware.com Overview Shopware 5 is the next generation of open source e-commerce software made in Germany. Based on bleeding edge technologies like Symfony 2, Doctrine 2 & Zend Framework Shopware comes as the perfect platform for your next e-commerce project. Furthermore Shopware 5 provides an event-driven plugin system and an advanced hook system, giving you the ability to customize every part of the platform. Visit the forum at http://forum.shopware.com/ Shopware Server Requirements PHP 5.6.4 or above PHP extensions curl, mbstring and gd An Apache web server Apache's mod_rewrite module MySQL 5.5.0 or above Installation via Git Follow the instruction below if you want to install Shopware 5 using Git. 1.) Clone the git repository to the desired location using: git clone https://github.com/shopware/shopware.git  In case you wish to contribute to Shopware, fork the 5.2 branch rather than cloning it, and create a pull request via Github. For further information please read the section ""Get involved"" of this document. 2.) Set the correct directory permissions: chmod 755 config.php chmod -R 755 var chmod -R 755 web chmod -R 755 files chmod -R 755 media chmod -R 755 engine/Shopware/Plugins/Community  Depending on your server configuration, it might be necessary to set whole write permissions (777) to the files and folders above. You can also start testing with lower permissions due to security reasons (644 for example) as long as your php process can write to those files. 3.) An Ant Buildfile is used to set up the configuration and database connection: cd build/ ant configure ant build-unit  4.) Download the test images and extract them: Go to the checkout directory and download the test images: wget -O test_images.zip http://releases.s3.shopware.com/test_images.zip  Unzip the files to the checkout directory: unzip test_images.zip  You can now access your shop Backend The backend is located at /backend example http://your.shop.com/backend. Backend Login: demo/demo The test_images.zip file includes thumbnails for the new responsive theme and the old deprecated template. If you want to have full featured demo data, you should download the respective demo data plugin in the First Run Wizard or in the Plugin Manager. Get involved Shopware is available under dual license (AGPL v3 and proprietary license). If you want to contribute code (features or bugfixes), you have to create a pull request and include valid license information. You can either contribute your code under New BSD or MIT license. If you want to contribute to the backend part of Shopware, and your changes affect or are based on ExtJS code, they must be licensed under GPL V3, as per license requirements from Sencha Inc. If you are not sure which license to use, or want more details about available licensing or the contribution agreements we offer, you can contact us at contact@shopware.com. For more information about contributing to Shopware, please see CONTRIBUTING.md. How to report bugs / request features? We've always had a sympathetic ear for our community, so please feel free to submit tickets with bug reports or feature requests. In order to have a single issue tracking tool, we've decided to close the GitHub issue panel in favor of our Jira issue tracker, which is directly connected to our development division. Shopware Jira ticket submit form Copying / License Shopware is distributed under a dual license (AGPL v3 and proprietary license). You can find the whole license text in the license.txt file. Changelog The changelog and all available commits are located under https://github.com/shopware/shopware/commits/5.2. Further reading Shopware AG - Homepage of shopware AG Shopware Developer Documentation Shopware Community - Shopware Community Shopware Forum - Community forum Shopware Marketplace - Shopware Store Shopware on Crowdin - Crowdin (Translations) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/shopware/shopware"	"Highly customizable e-commerce software"	"true"
"E-commerce"	"Swap"	"https://github.com/florianv/swap"	"An exchange rates library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"457"	"24"	"32"	"GitHub - florianv/swap: Exchange rates library for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 457 Fork 32 florianv/swap Code Issues 6 Pull requests 3 Pulse Graphs Exchange rates library for PHP http://florianv.github.io/swap 90 commits 3 branches 15 releases Fetching contributors PHP 66.0% HTML 34.0% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x gh-pages master Nothing to show v2.6.0 v2.5.0 v2.4.1 v2.4.0 v2.3.1 v2.3.0 v2.2.0 v2.1.0 v2.0.1 v2.0.0 v1.3.0 v1.2.0 v1.1.0 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 6d17142 Jun 20, 2016 florianv committed on GitHub Merge pull request #36 from phofmann-trust/master … Added currencylayer provider Permalink Failed to load latest commit information. src Added currencylayer provider Jun 14, 2016 tests Added currencylayer provider Jun 14, 2016 .editorconfig Added .editorconfig file Jul 10, 2015 .gitignore Use Github pages Jun 10, 2015 .styleci.yml Added StyleCI Jun 10, 2016 .travis.yml Removed nightly version from the build matrix Jun 10, 2016 LICENSE Update copyright year Mar 3, 2016 README.md Added currencylayer provider Jun 14, 2016 composer.json Refactor Provider tests Mar 3, 2016 phpunit.xml.dist Added adapter layer Jun 6, 2014 README.md Swap Exchange rates library for PHP Installation $ composer require florianv/swap Usage First, you need to create an HTTP adapter provided by the egeloen/ivory-http-adapter library. $httpAdapter = new \Ivory\HttpAdapter\FileGetContentsHttpAdapter(); Then, you can create a provider and add it to Swap: // Create the Yahoo Finance provider $yahooProvider = new \Swap\Provider\YahooFinanceProvider($httpAdapter);  // Create Swap with the provider $swap = new \Swap\Swap($yahooProvider); Quoting To retrieve the latest exchange rate for a currency pair, you need to use the quote() method. $rate = $swap->quote('EUR/USD');  // 1.187220 echo $rate;  // 1.187220 echo $rate->getValue();  // 15-01-11 21:30:00 echo $rate->getDate()->format('Y-m-d H:i:s'); Currencies are expressed as their ISO 4217 code. Chaining providers It is possible to chain providers in order to use fallbacks in case the main providers don't support the currency or are unavailable. Simply create a ChainProvider wrapping the providers you want to chain. $chainProvider = new \Swap\Provider\ChainProvider([     new \Swap\Provider\YahooFinanceProvider($httpAdapter),     new \Swap\Provider\GoogleFinanceProvider($httpAdapter) ]); The rates will be first fetched using the Yahoo Finance provider and will fallback to Google Finance. Caching For performance reasons you might want to cache the rates during a given time. Doctrine Cache Installation $ composer require doctrine/cache Usage // Create the cache adapter $cache = new \Swap\Cache\DoctrineCache(new \Doctrine\Common\Cache\ApcCache(), 3600);  // Pass the cache to Swap $swap = new \Swap\Swap($provider, $cache); All rates will now be cached in APC during 3600 seconds. Illuminate Cache Installation $ composer require illuminate/cache Usage // Create the cache adapter $store = new \Illuminate\Cache\ApcStore(new \Illuminate\Cache\ApcWrapper()); $cache = new \Swap\Cache\IlluminateCache($store, 60);  // Pass the cache to Swap $swap = new \Swap\Swap($provider, $cache); All rates will now be cached in APC during 60 minutes. Currency Codes Swap provides an enumeration of currency codes so you can use autocompletion to avoid typos. use \Swap\Util\CurrencyCodes;  // Retrieving the EUR/USD rate $rate = $swap->quote(new \Swap\Model\CurrencyPair(     CurrencyCodes::ISO_EUR,     CurrencyCodes::ISO_USD )); Providers European Central Bank Supports only EUR as base currency. Google Finance Supports multiple currencies as base and quote currencies. Open Exchange Rates Supports only USD as base currency for the free version and multiple ones for the enterprise version. Xignite You must have access to the XigniteGlobalCurrencies API. Supports multiple currencies as base and quote currencies. Yahoo Finance Supports multiple currencies as base and quote currencies. WebserviceX Supports multiple currencies as base and quote currencies. National Bank of Romania Supports only RON as base currency. Central Bank of the Republic of Turkey Supports only TRY as quote currency. Central Bank of the Czech Republic Supports only CZK as quote currency. currencylayer Supports only USD as base currency for the free version and multiple ones for the enterprise version. HTTP-only for free version. Array Retrieves rates from a PHP array Integrations A Symfony2 bundle FlorianvSwapBundle. A Laravel 5 package florianv/laravel-swap. License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/florianv/swap"	"An exchange rates library."	"true"
"E-commerce"	"Sylius"	"http://sylius.org/"	"An open source e-commerce solution."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Sylius.org - Modern ecommerce for Symfony2 ‹ › × Sylius is still in development. About Why Sylius? Services Showcase Get Started Docs Demo Blog Community Statistics Contributors Modern e-commerce for PHP Sylius uses the full-stack Symfony2 framework. Discover Sylius Tweet Commercial support and development services. Visit lakion.com Free & Open Source Sylius is 100% free, using the business-friendly MIT license. Try the DEMO Clean Code Sylius is developed using BDD methodology. Clean architecture and great flexibility. Get Started Growing community Sylius is about people. Community Achievements First Sylius Meetup in Croatia 30 / May / 2016 | Ivo Lukač, Antonio Perić Meet Sylius Community on June 18th at our first Symfony/Sylius Croatia Meetup in Hub385, Zagreb. Continue reading → Sylius v0.17.0 with last big features 04 / Mar / 2016 | Paweł Jędrzejewski We are happy to release v0.17.0 of Sylius, which includes Theming, SEO metadata component, product reviews and associations. Continue reading → What are people saying about Sylius? Watching very closelly a fully TDDed (with phpspec) ecommerce solution built with Symfony by @pjedrzejewski. Promising! Marcello Duarte Lead Developer of phpspec Myke Hines Developer 39 days, full B2B ecommerce store, 1 developer. Thanks Sylius! Discovering Sylius, seems to be a great and powerful Symfony2 bundle for e-commerce. WOW! Cesar Saiz CTO at dext.es Who is using Sylius? Latest tweets RT @PatrikKarisch: Hmm, a merge of @sulu and @Sylius to one highly integrated CMS and shop system? Using backend of #sulucms and functiona… 16 / Jul / 2016 Thanks to @CoderMaggie, #Sylius now has much better Customization Guide - Have a look https://t.co/u9BAybUIQX. #symfony #ecommerce 16 / Jul / 2016 Contact Your feedback is invaluable. I always appreciate and consider every suggestion. If you have ever developed an application using Sylius or the bundles, let me know. I will be more than happy to answer all your questions. Get in touch at pawel@sylius.org. © Pawel Jedrzejewski. All rights reserved. Why Sylius? Services Showcase Get Started Docs Demo Blog Community"	"null"	"null"	"An open source e-commerce solution."	"true"
"PDF"	"Dompdf"	"https://github.com/dompdf/dompdf"	"A HTML to PDF converter."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2829"	"257"	"674"	"GitHub - dompdf/dompdf: HTML to PDF converter (PHP5) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 257 Star 2,829 Fork 674 dompdf/dompdf Code Issues 424 Pull requests 24 Wiki Pulse Graphs HTML to PDF converter (PHP5) http://dompdf.github.com/ 706 commits 5 branches 9 releases 51 contributors PHP 99.3% Other 0.7% PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.6.2-hotfix develop encoding master tagged-pdf Nothing to show v0.7.0 v0.7.0-beta3 v0.7.0-beta2 v0.7.0-beta v0.6.2 v0.6.1 v0.6.0 v0.6.0-b3 v0.5.2 Nothing to show New pull request Latest commit e4b4928 Jun 23, 2016 bsweeney committed on GitHub Merge pull request #1217 from nappa85/patch-3 … Fix typos in variable names Permalink Failed to load latest commit information. lib Address file system path compatibility issues May 10, 2016 src Fix more typos Jun 20, 2016 tests Fix the broken unit test fix May 12, 2016 .gitattributes Add version information Oct 9, 2015 .gitignore Added unit tests Mar 14, 2014 .travis.yml Don't allow failures on PHP7 Feb 9, 2016 CONTRIBUTING.md Changed namespace to Dompdf Mar 14, 2014 LICENSE.LGPL Update license, hacking, makefile May 8, 2009 README.md Update README.md May 3, 2016 VERSION Add version information Oct 10, 2015 autoload.inc.php frackin 'smart quotes' :( Aug 11, 2015 composer.json Update composer configuration license info Jan 16, 2016 phpunit.xml.dist Renamed test directory to tests Mar 31, 2014 README.md Dompdf Dompdf is an HTML to PDF converter At its heart, dompdf is (mostly) a CSS 2.1 compliant HTML layout and rendering engine written in PHP. It is a style-driven renderer: it will download and read external stylesheets, inline style tags, and the style attributes of individual HTML elements. It also supports most presentational HTML attributes. This document applies to the latest stable code which may not reflect the current release. For released code please navigate to the approrpiate tag. Check out the demo and ask any question on StackOverflow or on the Google Groups. Follow us on or . Features Handles most CSS 2.1 and a few CSS3 properties, including @import, @media & @page rules Supports most presentational HTML 4.0 attributes Supports external stylesheets, either local or through http/ftp (via fopen-wrappers) Supports complex tables, including row & column spans, separate & collapsed border models, individual cell styling Image support (gif, png (8, 24 and 32 bit with alpha channel), bmp & jpeg) No dependencies on external PDF libraries, thanks to the R&OS PDF class Inline PHP support Basic SVG support Requirements PHP version 5.3.0 or higher DOM extension GD extension MBString extension php-font-lib php-svg-lib Recommendations OPcache (OPcache, XCache, APC, etc.): improves performance IMagick or GMagick extension: improves image processing performance Visit the wiki for more information: https://github.com/dompdf/dompdf/wiki/Requirements About Fonts & Character Encoding PDF documents internally support the following fonts: Helvetica, Times-Roman, Courier, Zapf-Dingbats, & Symbol. These fonts only support Windows ANSI encoding. In order for a PDF to display characters that are not available in Windows ANSI you must supply an external font. Dompdf will embed any referenced font in the PDF so long as it has been pre-loaded or is accessible to dompdf and reference in CSS @font-face rules. See the font overview for more information on how to use fonts. The DejaVu TrueType fonts have been pre-installed to give dompdf decent Unicode character coverage by default. To use the DejaVu fonts reference the font in your stylesheet, e.g. body { font-family: DejaVu Sans; } (for DejaVu Sans). The following DejaVu 2.34 fonts are available: DejaVu Sans, DejaVu Serif, and DejaVu Sans Mono. Easy Installation Install with composer To install with Composer, simply require the latest version of this package. composer require dompdf/dompdf Make sure that the autoload file from Composer is loaded. // somewhere early in your project's loading, require the Composer autoloader // see: http://getcomposer.org/doc/00-intro.md require 'vendor/autoload.php';  Download and install Download an archive of dompdf and extract it into the directory where dompdf will reside You can download stable copies of dompdf from https://github.com/dompdf/dompdf/releases Or download a nightly (the latest, unreleased code) from http://eclecticgeek.com/dompdf Require dompdf, libraries, and helper functions in your PHP: // include autoloader require_once 'dompdf/autoload.inc.php'; Install with git From the command line, switch to the directory where dompdf will reside and run the following commands: git clone https://github.com/dompdf/dompdf.git cd dompdf  git clone https://github.com/PhenX/php-font-lib.git lib/php-font-lib cd lib/php-font-lib git checkout 0.4 cd ..  git clone https://github.com/PhenX/php-svg-lib.git php-svg-lib cd php-svg-lib git checkout v0.1 Require dompdf, libraries, and helper functions in your PHP: // include autoloader require_once 'dompdf/autoload.inc.php'; Quick Start Just pass your HTML in to dompdf and stream the output: // reference the Dompdf namespace use Dompdf\Dompdf;  // instantiate and use the dompdf class $dompdf = new Dompdf(); $dompdf->loadHtml('hello world');  // (Optional) Setup the paper size and orientation $dompdf->setPaper('A4', 'landscape');  // Render the HTML as PDF $dompdf->render();  // Output the generated PDF to Browser $dompdf->stream(); Setting Options Set options during dompdf instantiation: use Dompdf\Dompdf; use Dompdf\Options;  $options = new Options(); $options->set('defaultFont', 'Courier'); $dompdf = new Dompdf($options); or at run time use Dompdf\Dompdf;  $dompdf = new Dompdf(); $dompdf->set_option('defaultFont', 'Courier'); See Dompdf\Options for a list of available options. Limitations (Known Issues) Dompdf is not particularly tolerant to poorly-formed HTML input. To avoid any unexpected rendering issues you should either enable the built-in HTML5 parser at runtime ($dompdf->set_option('isHtml5ParserEnabled', true);) or run your HTML through a HTML validator/cleaner (such as Tidy or the W3C Markup Validation Service). Large files or large tables can take a while to render. CSS float is in development and may not produce the desired result If you find this project useful, please consider making a donation. Any funds donated will be used to help further development on this project.) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dompdf/dompdf"	"A HTML to PDF converter."	"true"
"PDF"	"PHPPdf"	"https://github.com/psliwa/PHPPdf"	"A library for generating PDFs and images from XML."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"265"	"25"	"45"	"GitHub - psliwa/PHPPdf: Pdf and graphic files generator library written in php Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 265 Fork 45 psliwa/PHPPdf Code Issues 45 Pull requests 4 Pulse Graphs Pdf and graphic files generator library written in php http://ohey.pl 692 commits 6 branches 30 releases 14 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0.x 1.1.x 1.2.x gh-pages master zf1-in-backend Nothing to show 1.2.9 1.2.8 1.2.7 1.2.6 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.1.6 1.1.5 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.0.3 1.0.2 1.0.1 1.0.0 1.0.0-RC3 1.0.0-RC2 1.0.0-RC1 1.0.0-BETA6 1.0.0-BETA5 1.0.0-BETA4 1.0.0-BETA3 1.0.0-BETA2 1.0.0-BETA Nothing to show New pull request Latest commit f204d9b Mar 6, 2016 psliwa Merge branch '1.2.x' … Conflicts: 	CHANGELOG.markdown 	lib/PHPPdf/Version.php Permalink Failed to load latest commit information. examples 1.2.9 release Mar 6, 2016 lib Merge branch '1.2.x' Feb 18, 2016 tests Merge branch '1.2.x' Dec 6, 2015 .gitattributes [#52] fix applying document-template and other preFormat elements whe… Jun 1, 2014 .gitignore include php-markdown library in lib/vendor Aug 16, 2014 .travis.yml fix travis and composer.json Dec 6, 2015 CHANGELOG.markdown Merge branch '1.2.x' Mar 6, 2016 LICENSE license Feb 24, 2011 README.markdown Merge branch '1.2.x' Jan 30, 2016 composer.json Update ZF2 version constraints and remove unnecesary requirement Mar 6, 2016 vendors.php fix compatibility with ZF2rc2 version and ZendPdf package Aug 5, 2012 README.markdown Information Examples Sample documents are in the ""examples"" directory. ""index.php"" file is the web interface to browse examples, ""cli.php"" is a console interface. Via the web interface, the documents are available in pdf and jpeg format (the jpeg format requires Imagick). Documentation Table of contents Introduction Installation Symfony2 bundle FAQ Document parsing and creating pdf file Basic document structure Inheritance Stylesheet structure Palette of colors Standard tags Attributes Complex attributes Units Barcodes Charts Hyperlinks Bookmarks Sticky notes Repetitive headers and footers Watermarks Page numbering Using the pdf document as a template Separate page on columns Breaking pages and columns Metadata Configuration Markdown support Image generation engine Known limitations TODO - plans Technical requirements Introduction PHPPdf is library that transforms an XML document to a PDF document or graphics files. The XML source document is similar to HTML, but there are lots of differences in names and properties of attributes, properties of tags, and there are a lot of not standard tags, not all tags from html are supported, stylesheet is described in an xml document, not in css. Assumption of this library is not HTML -> PDF / JPEG / PNG, but XML -> PDF / JPEG / PNG transformation. Some tags and attributes are the same as in HTML in order decrease the learning curve of this library. Installation PHPPdf is available at packagist.org, so you can use composer to download this library and all dependencies. (add to require section in your composer.json file)     ""psliwa/php-pdf"": ""*"" You should choose last stable version (or wildcard of stable version), wildcard char (""*"") is only an example. If you want to use as features as barcodes or image generation, you should add extra dependencies:     ""zendframework/zend-barcode"": "">=2.0.0,<2.4"",     ""zendframework/zend-validator"": "">=2.0.0,<2.4"",     ""imagine/Imagine"": "">=0.2.0,<0.6.0""  Symfony2 bundle There is a Symfony2 bundle which integrates this library with the Symfony2 framework. FAQ Diacritical marks are not displayed, what should I do? You should set a font that supports the encoding that you are using, and set this encoding as ""encoding"" attribute for ""page"" and/or ""dynamic-page"" tags. PHPPdf provides some free fonts that support utf-8 encoding, for example, DejaVuSans. The ""Font"" example shows how to change the font type by using a stylesheet. You can also add custom fonts, in order that you should prepare xml config file and configure Facade object as shown below:     <!-- xml config file code -->     <fonts>         <font name=""DejaVuSans"">             <normal src=""%resources%/fonts/DejaVuSans/normal.ttf"" /><!-- ""%resources%"" will be replaced by path to PHPPdf/Resources directory -->             <bold src=""%resources%/fonts/DejaVuSans/bold.ttf"" />             <italic src=""%resources%/fonts/DejaVuSans/oblique.ttf"" />             <bold-italic src=""%resources%/fonts/DejaVuSans/bold+oblique.ttf"" />             <light src=""%resources%/fonts/DejaVuSans/light.ttf"" />             <light-italic src=""%resources%/fonts/DejaVuSans/light+oblique.ttf"" />         </font>     </fonts> //php code $loader = new PHPPdf\Core\Configuration\LoaderImpl(); $loader->setFontFile(/* path to fonts configuration file */); $builder = PHPPdf\Core\FacadeBuilder::create($loader); $facade = $builder->build(); <!-- xml document code --> <pdf>     <dynamic-page encoding=""UTF-8"" font-type=""DejaVuSans"">     </dynamic-page> </pdf> You can find more datails in the Configuration section. Generating of a simple pdf file with png images takes a lot of time and memory, what should I do? PHPPdf uses the Zend_Pdf library that poorly supports png files without compression. You should compress the png files. How can I change the page size/orientation? To set the page dimensions you use the ""page-size"" attribute of the page or dynamic-page tags. The value syntax of this attribute is ""width:height"". There are however standard predefined values: A format: from 4A0 to A10 B format: from B0 to B10 C format: from C0 to C10 US sizes: legal and letter All formats are supported in portrait and lanscape. Example: <page page-size=""100:50"">text</page> <page page-size=""a4"">text</page> <page page-size=""letter-landscape"">text</page> Document parsing and creating a pdf file The simplest way of using the library is: //register the PHPPdf and vendor (Zend_Pdf and other dependencies) autoloaders require_once 'PHPPdf/Autoloader.php'; PHPPdf\Autoloader::register(); PHPPdf\Autoloader::register('/path/to/library/lib/vendor/Zend/library');  //if you want to generate graphic files PHPPdf\Autoloader::register('sciezka/do/biblioteki/lib/vendor/Imagine/lib');  $facade = new PHPPdf\Core\Facade(new PHPPdf\Core\Configuration\Loader());  //$documentXml and $stylesheetXml are strings contains XML documents, $stylesheetXml is optional $content = $facade->render($documentXml, $stylesheetXml);  header('Content-Type: application/pdf'); echo $content; Basic document structure The library bases pages on an XML format similar to HTML, but this format isn't HTML - some tags are diffrent, interpretation of some attributes is not the as same as in the HTML and CSS standards, adding attributes is also different. A simple document has following structure: <pdf>     <dynamic-page>         <h1>Header</h1>         <p>paragraph</p>         <div color=""red"">Layer</div>         <table>             <tr>                 <td>Column</td>                 <td>Column</td>             </tr>         </table>     </dynamic-page> </pdf> Adding a DOCTYPE declaration is strongly recommended in order to replace html entities on values:     <!DOCTYPE pdf SYSTEM ""%resources%/dtd/doctype.dtd""> The root name of a document must be ""pdf"". The ""dynamic-page"" tag is an auto breakable page. The ""page"" tag is an alternative, and represents only a single, no breakable page. The way of attribute setting is different than in HTML. In order to set a background and border you need to use complex attributes, where first part of attribute name is a complex attribute type, and the second part is the property of this attribute. Complex attribute parts are separated by a dot ("".""). An another way of setting complex attributes is by using the ""complex-attribute"" tag. Example: <pdf>     <dynamic-page>         <div color=""red"" border.color=""black"" background.color=""pink"">             This text is red on pink backgroun into black border         </div>     </dynamic-page> </pdf> Alternative syntax (""stylesheet"" tag): <pdf>     <dynamic-page>         <div>             <stylesheet>                 <attribute color=""red"" />                 <complex-attribute name=""border"" color=""black"" />                 <complex-attribute name=""background"" color=""pink"" />             </stylesheet>             This text is red on pink backgroun into black border         </div>     </dynamic-page> </pdf> Attributes can by set as XML attributes, directly after a tag name or by using the mentioned ""stylesheet"" tag. The HTML ""style"" attribute does not exist the PHPPdf XML dialect. The library is very strict in respecting the corectness of tags and attributes. If an unexisted tag or attribute is detected, the document parser will stop and throw an exception. Inheritance The ""id"" attribute has an different usage than in HTML. The id attribute is used to identify tags when using inheritance. The ""name"" attribute can also be used as an alias to ""id"". An id must by unique throughout the document, otherwise a parsing error is thrown. Example: <pdf>     <dynamic-page>         <div id=""layer-1"" color=""red"" font-type=""judson"" font-size=""16px"">             <stylesheet>                 <complex-attribute name=""border"" color=""green"" />             </stylesheet>             Layer 1         </div>         <div extends=""layer-1"">             Layer 2 inherits style (type, simple and complex attributes) from layer 1)         </div>     </dynamic-page> </pdf> The Second layer inherits all attributes (simple and complex), and also those from external stylesheets. Priorites in attributes setting: Stylesheet tag directly in an element tag Attributes directly after a tag name (XML attributes) Attributes from external stylesheets Inherited attributes from a parent tag Example: <pdf>     <page>         <div id=""1"" color=""#cccccc"" height=""100px"" text-align=""right"">         </div>         <div extends=""1"" color=""#aaaaaa"" height=""150px"">             <stylesheet>                 <attribute name=""height"" value=""200px"" />             </stylesheet>         </div>     </page> </pdf> The second ""div"" will now have the following attributes: text-align: right color: #aaaaaa height: 200px Stylesheet structure Stylesheets are defined in external files, stylesheet short and long declarations of attributes are supported. Syntax of the stylesheet: Short style: <stylesheet>     <!-- style attributes are embeded as xml attributes, class attribute has the same meaning as in HTML/CSS -->     <div class=""class"" font-size=""12px"" color=""gray"" background.color=""yellow"">         <!-- nested element, equivalent CSS selector syntax: ""div.class p"" -->         <p margin=""10px 15px"">         </p>     </div>      <!-- equivalent CSS selector syntax: "".another-class"", ""any"" tag is wildcard (mean any tag) -->     <any class=""another-class"" text-align=""right"">     </any>      <h2 class=""header"">         <span font-size=""9px"">         </span>          <div font-style=""bold"">         </div>     </h2> </stylesheet> Long style: <stylesheet>     <div class=""class"">         <!-- simple and complex attributes are nested in ""div.class"" selector path -->         <attribute name=""font-size"" value=""12px"" />         <attribute name=""color"" value=""grey"" />         <!-- equivalent of background.color attribute -->         <complex-attribute name=""background"" color=""yellow"" />          <!-- another nested element, equivalent CSS selector syntax: ""div.class p"" -->         <p>             <attribute name=""margin"" value=""10px 15px"" />         </p>     </div>      <!-- equivalent CSS selector syntax: "".another-class"", ""any"" tag is wildcard (mean any tag) -->     <any class=""another-class"">         <attribute name=""text-align"" value=""right"" />     </any>      <h2 class=""header"">         <span>             <attribute name=""font-size"" value=""9px"" />         </span>         <div>             <attribute name=""font-style"" value=""bold"" />         </div>     </h2> </stylesheet> Palette of colors PHPPdf supports color palettes, - mapping of logical names to real colors. Color palettes gives you the opportunity to create or overwrite default named colors. By default, PHPPdf supports named colors from the W3C standard (for example ""black"" = ""#000000""). You can use a palette for the DRY principle, because information about used colors will be kept in one place. And you can also generate one document with different palettes. Example: <!-- colors.xml file --> <colors>     <color name=""header-color"" hex=""#333333"" />     <color name=""line-color"" hex=""#eeeeee"" /> </colors>  <!-- stylesheet.xml file --> <h2 color=""header-color"" /> <hr background-color=""line-color"" /> <table>     <td border-color=""line-color"" /> </table>  <!-- document.xml file --> <pdf>     <page>         <h2>Header</h2>         <hr />         <table>             <tr>                 <td>Data</td>                 <td>Data</td>             </tr>         </table>     </page> </pdf>     //php code     use PHPPdf\DataSource\DataSource;      $facade = ...;      $content = $facade->render(         DataSource::fromFile(__DIR__.'/document.xml'),         DataSource::fromFile(__DIR__.'/stylesheet.xml'),         DataSource::fromFile(__DIR__.'/colors.xml')     ); Standard tags The library supports primary HTML tags: div, p, table, tr, td, b, strong, span, a, h1, h2, h3, h4, h5, img, br, ul, li In addition there are also not standard tags: dynamic-page - auto breakable page page - single page with fixed size elastic-page - single page that accommodates its height to its children as same as another tags (for example ""div""). Header, footer, watermark, template-document attribute do not work with this tag. Useful especially in graphic files generation (image engine). page-break, column-break, break - breaks page or column, this tag must be direct child of ""dynamic-page"" or ""column-layout""! column-layout - separate workspace on columns, additional attributes: number-of-columns, margin-between-columns, equals-columns barcode - more information in barcode chapter circle - element that border and backgroud are in circle shape. Additional attributes: radius (it overwrites width and height attributes) pie-chart - element that can be used to draw simple pie chart (more information in charts chapter. There are tags that are only bags for attributes, a set of tags etc: stylesheet - stylesheet for parent attribute - simple attribute declaration, direct child of ""stylesheet"" tag. Required attributes of this element: name - attribute name, value - attribute value complex-attribute - complex attribute declaration, direct child of ""stylesheet"" tag. Required attributes of this element: name - complex attribute name placeholders - defines placeholders for parent tag. Children tags of placeholder are specyfic for every parent tag. It should be first tag in parent metadata - defines metadata of pdf document, direct child of document root behaviours - defines behaviours for a parent tag. Supported behaviours: href, ref, bookmark, note (action as same as for attributes with as same as name) Attributes width and height: rigidly sets height and width, supported units are described in separate section. Relative values in percent are supported. max-width, max-height: sets max sizes of elements margin (margin-top, margin-bottom, margin-left, margin-right): margin similar to margin from HTML/CSS. Margins of simblings are pooled. For side margins possible is ""auto"" value, it works similar as in HTML/CSS. padding (padding-top, padding-bottom, padding-left, padding-right): works similiar as in HTML/CSS font-type - font name must occurs in fonts.xml config file, otherwise exception will be thrown font-size - file size in points, there are no any unit font-style - allowed values: normal, bold, italic, bold-italic, light, light-italic color - text color. HTML/CSS style values are supported breakable - if true, element is able to be broken in several pages. Default value for most tags is true.. float - works similar but not the same as in HTML/CSS. Allowed values: left|none|right, default none line-height - works similar as in HTML/CSS. Default value: 1.2*font-size text-align - works as same as in HTML/CSS. Allowed values: left|center|right|justify, default left. text-decoration - allowed values: none, underline, overline, line-through break - breaks page or column in the end of the owner of this attribute. Owner of this attribute must by directly child of dynamic-page or column-layout tag! colspan, rowspan - works similar as in HTML (TODO: rowspan isn't implemented yet) href - external url where element should linking ref - id of element where owner should linking bookmark - create bookmark with given title associated with the tag note - create sticky note associated with tag dump - allowed values: true or false. Create sticky note with debug informations (attributes, position etc.) rotate - angle of element rotation. This attribute isn't fully implemented, works corectly for watermarks (see ""Watermarks"" section). Possible values: XXdeg (in degrees), XX (in radians), diagonally, -diagonally. alpha - possible values: from 0 to 1. Transparency for element and his children. line-break - line break (true or false), by default set on true only for ""br"" tag style - as same as in html, this attribute can be used to set another attributes, for example: style=""width: 100px; height: 200px; margin: 20px 0;"". Every attribute must be finished by "";"" char, even the last. ignore-error (only for img tag) - ignore file loading error or throw exception? False by default, that means exception will be thrown. keep-ratio (only for img tag) - keeps ratio by cutting fragment of image even if ratio of setted dimension is not the same as ratio of original source image. False by default. position - the same as in html. Allowed values: static (default), relative, absolute left and top - the same as in html, works with position relative or absolute. Right and bottom is not supported. Complex attributes Complex attributes can be set by notation ""attributeName.attributeProperty"" or ""attributeName-attributeProperty"" For example: border.color=""black"" or border-color=""black"" border: color: border color style: posible values: solid (solid line), dotted (predefined dotted line) or any definition in the form of integers separated by space type: which edges will be shown - default ""top+bottom+left+right"" (all edges). ""none"" value is possible (it disable border) size: border size radius: corner rounding in units of length (attention: if this parameter is set, type paramete will be ignored, rounded border always will be full - this will be fixed in future) position: border translation relative to original position. Positive values extends border, negative values decrases border. Owing to manipulation of this parameter, you can obtain complex pattern as border if you add another borders with different styles and positions. background: color: background color image: background image repeat: way of image repeating (none|x|y|all) radius: rounding background corners in units of length (for now only works with color background) use-real-dimension: attribute only used by page (or dynamic-page). True for filling also margins, false in otherwise. image-width: custom width of background image, percentage values are allowed image-height: custom height of background image, percentage values are allowed position-x: horizontal position for image of background, allowed values: left, center, right or numeric value (default: left) position-y: vertical position for image of background, allowed values: top, center, bottom or numeric value (default: top) It is possible to add several complex attributes in the same type (for instance 3 different borders). You can achieve that by using the ""stylesheet"" tag instead of the short notation. <pdf>     <dynamic-page>         <div>             <stylesheet>                 <!-- Top and bootom edges are red, side edges are yellow-gray -->                  <complex-attribute name=""border"" color=""red"" type=""top+bottom"" />                 <complex-attribute id=""borderLeftAndRight"" name=""border"" color=""yellow"" type=""left+right"" size=""4px"" />                 <complex-attribute id=""outerBorderLeftAndRight"" name=""border"" color=""gray"" type=""left+right"" size=""2px"" position=""1px"" />             </stylesheet>         </div>     </dynamic-page> </pdf> In this example, the second border has a ""borderLeftAndRight"" indentifie, if this border had no id, the attributes from second border would be merged with the attributes from first border. Remeber the default identifier ""id"" is as same as the ""name"" attribute. The ""id"" attributes for complex attributes has nothing to do with the ""id"" attribute of tags (used in inheritance). It is possible to create complex borders the same as in the previous example (outerBorderLeftAndRight). Units Supported units for numerical attributes: in (inches) cm (centimeters) mm (milimeters) pt (points) pc (pica)* px (pixels) * % (percent - only for width and height). Currently unsupported units are: em and ex When the unit is missing (for example: font-size=""10""), then the default unit is points (pt). 1pt = 1/72 inch Barcodes Barcodes are supported by the <barcode> tag. PHPPdf uses the Zend\Barcode library in order to generate barcodes. Example: <pdf>     <dynamic-page>         <barcode type=""code128"" code=""PHPPdf"" />     </dynamic-page> </pdf> <barcode> tag supports the most of standard attributes and has some other attributes: type - typ of barcode, supported values: code128, code25, code25interleaved, code39, ean13, ean2, ean5, ean8, identcode, itf14, leitcode, planet, postnet, royalmail, upca, upce draw-code - equivalent of drawCode option from Zend\Barcode bar-height - equivalent of barHeight option from Zend\Barcode with-checksum - equivalent of withChecksum option from Zend\Barcode with-checksum-in-text - equivalent of withChecksumInText option from Zend\Barcode bar-thin-width - equivalent of barThinWidth option from Zend\Barcode bar-thick-width - equivalent of barThickWidth option from Zend\Barcode rotate - equivalent of orientation option from Zend\Barcode You can find the description of these options and there default values in the Zend\Barcode documentation. In order to render textual barcodes, you can't use to following embeded pdf fonts: courier, times-roman and helvetica. This will soon be fixed. Charts PHPPdf supports drawing simple charts. For now there is only support for s simple pie chart. Example: <pdf>     <dynamic-page>         <pie-chart radius=""200px"" chart-values=""10|20|30|40"" chart-colors=""black|red|green|blue""></pie-chart>     </dynamic-page> </pdf> The <pie-chart> tag has three extra attributes: radius - radius of the chart chart-values - values of the chart, together they must be summing to 100. Each value must be separated by ""|"". chart-colors - colors of each value. Each color must be separated by ""|"". Hyperlinks The library supports external and internal hyperlinks. External hyperlinks link to url's, while internal links link to other tags inside the pdf document. Example: <pdf>     <dynamic-page>         <a href=""http://google.com"">go to google.com</a>         <br />         <a ref=""some-id"">go to another tag</a>         <a href=""#some-id"">go to another tag</a> <!-- anchor style ref -->         <page-break />         <p id=""some-id"">Yep, this is another tag! ;)</p>     </dynamic-page> </pdf> Every element has a ""href"" and ""ref"" attribute, even div. You can't nest elements inside an ""a"" tag. If you want to use img elements as a link, you should use the href (external link) or ref (internal link) attribute directly in img tag. Bookmarks The preferred way of creating bookmarks is by using the ""behaviours"" tag. This doesn't restrict the structure of the document, the owner of a parent bookmark doesn't have to be a parent of a child's bookmark owner. Example: <pdf>     <dynamic-page>         <div>             <behaviours>                 <bookmark id=""1"">parent bookmark</bookmark>             </behaviours>             Some content         </div>         <div>             <behaviours>                 <bookmark parentId=""1"">children bookmark</bookmark>             </behaviours>             Some another content         </div>         <div>             <behaviours>                 <bookmark parentId=""1"">another children bookmark</bookmark>             </behaviours>             Some another content         </div>         <div>             <behaviours>                 <bookmark>another parent bookmark</bookmark>             </behaviours>            Some content         </div>     </dynamic-page> </pdf> A shortcut for the ""bookmark"" behaviour is the ""bookmark"" attribute, if you assign some value to this attribute, bookmarks that refers to this tag will be automatically created. The bookmark of a parent tag is also the parent of a children's bookmarks. Example: <pdf>     <dynamic-page>         <div bookmark=""parent bookmark"">             Some content             <div bookmark=""children bookmark"">                 Some another content             </div>             <div bookmark=""another children bookmark"">                 Some another content             </div>         </div>         <div bookmark=""another parent bookmark"">            Some content         </div>     </dynamic-page> </pdf> The above structures (both examples) will create this bookmarks structure: parent bookmark children bookmark another children bookmark another parent bookmark Sticky notes Sticky notes can be created by using the ""note"" attribute. Example: <pdf>     <dynamic-page>         <div note=""note text""></div>     </dynamic-page> </pdf> The XML parser normalizes values of attributes, wich results ignoring new line characters. If you want to add a note with new line characters, you should use this syntax: <pdf>     <dynamic-page>         <div>             <behaviours>                 <note>note text</note>             </behaviours>         </div>     </dynamic-page> </pdf> Repetitive headers and footers ""placeholders"" can be used in for adding a repetitive header or/and footer. Some elements have special ""placeholders"": page has header and footer, table also has header and footer (TODO: not implemented yet) etc. <pdf>     <dynamic-page>         <placeholders>             <header>                 <div height=""50px"" width=""100%"">                     Header                 </div>             </header>             <footer>                 <div height=""50px"" width=""100%"">                     Footer                 </div>             </footer>         </placeholders>     </dynamic-page> </pdf> Header and footer need to have a height attribute set. This height is pooled with page top and bottom margins. Workspace is the page size reduced by page margins and placeholders (footer and header) height. Watermarks Page can have a ""watermark"" placeholder. The watermark may be set on block's and container elements, for instance: div, p, h1 (no span, plain text or img). If you want to use an image as a watermark, you should wrap the img tag in a div. Example: <pdf>     <dynamic-page>         <placeholders>             <watermark>                 <!-- rotate can have absolute values (45deg - in degrees, 0.123 - in radians) or relative values (""diagonally"" and ""-diagonally"" - angle between diagonal and base side of the page) -->                 <div rotate=""diagonally"" alpha=""0.1"">                     <img src=""path/to/image.png"" />                 </div>             </watermark>         </placeholders>     </dynamic-page> </pdf> Page numbering There are two tags that can be used to show page information in a footer, header or watermark: page-info and page-number. This element only works with dynamic-page, not single pages. Page-info shows the current and total page number, page-number shows only the current page number. Attributes of this tags: format - format of output string that will be used as argument of sprintf function. Default values: ""%s."" for page-number, ""%s / %s"" for page-info. offset - value that will be added to current page number and total page number. Usefull if you want to count pages from a diffrent value than zero. Default: 0. Example: <pdf>     <dynamic-page>         <placeholders>             <header>                 <div height=""20px"">                     <page-info format=""page %s for %s"" />                      <!-- when we would like to number from 2 -->                     <page-info offset=""1"" format=""page %s for %s"" />                      <!-- when we would like to display only current page number -->                     <page-info format=""%1$s."" />                     <!-- or -->                     <page-number />                      <!-- when we would like to display only total pages number -->                     <page-info format=""%2$s pages"" />                 </div>             </header>         </placeholders>         Some text     </dynamic-page> </pdf> Using a pdf document as a template The ""page"" and ""dynamic-page"" tags can have a ""document-template"" attribute, that allows you to use an external pdf document as a template. For the ""page"" tag, the page's template will be the first page of an external document. For the ""dynamic-page"" tag, the template for each page will be the corresponding page of an external document. Example: <pdf>     <dynamic-page document-template=""path/to/file.pdf"">         <div>Some content</div>     </dynamic-page> </pdf> Separate page on columns Page can be separated on columns: <pdf>     <dynamic-page>         <column-layout>             <div width=""100%"" height=""2500px"" background.color=""green"">             </div>         </column-layout>     </dynamic-page> </pdf> The above XML describes several pages of the pdf document, with green rectangles separated on two columns. The ""column-layout"" tag has three additional parameters: number-of-columns, margin-between-columns and equals-columns. Default values for this attributes are 2, 10 and false respectlivy. If the equals-columns attribute is set, columns will have more or less equals height. Breaking pages and columns Page and column may by manually broken using one of these tags: page-break, column-break, break. All these tags are the same. These tags need to be direct children of the breaking element (dynamic-page or column-layout). If you want to avoid automatic page or column break on certain tags, you should set the ""breakable"" attribute of this tag to ""off. Example: <pdf>     <dynamic-page>         <div breakable=""false"">this div won't be automatically broken</div>     </dynamic-page> </pdf> Metadata Metadata can be added by attributes at the document's root. Supported metadata is: Creator, Keywords, Subject, Author, Title, ModDate, CreationDate and Trapped. ** These attribute names are case sensitive. ** Example: <pdf Author=""Piotr Sliwa"" Title=""Test document"">     <!-- some other elements --> </pdf> Configuration The library has four primary config files that allow you to adopt the library for specyfic needs and extending. complex-attributes.xml - declarations of complex attributes classes to logical names that identify attribute in whole library. nodes.xml - definitions of allowed tags in xml document with default attributes and formatting objects. fonts.xml - definitions of fonts and assigning them to logical names that identify font in whole library. colors.xml - palette of colors definitions In order to change default the config files, you must pass to Facade constructor configured Loader object:     $loader = new PHPPdf\Core\Configuration\LoaderImpl(         '/path/to/file/nodes.xml',         '/path/to/file/enhancements.xml',         '/path/to/file/fonts.xml',         '/path/to/file/colors.xml'     );      $facade = new PHPPdf\Core\Facade($loader); If you want to change only one config file, you should use LoaderImpl::set* method: $loader = new PHPPdf\Core\Configuration\LoaderImpl(); $loader->setFontFile( '/path/to/file/fonts.xml'); //there are setFontFile, setNodeFile, setComplexAttributeFile and setColorFile methods $facade = new PHPPdf\Core\Facade($loader); FacadeBuilder can be uset to build and configure Facade. FacadeBuilder is able to configure cache, rendering engine and document parser. $builder = PHPPdf\Core\FacadeBuilder::create(/* you can pass specyfic configuration loader object */)                                         ->setCache('File', array('cache_dir' => './cache'))                                         ->setUseCacheForStylesheetConstraint(true); //stylesheets will be also use cache  $facade = $builder->build(); Markdown support Library supports basic (official) markdown syntax. To convert markdown document to pdf, you should configure Facade object by MarkdownDocumentParser. You also might to use FacadeBuilder to do this for you. Example: $facade = PHPPdf\Core\FacadeBuilder::create()                                    ->setDocumentParserType(PHPPdf\Core\FacadeBuilder::PARSER_MARKDOWN)                                    ->setMarkdownStylesheetFilepath(/** optionaly path to stylesheet in xml format */)                                    ->build(); By default, in markdown pdf document, helvetica font is used. If you want to use utf-8 characters or customize a pdf document, you should provide your own stylesheet by using the FacadeBuilder::setMarkdownStylesheetFilepath method. The stylesheet structure has been described in the stylesheet chapter. By default the stylesheet is empty, if you want to set another font type, the stylesheet should look like this: <stylesheet>     <any font-type=""DejaVuSans"" /> </stylesheet> Internally the MarkdownDocumentParser converts a markdown document to html (via the PHP markdown library), then converts html to xml, and at last xml to a pdf document. Be aware of that, if you in a markdown document use raw html that will be incompatible with the xml syntax of PHPPdf (for example unexistend attributes or tags), the parser will throw an exception then. Not all tags used in the markdown implementation are propertly supported by PHPPdf, for example ""pre"" and ""code"" tags. For now ""pre"" tag is an alias for ""div"", and ""code"" tag is an alias for ""span"", be aware of that.  Image generation engine PHPPdf is able to generate image (jpg or png) files insted of a pdf document. To achieve that, you must configure the FacadeBuilder, example: $facade = PHPPdf\Core\FacadeBuilder::create()                                    ->setEngineType('image')                                    ->build();  //render method returns array of images' sources, one pdf page is generated to single image file  $images = $facade->render(...); By default the GD library is used to render an image. But you can also use Imagick, which offers a better quality, so it is recommended that if you have the opportiunity to install Imagick on your server. To switch the graphic library, you must configure the FacadeBuilder object using the setEngineOptions method: $builder = ...; $builder->setEngineOptions(array(     'engine' => 'imagick',     'format' => 'png',//png, jpeg or wbmp     'quality' => 60,//int from 0 to 100 )); Supported graphic libraries are: GD (default), imagick, gmagick. PHPPdf uses the Imagine library as an interface for graphics file generation. Known limitations Below is a list of known limitations of the current version of the library: there no way to inject an image into a text with floating - will be introduced in the next releases partial support for float attribute within table element (floats might work improperly within a table) vertical-align attribute works improperly if in element with this attribute set, are more than one element border doesn't change dimensions of the element (while in HTML they do) png files (expecially without compression) are inefficient. png files with high compression (compression level 6 or higher) or jpeg should be used instead not all tags are propertly supported, for example the ""pre"" tag is an alias to ""div"" and the ""code"" tag is an alias for ""span"" nesting of linear tags (text, span, code, page-info, page-number, a, b, i, em) is not properly supported. If one linear tag contains another, only text within this tags is merged, styles are taken from the most outher linear tag. TODO - plans automatic generating of ""table of contents"" improve table, header and footer for table, rowspan. Fix calculation of cell's min height when colspan is used. support for simple bar and pie charts Technical requirements This library works with php 5.3 and up. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/psliwa/PHPPdf"	"A library for generating PDFs and images from XML."	"true"
"PDF"	"Snappy"	"https://github.com/KnpLabs/snappy"	"A PDF and image generation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1952"	"121"	"254"	"GitHub - KnpLabs/snappy: PHP5 library allowing thumbnail, snapshot or PDF generation from a url or a html page. Wrapper for wkhtmltopdf/wkhtmltoimage Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 121 Star 1,952 Fork 254 KnpLabs/snappy Code Issues 26 Pull requests 3 Pulse Graphs PHP5 library allowing thumbnail, snapshot or PDF generation from a url or a html page. Wrapper for wkhtmltopdf/wkhtmltoimage http://KnpLabs.com 294 commits 4 branches 14 releases 58 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags doc/faq doc/locales master refactoring Nothing to show 0.4.3 0.4.2 0.4.1 0.4 0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 0.2.1 0.2.0 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit 4e55d12 May 23, 2016 akovalyov Merge pull request #207 from ConnorVG/patch-1 … FAQ: Usage of CSS `zoom` Permalink Failed to load latest commit information. doc FAQ: Usage of CSS `zoom` Apr 1, 2016 src/Knp/Snappy Fix wrong documentation Nov 16, 2015 test fix passing a URL to options ""footer-html"", ""header-html"", ""cover"" Aug 10, 2015 .gitignore removed custom autoloader and updated tests configuration Jul 31, 2015 .travis.yml Update travis to test against multiple symfony process versions Nov 14, 2015 CONTRIBUTING.md Create CONTRIBUTING.md Nov 23, 2015 LICENSE Original import Jun 16, 2010 README.md Add a note about h4cc wkhtmltopdf binary compat. Feb 7, 2016 composer.json Update travis to test against multiple symfony process versions Nov 13, 2015 phpunit.xml.dist removed custom autoloader and updated tests configuration Jul 31, 2015 README.md Snappy Snappy is a PHP5 library allowing thumbnail, snapshot or PDF generation from a url or a html page. It uses the excellent webkit-based wkhtmltopdf and wkhtmltoimage available on OSX, linux, windows. You will have to download wkhtmltopdf 0.12.x in order to use Snappy. Please, check FAQ before opening a new issue. Snappy is a tiny wrapper around wkhtmltox, so lots of issues are already answered, resolved or wkhtmltox ones. Installation using Composer $ composer require knplabs/knp-snappy Usage <?php  require __DIR__ . '/vendor/autoload.php';  use Knp\Snappy\Pdf;  $snappy = new Pdf('/usr/local/bin/wkhtmltopdf');  // or you can do it in two steps $snappy = new Pdf(); $snappy->setBinary('/usr/local/bin/wkhtmltopdf');  // Display the resulting pdf in the browser // by setting the Content-type header to pdf $snappy = new Pdf('/usr/local/bin/wkhtmltopdf'); header('Content-Type: application/pdf'); header('Content-Disposition: attachment; filename=""file.pdf""'); echo $snappy->getOutput('http://www.github.com');  // Merge multiple urls into one pdf // by sending an array of urls to getOutput() $snappy = new Pdf('/usr/local/bin/wkhtmltopdf'); header('Content-Type: application/pdf'); header('Content-Disposition: attachment; filename=""file.pdf""'); echo $snappy->getOutput(array('http://www.github.com','http://www.knplabs.com','http://www.php.net'));  // .. or simply save the PDF to a file $snappy = new Pdf('/usr/local/bin/wkhtmltopdf'); $snappy->generateFromHtml('<h1>Bill</h1><p>You owe me money, dude.</p>', '/tmp/bill-123.pdf');  // Pass options to snappy // Type wkhtmltopdf -H to see the list of options $snappy = new Pdf('/usr/local/bin/wkhtmltopdf'); $snappy->setOption('disable-javascript', true); $snappy->setOption('no-background', true); $snappy->setOption('allow', array('/path1', '/path2')); $snappy->setOption('cookie', array('key' => 'value', 'key2' => 'value2')); $snappy->setOption('cover', 'pathToCover.html'); // .. or pass a cover as html $snappy->setOption('cover', '<h1>Bill cover</h1>'); $snappy->setOption('toc', true); $snappy->setOption('cache-dir', '/path/to/cache/dir'); wkhtmltopdf binary as composer dependencies If you want to download wkhtmltopdf and wkhtmltoimage with composer you add to composer.json: $ composer require h4cc/wkhtmltopdf-i386 0.12.x $ composer require h4cc/wkhtmltoimage-i386 0.12.x or this if you are in 64 bit based system: $ composer require h4cc/wkhtmltopdf-amd64 0.12.x $ composer require h4cc/wkhtmltoimage-amd64 0.12.x And then you can use it <?php  use Knp\Snappy\Pdf;  $myProjectDirectory = '/path/to/my/project';  $snappy = new Pdf($myProjectDirectory . '/vendor/h4cc/wkhtmltopdf-i386/bin/wkhtmltopdf-i386');  // or  $snappy = new Pdf($myProjectDirectory . '/vendor/h4cc/wkhtmltopdf-amd64/bin/wkhtmltopdf-amd64'); N.B. These static binaries are extracted from Debian7 packages, so it might not be compatible with non-debian based linux distros Some use cases If you want to generate table of contents and you want to use custom XSL stylesheet, do the following: <?php $snappy = new Pdf('/path/to/binary');  $snappy->setOption('toc', true); $snappy->setOption('xsl-style-sheet', 'http://path/to/stylesheet.xsl') //or local file;  $snappy->generateFromHtml('<p>Some content</p>', 'test.pdf'); Credits Snappy has been originally developed by the KnpLabs team. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/KnpLabs/snappy"	"A PDF and image generation library."	"true"
"PDF"	"WKHTMLToPDF"	"https://github.com/wkhtmltopdf/wkhtmltopdf"	"A tool to convert HTML to PDF."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4244"	"236"	"620"	"GitHub - wkhtmltopdf/wkhtmltopdf: Convert HTML to PDF using Webkit (QtWebKit) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 236 Star 4,244 Fork 620 wkhtmltopdf/wkhtmltopdf Code Issues 645 Pull requests 10 Pulse Graphs Convert HTML to PDF using Webkit (QtWebKit) http://wkhtmltopdf.org 943 commits 7 branches 47 releases 42 contributors C++ 79.8% Python 12.2% C 3.4% QMake 2.1% PAWN 1.2% NSIS 1.0% Shell 0.3% C++ Python C QMake PAWN NSIS Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.12.3.x 0.13 fix-hangs gh-pages master msvc2015-support plain-c-dll Nothing to show 0.12.3.2 0.12.3.1 0.12.3 0.12.2.4 0.12.2.3 0.12.2.2 0.12.2.1 0.12.2 0.12.1.2 0.12.1.1 0.12.1 0.12.0 0.11.0_rc2 0.10.0_rc2 0.10.0_rc1 0.10.0_beta5 0.10.0_beta4 0.10.0_beta3 0.10.0_beta2 0.10.0_beta1 0.9.9 0.9.8 0.9.7 0.9.6 0.9.5 0.9.0_beta3 0.9.0_beta2 0.9.0_beta1 0.8.3 0.8.2 0.8.1 0.8.0 0.7.5 0.7.4 0.7.3 0.7.2 0.7.1 0.7.0 0.6.4 0.6.3 0.6.2 0.6.1 0.6 0.5 0.4 0.3 0.2 Nothing to show New pull request Latest commit 050dd18 May 10, 2016 ashkulz allow screen size in headless mode to be overriden via environment va… … …riables Permalink Failed to load latest commit information. examples Fix some typos (found by codespell) Apr 27, 2016 include/wkhtmltox lots of minor spelling corrections Apr 28, 2016 qt @ 8dae19a allow screen size in headless mode to be overriden via environment va… May 10, 2016 scripts update OpenSSL to 1.0.2h May 6, 2016 src lots of minor spelling corrections Apr 28, 2016 .gitignore add script for building of releases for the current platform Jun 8, 2014 .gitmodules remove reference to wk_4.8 branch Apr 25, 2014 AUTHORS support bypassing the proxy for specific hosts Jun 5, 2015 CHANGELOG-OLD Fix some typos (found by codespell) Apr 27, 2016 CHANGELOG.md allow screen size in headless mode to be overriden via environment va… May 10, 2016 Doxyfile Fix some typos (found by codespell) Apr 27, 2016 INSTALL.md Fix some typos (found by codespell) Apr 27, 2016 LICENSE rename COPYING to LICENSE Feb 21, 2015 README.md remove usage examples from README Feb 13, 2014 VERSION bump version to 0.12.4-dev Jan 30, 2016 common.pri fix shared/static linkage detection and text codec auto-import for Qt4 Jan 3, 2015 wkhtmltopdf.pro remove automatic README generation targets in Makefile Apr 23, 2014 wkhtmltopdf.qrc rename COPYING to LICENSE Feb 21, 2015 wkhtmltox.nsi rename COPYING to LICENSE Feb 21, 2015 README.md wkhtmltopdf and wkhtmltoimage wkhtmltopdf and wkhtmltoimage are command line tools to render HTML into PDF and various image formats using the QT Webkit rendering engine. These run entirely ""headless"" and do not require a display or display service. See http://wkhtmltopdf.org for updated documentation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/wkhtmltopdf/wkhtmltopdf"	"A tool to convert HTML to PDF."	"true"
"Office"	"ExcelAnt"	"https://github.com/Wisembly/ExcelAnt"	"A library for manipulating Microsoft Excel documents."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"45"	"25"	"18"	"GitHub - Wisembly/ExcelAnt: Simple yet powerful Excel manipulation library for PHP 5.4+ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 45 Fork 18 Wisembly/ExcelAnt Code Issues 6 Pull requests 2 Pulse Graphs Simple yet powerful Excel manipulation library for PHP 5.4+ http://wisembly.github.io/ExcelAnt 188 commits 6 branches 3 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags csv-export functional-testing gh-pages master table-feature writer Nothing to show 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit 343ffbc Oct 8, 2013 rgazelot Merge pull request #14 from arodiss/patch-1 … Fixed composer.json Permalink Failed to load latest commit information. .travis Add travis phpunit.xml configuration file Jun 3, 2013 docs Add simple table image Jun 14, 2013 features Change the cell coordinate definitions. Now use letter in behat to de… Jun 14, 2013 lib/ExcelAnt Remove useless namespace in WriterInterface Oct 1, 2013 test Change the Unittest Aug 21, 2013 .gitignore Add /coverage to gitignore May 30, 2013 .travis.yml Add progress format to behat test-suite Jun 10, 2013 LICENSE.md - update README and Licence. Tagged 1.0.0 Jul 7, 2013 README.md changed from /tmp/ to pseudo path Aug 1, 2013 composer.json Added phpexcel version to composer.json so installation not fail when… Oct 7, 2013 phpunit.xml.dist Add first behavior of the Worksheet and Sheet May 23, 2013 README.md        |     |         \   /          \_/     __   /^\   __    '  `. \_/ ,'  `         \/ \/    _,--./| |\.--._ _,'   _.-\_/-._   `._      |   / \   |      |  /   \  |     /   |   |   \   -'    \___/    `-  ExcelAnt ExcelAnt is an Excel manipulation library for PHP 5.4. It currently works on top of PHPExcel. If you want to add / use another library, feel free to fork and contribute ! Version 1.0.0 Installation Install composer : curl -s http://getcomposer.org/installer | php (more info at getcomposer.org) Create a composer.json file in your project root : (or add only the excelant line in your existing composer file)   {     ""require"": {       ""wisembly/excelant"": ""*"",     }   } Install via composer : php composer.phar install Use ExcelAnt Create a simple Table : use ExcelAnt\Adapter\PhpExcel\Workbook\Workbook,     ExcelAnt\Adapter\PhpExcel\Sheet\Sheet,     ExcelAnt\Adapter\PhpExcel\Writer\Writer,     ExcelAnt\Table\Table,     ExcelAnt\Coordinate\Coordinate;  Class Export {     public function createExport(array $users)     {         $workbook = new Workbook();         $sheet = new Sheet($workbook);         $table = new Table();          foreach ($users as $user) {             $table->setRow([                 $user->getName(),                 $user->getEmail(),             ]);         }          $sheet->addTable($table, new Coordinate(1, 1));         $workbook->addSheet($sheet);     } } Now, to export your Workbook, you need to create a Writer : use ExcelAnt\Adapter\PhpExcel\Writer\WriterFactory,     ExcelAnt\Adapter\PhpExcel\Writer\PhpExcelWriter\Excel5;  $writer = (new WriterFactory())->createWriter(new Excel5('/path/to/myExport.xls')); Convert your Worbook to create a PHPExcel object and export it : $phpExcel = $writer->convert($workbook); $writer->write($phpExcel); Documentation Coming soon... Contributing ExcelAnt is an open source project. If you would like to contribute, fork the repository and submit a pull request. Running ExcelAnt Tests Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Wisembly/ExcelAnt"	"A library for manipulating Microsoft Excel documents."	"true"
"Office"	"PHPExcel"	"https://github.com/PHPOffice/PHPExcel"	"A library for working with Microsoft Excel documents."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6423"	"606"	"2197"	"GitHub - PHPOffice/PHPExcel: A pure PHP library for reading and writing spreadsheet files Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 606 Star 6,423 Fork 2,197 PHPOffice/PHPExcel Code Issues 405 Pull requests 146 Wiki Pulse Graphs A pure PHP library for reading and writing spreadsheet files 1,266 commits 14 branches 13 releases 62 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 1.8 Switch branches/tags Branches Tags 1.8 1.9 HTMLReader OOCalcReader autoShapes autofilter calcEngine cellRestructure charts develop develop_2.0.0 experimental master style Nothing to show PHPExcel_1.7.8 1.8.1 1.8.0 1.8.0rc4 1.8.0rc3 1.8.0rc2 1.8.0rc1 1.7.9 1.7.9-rc1 1.7.8 1.7.8rc3 1.7.8rc2 1.7.8rc1 Nothing to show New pull request Latest commit e487f5c Jul 14, 2016 MarkBaker Fix for multiple worksheets, all with merge cells, in HTML Writer Permalink Failed to load latest commit information. Build EMail address and changelog date Mar 2, 2014 Classes Fix for multiple worksheets, all with merge cells, in HTML Writer Jul 14, 2016 Documentation Update 01-Getting-Started.md May 11, 2016 Examples Fix to 01simple.php example after mis-commit Jun 5, 2016 unitTests Fix for XML settings, together with unit tests Jun 5, 2016 .gitattributes modify export ignores Jan 15, 2016 .gitignore Update .gitignore Dec 27, 2012 .travis.yml Update Travis configuration Dec 30, 2015 README.md gitter link May 26, 2015 changelog.txt General: (sim642) Pull Request 489 - Implement actual timezone adjust… Mar 31, 2016 composer.json Fix reference for gd in composer Feb 9, 2016 install.txt Update to copyright year in file headers, and minor documentation upd… May 14, 2013 license.md Added readme and license file Jul 5, 2012 README.md PHPExcel - OpenXML - Read, Write and Create spreadsheet documents in PHP - Spreadsheet engine PHPExcel is a library written in pure PHP and providing a set of classes that allow you to write to and read from different spreadsheet file formats, like Excel (BIFF) .xls, Excel 2007 (OfficeOpenXML) .xlsx, CSV, Libre/OpenOffice Calc .ods, Gnumeric, PDF, HTML, ... This project is built around Microsoft's OpenXML standard and PHP. Master: Develop: File Formats supported Reading BIFF 5-8 (.xls) Excel 95 and above Office Open XML (.xlsx) Excel 2007 and above SpreadsheetML (.xml) Excel 2003 Open Document Format/OASIS (.ods) Gnumeric HTML SYLK CSV Writing BIFF 8 (.xls) Excel 95 and above Office Open XML (.xlsx) Excel 2007 and above HTML CSV PDF (using either the tcPDF, DomPDF or mPDF libraries, which need to be installed separately) Requirements PHP version 5.2.0 or higher PHP extension php_zip enabled (required if you need PHPExcel to handle .xlsx .ods or .gnumeric files) PHP extension php_xml enabled PHP extension php_gd2 enabled (optional, but required for exact column width autocalculation) Want to contribute? If you would like to contribute, here are some notes and guidlines: All new development happens on the 1.8 branch, so it is always the most up-to-date The master branch only contains tagged releases If you are going to be submitting a pull request, please fork from 1.8, and submit your pull request back to that 1.8 branch Wherever possible, code changes should conform as closely as possible to PSR-2 standards Helpful article about forking Helpful article about pull requests License PHPExcel is licensed under LGPL (GNU LESSER GENERAL PUBLIC LICENSE) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PHPOffice/PHPExcel"	"A library for working with Microsoft Excel documents."	"true"
"Office"	"PHPPowerPoint"	"https://github.com/PHPOffice/PHPPresentation"	"A library for working with Microsoft PowerPoint Presentations."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"431"	"64"	"172"	"GitHub - PHPOffice/PHPPresentation: A pure PHP library for writing presentations files Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 64 Star 431 Fork 172 PHPOffice/PHPPresentation Code Issues 59 Pull requests 3 Pulse Graphs A pure PHP library for writing presentations files 581 commits 3 branches 5 releases 20 contributors PHP 99.9% Shell 0.1% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop gh-pages master Nothing to show 0.6.0 0.5.0 0.4.0 0.3.0 0.2.0 Nothing to show New pull request Latest commit 1de0a0a Jun 4, 2016 RomanSyroeshko Fixed build. Permalink Failed to load latest commit information. docs PowerPoint2007 Writer : Implement Animations Apr 5, 2016 samples PowerPoint2007 Writer : Implement Animations Apr 5, 2016 src/PhpPresentation #227 : Bug in Animation Writing for Dev Branch May 21, 2016 tests PowerPoint2007 Writer : Implement Animations Apr 5, 2016 .codeclimate.yml CodeClimate Integration Jan 28, 2016 .gitignore Update the dependence PhpOffice\Common to 0.2.* Jul 8, 2015 .scrutinizer.yml ADDED : #24 : Add Scrutinizer Support Jun 18, 2014 .travis.yml CodeClimate Integration Jan 28, 2016 .travis_shell_after_success.sh #121 : Set name of a slide Oct 30, 2015 CHANGELOG.md PowerPoint2007 Writer : Implement Animations Apr 5, 2016 COPYING [CHANGED] License has been split into two files as recommended here h… May 22, 2014 COPYING.LESSER [CHANGED] License has been split into two files as recommended here h… May 22, 2014 LICENSE PhpOffice\PhpPowerpoint becomes PhpOffice\PhpPresentation - GH-25 Jul 8, 2015 README.md updating image url Jan 28, 2016 VERSION #176 : Implementation for ZIP Adapter Mar 4, 2016 composer.json #176 : Implementation for ZIP Adapter Mar 4, 2016 phpmd.xml.dist Fixed build. Jun 4, 2016 phpunit.xml.dist PhpOffice\PhpPowerpoint becomes PhpOffice\PhpPresentation - GH-25 Jul 8, 2015 README.md PHPPresentation is a library written in pure PHP that provides a set of classes to write to different presentation file formats, i.e. Microsoft Office Open XML (OOXML or OpenXML) or OASIS Open Document Format for Office Applications (OpenDocument or ODF). PHPPresentation is an open source project licensed under the terms of LGPL version 3. PHPPresentation is aimed to be a high quality software product by incorporating continuous integration and unit testing. You can learn more about PHPPresentation by reading the Developers' Documentation and the API Documentation. Read more about PHPPresentation: Features Requirements Installation Getting started Contributing Developers' Documentation API Documentation Features Create an in-memory presentation representation Set presentation meta data (author, title, description, etc) Add slides from scratch or from existing one Supports different fonts and font styles Supports different formatting, styles, fills, gradients Supports hyperlinks and rich-text strings Add images with different styles (positioning, rotation, shadow) Set printing options (header, footer, page margins, paper size, orientation) Set transitions between slides Output to different file formats: PowerPoint 2007 (.pptx), OpenDocument Presentation (.odp), Serialized Presentation) ... and lots of other things! Requirements PHPPresentation requires the following: PHP 5.3+ Zip extension XML Parser extension XMLWriter extension (optional, used to write DOCX and ODT) Installation It is recommended that you install the PHPPresentation library through composer. To do so, add the following lines to your composer.json. {     ""require"": {        ""phpoffice/phppresentation"": ""dev-master""     } } Alternatively, you can download the latest release from the releases page. In this case, you will have to register the autoloader. Register autoloading is required only if you do not use composer in your project. require_once 'path/to/PhpPresentation/src/PhpPresentation/Autoloader.php'; \PhpOffice\PhpPresentation\Autoloader::register(); Getting started The following is a basic usage example of the PHPPresentation library. // with your own install require_once 'src/PhpPresentation/Autoloader.php'; \PhpOffice\PhpPresentation\Autoloader::register();  // with Composer require_once 'vendor/autoload.php';  use PhpOffice\PhpPresentation\PhpPresentation; use PhpOffice\PhpPresentation\IOFactory; use PhpOffice\PhpPresentation\Style\Color; use PhpOffice\PhpPresentation\Style\Alignment;  $objPHPPowerPoint = new PhpPresentation();  // Create slide $currentSlide = $objPHPPowerPoint->getActiveSlide();  // Create a shape (drawing) $shape = $currentSlide->createDrawingShape(); $shape->setName('PHPPresentation logo')       ->setDescription('PHPPresentation logo')       ->setPath('./resources/phppowerpoint_logo.gif')       ->setHeight(36)       ->setOffsetX(10)       ->setOffsetY(10); $shape->getShadow()->setVisible(true)                    ->setDirection(45)                    ->setDistance(10);  // Create a shape (text) $shape = $currentSlide->createRichTextShape()       ->setHeight(300)       ->setWidth(600)       ->setOffsetX(170)       ->setOffsetY(180); $shape->getActiveParagraph()->getAlignment()->setHorizontal( Alignment::HORIZONTAL_CENTER ); $textRun = $shape->createTextRun('Thank you for using PHPPresentation!'); $textRun->getFont()->setBold(true)                    ->setSize(60)                    ->setColor( new Color( 'FFE06B20' ) );  $oWriterPPTX = IOFactory::createWriter($objPHPPowerPoint, 'PowerPoint2007'); $oWriterPPTX->save(__DIR__ . ""/sample.pptx""); $oWriterODP = IOFactory::createWriter($objPHPPowerPoint, 'ODPresentation'); $oWriterODP->save(__DIR__ . ""/sample.odp""); More examples are provided in the samples folder. You can also read the Developers' Documentation and the API Documentation for more detail. Contributing We welcome everyone to contribute to PHPPresentation. Below are some of the things that you can do to contribute: Read our contributing guide Fork us and request a pull to the develop branch Submit bug reports or feature requests to GitHub Follow @PHPOffice on Twitter Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PHPOffice/PHPPresentation"	"A library for working with Microsoft PowerPoint Presentations."	"true"
"Office"	"PHPWord"	"https://github.com/PHPOffice/PHPWord"	"A library for working with Microsoft Word documents."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1736"	"212"	"724"	"GitHub - PHPOffice/PHPWord: A pure PHP library for reading and writing word processing documents Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 212 Star 1,736 Fork 724 PHPOffice/PHPWord Code Issues 346 Pull requests 78 Wiki Pulse Graphs A pure PHP library for reading and writing word processing documents 1,140 commits 3 branches 11 releases Fetching contributors PHP 99.8% Other 0.2% PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop gh-pages master Nothing to show v0.12.1 0.12.0 0.11.1 0.11.0 0.10.1 0.10.0 0.9.1 0.9.0 0.8.1 0.8.0 0.7.0 Nothing to show New pull request Latest commit 7deb010 Jul 8, 2016 RomanSyroeshko Fixed formatting. Permalink Failed to load latest commit information. docs #483. Output escaping for HTML. Jun 28, 2016 samples #483. Output escaping for OOXML. Jun 4, 2016 src/PhpWord Fixed formatting. Jul 8, 2016 tests #483. Output escaping for ODF. Jun 13, 2016 .gitignore Merge branch 'develop' of https://github.com/PHPOffice/PHPWord into d… Aug 16, 2014 .scrutinizer.yml Refactor ODT writer to give enable some additional features May 18, 2014 .travis.yml Add PHP 7.0 into the build script. Jan 23, 2016 .travis_shell_after_success.sh QA: PHPMD fixes for `tests`; Some adjustment for Travis build May 4, 2014 CHANGELOG.md #483. Output escaping for RTF. Jul 8, 2016 CONTRIBUTING.md [CHANGED] ""CONTRIBUTING.md"". Nov 14, 2014 COPYING [CHANGED] License has been split into two files as recommended here h… May 22, 2014 COPYING.LESSER [CHANGED] License has been split into two files as recommended here h… May 22, 2014 LICENSE Copyright update. Dec 5, 2015 README.md #483. Output escaping for HTML. Jun 28, 2016 VERSION Next round of refactoring of alignment-related functionality. Oct 10, 2015 bootstrap.php Copyright update. Dec 5, 2015 composer.json #483. Output escaping for HTML. Jun 28, 2016 phpmd.xml.dist Fixed build. Jun 4, 2016 phpunit.xml.dist Refactor ODT writer to give enable some additional features May 18, 2014 phpword.ini.dist #483. Output escaping for OOXML. Jun 4, 2016 README.md PHPWord is a library written in pure PHP that provides a set of classes to write to and read from different document file formats. The current version of PHPWord supports Microsoft Office Open XML (OOXML or OpenXML), OASIS Open Document Format for Office Applications (OpenDocument or ODF), Rich Text Format (RTF), HTML, and PDF. PHPWord is an open source project licensed under the terms of LGPL version 3. PHPWord is aimed to be a high quality software product by incorporating continuous integration and unit testing. You can learn more about PHPWord by reading the Developers' Documentation and the API Documentation. Read more about PHPWord: Features Requirements Installation Getting started Contributing Developers' Documentation API Documentation Features With PHPWord, you can create OOXML, ODF, or RTF documents dynamically using your PHP 5.3.3+ scripts. Below are some of the things that you can do with PHPWord library: Set document properties, e.g. title, subject, and creator. Create document sections with different settings, e.g. portrait/landscape, page size, and page numbering Create header and footer for each sections Set default font type, font size, and paragraph style Use UTF-8 and East Asia fonts/characters Define custom font styles (e.g. bold, italic, color) and paragraph styles (e.g. centered, multicolumns, spacing) either as named style or inline in text Insert paragraphs, either as a simple text or complex one (a text run) that contains other elements Insert titles (headers) and table of contents Insert text breaks and page breaks Insert and format images, either local, remote, or as page watermarks Insert binary OLE Objects such as Excel or Visio Insert and format table with customized properties for each rows (e.g. repeat as header row) and cells (e.g. background color, rowspan, colspan) Insert list items as bulleted, numbered, or multilevel Insert hyperlinks Insert footnotes and endnotes Insert drawing shapes (arc, curve, line, polyline, rect, oval) Insert charts (pie, doughnut, bar, line, area, scatter, radar) Insert form fields (textinput, checkbox, and dropdown) Create document from templates Use XSL 1.0 style sheets to transform main document part of OOXML template ... and many more features on progress Requirements PHPWord requires the following: PHP 5.3.3+ XML Parser extension Zend\Escaper component Zend\Stdlib component Zend\Validator component Zip extension (optional, used to write OOXML and ODF) GD extension (optional, used to add images) XMLWriter extension (optional, used to write OOXML and ODF) XSL extension (optional, used to apply XSL style sheet to template ) dompdf library (optional, used to write PDF) Installation PHPWord is installed via Composer. You just need to add dependency on PHPWord into your package. Example: {     ""require"": {        ""phpoffice/phpword"": ""v0.13.*""     } } Getting started The following is a basic usage example of the PHPWord library. <?php require_once 'bootstrap.php';  // Creating the new document... $phpWord = new \PhpOffice\PhpWord\PhpWord();  /* Note: any element you append to a document must reside inside of a Section. */  // Adding an empty Section to the document... $section = $phpWord->addSection(); // Adding Text element to the Section having font styled by default... $section->addText(     '""Learn from yesterday, live for today, hope for tomorrow. '         . 'The important thing is not to stop questioning."" '         . '(Albert Einstein)' );  /*  * Note: it's possible to customize font style of the Text element you add in three ways:  * - inline;  * - using named font style (new font style object will be implicitly created);  * - using explicitly created font style object.  */  // Adding Text element with font customized inline... $section->addText(     '""Great achievement is usually born of great sacrifice, '         . 'and is never the result of selfishness."" '         . '(Napoleon Hill)',     array('name' => 'Tahoma', 'size' => 10) );  // Adding Text element with font customized using named font style... $fontStyleName = 'oneUserDefinedStyle'; $phpWord->addFontStyle(     $fontStyleName,     array('name' => 'Tahoma', 'size' => 10, 'color' => '1B2232', 'bold' => true) ); $section->addText(     '""The greatest accomplishment is not in never falling, '         . 'but in rising again after you fall."" '         . '(Vince Lombardi)',     $fontStyleName );  // Adding Text element with font customized using explicitly created font style object... $fontStyle = new \PhpOffice\PhpWord\Style\Font(); $fontStyle->setBold(true); $fontStyle->setName('Tahoma'); $fontStyle->setSize(13); $myTextElement = $section->addText('""Believe you can and you\'re halfway there."" (Theodor Roosevelt)'); $myTextElement->setFontStyle($fontStyle);  // Saving the document as OOXML file... $objWriter = \PhpOffice\PhpWord\IOFactory::createWriter($phpWord, 'Word2007'); $objWriter->save('helloWorld.docx');  // Saving the document as ODF file... $objWriter = \PhpOffice\PhpWord\IOFactory::createWriter($phpWord, 'ODText'); $objWriter->save('helloWorld.odt');  // Saving the document as HTML file... $objWriter = \PhpOffice\PhpWord\IOFactory::createWriter($phpWord, 'HTML'); $objWriter->save('helloWorld.html');  /* Note: we skip RTF, because it's not XML-based and requires a different example. */ /* Note: we skip PDF, because ""HTML-to-PDF"" approach is used to create PDF documents. */ More examples are provided in the samples folder. You can also read the Developers' Documentation and the API Documentation for more detail. Contributing We welcome everyone to contribute to PHPWord. Below are some of the things that you can do to contribute. Read our contributing guide. Fork us and request a pull to the develop branch. Submit bug reports or feature requests to GitHub. Follow @PHPWord and @PHPOffice on Twitter. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PHPOffice/PHPWord"	"A library for working with Microsoft Word documents."	"true"
"Database"	"Baum"	"https://github.com/etrepat/baum"	"A nested set implementation for Eloquent."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1098"	"77"	"197"	"GitHub - etrepat/baum: Baum is an implementation of the Nested Set pattern for Laravel's Eloquent ORM. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 77 Star 1,098 Fork 197 etrepat/baum Code Issues 68 Pull requests 20 Wiki Pulse Graphs Baum is an implementation of the Nested Set pattern for Laravel's Eloquent ORM. http://etrepat.com/baum 258 commits 4 branches 18 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0.x-stable develop gh-pages master Nothing to show 1.1.1 1.1.0 1.0.15 1.0.14 1.0.13 1.0.12 1.0.11 1.0.10 1.0.9 1.0.8 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit 9290bed Mar 4, 2015 etrepat Update CHANGELOG & bump version. Permalink Failed to load latest commit information. src/Baum Update CHANGELOG & bump version. Mar 4, 2015 tests Add support for Laravel 5 Mar 4, 2015 .gitattributes Add some missing files into .gitattributes Jul 28, 2014 .gitignore Updated .gitignore and added .gitattributes Jul 26, 2014 .travis.yml Travis improvements Jul 26, 2014 CHANGELOG.md Update CHANGELOG & bump version. Mar 4, 2015 CONTRIBUTING.md Update the CONTRIBUTING section of the README and provide a CONTRIBUT… Jul 3, 2014 LICENSE Initial commit Apr 29, 2013 README.md Correcting a typo Mar 4, 2015 bootstrap.php Add support for Laravel 5 Mar 4, 2015 boris Cleanup & splitting of tests. Apr 29, 2014 composer.json Add support for Laravel 5 Mar 4, 2015 phpunit.xml Add non-numeric tests for hierarchy & movement operations. Apr 29, 2014 README.md Baum Baum is an implementation of the Nested Set pattern for Laravel 5's Eloquent ORM. For Laravel 4.2.x compatibility, check the 1.0.x branch branch or use the latest 1.0.x tagged release. Documentation About Nested Sets The theory behind, a TL;DR version Installation Getting started Usage Further information Contributing About Nested Sets A nested set is a smart way to implement an ordered tree that allows for fast, non-recursive queries. For example, you can fetch all descendants of a node in a single query, no matter how deep the tree. The drawback is that insertions/moves/deletes require complex SQL, but that is handled behind the curtains by this package! Nested sets are appropriate for ordered trees (e.g. menus, commercial categories) and big trees that must be queried efficiently (e.g. threaded posts). See the wikipedia entry for nested sets for more info. Also, this is a good introductory tutorial: http://www.evanpetersen.com/item/nested-sets.html The theory behind, a TL;DR version An easy way to visualize how a nested set works is to think of a parent entity surrounding all of its children, and its parent surrounding it, etc. So this tree: root   |_ Child 1     |_ Child 1.1     |_ Child 1.2   |_ Child 2     |_ Child 2.1     |_ Child 2.2  Could be visualized like this:  ___________________________________________________________________ |  Root                                                             | |    ____________________________    ____________________________   | |   |  Child 1                  |   |  Child 2                  |   | |   |   __________   _________  |   |   __________   _________  |   | |   |  |  C 1.1  |  |  C 1.2 |  |   |  |  C 2.1  |  |  C 2.2 |  |   | 1   2  3_________4  5________6  7   8  9_________10 11_______12 13  14 |   |___________________________|   |___________________________|   | |___________________________________________________________________|  The numbers represent the left and right boundaries. The table then might look like this: id | parent_id | lft  | rgt  | depth | data  1 |           |    1 |   14 |     0 | root  2 |         1 |    2 |    7 |     1 | Child 1  3 |         2 |    3 |    4 |     2 | Child 1.1  4 |         2 |    5 |    6 |     2 | Child 1.2  5 |         1 |    8 |   13 |     1 | Child 2  6 |         5 |    9 |   10 |     2 | Child 2.1  7 |         5 |   11 |   12 |     2 | Child 2.2  To get all children of a parent node, you SELECT * WHERE lft IS BETWEEN parent.lft AND parent.rgt To get the number of children, it's (right - left - 1)/2 To get a node and all its ancestors going back to the root, you SELECT * WHERE node.lft IS BETWEEN lft AND rgt As you can see, queries that would be recursive and prohibitively slow on ordinary trees are suddenly quite fast. Nifty, isn't it? Installation Baum works with Laravel 5 onwards. You can add it to your composer.json file with: ""baum/baum"": ""~1.1""  Run composer install to install it. As with most Laravel 5 packages you'll then need to register the Baum service provider. To do that, head over your config/app.php file and add the following line into the providers array: 'Baum\Providers\BaumServiceProvider',  Getting started After the package is correctly installed the easiest way to get started is to run the provided generator: php artisan baum:install MODEL  Replace model by the class name you plan to use for your Nested Set model. The generator will install a migration and a model file into your application configured to work with the Nested Set behaviour provided by Baum. You SHOULD take a look at those files, as each of them describes how they can be customized. Next, you would probably run artisan migrate to apply the migration. Model configuration In order to work with Baum, you must ensure that your model class extends Baum\Node. This is the easiest it can get: class Category extends Baum\Node {  } This is a slightly more complex example where we have the column names customized: class Dictionary extends Baum\Node {    protected $table = 'dictionary';    // 'parent_id' column name   protected $parentColumn = 'parent_id';    // 'lft' column name   protected $leftColumn = 'lidx';    // 'rgt' column name   protected $rightColumn = 'ridx';    // 'depth' column name   protected $depthColumn = 'nesting';    // guard attributes from mass-assignment   protected $guarded = array('id', 'parent_id', 'lidx', 'ridx', 'nesting');  } Remember that, obviously, the column names must match those in the database table. Migration configuration You must ensure that the database table that supports your Baum models has the following columns: parent_id: a reference to the parent (int) lft: left index bound (int) rgt: right index bound (int) depth: depth or nesting level (int) Here is a sample migration file: class Category extends Migration {    public function up() {     Schema::create('categories', function(Blueprint $table) {       $table->increments('id');        $table->integer('parent_id')->nullable();       $table->integer('lft')->nullable();       $table->integer('rgt')->nullable();       $table->integer('depth')->nullable();        $table->string('name', 255);        $table->timestamps();     });   }    public function down() {     Schema::drop('categories');   }  } You may freely modify the column names, provided you change them both in the migration and the model. Usage After you've configured your model and run the migration, you are now ready to use Baum with your model. Below are some examples. Creating a root node Inserting nodes Deleting nodes Getting the nesting level of a node Moving nodes around Asking questions to your nodes Relations Root and Leaf scopes Accessing the ancestry/descendancy chain Limiting levels of children returned Custom sorting column Dumping the hierarchy tree Model events: moving and moved Scope support Validation Tree rebuilding Soft deletes Seeding/Mass assignment Misc/Utility functions Creating a root node By default, all nodes are created as roots: $root = Category::create(['name' => 'Root category']); Alternatively, you may find yourself in the need of converting an existing node into a root node: $node->makeRoot(); You may also nullify it's parent_id column to accomplish the same behaviour: // This works the same as makeRoot() $node->parent_id = null; $node->save(); Inserting nodes // Directly with a relation $child1 = $root->children()->create(['name' => 'Child 1']);  // with the `makeChildOf` method $child2 = Category::create(['name' => 'Child 2']); $child2->makeChildOf($root); Deleting nodes $child1->delete(); Descendants of deleted nodes will also be deleted and all the lft and rgt bound will be recalculated. Pleases note that, for now, deleting and deleted model events for the descendants will not be fired. Getting the nesting level of a node The getLevel() method will return current nesting level, or depth, of a node. $node->getLevel() // 0 when root Moving nodes around Baum provides several methods for moving nodes around: moveLeft(): Find the left sibling and move to the left of it. moveRight(): Find the right sibling and move to the right of it. moveToLeftOf($otherNode): Move to the node to the left of ... moveToRightOf($otherNode): Move to the node to the right of ... makeNextSiblingOf($otherNode): Alias for moveToRightOf. makeSiblingOf($otherNode): Alias for makeNextSiblingOf. makePreviousSiblingOf($otherNode): Alias for moveToLeftOf. makeChildOf($otherNode): Make the node a child of ... makeFirstChildOf($otherNode): Make the node the first child of ... makeLastChildOf($otherNode): Alias for makeChildOf. makeRoot(): Make current node a root node. For example: $root = Creatures::create(['name' => 'The Root of All Evil']);  $dragons = Creatures::create(['name' => 'Here Be Dragons']); $dragons->makeChildOf($root);  $monsters = new Creatures(['name' => 'Horrible Monsters']); $monsters->save();  $monsters->makeSiblingOf($dragons);  $demons = Creatures::where('name', '=', 'demons')->first(); $demons->moveToLeftOf($dragons); Asking questions to your nodes You can ask some questions to your Baum nodes: isRoot(): Returns true if this is a root node. isLeaf(): Returns true if this is a leaf node (end of a branch). isChild(): Returns true if this is a child node. isDescendantOf($other): Returns true if node is a descendant of the other. isSelfOrDescendantOf($other): Returns true if node is self or a descendant. isAncestorOf($other): Returns true if node is an ancestor of the other. isSelfOrAncestorOf($other): Returns true if node is self or an ancestor. equals($node): current node instance equals the other. insideSubtree($node): Checks whether the given node is inside the subtree defined by the left and right indices. inSameScope($node): Returns true if the given node is in the same scope as the current one. That is, if every column in the scoped property has the same value in both nodes. Using the nodes from the previous example: $demons->isRoot(); // => false  $demons->isDescendantOf($root) // => true Relations Baum provides two self-referential Eloquent relations for your nodes: parent and children. $parent = $node->parent()->get();  $children = $node->children()->get(); Root and Leaf scopes Baum provides some very basic query scopes for accessing the root and leaf nodes: // Query scope which targets all root nodes Category::roots()  // All leaf nodes (nodes at the end of a branch) Category:allLeaves() You may also be interested in only the first root: $firstRootNode = Category::root(); Accessing the ancestry/descendancy chain There are several methods which Baum offers to access the ancestry/descendancy chain of a node in the Nested Set tree. The main thing to keep in mind is that they are provided in two ways: First as query scopes, returning an Illuminate\Database\Eloquent\Builder instance to continue to query further. To get actual results from these, remember to call get() or first(). ancestorsAndSelf(): Targets all the ancestor chain nodes including the current one. ancestors(): Query the ancestor chain nodes excluding the current one. siblingsAndSelf(): Instance scope which targets all children of the parent, including self. siblings(): Instance scope targeting all children of the parent, except self. leaves(): Instance scope targeting all of its nested children which do not have children. descendantsAndSelf(): Scope targeting itself and all of its nested children. descendants(): Set of all children & nested children. immediateDescendants(): Set of all children nodes (non-recursive). Second, as methods which return actual Baum\Node instances (inside a Collection object where appropiate): getRoot(): Returns the root node starting at the current node. getAncestorsAndSelf(): Retrieve all of the ancestor chain including the current node. getAncestorsAndSelfWithoutRoot(): All ancestors (including the current node) except the root node. getAncestors(): Get all of the ancestor chain from the database excluding the current node. getAncestorsWithoutRoot(): All ancestors except the current node and the root node. getSiblingsAndSelf(): Get all children of the parent, including self. getSiblings(): Return all children of the parent, except self. getLeaves(): Return all of its nested children which do not have children. getDescendantsAndSelf(): Retrieve all nested children and self. getDescendants(): Retrieve all of its children & nested children. getImmediateDescendants(): Retrieve all of its children nodes (non-recursive). Here's a simple example for iterating a node's descendants (provided a name attribute is available): $node = Category::where('name', '=', 'Books')->first();  foreach($node->getDescendantsAndSelf() as $descendant) {   echo ""{$descendant->name}""; } Limiting the levels of children returned In some situations where the hierarchy depth is huge it might be desirable to limit the number of levels of children returned (depth). You can do this in Baum by using the limitDepth query scope. The following snippet will get the current node's descendants up to a maximum of 5 depth levels below it: $node->descendants()->limitDepth(5)->get(); Similarly, you can limit the descendancy levels with both the getDescendants and getDescendantsAndSelf methods by supplying the desired depth limit as the first argument: // This will work without depth limiting // 1. As usual $node->getDescendants(); // 2. Selecting only some attributes $other->getDescendants(array('id', 'parent_id', 'name')); ... // With depth limiting // 1. A maximum of 5 levels of children will be returned $node->getDescendants(5); // 2. A max. of 5 levels of children will be returned selecting only some attrs $other->getDescendants(5, array('id', 'parent_id', 'name')); Custom sorting column By default in Baum all results are returned sorted by the lft index column value for consistency. If you wish to change this default behaviour you need to specify in your model the name of the column you wish to use to sort your results like this: protected $orderColumn = 'name'; Dumping the hierarchy tree Baum extends the default Eloquent\Collection class and provides the toHierarchy method to it which returns a nested collection representing the queried tree. Retrieving a complete tree hierarchy into a regular Collection object with its children properly nested is as simple as: $tree = Category::where('name', '=', 'Books')->first()->getDescendantsAndSelf()->toHierarchy(); Model events: moving and moved Baum models fire the following events: moving and moved every time a node is moved around the Nested Set tree. This allows you to hook into those points in the node movement process. As with normal Eloquent model events, if false is returned from the moving event, the movement operation will be cancelled. The recommended way to hook into those events is by using the model's boot method: class Category extends Baum\Node {    public static function boot() {     parent::boot();      static::moving(function($node) {       // Before moving the node this function will be called.     });      static::moved(function($node) {       // After the move operation is processed this function will be       // called.     });   }  } Scope support Baum provides a simple method to provide Nested Set ""scoping"" which restricts what we consider part of a nested set tree. This should allow for multiple nested set trees in the same database table. To make use of the scoping funcionality you may override the scoped model attribute in your subclass. This attribute should contain an array of the column names (database fields) which shall be used to restrict Nested Set queries: class Category extends Baum\Node {   ...   protected $scoped = array('company_id');   ... } In the previous example, company_id effectively restricts (or ""scopes"") a Nested Set tree. So, for each value of that field we may be able to construct a full different tree. $root1 = Category::create(['name' => 'R1', 'company_id' => 1]); $root2 = Category::create(['name' => 'R2', 'company_id' => 2]);  $child1 = Category::create(['name' => 'C1', 'company_id' => 1]); $child2 = Category::create(['name' => 'C2', 'company_id' => 2]);  $child1->makeChildOf($root1); $child2->makeChildOf($root2);  $root1->children()->get(); // <- returns $child1 $root2->children()->get(); // <- returns $child2 All methods which ask or traverse the Nested Set tree will use the scoped attribute (if provided). Please note that, for now, moving nodes between scopes is not supported. Validation The ::isValidNestedSet() static method allows you to check if your underlying tree structure is correct. It mainly checks for these 3 things: Check that the bound indexes lft, rgt are not null, rgt values greater than lft and within the bounds of the parent node (if set). That there are no duplicates for the lft and rgt column values. As the first check does not actually check root nodes, see if each root has the lft and rgt indexes within the bounds of its children. All of the checks are scope aware and will check each scope separately if needed. Example usage, given a Category node class: Category::isValidNestedSet() => true Tree rebuilding Baum supports for complete tree-structure rebuilding (or reindexing) via the ::rebuild() static method. This method will re-index all your lft, rgt and depth column values, inspecting your tree only from the parent <-> children relation standpoint. Which means that you only need a correctly filled parent_id column and Baum will try its best to recompute the rest. This can prove quite useful when something has gone horribly wrong with the index values or it may come quite handy when converting from another implementation (which would probably have a parent_id column). This operation is also scope aware and will rebuild all of the scopes separately if they are defined. Simple example usage, given a Category node class: Category::rebuild() Valid trees (per the isValidNestedSet method) will not get rebuilt. To force the index rebuilding process simply call the rebuild method with true as the first parameter: Category::rebuild(true); Soft deletes Baum comes with limited support for soft-delete operations. What I mean by limited is that the testing is still limited and the soft delete functionality is changing in the upcoming 4.2 version of the framework, so use this feature wisely. For now, you may consider a safe restore() operation to be one of: Restoring a leaf node Restoring a whole sub-tree in which the parent is not soft-deleted Seeding/Mass-assignment Because Nested Set structures usually involve a number of method calls to build a hierarchy structure (which result in several database queries), Baum provides two convenient methods which will map the supplied array of node attributes and create a hierarchy tree from them: buildTree($nodeList): (static method) Maps the supplied array of node attributes into the database. makeTree($nodeList): (instance method) Maps the supplied array of node attributes into the database using the current node instance as the parent for the provided subtree. Both methods will create new nodes when the primary key is not supplied, update or create if it is, and delete all nodes which are not present in the affecting scope. Understand that the affecting scope for the buildTree static method is the whole nested set tree and for the makeTree instance method are all of the current node's descendants. For example, imagine we wanted to map the following category hierarchy into our database: TV & Home Theater Tablets & E-Readers Computers Laptops PC Laptops Macbooks (Air/Pro) Desktops Monitors Cell Phones This could be easily accomplished with the following code: $categories = [   ['id' => 1, 'name' => 'TV & Home Theather'],   ['id' => 2, 'name' => 'Tablets & E-Readers'],   ['id' => 3, 'name' => 'Computers', 'children' => [     ['id' => 4, 'name' => 'Laptops', 'children' => [       ['id' => 5, 'name' => 'PC Laptops'],       ['id' => 6, 'name' => 'Macbooks (Air/Pro)']     ]],     ['id' => 7, 'name' => 'Desktops'],     ['id' => 8, 'name' => 'Monitors']   ]],   ['id' => 9, 'name' => 'Cell Phones'] ];  Category::buildTree($categories) // => true After that, we may just update the hierarchy as needed: $categories = [   ['id' => 1, 'name' => 'TV & Home Theather'],   ['id' => 2, 'name' => 'Tablets & E-Readers'],   ['id' => 3, 'name' => 'Computers', 'children' => [     ['id' => 4, 'name' => 'Laptops', 'children' => [       ['id' => 5, 'name' => 'PC Laptops'],       ['id' => 6, 'name' => 'Macbooks (Air/Pro)']     ]],     ['id' => 7, 'name' => 'Desktops', 'children' => [       // These will be created       ['name' => 'Towers Only'],       ['name' => 'Desktop Packages'],       ['name' => 'All-in-One Computers'],       ['name' => 'Gaming Desktops']     ]]     // This one, as it's not present, will be deleted     // ['id' => 8, 'name' => 'Monitors'],   ]],   ['id' => 9, 'name' => 'Cell Phones'] ];  Category::buildTree($categories); // => true The makeTree instance method works in a similar fashion. The only difference is that it will only perform operations on the descendants of the calling node instance. So now imagine we already have the following hierarchy in the database: Electronics Health Fitness & Beaty Small Appliances Major Appliances If we execute the following code: $children = [   ['name' => 'TV & Home Theather'],   ['name' => 'Tablets & E-Readers'],   ['name' => 'Computers', 'children' => [     ['name' => 'Laptops', 'children' => [       ['name' => 'PC Laptops'],       ['name' => 'Macbooks (Air/Pro)']     ]],     ['name' => 'Desktops'],     ['name' => 'Monitors']   ]],   ['name' => 'Cell Phones'] ];  $electronics = Category::where('name', '=', 'Electronics')->first(); $electronics->makeTree($children); // => true Would result in: Electronics TV & Home Theater Tablets & E-Readers Computers Laptops PC Laptops Macbooks (Air/Pro) Desktops Monitors Cell Phones Health Fitness & Beaty Small Appliances Major Appliances Updating and deleting nodes from the subtree works the same way. Misc/Utility functions Node extraction query scopes Baum provides some query scopes which may be used to extract (remove) selected nodes from the current results set. withoutNode(node): Extracts the specified node from the current results set. withoutSelf(): Extracts itself from the current results set. withoutRoot(): Extracts the current root node from the results set. $node = Category::where('name', '=', 'Some category I do not want to see.')->first();  $root = Category::where('name', '=', 'Old boooks')->first(); var_dump($root->descendantsAndSelf()->withoutNode($node)->get()); ... // <- This result set will not contain $node Get a nested list of column values The ::getNestedList() static method returns a key-value pair array indicating a node's depth. Useful for silling select elements, etc. It expects the column name to return, and optionally: the column to use for array keys (will use id if none supplied) and/or a separator: public static function getNestedList($column, $key = null, $seperator = ' '); An example use case: $nestedList = Category::getNestedList('name'); // $nestedList will contain an array like the following: // array( // 1 => 'Root 1', // 2 => ' Child 1', // 3 => ' Child 2', // 4 => ' Child 2.1', // 5 => ' Child 3', // 6 => 'Root 2' // ); Further information You may find additional information, usage examples and/or frequently asked questions about Baum in the wiki. Feel free to browse the wiki after finishing this README: https://github.com/etrepat/baum/wiki Contributing Thinking of contributing? Maybe you've found some nasty bug? That's great news! Fork & clone the project: git clone git@github.com:your-username/baum.git. Run the tests and make sure that they pass with your setup: phpunit. Create your bugfix/feature branch and code away your changes. Add tests for your changes. Make sure all the tests still pass: phpunit. Push to your fork and submit new a pull request. Please see the CONTRIBUTING.md file for extended guidelines and/or recommendations. License Baum is licensed under the terms of the MIT License (See LICENSE file for details). Coded by Estanislau Trepat (etrepat). I'm also @etrepat on twitter. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/etrepat/baum"	"A nested set implementation for Eloquent."	"true"
"Database"	"Cake ORM"	"https://github.com/cakephp/orm"	"Object-Relational Mapper, implemented using the DataMapper pattern (CP)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"108"	"28"	"7"	"GitHub - cakephp/orm: [READ-ONLY] A flexible, lightweight and powerful Object-Relational Mapper for PHP, implemented using the DataMapper pattern. This repo is a split of the main code that can be found in https://github.com/cakephp/cakephp Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 108 Fork 7 cakephp/orm Code Issues 2 Pull requests 0 Pulse Graphs [READ-ONLY] A flexible, lightweight and powerful Object-Relational Mapper for PHP, implemented using the DataMapper pattern. This repo is a split of the main code that can be found in https://github.com/cakephp/cakephp 1,337 commits 7 branches 46 releases 62 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3-0 3-1 3.next 3.0 3.1 3.2 master Nothing to show 3.3.0-beta 3.2.12 3.2.11 3.2.10 3.2.9 3.2.8 3.2.7 3.2.6 3.2.5 3.2.4 3.2.3 3.2.2 3.2.1 3.2.0 3.2.0-RC1 3.1.13 3.1.10 3.1.9 3.1.8 3.1.7 3.1.6 3.1.5 3.1.4 3.1.3 3.1.2 3.1.1 3.1.0 3.1.0-beta2 3.1.0-beta 3.1.0-RC1 3.0.18 3.0.15 3.0.13 3.0.12 3.0.11 3.0.10 3.0.9 3.0.8 3.0.7 3.0.6 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 Nothing to show New pull request Latest commit 7ceaaee Jun 30, 2016 thinkingmedia adds incase lookup for type Permalink Failed to load latest commit information. Association Only propagate the connection on automodels. Jun 22, 2016 Behavior Add space before operators Jun 15, 2016 Exception Update copyright statements in docblocks Jan 12, 2015 Locator Update docs for TableLocator::get(). Feb 15, 2016 Rule Don't use empty() Jun 20, 2016 Association.php Association formatter should not invoke the entity get method Jun 22, 2016 AssociationCollection.php adds incase lookup for type Jun 30, 2016 AssociationsNormalizerTrait.php Cast values before iterating. Feb 17, 2015 Behavior.php Add afterSaveCommit and afterDeleteCommit callbacks to behaviours Oct 29, 2015 BehaviorRegistry.php Make all doc block classes FQCN as per CS. Feb 2, 2016 EagerLoadable.php Fixed some issues found by scrutinizer Dec 6, 2015 EagerLoader.php Run sniffer to auto-fix default params into doc blocks. Mar 11, 2016 Entity.php Merge branch 'faster-entities' into 3.2 Jan 18, 2016 LICENSE.txt Adds license file for ORM subtree split Feb 9, 2016 LazyEagerLoader.php fix some typos and links Mar 6, 2016 Marshaller.php Consistently read the PK from the table (instead of the schema). May 31, 2016 Query.php Mention `finder` option in the `Query::contain` docs. Jun 11, 2016 README.md Indicate the support for the Oracle driver in the ORM README Apr 9, 2016 ResultSet.php Make all doc block classes FQCN as per CS. Feb 2, 2016 RulesChecker.php phpcs and doc block fixes. Apr 27, 2016 Table.php changed to += Jun 28, 2016 TableRegistry.php Run sniffer to auto-fix default params into doc blocks. Mar 10, 2016 composer.json Update minimum requirements for cakephp/orm. Fixes cakephp/orm#10 Apr 22, 2016 README.md CakePHP ORM The CakePHP ORM provides a powerful and flexible way to work with relational databases. Using a datamapper pattern the ORM allows you to manipulate data as entities allowing you to create expressive domain layers in your applications. Database engines supported The CakePHP ORM is compatible with: MySQL 5.1+ Postgres 8+ SQLite3 SQLServer 2008+ Oracle (through a community plugin) Connecting to the Database The first thing you need to do when using this library is register a connection object. Before performing any operations with the connection, you need to specify a driver to use: use Cake\Datasource\ConnectionManager;  ConnectionManager::config('default', [     'className' => 'Cake\Database\Connection',     'driver' => 'Cake\Database\Driver\Mysql',     'database' => 'test',     'username' => 'root',     'password' => 'secret',     'cacheMetaData' => false // If set to `true` you need to install the optional ""cakephp/cache"" package. ]); Once a 'default' connection is registered, it will be used by all the Table mappers if no explicit connection is defined. Creating Associations In your table classes you can define the relations between your tables. CakePHP's ORM supports 4 association types out of the box: belongsTo - E.g. Many articles belong to a user. hasOne - E.g. A user has one profile hasMany - E.g. A user has many articles belongsToMany - E.g. An article belongsToMany tags. You define associations in your table's initialize() method. See the documentation for complete examples. Reading Data Once you've defined some table classes you can read existing data in your tables: use Cake\ORM\TableRegistry;  $articles = TableRegistry::get('Articles'); foreach ($articles->find() as $article) {     echo $article->title; } You can use the query builder to create complex queries, and a variety of methods to access your data. Saving Data Table objects provide ways to convert request data into entities, and then persist those entities to the database: use Cake\ORM\TableRegistry;  $data = [     'title' => 'My first article',     'body' => 'It is a great article',     'user_id' => 1,     'tags' => [         '_ids' => [1, 2, 3]     ],     'comments' => [         ['comment' => 'Good job'],         ['comment' => 'Awesome work'],     ] ];  $articles = TableRegistry::get('Articles'); $article = $articles->newEntity($data, [     'associated' => ['Tags', 'Comments'] ]); $articles->save($article, [     'associated' => ['Tags', 'Comments'] ]) The above shows how you can easily marshal and save an entity and its associations in a simple & powerful way. Consult the ORM documentation for more in-depth examples. Deleting Data Once you have a reference to an entity, you can use it to delete data: $articles = TableRegistry::get('Articles'); $article = $articles->get(2); $articles->delete($article); Additional Documentation Consult the CakePHP ORM documentation for more in-depth documentation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cakephp/orm"	"Object-Relational Mapper, implemented using the DataMapper pattern (CP)."	"true"
"Database"	"Doctrine Extensions"	"https://github.com/Atlantic18/DoctrineExtensions"	"A collection of Doctrine behavioural extensions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1614"	"91"	"805"	"GitHub - Atlantic18/DoctrineExtensions: Doctrine2 behavioral extensions, Translatable, Sluggable, Tree-NestedSet, Timestampable, Loggable, Sortable Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 91 Star 1,614 Fork 805 Atlantic18/DoctrineExtensions Code Issues 312 Pull requests 57 Wiki Pulse Graphs Doctrine2 behavioral extensions, Translatable, Sluggable, Tree-NestedSet, Timestampable, Loggable, Sortable http://atlantic18.github.io/DoctrineExtensions/ 1,991 commits 9 branches 37 releases 312 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.2.x gh-pages master phpunit test-1064 trans-inheritance travis-mongo v2.4.x wip-v2.4.0 Nothing to show v2.4.17 v2.4.16 v2.4.15 v2.4.14 v2.4.13 v2.4.12 v2.4.11 v2.4.10 v2.4.9 v2.4.8 v2.4.7 v2.4.6 v2.4.5 v2.4.4 v2.4.3 v2.4.2 v2.4.1 v2.4.0 v2.3.12 v2.3.11 v2.3.10 v2.3.9 v2.3.8 v2.3.7 v2.3.6 v2.3.5 v2.3.4 v2.3.3 v2.3.2 v2.3.1 v2.3.0 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.1.1 v2.1.0 Nothing to show New pull request Latest commit bbfd0af Jul 14, 2016 l3pp4rd committed on GitHub Merge pull request #1631 from vbartusevicius/master … Recognize ""translatable"" in ""attribute-overrides"" Permalink Failed to load latest commit information. doc Support for Symfony 2.6 and above Jul 8, 2016 example close #1510 Jan 21, 2016 lib/Gedmo Recognize `gedmo:translatable` in `attribute-overrides` Jul 14, 2016 schemas/orm sortable - outdated pull request fixes Mar 7, 2016 tests php 7 support ODM through custom composer.json Jul 3, 2016 .gitattributes [git] Add .gitattributes to remove unneeded files Mar 30, 2016 .gitignore use couscous to generate documentation site and host xsd Mar 1, 2016 .travis.yml php 7 support ODM through custom composer.json Jul 3, 2016 LICENSE add upgrade guide, updating xml xsd mapping schema location Mar 8, 2016 Makefile use couscous to generate documentation site and host xsd Mar 1, 2016 README.md update readme Jul 3, 2016 UPGRADE-3.0.md add upgrade guide, updating xml xsd mapping schema location Mar 8, 2016 composer.json php 7 support ODM through custom composer.json Jul 3, 2016 composer7.json php 7 support ODM through custom composer.json Jul 3, 2016 couscous.yml use couscous to generate documentation site and host xsd Mar 1, 2016 README.md Doctrine2 behavioral extensions Version 3.0.0 Note: Extensions 3.0.x are compatible with ORM and doctrine common libraries from 2.5.x and requires PHP 5.4 or higher. Extensions 2.4.x are compatible with ORM and doctrine common library versions from 2.2.x to 2.5.x Since the author has stopped working with PHP, looking for maintainers to ensure stability of doctrine extensions. Latest updates 2016-01-27 Nested tree now allows root field as association. Sortable supports more than one sortable field per entity, has BC changes. Uploadable supports more than one file per entity, may have implicit BC change if users have used their custom FilenameGeneratorInterface see #1342. 2015-12-27 From now on, extensions will require php 5.4 or higher. All trait column names will refer to naming strategy and won't be explicitly set by extensions. Tree repositories are now using traits, for easier extensions. Extensions and Documentation This package contains extensions for Doctrine2 that hook into the facilities of Doctrine and offer new functionality or tools to use Doctrine2 more efficiently. This package contains mostly used behaviors which can be easily attached to your event system of Doctrine2 and handle the records being flushed in the behavioral way. List of extensions: Tree - this extension automates the tree handling process and adds some tree specific functions on repository. (closure, nestedset or materialized path) Translatable - gives you a very handy solution for translating records into different languages. Easy to setup, easier to use. Sluggable - urlizes your specified fields into single unique slug Timestampable - updates date fields on create, update and even property change. Blameable - updates string or reference fields on create, update and even property change with a string or object (e.g. user). Loggable - helps tracking changes and history of objects, also supports version management. Sortable - makes any document or entity sortable Translator - explicit way to handle translations SoftDeleteable - allows to implicitly remove records Uploadable - provides file upload handling in entity fields References - supports linking Entities in Documents and vice versa ReferenceIntegrity - constrains ODM MongoDB Document references IpTraceable - inherited from Timestampable, sets IP address instead of timestamp Currently these extensions support Yaml, Annotation and Xml mapping. Note: Please note, that xml mapping needs to be in a different namespace, the declared namespace for Doctrine extensions is doctrine-extensions.xsd So root node now looks like this: <doctrine-mapping xmlns=""http://doctrine-project.org/schemas/orm/doctrine-extensions.xsd""                  xmlns:gedmo=""http://Atlantic18.github.io/DoctrineExtensions/schemas/orm/doctrine-extensions.xsd""> ... </doctrine-mapping> XML mapping xsd schemas are also versioned and can be used by version suffix: Latest version - http://Atlantic18.github.io/DoctrineExtensions/schemas/orm/doctrine-extensions.xsd 2.4.x version - http://Atlantic18.github.io/DoctrineExtensions/schemas/orm/doctrine-extensions-2.4.xsd 3.0.x version - http://Atlantic18.github.io/DoctrineExtensions/schemas/orm/doctrine-extensions-3.0.xsd ODM MongoDB support List of extensions which support ODM Translatable Sluggable Timestampable Blameable Loggable Translator Tree (Materialized Path strategy for now) References ReferenceIntegrity All these extensions can be nested together and mapped in traditional ways - annotations, xml or yaml Running the tests: pdo-sqlite extension is necessary. To setup and run tests follow these steps: install dev libraries: composer install run: bin/phpunit -c tests optional - run mongodb service if targeting mongo tests NOTE: if php7 is used with mongodb install extension and dependencies using composer7.json. This is a temporary hack until the better ODM support is available. Running the example: To setup and run example follow these steps: go to the root directory of extensions install dev libraries: composer install edit example/em.php and configure your database on top of the file run: ./example/bin/console or php example/bin/console for console commands run: ./example/bin/console orm:schema-tool:create to create schema run: php example/run.php to run example Contributors: NOTE: composer7.json is only used to test extensions with ODM mongodb using php7, same for travis. Thanks to everyone participating in the development of these great Doctrine2 extensions! And especially ones who create and maintain new extensions: Lukas Botsch lbotsch Gustavo Adrian comfortablynumb Boussekeyt Jules gordonslondon Kudryashov Konstantin everzet David Buchmann dbu Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Atlantic18/DoctrineExtensions"	"A collection of Doctrine behavioural extensions."	"true"
"Database"	"Doctrine"	"http://www.doctrine-project.org/"	"A comprehensive DBAL and ORM."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Home — Doctrine Project Doctrine - PHP Database Libraries Home About Projects Contribute Community Blog Development Welcome to the Doctrine Project The Doctrine Project is the home to several PHP libraries primarily focused on database storage and object mapping. The core projects are a Object Relational Mapper (ORM) and the Database Abstraction Layer (DBAL) it is built upon. Doctrine has greatly benefited from concepts of the Hibernate ORM and has adapted them to fit the PHP language. Why use Doctrine? Around since 2006 with very stable, high-quality codebase. Extremely flexible and powerful object-mapping and query features. Support for both high-level and low-level database programming for all your use-cases. Large Community and integrations with many different frameworks (Symfony, Zend Framework, CodeIgniter, Flow, Lithium and more) Latest Blog Posts Doctrine MongoDB ODM release 1.0.5 (Feb 16) DoctrineModule 1.0.0 we have a stable release (Feb 02) Doctrine DBAL 2.5.4 and 2.4.5 Released (Jan 05) Doctrine ORM 2.5.4 Released (Jan 05) Cache 1.6.0 Released (Dec 31) Read older blog posts Projects Object-Relational Mapper (ORM) Database Abstraction Layer (DBAL) MongoDB Document Mapper PHPCR Document Mapper Common Libraries More Projects © Copyright 2006-2016, Doctrine Team."	"null"	"null"	"A comprehensive DBAL and ORM."	"true"
"Database"	"Eloquent"	"https://github.com/illuminate/database"	"A simple ORM (L5)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"792"	"78"	"233"	"GitHub - illuminate/database: [READ ONLY] Subtree split of the Illuminate Database component (see laravel/framework) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 78 Star 792 Fork 233 illuminate/database Code Pull requests 11 Pulse Graphs [READ ONLY] Subtree split of the Illuminate Database component (see laravel/framework) 2,897 commits 8 branches 94 releases 358 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 4.0 4.1 4.2 5.0 5.1 5.2 5.3 master Nothing to show v5.2.37 v5.2.32 v5.2.31 v5.2.28 v5.2.27 v5.2.26 v5.2.25 v5.2.24 v5.2.21 v5.2.19 v5.2.7 v5.2.6 v5.2.0 v5.1.31 v5.1.30 v5.1.28 v5.1.25 v5.1.22 v5.1.20 v5.1.16 v5.1.13 v5.1.8 v5.1.6 v5.1.2 v5.1.1 v5.0.33 v5.0.28 v5.0.27 v5.0.26 v5.0.25 v5.0.22 v5.0.4 v5.0.0 v4.2.17 v4.2.16 v4.2.12 v4.2.9 v4.2.8 v4.2.7 v4.2.6 v4.2.5 v4.2.4 v4.2.3 v4.2.2 v4.2.1 v4.2.0-BETA1 v4.1.30 v4.1.29 v4.1.28 v4.1.27 v4.1.26 v4.1.25 v4.1.24 v4.1.23 v4.1.22 v4.1.21 v4.1.20 v4.1.19 v4.1.18 v4.1.17 v4.1.16 v4.1.15 v4.1.14 v4.1.13 v4.1.12 v4.1.11 v4.1.10 v4.1.9 v4.1.8 v4.1.7 v4.1.6 v4.1.5 v4.1.4 v4.1.3 v4.1.2 v4.1.1 v4.1.0 v4.0.10 v4.0.9 v4.0.8 v4.0.7 v4.0.6 v4.0.5 v4.0.4 v4.0.3 v4.0.2 v4.0.1 v4.0.0 v4.0.0-BETA4 v4.0.0-BETA3 v4.0.0-BETA2 v1.1.1 v1.1.0 v1.0.0 Nothing to show New pull request Latest commit c2a8fb9 Jul 15, 2016 GrahamCampbell Merge branch '5.3' Permalink Failed to load latest commit information. Capsule fix comment Jun 19, 2016 Connectors Merge branch '5.2' into 5.3 Jul 6, 2016 Console Fix import Jun 28, 2016 Eloquent [5.3] Use connection name in determining model equality (#14316) Jul 15, 2016 Events Fix docblock @var typo Mar 6, 2016 Migrations Import Schema facade by default. Jul 14, 2016 Query Merge branch '5.2' into 5.3 Jul 7, 2016 Schema [5.3] Double cuotes changed to simple quotes, and some variables sorr… Jun 26, 2016 Connection.php fix conflicts Jun 29, 2016 ConnectionInterface.php Remove comments Oct 23, 2015 ConnectionResolver.php Additional cs fixes Jun 1, 2015 ConnectionResolverInterface.php Fix typehint Jul 15, 2015 DatabaseManager.php Return sqlsrv in place of dblib driver Dec 11, 2015 DatabaseServiceProvider.php Add database connection to DI container Nov 12, 2015 DetectsLostConnections.php fix coding style Mar 22, 2016 Grammar.php [5.1] Fix phpdoc inconsistencies Dec 28, 2015 MigrationServiceProvider.php move migration make command Dec 6, 2015 MySqlConnection.php Fixed docblocks Aug 26, 2015 PostgresConnection.php Revert ""Revert ""Fix postgres Schema::hastable (#13008)"""" Jun 6, 2016 QueryException.php Use Str method rather than helper Feb 12, 2016 README.md Tabs to spaces Jun 1, 2015 SQLiteConnection.php Fixed docblocks Aug 26, 2015 SeedServiceProvider.php Remove unused import Sep 11, 2015 Seeder.php Make Seeder and its run() method abstract Oct 14, 2015 SqlServerConnection.php Add missing throws docblocks. Jan 13, 2016 composer.json Make the master branch L5.4 (#13812) Jun 1, 2016 README.md Illuminate Database The Illuminate Database component is a full database toolkit for PHP, providing an expressive query builder, ActiveRecord style ORM, and schema builder. It currently supports MySQL, Postgres, SQL Server, and SQLite. It also serves as the database layer of the Laravel PHP framework. Usage Instructions First, create a new ""Capsule"" manager instance. Capsule aims to make configuring the library for usage outside of the Laravel framework as easy as possible. use Illuminate\Database\Capsule\Manager as Capsule;  $capsule = new Capsule;  $capsule->addConnection([     'driver'    => 'mysql',     'host'      => 'localhost',     'database'  => 'database',     'username'  => 'root',     'password'  => 'password',     'charset'   => 'utf8',     'collation' => 'utf8_unicode_ci',     'prefix'    => '', ]);  // Set the event dispatcher used by Eloquent models... (optional) use Illuminate\Events\Dispatcher; use Illuminate\Container\Container; $capsule->setEventDispatcher(new Dispatcher(new Container));  // Make this Capsule instance available globally via static methods... (optional) $capsule->setAsGlobal();  // Setup the Eloquent ORM... (optional; unless you've used setEventDispatcher()) $capsule->bootEloquent(); composer require ""illuminate/events"" required when you need to use observers with Eloquent. Once the Capsule instance has been registered. You may use it like so: Using The Query Builder $users = Capsule::table('users')->where('votes', '>', 100)->get(); Other core methods may be accessed directly from the Capsule in the same manner as from the DB facade: $results = Capsule::select('select * from users where id = ?', array(1)); Using The Schema Builder Capsule::schema()->create('users', function($table) {     $table->increments('id');     $table->string('email')->unique();     $table->timestamps(); }); Using The Eloquent ORM class User extends Illuminate\Database\Eloquent\Model {}  $users = User::where('votes', '>', 1)->get(); For further documentation on using the various database facilities this library provides, consult the Laravel framework documentation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/illuminate/database"	"A simple ORM (L5)."	"true"
"Database"	"LazyRecord"	"https://github.com/c9s/LazyRecord"	"A fast ORM designed for simplicity, extendability and performance."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"167"	"13"	"17"	"GitHub - corneltek/LazyRecord: The Fast ORM for PHP. LazyRecord is designed for simplicity, extendability and performance. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 167 Fork 17 corneltek/LazyRecord Code Issues 110 Pull requests 0 Wiki Pulse Graphs The Fast ORM for PHP. LazyRecord is designed for simplicity, extendability and performance. 5,855 commits 9 branches 91 releases 8 contributors PHP 99.5% Other 0.5% PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.0 3.1 develop gh-pages master refactoring/primary-key refactoring/relationship reference-query revision-modal Nothing to show 3.4.1 3.4.0 3.3.2 3.3.1 3.3.0 3.2.0 3.1.3 3.1.2 3.1.1 3.1.0 3.0.1 3.0.0 3.0.x-dev-20151201 2.2.4 2.2.3 2.2.2 2.2.1 2.2.0 2.1.6 2.1.5 2.1.4 2.1.3 2.1.2 2.1.1 2.1.0 2.0.2 2.0.1 2.0.0 1.18.5 1.18.4 1.18.3 1.18.2 1.18.1 1.18.0 1.17.0 1.16.2 1.16.1 1.16.0 1.15.0 1.14.8 1.14.7 1.14.6 1.14.5 1.14.4 1.14.3 1.14.2 1.14.1 1.14.0 1.13.5 1.13.4 1.13.3 1.13.2 1.13.1 1.13.0 1.12.6 1.12.5 1.12.4 1.12.3 1.12.2 1.12.1 1.12.0 1.11.13 1.11.12 1.11.11 1.11.10 1.11.9 1.11.8 1.11.7 1.11.6 1.11.5 1.11.4 1.11.3 1.11.2 1.11.1 1.11.0 1.10.5 1.8.9 1.8.8 1.8.6 1.8.5 1.8.4 1.8.3 1.8.1 1.8.0 1.7.6 1.7.5 1.7.4 1.7.3 1.7.0 1.2.0 1.1.11 Nothing to show New pull request Latest commit 4943f0a Jul 14, 2016 c9s Add toInflatedArray method to BaseCollection Permalink Failed to load latest commit information. assets/images Add migration generator gif Jun 18, 2016 benchmarks Move TestApp schema to tests/ Feb 10, 2015 bin style update Jul 31, 2015 completion/zsh Checking in changes prior to tagging of version 2.2.4. Oct 8, 2015 db/config codegen: implement find method generator Oct 26, 2015 doc schema proxy: upper case constant names Oct 26, 2015 examples/todos schema proxy: upper case constant names Oct 26, 2015 pdo Enable debug mode Jul 30, 2015 plans update todo.md Nov 27, 2013 scripts Support xhprof profiler integration Oct 26, 2015 src Add toInflatedArray method to BaseCollection Jul 14, 2016 tests sql builder is already tested in BaseTestCase Jun 27, 2016 .gitignore Update ignore list Jun 17, 2016 .travis.yml Remove phpunit-travis-ci.xml Jun 17, 2016 CHANGELOG.md Fix book app tests Jun 14, 2016 Doxyfile no doc warnings Sep 1, 2012 LICENSE Update License Sep 13, 2012 README.md Update README.md Jun 22, 2016 TODO.md Add TODO.md Apr 7, 2013 UPGRADE.md Rename Relationship::order() method to Relationship::orderBy() Feb 10, 2015 build.xml Add composer step May 3, 2013 composer.json bump version to 3.4.x Jun 27, 2016 lazy Add queryDriver to Bootstrap Jun 26, 2016 phpdox.xml add ant-build.xml May 29, 2012 phprelease.ini Add scripts/update-completion to phprelease.ini Sep 29, 2014 phpunit-ci.xml Update phpunit-ci.xml config Aug 1, 2015 phpunit.xml.dist Ignore command tests since it modifies the configloader instance Jun 20, 2016 README.md LazyRecord LazyRecord is an open-source Object-Relational Mapping (ORM) for PHP5. LazyRecord uses code generator to generate static code, which reduces runtime costs, therefore it's pretty lightweight and fast. It allows you to access your database very easily by using ActiveRecord pattern API. LazyRecord is not like PropelORM, it doesn't use ugly XML as its schema or config file, LazyRecord uses simpler YAML format config file and it compiles YAML to pure PHP code to improve the performance of config loading. With the simple schema design, you can define your model schema very easily and you can even embed closure in your schema classes. See also LazyRecord: The Fast ORM for PHP View more presentations from Yo-An Lin Automatic Migration Demonstration Feature Fast & Simple Configuration based on YAML format and compiled into PHP PDO, MySQL, Pgsql, SQLite support. Multiple data sources. Mix-in model. Powerful Migration Generator Upgrade & Downgrade of course. Automatic Migration: generate migration SQL automatically based on the schema diff. Schema/Database diff Design Concept Function calls in PHP are very slow, so the model schema data will be built statically, LazyRecord converts all definitions (default value, validator, filter, valid value builder) into classes and static PHP array, this keeps these model classes very lightweight and fast. In the runtime, all the same model objects use the same schema object, and we can reuse the prebuild data from the static schema class. We keep base model class constructor empty, so when you are querying data from database, these model objects can be created with zero effort. Installation Please see the details on Wiki Getting Started Configuring Database Change directory to your project, run init command to initialize your database settings. composer require corneltek/lazyrecord ""^3"" If you prefer something new, you can require ""dev-master"" composer require corneltek/lazyrecord ""dev-master"" Then create your config file: $ vim db/config/database.yml Suppose your application code is located in src/ directory, then you should provide your schema path in following format: --- bootstrap: - vendor/autoload.php # load the classloader from composer. schema:   auto_id: 1   paths:     - src/ # where you store the schema class files. data_sources:   default: master   nodes:     master:       dsn: 'sqlite:test' In the above config file, the auto_id means an id column with auto-increment integer primary key is automatically inserted into every schema class, so you don't need to declare an primary key id column in your every schema file. Writing Model Schema Next, write your model schema file: $ vim src/YourApp/Model/UserSchema.php Put the content into your file: namespace YourApp\Model; use LazyRecord\Schema;  class UserSchema extends Schema {     public function schema()     {         $this->column('account')             ->varchar(16);         $this->column('password')             ->varchar(40)             ->filter('sha1');     } } Building Static Schema Files Then run build-schema command to build static schema files: $ vendor/bin/lazy lazy schema build Finding schemas... Found schema classes Initializing schema generator...     YourApp\Model\UserSchemaProxy    => src/YourApp/Model/UserSchemaProxy.php     YourApp\Model\UserCollectionBase => src/YourApp/Model/UserCollectionBase.php     YourApp\Model\UserCollection     => src/YourApp/Model/UserCollection.php     YourApp\Model\UserBase           => src/YourApp/Model/UserBase.php     YourApp\Model\User               => src/YourApp/Model/User.php Done Creating Database If you are using postgresql or mysql, you can create your database with create-db command: $ php vendor/bin/lazy db create Building SQL From Model Schemas Now you need to build SQL schema into your database, simply run build-sql, -d is for debug mode, which prints all generated SQL statements: $ php vendor/bin/lazy sql Finding schema classes... Initialize schema builder... Building SQL for YourApp\Model\UserSchema DROP TABLE IF EXISTS users; CREATE TABLE users (    account varchar(16),   password varchar(40) );  Setting migration timestamp to 1347439779 Done. 1 schema tables were generated into data source 'default'. Writing Application Code Now you can write your application code, But first you need to write your lazyrecord config loader code: $ vim app.php  require 'vendor/autoload.php'; $config = new LazyRecord\ConfigLoader; $config->load( __DIR__ . '/db/config/database.yml'); $config->init(); The init method initializes data sources to ConnectionManager, but it won't create connection unless you need to operate your models. Sample Code Of Operating The User Model Object Now append your application code to the end of app.php file: $user = new YourApp\Model\User; $ret = $user->create(array('account' => 'guest', 'password' => '123123' )); if ($ret->error ) {     echo $ret->message;  // get the error message     if ($ret->exception) {         echo $ret->exception;  // get the exception object     }     echo $ret; // __toString() is supported } Please check doc/ directory for more details. Basic Usage Model Accessor LazyRecord's BaseModel class provides a simple way to retrieve result data from the __get magic method, by using the magic method, you can retrieve the column value and objects from relationship. $record = new MyApp\Model\User( 1 );   // select * from users where id = 1; $record->name;    // get ""users.name"" and inflate it. The __get method is dispatching to get method, if you don't want to use the magic method, $record->get('name'); The magic method calls value inflator, which can help you inflate values like DateTime objects, it might be slower, if you want performance, you can simply do: $record->getValue('name'); BaseModel also supports iterating, so you can iterate the data values with foreach: foreach( $record as $column => $rawValue ) {  } Model Operation To create a model record: $author = new Author; $ret = $author->create(array(     'name' => 'Foo' )); if ( $ret->success ) {     echo 'created'; } To find record: $ret = $author->find(123); $ret = $author->find(array( 'foo' => 'Name' )); if ( $ret->success ) {  } else {     // handle $ret->exception or $ret->message } To find record with (static): $record = Author::load(array( 'name' => 'Foo' )); To find record with primary key: $record = Author::load( 1 ); To update record: $author->update(array(       'name' => 'Author', )); To update record (static): $ret = Author::update( array( 'name' => 'Author' ) )     ->where()         ->equal('id',3)         ->execute();  if( $ret->success ) {     echo $ret->message; } else {     // pretty print error message, exception and validation errors for console     echo $ret;      $e = $ret->exception; // get exception     $validations = $ret->validations; // get validation results } Collection To create a collection object: $authors = new AuthorCollection; To make a query (the Query syntax is powered by SQLBuilder): $authors->where()     ->equal( 'id' , 'foo' )     ->like( 'content' , '%foo%' ); Or you can do: $authors->where(array(      'name' => 'foo' )); Iterating a Collection $authors = new AuthorCollection; foreach( $authors as $author ) {     echo $author->name; } Model Schema Defining Schema Class Simply extend class from LazyRecord\Schema, and define your model columns in the schema method, e.g., <?php namespace TestApp; use LazyRecord\Schema;  class BookSchema extends Schema {      public function schema()     {         $this->column('title')             ->unique()             ->varchar(128);          $this->column('subtitle')             ->varchar(256);          $this->column('isbn')             ->varchar(128)             ->immutable();          $this->column('description')             ->text();          $this->column('view')             ->default(0)             ->integer();          $this->column('publisher_id')             ->isa('int')             ->integer();          $this->column('published_at')             ->isa('DateTime')             ->timestamp();          $this->column('created_by')             ->integer()             ->refer('TestApp\UserSchema');           // Defining trait for model class         $this->addModelTrait('Uploader');         $this->addModelTrait('Downloader')             ->useInsteadOf('Downloader::a', 'Uploader');          $this->belongsTo('created_by', 'TestApp\UserSchema','id', 'created_by');          /**   * column: author => Author class   *  * $book->publisher->name;  *  **/         $this->belongsTo('publisher','\TestApp\PublisherSchema', 'id', 'publisher_id');          /**  * accessor , mapping self.id => BookAuthors.book_id  *  * link book => author_books  */         $this->many('book_authors', '\TestApp\AuthorBookSchema', 'book_id', 'id');           /**  * get BookAuthor.author   */         $this->manyToMany( 'authors', 'book_authors', 'author' )             ->filter(function($collection) { return $collection; });     } } Defining Column Types $this->column('foo')->integer(); $this->column('foo')->float(); $this->column('foo')->varchar(24); $this->column('foo')->text(); $this->column('foo')->binary(); Text: $this->column('name')->text(); Boolean: $this->column('name') ->boolean(); Integer: $this->column('name')->integer(); Timestamp: $this->column('name')->timestamp(); Datetime: $this->column('name')->datetime(); Defining Mixin Method namespace LazyRecord\Schema\Mixin; use LazyRecord\Schema\MixinDeclareSchema;  class MetadataMixinSchema extends MixinDeclareSchema {     public function schema()     {         // ... define your schema here     }      public function fooMethod($record, $arg1, $arg2, $arg3, $arg4)     {         // ...         return ...;     } } Then you can use the fooMethod on your model object: $record = new FooModal; $result = $record->fooMethod(1,2,3,4); Defining Model Relationship Belongs to belongsTo(accessor_name, foreign_schema_class_name, foreign_schema_column_name, self_column_name = 'id') $this->belongsTo( 'author' , '\TestApp\AuthorSchema', 'id' , 'author_id' ); $this->belongsTo( 'address' , '\TestApp\AddressSchema', 'address_id' ); Has One one(accessor_name, self_column_name, foreign_schema_class_name, foreign_schema_column_name) $this->one( 'author', 'author_id', '\TestApp\AuthorSchema' , 'id' ); Has Many many(accessor_name, foreign_schema_class_name, foreign_schema_column_name, self_column_name ) $this->many( 'addresses', '\TestApp\AddressSchema', 'author_id', 'id'); $this->many( 'author_books', '\TestApp\AuthorBookSchema', 'author_id', 'id'); To define many to many relationship: $this->manyToMany( 'books', 'author_books' , 'book' ); Usage: // has many $address = $author->addresses->create(array(      'address' => 'farfaraway' ));  $address->delete();  // create related address $author->addresses[] = array( 'address' => 'Harvard' );  $addresses = $author->addresses->items(); is( 'Harvard' , $addresses[0]->address );  foreach( $author->addresses as $address ) {     echo $address->address , ""\n""; } Do Some Preparation When Model Is Ready If you want to do something after the schmea is created into a database, you can define a bootstrap method in your schema class: namespace User; class UserSchema extends LazyRecord\Schema {      public function schema() {         // ...     }     public function bootstrap($model) {         // do something you want     } } The bootstrap method is triggerd when you run: lazy sql Using Multiple Data Source You can define specific data source for different model in the model schema: use LazyRecord\Schema; class UserSchema extends Schema {     public function schema() {         $this->writeTo('master');         $this->readFrom('slave');     } } Or you can specify for both (read and write): use LazyRecord\Schema; class UserSchema extends Schema {     public function schema() {         $this->using('master');     } } Defining BaseData Seed The basedata seed script is executed after you run build-sql, which means all of your tables are ready in the database. To define a basedata seed script: namespace User; class Seed {      public static function seed() {      } } Then update your config file by adding the class name of the data seed class: seeds:   - User\Seed   - System\Seed   - System\TestingSeed Migration If you need to modify schema code, like adding new columns to a table, you can use the amazing migration feature to migrate your database to the latest change without pain. Once you modified the schema code, you can execute lazy diff command to compare current exisiting database table: $ lazy diff + table 'authors'            tests/tests/Author.php + table 'addresses'          tests/tests/Address.php + table 'author_books'       tests/tests/AuthorBook.php + table 'books'              tests/tests/Book.php + table 'users'              tests/tests/User.php + table 'publishers'         tests/tests/Publisher.php + table 'names'              tests/tests/Name.php + table 'wines'              tests/tests/Wine.php  As you can see, we added a lot of new tables (schemas), and LazyRecord parses the database tables to show you the difference to let you know current status. Currently LazyRecord supports SQLite, PostgreSQL, MySQL table parsing. now you can generate the migration script or upgrade database schema directly. to upgrade database schema directly, you can simply run: $ lazy migrate auto  to upgrade database schema through a customizable migration script, you can generate a new migration script like: $ lazy migrate diff AddUserRoleColumn Loading schema objects... Creating migration script from diff Found 10 schemas to compare.     Found schema 'TestApp\AuthorSchema' to be imported to 'authors'     Found schema 'TestApp\AddressSchema' to be imported to 'addresses'     Found schema 'TestApp\AuthorBookSchema' to be imported to 'author_books'     Found schema 'TestApp\BookSchema' to be imported to 'books'     Found schema 'TestApp\UserSchema' to be imported to 'users'     Found schema 'TestApp\PublisherSchema' to be imported to 'publishers'     Found schema 'TestApp\NameSchema' to be imported to 'names'     Found schema 'TestApp\Wine' to be imported to 'wines' Migration script is generated: db/migrations/20120912_AddUserRoleColumn.php  now you can edit your migration script, which is auto-generated: vim db/migrations/20120912_AddUserRoleColumn.php  the migration script looks like: class AddUserColumn_1347451491  extends \LazyRecord\Migration\Migration {      public function upgrade() {          $this->importSchema(new TestApp\AuthorSchema);         $this->importSchema(new TestApp\AddressSchema);          // To upgrade with new schema:         $this->importSchema(new TestApp\AuthorBookSchema);          // To create index:         $this->createIndex($table,$indexName,$columnNames);          // To drop index:         $this->dropIndex($table,$indexName);          // To add a foreign key:         $this->addForeignKey($table,$columnName,$referenceTable,$referenceColumn = null)           // To drop table:         $this->dropTable('authors');     }      public function downgrade() {           $this->dropTable('authors');         $this->dropTable('addresses');      } } The built-in migration generator not only generates the upgrade script, but also generates the downgrade script, you can modify it to anything as you want. After the migration script is generated, you can check the status of current database and waiting migration scripts: $ lazy migrate status Found 1 migration script to be executed. - AddUserColumn_1347451491  now you can run upgrade command to upgrade database schema through the migration script: $ lazy migrate up  If you regret, you can run downgrade migrations through the command: $ lazy migrate down  But please note that SQLite doesn't support column renaming and column dropping. To see what migration script could do, please check the documentation of SQLBuilder package. Mix-In Schema ... Collection Filter The Built-in Collection Filter provide a powerful feature that helps you connect the backend collection filtering with your front-end UI by defining filter types, valid values from backend: use LazyRecord\CollectionFilter\CollectionFilter; $posts = new PostCollection; $filter = new CollectionFilter($posts);  $filter->defineEqual('status', [ 'published', 'draft' ]); // valid values are 'published', 'draft' $filter->defineContains('content'); $filter->defineRange('created_on', CollectionFilter::String ); $filter->defineInSet('created_by', CollectionFilter::Integer );  $collection = $filter->apply([      'status'     => 'published',   // get published posts     'content'    => ['foo', 'bar'],  // posts contains 'foo' and 'bar'     'created_on' => [ '2011-01-01', '2011-12-30' ], // posts between '2011-01-01' and '2011-12-30'     'created_by' => [1,2,3,4],  // created by member 1, 2, 3, 4 ]);  $collection = $filter->applyFromRequest('_filter_prefix_');  // use '_filter_' as the parameter prefix by default. $collection = $filter->applyFromRequest(); The generated SQL statement is like below: SELECT m.title, m.content, m.status, m.created_on, m.created_by, m.id FROM posts m  WHERE  (status = published OR status = draft) AND (content like %foo% OR content like %bar%) AND (created_on BETWEEN '2011-01-01' AND '2011-12-30') AND created_by IN (1, 2, 3, 4) Basedata Seed Setting up QueryDriver for SQL syntax $driver = LazyRecord\QueryDriver::getInstance('data_source_id'); $driver->configure('driver','pgsql'); $driver->configure('quote_column',true); $driver->configure('quote_table',true); A More Advanced Model Schema use LazyRecord\Schema;  class AuthorSchema extends Schema {     function schema()     {         $this->column('id')             ->integer()             ->primary()             ->autoIncrement();          $this->column('name')             ->varchar(128)             ->validator(function($val) { .... })             ->filter( function($val) {                           return preg_replace('#word#','zz',$val);               })             ->inflator(function($val) {                 return unserialize($val);             })             ->deflator(function($val) {                 return serialize($val);             })             ->validValues( 1,2,3,4,5 )             ->default(function() {                  return date('c');             })             ;          $this->column('email')             ->required()             ->varchar(128);          $this->column('confirmed')             ->default(false)             ->boolean();          $this->seeds('User\\Seed')     } } Documentation For the detailed content, please take a look at the doc/ directory. Contribution Everybody can contribute to LazyRecord. You can just fork it, and send Pull Requests. You have to follow PSR Coding Standards and provides unit tests as much as possible. Hacking Setting Up Environment Use Composer to install the dependency: composer install --prefer-source  To deploy a testing environment, you need to install dependent packages. Run script and make sure everything is fine: php bin/lazy  Database configuration is written in phpunit.xml file, the following steps are based on the default configuration. you may also take a look at .travis.yml for example. Unit Testing with MySQL database To test with mysql database: mysql -uroot -p  Enter the SQL to initialize a database: create database testing charset utf8; create user 'testing'@'localhost'; grant all privileges on testing.* to 'testing'@'localhost';  --- if you want password grant all privileges on testing.* to 'testing'@'localhost' identified by 'testing';  --- if you want to remove password for root user SET PASSWORD FOR root@localhost=PASSWORD('');  --- for mysql 5.7, you should run SET PASSWORD FOR root@localhost='';  Unit Testing with PostgreSQL database To test with pgsql database, you need to prepare database: sudo -u postgres createdb -E=utf8 testing  If you want to use a separated user, use the command below to create the pgsql user: sudo -u postgres createuser --no-createrole --no-superuser --no-password testing sudo -u postgres createdb -E=utf8 --owner=testing testing  If you've set password accidentally, remove user password by running the command below: > alter role postgres password null;  To connect pgsql with PDO, you need to configure your DSN for postgresql through socket like this: pgsql:host=localhost;dbname=testing  Command-line testing To test sql builder from command-line, please copy the default testing config $ cp db/config/database.testing.yml db/config/database.yml  Customize your phpunit.xml configuration: $ cp phpunit.xml.dist phpunit.xml  Build config $ php bin/lazy build-conf db/config/database.yml  Build Schema files php bin/lazy schema build  We've already defined 3 data sources, they were named as 'mysql', 'pgsql', 'sqlite' , now you can insert schema sqls into these data sources: bin/lazy sql --rebuild -D=mysql bin/lazy sql --rebuild -D=pgsql bin/lazy sql --rebuild -D=sqlite  Run PHPUnit $ phpunit  Profiling $ phpunit --group profile  Manipulating Schema Objects To get the model class name from a schema: $class = $schema->getModelClass(); To get the table name of a schema: $t = $schema->getTable(); To iterate the column objects, you may call getColumns, which returns the column objects in an associative array: foreach( $schema->getColumns() as $n => $c ) {     echo $c->name; // column name } PROFILING $ scripts/run-xhprof  OR $ phpunit -c phpunit-xhprof.xml $ cd xhprof_html $ php -S localhost:8888  LICENSE BSD License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/c9s/LazyRecord"	"A fast ORM designed for simplicity, extendability and performance."	"true"
"Database"	"Pomm"	"https://github.com/chanmix51/Pomm"	"An Object Model Manager for PostgreSQL."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"157"	"21"	"36"	"GitHub - chanmix51/Pomm: PHP Object Model Manager for Postgresql Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 157 Fork 36 chanmix51/Pomm Code Issues 0 Pull requests 1 Pulse Graphs PHP Object Model Manager for Postgresql 571 commits 4 branches 30 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 1.1 1.2 master Nothing to show rc4 rc3 rc2 rc1 beta4 beta3 beta2 beta1 1.3.0-RC1 1.2.2 1.2.1 1.2.0 1.2-RC3 1.2-RC2 1.2-RC1 1.1.5 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.1.0-RC2 1.1.0-RC1 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit 89f8b9f Oct 7, 2015 chanmix51 Update README about 2.0 Permalink Failed to load latest commit information. Pomm Pomm\Converter\PgPoint: fix typo on Pomm\Exception\Exception Nov 12, 2014 communicate/logo Did simple svg optim Mar 2, 2015 documentation Update documentation.rst Jul 15, 2014 licenses Code & copyright clean up Aug 25, 2013 tests Bug in *ByPk when no recored were returned. Nov 4, 2014 .gitignore Add composer things to gitignore Apr 8, 2013 .travis.yml Changed travis conf for master. Nov 17, 2014 .vimproject Added Service layer, WIP Aug 28, 2014 CHANGELOG VERSION 1.3.0-RC1 Nov 4, 2014 README.rst Update README about 2.0 Oct 7, 2015 VERSION Updated VERSION. Nov 4, 2014 composer.json branch alias in composer.json. Nov 17, 2014 phpunit.xml.dist Use composer autoloading for tests Apr 8, 2013 README.rst POMM: The PHP Object Model Manager for Postgresql This branch is in relase candidate. It will be noted stable soon. Please report any bugs. This is the last version of Pomm 1.x, the stable Pomm 2.0 is the new generation of Pomm Model Manager. What is Pomm ? Pomm is an open source Postgresql access framework for PHP. It is not an ORM, it is an Object Model Manager. Pomm offers an alternative approach than ORM to using database in object oriented web developments. Read more here. Pomm devel works with PHP 5.4 and Postgresql 9.0 and above. You can reach installation guide documentation code examples mailing list How to install Pomm ? The easy way: composer Using composer installer and autoloader is probably the easiest way to install Pomm and get it running. What you need is just a composer.json file in the root directory of your project: { ""require"": {     ""pomm/pomm"": ""master-dev""   } }  Invoking composer.phar will automagically download Pomm, install it in a vendor directory and set up the according autoloader. Using Pomm with a PHP framework Silex PommServiceProvider Symfony2 PommBundle With Silex, it is possible to bootstrap a kitchen sink using this gist <https://gist.github.com/chanmix51/3402026>, in an empty directory just issue the command: wget -O - 'https://gist.github.com/chanmix51/3402026/raw/3cf2125316687be6d3ab076e66f291b68b422ce7/create-pomm-silex.sh' | bash  And follow the instructions. How to contribute to Pomm ? That's very easy with github: Send feedback to @PommProject on twitter or by mail at <hubert DOT greg AT gmail DOT com> Report bugs (very appreciated) Fork and PR (very very appreciated) Send vacuum tubes to the author (actual preferred are russians 6Φ12Π, 6Ж43Π, 6Ж38Π, 6C19Π) Running tests psql -c 'CREATE DATABASE pomm_test' -U postgres -h 127.0.0.1 psql -c 'CREATE EXTENSION hstore' -U postgres -h 127.0.0.1 pomm_test psql -c 'CREATE EXTENSION ltree' -U postgres -h 127.0.0.1 pomm_test  phpunit --configuration tests/phpunit.travis.xml Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/chanmix51/Pomm"	"An Object Model Manager for PostgreSQL."	"true"
"Database"	"Propel"	"http://propelorm.org/"	"A fast ORM, migration library and query builder."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Propel · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization Propel Everywhere http://www.propelorm.org/ Repositories People 13 Filters Sources Forks HTML 104 159 propelorm.github.com The Propel website and documentation. Updated Jul 11, 2016 PHP 847 241 Propel2 Propel2 is an open-source high-performance Object-Relational Mapping (ORM) for modern PHP Updated Jul 7, 2016 PHP 161 118 PropelBundle PropelBundle for Symfony. Updated Jul 5, 2016 PHP 3 1 PropelServiceProvider2 Updated Jun 6, 2016 PHP 19 7 PropelLaravel Propel 2 integration for Laravel framework Updated May 19, 2016 PHP 809 365 Propel Current stable (and outdated and unmaintained) version of Propel - Please use v2 https://github.com/propelorm/Propel2 -- Updated Mar 5, 2016 PHP 1 1 PropelAclBundle Updated Feb 11, 2016 PHP 5 0 symfony-propel-edition Updated Jan 28, 2016 PHP 30 7 PropelServiceProvider Propel service provider for Silex. Updated Jan 11, 2016 PHP 110 79 sfPropelORMPlugin symfony 1.x plugin for Propel. Updated Jan 4, 2016 JavaScript 5 0 api.propelorm.org The Propel API Website. Updated Oct 7, 2014 JavaScript 13 2 sandbox sandbox.propelorm.org Updated Oct 3, 2014 Shell 1 0 sandbox-vagrant Vagrant machine for sandbox.propelorm.org Updated Oct 3, 2014 13 People Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/propelorm/"	"A fast ORM, migration library and query builder."	"true"
"Database"	"ProxyManager"	"https://github.com/Ocramius/ProxyManager"	"A set of utilities to generate proxy objects for data mappers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"577"	"38"	"80"	"GitHub - Ocramius/ProxyManager: OOP Proxy wrappers utilities - generates and manages proxies of your objects Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 38 Star 577 Fork 80 Ocramius/ProxyManager Code Issues 18 Pull requests 3 Pulse Graphs 🌈 OOP Proxy wrappers utilities - generates and manages proxies of your objects http://ocramius.github.io/ProxyManager/ 1,999 commits 5 branches 30 releases Fetching contributors PHP 97.7% CSS 1.5% Other 0.8% PHP CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0.x 2.0.x experiment/better-reflection-integration gh-pages master Nothing to show 2.0.3 2.0.2 2.0.1 2.0.0 2.0.0-BETA3 2.0.0-BETA2 2.0.0-BETA1 1.0.2 1.0.1 1.0.0 1.0.0-beta3 1.0.0-beta2 1.0.0-beta1 0.5.2 0.5.1 0.5.0 0.5.0-BETA3 0.5.0-BETA2 0.5.0-BETA1 0.4.1 0.4.0 0.3.6 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit 46e41ff Jul 2, 2016 Ocramius committed on GitHub Merge pull request #326 from Ocramius/cleanup/move-performance-tests-… … …to-phpbench  Moved performance tests to phpbench-based suite Permalink Failed to load latest commit information. doc-template Linking changelog in the docs footer Jan 28, 2016 docs Documentation fixlets May 27, 2016 examples #272 - Example of ghost object skipped properties Jan 28, 2016 html-docs Redirecting to new documentation URIs in `html-docs` (to be removed i… Mar 19, 2015 src/ProxyManager Extend original class in NullObjectGenerator May 27, 2016 tests Replacing `/**` with `/*` in non-docblock contexts Jul 2, 2016 .gitattributes Skipping files/directories that are not needed in deployed versions o… Dec 14, 2014 .gitignore #274 - couscous build dir should be ignored Jan 22, 2016 .scrutinizer.yml Remove php 7.x from allowed failure Apr 8, 2015 .travis.coverage.sh #241 #271 - coverage can be generated in 7.0 as well Jan 4, 2016 .travis.install.sh Correcting installation of dependencies: logical operators cannot be … Feb 1, 2016 .travis.yml Performance tests are now to be run by phpbench Jul 2, 2016 CHANGELOG.md Changelog entry for release 2.0.3 Jul 1, 2016 CONTRIBUTING.md Insert metainfo title on markdown contents Mar 19, 2015 LICENSE EOF EOL Sep 23, 2014 README.md Remove version number as for @Ocramius comment May 27, 2016 STABILITY.md Minor wording corrections - stability is ""till"" a specific date Jan 30, 2016 UPGRADE.md #272 - PHP 4 constructors are no longer supported Jan 28, 2016 composer.json Benchmarks need to be autoloaded Jul 1, 2016 couscous.yml Correcting couscous base directory Mar 19, 2015 phpbench.json Aggregate report is usually what is needed Jul 1, 2016 phpdox.xml.dist EOF EOL fixes Sep 23, 2014 phpmd.xml.dist EOF EOL fixes Sep 23, 2014 phpunit.xml.dist Fix: Use all the columns Aug 22, 2015 proxy-manager.png Including rasterized version of the logo (renders on github) Nov 9, 2013 proxy-manager.svg Adding logo Nov 9, 2013 README.md Proxy Manager This library aims at providing abstraction for generating various kinds of proxy classes. Documentation You can learn about the proxy pattern and how to use the ProxyManager in the docs, which are also compiled to HTML. Help/Support Installation The suggested installation method is via composer: php composer.phar require ocramius/proxy-manager Proxy example Here's how you build a lazy loadable object with ProxyManager using a Virtual Proxy $factory = new \ProxyManager\Factory\LazyLoadingValueHolderFactory();  $proxy = $factory->createProxy(     \MyApp\HeavyComplexObject::class,     function (& $wrappedObject, $proxy, $method, $parameters, & $initializer) {         $wrappedObject = new HeavyComplexObject(); // instantiation logic here         $initializer   = null; // turning off further lazy initialization     } );  $proxy->doFoo(); See the online documentation for more supported proxy types and examples. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Ocramius/ProxyManager"	"A set of utilities to generate proxy objects for data mappers."	"true"
"Database"	"RedBean"	"http://redbeanphp.com/index.php"	"A lightweight, configuration-less ORM."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1561"	"105"	"222"	"GitHub - gabordemooij/redbean: ORM layer that creates models, config and database on the fly Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 105 Star 1,561 Fork 222 gabordemooij/redbean Code Issues 6 Pull requests 2 Pulse Graphs ORM layer that creates models, config and database on the fly http://www.redbeanphp.com 2,206 commits 6 branches 19 releases 34 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags RedBeanPHP3_4_X RedBeanPHP3_5_X RedBeanPHP4KS RedBeanPHP4_1_X backportsqlfilters35 master Nothing to show v4.3.2 v4.3.1 v4.3 v4.2.1 v4.2.0 v4.1 v4.0 v3.5.1 v3.5 v3.5x v3.4.4 v3.4.3 v3.4.2 v3.4.1 v3.4 v3.3.6 v3.3.5 v3.2.1 v3.2 Nothing to show New pull request Latest commit e97d114 Jun 23, 2016 gabordemooij committed on GitHub Merge pull request #503 from MartinPenev/master … Looks good, thanks! Permalink Failed to load latest commit information. RedBeanPHP Auto unbox() SimpleModels arrays Jun 5, 2016 testing Fixed simple model creation Jun 21, 2016 .gitignore prepare for pull request Mar 11, 2015 .travis.yml Add HHVM to Travis Apr 1, 2015 README.markdown Update README.markdown May 17, 2015 composer.json Fixed misspelling. Mar 12, 2015 deepfreeze.php Add deepfreeze script. Feb 13, 2015 p533patch.php Fix P533 patch May 27, 2014 replica2-win.php Criado Replica2 para windows. Apr 29, 2014 replica2.php Move util functions out of facade to sep. util classes so people not … Aug 26, 2015 run_all_tests.sh Add some utility bash scripts for testing. Sep 2, 2015 run_single_test.sh Add some utility bash scripts for testing. Sep 2, 2015 test-dist.ini removed auto-prop-creation feature because it is confusing and it may… Aug 22, 2011 README.markdown RedBeanPHP 4 RedBeanPHP is an easy to use ORM tool for PHP. Automatically creates tables and columns as you go No configuration, just fire and forget No complicated package tools, no autoloaders, just ONE file Installation via Composer Just open your composer.json file and add the package name (e.g. ""gabordemooij/redbean"": ""dev-master"") in your require list. {     ""require"": {         ""gabordemooij/redbean"": ""dev-master""     } } If you not using composer then try it. Quick Example How we store a book object with RedBeanPHP: $book = R::dispense(""book""); $book->author = ""Santa Claus""; $book->title = ""Secrets of Christmas""; $id = R::store( $book ); Yep, it's that simple. More information For more information about RedBeanPHP please consult the RedBeanPHP website: http://www.redbeanphp.com/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gabordemooij/redbean"	"A lightweight, configuration-less ORM."	"true"
"Database"	"Spot2"	"https://github.com/vlucas/spot2"	"A MySQL datamapper ORM."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"379"	"27"	"63"	"GitHub - vlucas/spot2: Spot v2.x DataMapper built on top of Doctrine's Database Abstraction Layer Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 379 Fork 63 vlucas/spot2 Code Issues 34 Pull requests 2 Pulse Graphs Spot v2.x DataMapper built on top of Doctrine's Database Abstraction Layer http://phpdatamapper.com 272 commits 3 branches 20 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags alias_mapping master revert-82-patch-1 Nothing to show v2.2.0 v2.1.7 v2.1.6 v2.1.5 v2.1.4 v2.1.3 v2.1.2 v2.1.1 v2.1.0 v2.0.10 v2.0.9 v2.0.8 v2.0.7 v2.0.6 v2.0.5 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 Nothing to show New pull request Latest commit e3c98c8 Jun 23, 2016 vlucas committed on GitHub Merge pull request #180 from vlucas/query_exec … Add $mapper->exec() method for raw queries Permalink Failed to load latest commit information. lib Add $mapper->exec() method for raw queries Jun 22, 2016 tests Add $mapper->exec() method for raw queries Jun 22, 2016 .gitattributes Create .gitattributes Jan 6, 2015 .gitignore contributing Jul 9, 2015 .travis.yml Fix: Use the same version of phpunit on Travis as required Jul 10, 2015 CONTRIBUTING.md contributing Jul 9, 2015 LICENSE.txt Add BSD 3-Clause license Jul 18, 2014 README.md Fixed missing arguments for relations() Apr 1, 2015 composer.json Update DBAL and PHPUnit; Query method passthrough May 20, 2016 phpunit_mysql.xml Revert ""Fix: One phpunit.xml to rule them all"" Jul 10, 2015 phpunit_pgsql.xml Revert ""Fix: One phpunit.xml to rule them all"" Jul 10, 2015 phpunit_sqlite.xml Add test case for explicit schema definition in the Entity. Oct 5, 2015 README.md Spot DataMapper ORM v2.0 Spot v2.x is built on the Doctrine DBAL, and targets PHP 5.4+. The aim of Spot is to be a lightweight DataMapper alternative that is clear, efficient, and simple - and doesn't use annotations or proxy classes. Using Spot In Your Project Spot is a standalone ORM that can be used in any project. Follow the instructions below to get Spot setup in your project. Installation with Composer composer require vlucas/spot2 Connecting to a Database The Spot\Locator object is the main point of access to spot that you will have to be able to access from everywhere you need to run queries or work with your entities. It is responsible for loading mappers and managing configuration. To create a Locator, you will need a Spot\Config object. The Spot\Config object stores and references database connections by name. Create a new instance of Spot\Config and add database connections with DSN strings so Spot can establish a database connection, then create your locator object: $cfg = new \Spot\Config();  // MySQL $cfg->addConnection('mysql', 'mysql://user:password@localhost/database_name'); // Sqlite $cfg->addConnection('sqlite', 'sqlite://path/to/database.sqlite');  $spot = new \Spot\Locator($cfg); You can also use DBAL-compatible configuration arrays instead of DSN strings if you prefer: $cfg->addConnection('mysql', [     'dbname' => 'mydb',     'user' => 'user',     'password' => 'secret',     'host' => 'localhost',     'driver' => 'pdo_mysql', ]); Accessing the Locator Since you have to have access to your mapper anywhere you use the database, most people create a helper method to create a mapper instance once and then return the same instance when required again. Such a helper method might look something like this: function spot() {     static $spot;     if($spot === null) {         $spot = new \Spot\Locator();         $spot->config()->addConnection('test_mysql', 'mysql://user:password@localhost/database_name');     }     return $spot; } If you are using a framework with a dependency injection container or service, you will want to use it so that the Spot\Locator object is available everywhere in your application that you need it. Getting A Mapper Since Spot follows the DataMapper design pattern, you will need a mapper instance for working with object Entities and database tables. You can get a mapper instance from the Spot\Locator object's mapper method by providing the fully qualified entity namespace + class name: $postMapper = $spot->mapper('Entity\Post'); Mappers only work with one entity type, so you will need one mapper per entity class you work with (i.e. to save an Entity\Post, you will need the appropriate mapper, and to save an Entity\Comment, you will need a comment mapper, not the same post mapper. Relations will automatically be loaded and handled by their corresponding mapper by Spot. NOTE: You do NOT have to create a mapper for each entity unless you need custom finder methods or other custom logic. If there is no entity-specific mapper for the entity you want, Spot will load the generic mapper for you and return it. Creating Entities Entity classes can be named and namespaced however you want to set them up within your project structure. For the following examples, the Entities will just be prefixed with an Entity namespace for easy psr-0 compliant autoloading. namespace Entity;  use Spot\EntityInterface as Entity; use Spot\MapperInterface as Mapper;  class Post extends \Spot\Entity {     protected static $table = 'posts';      public static function fields()     {         return [             'id'           => ['type' => 'integer', 'autoincrement' => true, 'primary' => true],             'title'        => ['type' => 'string', 'required' => true],             'body'         => ['type' => 'text', 'required' => true],             'status'       => ['type' => 'integer', 'default' => 0, 'index' => true],             'author_id'    => ['type' => 'integer', 'required' => true],             'date_created' => ['type' => 'datetime', 'value' => new \DateTime()]         ];     }      public static function relations(Mapper $mapper, Entity $entity)     {         return [             'tags' => $mapper->hasManyThrough($entity, 'Entity\Tag', 'Entity\PostTag', 'tag_id', 'post_id'),             'comments' => $mapper->hasMany($entity, 'Entity\Post\Comment', 'post_id')->order(['date_created' => 'ASC']),             'author' => $mapper->belongsTo($entity, 'Entity\Author', 'author_id')         ];     } } Using Custom Mappers Although you do not have to create a mapper for each entity, sometimes it is nice to create one if you have a lot of custom finder methods, or want a better place to contain the logic of building all the queries you need. Just specify the full mapper class name in your entity: namespace Entity;  class Post extends \Spot\Entity {     protected static $mapper = 'Entity\Mapper\Post';      // ... snip ... } And then create your mapper: namespace Entity\Mapper;  use Spot\Mapper;  class Post extends Mapper {     /**  * Get 10 most recent posts for display on the sidebar  *  * @return \Spot\Query  */     public function mostRecentPostsForSidebar()     {         return $this->where(['status' => 'active'])             ->order(['date_created' => 'DESC'])             ->limit(10);     } } Then when you load the mapper like normal, Spot will see the custom Entity\Post::$mapper you defined, and load that instead of the generic one, allowing you to call your custom method: $mapper = $spot->mapper('Entity\Post'); $sidebarPosts = $mapper->mostRecentPostsForSidebar(); Field Types Since Spot v2.x is built on top of DBAL, all the DBAL types are used and fully supported in Spot: Integer Types smallint integer bigint Decimal Types decimal float String Types string text guid Binary String Types binary blob Boolean/Bit Types boolean Date and Time Types date datetime datetimetz time Array Types array - PHP serialize/deserialze simple_array - PHP implode/explode json_array - json_encode/json_decode Object Types object - PHP serialize/deserialze Please read the Doctrine DBAL Types Reference Page thoroughly for more information and types and cross-database support. Some types may be stored differently on different databases, depending on database vendor support and other factors. Registering Custom Field Types If you want to register your own custom field type with custom functionality on get/set, have a look at the Custom Mapping Types on the DBAL reference page. Since Spot uses the DBAL internally, there are no additional changes you have to make for your custom type to work with Spot. Migrations / Creating and Updating Tables Spot comes with a method for running migrations on Entities that will automatically CREATE and ALTER tables based on the current Entity's fields definition. $mapper = $spot->mapper('Entity\Post'); $mapper->migrate(); Your database should now have the posts table in it, with all the fields you described in your Post entity. NOTE: Please note that re-naming columns is not supported in migrations because there is no way for spot to know which column you renamed to what - Spot will see a new column that needs to be created, and a column that no longer exists and needs to be dropped. This could result in data loss during an auto-migration. Finders (Mapper) The main finders used most are all to return a collection of entities, and first or get to return a single entity matching the conditions. all() Find all entities and return a Spot\Entity\Collection of loaded Spot\Entity objects. where([conditions]) Find all entities that match the given conditions and return a Spot\Entity\Collection of loaded Spot\Entity objects. // Where can be called directly from the mapper $posts = $mapper->where(['status' => 1]);  // Or chained using the returned `Spot\Query` object - results identical to above $posts = $mapper->all()->where(['status' => 1]);  // Or more explicitly using using `select`, which always returns a `Spot\Query` object $posts = $mapper->select()->where(['status' => 1]); Since a Spot\Query object is returned, conditions and other statements can be chained in any way or order you want. The query will be lazy-executed on interation or count, or manually by ending the chain with a call to execute(). first([conditions]) Find and return a single Spot\Entity object that matches the criteria. $post = $mapper->first(['title' => ""Test Post""]); Or first can be used on a previous query with all to fetch only the first matching record. $post = $mapper->all(['title' => ""Test Post""])->first(); A call to first will always execute the query immediately, and return either a single loaded entity object, or boolean false. Conditional Queries # All posts with a 'published' status, descending by date_created $posts = $mapper->all()     ->where(['status' => 'published'])     ->order(['date_created' => 'DESC']);  # All posts that are not published $posts = $mapper->all()     ->where(['status <>' => 'published'])  # All posts created before 3 days ago $posts = $mapper->all()     ->where(['date_created <' => new \DateTime('-3 days')]);  # Posts with 'id' of 1, 2, 5, 12, or 15 - Array value = automatic ""IN"" clause $posts = $mapper->all()     ->where(['id' => [1, 2, 5, 12, 15]]); Joins Joins are currently not enabled by Spot's query builder. The Doctine DBAL query builder does provide full support for them, so they may be enabled in the future. Custom Queries While ORMs like Spot are very nice to use, if you need to do complex queries, it's best to just use custom queries with the SQL you know and love. Spot provides a query method that allows you to run custom SQL, and load the results into a normal collection of entity objects. This way, you can easily run custom SQL queries with all the same ease of use and convenience as the built-in finder methods and you won't have to do any special handling. Using Custom SQL $posts = $mapper->query(""SELECT * FROM posts WHERE id = 1""); Using Query Parameters $posts = $mapper->query(""SELECT * FROM posts WHERE id = ?"", [1]); Using Named Placeholders $posts = $mapper->query(""SELECT * FROM posts WHERE id = :id"", ['id' => 1]); NOTE: Spot will load ALL returned columns on the target entity from the query you run. So if you perform a JOIN or get more data than the target entity normally has, it will just be loaded on the target entity, and no attempt will be made to map the data to other entities or to filter it based on only the defined fields. Relations Relations are convenient ways to access related, parent, and child entities from another loaded entity object. An example might be $post->comments to query for all the comments related to the current $post object. Live Query Objects All relations are returned as instances of relation classes that extend Spot\Relation\RelationAbstract. This class holds a Spot\Query object internally, and allows you to chain your own query modifications on it so you can do custom things with relations, like ordering, adding more query conditions, etc. $mapper->hasMany($entity, 'Entity\Comment', 'post_id')     ->where(['status' => 'active'])     ->order(['date_created' => 'ASC']); All of these query modifications are held in a queue, and are run when the relation is actually executed (on count or foreach iteration, or when execute is explicitly called). Eager Loading All relation types are lazy-loaded by default, and can be eager-loaded to solve the N+1 query problem using the with method: $posts = $posts->all()->with('comments'); Multiple relations can be eager-loaded using an array: $posts = $posts->all()->with(['comments', 'tags']); Relation Types Entity relation types are: HasOne BelongsTo HasMany HasManyThrough HasOne HasOne is a relation where the related object has a field which points to the current object - an example might be User has one Profile. Method $mapper->hasOne(Entity $entity, $foreignEntity, $foreignKey) $entity - The current entity instance $foreignEntity - Name of the entity you want to load $foreignKey - Field name on the $foreignEntity that matches up with the primary key of the current entity Example namespace Entity;  use Spot\EntityInterface as Entity; use Spot\MapperInterface as Mapper;  class User extends \Spot\Entity {     protected static $table = 'users';      public static function fields()     {         return [             'id'           => ['type' => 'integer', 'autoincrement' => true, 'primary' => true],             'username'     => ['type' => 'string', 'required' => true],             'email'        => ['type' => 'string', 'required' => true],             'status'       => ['type' => 'integer', 'default' => 0, 'index' => true],             'date_created' => ['type' => 'datetime', 'value' => new \DateTime()]         ];     }      public static function relations(Mapper $mapper, Entity $entity)     {         return [             'profile' => $mapper->hasOne($entity, 'Entity\User\Profile', 'user_id')         ];     } } In this scenario, the Entity\User\Profile entity has a field named user_id which the Entity\User's id field as a value. Note that no field exists on this entity for this relation, but rather the related entity. BelongsTo BelongsTo is a relation where the current object has a field which points to the related object - an example might be Post belongs to User. Method $mapper->belongsTo(Entity $entity, $foreignEntity, $localKey) $entity - The current entity instance $foreignEntity - Name of the entity you want to load $localKey - Field name on the current entity that matches up with the primary key of $foreignEntity (the one you want to load) Example namespace Entity;  use Spot\EntityInterface as Entity; use Spot\MapperInterface as Mapper;  class Post extends \Spot\Entity {     protected static $table = 'posts';      public static function fields()     {         return [             'id'           => ['type' => 'integer', 'autoincrement' => true, 'primary' => true],             'user_id'      => ['type' => 'integer', 'required' => true],             'title'        => ['type' => 'string', 'required' => true],             'body'         => ['type' => 'text', 'required' => true],             'status'       => ['type' => 'integer', 'default' => 0, 'index' => true],             'date_created' => ['type' => 'datetime', 'value' => new \DateTime()]         ];     }      public static function relations(Mapper $mapper, Entity $entity)     {         return [             'user' => $mapper->belongsTo($entity, 'Entity\User', 'user_id')         ];     } } In this scenario, the Entity\Post entity has a field named user_id which is the Entity\User's id field's value. Note that the field exists on this entity for this relation, but not on the related entity. HasMany HasMany is used where a single record relates to multiple other records - an example might be Post has many Comments. Method $mapper->hasMany(Entity $entity, $entityName, $foreignKey, $localValue = null) $entity - The current entity instance $entityName - Name of the entity you want to load a collection of $foreignKey - Field name on the $entityName that matches up with the current entity's primary key Example We start by adding a comments relation to our Post object: namespace Entity;  use Spot\EntityInterface as Entity; use Spot\MapperInterface as Mapper;  class Post extends Spot\Entity {     protected static $table = 'posts';      public static function fields()     {         return [             'id'           => ['type' => 'integer', 'autoincrement' => true, 'primary' => true],             'title'        => ['type' => 'string', 'required' => true],             'body'         => ['type' => 'text', 'required' => true],             'status'       => ['type' => 'integer', 'default' => 0, 'index' => true],             'date_created' => ['type' => 'datetime', 'value' => new \DateTime()]         ];     }      public static function relations(Mapper $mapper, Entity $entity)     {         return [             'comments' => $mapper->hasMany($entity, 'Entity\Comment', 'post_id')->order(['date_created' => 'ASC']),         ];     } } And add a Entity\Post\Comment object with a 'belongsTo' relation back to the post: namespace Entity;  class Comment extends \Spot\Entity {     // ... snip ...      public static function relations(Mapper $mapper, Entity $entity)     {         return [             'post' => $mapper->belongsTo($entity, 'Entity\Post', 'post_id')         ];     } } HasManyThrough HasManyThrough is used for many-to-many relationships. An good example is tagging. A post has many tags, and a tag has many posts. This relation is a bit more complex than the others, because a HasManyThrough requires a join table and mapper. Method $mapper->hasManyThrough(Entity $entity, string $hasManyEntity, string $throughEntity, string $selectField, string $whereField) $entity - The current entity instance $hasManyEntity - This is the target entity you want a collection of. In this case, we want a collection of Entity\Tag objects. $throughEntity - Name of the entity we are going through to get what we want - In this case, Entity\PostTag. $selectField - Name of the field on the $throughEntity that will select records by the primary key of $hasManyEntity. $whereField - Name of the field on the $throughEntity to select records by the current entities' primary key (we have a post, so this will be the Entity\PostTag->post_id field). Example We need to add the tags relation to our Post entity, specifying query conditions for both sides of the relation. namespace Entity;  use Spot\EntityInterface as Entity; use Spot\MapperInterface as Mapper;  class Post extends Spot\Entity {     protected static $table = 'posts';      public static function fields()     {         return [             'id'           => ['type' => 'integer', 'autoincrement' => true, 'primary' => true],             'title'        => ['type' => 'string', 'required' => true],             'body'         => ['type' => 'text', 'required' => true],             'status'       => ['type' => 'integer', 'default' => 0, 'index' => true],             'date_created' => ['type' => 'datetime', 'value' => new \DateTime()]         ];     }      public static function relations(Mapper $mapper, Entity $entity)     {         return [             'tags' => $mapper->hasManyThrough($entity, 'Entity\Tag', 'Entity\PostTag', 'tag_id', 'post_id'),         ];     } Explanation The result we want is a collection of Entity\Tag objects where the id equals the post_tags.tag_id column. We get this by going through the Entity\PostTags entity, using the current loaded post id matching post_tags.post_id. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vlucas/spot2"	"A MySQL datamapper ORM."	"true"
"Migrations"	"Doctrine Migrations"	"http://docs.doctrine-project.org/projects/doctrine-migrations/en/latest/toc.html"	"A migration library for Doctrine."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Welcome to Doctrine 2 Migrations documentation! — Doctrine 2 Migrations 2.2 documentation Doctrine - PHP Database Libraries home about projects orm dbal blog development contribute community Navigation index Doctrine Homepage » Doctrine 2 Migrations 2.2 documentation » Welcome to Doctrine 2 Migrations documentation!¶ Reference Guide¶ 1. Introduction 2. Migration Classes 3. Managing Migrations 4. Generating Migrations 5. Ignoring custom Tables 6. Custom Configuration 7. Input - Output Customization Project Versions latest Search Table Of Contents Welcome to Doctrine 2 Migrations documentation! Reference Guide This Page Show Source © Copyright 2010-12, Doctrine Project Team. Created using Sphinx 1.3.5."	"null"	"null"	"A migration library for Doctrine."	"true"
"Migrations"	"Migrations"	"https://github.com/icomefromthenet/Migrations"	"A migration management library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"36"	"1"	"0"	"GitHub - icomefromthenet/Migrations: php 5.3 Migration Manager Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 36 Fork 0 icomefromthenet/Migrations Code Issues 0 Pull requests 0 Pulse Graphs php 5.3 Migration Manager 133 commits 3 branches 1 release 1 contributor PHP 95.6% PLpgSQL 3.7% HTML 0.7% PHP PLpgSQL HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags development manyconnect master Nothing to show v1.0 Nothing to show New pull request Latest commit 9990a63 Jul 13, 2016 icomefromthenet This commit bugix to exception handler in php7 Permalink Failed to load latest commit information. bin Continued work on command tests Jun 4, 2015 faker various fixes Oct 8, 2012 skelton Revert ""Revert ""fixed bad test date template"""" Jul 13, 2016 src/Migration This commit bugix to exception handler in php7 Jul 13, 2016 .gitignore Stared on multiple connections. May 15, 2015 .gitmodules removed empty mainifest folder Mar 28, 2013 LICENSE various fixes Oct 8, 2012 composer.json Revert ""Update composer dependecies and change new file prefix to a s… Jul 13, 2016 phpunit.xml Fixed bugs created when adding multiple schemas found during testing Dec 9, 2015 readme.md fixed error in readme.md Oct 11, 2012 readme.md What are Database Migrations? Migrations are a convenient way for you to alter your database in a structured and organized manner. You could edit fragments of SQL by hand but you would then be responsible for telling other developers that they need to go and run them. You’d also have to keep track of which changes need to be run against the production machines next time you deploy. Above from Rails guide. This Migrations library was inspired by earlier works such as mysql-php-migrations, and implementations found in both Codeigniter and Fulephp frameworks. Whats different? Written with php 5.3 and uses Symfony2 components and Doctrine DBAL Allows each project to define templates using Twig. Uses Doctrine DBAL Schema manager to write platform independent migrations or use normal SQL DDL to control your database. All commands accept a DSN allowing scripting to apply your migrations to many databases. Getting Started Installing This library can be accessed through Composer Using dev mode as most likely don't want this component in a release cycle. Create composer.json add add the following. {     ""require"" : {     },     ""require-dev"" : {         ""icomefromthenet/migration"" : ""dev-master""      }  } Running the commands Create the project folder and then run the int function using the vendor bin migrate.php. Note all commands are prefixed with app: mkdir migrations cd migrations ../vendor/bin/migrate.php app:init   Create the Config for your database answer the questions and a config will be created. ../vendor/bin/migrate.php app:config   Run install to add migrations tacking database table to the schema: ../vendor/bin/migrate.php app:install   Add your first migration by using the add command (optional description slug): ../vendor/bin/migrate.php app:add #prefix#   Run up command to install the change ../vendor/bin/migrate.php app:up 1  Run status to find the head migration ../vendor/bin/migrate.php app:status  Run status to find the head migration ../vendor/bin/migrate.php app:status  Requirements php 5.3 CLI. SPL PDO Composer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/icomefromthenet/Migrations"	"A migration management library."	"true"
"Migrations"	"Phinx"	"https://github.com/robmorgan/phinx"	"Another database migration library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2374"	"134"	"516"	"GitHub - robmorgan/phinx: PHP Database Migrations for Everyone Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 134 Star 2,374 Fork 516 robmorgan/phinx Code Issues 198 Pull requests 44 Wiki Pulse Graphs PHP Database Migrations for Everyone https://phinx.org 1,387 commits 12 branches 42 releases 120 contributors PHP 99.9% Batchfile 0.1% PHP Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 0.6.x-dev Switch branches/tags Branches Tags 0.1.x-dev 0.1 0.2.x-dev 0.3.x-dev 0.4.x-dev 0.5.x-dev 0.6.x-dev gh-pages i413-fluent-phinx master phing-phinx-task revert-822-patch-3 Nothing to show v0.6.2 v0.6.1 v0.6.0 v0.5.5 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.6 v0.4.5 v0.4.4 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.8 v0.3.7 v0.3.6 v0.3.5 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.9 v0.2.8 v0.2.7 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 Nothing to show New pull request Latest commit 89f4fa2 Jul 15, 2016 rquadling Fix gitignore Permalink Failed to load latest commit information. app update composer install urls Nov 30, 2015 bin move phinx bootstrapping into app/phinx.php, use with bin/phinx Nov 17, 2014 docs Add documentation regarding addTimestamps() Jul 15, 2016 src Allow timestamp columns to have different names Jul 14, 2016 tests Merge branch '0.6.x-dev' of https://github.com/robmorgan/phinx into 0… Jul 14, 2016 .gitignore Fix gitignore Jul 15, 2016 .scrutinizer.yml adding scrutinizer support Dec 11, 2013 .travis.yml Upgrade Travis build and minimum dependency versions Jul 4, 2016 CHANGELOG.md Show new features as own list Jul 14, 2016 CONTRIBUTING.md update numbers Mar 25, 2016 LICENSE copyright 2014 Feb 1, 2014 README.md Move version history to its own changelog Jun 20, 2016 UPGRADE_0.6.md Introduce support for InputInterface alongside OutputInterface Jun 21, 2016 appveyor.yml fixes #429 appveyor Sep 1, 2015 box.json fixes #183. phar should use external phinx.yml file Sep 4, 2015 composer.json Upgrade Travis build and minimum dependency versions Jul 4, 2016 phinx.yml introduce new directory structure Nov 30, 2015 phpunit.xml.dist fixing merge conflicts Aug 10, 2014 README.md Phinx: Simple PHP Database Migrations Phinx makes it ridiculously easy to manage the database migrations for your PHP app. In less than 5 minutes you can install Phinx and create your first database migration. Phinx is just about migrations without all the bloat of a database ORM system or framework. Check out http://docs.phinx.org for the comprehensive documentation. Features Write database migrations using database agnostic PHP code. Migrate up and down. Migrate on deployment. Seed data after database creation. Get going in less than 5 minutes. Stop worrying about the state of your database. Take advantage of SCM features such as branching. Integrate with any app. Supported Adapters Phinx natively supports the following database adapters: MySQL PostgreSQL SQLite Microsoft SQL Server Install & Run Composer The fastest way to install Phinx is to add it to your project using Composer (http://getcomposer.org/). Install Composer: curl -sS https://getcomposer.org/installer | php  Require Phinx as a dependency using Composer: php composer.phar require robmorgan/phinx  Install Phinx: php composer.phar install  Execute Phinx: php vendor/bin/phinx  As a Phar You can also use the Box application to build Phinx as a Phar archive (https://box-project.github.io/box2/). Clone Phinx from GitHub git clone git://github.com/robmorgan/phinx.git cd phinx  Install Composer curl -s https://getcomposer.org/installer | php  Install the Phinx dependencies php composer.phar install  Install Box: curl -LSs https://box-project.github.io/box2/installer.php | php  Create a Phar archive php box.phar build  Documentation Check out http://docs.phinx.org for the comprehensive documentation. Contributing Please read the CONTRIBUTING document. News & Updates Follow Rob (@_rjm_) on Twitter to stay up to date (http://twitter.com/_rjm_) Misc Version History Please read the CHANGELOG document. License (The MIT license) Copyright (c) 2015 Rob Morgan Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/robmorgan/phinx"	"Another database migration library."	"true"
"Migrations"	"PHPMig"	"https://github.com/davedevelopment/phpmig"	"Another migration management library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"392"	"26"	"56"	"GitHub - davedevelopment/phpmig: Simple migrations system for php Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 392 Fork 56 davedevelopment/phpmig Code Issues 15 Pull requests 2 Pulse Graphs Simple migrations system for php 232 commits 3 branches 11 releases Fetching contributors PHP 99.1% Batchfile 0.9% PHP Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.5 1.0 master Nothing to show v1.2.0 v1.1.0 v1.0.0 v0.4.0 v0.3.0 v0.2.2 v0.2.1 v0.2.0 v0.1.3 v0.1.2 v0.1.1 Nothing to show New pull request Latest commit 44591b9 Apr 22, 2016 davedevelopment Merge pull request #106 from martinezdelariva/zend-db-adapter … PhpMig adapter for zendframework/zend-db Permalink Failed to load latest commit information. bin Remove PEAR installation option and related files Jun 28, 2013 src/Phpmig PhpMig adapter for zendframework/zend-db Apr 22, 2016 tests/Phpmig Added tests Sep 23, 2015 .gitignore up to date Jun 1, 2013 .travis.yml Use provided composer and prefer source Dec 19, 2013 CHANGELOG.md Added information about pimple to CHANGELOG Jul 15, 2013 LICENCE Removed Pimple note from LICENCE as no longer bundled Jul 11, 2013 README.md Alter code example to be PHP 5.3 compatible. Jan 25, 2016 composer.json Simplified requirements Jan 22, 2016 phpunit.xml.dist Basic prompting ref #13 Oct 31, 2012 README.md Phpmig What is it? Phpmig is a (database) migration tool for php, that should be adaptable for use with most PHP 5.3+ projects. It's kind of like doctrine migrations, without the doctrine. Although you can use doctrine if you want. And ironically, I use doctrine in my examples. How does it work? $ phpmig migrate Phpmig aims to be vendor/framework independent, and in doing so, requires you to do a little bit of work up front to use it. Phpmig requires a bootstrap file, that must return an object that implements the ArrayAccess interface with several predefined keys. We recommend returning an instance of Pimple, a simple dependency injection container. This is also an ideal opportunity to expose your own services to the migrations themselves, which have access to the container, such as a schema management abstraction. Getting Started The best way to install phpmig is using composer: $ curl -sS https://getcomposer.org/installer | php $ php composer.phar require davedevelopment/phpmig You can then use the localised version of phpmig for that project $ bin/phpmig --version Phpmig can do a little configuring for you to get started, go to the root of your project and: $ phpmig init +d ./migrations Place your migration files in here +f ./phpmig.php Create services in here $ Note that you can move phpmig.php to config/phpmig.php, the commands will look first in the config directory than in the root. Phpmig can generate migrations using the generate command. Migration files are named versionnumber_name.php, where version number is made up of 0-9 and name is CamelCase or snake_case. Each migration file should contain a class with the same name as the file in CamelCase. $ phpmig generate AddRatingToLolCats +f ./migrations/20111018171411_AddRatingToLolCats.php $ phpmig status   Status   Migration ID    Migration Name  -----------------------------------------    down  20111018171929  AddRatingToLolCats  Use the migrate command to run migrations  $ phpmig migrate  == 20111018171411 AddRatingToLolCats migrating  == 20111018171411 AddRatingToLolCats migrated 0.0005s $ phpmig status   Status   Migration ID    Migration Name  -----------------------------------------      up  20111018171929  AddRatingToLolCats $ Better Persistence The init command creates a bootstrap file that specifies a flat file to use to track which migrations have been run, which isn't great. You can use the provided adapters to store this information in your database. <?php  # phpmig.php  use \Phpmig\Adapter,     \Pimple;  $container = new Pimple();  $container['db'] = $container->share(function() {     $dbh = new PDO('mysql:dbname=testdb;host=127.0.0.1','username','passwd');     $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);     return $dbh; });  $container['phpmig.adapter'] = $container->share(function() use ($container) {     return new Adapter\PDO\Sql($container['db'], 'migrations'); });  $container['phpmig.migrations_path'] = __DIR__ . DIRECTORY_SEPARATOR . 'migrations';  return $container;  Postgres PDO SqlPgsql Adds support for qualifying the migrations table with a schema. <?php  # phpmig  use \Phpmig\Adapter,     \Pimple;  $container = new Pimple();  $container['db'] = $container->share(function() {     $dbh = new PDO(sprintf('pgsql:dbname=%s;host=%s;password=%s', 'dbname', 'localhost', 'password'), 'dbuser', '');     $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);     return $dbh; });  $container['phpmig.adapter'] = $container->share(function() use ($container) {     return new Adapter\PDO\SqlPgsql($container['db'], 'migrations', 'migrationschema'); });   return $container; Or you can use Doctrine's DBAL: <?php  # phpmig.php  // do some autoloading of Doctrine here  use \Phpmig\Adapter,     \Pimple,      \Doctrine\DBAL\DriverManager;  $container = new Pimple();  $container['db'] = $container->share(function() {     return DriverManager::getConnection(array(         'driver' => 'pdo_sqlite',         'path'   => __DIR__ . DIRECTORY_SEPARATOR . 'db.sqlite',     )); });  $container['phpmig.adapter'] = $container->share(function() use ($container) {     return new Adapter\Doctrine\DBAL($container['db'], 'migrations'); });  $container['phpmig.migrations_path'] = function() {     return __DIR__ . DIRECTORY_SEPARATOR . 'migrations'; };  return $container; Unfortunately Zend Framework does not have a Database Abstraction Layer and setting up migrations requires couple additional steps. You first need to prepare the configuration. It might be in any format supported by Zend_Config. Here is an example in YAML for MySQL: phpmig:   tableName: migrations   createStatement: CREATE TABLE migrations ( version VARCHAR(255) NOT NULL ); In configuration file you need to provide the table name where the migrations will be stored and a create statement. You can use one of the configurations provided in the config folder for some common RDBMS. Here is how the bootstrap file should look like: <?php  # phpmig.php  // Set some constants define('PHPMIG_PATH', realpath(dirname(__FILE__))); define('VENDOR_PATH', PHPMIG_PATH . '/vendor'); set_include_path(get_include_path() . PATH_SEPARATOR . VENDOR_PATH);  // Register autoloading require_once 'Zend/Loader/Autoloader.php'; $autoloader = Zend_Loader_Autoloader::getInstance(); $autoloader->registerNamespace('Zend_');  use \Pimple,     \Phpmig\Adapter\Zend\Db;  $container = new Pimple();  $container['db'] = $container->share(function() {     return Zend_Db::factory('pdo_mysql', array(         'dbname' => 'DBNAME',         'username' => 'USERNAME',         'password' => 'PASSWORD',         'host' => 'localhost'     )); });  $container['phpmig.adapter'] = $container->share(function() use ($container) {     $configuration = null;     $configurationFile = PHPMIG_PATH . '/config/mysql.yaml';      if (file_exists($configurationFile)) {         $configuration = new Zend_Config_Yaml($configurationFile, null, array('ignore_constants' => true));     }      return new Db($container['db'], $configuration); });  $container['phpmig.migrations_path'] = function() {     return __DIR__ . DIRECTORY_SEPARATOR . 'migrations'; };   return $container; Example with Eloquent ORM 5.1 <?php  use \Phpmig\Adapter; use \Phpmig\Pimple\Pimple,     \Illuminate\Database\Capsule\Manager as Capsule;  $container = new Pimple();  $container['config'] = [     'driver'    => 'xxx',     'host'      => 'xxx',     'database'  => 'xxx',     'username'  => 'xxx',     'password'  => 'x',     'charset'   => 'xxx',     'collation' => 'xxx',     'prefix'    => '', ];  $container['db'] = $container->share(function() use ($container) {     $capsule = new Capsule();     $capsule->addConnection($container['config']);     $capsule->setAsGlobal();     $capsule->bootEloquent();     return $capsule; });  $container['phpmig.adapter'] = $container->share(function() use ($container) {     return new Adapter\Illuminate\Database($container['db'], 'migrations'); }); $container['phpmig.migrations_path'] = function() {     return __DIR__ . DIRECTORY_SEPARATOR . 'migrations'; };  return $container; Writing Migrations The migrations should extend the Phpmig\Migration\Migration class, and have access to the container. For example, assuming you've rewritten your bootstrap file like above: <?php  use Phpmig\Migration\Migration;  class AddRatingToLolCats extends Migration {     /**  * Do the migration  */     public function up()     {         $sql = ""ALTER TABLE `lol_cats` ADD COLUMN `rating` INT(10) UNSIGNED NULL"";         $container = $this->getContainer();          $container['db']->query($sql);     }      /**  * Undo the migration  */     public function down()     {         $sql = ""ALTER TABLE `lol_cats` DROP COLUMN `rating`"";         $container = $this->getContainer();          $container['db']->query($sql);     } } Customising the migration template You can change the default migration template by providing the path to a file in the phpmig.migrations_template_path config value. If the template has a .php extension it is included and parsed as PHP, and the $className variable is replaced: <?= ""<?php "";?>  use Phpmig\Migration\Migration;  class <?= $className ?> extends Migration {     $someValue = <?= $this->container['value'] ?>;       /**      * Do the migration      */     public function up()     {         $container = $this->getContainer();     }      /**      * Undo the migration      */     public function down()     {         $container = $this->getContainer();     } } If it uses any other extension (e.g., .stub or .tmpl) it's parsed using the sprintf function, so the class name should be set to %s to ensure it gets replaced: <?php  use Phpmig\Migration\Migration;  class %s extends Migration {     /**  * Do the migration  */     public function up()     {         $container = $this->getContainer();      }      /**  * Undo the migration  */     public function down()     {         $container = $this->getContainer();      } } Module Migrations If you have an application that consists of different modules and you want to be able to separate the migration, Phpmig has a built-in way to achieve this. $container['phpmig.sets'] = $container->share(function ($container) {     return array(         'cms' => array(             'adapter' => new Adapter\File\Flat('modules/migrationLogs/cms_migrations.log'),             'migrations_path' => 'migrations/cms'         ),         'blog' => array(             'adapter' => new Adapter\File\Flat('modules/migrationLogs/blog_migrations.log'),             'migrations_path' => 'migrations/blog'         )     ); }); this way each set has their own migration log and the ability to migrate changes independently of each other. to run the set migration you just use the command below: $ phpmig up -s <SET NAME HERE> --<VERSION HERE> For example, if a change was made to the cms migration, you'll type in this command: $ phpmig up -s cms --2 and the migration tool will run the migration setup for cms. to downgrade a migration would be: $ phpmig down -s <SET NAME HERE> --<VERSION HERE> Multi path migrations By default you have to provide the path to migrations directory, but you can organize your migrations script however you like and have several migrations directory. To do this you can provide an array of migration file paths to the container :  $container['phpmig.migrations'] = function() {     return array_merge(         glob('migrations_1/*.php'),         glob('migrations_2/*.php')     ); }; You can then provide a target directory to the generate command. The target directory is mandatory if you haven't provided a phpmig.migrations_path config value. $ phpmig generate AddRatingToLolCats ./migrations Rolling Back You can roll back the last run migration by using the rollback command $ phpmig rollback To rollback all migration up to a specific migration you can specify the rollback target $ phpmig rollback -t 20111101000144 or $ phpmig rollback --target=20111101000144 By specifying 0 as the rollback target phpmig will revert all migrations $ phpmig rollback -t 0 You can also rollback only a specific migration using the down command $ phpmig down 20111101000144 Using Outside CLI In order to use the migration tool outside the cli context use Phpmig\Api\PhpmigApplication. <?php  use Phpmig\Api\PhpmigApplication;  // require the composer autoloader require __DIR__ . ""/vendor/autoload.php"";  $output = new \Symfony\Component\Console\Output\NullOutput();  // create container from bootstrap file $container = require __DIR__ . ""/tests/dom/phpmig.php"";  $app = new PhpmigApplication($container, $output);  // run the migrations $app->up(); Todo Some sort of migration manager, that will take some of the logic out of the commands for calculating which migrations have been run, which need running etc Adapters for Zend_Db and/or Zend_Db_Table and others? Redo and rollback commands Tests! Configuration? Someway of protecting against class definition clashes with regard to the symfony dependencies and the user supplied bootstrap? Contributing Feel free to fork and send me pull requests, I try and keep the tool really basic, if you want to start adding tons of features to phpmig, I'd recommend taking a look at robmorgan/phinx. Inspiration I basically started copying ActiveRecord::Migrations in terms of the migration features, the bootstrapping was my own idea, the layout of the code was inspired by Symfony and Behat Copyright Pimple is copyright Fabien Potencier. Everything I haven't copied from anyone else is Copyright (c) 2011 Dave Marshall. See LICENCE for further details Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/davedevelopment/phpmig"	"Another migration management library."	"true"
"Migrations"	"Ruckusing"	"https://github.com/ruckus/ruckusing-migrations"	"Database migrations for PHP ala ActiveRecord Migrations with support for MySQL, Postgres, SQLite."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"452"	"32"	"87"	"GitHub - ruckus/ruckusing-migrations: Database migrations for PHP ala ActiveRecord Migrations with support for MySQL, Postgres, SQLite Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 452 Fork 87 ruckus/ruckusing-migrations Code Issues 22 Pull requests 1 Wiki Pulse Graphs Database migrations for PHP ala ActiveRecord Migrations with support for MySQL, Postgres, SQLite 310 commits 2 branches 15 releases 34 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master module-migration-dir Nothing to show 1.1.1 1.1.0 1.0.9 1.0.8 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit d8bfc6b Jun 15, 2016 ruckus committed on GitHub Merge pull request #170 from voku/master … extend tests via Travis CI + code-coverage via PhpUnit Permalink Failed to load latest commit information. config Support to execute multiple queries. Mar 20, 2014 lib Mysql is picky about table options May 19, 2016 tests fixed tests for HHVM Jun 15, 2016 .gitignore Implement multi_query method Mar 10, 2015 .travis.yml Update .travis.yml Jun 15, 2016 LICENSE.txt bump May 20, 2016 README.md update documentation Mar 2, 2015 composer.json removed version from composer.json. The version is to be inferred fro… Feb 21, 2015 phpunit.xml.dist Update phpunit.xml.dist Jun 14, 2016 ruckus.php mode Jun 18, 2013 README.md Introduction Ruckusing is a framework written in PHP5 for generating and managing a set of ""database migrations"". Database migrations are declarative files which represent the state of a DB (its tables, columns, indexes, etc) at a particular state of time. By using database migrations, multiple developers can work on the same application and be guaranteed that the application is in a consistent state across all remote developer machines. The idea of the framework was borrowed from the migration system built into Ruby on Rails. Any one who is familiar with Migrations in RoR will be immediately at home. Getting Started & Documentation See the Wiki for the complete documentation on the migration methods supported and how to get started. Databases Supported Postgres MySQL Sqlite Features Portability: the migration files, which describe the tables, columns, indexes, etc to be created are themselves written in pure PHP5 which is then translated to the appropriate SQL at run-time. This allows one to transparently support any RDBMS with a single set of migration files (assuming there is an adapter for it, see below). ""rake"" like support for basic tasks. The framework has a concept of ""tasks"" (in fact the primary focus of the framework, migrations, is just a plain task) which are just basic PHP5 classes which implement an interface. Tasks can be freely written and as long as they adhere to a specific naming convention and implement a specific interface, the framework will automatically register them and allow them to be executed. The ability to go UP or DOWN to a specific migration state. Code generator for generating skeleton migration files. Support for module based migration directories where migrations files could be generated/run from specified module directories. Out-of-the-box support for basic tasks like initializing the DB schema info table (db:setup), asking for the current version (db:version) and dumping the current schema (db:schema). Limitations PHP 5.2+ is a hard requirement. The framework employes extensive use of object-oriented features of PHP5. There are no plans to make the framework backwards compatible. Configuration Copy /path/to/ruckusing-migrations/config/database.inc.php to /path/to/mycodebase/ruckusing.conf.php and update the development key with your DB credentials: type is one of pgsql, mysql, sqlite depending on your database, as well migrations_dir, db_dir, log_dir, ruckusing_base paths. If you want to use module migration directories, Edit /path/to/mycodebase/ruckusing.conf.php and update migrations_dir like array('default' => '/default/path', 'module_name' => '/module/migration/path') paths. Copy /path/to/ruckusing-migrations/ruckus.php to /path/to/mycodebase/ruckus.php. Custom Tasks All tasks in lib/Task are enabled by default. If you would like to implement custom tasks then you can specify the directory of your tasks in your over-ridden ruckusing.conf.php in the tasks_dir key: # ruckusing.conf.php  return array(  /* ... snip ... */,  'tasks_dir' => RUCKUSING_WORKING_BASE . '/custom_tasks' ); Generating Skeleton Migration files From the top-level of your code base, run: $ php ruckus.php db:generate create_users_table  Created OK Created migration: 20121112163653_CreateUsersTable.php  Module migration directory example: $ php ruckus.php db:generate create_items_table module=module_name  Created OK Created migration: 20121112163653_CreateItemsTable.php  The generated file is in the migrations directory. Open up that file and you'll see it looks like: class CreateUsersTable extends Ruckusing_Migration_Base {      public function up() {      }//up()      public function down() {      }//down() }  All of the methods below are to be implemented in the up() and down() methods. Running Migrations Run all pending migrations: $ php ruckus.php db:migrate  Rollback the most recent migration: $ php ruckus.php db:migrate VERSION=-1  Rollback to a specific migration (specify the timestamp in the filename of the migration to rollback to): $ php ruckus.php db:migrate VERSION=20121114001742  Overview of the migration methods available The available methods are (brief list below, with detailed usageg further down): Database-level operations create_database drop_database Table-level operations create_table drop_table rename_table Column-level operations add_column remove_column rename_column change_column add_timestamps Index-level operations add_index remove_index Query execution execute select_one select_all Database-level Operations There are two database-level operations, create_database and drop_database. Migrations that manipulate databases on this high of a level are used rarely. Creating a new Database This command is slightly useless since normally you would be running your migrations against an existing database (created and setup with whatever your traditional RDMBS creation methods are). However, if you wanted to create another database from a migration, this method is available: Method Call: create_database Parameters name : Name of the new database Example:     $this->create_database(""my_project""); Removing a database To completely remove a database and all of its tables (and data!). Method Call: drop_database Parameters name : Name of the existing database Example:     $this->drop_database(""my_project""); This method is probably the most complex of all methods, but also one of the most widely used. Method Call: create_table Parameters name : Name of the new table options : (Optional) An associative array of options for creating the new table. Supported option key/value pairs are: id : Boolean - whether or not the framework should automatically generate a primary key. For MySQL the column will be called id and be of type integer with auto-incrementing. options : A string representing finalization parameters that will be passed verbatim to the tail of the create table command. Often this is used to specify the storage engine for MySQL, e.g. 'options' => 'Engine=InnoDB' Assumptions Ultimately this method delegates to the appropriate RDMBS adapter and the MySQL adapter makes some important assumptions about the structure of the table. Table-level operations The database migration framework offers a rich facility for creating, removing and renaming tables. Creating tables A call to $this->create_table(...) actually returns a TableDefinition object. This method of the framework is one of the very few which actually returns a result that you must interact with (as and end user). The steps for creating a new table are: Create the table with a name and any optional options and store the return value for later use:     $users = $this->create_table(""users""); Add columns to the table definition:     $users->column(""first_name"", ""string"");     $users->column(""last_name"", ""string""); Call finish() to actually create the table with the definition and its columns:     $users->finish(); By default, the table type will be what your database defaults too. To specify a different table type (e.g. InnoDB), pass a key of options into the $options array, e.g. Example A: Create a new InnoDB table called users.     $this->create_table('users', array('options' => 'Engine=InnoDB')); This command also assumes that you want an id column. This column does not need to be specified, it will be auto-generated, unless explicitly told not to via the id key in $options array. Example B: Create a new table called users but do not automatically make a primary key.     $this->create_table('users', array('id' => false)); The primary key column will be created with attributes of int(11) unsigned auto_increment. Example C: To specify your own primary key called 'guid':     $t = $this->create_table('users', array('id' => false, 'options' => 'Engine=InnoDB'));     $t->column('guid', 'string', array('primary_key' => true, 'limit' => 64));     $t->finish(); Removing tables Tables can be removed by using the drop_table method call. As might be expected, removing a table also removes all of its columns and any indexes. Method Call: drop_table Arguments:: table_name: The name of the table to remove. Example:    $this->drop_table(""users""); Renaming tables Tables can be renamed using the rename_table method. Method Call: rename_table Arguments:: table_name: The existing name of the table. new_name: The new name of the table. Example:    // rename from ""users"" to ""people""    $this->rename_table(""users"", ""people""); Column-level operations Adding a new column to a table For the complete documentation on adding new columns, please see Adding Columns Removing Columns Removing a database column is very simple, but keep in mind that any index associated with that column will also be removed. Method call: remove_column Arguments table_name: The name of the table from which the column will be removed. column_name: The column to be removed. Example A:: Remove the age column from the users table.     $this->remove_column(""users"", ""age""); Renaming a column Database columns can be renamed (assuming the underlying RDMBS/adapter supports it). Method call: rename_column Arguments: table_name: The name of table from which the column is to be renamed. column_name: The existing name of the column. new_column_name: The new name of the column. Example A: From the users table, rename first_name to fname     $this->rename_column(""users"", ""first_name"", ""fname""); Modifying an existing column The type, defaults or NULL support for existing columns can be modified. If you want to just rename a column then use the rename_column method. This method takes a generalized type for the column's type and also an array of options which affects the column definition. For the available types and options, see the documentation on adding new columns, AddingColumns. Method Call: change_column Arguments: table_name: The name of the table from which the column will be altered. column_name: The name of the column to change. type: The desired generalized type of the column. options: (Optional) An associative array of options for the column definition. Example A: From the users table, change the length of the first_name column to 128.     $this->change_column(""users"", ""first_name"", ""string"", array('limit' => 128) ); Add timestamps columns We often need colunmns to timestamp the created at and updated at operations. This convenient method is here to easily generate them for you. Method Call:add_timestamps Arguments: table_name: The name of the table to which the columns will be added created_name: The desired of the created at column, be default created_at updated_name: The desired of the updated at column, be default updated_at Exemple A: Add timestamps columns to users table.     $this->add_timestamps(""users""); Exemple B: Add timestamps columns to users table with created and updated column names.     $this->add_timestamps(""users"", ""created"", ""updated""); Index-level operations Indexes can be created and removed using the framework methods. Adding a new index Method Call: add_index Arguments: table: The name of the table to add the index to. column: The column to create the index on. If this is a string, then it is presumed to be the name of the column, and the index will be a single-column index. If it is an array, then it is presumed to be a list of columns name and the index will then be a multi-column index, on the columns specified. options: (Optional) An associative array of options to control the index generation. Keys / Value pairs: unique: values: true or false. Whether or not create a unique index for this column. Defaults to false. name : values: user defined. The name of the index. If not specified, a default name will be generated based on the table and column name. Known Issues / Workarounds: MySQL is currently limited to 64 characters for identifier names. When add_index is used without specifying the name of the index, Ruckusing will generate a suitable name based on the table name and the column(s) being index. For example, if there is a users table and an index is being generated on the username column then the generated index name would be: idx_users_username . If one is attempting to add a multi-column index then its very possible that the generated name would be longer than MySQL's limit of 64 characters. In such situations Ruckusing will raise an error suggesting you use a custom index name via the name option parameter. See Example C. Example A: Create an index on the email column in the users table.     $this->add_index(""users"", ""email""); Example B: Create a unqiue index on the ssn column in the users table.     $this->add_index(""users"", ""ssn"", array('unique' => true))); Example C: Create an index on the blog_id column in the posts table, but specify a specific name for the index.     $this->add_index(""posts"", ""blog_id"", array('name' => 'index_on_blog_id')); Example D: Create a multi-column index on the email and ssn columns in the users table.     $this->add_index(""users"", array('email', 'ssn') ); Removing an index Easy enough. If the index was created using the sibling to this method (add_index) then one would need to just specify the same arguments to that method (but calling remove_index). Method Call: remove_index Arguments: table_name: The name of the table to remove the index from. column_name: The name of the column from which to remove the index from. options: (Optional) An associative array of options to control the index removal process. Key / Value pairs: name : values: user defined. The name of the index to remove. If not specified, a default name will be generated based on the table and column name. If during the index creation process (using the add_index method) and a name is specified then you will need to do the same here and specify the same name. Otherwise, the default name that is generated will likely not match with the actual name of the index. Example A: Remove the (single-column) index from the users table on the email column.     $this->remove_index(""users"", ""email""); Example B: Remove the (multi-column) index from the users table on the email and ssn columns.     $this->remove_index(""users"", array(""email"", ""ssn"") ); Example C: Remove the (single-column) named index from the users table on the email column.     $this->remove_index(""users"", ""email"", array('name' => ""index_on_email_column"") ); Query Execution Arbitrary query execution is available via a set of methods. Execute method The execute() method is intended for queries which do not return any data, e.g. INSERT, UPDATE or DELETE. Example A: Update all rows give some criteria     $this->execute(""UPDATE foo SET name = 'bar' WHERE .... ""); Queries that return results For queries that return results, e.g. SELECT queries, then use either select_one or select_all depending on what you are returning. Both of these methods return an associative array with each element of the array being itself another associative array of the column names and their values. select_one() is intended for queries where you are expecting a single result set, and select_all() is intended for all other cases (where you might not necessarily know how many rows you will be getting). NOTE: Since these methods take raw SQL queries as input, they might not necessarily be portable across all RDBMS. Example A (select_one): Get the sum of of a column     $result = $this->select_one(""SELECT SUM(total_price) AS total_price FROM orders"");     if($result) {      echo ""Your revenue is: "" . $result['total_price'];     } *Example B (select_all): *: Get all rows and iterate over each one, performing some operation:     $result = $this->select_all(""SELECT email, first_name, last_name FROM users WHERE created_at >= SUBDATE( NOW(), INTERVAL 7 DAY)"");      if($result) {       echo ""New customers: ("" . count($result) . "")\n"";       foreach($result as $row) {         printf(""(%s) %s %s\n"", $row['email'], $row['first_name'], $row['last_name']);       }     } Testing The unit tests require phpunit to be installed: http://www.phpunit.de/manual/current/en/installation.html Running the complete test suite $ vi config/database.inc.php $ mysql -uroot -p < tests/test.sql $ psql -Upostgres -f tests/test.sql $ phpunit Will run all test classes in tests/unit. Running a single test file $ vi config/database.inc.php $ mysql -uroot -p < tests/test.sql $ phpunit tests/unit/MySQLAdapterTest.php Some of the tests require a mysql_test or pg_test database configuration to be defined. If this is required and its not satisfied than the test will complain appropriately. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ruckus/ruckusing-migrations"	"Database migrations for PHP ala ActiveRecord Migrations with support for MySQL, Postgres, SQLite."	"true"
"NoSQL"	"Monga"	"https://github.com/thephpleague/monga"	"A MongoDB abstraction library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"250"	"20"	"30"	"GitHub - thephpleague/monga: Simple and swift MongoDB abstraction. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 250 Fork 30 thephpleague/monga Code Issues 1 Pull requests 0 Pulse Graphs Simple and swift MongoDB abstraction. 202 commits 2 branches 20 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.1.0 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 0.2.3 0.2.1 0.2.0 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit 4df18d9 Apr 15, 2016 bcrowe Merge pull request #38 from phofmann-trust/patch-1 … Fixed example code for nested queries Permalink Failed to load latest commit information. src/League update addToSet function in order to support mixed dataset. also supp… Feb 18, 2016 tests Use local db to test hasDatabase Nov 17, 2015 .gitattributes Added a .gitattributes Oct 22, 2014 .gitignore ignore the coverage dir, for code-coverage html output Nov 8, 2012 .scrutinizer.yml Use scrutinizer config from skeleton Oct 21, 2014 .travis.yml Add CS build to Travis Sep 16, 2015 CHANGELOG.md Fix function reference Feb 29, 2016 CONDUCT.md Update COC Nov 12, 2015 CONTRIBUTING.md Add CONTRIBUTING.md, update LICENSE to use markdown, update LICENSE l… Nov 4, 2014 LICENSE.md Update license year Jan 5, 2016 README.md Fixed example code for nested queries Apr 15, 2016 composer.json Use space indentation in composer.json Dec 1, 2015 phpunit.xml Use spaces for indentation in phpunit.xml Nov 21, 2015 README.md Monga A simple and swift MongoDB abstraction layer for PHP 5.4+ What's this all about? An easy API to get connections, databases and collections. A filter builder that doesn't make your mind go nuts. All sorts of handy update functions. An abstraction for sorting single results. GridFS support for a Mongo filesystem. Easy aggregation and distinct values. Vision Monga was created with the acknowledgment of the MongoDB PHP package already being pretty awesome. That's why in a lot of cases Monga is just a simple wrapper around the MongoDB classes. It provides some helpers and helps you set up queries using a query builder. Which you can also choose not to use! Everything will still work accordingly. During the development, a lot of planning has gone into creating a nice streamlined API that closely follows the MongoDB base classes, while complementing existing query builders for SQL-like databases. Install Via Composer $ composer require league/monga Usage  use League\Monga;  // Get a connection $connection = Monga::connection($dns, $connectionOptions);  // Get the database $database = $connection->database('db_name');  // Drop the database $database->drop();  // Get a collection $collection = $database->collection('collection_name');  // Drop the collection $collection->drop();  // Truncate the collection $collection->truncate();  // Insert some values into the collection $insertIds = $collection->insert([     [         'name' => 'John',         'surname' => 'Doe',         'nick' => 'The Unknown Man',         'age' => 20,     ],     [         'name' => 'Frank',         'surname' => 'de Jonge',         'nick' => 'Unknown',         'nik' => 'No Man',         'age' => 23,     ], ]);  // Update a collection $collection->update(function ($query) {     $query->increment('age')         ->remove('nik')         ->set('nick', 'FrenkyNet'); });  // Find Frank $frank = $collection->findOne(function ($query) {     $query->where('name', 'Frank')         ->whereLike('surname', '%e Jo%'); });  // Or find him using normal array syntax $frank = $collection->find([     'name' => 'Frank',     'surname' => new MongoRegex('/e Jo/imxsu') ]);  $frank['age']++;  $collection->save($frank);  // Also supports nested queries $users = $collection->find(function ($query) {     $query->where(function ($query) {         $query->where('name', 'Josh')             ->orWhere('surname', 'Doe');     })->orWhere(function ($query) {         $query->where('name', 'Frank')             ->where('surname', 'de Jonge');     }); });  // get the users as an array $arr = $users->toArray(); Aggregation A big part of the newly released MongoDB pecl package is aggregation support. Which is super easy to do with Monga: $collection->aggregate(function ($a) {     $a->project([         'name' => 1,         'surname' => -1,         'tags' => 1,     ])->unwind('tags');      // But also more advanced groups/projections     $a->project(function ($p) {         $p->select('field')             ->select('scores')             ->exclude('other_field');     })->group(function ($g) {         $g->by(['$name', '$surname'])             ->sum('scores');     }); }); Contributing Please see CONTRIBUTING and CONDUCT for details. Security If you discover any security related issues, please email bryan@bryan-crowe.com instead of using the issue tracker. Credits Frank de Jonge All Contributors License The MIT License (MIT). Please see License File for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/monga"	"A MongoDB abstraction library."	"true"
"NoSQL"	"MongoQB"	"https://github.com/alexbilbie/MongoQB"	"A MongoDB query builder library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"185"	"13"	"64"	"GitHub - alexbilbie/MongoQB: A PHP MongoDB query builder library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 185 Fork 64 alexbilbie/MongoQB Code Pull requests 7 Pulse Graphs A PHP MongoDB query builder library 86 commits 2 branches 6 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show v1.3 v1.2.1 v1.2 v1.1 v1.0.1 v1 Nothing to show New pull request Latest commit 7e51699 Jul 13, 2015 alexbilbie Update README.md Permalink Failed to load latest commit information. src/MongoQB Fixed compatibility for Mongo v1.3 driver Nov 28, 2012 tests Updated tests for Mongo v1.3 Nov 28, 2012 .gitignore Ignore dev dir Nov 15, 2012 .travis.yml Install latest mongo pecl Nov 28, 2012 README.md Update README.md Jul 13, 2015 composer.json Version bump Nov 28, 2012 README.md This project is abandoned, if you want to take over it please send me a message on Twitter - @alexbilbie A PHP MongoDB query builder library Install via Packagist and Composer Add the following into your composer.json file: {     ""require"": {         ""alexbilbie/mongoqb"": ""*""     } } Then run composer install Install via Git git clone git://git@github.com:alexbilbie/MongoQB Download a zip/tarball Download the latest version: zip tar (Note the zip/tarball won't include any unit tests or composer files) Unit tests Master branch Develop branch The library currently has 100% unit test coverage. To run the unit test suite make sure you have MongoDB installed locally and running with no authentication and on the default port - 27017. Then run: composer update --dev cd vendor/alexbilbie/mongoqb phpunit -c tests/phpunit.xml Example usage Connect to the database $qb = \MongoQB\Builder(array(     'dsn'   =>  'mongodb://user:pass@localhost:27017/databaseName' ); Insert a document $qb->insert('collectionName', [     'name'  =>  'Alex',     'age'   =>  22,     'likes' =>  ['whisky', 'gin'] ]); Update a single document $qb     ->where(['name' => 'Alex'])     ->set([         'country' => 'UK',         'job' => 'Developer'     ])     ->push('likes', ['PHP', 'coffee'])     ->update('collectionName'); Delete a single document $qb     ->where(['name' => 'Alex'])     ->delete('collectionName'); Search for matching documents $results = $qb     ->whereGt('age', 21)     ->whereIn('likes', ['whisky'])     ->where('country', 'UK')     ->get('collectionName'); If you find any bugs please file a report in the Issue tracker If you find this software useful please consider donating, thank you =] Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/alexbilbie/MongoQB"	"A MongoDB query builder library."	"true"
"NoSQL"	"PHPMongo"	"https://github.com/sokil/php-mongo"	"A MongoDB ORM."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"112"	"13"	"31"	"GitHub - sokil/php-mongo: PHP ODM for MongoDB. Part of PHPMongoKit Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 112 Fork 31 sokil/php-mongo Code Issues 30 Pull requests 0 Wiki Pulse Graphs PHP ODM for MongoDB. Part of PHPMongoKit http://phpmongokit.github.io/ 1,059 commits 1 branch 44 releases 7 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.16.1 1.16 1.15.2 1.15.1 1.15 1.14 1.13.9 1.13.8 1.13.7 1.13.6 1.13.5 1.13.4 1.13.3 1.13.2 1.13.1 1.13 1.12.8 1.12.7 1.12.6 1.12.5 1.12.4 1.12.3 1.12.2 1.12.1 1.12.0 1.11.7 1.11.6 1.11.5 1.11.4 1.11.3 1.11.2 1.11.1 1.11.0 1.10.10 1.9.0 1.8.5 1.7.0 1.6.3 1.5.0 1.4.1 1.3.3 1.2.5 1.1.1 1.0.17 Nothing to show New pull request Latest commit 15d3bd8 Jul 5, 2016 sokil committed on GitHub Update README.md Permalink Failed to load latest commit information. src add test Jun 27, 2016 stubs json serializable Mar 26, 2015 tests fix test for php 5.3 Jun 28, 2016 .coveralls.yml Update .coveralls.yml Sep 17, 2014 .gitignore remove user-specific ignores Jan 18, 2015 .scrutinizer.yml Create .scrutinizer.yml Jan 31, 2015 .travis.yml travis fix tests Jun 23, 2016 CHANGELOG.md Update CHANGELOG.md Jun 24, 2016 LICENSE Update LICENSE Jan 14, 2016 README.md Update README.md Jul 5, 2016 composer.json fix tests Jun 23, 2016 README.md PHPMongo PHP ODM for MongoDB. Why to use this ODM? You can easily work with document data through comfortable getters and setters instead of array and don't check if key exist in array. Access to sub document uses dot-syntax. You can validate data passed to document before save. We give you events, which you can handle in different moments of document's life, and more things which make you life easier. Requirements PHP 5.3 or above PHP MongoDB Extension 0.9 or above (Some features require >= 1.5) Tested over MongoDB v.2.4.12, v.2.6.9, v.3.0.2 Symfony Event Dispatcher GeoJson version ~1.0 PSR-3 logger interface Table of contents Installation Common installation Symfony bundle Yii component Support of migrations Connecting Mapping Selecting database and collection Custom collections Document schema Document validation Getting documents by id Create new document Get and set data in document Embedded documents Storing document Storing mapped object Insert and update documents without ODM Batch insert Batch update Moving data between collections Querying documents Query Builder Extending Query Builder Identity Map Comparing queries Geospatial queries Fulltext search Pagination Persistence (Unit of Work) Deleting collections and documents Aggregation framework Events Behaviors Relation One-to-one relation One-to-many relation Many-to-many relation Add relation Remove relation Concurency Optimistic locking Read preferences Write concern Capped collections Executing commands Queue Migrations GridFS Versioning Indexes Caching and documents with TTL Debugging Logging Profiling Installation Common installation You can install library through Composer: composer require sokil/php-mongo  Download latest release: Latest sources from GitHub Symfony bundle If you use Symfony framework, you can use Symfony MongoDB Bundle which wraps this library composer require sokil/php-mongo-bundle  Yii component If you use Yii Framework, you can use Yii Adapter which wraps this library composer require sokil/php-mongo-yii  This package in addition to PHPMongo adapter also has data provider and log router for MongoDb. Support of migrations If you require migrations, you can add dependency to ""sokil/php-mongo-migrator"", based on this library: composer require sokil/php-mongo-migrator  Connecting Single connection Connecting to MongoDB server made through \Sokil\Mongo\Client class: <?php $client = new Client($dsn); Format of DSN used to connect to server described in PHP manual. To connect to localhost use next DSN: mongodb://127.0.0.1  To connect to replica set use next DSN: mongodb://server1.com,server2.com/?replicaSet=replicaSetName  Pool of connections If you have few connections you may prefer connection pool instead of managing different connections. Use \Sokil\Mongo\ClientPool instance to initialize pool object: <?php  $pool = new ClientPool(array(     'connect1' => array(         'dsn' => 'mongodb://127.0.0.1',         'defaultDatabase' => 'db2',         'connectOptions' => array(             'connectTimeoutMS' => 1000,             'readPreference' => \MongoClient::RP_PRIMARY,         ),         'mapping' => array(             'db1' => array(                 'col1' => '\Collection1',                 'col2' => '\Collection2',             ),             'db2' => array(                 'col1' => '\Collection3',                 'col2' => '\Collection4',             )         ),     ),     'connect2' => array(         'dsn' => 'mongodb://127.0.0.1',         'defaultDatabase' => 'db2',         'mapping' => array(             'db1' => array(                 'col1' => '\Collection5',                 'col2' => '\Collection6',             ),             'db2' => array(                 'col1' => '\Collection7',                 'col2' => '\Collection8',             )         ),     ), ));  $connect1Client = $pool->get('connect1'); $connect2Client = $pool->get('connect2'); Mapping Selecting database and collection You can get instances of databases and collections by its name. To get instance of database class \Sokil\Mongo\Database: <?php $database = $client->getDatabase('databaseName'); // or simply $database = $client->databaseName; To get instance of collection class \Sokil\Mongo\Collection: <?php $collection = $database->getCollection('collectionName'); // or simply $collection = $database->collectionName; Default database may be specified to get collection directly from \Sokil\Mongo\Client object: <?php $client->useDatabase('databaseName'); $collection = $client->getCollection('collectionName'); Custom collections Custom collections used to add some collection-specific fetures in related class. First you need to create class extended from \Sokil\Mongo\Collection: <?php  // define class of collection class CustomCollection extends \Sokil\Mongo\Collection {  } This class must be then mapped to collection name in order to return object of this class when collection requested. Custom collection referenced in standart way: <?php /**  * @var \CustomCollection  */ $collection = $client     ->getDatabase('databaseName')     ->getCollection('collectionName'); Mapping of collection name to collection class Any collection name may be mapped to class name directly: <?php  // map class to collection name $client->map([     'databaseName'  => [         'collectionName' => '\CustomCollection'     ], ]);  /**  * @var \CustomCollection  */ $collection = $client->getDatabase('databaseName')->getCollection('collectionName'); Mapping with class prefix We can specify collection class prefix so any collection may be mapped to class without enumerating every collection name: <?php $client->map([     'databaseName'  => '\Class\Prefix', ]);  /**  * @var \Class\Prefix\CollectionName  */ $collection = $client->getDatabase('databaseName')->getCollection('collectionName');  /**  * @var \Class\Prefix\CollectionName\SubName  */ $collection = $client->getDatabase('databaseName')->getCollection('collectionName.subName'); Collection definition options If you want to pass some options to collection's constructor, you also can configure them in mapping definition: <?php $client->map([     'databaseName'  => [         'collectionName' => [             'class' => '\Some\Custom\Collection\Classname',             'collectionOption1' => 'value1',             'collectionOption2' => 'value2',         ]     ], ]); All options later may be accessed by Collection::getOption() method: <?php // will return 'value1' $client     ->getDatabase('databaseName')     ->getCollection('collectionName')     ->getOption('collectionOption1'); Predefined options are: Option Default value Description class \Sokil\Mongo\Collection Fully qualified collectin class documentClass \Sokil\Mongo\Document Fully qualified document class versioning false Using document versioning index null Index definition expressionClass \Sokil\Mongo\Expression Fully qualified expression class for custom query builder behaviors null List of behaviors, attached to every document relations null Definition of relations to documents in other collection batchSize null Number of documents to return in each batch of response clientCursorTimeout null A timeout can be set at any time and will affect subsequent queries on the cursor, including fetching more results from the database serverCursorTimeout null A cumulative time limit in milliseconds to be allowed by the server for processing operations on the cursor If class omitted, then used standart \Sokil\Mongo\Collection class. To override default document class use documentClass option of collection: <?php $client->map([     'databaseName'  => [         'collectionName' => [             'documentClass' => '\Some\Document\Class',         ]     ], ]);  // is instance of \Some\Document\Class $document = $client     ->getDatabase('databaseName')     ->getCollection('collectionName')     ->createDocument(); Regexp mapping Collection name in mapping may be defined as RegExp pattern. Pattern must start from symbol /: <?php $database->map(array(     '/someCollection(\d)/' => '\Some\Collection\Class', )); Any collection with name matched to pattern will be instance of \Some\Collection\Class: <?php $col1 = $database->getCollection('someCollection1'); $col2 = $database->getCollection('someCollection2'); $col4 = $database->getCollection('someCollection4'); Any stored regexp values than may be get through $collection->getOption('regex');. <?php $database->map(array(     '/someCollection(\d+)/' => '\Some\Collection\Class', )); $col42 = $database->getCollection('someCollection42'); echo $col1->getOption('regexp')[0]; // someCollection42 echo $col1->getOption('regexp')[1]; // 42 Document schema and validating Custom document class Custom document class may be useful when required some processing of date on load, getting or save. Custom document class must extend \Sokil\Mongo\Document. <?php class CustomDocument extends \Sokil\Mongo\Document {  } Now you must configure its name in collection's class by overriding method Collection::getDocumentClassName(): <?php class CustomCollection extends \Sokil\Mongo\Collection {     public function getDocumentClassName(array $documentData = null) {         return '\CustomDocument';     } } Single Collection Inheritance Often useful to have different document classes, which store data in single collection. For example you have products in your shop Song and VideoClip, which inherit abstract Product. They have same fields like author or duration, but may also have other different fields and behaviors. This situation described in example Product Catalog. You may flexibly configure document's class in \Sokil\Mongo\Collection::getDocumentClassName() relatively to concrete value of field (this field called discriminator), or other more complex logic: <?php class CustomCollection extends \Sokil\Mongo\Collection {     public function getDocumentClassName(array $documentData = null) {         return '\Custom' . ucfirst(strtolower($documentData['type'])) . 'Document';     } } Also document class may be defined in collection mapping: <?php $client->map([     'databaseName'  => [         'collectionName1' => [             'documentClass' => '\CustomDocument',         ],         'collectionName2' => function(array $documentData = null) {             return '\Custom' . ucfirst(strtolower($documentData['type'])) . 'Document';         },         'collectionName3' => [             'documentClass' => function(array $documentData = null) {                 return '\Custom' . ucfirst(strtolower($documentData['type'])) . 'Document';             },         ],     ], ]); In example above class \CustomVideoDocument related to {""_id"": ""45.."", ""type"": ""video""}, and \CustomAudioDocument to {""_id"": ""45.."", type: ""audio""} Document schema Document's scheme is completely not required. If field is required and has default value, it can be defined in special property of document class Document::schema: <?php class CustomDocument extends \Sokil\Mongo\Document {     protected $schema = [         'requiredField' => 'defaultValue',         'someField'     => [             'subDocumentField' => 'value',         ],     ]; } Also supported deprecated format Document::_data: <?php class CustomDocument extends \Sokil\Mongo\Document {     protected $_data = [         'requiredField' => 'defaultValue',         'someField'     => [             'subDocumentField' => 'value',         ],     ]; } Document validation Document may be validated before save. To set validation rules, you may override method \Sokil\Mongo\Document::rules() and pass validation rules here. Supported rules are: <?php class CustomDocument extends \Sokil\Mongo\Document {     public function rules()     {         return array(             array('email,password', 'required'),             array('role', 'equals', 'to' => 'admin'),             array('role', 'not_equals', 'to' => 'guest'),             array('role', 'in', 'range' => array('admin', 'manager', 'user')),             array('contract_number', 'numeric', 'message' => 'Custom error message, shown by getErrors() method'),             array('contract_number' ,'null', 'on' => 'SCENARIO_WHERE_CONTRACT_MUST_BE_NULL'),             array('code' ,'regexp', '#[A-Z]{2}[0-9]{10}#')         );     } } Document can have validation state, based on scenario. Scenario can be specified by method Document::setScenario($scenario). <?php $document->setScenario('register'); If some validation rule applied only for some scenarios, this scenarios must be passed on on key, separated by comma. <?php public function rules()     {         return array(             array('field' ,'null', 'on' => 'register,update'),         );     } If some validation rule applied to all except some scenarios, this scenarios must be passed on except key, separated by comma. <?php public function rules()     {         return array(             array('field' ,'null', 'except' => 'register,update'),         );     } If document invalid, \Sokil\Mongo\Document\InvalidDocumentException is thrown and errors may be accessed through Document::getErrors() method of document object. This document may be get from exception method: <?php try {  } catch(\Sokil\Mongo\Document\InvalidDocumentException $e) {     $e->getDocument()->getErrors(); } Exception \Sokil\Mongo\Document\Exception\Validate was thrown before v.1.11.6 when document was invalid. Since v.1.11.6 this exception is deprecated. Use \Sokil\Mongo\Document\InvalidDocumentException instead. Error may be triggered manually by calling method triggerError($fieldName, $rule, $message) <?php $document->triggerError('someField', 'email', 'E-mail must be at domain example.com'); You may add you custom validation rule just adding method to document class and defining method name as rule: <?php class CustomDocument extends \Sokil\Mongo\Document {     punlic function rules()     {         return array(             array(                 'email',                 'uniqueFieldValidator',                 'message' => 'E-mail must be unique in collection'             ),         );     }      /**  * Validator  */     public function uniqueFieldValidator($fieldName, $params)     {         // Some logic of checking unique mail.         //         // Before version 1.7 this method must return true if validator passes,         // and false otherwise.         //         // Since version 1.7 this method return no values and must call         // Document::addError() method to add error into stack.     } } You may create your own validator class, if you want to use validator in few classes. Just extend your class from abstract validator class \Sokil\Mongo\Validator and register your own validator namespace: <?php namespace Vendor\Mongo\Validator;  /**  * Validator class  */ class MyOwnEqualsValidator extends \Sokil\Mongo\Validator {     public function validateField(\Sokil\Mongo\Document $document, $fieldName, array $params)     {         if (!$document->get($fieldName)) {             return;         }          if ($document->get($fieldName) === $params['to']) {             return;         }          if (!isset($params['message'])) {             $params['message'] = 'Field ""' . $fieldName . '"" must be equals to ""' . $params['to'] . '"" in model ' . get_called_class();         }          $document->addError($fieldName, $this->getName(), $params['message']);     } }  /**  * Registering validator in document  */  class SomeDocument extends \Sokil\Mongo\Document {     public function beforeConstruct()     {         $this->addValidatorNamespace('Vendor\Mongo\Validator');     }      public function rules()     {         return array(             // 'my_own_equals' converts to 'MyOwnEqualsValidator' class name             array('field', 'my_own_equals', 'to' => 42, 'message' => 'Not equals'),         );     } } Getting documents by id To get document from collection by its id: <?php $document = $collection->getDocument('5332d21b253fe54adf8a9327'); To add additional checks or query modifiers use callable: <?php $document = $collection->getDocument(     '5332d21b253fe54adf8a9327',     function(\Sokil\Mongo\Cursor $cursor) {         // get document only if active         $cursor->where('status', 'active');         // slice embedded documents         $cursor->slice('embdocs', 10, 30);     } ); Note that if callable specified, document always loaded directly omitting document pool. Create new document Create new empty document object: <?php $document = $collection->createDocument(); Or with pre-defined values: <?php $document = $collection->createDocument([     'param1' => 'value1',     'param2' => 'value2' ]); Get and set data in document To get value of document's field you may use one of following ways: <?php $document->requiredField; // defaultValue $document->get('requiredField'); // defaultValue $document->getRequiredField(); // defaultValue  $document->someField; // ['subDocumentField' => 'value'] $document->get('someField'); // ['subDocumentField' => 'value'] $document->getSomeField(); // ['subDocumentField' => 'value'] $document->get('someField.subDocumentField'); // 'value'  $document->get('some.unexisted.subDocumentField'); // null If field not exists, null value returned. To set value you may use following ways: <?php $document->someField = 'someValue'; // {someField: 'someValue'} $document->set('someField', 'someValue'); // {someField: 'someValue'} $document->set('someField.sub.document.field', 'someValue'); // {someField: {sub: {document: {field: {'someValue'}}}}} $document->setSomeField('someValue');  // {someField: 'someValue'} Embedded documents Get embedded document Imagine that you have document, which represent User model: {     ""login"": ""beebee"",     ""email"": ""beebee@gmail.com"",     ""profile"": {         ""birthday"": ""1984-08-11"",         ""gender"": ""female"",         ""country"": ""Ukraine"",         ""city"": ""Kyiv""     } } You can define embedded profile document as standalone class: <?php  /**  * Profile class  */ class Profile extends \Sokil\Mongo\Structure {     public function getBirthday() { return $this->get('birthday'); }     public function getGender() { return $this->get('gender'); }     public function getCountry() { return $this->get('country'); }     public function getCity() { return $this->get('city'); } }  /**  * User model  */ class User extends \Sokil\Mongo\Document {     public function getProfile()     {         return $this->getObject('profile', '\Profile');     } } Now you are able to get profile params: <?php $birthday = $user->getProfile()->getBirthday(); Set embedded document You can also set embedded document. If embedded document has validation rules, they will be checked before embed it to document: /**  * Profile class  */ class Profile extends \Sokil\Mongo\Structure {     public function getBirthday() { return $this->get('birthday'); }      public function rules()     {         return array(             array('birthday', 'required', 'message' => 'REQUIRED_FIELD_EMPTY_MESSAGE'),         );     } }  /**  * User model  */ class User extends \Sokil\Mongo\Document {     public function setProfile(Profile $profile)     {         return $this->set('profile', $profile);     } } If embedded document is invalid, it will throw Sokil\Mongo\Document\InvalidDocumentException. Embedded document may be obtained from exception object: try {     $user->set('profile', $profile); } catch (InvalidDocumentException $e) {     $e->getDocument()->getErrors(); } Get embedded list of documents Imagine that you have stored post data in collection 'posts', and post document has embedded comment documents: {     ""title"": ""Storing embedded documents"",     ""text"": ""MongoDb allows to atomically modify embedded documents"",     ""comments"": [         {             ""author"": ""MadMike42"",             ""text"": ""That is really cool"",             ""date"": ISODate(""2015-01-06T06:49:41.622Z""         },         {             ""author"": ""beebee"",             ""text"": ""Awesome!!!11!"",             ""date"": ISODate(""2015-01-06T06:49:48.622Z""         },     ] } So we can create Comment model, which extends \Sokil\Mongo\Structure: <?php class Comment extends \Sokil\Mongo\Structure {     public function getAuthor() { return $this->get('author'); }     public function getText() { return $this->get('text'); }     public function getDate() { return $this->get('date')->sec; } }  Now we can create Post model with access to embedded Comment models: <?php  class Post extends \Sokil\Mongo\Document {     public function getComments()     {         return $this->getObjectList('comments', '\Comment');     } } Method Post::getComments() allows you to get all of embedded document. To paginate embedded documents you can use \Sokil\Mongo\Cursor::slice() functionality. <?php $collection->find()->slice('comments', $limit, $offset)->findAll(); If you get Document instance through Collection::getDocument() you can define additional expressions for loading it: <?php $document = $collection->getDocument('54ab8585c90b73d6949d4159', function(Cursor $cursor) {     $cursor->slice('comments', $limit, $offset); });  Set embedded list of documents You can store embedded document to array, and validate it before pushing: <?php $post->push('comments', new Comment(['author' => 'John Doe'])); $post->push('comments', new Comment(['author' => 'Joan Doe'])); Storing document Storing mapped object If you have previously loaded and modified instance of \Sokil\Mongo\Document, just save it. Document will automatically be inserted or updated if it already stored. <?php  // create new document and save $document = $collection     ->createDocument(['param' => 'value'])     ->save();  // load existed document, modify and save $document = $collection     ->getDocument('23a4...')     ->set('param', 'value')     ->save(); Insert and update documents without ODM If required quick insert of document without validating, events just insert it as array: <?php $collection->insert(['param' => 'value']); To update existed documents, use: <?php $collection->update($expression, $data, $options); Expression may be defined as array, \Sokil\Mongo\Expressin object or callable, which configure expression. Operator may be defined as array, \Sokil\Mongo\Operator object or callable which configure operator. Options is array of all allowed options, described in http://php.net/manual/ru/mongocollection.update.php. For example: <?php $collection->update(     function(\Sokil\Mongo\Expression $expression) {         $expression->where('status', 'active');     },     function(\Sokil\Mongo\Operator $operator) {         $operator->increment('counter');     },     array(         'multiple' => true,     ) ); Batch insert To insert many documents at once with validation of inserted document: <?php $collection->batchInsert(array(     array('i' => 1),     array('i' => 2), )); Also supported \MongoInsertBatch through interface: <?php $collection     ->createBatchInsert()     ->insert(array('i' => 1))     ->insert(array('i' => 2))     ->execute('majority'); Batch update Making changes in few documents: <?php  $collection->batchUpdate(function(\Sokil\Mongo\Expression $expression) {     return $expression->where('field', 'value'); }, array('field' => 'new value'));  // deprecated since 1.13 $collection->updateMultiple(function(\Sokil\Mongo\Expression $expression) {     return $expression->where('field', 'value'); }, array('field' => 'new value')); Method Collection::updateAll since 1.13 is deprecated. To update all documents use: <?php  $collection->batchUpdate([], array('field' => 'new value')); // deprecated since 1.13 $collection->updateAll(array('field' => 'new value')); Also supported \MongoUpdateBatch through interface: <?php $collection     ->createBatchUpdate()     ->update(         array('a' => 1),         array('$set' => array('b' => 'updated1')),         $multiple,         $upsert     )     ->update(         $collection->expression()->where('a', 2),         $collection->operator()->set('b', 'updated2'),         $multiple,         $upsert     )     ->update(         function(Expression $e) { $e->where('a', 3); },         function(Operator $o) { $o->set('b', 'updated3'); },         $multiple,         $upsert     )     ->execute('majority'); Moving data between collections To copy documents from one collection to another according to expression: <?php // to new collection of same database $collection     ->find()     ->where('condition', 1)     ->copyToCollection('newCollection');  // to new collection in new database $collection     ->find()     ->where('condition', 1)     ->copyToCollection('newCollection', 'newDatabase'); To move documents from one collection to another according to expression: <?php // to new collection of same database $collection     ->find()     ->where('condition', 1)     ->moveToCollection('newCollection');  // to new collection in new database $collection     ->find()     ->where('condition', 1)     ->moveToCollection('newCollection', 'newDatabase'); Important to note that there is no transactions so if error will occur during process, no changes will rollback. Querying documents Query Builder To query documents, which satisfy some conditions you need to use query builder: <?php $cursor = $collection     ->find()     ->fields(['name', 'age'])     ->where('name', 'Michael')     ->whereGreater('age', 29)     ->whereIn('interests', ['php', 'snowboard', 'traveling'])     ->skip(20)     ->limit(10)     ->sort([         'name'  => 1,         'age'   => -1,     ]); All ""where"" conditions added with logical AND. To add condition with logical OR: <?php $cursor = $collection     ->find()     ->whereOr(         $collection->expression()->where('field1', 50),         $collection->expression()->where('field2', 50),     ); Result of the query is iterator \Sokil\Mongo\Cursor, which you can then iterate: <?php foreach($cursor as $documentId => $document) {     echo $document->get('name'); } Or you can get result array: <?php $result = $cursor->findAll(); To get only one result: <?php $document = $cursor->findOne(); To get only one random result: <?php $document = $cursor->findRandom(); To get values from a single field in the result set of documents: <?php $columnValues = $cursor->pluck('some.field.name'); To map found documents: <?php $result = $collection->find()->map(function(Document $document) {     return $document->param; }); To filter found documents: <?php $result = $collection->find()->filter(function(Document $document) {     return $document->param % 2; }); To apply chain of functions to result, use ResultSet: <?php $collection->find()     ->getResultSet()     ->filter(function($doc) { return $doc->param % 2 })     ->filter(function($doc) { return $doc->param > 6 })     ->map(function($item) {         $item->param = 'update' . $item->param;         return $item;     }); When iterating through cursor client retrieve some amount of documents from the server in one round trip. To define this numner of documents: <?php  $cursor->setBatchSize(20); Query timeouts Client timeout defined to stop waiting for a response and throw a \MongoCursorTimeoutException after a set time. A timeout can be set at any time and will affect subsequent queries on the cursor, including fetching more results from the database. $collection->find()->where('name', 'Michael')->setClientTimeout(4200); Server-side timeout for a query specifies a cumulative time limit in milliseconds to be allowed by the server for processing operations on the cursor. $collection->find()->where('name', 'Michael')->setServerTimeout(4200); Distinct values To get distinct values of field: <?php // return all distinct values $values = $collection->getDistinct('country'); Values may be filtered by expression specified as array, callable or Expression object: <?php // by array $collection->getDistinct('country', array('age' => array('$gte' => 25))); // by object $collection->getDistinct('country', $collection->expression()->whereGreater('age', 25)); // by callable $collection->getDistinct('country', function($expression) { return $expression->whereGreater('age', 25); }); Extending Query Builder For extending standart query builder class with custom condition methods you need to override property Collection::$_queryExpressionClass with class, which extends \Sokil\Mongo\Expression: <?php  // define expression in collection class UserCollection extends \Sokil\Mongo\Collection {     protected $_queryExpressionClass = 'UserExpression'; }  // define expression class UserExpression extends \Sokil\Mongo\Expression {     public function whereAgeGreaterThan($age)     {         $this->whereGreater('age', (int) $age);     } }  // use custom method for searching $collection = $db->getCollection('user'); // instance of UserCollection $queryBuilder = $collection->find(); // instance of UserExpression  $queryBuilder->whereAgeGreaterThan(18)->fetchRandom();  // or since v.1.3.2 configure query builder through callable: $collection     ->find(function(UserExpression $e) {         $e->whereAgeGreaterThan(18);     })     ->fetchRandom();  Identity Map Imagine that you have two different query builders and they are both return same document. Identity map helps us to get same instance of object from different queries, so if we made changes to document from first query, that changes will be in document from second query: <?php  $document1 = $collection->find()->whereGreater('age' > 18)->findOne(); $document2 = $collection->find()->where('gender', 'male')->findOne();  $document1->name = 'Mary'; echo $document2->name; // Mary This two documents referenced same object. Collection by default store all requested documents to identity map and return same objects for different requests. But if we know that documents never be reused, we can disable storing documents to identity map: <?php  $collection->disableDocumentPool(); To enable identity mapping: <?php  $collection->enableDocumentPool(); To check if identity mapping enabled: <?php  $collection->isDocumentPoolEnabled(); To clear pool identity map from previously stored documents: <?php  $collection->clearDocumentPool(); To check if there are documents in map already: <?php  $collection->isDocumentPoolEmpty(); If document already loaded, but it may be changed from another proces in db, then your copy is not fresh. You can manually refresh document state syncing it with db: <?php  $document->refresh(); Comparing queries If you want to cache your search results or want to compare two queries, you need some identifier which unambiguously identify query. You can use Cursor::getHash() for that reason. This hash uniquely identify just query parameners rather than result set of documents, because it calculated from all query parameters: <?php  $queryBuilder = $this->collection     ->find()     ->field('_id')     ->field('interests')     ->sort(array(         'age' => 1,         'gender' => -1,     ))     ->limit(10, 20)     ->whereAll('interests', ['php', 'snowboard']);  $hash = $queryBuilder->getHash(); // will return 508cc93b371c222c53ae90989d95caae  if($cache->has($hash)) {     return $cache->get($hash); }  $result = $queryBuilder->findAll();  $cache->set($hash, $result); Geospatial queries Before querying geospatial coordinates we need to create geospatial index and add some data. Index 2dsphere available since MongoDB version 2.4 and may be created in few ways:  <?php // creates index on location field $collection->ensure2dSphereIndex('location'); // cerate compound index $collection->ensureIndex(array(     'location' => '2dsphere',     'name'  => -1, )); Geo data can be added as array in GeoJson format or using GeoJson objects of library GeoJson: Add data as GeoJson object <?php  $document->setGeometry(     'location',     new \GeoJson\Geometry\Point(array(30.523400000000038, 50.4501)) );  $document->setGeometry(     'location',     new \GeoJson\Geometry\Polygon(array(         array(24.012228, 49.831485), // Lviv         array(36.230376, 49.993499), // Harkiv         array(34.174927, 45.035993), // Simferopol         array(24.012228, 49.831485), // Lviv     )) );  Data may be set througn array: <?php  // Point $document->setPoint('location', 30.523400000000038, 50.4501); // LineString $document->setLineString('location', array(     array(30.523400000000038, 50.4501),     array(36.230376, 49.993499), )); // Polygon $document->setPolygon('location', array(     array(         array(24.012228, 49.831485), // Lviv         array(36.230376, 49.993499), // Harkiv         array(34.174927, 45.035993), // Simferopol         array(24.012228, 49.831485), // Lviv     ), )); // MultiPoint $document->setMultiPoint('location', array(     array(24.012228, 49.831485), // Lviv     array(36.230376, 49.993499), // Harkiv     array(34.174927, 45.035993), // Simferopol )); // MultiLineString $document->setMultiLineString('location', array(     // line string 1     array(         array(34.551416, 49.588264), // Poltava         array(35.139561, 47.838796), // Zaporizhia     ),     // line string 2     array(         array(24.012228, 49.831485), // Lviv         array(34.174927, 45.035993), // Simferopol     ) )); // MultiPolygon $document->setMultyPolygon('location', array(     // polygon 1     array(         array(             array(24.012228, 49.831485), // Lviv             array(36.230376, 49.993499), // Harkiv             array(34.174927, 45.035993), // Simferopol             array(24.012228, 49.831485), // Lviv         ),     ),     // polygon 2     array(         array(             array(24.012228, 49.831485), // Lviv             array(36.230376, 49.993499), // Harkiv             array(34.174927, 45.035993), // Simferopol             array(24.012228, 49.831485), // Lviv         ),     ), )); // GeometryCollection $document->setGeometryCollection('location', array(     // point     new \GeoJson\Geometry\Point(array(30.523400000000038, 50.4501)),     // line string     new \GeoJson\Geometry\LineString(array(         array(30.523400000000038, 50.4501),         array(24.012228, 49.831485),         array(36.230376, 49.993499),     )),     // polygon     new \GeoJson\Geometry\Polygon(array(         // line ring 1         array(             array(24.012228, 49.831485), // Lviv             array(36.230376, 49.993499), // Harkiv             array(34.174927, 45.035993), // Simferopol             array(24.012228, 49.831485), // Lviv         ),         // line ring 2         array(             array(34.551416, 49.588264), // Poltava             array(32.049226, 49.431181), // Cherkasy             array(35.139561, 47.838796), // Zaporizhia             array(34.551416, 49.588264), // Poltava         ),     )), ));  Query documents near point on flat surface, defined by latitude 49.588264 and longitude 34.551416 and distance 1000 meters from this point: <?php $collection->find()->nearPoint('location', 34.551416, 49.588264, 1000); This query require 2dsphere or 2d indexes. Distance may be specified as array [minDistance, maxDistance]. This feature allowed for MongoDB version 2.6 and greater. If some value empty, only existed value applied. <?php // serch distance less 100 meters $collection->find()->nearPoint('location', 34.551416, 49.588264, array(null, 1000)); // search distabce between 100 and 1000 meters $collection->find()->nearPoint('location', 34.551416, 49.588264, array(100, 1000)); // search distabce greater than 1000 meters $collection->find()->nearPoint('location', 34.551416, 49.588264, array(1000, null)); To search on spherical surface: <?php $collection->find()->nearPointSpherical('location', 34.551416, 49.588264, 1000); To find geometries, which intersect specified: <?php $this->collection     ->find()     ->intersects('link', new \GeoJson\Geometry\LineString(array(         array(30.5326905, 50.4020355),         array(34.1092134, 44.946798),     )))     ->findOne(); To select documents with geospatial data that exists entirely within a specified shape: <?php $point = $this->collection     ->find()     ->within('point', new \GeoJson\Geometry\Polygon(array(         array(             array(24.0122356, 49.8326891), // Lviv             array(24.717129, 48.9117731), // Ivano-Frankivsk             array(34.1092134, 44.946798), // Simferopol             array(34.5572385, 49.6020445), // Poltava             array(24.0122356, 49.8326891), // Lviv         )     )))     ->findOne(); Search documents within flat circle: <?php $this->collection     ->find()     ->withinCircle('point', 28.46963, 49.2347, 0.001)     ->findOne(); Search document within spherical circle: <?php $point = $this->collection     ->find()     ->withinCircleSpherical('point', 28.46963, 49.2347, 0.001)     ->findOne(); Search documents with points (stored as legacy coordinates) within box: <?php $point = $this->collection     ->find()     ->withinBox('point', array(0, 0), array(10, 10))     ->findOne(); Search documents with points (stored as legacy coordinates) within polygon: <?php $point = $this->collection     ->find()     ->withinPolygon(         'point',         array(             array(0, 0),             array(0, 10),             array(10, 10),             array(10, 0),         )     )     ->findOne(); Fulltext search Before search field must be previously indexed as fulltext search field: <?php  // one field $collection->ensureFulltextIndex('somefield');  // couple of fields $collection->ensureFulltextIndex(['somefield1', 'somefield2']); Searching on fulltext field: <?php  $collection->find()->whereText('string searched in all fulltext fields')->findAll(); Pagination Query builder allows you to create pagination. <?php $paginator = $collection->find()->where('field', 'value')->paginate(3, 20); $totalDocumentNumber = $paginator->getTotalRowsCount(); $totalPageNumber = $paginator->getTotalPagesCount();  // iterate through documents foreach($paginator as $document) {     echo $document->getId(); } Persistence (Unit of Work) Instead of saving and removing objects right now, we can queue this job and execute all changes at once. This may be done through well-known pattern Unit of Work. If installed PHP driver above v. 1.5.0 and version of MongoDB above, persistence will use MongoWriteBatch classes, which can execute all operations of same type and in same collection at once. Lets create persistance manager <?php $persistence = $client->createPersistence(); Now we can add some documents to be saved or removed later <?php $persistence->persist($document1); $persistence->persist($document2);  $persistence->remove($document3); $persistence->remove($document4); If later we decice do not save or remove document, we may detach it from persistence manager <?php $persistence->detach($document1); $persistence->detach($document3); Or we even may remove them all: <?php $persistence->clear(); Note that after detaching document from persistence manager, it's changes do not removed and document still may be saved directly or by adding to persistence manager. If we decide to store changes to databasae we may flush this changes: <?php $persistence->flush(); Note that persisted documents do not deleted from persistence manager after flush, but removed will be deleted. Deleting collections and documents Deleting of collection: <?php $collection->delete(); Deleting of document: <?php $document->delete(); Deleting of few documents by expression: <?php  $collection->batchDelete($collection->expression()->where('param', 'value')); // deprecated since 1.13 $collection->deleteDocuments($collection->expression()->where('param', 'value')); Also supported \MongoDeleteBatch through interface: $batch = $collection->createBatchDelete(); $batch ->delete(array('a' => 2)) ->delete($collection->expression()->where('a', 4)) ->delete(function(Expression $e) { $e->where('a', 6); }) ->execute(); Aggregation framework Create aggregator: <?php $aggregator = $collection->createAggregator(); Than you need to configure aggregator by pipelines. <?php // through array $aggregator->match(array(     'field' => 'value' )); // through callable $aggregator->match(function($expression) {     $expression->whereLess('date', new \MongpDate); }); To get results of aggregation after configuring pipelines: <?php /**  * @var array list of aggregation results  */ $result = $aggregator->aggregate(); // or $result = $collection->aggregate($aggregator); You can execute aggregation without previously created aggregator: <?php // by array $collection->aggregate(array(     array(         '$match' => array(             'field' => 'value',         ),     ), )); // or callable $collection->aggregate(function($aggregator) {     $aggregator->match(function($expression) {         $expression->whereLess('date', new \MongpDate);     }); }); Options Available aggregation options may be found at https://docs.mongodb.org/manual/reference/command/aggregate/#dbcmd.aggregate. Options may be passed as argument of aggregate method: <?php  // as argument of Pipeline::aggregate $collection->createAggregator()->match()->group()->aggregate($options);  // as argument of Collection::aggregate $collection->aggregate($pipelines, $options);  // as calling of Pipeline methods $collection     ->createAggregator()     ->explain()     ->allowDiskUse()     ->setBatchSize(100); Debug If client in debug mode and logger configured, pipelines will be logged. There is ability to get explanation of aggregation: <?php  // set explain option $collection->aggregate($pipelines, ['explain' => true]);  // or configure pipeline $collection->createAggregator()->match(...)->group(...)->explain()->aggregate(); Aggregation cursor Collection::aggregate return array as result, but also iterator may be optained: Read more at http://php.net/manual/ru/mongocollection.aggregatecursor.php. <?php  // set as argument $asCursor = true; $collection->aggregate($pipelines, $options, $asCursor);  // or call method $cursor = $collection->createAggregator()->match()->group()->aggregateCursor(); Events Event support based on Symfony's Event Dispatcher component. You can attach and trigger any event you want, but there are some already defined events: Event name Description afterConstruct Already after construct executed beforeValidate Before document validation afterValidate After document validation validateError After document validation when document is invalid beforeInsert Before document will insert to collection afterInsert After successfull insert beforeUpdate Before document will be updated afterUpdate After successfull update of document beforeSave Before insert or update of document afterSave After insert or update of document beforeDelete Before delete of document afterDelete After delete of document Event listener is a function that calls when event triggered: <?php $listener = function(     \Sokil\Mongo\Event $event, // instance of event     string $eventName, // event name     \Symfony\Component\EventDispatcher\EventDispatcher $eventDispatcher // instance of dispatcher ) {} Event listener may be attached by method Document::attachEvent(): <?php $document->attachEvent('myOwnEvent', $listener, $priority); It also may be attached through helper methods: <?php $document->onMyOwnEvent($listener, $priority); // which is equals to $this->attachEvent('myOwnEvent', $listener, $priority); Event may be attached in runtime or in Document class by override Document::beforeConstruct() method: <?php class CustomDocument extends \Sokil\Mongo\Document {     public function beforeConstruct()     {         $this->onBeforeSave(function() {             $this->set('date' => new \MongoDate);         });     } } Event may be triggered to call all attached event listeners: <?php $this->triggerEvent('myOwnEvent'); You can create your own event class, which extends `\Sokil\Mongo\Event' and pass it to listeners. This allows you to pass some data to listener: <?php // create class class OwnEvent extends \Sokil\Mongo\Event {     public $status; }  // define listener $document->attachEvent('someEvent', function(\OwnEvent $event) {     echo $event->status; });  // configure event $event = new \OwnEvent; $event->status = 'ok';  // trigger event $this->triggerEvent('someEvent', $event); To cancel operation execution on some condition use event handling cancel: <?php $document->onBeforeSave(function(\Sokil\Mongo\Event $event) {     if($this->get('field') === 42) {         $event->cancel();     } }) ->save(); Behaviors Behavior is a posibility to extend functionality of document object and reuse code among documents of different class. Behavior is a class extended from \Sokil\Mongo\Behavior. Any public method may be accessed through document, where behavior is attached. <?php class SomeBehavior extends \Sokil\Mongo\Behavior {     public function return42()     {         return 42;     } } To get instance of object, to which behavior is attached, call Behavior::getOwner() method: <?php class SomeBehavior extends \Sokil\Mongo\Behavior {     public function getOwnerParam($selector)     {         return $this->getOwner()->get($selector);     } } You can add behavior in document class: <?php class CustomDocument extends \Sokil\Mongo\Document {     public function behaviors()     {         return [             '42behavior' => '\SomeBehavior',         ];     } } You can attach behavior in runtime too: <?php // single behavior $document->attachBehavior('42behavior', '\SomeBehavior'); // set of behaviors $document->attachBehaviors([     '42behavior' => '\SomeBehavior', ]); Behaviors may be defined as fully qualified class names, arrays, or Behavior instances: <?php // class name $document->attachBehavior('42behavior', '\SomeBehavior');  // array with parameters $document->attachBehavior('42behavior', [     'class'     => '\SomeBehavior',     'param1'    => 1,     'param2'    => 2, ]);  // Behavior instance $document->attachBehavior('42behavior', new \SomeBehavior([     'param1'    => 1,     'param2'    => 2, ]); Then you can call any methods of behaviors. This methods searches in order of atraching behaviors: <?php echo $document->return42(); Relations You can define relations between different documents, which helps you to load related documents. To define relation to other document you need to override Document::relations() method and return array of relations in format [relationName => [relationType, targetCollection, reference], ...]. Also you can define relations in mapping: <?php  $collection->map([     'someDb' => [         'someCollection', array(             'relations'     => array(                 'someRelation'   => array(self::RELATION_HAS_ONE, 'profile', 'user_id'),             ),         ),     ], ]); If relation specified both in mapping and document class, then mapping relation merged into document's relations, so mapping relations has more priority. One-to-one relation We have to classes User and Profile. User has one profile, and profile belongs to User. <?php class User extends \Sokil\Mongo\Document {     protected $schema = [         'email'     => null,         'password'  => null,     ];      public function relations()     {         return [             'profileRelation' => [self::RELATION_HAS_ONE, 'profile', 'user_id'],         ];     } }  class Profile extends \Sokil\Mongo\Document {     protected $schema = [         'name' => [             'last'  => null,             'first' => null,         ],         'age'   => null,     ];      public function relations()     {         return [             'userRelation' => [self::RELATION_BELONGS, 'user', 'user_id'],         ];     } } Now we can lazy load related documnts just calling relation name: <?php $user = $userColletion->getDocument('234...'); echo $user->profileRelation->get('age');  $profile = $profileCollection->getDocument('234...'); echo $pfofile->userRelation->get('email'); One-to-many relation One-to-many relation helps you to load all related documents. Class User has few posts of class Post: <?php class User extends \Sokil\Mongo\Document {     protected $schema = [         'email'     => null,         'password'  => null,     ];      public function relations()     {         return [             'postsRelation' => [self::RELATION_HAS_MANY, 'posts', 'user_id'],         ];     } }  class Posts extends \Sokil\Mongo\Document {     protected $schema = [         'user_id' => null,         'message'   => null,     ];      public function relations()     {         return [             'userRelation' => [self::RELATION_BELONGS, 'user', 'user_id'],         ];     }      public function getMessage()     {         return $this->get('message');     } } Now you can load related posts of document: <?php foreach($user->postsRelation as $post) {     echo $post->getMessage(); } Many-to-many relation Many-to-many relation in relational databases uses intermediate table with stored ids of related rows from both tables. In mongo this table equivalent embeds to one of two related documents. Element of relation definition at position 3 must be set to true in this document. <?php  // this document contains field 'driver_id' where array of ids stored class CarDocument extends \Sokil\Mongo\Document {     protected $schema = [         'brand' => null,     ];      public function relations()     {         return array(             'drivers'   => array(self::RELATION_MANY_MANY, 'drivers', 'driver_id', true),         );     } }  class DriverDocument extends \Sokil\Mongo\Document {     protected $schema = [         'name' => null,     ];      public function relations()     {         return array(             'cars'    => array(self::RELATION_MANY_MANY, 'cars', 'driver_id'),         );     } } Now you can load related documents: <?php foreach($car->drivers as $driver) {     echo $driver->name; } Add relation There is helper to add related document, if you don't want modify relation field directly: <?php $car->addRelation('drivers', $driver); This helper automatically resolves collection and field where to store relation data. Remove relation There is helper to remove related document, if you don't want modify relation field directly: <?php $car->removeRelation('drivers', $driver); This helper automatically resolves collection and field where to remove relation data. If relation type is HAS_MANY or BELONS_TO, second parameter wich defined related object may be omitted. Concurency Optimistic locking To enable optimistic locking, specify lock mode in mapping: use Sokil\Mongo\Collection\Definition; use Sokil\Mongo\Document\OptimisticLockFailureException;  $client->map([     'db' => [         'col' => [             'lock' => Definition::LOCK_OPTIMISTIC,         ],     ] ]); Now when some process try to update already updated document, exception \Sokil\Mongo\Document\OptimisticLockFailureException will be thrown. Read preferences Read preference describes how MongoDB clients route read operations to members of a replica set. You can configure read preferences at any level: <?php // in constructor $client = new Client($dsn, array(     'readPreference' => 'nearest', ));  // by passing to \Sokil\Mongo\Client instance $client->readNearest();  // by passing to database $database = $client->getDatabase('databaseName')->readPrimaryOnly();  // by passing to collection $collection = $database->getCollection('collectionName')->readSecondaryOnly(); Write concern Write concern describes the guarantee that MongoDB provides when reporting on the success of a write operation. You can configure write concern at any level: <?php  // by passing to \Sokil\Mongo\Client instance $client->setMajorityWriteConcern(10000);  // by passing to database $database = $client->getDatabase('databaseName')->setMajorityWriteConcern(10000);  // by passing to collection $collection = $database->getCollection('collectionName')->setWriteConcern(4, 1000); Capped collections To use capped collection you need previously to create it: <?php $numOfElements = 10; $sizeOfCollection = 10*1024; $collection = $database->createCappedCollection('capped_col_name', $numOfElements, $sizeOfCollection); Now you can add only 10 documents to collection. All old documents will ve rewritted ny new elements. Executing commands Command is universal way to do anything with mongo. Let's get stats of collection: <?php $collection = $database->createCappedCollection('capped_col_name', $numOfElements, $sizeOfCollection); $stats = $database->executeCommand(['collstat' => 'capped_col_name']); Result in $stats: array(13) {   'ns' =>  string(29) ""test.capped_col_name""   'count' =>  int(0)   'size' =>  int(0)   'storageSize' =>  int(8192)   'numExtents' =>  int(1)   'nindexes' =>  int(1)   'lastExtentSize' =>  int(8192)   'paddingFactor' =>  double(1)   'systemFlags' =>  int(1)   'userFlags' =>  int(1)   'totalIndexSize' =>  int(8176)   'indexSizes' =>  array(1) {     '_id_' =>    int(8176)   }   'ok' =>  double(1) }  Queue Queue gives functionality to send messages from one process and get them in another process. Messages can be send to different channels. Sending message to queue with default priority: <?php $queue = $database->getQueue('channel_name'); $queue->enqueue('world'); $queue->enqueue(['param' => 'value']); Send message with priority <?php $queue->enqueue('hello', 10); Reading messages from channel: <?php $queue = $database->getQueue('channel_name'); echo $queue->dequeue(); // hello echo $queue->dequeue(); // world echo $queue->dequeue()->get('param'); // value Number of messages in queue <?php $queue = $database->getQueue('channel_name'); echo count($queue); Migrations Migrations allows you easily change schema and data versions. This functionality implemented in packet https://github.com/sokil/php-mongo-migrator and can be installed through composer: {     ""require"": {         ""sokil/php-mongo-migrator"": ""dev-master""     } } GridFS GridFS allows you to store binary data in mongo database. Details at http://docs.mongodb.org/manual/core/gridfs/. First get instance of GridFS. You can specify prefix for partitioning filesystem: <?php $imagesFS = $database->getGridFS('image'); $cssFS = $database->getGridFS('css'); Now you can store file, located on disk: <?php $id = $imagesFS->storeFile('/home/sokil/images/flower.jpg'); You can store file from binary data: <?php $id1 = $imagesFS->storeBytes('some text content'); $id2 = $imagesFS->storeBytes(file_get_contents('/home/sokil/images/flower.jpg')); You are able to store some metadata with every file: <?php $id1 = $imagesFS->storeFile('/home/sokil/images/flower.jpg', [     'category'  => 'flower',     'tags'      => ['flower', 'static', 'page'], ]);  $id2 = $imagesFS->storeBytes('some text content', [     'category' => 'books', ]); Get file by id: <?php $imagesFS->getFileById('6b5a4f53...42ha54e'); Find file by metadata: <?php foreach($imagesFS->find()->where('category', 'books') as $file) {     echo $file->getFilename(); } Deleting files by id: <?php $imagesFS->deleteFileById('6b5a4f53...42ha54e'); Reading of file content <?php // dump binary data to file $file->dump($filename);  // get binary data $file->getBytes();  // get resource $file->getResource(); If you want to use your own GridFSFile classes, you need to define mapping, as it does with collections: <?php // define mapping of prefix to GridFS class $database->map([     'GridFSPrefix' => '\GridFSClass', ]);  // define GridFSFile class class GridFSClass extends \Sokil\Mongo\GridFS {     public function getFileClassName(\MongoGridFSFile $fileData = null)     {         return '\GridFSFileClass';     } }  // define file class class GridFSFileClass extends \Sokil\Mongo\GridFSFile {     public function getMetaParam()     {         return $this->get('meta.param');     } }  // get file as instance of class \GridFSFileClass $database->getGridFS('GridFSPrefix')->getFileById($id)->getMetaParam(); Versioning Versioninbg allows you to have history of all document changes. To enable versioning of documents in collection, you can set protected property Collection::$versioning to true, call Collection::enableVersioning() method or define versioning in mapping. <?php // througn protected property class MyCollection extends \Sokil\Mongo\Collection {     protected $versioning = true; }  // througn method $collection = $database->getCollection('my'); $collection->enableVersioning();  // through mapping $database->map('someCollectionName', [     'versioning' => true, ]); To check if documents in collections is versioned call: <?php if($collection->isVersioningEnabled()) {} Revision is an instance of class \Sokil\Mongo\Revision and inherits \Sokil\Mongo\Document, so any methods of document may be applied to revision. Revisions may be accessed: <?php // get all revisions $document->getRevisions();  // get slice of revisions $limit = 10; $offset = 15; $document->getRevisions($limit, $offset); To get one revision by id use: <?php $revision = $document->getRevision($revisionKey); To get count of revisions: <?php $count = $document->getRevisionsCount(); To clear all revisions: <?php $document->clearRevisions(); Revisions stored in separate collection, named {COLLECTION_NAME}.revisions To obtain original document of collection {COLLECTION_NAME} from revision, which is document of collection {COLLECTION_NAME}.revisions, use Revision::getDocument() method: <?php $document->getRevision($revisionKey)->getDocument(); Properties of document from revision may be accessed directly: echo $document->property; echo $document->getRevision($revisionKey)->property;  Also date of creating revison may be obtained from document: <?php // return timestamp echo $document->getRevision($revisionKey)->getDate(); // return formatted date string echo $document->getRevision($revisionKey)->getDate('d.m.Y H:i:s'); Indexes Create index with custom options (see options in http://php.net/manual/en/mongocollection.ensureindex.php): <?php $collection->ensureIndex('field', [ 'unique' => true ]); Create unique index: <?php $collection->ensureUniqueIndex('field'); Create sparse index (see http://docs.mongodb.org/manual/core/index-sparse/ for details about sparse indexes): <?php $collection->ensureSparseIndex('field'); Create TTL index (see http://docs.mongodb.org/manual/tutorial/expire-data/ for details about TTL indexes): <?php $collection->ensureTTLIndex('field'); You may define field as array where key is field name and value is direction: <?php $collection->ensureIndex(['field' => 1]); Also you may define compound indexes: <?php $collection->ensureIndex(['field1' => 1, 'field2' => -1]); You may define all collection indexes in property Collection::$_index as array, where each item is an index definition. Every index definition must contain key keys with list of fields and orders, and optional options, as described in http://php.net/manual/en/mongocollection.createindex.php. <?php class MyCollection extends \Sokil\Mongo\Collection {     protected $_index = array(         array(             'keys' => array('field1' => 1, 'field2' => -1),             'unique' => true         ),     ); } Then you must create this indexes by call of Collection::initIndexes(): <?php $collection = $database->getCollection('myCollection')->initIndexes(); You may use Mongo Migrator package to ensure indexes in collections from migration scripts. Query optimiser automatically choose which index to use, but you can manuallty define it: <?php $collection->find()->where('field', 1)->hind(array('field' => 1)); Caching and documents with TTL If you want to get collection where documents will expire after some specified time, just add special index to this collection. <?php $collection->ensureTTLIndex('createDate', 1000); You can do this also in migration script, using Mongo Migrator. For details see related documentation. Or you can use \Sokil\Mongo\Cache class, which already implement this functionality. <?php // Get cache instance $cache = $document->getCache('some_namespace'); Before using cache must be inititalised by calling method Cache:init(): <?php $cahce->init(); This operation creates index with expireAfterSecond key in collection some_namespace. This operation may be done in some console command or migration script, or you can create manually in mongo console: db.some_namespace.ensureIndex('e', {expireAfterSeconds: 0}); Now you can store new value with: <?php // this store value for 10 seconds by defininc concrete timestamp when cached value expired $cache->setByDate('key', 'value', time() + 10); // same but expiration defined relatively to current time $cache->set('key', 'value', 10); You can devine value which never expired and must be deleted manually: <?php $cache->setNeverExpired('key', 'value'); You can define some tags defined with key: <?php $cache->set('key', 'value', 10, ['php', 'c', 'java']); $cache->setNeverExpired('key', 'value', ['php', 'c', 'java']); $cache->setDueDate('key', 'value', time() + 10, ['php', 'c', 'java']); To get value <?php $value = $cache->get('key'); To delete cached value by key: <?php $cache->delete('key'); Delete few values by tags: <?php // delete all values with tag 'php' $cache->deleteMatchingTag('php'); // delete all values without tag 'php' $cache->deleteNotMatchingTag('php'); // delete all values with tags 'php' and 'java' $cache->deleteMatchingAllTags(['php', 'java']); // delete all values which don't have tags 'php' and 'java' $cache->deleteMatchingNoneOfTags(['php', 'java']); // Document deletes if it contains any of passed tags $cache->deleteMatchingAnyTag(['php', 'elephant']); // Document deletes if it contains any of passed tags $cache->deleteNotMatchingAnyTag(['php', 'elephant']); Debugging In debug mode client may log some activity to pre-configured logger or show extended errors. <?php  // start debugging $client->debug();  // stop debugging $client->debug(false);  // check debug state $client->isDebugEnabled(); Logging Library suports logging of queries. To configure logging, you need to pass logger object to instance of \Sokil\Mongo\Client and enable debug of client. Logger must implement \Psr\Log\LoggerInterface due to PSR-3: <?php $client = new Client($dsn); $client->setLogger($logger); Profiling More details about profiling at Analyze Performance of Database Operations profiler data stores to system.profile collection, which you can query through query builder: <?php  $qb = $database     ->findProfilerRows()     ->where('ns', 'social.users')     ->where('op', 'update'); Structure of document described in article Database Profiler Output There is three levels of profiling, described in article Profile command. Switching between then may be done by calling methods: <?php  // disable profiles $database->disableProfiler();  // profile slow queries slower than 100 milliseconds $database->profileSlowQueries(100);  // profile all queries $database->profileAllQueries(); To get current level of profiling, call: <?php $params = $database->getProfilerParams(); echo $params['was']; echo $params['slowms'];  // or directly $level = $database->getProfilerLevel(); $slowms = $database->getProfilerSlowMs(); See changelog for detailed information about new releases. Pull requests, bug reports and feature requests is welcome. Add new to issues Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sokil/php-mongo"	"A MongoDB ORM."	"true"
"NoSQL"	"Predis"	"https://github.com/nrk/predis"	"A feature complete Redis library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2846"	"186"	"526"	"GitHub - nrk/predis: Flexible and feature-complete Redis client for PHP and HHVM Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 186 Star 2,846 Fork 526 nrk/predis Code Issues 10 Pull requests 4 Wiki Pulse Graphs Flexible and feature-complete Redis client for PHP and HHVM https://github.com/nrk/predis/wiki 1,876 commits 10 branches 37 releases 34 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: v1.1 Switch branches/tags Branches Tags documentation master v0.5 v0.6-PHP_5.2 v0.6 v0.7 v0.8 v1.0 v1.1 v2.0-wait-abstraction Nothing to show v1.1.1 v1.1.0 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.8.7 v0.8.6 v0.8.5 v0.8.4 v0.8.3 v0.8.2 v0.8.1 v0.8.0 v0.7.3 v0.7.2 v0.7.1 v0.7.0 v0.6.6 v0.6.6-PHP5.2 v0.6.5 v0.6.5-PHP5.2 v0.6.4 v0.6.4-PHP5.2 v0.6.3 v0.6.3-PHP5.2 v0.6.2 v0.6.2-PHP5.2 v0.6.1 v0.6.1-PHP5.2 v0.6.0 v0.6.0-PHP5.2 v0.5.1 v0.5.1-PHP5.2 v0.5.0 v0.5.0-PHP5.2 Nothing to show New pull request Latest commit 6ab10b2 Jun 18, 2016 nrk [tests] Fix preassigned slots in cluster tests. Permalink Failed to load latest commit information. bin Restore alignment for a few equals symbols. Jul 24, 2015 examples Apply last round of CS fixes. Jun 1, 2016 src Back to development. Jun 18, 2016 tests [tests] Fix preassigned slots in cluster tests. Jun 18, 2016 .editorconfig Minor tweak in .editorconfig file. Jul 6, 2015 .gitattributes Update .gitattributes file. Jul 24, 2015 .gitignore updated .gitignore May 12, 2016 .php_cs Add .php_cs configuration file for php-cs-fixer. Jul 24, 2015 .travis.yml [tests] Do not allow failures for HHVM on Travis CI. May 30, 2016 CHANGELOG.md Update CHANGELOG and bump VERSION. Jun 16, 2016 CONTRIBUTING.md Tweak CONTRIBUTING.md. Dec 9, 2013 FAQ.md Implement TLS/SSL-encrypted connections. Jul 27, 2015 LICENSE Bump year in LICENSE. May 15, 2016 README.md Update README. Jun 1, 2016 VERSION Back to development. Jun 18, 2016 autoload.php Move source files from ""lib/"" to ""src/"". Jul 14, 2014 composer.json Update CHANGELOG and bump VERSION. Jun 2, 2016 package.ini Back to development. Jun 18, 2016 phpunit.xml.dist Bump default server profile to Redis 3.2. May 25, 2016 phpunit.xml.travisci Bump default server profile to Redis 3.2. May 25, 2016 README.md Predis Flexible and feature-complete Redis client for PHP >= 5.3 and HHVM >= 2.3.0. Predis does not require any additional C extension by default, but it can be optionally paired with phpiredis to lower the overhead of the serialization and parsing of the Redis RESP Protocol. For an experimental asynchronous implementation of the client you can refer to Predis\Async. More details about this project can be found on the frequently asked questions. Main features Support for different versions of Redis (from 2.0 to 3.2) using profiles. Support for clustering using client-side sharding and pluggable keyspace distributors. Support for redis-cluster (Redis >= 3.0). Support for master-slave replication setups and redis-sentinel. Transparent key prefixing of keys using a customizable prefix strategy. Command pipelining on both single nodes and clusters (client-side sharding only). Abstraction for Redis transactions (Redis >= 2.0) and CAS operations (Redis >= 2.2). Abstraction for Lua scripting (Redis >= 2.6) and automatic switching between EVALSHA or EVAL. Abstraction for SCAN, SSCAN, ZSCAN and HSCAN (Redis >= 2.8) based on PHP iterators. Connections are established lazily by the client upon the first command and can be persisted. Connections can be established via TCP/IP (also TLS/SSL-encrypted) or UNIX domain sockets. Support for Webdis (requires both ext-curl and ext-phpiredis). Support for custom connection classes for providing different network or protocol backends. Flexible system for defining custom commands and profiles and override the default ones. How to install and use Predis This library can be found on Packagist for an easier management of projects dependencies using Composer or on our own PEAR channel for a more traditional installation using PEAR. Ultimately, compressed archives of each release are available on GitHub. Loading the library Predis relies on the autoloading features of PHP to load its files when needed and complies with the PSR-4 standard. Autoloading is handled automatically when dependencies are managed through Composer, but it is also possible to leverage its own autoloader in projects or scripts lacking any autoload facility: // Prepend a base path if Predis is not available in your ""include_path"". require 'Predis/Autoloader.php';  Predis\Autoloader::register(); It is also possible to create a phar archive directly from the repository by launching the bin/create-phar script. The generated phar already contains a stub defining its own autoloader, so you just need to require() it to start using the library. Connecting to Redis When creating a client instance without passing any connection parameter, Predis assumes 127.0.0.1 and 6379 as default host and port. The default timeout for the connect() operation is 5 seconds: $client = new Predis\Client(); $client->set('foo', 'bar'); $value = $client->get('foo'); Connection parameters can be supplied either in the form of URI strings or named arrays. The latter is the preferred way to supply parameters, but URI strings can be useful when parameters are read from non-structured or partially-structured sources: // Parameters passed using a named array: $client = new Predis\Client([     'scheme' => 'tcp',     'host'   => '10.0.0.1',     'port'   => 6379, ]);  // Same set of parameters, passed using an URI string: $client = new Predis\Client('tcp://10.0.0.1:6379'); It is also possible to connect to local instances of Redis using UNIX domain sockets, in this case the parameters must use the unix scheme and specify a path for the socket file: $client = new Predis\Client(['scheme' => 'unix', 'path' => '/path/to/redis.sock']); $client = new Predis\Client('unix:/path/to/redis.sock'); The client can leverage TLS/SSL encryption to connect to secured remote Redis instances without the need to configure an SSL proxy like stunnel. This can be useful when connecting to nodes running on various cloud hosting providers. Encryption can be enabled with using the tls scheme and an array of suitable options passed via the ssl parameter: // Named array of connection parameters: $client = new Predis\Client([   'scheme' => 'tls',   'ssl'    => ['cafile' => 'private.pem', 'verify_peer' => true], ]  // Same set of parameters, but using an URI string: $client = new Predis\Client('tls://127.0.0.1?ssl[cafile]=private.pem&ssl[verify_peer]=1'); The connection schemes redis (alias of tcp) and rediss (alias of tls) are also supported, with the difference that URI strings containing these schemes are parsed following the rules described on their respective IANA provisional registration documents. The actual list of supported connection parameters can vary depending on each connection backend so it is recommended to refer to their specific documentation or implementation for details. When an array of connection parameters is provided, Predis automatically works in cluster mode using client-side sharding. Both named arrays and URI strings can be mixed when providing configurations for each node: $client = new Predis\Client([     'tcp://10.0.0.1?alias=first-node',     ['host' => '10.0.0.2', 'alias' => 'second-node'], ]); See the aggregate connections section of this document for more details. Connections to Redis are lazy meaning that the client connects to a server only if and when needed. While it is recommended to let the client do its own stuff under the hood, there may be times when it is still desired to have control of when the connection is opened or closed: this can easily be achieved by invoking $client->connect() and $client->disconnect(). Please note that the effect of these methods on aggregate connections may differ depending on each specific implementation. Client configuration Many aspects and behaviors of the client can be configured by passing specific client options to the second argument of Predis\Client::__construct(): $client = new Predis\Client($parameters, ['profile' => '2.8', 'prefix' => 'sample:']); Options are managed using a mini DI-alike container and their values can be lazily initialized only when needed. The client options supported by default in Predis are: profile: specifies the profile to use to match a specific version of Redis. prefix: prefix string automatically applied to keys found in commands. exceptions: whether the client should throw or return responses upon Redis errors. connections: list of connection backends or a connection factory instance. cluster: specifies a cluster backend (predis, redis or callable object). replication: specifies a replication backend (TRUE, sentinel or callable object). aggregate: overrides cluster and replication to provide a custom connections aggregator. parameters: list of default connection parameters for aggregate connections. Users can also provide custom options with values or callable objects (for lazy initialization) that are stored in the options container for later use through the library. Aggregate connections Aggregate connections are the foundation upon which Predis implements clustering and replication and they are used to group multiple connections to single Redis nodes and hide the specific logic needed to handle them properly depending on the context. Aggregate connections usually require an array of connection parameters when creating a new client instance. Cluster By default, when no specific client options are set and an array of connection parameters is passed to the client's constructor, Predis configures itself to work in clustering mode using a traditional client-side sharding approach to create a cluster of independent nodes and distribute the keyspace among them. This approach needs some form of external health monitoring of nodes and requires manual operations to rebalance the keyspace when changing its configuration by adding or removing nodes: $parameters = ['tcp://10.0.0.1', 'tcp://10.0.0.2', 'tcp://10.0.0.3'];  $client = new Predis\Client($parameters); Along with Redis 3.0, a new supervised and coordinated type of clustering was introduced in the form of redis-cluster. This kind of approach uses a different algorithm to distribute the keyspaces, with Redis nodes coordinating themselves by communicating via a gossip protocol to handle health status, rebalancing, nodes discovery and request redirection. In order to connect to a cluster managed by redis-cluster, the client requires a list of its nodes (not necessarily complete since it will automatically discover new nodes if necessary) and the cluster client options set to redis: $parameters = ['tcp://10.0.0.1', 'tcp://10.0.0.2', 'tcp://10.0.0.3']; $options    = ['cluster' => 'redis'];  $client = new Predis\Client($parameters, $options); Replication The client can be configured to operate in a single master / multiple slaves setup to provide better service availability. When using replication, Predis recognizes read-only commands and sends them to a random slave in order to provide some sort of load-balancing and switches to the master as soon as it detects a command that performs any kind of operation that would end up modifying the keyspace or the value of a key. Instead of raising a connection error when a slave fails, the client attempts to fall back to a different slave among the ones provided in the configuration. The basic configuration needed to use the client in replication mode requires one Redis server to be identified as the master (this can be done via connection parameters using the alias parameter set to master) and one or more servers acting as slaves: $parameters = ['tcp://10.0.0.1?alias=master', 'tcp://10.0.0.2', 'tcp://10.0.0.3']; $options    = ['replication' => true];  $client = new Predis\Client($parameters, $options); The above configuration has a static list of servers and relies entirely on the client's logic, but it is possible to rely on redis-sentinel for a more robust HA environment with sentinel servers acting as a source of authority for clients for service discovery. The minimum configuration required by the client to work with redis-sentinel is a list of connection parameters pointing to a bunch of sentinel instances, the replication option set to sentinel and the service option set to the name of the service: $sentinels = ['tcp://10.0.0.1', 'tcp://10.0.0.2', 'tcp://10.0.0.3']; $options   = ['replication' => 'sentinel', 'service' => 'mymaster'];  $client = new Predis\Client($sentinels, $options); If the master and slave nodes are configured to require an authentication from clients, a password must be provided via the global parameters client option. This option can also be used to specify a different database index. The client options array would then look like this: $options = [     'replication' => 'sentinel',     'service' => 'mymaster',     'parameters' => [         'password' => $secretpassword,         'database' => 10,     ], ]; While Predis is able to distinguish commands performing write and read-only operations, EVAL and EVALSHA represent a corner case in which the client switches to the master node because it cannot tell when a Lua script is safe to be executed on slaves. While this is indeed the default behavior, when certain Lua scripts do not perform write operations it is possible to provide an hint to tell the client to stick with slaves for their execution: $parameters = ['tcp://10.0.0.1?alias=master', 'tcp://10.0.0.2', 'tcp://10.0.0.3']; $options    = ['replication' => function () {     // Set scripts that won't trigger a switch from a slave to the master node.     $strategy = new Predis\Replication\ReplicationStrategy();     $strategy->setScriptReadOnly($LUA_SCRIPT);      return new Predis\Connection\Aggregate\MasterSlaveReplication($strategy); }];  $client = new Predis\Client($parameters, $options); $client->eval($LUA_SCRIPT, 0);             // Sticks to slave using `eval`... $client->evalsha(sha1($LUA_SCRIPT), 0);    // ... and `evalsha`, too. The examples directory contains a few scripts that demonstrate how the client can be configured and used to leverage replication in both basic and complex scenarios. Command pipelines Pipelining can help with performances when many commands need to be sent to a server by reducing the latency introduced by network round-trip timings. Pipelining also works with aggregate connections. The client can execute the pipeline inside a callable block or return a pipeline instance with the ability to chain commands thanks to its fluent interface: // Executes a pipeline inside the given callable block: $responses = $client->pipeline(function ($pipe) {     for ($i = 0; $i < 1000; $i++) {         $pipe->set(""key:$i"", str_pad($i, 4, '0', 0));         $pipe->get(""key:$i"");     } });  // Returns a pipeline that can be chained thanks to its fluent interface: $responses = $client->pipeline()->set('foo', 'bar')->get('foo')->execute(); Transactions The client provides an abstraction for Redis transactions based on MULTI and EXEC with a similar interface to command pipelines: // Executes a transaction inside the given callable block: $responses = $client->transaction(function ($tx) {     $tx->set('foo', 'bar');     $tx->get('foo'); });  // Returns a transaction that can be chained thanks to its fluent interface: $responses = $client->transaction()->set('foo', 'bar')->get('foo')->execute(); This abstraction can perform check-and-set operations thanks to WATCH and UNWATCH and provides automatic retries of transactions aborted by Redis when WATCHed keys are touched. For an example of a transaction using CAS you can see the following example. Adding new commands While we try to update Predis to stay up to date with all the commands available in Redis, you might prefer to stick with an old version of the library or provide a different way to filter arguments or parse responses for specific commands. To achieve that, Predis provides the ability to implement new command classes to define or override commands in the default server profiles used by the client: // Define a new command by extending Predis\Command\Command: class BrandNewRedisCommand extends Predis\Command\Command {     public function getId()     {         return 'NEWCMD';     } }  // Inject your command in the current profile: $client = new Predis\Client(); $client->getProfile()->defineCommand('newcmd', 'BrandNewRedisCommand');  $response = $client->newcmd(); There is also a method to send raw commands without filtering their arguments or parsing responses. Users must provide the list of arguments for the command as an array, following the signatures as defined by the Redis documentation for commands: $response = $client->executeRaw(['SET', 'foo', 'bar']); Script commands While it is possible to leverage Lua scripting on Redis 2.6+ using directly EVAL and EVALSHA, Predis offers script commands as an higher level abstraction built upon them to make things simple. Script commands can be registered in the server profile used by the client and are accessible as if they were plain Redis commands, but they define Lua scripts that get transmitted to the server for remote execution. Internally they use EVALSHA by default and identify a script by its SHA1 hash to save bandwidth, but EVAL is used as a fall back when needed: // Define a new script command by extending Predis\Command\ScriptCommand: class ListPushRandomValue extends Predis\Command\ScriptCommand {     public function getKeysCount()     {         return 1;     }      public function getScript()     {         return <<<LUA math.randomseed(ARGV[1]) local rnd = tostring(math.random()) redis.call('lpush', KEYS[1], rnd) return rnd LUA;     } }  // Inject the script command in the current profile: $client = new Predis\Client(); $client->getProfile()->defineCommand('lpushrand', 'ListPushRandomValue');  $response = $client->lpushrand('random_values', $seed = mt_rand()); Customizable connection backends Predis can use different connection backends to connect to Redis. Two of them leverage a third party extension such as phpiredis resulting in major performance gains especially when dealing with big multibulk responses. While one is based on PHP streams, the other is based on socket resources provided by ext-socket. Both support TCP/IP and UNIX domain sockets: $client = new Predis\Client('tcp://127.0.0.1', [     'connections' => [         'tcp'  => 'Predis\Connection\PhpiredisStreamConnection',  // PHP stream resources         'unix' => 'Predis\Connection\PhpiredisSocketConnection',  // ext-socket resources     ], ]); Developers can create their own connection classes to support whole new network backends, extend existing classes or provide completely different implementations. Connection classes must implement Predis\Connection\NodeConnectionInterface or extend Predis\Connection\AbstractConnection: class MyConnectionClass implements Predis\Connection\NodeConnectionInterface {     // Implementation goes here... }  // Use MyConnectionClass to handle connections for the `tcp` scheme: $client = new Predis\Client('tcp://127.0.0.1', [     'connections' => ['tcp' => 'MyConnectionClass'], ]); For a more in-depth insight on how to create new connection backends you can refer to the actual implementation of the standard connection classes available in the Predis\Connection namespace. Development Reporting bugs and contributing code Contributions to Predis are highly appreciated either in the form of pull requests for new features, bug fixes, or just bug reports. We only ask you to adhere to a basic set of rules before submitting your changes or filing bugs on the issue tracker to make it easier for everyone to stay consistent while working on the project. Test suite ATTENTION: Do not ever run the test suite shipped with Predis against instances of Redis running in production environments or containing data you are interested in! Predis has a comprehensive test suite covering every aspect of the library. This test suite performs integration tests against a running instance of Redis (>= 2.4.0 is required) to verify the correct behavior of the implementation of each command and automatically skips commands not defined in the specified Redis profile. If you do not have Redis up and running, integration tests can be disabled. By default the test suite is configured to execute integration tests using the profile for Redis 3.2 (which is the current stable version of Redis) but can optionally target a Redis instance built from the unstable branch by modifying phpunit.xml and setting REDIS_SERVER_VERSION to dev so that the development server profile will be used. You can refer to the tests README for more detailed information about testing Predis. Predis uses Travis CI for continuous integration and the history for past and current builds can be found on its project page. Other Project related links Source code Wiki Issue tracker PEAR channel Author Daniele Alessandri (twitter) License The code for Predis is distributed under the terms of the MIT license (see LICENSE). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nrk/predis"	"A feature complete Redis library."	"true"
"Queue"	"Bernard"	"https://github.com/bernardphp/bernard"	"A multibackend abstraction library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"557"	"36"	"55"	"GitHub - bernardphp/bernard: Bernard is a multi-backend PHP library for creating background jobs for later processing. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 36 Star 557 Fork 55 bernardphp/bernard Code Issues 31 Pull requests 10 Pulse Graphs Bernard is a multi-backend PHP library for creating background jobs for later processing. http://bernard.rtfd.org 807 commits 4 branches 25 releases 30 contributors PHP 99.7% Shell 0.3% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.x henrikbjorn-patch-1 master phpspec Nothing to show 1.0.0-alpha3 1.0.0-alpha2 1.0.0-alpha1 0.12.3 0.12.2 0.12.1 0.12.0 0.11.0 0.10.1 0.10.0 0.9.2 0.9.1 0.9.0 0.8.0 0.7.1 0.7.0 0.6.1 0.6.0 0.5.0 0.4.0 0.3.0 0.2.1 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit f30c018 May 2, 2016 henrikbjorn Merge pull request #219 from jeskew/feature/support-aws-sdk-v3 … Add support for using v3 of the AWS SDK for PHP Permalink Failed to load latest commit information. doc Use self to indicate current page in toctree. Fixes build problem for… Apr 18, 2016 example Adds FlatFile driver example Jan 4, 2015 spec/Bernard Use Assertion to make sure arguments are present Jan 4, 2015 src Add support for using v3 of the AWS SDK for PHP Mar 20, 2016 tests Test with highest lowest matching package versions in travis Mar 20, 2016 .editorconfig Adds editorconfig Nov 24, 2014 .gitattributes Adds editorconfig Nov 24, 2014 .gitignore Move documentation into directory as it will be the same as the versi… Dec 27, 2013 .travis.yml Test with highest lowest matching package versions in travis Mar 20, 2016 CHANGELOG.md update changelog Feb 19, 2014 LICENSE Add MIT license Feb 19, 2013 README.md Update README.md Oct 28, 2015 composer.json Test with highest lowest matching package versions in travis Mar 20, 2016 phpunit.xml.dist Add functional group to test that requires database. Run those on travis Jan 22, 2015 README.md Bernard makes it super easy and enjoyable to do background processing in PHP. It does this by utilizing queues and long running processes. It supports normal queueing drivers but also implements simple ones with Redis and Doctrine. Currently these are the supported backends, with more coming with each release: Predis / PhpRedis Amazon SQS Iron MQ Doctrine DBAL Pheanstalk PhpAmqp / RabbitMQ You can learn more on our website about Bernard and its related projects or just dive directly into the documentation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bernardphp/bernard"	"A multibackend abstraction library."	"true"
"Queue"	"BunnyPHP"	"https://github.com/jakubkulhan/bunny"	"A performant pure-PHP AMQP (RabbitMQ) sync and also async (ReactPHP) library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"181"	"23"	"16"	"GitHub - jakubkulhan/bunny: Performant pure-PHP AMQP (RabbitMQ) sync/async (ReactPHP) library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 181 Fork 16 jakubkulhan/bunny Code Issues 4 Pull requests 0 Pulse Graphs Performant pure-PHP AMQP (RabbitMQ) sync/async (ReactPHP) library 35 commits 1 branch 10 releases 6 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 7f035cb May 31, 2016 jakubkulhan license year change Permalink Failed to load latest commit information. benchmark Initial commit Mar 15, 2015 spec implemented confirms (publisher acknowledgements) (closes #11) Nov 5, 2015 src/Bunny allow for parse_url result to be used as options May 31, 2016 test/Bunny fix empty message (closes #21) Mar 6, 2016 .gitignore Initial commit Mar 15, 2015 .travis.yml updated travis.yml Jul 23, 2015 LICENSE license year change May 31, 2016 README.md Added broker compatibility note Apr 20, 2016 composer.json updated composer.json Mar 15, 2015 phpunit.xml Initial commit Mar 15, 2015 README.md BunnyPHP Performant pure-PHP AMQP (RabbitMQ) sync/async (ReactPHP) library Requirements BunnyPHP requires PHP >= 5.4.0. Installation Add as Composer dependency: $ composer require bunny/bunny:@dev Comparison You might ask if there isn't a library/extension to connect to AMQP broker (e.g. RabbitMQ) already. Yes, there are multiple options: ext-amqp - PHP extension php-amqplib - pure-PHP AMQP protocol implementation react-amqp - ext-amqp binding to ReactPHP Why should you want to choose BunnyPHP instead? You want nice idiomatic PHP API to work with (I'm looking at you, php-amqplib). BunnyPHP interface follows PHP's common coding standards and naming conventions. See tutorial. You can't (don't want to) install PECL extension that has latest stable version in 2014. BunnyPHP isn't as such marked as stable yet. But it is already being used in production. You have both classic CLI/FPM and ReactPHP applications and need to connect to RabbitMQ. BunnyPHP comes with both synchronous and asynchronous clients with same PHP-idiomatic interface. Async client uses react/promise. Apart from that BunnyPHP is more performant than main competing library, php-amqplib. See benchmark/ directory and php-amqplib's benchmark/. Benchmarks were run as: $ php benchmark/producer.php N & php benchmark/consumer.php Library N (# messages) Produce sec Produce msg/sec Consume sec Consume msg/sec php-amqplib 100 0.0131 7633 0.0446 2242 bunnyphp 100 0.0128 7812 0.0488 2049 bunnyphp +/- +2.3% -8.6% php-amqplib 1000 0.1218 8210 0.4801 2082 bunnyphp 1000 0.1042 9596 0.2919 3425 bunnyphp +/- +17% +64% php-amqplib 10000 1.1075 9029 5.1824 1929 bunnyphp 10000 0.9078 11015 2.9058 3441 bunnyphp +/- +22% +78% php-amqplib 100000 20.7005 4830 69.0360 1448 bunnyphp 100000 9.7891 10215 35.7305 2789 bunnyphp +/- +111% +92% Tutorial TODO, see benchmarks/ for basic use. Contributing Large part of the PHP code (almost everything in Bunny\Protocol namespace) is generated from spec in file spec/amqp-rabbitmq-0.9.1.json. Look for DO NOT EDIT! in doc comments. To change geneted files change spec/generate.php and run: $ php ./spec/generate.php Broker compatibility Works well with RabbitMQ Does not work with ActiveMQ because it requires AMQP 1.0 which is a completely different protocol (Bunny is implementing AMQP 0.9.1) License BunnyPHP is licensed under MIT license. See LICENSE file. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jakubkulhan/bunny"	"A performant pure-PHP AMQP (RabbitMQ) sync and also async (ReactPHP) library."	"true"
"Queue"	"Pheanstalk"	"https://github.com/pda/pheanstalk"	"A Beanstalkd client library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"984"	"69"	"169"	"GitHub - pda/pheanstalk: PHP client for beanstalkd queue Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 69 Star 984 Fork 169 pda/pheanstalk Code Issues 21 Pull requests 6 Pulse Graphs PHP client for beanstalkd queue 214 commits 6 branches 11 releases 22 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.1 disconnect docker-tests master sraka1-persistent-connection test-styleci Nothing to show v3.1.0 v3.0.2 v3.0.1 v3.0.0 v2.1.1 v2.1.0 v2.0.0 v2.0.0-rc1 v1.1.0 v1.0.0 v0.9.0 Nothing to show New pull request Latest commit f095be7 Dec 2, 2015 pda Merge pull request #129 from dmitrivereshchagin/fix-docs … Remove redundant step from README.md Permalink Failed to load latest commit information. doc Tidied up documentation. Jun 17, 2009 scripts CS fixes Sep 1, 2015 src Fixed typo Sep 1, 2015 tests/Pheanstalk CS fixes Sep 1, 2015 .gitattributes CS fixes Jan 18, 2014 .gitignore Git ignores composer.lock; this is a lib, not an app. Apr 30, 2014 .travis.yml Add PHP7 to TravisCI configuration Jul 23, 2015 LICENSE fixed phpdoc & typos Jun 25, 2015 README.md Remove redundant step from README.md Nov 17, 2015 composer.json Composer branch-alias 3.1-dev, was 3.0-dev. Sep 1, 2015 phpunit.xml.dist Overhaul: PHP namespaces and PSR-4 layout. Apr 30, 2014 README.md Pheanstalk Pheanstalk is a pure PHP 5.3+ client for the beanstalkd workqueue. It has been actively developed, and used in production by many, since late 2008. Created by Paul Annesley, Pheanstalk is rigorously unit tested and written using encapsulated, maintainable object oriented design. Community feedback, bug reports and patches has led to a stable 1.0 release in 2010, a 2.0 release in 2013, and a 3.0 release in 2014. Pheanstalk 3.0 introduces PHP namespaces, PSR-1 and PSR-2 coding standards, and PSR-4 autoloader standard. beanstalkd up to the latest version 1.4 is supported. All commands and responses specified in the protocol documentation for beanstalkd 1.3 are implemented. Installation with Composer Install pheanstalk as a dependency with composer: composer require pda/pheanstalk Usage Example <?php  // Hopefully you're using Composer autoloading.  use Pheanstalk\Pheanstalk;  $pheanstalk = new Pheanstalk('127.0.0.1');  // ---------------------------------------- // producer (queues jobs)  $pheanstalk   ->useTube('testtube')   ->put(""job payload goes here\n"");  // ---------------------------------------- // worker (performs jobs)  $job = $pheanstalk   ->watch('testtube')   ->ignore('default')   ->reserve();  echo $job->getData();  $pheanstalk->delete($job);  // ---------------------------------------- // check server availability  $pheanstalk->getConnection()->isServiceListening(); // true or false  Running the tests There is a section of the test suite which depends on a running beanstalkd at 127.0.0.1:11300, which was previously opt-in via --with-server. Since porting to PHPUnit, all tests are run at once. Feel free to submit a pull request to rectify this. # ensure you have Composer set up $ wget http://getcomposer.org/composer.phar $ php composer.phar install  $ ./vendor/bin/phpunit PHPUnit 4.0.19 by Sebastian Bergmann.  Configuration read from /Users/pda/code/pheanstalk/phpunit.xml.dist  ................................................................. 65 / 83 ( 78%) ..................  Time: 239 ms, Memory: 6.00Mb  OK (83 tests, 378 assertions)  Contributors Paul Annesley Lachlan Donald Joakim Bick Vyacheslav leprechaun Peter McArthur robbiehudson Geoff Catlin Steven Lewis Lars Yencken Josh Butts Henry Smith Javier Spagnoletti Graham Campbell Thomas Tourlourat Matthieu Napoli Christoph James Hamilton Hannes Van De Vreken Yaniv Davidovitch .. more? Let me know if you're missing. License © Paul Annesley Released under the The MIT License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pda/pheanstalk"	"A Beanstalkd client library."	"true"
"Queue"	"PHP AMQP"	"https://github.com/php-amqplib/php-amqplib"	"A pure PHP AMQP library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1237"	"131"	"402"	"GitHub - php-amqplib/php-amqplib: AMQP library for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 131 Star 1,237 Fork 402 php-amqplib/php-amqplib Code Issues 79 Pull requests 11 Pulse Graphs AMQP library for PHP 675 commits 2 branches 25 releases 93 contributors PHP 99.9% Makefile 0.1% PHP Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags channel_connection_closed master Nothing to show v2.6.3 v2.6.2 v2.6.1 v2.6.0 v2.5.2 v2.5.1 v2.5.0 v2.4.1 v2.4.0 v2.3.0 v2.2.6 v2.2.5 v2.2.4 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.1.0 v2.0.2 v2.0.1 v2.0.0 v1.2.1 v1.2.0 v1.1 v1.0 Nothing to show New pull request Latest commit b7b677d Jul 2, 2016 michaelklishin committed on GitHub Fixes #411, closes #417. Permalink Failed to load latest commit information. PhpAmqpLib Update $delivery_info to simply an array Apr 27, 2016 benchmark Benchmark coding standard Jun 18, 2014 demo Rename vars to PSR-2. Feb 21, 2016 doc Add constants for delivery modes Sep 23, 2015 spec Fix spec PHPDoc generation Mar 2, 2016 tests Remove large ""fixtures"" from tests folder (#392) May 4, 2016 .editorconfig Add .editorconfig file Nov 17, 2014 .gitattributes Minor changes Feb 11, 2016 .gitignore Minor changes Feb 11, 2016 .scrutinizer.yml Minor changes Feb 11, 2016 .travis.yml Fix issue with declaring an exchange with a closed connection Mar 19, 2016 CHANGELOG.md Update CHANGELOG to 2.6.3 Apr 11, 2016 CODE_OF_CONDUCT.md Add CoC Feb 11, 2016 CONTRIBUTING.md Add scrutinizer, update readme, add contributing document, and update… Sep 25, 2015 CREDITS initial commit Sep 15, 2010 LICENSE initial commit Sep 15, 2010 Makefile Move Tests outside php-amqplib/PhpAmqpLib/ Aug 13, 2014 NOTE.DEVELOPMENT.NOV.2011.md updates README Jan 17, 2013 NOTE.THENETCIRCLE.md updates README Jan 17, 2013 README.md Fixes #411, closes #417. Jul 2, 2016 composer.json Fix issue with declaring an exchange with a closed connection Mar 19, 2016 phpunit.xml.dist Update phpunit configuration and code coverage Feb 12, 2016 README.md php-amqplib This library is a pure PHP implementation of the AMQP protocol. It's been tested against RabbitMQ. Requirements: PHP 5.3 due to the use of namespaces. The library was used for the PHP examples of RabbitMQ in Action and the official RabbitMQ tutorials. Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. New Maintainers (Feb 10th, 2016) Thanks to videlalvaro for his hard work in maintaining php-amqplib! He's done a fantastic job and has left big shoes to fill. The package will now be maintained by postalservice14 and nubeiro. Supported RabbitMQ Versions Starting with version 2.0 this library uses AMQP 0.9.1 by default and thus requires RabbitMQ 2.0 or later version. You shouldn't need to change your code, but test before upgrading. Supported RabbitMQ Extensions Since the library uses AMQP 0.9.1 we added support for the following RabbitMQ extensions: Exchange to Exchange Bindings Basic Nack Publisher Confirms Consumer Cancel Notify Extensions that modify existing methods like alternate exchanges are also supported. Setup Add a composer.json file to your project: {   ""require"": {       ""php-amqplib/php-amqplib"": ""2.6.*""   } } Then provided you have composer installed, you can run the following command: $ composer.phar install That will fetch the library and its dependencies inside your vendor folder. Then you can add the following to your .php files in order to use the library require_once __DIR__.'/vendor/autoload.php'; Then you need to use the relevant classes, for example: use PhpAmqpLib\Connection\AMQPStreamConnection; use PhpAmqpLib\Message\AMQPMessage; Usage With RabbitMQ running open two Terminals and on the first one execute the following commands to start the consumer: $ cd php-amqplib/demo $ php amqp_consumer.php Then on the other Terminal do: $ cd php-amqplib/demo $ php amqp_publisher.php some text to publish You should see the message arriving to the process on the other Terminal Then to stop the consumer, send to it the quit message: $ php amqp_publisher.php quit If you need to listen to the sockets used to connect to RabbitMQ then see the example in the non blocking consumer. $ php amqp_consumer_non_blocking.php Change log Please see CHANGELOG for more information what has changed recently. Tutorials To not repeat ourselves, if you want to learn more about this library, please refer to the official RabbitMQ tutorials. More Examples amqp_ha_consumer.php: demos the use of mirrored queues amqp_consumer_exclusive.php and amqp_publisher_exclusive.php: demos fanout exchanges using exclusive queues. amqp_consumer_fanout_{1,2}.php and amqp_publisher_fanout.php: demos fanout exchanges with named queues. basic_get.php: demos obtaining messages from the queues by using the basic get AMQP call. Batch Publishing Let's say you have a process that generates a bunch of messages that are going to be published to the same exchange using the same routing_key and options like mandatory. Then you could make use of the batch_basic_publish library feature. You can batch messages like this: $msg = new AMQPMessage($msg_body); $ch->batch_basic_publish($msg, $exchange);  $msg2 = new AMQPMessage($msg_body); $ch->batch_basic_publish($msg2, $exchange); and then send the batch like this: $ch->publish_batch(); When do we publish the message batch? Let's say our program needs to read from a file and then publish one message per line. Depending on the message size, you will have to decide when it's better to send the batch. You could send it every 50 messages, or every hundred. That's up to you. Optimized Message Publishing Another way to speed up your message publishing is by reusing the AMQPMessage message instances. You can create your new message like this: $properties = array('content_type' => 'text/plain', 'delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT); $msg = new AMQPMessage($body, $properties); $ch->basic_publish($msg, $exchange);  Now let's say that while you want to change the message body for future messages, you will keep the same properties, that is, your messages will still be text/plain and the delivery_mode will still be AMQPMessage::DELIVERY_MODE_PERSISTENT. If you create a new AMQPMessage instance for every published message, then those properties would have to be re-encoded in the AMQP binary format. You could avoid all that by just reusing the AMQPMessage and then resetting the message body like this: $msg->setBody($body2); $ch->basic_publish($msg, $exchange); Truncating Large Messages AMQP imposes no limit on the size of messages; if a very large message is received by a consumer, PHP's memory limit may be reached within the library before the callback passed to basic_consume is called. To avoid this, you can call the method AMQPChannel::setBodySizeLimit(int $bytes) on your Channel instance. Body sizes exceeding this limit will be truncated, and delivered to your callback with a AMQPMessage::$is_truncated flag set to true. The property AMQPMessage::$body_size will reflect the true body size of a received message, which will be higher than strlen(AMQPMessage::getBody()) if the message has been truncated. Note that all data above the limit is read from the AMQP Channel and immediately discarded, so there is no way to retrieve it within your callback. If you have another consumer which can handle messages with larger payloads, you can use basic_reject or basic_nack to tell the server (which still has a complete copy) to forward it to a Dead Letter Exchange. By default, no truncation will occur. To disable truncation on a Channel that has had it enabled, pass 0 (or null) to AMQPChannel::setBodySizeLimit(). UNIX Signals If you have installed PCNTL extension dispatching of signal will be handled when consumer is not processing message. $pcntlHandler = function ($signal) {     switch ($signal) {         case \SIGTERM:         case \SIGUSR1:         case \SIGINT:             // some stuff before stop consumer e.g. delete lock etc             exit(0);             break;         case \SIGHUP:             // some stuff to restart consumer             break;         default:             // do nothing     } };  declare(ticks = 1) {     pcntl_signal(\SIGTERM, $pcntlHandler);     pcntl_signal(\SIGINT,  $pcntlHandler);     pcntl_signal(\SIGUSR1, $pcntlHandler);     pcntl_signal(\SIGHUP,  $pcntlHandler); } To disable this feature just define constant AMQP_WITHOUT_SIGNALS as true <?php define('AMQP_WITHOUT_SIGNALS', true);  ... more code  Debugging If you want to know what's going on at a protocol level then add the following constant to your code: <?php define('AMQP_DEBUG', true);  ... more code  ?> Benchmarks To run the publishing/consume benchmark type: $ make benchmark Tests To successfully run the tests you need to first setup the test user and test virtual host. You can do that by running the following commands after starting RabbitMQ: $ rabbitmqctl add_vhost phpamqplib_testbed $ rabbitmqctl add_user phpamqplib phpamqplib_password $ rabbitmqctl set_permissions -p phpamqplib_testbed phpamqplib "".*"" "".*"" "".*"" Once your environment is set up you can run your tests like this: $ make test Contributing Please see CONTRIBUTING for details. Using AMQP 0.8 If you still want to use the old version of the protocol then you can do it by settings the following constant in your configuration code: define('AMQP_PROTOCOL', '0.8'); The default value is '0.9.1'. Providing your own autoloader If for some reason you don't want to use composer, then you need to have an autoloader in place fo the library classes. People have reported to use this autoloader with success. Original README: Below is the original README file content. Credits goes to the original authors. PHP library implementing Advanced Message Queuing Protocol (AMQP). The library is port of python code of py-amqplib http://barryp.org/software/py-amqplib/ It have been tested with RabbitMQ server. Project home page: http://code.google.com/p/php-amqplib/ For discussion, please join the group: http://groups.google.com/group/php-amqplib-devel For bug reports, please use bug tracking system at the project page. Patches are very welcome! Author: Vadim Zaliva lord@crocodile.org Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/php-amqplib/php-amqplib"	"A pure PHP AMQP library."	"true"
"Queue"	"Tarantool Queue"	"https://github.com/tarantool-php/queue"	"PHP bindings for Tarantool Queue."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"22"	"2"	"0"	"GitHub - tarantool-php/queue: PHP bindings for Tarantool Queue. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 22 Fork 0 tarantool-php/queue Code Issues 0 Pull requests 0 Pulse Graphs PHP bindings for Tarantool Queue. 66 commits 2 branches 4 releases 1 contributor PHP 93.0% Shell 4.8% Lua 2.2% PHP Shell Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master travis Nothing to show v0.3.0 v0.2.1 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 3cfea1c Jul 15, 2016 Eugene Leonovich Fix dockerfile.sh Permalink Failed to load latest commit information. src Rename statistics to stats Jun 30, 2016 tests Fix queues.lua Jun 30, 2016 .gitignore Fix coverage generation Oct 30, 2015 .travis.yml Update php ext installations Jul 15, 2016 LICENSE Update license year Feb 1, 2016 README.md Tweak queues.lua example in README.md Jun 30, 2016 composer.json Fix PHP version constraint Dec 29, 2015 dockerfile.sh Fix dockerfile.sh Jul 15, 2016 phpunit.xml.dist Update phpunit.xml.dist to to display all php errors Nov 2, 2015 README.md Tarantool Queue Tarantool is a NoSQL database running in a Lua application server. It integrates Lua modules, called LuaRocks. This package provides PHP bindings for Tarantool Queue LuaRock. Installation The recommended way to install the library is through Composer: $ composer require tarantool/queue Before start In order to use queue, you first need to make sure that your Tarantool instance is configured, up and running. The minimal required configuration might look like this: -- queues.lua  box.cfg {}  queue = require('queue') queue.start()  queue.create_tube('foobar', 'fifottl', { if_not_exists=true }) You can read more about the box configuration in the official Tarantool documentation. For more information about the queue configuration check out queue's README. To start the instance you need to copy (or symlink) queues.lua file into the /etc/tarantool/instances.enabled directory and run the following command: $ sudo tarantoolctl start queues Working with queue Once you have your instance running, you can start by creating a queue object with the queue (tube) name you defined in the Lua script: use Tarantool\Queue\Queue;  $tarantool = new Tarantool(); $queue = new Queue($tarantool, 'foobar'); Data types Under the hood Tarantool uses MessagePack binary format to serialize/deserialize data being stored in a queue. This means that it's safe to use such data types as null, bool, int, float, string, binary string and array without any manual pre- or post-processing: $queue->put('foo'); $queue->put(true); $queue->put(42); $queue->put(4.2); $queue->put(['foo' => ['bar' => ['baz' => null]]]); Tasks Most of the Queue API methonds return back a Task object containing the following getters: Task::getId() Task::getState() // States::READY, States::TAKEN, States::DONE, States::BURY or States::DELAYED Task::getData() And some sugar methods: Task::isReady() Task::isTaken() Task::isDone() Task::isBuried() Task::isDelayed() Producer API As you've already seen, to insert a task into a queue you need to call put() method, which accepts two arguments: the data you want to process and optional array of task options, which this particular queue supports. For example, fifottl queue (which we defined earlier in our Lua config file), supports delay, ttl, ttr, pri and temporary options: $queue->put('foo', ['delay' => 30]); $queue->put('bar', ['ttl' => 5]); $queue->put('baz', ['ttr' => 10, 'pri' => 42]); See the full list of available options here. Consumer API To reserve a task for execution, call take() method. It accepts an optional timeout parameter. If a timeout value is supplied the call will wait timeout seconds until a READY task appears in the queue. The method returns either a Task object or null: $task = $queue->take();  // wait 2 seconds $task = $queue->take(2);  // wait 100 milliseconds $task = $queue->take(.1); After successful execution, a task can be marked as acknowledged (that will also delete the task from a queue): $data = $task->getData();  // process $data  $task = $queue->ack($task->getId()); Or put back into the queue in case it cannot be executed: $task = $queue->release($task->getId());  // for ttl-like queues you can specify a delay $task = $queue->release($task->getId(), ['delay' => 30]); To look at a task without changing its state, use: $task = $queue->peek($task->getId()); To bury (disable) a task: $task = $queue->bury($task->getId()); To reset buried task(s) back to READY state: $count = $queue->kick(3); // kick 3 buried tasks A task (in any state) can be deleted permanently with delete(): $task = $queue->delete($task->getId()); To delete all tasks in a queue: $queue->truncate(); For a detailed API documentation, please read API section of the queue's README. Statistics The stats() method provides access to the statistical information accumulated since a queue was created: $stats = $queue->stats(); The result of this call might look like this: [     'tasks' => [         'taken'   => 1,         'buried'  => 1,         'ready'   => 1,         'done'    => 0,         'delayed' => 0,         'total'   => 3,     ],     'calls' => [         'bury' => 1,         'put'  => 3,         'take' => 1,         ...     ], ] In addition, you can specify a key to return only a subset of the array: $calls = $queue->stats('calls'); $total = $queue->stats('tasks.total'); Tests The easiest way to run tests is with Docker. First, build an image using the dockerfile.sh generator: $ ./dockerfile.sh | docker build -t queue - Then run Tarantool instance (needed for integration tests): $ docker run -d --name tarantool -v $(pwd):/queue tarantool/tarantool \     /queue/tests/Integration/queues.lua And then run both unit and integration tests: $ docker run --rm --name queue --link tarantool -v $(pwd):/queue -w /queue queue To run only integration or unit tests, set the PHPUNIT_OPTS environment variable to either --testsuite Integration or --testsuite Unit respectively, e.g.: $ docker run --rm --name queue -v $(pwd):/queue -w /queue \     -e PHPUNIT_OPTS='--testsuite Unit' queue License The library is released under the MIT License. See the bundled LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tarantool-php/queue"	"PHP bindings for Tarantool Queue."	"true"
"Queue"	"Thumper"	"https://github.com/php-amqplib/Thumper"	"A RabbitMQ pattern library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"189"	"17"	"44"	"GitHub - php-amqplib/Thumper: PHP Library that implements several messaging patterns for RabbitMQ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 189 Fork 44 php-amqplib/Thumper Code Issues 1 Pull requests 0 Pulse Graphs PHP Library that implements several messaging patterns for RabbitMQ 106 commits 1 branch 8 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.5.0 v0.4.1 v0.4.0 v0.3.2 v0.3.1 v0.3.0 v0.2 v0.1 Nothing to show New pull request Latest commit 71de0d0 May 27, 2016 John Kelly Update changelog Permalink Failed to load latest commit information. config Add tests Apr 27, 2016 examples Add tests Apr 27, 2016 lib/Thumper Small formatting change May 27, 2016 tests Use class AMQPLazyConnection May 9, 2016 .editorconfig Add tests Apr 27, 2016 .gitattributes Add tests Apr 27, 2016 .gitignore Add tests Apr 27, 2016 .scrutinizer.yml Just wait for 5 runs Apr 27, 2016 .styleci.yml Add tests Apr 27, 2016 .travis.yml Remove sudo and rabbitmq as requirement Apr 27, 2016 CHANGELOG.md Update changelog May 27, 2016 CONDUCT.md Add tests Apr 27, 2016 CONTRIBUTING.md Add tests Apr 27, 2016 LICENSE.md new LICENSE file Oct 24, 2010 README.md Fix case-sensitivity issue Apr 27, 2016 TODO.md adds todos May 10, 2012 composer.json Update ocular version for PHP 5.3.3 Apr 27, 2016 phpunit.xml.dist Add tests Apr 27, 2016 README.md Thumper Thumper is a PHP library that aims to abstract several messaging patterns that can be implemented over RabbitMQ. Inside the examples folder you can see how to implement RPC, parallel processing, simple queue servers and pub/sub. Install Via Composer $ composer require php-amqplib/thumper About the Examples Each example has a README.md file that shows how to execute it. All the examples expect that RabbitMQ is running. They have been tested using RabbitMQ 2.1.1 For example, to publish message to RabbitMQ is as simple as this:     $producer = new Thumper\Producer($connection);     $producer->setExchangeOptions(array('name' => 'hello-exchange', 'type' => 'direct'));     $producer->publish($argv[1]);  And then to consume them on the other side of the wire:     $myConsumer = function($msg)     {       echo $msg, ""\n"";     };      $consumer = new Thumper\Consumer($connection);     $consumer->setExchangeOptions(array('name' => 'hello-exchange', 'type' => 'direct'));     $consumer->setQueueOptions(array('name' => 'hello-queue'));     $consumer->setCallback($myConsumer); //myConsumer could be any valid PHP callback     $consumer->consume(5); //5 is the number of messages to consume.  Queue Server This example illustrates how to create a producer that will publish jobs into a queue. Those jobs will be processed later by a consumer –or several of them–. RPC This example illustrates how to do RPC over RabbitMQ. We have a RPC Client that will send request to a server that returns the number of characters in the provided strings. The server code is inside the parallel_processing folder. Parallel Processing This example is based on the RPC one. In this case it shows how to achieve parallel execution with PHP. Let's say that you have to execute two expensive tasks. One takes 5 seconds and the other 10. Instead of waiting 15 seconds, we can send the requests in parallel and then wait for the replies which should take 10 seconds now –the time of the slowest task–. Topic In this case we can see how to achieve publish/subscribe with RabbitMQ. The example is about logging. We can log with several levels and subjects and then have consumers that listen to different log levels act accordingly. Anonymous Consumers Also inside the topic folder there's an anonymous consumer example. The idea here is for those situations when you need to hook up a queue to some exchange to ""spy"" what's going on, but when you quit your program you want that the queue is automatically deleted. We can achieve this using an unnamed queue. Change log Please see CHANGELOG for more information what has changed recently. Testing $ composer test Contributing Please see CONTRIBUTING and CONDUCT for details. Disclaimer This code is experimental. The idea is to show how easy is to implement such patterns with RabbitMQ and AMQP. Credits All Contributors License The MIT License (MIT). Please see License File for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/php-amqplib/Thumper"	"A RabbitMQ pattern library."	"true"
"Search"	"Elastica"	"https://github.com/ruflin/Elastica"	"A client library for ElasticSearch."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1253"	"98"	"494"	"GitHub - ruflin/Elastica: Elastica is a PHP client for elasticsearch Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 98 Star 1,253 Fork 494 ruflin/Elastica Code Issues 70 Pull requests 20 Wiki Pulse Graphs Elastica is a PHP client for elasticsearch http://elastica.io/ 2,787 commits 9 branches 53 releases 187 contributors PHP 99.5% Other 0.5% PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ansible-refactoring apply-linting elasticsearch-2.0 es-5.0.0 gh-pages master release-2.3 release-3.1.1 travis-docker Nothing to show v1.4.3.0 v1.4.2.0 v1.3.4.0 v1.3.0.0 v1.2.1.0 v1.1.1.1 v1.1.1.0 v1.0.1.2 v1.0.1.1 v1.0.1.0 v1.0.0.0 v0.90.10.0 v0.90.7.0 v0.90.5.0 v0.90.2.0 v0.90.1.0 v0.20.5.0.RC1 v0.19.8.0 v0.19.3.0 v0.19.0.0 v0.18.6.0 v0.18.5.0 v0.18.4.1 v0.18.4.0 v0.18.1.0 v0.17.9.0 v0.17.8.1 v0.17.8.0 v0.17.7.0 v0.17.6.1 v0.17.6.0 v0.17.4.0 v0.17.3.0 v0.17.2.0 v0.17.1.0 v0.17.0.0 v0.16.4.0 v0.16.2.0 v0.16.0.0 v0.1 3.2.1 3.2.0 3.1.1 3.1.0 3.0.1 3.0.0 3.0.0-beta1 2.3.1 2.3.0 2.2.1 2.2.0 2.1.0 2.0.0 Nothing to show New pull request Latest commit 351414d Jul 12, 2016 ruflin committed on GitHub Apply short array syntax through linting to all files (#1141) Permalink Failed to load latest commit information. env Update to php 7.0 as default build (#1115) Jun 15, 2016 lib/Elastica Apply short array syntax through linting to all files (#1141) Jul 12, 2016 test Apply short array syntax through linting to all files (#1141) Jul 12, 2016 .coveralls.yml Simplicy coverage fetching for coveralls Jul 7, 2015 .dockerignore Add gitattributes for having less conflicts in CHANGELOG.md during me… Oct 16, 2015 .editorconfig Add .editorconfig rule for Makefile May 18, 2015 .gitattributes Add gitattributes for having less conflicts in CHANGELOG.md during me… Oct 16, 2015 .gitignore Add gitattributes for having less conflicts in CHANGELOG.md during me… Oct 16, 2015 .php_cs use 'short_array_syntax' (#1139) Jul 12, 2016 .travis.yml Reintroduce master only Nov 26, 2015 CHANGELOG.md Fixed gzip encoding enable/disable on persistent connections (#1122) Jun 23, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Nov 3, 2015 Dockerfile Upgrade to Guzzle 6 Jan 7, 2016 LICENSE.txt Moved from Apache license to MIT license Feb 13, 2014 Makefile Update to php 7.0 as default build (#1115) Jun 15, 2016 README.md Update elasticsearch build dependency to 2.3.2 (#1084) Apr 28, 2016 composer.json Prepare Release 3.2.1 (#1100) Jun 15, 2016 docker-compose.yml Remove useless container_name Oct 27, 2015 docker-entrypoint.sh Update elasticsearch build dependency to 2.3.2 (#1084) Apr 28, 2016 phpdoc.dist.xml replace tabs with spaces Apr 22, 2013 README.md Elastica: elasticsearch PHP Client All documentation for Elastica can be found under Elastica.io. If you have questions, don't hesitate to ask them on Stackoverflow and add the Tag ""Elastica"" or in our Gitter channel. All library issues should go to the issue tracker from github. Compatibility This release is compatible with all elasticsearch 2.x releases. It was tested with version 2.3.2 Contributing Contributions are always welcome. For details on how to contribute, check the CONTRIBUTING file. Dependencies Project Version Required Elasticsearch 2.3.2 yes Elasticsearch image plugin 1.7.1 no Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ruflin/Elastica"	"A client library for ElasticSearch."	"true"
"Search"	"ElasticSearch PHP"	"https://github.com/elastic/elasticsearch-php"	"The official client library for."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1178"	"152"	"287"	"GitHub - elastic/elasticsearch-php: Official PHP low-level client for Elasticsearch. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 152 Star 1,178 Fork 287 elastic/elasticsearch-php Code Issues 28 Pull requests 9 Pulse Graphs Official PHP low-level client for Elasticsearch. https://www.elastic.co/guide/en/elasticsearch/client/php-api/current/index.html 1,309 commits 5 branches 37 releases 58 contributors PHP 97.7% HTML 2.1% Shell 0.2% PHP HTML Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.4 1.0 2.0 master travis Nothing to show v2.2.1 v2.2.0 v2.1.5 v2.1.4 v2.1.3 v2.1.2 v2.1.1 v2.1.0 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v2.0.0-beta5 v2.0.0-beta4 v2.0.0-beta3 v2.0.0-beta2 v2.0.0-beta1 v1.4.1 v1.4.0 v1.3.4 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.2 v1.2.1 v1.2.0 v1.1.0 v1.0.2 v1.0.1 v1.0 v0.4.5 v0.4.4 v0.4.3 v0.4.2 v0.4.1 v0.4.0 Nothing to show New pull request Latest commit c914c1c Jul 12, 2016 polyfractal committed with polyfractal Merge pull request #423 from segadora/patch-1 … [DOCS] Php typos Permalink Failed to load latest commit information. .github Fix comment tag Mar 9, 2016 docs Merge pull request #423 from segadora/patch-1 Jul 14, 2016 src/Elasticsearch [Internal BWC Break] Add better ability to inject namespaces Jul 7, 2016 tests [Internal BWC Break] Add better ability to inject namespaces Jul 7, 2016 travis Tweak script for new cli format Jul 6, 2016 util Tweak SpecParser template May 31, 2016 .gitignore Added output folder from SpecParser to gitignore May 31, 2016 .gitmodules [TEST] update mechanism to retrieve yaml tests Mar 5, 2014 .php_cs Automated PSR-2 style cleanup May 9, 2016 .travis.yml [TEST] No need to test below PHP 5.6 on master May 9, 2016 BREAKING_CHANGES.md [DOCS] Add Breaking Changes list for 5.0 May 9, 2016 CHANGELOG.md [DOCS] Update changelog Jul 14, 2016 LICENSE Add LGPL v2.1 license - Elasticsearch-PHP is now dual licensed under … Nov 6, 2014 NOTICE Add LGPL v2.1 license - Elasticsearch-PHP is now dual licensed under … Nov 6, 2014 README.md [DOCS] Update copyright year in licenses May 9, 2016 composer.json Add autogenerated reference documentation Apr 12, 2016 phpunit.xml phpunit.xml added Aug 21, 2015 README.md elasticsearch-php Official low-level client for Elasticsearch. Its goal is to provide common ground for all Elasticsearch-related code in PHP; because of this it tries to be opinion-free and very extendable. To maintain consistency across all the low-level clients (Ruby, Python, etc), clients accept simple associative arrays as parameters. All parameters, from the URI to the document body, are defined in the associative array. Features One-to-one mapping with REST API and other language clients Configurable, automatic discovery of cluster nodes Persistent, Keep-Alive connections (within the lifetime of the script) Load balancing (with pluggable selection strategy) across all available nodes. Defaults to round-robin Pluggable connection pools to offer different connection strategies Generalized, pluggable architecture - most components can be replaced with your own custom class if specialized behavior is required Option to use asyncronous future, which enables parallel execution of curl requests to multiple nodes Version Matrix Elasticsearch Version Elasticsearch-PHP Branch >= 5.0 dev-master >= 2.0, < 5.0 1.0 or 2.0 >= 1.0, < 2.0 1.0 or 2.0 <= 0.90.x 0.4 If you are using Elasticsearch 5.0+ (master, alpha, beta), use Elasticsearch-PHP dev-master. A 5.x branch will be cut when Elasticsearch 5.0 GA is released If you are using Elasticsearch 1.x or 2.x, prefer using the Elasticsearch-PHP 2.0 branch. The 1.0 branch is compatible however. If you are using a version older than 1.0, you must install the 0.4 Elasticsearch-PHP branch. Since ES 0.90.x and below is now EOL, the corresponding 0.4 branch will not receive any more development or bugfixes. Please upgrade. You should never use Elasticsearch-PHP Master branch, as it tracks Elasticearch master and may contain incomplete features or breaks in backwards compat. Only use ES-PHP master if you are developing against ES master for some reason. Documentation Full documentation can be found here. Docs are stored within the repo under /docs/, so if you see a typo or problem, please submit a PR to fix it! Installation via Composer The recommended method to install Elasticsearch-PHP is through Composer. Add elasticsearch/elasticsearch as a dependency in your project's composer.json file (change version to suit your version of Elasticsearch):     {         ""require"": {             ""elasticsearch/elasticsearch"": ""~2.0""         }     } Download and install Composer:     curl -s http://getcomposer.org/installer | php Install your dependencies:     php composer.phar install --no-dev Require Composer's autoloader Composer also prepares an autoload file that's capable of autoloading all of the classes in any of the libraries that it downloads. To use it, just add the following line to your code's bootstrap process:     <?php      use Elasticsearch\ClientBuilder;      require 'vendor/autoload.php';      $client = ClientBuilder::create()->build(); You can find out more on how to install Composer, configure autoloading, and other best-practices for defining dependencies at getcomposer.org. You'll notice that the installation command specified --no-dev. This prevents Composer from installing the various testing and development dependencies. For average users, there is no need to install the test suite (which also includes the complete source code of Elasticsearch). If you wish to contribute to development, just omit the --no-dev flag to be able to run tests. PHP Version Requirement Version 2.0 of this library requires at least PHP version 5.4.0 to function. If you are on an older version of PHP, it is recommended that you upgrade, as PHP 5.3 is official EOL. Elasticsearch-PHP v0.4.x and v1.x are compatible with PHP 5.3.9+, but will eventually stop being supported. PHP Version Elasticsearch-PHP Branch >= 5.6.0 Dev-Master * >= 5.4.0 2.0 >= 5.3.9 0.4, 1.0 Dev-Master only officially supports 5.6.0+, but currently runs fine on versions down to 5.4.0. This is not, however, guaranteed to stay true in the future if 5.6+ features are required. Quickstart Index a document In elasticsearch-php, almost everything is configured by associative arrays. The REST endpoint, document and optional parameters - everything is an associative array. To index a document, we need to specify four pieces of information: index, type, id and a document body. This is done by constructing an associative array of key:value pairs. The request body is itself an associative array with key:value pairs corresponding to the data in your document: $params = [     'index' => 'my_index',     'type' => 'my_type',     'id' => 'my_id',     'body' => ['testField' => 'abc'] ];  $response = $client->index($params); print_r($response); The response that you get back indicates the document was created in the index that you specified. The response is an associative array containing a decoded version of the JSON that Elasticsearch returns: Array (     [_index] => my_index     [_type] => my_type     [_id] => my_id     [_version] => 1     [created] => 1 )  Get a document Let's get the document that we just indexed. This will simply return the document: $params = [     'index' => 'my_index',     'type' => 'my_type',     'id' => 'my_id' ];  $response = $client->get($params); print_r($response); The response contains some metadata (index, type, etc) as well as a _source field...this is the original document that you sent to Elasticsearch. Array (     [_index] => my_index     [_type] => my_type     [_id] => my_id     [_version] => 1     [found] => 1     [_source] => Array         (             [testField] => abc         )  ) Search for a document Searching is a hallmark of Elasticsearch, so let's perform a search. We are going to use the Match query as a demonstration: $params = [     'index' => 'my_index',     'type' => 'my_type',     'body' => [         'query' => [             'match' => [                 'testField' => 'abc'             ]         ]     ] ];  $response = $client->search($params); print_r($response); The response is a little different from the previous responses. We see some metadata (took, timed_out, etc) and an array named hits. This represents your search results. Inside of hits is another array named hits, which contains individual search results: Array (     [took] => 1     [timed_out] =>     [_shards] => Array         (             [total] => 5             [successful] => 5             [failed] => 0         )      [hits] => Array         (             [total] => 1             [max_score] => 0.30685282             [hits] => Array                 (                     [0] => Array                         (                             [_index] => my_index                             [_type] => my_type                             [_id] => my_id                             [_score] => 0.30685282                             [_source] => Array                                 (                                     [testField] => abc                                 )                         )                 )         ) ) Delete a document Alright, let's go ahead and delete the document that we added previously: $params = [     'index' => 'my_index',     'type' => 'my_type',     'id' => 'my_id' ];  $response = $client->delete($params); print_r($response); You'll notice this is identical syntax to the get syntax. The only difference is the operation: delete instead of get. The response will confirm the document was deleted: Array (     [found] => 1     [_index] => my_index     [_type] => my_type     [_id] => my_id     [_version] => 2 ) Delete an index Due to the dynamic nature of Elasticsearch, the first document we added automatically built an index with some default settings. Let's delete that index because we want to specify our own settings later: $deleteParams = [     'index' => 'my_index' ]; $response = $client->indices()->delete($deleteParams); print_r($response); The response: Array (     [acknowledged] => 1 ) Create an index Now that we are starting fresh (no data or index), let's add a new index with some custom settings: $params = [     'index' => 'my_index',     'body' => [         'settings' => [             'number_of_shards' => 2,             'number_of_replicas' => 0         ]     ] ];  $response = $client->indices()->create($params); print_r($response); Elasticsearch will now create that index with your chosen settings, and return an acknowledgement: Array (     [acknowledged] => 1 ) Wrap up That was just a crash-course overview of the client and it's syntax. If you are familiar with elasticsearch, you'll notice that the methods are named just like REST endpoints. You'll also notice that the client is configured in a manner that facilitates easy discovery via the IDE. All core actions are available under the $client object (indexing, searching, getting, etc). Index and cluster management are located under the $client->indices() and $client->cluster() objects, respectively. Check out the rest of the Documentation to see how the entire client works. Available Licenses Starting with version 1.3.1, Elasticsearch-PHP is available under two licenses: Apache v2.0 and LGPL v2.1. Versions prior to 1.3.1 are still licensed with only Apache v2.0. The user may choose which license they wish to use. Since there is no discriminating executable or distribution bundle to differentiate licensing, the user should document their license choice externally, in case the library is re-distributed. If no explicit choice is made, assumption is that redistribution obeys rules of both licenses. Contributions All contributions to the library are to be so that they can be licensed under both licenses. Apache v2.0 License: Copyright 2013-2016 Elasticsearch Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. LGPL v2.1 Notice: Copyright (C) 2013-2016 Elasticsearch This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/elastic/elasticsearch-php"	"The official client library for."	"true"
"Search"	"ElasticSearch"	"https://www.elastic.co/"	"The official client library for."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Elastic · Revealing Insights from Data (Formerly Elasticsearch) | Elastic Questions? Feedback? powered by Olark live chat software EN English Français Deutsch 日本語 한국어 Products Cloud Services Customers Learn downloads contact EN English Français Deutsch 日本語 한국어 A Search Engine Powering Graph Exploration... Imagine That. Read the Blog Install Now Get Started Are you a newcomer to Elasticsearch? Then this is the video for you. Watch Elasticsearch as a Service Want a hosted Elasticsearch cluster that's fully managed? Get started with Elastic Cloud. Launch Secure Elasticsearch Redefine what's possible with Elasticsearch by securing your data with Shield. Learn Training Elastic trainings are taught by core developers and designed to give you the know-how needed to get up and running while learning our open source projects inside and out. Core Elasticsearch: Developer Hands-On Workshop with Elasticsearch, Logstash & Kibana View All Subscriptions Our subscriptions combine commercial products with enterprise-grade support for your projects in development and production. Designed to accelerate project delivery and solve issues quickly, Elastic subscriptions enrich our open source stack. Learn More Products Elastic's open source solutions solve a growing list of search, log analysis, and analytics challenges across virtually every industry. Our commercial security and monitoring products take our open source stack further by broadening what's possible with your data. Learn More Learn Whether you're a newcomer to Elastic or a seasoned veteran, we've got a multitude of resources — from webinars to blog posts, demos, step-by-step tutorials, forums, and more — to help you do great things with data and inspire you to stay curious. Learn More Who We Are Elastic believes getting immediate, actionable insight from data matters. As the company behind the open source projects — Elasticsearch, Logstash, Kibana, and Beats — designed to take data from any source and search, analyze, and visualize it in real time, Elastic is helping people make sense of data. From stock quotes to Twitter streams, Apache logs to WordPress blogs, our products are extending what's possible with data, delivering on the promise that good things come from connecting the dots. Learn More Be in the know with the latest and greatest from Elastic. Thanks for subscribing! We'll keep you updated with new releases. Products > Elasticsearch Kibana Logstash Beats Elastic Cloud Shield (Security) Watcher (Alerting) Marvel (Monitoring) Graph ES-Hadoop Resources Blog Community Customers & Use Cases Documentation Elastic{ON} Events Forums Meetups Subscriptions Support Portal Videos & Webinars Training About > Careers/Jobs Contact Leadership Partners Press Language English Français Deutsch 日本語 한국어 Trademarks Terms of Use Privacy Cookie Policy Brand © 2016. All Rights Reserved - Elasticsearch Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the Apache Software Foundation in the United States and/or other countries."	"null"	"null"	"The official client library for."	"true"
"Search"	"Solarium"	"http://www.solarium-project.org/"	"A client library for."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"525"	"51"	"199"	"GitHub - solariumphp/solarium: PHP Solr client library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 51 Star 525 Fork 199 solariumphp/solarium Code Issues 59 Pull requests 16 Pulse Graphs PHP Solr client library 934 commits 8 branches 31 releases 56 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.3.0 add-php-nightly develop feature/score-filter gh-pages master revert-300-master revert-334-fix-curl Nothing to show 3.6.0 3.5.1 3.5.0 3.4.1 3.4.0 3.3.0 3.2.0 3.2.0-RC1 3.1.2 3.1.1 3.1.0 3.1.0-RC1 3.0.1 3.0.0 3.0.0-RC1 2.5.0 2.4.1 2.4.0 2.4.0-RC2 2.4.0-RC1 2.3.0 2.3.0-RC1 2.2.0 2.2.0-RC1 2.1.0 2.1.0-RC1 2.0.0 2.0.0-RC1 1.0.1 1.0.0 1.0.0-RC1 Nothing to show New pull request Latest commit 095d41a May 31, 2016 basdenooijer Fix version number Permalink Failed to load latest commit information. docs corrects php docblock in result-of-a-select-query/ Feb 24, 2016 examples Merge branch 'develop' of github.com:solariumphp/solarium into develop Jun 14, 2015 library/Solarium Fix version number May 31, 2016 phar Merge branch 'develop' of github.com:solariumphp/solarium into Hywan-… Nov 30, 2015 tests Merge pull request #391 from chs2/develop Feb 1, 2016 .coveralls.yml Update coveralls settings Mar 12, 2016 .gitignore Add `solarium.phar` as file to ignore. Nov 11, 2015 .travis.yml Merge pull request #406 from OndraM/update-coveralls Mar 16, 2016 CHANGELOG.md Add release date May 3, 2016 CONTRIBUTING.md Create CONTRIBUTING.md Feb 1, 2015 COPYING initial import Feb 2, 2011 README.md Fix readthedocs domain Apr 28, 2016 build.xml fix phpunit ant target to use vendor Sep 13, 2013 composer.json Merge pull request #406 from OndraM/update-coveralls Mar 16, 2016 phpunit.xml.dist - unittest improvements May 15, 2011 phpunit.xml.travis Integrate coveralls with travis-ci Nov 4, 2014 README.md Solarium PHP Solr client library What is Solarium? Solarium is a PHP Solr client library that accurately model Solr concepts. Where many other Solr libraries only handle the communication with Solr, Solarium also relieves you of handling all the complex Solr query parameters using a well documented API. Please see the docs for a more detailed description. Requirements Solarium only supports PHP 5.4 and up. It's highly recommended to have Curl enabled in your PHP environment. However if you don't have Curl available you can switch from using Curl (the default) to another client adapter. The other adapters don't support all the features of the Curl adapter. Getting started The preferred way to install Solarium is by using Composer. Solarium is available on Packagist. More information Docs http://solarium.readthedocs.io/en/stable/ Issue tracker http://github.com/solariumphp/solarium/issues Contributors https://github.com/solariumphp/solarium/contributors License See the COPYING file or view online: https://github.com/solariumphp/solarium/blob/master/COPYING Continuous Integration status Develop branch Develop branch Master branch Master branch Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/solariumphp/solarium"	"A client library for."	"true"
"Search"	"Solr"	"http://lucene.apache.org/solr/"	"A client library for."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Solr - Menu News Features Resources Search - select provider - @ Lucid Find @ Search-Lucene download Lucene ⇧ TLP Apache Solr™ 6.1.0 Solr is the popular, blazing-fast, open source enterprise search platform built on Apache Lucene™.   Learn more about Solr. Solr is highly reliable, scalable and fault tolerant, providing distributed indexing, replication and load-balanced querying, automated failover and recovery, centralized configuration and more. Solr powers the search and navigation features of many of the world's largest internet sites. Features Hundreds of features make Solr incredibly versatile. Learn More Resources From tutorials to in-depth documentation, you'll find it here. Get Started Scaling with Solr Scale with confidence in data integrity and performance. Scale Solr Solr Community Get support and give back. Contribute to the Solr project. Learn More Tested and proven Solr is trusted. Solr powers some of the most heavily-trafficked websites and applications in the world. Other Notable Users AT&T Instagram Buy.com Ticketmaster Netflix The Echo Nest Chegg Disney Adobe eBay Internet Archive SAP Hybris Magento IBM Websphere Commerce Bloomberg Comcast MTV Networks Travelocity Want to see more? Want to see your app or website here? Visit Solr's Public Servers listing page to learn more. Take the first step Getting Started Power your global enterprise or your weekend project. Download Binary Click here to download the Solr binary from the available mirrors. Download Solr Run Through the Tutorial The Solr Quick Start tutorial will help you start working with Solr. Read the Tutorial Level Up Once you've completed the tutorial, continue your mastery with the Solr resource library. More Resources Solr News | 17 June 2016 Apache Solr 6.1.0 available The Lucene PMC is pleased to announce the release of Apache Solr 6.1.0. Download here. Read More News Deep expertise Solr Books The definitive in-depth resource library written by the world's Solr experts. Learn More The Apache Software Foundation The Apache Software Foundation provides support for the Apache community of open-source software projects. The Apache projects are defined by collaborative consensus based processes, an open, pragmatic software license and a desire to create high quality software that leads the way in its field. Apache Lucene, Apache Solr, Apache PyLucene, Apache Open Relevance Project and their respective logos are trademarks of The Apache Software Foundation. All other marks mentioned may be trademarks or registered trademarks of their respective owners. Features Overview Data Handling Querying Faceting Discovery Plugins and Extensions Statistics and Aggregations Spatial Rich Content Performance Scaling with SolrCloud User Interface Resources Tutorial Docs Books Presentations Videos Solr Community Solr Logos and Assets Download Older Releases Get Started Download Run Through the Tutorial Level Up Related Projects Apache Hadoop Apache ManifoldCF Apache Mahout Apache Nutch Apache OpenNLP Apache Tika Apache Zookeeper Copyright © 2016 The Apache Software Foundation, Licensed under the Apache License, Version 2.0. Privacy Policy Apache and the Apache feather logo are trademarks of The Apache Software Foundation. Apache Lucene, Apache Solr and their respective logos are trademarks of the Apache Software Foundation. Please see the Apache Trademark Policy for more information. All non-Apache logos are the trademarks of their respective owners."	"null"	"null"	"A client library for."	"true"
"Search"	"Sphinx Search"	"https://github.com/ripaclub/sphinxsearch"	"Sphinx Search library provides SphinxQL indexing and searching features"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"38"	"14"	"7"	"GitHub - ripaclub/sphinxsearch: Sphinx Search library provides SphinxQL indexing and searching features Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 38 Fork 7 ripaclub/sphinxsearch Code Issues 8 Pull requests 0 Pulse Graphs Sphinx Search library provides SphinxQL indexing and searching features 502 commits 2 branches 13 releases 5 contributors PHP 99.7% Shell 0.3% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show 0.8.1 0.8.0 0.7.1 0.7.0 0.6.2 0.6.1 0.6.0 0.5.2 0.5.1 0.5.0 0.4.0 0.3.0 0.2.0 Nothing to show New pull request Latest commit 22db688 Mar 26, 2016 leogr Merge pull request #45 from ripaclub/develop … Develop Permalink Failed to load latest commit information. library Add Backwards-compatibility shim for Adapter factories Mar 26, 2016 tests Add tests compatibility with zend-service-manager up to ^3.0 Mar 26, 2016 .coveralls.yml coveralls Jun 22, 2015 .gitignore Code quality tools upgraded Aug 29, 2014 .travis.yml Update instead of install Mar 26, 2016 CONTRIBUTING.md Contributing Oct 21, 2014 LICENSE Setup Jan 17, 2014 README.md Update requirements Mar 26, 2016 composer.json Add PHP 7.0 Mar 26, 2016 phpunit.xml.dist Configs cleaned Jun 24, 2015 README.md Sphinx Search Sphinx Search library provides SphinxQL indexing and searching features. Introduction Installation Configuration (simple) Usage Search Indexer Advanced Adapter Service Factory Prepared statement Working with types SQL Objects Query expression Testing Code quality Introduction This Library aims to provide: A SphinxQL query builder based upon Zend\Db\Sql A simple Search class An Indexer class to work with RT indices Factories for SphinxQL connection through Zend\Db\Adapter We have also prepared a set of related useful tools. You can use them in conjuction with this library. ripaclub/zf2-sphinxsearch-tool A set of tools for SphinxSearch's config files creation and automation ripaclub/zf2-sphinxsearch A module for fast bootstrapping and integration of SphinxSearch library with Zend Framework ripaclub/sphinxsearch-bundle A bundle for fast bootstrapping and integration of SphinxSearch library with Symfony leodido/sphinxsearch SphinxSearch docker image (tags for various SphinxSearch's releases and betas) Note This library does not use SphinxClient PHP extension because everything available through the Sphinx API is also available via SphinxQL but not vice versa (i.e., writing to RT indicies is only available via SphinxQL). Installation Using composer: Add the following to your composer.json file: ""require"": {     ""ripaclub/sphinxsearch"": ""~0.8.0"", } Note Since version 0.8.1, PHP 7 and Zend Framework's components of 3.x series are fully supported. Starting from 0.8.x series the minimum requirements are PHP >= 5.5 and Zend Framework dependencies >= 2.4. When forced to use a PHP version less (or equal) than 5.4 and/or a Zend Framework dependencies less (or equal) then 2.3 you can use 0.7.1 version. Configuration (simple) In order to work with library components you need an adapter instance. You can simply obtain configured adapter by using the built-in factory like the following example: use Zend\ServiceManager\ServiceManager; use Zend\ServiceManager\Config;  $serviceManagerConfig = new Config([     'factories' => [         'SphinxSearch\Db\Adapter\Adapter' => 'SphinxSearch\Db\Adapter\AdapterServiceFactory'     ],     'aliases' => [         'sphinxql' => 'SphinxSearch\Db\Adapter\Adapter'     ] ]); $serviceManager = new ServiceManager(); $serviceManagerConfig->configureServiceManager($serviceManager); $serviceManager->setService('Config', [     'sphinxql' => [         'driver'    => 'pdo_mysql',         'hostname'  => '127.0.0.1',         'port'      => 9306,         'charset'   => 'UTF8'     ] ]);  $adapter = $serviceManager->get('sphinxql'); Note Only two drivers are supported: pdo_mysql mysqli For more details see the Adapter Service Factory section. Usage Search Assuming $adapter has been retrivied via ServiceManager: use SphinxSearch\Search; use SphinxSearch\Db\Sql\Predicate\Match;  $search = new Search($adapter); $rowset = $search->search('foo', new Match('?', 'ipsum dolor'));  echo 'Founds row:' . PHP_EOL; foreach ($rowset as $row) {     echo $row['id'] . PHP_EOL; } The search() method takes as first argument the index name (or an array of indicies) and the second one accepts a where condition (same as Zend\Db\Sql\Select::where()). Furthermore search() second argument can accept a closure, which in turn, will be passed the current Select object that is being used to build the SELECT query. The following usage is possible: use SphinxSearch\Search; use SphinxSearch\Db\Sql\Select; use SphinxSearch\Db\Sql\Predicate\Match;  $search = new Search($adapter); $rowset = $search->search('foo', function(Select $select) {     $select->where(new Match('?', 'ipsum dolor'))            ->where(['c1 > ?' => 5])                ->limit(1); }); The SphinxSearch\Db\Sql\Select class (like Zend\Db\Sql\Select which we extend from) supports the following methods related to SQL standard clauses: $select->from($table) $select->columns(array $columns) $select->where($predicate, $combination = Predicate\PredicateSet::OP_AND) $select->group($group) $select->having($predicate, $combination = Predicate\PredicateSet::OP_AND) $select->order($order) $select->limit($limit) $select->offset($offset) // And also variable overloading for: $select->where $select->having Thus it adds some SphinxQL specific methods: $select->withinGroupOrder($withinGroupOrder) $select->option(array $values, $flag = self::OPTIONS_MERGE) Other utility methods like setSpecifications, getRawState and reset are fully supported. Instead quantifier, join and combine are just ignored because SphinxQL syntax doesn't have them. Indexer Assuming $adapter has been retrivied via ServiceManager we can perform indexing of documents, provided that the indices on which we act are real time. use SphinxSearch\Indexer;  $indexer = new Indexer($adapter); $indexer->insert(     'foo',     [         'id' => 1,         'short' => 'Lorem ipsum dolor sit amet',         'text' => 'Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit ...'     ],     true ); Note that third parameter of insert method is a boolean flag indicating wheter a ""upsert"" rather than an insert have to be done. Furthermore, an Indexer instance allows to update and delete rows from real time indices (using the methods update and delete, respectively). Advanced Adapter Service Factory This library come with two factories in bundle in order to properly configure the Zend\Db\Adapter\Adapter to work with Sphinx Search. Use SphinxSearch\Db\Adapter\AdapterServiceFactory (see Configuration section above) for a single connection else if you need to use multiple connections use the shipped SphinxSearch\Db\Adapter\AdapterAbstractServiceFactory registering it in the ServiceManager as below: 'service_manager' => [     'abstract_factories' => [         'SphinxSearch\Db\Adapter\AdapterAbstractServiceFactory'     ], ] For the abstract factory configuration refer to Zend Db Adpater Abstract Factory documentation. Prepared statement SphinxQL does not support prepared statement, but PDO drivers are able to emulate prepared statement client side. To achive prepared query benefits this library fully supports this feature. Note The PDO driver supports prepared and non-prepared queries. The Mysqli driver does not support prepared queries. For both SphinxSearch\Search and SphinxSearch\Indexer you can choose the working mode via setQueryMode() using one of the following flags: const QUERY_MODE_PREPARED   = 'prepared'; // use prepared statement const QUERY_MODE_EXECUTE    = 'execute';  // do not use prepared statement const QUERY_MODE_AUTO       = 'auto';     // auto detect best available option (prepared mode preferred) With the auto option the component will use the best execution mode available, prefering prepared mode if supported by the driver. Working with types This library aims to normalize API usage among supported drivers and modes, but due to SphinxQL limitations there are some considerations: NULL Not supported by SphinxQL. The library transparently handle it for SQL compatibility: an exception will be thrown by the driver if you try to use a value = NULL. boolean SphinxQL does not have a native boolean type but if you try to use a PHP bool the library and the driver will cast the value to 0 or 1 respectively. integer PHP native integers work properly when SphinxQL expects an uint. Note that strings containing integers do not work in filters (i.e. WHERE clause). WARNING: PHP integers are signed, instead SphinxQL supports only UNSIGNED integers and UNIX timestamp. float Due to SphinxQL specific issues related to float values (especially in WHERE clause), by default them are converted to a 32-bit-single-precision compatible string rappresentation which are then included into the SQL query as literals, even in the case where prepared statements are used. This feature works only if value is a native PHP float (anyway strings containing floats do not work within Sphinx). If it is needed, this behaviour can be globally disabled using $adapter->getPlatform()->enableFloatConversion(false). WARNING: disabling float conversion feature can produce unexpected behaviors, some notable examples: Actually Sphinx SQL interpreter treats a number without decimal part as an integer. So, assumming f1 as float column, if you try WHERE f1 = 10 you will get 42000 - 1064 - index foo: unsupported filter type 'intvalues' on float column else if you try WHERE f1 = 10.0 it will work fine. Due to the fact that SphinxQL does not support float quoted as strings and PDO driver has no way to bind a double (SQL float) parameter in prepared statement mode, PDO driver will just cast to string producing a locale aware conversion (same as PHP echo), so it will work only if LC_NUMERIC setting is compliant with point as separator in decimal notation (for example you can use LC_NUMERIC='C') For those reasons we suggest to always use proper PHP native types (i.e., not use strings for numeric fields) when building queries. Useful link: Sphinx Attributes Docs. SQL Objects As Zend\Db\Sql this library provides a set of SQL objects: SphinxSearch\Db\Sql\Select explained in Search paragraph SphinxSearch\Db\Sql\Insert SphinxSearch\Db\Sql\Replace same as insert, but overwrites duplicate IDs SphinxSearch\Db\Sql\Update with the ability to handle OPTION clause SphinxSearch\Db\Sql\Delete SphinxSearch\Db\Sql\Show Each of them can be retrivied by SphinxSearch\Db\Sql\Sql class methods: use SphinxSearch\Db\Sql\Sql;  $sql = new Sql($adapter); $select = $sql->select();   // @return SphinxSearch\Db\Sql\Select $insert = $sql->insert();   // @return SphinxSearch\Db\Sql\Insert $insert = $sql->replace();  // @return SphinxSearch\Db\Sql\Replace $update = $sql->update();   // @return SphinxSearch\Db\Sql\Update $delete = $sql->delete();   // @return SphinxSearch\Db\Sql\Delete $show   = $sql->show();     // @return SphinxSearch\Db\Sql\Show Or can be instanziated directly like in the following example: use SphinxSearch\Db\Sql\Update; use SphinxSearch\Db\Sql\Predicate\Match;  $update = new Update; $update->from('myindex')        ->set(['bigattr' => 1000, 'fattr' => 3465.23])        ->where(new Match('?', 'hehe'))        ->where(['enabled' => 1])        ->option('strict', 1); Then you can perform your query by: $statement = $sql->prepareStatementForSqlObject($select); $results = $statement->execute(); Or using the Search or the Indexer components: $resultset = $indexer->updateWith($update); Thus, every object (that has where()) supports the Match expression, as explained in next paragrah. Query expression The SphinxSearch\Query\QueryExpression class provides a placeholder expression way and a string excape mechanism in order to use safely the Sphinx query syntax. Also, the component design permits to use it standalone, since it has no dependencies on other library's components. Some examples: use SphinxSearch\Query\QueryExpression;  $query = new QueryExpression('@title ? @body ?', ['hello', 'world']); echo $query->toString(); //outputs: @title hello @body world   echo $query->setExpression('""?""/3')            ->setParameters(['the world is a wonderful place, but sometimes people uses spe(ia| ch@rs'])            ->toString(); //outputs: ""the world is a wonderful place, but sometimes people uses spe\(ia\| ch\@rs""/3  echo $query->setExpression('? NEAR/? ? NEAR/? ""?""')            ->setParameters(['hello', 3, 'world', 4, '""my test""'])            ->toString(); //outputs: hello NEAR/3 world NEAR/4 ""my test"" The SphinxSearch\Db\Sql\Predicate\Match class uses internally the QueryExpression, so you can use it in your SQL queries directly: use SphinxSearch\Adapter\Platform\SphinxQL; use SphinxSearch\Db\Sql\Select; use SphinxSearch\Db\Sql\Predicate\Match;  $select = new Select; $select->from('myindex')        ->where(new Match('? NEAR/? ? NEAR/? ""?""', ['hello', 3, 'world', 4, '""my test""']))        ->where(['enabled' => 1]);  //outputs: SELECT * from `foo` WHERE MATCH('hello NEAR/3 world NEAR/4 ""my test""') AND `enabled` = 1 echo $select->getSqlString(new SphinxQL()); Testing The library source code (on master) is 100% covered by unit tests. Once installed development dependencies through composer you can run phpunit. ./vendor/bin/phpunit --exclude-group=integration  To run also our integration tests execute: ./vendor/bin/phpunit  Note To execute integration tests you need a running instance of SphinxSearch (e.g., using a correctly configured docker image). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ripaclub/sphinxsearch"	"Sphinx Search library provides SphinxQL indexing and searching features"	"true"
"Search"	"SphinxQL query builder"	"http://foolcode.github.io/SphinxQL-Query-Builder/"	"A query library for the search engine."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"SphinxQL Query Builder for PHP by FoolCode SphinxQL Query Builder for PHP A SphinxQL query builder for any PHP 5.3+ project, composer compatible. Download ZIP Download TAR View On GitHub This project is maintained by FoolCode Query Builder for SphinxQL About This is a SphinxQL Query Builder used to work with SphinxQL, a SQL dialect used with the Sphinx search engine. It maps most of the functions listed in the SphinxQL reference and is generally faster than the available Sphinx API. This Query Builder has no dependencies besides PHP 5.3, \MySQLi extension, and Sphinx. This package is BETA QUALITY. It is recommended that you do extensive testing in development before using it in a production environment. Missing methods? SphinxQL evolves very fast. Most of the new functions are static one liners like SHOW PLUGINS. We'll avoid trying to keep up with these methods, as they are easy to just call directly (SphinxQL::create($conn)->query($sql)->execute()). You're free to submit pull requests to support these methods. If any feature is unreachable through this library, open a new issue or send a pull request. Code Quality The majority of the methods in the package have been unit tested. The only methods that have not been tested are single queries such as flushRtIndex, but these are independent and should work fine. We have tested our package locally and remotely with Travis-CI: How to Contribute Pull Requests Fork the SphinxQL Query Builder repository Create a new branch for each feature or improvement Submit a pull request from each branch to the dev branch It is very important to separate new features or improvements into separate feature branches, and to send a pull request for each branch. This allows me to review and pull in new features or improvements individually. Style Guide All pull requests must adhere to the PSR-2 standard. Unit Testing All pull requests must be accompanied by passing unit tests and complete code coverage. The SphinxQL Query Builder uses phpunit for testing. Learn about PHPUnit Installation This is a Composer package. You can install this package with the following command: php composer.phar install Usage The following examples will omit the namespace. <?php use Foolz\SphinxQL\SphinxQL; use Foolz\SphinxQL\Connection;  // create a SphinxQL Connection object to use with SphinxQL $conn = new Connection(); $conn->setConnectionParams('domain.tld', 9306);  $query = SphinxQL::create($conn)->select('column_one', 'colume_two')     ->from('index_delta', 'index_main', 'index_ancient')     ->match('comment', 'my opinion is superior to yours')     ->where('banned', '=', 1);  $result = $query->execute();  Connection $conn = new Connection() Create a new Connection instance to be used with the following methods or SphinxQL class. $conn->silenceConnectionWarning($enable = true) Suppresses any warnings and errors displayed by the \MySQLi extension upon connection failure. This is disabled by default. $conn->setConnectionParams($host = '127.0.0.1', $port = 9306) Sets the connection parameters used to establish a connection to the server. $conn->query($query) Performs the query on the server. Returns an array of results for SELECT, or an int with the number of rows affected. More methods are available in the Connection class, but usually not necessary as these are handled automatically. SphinxQL SphinxQL::create($conn) Creates a SphinxQL instance used for generating queries. Bypass Query Escaping Often, you would need to call and run SQL functions that shouldn't be escaped in the query. You can bypass the query escape by wrapping the query in an \Expression. SphinxQL::expr($string) Returns the string without being escaped. Query Escaping There are cases when an input must be escaped in the SQL statement. The following functions are used to handle any escaping required for the query. $sq->escape($value) Returns the escaped value. This is processed with the \MySQLi::real_escape_string() function. $sq->quoteIdentifier($identifier) Adds backtick quotes to the identifier. For array elements, use $sq->quoteIdentifierArray($arr). $sq->quote($value) Adds quotes to the value and escapes it. For array elements, use $sq->quoteArr($arr). $sq->escapeMatch($value) Escapes the string to be used in MATCH. $sq->halfEscapeMatch($value) Escapes the string to be used in MATCH. The following characters are allowed: -, |, and "". Refer to $sq->match() for more information. SELECT $sq = SphinxQL::create($conn)->select($column1, $column2, ...)->from($index1, $index2, ...) Begins a SELECT query statement. If no column is specified, the statement defaults to using *. Both $column1 and $index1 can be arrays. INSERT, REPLACE This will return an INT with the number of rows affected. $sq = SphinxQL::create($conn)->insert()->into($index) Begins an INSERT. $sq = SphinxQL::create($conn)->replace()->into($index) Begins an REPLACE. $sq->set($associative_array) Inserts an associative array, with the keys as the columns and values as the value for the respective column. $sq->value($column1, $value1)->value($column2, $value2)->value($column3, $value3) Sets the value of each column individually. $sq->columns($column1, $column2, $column3)->values($value1, $value2, $value3)->values($value11, $value22, $value33) Allows the insertion of multiple arrays of values in the specified columns. Both $column1 and $index1 can be arrays. UPDATE This will return an INT with the number of rows affected. $sq = SphinxQL::create($conn)->update($index) Begins an UPDATE. $sq->value($column1, $value1)->value($column2, $value2) Updates the selected columns with the respective value. $sq->set($associative_array) Inserts the associative array, where the keys are the columns and the respective values are the column values. DELETE Will return an array with an INT as first member, the number of rows deleted. $sq = SphinxQL::create($conn)->delete()->from($column) Begins a DELETE. WHERE $sq->where($column, $operator, $value) Standard WHERE, extended to work with Sphinx filters and full-text. <?php // WHERE `column` = 'value' $sq->where('column', 'value');  // WHERE `column` = 'value' $sq->where('column', '=', 'value');  // WHERE `column` >= 'value' $sq->where('column', '>=', 'value')  // WHERE `column` IN ('value1', 'value2', 'value3') $sq->where('column', 'IN', array('value1', 'value2', 'value3'));  // WHERE `column` BETWEEN 'value1' AND 'value2' // WHERE `example` BETWEEN 10 AND 100 $sq->where('column', 'BETWEEN', array('value1', 'value2'))  It should be noted that OR and parenthesis are not supported and implemented in the SphinxQL dialect yet. MATCH $sq->match($column, $value, $half = false) Search in full-text fields. Can be used multiple times in the same query. Column can be an array. Value can be an Expression to bypass escaping (and use your own custom solution). <?php $sq->match('title', 'Otoshimono')     ->match('character', 'Nymph')     ->match(array('hates', 'despises'), 'Oregano');  By default, all inputs are fully escaped. The usage of SphinxQL::expr($value) is required to bypass the statement escapes. The $half argument, if set to true, will not escape and allow the usage of the following characters: -, |, "". If you plan to use this feature and expose it to public interfaces, it is recommended that you wrap the query in a try catch block as the character order may throw a query error. <?php try {     $result = SphinxQL::create($conn)->select()         ->from('rt')         ->match('title', 'Sora no || Otoshimono', true)         ->match('loves', SphinxQL:expr(custom_escaping_fn('(you | me)')));         ->execute(); } catch (\Foolz\SphinxQL\DatabaseException $e) {     // an error is thrown because two `|` one after the other aren't allowed }  GROUP, WITHIN GROUP, ORDER, OFFSET, LIMIT, OPTION $sq->groupBy($column) GROUP BY $column $sq->withinGroupOrderBy($column, $direction = null) WITHIN GROUP ORDER BY $column [$direction] Direction can be omitted with null, or be ASC or DESC case insensitive. $sq->orderBy($column, $direction = null) ORDER BY $column [$direction] Direction can be omitted with null, or be ASC or DESC case insensitive. $sq->offset($offset) LIMIT $offset, 9999999999999 Set the offset. Since SphinxQL doesn't support the OFFSET keyword, LIMIT has been set at an extremely high number. $sq->limit($limit) LIMIT $limit $sq->limit($offset, $limit) LIMIT $offset, $limit $sq->option($name, $value) OPTION $name = $value Set a SphinxQL option such as max_matches or reverse_scan for the query. TRANSACTION SphinxQL::create($conn)->transactionBegin() Begins a transaction. SphinxQL::create($conn)->transactionCommit() Commits a transaction. SphinxQL::create($conn)->transactionRollback() Rollbacks a transaction. Executing and Compiling $sq->execute() Compiles, executes, and returns an array of results of a query. $sq->executeBatch() Compiles, executes, and returns an array of results for a multi-query. $sq->compile() Compiles the query. $sq->getCompiled() Returns the last query compiled. $sq->getResult() Returns the last result. Multi-Query $sq->enqueue(SphinxQL $next = null) Queues the query. If a $next is provided, $next is appended and returned, otherwise a new SphinxQL object is returned. $sq->executeBatch() Returns an array of the results of all the queued queries. <?php $result = SphinxQL::create($this->conn)     ->select()     ->from('rt')     ->match('title', 'sora')     ->enqueue(SphinxQL::create($this->conn)->query('SHOW META')) // this returns the object with SHOW META query     ->enqueue() // this returns a new object     ->select()     ->from('rt')     ->match('content', 'nymph')     ->executeBatch();  $result[0] will contain the first select. result[1] will contain the META for the first query. result[2] will contain the second select. Helper The Helper class contains useful methods that don't need ""query building"". Remember to ->execute() to get a result. Helper::pairsToAssoc($result) Takes the pairs from a SHOW command and returns an associative array key=>value The following methods return a prepared SphinxQL object. You can also use ->enqueue($next_object): <?php $result = SphinxQL::create($this->conn)     ->select()     ->from('rt')     ->where('gid', 9003)     ->enqueue(Helper::create($this->conn)->showMeta()) // this returns the object with SHOW META query prepared     ->enqueue() // this returns a new object     ->select()     ->from('rt')     ->where('gid', 201)     ->executeBatch();  Helper::create($conn)->showMeta() => 'SHOW META' Helper::create($conn)->showWarnings() => 'SHOW WARNINGS' Helper::create($conn)->showStatus() => 'SHOW STATUS' Helper::create($conn)->shotTables() => 'SHOW TABLES' Helper::create($conn)->showVariables() => 'SHOW VARIABLES' Helper::create($conn)->showSessionVariables() => 'SHOW SESSION VARIABLES' Helper::create($conn)->showGlobalVariables() => 'SHOW GLOBAL VARIABLES' Helper::create($conn)->setVariable($name, $value, $global = false) Helper::create($conn)->callSnippets($data, $index, $extra = array()) Helper::create($conn)->callKeywords($text, $index, $hits = null) Helper::create($conn)->describe($index) Helper::create($conn)->createFunction($udf_name, $returns, $soname) Helper::create($conn)->dropFunction($udf_name) Helper::create($conn)->attachIndex($disk_index, $rt_index) Helper::create($conn)->flushRtIndex($index) Hosted on GitHub Pages using the Dinky theme"	"null"	"null"	"A query library for the search engine."	"true"
"Search"	"Sphinx"	"http://sphinxsearch.com/"	"A query library for the search engine."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"831"	"131"	"168"	"GitHub - sphinxsearch/sphinx: Sphinx search server Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 131 Star 831 Fork 168 sphinxsearch/sphinx Code Pull requests 12 Pulse Graphs Sphinx search server http://sphinxsearch.com 4,399 commits 3 branches 1 release 8 contributors C++ 68.8% C 13.5% Shell 4.4% PHP 4.1% Makefile 3.0% CMake 1.2% Other 5.0% C++ C Shell PHP Makefile CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master rel21 rel22 Nothing to show 2.2.10-release Nothing to show New pull request Latest commit a333a32 Jul 14, 2016 tomatolog added token_filter and string list filter to API (php, python); set c… … …lient ver to 32; fixed filter string list escape; updated token_filter plugin interface Permalink Failed to load latest commit information. api added token_filter and string list filter to API (php, python); set c… Jul 14, 2016 cmake Cmake changes: rename and linkage fix. Jul 13, 2016 config Merge branch 'rel22' Mar 25, 2016 contrib merged from rel099 branch upto r2080 Nov 18, 2009 doc Merge branch 'rel22' Jul 14, 2016 libexpat .sln files should be binary, and crlf Jun 19, 2012 libre2 Backported RE2 patch and solutions from master Jul 13, 2016 libstemmer_c Merge branch 'rel22' Mar 24, 2016 misc added a script to dump misc .ram info Jun 29, 2015 mysqlse Merge branch 'rel22' Jul 14, 2016 src added token_filter and string list filter to API (php, python); set c… Jul 14, 2016 test Merge branch 'rel22' Jun 28, 2016 win faster VS2013 windows builds (removed minimal rebuild, added multi pr… Sep 9, 2015 .gitignore Merge branch 'rel22' Jul 2, 2015 CMakeLists.txt Merge branch 'rel22' Jul 13, 2016 COPYING - copyrights, docs, etc Apr 17, 2005 INSTALL updated docs Jun 25, 2006 Makefile.am Merged --with-re2 configure changes from rel21 Nov 12, 2013 Makefile.in enable silent make builds by default Mar 6, 2015 acinclude.m4 Merged --with-re2 configure changes from rel21 Nov 12, 2013 buildconf.sh all the properties (executable, native, keyword expansion) Nov 5, 2008 configure Switched to c++11. Warnings fixed. Jul 8, 2016 configure.ac Switched to c++11. Warnings fixed. Jul 8, 2016 coverage.sh 1-click test coverage report Jul 4, 2012 example.sql test hg-local change Mar 26, 2010 smoke.sh added rt mode to smoke test May 26, 2015 sphinx-min.conf.in removed deprecated max_matches from sample configs Sep 26, 2014 sphinx.conf.in fixed mantis-2265 (plugin_dir in the wrong config section) Jun 17, 2015 sphinx.spec remove references of man file for deprecated search cli tool Jul 12, 2016 sphinx.workspace Fixed codeblocks solution (removed project search, removed dead files… Nov 27, 2013 sphinx12.sln added Visual Studio 2013 project, added wordbreaker to VS2012 solution Nov 22, 2014 sphinx13.sln added Visual Studio 2013 project, added wordbreaker to VS2012 solution Nov 22, 2014 sphinxrev.cmake CMAKE: Fixed hot lex/grammar compiling Mar 25, 2016 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sphinxsearch/sphinx"	"A query library for the search engine."	"true"
"Command Line"	"Boris"	"https://github.com/borisrepl/boris"	"A tiny PHP REPL."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2112"	"73"	"114"	"GitHub - borisrepl/boris: A tiny REPL for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 73 Star 2,112 Fork 114 borisrepl/boris Code Issues 18 Pull requests 0 Wiki Pulse Graphs A tiny REPL for PHP 252 commits 1 branch 10 releases 29 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.10 v1.0.9 v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 Nothing to show New pull request Latest commit 793a5f1 Oct 23, 2015 tejasmanohar Merge pull request #114 from sserbin/revertExposingBorisVar … Restore exposing $boris for user configuration files Permalink Failed to load latest commit information. bin keep codebase agnostic, remove vim comments Feb 28, 2015 lib restore exposing $boris for user configuration files by reverting com… Oct 22, 2015 tests test_loadedFiles Jul 1, 2015 .gitignore Travis cannot use file it does not have... Jun 18, 2015 .travis.yml let's not do nightly build tests, too unreliable Jun 19, 2015 CONTRIBUTING.md contributor guidelines Feb 28, 2015 LICENSE Rename to boris and add some documentation Nov 12, 2011 README.md wogsland -> borisrepl Jun 18, 2015 box.json json format Feb 28, 2015 composer.json added PHPUnit to composer.json May 29, 2015 release.php clean release.php Feb 28, 2015 tests.xml basic testing setup May 29, 2015 README.md Boris A tiny, but robust REPL for PHP. Announcement: I'm looking to add one or two additional collaborators with commit access. If you are actively involved in open source and have a GitHub profile for review, ping me on Twitter (@d11wtq) to express your interest. Experienced developers with active GitHub projects only. Python has one. Ruby has one. Clojure has one. Now PHP has one, too. Boris is PHP's missing REPL (read-eval-print loop), allowing developers to experiment with PHP code in the terminal in an interactive manner. If you make a mistake, it doesn't matter, Boris will report the error and stand to attention for further input. Everything you enter into Boris is evaluated and the result inspected so you can understand what is happening. State is maintained between inputs, allowing you to gradually build up a solution to a problem. Note: The PCNTL function which is required to run Boris is not available on Windows platforms. Why? I'm in the process of transitioning away from PHP to Ruby. I have come to find PHP's lack of a real REPL to be frustrating and was not able to find an existing implementation that was complete. Boris weighs in at a few hundred lines of fairly straightforward code. Usage Check out our wonderful wiki for usage instructions. Contributing We're committed to a loosely-coupled architecture for Boris and would love to get your contributions. Before jumping in, check out our Contributing page on the wiki! Contributing We're using PHPUnit for testing. To run all the tests, phpunit --bootstrap tests/autoload.php -c tests.xml  Core Team This module was originally developed by Chris Corbyn, and is now maintained by Tejas Manohar, Dennis Hotson, and other wonderful contributors. Copyright & Licensing See the LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/borisrepl/boris"	"A tiny PHP REPL."	"true"
"Command Line"	"Cilex"	"https://github.com/Cilex/Cilex"	"A micro framework for building command line tools."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"500"	"30"	"69"	"GitHub - Cilex/Cilex: Cilex a lightweight framework for creating PHP CLI scripts inspired by Silex Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 30 Star 500 Fork 69 Cilex/Cilex Code Issues 5 Pull requests 2 Pulse Graphs Cilex a lightweight framework for creating PHP CLI scripts inspired by Silex http://cilex.github.io 108 commits 3 branches 4 releases Fetching contributors PHP 93.5% Puppet 6.5% PHP Puppet Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop feature/upgrade-to-pimple3 master Nothing to show 1.1.0 1.0.1 1.0.0 0.1 Nothing to show New pull request Latest commit 66e7534 Jun 2, 2016 Seldaek Merge pull request #75 from Seldaek/patch-1 … Bump to allow sf3 and silex 2.0 stable Permalink Failed to load latest commit information. .puppet/manifests Remove $interactive from run method and allow $input and $output Oct 9, 2014 docs Remove unwritten chapter Jul 4, 2013 src/Cilex Avoid booting providers because they require a Silex\Application inst… Sep 2, 2015 tests/Cilex/Tests Remove $interactive from run method and allow $input and $output Oct 9, 2014 .gitignore Remove $interactive from run method and allow $input and $output Oct 9, 2014 .travis.yml Update dependencies, bump to 5.5.9 to follow Silex and remove 5.3/5.4… Sep 2, 2015 LICENSE Initial commit Mar 23, 2012 README.md Update README.md Oct 19, 2014 Vagrantfile Remove $interactive from run method and allow $input and $output Oct 9, 2014 composer.json Allow silex 2.0 stable Jun 1, 2016 phpunit.xml.dist Use pimple3 and be more like silex wiht the new providers Oct 9, 2014 README.md Cilex, a simple Command Line Interface framework Cilex is a simple command line application framework to develop simple tools based on Symfony2 components: <?php if (!$loader = include __DIR__.'/vendor/autoload.php') {     die('You must set up the project dependencies.'); }  $app = new \Cilex\Application('Cilex'); $app->command(new \Cilex\Command\GreetCommand()); $app->run(); Cilex works with PHP 5.3.3 or later and is heavily inspired on the Silex web micro-framework by Fabien Potencier. Installation git clone this repository. Download composer: curl -s https://getcomposer.org/installer | php Install Cilex' dependencies: php composer.phar install Usage Download composer: curl -s https://getcomposer.org/installer | php Add to your dependencies: php composer.phar require cilex/cilex dev-master Update the dependencies Create a run.php file <?php if (!$loader = include __DIR__.'/vendor/autoload.php') {     die('You must set up the project dependencies.'); } $app = new \Cilex\Application('Cilex'); $app->command(new \Cilex\Command\GreetCommand()); $app->run(); php run.php enjoy a lot. License Cilex is licensed under the MIT license. FAQ Q: How do I pass configuration into the application? A: You can do this by adding the following line, where $configPath is the path to the configuration file you want to use: $app->register(new \Cilex\Provider\ConfigServiceProvider(), array('config.path' => $configPath)); The formats currently supported are: YAML, XML and JSON Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Cilex/Cilex"	"A micro framework for building command line tools."	"true"
"Command Line"	"CLI Menu"	"https://github.com/php-school/cli-menu"	"A library for building CLI menus."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"531"	"24"	"23"	"GitHub - php-school/cli-menu: Build beautiful PHP CLI menus. Simple yet Powerful. Expressive DSL. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 531 Fork 23 php-school/cli-menu Code Issues 6 Pull requests 0 Pulse Graphs Build beautiful PHP CLI menus. Simple yet Powerful. Expressive DSL. http://www.phpschool.io 86 commits 2 branches 4 releases 5 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/no-clear-option master Nothing to show 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit 038ef2d Mar 23, 2016 AydinHassan Merge pull request #37 from JodiWarren/patch-2 … Typo fix Permalink Failed to load latest commit information. examples Fix weird open/close bug Oct 20, 2015 src Make addMenuItem public - Fixes #34 Mar 17, 2016 test CLI Builder tests Nov 28, 2015 .gitattributes Add gitattributes Dec 13, 2015 .gitignore Add composer.lock to .gitignore Jan 3, 2016 .travis.yml Update .travis.yml Dec 7, 2015 LICENSE Add license Dec 13, 2015 README.md Typo fix Mar 23, 2016 appveyor.yml Add CI and badges, fixes #2 Oct 20, 2015 composer.json Add some keywords for better availability on Packagist Mar 22, 2016 phpunit.xml Add CI and badges, fixes #2 Oct 20, 2015 README.md Installation composer require php-school/cli-menu Usage Quick Setup Here is a super basic example menu which will echo out the text of the selected item to get you started. <?php  use PhpSchool\CliMenu\CliMenu; use PhpSchool\CliMenu\CliMenuBuilder;  require_once(__DIR__ . '/../vendor/autoload.php');  $itemCallable = function (CliMenu $menu) {     echo $menu->getSelectedItem()->getText(); };  $menu = (new CliMenuBuilder)     ->setTitle('Basic CLI Menu')     ->addItem('First Item', $itemCallable)     ->addItem('Second Item', $itemCallable)     ->addItem('Third Item', $itemCallable)     ->addLineBreak('-')     ->build();  $menu->open(); Examples Check out the examples directory and run them to check out what is possible! Basic Menu Basic Menu with separation Menu with crazy separation Custom Styles Useful Separation Item Extra Remove Defaults Submenu API The CliMenu object is constructed via the Builder class $menu = (new CliMenuBuilder)     /**  * Customise  **/     ->build(); Once you have a menu object, you can open and close it like so: $menu->open(); $menu->close(); Appearance You can change the foreground and background colour of the menu to any of the following colours: black red green yellow blue magenta cyan white $menu = (new CliMenuBuilder)     ->setForegroundColour('green')     ->setBackgroundColour('black')     ->build(); The width, padding and margin can also be customised: $menu = (new CliMenuBuilder)     ->setWidth(200)     ->setPadding(10)     ->setMargin(5)     ->build(); Modify the exit button text: $menu = (new CliMenuBuilder)     ->setExitButtonText(""Don't you want me baby?"")     ->build(); You can remove the exit button altogether: $menu = (new CliMenuBuilder)     ->disableDefaultItems()     ->build(); Note: This will also disable the Go Back button for sub menus. The marker displayed by the side of the currently active item can be modified, UTF-8 characters are supported. The marker for un-selected items can also be modified. If you want to disable it, just set it to a space character. $menu = (new CliMenuBuilder)     ->setUnselectedMarker('❅')     ->setSelectedMarker('✏')      //disable unselected marker     ->setUnselectedMarker(' ')     ->build(); You can give your menu a title and you can customise the separator, a line which displays under the title. Whatever string you pass to setTitleSeparator will be repeated for the width of the Menu. $menu = (new CliMenuBuilder)     ->setTitle('One Menu to rule them all!')     ->setTitleSeparator('*-')     ->build(); Item Extra You can optionally display some arbitrary text on the right hand side of an item. You can customise this text and you indicate which items to display it on. We use it to display [COMPLETED] on completed exercises, where the menu lists exercises for a workshop application. The third parameter to addItem is a boolean whether to show the item extra or not. It defaults to false. $menu = (new CliMenuBuilder)     ->setItemExtra('✔')     ->addItem('Exercise 1', function (CliMenu $menu) { echo 'I am complete!'; }, true)     ->build(); Items There a few different types of items you can add to your menu Selectable Item - This is the type of item you need for something to be selectable (you can hit enter and it will call your invokable) Line Break Item - This is used to break up areas, it can span multiple lines and will be the width of Menu. Whatever string is passed will be repeated. Static Item - This will print whatever text is passed, useful for headings. Ascii Art Item - Special item which allows usage of Ascii art. It takes care of padding and alignment. Sub Menu Item - Special item to allow an item to open another menu. Useful for an options menu. Selectable Item $menu = (new CliMenuBuilder)     ->addItem('The Item Text', function (CliMenu $menu) {          echo 'I am alive!';      })     ->build(); You can add multiple items at once like so: $callable = function (CliMenu $menu) {     echo 'I am alive!'; };  $menu = (new CliMenuBuilder)     ->addItems([         ['Item 1', $callable],         ['Item 2', $callable],         ['Item 3', $callable],     ])     ->build(); Note: You can add as many items as you want and they can all have a different action. The action is the separate parameter and must be a valid PHP callable. Try using an Invokable class to keep your actions easily testable. Line Break Item $menu = (new CliMenuBuilder)     ->addLineBreak('<3', 2)     ->build(); The above would repeat the character sequence <3 across the Menu for 2 lines Static Item Static items are similar to Line Breaks, however, they don't repeat and fill. It is output as is. If the text is longer than the width of the Menu, it will be continued on the next line. $menu = (new CliMenuBuilder)     ->addStaticItem('AREA 1')     //add some items here     ->addStaticItem('AREA 2')     //add some boring items here     ->addStaticItem('AREA 51')     //add some top secret items here      ->build(); Ascii Art Item The following will place the Ascii art in the centre of your menu. Use these constants to alter the alignment: AsciiArtItem::POSITION_CENTER AsciiArtItem::POSITION_LEFT AsciiArtItem::POSITION_RIGHT  $art = <<<ART  _ __ _  / |..| \  \/ || \/  |_''_|  PHP SCHOOL LEARNING FOR ELEPHANTS ART;  $menu = (new CliMenuBuilder)     ->addAsciiArt($art, AsciiArtItem::POSITION_CENTER)     ->build(); Sub Menu Item Sub Menus are really powerful! You can add Menus to Menus, whattttt?? You can have your main menu and then an options menu. The options item will look like a normal item except when you hit it, you will enter to another menu, which can have different styles and colours!  $callable = function (CliMenu $menu) {     echo ""I'm just a boring selectable item""; };  $menu = (new CliMenuBuilder)     ->addItem('Normal Item', $callable)     ->addSubMenu('Super Sub Menu')         ->setTitle('Behold the awesomeness')         ->addItem(/** **/)         ->end()     ->build(); In this example a single sub menu will be created. Upon entering the sub menu, you will be able to return to the main menu or exit completely. A Go Back button will be automatically added, you can customise this text like so: ->addSubMenu('Super Sub Menu')     ->setTitle('Behold the awesomeness')     ->setGoBackButtonText('Descend to chaos') There are a few things to note about the syntax and builder process here addSubMenu returns an instance of CliMenuBuilder so you can can customise exactly the same way you would the parent. If you do not modify the styles of the sub menu (eg, colours) it will inherit styles from the parent! You can call end() on the sub menu CliMenuBuilder instance to get the parent CliMenuBuilder back again. This is useful for chaining. If you need the CliMenu instance of the Sub Menu you can grab it after the main menu has been built. $mainMenuBuilder = new CliMenuBuilder; $subMenuBuilder = $mainMenuBuilder->addSubMenu('Super Sub Menu');  $menu = $mainMenuBuilder->build(); $subMenu = $mainMenuBuilder->getSubMenu('Super Sub Menu'); You can only do this after the main menu has been built, this is because the main menu builder takes care of building all sub menus. Once you get going you might just end up with something that looks a little like this... You can see the construction code here for more clarity on how to perform advanced configuration: PHP School Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/php-school/cli-menu"	"A library for building CLI menus."	"true"
"Command Line"	"CLIFramework"	"https://github.com/c9s/CLIFramework"	"A command-line framework supports zsh/bash completion generation, subcommands and option constraints. It also powers phpbrew."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"248"	"23"	"28"	"GitHub - c9s/CLIFramework: A powerful command line application framework for PHP. It's an extensible, flexible component, You can build your command-based application in seconds! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 248 Fork 28 c9s/CLIFramework Code Issues 34 Pull requests 0 Wiki Pulse Graphs A powerful command line application framework for PHP. It's an extensible, flexible component, You can build your command-based application in seconds! 957 commits 13 branches 52 releases Fetching contributors PHP 99.9% Shell 0.1% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.10 2.0 2.6 action-logger bash-completion build-command daemon develop feature/console-info master readline table web Nothing to show 3.0.3 3.0.2 3.0.0 2.8.1 2.8.0 2.7.2 2.7.1 2.7.0 2.6.3 2.6.2 2.6.1 2.6.0 2.5.5 2.5.4 2.5.3 2.5.2 2.5.1 2.5.0 2.4.1 2.4.0 2.3.0 2.2.0 2.1.0 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 1.10.2 1.10.1 1.10.0 1.9.0 1.8.1 1.8.0 1.7.8 1.7.7 1.7.6 1.7.5 1.7.4 1.7.3 1.7.2 1.7.1 1.7.0 1.6.6 1.6.5 1.6.4 1.6.3 1.6.2 1.6.1 1.6.0 1.5.13 1.4.0 Nothing to show New pull request Latest commit f87271c Jun 17, 2016 c9s Update version name Permalink Failed to load latest commit information. example Support eta time and eta period Jan 21, 2016 scripts Show file flags Nov 7, 2015 snippets/zsh Rename hidden commands since we have development command group Oct 5, 2014 src Update version name Jun 17, 2016 tests Added a new command line parser Mar 18, 2016 .coveralls.yml Add coverage status Oct 4, 2014 .gitignore Ignore .hhconfig Jul 13, 2015 .travis.yml Changed git's depth in Travis Jun 10, 2016 CHANGELOG.md Update changelog Jan 20, 2016 LICENSE use BSD License Mar 16, 2012 README.md Update README URLs based on HTTP redirects Nov 19, 2015 build.xml update Nov 19, 2013 cliframework.ini Disable debug in default config file Aug 23, 2015 composer.json upgrade symfony/finder, symfony/class-loader Jun 11, 2016 package.ini Bump version to 1.5.10 Mar 22, 2013 phpdox.xml Import apache-ant build file May 22, 2012 phprelease.ini Fix version from Oct 2, 2014 phpunit-ci.xml update phpunit config Dec 31, 2014 phpunit-cov.xml Add ignore directory for coverage Oct 4, 2014 phpunit.xml Add Components testsuite Jan 20, 2016 phpunit.xml.dist Add phpunit.xml and phpunit.xml.dist for coverage Jul 13, 2015 todo.md add todo.md May 11, 2012 README.md CLIFramework CLIFramework is a command-line application framework, for building flexiable, simple command-line applications. Commands and Subcommands can be registered from outside of an application or your plugins. Defining a new command is pretty simple, all you need to is declare a class which is inherited from CLIFramework\Command class. Features Intuitive command class and option spec command options are supported, powered by GetOptionKit. including long option, short option, required|optional|default value. Hierarchical commands. Automatic help page generation. Automatic zsh completion generator. Automatic bash completion generator. Friendly message when command arguments are not enough. Testable, CLIFramework provides PHPUnit test case for testing the commands in PHP. Argument validation, suggestion, Command Groups HHVM compatible Synopsis class CommitCommand extends CLIFramework\Command {      public function brief() { return 'brief of bar'; }      public function options($opts) {         $opts->add('C|reuse-message:','Take an existing commit object, and reuse the log message and the authorship information (including the timestamp) when creating the commit.')             ->isa('string')             ->valueName('commit hash')             // ->validValues([ 'static-50768ab', 'static-c2efdc2', 'static-ed5ba6a', 'static-cf0b1eb'])             ->validValues(function() {                 $output = array();                 exec(""git rev-list --abbrev-commit HEAD -n 20"", $output);                 return $output;             })             ;          // Runtime completion by setting up a closure for completion         $opts->add('c|reedit-message:','like -C, but with -c the editor is invoked, so that the user can further edit the commit message.')             ->isa('string')             ->valueName('commit hash')             ->validValues(function() {                 // exec(""git log -n 10 --pretty=format:%H:%s"", $output);                 exec(""git log -n 10 --pretty=format:%H:%s"", $output);                 return array_map(function($line) {                     list($key,$val) = explode(':',$line);                     $val = preg_replace('/\W/',' ', $val);                     return array($key, $val);                 }, $output);             })             ;          $opts->add('author:', 'Override the commit author. Specify an explicit author using the standard A U Thor <author@example.com> format.')             ->suggestions(array( 'c9s', 'foo' , 'bar' ))             ->valueName('author name')             ;          $opts->add('output:', 'Output file')             ->isa('file')             ;     }      public function arguments($args) {         $args->add('user')             ->validValues(['c9s','bar','foo']);          // Static completion result         $args->add('repo')             ->validValues(['CLIFramework','GetOptionKit']);          // Add an argument info expecting multiple *.php files         $args->add('file')             ->isa('file')             ->glob('*.php')             ->multiple()             ;     }      public function init() {          $this->command('foo'); // register App\Command\FooCommand automatically          $this->command('bar', 'WhatEver\MyCommand\BarCommand');          $this->commandGroup('General Commands', ['foo', 'bar']);          $this->commandGroup('Database Commands', ['create-db', 'drop-db']);          $this->commandGroup('More Commands', [             'foo' => 'WhatEver\MyCommand\FooCommand',             'bar' => 'WhatEver\MyCommand\BarCommand'         ]);     }      public function execute($user,$repo) {         $this->logger->notice('executing bar command.');         $this->logger->info('info message');         $this->logger->debug('info message');         $this->logger->write('just write');         $this->logger->writeln('just drop a line');         $this->logger->newline();          return ""Return result as an API""; // This can be integrated in your web application     } } Automatic Zsh Completion Generator Zsh Completion With Lazy Completion Values: Bash Completion Documentation See documentation on our wiki https://github.com/c9s/CLIFramework/wiki Command Forms CLIFramework supports many command-line forms, for example: $ app [app-opts] [subcommand1] [subcommand1-opts] [subcommand2] [subcommand2-opts] .... [arguments]   If the subcommand is not defined, you can still use the simple form: $ app [app-opts] [arguments]  For example, $ app db schema --clean dbname $ app gen controller --opt1 --opt2 ControllerName   Subcommand Hierarchy Commands have methods for stages, like prepare, execute, finish, for a command like below: $ app foo_cmd bar_cmd arg1 arg2 arg3  The call graph is like: app->run - app->prepare   - foo_cmd->prepare     - bar_cmd->prepare     - bar_cmd->execute     - bar_cmd->finish   - foo_cmd->finish - app->finish  Basic Requirement PHP 5.3 Installation From composer {     ""require"": {         ""corneltek/cliframework"": ""*""     } } Zsh Completion Generator example/demo zsh demo > _demo source _demo demo <TAB> Console Prompt (Readline) simple prompt: $input = $this->ask(""Your name please""); $ php demo.php Your name please:   prompt and except valid values: $input = $this->ask(""Your name please"", array('John', 'Pedro')); Version Info CLIFrameword has a built-in --version option, to setup the version info, you can simply override a const in your application class to setup version string: class ConsoleApp extends CLIFramework\Application {     const NAME = 'YourApp';     const VERSION = '1.2.1'; } This shows: $ yourapp.php --version YourApp - version 1.2.1  Example Please check example/demo.php $ php example/demo.php  ArgumentEditor use CLIFramework\ArgumentEditor\ArgumentEditor;  $editor = new ArgumentEditor(array('./configure','--enable-debug')); $editor->append('--enable-zip'); $editor->append('--with-sqlite','--with-postgres');  echo $editor; # ./configure --enable-debug --enable-zip --with-sqlite --with-postgres Message style formatter $formatter = new CLIFramework\Formatter; $formatter->format( 'message' , 'green' ); Built-in styles: 'red'          => array('fg' => 'red'), 'green'        => array('fg' => 'green'), 'white'        => array('fg' => 'white'), 'yellow'       => array('fg' => 'yellow'), 'strong_red'   => array('fg' => 'red', 'bold'  => 1), 'strong_green' => array('fg' => 'green','bold' => 1), 'strong_white' => array('fg' => 'white','bold' => 1),  Building Phar Archive file COMPOSER=tests/fixture/composer.json.phar-test composer install php example/demo archive --working-dir /Users/c9s/work/php/CLIFramework \         --composer tests/fixture/composer.json.phar-test \         app.phar  Chooser Component $chooser = new CLIFramework\Chooser; $value = $chooser->choose( ""System Options"" , array(      'use php-5.4.0' => '5.4.0',     'use php-5.4.1' => '5.4.1',     'use system' => '5.3.0', )); Debug Utilities LineIndicator use CLIFramework\Debug\LineIndicator; $indicator = new LineIndicator; echo PHP_EOL, $indicator->indicateFile(__FILE__, __LINE__); ConsoleDebug class use CLIFramework\Debug\ConsoleDebug;  ConsoleDebug::dumpRows($pdo->fetchAll());  ConsoleDebug::dumpException($e); Todos in the next release [ ] provide a easy way to define chained commands [ ] inheritable options for subcommands. [ ] human readable exception renderer. [ ] interact utilities Hacking Setup Download & install Onion from https://github.com/phpbrew/Onion Use Onion to bundle the dependencies: $ onion bundle Run tests, it should pass. Hack hack hack. Run tests. Send a pull request. How command class register works CLIApplication is inherited from CommandBase. Command is also inherited from CommandBase. To register a subcommand, we use the addCommand method to register commands or subcommands. The command class is optional, if command class name is omitted, then the addCommand method will try to guess the real command class, and try to load the command class. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/c9s/CLIFramework"	"A command-line framework supports zsh/bash completion generation, subcommands and option constraints. It also powers phpbrew."	"true"
"Command Line"	"CLImate"	"https://github.com/thephpleague/climate"	"A library for outputting colours and special formatting."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1029"	"51"	"57"	"GitHub - thephpleague/climate: PHP's best friend for the terminal. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 51 Star 1,029 Fork 57 thephpleague/climate Code Issues 9 Pull requests 5 Pulse Graphs PHP's best friend for the terminal. http://climate.thephpleague.com 490 commits 6 branches 26 releases 13 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags extending-docs extending gh-pages-sculpin gh-pages master trailing-args Nothing to show 3.2.1 3.2.0 3.1.1 3.1.0 3.0.0 2.6.1 2.6.0 2.5.0 2.4.1 2.4.0 2.3.1 2.3.0 2.2.0 2.1.1 2.1.0 2.0.0 1.0.2 1.0.1 1.0.0 0.2.0 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit b103fc8 Apr 4, 2016 joetannenbaum if there are no more arguments available, don't try and access anothe… … …r value Permalink Failed to load latest commit information. src if there are no more arguments available, don't try and access anothe… Apr 4, 2016 tests if there are no more arguments available, don't try and access anothe… Apr 4, 2016 .gitattributes added additional items to git attributes Jul 29, 2015 .gitignore fixed up animation tests Apr 26, 2015 .scrutinizer.yml exclude tests directory from code analysis Aug 6, 2015 .styleci.yml styleci config file Jul 29, 2015 .travis.yml undo php 7 disclaimer for travis, should be good now Jan 9, 2016 CHANGELOG.md updated changelog for 3.2.0 release Aug 13, 2015 CONDUCT.md composer test, added conduct and contributing docs Oct 2, 2015 CONTRIBUTING.md composer test, added conduct and contributing docs Oct 2, 2015 Gulpfile.js simplified gulpfile by using laravel elixir for tdd watching. Jul 27, 2015 LICENSE.md updated license filename Apr 30, 2015 README.md changed to 100k climate image Oct 16, 2015 composer.json no more dev-master for mockery Jan 31, 2016 package.json simplified gulpfile by using laravel elixir for tdd watching. Jul 28, 2015 phpunit.xml new configs, lets do it Sep 8, 2014 README.md Running PHP from the command line? CLImate is your new best bud. CLImate allows you to easily output colored text, special formats, and more. Table of Contents Installation Requirements Documentation Credits Installation Using composer: $ composer require league/climate Requirements The following versions of PHP are supported by this version. PHP 5.4 PHP 5.5 PHP 5.6 HHVM Documentation CLImate has full documentation, powered by Jekyll. Contribute to this documentation in the gh-pages branch. Credits Much love to Damian Makki for the logo. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/climate"	"A library for outputting colours and special formatting."	"true"
"Command Line"	"Commando"	"https://github.com/nategood/commando"	"Another simple command line opt parser."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"395"	"20"	"43"	"GitHub - nategood/commando: An Elegant CLI Library for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 395 Fork 43 nategood/commando Code Issues 13 Pull requests 8 Pulse Graphs An Elegant CLI Library for PHP 98 commits 2 branches 12 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master Nothing to show v0.2.8 v0.2.7 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.7 v0.1.4 v0.1.3 Nothing to show New pull request Latest commit f5833ee Jan 7, 2016 nategood version bump 0.2.8 Permalink Failed to load latest commit information. examples Update errors.php Apr 14, 2015 src/Commando Merge pull request #52 from 13leaf/patch-1 Jan 7, 2016 tests Moving from ""dependsOn"" to ""needs"" on Option (Issue #31) May 6, 2014 .gitignore restructuring a bit and starting to add test coverage Aug 17, 2012 .travis.yml travis ci Aug 19, 2012 LICENSE.txt added more test coverage, bug fixes, examples and docs Aug 19, 2012 README.md version bump 0.2.8 Jan 7, 2016 composer.json version bump 0.2.8 Jan 7, 2016 README.md Commando An Elegant PHP CLI Library Commando is a PHP command line interface library that beautifies and simplifies writing PHP scripts intended for command line use. Why? PHP's $argv magic variable and global $_SERVER['argv'] make me cringe, getopt isn't all that much better, and most other PHP CLI libraries are far too OOP bloated. Commando gets down to business without a ton of overhead, removes the common boilerplate stuff when it comes to handling cli input, all while providing a clean and readable interface. Installation Commando requires that you are running PHP 5.3 or higher. Commando is PSR-0 compliant and can be installed using Composer. Add nategood/commando to your composer.json ""require"": {     ""nategood/commando"": ""*"" }  If you're new to Composer... Download and build Composer Make it globally accessible cd to your the directory where you'll be writing your Commando script and run composer install Currently installing via Composer is the only supported option. Example Here is an example of a PHP Commando script that gives a decent tour of Commando's features. Let's say it is in a file called hello.php. <?php  require_once 'vendor/autoload.php';  $hello_cmd = new Commando\Command();  // Define first option $hello_cmd->option()     ->require()     ->describedAs('A person\'s name');  // Define a flag ""-t"" a.k.a. ""--title"" $hello_cmd->option('t')     ->aka('title')     ->describedAs('When set, use this title to address the person')     ->must(function($title) {         $titles = array('Mister', 'Mr', 'Misses', 'Mrs', 'Miss', 'Ms');         return in_array($title, $titles);     })     ->map(function($title) {         $titles = array('Mister' => 'Mr', 'Misses' => 'Mrs', 'Miss' => 'Ms');         if (array_key_exists($title, $titles))             $title = $titles[$title];         return ""$title. "";     });  // Define a boolean flag ""-c"" aka ""--capitalize"" $hello_cmd->option('c')     ->aka('capitalize')     ->aka('cap')     ->describedAs('Always capitalize the words in a name')     ->boolean();  $name = $hello_cmd['capitalize'] ? ucwords($hello_cmd[0]) : $hello_cmd[0];  echo ""Hello {$hello_cmd['title']}$name!"", PHP_EOL; Running it: > php hello.php Nate Hello, Nate!  > php hello.php --capitalize nate Hello, Nate!  > php hello.php -c -t Mr 'nate good' Hello, Mr. Nate Good!  Things to note: Commando implements ArrayAccess so it acts much like an array when you want to retrieve values for it For ""anonymous"" (i.e. not a named flag) arguments, we access them based on their numeric index We can access option values in an array via a flags name OR its alias We can use closures to perform validation and map operations right as part of our option definition Baked in Help Commando has automatic --help support built in. Calling your script with this flag will print out a pretty help page based on your option definitions and Commando settings. If you define an option with the alias of 'help', it will override this built in support. Error Messaging By default, Commando will catch Exceptions that occur during the parsing process. Instead, Commando prints a formatted, user-friendly error message to standard error and exits with a code of 1. If you wish to have Commando throw Exceptions in these cases, call the doNotTrapErrors method on your Command instance. Command Methods These options work on the ""command"" level. useDefaultHelp (bool help) The default behavior of Commando is to provide a --help option that spits out a useful help page generated off of your option definitions. Disable this feature by calling useDefaultHelp(false) setHelp (string help) Text to prepend to the help page. Use this to describe the command at a high level and maybe some examples usages of the command. beepOnError (bool beep=true) When an error occurs, print character to make the terminal ""beep"". getOptions Return an array of Options for each options provided to the command. getFlags Return an array of Options for only the flags provided to the command. getArguments Return an array of Options for only the arguments provided to the command. The order of the array is the same as the order of the arguments. getFlagValues Return associative array of values for arguments provided to the command. E.g. array('f' => 'value1'). getArgumentValues Return array of values for arguments provided to the command. E.g. array('value1', 'value2'). Command Option Definition Methods These options work on the ""option"" level, even though they are chained to a Command instance option (mixed $name = null) Aliases: o Define a new option. When name is set, the option will be a named ""flag"" option. Can be a short form option (e.g. f for option -f) or long form (e.g. foo for option --foo). When no name is defined, the option is an annonymous argument and is referenced in the future by it's position. flag (string $name) Same as option except that it can only be used to define ""flag"" type options (a.k.a. those options that must be specified with a -flag on the command line). argument () Same as option except that it can only be used to define ""argument"" type options (a.k.a those options that are specified WITHOUT a -flag on the command line). alias (string $alias) Aliases: a, aka Add an alias for a named option. This method can be called multiple times to add multiple aliases. description (string $description) Aliases: d, describe, describedAs Text to describe this option. This text will be used to build the ""help"" page and as such, it is end user facing. require (bool $require) Aliases: r, required Require that this flag is specified needs (string|array $options) Aliases: none Require that other $options be set for this option to be used. must (Closure $rule) Aliases: N/A Define a rule to validate input against. Takes function that accepts a string $value and returns a boolean as to whether or not $value is valid. map (Closure $map) Aliases: cast, castTo Perform a map operation on the value for this option. Takes function that accepts a string $value and return mixed (you can map to whatever you wish). referToAs (string $name) Aliases: title, referredToAs Add a name to refer to an argument option by. Makes the help docs a little cleaner for annonymous ""argument"" options. boolean () Aliases: N/A Specifices that the flag is a boolean type flag. default (mixed $defaultValue) Aliases: defaultsTo If the value is not specified, default to $defaultValue. In the case of boolean() type flags, when the flag is present, the value of this option the negation of $defaultValue. That is to say, if you have a flag -b with a default of true, when -b is present as a command line flag, the value of the option will be false. file () Aliases: expectsFile The value specified for this option must be a valid file path. When used relative paths will be converted into fully quatified file paths and globbing is also optionally supported. See the file.php example. Contributing Commando highly encourages sending in pull requests. When submitting a pull request please: All pull requests should target the dev branch (not master) Make sure your code follows the coding standards laid out in PSR-1 and PSR-2 Make sure you add appropriate test coverage for your changes Run all unit tests in the test directory via phpunit ./tests Include commenting where appropriate and add a descriptive pull request message Inspiration Commander Optimist Released under MIT license. Change Log v0.2.8 Bug fix for #34 v0.2.7 getOptions added (along with some better documentation) v0.2.6 Adds support for ""needs"" to define dependencies between options (thanks @enygma) PR #31 Fixes issue with long-argument-names Issue #30 v0.2.5 Fixed up default values for boolean options, automatically default boolean options to false (unlikely, but potentially breaking change) PR #19 v0.2.4 Added ability to define default values for options v0.2.3 Improved Help Formatting PR #12 v0.2.2 Bug fix for printing double help PR #10 v0.2.1 Adds support for requiring options to be valid file paths or globs Returns a fully qualified file path name (e.g. converts relative paths) Returns an array of file paths in the case of globbing See the file.php example in the examples directory v0.2.0 The primary goal of this update was to better delineate between flag options and argument options. In Commando, flags are options that we define that require a name when they are being specified on the command line. Arguments are options that are not named in this way. In the example below, '-f' and '--long' are described as ""flags"" type options in Commando terms with the values 'value1' and 'value2' respectively, whereas value3, value4, and value5 are described as ""argument"" type options. php command.php -f value1 --long value2 value3 value4 value5  Added Command::getArguments() to return an array of Option that are of the ""argument"" type (see argumentsVsFlags.php example) Added Command::getFlags() to return an array of Option that are of the ""flag"" type (see argumentsVsFlags.php example) Added Command::getArgumentValues() to return an array of all the values for ""arguments"" Added Command::getFlagValues() to return an array of all values for ""flags"" Command now implements Iterator interface and will iterator over all options, starting with arguments and continuing with flags in alphabetical order Can now define options with Command::flag($name) and Command::argument(), in addition to Command::option($name) Added ability to add a ""title"" to refer to arguments by, making the help docs a little cleaner (run help.php example) Cleaned up the generated help docs Bug fix for additional colorized red line when an error is displayed v0.1.4 Bug fix for options values with multiple words v0.1.3 Beep support added to Terminal Commando::beepOnError() added v0.1.2 Terminal updated to use tput correctly Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nategood/commando"	"Another simple command line opt parser."	"true"
"Command Line"	"Cron Expression"	"https://github.com/mtdowling/cron-expression"	"A library to calculate cron run dates."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"875"	"69"	"148"	"GitHub - mtdowling/cron-expression: CRON for PHP: Calculate the next or previous run date and determine if a CRON expression is due Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 69 Star 875 Fork 148 mtdowling/cron-expression Code Issues 4 Pull requests 7 Pulse Graphs CRON for PHP: Calculate the next or previous run date and determine if a CRON expression is due http://mtdowling.com/blog/2012/06/03/cron-expressions-in-php/ 174 commits 1 branch 6 releases 28 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.1.0 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit f7fb40e Apr 27, 2016 dragonmantank Merge pull request #118 from lucasmichot/feature/master/travis-compos… … …er-prefer-dist  Use --prefer-dist Permalink Failed to load latest commit information. src/Cron Add imports Feb 1, 2016 tests/Cron Add imports Feb 1, 2016 .editorconfig Add .editorconfig support Jan 26, 2016 .gitattributes Set auto git encodind and do not export phpunit.xml.dist Jan 26, 2016 .gitignore Removed code formatting that was added. Oct 1, 2015 .travis.yml Use --prefer-dist Apr 26, 2016 CHANGELOG.md Updated Readme and added a Change log file Jan 26, 2016 LICENSE Adding license Jul 6, 2011 README.md Updated Readme and added a Change log file Jan 26, 2016 composer.json PSR4 autoloading Jan 28, 2016 phpunit.xml.dist More options for phpunit Jan 26, 2016 README.md PHP Cron Expression Parser The PHP cron expression parser can parse a CRON expression, determine if it is due to run, calculate the next run date of the expression, and calculate the previous run date of the expression. You can calculate dates far into the future or past by skipping n number of matching dates. The parser can handle increments of ranges (e.g. */12, 2-59/3), intervals (e.g. 0-9), lists (e.g. 1,2,3), W to find the nearest weekday for a given day of the month, L to find the last day of the month, L to find the last given weekday of a month, and hash (#) to find the nth weekday of a given month. Installing Add the dependency to your project: composer require mtdowling/cron-expression Usage <?php  require_once '/vendor/autoload.php';  // Works with predefined scheduling definitions $cron = Cron\CronExpression::factory('@daily'); $cron->isDue(); echo $cron->getNextRunDate()->format('Y-m-d H:i:s'); echo $cron->getPreviousRunDate()->format('Y-m-d H:i:s');  // Works with complex expressions $cron = Cron\CronExpression::factory('3-59/15 2,6-12 */15 1 2-5'); echo $cron->getNextRunDate()->format('Y-m-d H:i:s');  // Calculate a run date two iterations into the future $cron = Cron\CronExpression::factory('@daily'); echo $cron->getNextRunDate(null, 2)->format('Y-m-d H:i:s');  // Calculate a run date relative to a specific time $cron = Cron\CronExpression::factory('@monthly'); echo $cron->getNextRunDate('2010-01-12 00:00:00')->format('Y-m-d H:i:s'); CRON Expressions A CRON expression is a string representing the schedule for a particular command to execute. The parts of a CRON schedule are as follows: *    *    *    *    *    * -    -    -    -    -    - |    |    |    |    |    | |    |    |    |    |    + year [optional] |    |    |    |    +----- day of week (0 - 7) (Sunday=0 or 7) |    |    |    +---------- month (1 - 12) |    |    +--------------- day of month (1 - 31) |    +-------------------- hour (0 - 23) +------------------------- min (0 - 59)  Requirements PHP 5.3+ PHPUnit is required to run the unit tests Composer is required to run the unit tests Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mtdowling/cron-expression"	"A library to calculate cron run dates."	"true"
"Command Line"	"GetOpt"	"https://github.com/ulrichsg/getopt-php"	"A command line opt parser."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"110"	"8"	"33"	"GitHub - ulrichsg/getopt-php: Command-line argument parser for PHP 5.3+ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 110 Fork 33 ulrichsg/getopt-php Code Issues 8 Pull requests 8 Pulse Graphs Command-line argument parser for PHP 5.3+ http://ulrichsg.github.io/getopt-php 88 commits 3 branches 11 releases Fetching contributors PHP 98.2% Makefile 1.8% PHP Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master v3 Nothing to show 2.3.0 2.2.0 2.1.0 2.0.0 1.4.1 1.4.0 1.3.0 1.2.0 1.1.0 1.0.1 1.0.0 Nothing to show New pull request Latest commit 4939d6b Jun 28, 2015 ulrichsg Merge pull request #50 from Firehed/master … Handle options with arguments with no space, fixes #49 Permalink Failed to load latest commit information. src/Ulrichsg/Getopt Handle options with arguments with no space, fixes #49 Jun 20, 2015 test/Ulrichsg/Getopt Handle options with arguments with no space, fixes #49 Jun 20, 2015 .gitignore Updated for new documentation page. Feb 27, 2014 .travis.yml Added PHP 5.6 and HHVM to travis.yml Sep 13, 2014 CHANGELOG.md Updated changelog for v2.3 Mar 28, 2015 LICENSE Changed namespace, extracted license to separate file. Dec 23, 2013 Makefile refs #1 - fixed Makefile for install-dev-dependencies target and added Feb 4, 2013 README.markdown Fixed broken link markdown. Feb 27, 2014 composer.json Updated for new documentation page. Feb 27, 2014 phpunit.xml refs #1 - fixed all the small issues mentioned in the ticket Feb 4, 2013 README.markdown Getopt.PHP Getopt.PHP is a library for command-line argument processing. It supports PHP version 5.3 and above. Features Supports both short (eg. -v) and long (eg. --version) options Option aliasing, ie. an option can have both a long and a short version Collapsed short options (eg. -abc instead of -a -b -c) Cumulative options (eg. -vvv) Options may take optional or mandatory arguments Two alternative notations for long options with arguments: --option value and --option=value Collapsed short options with mandatory argument at the end (eg. -ab 1 instead of -a -b 1) Documentation Documentation for the current version (2.0+) Legacy documentation (1.4) License Getopt.PHP is published under the MIT License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ulrichsg/getopt-php"	"A command line opt parser."	"true"
"Command Line"	"GetOptionKit"	"https://github.com/c9s/GetOptionKit"	"Another command line opt parser."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"84"	"9"	"13"	"GitHub - c9s/GetOptionKit: An object-oriented option parser library for PHP, which supports type constraints, flag, multiple flag, multiple values, required value checking Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 84 Fork 13 c9s/GetOptionKit Code Issues 6 Pull requests 0 Wiki Pulse Graphs An object-oriented option parser library for PHP, which supports type constraints, flag, multiple flag, multiple values, required value checking 444 commits 2 branches 33 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show 2.4.0 2.3.0 2.2.7 2.2.6 2.2.5 2.2.4 2.2.3 2.2.2 2.2.1 2.2.0 2.1.1 2.1.0 2.0.12 2.0.11 2.0.10 2.0.9 2.0.8 2.0.7 2.0.6 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 1.2.8 1.2.7 1.2.6 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 Nothing to show New pull request Latest commit 689a6da Jul 12, 2016 c9s Update readme for issue #46 Permalink Failed to load latest commit information. examples updated Jun 10, 2015 src Fix OptionParser for 5.3 Jun 10, 2016 tests Update readme for issue #46 Jul 12, 2016 .gitignore Ignore build and vendor directories Apr 16, 2015 .travis.yml Use more php 5.3 array Jun 10, 2016 CHANGELOG.md update changelog May 12, 2016 CONTRIBUTORS.txt Add contributor list Jul 6, 2015 LICENSE update correct license Dec 3, 2013 README.md Update readme for issue #46 Jul 12, 2016 build.xml Update build.xml for CI May 23, 2012 composer.json bump version to 2.4.0 Jun 10, 2016 composer.lock Add composer lock file May 12, 2016 package.ini Bump version to 1.2.2 Mar 22, 2013 phpdox.xml Support apache-ant build tasks May 22, 2012 phprelease.ini Update README Mar 28, 2013 phpunit-ci.xml Support apache-ant build tasks May 22, 2012 phpunit.xml.dist Add coverage filter May 12, 2016 README.md GetOptionKit Code Quality Versions & Stats A powerful GetOpt toolkit for PHP, which supports type constraints, flag, multiple flag, multiple values, required value checking. GetOptionKit is based on PHP5.3, with fine unit testing with PHPUnit testing framework. GetOptionKit is object-oriented, it's flexible and extendable. Powering PHPBrew https://github.com/phpbrew/phpbrew, CLIFramework https://github.com/c9s/CLIFramework and AssetKit https://github.com/c9s/AssetKit. Features Simple format. Type constrant. Multiple value, requried value, optional value checking. Auto-generated help text from defined options. Support app/subcommand option parsing. Option Value Validator Option Suggestions SPL library. HHVM support. Requirements PHP 5.4+ Install From Composer composer require corneltek/getoptionkit Supported Option Formats simple flags: program.php -a -b -c program.php -abc program.php -vvv   # incremental flag v=3 program.php -a -bc with multiple values: program.php -a foo -a bar -a zoo -b -b -b specify value with equal sign: program.php -a=foo program.php --long=foo with normal arguments: program.php -a=foo -b=bar arg1 arg2 arg3 program.php arg1 arg2 arg3 -a=foo -b=bar  Option SPEC v|verbose    flag option (with boolean value true) d|dir:       option require a value (MUST require) d|dir+       option with multiple values. d|dir?       option with optional value dir:=string  option with type constraint of string dir:=number  option with type constraint of number dir:=file    option with type constraint of file dir:=date    option with type constraint of date dir:=boolean option with type constraint of boolean d            single character only option dir          long option name  Command Line Forms app [app-opts] [app arguments]  app [app-opts] subcommand [subcommand-opts] [subcommand-args]  app [app-opts] subcmd1 [subcmd-opts1] subcmd2 [subcmd-opts] subcmd3 [subcmd-opts3] [subcommand arguments....]  Demo Please check examples/demo.php. Run: % php examples/demo.php -f test -b 123 -b 333 Print: * Available options:       -f, --foo <value>    option requires a value.      -b, --bar <value>+    option with multiple value.     -z, --zoo [<value>]    option with optional value.           -v, --verbose    verbose message.             -d, --debug    debug message.                  --long    long option name only.                      -s    short option name only. Enabled options:  * key:foo      spec:-f, --foo <value>  desc:option requires a value.     value => test  * key:bar      spec:-b, --bar <value>+  desc:option with multiple value.     Array     (         [0] => 123         [1] => 333     )  Synopsis use GetOptionKit\OptionCollection; use GetOptionKit\OptionParser; use GetOptionKit\OptionPrinter\ConsoleOptionPrinter;  $specs = new OptionCollection; $specs->add('f|foo:', 'option requires a value.' )     ->isa('String');  $specs->add('b|bar+', 'option with multiple value.' )     ->isa('Number');  $specs->add('ip+', 'Ip constraint' )     ->isa('Ip');  $specs->add('email+', 'Email address constraint' )     ->isa('Email');  $specs->add('z|zoo?', 'option with optional value.' )     ->isa('Boolean');  $specs->add('file:', 'option value should be a file.' )     ->isa('File');  $specs->add('v|verbose', 'verbose message.' ); $specs->add('d|debug', 'debug message.' ); $specs->add('long', 'long option name only.' ); $specs->add('s', 'short option name only.' );  $printer = new ConsoleOptionPrinter(); echo $printer->render($specs);  $parser = new OptionParser($specs);  echo ""Enabled options: \n""; try {     $result = $parser->parse( $argv );     foreach ($result as $key => $spec) {         echo $spec->getValue() . ""\n"";     }      $opt = $result['f'] // return the option object.     $str = $result->f; // return the option value      $args = $result->getArguments();     var_dump($args); } catch( Exception $e ) {     echo $e->getMessage(); } Documentation See https://github.com/c9s/GetOptionKit/wiki for more details. Option Value Type The option value type help you validate the input, the following list is the current supported types: string number boolean file date url email ip ipv4 ipv6 regex And here is the related sample code: $opt->add( 'f|foo:' , 'with string type value' )     ->isa('string');  $opt->add( 'b|bar+' , 'with number type value' )     ->isa('number');  $opt->add( 'z|zoo?' , 'with boolean type value' )     ->isa('boolean');  $opt->add( 'file:' , 'with file type value' )     ->isa('file');  $opt->add( 'date:' , 'with date type value' )     ->isa('date');  $opt->add( 'url:' , 'with url type value' )     ->isa('url');  $opt->add( 'email:' , 'with email type value' )     ->isa('email');  $opt->add( 'ip:' , 'with ip(v4/v6) type value' )     ->isa('ip');  $opt->add( 'ipv4:' , 'with ipv4 type value' )     ->isa('ipv4');  $opt->add( 'ipv6:' , 'with ipv6 type value' )     ->isa('ipv6');  $specs->add('r|regex:', 'with custom regex type value')       ->isa('Regex', '/^([a-z]+)$/'); Please note that currently only string, number, boolean types can be validated. ContinuousOptionParser $specs = new OptionCollection; $spec_verbose = $specs->add('v|verbose'); $spec_color = $specs->add('c|color'); $spec_debug = $specs->add('d|debug'); $spec_verbose->description = 'verbose flag';  // ContinuousOptionParser $parser = new ContinuousOptionParser( $specs ); $result = $parser->parse(explode(' ','program -v -d test -a -b -c subcommand -e -f -g subcommand2')); $result2 = $parser->continueParse(); OptionPrinter GetOptionKit\OptionPrinter can print options for you: * Available options:               -f, --foo   option requires a value.               -b, --bar   option with multiple value.               -z, --zoo   option with optional value.           -v, --verbose   verbose message.             -d, --debug   debug message.                  --long   long option name only.                      -s   short option name only.  Command-line app with subcommands For application with subcommands is designed by following form: [app name] [app opts]               [subcommand1] [subcommand-opts]              [subcommand2] [subcommand-opts]              [subcommand3] [subcommand-opts]              [arguments]  You can check the tests/GetOptionKit/ContinuousOptionParserTest.php unit test file: // subcommand stack $subcommands = array('subcommand1','subcommand2','subcommand3');  // different command has its own options $subcommandSpecs = array(     'subcommand1' => $cmdspecs,     'subcommand2' => $cmdspecs,     'subcommand3' => $cmdspecs, );  // for saved options $subcommandOptions = array();  // command arguments $arguments = array();  $argv = explode(' ','program -v -d -c subcommand1 -a -b -c subcommand2 -c subcommand3 arg1 arg2 arg3');  // parse application options first $parser = new ContinuousOptionParser( $appspecs ); $app_options = $parser->parse( $argv ); while (! $parser->isEnd()) {     if (@$subcommands[0] && $parser->getCurrentArgument() == $subcommands[0]) {         $parser->advance();         $subcommand = array_shift( $subcommands );         $parser->setSpecs( $subcommandSpecs[$subcommand] );         $subcommandOptions[ $subcommand ] = $parser->continueParse();     } else {         $arguments[] = $parser->advance();     } } Todo Option Spec group. conflict option checking. option valid value checking. custom command mapping. Command Line Utility Design Concept main program name should be easy to type, easy to remember. subcommand should be easy to type, easy to remember. length should be shorter than 7 characters. options should always have long descriptive name a program should be easy to check usage. General command interface To list usage of all subcommands or the program itself: $ prog help  To list the subcommand usage $ prog help subcommand subcommand2 subcommand3  Hacking Fork this repository and clone it: $ git clone git://github.com/c9s/GetOptionKit.git $ cd GetOptionKit $ composer install  Run PHPUnit to test: $ phpunit   License This project is released under MIT License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/c9s/GetOptionKit"	"Another command line opt parser."	"true"
"Command Line"	"Hoa Console"	"https://github.com/hoaproject/Console"	"Another command line library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"201"	"17"	"20"	"GitHub - hoaproject/Console: The Hoa\Console library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 201 Fork 20 hoaproject/Console Code Issues 9 Pull requests 0 Pulse Graphs The Hoa\Console library. http://hoa-project.net/ 332 commits 1 branch 15 releases 7 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 3.16.01.14 3.16.01.11 2.15.07.27 2.15.07.23 2.15.05.29 2.15.03.19 2.15.03.06 2.15.02.18 2.15.01.04 2.14.12.10 2.14.11.26 2.14.11.09 2.14.09.23 2.14.09.17 1.14.09.16 Nothing to show New pull request Latest commit 88977a5 Jul 11, 2016 vonglasow committed with Hywan Documentation: Fix API documentation. Permalink Failed to load latest commit information. Bin Quality: Run devtools:cs. Jan 9, 2016 Chrome Quality: Run devtools:cs. Jan 9, 2016 Dispatcher Quality: Run devtools:cs. Jan 9, 2016 Documentation Core: Remove `Hoa\Core`. Jan 9, 2016 Readline Autocompleter: Force to work on a sub-line. May 23, 2016 Terminfo Terminfo: Add the `xterm-256color` database. Nov 10, 2015 Test/Unit Autocompleter: Force to work on a sub-line. May 23, 2016 .State “status” -> “state”. Feb 10, 2014 .gitignore Add a `.gitignore` file. Aug 3, 2015 CHANGELOG.md Prepare 3.16.01.14. Jan 14, 2016 Console.php Quality: Run devtools:cs. Jan 9, 2016 Cursor.php Quality: Run devtools:cs. Jan 9, 2016 Exception.php Quality: Run devtools:cs. Jan 9, 2016 GetOption.php Quality: Run devtools:cs. Jan 9, 2016 Input.php Quality: Run devtools:cs. Jan 9, 2016 Mouse.php Quality: Run devtools:cs. Jan 9, 2016 Output.php Quality: Fix methods ordering. Feb 24, 2016 Parser.php Quality: Run devtools:cs. Jan 9, 2016 Processus.php Quality: Run devtools:cs. Jan 9, 2016 README.md Quality: Fix example CS in the `README.md`. Jul 1, 2016 Tput.php Quality: Run devtools:cs. Jan 9, 2016 Window.php Documentation: Fix API documentation. Jul 11, 2016 composer.json Composer: New stable libraries. Jan 14, 2016 README.md Hoa is a modular, extensible and structured set of PHP libraries. Moreover, Hoa aims at being a bridge between industrial and research worlds. Hoa\Console This library allows to interact easily with a terminal: getoption, cursor, window, processus, readline etc. Installation With Composer, to include this library into your dependencies, you need to require hoa/console: {     ""require"": {         ""hoa/console"": ""~3.0""     } } Please, read the website to get more informations about how to install. Quick usage We propose a quick overview of some features: cursor, window, readline, processus and finally getoption. Cursor The Hoa\Console\Cursor class allows to manipulate the cursor. Here is a list of some operations: move, moveTo, save, restore, clear, hide, show, getPosition, colorize, etc. The API is very straightforward. For example, we can use l, left or ← to move the cursor on the left column. Thus we move the cursor to the left 3 times and then to the top 2 times: Hoa\Console\Cursor::move('left left left up up'); … or with Unicode symbols: Hoa\Console\Cursor::move('← ← ← ↑ ↑'); This method moves the cursor relatively from its current position, but we are able to move the cursor to absolute coordinates: Hoa\Console\Cursor::moveTo(13, 42); We are also able to save the current cursor position, to move, clear etc., and then to restore the saved position: Hoa\Console\Cursor::save();     // save Hoa\Console\Cursor::move('↓');  // move below Hoa\Console\Cursor::clear('↔'); // clear the line echo 'Something below…';        // write something Hoa\Console\Cursor::restore();  // restore Another example with colors: Hoa\Console\Cursor::colorize(     'underlined foreground(yellow) background(#932e2e)' ); Please, read the API documentation for more informations. Mouse The Hoa\Console\Mouse class allows to listen the mouse actions and provides the following listeners: mouseup, mousedown, wheelup and wheeldown. Example: $mouse = Hoa\Console\Mouse::getInstance(); $mouse->on('mousedown', function ($bucket) {     print_r($bucket->getData()); });  $mouse::track(); And then, when we left-click, we will see: Array (     [x] => 69     [y] => 30     [button] => left     [shift] =>     [meta] =>     [ctrl] => )  When we left-click while hiting the shift key, we will see: Array (     [x] => 71     [y] => 32     [button] => left     [shift] => 1     [meta] =>     [ctrl] => )  This is an experimental API. Window The Hoa\Console\Window class allows to manipulate the window. Here is a list of some operations: setSize, getSize, moveTo, getPosition, scroll, minimize, restore, raise, setTitle, getTitle, copy, etc. Furthermore, we have the hoa://Event/Console/Window:resize event channel to listen when the window has been resized. For example, we resize the window to 40 lines and 80 columns, and then we move the window to 400px horizontally and 100px vertically: Hoa\Console\Window::setSize(40, 80); Hoa\Console\Window::moveTo(400, 100); If we do not like our user, we are able to minimize its window: Hoa\Console\Window::minimize(); sleep(2); Hoa\Console\Window::restore(); We are also able to set or get the title of the window: Hoa\Console\Window::setTitle('My awesome application'); Finally, if we have a complex application layout, we can repaint it when the window is resized by listening the hoa://Event/Console/Window:resize event channel: Hoa\Event\Event::getEvent('hoa://Event/Console/Window:resize')     ->attach(function (Hoa\Event\Bucket $bucket) {         $data = $bucket->getData();         $size = $data['size'];          echo             'New dimensions: ', $size['x'], ' lines x ',             $size['y'], ' columns.', ""\n"";     }); Please, read the API documentation for more informations Readline The Hoa\Console\Readline\Readline class provides an advanced readline which allows the following operations: edition, history, autocompletion. It supports UTF-8. It is based on bindings, and here are some: arrow up and arrow down: move in the history, arrow left and arrow right: move the cursor left and right, Ctrl-A: move to the beginning of the line, Ctrl-E: move to the end of the line, Ctrl-B: move backward of one word, Ctrl-F: move forward of one word, Ctrl-W: delete first backard word, Backspace: delete first backward character, Enter: submit the line, Tab: autocomplete. Thus, to read one line: $readline = new Hoa\Console\Readline\Readline(); $line     = $readline->readLine('> '); // “> ” is the prefix of the line. The Hoa\Console\Readline\Password allows the same operations but without printing on STDOUT. $password = new Hoa\Console\Readline\Password(); $line     = $password->readLine('password: '); We are able to add a mapping with the help of the Hoa\Console\Readline\Readline::addMapping method. We use \e[… for \033[, \C-… for Ctrl-… and a character for the rest. We can associate a character or a callable: $readline->addMapping('a', 'z'); // crazy, we replace “a” by “z”. $readline->addMapping('\C-R', function ($readline) {     // do something when pressing Ctrl-R. }); We are also able to manipulate the history, thanks to the addHistory, clearHistory, getHistory, previousHistory and nextHistory methods on the Hoa\Console\Readline\Readline class. Finally, we have autocompleters that are enabled on Tab. If one solution is proposed, it will be inserted directly. If many solutions are proposed, we are able to navigate in a menu to select the solution (with the help of keyboard arrows, Enter, Esc etc.). Also, we are able to combine autocompleters. The following example combine the Word and Path autocompleters: $functions = get_defined_functions(); $readline->setAutocompleter(     new Hoa\Console\Readline\Autocompleter\Aggregate([         new Hoa\Console\Readline\Autocompleter\Path(),         new Hoa\Console\Readline\Autocompleter\Word($functions['internal'])     ]) ); Here is an example of the result: On Windows, a readline is equivalent to a simple fgets(STDIN). Processus The Hoa\Console\Processus class allows to manipulate processus as a stream which implements Hoa\Stream\IStream\In, Hoa\Stream\IStream\Out and Hoa\Stream\IStream\Pathable interfaces (please, see the Hoa\Stream library). Basically, we can read STDOUT like this: $processus = new Hoa\Console\Processus('ls'); $processus->open(); echo $processus->readAll(); And we can write on STDIN like this: $processus->writeAll('foobar'); etc. This is very classical. Hoa\Console\Processus also proposes many events: start, stop, input, output and timeout. Thus: $processus = new Hoa\Console\Processus('ls'); $processus->on('output', function (Hoa\Event\Bucket $bucket) {     $data = $bucket->getData();     echo '> ', $data['line'], ""\n""; }); $processus->run(); We are also able to read and write on more pipes than 0 (STDOUT), 1 (STDIN) and 2 (STDERR). In the same way, we can set the current working directory of the processus and its environment. We can quickly execute a processus without using a stream with the help of the Hoa\Console\Processus::execute method. GetOption The Hoa\Console\Parser and Hoa\Console\GetOption classes allow to parse a command-line and get options and inputs values easily. First, we need to parse a command-line, such as: $parser = new Hoa\Console\Parser(); $parser->parse('-s --long=value input'); Second, we need to define our options: $options = new Hoa\Console\GetOption(     [         // long name type short name         // ↓ ↓ ↓         ['short', Hoa\Console\GetOption::NO_ARGUMENT,       's'],         ['long',  Hoa\Console\GetOption::REQUIRED_ARGUMENT, 'l']     ],     $parser ); And finally, we iterate over options: $short = false; $long  = null;  // short name value // ↓ ↓ while (false !== $c = $options->getOption($v)) {     switch ($c) {         case 's':             $short = true;              break;          case 'l':             $long = $v;              break;     } }  var_dump($short, $long); // bool(true) and string(5) ""value"". Please, see API documentation of Hoa\Console\Parser to see all supported forms of options (flags or switches, long or short ones, inputs etc.). It also support typos in options. In this case, we have to add:     case '__ambiguous':         $options->resolveOptionAmbiguity($v);          break; If one solution is found, it will select this one automatically, else it will raise an exception. This exception is caught by Hoa\Console\Dispatcher\Kit when using the hoa script and a prompt is proposed. Thanks to the Hoa\Router library and the Hoa\Dispatcher library (with its dedicated kit Hoa\Console\Dispatcher\Kit), we are able to build commands easily. Please, see all Bin/ directories in different libraries (for example Hoa\Cli\Bin\Resolve) and Hoa/Cli/Bin/Hoa.php to learn more. Awecode The following awecodes show this library in action: Hoa\Console\Readline: why and how to use Hoa\Console\Readline? Simple examples will help us to use default shortcuts and we will even see the auto-completion, Hoa\Websocket: why and how to use Hoa\Websocket\Server and Hoa\Websocket\Client? A simple example will illustrate the WebSocket protocol. Documentation Different documentations can be found on the website: http://hoa-project.net/. License Hoa is under the New BSD License (BSD-3-Clause). Please, see LICENSE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hoaproject/Console"	"Another command line library."	"true"
"Command Line"	"OptParse"	"https://github.com/CHH/optparse"	"Another command line opt parser."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"2"	"0"	"GitHub - CHH/optparse: Another Command Line Argument Parser Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 14 Fork 0 CHH/optparse Code Issues 4 Pull requests 0 Pulse Graphs Another Command Line Argument Parser 38 commits 1 branch 1 release Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.0 Nothing to show New pull request Latest commit 83bc89f Dec 19, 2012 CHH Merge branch 'reset-variable-in-loop' Permalink Failed to load latest commit information. examples Split usage in longUsage() and usage() method Dec 19, 2012 lib/CHH User lower case null Dec 19, 2012 tests Split usage in longUsage() and usage() method Dec 19, 2012 .gitignore Initial commit Aug 27, 2012 LICENSE.txt Initial commit Aug 27, 2012 README.md Using long flag Aug 28, 2012 bob_config.php Initial commit Aug 27, 2012 composer.json Throw RequiredArgumentMissingException when argument not found Aug 27, 2012 phpunit.dist.xml Initial commit Aug 27, 2012 README.md Optparse — Another Command Line Argument Parser Install 1. Get composer. 2. Put this into your local composer.json: {   ""require"": {     ""chh/optparse"": ""*@dev""   } }  3. php composer.phar install Example hello.php: <?php  require ""vendor/autoload.php"";  use CHH\Optparse;  $parser = new Optparse\Parser(""Says Hello"");  function usage_and_exit() {     global $parser;     fwrite(STDERR, ""{$parser->usage()}\n"");     exit(1); }  $parser->addFlag(""help"", array(""alias"" => ""-h""), ""usage_and_exit""); $parser->addFlag(""shout"", array(""alias"" => ""-S"")); $parser->addArgument(""name"", array(""required"" => true));  try {     $parser->parse(); } catch (Optparse\Exception $e) {     usage_and_exit(); }  $msg = ""Hello {$parser[""name""]}!"";  if ($parser[""shout""]) {     $msg = strtoupper($msg); }  echo ""$msg\n""; Try it: % php hello.php Christoph --shout HELLO CHRISTOPH!  Use There are two things you will define in the parser: Flags, arguments which start with one or two dashes and are considered as options of your program. Arguments, everything else which is not a flag. The main point of interest is the CHH\Optparse\Parser, which you can use to define Flags and Arguments. Flags To define a flag, pass the flag's name to the addFlag method: <?php  $parser = new CHH\Optparse\Parser;  $parser->addFlag(""help""); $parser->parse();  if ($parser[""help""]) {     echo $parser->usage();     exit; } A flag defined with addFlag is by default available as --$flagName. To define another name (e.g. a short name) for the flag, pass it as the value of the alias option in the options array: <?php $parser->addFlag(""help"", [""alias"" => ""-h""]); This way the help flag is available as --help and -h. Flags don't expect values following them by default. To turn this on set the flag's has_value option to true: <?php  $parser->addFlag(""name"", [""has_value"" => true]); $parser->parse(['--name', 'John']);  echo ""Hello World {$parser[""name""]}!\n""; You can assign a default value to a flag, by setting the default option: <?php  $parser->addFlag(""pid_file"", [""default"" => ""/var/tmp/foo.pid"", ""has_value"" => true]);  $parser->parse([]);  echo ""{$parser[""pid_file""]}\n""; // Output: // /var/tmp/foo.pid You can also bind the flag directly to a reference, by passing the reference in the var option or by using the addFlagVar method and passing it the variable: <?php  $foo = null; $bar = null;  $parser->addFlag(""foo"", [""var"" => &$foo, ""has_value"" => true]); $parser->addFlagVar(""bar"", $bar, [""has_value"" => true]);  $parser->parse(['--foo', 'foo', '--bar', 'bar']);  echo ""$foo\n""; echo ""$bar\n""; // Output: // foo // bar The parser also supports callbacks for flags. These are passed to addFlag as last argument. The callback is called everytime the parser encounters the flag. It gets passed a reference to the flag's value (true if it hasn't one). Use cases for this include splitting a string in pieces or running a method when a flag is passed: <?php  $parser = new Parser;  function usage_and_exit() {     global $parser;     echo $parser->usage(), ""\n"";     exit; }  $parser->addFlag(""help"", ['alias' => '-h'], ""usage_and_exit"");  $parser->addFlag(""queues"", [""has_value"" => true], function(&$value) {     $value = explode(',', $value); }); The call to parse takes an array of arguments, or falls back to using the arguments from $_SERVER['argv']. The parse method throws an CHH\Optparse\ArgumentException when a required flag or argument is missing, so make sure to catch this Exception and provide the user with a nice error message. The parser is also able to generate a usage message for the command by looking at the defined flags and arguments. Use the usage method to retrieve it. Named Arguments Named arguments can be added by using the addArgument method, which takes the argument's name as first argument and then an array of options. These options are supported for arguments: default: Default Value (default: null). var_arg: Makes this a variable length argument (default: false). help: Help text, used to describe the argument in the usage message generated by usage() (default: null). required: Makes this argument required, the parser throws an exception when the argument is omitted in the argument list (default: false). As opposed to flags, the order matters in which you define your arguments. Variable length arguments can be defined by setting the var_arg option to true in the options array. Variable arguments can only be at the last position, and arguments defined after an variable argument are never set. <?php  $parser->addArgument(""files"", [""var_arg"" => true]);  // Will always be null, because the value will be consumed by the // ""var_arg"" enabled argument. $parser->addArgument(""foo"");  $parser->parse([""foo"", ""bar"", ""baz""]);  foreach ($parser[""files""] as $file) {     echo $file, ""\n""; } // Output: // foo // bar // baz Arguments can also be retrieved by using the args, arg and slice methods: <?php  $parser->addArgument(""foo""); $parser->parse([""foo"", ""bar"", ""baz""]);  echo var_export($parser->args()); // Output: // array(""foo"", ""bar"", ""baz"")  // Can also be used to fetch named arguments: echo var_export($parser->arg(0)); echo var_export($parser->arg(""foo"")); // Output: // ""foo"" // ""foo""  // Pass start and length: echo var_export($parser->slice(0, 2)); // Output: // array(""foo"", ""bar""); License Copyright (c) 2012 Christoph Hochstrasser Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CHH/optparse"	"Another command line opt parser."	"true"
"Command Line"	"Pecan"	"https://github.com/mcrumm/pecan"	"An event-driven, non-blocking shell."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"38"	"2"	"2"	"GitHub - mcrumm/pecan: ReactPHP Shell, based on the Symfony Console component. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 38 Fork 2 mcrumm/pecan Code Issues 0 Pull requests 0 Pulse Graphs ReactPHP Shell, based on the Symfony Console component. 42 commits 2 branches 1 release Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop master Nothing to show v1.0 Nothing to show New pull request Latest commit f35f012 Jun 7, 2014 Michael Crumm Merge branch 'develop' of github.com:mcrumm/pecan into develop … * 'develop' of github.com:mcrumm/pecan:   Scrutinizer Auto-Fixes   Updating README.md  Conflicts: 	README.md Permalink Failed to load latest commit information. bin Fixing data callback in drupe example binary Apr 14, 2014 src Merge branch 'develop' of github.com:mcrumm/pecan into develop Jun 7, 2014 .gitignore Adding .gitignore Mar 22, 2014 LICENSE Initial commit Mar 22, 2014 README.md Merge branch 'develop' of github.com:mcrumm/pecan into develop Jun 8, 2014 composer.json Trimming package dependencies to hard requirements Apr 20, 2014 README.md Pecan Event-driven, non-blocking shell for ReactPHP. Pecan (/pɪˈkɑːn/) provides a non-blocking alternative to the shell provided in the Symfony Console component. Additionally, Pecan includes a basic, framework-agnostic shell component called Drupe that can be used as the basis for building custom shells. Shells Drupe Pecan\Drupe is a standalone component for building event-driven console components. I like to think of it as Pecan without the Shell. Pass an EventLoopInterface to start() listening for input. $loop  = \React\EventLoop\Factory::create(); $shell = new \Pecan\Drupe();  // $shell->start() returns $loop to allow this chaining. $shell->start($loop)->run();  Drupe Events running - The shell is running. data - Data was received from STDIN. error - Indicates an I/O problem. close - The shell was closed. Shell Pecan\Shell extends Drupe to provide an event-driven wrapper for a standard Symfony\Component\Console\Application. It can be used as a drop-in replacement for Symfony\Component\Console\Shell. Note: To maintain a Symfony Console-like workflow, calling $shell->run() on Pecan\Shell starts the EventLoop, so make sure it gets called last. Shell Events Shell emits the same events as Drupe. Readline Pecan\Readline provides an interface for reading line-by-line input from STDIN. This component is heavily inspired by, and strives for parity with the NodeJS Readline Component. Readline Events line - A line has been read from STDIN. pause - Reading from the stream has been paused. resume - Reading from the stream has resumed. error - The input stream encountered an error. close - Then input stream was closed. Console Pecan\Console\Console provides a standard interface for working with STDOUT and STDERR. It is inspired heavily by the NodeJS Console Component and takes some functionality from the Symfony Console Component Output The Output classes extend the base Console Output. StreamOutput wraps a single stream resource, while ConsoleOutput contains both the STDOUT and STDERR streams. StreamOutputInterface ConsoleOutputInterface PecanOutput Using Pecan Using Drupe as a Standalone Shell use Pecan\Drupe;  $loop   = \React\EventLoop\Factory::create(); $shell  = new Drupe();  // Example one-time callback to write the initial prompt. // This resumes reading from STDIN and kicks off the shell. $shell->once('running', function (Drupe $shell) {     $shell->setPrompt('drupe> ')->prompt(); });  // Example callback for the data event. // By convention, any call to write() will be followed by a call to prompt()  // once the data has been written to the output stream. $shell->on('data', function ($line, Drupe $shell) {      $command = (!$line && strlen($line) == 0) ? false : rtrim($line);      if ('exit' === $command || false === $command) {         $shell->close();     } else {         $shell->writeln(sprintf(PHP_EOL.'// in: %s', $line));     }  });  // Example callback for the close event. $shell->on('close', function ($code, Drupe $shell) {     $shell->writeln([         '// Goodbye.',         sprintf('// Shell exits with code %d', $code),     ]); });  $shell->start($loop)->run(); Using Shell with Symfony Console Applications Here is a shell that echoes back any input it receives, and then exits. // Pecan\Shell wraps a standard Console Application. use Symfony\Component\Console\Application; use Pecan\Shell;  $shell = new Shell(new Application('pecan'));  $shell->on('data', function($line, Shell $shell) {     $shell->write($line)->then(function($shell) {         $shell->close();     }); });  $shell->run(); Injecting An EventLoopInterface into Pecan\Shell Unless you pass \Pecan\Shell an object implementing EventLoopInterface as its second constructor method, the Shell will get one from the EventLoop Factory. Keep this in mind if you want to integrate Pecan into an existing ReactPHP project. use Symfony\Component\Console\Application; use Pecan\Shell;  $loop  = \React\EventLoop\Factory::create();  // Do other things requiring $loop...  $shell = new Shell(new Application('pecan'), $loop);  // We must still let the shell run the EventLoop. $shell->run(); Example exit callback // Example callback for the exit event. $shell->on('exit', function($code, \Pecan\Shell $shell) {     $shell->emit('output', [         [             'Goodbye.',             sprintf('// Shell exits with code %d', $code)         ],         true     ]); }); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mcrumm/pecan"	"An event-driven, non-blocking shell."	"true"
"Command Line"	"PsySH"	"https://github.com/bobthecow/psysh"	"Another PHP REPL."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1458"	"57"	"121"	"GitHub - bobthecow/psysh: A REPL for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 57 Star 1,458 Fork 121 bobthecow/psysh Code Issues 46 Pull requests 10 Pulse Graphs A REPL for PHP http://psysh.org 773 commits 4 branches 34 releases 34 contributors PHP 98.5% Python 1.4% Shell 0.1% PHP Python Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop feature/runkit-redux gh-pages master Nothing to show v0.7.2 v0.7.1 v0.7.0 v0.6.1 v0.6.0 v0.5.2 v0.5.1 v0.5.0 v0.4.4 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.5 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.1 v0.2.0 v0.1.12 v0.1.11 v0.1.10 v0.1.9 v0.1.8 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit e64e10b Mar 8, 2016 bobthecow Merge branch 'release/0.7.2' Permalink Failed to load latest commit information. bin Don't assume the presence of $_SERVER['argv'] Jan 14, 2016 src/Psy Bump to v0.7.2 Mar 8, 2016 test Add support for declare(strict_types=1) Mar 5, 2016 .editorconfig Add .editorconfig, fix trailing newlines. Dec 16, 2014 .gitignore Improve dependency compilation. Nov 6, 2015 .php_cs Also exclude build-vendor Nov 8, 2015 .styleci.yml Fix up psysh file Nov 8, 2015 .travis.yml Add minimum dependency versions to build matrix. Mar 5, 2016 CONTRIBUTING.md Update CONTRIBUTING with preferred manual path. Jul 16, 2015 LICENSE Update copyright docblocks. Nov 6, 2015 README.md Move some badges around Feb 27, 2016 composer.json Bump to v0.8.0-dev Feb 20, 2016 phpcs.xml Add PHPCS as part of the build process. Dec 15, 2014 phpunit.xml.dist Autoload the tests in composer.json Nov 8, 2015 README.md PsySH About PsySH is a runtime developer console, interactive debugger and REPL for PHP. Learn more at psysh.org. Check out the Interactive Debugging in PHP talk from OSCON on Presentate. Installation Download the psysh phar to install: wget psysh.org/psysh chmod +x psysh ./psysh  It's even awesomer if you put it somewhere in your system path (like /usr/local/bin or ~/bin)! PsySH is available via Composer, so you can use it in your project as well: composer require psy/psysh:@stable ./vendor/bin/psysh  Or you can use by checking out the the repository directly: git clone https://github.com/bobthecow/psysh.git cd psysh ./bin/psysh  PsySH configuration While PsySH strives to detect the right settings automatically, you might want to configure it yourself. Just add a file to ~/.config/psysh/config.php (or C:\Users\{USER}\AppData\Roaming\PsySH\config.php on Windows): <?php  return array(     // In PHP 5.4+, PsySH will default to your `cli.pager` ini setting. If this     // is not set, it falls back to `less`. It is recommended that you set up     // `cli.pager` in your `php.ini` with your preferred output pager.     //      // If you are running PHP 5.3, or if you want to use a different pager only     // for Psy shell sessions, you can override it here.     'pager' => 'more',      // Sets the maximum number of entries the history can contain.     // If set to zero, the history size is unlimited.     'historySize' => 0,      // If set to true, the history will not keep duplicate entries.     // Newest entries override oldest.     // This is the equivalent of the HISTCONTROL=erasedups setting in bash.     'eraseDuplicates' => false,      // By default, PsySH will use a 'forking' execution loop if pcntl is     // installed. This is by far the best way to use it, but you can override     // the default by explicitly enabling or disabling this functionality here.     'usePcntl' => false,      // PsySH uses readline if you have it installed, because interactive input     // is pretty awful without it. But you can explicitly disable it if you hate     // yourself or something.     'useReadline' => false,      // PsySH automatically inserts semicolons at the end of input if a statement     // is missing one. To disable this, set `requireSemicolons` to true.     'requireSemicolons' => true,      // PsySH uses a couple of UTF-8 characters in its own output. These can be     // disabled, mostly to work around code page issues. Because Windows.     //     // Note that this does not disable Unicode output in general, it just makes     // it so PsySH won't output any itself.     'useUnicode' => false,      // While PsySH respects the current `error_reporting` level, and doesn't throw     // exceptions for all errors, it does log all errors regardless of level. Set     // `errorLoggingLevel` to 0 to prevent logging non-thrown errors. Set it to any     // valid `error_reporting` value to log only errors which match that level.     'errorLoggingLevel' => E_ALL & ~E_NOTICE,      // ""Default includes"" will be included once at the beginning of every PsySH     // session. This is a good place to add autoloaders for your favorite     // libraries.     'defaultIncludes' => array(         __DIR__ . '/include/bootstrap.php',     ),      // While PsySH ships with a bunch of great commands, it's possible to add     // your own for even more awesome. Any Psy command added here will be     // available in your Psy shell sessions.     'commands' => array(         // The `parse` command is a command used in the development of PsySH.         // Given a string of PHP code, it pretty-prints the         // [PHP Parser](https://github.com/nikic/PHP-Parser) parse tree. It         // prolly won't be super useful for most of you, but it's there if you         // want to play :)         new \Psy\Command\ParseCommand,     ),      // PsySH uses symfony/var-dumper's casters for presenting scalars, resources,     // arrays and objects. You can enable additional casters, or write your own!     // See http://symfony.com/doc/current/components/var_dumper/advanced.html#casters     'casters' => array(         'MyFooClass' => 'MyFooClassCaster::castMyFooObject',     ),      // You can disable tab completion if you want to. Not sure why you'd want to.     'tabCompletion' => false,      // You can write your own tab completion matchers, too! Here are some that enable     // tab completion for MongoDB database and collection names:     'tabCompletionMatchers' => array(         new \Psy\TabCompletion\Matcher\MongoClientMatcher,         new \Psy\TabCompletion\Matcher\MongoDatabaseMatcher,     ),      // If multiple versions of the same configuration or data file exist, PsySH will     // use the file with highest precedence, and will silently ignore all others. With     // this enabled, a warning will be emitted (but not an exception thrown) if multiple     // configuration or data files are found.     //     // This will default to true in a future release, but is false for now.     'warnOnMultipleConfigs' => true,      // By default, output contains colors if support for them is detected. To override:     'colorMode' => \Psy\Configuration::COLOR_MODE_FORCED,   // force colors in output     'colorMode' => \Psy\Configuration::COLOR_MODE_DISABLED, // disable colors in output ); Downloading the manual The PsySH doc command is great for documenting source code, but you'll need a little something extra for PHP core documentation. Download one of the following PHP Manual files and drop it in ~/.local/share/psysh/, /usr/local/share/psysh/ or C:\Users\{USER}\AppData\Roaming\PsySH\ on Windows: English Brazilian Portuguese Chinese (Simplified) French German Italian Japanese Polish Romanian Russian Persian Spanish Turkish As Seen On… Cake: cake console Drupal: drush php, drush-psysh eZ Publish: ezsh Laravel: artisan tinker Lumen: artisan tinker Magento: magerun console Pantheon CLI: terminus cli console Symfony: sf1-psysh-bootstrap Symfony2: psymf, sf2-psysh-bootstrap, symfony-repl, PsyshBundle WordPress: wp-cli shell Zend Framework 2: PsyshModule Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bobthecow/psysh"	"Another PHP REPL."	"true"
"Command Line"	"ShellWrap"	"https://github.com/MrRio/shellwrap"	"A simple command line wrapper library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"593"	"39"	"52"	"GitHub - MrRio/shellwrap: Lovely PHP wrapper for using the command-line Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 39 Star 593 Fork 52 MrRio/shellwrap Code Issues 5 Pull requests 0 Pulse Graphs Lovely PHP wrapper for using the command-line 57 commits 1 branch 4 releases Fetching contributors PHP 99.6% Shell 0.4% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.4.1 0.4.0 0.3.0 0.2.0 Nothing to show New pull request Latest commit bf773fc Nov 11, 2014 MrRio Merge pull request #9 from Mihailoff/handling_exceptions_test … Test exceptions behavior Permalink Failed to load latest commit information. bin Use custom exception handler to prettify the interactive output Dec 23, 2013 examples Use custom exception handler to prettify the interactive output Dec 23, 2013 src/MrRio Return actual error message Oct 28, 2014 tests #6 Test exceptions behavior Oct 28, 2014 .gitignore Remove date test, as it's inconsistent on OSX Aug 13, 2013 LICENSE Add composer file and MIT License Oct 15, 2012 README.md Add documentation for streaming command output Oct 25, 2014 composer.json Tidy composer file Dec 22, 2013 README.md ShellWrap What is it? It's a beautiful way to use powerful Linux/Unix tools in PHP. Easily and logically pipe commands together, capture errors as PHP Exceptions and use a simple yet powerful syntax. Works with any command line tool automagically. Features Flexible and sexy syntax. Exceptions are thrown if the executable returns an error. Paths to binaries are automatically resolved. All arguments are properly escaped. Examples <?php  require_once 'vendor/autoload.php'; use MrRio\ShellWrap as sh;  // List all files in current dir echo sh::ls();  // Checkout a branch in git sh::git('checkout', 'master');  // You can also pipe the output of one command, into another // This downloads example.com through cURL, follows location, then pipes through grep to  // filter for 'html' echo sh::grep('html', sh::curl('http://example.com', array(     'location' => true )));  // Touch a file to create it sh::touch('file.html');  // Remove file sh::rm('file.html');  // Remove file again (this fails, and throws an exception because the file doesn't exist)  try {     sh::rm('file.html'); } catch (ShellWrapException $e) {     echo 'Caught failing sh::rm() call'; }   // This throws an exception, as 'invalidoption' is not a valid argument try {     echo sh::ls(array('invalidoption' => true)); } catch (ShellWrapException $e) {     echo 'Caught failing sh::ls() call'; }  // Commands can be written multiple ways sh::git('reset', array('hard' => true), 'HEAD'); sh::git('reset', '--hard', 'HEAD'); sh::git(array('reset', '--hard', 'HEAD'));  // Arguments passed in are automatically escaped, this expands to // date --date '2012-10-10 10:00:00' echo sh::date(array(     'date' => '2012-10-10 10:00:00' ));  // If arg keys are one letter, is assumes one dash prefixing it // date -d '2012-10-10 10:00:00' echo sh::date(array(     'd' => '2012-10-10 10:00:00' ));   ?> Example: Tailing a file and adding timestamps to output You can stream the output of a command into a callback function. For example: sh::tail('-f log', function($in) {     echo ""\033[32m"" . date('Y-m-d H:i:s') . ""\033[39m "" . $in; }); Make sure the file 'log' exists. This will output a timestamp, and the input. Try echoing into the log file. The escape codes are to add a little colour to the terminal. Interactive Shell ShellWrap also ships with an interactive shell mode. You can access this by typing: ./bin/shellwrap  Warning Don't use any user inputted data with these commands. Even with very paranoid filtering, you can't know all the potential pitfalls of each command you're using. Use your noggin. Acknowledgements Inspired by the Python project sh by Andrew Moffat Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MrRio/shellwrap"	"A simple command line wrapper library."	"true"
"Command Line"	"Shunt"	"https://github.com/thephpleague/shunt"	"A library for running commands in parallel on multiple remote machines."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"426"	"22"	"35"	"GitHub - thephpleague/shunt: PHP library for executing commands on multiple remote machines, via SSH Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 426 Fork 35 thephpleague/shunt Code Issues 4 Pull requests 4 Pulse Graphs PHP library for executing commands on multiple remote machines, via SSH 103 commits 1 branch 5 releases 5 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2.1.1 v2.1.0 v2.0.0 v1.0.2 v1.0.1 Nothing to show New pull request Latest commit 5184871 Sep 17, 2014 toopay Merge pull request #12 from aferrandini/fix-use-instructions … Fix typo in use instructions creating Shuntfile Permalink Failed to load latest commit information. bin Overhaul and refactor : Oct 16, 2013 src/League/Shunt Fixed typos Feb 1, 2014 .gitignore Tracking stub Oct 16, 2013 .noninteractive PECL non-interactive mode Oct 11, 2012 .shuntpwd Overhaul and refactor : Oct 16, 2013 .travis.yml Added 5.5 and 5.6 to unit-tests Feb 11, 2014 CHANGELOG.md Update changelog [ci skip] Oct 16, 2013 CONTRIBUTING.md Update contributing doc [ci skip] Oct 16, 2013 LICENSE Switch to MIT Jul 24, 2013 README.md Fix typo in use instructions creating Shuntfile Sep 17, 2014 composer.json Change organization references Jan 23, 2014 phpunit.xml.dist Overhaul and refactor : Oct 16, 2013 travis.xml.dist Change organization references Jan 22, 2014 README.md Shunt Inspired by Ruby's Capistrano, Shunt is PHP library for executing commands on multiple remote machines, via SSH. Specifically, this library was written to simplify and automate deployment of PHP applications to distributed environments. Install Via Composer {     ""require"": {         ""league/shunt"": ""~2.0""     } }  Requirement PHP >= 5.3.3 libssh2 ssh2.so Additional Features Secure copy (SCP) support Secure FTP (SFTP) support Assumptions Shunt has very firm ideas about how things ought to be done, and tries to force those ideas on you. Some of the assumptions behind these opinions are: You are using SSH to access the remote servers. You either have the same password to all target machines, or you have public keys in place to allow passwordless access to them. Do not expect these assumptions to change. Usage In general, you'll use Shunt as follows: Create a recipe file (Shuntfile). Use the shunt script to execute your recipe. From the root folder of your composer-based project, use the Shunt script as follows: vendor/bin/shunt some_task some_host,other_host  By default, the script will look for a file called Shuntfile, which contain hosts information, credential and your tasks. Here the structure of Shuntfile : <?php  return array(      'hosts' => array(         'staging' => 'staging.domain.com',         'repro' => 'backup.domain.com',         'production' => 'production.domain.com',     ),      'auth' => array(         'username' => 'shunt',         'password' => 'hearmyroar',         'pubkeyfile' => NULL,         'privkeyfile' => NULL,         'passphrase' => NULL,     ),      'tasks' => array(         'read_home_dir' => function($s) {             $s->run('ls');         },         'print_php_info' => function($s) {             $s->run('php -i');         },         'upload_foo_source' => function($s) {             $s->sftp()->mkdir('source');             $s->scp()->put('foo', 'source/foo');         }     ), );  The tasks collection indicates which tasks that available to execute. You can execute list command to see all the available tasks and available hosts. Based by above recipes, you could run : vendor/bin/shunt read_home_dir .  Above command will execute ls on all remote machines defined in hosts parameter. You could tell Shunt to run the task on specific host(s) by appending the host nickname right after the task : vendor/bin/shunt read_home_dir staging vendor/bin/shunt print_php_info staging,production  As you may already notice, you could easily access SCP and SFTP instance by calling scp() or sftp() method within your task. Bellow table shows available APIs for both SCP and SFTP instances : Type Method Signature Description SCP put($localFile = '', $remoteFile = '') Send a file from local to remote path SCP get($remoteFile = '', $localFile = '') Get a file from remote to local path SFTP chmod($filename = '', $mode = 0644) Attempts to change the mode of the specified file to that given in mode. SFTP lstat($path = '') Stats a symbolic link on the remote filesystem without following the link. SFTP stat($path = '') Stats a file on the remote filesystem following any symbolic links. SFTP mkdir($dirname = '', $mode = 0777, $recursive = false) Creates a directory on the remote file server with permissions set to mode. SFTP rmdir($dirname = '') Removes a directory from the remote file server. SFTP symlink($target = '',$link = '') Creates a symbolic link named link on the remote filesystem pointing to target. SFTP readlink($link = '') Returns the target of a symbolic link. SFTP realpath($filename = '') Translates filename into the effective real path on the remote filesystem. SFTP rename($from = '', $to = '') Renames a file on the remote filesystem. SFTP unlink($filename = '') Deletes a file on the remote filesystem. Changelog See the changelog file Contributing Please see CONTRIBUTING for details. Support Bugs and feature request are tracked on GitHub License Shunt is released under the MIT License. See the bundled LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/shunt"	"A library for running commands in parallel on multiple remote machines."	"true"
"Authentication and Authorization"	"Hawk"	"https://github.com/dflydev/dflydev-hawk"	"A Hawk HTTP authentication library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"52"	"7"	"7"	"GitHub - dflydev/dflydev-hawk: Hawk — A PHP Implementation Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 52 Fork 7 dflydev/dflydev-hawk Code Issues 3 Pull requests 1 Pulse Graphs Hawk — A PHP Implementation 52 commits 2 branches 1 release Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.0 master Nothing to show v0.0.0 Nothing to show New pull request Latest commit 937fe56 Oct 29, 2015 simensen Merge pull request #8 from thijsvdanker/readme-typos … Fixed some typos in the readme Permalink Failed to load latest commit information. src/Dflydev/Hawk Changed double and single quotes. Apr 23, 2015 tests/unit/Dflydev/Hawk Server bewit authentication. Aug 7, 2013 .gitignore Initial drop. Jul 3, 2013 .scrutinizer.yml Update composer deps a bit, add travis & scrutinizer. Apr 23, 2015 .travis.yml Update composer deps a bit, add travis & scrutinizer. Apr 23, 2015 LICENSE Initial drop. Jul 3, 2013 README.md Fixed some typos in the readme Oct 29, 2015 composer.json Update composer deps a bit, add travis & scrutinizer. Apr 23, 2015 composer.lock Update composer deps a bit, add travis & scrutinizer. Apr 23, 2015 phpunit.xml.dist Initial drop. Jul 3, 2013 README.md Hawk — A PHP Implementation Hawk is an HTTP authentication scheme using a message authentication code (MAC) algorithm to provide partial HTTP request cryptographic verification. — hawk README Installation Through Composer as dflydev/hawk. Client Building a Client The Client has a few required dependencies. It is generally easier to construct a Client by using the ClientBuilder. A Client can be built without setting anything to get sane defaults. Simple ClientBuilder Example <?php  // Simple example $client = Dflydev\Hawk\Client\ClientBuilder::create()     ->build() Complete ClientBuilderExample <?php  // A complete example $client = Dflydev\Hawk\Client\ClientBuilder::create()     ->setCrypto($crypto)     ->setTimeProvider($timeProvider)     ->setNonceProvider($nonceProvider)     ->setLocaltimeOffset($localtimeOffset)     ->build() Creating a Request In order for a client to be able to sign a request, it needs to know the credentials for the user making the request, the URL, method, and optionally payload and content type of the request. All available options include: payload: The body of the request content_type: The content-type for the request nonce: If a specific nonce should be used in favor of one being generated automatically by the nonce provider. ext: An ext value specific for this request app: The app for this request (Oz specific) dlg: The delegated-by value for this request (Oz specific) Create Request Example <?php  $request = $client->createRequest(     $credentials,     'http://example.com/foo/bar?whatever',     'POST',     array(         'payload' => 'hello world!',         'content_type' => 'text/plain',     ) );  // Assuming a hypothetical $headers object that can be used to add new headers // to an outbound request, we can add the resulting 'Authorization' header // for this Hawk request by doing: $headers->set(     $request->header()->fieldName(), // 'Authorization'     $request->header()->fieldValue() // 'Hawk id=""12345"", mac=""ad8c9f', ...' );  The Client Request Object The Request represents everything the client needs to know about a request including a header and the artifacts that were used to create the request. header(): A Header instance that represents the request artifacts(): An Artifacts instance that contains the values that were used in creating the request The header is required to be able to get the properly formatted Hawk authorization header to send to the server. The artifacts are useful in the case that authentication will be done on the server response. Authenticate Server Response Hawk provides the ability for the client to authenticate a server response to ensure that the response sent back is from the intended target. All available options include: payload: The body of the response content_type: The content-type for the response Authenticate Response Example <?php  // Assuming a hypothetical $headers object that can be used to get headers sent // back as the response of a user agent request, we can get the value for the // 'Server-Authorization' header. $header = $headers->get('Server-Authorization');  // We need to use the original credentials, the original request, the value // for the 'Server-Authorization' header, and optionally the payload and // content type of the response from the server. $isAuthenticatedResponse = $client->authenticate(     $credentials,     $request,     $header,     array(         'payload' => '{""message"": ""good day, sir!""}',         'content_type' => 'application/json',     ) ); Complete Client Example <?php  // Create a set of Hawk credentials $credentials = new Dflydev\Hawk\Credentials\Credentials(     'afe89a3x',  // shared key     'sha256',    // default: sha256     '12345'      // identifier, default: null );  // Create a Hawk client $client = Dflydev\Hawk\Client\ClientBuilder::create()     ->build();  // Create a Hawk request based on making a POST request to a specific URL // using a specific user's credentials. Also, we're expecting that we'll // be sending a payload of 'hello world!' with a content-type of 'text/plain'. $request = $client->createRequest(     $credentials,     'http://example.com/foo/bar?whatever',     'POST',     array(         'payload' => 'hello world!',         'content_type' => 'text/plain',     ) );  // Ask a really useful fictional user agent to make a request; note that the // request we are making here matches the details that we told the Hawk client // about our request. $response = Fictional\UserAgent::makeRequest(     'POST',     'http://example.com/foo/bar?whatever',     array(         'content_type' => 'text/plain',         $request->header()->fieldName() => $request->header()->fieldValue(),     ),     'hello world!' );  // This part is optional but recommended! At this point if we have a successful // response we could just look at the content and be done with it. However, we // are given the tools to authenticate the response to ensure that the response // we were given came from the server we were expecting to be talking to. $isAuthenticatedResponse = $client->authenticate(     $credentials,     $request,     $response->headers->get('Server-Authorization'),     array(         'payload' => $response->getContent(),         'content_type' => $response->headers->get('content-type'),     ) );  if (!$isAuthenticatedResponse) {     die(""The server did a very bad thing...""); }  // Huzzah! Bewit Hawk supports a method for granting third-parties temporary access to individual resources using a query parameter called bewit. The return value is a string that represents the bewit. This string should be added to a requested URI by appending it to the end of the URI. If the URI has query parameters already, the bewit should have &bewit= appended to the front of it. If the URI does not have query parameters already, the bewit should have ?bewit= appended to the front of it. Client Bewit Example <?php  $bewit = $client->createBewit(     $credentials,     'https://example.com/posts?foo=bar',     300 // ttl in seconds ); Server Building a Server The Server has a few required dependencies. It is generally easier to construct a Server by using the ServerBuilder. A Server can be built without setting anything but the credentials provider to get sane defaults. Simple ServerBuilder Example <?php  $credentialsProvider = function ($id) {     if ('12345' === $id) {         return new Dflydev\Hawk\Credentials\Credentials(             'afe89a3x',  // shared key             'sha256',    // default: sha256             '12345'      // identifier, default: null         );     } };  // Simple example $server = Dflydev\Hawk\Server\ServerBuilder::create($credentialsProvider)     ->build() Complete ServerBuilderExample <?php  $credentialsProvider = function ($id) {     if ('12345' === $id) {         return new Dflydev\Hawk\Credentials\Credentials(             'afe89a3x',  // shared key             'sha256',    // default: sha256             '12345'      // identifier, default: null         );     } };  // A complete example $server = Dflydev\Hawk\Server\ServerBuilder::create($credentialsProvider)     ->setCrypto($crypto)     ->setTimeProvider($timeProvider)     ->setNonceValidator($nonceValidator)     ->setTimestampSkewSec($timestampSkewSec)     ->setLocaltimeOffsetSec($localtimeOffsetSec)     ->build() Authenticating a Request In order for a server to be able to authenticate a request, it needs to be able to build the same MAC that the client did. It does this by getting the same information about the request that the client knew about when it signed the request. In particular, the authorization header should include the ID. This ID is used to retrieve the credentials (notably the key) in order to calculate the MAC based on the rest of the request information. Authenticate Example <?php  // Get the authorization header for the request; it should be in the form // of 'Hawk id=""..."", mac=""..."", [...]' $authorization = $headers->get('Authorization');  try {     $response = $server->authenticate(         'POST',         'example.com',         80,         '/foo/bar?whatever',         'text/plain',         'hello world!'         $authorization     ); } catch(Dflydev\Hawk\Server\UnauthorizedException $e) {     // If authorization is incorrect (invalid mac, etc.) we can catch an     // unauthorized exception.     throw $e; }  // The credentials associated with this request. This is where one could access // the ID for the user that made this request. $credentials = $response->credentials();  // The artifacts associated with this request. This is where one could access // things like the 'ext', 'app', and 'dlg' values sent with the request. $artifacts = $response->artifacts(); The Server Response Object The Response represents everything the server needs to know about a request including the credentials and artifacts that are associated with the request. credentials() artifacts() Creating a Response Header Hawk provides the ability for the server to sign the response to provide the client with a way to authenticate a server response. All available options include: payload: The body of the request content_type: The content-type for the request ext: An ext value specific for this request Create Response Header Example <?php  // Using the same credentials and artifacts from the server authenticate // response, we can create a 'Server-Authorization' header. $header = $server->createHeader($credentials, $artifacts, array(     'payload' => '{""message"": ""good day, sir!""}',     'content_type' => 'application/json', ));  // Set the header using PHP's header() function. header(sprintf(""%s: %s"", $header->fieldName(), $header->fieldValue())); Complete Server Example <?php  // Create a simple credentials provider $credentialsProvider = function ($id) {     if ('12345' === $id) {         return new Dflydev\Hawk\Credentials\Credentials(             'afe89a3x',  // shared key             'sha256',    // default: sha256             '12345'      // identifier, default: null         );     } };  // Create a Hawk server $server = Dflydev\Hawk\Server\ServerBuilder::create($credentialsProvider)     ->build()  // Get the authorization header for the request; it should be in the form // of 'Hawk id=""..."", mac=""..."", [...]' $authorization = $headers->get('Authorization');  try {     $response = $server->authenticate(         'POST',         'example.com',         80,         '/foo/bar?whatever',         'text/plain',         'hello world!'         $authorization     ); } catch(Dflydev\Hawk\Server\UnauthorizedException $e) {     // If authorization is incorrect (invalid mac, etc.) we can catch an     // unauthorized exception.     throw $e; }  // Huzzah! Do something at this point with the request as we now know that // it is an authenticated Hawk request. // // ... // // Ok we are done doing things! Assume based on what we did we ended up deciding // the following payload and content type should be used:  $payload = '{""message"": ""good day, sir!""}'; $contentType = 'application/json';  // Create a Hawk header to sign our response $header = $server->createHeader($credentials, $artifacts, array(     'payload' => $payload,     'content_type' => $contentType, ));  // Send some headers header(sprintf(""%s: %s"", 'Content-Type', 'application/json')); header(sprintf(""%s: %s"", $header->fieldName(), $header->fieldValue()));  // Output our payload print $payload; Bewit Hawk supports a method for granting third-parties temporary access to individual resources using a query parameter called bewit. Bewit authentication should only occur for GET and HEAD requests. The return value of an authenticated bewit is a Server Response object. Server Bewit Example <?php  $response = $server->authenticateBewit(     'example.com',     443,     '/posts?bewit=ZXhxYlpXdHlrRlpJaDJEN2NYaTlkQVwxMzY4OTk2ODAwXE8wbWhwcmdvWHFGNDhEbHc1RldBV3ZWUUlwZ0dZc3FzWDc2dHBvNkt5cUk9XA' ); Crypto Dflydev\Hawk\Crypto\Crypto Tools for calculation of and comparison of MAC values. calculatePayloadHash($payload, $algorithm, $contentType) calculateMac($type, CredentialsInterface $credentials, Artifacts $attributes) calculateTsMac($ts, CredentialsInterface $credentials) fixedTimeComparison($a, $b) Used to ensure that the comparing two strings will always take the same amount of time regardless of whether they are the same or not. Dflydev\Hawk\Crypto\Artifacts A container for all of the pieces of data that may go into the creation of a MAC. Credentials Dflydev\Hawk\Credentials\CredentialsInterface Represents a valid set of credentials. key(): Used to calculate the MAC algorithm(): The algorithm used to calculate hashes id(): An identifier (e.g. username) for whom the key belongs In some contexts only the key may be known. Dflydev\Hawk\Credentials\Credentials A simple implementation of CredentialsInterface. <?php  $credentials = new Dflydev\Hawk\Credentials\Credentials(     $key,        // shared key     $algorithm,  // default: sha256     $id          // identifier, default: null );  Header Dflydev\Hawk\Header\Header fieldName(): The name for the header field fieldValue(): The value for the header field attributes(): The attributes used to build the field value Dflydev\Hawk\Header\HeaderFactory create($fieldName, array $attributes = null) Creates a Hawk header for a given field name for a set of attributes. createFromString($fieldName, $fieldValue, array $requiredKeys = null) Creates a Hawk header for a given field name from a Hawk value string. For example, 'Hawk id=""foo"", mac=""1234""' would be an example of a Hawk value string. This is useful for converting a header value coming in off the wire. Throws: Dflydev\Hawk\Header\FieldValueParserException Dflydev\Hawk\Header\NotHawkAuthorizationException Dflydev\Hawk\Header\HeaderParser parseFieldValue($fieldValue, array $requiredKeys = null) Parses a field value string into an associative array of attributes. Throws: Dflydev\Hawk\Header\FieldValueParserException Dflydev\Hawk\Header\NotHawkAuthorizationException Dflydev\Hawk\Header\FieldValueParserException Indicates that a string claims to be a Hawk string but it cannot be completely parsed. This is mostly a sign of a corrupted or malformed header value. Dflydev\Hawk\Header\NotHawkAuthorizationException Indicates that the string has nothing to do with Hawk. Currently means that the string does not start with 'Hawk'. License MIT, see LICENSE. Community If you have questions or want to help out, join us in #dflydev on irc.freenode.net. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dflydev/dflydev-hawk"	"A Hawk HTTP authentication library."	"true"
"Authentication and Authorization"	"HybridAuth"	"https://github.com/hybridauth/hybridauth"	"An open source social sign on library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2183"	"247"	"858"	"GitHub - hybridauth/hybridauth: Open source social sign on PHP Library. HybridAuth goal is to act as an abstract api between your application and various social apis and identities providers such as Facebook, Twitter and Google. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 247 Star 2,183 Fork 858 hybridauth/hybridauth Code Issues 113 Pull requests 7 Wiki Pulse Graphs Open source social sign on PHP Library. HybridAuth goal is to act as an abstract api between your application and various social apis and identities providers such as Facebook, Twitter and Google. http://hybridauth.github.io/hybridauth 776 commits 4 branches 16 releases 141 contributors PHP 98.1% HTML 1.9% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.0.0-Remake 3.0.0 gh-pages master Nothing to show v2.6.0 v2.5.0 v2.4.1 v2.4.0 v2.4.0-examples v2.3.0 v2.2.2 v2.2.1 v2.2.0 v2.1.1 v2.1.0 v2.0.11 v2.0.10 v2.0.9 v2.0.8 2.5.1 Nothing to show New pull request Latest commit 36e9a78 Jul 7, 2016 StorytellerCZ committed on GitHub Merge pull request #657 from oliverde8/patch-1 … Fixed issue with empty redirect mode configuration preventing redirection. Permalink Failed to load latest commit information. additional-providers Update Dataporten.php Jul 5, 2016 hybridauth Fixed issue with empty redirect mode configuration preventing redirec… Jul 1, 2016 .gitignore Updated gitignore and changelog Jun 30, 2016 CHANGELOG Updated gitignore and changelog Jun 30, 2016 README.md Changelog for #612 Feb 7, 2016 composer.json remove an extra trailing comma Mar 27, 2015 contributing.md Missed typo May 24, 2014 README.md HybridAuth 2.7.0-dev HybridAuth enables developers to easily build social applications and tools to engage websites visitors and customers on a social level by implementing social sign-in, social sharing, users profiles, friends list, activities stream, status updates and more. The main goal of HybridAuth is to act as an abstract API between your application and various social apis and identities providers such as Facebook, Twitter and Google. Repository HybridAuth repository is made up of several projects: HybridAuth Core library includes OpenID, Facebook, Twitter, LinkedIn, Google, Yahoo, Windows Live, Foursquare and AOL. The additional providers project contains many others services which you may want to use. Getting Started We highly recommend that you download and use the latest release from https://github.com/hybridauth/hybridauth/releases You can find complete documentation for HybridAuth at http://hybridauth.sourceforge.net Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hybridauth/hybridauth"	"An open source social sign on library."	"true"
"Authentication and Authorization"	"Json Web Token"	"https://github.com/lcobucci/jwt"	"Json Tokens to authenticate and transmit information."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"713"	"47"	"86"	"GitHub - lcobucci/jwt: A simple library to work with JSON Web Token and JSON Web Signature Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 47 Star 713 Fork 86 lcobucci/jwt Code Issues 15 Pull requests 3 Pulse Graphs A simple library to work with JSON Web Token and JSON Web Signature 167 commits 5 branches 16 releases 16 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.1 3.0 3.1 master refactor/validator-extraction Nothing to show 3.1.1 3.1.0 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 2.1.2 2.1.1 2.1.0 2.0.0 1.1.0 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit c1d2433 Jun 13, 2016 lcobucci committed on GitHub Merge pull request #95 from lcobucci/fix/mutant-party … Removing some bad mutations Permalink Failed to load latest commit information. src Killing some mutants. Jun 13, 2016 test Killing some mutants. Jun 13, 2016 .gitignore Removing composer.lock. Dec 20, 2015 .scrutinizer.yml Using external coverage (and keeping track of just unit tests coverage). Apr 16, 2016 .travis.yml Using external coverage (and keeping track of just unit tests coverage). Apr 16, 2016 CONTRIBUTING.md Extracting Encoder and Decoder to another library (closes #38). Sep 11, 2015 LICENSE Updated copyright to 2016 Jan 2, 2016 README.md Adding a small notification to help new users. Jun 13, 2016 composer.json Using external coverage (and keeping track of just unit tests coverage). Apr 16, 2016 humbug.json.dist Adding padriac/humbug configuration file. Jun 13, 2016 phpunit.xml.dist Adding padriac/humbug configuration file. Jun 13, 2016 README.md JWT A simple library to work with JSON Web Token and JSON Web Signature based on the RFC 7519. Installation Package is available on Packagist, you can install it using Composer. composer require lcobucci/jwt Dependencies PHP 5.5+ (v3.1) and PHP 7 (v4.x) OpenSSL Extension Basic usage Important: this is the documentation of our next major release (v4) and it WILL change. If you are using the stable version you should go to branch 3.1. Creating Just use the builder to create a new JWT/JWS tokens: use Lcobucci\JWT\Configuration;  $config = new Configuration(); // This object helps to simplify the creation of the dependencies                                // instead of using ""?:"" on constructors.  $token = $config->createBuilder()                 ->setIssuer('http://example.com') // Configures the issuer (iss claim)                 ->setAudience('http://example.org') // Configures the audience (aud claim)                 ->setId('4f1g23a12aa', true) // Configures the id (jti claim), replicating as a header item                 ->setIssuedAt(time()) // Configures the time that the token was issue (iat claim)                 ->setNotBefore(time() + 60) // Configures the time that the token can be used (nbf claim)                 ->setExpiration(time() + 3600) // Configures the expiration time of the token (exp claim)                 ->set('uid', 1) // Configures a new claim, called ""uid""                 ->getToken(); // Retrieves the generated token   $token->getHeaders(); // Retrieves the token headers $token->getClaims(); // Retrieves the token claims  echo $token->getHeader('jti'); // will print ""4f1g23a12aa"" echo $token->getClaim('iss'); // will print ""http://example.com"" echo $token->getClaim('uid'); // will print ""1"" echo $token; // The string representation of the object is a JWT string (pretty easy, right?) Parsing from strings Use the parser to create a new token from a JWT string (using the previous token as example): use Lcobucci\JWT\Configuration;  $config = new Configuration(); $token = $config->getParser()->parse((string) $token); // Parses from a string $token->getHeaders(); // Retrieves the token header $token->getClaims(); // Retrieves the token claims  echo $token->getHeader('jti'); // will print ""4f1g23a12aa"" echo $token->getClaim('iss'); // will print ""http://example.com"" echo $token->getClaim('uid'); // will print ""1"" Validating We can easily validate if the token is valid (using the previous token as example): use Lcobucci\JWT\ValidationData;  $data = new ValidationData(); // It will use the current time to validate (iat, nbf and exp) $data->setIssuer('http://example.com'); $data->setAudience('http://example.org'); $data->setId('4f1g23a12aa');  var_dump($token->validate($data)); // false, because token cannot be used before of now() + 60  $data->setCurrentTime(time() + 61); // changing the validation time to future  var_dump($token->validate($data)); // true, because current time is between ""nbf"" and ""exp"" claims  $data->setCurrentTime(time() + 4000); // changing the validation time to future  var_dump($token->validate($data)); // false, because token is expired since current time is greater than exp Important You have to configure ValidationData informing all claims you want to validate the token. If ValidationData contains claims that are not being used in token or token has claims that are not configured in ValidationData they will be ignored by Token::validate(). exp, nbf and iat claims are configured by default in ValidationData::__construct() with the current UNIX time (time()). Token signature We can use signatures to be able to verify if the token was not modified after its generation. This library implements Hmac, RSA and ECDSA signatures (using 256, 384 and 512). Important Do not allow the string sent to the Parser to dictate which signature algorithm to use, or else your application will be vulnerable to a critical JWT security vulnerability. The examples below are safe because the choice in Signer is hard-coded and cannot be influenced by malicious users. Hmac Hmac signatures are really simple to be used: use Lcobucci\JWT\Configuration;  $config = new Configuration(); $signer = $config->getSigner(); // Default signer is HMAC SHA256  $token = $config->createBuilder()                 ->setIssuer('http://example.com') // Configures the issuer (iss claim)                 ->setAudience('http://example.org') // Configures the audience (aud claim)                 ->setId('4f1g23a12aa', true) // Configures the id (jti claim), replicating as a header item                 ->setIssuedAt(time()) // Configures the time that the token was issue (iat claim)                 ->setNotBefore(time() + 60) // Configures the time that the token can be used (nbf claim)                 ->setExpiration(time() + 3600) // Configures the expiration time of the token (exp claim)                 ->set('uid', 1) // Configures a new claim, called ""uid""                 ->sign($signer, 'testing') // creates a signature using ""testing"" as key                 ->getToken(); // Retrieves the generated token   var_dump($token->verify($signer, 'testing 1')); // false, because the key is different var_dump($token->verify($signer, 'testing')); // true, because the key is the same RSA and ECDSA RSA and ECDSA signatures are based on public and private keys so you have to generate using the private key and verify using the public key: use Lcobucci\JWT\Signer\Key; use Lcobucci\JWT\Signer\Rsa\Sha256; // you can use Lcobucci\JWT\Signer\Ecdsa\Sha256 if you're using ECDSA keys  $config = new Configuration(); $config->setSigner(new Sha256()); // Change the signer to RSA SHA256  $signer = $config->getSigner(); $privateKey = new Key('file://{path to your private key}');  $token = $config->createBuilder()                 ->setIssuer('http://example.com') // Configures the issuer (iss claim)                 ->setAudience('http://example.org') // Configures the audience (aud claim)                 ->setId('4f1g23a12aa', true) // Configures the id (jti claim), replicating as a header item                 ->setIssuedAt(time()) // Configures the time that the token was issue (iat claim)                 ->setNotBefore(time() + 60) // Configures the time that the token can be used (nbf claim)                 ->setExpiration(time() + 3600) // Configures the expiration time of the token (exp claim)                 ->set('uid', 1) // Configures a new claim, called ""uid""                 ->sign($signer,  $privateKey) // creates a signature using your private key                 ->getToken(); // Retrieves the generated token  $publicKey = new Key('file://{path to your public key}');  var_dump($token->verify($signer, $publicKey)); // true when the public key was generated by the private one =) It's important to say that if you're using RSA keys you shouldn't invoke ECDSA signers (and vice-versa), otherwise sign() and verify() will raise an exception! Security Because of the awesome guys of Paragon Initiative and the PHP community's support we had a security audit for this library (thanks a lot guys)! Check the result here! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lcobucci/jwt"	"Json Tokens to authenticate and transmit information."	"true"
"Authentication and Authorization"	"Lock"	"https://github.com/BeatSwitch/lock"	"A library for implementing Access Control Lists (ACL) systems."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"897"	"66"	"69"	"GitHub - BeatSwitch/lock: A flexible, driver based Acl package for PHP 5.4+ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 66 Star 897 Fork 69 BeatSwitch/lock Code Issues 20 Pull requests 3 Pulse Graphs A flexible, driver based Acl package for PHP 5.4+ 126 commits 1 branch 4 releases 6 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.2.0 0.1.0 0.1.0-alpha.2 0.1.0-alpha.1 Nothing to show New pull request Latest commit 8d690d0 Oct 27, 2015 driesvints Add unmaintained notice Permalink Failed to load latest commit information. spec Added some more tests Sep 11, 2015 src Add ability to clear all permissions Sep 16, 2015 stubs Refactor conditions Dec 5, 2014 tests PermissionFactory can now create from object Dec 17, 2014 .gitattributes Revert ""Move tests back to testing folder"" Dec 17, 2014 .gitignore Implemented a $lock->clear method Sep 10, 2015 .travis.yml Use Code Climate for static analysis Sep 6, 2015 changelog.md Add ability to clear all permissions Sep 16, 2015 composer.json Added 0.3-dev branch alias against dev-master Sep 16, 2015 contributing.md Update changelog Dec 1, 2014 license.md Update license May 18, 2015 phpspec.yml Add scrutinizer config file Dec 1, 2014 phpunit.xml Exclude Tests folder from scrutinizer and CC Dec 17, 2014 readme.md Add unmaintained notice Oct 27, 2015 readme.md Lock - Acl for PHP 5.4+ I'm sad to say that Lock is currently not maintained. I won't be able to offer support or accept new contributions for the current time being. Other priorities are keeping me from putting the work into Lock that it deserves. Eventually I'll try to pick up work again but unfortunately I cannot say when. My thanks goes out to all the contributors and users. -- Dries Lock is a flexible, driver based Acl package for PHP 5.4+. Created by Dries Vints. Made possible thanks to BeatSwitch. Inspired by Authority by Matthew Machuga. Logo by Jerry Low. Table of Contents Terminology Features Introduction Drivers Roadmap Installation Usage Implementing the Caller contract Working with a static driver Working with a persistent driver Setting and checking permissions Clearing permissions Setting an action alias Setting a God caller Working with roles Working with conditions Retrieving allowed or denied resources Using the LockAware trait Api Building a driver Testing your driver Maintainer Contributing Changelog License Terminology Lock: An acl instance for a subject. This package currently ships with a CallerLock and a RoleLock Caller: An identity object that can have permissions to do something Driver: A storage system for permissions which can either be static or persistent Permission: A permission holds an action and an optional (unique) resource. Can be either a Restriction or a Privilege Restriction: A restriction denies you from being able to perform an action (on an optional resource) Privilege: A privilege allows you to perform an action (on an optional resource) Action: An action is something you are either allowed or denied to do Resource: A resource can be an object where you can perform one or more actions on. It can either target a certain type of resource or a specific resource by its unique identifier Role: A role can also hold multiple permissions. A caller can have multiple roles. Roles can inherit permissions from other roles Features Flexible acl permissions for multiple identities (callers) Static or persistent drivers to store permissions Action aliases Roles Conditions (Asserts) Easily implement acl functionality on your caller or role with a trait Introduction Lock differs from other acl packages by trying to provide the most flexible way for working with multiple permission callers and storing permissions. By working with Lock's Caller contract you can set permissions on multiple identities. The Driver contract allows for an easy way to store permissions to a persistent or static storage system. A default static ArrayDriver ships with this package. Check out the list below for more drivers which have already been prepared for you. Or build your own by implementing the Driver contract. You can set and check permissions for resources by manually passing along a resource's type and (optional) identifier or you can implement the Resource contract onto your objects so you can pass them along to lock more easily. The Manager allows for an easy way to instantiate new Lock instances, set action aliases or register roles. Drivers If you need a framework-specific implementation, pick one of the already prepared drivers below. ArrayDriver (ships with this package) Laravel 5 Roadmap Group Permissions More drivers (Symfony, Zend Framework, Doctrine, ...) Event Listeners Installation Install this package through Composer. $ composer require beatswitch/lock Usage Implementing the Caller contract Every identity which should have permissions to do something must implement the BeatSwitch\Lock\Callers\Caller contract. The Caller contract identifies a caller by requiring it to return its type and its unique identifier. Let's look at an example below. <?php  use BeatSwitch\Lock\Callers\Caller;  class User implements Caller {     public function getCallerType()     {         return 'users';     }      public function getCallerId()     {         return $this->id;     }      public function getCallerRoles()     {         return ['editor', 'publisher'];     } } By adding the getCallerType function we can identify a group of callers through a unique type. If we would at some point wanted to set permissions on another group of callers we could easily implement the contract on another object. <?php  use BeatSwitch\Lock\Callers\Caller;  class Organization implements Caller {     public function getCallerType()     {         return 'organizations';     }      public function getCallerId()     {         return $this->id;     }      public function getCallerRoles()     {         return ['enterprise'];     } } And thus we can easily retrieve permissions for a specific caller type through a driver. Working with a static driver If you'd like to configure all of your permissions beforehand you can use the static ArrayDriver which ships with the package. This allows you to set a list of permissions for a caller before your application is run. use \BeatSwitch\Lock\Drivers\ArrayDriver; use \BeatSwitch\Lock\Lock; use \BeatSwitch\Lock\Manager;  // Create a new Manager instance. $manager = new Manager(new ArrayDriver());  // Instantiate a new Lock instance for an object which implements the Caller contract. $lock = $manager->caller($caller);  // Set some permissions. $lock->allow('manage_settings'); $lock->allow('create', 'events');  // Use the Lock instance to validate permissions on the given caller. $lock->can('manage_settings'); // true: can manage settings $lock->can('create', 'events'); // true: can create events $lock->cannot('update', 'events'); // true: cannot update events $lock->can('delete', 'events'); // false: cannot delete events Working with a persistent driver Working with a persistent driver allows you to store permissions to a persistent storage layer and adjust them during runtime. For example, if you'd implement the Laravel 5 driver, it would store the permissions to a database using Laravel's database component. By creating your own UI, you could easily attach the acl functionality from this package to create, for example, a user management system where different users have different permissions. Let's take a look at a very basic user management controller to see how that's done. We'll assume we get a bootstrapped lock manager instance with our Laravel DB driver. <?php  use BeatSwitch\Lock\Manager;  class UserManagementController extends BaseController {     protected $lockManager;      public function __construct(Manager $lockManager)     {         $this->lockManager = $lockManager;     }      public function togglePermission()     {         $userId = Input::get('user');         $action = Input::get('action');         $resource = Input::get('resource');          $user = User::find($userId);          $this->lockManager->caller($user)->toggle($action, $resource);          return Redirect::route('user_management');     } } Every time the togglePermission method is used, the user's permission for the given action and resource type will be toggled. Setting and checking permissions You can either allow or deny a caller from doing something. Here are a couple of ways to set and check permissions. Allow a caller to create everything. $lock->allow('create');  $lock->can('create'); // true Allow a caller to only create posts. $lock->allow('create', 'posts');  $lock->can('create'); // false $lock->can('create', 'posts'); // true Allow a caller to only edit a specific post with an ID of 5. $lock->allow('edit', 'posts', 5);  $lock->can('edit'); // false $lock->can('edit', 'posts'); // false $lock->can('edit', 'posts', 5); // true Allow a caller to edit all posts but deny them from editing one with the id of 5. $lock->allow('edit', 'posts'); $lock->deny('edit', 'posts', 5);  $lock->can('edit', 'posts'); // true $lock->can('edit', 'posts', 5); // false Toggle a permission's value. $lock->allow('create'); $lock->can('create'); // true  $lock->toggle('create'); $lock->can('create'); // false You can allow or deny multiple actions at once and also check multiple actions at once. $lock->allow(['create', 'edit'], 'posts');  $lock->can('create', 'posts'); // true $lock->can(['create', 'edit'], 'posts'); // true $lock->can(['create', 'delete'], 'posts'); // false Clearing permissions You can easily clear permissions for a set specific combination of actions and resources. $lock->allow(['create', 'edit'], 'posts');  $lock->clear('edit', 'posts');  $lock->can('edit', 'posts'); // false $lock->can('create', 'posts'); // true You can also just clear all permissions for a lock instance. $lock->allow('manage-posts'); $lock->allow(['create', 'edit'], 'users');  $lock->clear();  $lock->can('manage-posts'); // false $lock->can('create', 'users'); // false Setting an action alias To group multiple actions and set them all at once you might want to set an action alias. $lock->alias('manage', ['create', 'read', 'delete']); $lock->allow('manage', 'posts');  $lock->can('manage', 'posts'); // true $lock->can('create', 'posts'); // true $lock->can('delete', 'posts', 1); // true $lock->can('update', 'posts'); // false Setting a God caller You could easily set a caller which has all permissions for everything by passing the all wildcard as an action on the lock instance. $lock->allow('all'); Now every ""can"" method call will validate to true for this caller. Working with roles Lock provides an easy way to working with roles. You can work with roles out of the box but if you want to work with inheritance, you'll need to register the roles to the manager instance. $manager->setRole('guest'); $manager->setRole('user', 'guest'); // ""user"" will inherit all permissions from ""guest"" Or register multiple roles at once. $manager->setRole(['editor', 'admin'], 'user'); // ""editor"" and ""admin"" will inherit all permissions from ""user"". Let's set some permissions and see how they are resolved. // Allow a guest to read everything. $manager->role('guest')->allow('guest', 'read');  // Allow a user to create posts. $manager->role('user')->allow('create', 'posts');  // Allow an editor and admin to publish posts. $manager->role('editor')->allow('publish', 'posts'); $manager->role('admin')->allow('publish', 'posts');  // Allow an admin to delete posts. $manager->role('admin')->allow('delete', 'posts');  // Let's assume our caller has the role of ""editor"" and check some permissions. $lock = $manager->caller($caller); $lock->can('read'); // true $lock->can('delete', 'posts'); // false $lock->can('publish'); // false: we can't publish everything, just posts. $lock->can(['create', 'publish'], 'posts'); // true Something you need to be aware of is that caller-level permissions supersede role-level permissions. Let's see how that works. Our caller will have the user role. $manager->caller($caller)->allow('create', 'posts');  // Notice that we don't need to set the role in the // manager first if we don't care about inheritance. $manager->role('user')->deny('user', 'create', 'posts');  $manager->caller($caller)->can('create', 'posts'); // true: the user has explicit permission to create posts. Working with conditions Conditions are actually asserts which are extra checks you can set for permissions. You can pass an array with them as the last parameter of allow and deny. All conditions must implement the BeatSwitch\Lock\Permissions\Condition interface. Warning: please note that conditions currently only work with static drivers. Let's setup a condition. <?php  use BeatSwitch\Lock\Lock; use BeatSwitch\Lock\Permissions\Condition; use BeatSwitch\Lock\Permissions\Permission; use BeatSwitch\Lock\Resources\Resource; use Illuminate\Auth\AuthManager;  class LoggedInCondition implements Condition {     /**  * The Laravel AuthManager instance  *  * @var \Illuminate\Auth\AuthManager  */     protected $auth;      /**  * @param \Illuminate\Auth\AuthManager $auth  */     public function __construct(AuthManager $auth)     {         $this->auth = $auth;     }      /**  * Assert if the condition is correct  *  * @param \BeatSwitch\Lock\Lock $lock The current Lock instance that's being used  * @param \BeatSwitch\Lock\Permissions\Permission $permission The Permission that's being checked  * @param string $action The action passed to the can or cannot method  * @param \BeatSwitch\Lock\Resources\Resource|null $resource The resource passed to the can or cannot method  * @return bool  */     public function assert(Lock $lock, Permission $permission, $action, Resource $resource = null)     {         // Condition will succeed if the user is logged in.         return $this->auth->check();     } } Now let's see how this will work when setting up a permission. $condition = App::make('LoggedInCondition');  $lock->allow('create', 'posts', null, $condition); $lock->can('create', 'posts'); // true if logged in, otherwise false. You can also pass along multiple conditions. $lock->allow('create', 'posts', null, [$falseCondition, $trueCondition]); $lock->can('create', 'posts'); // false: there's at least one false condition You can pass along as many conditions as you like but they all need to succeed in order for the permission to work. You can also use a callback if you like. $lock->allow('create', 'posts', null, function ($lock, $permission, $action, $resource = null) {     return false; }); $lock->can('create', 'posts'); // false because the callback returns false. Retrieving allowed or denied resources If you'd like to retrieve a list of resources which are allowed or denied to perform a particularly action you can use the allowed and denied methods on a Lock instance. $lock->allow('update', 'users', 1); $lock->allow('update', 'users', 2); $lock->allow('update', 'users', 3); $lock->deny('update', 'users', 2);  $lock->allowed('update', 'users'); // Returns [1, 3]; $lock->denied('update', 'users'); // Returns [2]; Please keep in mind that you can only retrieve id's from resources which have permissions set. Resources which aren't registered through Lock won't be returned. Using the LockAware trait You can easily add acl functionality to your caller or role by implementing the BeatSwitch\Lock\LockAware trait. <?php  use BeatSwitch\Lock\Callers\Caller; use BeatSwitch\Lock\LockAware;  class Organization implements Caller {     use LockAware;      public function getCallerType()     {         return 'organizations';     }      public function getCallerId()     {         return $this->id;     }      public function getCallerRoles()     {         return ['enterprise'];     } } Now we need to set its lock instance. $caller->setLock($lock); And now your caller can use all of the lock methods onto itself. $caller->can('create', 'posts'); $caller->allow('edit', 'pages'); If you have a caller which implements the LockAware trait but haven't bootstrapped the caller's lock instance yet you can easily make the caller lock aware by using the manager's makeCallerLockAware method. $caller = $manager->makeCallerLockAware($caller); And now your caller will be able to use the LockAware methods. There's a similar method for roles. $role = $manager->makeRoleLockAware('guest'); This will bootstrap a SimpleRole object which already comes with the LockAware trait in place. Api BeatSwitch\Lock\Lock The following methods can all be called on a BeatSwitch\Lock\Lock instance. can Checks to see if the current caller has permission to do something. can(     string|array $action,     string|\BeatSwitch\Lock\Resources\Resource $resource = null,     int $resourceId = null )  cannot Checks to see if it's forbidden for the current caller to do something. cannot(     string|array $action,     string|\BeatSwitch\Lock\Resources\Resource $resource = null,     int $resourceId = null )  allow Sets a Privilege permission on a caller to allow it to do something. Removes any matching restrictions. allow(     string|array $action,     string|\BeatSwitch\Lock\Resources\Resource $resource = null,     int $resourceId = null,     \BeatSwitch\Lock\Permissions\Condition[] $conditions = [] )  deny Sets a Restriction permission on a caller to prevent it from doing something. Removes any matching privileges. deny(     string|array $action,     string|\BeatSwitch\Lock\Resources\Resource $resource = null,     int $resourceId = null,     \BeatSwitch\Lock\Permissions\Condition[] $conditions = [] )  toggle Toggles the value for the given permission. toggle(     string|array $action,     string|\BeatSwitch\Lock\Resources\Resource $resource = null,     int $resourceId = null )  allowed Returns all the id's in an array of the given resource type to which the subject is allowed to perform the given action on. allowed(     string|array $action,     string|\BeatSwitch\Lock\Resources\Resource $resourceType )  denied Returns all the id's in an array of the given resource type to which the subject is denied to perform the given action on. denied(     string|array $action,     string|\BeatSwitch\Lock\Resources\Resource $resourceType )  BeatSwitch\Lock\Manager The following methods can all be called on a BeatSwitch\Lock\Manager instance. caller Returns a BeatSwitch\Lock\Lock instance for a caller. caller(     \BeatSwitch\Lock\Callers\Caller $caller )  role Returns a BeatSwitch\Lock\Lock instance for a role. role(     \BeatSwitch\Lock\Roles\Role $role )  alias Add an alias for one or more actions. alias(     string $name,     string|array $actions )  setRole Set one or more roles and an optional role to inherit permissions from. setRole(     string|array $name,     string $inherit = null )  makeCallerLockAware Sets the lock instance for a caller which implements the LockAware trait. Returns the caller with the lock instance set. makeCallerLockAware(     \BeatSwitch\Lock\Callers\Caller $caller )  makeRoleLockAware Sets the lock instance for a role which implements the LockAware trait. Returns the role with the lock instance set. makeRoleLockAware(     \BeatSwitch\Lock\Roles\Role|string $role )  Building a driver You can easily build a driver by implementing the BeatSwitch\Lock\Drivers\Driver contract. Below we'll demonstrate how to create our own persistent driver using Laravel's Eloquent ORM as our storage mechanism. We'll assume we have a CallerPermission model class with at least the following database columns: caller_type (varchar, 100) caller_id (int, 11) type (varchar, 10) action (varchar, 100) resource_type (varchar, 100, nullable) resource_id (int, 11, nullable) And we have a RolePermission model with the following database columns: role (varchar, 100) type (varchar, 10) action (varchar, 100) resource_type (varchar, 100, nullable) resource_id (int, 11, nullable) Let's check out a full implementation of the driver below. Notice that for the getCallerPermissions method we're using the PermissionFactory class to easily map the data and create Permission objects from them. The PermissionFactory's createFromData method will accept both arrays and objects. <?php  use BeatSwitch\Lock\Callers\Caller; use BeatSwitch\Lock\Drivers\Driver; use BeatSwitch\Lock\Permissions\Permission; use BeatSwitch\Lock\Permissions\PermissionFactory; use BeatSwitch\Lock\Roles\Role; use CallerPermission; use RolePermission;  class EloquentDriver implements Driver {     /**  * Returns all the permissions for a caller  *  * @param \BeatSwitch\Lock\Callers\Caller $caller  * @return \BeatSwitch\Lock\Permissions\Permission[]  */     public function getCallerPermissions(Caller $caller)     {         $permissions = CallerPermission::where('caller_type', $caller->getCallerType())             ->where('caller_id', $caller->getCallerId())             ->get();          return PermissionFactory::createFromData($permissions->toArray());     }      /**  * Stores a new permission into the driver for a caller  *  * @param \BeatSwitch\Lock\Callers\Caller $caller  * @param \BeatSwitch\Lock\Permissions\Permission  * @return void  */     public function storeCallerPermission(Caller $caller, Permission $permission)     {         $eloquentPermission = new CallerPermission;         $eloquentPermission->caller_type = $caller->getCallerType();         $eloquentPermission->caller_id = $caller->getCallerId();         $eloquentPermission->type = $permission->getType();         $eloquentPermission->action = $permission->getAction();         $eloquentPermission->resource_type = $permission->getResourceType();         $eloquentPermission->resource_id = $permission->getResourceId();         $eloquentPermission->save();     }      /**  * Removes a permission from the driver for a caller  *  * @param \BeatSwitch\Lock\Callers\Caller $caller  * @param \BeatSwitch\Lock\Permissions\Permission  * @return void  */     public function removeCallerPermission(Caller $caller, Permission $permission)     {         CallerPermission::where('caller_type', $caller->getCallerType())             ->where('caller_id', $caller->getCallerId())             ->where('type', $permission->getType())             ->where('action', $permission->getAction())             ->where('resource_type', $permission->getResourceType())             ->where('resource_id', $permission->getResourceId())             ->delete();     }      /**  * Checks if a permission is stored for a user  *  * @param \BeatSwitch\Lock\Callers\Caller $caller  * @param \BeatSwitch\Lock\Permissions\Permission  * @return bool  */     public function hasCallerPermission(Caller $caller, Permission $permission)     {         return (bool) CallerPermission::where('caller_type', $caller->getCallerType())             ->where('caller_id', $caller->getCallerId())             ->where('type', $permission->getType())             ->where('action', $permission->getAction())             ->where('resource_type', $permission->getResourceType())             ->where('resource_id', $permission->getResourceId())             ->first();     }      /**  * Returns all the permissions for a role  *  * @param \BeatSwitch\Lock\Roles\Role $role  * @return \BeatSwitch\Lock\Permissions\Permission[]  */     public function getRolePermissions(Role $role)     {         $permissions = RolePermission::where('role', $role->getRoleName())->get();          return PermissionFactory::createFromData($permissions->toArray());     }      /**  * Stores a new permission for a role  *  * @param \BeatSwitch\Lock\Roles\Role $role  * @param \BeatSwitch\Lock\Permissions\Permission  * @return void  */     public function storeRolePermission(Role $role, Permission $permission)     {         $eloquentPermission = new RolePermission;         $eloquentPermission->role = $role->getRoleName();         $eloquentPermission->type = $permission->getType();         $eloquentPermission->action = $permission->getAction();         $eloquentPermission->resource_type = $permission->getResourceType();         $eloquentPermission->resource_id = $permission->getResourceId();         $eloquentPermission->save();     }      /**  * Removes a permission for a role  *  * @param \BeatSwitch\Lock\Roles\Role $role  * @param \BeatSwitch\Lock\Permissions\Permission  * @return void  */     public function removeRolePermission(Role $role, Permission $permission)     {         RolePermission::where('role', $role->getRoleName())             ->where('type', $permission->getType())             ->where('action', $permission->getAction())             ->where('resource_type', $permission->getResourceType())             ->where('resource_id', $permission->getResourceId())             ->delete();     }      /**  * Checks if a permission is stored for a role  *  * @param \BeatSwitch\Lock\Roles\Role $role  * @param \BeatSwitch\Lock\Permissions\Permission  * @return bool  */     public function hasRolePermission(Role $role, Permission $permission)     {         return (bool) RolePermission::where('role', $role->getRoleName())             ->where('type', $permission->getType())             ->where('action', $permission->getAction())             ->where('resource_type', $permission->getResourceType())             ->where('resource_id', $permission->getResourceId())             ->first();     } } Notice that we're not checking if the permission already exists when we're attempting to store it. You don't need to worry about that because that's all been done for you in the Lock instance. Now we have a driver which supports storing of permissions for callers and roles. Testing your driver It's very easy for you to make sure your driver works as expected. If you're building a persistent driver you can easily test it by creating a PHPUnit test which extends the PersistentDriverTestCase class. <?php  use BeatSwitch\Lock\Tests\PersistentDriverTestCase;  class EloquentDriverTest extends PersistentDriverTestCase {     public function setUp()     {         // Don't forget to reset your DB here.          // Bootstrap your driver.         $this->driver = new EloquentDriver();          parent::setUp();     } } And this is all you need! The PersistentDriverTestCase contains all the tests you'll need to make sure your driver works as expected. So if all those tests pass then your driver was set up correctly. No need to mock anything, this is a pure integration test case. Of course in this specific example above, for Eloquent to work you'll need to bootstrap Laravel. Working with a database like sqlite would be the best way here to test your driver. Maintainer Lock is unmaintained at this moment. This package is currently maintained by Dries Vints. If you have any questions please don't hesitate to ask them in an issue. Contributing Please see the contributing file for details. Changelog You can see a list of changes for each release in our changelog file. License The MIT License. Please see the license file for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BeatSwitch/lock"	"A library for implementing Access Control Lists (ACL) systems."	"true"
"Authentication and Authorization"	"OAuth 1.0 Client"	"https://github.com/thephpleague/oauth1-client"	"An OAuth 1.0 client library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"114"	"14"	"31"	"GitHub - thephpleague/oauth1-client: OAuth 1 Client Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 114 Fork 31 thephpleague/oauth1-client Code Issues 1 Pull requests 3 Pulse Graphs OAuth 1 Client 121 commits 2 branches 12 releases 21 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show 1.6.1 1.6.0 1.5.1 1.5.0 1.4.0 1.3.0 1.2.1 1.2.0 1.1.0 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit e8f1e7e Jul 6, 2016 bencorlett committed on GitHub Merge pull request #69 from Invoiced/xero … Added link to Xero provider Permalink Failed to load latest commit information. resources/examples Added Xing oAuth1 login support and test Aug 19, 2015 src/Client Merge pull request #61 from jtsternberg/fix-nested-array-as-params Jul 5, 2016 tests Allow mult-dimension arrays when generating base string for HMAC-SHA1… Feb 9, 2016 .gitignore adding support for setting user agent Jan 16, 2015 .scrutinizer.yml improve test config Aug 14, 2015 .travis.yml improve test config Aug 14, 2015 CONDUCT.md Add code of conduct. Oct 9, 2015 CONTRIBUTING.md Updating README to League standards, including documentation. Feb 1, 2014 LICENSE Updating README to League standards, including documentation. Feb 1, 2014 README.md Added link to Xero provider Jul 5, 2016 composer.json improve test config Aug 14, 2015 phpunit.xml adding support for setting user agent Jan 16, 2015 rfc5849.txt Starting work on package. WIP. Jul 17, 2013 README.md OAuth 1.0 Client OAuth 1 Client is an OAuth RFC 5849 standards-compliant library for authenticating against OAuth 1 servers. It has built in support for: Bitbucket Trello Tumblr Twitter Xing Adding support for other providers is trivial. The library requires PHP 5.3+ and is PSR-2 compatible. Third-Party Providers If you would like to support other providers, please make them available as a Composer package, then link to them below. These providers allow integration with other providers not supported by oauth1-client. They may require an older version so please help them out with a pull request if you notice this. Intuit 500px Etsy Xero Terminology (as per the RFC 5849 specification): client     An HTTP client (per [RFC2616]) capable of making OAuth-     authenticated requests (Section 3).  server     An HTTP server (per [RFC2616]) capable of accepting OAuth-     authenticated requests (Section 3).  protected resource     An access-restricted resource that can be obtained from the     server using an OAuth-authenticated request (Section 3).  resource owner     An entity capable of accessing and controlling protected     resources by using credentials to authenticate with the server.  credentials     Credentials are a pair of a unique identifier and a matching     shared secret.  OAuth defines three classes of credentials:     client, temporary, and token, used to identify and authenticate     the client making the request, the authorization request, and     the access grant, respectively.  token     A unique identifier issued by the server and used by the client     to associate authenticated requests with the resource owner     whose authorization is requested or has been obtained by the     client.  Tokens have a matching shared-secret that is used by     the client to establish its ownership of the token, and its     authority to represent the resource owner.  The original community specification used a somewhat different terminology that maps to this specifications as follows (original community terms provided on left):  Consumer:  client  Service Provider:  server  User:  resource owner  Consumer Key and Secret:  client credentials  Request Token and Secret:  temporary credentials  Access Token and Secret:  token credentials  Install Via Composer $ composer require league/oauth1-client Usage Bitbucket $server = new League\OAuth1\Client\Server\Bitbucket(array(     'identifier' => 'your-identifier',     'secret' => 'your-secret',     'callback_uri' => ""http://your-callback-uri/"", )); Trello $server =  new League\OAuth1\Client\Server\Trello(array(     'identifier' => 'your-identifier',     'secret' => 'your-secret',     'callback_uri' => 'http://your-callback-uri/',     'name' => 'your-application-name', // optional, defaults to null     'expiration' => 'your-application-expiration', // optional ('never', '1day', '2days'), defaults to '1day'     'scope' => 'your-application-scope' // optional ('read', 'read,write'), defaults to 'read' )); Tumblr $server = new League\OAuth1\Client\Server\Tumblr(array(     'identifier' => 'your-identifier',     'secret' => 'your-secret',     'callback_uri' => ""http://your-callback-uri/"", )); Twitter $server = new League\OAuth1\Client\Server\Twitter(array(     'identifier' => 'your-identifier',     'secret' => 'your-secret',     'callback_uri' => ""http://your-callback-uri/"", )); Xing $server = new League\OAuth1\Client\Server\Xing(array(     'identifier' => 'your-consumer-key',     'secret' => 'your-consumer-secret',     'callback_uri' => ""http://your-callback-uri/"", )); Showing a Login Button To begin, it's advisable that you include a login button on your website. Most servers (Twitter, Tumblr etc) have resources available for making buttons that are familiar to users. Some servers actually require you use their buttons as part of their terms. <a href=""authenticate.php"">Login With Twitter</a> Retrieving Temporary Credentials The first step to authenticating with OAuth 1 is to retrieve temporary credentials. These have been referred to as request tokens in earlier versions of OAuth 1. To do this, we'll retrieve and store temporary credentials in the session, and redirect the user to the server: // Retrieve temporary credentials $temporaryCredentials = $server->getTemporaryCredentials();  // Store credentials in the session, we'll need them later $_SESSION['temporary_credentials'] = serialize($temporaryCredentials); session_write_close();  // Second part of OAuth 1.0 authentication is to redirect the // resource owner to the login screen on the server. $server->authorize($temporaryCredentials); The user will be redirected to the familiar login screen on the server, where they will login to their account and authorise your app to access their data. Retrieving Token Credentials Once the user has authenticated (or denied) your application, they will be redirected to the callback_uri which you specified when creating the server. Note, some servers (such as Twitter) require that the callback URI you specify when authenticating matches what you registered with their app. This is to stop a potential third party impersonating you. This is actually part of the protocol however some servers choose to ignore this. Because of this, we actually require you specify a callback URI for all servers, regardless of whether the server requires it or not. This is good practice. You'll need to handle when the user is redirected back. This will involve retrieving token credentials, which you may then use to make calls to the server on behalf of the user. These have been referred to as access tokens in earlier versions of OAuth 1. if (isset($_GET['oauth_token']) && isset($_GET['oauth_verifier'])) {     // Retrieve the temporary credentials we saved before     $temporaryCredentials = unserialize($_SESSION['temporary_credentials']);      // We will now retrieve token credentials from the server     $tokenCredentials = $server->getTokenCredentials($temporaryCredentials, $_GET['oauth_token'], $_GET['oauth_verifier']); } Now, you may choose to do what you need with the token credentials. You may store them in a database, in the session, or use them as one-off and then forget about them. All credentials, (client credentials, temporary credentials and token credentials) all implement League\OAuth1\Client\Credentials\CredentialsInterface and have two sets of setters and getters exposed: var_dump($tokenCredentials->getIdentifier()); var_dump($tokenCredentials->getSecret()); In earlier versions of OAuth 1, the token credentials identifier and token credentials secret were referred to as access token and access token secret. Don't be scared by the new terminology here - they are the same. This package is using the exact terminology in the RFC 5849 OAuth 1 standard. Twitter will send back an error message in the denied query string parameter, allowing you to provide feedback. Some servers do not send back an error message, but rather do not provide the successful oauth_token and oauth_verifier parameters. Accessing User Information Now you have token credentials stored somewhere, you may use them to make calls against the server, as an authenticated user. While this package is not intended to be a wrapper for every server's API, it does include basic methods that you may use to retrieve limited information. An example of where this may be useful is if you are using social logins, you only need limited information to confirm who the user is. The four exposed methods are: // User is an instance of League\OAuth1\Client\Server\User $user = $server->getUserDetails($tokenCredentials);  // UID is a string / integer unique representation of the user $uid = $server->getUserUid($tokenCredentials);  // Email is either a string or null (as some providers do not supply this data) $email = $server->getUserEmail($tokenCredentials);  // Screen name is also known as a username (Twitter handle etc) $screenName = $server->getUserScreenName($tokenCredentials); League\OAuth1\Client\Server\User exposes a number of default public properties and also stores any additional data in an extra array - $user->extra. You may also iterate over a user's properties as if it was an array, foreach ($user as $key => $value). Examples Examples may be found under the resources/examples directory, which take the usage instructions here and go into a bit more depth. They are working examples that would only you substitute in your client credentials to have working. Testing $ phpunit Contributing Please see CONTRIBUTING for details. Credits Ben Corlett Steven Maguire All Contributors License The MIT License (MIT). Please see License File for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/oauth1-client"	"An OAuth 1.0 client library."	"true"
"Authentication and Authorization"	"OAuth 2.0 Client"	"https://github.com/thephpleague/oauth2-client"	"An OAuth 2.0 client library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1275"	"96"	"352"	"GitHub - thephpleague/oauth2-client: Easy integration with OAuth 2.0 service providers. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 96 Star 1,275 Fork 352 thephpleague/oauth2-client Code Issues 3 Pull requests 6 Wiki Pulse Graphs Easy integration with OAuth 2.0 service providers. http://oauth2-client.thephpleague.com 753 commits 2 branches 29 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 1.4.1 1.4.0 1.3.0 1.2.0 1.1.0 1.0.2 1.0.1 1.0.0 1.0.0-beta2 1.0.0-beta1 1.0.0-alpha2 1.0.0-alpha1 0.12.1 0.12.0 0.11.0 0.10.1 0.10.0 0.9.0 0.8.1 0.8.0 0.7.2 0.7.1 0.7.0 0.6.0 0.5.0 0.4.0 0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit 1711b5e Jun 30, 2016 shadowhand committed on GitHub Merge pull request #533 from Schoolrunner/feature/add_clever_client … Add Clever client to third party providers list. Permalink Failed to load latest commit information. src Ensure generated query strings are consistent Apr 29, 2016 test Ensure generated query strings are consistent Apr 29, 2016 .gitattributes Excluded .scrutinizer.yml in .gitattributes Nov 24, 2015 .gitignore Setup base unit testing framework Apr 24, 2014 .scrutinizer.yml Add .scrutinizer.yml config file Aug 13, 2015 .travis.yml Update travis config to skip gh-pages branch Sep 23, 2015 CHANGELOG.md Ensure generated query strings are consistent Apr 29, 2016 CONTRIBUTING.md Clean up documentation with working examples and better description Aug 12, 2015 CREDITS.md Move credits to a separate file Jul 3, 2015 LICENSE Bumping copyright year in license Jul 3, 2015 README.PROVIDER-GUIDE.md Update provider guide to refer to authentication traits Mar 7, 2016 README.PROVIDERS.md Update README.PROVIDERS.md Jun 29, 2016 README.UPGRADING.md Renamed provider and upgrade documentation files Jul 3, 2015 README.md Allow using a proxy for debugging. Apr 14, 2016 composer.json Revert Composer description to former description Aug 12, 2015 phpunit.xml Show code coverage results in CLI Sep 22, 2015 README.md OAuth 2.0 Client This package makes it simple to integrate your application with OAuth 2.0 service providers. We are all used to seeing those ""Connect with Facebook/Google/etc."" buttons around the internet, and social network integration is an important feature of most web applications these days. Many of these sites use an authentication and authorization standard called OAuth 2.0 (RFC 6749). This OAuth 2.0 client library will work with any OAuth provider that conforms to the OAuth 2.0 standard. Out-of-the-box, we provide a GenericProvider that may be used to connect to any service provider that uses Bearer tokens (see example below). Many service providers provide additional functionality above and beyond the OAuth 2.0 standard. For this reason, this library may be easily extended and wrapped to support this additional behavior. We provide links to all known provider clients extending this library (i.e. Facebook, GitHub, Google, Instagram, LinkedIn, etc.). If your provider isn't in the list, feel free to add it. This package is compliant with PSR-1, PSR-2, PSR-4, and PSR-7. If you notice compliance oversights, please send a patch via pull request. If you're interesting in contributing to this library, please take a look at our contributing guidelines. Requirements The following versions of PHP are supported. PHP 5.5 PHP 5.6 PHP 7.0 HHVM Providers A list of official PHP League providers, as well as third-party providers, may be found in the providers list README. To build your own provider, please refer to the provider guide README. Usage In most cases, you'll want to use a specific provider client library rather than this base library. Take a look at README.PROVIDERS.md to see a list of provider client libraries. If using Composer to require a specific provider client library, you do not need to also require this library. Composer will handle the dependencies for you. Authorization Code Grant The following example uses the out-of-the-box GenericProvider provided by this library. If you're looking for a specific provider (i.e. Facebook, Google, GitHub, etc.), take a look at our list of provider client libraries. HINT: You're probably looking for a specific provider. The authorization code grant type is the most common grant type used when authenticating users with a third-party service. This grant type utilizes a client (this library), a server (the service provider), and a resource owner (the user with credentials to a protected—or owned—resource) to request access to resources owned by the user. This is often referred to as 3-legged OAuth, since there are three parties involved. The following example illustrates this using Brent Shaffer's demo OAuth 2.0 application named Lock'd In. When running this code, you will be redirected to Lock'd In, where you'll be prompted to authorize the client to make requests to a resource on your behalf. Now, you don't really have an account on Lock'd In, but for the sake of this example, imagine that you are already logged in on Lock'd In when you are redirected there. $provider = new \League\OAuth2\Client\Provider\GenericProvider([     'clientId'                => 'demoapp',    // The client ID assigned to you by the provider     'clientSecret'            => 'demopass',   // The client password assigned to you by the provider     'redirectUri'             => 'http://example.com/your-redirect-url/',     'urlAuthorize'            => 'http://brentertainment.com/oauth2/lockdin/authorize',     'urlAccessToken'          => 'http://brentertainment.com/oauth2/lockdin/token',     'urlResourceOwnerDetails' => 'http://brentertainment.com/oauth2/lockdin/resource' ]);  // If we don't have an authorization code then get one if (!isset($_GET['code'])) {      // Fetch the authorization URL from the provider; this returns the     // urlAuthorize option and generates and applies any necessary parameters     // (e.g. state).     $authorizationUrl = $provider->getAuthorizationUrl();      // Get the state generated for you and store it to the session.     $_SESSION['oauth2state'] = $provider->getState();      // Redirect the user to the authorization URL.     header('Location: ' . $authorizationUrl);     exit;  // Check given state against previously stored one to mitigate CSRF attack } elseif (empty($_GET['state']) || ($_GET['state'] !== $_SESSION['oauth2state'])) {      unset($_SESSION['oauth2state']);     exit('Invalid state');  } else {      try {          // Try to get an access token using the authorization code grant.         $accessToken = $provider->getAccessToken('authorization_code', [             'code' => $_GET['code']         ]);          // We have an access token, which we may use in authenticated         // requests against the service provider's API.         echo $accessToken->getToken() . ""\n"";         echo $accessToken->getRefreshToken() . ""\n"";         echo $accessToken->getExpires() . ""\n"";         echo ($accessToken->hasExpired() ? 'expired' : 'not expired') . ""\n"";          // Using the access token, we may look up details about the         // resource owner.         $resourceOwner = $provider->getResourceOwner($accessToken);          var_export($resourceOwner->toArray());          // The provider provides a way to get an authenticated API request for         // the service, using the access token; it returns an object conforming         // to Psr\Http\Message\RequestInterface.         $request = $provider->getAuthenticatedRequest(             'GET',             'http://brentertainment.com/oauth2/lockdin/resource',             $accessToken         );      } catch (\League\OAuth2\Client\Provider\Exception\IdentityProviderException $e) {          // Failed to get the access token or user details.         exit($e->getMessage());      }  } Refreshing a Token Once your application is authorized, you can refresh an expired token using a refresh token rather than going through the entire process of obtaining a brand new token. To do so, simply reuse this refresh token from your data store to request a refresh. This example uses Brent Shaffer's demo OAuth 2.0 application named Lock'd In. See authorization code example above, for more details. $provider = new \League\OAuth2\Client\Provider\GenericProvider([     'clientId'                => 'demoapp',    // The client ID assigned to you by the provider     'clientSecret'            => 'demopass',   // The client password assigned to you by the provider     'redirectUri'             => 'http://example.com/your-redirect-url/',     'urlAuthorize'            => 'http://brentertainment.com/oauth2/lockdin/authorize',     'urlAccessToken'          => 'http://brentertainment.com/oauth2/lockdin/token',     'urlResourceOwnerDetails' => 'http://brentertainment.com/oauth2/lockdin/resource' ]);  $existingAccessToken = getAccessTokenFromYourDataStore();  if ($existingAccessToken->hasExpired()) {     $newAccessToken = $provider->getAccessToken('refresh_token', [         'refresh_token' => $existingAccessToken->getRefreshToken()     ]);      // Purge old access token and store new access token to your data store. } Resource Owner Password Credentials Grant Some service providers allow you to skip the authorization code step to exchange a user's credentials (username and password) for an access token. This is referred to as the ""resource owner password credentials"" grant type. According to section 1.3.3 of the OAuth 2.0 standard (emphasis added): The credentials should only be used when there is a high degree of trust between the resource owner and the client (e.g., the client is part of the device operating system or a highly privileged application), and when other authorization grant types are not available (such as an authorization code). We do not advise using this grant type if the service provider supports the authorization code grant type (see above), as this reinforces the password anti-pattern by allowing users to think it's okay to trust third-party applications with their usernames and passwords. That said, there are use-cases where the resource owner password credentials grant is acceptable and useful. Here's an example using it with Brent Shaffer's demo OAuth 2.0 application named Lock'd In. See authorization code example above, for more details about the Lock'd In demo application. $provider = new \League\OAuth2\Client\Provider\GenericProvider([     'clientId'                => 'demoapp',    // The client ID assigned to you by the provider     'clientSecret'            => 'demopass',   // The client password assigned to you by the provider     'redirectUri'             => 'http://example.com/your-redirect-url/',     'urlAuthorize'            => 'http://brentertainment.com/oauth2/lockdin/authorize',     'urlAccessToken'          => 'http://brentertainment.com/oauth2/lockdin/token',     'urlResourceOwnerDetails' => 'http://brentertainment.com/oauth2/lockdin/resource' ]);  try {      // Try to get an access token using the resource owner password credentials grant.     $accessToken = $provider->getAccessToken('password', [         'username' => 'demouser',         'password' => 'testpass'     ]);  } catch (\League\OAuth2\Client\Provider\Exception\IdentityProviderException $e) {      // Failed to get the access token     exit($e->getMessage());  } Client Credentials Grant When your application is acting on its own behalf to access resources it controls/owns in a service provider, it may use the client credentials grant type. This is best used when the credentials for your application are stored privately and never exposed (e.g. through the web browser, etc.) to end-users. This grant type functions similarly to the resource owner password credentials grant type, but it does not request a user's username or password. It uses only the client ID and secret issued to your client by the service provider. Unlike earlier examples, the following does not work against a functioning demo service provider. It is provided for the sake of example only. // Note: the GenericProvider requires the `urlAuthorize` option, even though // it's not used in the OAuth 2.0 client credentials grant type.  $provider = new \League\OAuth2\Client\Provider\GenericProvider([     'clientId'                => 'XXXXXX',    // The client ID assigned to you by the provider     'clientSecret'            => 'XXXXXX',    // The client password assigned to you by the provider     'redirectUri'             => 'http://my.example.com/your-redirect-url/',     'urlAuthorize'            => 'http://service.example.com/authorize',     'urlAccessToken'          => 'http://service.example.com/token',     'urlResourceOwnerDetails' => 'http://service.example.com/resource' ]);  try {      // Try to get an access token using the client credentials grant.     $accessToken = $provider->getAccessToken('client_credentials');  } catch (\League\OAuth2\Client\Provider\Exception\IdentityProviderException $e) {      // Failed to get the access token     exit($e->getMessage());  } Using a proxy It is possible to use a proxy to debug HTTP calls made to a provider. All you need to do is set the proxy and verify options when creating your Provider instance. Make sure you enable SSL proxying in your proxy. $provider = new \League\OAuth2\Client\Provider\GenericProvider([     'clientId'                => 'XXXXXX',    // The client ID assigned to you by the provider     'clientSecret'            => 'XXXXXX',    // The client password assigned to you by the provider     'redirectUri'             => 'http://my.example.com/your-redirect-url/',     'urlAuthorize'            => 'http://service.example.com/authorize',     'urlAccessToken'          => 'http://service.example.com/token',     'urlResourceOwnerDetails' => 'http://service.example.com/resource',     'proxy'                   => '192.168.0.1:8888',     'verify'                  => false ]); Install Via Composer $ composer require league/oauth2-client Contributing Please see CONTRIBUTING for details. License The MIT License (MIT). Please see License File for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/oauth2-client"	"An OAuth 2.0 client library."	"true"
"Authentication and Authorization"	"OAuth2 Server"	"http://bshaffer.github.io/oauth2-server-php-docs/"	"Another OAuth2 server implementation."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"470"	"72"	"206"	"GitHub - bshaffer/oauth2-demo-php: A demo application for running an OAuth2 server Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 72 Star 470 Fork 206 bshaffer/oauth2-demo-php Code Issues 18 Pull requests 2 Pulse Graphs A demo application for running an OAuth2 server 131 commits 3 branches 0 releases 11 contributors PHP 36.1% CSS 33.1% HTML 30.5% ApacheConf 0.3% PHP CSS HTML ApacheConf Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags add-openid-connect master php5.2-master Nothing to show Nothing to show New pull request Latest commit 34aea46 Jan 26, 2016 bshaffer Merge pull request #57 from copynpaste/fix-duplicate-token-add … fixed duplicate adding of access_token to request url on local server Permalink Failed to load latest commit information. data adds basic openid connect flows Apr 3, 2015 src/OAuth2Demo fixed duplicate adding of access_token to request url on local server Oct 13, 2015 views better copy for openid implicit Oct 7, 2015 web moves logic from front controller to Client app setup Oct 21, 2013 .gitignore simplifies parameter configuration - removes _url duplicate parameters Mar 25, 2013 README.md README typo fix Oct 7, 2015 composer.json misc typos and fixes Oct 7, 2015 README.md OAuth2 Demo PHP This application is designed to demo the workflow between OAuth2.0 Clients and Servers. If this is your first time here, try experimenting with the live demo to get a better feel for OAuth2.0 flows. This library is running the OAuth2 Server PHP library. Installation Use Composer to install this application: $ git clone git://github.com/bshaffer/oauth2-demo-php.git $ cd oauth2-demo-php $ curl -s http://getcomposer.org/installer | php $ ./composer.phar install  WebHost Configuration Configure a Web Server Silex requires you to configure your web server to run it. Be sure to run the command $ chmod -R 777 data/ in the project root so that the web server can create the sqlite file. Using PHP's built-in Web Server You can use php's built-in web server, however, you will need to spin up two instances and specify one of them in data/parameters.json in order to prevent the server from locking up. The client will issue a request to the server, and because PHP's built-in web server is single-threaded, this will result in deadlock. $ cd oauth2-demo-php $ cp data/parameters.json.dist data/parameters.json $ sed -i '' 's?""grant""?""http://localhost:8081/lockdin/token""?g' data/parameters.json $ sed -i '' 's?""access""?""http://localhost:8081/lockdin/resource""?g' data/parameters.json  Now all you have to do is spin up two separate web servers in the web directory $ cd web $ php -S localhost:8080 & php -S localhost:8081  Browse to http://localhost:8080 in your browser and you're all set! What Does This App Do?? This application simulates the interaction between an OAuth2 Client (Demo App) and OAuth2 Server (Lock'd In). To get started, access the Demo App homepage: Clicking Authorize will send you to Lock'd In, which mimics a data provider (such as twitter, facebook, etc). Lock'd In assumes you are already signed in, and asks if you'd like to grant the Demo app access to your information: Once you click Yes, I Authorize this Request, you will be redirected back to Demo App with an authorization code, which the client then exchanges for an Access Token. Demo App then makes another call to the Lock'd In APIs and uses the Access Token to retrieve the data on your behalf. If all is successful, your data from Lock'd In will be displayed on the final page: The OAuth2 Client can be used to test ANY OAuth2.0 server, and can be configured to do so using the the configuration file defined below. The OAuth2 Server The OAuth2 Server is created (see the setup method) and then used in the Controller Classes, which implement the following endpoints: /authorize - endpoint which grants the Demo App an authorization code /token - endpoint which grants the Demo App an access_token when supplied with the authorization code above /resource - endpoint which grants the Demo App access to your protected resources (in this case, your friends) when supplied the access token above These are the three main functions of the OAuth2 server (authorize the user, grant the user tokens, and validate api calls). When you write your OAuth2-compatible servers, your interface will be similar. Note: the above urls are prefixed with /server to namespace the application. Test Your Own OAuth2 Server! You can test this application against your own OAuth application with ease. Just copy over the parameters.json.dist file to parameters.json: $ cd /path/to/oauth2-demo-php $ cp data/parameters.json.dist data/parameters.json  Open the parameters.json file, and notice the default configuration: {   ""client_id"": ""demoapp"",   ""client_secret"": ""demopass"",   ""token_route"": ""grant"",   ""authorize_route"": ""authorize"",   ""resource_route"": ""access"",   ""resource_method"": ""GET"",   ""resource_params"": {},   ""curl_options"": {} }  This is the configuration for the default Lock'd In OAuth2 server. To test against your own, change those parameters to fit the api server you want to test against: {   ""client_id"": ""OAuth Demo Application"",   ""client_secret"": ""a3b4b74330724a927bec"",   ""token_route"": ""https://api.myapp.com/token"",   ""authorize_route"": ""https://myapp.com/authorize"",   ""resource_route"": ""https://api.myapp.com/profile"",   ""resource_method"": ""POST"",   ""resource_params"": { ""debug"": true },   ""curl_options"": { ""http_port"": 443, ""verifyssl"": false } }  The above example uses a new client to authenticate against a fictional oauth server at myapp.com. This is very useful when testing your application in production Note: The curl options are set to ignore an SSL certificate, and the resource_params define a fictional debug parameter. These are not required for your APIs, but is meant as an example what can be done with the configuration Test in multiple environments In addition, you can create multiple environments using the parameters.json file, and switch between them: {     ""LockdIn"": {       ""client_id"": ""demoapp"",       ""client_secret"": ""demopass"",       ""token_route"": ""grant"",       ""authorize_route"": ""authorize"",       ""resource_route"": ""access"",       ""resource_method"": ""GET"",       ""resource_params"": {},       ""curl_options"": {}     },     ""My App"": {       ""client_id"": ""OAuth Demo Application"",       ""client_secret"": ""a3b4b74330724a927bec"",       ""token_route"": ""https://api.myapp.com/token"",       ""authorize_route"": ""https://myapp.com/authorize"",       ""resource_route"": ""https://api.myapp.com/profile"",       ""resource_method"": ""POST"",       ""resource_params"": { ""debug"": true },       ""curl_options"": { ""http_port"": 443, ""verifyssl"": false }     } }  This will provide a dropdown at the top which will allow you to switch environments and test multiple OAuth servers Contact Please contact Brent Shaffer (bshafs <at> gmail <dot> com) for more information Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bshaffer/oauth2-demo-php"	"Another OAuth2 server implementation."	"true"
"Authentication and Authorization"	"OAuth2 Server"	"http://oauth2.thephpleague.com/"	"An OAuth2 authentication server, resource server and client library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2251"	"172"	"503"	"GitHub - thephpleague/oauth2-server: A spec compliant, secure by default PHP OAuth 2.0 Server Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 172 Star 2,251 Fork 503 thephpleague/oauth2-server Code Issues 7 Pull requests 6 Pulse Graphs A spec compliant, secure by default PHP OAuth 2.0 Server https://oauth2.thephpleague.com 1,929 commits 3 branches 63 releases 68 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages-v4 gh-pages master Nothing to show 5.1.0 5.0.3 5.0.2 5.0.1 5.0.0 5.0.0-RC2 5.0.0-RC1 4.1.5 4.1.4 4.1.3 4.1.2 4.1.1 4.1.0 4.0.5 4.0.4 4.0.3 4.0.2 4.0.1 4.0.0 3.2.4 3.2.3 3.2.2 3.2.1 3.2 3.1.2 3.1.1 3.1.0 3.0.1 3.0.0 2.1.3 2.1.2 2.1.1 2.1 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0 1.0.9 1.0.8 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 0.4.2 0.4.1 0.4 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3 0.2.3 0.2.2 0.2.1 0.2 0.1 Nothing to show New pull request Latest commit 4b6ba58 Jul 13, 2016 alexbilbie committed on GitHub Merge pull request #621 from pounard/master … while(array_shift()) makes the AuthorizationServer class configuratio… Permalink Failed to load latest commit information. examples Updated examples. Fixes #589 Jun 2, 2016 src while(array_shift()) makes the AuthorizationServer class configuratio… Jul 13, 2016 tests Merge pull request #605 from jfilla/master Jun 28, 2016 .gitattributes Updated .gitignore / .gitattributes files Feb 12, 2016 .gitignore Updated .gitignore / .gitattributes files Feb 12, 2016 .scrutinizer.yml Updated .scrutenizer.yml Apr 18, 2016 .styleci.yml Create .styleci.yml Feb 19, 2016 .travis.yml Merge branch 'V5-WIP' Apr 17, 2016 CHANGELOG.md Updated changelog Jun 28, 2016 CONDUCT.md Added code of conduct Jan 13, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Dec 6, 2013 LICENSE Rename license file Dec 3, 2015 README.md Updated commercial support statement May 10, 2016 composer.json Allow random compat 2.x Jun 27, 2016 phpunit.xml.dist Ignore TemplateRenderer method Mar 10, 2016 README.md PHP OAuth 2.0 Server league/oauth2-server is a a standards compliant implementation of an OAuth 2.0 authorization server written in PHP which makes working with OAuth 2.0 trivial. You can easily configure an OAuth 2.0 server to protect your API with access tokens, or allow clients to request new access tokens and refresh them. It supports out of the box the following grants: Authorization code grant Implicit grant Client credentials grant Resource owner password credentials grant Refresh grant The following RFCs are implemented: RFC6749 ""OAuth 2.0"" RFC6750 "" The OAuth 2.0 Authorization Framework: Bearer Token Usage"" RFC7519 ""JSON Web Token (JWT)"" RFC7636 ""Proof Key for Code Exchange by OAuth Public Clients"" This library was created by Alex Bilbie. Find him on Twitter at @alexbilbie. Requirements The following versions of PHP are supported: PHP 5.5 (>=5.5.9) PHP 5.6 PHP 7.0 HHVM The openssl extension is also required. Documentation The library documentation can be found at https://oauth2.thephpleague.com. You can contribute to the documentation in the gh-pages branch. Changelog See the project releases page Contributing Please see CONTRIBUTING.md and CONDUCT.md for details. Support Bugs and feature request are tracked on GitHub. If you have any questions about OAuth please open a ticket here; please don't email the address below. Commercial Support If you would like help implementing this library into your existing platform, or would be interested in OAuth advice or training for you and your team please get in touch with Glynde Labs. Security If you discover any security related issues, please email hello@alexbilbie.com instead of using the issue tracker. License This package is released under the MIT License. See the bundled LICENSE file for details. Credits This code is principally developed and maintained by Alex Bilbie. Special thanks to all of these awesome contributors The initial code was developed as part of the Linkey project which was funded by JISC under the Access and Identity Management programme. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/oauth2-server"	"An OAuth2 authentication server, resource server and client library."	"true"
"Authentication and Authorization"	"Opauth"	"https://github.com/opauth/opauth"	"A multi-provider authentication framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1408"	"110"	"228"	"GitHub - opauth/opauth: Multi-provider authentication framework for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 110 Star 1,408 Fork 228 opauth/opauth Code Issues 29 Pull requests 7 Wiki Pulse Graphs Multi-provider authentication framework for PHP http://opauth.org 343 commits 3 branches 9 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 bundled master Nothing to show 1.0.0-alpha.1 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit 3ff68e7 Mar 23, 2014 ceeram Merge pull request #80 from AD7six/patch-1 … Correct links after repo move Permalink Failed to load latest commit information. example Update README.md Oct 13, 2013 lib/Opauth Correct links after repo move Mar 23, 2014 tests/Opauth Fixes the bug on custom stream options for serverGet(). Fixes #55. Jun 21, 2013 .gitignore igonre .DS_Store Mar 8, 2012 .travis.yml Blacklist bundled branch Jun 23, 2012 README.md Removed yii-opauth and minor formatting. Nov 16, 2013 composer.json Use classmap autoloading scheme Oct 31, 2012 phpunit.xml For Travis May 30, 2012 README.md Opauth is a multi-provider authentication framework for PHP, inspired by OmniAuth for Ruby. Opauth enables PHP applications to do user authentication with ease. Try out Opauth for yourself at http://opauth.org What is Opauth? Opauth provides a standardized method for PHP applications to interface with authentication providers. Opauth as a framework provides a set of API that allows developers to create strategies that work in a predictable manner across PHP frameworks and applications. Opauth works well with other PHP applications & frameworks. It is currently supported on: vanilla (plain) PHP applications CakePHP (maintained by uzyn) CodeIgniter (maintained by destinomultimedia) CodeIgniter (maintained by mcatm) FuelPHP (maintained by andreoav) Laravel (maintained by FakeHeal) PrestaShop (maintained by Onasusweb) Silex (maintained by icehero) SilverStripe (maintained by Better Brief) Zend Framework 2 (maintained by lorenzoferrarajr) and more to come. If your PHP framework of choice is not yet listed, you can still use Opauth like you would a normal PHP component (class). Quick start Guide on how to run the bundled example. Set DocumentRoot of your web server to example/. (Opauth can be instantiated in your own PHP app, but we will leave that out of this quick start guide) Configure Opauth. First, make a copy of opauth config's file by copying or renaming opauth.conf.php.default to opauth.conf.php. Open up opauth.conf.php and make the necessary changes. Install some Opauth strategies. Place the strategy files in lib/Opauth/Strategy/. For this example, we recommend that you start with Opauth-Facebook: i. Download the strategy files and place them at lib/Opauth/Strategy/Facebook/. ii. Follow the steps at Opauth-Facebook's README to set up your Faceobok app. iii. Add the following at opauth.conf.php under Strategy as such: <?php 'Strategy' => array(     // Define strategies here.      'Facebook' => array(         'app_id' => 'YOUR APP ID',         'app_secret' => 'YOUR APP SECRET'     ), ); Finally, send user to http://localhost/facebook to authenticate. Check out the wiki for more in-depth details, especially on how to use Opauth with your own PHP application. Available strategies A strategy is a set of instructions that interfaces with respective authentication providers and relays it back to Opauth. Provider-specific: Strategy Maintained by    Bitbucket fancyguy    Disqus rasa    Do arbales    Facebook uzyn    Flickr pocket7878    Foursquare pocket7878    GitHub uzyn    Google uzyn    Instagram muhdazrain    LinkedIn uzyn    (Windows) Live uzyn    mixi ritou    OpenID uzyn    PayPal 24hours    Sina Weibo (新浪微博) dgrabla    Twitter uzyn    Vimeo LubosRemplik    VKontakte dgrabla    Yahoo! Japan (YConnect) ritou Generic strategy: OAuth See wiki's list of strategies for an updated list of Opauth strategies or to make requests. Refer also to strategy contribution guide if you would like to contribute a strategy. Requirements PHP 5 (>= 5.2) with allow_url_fopen enabled Contribute Opauth needs your contributions, especially the following: More strategies Refer to wiki for contribution guide and inform us when your work is ready. Plugins for more PHP frameworks and CMSes eg. Symfony, Laravel, WordPress, Drupal, etc. Guides & tutorials On how to implement Opauth on CakePHP app, etc. Issues & questions Discussion group: Google Groups Primary channel for support, especially usage questions. Issues: Github Issues Twitter: @uzyn Email me: chua@uzyn.com IRC: #opauth on Freenode Used Opauth in your project? Let us know! Changelog v0.4.4 (10 May 2013) Added HTTP User-Agent header. (thanks @rkaldung #41) v0.4.3 (10 January 2013) Fixed a serverPost() bug where user-supplied options were not applied correctly. (thanks @ritou #26) v0.4.2 (28 August 2012) Fix session to check for session_id() instead of $_SESSION (thanks @sirikkoster #20) v0.4.1 (22 July 2012) Not starting session if session is already started. (thanks @Claymm) Fixed incorrect error message. (thanks @Claymm) Removed @ for file_get_contents. (thanks @Takehiro-Adachi) v0.4.0 (10 June 2012) mapProfile() and clientGet() for OpauthStrategy class. v0.3.0 (30 May 2012) Some unit testing More consistent naming of Strategy's internal properties Smarter loading of strategy, able to make a few guesses on where the class file might be at. v0.2.0 (23 May 2012) Opauth is now Composer compatible and listed on Packagist Opauth now supports autoloaders If a strategy is not autoloaded, Opauth falls back and searches for it at strategy_dir defined in config. Class name for strategy Foo should now be FooStrategy instead of Foo. This is to reduce the likelihood of class name collision due to Opauth not requiring the use of namespace. v0.1.0-type class name, ie. Foo, still works, but is now deprecated. v0.1.0 (22 May 2012) Initial release License The MIT License Copyright © 2012-2013 U-Zyn Chua (http://uzyn.com) Consultation U-Zyn Chua is a Principal Consultant at Zynesis Consulting. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/opauth/opauth"	"A multi-provider authentication framework."	"true"
"Authentication and Authorization"	"PHP oAuthLib"	"https://github.com/Lusitanian/PHPoAuthLib"	"Another OAuth library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"901"	"64"	"376"	"GitHub - Lusitanian/PHPoAuthLib: PHP 5.3+ oAuth 1/2 Client Library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 64 Star 901 Fork 376 Lusitanian/PHPoAuthLib Code Issues 84 Pull requests 46 Wiki Pulse Graphs PHP 5.3+ oAuth 1/2 Client Library 824 commits 3 branches 37 releases 105 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags capture-error-body master v1.0 Nothing to show v0.8.9 v0.8.8 v0.8.7 v0.8.6 v0.8.5 v0.8.4 v0.8.3 v0.8.2 v0.8.1 v0.8.0 v0.7.1 v0.7.0 v0.6.2 v0.6.1 v0.6.0 v0.5.5 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.1 v0.4.0 v0.3.6 v0.3.5 v0.3.0 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 09f4af3 Jul 12, 2016 Lusitanian committed on GitHub Merge pull request #473 from mukunda-/master … Add Battle.net service. Permalink Failed to load latest commit information. examples Merge pull request #473 from mukunda-/master Jul 12, 2016 src/OAuth Merge pull request #473 from mukunda-/master Jul 12, 2016 tests Mondo Tests Mar 12, 2016 .gitattributes Remove development stuff from autogenerated ZIP archives May 19, 2016 .gitignore Adding author Sep 9, 2015 .scrutinizer.yml Automatic generation of the state parameter in the authorization url … Feb 13, 2014 .travis.yml add php 7.0 to travis test matrix Feb 15, 2016 LICENSE Prepped 0.1 tag, removed lots of pointless docblocks, added ServiceFa… Feb 12, 2013 README.md Add Laravel 5 library info Mar 12, 2016 composer.json Adding author Sep 9, 2015 composer.lock Adding author Sep 9, 2015 phpunit.xml.dist Fixed ingoring of the oauth 2 token class Nov 17, 2013 README.md PHPoAuthLib NOTE: I'm looking for someone who could help to maintain this package alongside me, just because I don't have a ton of time to devote to it. However, I'm still going to keep trying to pay attention to PRs, etc. PHPoAuthLib provides oAuth support in PHP 5.3+ and is very easy to integrate with any project which requires an oAuth client. Installation This library can be found on Packagist. The recommended way to install this is through composer. Edit your composer.json and add: {     ""require"": {         ""lusitanian/oauth"": ""~0.3""     } } And install dependencies: $ curl -sS https://getcomposer.org/installer | php $ php composer.phar install Features PSR-0 compliant for easy interoperability Fully extensible in every facet. You can implement any service with any custom requirements by extending the protocol version's AbstractService implementation. You can use any HTTP client you desire, just create a class utilizing it which implements OAuth\Common\Http\ClientInterface (two implementations are included) You can use any storage mechanism for tokens. By default, session, in-memory and Redis.io (requires PHPRedis) storage mechanisms are included. Implement additional mechanisms by implementing OAuth\Common\Token\TokenStorageInterface. Service support The library supports both oAuth 1.x and oAuth 2.0 compliant services. A list of currently implemented services can be found below. Included service implementations OAuth1 500px BitBucket Etsy FitBit Flickr QuickBooks Scoop.it! Tumblr Twitter Xing Yahoo OAuth2 Amazon BitLy Bitrix24 Box Buffer Dailymotion Delicious Deezer DeviantArt Dropbox Eve Online Facebook Foursquare GitHub Google Harvest Heroku Hubic Instagram Jawbone UP LinkedIn Mailchimp Microsoft Mondo Nest Netatmo Parrot Flower Power PayPal Pinterest Pocket Reddit RunKeeper Salesforce SoundCloud Spotify Strava Ustream Vimeo Vkontakte Yahoo Yammer more to come! Examples Examples of basic usage are located in the examples/ directory. Usage For usage with complete auth flow, please see the examples. More in-depth documentation will come with release 1.0. Framework Integration Lithium: Sébastien Charrier has written an adapter for the library. Laravel 4: Dariusz Prząda has written a service provider for the library. Laravel 5: Valentin Ivaşcu ported Dariusz Prząda's Laravel 4 library to Laravel 5. Symfony: Alexander Pinnecke has written a Symfony Bundle for the library. Extensions Extract normalized user data from OAuth Services with the library PHPoAuthUserData by Luciano Mammino Tests To run the tests, you must install dependencies with composer install --dev Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Lusitanian/PHPoAuthLib"	"Another OAuth library."	"true"
"Authentication and Authorization"	"Sentinel Social"	"https://cartalyst.com/manual/sentinel-social/2.0"	"A library for social network authentication."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Sentinel-social Manual :: 		Cartalyst 		 	 Sentinel Open Sourced! Support Version 3 Cartalyst LLC. 2.0 1.0 Subscribe Login Sentinel-social by Cartalyst 0 25 14 15 0 This package requires a valid subscription. Subscribe for access. Introduction Sentinel Social makes authenticating your users through social networks & third-party OAuth providers an absolute breeze. The package follows the FIG standard PSR-4 to ensure a high level of interoperability between shared PHP code and is fully unit-tested. The package requires PHP 5.4+. Have a read through the Installation Guide. Quick Example Add Connections Social::addConnection('facebook' => [         'driver'     => 'Facebook',         'identifier' => '',         'secret'     => '',         'scopes'     => ['email'],     ], );  Authorize $callback = 'http://app.dev/callback.php'; $url      = Social::getAuthorizationUrl('facebook', $callback);  header('Location: ' . $url); exit;  Authenticate $callback = 'http://app.dev/callback.php';  try {     $user = Social::authenticate('facebook', $callback, function(Cartalyst\Sentinel\Addons\Social\Models\LinkInterface $link, $provider, $token, $slug)     {         // Retrieve the user in question for modificiation         $user = $link->getUser();          // You could add your custom data         $data = $provider->getUserDetails($token);          $user->foo = $data->foo;         $user->save();     }); } catch (Cartalyst\Sentinel\Addons\Social\AccessMissingException $e) {     var_dump($e); // You may save this to the session, redirect somewhere     die();      header('HTTP/1.0 404 Not Found'); }  Installation The best and easiest way to install the Sentinel Social package is with Composer. Preparation Open your composer.json and add the following to the require array: ""cartalyst/sentinel-social"": ""2.0.*""  Add the following lines after the require array on your composer.json file: ""repositories"": [     {         ""type"": ""composer"",         ""url"": ""https://packages.cartalyst.com""     } ],  Note: This version is still in development, make sure that you set min-stability to dev on your composer.json file. Note: Make sure that after the required changes your composer.json file is valid by running composer validate. Install the dependencies Run Composer to install or update the new requirement. php composer install  or php composer update  Now you are able to require the vendor/autoload.php file to autoload the package. Integration Laravel 5 The Sentinel Social package has optional support for Laravel 5 and it comes bundled with a Service Provider and a Facade for easier integration. After you have installed the package, just follow the instructions. Open your Laravel config file config/app.php and add the following lines. In the $providers array add the following service provider for this package. 'Cartalyst\Sentinel\Addons\Social\Laravel\SocialServiceProvider',  In the $aliases array add the following facade for this package. 'Social' => 'Cartalyst\Sentinel\Addons\Social\Laravel\Facades\Social',  Assets Run the following commands to publish the migration and config files. Sentinel php artisan vendor:publish --provider=""Cartalyst\Sentinel\Laravel\SentinelServiceProvider"" Sentinel Social php artisan vendor:publish --provider=""Cartalyst\Sentinel\Addons\Social\Laravel\SocialServiceProvider"" Migrations Run the following command to migrate Sentinel after publishing the assets. php artisan migrate Configuration After publishing, the sentinel social config file can be found under config/cartalyst.sentinel-addons.social.php where you can modify the package configuration. Native After you have installed the package, just follow the instructions. Setup your database Sentinel schema `vendor/cartalyst/sentinel/schema/mysql.sql`  Sentinel Social schema `vendor/cartalyst/sentinel-social/schema/mysql.sql`  Configuration Instantiate Sentinel Social // Include the composer autoload file require_once 'vendor/autoload.php';  // Import the necessary classes use Cartalyst\Sentinel\Addons\Social\Manager;  $manager = new Manager($instanceOfSentinel);  $manager->addConnection('facebook' => [         'driver'     => 'Facebook',         'identifier' => '',         'secret'     => '',         'scopes'     => ['email'],     ], );  Authorize $callback = 'http://app.dev/callback.php'; $url      = $manager->getAuthorizationUrl('facebook', $callback);  header('Location: ' . $url); exit;  Authenticate $callback = 'http://app.dev/callback.php';  try {     $user = $manager->authenticate('facebook', $callback, function(Cartalyst\Sentinel\Addons\Social\Models\LinkInterface $link, $provider, $token, $slug)     {         // Retrieve the user in question for modificiation         $user = $link->getUser();          // You could add your custom data         $data = $provider->getUserDetails($token);          $user->foo = $data->foo;         $user->save();     }); } catch (Cartalyst\Sentinel\Addons\Social\AccessMissingException $e) {     var_dump($e); // You may save this to the session, redirect somewhere     die();      header('HTTP/1.0 404 Not Found'); }  Usage OAuth Flow While OAuth1 and OAuth2 are incompatible protocols, they (for the most part) follow the same process: A secure connection is established between a your app and a provider. A user is redirected to the provider where they may login and approve (or reject) your app to have access. Your app receives a token from the service so your app may act on behalf of the person who authenticated. You never find out their password and they have the option to revoke your access at any point. Sentinel Social abstracts all the differences between OAuth 1 and OAuth 2, so that you can focus on the more interesting parts of your app. Manager $manager = new Cartalyst\Sentinel\Addons\Social\Manager($instanceOfSentinel);  Social is the Laravel alias for the manager and can be directly used without instantiation. Connections Single connection Social::addConnection('facebook', [         'driver'     => 'Facebook',         'identifier' => '',         'secret'     => '',         'scopes'     => ['email'],     ], );  Multiple connections $connections = [      'facebook' => [         'driver'     => 'Facebook',         'identifier' => '',         'secret'     => '',         'scopes'     => ['email'],     ],      'github' => [         'driver'     => 'GitHub',         'identifier' => '',         'secret'     => '',         'scopes'     => ['user'],     ],  );  Social::addConnections($connections);  Connections on Laravel are stored in config/cartalyst.sentinel-addons.social.php Authorization Authorizing a user (redirecting them to the provider's login/approval screen) is extremely easy. Once you've configured a provider with Sentinel Social, you simply need to redirect the user to the authorization URL. Route::get('oauth/authorize', function() {     $callback = URL::to('oauth/callback');     $url = Social::getAuthorizationUrl('facebook', $callback);     return Redirect::to($url); });  Authentication Once a user has finished authorizing (or rejecting) your application, they're redirected to the callback URL which you specified. To handle the authentication process, you will need to respond to the response from the provider on that callback URL. Route::get('oauth/callback', function() {     // Callback is required for providers such as Facebook and a few others (it's required     // by the spec, but some providers omit this).     $callback = URL::current();      try     {         $user = Social::authenticate('facebook', URL::current(), function(Cartalyst\Sentinel\Addons\Social\Models\LinkInterface $link, $provider, $token, $slug)         {             // Retrieve the user in question for modificiation             $user = $link->getUser();              // You could add your custom data             $data = $provider->getUserDetails($token);              $user->foo = $data->foo;             $user->save();         });     }     catch (Cartalyst\Sentinel\Addons\Social\AccessMissingException $e)     {         // Missing OAuth parameters were missing from the query string.         // Either the person rejected the app, or the URL has been manually         // accesed.         if ($error = Input::get('error'))         {             return Redirect::to('oauth')->withErrors($error);         }          App::abort(404);     } });  Note: If you attempt to authenticate a provider when a Sentinel user is already logged in, the authenticated provider account will be linked with that User. For you as a developer, this allows your users to link multiple social accounts easily. If you don't want to allow other accounts to be linked, either don't show the social login links and/or log the user out at the start of the authorization process (in your controller). Hooks In addition to providing a hook (callback) for when a user is being linked (the second parameter passed to authenticate()), we also provide ways to hook into new user registrations as well as existing user linking. For example, this may be useful to send welcome emails when new users are being registered: Social::registered(function(Cartalyst\Sentinel\Addons\Social\Models\LinkInterface $link, $provider, $token, $slug) {     $user = $link->getUser();      Mail::later($user->email, 'welcome', compact('user', 'slug')); });  Social::existing(function(Cartalyst\Sentinel\Addons\Social\Models\LinkInterface $link, $provider, $token, $slug) {     // Callback for existing users });  // Finally, after hooks are registered, you may authenticate away $user = Social::authenticate($params);  Extending Sentinel Social Sentinel Social was designed from the ground up with extendability in mind. Extending is as simple as 2 steps Creating your implementation class. Adding the connection to Sentinel Social. Creating An Implementation Class To create an implementation class, you firstly need to determine if you're dealing with OAuth 1 or OAuth 2. OAuth 1 To create an OAuth 1 implementation class for Sentinel Social, simply create a class which extends League\OAuth1\Client\Server\Server. Example:     use League\OAuth1\Client\Server\User;      class MyOAuth1Provider extends League\OAuth1\Client\Server\Server {          /**          * The response type for data returned from API calls.          *          * @var string          */         protected $responseType = 'json';          /**          * Get the URL for retrieving temporary credentials.          *          * @return string          */         public function urlTemporaryCredentials()         {             return 'https://api.myprovider.com/oauth/temporary_credentials';         }          /**          * Get the URL for redirecting the resource owner to authorize the client.          *          * @return string          */         public function urlAuthorization()         {             return 'https://api.myprovider.com/oauth/authorize';         }          /**          * Get the URL retrieving token credentials.          *          * @return string          */         public function urlTokenCredentials()         {             return 'https://api.myprovider.com/oauth/token_credentials';         }          /**          * Get the URL for retrieving user details.          *          * @return string          */         public function urlUserDetails()         {             return 'https://api.myprovider/1.0/user.json';         }          /**          * Take the decoded data from the user details URL and convert          * it to a User object.          *          * @param  mixed  $data          * @param  TokenCredentials  $tokenCredentials          * @return User          */         public function userDetails($data, TokenCredentials $tokenCredentials)         {             $user = new User;              // Take the decoded data (determined by $this->responseType)             // and fill out the user object by abstracting out the API             // properties (this keeps our user object simple and adds             // a layer of protection in-case the API response changes)              $user->first_name = $data['user']['firstname'];             $user->last_name  = $data['user']['lastname'];             $user->email      = $data['emails']['primary'];             // Etc..              return $user;         }          /**          * Take the decoded data from the user details URL and extract          * the user's UID.          *          * @param  mixed  $data          * @param  TokenCredentials  $tokenCredentials          * @return string|int          */         public function userUid($data, TokenCredentials $tokenCredentials)         {             return $data['unique_id'];         }          /**          * Take the decoded data from the user details URL and extract          * the user's email.          *          * @param  mixed  $data          * @param  TokenCredentials  $tokenCredentials          * @return string          */         public function userEmail($data, TokenCredentials $tokenCredentials)         {             // Optional             if (isset($data['email']))             {                 return $data['email'];             }         }          /**          * Take the decoded data from the user details URL and extract          * the user's screen name.          *          * @param  mixed  $data          * @param  TokenCredentials  $tokenCredentials          * @return User          */         public function userScreenName($data, TokenCredentials $tokenCredentials)         {             // Optional             if (isset($data['screen_name']))             {                 return $data['screen_name'];             }         }     }  OAuth 2 Creating an OAuth 2 implementation is much the same, however just a little easier (as there's less methods to implement): use League\OAuth2\Client\Provider\User;  class MyOAuth2Provider extends League\OAuth2\Client\Provider\IdentityProvider {      // Default scopes     public $scopes = ['scope1', 'scope2'];      // Response type     public $responseType = 'json';      public function urlAuthorize()     {         return 'https://api.myprovider.com/authorize';     }      public function urlAccessToken()     {         return 'https://api.myprovider.com/access_token';     }      public function urlUserDetails(\League\OAuth2\Client\Token\AccessToken $token)     {         return 'https://api.myprovider.com/1.0/user.json?access_token='.$token;     }      public function userDetails($response, \League\OAuth2\Client\Token\AccessToken $token)     {         $user = new User;          // Take the decoded data (determined by $this->responseType)         // and fill out the user object by abstracting out the API         // properties (this keeps our user object simple and adds         // a layer of protection in-case the API response changes)          $user->first_name = $response['user']['firstname'];         $user->last_name  = $response['user']['lastname'];         $user->email      = $response['emails']['primary'];         // Etc..          return $user;     }      public function userUid($response, \League\OAuth2\Client\Token\AccessToken $token)     {         return $response['unique_id'];     }      public function userEmail($response, \League\OAuth2\Client\Token\AccessToken $token)     {         // Optional, however OAuth2 usually provides a scope         // to receive access to a user's email, you should always         // ask for this scope, as having an email is awesome.         if (isset($response['email']))         {             return $response['email'];         }     }      public function userScreenName($response, \League\OAuth2\Client\Token\AccessToken $token)     {         // Optional         if (isset($response['screen_name']))         {             return $response['screen_name'];         }     } }  Adding a Connection Now that you've made an implementation class for Sentinel Social, you need to add a connection. In Laravel In Laravel, the easiest way is to add the connection to your config file // After publishing your config, this is in app/config/packages/cartalyst/sentinel-social/config.php 'connections' => [      // Additional, default connections…      'myprovider' => [          // The driver should match your implementation's name (including namespace)         'driver'     => 'MyOAuth2Provider',          'identifier' => 'your-app-identifier',         'secret'     => 'your-app-secret',          // To override OAuth2 scopes (scopes don't exist on OAuth 1), specify         // this parameter. Otherwise, the default scopes from your implementation         // class will be used.         'scopes'     => ['scope1', 'scope2', 'scope3'],     ], ),  Outside Laravel Outside of Laravel, you can add a connection by calling a method on your $social object $social->addConnection('myprovider', [      // See the comments for ""In Laravel"" above, these parameters     // are the same     'driver'     => 'MyOAuth2Provider',     'identifier' => 'your-app-identifier',     'secret'     => 'your-app-secret',     'scopes'     => ['scope1', 'scope2', 'scope3'], ]);  Now, continue to use Sentinel Social as normal, instead substituting myprovider (or whatever you named your connection as) when authorizing and authenticating! Tips Once you've made a provider, if it could potentially be used by anybody, you should endeavour to submit a pull request back to the underlying OAuth 1 or OAuth2 repository, so everybody can make use of it. Once that pull request has been merged, you may submit a pull request back to Sentinel Social, to simply update the default config file to ship with your provider built-in! You wont find fancy lifestyle graphics and marketing bravado here. Just cold... hard... code... Signin Arsenal Pricing Quickstart Blog Help & Support Terms & Conditions License About Newsletter © Google+ Code Well, Rock On! Processing Payment..."	"null"	"null"	"A library for social network authentication."	"true"
"Authentication and Authorization"	"Sentinel"	"https://cartalyst.com/manual/sentinel/2.0"	"A framework agnostic authentication & authorisation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"736"	"69"	"89"	"GitHub - cartalyst/sentinel: A framework agnostic authentication & authorization system. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 69 Star 736 Fork 89 cartalyst/sentinel Code Issues 11 Pull requests 0 Wiki Pulse Graphs A framework agnostic authentication & authorization system. 235 commits 6 branches 30 releases 18 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 2.0 Switch branches/tags Branches Tags 1.0 2.0 docs/1.0 docs/2.0 feature/dispatcher-contract master Nothing to show v2.0.12 v2.0.11 v2.0.10 v2.0.9 v2.0.8 v2.0.7 v2.0.6 v2.0.5 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v1.0.15 v1.0.14 v1.0.13 v1.0.12 v1.0.11 v1.0.10 v1.0.9 v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.1.0 Nothing to show New pull request Latest commit 28d8276 Jul 15, 2016 suwardany add missing throttle repository getter/setter … Signed-off-by: Suhayb Wardany <me@suw.me> Permalink Failed to load latest commit information. schema Adding a script for MySQL 5.6+ and in-directory instructions Jan 28, 2016 src add missing throttle repository getter/setter Jul 15, 2016 tests add missing throttle repository getter/setter Jul 15, 2016 .gitattributes Add .gitattributes Jul 21, 2015 .gitignore general updates Jul 10, 2014 .travis.yml Update .travis.yml file. Jun 25, 2015 CHANGELOG.md bump version, update changelog May 13, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Jul 8, 2015 LICENSE Updated license to BSD 3-Clause. Jun 23, 2015 README.md Update README.md Oct 12, 2015 composer.json random_compat version update Apr 25, 2016 phpunit.xml Renamed phpunit.xml.dist to phpunit.xml Jun 23, 2015 README.md Sentinel Sentinel is a PHP 5.4+ fully-featured authentication & authorization system. It also provides additional features such as user roles and additional security features. Sentinel is a framework agnostic set of interfaces with default implementations, though you can substitute any implementations you see fit. An open source package by Cartalyst, code well, rock on! Documentation Reader-friendly Documentation can be found here. Sentinel Manual. Raw files can be found via this projects docs/version branch. 2.0 1.0 Changelog Important versions listed below. Refer to the Changelog for a full history of the project. 2.0 - 2015-02-24 1.0 - 2014-08-05 Support The following support channels can be used for contact. Twitter Email Bug reports, feature requests, and pull requests can be submitted by following our Contribution Guide. Contributing & Protocols Versioning Coding Standards Pull Requests License This software is released under the BSD 3-Clause License. © 2011-2015 Cartalyst LLC, All rights reserved. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cartalyst/sentinel"	"A framework agnostic authentication & authorisation library."	"true"
"Authentication and Authorization"	"TwitterOAuth"	"https://github.com/ruudk/twitteroauth"	"A Twitter OAuth library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"55"	"5"	"1499"	"GitHub - ruudk/twitteroauth: The first PHP Library to support OAuth for Twitter's REST API. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 55 Fork 1,499 ruudk/twitteroauth forked from abraham/twitteroauth Code Pull requests 0 Pulse Graphs The first PHP Library to support OAuth for Twitter's REST API. http://twitteroauth.labs.poseurtech.com 44 commits 3 branches 6 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.2.0 gh-pages master Nothing to show v1.0.0 0.2.0-beta3 0.2.0-beta2 0.2.0-beta 0.1.1 0.1.0 Nothing to show New pull request Pull request Compare This branch is 17 commits ahead, 302 commits behind abraham:master. Latest commit 7f5a94e Jun 10, 2014 ruudk Merge pull request #4 from nutshellcrm/request-headers … Capture response headers for inspection Permalink Failed to load latest commit information. examples Moved examples into folder Dec 7, 2010 src/TwitterOAuth Capture response headers for inspection Jun 5, 2014 .DS_Store Added composer Aug 7, 2012 DOCUMENTATION Added documentation wih new terminology Mar 10, 2010 LICENSE added MIT license and modified readme Nov 3, 2009 README Updated README with namespace clarification Sep 17, 2012 composer.json Update composer.json Aug 7, 2012 README THIS IS AN MODIFIED VERSION OF ABRAHAMS TWITTER OAUTH CLASS  The directories are structured and the class uses PHP5.3 namespaces.   Api.php has a new function called setToken($oauth_token, $oauth_token_secret) to set the token after initialising  ===========  Usage  To install via composer, include:          ""ruudk/twitter-oauth"": ""*""  in your composer.json file.  Then, after including composer's automatically generated autoloader, create a new instance of the twitter API:      $twitter = new \TwitterOAuth\Api(arguments);  When following the steps in the Documentation file, amend them to use this namespaced instanciation code or TwitterOAuth will not work.  ===========  Abraham Williams | abraham@poseurte.ch | http://abrah.am | @abraham  The first PHP library for working with Twitter's OAuth API.  Documentation: http://wiki.github.com/abraham/twitteroauth/documentation  Source: http://github.com/abraham/twitteroauth Twitter: http://apiwiki.twitter.com  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ruudk/twitteroauth"	"A Twitter OAuth library."	"true"
"Authentication and Authorization"	"TwitterSDK"	"https://github.com/lyrixx/twitter-sdk"	"A fully tested Twitter SDK."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"36"	"6"	"2"	"GitHub - lyrixx/twitter-sdk: A simple twitter SDK to interact with Twitter api (1.1) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 36 Fork 2 lyrixx/twitter-sdk Code Issues 0 Pull requests 0 Pulse Graphs A simple twitter SDK to interact with Twitter api (1.1) 19 commits 1 branch 4 releases 4 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.1.0 v1.0.0 v0.2 v0.1 Nothing to show New pull request Latest commit f6ab15f Jan 23, 2015 lyrixx feature #4 Implementing LoggerAwareInterface. (glynnforrest) … This PR was merged into the 1.x-dev branch.  Discussion ----------  Implementing LoggerAwareInterface.  Thanks for writing this twitter client. I thought it would be useful to set a logger after creation, so implemented `Psr\Log\LoggerAwareInterface`.  Merry Christmas!  Commits -------  2224c58 Implementing LoggerAwareInterface. Permalink Failed to load latest commit information. Twitter Implementing LoggerAwareInterface. Dec 25, 2014 .gitignore Added initial set of files Jul 13, 2013 .travis.yml Added travis Jul 13, 2013 LICENSE Added initial set of files Jul 13, 2013 README.md Fixed installation instruction Dec 4, 2014 composer.json Bumped version Dec 4, 2014 phpunit.xml.dist Fixed File permissions, thanks SensioLabsInsight Jul 13, 2013 README.md Twitter SDK Installation composer require lyrixx/twitter-sdk  Usage Create a twitter application then <?php  require __DIR__.'/vendor/autoload.php';  use Lyrixx\Twitter\Twitter;  // You can find them at: https://dev.twitter.com/apps > your app $consumerKey = 'xvz1evFS4wEEPTGEFPHBog'; $accessToken = '370773112-GmHxMAgYyLbNEtIKZeRNFsMKPR9EyMZeS9weJAEb'; $consumerSecret = 'kAcSOqF21Fu85e7zjz7ZN2U4ZRhfV3WpwPAoE3Z7kBw'; $accessTokenSecret = 'LswwdoUaIvS8ltyTt5jkRh4J50vUPVVHtR2YPi5kE';  $twitter = new Twitter($consumerKey, $consumerSecret, $accessToken, $accessTokenSecret);  // Fetch yours last tweets $response = $twitter->query('GET', 'statuses/user_timeline'); $tweets = json_decode($response->getBody(), true);  // Search some tweets $response = $twitter->query('GET', 'search/tweets', array('q' => '#symfony2')); $tweets = json_decode($response->getBody(), true);  // Tweet // Works only if your application has read/write scope try {     $response = $twitter->query('POST', 'statuses/update'); } catch (Lyrixx\Twitter\Exception\ApiClientException $e) {     $response = $e->getResponse();     $errors = json_decode($response->getBody(), true); // {""errors"":[{""code"":170,""message"":""Missing required parameter: status""}]} }  // No exception are throwed, it just works $response = $twitter->query('POST', 'statuses/update', array('status' => 'Playing with twitter API')); License This library is under the MIT license. For the full copyright and license information, please view the LICENSE file that was distributed with this source code. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lyrixx/twitter-sdk"	"A fully tested Twitter SDK."	"true"
"Markup"	"Cebe Markdown"	"https://github.com/cebe/markdown"	"An fast and extensible Markdown parser."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"498"	"39"	"80"	"GitHub - cebe/markdown: A super fast, highly extensible markdown parser for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 39 Star 498 Fork 80 cebe/markdown Code Issues 36 Pull requests 4 Pulse Graphs A super fast, highly extensible markdown parser for PHP http://markdown.cebe.cc/ 216 commits 4 branches 8 releases Fetching contributors HTML 54.1% PHP 45.9% HTML PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.9.x 1.0.x common-mark master Nothing to show 1.1.0 1.0.2 1.0.1 1.0.0 1.0.0-rc 0.9.2 0.9.1 0.9.0 Nothing to show New pull request Latest commit 04bfcaa Jun 20, 2016 cebe committed on GitHub add echo to example code … close #122 Permalink Failed to load latest commit information. bin Codestyle fix: tabs Mar 18, 2016 block better handling of continued inline HTML in paragraphs Feb 9, 2016 inline replace escape in urls Mar 6, 2015 tests better handling of continued inline HTML in paragraphs Feb 9, 2016 .gitignore added docs for extension to readme Feb 18, 2014 .scrutinizer.yml added back php import for scrutinizer Feb 13, 2014 .travis.yml update phpunit Mar 6, 2015 CHANGELOG.md fixed parsing for custom self-closing HTML tags Jan 21, 2016 CONTRIBUTING.md update readme, add CHANGLOG and CONTRIBUTING file Oct 25, 2014 GithubMarkdown.php better handling of continued inline HTML in paragraphs Feb 9, 2016 LICENSE licensing and acknowledgement Mar 5, 2014 Markdown.php better handling of continued inline HTML in paragraphs Feb 9, 2016 MarkdownExtra.php replace escape in urls Mar 6, 2015 Parser.php better extensibility for parseBlocks() Feb 6, 2016 README.md add echo to example code Jun 20, 2016 composer.json update phpunit Mar 6, 2015 phpunit.xml.dist Merge branch 'markdown-extra' Jun 11, 2014 README.md A super fast, highly extensible markdown parser for PHP What is this? A set of PHP classes, each representing a Markdown flavor, and a command line tool for converting markdown files to HTML files. The implementation focus is to be fast (see benchmark) and extensible. Parsing Markdown to HTML is as simple as calling a single method (see Usage) providing a solid implementation that gives most expected results even in non-trivial edge cases. Extending the Markdown language with new elements is as simple as adding a new method to the class that converts the markdown text to the expected output in HTML. This is possible without dealing with complex and error prone regular expressions. It is also possible to hook into the markdown structure and add elements or read meta information using the internal representation of the Markdown text as an abstract syntax tree (see Extending the language). Currently the following markdown flavors are supported: Traditional Markdown according to http://daringfireball.net/projects/markdown/syntax (try it!). Github flavored Markdown according to https://help.github.com/articles/github-flavored-markdown (try it!). Markdown Extra according to http://michelf.ca/projects/php-markdown/extra/ (currently not fully supported WIP see #25, try it!) Any mixed Markdown flavor you like because of its highly extensible structure (See documentation below). Future plans are to support: Smarty Pants http://daringfireball.net/projects/smartypants/ ... (Feel free to suggest further additions!) Who is using it? It powers the API-docs and the definitive guide for the Yii Framework 2.0. Installation PHP 5.4 or higher is required to use it. It will also run on facebook's hhvm. Installation is recommended to be done via composer by running: composer require cebe/markdown ""~1.0.1""  Alternatively you can add the following to the require section in your composer.json manually: ""cebe/markdown"": ""~1.0.1"" Run composer update afterwards. Usage In your PHP project To parse your markdown you need only two lines of code. The first one is to choose the markdown flavor as one of the following: Traditional Markdown: $parser = new \cebe\markdown\Markdown(); Github Flavored Markdown: $parser = new \cebe\markdown\GithubMarkdown(); Markdown Extra: $parser = new \cebe\markdown\MarkdownExtra(); The next step is to call the parse()-method for parsing the text using the full markdown language or calling the parseParagraph()-method to parse only inline elements. Here are some examples: // traditional markdown and parse full text $parser = new \cebe\markdown\Markdown(); echo $parser->parse($markdown);  // use github markdown $parser = new \cebe\markdown\GithubMarkdown(); echo $parser->parse($markdown);  // use markdown extra $parser = new \cebe\markdown\MarkdownExtra(); echo $parser->parse($markdown);  // parse only inline elements (useful for one-line descriptions) $parser = new \cebe\markdown\GithubMarkdown(); echo $parser->parseParagraph($markdown); You may optionally set one of the following options on the parser object: For all Markdown Flavors: $parser->html5 = true to enable HTML5 output instead of HTML4. $parser->keepListStartNumber = true to enable keeping the numbers of ordered lists as specified in the markdown. The default behavior is to always start from 1 and increment by one regardless of the number in markdown. For GithubMarkdown: $parser->enableNewlines = true to convert all newlines to <br/>-tags. By default only newlines with two preceding spaces are converted to <br/>-tags. It is recommended to use UTF-8 encoding for the input strings. Other encodings are currently not tested. The command line script You can use it to render this readme: bin/markdown README.md > README.html  Using github flavored markdown: bin/markdown --flavor=gfm README.md > README.html  or convert the original markdown description to html using the unix pipe: curl http://daringfireball.net/projects/markdown/syntax.text | bin/markdown > md.html  Here is the full Help output you will see when running bin/markdown --help: PHP Markdown to HTML converter ------------------------------  by Carsten Brandt <mail@cebe.cc>  Usage:     bin/markdown [--flavor=<flavor>] [--full] [file.md]      --flavor  specifies the markdown flavor to use. If omitted the original markdown by John Gruber [1] will be used.               Available flavors:                gfm   - Github flavored markdown [2]               extra - Markdown Extra [3]      --full    ouput a full HTML page with head and body. If not given, only the parsed markdown will be output.      --help    shows this usage information.      If no file is specified input will be read from STDIN.  Examples:      Render a file with original markdown:          bin/markdown README.md > README.html      Render a file using gihtub flavored markdown:          bin/markdown --flavor=gfm README.md > README.html      Convert the original markdown description to html using STDIN:          curl http://daringfireball.net/projects/markdown/syntax.text | bin/markdown > md.html   [1] http://daringfireball.net/projects/markdown/syntax [2] https://help.github.com/articles/github-flavored-markdown [3] http://michelf.ca/projects/php-markdown/extra/  Extensions Here are some extensions to this library: Bogardo/markdown-codepen - shortcode to embed codepens from http://codepen.io/ in markdown. kartik-v/yii2-markdown - Advanced Markdown editing and conversion utilities for Yii Framework 2.0. cebe/markdown-latex - Convert Markdown to LaTeX and PDF softark/creole - A creole markup parser ... add yours! Extending the language Markdown consists of two types of language elements, I'll call them block and inline elements simlar to what you have in HTML with <div> and <span>. Block elements are normally spreads over several lines and are separated by blank lines. The most basic block element is a paragraph (<p>). Inline elements are elements that are added inside of block elements i.e. inside of text. This markdown parser allows you to extend the markdown language by changing existing elements behavior and also adding new block and inline elements. You do this by extending from the parser class and adding/overriding class methods and properties. For the different element types there are different ways to extend them as you will see in the following sections. Adding block elements The markdown is parsed line by line to identify each non-empty line as one of the block element types. To identify a line as the beginning of a block element it calls all protected class methods who's name begins with identify. An identify function returns true if it has identified the block element it is responsible for or false if not. In the following example we will implement support for fenced code blocks which are part of the github flavored markdown. <?php  class MyMarkdown extends \cebe\markdown\Markdown {     protected function identifyLine($line, $lines, $current)     {         // if a line starts with at least 3 backticks it is identified as a fenced code block         if (strncmp($line, '```', 3) === 0) {             return 'fencedCode';         }         return parent::identifyLine($lines, $current);     }      // ... } In the above, $line is a string containing the content of the current line and is equal to $lines[$current]. You may use $lines and $current to check other lines than the current line. In most cases you can ignore these parameters. Parsing of a block element is done in two steps: ""consuming"" all the lines belonging to it. In most cases this is iterating over the lines starting from the identified line until a blank line occurs. This step is implemented by a method named consume{blockName}() where {blockName} is the same name as used for the identify function above. The consume method also takes the lines array and the number of the current line. It will return two arguments: an array representing the block element in the abstract syntax tree of the markdown document and the line number to parse next. In the abstract syntax array the first element refers to the name of the element, all other array elements can be freely defined by yourself. In our example we will implement it like this: protected function consumeFencedCode($lines, $current) {     // create block array     $block = [         'fencedCode',         'content' => [],     ];     $line = rtrim($lines[$current]);      // detect language and fence length (can be more than 3 backticks)     $fence = substr($line, 0, $pos = strrpos($line, '`') + 1);     $language = substr($line, $pos);     if (!empty($language)) {         $block['language'] = $language;     }      // consume all lines until ```     for($i = $current + 1, $count = count($lines); $i < $count; $i++) {         if (rtrim($line = $lines[$i]) !== $fence) {             $block['content'][] = $line;         } else {             // stop consuming when code block is over             break;         }     }     return [$block, $i]; } ""rendering"" the element. After all blocks have been consumed, they are being rendered using the render{elementName}()-method where elementName refers to the name of the element in the abstract syntax tree: protected function renderFencedCode($block) {     $class = isset($block['language']) ? ' class=""language-' . $block['language'] . '""' : '';     return ""<pre><code$class>"" . htmlspecialchars(implode(""\n"", $block['content']) . ""\n"", ENT_NOQUOTES, 'UTF-8') . '</code></pre>'; } You may also add code highlighting here. In general it would also be possible to render ouput in a different language than HTML for example LaTeX. Adding inline elements Adding inline elements is different from block elements as they are parsed using markers in the text. An inline element is identified by a marker that marks the beginning of an inline element (e.g. [ will mark a possible beginning of a link or ` will mark inline code). Parsing methods for inline elements are also protected and identified by the prefix parse. Additionally a @marker annotation in PHPDoc is needed to register the parse function for one or multiple markers. The method will then be called when a marker is found in the text. As an argument it takes the text starting at the position of the marker. The parser method will return an array containing the element of the abstract sytnax tree and an offset of text it has parsed from the input markdown. All text up to this offset will be removed from the markdown before the next marker will be searched. As an example, we will add support for the [strikethrough][] feature of github flavored markdown: [strikethrough]: https://help.github.com/articles/github-flavored-markdown#strikethrough ""Strikethrough feature of github flavored markdown"" <?php  class MyMarkdown extends \cebe\markdown\Markdown {     /**  * @marker ~~  */     protected function parseStrike($markdown)     {         // check whether the marker really represents a strikethrough (i.e. there is a closing ~~)         if (preg_match('/^~~(.+?)~~/', $markdown, $matches)) {             return [                 // return the parsed tag as an element of the abstract syntax tree and call `parseInline()` to allow                 // other inline markdown elements inside this tag                 ['strike', $this->parseInline($matches[1])],                 // return the offset of the parsed text                 strlen($matches[0])             ];         }         // in case we did not find a closing ~~ we just return the marker and skip 2 characters         return [['text', '~~'], 2];     }      // rendering is the same as for block elements, we turn the abstract syntax array into a string.     protected function renderStrike($element)     {         return '<del>' . $this->renderAbsy($element[1]) . '</del>';     } } Composing your own Markdown flavor This markdown library is composed of traits so it is very easy to create your own markdown flavor by adding and/or removing the single feature traits. Designing your Markdown flavor consists of four steps: Select a base class Select language feature traits Define escapeable characters Optionally add custom rendering behavior Select a base class If you want to extend from a flavor and only add features you can use one of the existing classes (Markdown, GithubMarkdown or MarkdownExtra) as your flavors base class. If you want to define a subset of the markdown language, i.e. remove some of the features, you have to extend your class from Parser. Select language feature traits The following shows the trait selection for traditional Markdown. class MyMarkdown extends Parser {     // include block element parsing using traits     use block\CodeTrait;     use block\HeadlineTrait;     use block\HtmlTrait {         parseInlineHtml as private;     }     use block\ListTrait {         // Check Ul List before headline         identifyUl as protected identifyBUl;         consumeUl as protected consumeBUl;     }     use block\QuoteTrait;     use block\RuleTrait {         // Check Hr before checking lists         identifyHr as protected identifyAHr;         consumeHr as protected consumeAHr;     }     // include inline element parsing using traits     use inline\CodeTrait;     use inline\EmphStrongTrait;     use inline\LinkTrait;      /**  * @var boolean whether to format markup according to HTML5 spec.  * Defaults to `false` which means that markup is formatted as HTML4.  */     public $html5 = false;      protected function prepare()     {         // reset references         $this->references = [];     }      // ... } In general, just adding the trait with use is enough, however in some cases some fine tuning is desired to get most expected parsing results. Elements are detected in alphabetical order of their identification function. This means that if a line starting with - could be a list or a horizontal rule, the preference has to be set by renaming the identification function. This is what is done with renaming identifyHr to identifyAHr and identifyBUl to identifyBUl. The consume function always has to have the same name as the identification function so this has to be renamed too. There is also a conflict for parsing of the < character. This could either be a link/email enclosed in < and > or an inline HTML tag. In order to resolve this conflict when adding the LinkTrait, we need to hide the parseInlineHtml method of the HtmlTrait. If you use any trait that uses the $html5 property to adjust its output you also need to define this property. If you use the link trait it may be useful to implement prepare() as shown above to reset references before parsing to ensure you get a reusable object. Define escapeable characters Depenedend on the language features you have chosen there is a different set of characters that can be escaped using \. The following is the set of escapeable characters for traditional markdown, you can copy it to your class as is.     /**  * @var array these are ""escapeable"" characters. When using one of these prefixed with a  * backslash, the character will be outputted without the backslash and is not interpreted  * as markdown.  */     protected $escapeCharacters = [         '\\', // backslash         '`', // backtick         '*', // asterisk         '_', // underscore         '{', '}', // curly braces         '[', ']', // square brackets         '(', ')', // parentheses         '#', // hash mark         '+', // plus sign         '-', // minus sign (hyphen)         '.', // dot         '!', // exclamation mark         '<', '>',     ]; Add custom rendering behavior Optionally you may also want to adjust rendering behavior by overriding some methods. You may refer to the consumeParagraph() method of the Markdown and GithubMarkdown classes for some inspiration which define different rules for which elements are allowed to interrupt a paragraph. Acknowledgements I'd like to thank [@erusev][] for creating [Parsedown][] which heavily influenced this work and provided the idea of the line based parsing approach. [@erusev]: https://github.com/erusev ""Emanuil Rusev"" [Parsedown]: http://parsedown.org/ ""The Parsedown PHP Markdown parser"" FAQ Why another markdown parser? While reviewing PHP markdown parsers for choosing one to use bundled with the [Yii framework 2.0][] I found that most of the implementations use regex to replace patterns instead of doing real parsing. This way extending them with new language elements is quite hard as you have to come up with a complex regex, that matches your addition but does not mess with other elements. Such additions are very common as you see on github which supports referencing issues, users and commits in the comments. A [real parser][] should use context aware methods that walk trough the text and parse the tokens as they find them. The only implentation that I have found that uses this approach is [Parsedown][] which also shows that this implementation is much faster than the regex way. Parsedown however is an implementation that focuses on speed and implements its own flavor (mainly github flavored markdown) in one class and at the time of this writing was not easily extensible. Given the situation above I decided to start my own implementation using the parsing approach from Parsedown and making it extensible creating a class for each markdown flavor that extend each other in the way that also the markdown languages extend each other. This allows you to choose between markdown language flavors and also provides a way to compose your own flavor picking the best things from all. I chose this approach as it is easier to implement and also more intuitive approach compared to using callbacks to inject functionallity into the parser. [real parser]: http://en.wikipedia.org/wiki/Parsing#Types_of_parser [Parsedown]: http://parsedown.org/ ""The Parsedown PHP Markdown parser"" Where do I report bugs or rendering issues? Just [open an issue][] on github, post your markdown code and describe the problem. You may also attach screenshots of the rendered HTML result to describe your problem. [open an issue]: https://github.com/cebe/markdown/issues/new How can I contribute to this library? Check the CONTRIBUTING.md file for more info. Am I free to use this? This library is open source and licensed under the [MIT License][]. This means that you can do whatever you want with it as long as you mention my name and include the [license file][license]. Check the [license][] for details. [MIT License]: http://opensource.org/licenses/MIT [license]: https://github.com/cebe/markdown/blob/master/LICENSE Contact Feel free to contact me using email or twitter. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cebe/markdown"	"An fast and extensible Markdown parser."	"true"
"Markup"	"Ciconia"	"https://github.com/kzykhys/Ciconia"	"Another Markdown parser that supports Github flavoured Markdown."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"371"	"23"	"35"	"GitHub - kzykhys/Ciconia: A New Markdown parser for PHP5.4 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 371 Fork 35 kzykhys/Ciconia Code Issues 18 Pull requests 8 Wiki Pulse Graphs A New Markdown parser for PHP5.4 http://ciconia.kzykhys.com/ 157 commits 3 branches 12 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 gh-pages master Nothing to show v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 94e9c75 Feb 15, 2014 kzykhys Travis: Fixes after_success scripts Permalink Failed to load latest commit information. bin Add --diagnose option to CLI #13 Nov 13, 2013 src/Ciconia Merge branch '1.0' Feb 3, 2014 test/Ciconia Merge branch '1.0' Feb 3, 2014 .gitignore initial commit Aug 2, 2013 .travis.yml Travis: Fixes after_success scripts Feb 15, 2014 LICENSE initial commit Aug 2, 2013 README.md Removed 1.1 features Jan 24, 2014 composer.json [Experimental/Pygments] Pygments syntax highlighter support Jan 28, 2014 phpunit.xml.dist initial commit Aug 2, 2013 README.md Ciconia - A New Markdown Parser for PHP The Markdown parser for PHP5.4, it is fully extensible. Ciconia is the collection of extension, so you can replace, add or remove each parsing mechanism. Try Demo / Docs / Supported Syntax / API Reference Based on John Gruber's Markdown.pl Github Flavored Markdown support (disabled by default) Multiple underscores in words New lines Fenced code blocks Task lists Table URL Autolinking Tested with karlcow/markdown-testsuite Requirements PHP5.4+ Composer Installation create a composer.json {     ""require"": {         ""kzykhys/ciconia"": ""~1.0.0""     } } and run php composer.phar install  Usage Traditional Markdown use Ciconia\Ciconia;  $ciconia = new Ciconia(); $html = $ciconia->render('Markdown is **awesome**');  // <p>Markdown is <em>awesome</em></p> Github Flavored Markdown To activate 6 gfm features: use Ciconia\Ciconia; use Ciconia\Extension\Gfm;  $ciconia = new Ciconia(); $ciconia->addExtension(new Gfm\FencedCodeBlockExtension()); $ciconia->addExtension(new Gfm\TaskListExtension()); $ciconia->addExtension(new Gfm\InlineStyleExtension()); $ciconia->addExtension(new Gfm\WhiteSpaceExtension()); $ciconia->addExtension(new Gfm\TableExtension()); $ciconia->addExtension(new Gfm\UrlAutoLinkExtension());  $html = $ciconia->render('Markdown is **awesome**');  // <p>Markdown is <em>awesome</em></p> Options Option Type Default Description tabWidth integer 4 Number of spaces nestedTagLevel integer 3 Max depth of nested HTML tags strict boolean false Throws exception if markdown contains syntax error use Ciconia\Ciconia;  $ciconia = new Ciconia(); $html = $ciconia->render(     'Markdown is **awesome**',     ['tabWidth' => 8, 'nestedTagLevel' => 5, 'strict' => true] ); Rendering HTML or XHTML Ciconia renders HTML by default. If you prefer XHTML: use Ciconia\Ciconia; use Ciconia\Renderer\XhtmlRenderer;  $ciconia = new Ciconia(new XhtmlRenderer()); $html = $ciconia->render('Markdown is **awesome**');  // <p>Markdown is <em>awesome</em></p> Extend Ciconia How to Extend Creating extension is easy, just implement Ciconia\Extension\ExtensionInterface. Your class must implement 2 methods. void register(Ciconia\Markdown $markdown) Register your callback to markdown event manager. Ciconia\Markdown is instance of Ciconia\Event\EmitterInterface (looks like Node.js's EventEmitter) string getName() Returns the name of your extension. If your name is the same as one of core extension, it will be replaced by your extension. Extension Example This sample extension turns @username mentions into links. <?php  use Ciconia\Common\Text; use Ciconia\Extension\ExtensionInterface;  class MentionExtension implements ExtensionInterface {      /**  * {@inheritdoc}  */     public function register(\Ciconia\Markdown $markdown)     {         $markdown->on('inline', [$this, 'processMentions']);     }      /**  * @param Text $text  */     public function processMentions(Text $text)     {         // Turn @username into [@username](http://example.com/user/username)         $text->replace('/(?:^|[^a-zA-Z0-9.])@([A-Za-z]+[A-Za-z0-9]+)/', function (Text $w, Text $username) {             return '[@' . $username . '](http://example.com/user/' . $username . ')';         });     }      /**  * {@inheritdoc}  */     public function getName()     {         return 'mention';     } } Register your extension. <?php  require __DIR__ . '/vendor/autoload.php';  $ciconia = new \Ciconia\Ciconia(); $ciconia->addExtension(new MentionExtension()); echo $ciconia->render('@kzykhys my email address is example@example.com!'); Output <p><a href=""http://example.com/user/kzykhys"">@kzykhys</a> my email address is example@example.com!</p> Each extension handles string as a Text object. See API section of kzykhys/Text. Events Possible events are: Event Description initialize Document level parsing. Called at the first of the sequence. block Block level parsing. Called after initialize inline Inline level parsing. Generally called by block level parsers. detab Convert tabs to spaces. Generally called by block level parsers. outdent Remove one level of line-leading tabs or spaces. Generally called by block level parsers. finalize Called after block See the source code of Extensions See events and timing information Create your own Renderer Ciconia supports HTML/XHTML output. but if you prefer customizing the output, just create a class that implements Ciconia\Renderer\RendererInterface. See Ciconia\Renderer\RendererInterface Command Line Interface Usage Basic Usage: (Outputs result to STDOUT) ciconia /path/to/file.md  Following command saves result to file: ciconia /path/to/file.md > /path/to/file.html  Or using pipe (On Windows in does't work): echo ""Markdown is **awesome**"" | ciconia  Command Line Options  --gfm                 Activate Gfm extensions  --compress (-c)       Remove whitespace between HTML tags  --format (-f)         Output format (html|xhtml) (default: ""html"")  --lint (-l)           Syntax check only (lint)  Where is the script? CLI script will be installed in vendor/bin/ciconia by default. To change the location: Yes, there are two ways an alternate vendor binary location can be specified: Setting the bin-dir configuration setting in composer.json Setting the environment variable COMPOSER_BIN_DIR http://getcomposer.org/doc/articles/vendor-binaries.md Using PHAR version You can also use single phar file ciconia.phar /path/to/file.md  If you prefer access this command globally, download ciconia.phar and move it into your PATH. mv ciconia.phar /usr/local/bin/ciconia  Testing Install or update dev dependencies. php composer.phar update --dev  and run phpunit License The MIT License Contributing Feel free to fork this repository and send a pull request. (A list of contributors) Author Kazuyuki Hayashi (@kzykhys) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kzykhys/Ciconia"	"Another Markdown parser that supports Github flavoured Markdown."	"true"
"Markup"	"CommonMark PHP"	"https://github.com/thephpleague/commonmark"	"A Markdown parser which supports the full."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"718"	"35"	"54"	"GitHub - thephpleague/commonmark: Markdown parser for PHP based on the CommonMark spec. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 718 Fork 54 thephpleague/commonmark Code Issues 7 Pull requests 1 Pulse Graphs Markdown parser for PHP based on the CommonMark spec. http://commonmark.thephpleague.com 701 commits 3 branches 28 releases Fetching contributors PHP 99.3% HTML 0.7% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/resolve-parent-class gh-pages master Nothing to show 0.14.0 0.13.4 0.13.3 0.13.2 0.13.1 0.13.0 0.12.0 0.11.3 0.11.2 0.11.1 0.11.0 0.10.0 0.9.0 0.8.0 0.7.2 0.7.1 0.7.0 0.6.1 0.6.0 0.5.1 0.5.0 0.4.0 0.3.0 0.2.1 0.2.0 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit b73c0b7 Jul 2, 2016 colinodell Update sample version constraints in README Permalink Failed to load latest commit information. bin bugfix for vendor autoload.php file path Jun 14, 2016 src Use `htmlspecialchars` instead of `htmlentities` for the `html_input`… Jun 30, 2016 tests Add a new `allow_unsafe_links` option Jun 29, 2016 .gitattributes Use scrutinizer-ci Nov 28, 2014 .gitignore Update travis-ci to thephpleague's skeleton style Oct 19, 2015 .scrutinizer.yml Reduced a bit of complexity and added some micro-ops. Dec 4, 2014 .styleci.yml Updated styleci config Feb 7, 2016 .travis.yml Prefer dist + cache for Travis builds Jun 8, 2016 CHANGELOG.md Prepare to release 0.14.0 Jul 2, 2016 CONDUCT.md Added CONDUCT.md Oct 2, 2015 CONTRIBUTING.md Convert URLs that support https but are http presently Mar 24, 2016 LICENSE Update copyright years Jan 13, 2016 README.md Update sample version constraints in README Jul 2, 2016 UPGRADE.md Prepare to release 0.14.0 Jul 2, 2016 composer.json Prepare to release 0.14.0 Jul 2, 2016 phpunit.xml.dist Update phpunit config using latest changes from skeleton Mar 8, 2015 README.md league/commonmark league/commonmark is a Markdown parser for PHP which supports the full CommonMark spec. It is based on the CommonMark JS reference implementation by John MacFarlane (@jgm). Goals Fully support the CommonMark spec (100% compliance) Match the C and JavaScript implementations of CommonMark to make a logical and similar API Continuously improve performance without sacrificing quality or compliance Provide an extensible parser/renderer which users may customize as needed Installation This project can be installed via Composer: $ composer require league/commonmark Note: See Versioning for important information on which version constraints you should use. Basic Usage The CommonMarkConverter class provides a simple wrapper for converting CommonMark to HTML: use League\CommonMark\CommonMarkConverter;  $converter = new CommonMarkConverter(); echo $converter->convertToHtml('# Hello World!');  // <h1>Hello World!</h1> Advanced Usage & Customization The actual conversion process requires two steps: Parsing the Markdown input into an AST Rendering the AST document as HTML Although the CommonMarkConverter wrapper simplifies this process for you, advanced users will likely want to do this themselves: use League\CommonMark\CommonMarkConverter; use League\CommonMark\Environment;  // Obtain a pre-configured Environment with all the CommonMark parsers/renderers ready-to-go $environment = Environment::createCommonMarkEnvironment();  // Optional: Add your own parsers, renderers, extensions, etc. (if desired) // For example: $environment->addInlineParser(new TwitterHandleParser());  // Define your configuration: $config = ['html_input' => 'escape'];  // Create the converter $converter = new CommonMarkConverter($config, $environment);  // Here's our sample input $markdown = '# Hello World!';  // Let's render it! echo $converter->convertToHtml($markdown);  // The output should be: // <h1>Hello World!</h1> This approach allows you to access/modify the AST before rendering it. You can also add custom parsers/renderers by registering them with the Environment class. The documentation provides several customization examples such as: Parsing Twitter handles into profile links Converting smilies into emoticon images You can also reference the core CommonMark parsers/renderers as they use the same functionality available to you. Documentation Documentation can be found at commonmark.thephpleague.com. Related Packages Integrations CakePHP 3 Drupal Laravel 4 & 5 Sculpin Symfony Twig CommonMark Extras You can find several examples of useful extensions and customizations in the league/commonmark-extras package. You can add them to your parser or use them as examples to develop your own custom features. Community Extensions Custom parsers/renderers can be bundled into extensions which extend CommonMark. Here are some that you may find interesting: Markua - Markdown parser for PHP which intends to support the full Markua spec. CommonMark Table Extension - Adds the ability to create tables in CommonMark documents. CommonMark Attributes Extension - Adds a syntax to define attributes on the various HTML elements. Alt Three Emoji An emoji parser for CommonMark. If you build your own, feel free to submit a PR to add it to this list! Others Check out the other cool things people are doing with league/commonmark: https://packagist.org/packages/league/commonmark/dependents Compatibility with CommonMark This project aims to fully support the entire CommonMark spec. Other flavors of Markdown may work but are not supported. Any/all changes made to the spec or JS reference implementation should eventually find their way back into this codebase. The following table shows which versions of league/commonmark are compatible with which version of the CommonMark spec: league/commonmark CommonMark spec 0.14.0 0.13.4 0.13.3 0.13.2 0.25 0.13.1 0.13.0 0.24 0.12.x 0.11.x 0.22 0.10.0 0.21 0.9.0 0.20 0.8.0 0.19 0.7.2 0.7.1 0.7.0 0.6.1 0.18 0.17 0.6.0 0.16 0.15 0.14 0.5.x 0.4.0 0.13 0.3.0 0.12 0.2.x 0.10 0.1.x 0.01 This package is not part of CommonMark, but rather a compatible derivative. Testing $ ./vendor/bin/phpunit This will also test league/commonmark against the latest supported spec. Performance Benchmarks You can compare the performance of league/commonmark to other popular parsers by running the included benchmark tool: $ ./tests/benchmark/benchmark.php Versioning SemVer will be followed closely. 0.x.0 versions will introduce breaking changes, so be careful which version constraints you use. It's highly recommended that you use Composer's caret operator to ensure compatibility; for example: ^0.14. This is equivalent to >=0.14.0 <0.15.0. If you're only using the CommonMarkConverter class to convert Markdown (no other class references, custom parsers, etc.), then it should be safe to use a broader constraint like ~0.14, >0.14, etc. I personally promise to never break this specific class in any future 0.x release. Stability While this package does work well, the underlying code should not be considered ""stable"" yet. The original spec and JS parser may undergo changes in the near future which will result in corresponding changes to this code. Any methods tagged with @api are not expected to change, but other methods/classes might. Major release 1.0.0 will be reserved for when both CommonMark and this project are considered stable (see outstanding CommonMark spec issues). 0.x.y will be used until that happens. Contributing If you encounter a bug in the spec, please report it to the CommonMark project. Any resulting fix will eventually be implemented in this project as well. For now, I'd like to maintain similar logic as the JS reference implementation until everything is stable. I'll gladly accept any contributions which: Mirror fixes made to the reference implementation Optimize existing methods or regular expressions Fix issues with adhering to the spec examples Major refactoring should be avoided for now so that we can easily follow updates made to the reference implementation. This restriction will likely be lifted once the CommonMark specs and implementations are considered stable. Please see CONTRIBUTING for additional details. Security If you discover any security related issues, please email your report privately to colinodell@gmail.com instead of using the issue tracker. Credits & Acknowledgements Colin O'Dell John MacFarlane All Contributors This code is a port of the CommonMark JS reference implementation which is written, maintained and copyrighted by John MacFarlane. This project simply wouldn't exist without his work. License league/commonmark is licensed under the BSD-3 license. See the LICENSE file for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/commonmark"	"A Markdown parser which supports the full."	"true"
"Markup"	"CommonMark spec"	"http://spec.commonmark.org/"	"A Markdown parser which supports the full."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3113"	"140"	"177"	"GitHub - jgm/CommonMark: CommonMark spec, with reference implementations in C and JavaScript Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 140 Star 3,113 Fork 177 jgm/CommonMark Code Issues 18 Pull requests 2 Wiki Pulse Graphs CommonMark spec, with reference implementations in C and JavaScript http://commonmark.org 1,618 commits 3 branches 21 releases Fetching contributors Python 96.6% Makefile 3.4% Python Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master mom newformat Nothing to show 0.26 0.25 0.24 0.23 0.22 0.21.1 0.21 0.20 0.19 0.18 0.17 0.16 0.15 0.14 0.13 0.12 0.11 0.10 0.9 0.7 0.6 Nothing to show New pull request Latest commit 91e045c Jul 15, 2016 jgm Bump version to 0.26, update changelog. Permalink Failed to load latest commit information. test spec_tests.py: exit code is sum of failures and errors. Jun 2, 2016 tools make interact more button-like and clearer Jun 4, 2016 .editorconfig Removed JS specific stuff from .editorconfig. Jan 24, 2015 .gitignore Added spec.html to .gitignore. Jun 26, 2015 CommonMark.dtd CommonMark.dtd - allow item in custom_block. Dec 31, 2015 LICENSE Update license year range to 2016 Jan 26, 2016 Makefile New format for spec tests, new lua formatter for specs. Jan 10, 2016 README.md Add closing paranthesis to README.md Mar 16, 2016 alternative-html-blocks.txt Initial commit Aug 13, 2014 changelog.txt Bump version to 0.26, update changelog. Jul 15, 2016 spec.txt Bump version to 0.26, update changelog. Jul 15, 2016 README.md CommonMark CommonMark is a rationalized version of Markdown syntax, with a spec and BSD-licensed reference implementations in C and JavaScript. Try it now! For more details, see http://commonmark.org. This repository contains the spec itself, along with tools for running tests against the spec, and for creating HTML and PDF versions of the spec. The reference implementations live in separate repositories: https://github.com/jgm/cmark (C) https://github.com/jgm/commonmark.js (JavaScript) There is a list of third-party libraries in a dozen different languages here. Running tests against the spec The spec contains over 500 embedded examples which serve as conformance tests. To run the tests using an executable $PROG: python3 test/spec_tests.py --program $PROG  If you want to extract the raw test data from the spec without actually running the tests, you can do: python3 test/spec_tests.py --dump-tests  and you'll get all the tests in JSON format. The spec The source of the spec is spec.txt. This is basically a Markdown file, with code examples written in a shorthand form: ```````````````````````````````` example Markdown source . expected HTML output ````````````````````````````````  To build an HTML version of the spec, do make spec.html. To build a PDF version, do make spec.pdf. For both versions, you must have the lua rock lcmark installed: after installing lua and lua rocks, luarocks install lcmark. For the PDF you must also have xelatex installed. The spec is written from the point of view of the human writer, not the computer reader. It is not an algorithm---an English translation of a computer program---but a declarative description of what counts as a block quote, a code block, and each of the other structural elements that can make up a Markdown document. Because John Gruber's canonical syntax description leaves many aspects of the syntax undetermined, writing a precise spec requires making a large number of decisions, many of them somewhat arbitrary. In making them, we have appealed to existing conventions and considerations of simplicity, readability, expressive power, and consistency. We have tried to ensure that ""normal"" documents in the many incompatible existing implementations of Markdown will render, as far as possible, as their authors intended. And we have tried to make the rules for different elements work together harmoniously. In places where different decisions could have been made (for example, the rules governing list indentation), we have explained the rationale for our choices. In a few cases, we have departed slightly from the canonical syntax description, in ways that we think further the goals of Markdown as stated in that description. For the most part, we have limited ourselves to the basic elements described in Gruber's canonical syntax description, eschewing extensions like footnotes and definition lists. It is important to get the core right before considering such things. However, we have included a visible syntax for line breaks and fenced code blocks. Differences from original Markdown There are only a few places where this spec says things that contradict the canonical syntax description: It allows all punctuation symbols to be backslash-escaped, not just the symbols with special meanings in Markdown. We found that it was just too hard to remember which symbols could be escaped. It introduces an alternative syntax for hard line breaks, a backslash at the end of the line, supplementing the two-spaces-at-the-end-of-line rule. This is motivated by persistent complaints about the “invisible” nature of the two-space rule. Link syntax has been made a bit more predictable (in a backwards-compatible way). For example, Markdown.pl allows single quotes around a title in inline links, but not in reference links. This kind of difference is really hard for users to remember, so the spec allows single quotes in both contexts. The rule for HTML blocks differs, though in most real cases it shouldn't make a difference. (See the section on HTML Blocks for details.) The spec's proposal makes it easy to include Markdown inside HTML block-level tags, if you want to, but also allows you to exclude this. It is also makes parsing much easier, avoiding expensive backtracking. It does not collapse adjacent bird-track blocks into a single blockquote: > this is two  > blockquotes  > this is a single > > blockquote with two paragraphs  Rules for content in lists differ in a few respects, though (as with HTML blocks), most lists in existing documents should render as intended. There is some discussion of the choice points and differences in the subsection of List Items entitled Motivation. We think that the spec's proposal does better than any existing implementation in rendering lists the way a human writer or reader would intuitively understand them. (We could give numerous examples of perfectly natural looking lists that nearly every existing implementation flubs up.) The spec stipulates that two blank lines break out of all list contexts. This is an attempt to deal with issues that often come up when someone wants to have two adjacent lists, or a list followed by an indented code block. Changing bullet characters, or changing from bullets to numbers or vice versa, starts a new list. We think that is almost always going to be the writer's intent. The number that begins an ordered list item may be followed by either . or ). Changing the delimiter style starts a new list. The start number of an ordered list is significant. Fenced code blocks are supported, delimited by either backticks (```) or tildes (~~~). Contributing There is a forum for discussing CommonMark; you should use it instead of github issues for questions and possibly open-ended discussions. Use the github issue tracker only for simple, clear, actionable issues. Authors The spec was written by John MacFarlane, drawing on his experience writing and maintaining Markdown implementations in several languages, including the first Markdown parser not based on regular expression substitutions (pandoc) and the first markdown parsers based on PEG grammars (peg-markdown, lunamark) a detailed examination of the differences between existing Markdown implementations using BabelMark 2, and extensive discussions with David Greenspan, Jeff Atwood, Vicent Marti, Neil Williams, and Benjamin Dumke-von der Ehe. Since the first announcement, many people have contributed ideas. Kārlis Gaņģis was especially helpful in refining the rules for emphasis, strong emphasis, links, and images. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jgm/CommonMark"	"A Markdown parser which supports the full."	"true"
"Markup"	"Decoda"	"https://github.com/milesj/decoda"	"A lightweight markup parser library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"161"	"21"	"44"	"GitHub - milesj/decoda: A lightweight lexical string parser for BBCode styled markup. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 161 Fork 44 milesj/decoda Code Issues 4 Pull requests 1 Pulse Graphs A lightweight lexical string parser for BBCode styled markup. 463 commits 3 branches 58 releases 18 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.x 4.x master Nothing to show 6.7.2 6.7.1 6.7.0 6.6.2 6.6.1 6.6.0 6.5.2 6.5.1 6.5.0 6.4.3 6.4.2 6.4.1 6.4.0 6.3.1 6.3.0 6.2.3 6.2.2 6.2.1 6.2.0 6.1.0 6.0.5 6.0.4 6.0.3 6.0.2 6.0.1 6.0.0 6.0.0-rc3 6.0.0-rc2 6.0.0-rc1 5.1.3 5.1.2 5.1.1 5.1.0 5.0.0 5.0.0-rc2 5.0.0-rc1 5.0.0-beta 4.1.1 4.1.0 4.1.0-rc2 4.1.0-rc1 4.1.0-beta 4.0.2 4.0.1 4.0.0 4.0.0-beta 3.5 3.4 3.3.3 3.3.2 3.3.1 3.3 3.1 3.0 2.9 2.8 2.7 2.6.1 Nothing to show New pull request Latest commit f904654 May 22, 2016 milesj Started working on a caching layer. Permalink Failed to load latest commit information. docs Added docs. Mar 11, 2015 emoticons Moving things around to support the new namespace structure Aug 24, 2012 examples Converted tabs to spaces Sep 25, 2013 src Started working on a caching layer. May 22, 2016 tests Added support for literal tags by using double brackets. May 21, 2016 .gitignore Fix self closing tags within other tags bug [#52] Sep 25, 2013 .travis.yml 6.7.2 May 14, 2016 composer.json Started working on a caching layer. May 23, 2016 license.md 4.1.0 Nov 20, 2012 phpunit.xml.dist Updated test running Mar 29, 2013 readme.md 6.7.2 May 15, 2016 version.md 6.7.2 May 15, 2016 readme.md Decoda v6.7.2 A lightweight lexical string parser for BBCode styled markup. Requirements PHP 5.3.0 Multibyte Composer Contributors ""Marten-Plain"" emoticons by Mårten Lundin - http://adiumxtras.com/index.php?a=xtras&xtra_id=6920 ""HTML_BBCodeParser"" by Seth Price - http://pear.php.net/package/HTML_BBCodeParser/ Features Parses custom code to valid (X)HTML markup Setting to make links and emails auto-clickable Setting to use shorthand text for links and emails Filters to parse markup and custom code Hooks to execute callbacks during the parsing cycle Loaders to load resources and files for configuration Engines to render complex markup using a template system Can censor offensive words Can convert smiley faces into images Basic support for localized messages Supports a wide range of tags Parent child node hierarchy Fixes incorrectly nested tags by removing the broken/unclosed tags Self closing tags Logs errors for validation Tag and attribute aliasing Filters The following filters and supported tags are available. Default - b, i, u, s, sup, sub, br, hr, abbr, time Block - align, float, hide, alert, note, div, spoiler, left, right, center, justify Code - code, source, var Email - email, mail Image - image, img List - list, olist, ol, ul, li, * Quote - quote Text - font, size, color, h1-h6 Url - url, link Video - video, youtube, vimeo, veoh, liveleak, dailymotion, myspace, wegame, collegehumor Table - table, thead, tbody, tfoot, tr, td, th, row, col Hooks The following hooks are available. Censor - Censors all words found within config/censored Clickable - Converts all non-tag wrapped URLs and emails into clickable links Emoticon - Converts all smilies found within config/emoticons into emoticon images Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/milesj/decoda"	"A lightweight markup parser library."	"true"
"Markup"	"Emoji"	"https://github.com/heyupdate/Emoji"	"A library that converts unicode characters and names into emoji images."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"22"	"2"	"6"	"GitHub - heyupdate/emoji: A simple PHP library for handling Emoji Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 22 Fork 6 heyupdate/emoji Code Issues 1 Pull requests 0 Pulse Graphs A simple PHP library for handling Emoji 15 commits 2 branches 7 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/replace-with-name master Nothing to show 1.0.0 1.0.0-beta 0.2.2 0.2.1 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit ce6c189 May 21, 2016 Tom Graham Update branch alias Permalink Failed to load latest commit information. bin Compile the emoji index to improve performance. May 21, 2016 config Initial commit Dec 5, 2014 src Allow the img HTML markup to be modified. May 21, 2016 tests Allow the img HTML markup to be modified. May 21, 2016 .gitignore Compile the emoji index to improve performance. May 21, 2016 .php_cs Compile the emoji index to improve performance. May 21, 2016 .travis.yml Bump PHP version requirement to 5.4 May 21, 2016 LICENSE Added README and LICENSE files. Jan 11, 2015 README.md Added README and LICENSE files. Jan 11, 2015 composer.json Update branch alias May 21, 2016 phpunit.xml.dist Remove unused test bootstrap May 21, 2016 README.md Emoji Emoji images from unicode characters and names (i.e. :sunrise:). Built to work with Twemoji images. use HeyUpdate\Emoji\Emoji; use HeyUpdate\Emoji\EmojiIndex;  $emoji = new Emoji(new EmojiIndex(), '//twemoji.maxcdn.com/36x36/%s.png'); $emoji->replaceEmojiWithImages('🎈 :balloon:'); Install Via Composer $ composer require heyupdate/emoji Requirements The following versions of PHP are supported by this version. PHP 5.3 PHP 5.4 PHP 5.5 PHP 5.6 Testing $ phpunit Credits Tom Graham License The MIT License (MIT). Please see License File for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/heyupdate/Emoji"	"A library that converts unicode characters and names into emoji images."	"true"
"Markup"	"HTML to Markdown"	"https://github.com/thephpleague/html-to-markdown"	"Converts HTML into Markdown."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"392"	"23"	"85"	"GitHub - thephpleague/html-to-markdown: Convert HTML to Markdown with PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 392 Fork 85 thephpleague/html-to-markdown Code Issues 26 Pull requests 1 Pulse Graphs Convert HTML to Markdown with PHP 231 commits 2 branches 17 releases 20 contributors PHP 99.9% HTML 0.1% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature-preserve-attributes master Nothing to show 4.2.1 4.2.0 4.1.1 4.1.0 4.0.1 4.0.0 3.1.1 3.1.0 3.0.0 2.2.2 2.2.1 2.2.0 2.1.2 2.1.1 2.1.0 2.0.1 2.0.0 Nothing to show New pull request Latest commit 4e4d460 May 18, 2016 colinodell Prepare for 4.2.1 release Permalink Failed to load latest commit information. bin Fix path to autoload.php if package is included as a library Apr 23, 2016 src Remove formatting issues with CI. May 18, 2016 tests Remove double HTML entity decoding, as this is not desireable (#60) Feb 10, 2016 .gitattributes Add more export-ignore to slim down composer package. Sep 1, 2015 .gitignore Add PHPUnit configuration May 29, 2015 .scrutinizer.yml Configure Scrutinizer CI May 29, 2015 .styleci.yml Make StyleCI happy again Oct 2, 2015 .travis.yml Don't check code coverage for PHP 7.0 (unsupported) Jun 5, 2015 CHANGELOG.md Prepare for 4.2.1 release May 18, 2016 CONDUCT.md Added CONDUCT.md Oct 2, 2015 CONTRIBUTING.md Update project URLs and packagist name Jul 14, 2015 LICENSE Update project attribution May 29, 2015 README.md Add Gitter badge Nov 29, 2015 circle.yml Add PHPUnit configuration May 29, 2015 composer.json Prepare for 4.2.0 release Feb 1, 2016 phpunit.xml.dist Add PHPUnit configuration May 29, 2015 README.md HTML To Markdown for PHP Library which converts HTML to Markdown for your sanity and convenience. Requires: PHP 5.3+ Lead Developer: @colinodell Original Author: @nickcernis Why convert HTML to Markdown? ""What alchemy is this?"" you mutter. ""I can see why you'd convert Markdown to HTML,"" you continue, already labouring the question somewhat, ""but why go the other way?"" Typically you would convert HTML to Markdown if: You have an existing HTML document that needs to be edited by people with good taste. You want to store new content in HTML format but edit it as Markdown. You want to convert HTML email to plain text email. You know a guy who's been converting HTML to Markdown for years, and now he can speak Elvish. You'd quite like to be able to speak Elvish. You just really like Markdown. How to use it Require the library by issuing this command: composer require league/html-to-markdown Add require 'vendor/autoload.php'; to the top of your script. Next, create a new HtmlConverter instance, passing in your valid HTML code to its convert() function: use League\HTMLToMarkdown\HtmlConverter;  $converter = new HtmlConverter();  $html = ""<h3>Quick, to the Batpoles!</h3>""; $markdown = $converter->convert($html);  The $markdown variable now contains the Markdown version of your HTML as a string: echo $markdown; // ==> ### Quick, to the Batpoles!  The included demo directory contains an HTML->Markdown conversion form to try out. Conversion options By default, HTML To Markdown preserves HTML tags without Markdown equivalents, like <span> and <div>. To strip HTML tags that don't have a Markdown equivalent while preserving the content inside them, set strip_tags to true, like this: $converter = new HtmlConverter(array('strip_tags' => true));  $html = '<span>Turnips!</span>'; $markdown = $converter->convert($html); // $markdown now contains ""Turnips!""  Or more explicitly, like this: $converter = new HtmlConverter(); $converter->getConfig()->setOption('strip_tags', true);  $html = '<span>Turnips!</span>'; $markdown = $converter->convert($html); // $markdown now contains ""Turnips!""  Note that only the tags themselves are stripped, not the content they hold. To strip tags and their content, pass a space-separated list of tags in remove_nodes, like this: $converter = new HtmlConverter(array('remove_nodes' => 'span div'));  $html = '<span>Turnips!</span><div>Monkeys!</div>'; $markdown = $converter->convert($html); // $markdown now contains """"  Style options Bold and italic tags are converted using the asterisk syntax by default. Change this to the underlined syntax using the bold_style and italic_style options. $converter = new HtmlConverter(); $converter->getConfig()->setOption('italic_style', '_'); $converter->getConfig()->setOption('bold_style', '__');  $html = '<em>Italic</em> and a <strong>bold</strong>'; $markdown = $converter->convert($html); // $markdown now contains ""_Italic_ and a __bold__""  Limitations Markdown Extra, MultiMarkdown and other variants aren't supported – just Markdown. Known issues Nested lists and lists containing multiple paragraphs aren't converted correctly. Lists inside blockquotes aren't converted correctly. Any reported open issues here. Report your issue or request a feature here. Issues with patches or failing tests are especially welcome. Style notes Setext (underlined) headers are the default for H1 and H2. If you prefer the ATX style for H1 and H2 (# Header 1 and ## Header 2), set header_style to 'atx' in the options array when you instantiate the object: $converter = new HtmlConverter(array('header_style'=>'atx')); Headers of H3 priority and lower always use atx style. Links and images are referenced inline. Footnote references (where image src and anchor href attributes are listed in the footnotes) are not used. Blockquotes aren't line wrapped – it makes the converted Markdown easier to edit. Dependencies HTML To Markdown requires PHP's xml, lib-xml, and dom extensions, all of which are enabled by default on most distributions. Errors such as ""Fatal error: Class 'DOMDocument' not found"" on distributions such as CentOS that disable PHP's xml extension can be resolved by installing php-xml. Contributors Many thanks to all contributors so far. Further improvements and feature suggestions are very welcome. How it works HTML To Markdown creates a DOMDocument from the supplied HTML, walks through the tree, and converts each node to a text node containing the equivalent markdown, starting from the most deeply nested node and working inwards towards the root node. To-do Support for nested lists and lists inside blockquotes. Offer an option to preserve tags as HTML if they contain attributes that can't be represented with Markdown (e.g. style). Trying to convert Markdown to HTML? Use one of these great libraries: league/commonmark (recommended) cebe/markdown PHP Markdown Parsedown No guarantees about the Elvish, though. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/html-to-markdown"	"Converts HTML into Markdown."	"true"
"Markup"	"HTML5 PHP"	"https://github.com/Masterminds/html5-php"	"An HTML5 parser and serializer library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"369"	"41"	"53"	"GitHub - Masterminds/html5-php: An HTML5 parser and serializer for PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 41 Star 369 Fork 53 Masterminds/html5-php Code Issues 8 Pull requests 3 Wiki Pulse Graphs An HTML5 parser and serializer for PHP. http://masterminds.github.io/html5-php/ 459 commits 7 branches 19 releases Fetching contributors PHP 99.9% HTML 0.1% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 2.x Switch branches/tags Branches Tags 1.0 2.x-compat 2.x develop gh-pages master psr-log Nothing to show 2.2.1 2.2.0 2.1.2 2.1.1 2.1.0 2.0.2 2.0.1 2.0.0 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 1.0.0-beta1 1.0.0-alpha2 1.0.0-alpha1 Nothing to show New pull request Latest commit 9da7ec0 May 10, 2016 mattfarina Updated release notes Permalink Failed to load latest commit information. bin PSR-0 vendor namespace Jun 11, 2014 src Correct address to reflect proper specfiication. May 9, 2016 test/HTML5 Adding test for the address tag May 10, 2016 .gitignore Updating the PHPUnit settings to use 4.x and ignore the build directo… Apr 15, 2014 .scrutinizer.yml Adding back the external code coverage. Jun 9, 2015 .travis.yml Enable composer cache Apr 7, 2016 CREDITS Update examples Jun 11, 2014 LICENSE.txt Updated license information Feb 9, 2015 README.md Updated docs to reflect implemented QueryPath support. Apr 7, 2016 RELEASE.md Updated release notes May 10, 2016 UPGRADING.md Released 2.0.0 Jul 28, 2014 composer.json Update composer.json Jan 13, 2016 example.php Wrong namespace slash Jun 12, 2014 phpunit.xml.dist Do not use Coveralls May 9, 2015 sami.php Using Sami as API doc generator Aug 1, 2014 README.md HTML5-PHP The need for an HTML5 parser in PHP is clear. This project initially began with the seemingly abandoned html5lib project original source. But after some initial refactoring work, we began a new parser. An HTML5 serializer Support for PHP namespaces Composer support Event-based (SAX-like) parser DOM tree builder Interoperability with QueryPath Runs on PHP 5.3.0 or newer and HHVM 3.2 or newer Installation Install HTML5-PHP using composer. To install, add masterminds/html5 to your composer.json file: {   ""require"" : {     ""masterminds/html5"": ""2.*""   }, }  (You may substitute 2.* for a more specific release tag, of course.) From there, use the composer install or composer update commands to install. Basic Usage HTML5-PHP has a high-level API and a low-level API. Here is how you use the high-level HTML5 library API: <?php // Assuming you installed from Composer: require ""vendor/autoload.php""; use Masterminds\HTML5;   // An example HTML document: $html = <<< 'HERE'  <html>  <head>  <title>TEST</title>  </head>  <body id='foo'>  <h1>Hello World</h1>  <p>This is a test of the HTML5 parser.</p>  </body>  </html> HERE;  // Parse the document. $dom is a DOMDocument. $html5 = new HTML5(); $dom = $html5->loadHTML($html);  // Render it as HTML5: print $html5->saveHTML($dom);  // Or save it to a file: $html5->save($dom, 'out.html');  ?> The $dom created by the parser is a full DOMDocument object. And the save() and saveHTML() methods will take any DOMDocument. Options It is possible to pass in an array of configuration options when loading an HTML5 document. // An associative array of options $options = array(   'option_name' => 'option_value', );  // Provide the options to the constructor $html5 = new HTML5($options);  $dom = $html5->loadHTML($html); The following options are supported: encode_entities (boolean): Indicates that the serializer should aggressively encode characters as entities. Without this, it only encodes the bare minimum. disable_html_ns (boolean): Prevents the parser from automatically assigning the HTML5 namespace to the DOM document. This is for non-namespace aware DOM tools. target_document (\DOMDocument): A DOM document that will be used as the destination for the parsed nodes. implicit_namespaces (array): An assoc array of namespaces that should be used by the parser. Name is tag prefix, value is NS URI. The Low-Level API This library provides the following low-level APIs that you can use to create more customized HTML5 tools: An InputStream abstraction that can work with different kinds of input source (not just files and strings). A SAX-like event-based parser that you can hook into for special kinds of parsing. A flexible error-reporting mechanism that can be tuned to document syntax checking. A DOM implementation that uses PHP's built-in DOM library. The unit tests exercise each piece of the API, and every public function is well-documented. Parser Design The parser is designed as follows: The InputStream portion handles direct I/O. The Scanner handles scanning on behalf of the parser. The Tokenizer requests data off of the scanner, parses it, clasifies it, and sends it to an EventHandler. It is a recursive descent parser. The EventHandler receives notifications and data for each specific semantic event that occurs during tokenization. The DOMBuilder is an EventHandler that listens for tokenizing events and builds a document tree (DOMDocument) based on the events. Serializer Design The serializer takes a data structure (the DOMDocument) and transforms it into a character representation -- an HTML5 document. The serializer is broken into three parts: The OutputRules contain the rules to turn DOM elements into strings. The rules are an implementation of the interface RulesInterface allowing for different rule sets to be used. The Traverser, which is a special-purpose tree walker. It visits each node node in the tree and uses the OutputRules to transform the node into a string. HTML5 manages the Traverser and stores the resultant data in the correct place. The serializer (save(), saveHTML()) follows the section 8.9 of the HTML 5.0 spec. So tags are serialized according to these rules: A tag with children: <foo>CHILDREN</foo> A tag that cannot have content: <foo> (no closing tag) A tag that could have content, but doesn't: <foo></foo> Known Issues (Or, Things We Designed Against the Spec) Please check the issue queue for a full list, but the following are issues known issues that are not presently on the roadmap: Namespaces: HTML5 only supports a selected list of namespaces and they do not operate in the same way as XML namespaces. A : has no special meaning. By default the parser does not support XML style namespaces via :; to enable the XML namespaces see the XML Namespaces section Scripts: This parser does not contain a JavaScript or a CSS interpreter. While one may be supplied, not all features will be supported. Rentrance: The current parser is not re-entrant. (Thus you can't pause the parser to modify the HTML string mid-parse.) Validation: The current tree builder is not a validating parser. While it will correct some HTML, it does not check that the HTML conforms to the standard. (Should you wish, you can build a validating parser by extending DOMTree or building your own EventHandler implementation.) There is limited support for insertion modes. Some autocorrection is done automatically. Per the spec, many legacy tags are admitted and correctly handled, even though they are technically not part of HTML5. Attribute names and values: Due to the implementation details of the PHP implementation of DOM, attribute names that do not follow the XML 1.0 standard are not inserted into the DOM. (Effectively, they are ignored.) If you've got a clever fix for this, jump in! Processor Instructions: The HTML5 spec does not allow processor instructions. We do. Since this is a server-side library, we think this is useful. And that means, dear reader, that in some cases you can parse the HTML from a mixed PHP/HTML document. This, however, is an incidental feature, not a core feature. HTML manifests: Unsupported. PLAINTEXT: Unsupported. Adoption Agency Algorithm: Not yet implemented. (8.2.5.4.7) XML Namespaces To use XML style namespaces you have to configure well the main HTML5 instance. use Masterminds\HTML5; $html = new HTML5(array(     ""xmlNamespaces"" => true ));  $dom = $html->loadHTML('<t:tag xmlns:t=""http://www.example.com""/>');  $dom->documentElement->namespaceURI; // http://www.example.com  You can also add some default prefixes that will not require the namespace declaration, but it's elements will be namespaced. use Masterminds\HTML5; $html = new HTML5(array(     ""implicitNamespaces""=>array(         ""t""=>""http://www.example.com""     ) ));  $dom = $html->loadHTML('<t:tag/>');  $dom->documentElement->namespaceURI; // http://www.example.com  Thanks to... The dedicated (and patient) contributors of patches small and large, who have already made this library better.See the CREDITS file for a list of contributors. We owe a huge debt of gratitude to the original authors of html5lib. While not much of the orignal parser remains, we learned a lot from reading the html5lib library. And some pieces remain here. In particular, much of the UTF-8 and Unicode handling is derived from the html5lib project. License This software is released under the MIT license. The original html5lib library was also released under the MIT license. See LICENSE.txt Certain files contain copyright assertions by specific individuals involved with html5lib. Those have been retained where appropriate. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Masterminds/html5-php"	"An HTML5 parser and serializer library."	"true"
"Markup"	"Parsedown"	"https://github.com/erusev/parsedown"	"Another Markdown parser."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3385"	"163"	"498"	"GitHub - erusev/parsedown: Better Markdown Parser in PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 163 Star 3,385 Fork 498 erusev/parsedown Code Issues 68 Pull requests 31 Wiki Pulse Graphs Better Markdown Parser in PHP http://parsedown.org 485 commits 1 branch 63 releases 20 contributors PHP 82.0% HTML 18.0% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.6.0 1.5.4 1.5.3 1.5.2 1.5.1 1.5.0 1.4.5 1.4.4 1.4.3 1.4.2 1.4.1 1.4.0 1.3.0 1.2.0 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.0.1 1.0.0 1.0.0-rc.5 1.0.0-rc.4 1.0.0-rc.3 1.0.0-rc.2 1.0.0-rc.1 0.9.4 0.9.3 0.9.2 0.9.1 0.9.0 0.8.3 0.8.2 0.8.1 0.8.0 0.7.7 0.7.6 0.7.5 0.7.4 0.7.3 0.7.2 0.7.1 0.7.0 0.6.0 0.5.0 0.4.8 0.4.7 0.4.6 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 0.3.0 0.2.1 0.2.0 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit 490a8f3 Mar 9, 2016 erusev remove incompatible comment Permalink Failed to load latest commit information. test Use late static binding for Parsedown::instance() Aug 13, 2015 .travis.yml remove PHP 7.0 from allow failures in tests + improve readme Oct 31, 2015 LICENSE.txt improve license Jul 24, 2013 Parsedown.php remove incompatible comment Mar 9, 2016 README.md improve readme Jan 7, 2016 composer.json Update composer.json requirements Jan 6, 2016 phpunit.xml.dist improve extensibility of test case Sep 26, 2014 README.md You might also like Caret - our Markdown editor for Mac / Windows / Linux. Parsedown Better Markdown Parser in PHP Demo | Benchmarks | Tests | Documentation Features Super Fast GitHub flavored Extensible Tested in 5.3 to 7.0 and in HHVM Markdown Extra extension Installation Include Parsedown.php or install the composer package. Example $Parsedown = new Parsedown();  echo $Parsedown->text('Hello _Parsedown_!'); # prints: <p>Hello <em>Parsedown</em>!</p> More examples in the wiki and in this video tutorial. Questions How does Parsedown work? It tries to read Markdown like a human. First, it looks at the lines. It’s interested in how the lines start. This helps it recognise blocks. It knows, for example, that if a line start with a - then it perhaps belong to a list. Once it recognises the blocks, it continues to the content. As it reads, it watches out for special characters. This helps it recognise inline elements (or inlines). We call this approach ""line based"". We believe that Parsedown is the first Markdown parser to use it. Since the release of Parsedown, other developers have used the same approach to develop other Markdown parsers in PHP and in other languages. Is it compliant with CommonMark? It passes most of the CommonMark tests. Most of the tests that don't pass deal with cases that are quite uncommon. Still, as CommonMark matures, compliance should improve. Who uses it? phpDocumentor, October CMS, Bolt CMS, Kirby CMS, Grav CMS, Statamic CMS, Herbie CMS, RaspberryPi.org and more. How can I help? Use it, star it, share it and if you feel generous, donate. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/erusev/parsedown"	"Another Markdown parser."	"true"
"Markup"	"PHP Markdown"	"https://github.com/michelf/php-markdown"	"A Markdown parser."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2204"	"140"	"428"	"GitHub - michelf/php-markdown: Parser for Markdown and Markdown Extra derived from the original Markdown.pl by John Gruber. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 140 Star 2,204 Fork 428 michelf/php-markdown Code Issues 62 Pull requests 11 Wiki Pulse Graphs Parser for Markdown and Markdown Extra derived from the original Markdown.pl by John Gruber. http://michelf.ca/projects/php-markdown/ 362 commits 5 branches 50 releases 23 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: lib Switch branches/tags Branches Tags extra-stable extra lib master-stable master Nothing to show x1.2.8 x1.2.7 x1.2.6 x1.2.5 x1.2.4 x1.2.3 x1.2.2 x1.2.1 x1.2 x1.1.7 x1.1.6 x1.1.5 x1.1.4 x1.1.3 x1.1.3b1 x1.1.2 x1.1.1 x1.1 x1.1b3 x1.1b2 x1.1b1 x1.0.1oo v1.0.2 v1.0.2b8 v1.0.2b7 v1.0.1p v1.0.1oo v1.0.1o v1.0.1n v1.0.1m v1.0.1l v1.0.1k v1.0.1j v1.0.1i v1.0.1h v1.0.1g v1.0.1f v1.0.1e v1.0.1d 1.6.0 1.5.0 1.4.1 1.4.0 1.3 1.3-rc2 1.3-rc1 1.3-beta5 1.3-beta4 1.3-beta2 1.3-beta1 Nothing to show New pull request Latest commit 0bec870 Jul 13, 2016 vszakats Restore https after f5cd0db Permalink Failed to load latest commit information. Michelf Restore https after f5cd0db Jul 13, 2016 License.md [#98] Changing to PHPDoc comments Mar 3, 2016 Readme.md Added history entry about PHPDoc comments. Mar 13, 2016 Readme.php Merge branch 'issue/98-phpdoc-comments' of git://github.com/robbieave… Mar 13, 2016 composer.json use https in URLs where possible Jul 1, 2015 Readme.md PHP Markdown PHP Markdown Lib 1.6.0 - 23 Dec 2015 by Michel Fortin https://michelf.ca/ based on Markdown by John Gruber https://daringfireball.net/ Introduction This is a library package that includes the PHP Markdown parser and its sibling PHP Markdown Extra with additional features. Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML). ""Markdown"" is actually two things: a plain text markup syntax, and a software tool, originally written in Perl, that converts the plain text markup to HTML. PHP Markdown is a port to PHP of the original Markdown program by John Gruber. Full documentation of the Markdown syntax — Daring Fireball (John Gruber) Markdown Extra syntax additions — Michel Fortin Requirement This library package requires PHP 5.3 or later. Note: The older plugin/library hybrid package for PHP Markdown and PHP Markdown Extra is still maintained and will work with PHP 4.0.5 and later. Before PHP 5.3.7, pcre.backtrack_limit defaults to 100 000, which is too small in many situations. You might need to set it to higher values. Later PHP releases defaults to 1 000 000, which is usually fine. Usage This library package is meant to be used with class autoloading. For autoloading to work, your project needs have setup a PSR-0-compatible autoloader. See the included Readme.php file for a minimal autoloader setup. (If you cannot use autoloading, see below.) With class autoloading in place, putting the 'Michelf' folder in your include path should be enough for this to work: use \Michelf\Markdown; $my_html = Markdown::defaultTransform($my_text);  Markdown Extra syntax is also available the same way: use \Michelf\MarkdownExtra; $my_html = MarkdownExtra::defaultTransform($my_text);  If you wish to use PHP Markdown with another text filter function built to parse HTML, you should filter the text after the transform function call. This is an example with [PHP SmartyPants][psp]: use \Michelf\Markdown, \Michelf\SmartyPants; $my_html = Markdown::defaultTransform($my_text); $my_html = SmartyPants::defaultTransform($my_html);  All these examples are using the static defaultTransform static function found inside the parser class. If you want to customize the parser configuration, you can also instantiate it directly and change some configuration variables: use \Michelf\MarkdownExtra; $parser = new MarkdownExtra; $parser->fn_id_prefix = ""post22-""; $my_html = $parser->transform($my_text);  To learn more, see the full list of configuration variables. Usage without an autoloader If you cannot use class autoloading, you can still use include or require to access the parser. To load the \Michelf\Markdown parser, do it this way: require_once 'Michelf/Markdown.inc.php';  Or, if you need the \Michelf\MarkdownExtra parser: require_once 'Michelf/MarkdownExtra.inc.php';  While the plain .php files depend on autoloading to work correctly, using the .inc.php files instead will eagerly load the dependencies that would be loaded on demand if you were using autoloading. Public API and Versioning Policy Version numbers are of the form major.minor.patch. The public API of PHP Markdown consist of the two parser classes Markdown and MarkdownExtra, their constructors, the transform and defaultTransform functions and their configuration variables. The public API is stable for a given major version number. It might get additions when the minor version number increments. Protected members are not considered public API. This is unconventional and deserves an explanation. Incrementing the major version number every time the underlying implementation of something changes is going to give nonessential version numbers for the vast majority of people who just use the parser. Protected members are meant to create parser subclasses that behave in different ways. Very few people create parser subclasses. I don't want to discourage it by making everything private, but at the same time I can't guarantee any stable hook between versions if you use protected members. Syntax changes will increment the minor number for new features, and the patch number for small corrections. A new feature is something that needs a change in the syntax documentation. Note that since PHP Markdown Lib includes two parsers, a syntax change for either of them will increment the minor number. Also note that there is nothing perfectly backward-compatible with the Markdown syntax: all inputs are always valid, so new features always replace something that was previously legal, although generally nonsensical to do. Bugs To file bug reports please send email to: michel.fortin@michelf.ca Please include with your report: (1) the example input; (2) the output you expected; (3) the output PHP Markdown actually produced. If you have a problem where Markdown gives you an empty result, first check that the backtrack limit is not too low by running php --info | grep pcre. See Installation and Requirement above for details. Development and Testing Pull requests for fixing bugs are welcome. Proposed new features are going meticulously reviewed -- taking into account backward compatibility, potential side effects, and future extensibility -- before deciding on acceptance or rejection. If you make a pull request that includes changes to the parser please add tests for what is being changed to MDTest and make a pull request there too. Donations If you wish to make a donation that will help me devote more time to PHP Markdown, please visit michelf.ca/donate or send Bitcoin to 1HiuX34czvVPPdhXbUAsAu7pZcesniDCGH. Version History Current Version: Added a code_span_content_func configuration variable which takes a function that will convert the content of the code span to HTML. This can be useful to implement syntax highlighting. Although contrary to its code block equivalent, there is no syntax for specifying a language. Credits to styxit for the implementation. In the parser code, switched to PHPDoc comment format. Thanks to Robbie Averill for the help. PHP Markdown Lib 1.6.0 (23 Dec 2015) Note: this version was incorrectly released as 1.5.1 on Dec 22, a number that contradicted the versioning policy. For fenced code blocks in Markdown Extra, can now set a class name for the code block's language before the special attribute block. Previously, this class name was only allowed in the absence of the special attribute block. Added a code_block_content_func configuration variable which takes a function that will convert the content of the code block to HTML. This is most useful for syntax highlighting. For fenced code blocks in Markdown Extra, the function has access to the language class name (the one outside of the special attribute block). Credits to Mario Konrad for providing the implementation. The curled arrow character for the backlink in footnotes is now followed by a Unicode variant selector to prevent it from being displayed in emoji form on iOS. Note that in older browsers the variant selector is often interpreted as a separate character, making it visible after the arrow. So there is now a also a fn_backlink_html configuration variable that can be used to set the link text to something else. Credits to Dana for providing the implementation. Fixed an issue in MarkdownExtra where long header lines followed by a special attribute block would hit the backtrack limit an cause an empty string to be returned. PHP Markdown Lib 1.5.0 (1 Mar 2015) Added the ability start ordered lists with a number different from 1 and and have that reflected in the HTML output. This can be enabled with the enhanced_ordered_lists configuration variable for the Markdown parser; it is enabled by default for Markdown Extra. Credits to Matt Gorle for providing the implementation. Added the ability to insert custom HTML attributes with simple values everywhere an extra attribute block is allowed (links, images, headers). The value must be unquoted, cannot contains spaces and is limited to alphanumeric ASCII characters. Credits to Peter Droogmans for providing the implementation. Added a header_id_func configuration variable which takes a function that can generate an id attribute value from the header text. Credits to Evert Pot for providing the implementation. Added a url_filter_func configuration variable which takes a function that can rewrite any link or image URL to something different. PHP Markdown Lib 1.4.1 (4 May 2014) The HTML block parser will now treat <figure> as a block-level element (as it should) and no longer wrap it in <p> or parse it's content with the as Markdown syntax (although with Extra you can use markdown=""1"" if you wish to use the Markdown syntax inside it). The content of <style> elements will now be left alone, its content won't be interpreted as Markdown. Corrected an bug where some inline links with spaces in them would not work even when surounded with angle brackets: [link](<s p a c e s>)  Fixed an issue where email addresses with quotes in them would not always have the quotes escaped in the link attribute, causing broken links (and invalid HTML). Fixed the case were a link definition following a footnote definition would be swallowed by the footnote unless it was separated by a blank line. PHP Markdown Lib 1.4.0 (29 Nov 2013) Added support for the tel: URL scheme in automatic links. <tel:+1-111-111-1111>  It gets converted to this (note the tel: prefix becomes invisible): <a href=""tel:+1-111-111-1111"">+1-111-111-1111</a>  Added backtick fenced code blocks to MarkdownExtra, originally from Github-Flavored Markdown. Added an interface called MarkdownInterface implemented by both the Markdown and MarkdownExtra parsers. You can use the interface if you want to create a mockup parser object for unit testing. For those of you who cannot use class autoloading, you can now include Michelf/Markdown.inc.php or Michelf/MarkdownExtra.inc.php (note the .inc.php extension) to automatically include other files required by the parser. PHP Markdown Lib 1.3 (11 Apr 2013) This is the first release of PHP Markdown Lib. This package requires PHP version 5.3 or later and is designed to work with PSR-0 autoloading and, optionally with Composer. Here is a list of the changes since PHP Markdown Extra 1.2.6: Plugin interface for WordPress and other systems is no longer present in the Lib package. The classic package is still available if you need it: https://michelf.ca/projects/php-markdown/classic/ Added public and protected protection attributes, plus a section about what is ""public API"" and what isn't in the Readme file. Changed HTML output for footnotes: now instead of adding rel and rev attributes, footnotes links have the class name footnote-ref and backlinks footnote-backref. Fixed some regular expressions to make PCRE not shout warnings about POSIX collation classes (dependent on your version of PCRE). Added optional class and id attributes to images and links using the same syntax as for headers: [link](url){#id .class}   ![img](url){#id .class}  It work too for reference-style links and images. In this case you need to put those attributes at the reference definition: [link][linkref] or [linkref]   ![img][linkref]  [linkref]: url ""optional title"" {#id .class}  Fixed a PHP notice message triggered when some table column separator markers are missing on the separator line below column headers. Fixed a small mistake that could cause the parser to retain an invalid state related to parsing links across multiple runs. This was never observed (that I know of), but it's still worth fixing. Copyright and License PHP Markdown Lib Copyright (c) 2004-2015 Michel Fortin https://michelf.ca/ All rights reserved. Based on Markdown Copyright (c) 2003-2005 John Gruber https://daringfireball.net/ All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name ""Markdown"" nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. This software is provided by the copyright holders and contributors ""as is"" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. In no event shall the copyright owner or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/michelf/php-markdown"	"A Markdown parser."	"true"
"Strings"	"Agent"	"https://github.com/jenssegers/agent"	"A PHP desktop/mobile user agent parser, based on Mobiledetect."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"980"	"47"	"113"	"GitHub - jenssegers/agent: A PHP desktop/mobile user agent parser with support for Laravel, based on Mobiledetect Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 47 Star 980 Fork 113 jenssegers/agent Code Issues 6 Pull requests 4 Pulse Graphs A PHP desktop/mobile user agent parser with support for Laravel, based on Mobiledetect https://jenssegers.com 113 commits 1 branch 19 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2.3.3 v2.3.2 v2.3.1 v2.3.0 v2.2.2 v2.2.1 v2.2.0 v2.1.7 v2.1.6 v2.1.5 v2.1.4 v2.1.3 v2.1.2 v2.1.1 v2.1.0 v2.0.2 v2.0.1 v2.0.0 v1.0.0 Nothing to show New pull request Latest commit 99d725b May 18, 2016 jenssegers Update travis file Permalink Failed to load latest commit information. src Add Edge version detection Mar 3, 2016 tests Update test and remove Travis matrix May 18, 2016 .gitattributes Add gitattributes Feb 8, 2015 .gitignore First commit Aug 10, 2013 .travis.yml Update travis file May 18, 2016 LICENSE Add license file and link in the readme. Apr 2, 2015 README.md Update README.md Nov 15, 2015 composer.json Update test and remove Travis matrix May 18, 2016 phpunit.xml Exclude MobileDetect failing unit test May 9, 2015 README.md Agent A PHP desktop/mobile user agent parser with support for Laravel, based on Mobile Detect with desktop support and additional functionality. Installation Install using composer: composer require jenssegers/agent Laravel (optional) Add the service provider in app/config/app.php: 'Jenssegers\Agent\AgentServiceProvider', And add the Agent alias to app/config/app.php: 'Agent' => 'Jenssegers\Agent\Facades\Agent', Basic Usage Start by creating an Agent instance (or use the Agent Facade if you are using Laravel): use Jenssegers\Agent\Agent;  $agent = new Agent(); If you want to parse user agents other than the current request in CLI scripts for example, you can use the setUserAgent and setHttpHeaders methods: $agent->setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/537.13+ (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2'); $agent->setHttpHeaders($headers); All of the original Mobile Detect methods are still available, check out some original examples at https://github.com/serbanghita/Mobile-Detect/wiki/Code-examples Is? Check for a certain property in the user agent. $agent->is('Windows'); $agent->is('Firefox'); $agent->is('iPhone'); $agent->is('OS X'); Magic is-method Magic method that does the same as the previous is() method: $agent->isAndroidOS(); $agent->isNexus(); $agent->isSafari(); Mobile detection Check for mobile device: $agent->isMobile(); $agent->isTablet(); Match user agent Search the user agent with a regular expression: $agent->match('regexp'); Additional Functionality Accept languages Get the browser's accept languages. Example: $languages = $agent->languages(); // ['nl-nl', 'nl', 'en-us', 'en'] Device name Get the device name, if mobile. (iPhone, Nexus, AsusTablet, ...) $device = $agent->device(); Operating system name Get the operating system. (Ubuntu, Windows, OS X, ...) $agent = $agent->platform(); Browser name Get the browser name. (Chrome, IE, Safari, Firefox, ...) $browser = $agent->browser(); Desktop detection Check if the user is using a desktop device. $agent->isDesktop(); This checks if a user is not a mobile device, tablet or robot. Phone detection Check if the user is using a phone device. $agent->isPhone(); Robot detection Check if the user is a robot. $agent->isRobot(); Robot name Get the robot name. Note: this currently only works for major robots like Google, Facebook, Twitter, Bing, Baidu etc ... $robot = $agent->robot(); Browser/platform version MobileDetect recently added a version method that can get the version number for components. To get the browser or platform version you can use: $browser = $agent->browser(); $version = $agent->version($browser);  $platform = $agent->platform(); $version = $agent->version($platform); Note, the version method is still in beta, so it might not return the correct result. License Laravel User Agent is licensed under The MIT License (MIT). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jenssegers/agent"	"A PHP desktop/mobile user agent parser, based on Mobiledetect."	"true"
"Strings"	"ANSI to HTML5"	"https://github.com/sensiolabs/ansi-to-html"	"An ANSI to HTML5 converter library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"91"	"11"	"13"	"GitHub - sensiolabs/ansi-to-html: An ANSI to HTML5 converter Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 91 Fork 13 sensiolabs/ansi-to-html Code Issues 0 Pull requests 0 Pulse Graphs An ANSI to HTML5 converter 19 commits 1 branch 7 releases 7 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.1.2 v1.1.1 v1.1.0 v1.0.3 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 02598b9 Jul 22, 2015 fabpot fixed CS Permalink Failed to load latest commit information. SensioLabs/AnsiConverter fixed CS Jul 22, 2015 .gitignore added initial code Mar 19, 2013 LICENSE added initial code Mar 19, 2013 README.md minor corrections Mar 16, 2015 composer.json bumped version to 1.1 Aug 1, 2014 phpunit.xml.dist minor corrections Mar 17, 2015 README.md ANSI to HTML5 Converter This small library only does one thing: converting a text containing ANSI codes to an HTML5 fragment: require_once __DIR__.'/vendor/autoload.php';  use SensioLabs\AnsiConverter\AnsiToHtmlConverter;  $converter = new AnsiToHtmlConverter();  $html = $converter->convert($ansi); The $ansi variable should contain a text with ANSI codes, and $html will contain the converted HTML5 version of it. You can then output the HTML5 fragment in any HTML document: <html>     <body>         <pre style=""background-color: black; overflow: auto; padding: 10px 15px; font-family: monospace;""         ><?php echo $html ?></pre>     </body> </html> The converter supports different color themes: use SensioLabs\AnsiConverter\Theme\SolarizedTheme;  $theme = new SolarizedTheme(); $converter = new AnsiToHtmlConverter($theme); By default, the colors are inlined into the HTML, but you can also use classes by turning off style inlining: $converter = new AnsiToHtmlConverter($theme, false); And the asCss() method of the theme object lets you retrieve the theme styles as a CSS snippet: $styles = $theme->asCss(); which you can then use in your HTML document: <html>     <head>         <style>             <?php echo $styles ?>              .ansi_box { overflow: auto; padding: 10px 15px; font-family: monospace; }         </style>     </head>     <body>         <pre class=""ansi_color_bg_black ansi_color_fg_white ansi_box""><?php echo $html ?></pre>     </body> </html> Twig Integration Register the extension: use SensioLabs\AnsiConverter\Bridge\Twig\AnsiExtension;  $twig->addExtension(AnsiExtension()); It's possible to use a custom AnsiToHtmlConverter: use SensioLabs\AnsiConverter\Bridge\Twig\AnsiExtension; use SensioLabs\AnsiConverter\Theme\SolarizedTheme;  $theme = new SolarizedTheme(); $converter = new AnsiToHtmlConverter($theme, false);  $twig->addExtension(AnsiExtension($converter)); Then: <html>     <head>         <style>             {# This is only need if the inline styling is disabled #}             {{ ansi_css }}         </style>     </head>     <body>         {{ some_ansi_code|ansi_to_html }}     </body> </html> Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sensiolabs/ansi-to-html"	"An ANSI to HTML5 converter library."	"true"
"Strings"	"Color Jizz"	"https://github.com/mikeemoo/ColorJizz-PHP"	"A library for manipulating and converting colours."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"196"	"12"	"20"	"GitHub - mikeemoo/ColorJizz-PHP: ColorJizz is a PHP library for manipulating and converting colors. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 196 Fork 20 mikeemoo/ColorJizz-PHP Code Issues 4 Pull requests 2 Pulse Graphs ColorJizz is a PHP library for manipulating and converting colors. 39 commits 2 branches 0 releases 4 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit a6f5055 Dec 29, 2015 mikeemoo Merge pull request #11 from adduc/patch-1 … Document support for HSV Permalink Failed to load latest commit information. doc Started documenting Jun 15, 2012 examples Moving things! Oct 7, 2012 src/MischiefCollective/ColorJizz allow setting hue, saturation and brightness to absolute values Aug 3, 2013 tests/unit formatting Oct 9, 2012 .gitignore added .idea to .gitignore and reformatted a lot of the code Oct 7, 2012 README.md Document support for HSV Dec 29, 2015 build.xml changed the project name in build and phpdox, formatted some Oct 8, 2012 composer.json updated composer.json Oct 8, 2012 phpdox.xml changed the project name in build and phpdox, formatted some Oct 8, 2012 phpunit.xml.dist Moving things! Oct 7, 2012 README.md Getting started: ColorJizz-PHP uses the PSR-0 standards for namespaces, so there should be no trouble using with frameworks like Symfony 2. Autoloading An autoloader class is provided for when loading ColorJizz yourself. First, include the autoloader and call the static register() function. <?php require_once 'path/to/colorjizz/lib/MischiefCollective/ColorJizz/Autoloader.php'; MischiefCollective\ColorJizz\Autoloader::register(); ?> Now all ColorJizz classes will be automatically loaded in. Converting between formats ColorJizz can convert to and from any of the supported color formats: <?php use MischiefCollective\ColorJizz\Formats\Hex;  $red_hex = new Hex(0xFF0000); $red_cmyk = $hex->toCMYK();  echo get_class($red_cmyk); // MischiefCollective\ColorJizz\Formats\CMYK echo $red_cmyk; // 0,1,1,0 ?> Any color manipulation or conversion will return a new instance of a color class, therefore your original color objects remains intact. Color manipulation can be chained together: <?php use MischiefCollective\ColorJizz\Formats\Hex;  echo Hex::fromString('red')->hue(-20)->greyscale(); // 555555 ?> Any color manipulation will always return the color in the same format unless you're specifically converting the format. For example: <?php use MischiefCollective\ColorJizz\Formats\RGB;  $red = new RGB(255, 0, 0); echo get_class($red->hue(-20)->saturation(2)); // MischiefCollective\ColorJizz\Formats\RGB ?> Supported formats: <?php new RGB(r, g, b); new CMY(c, m, y); new CMYK(c, m, y, k); new Hex(0x000000); new HSV(h, s, v); new CIELab(l, a, b); new CIELCh(l, c, h); new XYZ(x, y, z); new Yxy(Y, x, y); Conversion functions: <?php ->toRGB(); ->toCMY(); ->toCMYK(); ->toHex(); ->toHSV(); ->toCIELab(); ->toCIELCh(); ->toXYZ(); ->toYxy(); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mikeemoo/ColorJizz-PHP"	"A library for manipulating and converting colours."	"true"
"Strings"	"Device Detector"	"https://github.com/piwik/device-detector"	"Another library for parsing user agent strings."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"479"	"65"	"104"	"GitHub - piwik/device-detector: The Universal Device Detection library will parse any User Agent and detect the browser, operating system, device used (desktop, tablet, mobile, tv, cars, console, etc.), brand and model. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 65 Star 479 Fork 104 piwik/device-detector Code Issues 15 Pull requests 2 Pulse Graphs The Universal Device Detection library will parse any User Agent and detect the browser, operating system, device used (desktop, tablet, mobile, tv, cars, console, etc.), brand and model. http://devicedetector.net 1,259 commits 1 branch 35 releases 33 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 3.7.0 3.6.1 3.6.0 3.5.2 3.5.1 3.5.0 3.4.5 3.4.4 3.4.3 3.4.2 3.4.1 3.4.0 3.3.0 3.2.2 3.2.1 3.2 3.1.1 3.1 3.0.1 3.0 3.0-b1 2.8.1 2.8 2.7 2.6 2.5.1 2.5 2.4 2.3.1 2.3 2.2 2.1.1 2.1 2.0 1.0 Nothing to show New pull request Latest commit 9c128e7 Jun 13, 2016 sgiehl refs #5377 - adds detection for ios 9.3.2 Permalink Failed to load latest commit information. Cache cs fixes Apr 22, 2015 Parser adds detection for Samsung Browser May 19, 2016 Tests refs #5377 - adds detection for ios 9.3.2 Jun 13, 2016 Yaml Fixed a bug in the README and removed a debugging statement from Symf… Apr 27, 2016 misc Sort brands in list Apr 24, 2016 regexes refs #5377 - adds detection for ios 9.3.2 Jun 13, 2016 .coveralls.yml Update .coveralls.yml Jan 3, 2016 .gitattributes added .gitattributes to remove unneeded files from archives Dec 17, 2015 .gitignore .gitignore update for Zend Studio Apr 22, 2015 .php_cs exclude tets Apr 22, 2015 .travis.yml update travis.sh Jan 3, 2016 DeviceDetector.php bump version Jun 1, 2016 README.md Fixed a bug in the README and removed a debugging statement from Symf… Apr 27, 2016 composer.json php-cs-fixer addition Apr 22, 2015 phpunit.xml.dist exclude misc from code coverage Nov 4, 2014 README.md DeviceDetector Code Status Description The Universal Device Detection library, that parses User Agents and detects devices (desktop, tablet, mobile, tv, cars, console, etc.), and detects clients (browsers, feed readers, media players, PIMs, ...), operating systems, devices, brands and models. Usage Using DeviceDetector with composer is quite easy. Just add piwik/device-detector to your projects requirements. And use some code like this one: require_once 'vendor/autoload.php';  use DeviceDetector\DeviceDetector; use DeviceDetector\Parser\Device\DeviceParserAbstract;  // OPTIONAL: Set version truncation to none, so full versions will be returned // By default only minor versions will be returned (e.g. X.Y) // for other options see VERSION_TRUNCATION_* constants in DeviceParserAbstract class DeviceParserAbstract::setVersionTruncation(DeviceParserAbstract::VERSION_TRUNCATION_NONE);  $dd = new DeviceDetector($userAgent);  // OPTIONAL: Set caching method // By default static cache is used, which works best within one php process (memory array caching) // To cache across requests use caching in files or memcache $dd->setCache(new Doctrine\Common\Cache\PhpFileCache('./tmp/'));  // OPTIONAL: Set custom yaml parser // By default Spyc will be used for parsing yaml files. You can also use another yaml parser. // You may need to implement the Yaml Parser facade if you want to use another parser than Spyc or [Symfony](https://github.com/symfony/yaml) $dd->setYamlParser(new DeviceDetector\Yaml\Symfony());  // OPTIONAL: If called, getBot() will only return true if a bot was detected (speeds up detection a bit) $dd->discardBotInformation();  // OPTIONAL: If called, bot detection will completely be skipped (bots will be detected as regular devices then) $dd->skipBotDetection();  $dd->parse();  if ($dd->isBot()) {   // handle bots,spiders,crawlers,...   $botInfo = $dd->getBot(); } else {   $clientInfo = $dd->getClient(); // holds information about browser, feed reader, media player, ...   $osInfo = $dd->getOs();   $device = $dd->getDevice();   $brand = $dd->getBrand();   $model = $dd->getModel(); } Instead of using the full power of DeviceDetector it might in some cases be better to use only specific parsers. If you aim to check if a given useragent is a bot and don't require any of the other information, you can directly use the bot parser. require_once 'vendor/autoload.php';  use DeviceDetector\Parser\Bot AS BotParser;  $botParser = new BotParser(); $botParser->setUserAgent($userAgent);  // OPTIONAL: discard bot information. parse() will then return true instead of information $botParser->discardDetails();  $result = $botParser->parse();  if (!is_null($result)) {     // do not do anything if a bot is detected     return; }  // handle non-bot requests  Caching ❗ Caching of DeviceDetector was completely redesigned in 3.0. You may need to reimplement it when updating from below. In order to get results faster across requests, we recommend to use the additional caching possibility. Currently DeviceDetector is able to use doctrine/cache. You can simply require it in your composer.json and use it like in the example before. For those who like to implement their own Caching there is a second possibility. Besides doctrine caches the setCache method also accepts classes implementing the DeviceDetector\Cache\Cache interface. That way you can do whatever you want without requiring doctrine/cache. Contributing Hacking the library This is a free/libre library under license LGPL v3 or later. Your pull requests and/or feedback is very welcome! Listing all user agents from your logs Sometimes it may be useful to generate the list of most used user agents on your website, extracting this list from your access logs using the following command: zcat ~/path/to/access/logs* | awk -F'""' '{print $6}' | sort | uniq -c | sort -rn | head -n20000 > /home/piwik/top-user-agents.txt  Contributors Created by the Piwik team, Stefan Giehl, Matthieu Aubry, Michał Gaździk, Tomasz Majczak, Grzegorz Kaszuba, Piotr Banaszczyk and contributors. Together we can build the best Device Detection library. We are looking forward to your contributions and pull requests! Tests See also: QA at Piwik Running tests cd /path/to/device-detector curl -sS https://getcomposer.org/installer | php php composer.phar install phpunit  What Device Detector is able to detect The lists below are auto generated and updated from time to time. Some of them might not be complete. Last update: 2016/04/24 List of detected operating systems: AIX, Android, AmigaOS, Apple TV, Arch Linux, BackTrack, Bada, BeOS, BlackBerry OS, BlackBerry Tablet OS, Brew, CentOS, Chrome OS, CyanogenMod, Debian, DragonFly, Fedora, Firefox OS, FreeBSD, Gentoo, Google TV, HP-UX, Haiku OS, IRIX, Inferno, Knoppix, Kubuntu, GNU/Linux, Lubuntu, VectorLinux, Mac, Maemo, Mandriva, MeeGo, MocorDroid, Mint, MildWild, MorphOS, NetBSD, MTK / Nucleus, Nintendo, Nintendo Mobile, OS/2, OSF1, OpenBSD, PlayStation Portable, PlayStation, Red Hat, RISC OS, RazoDroiD, Sabayon, SUSE, Sailfish OS, Slackware, Solaris, Syllable, Symbian, Symbian OS, Symbian OS Series 40, Symbian OS Series 60, Symbian^3, ThreadX, Tizen, Ubuntu, WebTV, Windows, Windows CE, Windows Mobile, Windows Phone, Windows RT, Xbox, Xubuntu, YunOs, iOS, palmOS, webOS List of detected browsers: 360 Phone Browser, 360 Browser, Avant Browser, ABrowse, ANT Fresco, ANTGalio, Amaya, Amigo, Android Browser, Arora, Amiga Voyager, Amiga Aweb, Atomic Web Browser, BlackBerry Browser, Baidu Browser, Baidu Spark, Beonex, Bunjalloo, Brave, BrowseX, Camino, Coc Coc, Comodo Dragon, Charon, Chrome Frame, Chrome, Chrome Mobile iOS, Conkeror, Chrome Mobile, CoolNovo, CometBird, ChromePlus, Chromium, Cheshire, Deepnet Explorer, Dolphin, Dillo, Elinks, Element Browser, Epiphany, Espial TV Browser, Firebird, Fluid, Fennec, Firefox, Flock, Fireweb, Fireweb Navigator, Galeon, Google Earth, HotJava, Iceape, IBrowse, iCab, IceDragon, Iceweasel, Internet Explorer, IE Mobile, Iron, Jasmine, Jig Browser, Kindle Browser, K-meleon, Konqueror, Kapiko, Kylo, Kazehakase, Liebao, LG Browser, Links, LuaKit, Lunascape, Lynx, MicroB, NCSA Mosaic, Mercury, Mobile Safari, Midori, MIUI Browser, Mobile Silk, Maxthon, Nokia Browser, Nokia OSS Browser, Nokia Ovi Browser, NetFront, NetFront Life, NetPositive, Netscape, Obigo, Odyssey Web Browser, Off By One, ONE Browser, Opera Mini, Opera Mobile, Opera, Opera Next, Oregano, Openwave Mobile Browser, OmniWeb, Otter Browser, Palm Blazer, Pale Moon, Palm Pre, Puffin, Palm WebPro, Phoenix, Polaris, Microsoft Edge, QQ Browser, Rekonq, RockMelt, Sailfish Browser, SEMC-Browser, Sogou Explorer, Safari, Shiira, Skyfire, Seraphic Sraf, Sleipnir, SeaMonkey, Snowshoe, Sunrise, SuperBird, Swiftfox, Tizen Browser, TweakStyle, UC Browser, Vivaldi, Vision Mobile Browser, WebPositive, wOSBrowser, WeTab Browser, Yandex Browser, Xiino List of detected browser engines: WebKit, Blink, Trident, Text-based, Dillo, iCab, Presto, Gecko, KHTML, NetFront, Edge List of detected libraries: curl, Guzzle (PHP HTTP Client), Java, Perl, Python Requests, Python urllib, Wget List of detected media players: Banshee, Boxee, Clementine, FlyCast, Instacast, iTunes, Kodi, MediaMonkey, Miro, NexPlayer, Nightingale, QuickTime, Songbird, Stagefright, SubStream, VLC, Winamp, Windows Media Player, XBMC List of detected mobile apps: AndroidDownloadManager, Facebook, FeedR, Google Play Newsstand, Google Plus, Line, Pinterest, Sina Weibo, WeChat, WhatsApp, YouTube and mobile apps using AFNetworking List of detected PIMs (personal information manager): Airmail, Barca, Lotus Notes, MailBar, Microsoft Outlook, Outlook Express, Postbox, The Bat!, Thunderbird List of detected feed readers: Akregator, Apple PubSub, FeedDemon, Feeddler RSS Reader, JetBrains Omea Reader, Liferea, NetNewsWire, Newsbeuter, NewsBlur, NewsBlur Mobile App, Pulp, ReadKit, Reeder, RSS Bandit, RSS Junkie, RSSOwl, Stringer List of brands with detected devices: 3Q, Acer, Ainol, Airness, Airties, Alcatel, Allview, Altech UEC, Amazon, Amoi, Apple, Archos, Arnova, ARRIS, Asus, Audiovox, Avvio, Axxion, BangOlufsen, Barnes & Noble, BBK, Becker, Beetel, BenQ, BenQ-Siemens, Bird, Blu, Bmobile, Boway, bq, Brondi, Bush, Capitel, Captiva, Carrefour, Casio, Cat, Celkon, Changhong, Cherry Mobile, CnM, Coby Kyros, Compal, Compaq, ConCorde, Coolpad, Cowon, CreNova, Cricket, Crius Mea, Crosscall, Cube, CUBOT, Danew, Datang, Dbtel, Dell, Denver, Desay, Dicam, DMM, DNS, DoCoMo, Doogee, Doov, Dopod, Dune HD, E-Boda, Easypix, EBEST, ECS, Elephone, Energy Sistem, Ericsson, Ericy, Eton, eTouch, Evertek, Ezio, Ezze, Fairphone, Fly, Foxconn, Fujitsu, Garmin-Asus, Gateway, Gemini, Gigabyte, Gigaset, Gionee, GOCLEVER, Goly, Google, Gradiente, Grundig, Haier, Hasee, Hi-Level, Hisense, Hosin, HP, HTC, Huawei, Humax, Hyrican, Hyundai, i-Joy, i-mate, i-mobile, iBall, iBerry, Ikea, iKoMo, iNew, Infinix, Inkti, Innostream, INQ, Intek, Intex, Inverto, iOcean, iTel, Jiayu, Jolla, K-Touch, Karbonn, Kazam, KDDI, Kingsun, Komu, Konka, Koobee, KOPO, Koridy, KT-Tech, Kumai, Kyocera, Lanix, Lava, LCT, Lenco, Lenovo, Le Pan, Lexibook, LG, Lingwin, Loewe, Logicom, M.T.T., Majestic, Manta Multimedia, Mecer, Mediacom, MediaTek, Medion, MEEG, Meizu, Memup, Metz, MEU, MicroMax, Microsoft, Mio, Mitsubishi, MLLED, Mobistel, Mofut, Motorola, Mpman, MSI, MyPhone, NEC, Netgear, Newgen, Nexian, NextBook, NGM, Nikon, Nintendo, Noain, Nokia, Nomi, O2, Onda, OnePlus, OPPO, Opsson, Orange, Ouki, OUYA, Overmax, Oysters, Palm, Panasonic, Pantech, PEAQ, Philips, phoneOne, Pioneer, Ployer, Point of View, Polaroid, PolyPad, Pomp, Positivo, Prestigio, ProScan, PULID, Qilive, QMobile, Qtek, Quechua, Ramos, RCA Tablets, Readboy, Rikomagic, RIM, Roku, Rover, Sagem, Samsung, Sanyo, Sega, Selevision, Sencor, Sendo, SFR, Sharp, Siemens, Skyworth, Smart, Smartfren, Softbank, Sony, Sony Ericsson, Spice, Star, Stonex, Storex, Sumvision, SunVan, SuperSonic, Symphony, T-Mobile, TCL, TechniSat, TechnoTrend, Tecno Mobile, Telefunken, Telenor, Telit, Tesco, Tesla, teXet, ThL, Thomson, TIANYU, TiPhone, Tolino, Toplux, Toshiba, Trevi, Tunisie Telecom, Turbo-X, TVC, Uniscope, Unknown, Unowhy, UTStarcom, Vastking, Vertu, Vestel, Videocon, Videoweb, ViewSonic, Vitelcom, Vivo, Vizio, VK Mobile, Vodafone, Voto, Voxtel, Walton, Web TV, WellcoM, Wexler, Wiko, Wolder, Wonu, Woxter, Xiaomi, Xolo, Yarvik, Ytone, Yuandao, Yusun, Zeemi, Zonda, Zopo, ZTE Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/piwik/device-detector"	"Another library for parsing user agent strings."	"true"
"Strings"	"Hoa String"	"https://github.com/hoaproject/String"	"Another UTF-8 string library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6"	"5"	"2"	"GitHub - hoaproject/String: The Hoa\String library (deprecated by Hoa\Ustring). Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 6 Fork 2 hoaproject/String Code Issues 0 Pull requests 0 Pulse Graphs The Hoa\String library (deprecated by Hoa\Ustring). http://hoa-project.net/ 140 commits 1 branch 11 releases 9 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 2.16.01.11 2.15.07.28 2.15.05.29 2.15.03.25 2.15.02.19 2.14.12.24 2.14.12.10 2.14.11.09 2.14.09.23 2.14.09.16 1.14.09.16 Nothing to show New pull request Latest commit bed8efc Jan 11, 2016 Hywan Prepare 2.16.01.11. Permalink Failed to load latest commit information. Bin Quality: Run devtools:cs. Jan 9, 2016 Documentation Move to PSR-1 and PSR-2. May 18, 2015 Test/Unit Quality: Run devtools:cs. Jan 9, 2016 .State Extend Hoa\Ustring Jul 1, 2015 CHANGELOG.md Prepare 2.16.01.11. Jan 11, 2016 Exception.php Quality: Run devtools:cs. Jan 9, 2016 README.md Extend Hoa\Ustring Jul 1, 2015 Search.php Quality: Run devtools:cs. Jan 9, 2016 String.php Consistency: Use `Hoa\Consistency`. Dec 8, 2015 composer.json Extend Hoa\Ustring Jul 1, 2015 README.md Hoa is a modular, extensible and structured set of PHP libraries. Moreover, Hoa aims at being a bridge between industrial and research worlds. Hoa\String This library allows to manipulate UTF-8 strings easily with some search algorithms. Warning This library is deprecated, and doesn't support php >= 7 because of new reserved keyword string, please use Hoa\Ustring. Installation With Composer, to include this library into your dependencies, you need to require hoa/string: {     ""require"": {         ""hoa/string"": ""~2.0""     } } Please, read the website to get more informations about how to install. Quick usage We propose a quick overview of two usages: manipulate UTF-8 strings and one search algorithm. Natural UTF-8 strings manipulation The Hoa\String\String class allows to manipulate easily UTF-8 strings in a very natural way. This class implements the \ArrayAccess, \Countable and \IteratorAggregate interfaces. We will use the following examples: $french   = new Hoa\String\String('Je t\'aime'); $arabic   = new Hoa\String\String('أحبك'); $japanese = new Hoa\String\String('私はあなたを愛して'); To get the first character, we will do: var_dump(     $french[0],  // string(1) ""J""     $arabic[0],  // string(2) ""أ""     $japanese[0] // string(3) ""私"" ); And to get the last character, we will do [-1]. It supports unbounded (and modulo) indexes. We note that it cares about text direction. Look at $arabic[0], it returns أ and not ك. To get the direction, we can use the Hoa\String\String::getDirection method (which call the Hoa\String\String::getCharDirection static method), it returns either Hoa\String\String::LTR (0) or Hoa\String\String::RTL (1): var_dump(     $french->getDirection(),  // int(0)     $arabic->getDirection(),  // int(1)     $japanese->getDirection() // int(0) ); Text direction is also important for the append, prepend, pad… methods on Hoa\String\String for example. To get the length of a string, we can use the count function: var_dump(     count($french),  // int(9)     count($arabic),  // int(4)     count($japanese) // int(9) ); We are also able to iterate over the string: foreach ($arabic as $letter) {     var_dump($letter); }  /**  * Will output:  * string(2) ""أ""  * string(2) ""ح""  * string(2) ""ب""  * string(2) ""ك""  */ Again, text direction is useful here. For $arabic, the iteration is done from right to left. Some static methods are helpful, such as fromCode, toCode or isUtf8 on Hoa\String\String: var_dump(     Hoa\String\String::fromCode(0x1a9), // string(2) ""Ʃ""     Hoa\String\String::toCode('Ʃ'),     // int(425) == 0x1a9     Hoa\String\String::isUtf8('Ʃ')      // bool(true) ); We can also transform any text into ASCII: $emoji = new Hoa\String\String('I ❤ Unicode'); $maths = new Hoa\String\String('∀ i ∈ ℕ');  echo     $emoji->toAscii(), ""\n"",     $maths->toAscii(), ""\n"";  /**  * Will output:  * I (heavy black heart) Unicode  * (for all) i (element of) N  */ Search algorithm The Hoa\String\Search implements search algorithms on strings. For example, the Hoa\String\Search::approximated method make a search by approximated patterns (with k differences based upon the principle diagonal monotony). If we search the word GATAA in CAGATAAGAGAA with 1 difference, we will do: $search = Hoa\String\Search::approximated(     $haystack = 'CAGATAAGAGAA',     $needle   = 'GATAA',     $k        = 1 ); $solutions = array();  foreach ($search as $pos) {     $solutions[] = substr($haystack, $pos['i'], $pos['l']); } We will found AGATA, GATAA, ATAAG and GAGAA. The result is not very handy but the algorithm is much optimized and found many applications. Documentation Different documentations can be found on the website: http://hoa-project.net/. License Hoa is under the New BSD License (BSD-3-Clause). Please, see LICENSE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hoaproject/String"	"Another UTF-8 string library."	"true"
"Strings"	"Jieba-PHP"	"https://github.com/fukuball/jieba-php"	"A PHP port of Python's jieba. Chinese text segmentation for natural language processing."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"167"	"24"	"55"	"GitHub - fukuball/jieba-php: ""結巴""中文分詞：做最好的 PHP 中文分詞、中文斷詞組件。 / ""Jieba"" (Chinese for ""to stutter"") Chinese text segmentation: built to be the best PHP Chinese word segmentation module. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 167 Fork 55 fukuball/jieba-php Code Issues 2 Pull requests 0 Pulse Graphs ""結巴""中文分詞：做最好的 PHP 中文分詞、中文斷詞組件。 / ""Jieba"" (Chinese for ""to stutter"") Chinese text segmentation: built to be the best PHP Chinese word segmentation module. http://jieba-php.fukuball.com 99 commits 1 branch 10 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.25 0.24 0.23 0.22 0.21 0.20 0.19 0.18 0.17 0.16 Nothing to show New pull request Latest commit 6aaa5b1 May 19, 2016 fukuball Merge pull request #11 from vanjor/patch-1 … fix: api demo error in readme.md Permalink Failed to load latest commit information. src 修正JiebaAnalyse::extractTags遇到關鍵詞是數字時，數字的關鍵詞會被清除，從0開始排。 Mar 17, 2016 test jieba-php 0.25 Feb 17, 2016 .gitignore 新增 jieba php 版本 project 基礎文件 Apr 23, 2015 .travis.yml 嘗試加入 php 7 Feb 27, 2016 LICENSE Initial commit Apr 23, 2015 README.md fix: api demo error in readme.md May 19, 2016 composer.json jieba-php 0.25 Feb 16, 2016 composer.lock 更新 composer Nov 18, 2015 phpunit.xml add namespace and fix some coding style Apr 28, 2015 README.md jieba-php ""結巴""中文分詞：做最好的 PHP 中文分詞、中文斷詞組件，目前翻譯版本為 jieba-0.25 版本，未來再慢慢往上升級，效能也需要再改善，請有興趣的開發者一起加入開發！若想使用 Python 版本請前往 fxsjy/jieba 現在已經可以支援繁體中文！只要將字典切換為 big 模式即可！ ""Jieba"" (Chinese for ""to stutter"") Chinese text segmentation: built to be the best PHP Chinese word segmentation module. Scroll down for English documentation. 線上展示 網站網址：http://jieba-php.fukuball.com 網站原始碼：https://github.com/fukuball/jieba-php.fukuball.com Feature 支持三種分詞模式： 1）默認精確模式，試圖將句子最精確地切開，適合文本分析； 2）全模式，把句子中所有的可以成詞的詞語都掃描出來，但是不能解決歧義。（需要充足的字典） 3) 搜尋引擎模式，在精確模式的基礎上，對長詞再次切分，提高召回率，適合用於搜尋引擎分詞。 Usage 自動安裝：使用 composer 安裝後，透過 autoload 引用 代碼示例 composer require fukuball/jieba-php:dev-master 代碼示例 require_once ""/path/to/your/vendor/autoload.php""; 手動安裝：將 jieba-php 放置適當目錄後，透過 require_once 引用 代碼示例 require_once ""/path/to/your/vendor/multi-array/MultiArray.php""; require_once ""/path/to/your/vendor/multi-array/Factory/MultiArrayFactory.php""; require_once ""/path/to/your/class/Jieba.php""; require_once ""/path/to/your/class/Finalseg.php""; Algorithm 基於 Trie 樹結構實現高效的詞圖掃描，生成句子中漢字所有可能成詞情況所構成的有向無環圖（DAG) 採用了動態規劃查找最大概率路徑, 找出基於詞頻的最大切分組合 對於未登錄詞，採用了基於漢字成詞能力的 HMM 模型，使用了 Viterbi 算法 BEMS 的解釋 https://github.com/fxsjy/jieba/issues/7 Interface 組件只提供 jieba.cut 方法用於分詞 cut 方法接受兩個輸入參數: 1) 第一個參數為需要分詞的字符串 2）cut_all 參數用來控制分詞模式 待分詞的字符串可以是 utf-8 字符串 jieba.cut 返回的結構是一個可迭代的 array 功能 1)：分词 cut 方法接受想個輸入參數： 1) 第一個參數為需要分詞的字符串 2）cut_all 參數用來控制分詞模式 cutForSearch 方法接受一個參數：需要分詞的字符串，該方法適合用於搜索引擎構建倒排索引的分詞，粒度比較細 注意：待分詞的字符串是 utf-8 字符串 cut 以及 cutForSearch 返回的結構是一個可迭代的 array 代碼示例 (Tutorial) ini_set('memory_limit', '1024M');  require_once ""/path/to/your/vendor/multi-array/MultiArray.php""; require_once ""/path/to/your/vendor/multi-array/Factory/MultiArrayFactory.php""; require_once ""/path/to/your/class/Jieba.php""; require_once ""/path/to/your/class/Finalseg.php""; use Fukuball\Jieba\Jieba; use Fukuball\Jieba\Finalseg; Jieba::init(); Finalseg::init();  $seg_list = Jieba::cut(""怜香惜玉也得要看对象啊！""); var_dump($seg_list);  seg_list = Jieba::cut(""我来到北京清华大学"", true) var_dump($seg_list); #全模式  seg_list = Jieba::cut(""我来到北京清华大学"", false) var_dump($seg_list); #默認精確模式  seg_list = Jieba::cut(""他来到了网易杭研大厦"") var_dump($seg_list);  seg_list = Jieba::cutForSearch(""小明硕士毕业于中国科学院计算所，后在日本京都大学深造"") #搜索引擎模式 var_dump($seg_list); Output: array(7) {   [0]=>   string(12) ""怜香惜玉""   [1]=>   string(3) ""也""   [2]=>   string(3) ""得""   [3]=>   string(3) ""要""   [4]=>   string(3) ""看""   [5]=>   string(6) ""对象""   [6]=>   string(3) ""啊"" }  Full Mode: array(15) {   [0]=>   string(3) ""我""   [1]=>   string(3) ""来""   [2]=>   string(6) ""来到""   [3]=>   string(3) ""到""   [4]=>   string(3) ""北""   [5]=>   string(6) ""北京""   [6]=>   string(3) ""京""   [7]=>   string(3) ""清""   [8]=>   string(6) ""清华""   [9]=>   string(12) ""清华大学""   [10]=>   string(3) ""华""   [11]=>   string(6) ""华大""   [12]=>   string(3) ""大""   [13]=>   string(6) ""大学""   [14]=>   string(3) ""学"" }  Default Mode: array(4) {   [0]=>   string(3) ""我""   [1]=>   string(6) ""来到""   [2]=>   string(6) ""北京""   [3]=>   string(12) ""清华大学"" } array(6) {   [0]=>   string(3) ""他""   [1]=>   string(6) ""来到""   [2]=>   string(3) ""了""   [3]=>   string(6) ""网易""   [4]=>   string(6) ""杭研""   [5]=>   string(6) ""大厦"" } (此處，“杭研“並沒有在詞典中，但是也被 Viterbi 算法識別出來了)  Search Engine Mode: array(18) {   [0]=>   string(6) ""小明""   [1]=>   string(6) ""硕士""   [2]=>   string(6) ""毕业""   [3]=>   string(3) ""于""   [4]=>   string(6) ""中国""   [5]=>   string(6) ""科学""   [6]=>   string(6) ""学院""   [7]=>   string(9) ""科学院""   [8]=>   string(15) ""中国科学院""   [9]=>   string(6) ""计算""   [10]=>   string(9) ""计算所""   [11]=>   string(3) ""后""   [12]=>   string(3) ""在""   [13]=>   string(6) ""日本""   [14]=>   string(6) ""京都""   [15]=>   string(6) ""大学""   [16]=>   string(18) ""日本京都大学""   [17]=>   string(6) ""深造"" } 功能 2)：添加自定義詞典 開發者可以指定自己自定義的詞典，以便包含 jieba 詞庫裡沒有的詞。雖然 jieba 有新詞識別能力，但是自行添加新詞可以保證更高的正確率 用法： Jieba::loadUserDict(file_name) # file_name 為自定義詞典的絕對路徑 詞典格式和 dict.txt 一樣，一個詞佔一行；每一行分為三部分，一部分為詞語，一部分為詞頻，一部分為詞性，用空格隔開 範例： 云计算 5 n 李小福 2 n 创新办 3 n 之前： 李小福 / 是 / 创新 / 办 / 主任 / 也 / 是 / 云 / 计算 / 方面 / 的 / 专家 / 加載自定義詞庫後：　李小福 / 是 / 创新办 / 主任 / 也 / 是 / 云计算 / 方面 / 的 / 专家 / 說明：""通过用户自定义词典来增强歧义纠错能力"" --- https://github.com/fxsjy/jieba/issues/14 功能 3)：關鍵詞提取 JiebaAnalyse::extractTags($content, $top_k) content 為待提取的文本 top_k 為返回幾個 TF/IDF 權重最大的關鍵詞，默認值為 20 代碼示例 (關鍵詞提取) ini_set('memory_limit', '600M');  require_once ""/path/to/your/vendor/multi-array/MultiArray.php""; require_once ""/path/to/your/vendor/multi-array/Factory/MultiArrayFactory.php""; require_once ""/path/to/your/class/Jieba.php""; require_once ""/path/to/your/class/Finalseg.php""; require_once ""/path/to/your/class/JiebaAnalyse.php""; use Fukuball\Jieba\Jieba; use Fukuball\Jieba\Finalseg; use Fukuball\Jieba\JiebaAnalyse; Jieba::init(array('mode'=>'test','dict'=>'samll')); Finalseg::init(); JiebaAnalyse::init();  $top_k = 10; $content = file_get_contents(""/path/to/your/dict/lyric.txt"", ""r"");  $tags = JiebaAnalyse::extractTags($content, $top_k);  var_dump($tags); Output: array(10) {   [""是否""]=>   float(1.2196321889395)   [""一般""]=>   float(1.0032459890209)   [""肌迫""]=>   float(0.64654314660465)   [""怯懦""]=>   float(0.44762844339349)   [""藉口""]=>   float(0.32327157330233)   [""逼不得已""]=>   float(0.32327157330233)   [""不安全感""]=>   float(0.26548304656279)   [""同感""]=>   float(0.23929673812326)   [""有把握""]=>   float(0.21043366018744)   [""空洞""]=>   float(0.20598261709442) } 功能 4)：詞性分詞 詞性說明：https://gist.github.com/luw2007/6016931 代碼示例 (Tutorial) ini_set('memory_limit', '600M');  require_once dirname(dirname(__FILE__)).""/vendor/multi-array/MultiArray.php""; require_once dirname(dirname(__FILE__)).""/vendor/multi-array/Factory/MultiArrayFactory.php""; require_once dirname(dirname(__FILE__)).""/class/Jieba.php""; require_once dirname(dirname(__FILE__)).""/class/Finalseg.php""; require_once dirname(dirname(__FILE__)).""/class/Posseg.php""; use Fukuball\Jieba\Jieba; use Fukuball\Jieba\Finalseg; use Fukuball\Jieba\Posseg; Jieba::init(); Finalseg::init(); Posseg::init();  $seg_list = Posseg::cut(""这是一个伸手不见五指的黑夜。我叫孙悟空，我爱北京，我爱Python和C++。""); var_dump($seg_list); Output: array(21) {   [0]=>   array(2) {     [""word""]=>     string(3) ""这""     [""tag""]=>     string(1) ""r""   }   [1]=>   array(2) {     [""word""]=>     string(3) ""是""     [""tag""]=>     string(1) ""v""   }   [2]=>   array(2) {     [""word""]=>     string(6) ""一个""     [""tag""]=>     string(1) ""m""   }   [3]=>   array(2) {     [""word""]=>     string(18) ""伸手不见五指""     [""tag""]=>     string(1) ""i""   }   [4]=>   array(2) {     [""word""]=>     string(3) ""的""     [""tag""]=>     string(2) ""uj""   }   [5]=>   array(2) {     [""word""]=>     string(6) ""黑夜""     [""tag""]=>     string(1) ""n""   }   [6]=>   array(2) {     [""word""]=>     string(3) ""。""     [""tag""]=>     string(1) ""x""   }   [7]=>   array(2) {     [""word""]=>     string(3) ""我""     [""tag""]=>     string(1) ""r""   }   [8]=>   array(2) {     [""word""]=>     string(3) ""叫""     [""tag""]=>     string(1) ""v""   }   [9]=>   array(2) {     [""word""]=>     string(9) ""孙悟空""     [""tag""]=>     string(2) ""nr""   }   [10]=>   array(2) {     [""word""]=>     string(3) ""，""     [""tag""]=>     string(1) ""x""   }   [11]=>   array(2) {     [""word""]=>     string(3) ""我""     [""tag""]=>     string(1) ""r""   }   [12]=>   array(2) {     [""word""]=>     string(3) ""爱""     [""tag""]=>     string(1) ""v""   }   [13]=>   array(2) {     [""word""]=>     string(6) ""北京""     [""tag""]=>     string(2) ""ns""   }   [14]=>   array(2) {     [""word""]=>     string(3) ""，""     [""tag""]=>     string(1) ""x""   }   [15]=>   array(2) {     [""word""]=>     string(3) ""我""     [""tag""]=>     string(1) ""r""   }   [16]=>   array(2) {     [""word""]=>     string(3) ""爱""     [""tag""]=>     string(1) ""v""   }   [17]=>   array(2) {     [""word""]=>     string(6) ""Python""     [""tag""]=>     string(3) ""eng""   }   [18]=>   array(2) {     [""word""]=>     string(3) ""和""     [""tag""]=>     string(1) ""c""   }   [19]=>   array(2) {     [""word""]=>     string(3) ""C++""     [""tag""]=>     string(3) ""eng""   }   [20]=>   array(2) {     [""word""]=>     string(3) ""。""     [""tag""]=>     string(1) ""x""   } } 功能 5)：切換成繁體字典 代碼示例 (Tutorial) ini_set('memory_limit', '1024M');  require_once dirname(dirname(__FILE__)).""/vendor/multi-array/MultiArray.php""; require_once dirname(dirname(__FILE__)).""/vendor/multi-array/Factory/MultiArrayFactory.php""; require_once dirname(dirname(__FILE__)).""/class/Jieba.php""; require_once dirname(dirname(__FILE__)).""/class/Finalseg.php""; use Fukuball\Jieba\Jieba; use Fukuball\Jieba\Finalseg; Jieba::init(array('mode'=>'default','dict'=>'big')); Finalseg::init();  $seg_list = Jieba::cut(""怜香惜玉也得要看对象啊！""); var_dump($seg_list);  $seg_list = Jieba::cut(""憐香惜玉也得要看對象啊！""); var_dump($seg_list); Output: array(7) {   [0]=>   string(12) ""怜香惜玉""   [1]=>   string(3) ""也""   [2]=>   string(3) ""得""   [3]=>   string(3) ""要""   [4]=>   string(3) ""看""   [5]=>   string(6) ""对象""   [6]=>   string(3) ""啊"" } array(7) {   [0]=>   string(12) ""憐香惜玉""   [1]=>   string(3) ""也""   [2]=>   string(3) ""得""   [3]=>   string(3) ""要""   [4]=>   string(3) ""看""   [5]=>   string(6) ""對象""   [6]=>   string(3) ""啊"" } 常見問題 1) 模型的數據是如何生成的？ https://github.com/fxsjy/jieba/issues/7 2) 這個庫的授權是？ https://github.com/fxsjy/jieba/issues/2 jieba-php English Document Online Demo Demo Site Url：http://jieba-php.fukuball.com Demo Site Repo：https://github.com/fukuball/jieba-php.fukuball.com Feature Support three types of segmentation mode: 1) Accurate Mode, attempt to cut the sentence into the most accurate segmentation, which is suitable for text analysis; 2) Full Mode, break the words of the sentence into words scanned 3) Search Engine Mode, based on the Accurate Mode, with an attempt to cut the long words into several short words, which can enhance the recall rate Usage Installation: Use composer to install jieba-php, then require the autoload file to use jieba-php. Algorithm Based on the Trie tree structure to achieve efficient word graph scanning; sentences using Chinese characters constitute a directed acyclic graph (DAG). Employs memory search to calculate the maximum probability path, in order to identify the maximum tangential points based on word frequency combination. For unknown words, the character position HMM-based model is used, using the Viterbi algorithm. The meaning of BEMS https://github.com/fxsjy/jieba/issues/7. Interface The cut method accepts two parameters: 1) first parameter is the string to segmentation 2）the second parameter cut_all to control segmentation mode. The string to segmentation may use utf-8 string. cutForSearch accpets only on parameter: the string that requires segmentation, and it will cut the sentence into short words cut and cutForSearch return an segmented array. Function 1) Segmentation Example (Tutorial) ini_set('memory_limit', '1024M');  require_once ""/path/to/your/vendor/multi-array/MultiArray.php""; require_once ""/path/to/your/vendor/multi-array/Factory/MultiArrayFactory.php""; require_once ""/path/to/your/class/Jieba.php""; require_once ""/path/to/your/class/Finalseg.php""; use Fukuball\Jieba\Jieba; use Fukuball\Jieba\Finalseg; Jieba::init(); Finalseg::init();  $seg_list = Jieba::cut(""怜香惜玉也得要看对象啊！""); var_dump($seg_list);  seg_list = jieba.cut(""我来到北京清华大学"", true) var_dump($seg_list); #全模式  seg_list = jieba.cut(""我来到北京清华大学"", false) var_dump($seg_list); #默認精確模式  seg_list = jieba.cut(""他来到了网易杭研大厦"") var_dump($seg_list);  seg_list = jieba.cut_for_search(""小明硕士毕业于中国科学院计算所，后在日本京都大学深造"") #搜索引擎模式 var_dump($seg_list); Output: array(7) {   [0]=>   string(12) ""怜香惜玉""   [1]=>   string(3) ""也""   [2]=>   string(3) ""得""   [3]=>   string(3) ""要""   [4]=>   string(3) ""看""   [5]=>   string(6) ""对象""   [6]=>   string(3) ""啊"" }  Full Mode: array(15) {   [0]=>   string(3) ""我""   [1]=>   string(3) ""来""   [2]=>   string(6) ""来到""   [3]=>   string(3) ""到""   [4]=>   string(3) ""北""   [5]=>   string(6) ""北京""   [6]=>   string(3) ""京""   [7]=>   string(3) ""清""   [8]=>   string(6) ""清华""   [9]=>   string(12) ""清华大学""   [10]=>   string(3) ""华""   [11]=>   string(6) ""华大""   [12]=>   string(3) ""大""   [13]=>   string(6) ""大学""   [14]=>   string(3) ""学"" }  Default Mode: array(4) {   [0]=>   string(3) ""我""   [1]=>   string(6) ""来到""   [2]=>   string(6) ""北京""   [3]=>   string(12) ""清华大学"" } array(6) {   [0]=>   string(3) ""他""   [1]=>   string(6) ""来到""   [2]=>   string(3) ""了""   [3]=>   string(6) ""网易""   [4]=>   string(6) ""杭研""   [5]=>   string(6) ""大厦"" } (此處，“杭研“並沒有在詞典中，但是也被 Viterbi 算法識別出來了)  Search Engine Mode: array(18) {   [0]=>   string(6) ""小明""   [1]=>   string(6) ""硕士""   [2]=>   string(6) ""毕业""   [3]=>   string(3) ""于""   [4]=>   string(6) ""中国""   [5]=>   string(6) ""科学""   [6]=>   string(6) ""学院""   [7]=>   string(9) ""科学院""   [8]=>   string(15) ""中国科学院""   [9]=>   string(6) ""计算""   [10]=>   string(9) ""计算所""   [11]=>   string(3) ""后""   [12]=>   string(3) ""在""   [13]=>   string(6) ""日本""   [14]=>   string(6) ""京都""   [15]=>   string(6) ""大学""   [16]=>   string(18) ""日本京都大学""   [17]=>   string(6) ""深造"" } Function 2) Add a custom dictionary Developers can specify their own custom dictionary to include in the jieba thesaurus. jieba has the ability to identify new words, but adding your own new words can ensure a higher rate of correct segmentation. Usage: Jieba::loadUserDict(file_name) # file_name is a custom dictionary path. The dictionary format is the same as that of dict.txt: one word per line; each line is divided into two parts, the first is the word itself, the other is the word frequency, separated by a space. Example: 云计算 5 李小福 2 创新办 3 之前： 李小福 / 是 / 创新 / 办 / 主任 / 也 / 是 / 云 / 计算 / 方面 / 的 / 专家 / 加載自定義詞庫後：　李小福 / 是 / 创新办 / 主任 / 也 / 是 / 云计算 / 方面 / 的 / 专家 / Function 3) Keyword Extraction JiebaAnalyse::extractTags($content, $top_k) content: the text to be extracted top_k: to return several TF/IDF weights for the biggest keywords, the default value is 20 Example (keyword extraction) ini_set('memory_limit', '600M');  require_once ""/path/to/your/vendor/multi-array/MultiArray.php""; require_once ""/path/to/your/vendor/multi-array/Factory/MultiArrayFactory.php""; require_once ""/path/to/your/class/Jieba.php""; require_once ""/path/to/your/class/Finalseg.php""; require_once ""/path/to/your/class/JiebaAnalyse.php""; use Fukuball\Jieba\Jieba; use Fukuball\Jieba\Finalseg; use Fukuball\Jieba\JiebaAnalyse; Jieba::init(array('mode'=>'test','dict'=>'samll')); Finalseg::init(); JiebaAnalyse::init();  $top_k = 10; $content = file_get_contents(""/path/to/your/dict/lyric.txt"", ""r"");  $tags = JiebaAnalyse::extractTags($content, $top_k);  var_dump($tags); Output: array(10) {   [""是否""]=>   float(1.2196321889395)   [""一般""]=>   float(1.0032459890209)   [""肌迫""]=>   float(0.64654314660465)   [""怯懦""]=>   float(0.44762844339349)   [""藉口""]=>   float(0.32327157330233)   [""逼不得已""]=>   float(0.32327157330233)   [""不安全感""]=>   float(0.26548304656279)   [""同感""]=>   float(0.23929673812326)   [""有把握""]=>   float(0.21043366018744)   [""空洞""]=>   float(0.20598261709442) }  Function 4) Word Segmentation and Tagging Word Tagging Meaning：https://gist.github.com/luw2007/6016931 Example (word tagging) ini_set('memory_limit', '600M');  require_once dirname(dirname(__FILE__)).""/vendor/multi-array/MultiArray.php""; require_once dirname(dirname(__FILE__)).""/vendor/multi-array/Factory/MultiArrayFactory.php""; require_once dirname(dirname(__FILE__)).""/class/Jieba.php""; require_once dirname(dirname(__FILE__)).""/class/Finalseg.php""; require_once dirname(dirname(__FILE__)).""/class/Posseg.php""; use Fukuball\Jieba\Jieba; use Fukuball\Jieba\Finalseg; use Fukuball\Jieba\Posseg; Jieba::init(); Finalseg::init(); Posseg::init();  $seg_list = Posseg::cut(""这是一个伸手不见五指的黑夜。我叫孙悟空，我爱北京，我爱Python和C++。""); var_dump($seg_list); Output: array(21) {   [0]=>   array(2) {     [""word""]=>     string(3) ""这""     [""tag""]=>     string(1) ""r""   }   [1]=>   array(2) {     [""word""]=>     string(3) ""是""     [""tag""]=>     string(1) ""v""   }   [2]=>   array(2) {     [""word""]=>     string(6) ""一个""     [""tag""]=>     string(1) ""m""   }   [3]=>   array(2) {     [""word""]=>     string(18) ""伸手不见五指""     [""tag""]=>     string(1) ""i""   }   [4]=>   array(2) {     [""word""]=>     string(3) ""的""     [""tag""]=>     string(2) ""uj""   }   [5]=>   array(2) {     [""word""]=>     string(6) ""黑夜""     [""tag""]=>     string(1) ""n""   }   [6]=>   array(2) {     [""word""]=>     string(3) ""。""     [""tag""]=>     string(1) ""w""   }   [7]=>   array(2) {     [""word""]=>     string(3) ""我""     [""tag""]=>     string(1) ""r""   }   [8]=>   array(2) {     [""word""]=>     string(3) ""叫""     [""tag""]=>     string(1) ""v""   }   [9]=>   array(2) {     [""word""]=>     string(9) ""孙悟空""     [""tag""]=>     string(2) ""nr""   }   [10]=>   array(2) {     [""word""]=>     string(3) ""，""     [""tag""]=>     string(1) ""w""   }   [11]=>   array(2) {     [""word""]=>     string(3) ""我""     [""tag""]=>     string(1) ""r""   }   [12]=>   array(2) {     [""word""]=>     string(3) ""爱""     [""tag""]=>     string(1) ""v""   }   [13]=>   array(2) {     [""word""]=>     string(6) ""北京""     [""tag""]=>     string(2) ""ns""   }   [14]=>   array(2) {     [""word""]=>     string(3) ""，""     [""tag""]=>     string(1) ""w""   }   [15]=>   array(2) {     [""word""]=>     string(3) ""我""     [""tag""]=>     string(1) ""r""   }   [16]=>   array(2) {     [""word""]=>     string(3) ""爱""     [""tag""]=>     string(1) ""v""   }   [17]=>   array(2) {     [""word""]=>     string(6) ""Python""     [""tag""]=>     string(3) ""eng""   }   [18]=>   array(2) {     [""word""]=>     string(3) ""和""     [""tag""]=>     string(1) ""c""   }   [19]=>   array(2) {     [""word""]=>     string(3) ""C++""     [""tag""]=>     string(3) ""eng""   }   [20]=>   array(2) {     [""word""]=>     string(3) ""。""     [""tag""]=>     string(1) ""w""   } } Function 5)：Use Traditional Chinese Example (Tutorial) ini_set('memory_limit', '1024M');  require_once dirname(dirname(__FILE__)).""/vendor/multi-array/MultiArray.php""; require_once dirname(dirname(__FILE__)).""/vendor/multi-array/Factory/MultiArrayFactory.php""; require_once dirname(dirname(__FILE__)).""/class/Jieba.php""; require_once dirname(dirname(__FILE__)).""/class/Finalseg.php""; use Fukuball\Jieba\Jieba; use Fukuball\Jieba\Finalseg; Jieba::init(array('mode'=>'default','dict'=>'big')); Finalseg::init();  $seg_list = Jieba::cut(""怜香惜玉也得要看对象啊！""); var_dump($seg_list);  $seg_list = Jieba::cut(""憐香惜玉也得要看對象啊！""); var_dump($seg_list); Output: array(7) {   [0]=>   string(12) ""怜香惜玉""   [1]=>   string(3) ""也""   [2]=>   string(3) ""得""   [3]=>   string(3) ""要""   [4]=>   string(3) ""看""   [5]=>   string(6) ""对象""   [6]=>   string(3) ""啊"" } array(7) {   [0]=>   string(12) ""憐香惜玉""   [1]=>   string(3) ""也""   [2]=>   string(3) ""得""   [3]=>   string(3) ""要""   [4]=>   string(3) ""看""   [5]=>   string(6) ""對象""   [6]=>   string(3) ""啊"" } 詞性說明 a 形容词 (取英语形容词 adjective 的第 1 个字母。)   ad 副形词 (直接作状语的形容词，形容词代码 a 和副词代码 d 并在一起。)   ag 形容词性语素 (形容词性语素，形容词代码为 a，语素代码 ｇ 前面置以 a。)   an 名形词 (具有名词功能的形容词，形容词代码 a 和名词代码 n 并在一起。) b 区别词 (取汉字「别」的声母。) c 连词 (取英语连词 conjunction 的第 1 个字母。) d 副词 (取 adverb 的第 2 个字母，因其第 1 个字母已用于形容词。)   df 副词*   dg 副语素 (副词性语素，副词代码为 d，语素代码 ｇ 前面置以 d。) e 叹词 (取英语叹词 exclamation 的第 1 个字母。) eng 外语 f 方位词 (取汉字「方」的声母。) g 语素 (绝大多数语素都能作为合成词的「词根」，取汉字「根」的声母。) h 前接成分 (取英语 head 的第 1 个字母。) i 成语 (取英语成语 idiom 的第 1 个字母。) j 简称略语 (取汉字「简」的声母。) k 后接成分 l 习用语 (习用语尚未成为成语，有点「临时性」，取「临」的声母。) m 数词 (取英语 numeral 的第 3 个字母，n，u 已有他用。)   mg 数语素   mq 数词* n 名词 (取英语名词 noun 的第 1 个字母。)   ng 名语素 (名词性语素，名词代码为 n，语素代码 ｇ 前面置以 n。)   nr 人名 (名词代码n和「人(ren)」的声母并在一起。)   nrfg 名词*   nrt 名词*   ns 地名 (名词代码 n 和处所词代码 s 并在一起。)   nt 机构团体 (「团」的声母为 t，名词代码 n 和 t 并在一起。)   nz 其他专名 (「专」的声母的第 1 个字母为 z，名词代码 n 和 z 并在一起。) o 拟声词 (取英语拟声词 onomatopoeia 的第 1 个字母。) p 介词 (取英语介词 prepositional 的第 1 个字母。) q 量词 (取英语 quantity 的第 1 个字母。) r 代词 (取英语代词 pronoun的 第 2 个字母，因 p 已用于介词。)   rg 代词语素   rr 代词*   rz 代词* s 处所词 (取英语 space 的第 1 个字母。) t 时间词 (取英语 time 的第 1 个字母。)   tg 时语素 (时间词性语素，时间词代码为 t，在语素的代码 g 前面置以 t。) u 助词 (取英语助词 auxiliary 的第 2 个字母，因 a 已用于形容词。)   ud 助词*   ug 助词*   uj 助词*   ul 助词*   uv 助词*   uz 助词* v 动词 (取英语动词 verb 的第一个字母。)   vd 副动词 (直接作状语的动词，动词和副词的代码并在一起。)   vg 动语素   vi 动词*   vn 名动词 (指具有名词功能的动词，动词和名词的代码并在一起。)   vq 动词* w 标点符号 x 非语素字 (非语素字只是一个符号，字母 x 通常用于代表未知数、符号。) y 语气词 (取汉字「语」的声母。) z 状态词 (取汉字「状」的声母的前一个字母。)   zg 状态词*  License The MIT License (MIT) Copyright (c) 2015 fukuball Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fukuball/jieba-php"	"A PHP port of Python's jieba. Chinese text segmentation for natural language processing."	"true"
"Strings"	"Mobile-Detect"	"https://github.com/serbanghita/Mobile-Detect"	"A lightweight PHP class for detecting mobile devices (including tablets)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6123"	"675"	"1666"	"GitHub - serbanghita/Mobile-Detect: Mobile_Detect is a lightweight PHP class for detecting mobile devices (including tablets). It uses the User-Agent string combined with specific HTTP headers to detect the mobile environment. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 675 Star 6,123 Fork 1,666 serbanghita/Mobile-Detect Code Issues 123 Pull requests 26 Wiki Pulse Graphs Mobile_Detect is a lightweight PHP class for detecting mobile devices (including tablets). It uses the User-Agent string combined with specific HTTP headers to detect the mobile environment. http://mobiledetect.net 639 commits 6 branches 53 releases 56 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags devel-3-workinprogress devel-3 devel gh-pages jsonify master Nothing to show 2.8.22 2.8.21 2.8.20 2.8.19 2.8.18 2.8.17 2.8.16 2.8.15 2.8.14 2.8.13 2.8.12 2.8.11 2.8.10 2.8.8 2.8.7 2.8.6 2.8.5 2.8.4 2.8.3 2.8.2 2.8.1 2.8.0 2.7.9 2.7.8 2.7.7 2.7.6 2.7.5 2.7.4 2.7.3 2.7.2 2.7.1 2.7.0 2.6.9 2.6.8 2.6.7 2.6.6 2.6.5 2.6.4 2.6.3 2.6.2 2.6.1 2.6.0 2.5.9 2.5.8 2.5.7 2.5.6 2.5.5 2.5.4 2.5.3 2.5.2 2.5.0 2.3 2.2 Nothing to show New pull request Latest commit 3b22fe2 Jun 7, 2016 mlocati committed with serbanghita Exclude development stuff from repository autogenerated ZIP archives (#… … …555)  People that install this library via composer don't need the test/sample stuff, they just need the library itself. This PR removes the development directories and files from the repository auto-generated ZIP archives. Since these development files/directories will still be available via `git clone`, Travis is happy, developers are happy, and so are end-users (they won't have unneeded stuff in production machines). Permalink Failed to load latest commit information. examples #373 - Support for windows 8.1 Apr 25, 2015 export Utilities are now exported in the .json file (per #262 request) Aug 19, 2014 namespaced/Detection Use spaces instead TABs for comment indent Mar 8, 2016 tests Added Amazon, AOC and Asus tablets. Apr 24, 2016 .gitattributes Exclude development stuff from repository autogenerated ZIP archives (#… Jun 7, 2016 .gitignore Ignore new files and folderss. Aug 21, 2014 .gitmodules Added JSON export for all Mobile_Detect logic, HTTP headers and User-… Nov 9, 2013 .php_cs Removed 'examples' directory from style fixer. Jul 30, 2013 .travis.yml Removed support for PHP 5.2 Dec 24, 2015 LICENSE.txt Updated new year and authors Mar 18, 2015 Mobile_Detect.json Updated with the new regexes Apr 24, 2016 Mobile_Detect.php Remove ""Microsoft Edge"" Desktop User Agent pattern in List of mobile … Jun 7, 2016 README.md Added PageCache project that uses Mobile Detect as an optional depend… Apr 19, 2016 composer.json Adding code climate. Dec 8, 2014 ruleset.xml PSR ruleset for PHPStorm Feb 26, 2015 README.md Motto: ""Every business should have a mobile detection script to detect mobile readers."" Mobile_Detect is a lightweight PHP class for detecting mobile devices (including tablets). It uses the User-Agent string combined with specific HTTP headers to detect the mobile environment. We're committed to make Mobile_Detect the best open-source mobile detection resource and this is why before each release we're running unit tests, we also research and update the detection rules on daily and weekly basis. Your website's content strategy is important! You need a complete toolkit to deliver an experience that is optimized, fast and relevant to your users. Mobile_Detect class is a server-side detection tool that can help you with your RWD strategy, it is not a replacement for CSS3 media queries or other forms of client-side feature detection. Announcements For 2.x branch we are no longer taking optimizations pull requests, but only new regexes and User-Agents for our tests. On 2.x releases we are focusing on new tablets only. All the pull requests about TVs, bots or optimizations will be closed and analyzed after 3.0.0-beta is released. Still working on 3.0.0 branch to provide you with device detection! We're really excited on this one! We would like to speed this up, but life and family gets in the way ;) Special thanks to JetBrains for providing licenses for PHPStorm. In case you never heard or tried PHPStorm, you're clearly missing out! Check PHPStorm out! Download and demo Download Docs Examples Go to releases Become a contributor Code examples Mobile_Detect.php History 📱 Live demo! Composer package Continuous updates You can use composer in your release and update process to make sure you have the latest Mobile_Detect version. composer require mobiledetect/mobiledetectlib  {     ""require"": {         ""mobiledetect/mobiledetectlib"": ""^2.8""     } } Help Pledgie Paypal Donate 👍 Donate 🍺 I'm currently paying for hosting and spend a lot of my family time to maintain the project and planning the future releases. I would highly appreciate any money donations that will keep the research going. Special thanks to the community 👍 for donations, BrowserStack - for providing access to their great platform, Zend - for donating licenses, Dragos Gavrila who contributed with the logo. 3rd party modules / Submit new 👉 Keep Mobile_Detect.php class in a separate module and do NOT include it in your script core because of the high frequency of updates. 👉 When including the class into you web application or module always use include_once '../path/to/Mobile_Detect.php to prevent conflicts. mobile-detect.js A JavaScript port of Mobile-Detect class. Made by Heinrich Goebl. Varnish Cache Varnish Mobile Detect - Drop-in varnish solution to mobile user detection based on the Mobile-Detect library. Made by willemk. mobiledetect2vcl - Python script to transform the Mobile Detect JSON database into an UA-based mobile detection VCL subroutine easily integrable in any Varnish Cache configuration. Made by Carlos Abalde. LUA mobile-detect.lua is a port of Mobile-Detect to Lua for NGINX HTTP servers. Follows closely to mobile-detect.js. Supports all methods that server-side mobile-detect.js supports. Fully unit-tested and synced with Travis CI (Build Passing badge included). Made by Mark Walters. WordPress WordPress Mobile Detect - Gives you the ability to wrap that infographic in a [notdevice][/notdevice] shortcode so at the server level WordPress will decide to show that content only if the user is NOT on a phone or tablet. Made by Jesse Friedman. mobble - provides mobile related conditional functions for your site. e.g. is_iphone(), is_mobile() and is_tablet(). Made by Scott Evans. WordPress Responsage - A small WordPress theme plugin that allows you to make your images responsive. Made by Adrian Ciaschetti. WP247 Body Classes - Add unique classes to the body tag for easy styling based on various attributes (archive, user, post, mobile) and various WordPress ""is"" functions. Mobile attributes include type of device, Operating System, Browser, etc. Examples: .is-mobile, .is-not-mobile, .is-tablet, .is-ios, .is-not-ios, .is-androidos, .is-chromebrowser. Made by wescleveland56 Drupal Drupal Mobile Switch - The Mobile Switch Drupal module provides a automatic theme switch functionality for mobile devices, detected by Browscap or Mobile Detect. Made by Siegfried Neumann. Drupal Context Mobile Detect - This is a Drupal context module which integrates Context and PHP Mobile Detect library. Created by Artem Shymko. Drupal Mobile Detect - Lightweight mobile detect module for Drupal created by Matthew Donadio Joomla yagendoo Joomla! Mobile Detection Plugin - Lightweight PHP plugin for Joomla! that detects a mobile browser using the Mobile Detect class. Made by yagendoo media. User Agent Detector plugin by @ReneKreijveld. This system plugin detects the user agent of your website visitor and sets a session variable accordingly. Based on the user agent, the plugin detects if the site is running on a desktop pc, tablet or smartphone. It can also detect if the visitor is a spider bot (search engine). Session variable that is set: ualayout. Possible values: desktop, tablet, mobile, bot.. Magento Magento - This Magento helper from Optimise Web enables the use of all functions provided by MobileDetect.net. Made by Kathir Vel. PrestaShop PrestaShop is a free, secure and open source shopping cart platform. Mobile_Detect is included in the default package since 1.5.x. Zend Framework ZF2 Mobile-Detect - Zend Framework 2 module that provides Mobile-Detect features (Mobile_Detect class as a service, helper for views and plugin controllers). Made by neilime ZF2 MobileDetectModule - Facilitates integration of a PHP MobileDetect class with some ZF2-based application. Has similar idea like the existing ZF2 Mobile-Detect module, but differs in initialization and provision routine of the actual Mobile_Detect class. Appropriate view helper and controller plugin also have different conceptions. Made by Nikola Posa Symfony Symfony2 Mobile Detect Bundle - The bundle for detecting mobile devices, manage mobile view and redirect to the mobile and tablet version. Made by Nikolay Ivlev. Silex Mobile Detect Service Provider - Silex service provider to interact with Mobile detect class methods. Made by Lhassan Baazzi. Laravel Agent a user agent class for Laravel, based on Mobile Detect with some additional functionality. Made by Jens Segers. BrowserDetect is a browser & mobile detection package, collects and wrap together the best user-agent identifiers for Laravel. Created by Varga Zsolt. Slim Framework Slim_Mobile_Detect implements Mobile_Detect lib for differents response's write on Slim Framework App ExpressionEngine EE2 Detect Mobile - Lightweight PHP plugin for EE2 that detects a mobile browser using the Mobile Detect class. Made by Gareth Davies. Yii Framework Yii Extension - Mobile detect plugin for Yii framework. Made by Alexey Salnikov. Yii2 Device Detect - Yii2 extension for Mobile-Detect library. Made by Alexander Nestorov CakePHP CakePHP MobileDetect - plugin component for CakePHP 2.x. Made by Gregory Gaskill FuelPHP Special Agent is a FuelPHP package which uses php-mobile-detect to determine whether a device is mobile or not. It overrides the Fuelphp Agent class its methods. Made by Robbie Bardjin. TYPO3 px_mobiledetect is an extension that helps to detect visitor's mobile device class (if that’s tablet or mobile device like smartphone). Made by Alexander Tretyak. PHP PageCache is a lightweight PHP library for full page cache, with built-in Mobile-Detect support. Made by Muhammed Mamedov. Statamic Statamic CMS Mobile Detect - plugin. Made by Sergei Filippov of Haiku Lab. Kohana Kohana Mobile Detect - an example of implementation of Mobile_Detect class with Kohana framework. Written by Luiz Alberto S. Ribeiro. Perl MobileDetect.pm - Perl module for Mobile Detect. Made by Sebastian Enger. python pymobiledetect - Mobile detect python package. Made by Bas van Oostveen. Ruby mobile_detect.rb - A Ruby gem using the JSON data exposed by the php project and implementing a basic subset of the API (as much as can be done by the exposed data). Made by Karthik T. GoMobileDetect GoMobileDetect - Go port of Mobile Detect class. Made by Shaked. LUA ua-lua is a small lib written in LUA providing device type detection. ua-lua is detecting mobile or tablet devices based on user-agent inside nginx daemon. Made by Frédéric Robinet. MemHT MemHT is a Free PHP CMS and Blog that permit the creation and the management online of websites with few and easy steps. Has the class included in the core. concrete5 concrete5 is a CMS that is free and open source. The library is included in the core. engine7 ExEngine 7 PHP Open Source Framework. The Mobile_Detect class is included in the engine. Zikula Zikula is a free and open-source Content Management Framework, which allows you to run impressive websites and build powerful online applications. The core uses Mobile-Detect to switch to a special Mobile theme, using jQueryMobile UserAgentInfo UserAgentInfo is a PHP class for parsing user agent strings (HTTP_USER_AGENT). Includes mobile checks, bot checks, browser types/versions and more. Based on browscap, Mobile_Detect and ua-parser. Created for high traffic websites and fast batch processing. Made by quentin389 Craft CMS LJ Mobile Detect is a simple implementation of Mobile Detect for Craft CMS. Made by Lewis Jenkins Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/serbanghita/Mobile-Detect"	"A lightweight PHP class for detecting mobile devices (including tablets)."	"true"
"Strings"	"Patchwork UTF-8"	"https://github.com/nicolas-grekas/Patchwork-UTF8"	"A portable library for working with UTF-8 strings."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"47"	"8"	"25"	"GitHub - nicolas-grekas/Patchwork-UTF8: Extensive, portable and performant handling of UTF-8 and grapheme clusters for PHP Skip to content Personal Open source Business Explore Start building Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 47 Fork 25 nicolas-grekas/Patchwork-UTF8 forked from tchwork/utf8 Code Pull requests 0 Pulse Graphs Extensive, portable and performant handling of UTF-8 and grapheme clusters for PHP 374 commits 3 branches 42 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.1 1.2 master Nothing to show v1.3.1 v1.3.0 v1.2.6 v1.2.5 v1.2.0 v1.2.0-beta v1.1.31 v1.1.28 v1.1.27 v1.1.26 v1.1.25 v1.1.24 v1.1.23 v1.1.22 v1.1.21 v1.1.20 v1.1.18 v1.1.17 v1.1.16 v1.1.15 v1.1.14 v1.1.13 v1.1.12 v1.1.11 v1.1.10 v1.1.9 v1.1.8 v1.1.7 v1.1.6 v1.1.5 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Pull request Compare This branch is even with tchwork:master. Latest commit 30ec645 May 18, 2016 nicolas-grekas Adjust grapheme_strpos behavior for PHP versions Permalink Failed to load latest commit information. src Adjust grapheme_strpos behavior for PHP versions May 18, 2016 tests Adjust grapheme_strpos behavior for PHP versions May 18, 2016 .gitattributes class/ has been moved to src/ Jun 25, 2015 .gitignore Bump to version 1.3.0 Dec 15, 2015 .travis.yml Bump to version 1.3.0 Dec 15, 2015 CHANGELOG.md Bump to version 1.3.1 May 18, 2016 LICENSE-APACHE Add license files Sep 23, 2015 LICENSE-GPL Add license files Sep 23, 2015 README.md add more mbstring shims Jan 12, 2015 appveyor.yml Bump to version 1.3.0 Dec 15, 2015 composer.json Bump to version 1.3.0 Dec 15, 2015 phpunit.xml.dist Bump to version 1.3.0 Dec 15, 2015 README.md Patchwork UTF-8 for PHP Patchwork UTF-8 gives PHP developpers extensive, portable and performant handling of UTF-8 and grapheme clusters. It provides both : a portability layer for mbstring, iconv, and intl Normalizer and grapheme_* functions, an UTF-8 grapheme clusters aware replica of native string functions. It can also serve as a documentation source referencing the practical problems that arise when handling UTF-8 in PHP: Unicode concepts, related algorithms, bugs in PHP core, workarounds, etc. Version 1.2 adds best-fit mappings for UTF-8 to Code Page approximations. It also adds Unicode filesystem access under Windows, using preferably wfio or a COM based fallback otherwise. Portability Unicode handling in PHP is best performed using a combo of mbstring, iconv, intl and pcre with the u flag enabled. But when an application is expected to run on many servers, you should be aware that these 4 extensions are not always enabled. Patchwork UTF-8 provides pure PHP implementations for 3 of those 4 extensions. pcre compiled with unicode support is required but is widely available. The following set of portability-fallbacks allows an application to run on a server even if one or more of those extensions are not enabled: utf8_encode, utf8_decode, mbstring: mb_check_encoding, mb_convert_case, mb_convert_encoding, mb_decode_mimeheader, mb_detect_encoding, mb_detect_order, mb_encode_mimeheader, mb_encoding_aliases, mb_get_info, mb_http_input, mb_http_output, mb_internal_encoding, mb_language, mb_list_encodings, mb_output_handler, mb_strlen, mb_strpos, mb_strrpos, mb_strtolower, mb_strtoupper, mb_stripos, mb_stristr, mb_strrchr, mb_strrichr, mb_strripos, mb_strstr, mb_strwidth, mb_substitute_character, mb_substr, mb_substr_count, iconv: iconv, iconv_mime_decode, iconv_mime_decode_headers, iconv_get_encoding, iconv_set_encoding, iconv_mime_encode, ob_iconv_handler, iconv_strlen, iconv_strpos, iconv_strrpos, iconv_substr, intl: Normalizer, grapheme_extract, grapheme_stripos, grapheme_stristr, grapheme_strlen, grapheme_strpos, grapheme_strripos, grapheme_strrpos, grapheme_strstr, grapheme_substr, normalizer_is_normalized, normalizer_normalize. Patchwork\Utf8 Grapheme clusters should always be considered when working with generic Unicode strings. The Patchwork\Utf8 class implements the quasi-complete set of native string functions that need UTF-8 grapheme clusters awareness. Function names, arguments and behavior carefully replicates native PHP string functions. Some more functions are also provided to help handling UTF-8 strings: filter(): normalizes to UTF-8 NFC, converting from CP-1252 when needed, isUtf8(): checks if a string contains well formed UTF-8 data, toAscii(): generic UTF-8 to ASCII transliteration, strtocasefold(): unicode transformation for caseless matching, strtonatfold(): generic case sensitive transformation for collation matching, strwidth(): computes the width of a string when printed on a terminal, wrapPath(): unicode filesystem access under Windows and other OSes. Mirrored string functions are: strlen, substr, strpos, stripos, strrpos, strripos, strstr, stristr, strrchr, strrichr, strtolower, strtoupper, wordwrap, chr, count_chars, ltrim, ord, rtrim, trim, str_ireplace, str_pad, str_shuffle, str_split, str_word_count, strcmp, strnatcmp, strcasecmp, strnatcasecmp, strncasecmp, strncmp, strcspn, strpbrk, strrev, strspn, strtr, substr_compare, substr_count, substr_replace, ucfirst, lcfirst, ucwords, number_format, utf8_encode, utf8_decode, json_decode, filter_input, filter_input_array. Notably missing (but hard to replicate) are printf-family functions. The implementation favors performance over full edge cases handling. It generally works on UTF-8 normalized strings and provides filters to get them. As the turkish locale requires special cares, a Patchwork\TurkishUtf8 class is provided for working with this locale. It clones all the features of Patchwork\Utf8 but knows about the turkish specifics. Usage The recommended way to install Patchwork UTF-8 is through composer. Just create a composer.json file and run the php composer.phar install command to install it: {     ""require"": {         ""patchwork/utf8"": ""~1.2""     } }  Then, early in your bootstrap sequence, you have to configure your environment: \Patchwork\Utf8\Bootup::initAll(); // Enables the portablity layer and configures PHP for UTF-8 \Patchwork\Utf8\Bootup::filterRequestUri(); // Redirects to an UTF-8 encoded URL if it's not already the case \Patchwork\Utf8\Bootup::filterRequestInputs(); // Normalizes HTTP inputs to UTF-8 NFC Run phpunit to see the code in action. Make sure that you are confident about using UTF-8 by reading Character Sets / Character Encoding Issues and Handling UTF-8 with PHP, or PHP et UTF-8 for french readers. You should also get familiar with the concept of Unicode Normalization and Grapheme Clusters. Do not blindly replace all use of PHP's string functions. Most of the time you will not need to, and you will be introducing a significant performance overhead to your application. Screen your input on the outer perimeter so that only well formed UTF-8 pass through. When dealing with badly formed UTF-8, you should not try to fix it (see Unicode Security Considerations). Instead, consider it as CP-1252 and use Patchwork\Utf8::utf8_encode() to get an UTF-8 string. Don't forget also to choose one unicode normalization form and stick to it. NFC is now the defacto standard. Patchwork\Utf8::filter() implements this behavior: it converts from CP1252 and to NFC. This library is orthogonal to mbstring.func_overload and will not work if the php.ini setting is enabled. Licensing Patchwork\Utf8 is free software; you can redistribute it and/or modify it under the terms of the (at your option): Apache License v2.0, or GNU General Public License v2.0. Unicode handling requires tedious work to be implemented and maintained on the long run. As such, contributions such as unit tests, bug reports, comments or patches licensed under both licenses are really welcomed. I hope many projects could adopt this code and together help solve the unicode subject for PHP. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nicolas-grekas/Patchwork-UTF8"	"A portable library for working with UTF-8 strings."	"true"
"Strings"	"Slugify"	"https://github.com/cocur/slugify"	"A library to convert strings to slugs."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"829"	"31"	"100"	"GitHub - cocur/slugify: Converts a string to a slug. Includes integrations for Symfony, Silex, Laravel, Zend Framework 2, Twig, Nette and Latte. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 829 Fork 100 cocur/slugify Code Issues 3 Pull requests 3 Pulse Graphs Converts a string to a slug. Includes integrations for Symfony, Silex, Laravel, Zend Framework 2, Twig, Nette and Latte. 317 commits 13 branches 29 releases 39 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.3 0.4 0.10 0.11 1.0 1.1 1.2 1.3 1.4 2.0 2.1 2.2 master Nothing to show v2.2 v2.1.1 v2.1 v2.0 v1.4.1 v1.4 v1.3 v1.2 v1.1 v1.0 v0.11 v0.10.3 v0.10.2 v0.10.1 v0.10 v0.9 v0.8 v0.7 v0.6 v0.5 v0.4.1 v0.4 v0.3 v0.2.3 v0.2.2 v0.2.1 v0.2 v0.1.1 v0.1 Nothing to show New pull request Latest commit 13c1d3b Jul 10, 2016 florianeckerstorfer Update README for v2.2 release Permalink Failed to load latest commit information. Resources/rules Add Azerbaijani transliterations (#102) May 12, 2016 bin Add rules for Hindi Nov 7, 2015 src Merge branch 'feature-default-separator' of git://github.com/z38/slug… Jul 10, 2016 tests Merge branch 'feature-default-separator' of git://github.com/z38/slug… Jul 10, 2016 .appveyor.yml Add AppVeyor config Oct 25, 2015 .editorconfig Updated README Jan 12, 2014 .gitignore Improve tests (by using humbug) Jun 4, 2015 .scrutinizer.yml Update several CI settings Oct 25, 2015 .travis.yml Fix: Attempt to cache dependencies installed with composer (#118) May 20, 2016 LICENSE Implemented initial version. Mar 23, 2012 README.md Update README for v2.2 release Jul 10, 2016 composer.json Enhancement: Provide SlugifyServiceProvider for league/container (#114) May 23, 2016 phpunit.xml.dist Clean up repository Oct 15, 2015 README.md cocur/slugify Converts a string into a slug. Developed by Florian Eckerstorfer in Vienna, Europe with the help of many great contributors. Features Removes all special characters from a string. Provides custom replacements for German, French, Spanish, Russian, Ukrainian, Polish, Czech, Latvian, Greek, Esperanto¹, Arabian, Vietnamese, Burmese, Danish, Turkish, Finnish, Swedish, and Georgian special characters. Instead of removing these characters, Slugify approximates them (e.g., ae replaces ä). No external dependencies. PSR-4 compatible. Compatible with PHP >= 5.5.9, PHP 7 and HHVM. Integrations for Symfony2, Silex, Laravel, Twig, Zend Framework 2, Nette Framework, Latte and Plum. ¹ Some Esperanto transliterations conflict with others. You need to enable the Esperanto ruleset to use these transliterations. Installation You can install Slugify through Composer: $ composer require cocur/slugify Usage The documentation you can find here has already been updated for the upcoming 2.0 release. If you are using the v1.4, the latest stable version, please use the corresponding documentation. You can find it here. Generate a slug: use Cocur\Slugify\Slugify;  $slugify = new Slugify(); echo $slugify->slugify('Hello World!'); // hello-world You can also change the separator used by Slugify: echo $slugify->slugify('Hello World!', '_'); // hello_world The library also contains Cocur\Slugify\SlugifyInterface. Use this interface whenever you need to type hint an instance of Slugify. To add additional transliteration rules you can use the addRule() method. $slugify->addRule('i', 'ey'); echo $slugify->slugify('Hi'); // hey Rulesets Many of the transliterations rules used in Slugify are specific to a language. These rules are therefore categorized using rulesets. Rules for the most popular are activated by default in a specific order. You can change which rulesets are activated and the order in which they are activated. The order is important when there are conflicting rules in different languages. For example, in German ä is transliterated with ae, in Turkish the correct transliteration is a. By default the German transliteration is used since German is used more often on the internet. If you want to use prefer the Turkish transliteration you have to possibilities. You can activate it after creating the constructor: $slugify = new Slugify(); $slugify->slugify('ä'); // -> ""ae"" $slugify->activateRuleset('turkish'); $slugify->slugify('ä'); // -> ""a"" An alternative way would be to pass the rulesets and their order to the constructor. $slugify = new Slugify(['rulesets' => ['default', 'turkish']]); $slugify->slugify('ä'); // -> ""a"" You can find a list of the available rulesets in Resources/rules. More options The constructor takes an options array, you have already seen the rulesets options above. You can also change the regular expression that is used to replace characters with the separator. $slugify = new Slugify(['regexp' => '/([^A-Za-z0-9]|-)+/']); (The regular expression used in the example above is the default one.) By default Slugify will convert the slug to lowercase. If you want to preserve the case of the string you can set the lowercase option to false. $slugify = new Slugify(['lowercase' => false]); $slugify->slugify('Hello World'); // -> ""Hello-World"" By default Slugify will use dashes as separators. If you want to use a different default separator, you can set the separator option. $slugify = new Slugify(['separator' => '_']); $slugify->slugify('Hello World'); // -> ""hello_world"" Contributing Feel free to ask for new rules for languages that is not already here. All you need to do is: Provide transliteration rules for your language, in any form, e.g. 'ї' => 'ji' Provide some examples of texts transliterated with this rules e.g. 'Україна' => 'Ukrajina' Further information API docs Integrations Symfony2 Slugify contains a Symfony2 bundle and service definition that allow you to use it as a service in your Symfony2 application. The code resides in the Cocur\Slugify\Bridge\Symfony namespace and you only need to add the bundle class to your AppKernel.php: # app/AppKernel.php  class AppKernel extends Kernel {     public function registerBundles()     {         $bundles = array(             // ...             new Cocur\Slugify\Bridge\Symfony\CocurSlugifyBundle(),         );         // ...     }      // ... } You can now use the cocur_slugify service everywhere in your application, for example, in your controller: $slug = $this->get('cocur_slugify')->slugify('Hello World!'); The bundle also provides an alias slugify for the cocur_slugify service: $slug = $this->get('slugify')->slugify('Hello World!'); You can set the following configuration settings in app/config.yml to adjust the slugify service: cocur_slugify:     lowercase: <boolean>     separator: <string>     regexp: <string>     rulesets: { } Twig If you use the Symfony2 framework with Twig you can use the Twig filter slugify in your templates after you have setup Symfony2 integrations (see above). {{ 'Hällo Wörld'|slugify }} If you use Twig outside of the Symfony2 framework you first need to add the extension to your environment: use Cocur\Slugify\Bridge\Twig\SlugifyExtension; use Cocur\Slugify\Slugify;  $twig = new Twig_Environment($loader); $twig->addExtension(new SlugifyExtension(Slugify::create())); To use the Twig filter with TwigBridge for Laravel, you'll need to add the Slugify extension using a closure: // laravel/app/config/packages/rcrowe/twigbridge/config.php  'extensions' => array(     //...     function () {         return new \Cocur\Slugify\Bridge\Twig\SlugifyExtension(\Cocur\Slugify\Slugify::create());     }, ), You can find more information about registering extensions in the Twig documentation. Silex Slugify also provides a service provider to integrate into Silex. $app->register(new Cocur\Slugify\Bridge\Silex\SlugifyServiceProvider()); You can use the slugify method in your controllers: $app->get('/', function () {     return $app['slugify']->slugify('welcome to the homepage'); }); And if you use Silex in combination with Twig you can also use it in your templates: {{ app.slugify.slugify('welcome to the homepage') }} Of course you can also add the Twig extension to your environment and use the slugify filter: $app['twig']->addExtension(new SlugifyExtension(Slugify::create())); Mustache.php We don't need an additional integration to use Slugify in Mustache.php. If you want to use Slugify in Mustache, just add a helper: use Cocur\Slugify\Slugify;  $mustache = new Mustache_Engine(array(     // ...     'helpers' => array('slugify' => function($string, $separator = null) {         return Slugify::create()->slugify($string, $separator);     }), )); Laravel Slugify also provides a service provider to integrate into Laravel (versions 4.1 and later). In your Laravel project's app/config/app.php file, add the service provider into the ""providers"" array: 'providers' => array(     ""Cocur\Slugify\Bridge\Laravel\SlugifyServiceProvider"", ) And add the facade into the ""aliases"" array: 'aliases' => array(     ""Slugify"" => ""Cocur\Slugify\Bridge\Laravel\SlugifyFacade"", ) You can then use the Slugify::slugify() method in your controllers: $url = Slugify::slugify('welcome to the homepage'); Zend Framework 2 Slugify can be easely used in Zend Framework 2 applications. Included bridge provides a service and a view helper already registered for you. Just enable the module in your configuration like this. return array(     //...      'modules' => array(         'Application',         'ZfcBase',         'Cocur\Slugify\Bridge\ZF2' // <- Add this line         //...     )      //... ); After that you can retrieve the Cocur\Slugify\Slugify service (or the slugify alias) and generate a slug. /** @var \Zend\ServiceManager\ServiceManager $sm */ $slugify = $sm->get('Cocur\Slugify\Slugify'); $slug = $slugify->slugify('Hällo Wörld'); $anotherSlug = $slugify->slugify('Hällo Wörld', '_'); In your view templates use the slugify helper to generate slugs. <?php echo $this->slugify('Hällo Wörld') ?> <?php echo $this->slugify('Hällo Wörld', '_') ?> The service (which is also used in the view helper) can be customized by defining this configuration key. return array(     'cocur_slugify' => array(         'reg_exp' => '/([^a-zA-Z0-9]|-)+/'     ) ); Nette Framework Slugify contains a Nette extension that allows you to use it as a service in your Nette application. You only need to register it in your config.neon: # app/config/config.neon  extensions:     slugify: Cocur\Slugify\Bridge\Nette\SlugifyExtension You can now use the Cocur\Slugify\SlugifyInterface service everywhere in your application, for example in your presenter: class MyPresenter extends \Nette\Application\UI\Presenter {     /** @var \Cocur\Slugify\SlugifyInterface @inject */     public $slugify;      public function renderDefault()     {         $this->template->hello = $this->slugify->slugify('Hällo Wörld');     } } Latte If you use the Nette Framework with it's native Latte templating engine, you can use the Latte filter slugify in your templates after you have setup Nette extension (see above). {$hello|slugify} If you use Latte outside of the Nette Framework you first need to add the filter to your engine: use Cocur\Slugify\Bridge\Latte\SlugifyHelper; use Cocur\Slugify\Slugify; use Latte;  $latte = new Latte\Engine(); $latte->addFilter('slugify', array(new SlugifyHelper(Slugify::create()), 'slugify')); Slim 3 Slugify does not need a specific bridge to work with Slim 3, just add the following configuration: $container['view'] = function ($c) {     $settings = $c->get('settings');     $view = new \Slim\Views\Twig($settings['view']['template_path'], $settings['view']['twig']);     $view->addExtension(new Slim\Views\TwigExtension($c->get('router'), $c->get('request')->getUri()));     $view->addExtension(new Cocur\Slugify\Bridge\Twig\SlugifyExtension(Cocur\Slugify\Slugify::create()));     return $view; }; In a template you can use it like this: <a href=""/blog/{{ post.title|slugify }}"">{{ post.title|raw }}</a></h5> League Slugify provides a service provider for use with league/container: use Cocur\Slugify; use League\Container;  /* @var Container\ContainerInterface $container */ $container->addServiceProvider(new Slugify\Bridge\League\SlugifyServiceProvider());  /* @var Slugify\Slugify $slugify */ $slugify = $container->get(Slugify\SlugifyInterface::class); You can configure it by sharing the required options: use Cocur\Slugify; use League\Container;  /* @var Container\ContainerInterface $container */ $container->share('config.slugify.options', [     'lowercase' => false,     'rulesets' => [         'default',         'german',     ], ]);  $container->addServiceProvider(new Slugify\Bridge\League\SlugifyServiceProvider());  /* @var Slugify\Slugify $slugify */ $slugify = $container->get(Slugify\SlugifyInterface::class); You can configure which rule provider to use by sharing it: use Cocur\Slugify; use League\Container;  /* @var Container\ContainerInterface $container */ $container->share(Slugify\RuleProvider\RuleProviderInterface::class, function () {     return new Slugify\RuleProvider\FileRuleProvider(__DIR__ . '/../../rules'); ]);  $container->addServiceProvider(new Slugify\Bridge\League\SlugifyServiceProvider());  /* @var Slugify\Slugify $slugify */ $slugify = $container->get(Slugify\SlugifyInterface::class); Change Log Version 2.2 (10 July 2016) #102 Add transliterations for Azerbaijani (by seferov) #109 Made integer values into strings (by JonathanMH) #114 Provide SlugifyServiceProvider for league/container (by localheinz) #120 Add compatibility with Silex 2 (by shamotj) Version 2.1.1 (8 April 2016) Do not activate Swedish rules by default (fixes broken v2.1 release) Version 2.1.0 (8 April 2016) #104 Add Symfony configuration (by estahn) #107 Fix Swedish rules Version 2.0.0 (24 February 2016) #78 Use multibyte-safe case convention (by Koc) #81 Move rules into JSON files (by florianeckerstorfer) #84 Add tests for very long strings containing umlauts (by florianeckerstorfer) #88 Add rules for Hindi (by florianeckerstorfer) #89 Add rules for Norwegian (by tsmes) #90 Replace bindShared with singleton in Laravel bridge (by sunspikes) #97 Set minimum PHP version to 5.5.9 (by florianeckerstorfer) #98 Add rules for Bulgarian (by RoumenDamianoff) Version 1.4.1 (11 February 2016) #90 Replace bindShared with singleton in Laravel bridge (by sunspikes) Version 1.4 (29 September 2015) #75 Remove a duplicate array entry (by irfanevrens) #76 Add support for Georgian (by TheGIBSON) #77 Fix Danish transliterations (by kafoso) Version 1.3 (2 September 2015) #70 Add missing superscript and subscript digits (by BlueM) #71 Improve Greek language support (by kostaspt) #72 Improve Silex integration (by CarsonF) #73 Improve Russian language support (by akost) Version 1.2 (2 July 2015) Add integration for Plum (by florianeckerstorfer) #64 Fix Nette integration (by lookyman) Add option to not convert slug to lowercase (by florianeckerstorfer and GDmac) Version 1.1 (18 March 2015) #54 Add support for Burmese characters (by lovetostrike) #58 Add Nette and Latte integration (by lookyman) #50 Fix transliteration for Vietnamese character Đ (by mac2000) Version 1.0 (26 November 2014) No new features or bugfixes, but it's about time to pump Slugify to v1.0. Version 0.11 (23 November 2014) #49 Add Zend Framework 2 integration (by acelaya) Version 0.10.3 (8 November 2014) #48 Add support for Vietnamese (by mac2000) Version 0.10.2 (18 October 2014) #44 Change visibility of properties to protected (by acelaya) #45 Configure regular expression used to replace characters (by acelaya) Fix type hinting (by florianeckerstorfer) Remove duplicate rule (by florianeckerstorfer) Version 0.10.1 (1 September 2014) #39 Add support for rulesets (by florianeckerstorfer) Version 0.10.0 (26 August 2014) #32 Added Laraval bridge (by cviebrock) #35 Fixed transliteration for Ď (by michalskop) Version 0.9 (29 May 2014) #28 Add Symfony2 service alias and make Twig extension private (by Kevin Bond) Version 0.8 (18 April 2014) #27 Add support for Arabic characters (by Davide Bellini) Added some missing characters Improved organisation of characters in Slugify class Version 0.7 (4 April 2014) This version introduces optional integrations into Symfony2, Silex and Twig. You can still use the library in any other framework. I decided to include these bridges because there exist integrations from other developers, but they use outdated versions of cocur/slugify. Including these small bridge classes in the library makes maintaining them a lot easier for me. #23 Added Symfony2 service #24 Added Twig extension #25 Added Silex service provider Version 0.6 (2 April 2014) #22 Added support for Esperanto characters (by Michel Petit) Version 0.5 (28 March 2014) #21 Added support for Greek characters (by Michel Petit) #20 Fixed rule for cyrillic letter D (by Marchenko Alexandr) Add missing $separator parameter to SlugifyInterface Version 0.4.1 (9 March 2014) #19 Adds soft sign rule (by Marchenko Alexandr) Version 0.4 (17 January 2014) Nearly completely rewritten code, removes iconv support because the underlying library is broken. The code is now better and faster. Many thanks to Marchenko Alexandr. Version 0.3 (12 January 2014) #11 PSR-4 compatible (by mac2000) #13 Added editorconfig (by mac2000) #14 Return empty slug when input is empty and removed unused parameter (by mac2000) Authors Florian Eckerstorfer (Twitter) Ivo Bathke Marchenko Alexandr And many great contributors Slugify is a project of Cocur. You can contact us on Twitter: @cocurco Support If you need support you can ask on Twitter (well, only if your question is short) or you can join our chat on Gitter. In case you want to support the development of Slugify you can help us with providing additional transliterations or inform us if a transliteration is wrong. We would highly appreciate it if you can send us directly a Pull Request on Github. If you have never contributed to a project on Github we are happy to help you. Just ask on Twitter or directly join our Gitter. You always can help me (Florian, the original developer and maintainer) out by sending me an Euro or two. License The MIT License (MIT) Copyright (c) 2012-2014 Florian Eckerstorfer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cocur/slugify"	"A library to convert strings to slugs."	"true"
"Strings"	"SQL Formatter"	"https://github.com/jdorn/sql-formatter/"	"A library for formatting SQL statements."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"480"	"29"	"98"	"GitHub - jdorn/sql-formatter: A lightweight php class for formatting sql statements. Handles automatic indentation and syntax highlighting. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 29 Star 480 Fork 98 jdorn/sql-formatter Code Issues 14 Pull requests 8 Pulse Graphs A lightweight php class for formatting sql statements. Handles automatic indentation and syntax highlighting. http://jdorn.github.com/sql-formatter/ 118 commits 3 branches 6 releases Fetching contributors HTML 78.3% PHP 21.7% HTML PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages javascript-port master Nothing to show v1.2.17 v1.2.16 v1.2.9 v1.2.0 v1.1.0 v1.0.1 Nothing to show New pull request Latest commit 7ef9b85 Aug 30, 2015 jdorn Merge pull request #79 from stof/patch-3 … Switch Travis to the stable HHVM version Permalink Failed to load latest commit information. bin update paths in non-cli help Jun 6, 2014 examples Formatting and naming changes in order to merge @adityagoyal pull req… Jul 11, 2013 lib Add support for named parameters (e.g. "":name""), treats them the same… Mar 30, 2015 tests Add proper formatting for square bracket quoted strings (SQL Server s… Apr 16, 2014 .gitignore Splitting special reserved words into ""top level reserved"" and ""newli… Mar 11, 2013 .travis.yml Switch Travis to the stable HHVM version May 20, 2015 LICENSE.txt Changed license to MIT to simplify inclusion in other libraries. Apr 26, 2013 README.md Added new compress method. Fixes #41 Jun 12, 2013 composer.json Add sql-formatter executable by reusing cli.php Jun 27, 2013 composer.lock Splitting special reserved words into ""top level reserved"" and ""newli… Mar 11, 2013 phpunit.xml.dist Fixed bug when formatting ""SELECT#comment"" without a space before ""#"". Mar 3, 2013 README.md SqlFormatter A lightweight php class for formatting sql statements. It can automatically indent and add line breaks in addition to syntax highlighting. History I found myself having to debug auto-generated SQL statements all the time and wanted some way to easily output formatted HTML without having to include a huge library or copy and paste into online formatters. I was originally planning to extract the formatting code from PhpMyAdmin, but that was 10,000+ lines of code and used global variables. I saw that other people had the same problem and used Stack Overflow user losif's answer as a starting point. http://stackoverflow.com/a/3924147 Usage The SqlFormatter class has a static method 'format' which takes a SQL string as input and returns a formatted HTML block inside a pre tag. Sample usage: <?php require_once('SqlFormatter.php');  $query = ""SELECT count(*),`Column1`,`Testing`, `Testing Three` FROM `Table1`  WHERE Column1 = 'testing' AND ( (`Column2` = `Column3` OR Column4 >= NOW()) )  GROUP BY Column1 ORDER BY Column3 DESC LIMIT 5,10"";  echo SqlFormatter::format($query); Output: Formatting Only If you don't want syntax highlighting and only want the indentations and line breaks, pass in false as the second parameter. This is useful for outputting to error logs or other non-html formats. <?php echo SqlFormatter::format($query, false); Output: Syntax Highlighting Only There is a separate method 'highlight' that preserves all original whitespace and just adds syntax highlighting. This is useful for sql that is already well formatted and just needs to be a little easier to read. <?php echo SqlFormatter::highlight($query); Output: Compress Query The compress method removes all comments and compresses whitespace. This is useful for outputting queries that can be copy pasted to the command line easily. -- This is a comment     SELECT     /* This is another comment     On more than one line */     Id #This is one final comment     as temp, DateCreated as Created FROM MyTable;  echo SqlFormatter::compress($query) Output: SELECT Id as temp, DateCreated as Created FROM MyTable;  Remove Comments If you want to keep all original whitespace formatting and just remove comments, you can use the removeComments method instead of compress. -- This is a comment     SELECT     /* This is another comment     On more than one line */     Id #This is one final comment     as temp, DateCreated as Created FROM MyTable;  <?php echo SqlFormatter::removeComments($query); Output:      SELECT      Id      as temp, DateCreated as Created FROM MyTable;  Split SQL String into Queries Another feature, which is unrelated to formatting, is the ability to break up a SQL string into multiple queries. For Example: DROP TABLE IF EXISTS MyTable; CREATE TABLE MyTable ( id int ); INSERT INTO MyTable (id)     VALUES     (1),(2),(3),(4); SELECT * FROM MyTable; <?php $queries = SqlFormatter::splitQuery($sql); Result: DROP TABLE IF EXISTS MyTable; CREATE TABLE MyTable ( id int ); INSERT INTO MyTable (id) VALUES (1),(2),(3),(4); SELECT * FROM MyTable; Why Not Regular Expressions? Why not just use explode(';', $sql) or a regular expression? The following example sql and others like it are impossible to split correctly using regular expressions, no matter how complex. SELECT "";""; SELECT "";\""; a;""; SELECT "";     abc""; SELECT a,b #comment; FROM test;  SqlFormatter breaks the string into tokens instead of using regular expressions and will correctly produce: SELECT "";""; SELECT "";\""; a;""; SELECT ""; abc""; SELECT a,b #comment; FROM test; Please note, the splitQuery method will still fail in the following cases: The DELIMITER command can be used to change the delimiter from the default ';' to something else. The CREATE PROCEDURE command has a ';' in the middle of it The USE command is not terminated with a ';' Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jdorn/sql-formatter/"	"A library for formatting SQL statements."	"true"
"Strings"	"Stringy"	"https://github.com/danielstjules/Stringy"	"A string manipulation library with multibyte support."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1510"	"59"	"102"	"GitHub - danielstjules/Stringy: A PHP string manipulation library with multibyte support Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 59 Star 1,510 Fork 102 danielstjules/Stringy Code Issues 4 Pull requests 2 Pulse Graphs A PHP string manipulation library with multibyte support 346 commits 4 branches 23 releases 29 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x disable-mbstring gh-pages master Nothing to show 2.3.2 2.3.1 2.3.0 2.2.0 2.1.0 2.0.0 1.10.0 1.9.0 1.8.1 1.8.0 1.7.0 1.6.0 1.5.2 1.5.1 1.5.0 1.4.0 1.3.0 1.2.2 1.2.1 1.2.0 1.1.0 1.0.0 1.0.0-rc.1 Nothing to show New pull request Latest commit 0607751 Jun 14, 2016 danielstjules committed on GitHub Merge pull request #139 from tomeh/documentation-fixes … Updated documentation. Permalink Failed to load latest commit information. src Updated documentation. Jun 14, 2016 tests Add capture group test to regexReplaceProvider Mar 19, 2016 .editorconfig Add a .editorconfig file Dec 6, 2015 .gitattributes Do not export .editorconfig Jan 8, 2016 .gitignore Updated pad methods Mar 19, 2014 .travis.yml Avoid duplicate jobs Feb 10, 2016 CHANGELOG.md 2.3.2 May 2, 2016 LICENSE.txt Start work on library Jul 10, 2013 README.md Work on full support with mbstring module May 1, 2016 composer.json Support older verisons of composer Mar 19, 2016 phpunit.xml.dist Let phpunit load autoload.php Jan 8, 2016 README.md A PHP string manipulation library with multibyte support. Compatible with PHP 5.3+, PHP 7, and HHVM. Refer to the 1.x branch for older documentation. s('string')->toTitleCase()->ensureRight('y') == 'Stringy' Why? Installation OO and Chaining Implemented Interfaces PHP 5.6 Creation StaticStringy Class methods create Instance methods append at between camelize chars collapseWhitespace contains containsAll containsAny countSubstr dasherize delimit endsWith ensureLeft ensureRight first getEncoding hasLowerCase hasUpperCase htmlDecode htmlEncode humanize indexOf indexOfLast insert isAlpha isAlphanumeric isBase64 isBlank isHexadecimal isJson isLowerCase isSerialized isUpperCase last length lines longestCommonPrefix longestCommonSuffix longestCommonSubstring lowerCaseFirst pad padBoth padLeft padRight prepend regexReplace removeLeft removeRight repeat replace reverse safeTruncate shuffle slugify startsWith slice split substr surround swapCase tidy titleize toAscii toBoolean toLowerCase toSpaces toTabs toTitleCase toUpperCase trim trimLeft trimRight truncate underscored upperCamelize upperCaseFirst Extensions Tests License Why? In part due to a lack of multibyte support (including UTF-8) across many of PHP's standard string functions. But also to offer an OO wrapper around the mbstring module's multibyte-compatible functions. Stringy handles some quirks, provides additional functionality, and hopefully makes strings a little easier to work with! // Standard library strtoupper('fòôbàř');       // 'FòôBàř' strlen('fòôbàř');           // 10  // mbstring mb_strtoupper('fòôbàř');    // 'FÒÔBÀŘ' mb_strlen('fòôbàř');        // '6'  // Stringy s('fòôbàř')->toUpperCase(); // 'FÒÔBÀŘ' s('fòôbàř')->length();      // '6' Installation If you're using Composer to manage dependencies, you can include the following in your composer.json file: ""require"": {     ""danielstjules/stringy"": ""~2.3"" } Then, after running composer update or php composer.phar update, you can load the class using Composer's autoloading: require 'vendor/autoload.php'; Otherwise, you can simply require the file directly: require_once 'path/to/Stringy/src/Stringy.php'; And in either case, I'd suggest using an alias. use Stringy\Stringy as S; Please note that Stringy relies on the mbstring module for its underlying multibyte support. If the module is not found, Stringy will use symfony/polyfill-mbstring. ex-mbstring is a non-default, but very common module. For example, with debian and ubuntu, it's included in libapache2-mod-php5, php5-cli, and php5-fpm. For OSX users, it's a default for any version of PHP installed with homebrew. If compiling PHP from scratch, it can be included with the --enable-mbstring flag. OO and Chaining The library offers OO method chaining, as seen below: use Stringy\Stringy as S; echo S::create('fòô bàř')->collapseWhitespace()->swapCase(); // 'FÒÔ BÀŘ' Stringy\Stringy has a __toString() method, which returns the current string when the object is used in a string context, ie: (string) S::create('foo') // 'foo' Implemented Interfaces Stringy\Stringy implements the IteratorAggregate interface, meaning that foreach can be used with an instance of the class: $stringy = S::create('fòôbàř'); foreach ($stringy as $char) {     echo $char; } // 'fòôbàř' It implements the Countable interface, enabling the use of count() to retrieve the number of characters in the string: $stringy = S::create('fòô'); count($stringy);  // 3 Furthermore, the ArrayAccess interface has been implemented. As a result, isset() can be used to check if a character at a specific index exists. And since Stringy\Stringy is immutable, any call to offsetSet or offsetUnset will throw an exception. offsetGet has been implemented, however, and accepts both positive and negative indexes. Invalid indexes result in an OutOfBoundsException. $stringy = S::create('bàř'); echo $stringy[2];     // 'ř' echo $stringy[-2];    // 'à' isset($stringy[-4]);  // false  $stringy[3];          // OutOfBoundsException $stringy[2] = 'a';    // Exception PHP 5.6 Creation As of PHP 5.6, use function is available for importing functions. Stringy exposes a namespaced function, Stringy\create, which emits the same behaviour as Stringy\Stringy::create(). If running PHP 5.6, or another runtime that supports the use function syntax, you can take advantage of an even simpler API as seen below: use function Stringy\create as s;  // Instead of: S::create('fòô bàř') s('fòô bàř')->collapseWhitespace()->swapCase(); StaticStringy All methods listed under ""Instance methods"" are available as part of a static wrapper. For StaticStringy methods, the optional encoding is expected to be the last argument. The return value is not cast, and may thus be of type Stringy, integer, boolean, etc. use Stringy\StaticStringy as S;  // Translates to Stringy::create('fòôbàř')->slice(0, 3); // Returns a Stringy object with the string ""fòô"" S::slice('fòôbàř', 0, 3); Class methods create(mixed $str [, $encoding ]) Creates a Stringy object and assigns both str and encoding properties the supplied values. $str is cast to a string prior to assignment, and if $encoding is not specified, it defaults to mb_internal_encoding(). It then returns the initialized object. Throws an InvalidArgumentException if the first argument is an array or object without a __toString method. $stringy = S::create('fòôbàř'); // 'fòôbàř' Instance Methods Stringy objects are immutable. All examples below make use of PHP 5.6 function importing, and PHP 5.4 short array syntax. They also assume the encoding returned by mb_internal_encoding() is UTF-8. For further details, see the documentation for the create method above, as well as the notes on PHP 5.6 creation. append(string $string) Returns a new string with $string appended. s('fòô')->append('bàř'); // 'fòôbàř' at(int $index) Returns the character at $index, with indexes starting at 0. s('fòôbàř')->at(3); // 'b' between(string $start, string $end [, int $offset]) Returns the substring between $start and $end, if found, or an empty string. An optional offset may be supplied from which to begin the search for the start string. s('{foo} and {bar}')->between('{', '}'); // 'foo' camelize() Returns a camelCase version of the string. Trims surrounding spaces, capitalizes letters following digits, spaces, dashes and underscores, and removes spaces, dashes, as well as underscores. s('Camel-Case')->camelize(); // 'camelCase' chars() Returns an array consisting of the characters in the string. s('fòôbàř')->chars(); // ['f', 'ò', 'ô', 'b', 'à', 'ř'] collapseWhitespace() Trims the string and replaces consecutive whitespace characters with a single space. This includes tabs and newline characters, as well as multibyte whitespace such as the thin space and ideographic space. s(' Ο συγγραφέας ')->collapseWhitespace(); // 'Ο συγγραφέας' contains(string $needle [, boolean $caseSensitive = true ]) Returns true if the string contains $needle, false otherwise. By default, the comparison is case-sensitive, but can be made insensitive by setting $caseSensitive to false. s('Ο συγγραφέας είπε')->contains('συγγραφέας'); // true containsAll(array $needles [, boolean $caseSensitive = true ]) Returns true if the string contains all $needles, false otherwise. By default the comparison is case-sensitive, but can be made insensitive by setting $caseSensitive to false. s('foo & bar')->containsAll(['foo', 'bar']); // true containsAny(array $needles [, boolean $caseSensitive = true ]) Returns true if the string contains any $needles, false otherwise. By default the comparison is case-sensitive, but can be made insensitive by setting $caseSensitive to false. s('str contains foo')->containsAny(['foo', 'bar']); // true countSubstr(string $substring [, boolean $caseSensitive = true ]) Returns the number of occurrences of $substring in the given string. By default, the comparison is case-sensitive, but can be made insensitive by setting $caseSensitive to false. s('Ο συγγραφέας είπε')->countSubstr('α'); // 2 dasherize() Returns a lowercase and trimmed string separated by dashes. Dashes are inserted before uppercase characters (with the exception of the first character of the string), and in place of spaces as well as underscores. s('fooBar')->dasherize(); // 'foo-bar' delimit(int $delimiter) Returns a lowercase and trimmed string separated by the given delimiter. Delimiters are inserted before uppercase characters (with the exception of the first character of the string), and in place of spaces, dashes, and underscores. Alpha delimiters are not converted to lowercase. s('fooBar')->delimit('::'); // 'foo::bar' endsWith(string $substring [, boolean $caseSensitive = true ]) Returns true if the string ends with $substring, false otherwise. By default, the comparison is case-sensitive, but can be made insensitive by setting $caseSensitive to false. s('fòôbàř')->endsWith('bàř', true); // true ensureLeft(string $substring) Ensures that the string begins with $substring. If it doesn't, it's prepended. s('foobar')->ensureLeft('http://'); // 'http://foobar' ensureRight(string $substring) Ensures that the string ends with $substring. If it doesn't, it's appended. s('foobar')->ensureRight('.com'); // 'foobar.com' first(int $n) Returns the first $n characters of the string. s('fòôbàř')->first(3); // 'fòô' getEncoding() Returns the encoding used by the Stringy object. s('fòôbàř')->getEncoding(); // 'UTF-8' hasLowerCase() Returns true if the string contains a lower case char, false otherwise. s('fòôbàř')->hasLowerCase(); // true hasUpperCase() Returns true if the string contains an upper case char, false otherwise. s('fòôbàř')->hasUpperCase(); // false htmlDecode() Convert all HTML entities to their applicable characters. An alias of html_entity_decode. For a list of flags, refer to http://php.net/manual/en/function.html-entity-decode.php s('&amp;')->htmlDecode(); // '&' htmlEncode() Convert all applicable characters to HTML entities. An alias of htmlentities. Refer to http://php.net/manual/en/function.htmlentities.php for a list of flags. s('&')->htmlEncode(); // '&amp;' humanize() Capitalizes the first word of the string, replaces underscores with spaces, and strips '_id'. s('author_id')->humanize(); // 'Author' indexOf(string $needle [, $offset = 0 ]); Returns the index of the first occurrence of $needle in the string, and false if not found. Accepts an optional offset from which to begin the search. A negative index searches from the end s('string')->indexOf('ing'); // 3 indexOfLast(string $needle [, $offset = 0 ]); Returns the index of the last occurrence of $needle in the string, and false if not found. Accepts an optional offset from which to begin the search. Offsets may be negative to count from the last character in the string. s('foobarfoo')->indexOfLast('foo'); // 10 insert(int $index, string $substring) Inserts $substring into the string at the $index provided. s('fòôbř')->insert('à', 4); // 'fòôbàř' isAlpha() Returns true if the string contains only alphabetic chars, false otherwise. s('丹尼爾')->isAlpha(); // true isAlphanumeric() Returns true if the string contains only alphabetic and numeric chars, false otherwise. s('دانيال1')->isAlphanumeric(); // true isBase64() Returns true if the string is base64 encoded, false otherwise. s('Zm9vYmFy')->isBase64(); // true isBlank() Returns true if the string contains only whitespace chars, false otherwise. s(""\n\t \v\f"")->isBlank(); // true isHexadecimal() Returns true if the string contains only hexadecimal chars, false otherwise. s('A102F')->isHexadecimal(); // true isJson() Returns true if the string is JSON, false otherwise. Unlike json_decode in PHP 5.x, this method is consistent with PHP 7 and other JSON parsers, in that an empty string is not considered valid JSON. s('{""foo"":""bar""}')->isJson(); // true isLowerCase() Returns true if the string contains only lower case chars, false otherwise. s('fòôbàř')->isLowerCase(); // true isSerialized() Returns true if the string is serialized, false otherwise. s('a:1:{s:3:""foo"";s:3:""bar"";}')->isSerialized(); // true isUpperCase() Returns true if the string contains only upper case chars, false otherwise. s('FÒÔBÀŘ')->isUpperCase(); // true last(int $n) Returns the last $n characters of the string. s('fòôbàř')->last(3); // 'bàř' length() Returns the length of the string. An alias for PHP's mb_strlen() function. s('fòôbàř')->length(); // 6 lines() Splits on newlines and carriage returns, returning an array of Stringy objects corresponding to the lines in the string. s(""fòô\r\nbàř\n"")->lines(); // ['fòô', 'bàř', ''] longestCommonPrefix(string $otherStr) Returns the longest common prefix between the string and $otherStr. s('foobar')->longestCommonPrefix('foobaz'); // 'fooba' longestCommonSuffix(string $otherStr) Returns the longest common suffix between the string and $otherStr. s('fòôbàř')->longestCommonSuffix('fòrbàř'); // 'bàř' longestCommonSubstring(string $otherStr) Returns the longest common substring between the string and $otherStr. In the case of ties, it returns that which occurs first. s('foobar')->longestCommonSubstring('boofar'); // 'oo' lowerCaseFirst() Converts the first character of the supplied string to lower case. s('Σ foo')->lowerCaseFirst(); // 'σ foo' pad(int $length [, string $padStr = ' ' [, string $padType = 'right' ]]) Pads the string to a given length with $padStr. If length is less than or equal to the length of the string, no padding takes places. The default string used for padding is a space, and the default type (one of 'left', 'right', 'both') is 'right'. Throws an InvalidArgumentException if $padType isn't one of those 3 values. s('fòôbàř')->pad(9, '-/', 'left'); // '-/-fòôbàř' padBoth(int $length [, string $padStr = ' ' ]) Returns a new string of a given length such that both sides of the string string are padded. Alias for pad() with a $padType of 'both'. s('foo bar')->padBoth(9, ' '); // ' foo bar ' padLeft(int $length [, string $padStr = ' ' ]) Returns a new string of a given length such that the beginning of the string is padded. Alias for pad() with a $padType of 'left'. s('foo bar')->padLeft(9, ' '); // ' foo bar' padRight(int $length [, string $padStr = ' ' ]) Returns a new string of a given length such that the end of the string is padded. Alias for pad() with a $padType of 'right'. s('foo bar')->padRight(10, '_*'); // 'foo bar_*_' prepend(string $string) Returns a new string starting with $string. s('bàř')->prepend('fòô'); // 'fòôbàř' regexReplace(string $pattern, string $replacement [, string $options = 'msr']) Replaces all occurrences of $pattern in $str by $replacement. An alias for mb_ereg_replace(). Note that the 'i' option with multibyte patterns in mb_ereg_replace() requires PHP 5.6+ for correct results. This is due to a lack of support in the bundled version of Oniguruma in PHP < 5.6, and current versions of HHVM (3.8 and below). s('fòô ')->regexReplace('f[òô]+\s', 'bàř'); // 'bàř' s('fò')->regexReplace('(ò)', '\\1ô'); // 'fòô' removeLeft(string $substring) Returns a new string with the prefix $substring removed, if present. s('fòôbàř')->removeLeft('fòô'); // 'bàř' removeRight(string $substring) Returns a new string with the suffix $substring removed, if present. s('fòôbàř')->removeRight('bàř'); // 'fòô' repeat(int $multiplier) Returns a repeated string given a multiplier. An alias for str_repeat. s('α')->repeat(3); // 'ααα' replace(string $search, string $replacement) Replaces all occurrences of $search in $str by $replacement. s('fòô bàř fòô bàř')->replace('fòô ', ''); // 'bàř bàř' reverse() Returns a reversed string. A multibyte version of strrev(). s('fòôbàř')->reverse(); // 'řàbôòf' safeTruncate(int $length [, string $substring = '' ]) Truncates the string to a given length, while ensuring that it does not split words. If $substring is provided, and truncating occurs, the string is further truncated so that the substring may be appended without exceeding the desired length. s('What are your plans today?')->safeTruncate(22, '...'); // 'What are your plans...' shuffle() A multibyte str_shuffle() function. It returns a string with its characters in random order. s('fòôbàř')->shuffle(); // 'àôřbòf' slugify([, string $replacement = '-' ]) Converts the string into an URL slug. This includes replacing non-ASCII characters with their closest ASCII equivalents, removing remaining non-ASCII and non-alphanumeric characters, and replacing whitespace with $replacement. The replacement defaults to a single dash, and the string is also converted to lowercase. s('Using strings like fòô bàř')->slugify(); // 'using-strings-like-foo-bar' startsWith(string $substring [, boolean $caseSensitive = true ]) Returns true if the string begins with $substring, false otherwise. By default, the comparison is case-sensitive, but can be made insensitive by setting $caseSensitive to false. s('FÒÔbàřbaz')->startsWith('fòôbàř', false); // true slice(int $start [, int $end ]) Returns the substring beginning at $start, and up to, but not including the index specified by $end. If $end is omitted, the function extracts the remaining string. If $end is negative, it is computed from the end of the string. s('fòôbàř')->slice(3, -1); // 'bà' split(string $pattern [, int $limit ]) Splits the string with the provided regular expression, returning an array of Stringy objects. An optional integer $limit will truncate the results. s('foo,bar,baz')->split(',', 2); // ['foo', 'bar'] substr(int $start [, int $length ]) Returns the substring beginning at $start with the specified $length. It differs from the mb_substr() function in that providing a $length of null will return the rest of the string, rather than an empty string. s('fòôbàř')->substr(2, 3); // 'ôbà' surround(string $substring) Surrounds a string with the given substring. s(' ͜ ')->surround('ʘ'); // 'ʘ ͜ ʘ' swapCase() Returns a case swapped version of the string. s('Ντανιλ')->swapCase(); // 'νΤΑΝΙΛ' tidy() Returns a string with smart quotes, ellipsis characters, and dashes from Windows-1252 (commonly used in Word documents) replaced by their ASCII equivalents. s('“I see…”')->tidy(); // '""I see...""' titleize([, array $ignore]) Returns a trimmed string with the first letter of each word capitalized. Also accepts an array, $ignore, allowing you to list words not to be capitalized. $ignore = ['at', 'by', 'for', 'in', 'of', 'on', 'out', 'to', 'the']; s('i like to watch television')->titleize($ignore); // 'I Like to Watch Television' toAscii() Returns an ASCII version of the string. A set of non-ASCII characters are replaced with their closest ASCII counterparts, and the rest are removed unless instructed otherwise. s('fòôbàř')->toAscii(); // 'foobar' toBoolean() Returns a boolean representation of the given logical string value. For example, 'true', '1', 'on' and 'yes' will return true. 'false', '0', 'off', and 'no' will return false. In all instances, case is ignored. For other numeric strings, their sign will determine the return value. In addition, blank strings consisting of only whitespace will return false. For all other strings, the return value is a result of a boolean cast. s('OFF')->toBoolean(); // false toLowerCase() Converts all characters in the string to lowercase. An alias for PHP's mb_strtolower(). s('FÒÔBÀŘ')->toLowerCase(); // 'fòôbàř' toSpaces([, tabLength = 4 ]) Converts each tab in the string to some number of spaces, as defined by $tabLength. By default, each tab is converted to 4 consecutive spaces. s(' String speech = ""Hi""')->toSpaces(); // ' String speech = ""Hi""' toTabs([, tabLength = 4 ]) Converts each occurrence of some consecutive number of spaces, as defined by $tabLength, to a tab. By default, each 4 consecutive spaces are converted to a tab. s(' fòô bàř')->toTabs(); // ' fòô bàř' toTitleCase() Converts the first character of each word in the string to uppercase. s('fòô bàř')->toTitleCase(); // 'Fòô Bàř' toUpperCase() Converts all characters in the string to uppercase. An alias for PHP's mb_strtoupper(). s('fòôbàř')->toUpperCase(); // 'FÒÔBÀŘ' trim([, string $chars]) Returns a string with whitespace removed from the start and end of the string. Supports the removal of unicode whitespace. Accepts an optional string of characters to strip instead of the defaults. s(' fòôbàř ')->trim(); // 'fòôbàř' trimLeft([, string $chars]) Returns a string with whitespace removed from the start of the string. Supports the removal of unicode whitespace. Accepts an optional string of characters to strip instead of the defaults. s(' fòôbàř ')->trimLeft(); // 'fòôbàř ' trimRight([, string $chars]) Returns a string with whitespace removed from the end of the string. Supports the removal of unicode whitespace. Accepts an optional string of characters to strip instead of the defaults. s(' fòôbàř ')->trimRight(); // ' fòôbàř' truncate(int $length [, string $substring = '' ]) Truncates the string to a given length. If $substring is provided, and truncating occurs, the string is further truncated so that the substring may be appended without exceeding the desired length. s('What are your plans today?')->truncate(19, '...'); // 'What are your pl...' underscored() Returns a lowercase and trimmed string separated by underscores. Underscores are inserted before uppercase characters (with the exception of the first character of the string), and in place of spaces as well as dashes. s('TestUCase')->underscored(); // 'test_u_case' upperCamelize() Returns an UpperCamelCase version of the supplied string. It trims surrounding spaces, capitalizes letters following digits, spaces, dashes and underscores, and removes spaces, dashes, underscores. s('Upper Camel-Case')->upperCamelize(); // 'UpperCamelCase' upperCaseFirst() Converts the first character of the supplied string to upper case. s('σ foo')->upperCaseFirst(); // 'Σ foo' Extensions The following is a list of libraries that extend Stringy: SliceableStringy: Python-like string slices in PHP SubStringy: Advanced substring methods Tests From the project directory, tests can be ran using phpunit License Released under the MIT License - see LICENSE.txt for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/danielstjules/Stringy"	"A string manipulation library with multibyte support."	"true"
"Strings"	"Text"	"https://github.com/kzykhys/Text"	"A text manipulation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"37"	"3"	"5"	"GitHub - kzykhys/Text: Text - Simple 1 Class Text Manipulation Library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 37 Fork 5 kzykhys/Text Code Issues 1 Pull requests 0 Pulse Graphs Text - Simple 1 Class Text Manipulation Library 6 commits 1 branch 2 releases 2 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 88f836c Aug 25, 2013 kzykhys Merge pull request #4 from semalead/static … create() function for static usage and README update Permalink Failed to load latest commit information. src/KzykHys/Text Added create() function for static usage with passing tests and READM… Aug 25, 2013 test/KzykHys/Text Added create() function for static usage with passing tests and READM… Aug 25, 2013 .gitignore initial commit Aug 7, 2013 .travis.yml initial commit Aug 7, 2013 README.md Added create() function for static usage with passing tests and READM… Aug 25, 2013 composer.json initial commit Aug 7, 2013 phpunit.xml.dist initial commit Aug 7, 2013 README.md Text - Simple 1 Class Text Manipulation Library Do you remember PHP's string functions? If not, just wrap you text with Text! It will save a minute on your coding. Text is extracted from kzykhys/Ciconia. this is used for markdown processing. Installation Modify your composer.json and run php composer.phar update {     ""require"": {         ""kzykhys/text"":""~1.0.0""     } } Requirements PHP5.4+ Get Started Text acts like a string <?php  use KzykHys\Text\Text;  $text = new Text('Lorem Ipsum'); echo $text;  // Lorem Ipsum  Text can also be called statically <?php  use KzykHys\Text\Text;  $text = Text::create('Lorem Ipsum'); echo $text;  // Lorem Ipsum  Manipulation methods are chainable: $text = new Text('foo'); $text     ->append('bar')     // foobar     ->prepend('baz')    // bazfoobar     ->wrap('-')         // -bazfoobar-     ->upper()           // -BAZFOOBAR-     ->lower()           // -bazfoobar-     ->trim('-')         // bazfoobar     ->rtrim('r')        // bazfooba     ->ltrim('b')        // azfooba ; Special note for replace() $text = new Text('FooBarBaz'); $text->replace('/Foo(Bar)(Baz)/', function (Text $whole, Text $bar, Text $baz) {     return $bar->upper()->append($baz->lower()); }); echo $text;  // BARbaz If the second argument is callable, callback takes at least one parameter. The whole match being first, and matched subpatterns. All parameters are Text instance. API Manipulation (Chainable) Method Description create($text) Create a new Text instance. append($text) Append the string. prepend($text) Prepend the string. wrap($start, [$end]) Surround text with given string. lower() Make a string lowercase. upper() Make a string uppercase. trim([$charList]) Strip whitespace (or other characters) from the beginning and end of a string. rtrim([$charList]) Strip whitespace (or other characters) from the end of a string. ltrim([$charList]) Strip whitespace (or other characters) from the beginning of a string. escapeHtml([$option]) Convert special characters to HTML entities. replace($pattern, $replacement) Perform a regular expression search and replace. If $replacement is the callable, a callback that will be called and passed an array of matched elements in the subject string. replaceString($search, $replace) Replace all occurrences of the search string with the replacement string. indent([$spaces]) Add one level of line-leading spaces. outdent([$spaces]) Remove one level of line-leading tabs or spaces. detab([$spaces]) Convert tabs to spaces. eachLine($callback) Apply a user function to every line of the string. Test Method Description isEmpty() Determine whether a variable is empty isNumeric() Finds whether a variable is a number or a numeric string match($pattern, [&$matches]) Perform a regular expression match Miscellaneous Method Description split($pattern, [$flags]) Split string by a regular expression lines([$pattern]) Split string by a line break chars() Convert a string to an array length() Gets the length of a string countLines() Gets the number of lines indexOf($needle, [$offset]) Find the position of the first occurrence of a substring in a string Filesystem Method Description save($path) Write a string to a file License The MIT License Author Kazuyuki Hayashi (@kzykhys) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kzykhys/Text"	"A text manipulation library."	"true"
"Strings"	"UA Parser"	"https://github.com/tobie/ua-parser/tree/master/php"	"A library for parsing user agent strings."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1695"	"134"	"497"	"ua-parser/php at master · tobie/ua-parser · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 134 Star 1,695 Fork 497 tobie/ua-parser Code Issues 45 Pull requests 21 Pulse Graphs Branch: master Switch branches/tags Branches Tags chrome_ios haskell-docs js-is_tablet js-refactoring js-simplify-device kindle master py-fix-ref regexes-remove-underscore revert-466-brand-model-progress yaml-rekonq Nothing to show v0.3.5 v0.3.4 v0.3.2 v0.3.1 v0.3.0 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.1 v0.1.0 semver php-3.3 java-1.3.0 java-1.2.2 Nothing to show Create new file Find file History ua-parser/php/ Latest commit 8bc22f7 Nov 7, 2014 tobie Revert ""Current State Brand-Model Parsing"" Permalink .. Failed to load latest commit information. bin Fixing composer installation (#328, #330) Jan 21, 2014 resources Smaller cleanups Dec 8, 2013 src/UAParser Revert ""Current State Brand-Model Parsing"" Nov 7, 2014 tests/UAParser/Tests Revert ""Current State Brand-Model Parsing"" Nov 7, 2014 CHANGELOG Revert ""Current State Brand-Model Parsing"" Nov 7, 2014 LICENSE removed the version number from the license (too much of a pain to up… May 30, 2012 README.md uaOriginal does not exist, update with originalUserAgent Oct 28, 2014 phpunit.xml.dist Converting tests to PHPUnit Nov 9, 2013 README.md ua-parser PHP Library This is the PHP library for the ua-parser project. v3.3 Changes v3.3 of the PHP library is no longer compatible with the previous version. It now supports composer, requires PHP 5.3 and has a slightly different API (see below). UAParser class is now UAParser\Parser Typed result objects: Parser::parse() returns UAParser\Result\Client, Client::$os is a UAParser\Result\OperatingSystem and Client::$device is a UAParser\Result\Device toString() and toVersion() are now methods Properties now use camelCase, not underscore_case. v2.0 Changes v2.0 of the PHP library, released in December 2012, marked a huge transition from the previous pseudo-port of ua-parser to a true port that matches up well with the other libraries in the ua-parser repo. The primary changes: the UAParser class is now dynamic properties are nested (e.g. $result->family is now $result->ua->family) a user agent string is now required when using parse(). the auto-magical ""use the server provided UA"" is no longer supported. uaParse(), osParse(), and deviceParse() are public and can be used to just return those select bits for a given user agent string. the is* boolean properties (e.g. isMobile) have been dropped. they now exist as part of the ua-classifier project. Please refer to the CHANGELOG for the full list of changes. Demo You can test the PHP library with your browser. Usage Straightforward: require_once 'vendor/autoload.php'; use UAParser\Parser;  $ua = ""Mozilla/5.0 (Macintosh; Intel Ma..."";  $parser = Parser::create(); $result = $parser->parse($ua);  print $result->ua->family;            // Safari print $result->ua->major;             // 6 print $result->ua->minor;             // 0 print $result->ua->patch;             // 2 print $result->ua->toString();        // Safari 6.0.2 print $result->ua->toVersion();       // 6.0.2  print $result->os->family;            // Mac OS X print $result->os->major;             // 10 print $result->os->minor;             // 7 print $result->os->patch;             // 5 print $result->os->patchMinor;        // [null] print $result->os->toString();        // Mac OS X 10.7.5 print $result->os->toVersion();       // 10.7.5  print $result->device->family;        // Other  print $result->toString();            // Safari 6.0.2/Mac OS X 10.7.5 print $result->originalUserAgent;            // Mozilla/5.0 (Macintosh; Intel Ma... Using Your Own Custom regexes.php File You can use your own regexes.php file if you've customized the official file. I strongly encourage you to push back any changes you may have so others can benefit. That said, to use your own do the following: require_once 'vendor/autoload.php'; use UAParser\Parser;  $parser = Parser::create(""path/to/custom/regexes.php""); Using ua-parser PHP Library from the Command Line A command line utility is now included with the PHP library. The following commands are supported: Get Usage Info Provides simple usage information: php bin/uaparser.php  Update the regexes.php File Fetches an updated YAML file for ua-parser and overwrites the current JSON file. You can use the following as part of a cron job that runs nightly. php bin/uaparser.php ua-parser:update [--no-backup]  By default creates a backup file. Use --no-backup to turn that feature off. Convert an Existing regexes.yaml File to regexes.php With the change to v2.0 you may have an existing and customized YAML file for ua-parser. Use the following to convert it to JSON. php bin/uaparser.php ua-parser:convert [file]  Grab Just the Latest regexes.yaml File From the Repository If you need to add a new UA it's easier to edit the original YAML and then convert it to JSON. php bin/uaparser.php ua-parser:fetch [file]  Fetches an updated YAML file. Warning: This method overwrites any existing regexes.yaml file. Parse a Single User Agent String Parses a user agent string and dumps the results as a list. php bin/uaparser.php ua-parser:parse ""your user agent string""  Parse a Webserver Log File Parses the supplied log file or log directory to test ua-parser. Saves the UA to a file when the UA or OS family aren't recognized or when the UA is listed as a generic smartphone or as a generic feature phone. php bin/uaparser.php ua-parser:logfile [-f /path/to/logfile] [-d /path/to/logdir] [--include ""*.gz""] [--exclude ""*.gz""] errors.log  Multiple --include and --exclude parameters are allowed. Credits Thanks to the original ua-parser team for making the YAML file available for others to build upon. Also, many thanks to the following major contributors to the PHP library: Bryan Shelton Michael Bond @rjd22 Timo Tijhof Marcus Bointon Ryan Parman Pravin Dahal Licensing The library is licensed under the MIT license The user agents data from the ua-parser project is licensed under the Apache license The initial list of generic feature phones & smartphones came from Mobile Web OSP under the MIT license The initial list of spiders was taken from Yiibu's profile project under the MIT license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tobie/ua-parser/tree/master/php"	"A library for parsing user agent strings."	"true"
"Strings"	"URLify"	"https://github.com/jbroadway/urlify"	"A PHP port of Django's URLify.js."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"479"	"35"	"60"	"GitHub - jbroadway/urlify: PHP port of URLify.js from the Django project. Transliterates non-ascii characters for use in URLs. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 479 Fork 60 jbroadway/urlify Code Issues 1 Pull requests 0 Pulse Graphs PHP port of URLify.js from the Django project. Transliterates non-ascii characters for use in URLs. 85 commits 1 branch 8 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.0.7-stable 1.0.6-stable 1.0.5-stable 1.0.4-stable 1.0.3-stable 1.0.2-stable 1.0.1-stable 1.0.0-stable Nothing to show New pull request Latest commit 3a89d2e Dec 7, 2015 jbroadway Merge pull request #38 from mkraemer/missing-character … Add œ and Œ characters to character replacement map Permalink Failed to load latest commit information. scripts Printing newline only when not dealing with piped I/O Jul 27, 2015 tests Add test for use_remove_list parameter Nov 16, 2015 .gitignore More nyummy goodness. Jun 1, 2012 .travis.yml travis: PHP 7.0 nightly added + few improvements Mar 10, 2015 INSTALL More nyummy goodness. Jun 1, 2012 LICENSE License updated to match original in Django Mar 9, 2015 README.md Add bulgarian language to the library description May 29, 2015 URLify.php Add œ and Œ characters to character replacement map Dec 7, 2015 composer.json Update composer.json Mar 9, 2015 phpunit.xml Updated phpunit to be able to run from project root Feb 4, 2013 README.md URLify for PHP A PHP port of URLify.js from the Django project. Handles symbols from Latin languages as well as Arabic, Azerbaijani, Czech, German, Greek, Latvian, Lithuanian, Polish, Romanian, Bulgarian, Russian, Serbian, Turkish, Ukrainian and Vietnamese. Symbols it cannot transliterate it will simply omit. Usage: To generate slugs for URLs: <?php  echo URLify::filter (' J\'étudie le français '); // ""jetudie-le-francais""  echo URLify::filter ('Lo siento, no hablo español.'); // ""lo-siento-no-hablo-espanol""  ?> To generate slugs for file names: <?php  echo URLify::filter ('фото.jpg', 60, """", true); // ""foto.jpg""  ?> To simply transliterate characters: <?php  echo URLify::downcode ('J\'étudie le français'); // ""J'etudie le francais""  echo URLify::downcode ('Lo siento, no hablo español.'); // ""Lo siento, no hablo espanol.""  /* Or use transliterate() alias: */  echo URLify::transliterate ('Lo siento, no hablo español.'); // ""Lo siento, no hablo espanol.""  ?> To extend the character list: <?php  URLify::add_chars (array (     '¿' => '?', '®' => '(r)', '¼' => '1/4',     '½' => '1/2', '¾' => '3/4', '¶' => 'P' ));  echo URLify::downcode ('¿ ® ¼ ¼ ¾ ¶'); // ""? (r) 1/2 1/2 3/4 P""  ?> To extend the list of words to remove: <?php  URLify::remove_words (array ('remove', 'these', 'too'));  ?> To prioritize a certain language map: <?php  echo URLify::filter (' Ägypten und Österreich besitzen wie üblich ein Übermaß an ähnlich öligen Attachés ',60,""de""); // ""aegypten-und-oesterreich-besitzen-wie-ueblich-ein-uebermass-aehnlich-oeligen-attaches""  echo URLify::filter ('Cağaloğlu, çalıştığı, müjde, lazım, mahkûm',60,""tr""); // ""cagaloglu-calistigi-mujde-lazim-mahkum""  ?> Please note that the ""ü"" is transliterated to ""ue"" in the first case, whereas it results in a simple ""u"" in the latter. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jbroadway/urlify"	"A PHP port of Django's URLify.js."	"true"
"Strings"	"UUID"	"https://github.com/ramsey/uuid"	"A library for generating UUIDs."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1695"	"71"	"144"	"GitHub - ramsey/uuid: Formerly rhumsaa/uuid. A PHP 5.4+ library for generating RFC 4122 version 1, 3, 4, and 5 universally unique identifiers (UUID). Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 71 Star 1,695 Fork 144 ramsey/uuid Code Issues 10 Pull requests 5 Wiki Pulse Graphs Formerly rhumsaa/uuid. A PHP 5.4+ library for generating RFC 4122 version 1, 3, 4, and 5 universally unique identifiers (UUID). https://benramsey.com/projects/ramsey-uuid/ 549 commits 4 branches 36 releases 30 contributors PHP 97.3% Shell 2.7% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.x 4.x datetime-nanoseconds master Nothing to show 3.4.1 3.4.0 3.3.0 3.2.0 3.1.0 3.0.1 3.0.0 3.0.0-beta1 3.0.0-alpha3 3.0.0-alpha2 3.0.0-alpha1 2.9.0 2.8.4 2.8.3 2.8.2 2.8.1 2.8.0 2.7.4 2.7.3 2.7.2 2.7.1 2.7.0 2.6.1 2.6.0 2.5.0 2.4.0 2.3.0 2.2.0 2.1.2 2.1.1 2.1.0 2.0.0 1.1.2 1.1.1 1.1.0 1.0.0 Nothing to show New pull request Latest commit be0a40f Jun 25, 2016 ramsey Merge branch 'MLoureiro-107_cache_system_node_provider' Permalink Failed to load latest commit information. src Merge branch '107_cache_system_node_provider' of https://github.com/M… Jun 24, 2016 tests Follow similar pattern to that shown in other tests for system node Jun 25, 2016 util Add Dockerfile for HHVM image with PECL UUID installed Feb 14, 2016 .gitattributes Modify Travis CI builds to run tests on multiple CPU architectures Oct 7, 2015 .gitignore Modify Travis CI builds to run tests on multiple CPU architectures Oct 8, 2015 .scrutinizer.yml Add scrutinizer code checks Oct 7, 2015 .travis.yml Update Travis builds to use Travis-installed PHP instead of Docker Jun 24, 2016 CHANGELOG.md Updating CHANGELOG notes for version 3.4.1 Apr 23, 2016 CODE_OF_CONDUCT.md Add code of conduct to the 2.8 branch for inclusion in new 2.x releases Mar 17, 2016 CONTRIBUTING.md Updated CONTRIBUTING to include ""tests"" when running phpcs Apr 23, 2016 LICENSE Bump copyright year Feb 13, 2016 README.md Update 2.8 reference in README to 2.9 Mar 22, 2016 composer.json Limit PHPUnit use to <5.4 to avoid deprecation warnings in master Jun 24, 2016 phpunit.xml.dist include unprocessed files in coverage Mar 23, 2016 README.md ramsey/uuid NOTICE: Formerly known as rhumsaa/uuid, The package and namespace names have changed to ramsey/uuid and Ramsey\Uuid, respectively. ramsey/uuid is a PHP 5.4+ library for generating and working with RFC 4122 version 1, 3, 4, and 5 universally unique identifiers (UUID). This project adheres to a Contributor Code of Conduct. By participating in this project and its community, you are expected to uphold this code. About From Wikipedia: The intent of UUIDs is to enable distributed systems to uniquely identify information without significant central coordination. In this context the word unique should be taken to mean ""practically unique"" rather than ""guaranteed unique"". Since the identifiers have a finite size, it is possible for two differing items to share the same identifier. The identifier size and generation process need to be selected so as to make this sufficiently improbable in practice. Anyone can create a UUID and use it to identify something with reasonable confidence that the same identifier will never be unintentionally created by anyone to identify something else. Information labeled with UUIDs can therefore be later combined into a single database without needing to resolve identifier (ID) conflicts. Much inspiration for this library came from the Java and Python UUID libraries. Installation The preferred method of installation is via Packagist and Composer. Run the following command to install the package and add it as a requirement to your project's composer.json: composer require ramsey/uuid Upgrading from 2.x to 3.x While we have made significant internal changes to the library, we have made every effort to ensure a seamless upgrade path from the 2.x series of this library to 3.x. One major breaking change is the transition from the Rhumsaa root namespace to Ramsey. In most cases, all you will need is to change the namespace to Ramsey in your code, and everything will ""just work."" Here are full details on the breaking changes to the public API of this library: All namespace references of Rhumsaa have changed to Ramsey. Simply change the namespace to Ramsey in your code and everything should work. The console application has moved to ramsey/uuid-console. If using the console functionality, use Composer to require ramsey/uuid-console. The Doctrine field type mapping has moved to ramsey/uuid-doctrine. If using the Doctrine functionality, use Composer to require ramsey/uuid-doctrine. What to do if you see a ""rhumsaa/uuid is abandoned"" message When installing your project's dependencies using Composer, you might see the following message: Package rhumsaa/uuid is abandoned, you should avoid using it. Use ramsey/uuid instead.  Don't panic. Simply execute the following commands with Composer: composer remove rhumsaa/uuid composer require ramsey/uuid=^2.9 After doing so, you will have the latest ramsey/uuid package in the 2.x series, and there will be no need to modify any code; the namespace in the 2.x series is still Rhumsaa. Requirements Some methods in this library have requirements due to integer size restrictions on 32-bit and 64-bit builds of PHP. A 64-bit build of PHP and the Moontoast\Math library are recommended. However, this library is designed to work on 32-bit builds of PHP without Moontoast\Math, with some degraded functionality. Please check the API documentation for more information. If a particular requirement is not present, then an UnsatisfiedDependencyException is thrown, allowing one to catch a bad call in an environment where the call is not supported and gracefully degrade. API documentation The latest class API documentation is available online. This project uses ApiGen to generate this documentation. To generate the documentation on your own, install dev dependencies and run the following command from the root of the project: ./vendor/bin/apigen generate --source=""src"" --destination=""build/apidocs"" --title=""ramsey/uuid"" --template-theme=""bootstrap"" --deprecated --todo  This will generate documentation in the build/apidocs/ folder. Examples See the cookbook on the wiki for more examples and approaches to specific use-cases. <?php require 'vendor/autoload.php';  use Ramsey\Uuid\Uuid; use Ramsey\Uuid\Exception\UnsatisfiedDependencyException;  try {      // Generate a version 1 (time-based) UUID object     $uuid1 = Uuid::uuid1();     echo $uuid1->toString() . ""\n""; // i.e. e4eaaaf2-d142-11e1-b3e4-080027620cdd      // Generate a version 3 (name-based and hashed with MD5) UUID object     $uuid3 = Uuid::uuid3(Uuid::NAMESPACE_DNS, 'php.net');     echo $uuid3->toString() . ""\n""; // i.e. 11a38b9a-b3da-360f-9353-a5a725514269      // Generate a version 4 (random) UUID object     $uuid4 = Uuid::uuid4();     echo $uuid4->toString() . ""\n""; // i.e. 25769c6c-d34d-4bfe-ba98-e0ee856f3e7a      // Generate a version 5 (name-based and hashed with SHA1) UUID object     $uuid5 = Uuid::uuid5(Uuid::NAMESPACE_DNS, 'php.net');     echo $uuid5->toString() . ""\n""; // i.e. c4a760a8-dbcf-5254-a0d9-6a4474bd1b62  } catch (UnsatisfiedDependencyException $e) {      // Some dependency was not met. Either the method cannot be called on a     // 32-bit system, or it can, but it relies on Moontoast\Math to be present.     echo 'Caught exception: ' . $e->getMessage() . ""\n"";  } Contributing Contributions are welcome! Please read CONTRIBUTING for details. Copyright and license The ramsey/uuid library is copyright © Ben Ramsey and licensed for use under the MIT License (MIT). Please see LICENSE for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ramsey/uuid"	"A library for generating UUIDs."	"true"
"Numbers"	"ByteUnits"	"https://github.com/gabrielelana/byte-units"	"A library to parse, format and convert byte units in binary and metric systems."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"36"	"3"	"3"	"GitHub - gabrielelana/byte-units: Library to parse, format and convert byte units Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 36 Fork 3 gabrielelana/byte-units Code Issues 2 Pull requests 0 Pulse Graphs Library to parse, format and convert byte units 64 commits 1 branch 4 releases Fetching contributors PHP 88.7% VimL 11.3% PHP VimL Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.3.0 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit e05a032 Jul 11, 2016 gabrielelana committed on GitHub Merge pull request #8 from sam-g/master … Add bcmath PHP extension requirement Permalink Failed to load latest commit information. src/ByteUnits tests .gitignore .travis.yml .vimrc Add local vimrc Jun 11, 2014 LICENSE README.md composer.json composer.lock phpunit.xml README.md Byte Units This is a utility component for parsing, formatting, converting and manipulating byte units in various formats. Usage <?php  // Bytes manipulation and formatting with explici precision echo ByteUnits\parse('1.42MB')->add('256B')->format('kB/0000'); // outputs 1420.2560kB  // Bytes comparison ByteUnits\parse('1.2GB')->isMoreThan('256MB'); // it's true Parsing Right now two unit systems are supported: The Metric system that is based on a 1000-byte kilobyte and uses standard SI suffixes (kB, MB, GB, TB, PB, …) The Binary system that is based on a 1024-byte kilobyte and uses binary suffixes (KiB, MiB, GiB, TiB, PiB, …) <?php  // Explicit system selection echo ByteUnits\Metric::bytes(1000)->format();  // outputs 1.00kB echo ByteUnits\Binary::bytes(1024)->format();  // outputs 1.00KiB  // Implicit selection through parsing ByteUnits\parse('1.00kB'); // it's an instance of ByteUnits\Metric  // You can also constraint parsing to a specific system ByteUnits\Metric::parse('1.00kB'); // it's an instance of ByteUnits\Metric ByteUnits\Binary::parse('1.00kB'); // throws a ByteUnits\ParseException  // For each systems there are static constructors, one for each supported unit echo ByteUnits\Metric::bytes(1000)->format();  // outputs 1.00kB echo ByteUnits\Metric::kilobytes(1)->format();  // outputs 1.00kB echo ByteUnits\Metric::megabytes(1)->format();  // outputs 1.00MB  // You can switch between systems echo ByteUnits\Binary::bytes(1024)->asMetric()->format(); // outputs 1.02kB Formatting In both systems you can format bytes with an appropriate format string <?php  // By defaults it tries to format bytes in the most readable unit echo ByteUnits\bytes(1322000)->format(); // outputs 1.32MB echo ByteUnits\bytes(132200)->format(); // outputs 132.20kB  // You can force the unit using the related suffix echo ByteUnits\bytes(1322000)->format('MB'); // outputs 1.32MB echo ByteUnits\bytes(1322000)->format('kB'); // outputs 1322.00kB echo ByteUnits\bytes(1322000)->format('B'); // outputs 1322000B  // You can choose the precision aka the number of digits after the `.` echo ByteUnits\bytes(1322123)->format(6); // outputs 1.322123MB echo ByteUnits\bytes(1322123)->format('/6'); // outputs 1.322123MB echo ByteUnits\bytes(1322123)->format('MB/6'); // outputs 1.322123MB echo ByteUnits\bytes(1322123)->format('MB/000000'); // outputs 1.322123MB echo ByteUnits\bytes(1322123)->format('GB/9'); // outputs 0.001322123GB  // You can specify a separator between then number and the units echo ByteUnits\bytes(1322000)->format('MB', ' '); // outputs 1.32 MB echo ByteUnits\bytes(1322000)->format('MB', '/'); // outputs 1.32/MB Compare There are a few methods that could be used to compare bytes in various units and systems <?php  ByteUnits\Metric::kilobytes(1)->isLessThan(ByteUnits\Binary::kilobytes(1)); // it's true ByteUnits\Metric::kilobytes(1)->isEqualTo(ByteUnits\Binary::bytes(1000)); // it's true ByteUnits\Metric::kilobytes(1.3)->isGreaterThan(ByteUnits\Binary::kilobytes(1)); // it's true Manipulate Also you can add or remove bytes in various units and systems <?php  echo ByteUnits\Binary::kilobytes(1)->remove(ByteUnits\Metric::kilobytes(1))->format(); // outputs 24B  // Arithmetic operations always preserves the receiving unit system echo ByteUnits\Binary::kilobytes(1)->add(ByteUnits\Metric::kilobytes(1))->format(); // outputs 1.98KiB  // You cannot have negative bytes ByteUnits\Metric::kilobytes(1)->remove(ByteUnits\Binary::kilobytes(1))->format(); // throws ByteUnits\NegativeBytesException Auto Boxing Most of the methods can take integers or strings and box them to appropriate byte units  ByteUnits\Metric::kilobytes(1)->isLessThan('1KiB'); // it's true echo ByteUnits\Binary::kilobytes(1)->remove('1KiB')->format(); // outputs 24B Installation via Composer Install Composer to your project root: curl -sS https://getcomposer.org/installer | php Add a composer.json file to your project: {   ""require"": {     ""gabrielelana/byte-units"": ""0.2.*""   } } Run the Composer installer: php composer.phar install Self-Promotion If you like this project, then consider to: Star the repository on GitHub Follow me on Twitter GitHub Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gabrielelana/byte-units"	"A library to parse, format and convert byte units in binary and metric systems."	"true"
"Numbers"	"LibPhoneNumber for PHP"	"https://github.com/giggsey/libphonenumber-for-php"	"A PHP implementation of Google's phone number handling library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1446"	"82"	"145"	"GitHub - giggsey/libphonenumber-for-php: PHP version of Google's phone number handling library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 82 Star 1,446 Fork 145 giggsey/libphonenumber-for-php Code Issues 2 Pull requests 1 Pulse Graphs PHP version of Google's phone number handling library http://giggsey.com/libphonenumber/ 416 commits 2 branches 49 releases 25 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags locale master Nothing to show 7.4.5 7.4.4 7.4.3 7.4.2 7.4.1 7.3.2 7.3.1 7.3.0 7.2.8 7.2.7 7.2.6 7.2.5 7.2.4 7.2.3 7.2.2 7.2.1 7.1.1 7.1.0 7.0.11 7.0.10 7.0.9 7.0.8 7.0.7 7.0.6 7.0.5 7.0.4 7.0.3 7.0.2 7.0.1 7.0 6.3.1 6.3 6.2.2 6.2.1 6.2.0.1 6.2 6.1.1 6.1 6.0 5.9.4 5.9.3 5.9.2 5.9.1 5.9 5.8.8 5.8.4 5.8 5.7.2 5.7 Nothing to show New pull request Latest commit a138ade Jul 14, 2016 giggsey Upstream changes from Google for v7.4.5 … Metadata changes:  - Updated phone metadata for region code(s): CN, HN, IN, KW, LV, TC  - Updated short number metadata for region code(s): AE, BR, GB, ZA  - New geocoding data for country calling code(s): 93 (fa), 992 (en), 1 (en)  - Updated geocoding data for country calling code(s):    91 (en), 98 (en, fa), 371 (en), 504 (en)  - Updated carrier data for country calling code(s): 91 (en) Permalink Failed to load latest commit information. Tests Applied fixes from StyleCI Jun 26, 2016 build Applied fixes from StyleCI Jun 26, 2016 docs Add Phone Number Timezone Mapper documenation Apr 11, 2016 src/libphonenumber Upstream changes from Google for v7.4.5 Jul 14, 2016 .gitignore Reduce entries in .gitignore Aug 21, 2014 .travis.yml Patch Polish data to fix PHP7 compatibility Nov 12, 2015 LICENSE Update documentation for 7.0 release Nov 3, 2014 METADATA-VERSION.txt Upstream changes from Google for v7.4.5 Jul 14, 2016 README.md Add supported PHP versions to README Jun 3, 2016 build.xml Fail building metadata if a patch fails to apply May 19, 2016 composer.json Add PHP requirement to composer.json Jun 2, 2016 libphonenumber-for-php.spec Added the spec file for RPM build Apr 16, 2014 phpunit.xml.dist Update documentation for 7.0 release Nov 3, 2014 README.md libphonenumber for PHP What is it? A PHP library for parsing, formatting, storing and validating international phone numbers. This library is based on Google's libphonenumber. Highlights of functionality Parsing/formatting/validating phone numbers for all countries/regions of the world. getNumberType - gets the type of the number based on the number itself; able to distinguish Fixed-line, Mobile, Toll-free, Premium Rate, Shared Cost, VoIP and Personal Numbers (whenever feasible). isNumberMatch - gets a confidence level on whether two numbers could be the same. getExampleNumber/getExampleNumberByType - provides valid example numbers for all countries/regions, with the option of specifying which type of example phone number is needed. isValidNumber - full validation of a phone number for a region using length and prefix information. PhoneNumberOfflineGeocoder - provides geographical information related to a phone number. PhoneNumberToTimeZonesMapper - provides timezone information related to a phone number. PhoneNumberToCarrierMapper - provides carrier information related to a phone number. Installation PHP versions 5.3 up to PHP 7 are currently supported. HHVM is not yet supported. The PECL mbstring extension is required. It is recommended to use composer to install the library. $ composer require giggsey/libphonenumber-for-php You can also use any other PSR-0 compliant autoloader. Versioning This library will try to follow the same version numbers as Google. There could be additional releases where needed to fix critical issues that can not wait until the next release from Google. This does mean that this project will not follow Semantic Versioning, but instead Google's version policy. As a result, jumps in major versions may not actually contain any backwards incompatible changes. Please read the release notes for such releases. Online Demo An online demo is available, and the source can be found at giggsey/libphonenumber-example. Quick Examples Let's say you have a string representing a phone number from Switzerland. This is how you parse/normalize it into a PhoneNumber object: $swissNumberStr = ""044 668 18 00""; $phoneUtil = \libphonenumber\PhoneNumberUtil::getInstance(); try {     $swissNumberProto = $phoneUtil->parse($swissNumberStr, ""CH"");     var_dump($swissNumberProto); } catch (\libphonenumber\NumberParseException $e) {     var_dump($e); } At this point, swissNumberProto contains: class libphonenumber\PhoneNumber#9 (7) {  private $countryCode =>   int(41)  private $nationalNumber =>   double(446681800)  private $extension =>   NULL  private $italianLeadingZero =>   NULL  private $rawInput =>   NULL  private $countryCodeSource =>   NULL  private $preferredDomesticCarrierCode =>   NULL }  Now let us validate whether the number is valid: $isValid = $phoneUtil->isValidNumber($swissNumberProto); var_dump($isValid); // true There are a few formats supported by the formatting method, as illustrated below: // Produces ""+41446681800"" echo $phoneUtil->format($swissNumberProto, \libphonenumber\PhoneNumberFormat::E164);  // Produces ""044 668 18 00"" echo $phoneUtil->format($swissNumberProto, \libphonenumber\PhoneNumberFormat::NATIONAL);  // Produces ""+41 44 668 18 00"" echo $phoneUtil->format($swissNumberProto, \libphonenumber\PhoneNumberFormat::INTERNATIONAL); You could also choose to format the number in the way it is dialled from another country: // Produces ""011 41 44 668 1800"", the number when it is dialled in the United States. echo $phoneUtil->formatOutOfCountryCallingNumber($swissNumberProto, ""US"");  // Produces ""00 41 44 668 18 00"", the number when it is dialled in Great Britain. echo $phoneUtil->formatOutOfCountryCallingNumber($swissNumberProto, ""GB""); Geocoder The PECL intl extension is required for the geocoder to be used. $phoneUtil = \libphonenumber\PhoneNumberUtil::getInstance();  $swissNumberProto = $phoneUtil->parse(""044 668 18 00"", ""CH""); $usNumberProto = $phoneUtil->parse(""+1 650 253 0000"", ""US""); $gbNumberProto = $phoneUtil->parse(""0161 496 0000"", ""GB"");  $geocoder = \libphonenumber\geocoding\PhoneNumberOfflineGeocoder::getInstance();  // Outputs ""Zurich"" echo $geocoder->getDescriptionForNumber($swissNumberProto, ""en_US"");  // Outputs ""Zürich"" echo $geocoder->getDescriptionForNumber($swissNumberProto, ""de_DE"");  // Outputs ""Zurigo"" echo $geocoder->getDescriptionForNumber($swissNumberProto, ""it_IT"");   // Outputs ""Mountain View, CA"" echo $geocoder->getDescriptionForNumber($usNumberProto, ""en_US"");  // Outputs ""Mountain View, CA"" echo $geocoder->getDescriptionForNumber($usNumberProto, ""de_DE"");  // Outputs ""미국"" (Korean for United States) echo $geocoder->getDescriptionForNumber($usNumberProto, ""ko-KR"");  // Outputs ""Manchester"" echo $geocoder->getDescriptionForNumber($gbNumberProto, ""en_GB"");  // Outputs ""영국"" (Korean for United Kingdom) echo $geocoder->getDescriptionForNumber($gbNumberProto, ""ko-KR""); ShortNumberInfo $shortNumberInfo = \libphonenumber\ShortNumberInfo::getInstance();  // true var_dump($shortNumberInfo->isEmergencyNumber(""999"", ""GB""));  // true var_dump($shortNumberInfo->connectsToEmergencyNumber(""999"", ""GB""));  // false var_dump($shortNumberInfo->connectsToEmergencyNumber(""911"", ""GB""));  // true var_dump($shortNumberInfo->isEmergencyNumber(""911"", ""US""));  // true var_dump($shortNumberInfo->connectsToEmergencyNumber(""911"", ""US""));  // false var_dump($shortNumberInfo->isEmergencyNumber(""911123"", ""US""));  // true var_dump($shortNumberInfo->connectsToEmergencyNumber(""911123"", ""US"")); Mapping Phone Numbers to carrier The PECL intl extension is required for the carrier mapper to be used.  $phoneUtil = \libphonenumber\PhoneNumberUtil::getInstance(); $swissNumberProto = $phoneUtil->parse(""798765432"", ""CH"");  $carrierMapper = \libphonenumber\PhoneNumberToCarrierMapper::getInstance(); // Outputs ""Swisscom"" echo $carrierMapper->getNameForNumber($swissNumberProto, ""en""); Mapping Phone Numbers to TimeZones  $phoneUtil = \libphonenumber\PhoneNumberUtil::getInstance(); $swissNumberProto = $phoneUtil->parse(""798765432"", ""CH"");  $timeZoneMapper = \libphonenumber\PhoneNumberToTimeZonesMapper::getInstance(); // returns array(""Europe/Zurich"") $timeZones = $timeZoneMapper->getTimeZonesForNumber($swissNumberProto);  FAQ Problems with Invalid Numbers? This library uses phone number metadata from Google's libphonenumber. If this library is working as intended, it should provide the same result as the Java version of Google's project. If you believe that a phone number is returning an incorrect result, first test it with libphonenumber via their Online Demo. If that returns the same result as this project, and you feel it is in error, raise it as an Issue with the libphonenumber project. If Google's Online Demo gives a different result to the libphonenumber-for-php demo, then please raise an Issue here. Generating data Generating the data is not normally needed, as this repository will generally always have the up to data metadata. If you do need to generate the data, the commands are provided by Phing. Ensure you have all the dev composer dependencies installed, then run $ vendor/bin/phing compile This compile process clones the libphonenumber project at the version specified in METADATA-VERSION.txt. Integration with frameworks Other packages exist that integrate libphonenumber-for-php into frameworks. Symfony: PhoneNumberBundle Laravel: Laravel Phone Yii2: PhoneInput Kohana: PhoneNumber These packages are supplied by third parties, and their quality can not be guaranteed. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/giggsey/libphonenumber-for-php"	"A PHP implementation of Google's phone number handling library."	"true"
"Numbers"	"Math"	"https://github.com/moontoast/math"	"A library for working with large numbers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"75"	"8"	"12"	"GitHub - moontoast/math: A PHP 5.3+ mathematics library, providing functionality for large numbers Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 75 Fork 12 moontoast/math Code Issues 2 Pull requests 1 Pulse Graphs A PHP 5.3+ mathematics library, providing functionality for large numbers 11 commits 1 branch 3 releases 2 contributors JavaScript 61.3% PHP 31.2% CSS 7.5% JavaScript PHP CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.1.0 1.0.1 1.0.0 Nothing to show New pull request Latest commit 527bb18 Apr 12, 2014 ramsey Merge pull request #5 from h4cc/patch-2 … Ignore composer self-update failures. Permalink Failed to load latest commit information. docs Regenerating documentation to include ArithmeticException Jan 19, 2013 src/Moontoast/Math Introduce ArithmeticException and use for division by zero exceptions Jan 19, 2013 tests Introduce ArithmeticException and use for division by zero exceptions Jan 19, 2013 .gitignore Open source release of Moontoast\Math Jan 10, 2013 .travis.yml Ignore composer self-update failures. Apr 12, 2014 CHANGELOG.md Added changelog document Jan 19, 2013 LICENSE Open source release of Moontoast\Math Jan 10, 2013 NOTICE Updated copyright notice. Jan 16, 2013 README.md Updated copyright notice. Jan 16, 2013 composer.json Open source release of Moontoast\Math Jan 10, 2013 phpdoc.dist.xml Open source release of Moontoast\Math Jan 10, 2013 phpunit.xml.dist Open source release of Moontoast\Math Jan 10, 2013 README.md Moontoast Math Library Moontoast\Math is useful for working with integers that are larger than (or may become larger than, through mathematical computations) PHP's max integer value for a given system. On 64-bit systems, this number is 9223372036854775807. On 32-bit systems, it is 2147483647. When overflowing this boundary, PHP turns the number into a float, reducing precision (see the PHP manual entry for Integers). Moontoast\Math provides an easy-to-use wrapper around the bcmath extension, allowing one to perform mathematical calculations on numeric strings, going well outside the integer range of the system and maintaining arbitrary precision for more precise calculations. See the docs/ directory for generated API documentation. Moontoast\Math requires PHP 5.3+ and the bcmath extension. Installation The preferred method of installation is via Packagist, as this provides the PSR-0 autoloader functionality. The following composer.json will download and install the latest version of the Moontoast\Math library into your project: {     ""require"": {         ""moontoast/math"": ""*""     } } Examples $bn = new \Moontoast\Math\BigNumber('9,223,372,036,854,775,808'); $bn->multiply(35);  var_dump($bn->getValue()); var_dump($bn->convertToBase(16)); This produces the following output: string(21) ""322818021289917153280"" string(18) ""118000000000000000""  You might want to use BigNumber to work with a UUID, which is an unsigned 128-bit integer. For example: $uuid = \Moontoast\Math\BigNumber::convertToBase10('ff6f8cb0c57d11e19b210800200c9a66', 16); This utility converts the UUID from hexadecimal (base 16) representation to a string representation of the unsigned 128-bit integer in decimal (base 10). You may now create a BigNumber object with it to perform calculations, if you wish. $bn = new \Moontoast\Math\BigNumber($uuid); echo $bn; // 339532337419071774305803111643925486182 License Copyright © 2013 Moontoast, Inc. Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/moontoast/math"	"A library for working with large numbers."	"true"
"Numbers"	"Numbers PHP"	"https://github.com/powder96/numbers.php"	"A library for working with numbers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"151"	"9"	"130"	"GitHub - powder96/numbers.php: Advanced Mathematics Library for PHP (port of Numbers.js) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 151 Fork 130 powder96/numbers.php forked from numbers/numbers.js Code Issues 2 Pull requests 2 Wiki Pulse Graphs Advanced Mathematics Library for PHP (port of Numbers.js) 326 commits 1 branch 0 releases 19 contributors PHP 99.5% Shell 0.5% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request #9 Compare This branch is 303 commits ahead, 363 commits behind numbers:master. Latest commit d4fd836 Mar 13, 2013 powder96 Removed useless function Matrix::deepCopy(). Permalink Failed to load latest commit information. examples wrong dir Feb 22, 2013 lib/NumbersPHP Removed useless function Matrix::deepCopy(). Mar 13, 2013 test/NumbersPHP Removed useless function Matrix::deepCopy(). Mar 13, 2013 .gitignore added composer.lock to gitignore Feb 22, 2013 LICENSE license Dec 17, 2012 README.md Added some 'the's to README file. Feb 25, 2013 composer.json Attempted to fix the package name. Feb 25, 2013 phpunit.xml.dist updated to get php unit working using phpunit.xml.dist Feb 25, 2013 test.cmd Removed the old testing system. Fixed a couple of tests in a new one.… Feb 25, 2013 README.md Numbers.php Numbers.php - an advanced mathematics toolkit for PHP >= 5.3. It is a port of Numbers.js - same toolkit for JavaScript. There is a version of Numbers.php which supports PHP 5.2, but it is no longer developed: https://github.com/powder96/numbers.php/archive/fd946ea8742ba46789dc2a38cc6c1f93a7512e6d.zip Description Numbers.php provides a comprehensive set of mathematical tools that currently are not offered in PHP. These tools include: Basic calculations Calculus Matrix Operations Prime Numbers Statistics More... A few things to note before using: PHP, like many languages, does not necessarily manage floating points as well as we'd all like it to. For example, if adding decimals, the addition tool won't return the exact value. This is an unfortunate error. Precautions have been made to account for this. After including numbers, you can set an error bound. Anything in this will be considered an ""acceptable outcome."" The primary uses cases are calculations and data analysis on the server side. For client side operations, please use Numbers.js. How to use Numbers is pretty straightforward to use. For example, if we wanted to estimate the integral of sin(x) from -2 to 4, we could: Use riemann integrals (with 200 subdivisions) use NumbersPHP\Calculus; use NumbersPHP\Matrix; use NumbersPHP\Statistic; use NumbersPHP\Prime;  Calculus::riemann('sin', -2, 4, 200); Or use adaptive simpson quadrature (with epsilon 0.0001) Calculus::adaptiveSimpson('sin', -2, 4, 0.0001); User-defined functions can be used too: function myFunc($x) {   return 2 * pow($x, 2) + 1; } Calculus::riemann('myFunc', -2, 4, 200);  Calculus::adaptiveSimpson(create_function('$x', 'return 2 * pow($x, 2) + 1;'), -2, 4, 0.0001); Now say we wanted to run some matrix calculations: We can add two matrices $matrix1 = array(array(0, 1, 2),                  array(3, 4, 5)); $matrix2 = array(array( 6,  7,  8),                  array( 9, 10, 11)); Matrix::addition($matrix1, $matrix2); We can transpose a matrix Matrix::transpose($array); Numbers also includes some basic prime number analysis. We can check if a number is prime: //basic check Prime::simple($number);  // Miller�Rabin primality test Prime::millerRabin($number); The statistics tools include mean, median, mode, standard deviation, random sample generator, correlation, confidence intervals, t-test, chi-square, and more. Statistic::mean($array); Statistic::median($array); Statistic::mode($array); Statistic::standardDev($array); Statistic::randomSample($lower, $upper, $n); Statistic::correlation($array1, $array2); Test Download and install these things: PHP >= 5.3 Composer PHAR PHPUnit PHAR Run in the command prompt:     php composer.phar install     php phpunit.phar --configuration phpunit.xml.dist If you are going to run tests multiple times and you are using Microsoft(R) Windows(TM), you can use the batch file /test.cmd. Do not forget to set the path to PHP, Composer, and PHPUnit in the beginnig of that file. Authors Numbers.js Steve Kaliski - sjkaliski David Byrd - davidbyrd11 Ethan Resnick - studip101 Ethan - altercation Hrishikesh Paranjape - hrishikeshparanjape Greg Leppert - leppert Lars-Magnus Skog - ralphtheninja Tim Wood - codearachnid Miles McCrocklin - milroc Nate Kohari - nkohari Eric LaForce - elaforc Kartik Talwar - KartikTalwar btmills swair shah - swairshah Jason Hutchinson - Zikes Philip I. Thomas - philipithomas Brandon Benvie - Benvie Larry Battle - LarryBattle kmcgrane Numbers.php powder96 geopal-solutions Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/powder96/numbers.php"	"A library for working with numbers."	"true"
"Numbers"	"PHP Conversion"	"https://github.com/Crisu83/php-conversion"	"Another library for converting between units of measure."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"60"	"5"	"9"	"GitHub - crisu83/php-conversion: Library for converting units and sizes in PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 60 Fork 9 crisu83/php-conversion Code Issues 1 Pull requests 1 Pulse Graphs Library for converting units and sizes in PHP. 95 commits 3 branches 16 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages master Nothing to show 0.5.2 0.5.1 0.5.0 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 0.3.1 0.3.0 0.2.0 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit 0dff0e3 May 18, 2016 crisu83 Merge pull request #18 from artissant/master … Added cup to volume conversion map Permalink Failed to load latest commit information. example add NumberBase conversion between different number bases + tests and … Mar 23, 2015 src/Crisu83/Conversion Merge pull request #18 from artissant/master May 18, 2016 tests DigitalInformation: add EXABIT, EXABYTE, ZETTABIT, ZETTABYTE, YOTTABI… Mar 23, 2015 .gitignore Add codeception and an initial unit tests Oct 21, 2013 .travis.yml added currency converter Aug 25, 2014 LICENSE Initial commit Oct 18, 2013 README.md Update README.md Mar 23, 2015 codeception.yml added more tests Aug 27, 2014 composer.json Added PHP requirement as 5.4 Apr 28, 2014 composer.lock updated composer Aug 25, 2014 README.md php-conversion Library for converting units and sizes in PHP. Units supported Acceleration Angle Area Digital information Electric current Frequency Fuel consumption Length Luminous Intensity Mass Power Pressure Speed Temperature Time Velocity Voltage Volume Sizes supported Hat size Child shoe size Number base supported Binary Octal Decimal Hexadecimal Usage Example usage: use Crisu83\Conversion\Quantity\DigitalInformation\DigitalInformation; use Crisu83\Conversion\Quantity\Length\Length; use Crisu83\Conversion\NumberBase\NumberBase; use Crisu83\Conversion\Size\HatSize\HatSize; use Crisu83\Conversion\Size\ShoeSize\ChildShoeSize;  use Crisu83\Conversion\Quantity\Length\Unit as LengthUnit; use Crisu83\Conversion\Quantity\DigitalInformation\Unit as DIUnit; use Crisu83\Conversion\Size\HatSize\System as HatSizeSystem; use Crisu83\Conversion\Size\ShoeSize\System as ShoeSizeSystem;  require(dirname(__DIR__) . '/vendor/autoload.php');  $length = new Length(1, LengthUnit::METRE); echo $length . '<br>'; echo $length->add(1, LengthUnit::FOOT) . '<br>'; echo $length->add(5)->sub(2, LengthUnit::FOOT) . '<br>'; echo $length->to(LengthUnit::YARD) . '<br>';  echo '<br>';  $di = new DigitalInformation(1000, DIUnit::MEGABYTE); echo $di . '<br>'; echo $di->to(DIUnit::BIT)->out(2, '.', '') . '<br>'; echo $di->to(DIUnit::GIGABIT) . '<br>'; echo $di->to(DIUnit::TERABYTE)->out(10) . '<br>';  echo '<br>';  $number = new NumberBase(""0xff"", NumberBase::HEXADECIMAL); echo $number . '<br>'; echo $number->to(NumberBase::DECIMAL) . '<br>'; echo $number->to(NumberBase::OCTAL) . '<br>'; echo $number->to(NumberBase::BINARY) . '<br>';  echo '<br>';  $hatSize = new HatSize(40, HatSizeSystem::CENTIMETRE); echo $hatSize . '<br>'; echo $hatSize->to(HatSizeSystem::AMERICAN) . '<br>'; echo $hatSize->to(HatSizeSystem::BRITISH) . '<br>'; echo $hatSize->to(HatSizeSystem::INCH) . '<br>';  echo '<br>';  $shoeSize = new ChildShoeSize(20, ShoeSizeSystem::EUROPEAN); echo $shoeSize . '<br>'; echo $shoeSize->to(ShoeSizeSystem::AMERICAN) . '<br>'; echo $shoeSize->to(ShoeSizeSystem::BRITISH) . '<br>'; echo $shoeSize->to(ShoeSizeSystem::INCH) . '<br>'; Sample output: 1.00 m 1.30 m 5.70 m 6.23 yd  1,000.00 MB 8388629474.89 b 7.81 Gb 0.0009534451 TB  0xff 255 o377 b11111111  40 cm 4 US 4 7/8 UK 15.748 in  20 EUR 4.5 - 5 US 3.5 - 4 UK 4.625 in  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Crisu83/php-conversion"	"Another library for converting between units of measure."	"true"
"Numbers"	"PHP Units of Measure"	"https://github.com/triplepoint/php-units-of-measure"	"A library for converting between units of measure."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"0"	"42"	"GitHub - triplepoint/php-units-of-measure: A library for handling physical quantities and the units of measure in which they're represented. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 0 Star 3 Fork 42 triplepoint/php-units-of-measure forked from PhpUnitsOfMeasure/php-units-of-measure Code Pull requests 0 Pulse Graphs A library for handling physical quantities and the units of measure in which they're represented. 166 commits 3 branches 10 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop feature/derived-quantities master Nothing to show v2.0.1 v2.0.0 v1.3.3 v1.3.1 v1.3.0 v1.2.0 v1.1.2 v1.1.1 v1.1 v1.0 Nothing to show New pull request Pull request Compare This branch is 9 commits behind PhpUnitsOfMeasure:develop. Latest commit 60bd072 Dec 23, 2015 triplepoint Merge pull request #50 from triplepoint/feature/new_quantities … Add Quantity and SolidAngle physical quantities Permalink Failed to load latest commit information. source Fix a bug in quantity. Add unit tests. Dec 23, 2015 tests Fix a bug in quantity. Add unit tests. Dec 23, 2015 .gitattributes Set EOL normalization Jul 8, 2013 .gitignore use the new vagrant support submodule Jun 29, 2014 .travis.yml php 7 failures are no longer ignored in travis Dec 4, 2015 CHANGELOG.md Update changelog for new release Dec 12, 2015 LICENSE Initial commit Feb 23, 2013 README.md Packages rules say the vendor name can't be camel case. Oct 31, 2015 Vagrantfile add x-debug to vagrant install, to enable phpunit code coverage durin… Oct 31, 2015 composer.json Update composer.json Dec 12, 2015 README.md PHP Units of Measure master: Introduction This is a PHP library for representing and converting physical units of measure. The utility of this library is in encapsulating physical quantities in such a way that you don't have to keep track of which unit they're represented in. For instance: use PhpUnitsOfMeasure\PhysicalQuantity\Length;  $height = new Length(6.16, 'feet'); echo $height->toUnit('m');  // would print 1.87757, which is 6.16 feet in meters. Having this abstraction allows you to create interfaces that accept physical quantities without requiring them to be in a particular unit. For example, this function assumes the height is a float of a particular unit (presumably feet), and is therefore undesirably tied to a specific unit of measure: // Tied to a specific unit of measure function isTooTallToRideThisTrain( $height ) {   return $height > 5; }  // Calling the function requires that you first convert whatever quantity // you have into the expected units: isTooTallToRideThisTrain(2 / 0.3048); Whereas this version using this library allows for height to be provided in whatever unit is convenient: use PhpUnitsOfMeasure\PhysicalQuantity\Length;  // Free to operate on lengths in any unit of measure function isTooTallToRideThisTrain( Length $height ) {   return $height->toUnit('ft') > 5; }  // Calling the function now allows any unit to be used: isTooTallToRideThisTrain( new Length(2, 'm') ); Installation This library is best included in your projects via Composer. See the Composer website for more details, and see the Packagist.org site for this library. If you'd prefer to manually include this library as a dependency in your project, then it is recommended that you use a PSR-4 compliant PHP autoloader. The mapping between this project's root namespace and its base directory is: vendor namespace 'PhpUnitsOfMeasure\' maps to the library's base directory 'source/' See the documentation of your autoloader for further instructions. Project Tags and Versions This project follows the guidelines set out in Semantic Versioning 2.0.0. In general, versions are of the form 'X.Y.Z', and increments to X denote backward-incompatible major changes. It is recommended that if your project includes this project as a dependency and you are using an automated dependency management tool such as Composer, then you should 'pin' the major version (X) and allow only variations in 'Y' (minor changes) and 'Z' (bugfixes). See the documentation of your dependency manager for more details. Use Conversion As in the examples above, the basic usage of this library is in representing physical quantities and converting between typical units of measure. For example: use PhpUnitsOfMeasure\PhysicalQuantity\Mass;  $quantity = new Mass(6, 'lbs'); echo $quantity->toUnit('g'); It's also possible to implicity cast a quantity to a string, which will display its original value: use PhpUnitsOfMeasure\PhysicalQuantity\Mass;  $quantity = new Mass(6, 'pounds'); echo $quantity; // '6 lbs' Arithmetic Operators There's also support for addition and subtraction. The values of the physical quantity objects are immutable, and so these arithmetic methods return new quantity objects representing the results: use PhpUnitsOfMeasure\PhysicalQuantity\Volume;  $first  = new Volume(6, 'liters'); $second = new Volume(6, 'cups');  $sum = $first->add($second); echo $sum; // 7.4195292 l  $difference = $first->subtract($second); echo $difference; // 4.5804708 l Adding new Units of Measure to Existing Quantities Ocassionally, you will need to add a new unit of measure to a pre-existing quantity. For example, let's say in a project you need a new measure of length, called ""cubits"". You have two options: you can permanently add the new unit of measure to a new child class of the \PhpUnitsOfMeasure\PhysicalQuantity\Length class (or add it directly to that class and submit a pull request to get it added upstream, if appropriate), or you can add the unit temporarily at run time, inside your calling code. Adding a New Unit of Measure at Runtime To add a new unit of measure to an existing quantity at run time, you'd do this: use PhpUnitsOfMeasure\PhysicalQuantity\Length; use PhpUnitsOfMeasure\PhysicalQuantity\UnitOfMeasure;  // It's ok to create objects with cubits before the new unit is registered, since // the conversion doesn't happen until an output method is called $length = new Length(14, 'cubits');  // Build a new Unit of Measure object which represents the new unit, and which // knows how to convert between the new unit and the quantity's native unit // (in this case, meters). $cubit = new UnitOfMeasure(      // This is the official name of this unit - typically it's the standard     // abbreviation     'cb',      // The second parameter is a function that converts from the native unit     // to this unit     function ($valueInNativeUnit) {         return $valueInNativeUnit / 0.4572;     },      // The third parameter is a function that converts from this unit to the     // native unit     function ($valueInThisUnit) {         return $valueInThisUnit * 0.4572;     } );  // Any alias names for this unit can be added here, to make it easier to use // variations $cubit->addAlias('cubit'); $cubit->addAlias('cubits');  // Register the new unit of measure with the quantity class Length::addUnit($cubit);  // Now that the unit is registered, you can cast the measurement to any other // measure of length echo $length->toUnit('feet'); // '21' Shorthand Factory Methods Note that when creating instances of UnitOfMeasure, there are a couple of convenience static factory methods. The first lets you instantiate units of measure which have linear scaling factors from the native unit. That is, the conversion function fits into the form 'Value in the native unit of measure' = 'Value in this unit of measure' * F, where F is the scaling factor. $megameter = UnitOfMeasure::linearUnitFactory('Mm', 1e6); $megameter->addAlias('Megameter'); $megameter->addAlias('Megametre'); Length::addUnit($megameter); The other convenience method is a special case of the above scaling factor factory method where the scaling factor is set to exactly 1, and serves as a convenient way of generating the native unit of measure. All physical quantities must have one and only one native unit, so this method will probably only be called once per Physical Quantity class: $meter = UnitOfMeasure::nativeUnitFactory('m'); $meter->addAlias('meter'); $meter->addAlias('metre'); Length::addUnit($meter); Automatically Generating Metric Units For units that use the metric system, there's a convenience trait available for classes which implementPhysicalQuantityInterface which will automatically generate the full continuum of metric units from a single unit. For instance: namespace PhpUnitsOfMeasure\PhysicalQuantity;  use PhpUnitsOfMeasure\AbstractPhysicalQuantity; use PhpUnitsOfMeasure\UnitOfMeasure; use PhpUnitsOfMeasure\HasSIUnitsTrait;  class Mass extends AbstractPhysicalQuantity {     use HasSIUnitsTrait;      protected static $unitDefinitions;      protected static function initialize()     {         // Kilogram         $kilogram = UnitOfMeasure::nativeUnitFactory('kg');         $kilogram->addAlias('kilogram');         $kilogram->addAlias('kilograms');         static::addUnit($kilogram);          static::addMissingSIPrefixedUnits(             $kilogram,             1e-3,             '%pg',             [                 '%Pgram',                 '%Pgrams',             ]         );     } } Here we're generating the native unit for mass, kilogram, adding it to the quantity as usual, and then using it to generate the spectrum of SI units by calling the addMissingSIPrefixedUnits() static method provided by the HasSIUnitsTrait trait. Of note, the second parameter (1e-3) is denoting that while kilograms are the native unit for Mass, there's a factor of 1/1000 between the kilogram and the base metric unit of mass: the gram. For units such as seconds or meters where the native unit for the physical quantity is also the base unit for the metric prefix system, this factor would be 1. The 3rd and 4th parameters contain templates for the units' names and alternate aliases, respectively. The replacement strings '%p' and '%P' are used to denote the abbreviated and long-form metric prefixes. For instance, '%pg' would generate the series ..., 'mg', 'cg', 'dg', 'g', ..., while the template '%Pgram' would generate the series ..., 'milligram', 'centigram', 'decigram', 'gram', ... . Permanently Adding a New Unit of Measure to a Physical Quantity The examples above for adding new units of measure to physical quantities allow you to register new units for the duration of the PHP execution, but are lost once execution terminates; it would be necessary to repeat this process every time you created a new program with Length measurements and wanted to use cubits. A new unit of measure can be permanently added to a Physical Quantity class by essentially the same process as the one-time examples, only it would be done inside the initialize() method of the quantity class. For example: namespace PhpUnitsOfMeasure\PhysicalQuantity;  use PhpUnitsOfMeasure\AbstractPhysicalQuantity; use PhpUnitsOfMeasure\UnitOfMeasure;  class Length extends AbstractPhysicalQuantity {     protected static $unitDefinitions;      protected static function initialize()     {         // ...         // ...         // Here's all the pre-existing unit definitions for Length         // ...         // ...          // Cubit         $cubit = UnitOfMeasure::linearUnitFactory('cb', 0.4572);         $cubit->addAlias('cubit');         $cubit->addAlias('cubits');         static::addUnit($cubit);     } } Now any program which uses Length will start with the cubits unit already built in. Note that here we used the more concise linear unit factory method, but the result is equivalent to the expanded form calling the UnitOfMeasure constructor, as used above. Also, notice that the static keyword was used instead of the class name, though either would be acceptable in this case. Adding New Physical Quantities Physical quantities are categories of measurable values, like mass, length, force, etc. For physical quantities that are not already present in this library, it will be necessary to write a class to support a new one. All physical quantities implement the \PhpUnitsOfMeasure\PhysicalQuantityInterface interface, typically extend the \PhpUnitsOfMeasure\AbstractPhysicalQuantity class, and typically have only an initialize() method which creates the quantity's units of measure. See above for typical examples of physical quantity classes and of how to add new units to a quantity class. Note that every physical quantity has a chosen ""native unit"" which is typically the SI standard. The main point for this unit is that all of the quantity's other units of measure will convert to and from this chosen native unit. It's important to be aware of a quantity's native unit when writing conversions for new units of measure. Adding new Aliases to Existing Units It may come up that the desired unit of measure exists for a given physical quantity, but there's a missing alias for the unit. For example, if you thought 'footses' was an obviously lacking alias for the Length unit 'ft', you could temporarily add the alias like this: use PhpUnitsOfMeasure\PhysicalQuantity\Length;  // It's ok to use footses here, since the conversion doesn't happen // until later $length = new Length(4, 'footses');  // Fetch the unit of measure object that represents the 'ft' unit $footUnit = Length::getUnit('ft');  // Any alias names for this unit can be added here, to make it easier // to use variations $footUnit->addAlias('footses');  // Now that the unit has been modified with its new alias, you can cast // the measurement to any other measure of length echo $length->toUnit('m'); // '1.2192' And of course, if you need to add the alias permanently, you can do so in the initialize() method of the quantity's class, as shown above. Testing and Contributing Pull requests are welcome, especially regarding new units of measure or new physical quantities. However, please note that there are many sources for conversion factors, and not all are careful to respect known precision. In the United States, the standards body for measurement is NIST, and they've published NIST Special Publication 1038 ""The International System of Units (SI) - Conversion factors for General Use"". This guide contains the approved conversion factors between various units and the base SI units. Also note that any new physical quantities should have the appropriate SI unit chosen for their native unit of measure. Pull Requests and Merging The workflow for this repository loosely follows gitflow and goes as follows: To develop new contributions, fork or branch from the develop branch of the main repository Pull requests and contribution merges are always made to the develop branch of the main repository From time to time, develop is merged into master by a project maintainer using --no-ff, and a new tag and version are released In this way, no feature-development work is ever directly contributed to master; merges to master only ever come from develop when a new version is being cut or from a bugfix branch, and are never fast-forward merges. this maintains the master branch as a series of released production versions of the code, while develop is always the sum of the approved and merged contributions from developers. End users of this repository should only use tagged commits in production. Users interested in the current 'soon-to-be-released' code may use develop, with the understanding that it changes quickly. All other existing branches (if any) should be considered 'feature' branches in development, and not yet ready for use. Local Testing Environment There's a Vagrant virtual machine configuration included which is suitable for running the necessary unit tests. To bring up the machine, make sure you have Vagrant and Virtualbox installed, and from the project root directory: vagrant up vagrant ssh cd /project Setting Up for Testing The virtual machine development environment already has Composer installed. Once you're ssh'ed into the virtual machine, install this project's dev dependencies: rm -rf vendor composer.phar update --verbose --prefer-dist Unit Tests All the tests associated with this project can be manually run with: vendor/bin/phpunit -c ./tests/phpunit.xml.dist ./tests CodeSniffer Codesniffer verifies that coding standards are being met. Once the project is built with development dependencies, you can run the checks with: vendor/bin/phpcs --encoding=utf-8 --extensions=php --standard=./tests/phpcs.xml -nsp ./ Continuous Integration The above tests are automatically run against Github commits with Travis-CI. https://travis-ci.org/PhpUnitsOfMeasure/php-units-of-measure Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/triplepoint/php-units-of-measure"	"A library for converting between units of measure."	"true"
"Filtering and Validation"	"Cake Validation"	"https://github.com/cakephp/validation"	"Another validation library (CP)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"23"	"1"	"GitHub - cakephp/validation: [READ-ONLY] Validation library from CakePHP. This repo is a split of the main code that can be found in https://github.com/cakephp/cakephp Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 14 Fork 1 cakephp/validation Code Pull requests 0 Pulse Graphs [READ-ONLY] Validation library from CakePHP. This repo is a split of the main code that can be found in https://github.com/cakephp/cakephp 233 commits 7 branches 47 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3-0 3-1 3.next 3.0 3.1 3.2 master Nothing to show 3.3.0-beta 3.2.12 3.2.11 3.2.10 3.2.9 3.2.8 3.2.7 3.2.6 3.2.5 3.2.4 3.2.3 3.2.2 3.2.1 3.2.0 3.2.0-RC1 3.1.13 3.1.10 3.1.9 3.1.8 3.1.7 3.1.6 3.1.5 3.1.4 3.1.2 3.1.1 3.1.0 3.1.0-beta2 3.1.0-beta 3.1.0-RC1 3.0.18 3.0.15 3.0.13 3.0.12 3.0.10 3.0.9 3.0.8 3.0.7 3.0.6 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 3.0.0-beta3 3.0.0-RC2 3.0.0-RC1 Nothing to show New pull request Latest commit 5c8842c Jun 30, 2016 thinkingmedia stickler Permalink Failed to load latest commit information. LICENSE.txt Adds license file and badges for Validation subtree split Feb 9, 2016 README.md Adds license file and badges for Validation subtree split Feb 9, 2016 RulesProvider.php Make all doc block classes FQCN as per CS. Feb 2, 2016 ValidatableInterface.php Run phpcbf for PSR2 CS fixers Dec 31, 2014 Validation.php stickler Jun 30, 2016 ValidationRule.php Code Cleanup - InvalidArgumentException Apr 3, 2015 ValidationSet.php Always import classes. Sep 23, 2015 Validator.php adds validation for arrays Jun 30, 2016 ValidatorAwareTrait.php Because windows is silly Jun 14, 2016 composer.json Declare splits as stable. Jan 28, 2016 README.md CakePHP Validation Library The validation library in CakePHP provides features to build validators that can validate arbitrary arrays of data with ease. Usage Validator objects define the rules that apply to a set of fields. Validator objects contain a mapping between fields and validation sets. Creating a validator is simple: use Cake\Validation\Validator;  $validator = new Validator(); $validator     ->requirePresence('email')     ->add('email', 'validFormat', [         'rule' => 'email',         'message' => 'E-mail must be valid'     ])     ->requirePresence('name')     ->notEmpty('name', 'We need your name.')     ->requirePresence('comment')     ->notEmpty('comment', 'You need to give a comment.');  $errors = $validator->errors($_POST); if (!empty($errors)) {     // display errors. } Documentation Please make sure you check the official documentation Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cakephp/validation"	"Another validation library (CP)."	"true"
"Filtering and Validation"	"DMS Filter"	"https://github.com/rdohms/DMS-Filter"	"An annotation filtering library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"69"	"4"	"13"	"GitHub - rdohms/dms-filter: Library that offers Input Filtering based on Annotations for use with Objects. Check out 2.dev for 2.0 pre-release. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 69 Fork 13 rdohms/dms-filter Code Issues 1 Pull requests 1 Pulse Graphs Library that offers Input Filtering based on Annotations for use with Objects. Check out 2.dev for 2.0 pre-release. http://doh.ms/project/list 56 commits 3 branches 7 releases 1 contributor PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x.x 2.dev master Nothing to show v3.0.0 v2.0.0 v1.1.1 v1.1 v1.0.test 1.0.2 1.0.1 Nothing to show New pull request Latest commit 3eb0942 Mar 1, 2016 rdohms Update README.md Permalink Failed to load latest commit information. src/DMS/Filter Merge branch 'php7-compat' of github.com:rdohms/dms-filter into php7-… Feb 28, 2016 tests/DMS Applied fixes from StyleCI Feb 28, 2016 .gitignore Removing vendor folder that sneaked in Jan 14, 2014 .travis.yml Speeding up travis. Feb 28, 2016 CHANGELOG.md Tweaks and Changelog Feb 28, 2016 LICENSE Replicating LICENSE files into each sub-tree split Oct 25, 2012 README.md Update README.md Mar 1, 2016 composer.json Avoiding bad versions of ZF stdlib Feb 28, 2016 composer.lock Avoiding bad versions of ZF stdlib Feb 28, 2016 phpunit.xml Fixed directory structure Jan 14, 2014 README.md DMS Filter Component This library provides a service that can be used to filter object values based on annotations Install Use composer to add DMS\Filter to your app composer require dms/dms-filter Usage Your Entity: <?php  namespace App\Entity;  //Import Annotations use DMS\Filter\Rules as Filter;  class User {      /**  * @Filter\StripTags()  * @Filter\Trim()  * @Filter\StripNewlines()  *  * @var string  */     public $name;      /**  * @Filter\StripTags()  * @Filter\Trim()  * @Filter\StripNewlines()  *  * @var string  */     public $email;  } ?> Filtering: <?php     //Get Doctrine Reader     $reader = new Annotations\AnnotationReader();     $reader->setEnableParsePhpImports(true);      //Load AnnotationLoader     $loader = new Mapping\Loader\AnnotationLoader($reader);     $this->loader = $loader;      //Get a MetadataFactory     $metadataFactory = new Mapping\ClassMetadataFactory($loader);      //Get a Filter     $filter = new DMS\Filter\Filter($metadataFactory);       //Get your Entity     $user = new App\Entity\User();     $user->name = ""My <b>name</b>"";     $user->email = "" email@mail.com"";      //Filter you entity     $filter->filter($user);      echo $user->name; //""My name""     echo $user->email; //""email@mail.com"" ?> Full example: https://gist.github.com/1098352 Dependencies This package relies on these external libraries: Doctrine Annotations Contributing Feel free to send pull requests, just follow these guides: Fork Code Test Just create FilterTestCase and run phpunit Submit PR Credits This library is inspired by the Symfony 2 Validator component and is meant to work alongside it. Symfony 2 Validator: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rdohms/DMS-Filter"	"An annotation filtering library."	"true"
"Filtering and Validation"	"Filterus"	"https://github.com/ircmaxell/filterus"	"A simple PHP filtering library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"322"	"22"	"50"	"GitHub - ircmaxell/filterus: A simple filtering library for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 322 Fork 50 ircmaxell/filterus Code Issues 2 Pull requests 4 Pulse Graphs A simple filtering library for PHP 12 commits 2 branches 0 releases 3 contributors PHP 97.1% XML 2.9% PHP XML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master v1.0 Nothing to show Nothing to show New pull request Latest commit 1f2df5d Feb 20, 2015 ircmaxell Merge pull request #6 from bocharsky-bw/patch-1 … Add syntax highlighting for better readability Permalink Failed to load latest commit information. lib/Filterus More tests Jan 16, 2013 test More tests Jan 16, 2013 .gitignore Initial Commit Jan 15, 2013 README.md Add syntax highlighting for better readability Feb 17, 2015 composer.json Update composer.json May 20, 2014 phpunit.xml.dist Initial Commit Jan 15, 2013 test.php Initial Commit Jan 15, 2013 README.md Filterus - A flexible PHP 5.3 filter package Filter Methods: Each filter class has two primary methods: $filter->filter($var) - returns a modified version of $var filtered to the options. If it cannot be safely modified, a default value will be returned. $filter->validate($var) - Returns a boolean identifying if the value is valid. Simple Filters (with options): alnum - Alpha numeric min - 0 - Minimum length max - PHP_INT_MAX - Maximum length default - '' - Default return value array - Array matching min - 0 - Minimum size maximum - PHP_INT_MAX - Maxim size keys - null - Filter to run on the keys values - null - Filter to run on the values default - array() - Default return value bool - Boolean matching default - null - Default return value email - Matches emails float - Floating point numbers min - null - Minimum length max - null - Maximum length default - 0.0 - Default return value int - Integers numbers min - null - Minimum length max - null - Maximum length default - 0 - Default return value ip - Matches IP addresses ipv4 - true - Boolean to match IPv4 addresses ipv6 - true - Boolean to match IPv6 addresses private - true - Include private addresses? reserved - true - Include reserved addresses? object - Objects class - '' - Required class or interface name default - null - The default value defaultFactory - null - A callback to instantiate a return value raw - Returns whatever is passed in regex - Matches strings via a regex min - 0 - Minimum length max - PHP_INT_MAX - Maximum length default - '' - Default return value regex - /.?/ - The regex to run string - Matches strings min - 0 - Minimum length max - PHP_INT_MAX - Maximum length default - '' - Default return value url - Matches URLs path - false - Force a path to be present query - false - Force a query string to be present Complex Filters Filter::map(array()) - ""maps"" several filters over key-value pairs. Useful for filtering associative arrays or stdclass objects. Filter::chain($filter1, $filter2...) - Chains multiple filters together to run on the same value (similar to AND joining filters). Filter::pool($filter1, $filter2...) - Runs the same value through multiple filters using the first valid return (similar to OR joining filters) Usage: Simple filters can be specified using a comma-separated-value list. So a filter specifying a string with minimum length of 5 could be represented as: $filter = Filter::factory('string,min:5'); Or $filter = new Filters\String(array('min' => 5)); If you pass a filter to Filter::factory(), it will be returned unmodified. So you can write functions like: function foo($bar, $filter) {     // do something with $bar and set in $baz     return Filter::factory($filter)->filter($baz); } Complex chaining can also be supported. So if you wanted to check if an array with a minimum size of 4, with numeric keys and containing strings of minimum length 5, that could be built like so: $filter = Filter::array('min:4', 'int', 'string,min:5'); If we wanted to validate an associative array, we would use a ""map"" filter: $array = array(     'foo' => 2,     'bar' => 'test', );  $filter = Filter::map(array(     'foo' => 'int',     'bar' => 'string,min:4', ));  var_dump($filter->validate($array)); // true Procedural Interface Filterus also ships with a procedural interface for calling filters. \Filterus\filter($var, $filter); And \Filterus\validate($var, $filter); Any filter is supported (both are basically simple wrappers): function \Filterus\filter($var, $filter) {     return \Filterus\Filter::factory($filter)->filter($var); } Both are just convenience functions. Security Vulnerabilities If you have found a security issue, please contact the author directly at me@ircmaxell.com. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ircmaxell/filterus"	"A simple PHP filtering library."	"true"
"Filtering and Validation"	"ISO-codes"	"https://github.com/ronanguilloux/IsoCodes"	"A library for validating inputs according standards from ISO, International Finance, Public Administrations, GS1, Book Industry, Phone numbers & Zipcodes for many countries"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"404"	"21"	"46"	"GitHub - ronanguilloux/IsoCodes: PHP library - Validators for standards from ISO, International Finance, Public Administrations, GS1, Book Industry, Phone numbers & Zipcodes for many countries Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 404 Fork 46 ronanguilloux/IsoCodes Code Issues 12 Pull requests 1 Pulse Graphs PHP library - Validators for standards from ISO, International Finance, Public Administrations, GS1, Book Industry, Phone numbers & Zipcodes for many countries 346 commits 1 branch 11 releases Fetching contributors PHP 97.4% Makefile 2.6% PHP Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 2.1.0 2.0.0 1.2.0 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit ad4c91c Jul 8, 2016 ronanguilloux committed on GitHub Merge pull request #104 from iLubenets/update_zip_codes … Update ZipCode, get new patterns from the http://i18napis.appspot.com Permalink Failed to load latest commit information. src/IsoCodes update ZipCode, get new patterns from the http://i18napis.appspot.com Jul 8, 2016 tests add test cases for Ireland zip code pattern Jul 8, 2016 .coveralls.yml Fix #46 May 21, 2015 .gitignore Improve gitignore Apr 16, 2016 .scrutinizer.yml Update .scrutinizer.yml Apr 10, 2014 .travis.yml Improve composer caching May 21, 2016 CHANGELOG.md CHANGELOGING Dec 27, 2015 CODE_OF_CONDUCT.md Add CoC, fixing #71 Dec 28, 2015 CONTRIBUTING.md fix #44 - Contributions guidelines Jan 17, 2016 LICENSE Fix: files should not be executable Jul 10, 2014 Makefile Spring cleaning Mar 20, 2016 README.md Fixing broken link in README Jun 1, 2016 composer.json Adding Laravel wrapper as a suggestion from @pixelpeter May 29, 2016 phpunit.xml.dist Set whitelist filter on phpunit configuration May 5, 2015 README.md IsoCodes PHP library - Validators for standards from ISO, International Finance, Public Administrations, GS1, Book Industry, Phone numbers & Zipcodes for many countries Usage // Sending letters to the Labrador Islands ? $isCanadian = ZipCode::validate('A0A 1A0', 'CA');  // Checking out your e-commerce shopping cart? $isBankable = CreditCard::validate('12345679123456');  // Transferring money worldwide? $isSwiftBic = SwiftBic::validate('CEDELULLXXX');  // Paying your taxes in Madrid? $isTaxableInSpain = Nif::validate('A999999L');  // Receiving containers from Port of Shanghai? $isShippingContainerCode = Sscc::validate('806141411234567896');  // Publishing books? $isPublished = Isbn::validate('2-2110-4199-X')  // Trading items with GTIN barcodes in GS1 system?  $isBarcode = Ean13::validate('4719512002889')  // Calling phone numbers in Palo Alto? $isPhonable = PhoneNumber::validate('+1-650-798-2800', 'US')  // Buying Apple stocks? $isISIN = Isin::validate('US0378331005'); // Apple Inc. (AAPL) ISO Codes Validations available: International Finance IBAN SWIFT/BIC BBAN (RIB), Credit Card number SEDOL (Stock Exchange codes) Book / Music Industries ISBN - International Standard Book Number, both 10 & 13 digits ISMN - International Standard Music Number ISWC - International Standard Musical Work Code Public Administrations ISIN - International Securities Identification Number European VAT / tax system: various VAT number formats France: Numéro de Sécurité Sociale / INSEE, SIREN, SIRET, Codes postaux, Clef Type 1/2 Norme B2 US: Social Security number UK: National Insurance Number (NINO) Belgium: Structured Ccommunication (""communication structurée"") Spain: NIF, NIE (Número de Identificación Fiscal/Extranjero) & CIF (Código de identificación fiscal) Netherlands: Burgerservicenummer / Citizen Service Number (BSN) GS1 specific numbers/identifiers GTIN - Global Trade Item Number: GTIN-8, GTIN-12, GTIN-13, GTIN-14 GLN - Global Location Number SSCC - Serial Shipping Container Code GRAI - Global Returnable Asset Identifier GSRN - Global Service Relation Number GDTI - Global Document Type Identifier UDI - Unique Device Identification (the GTIN part of it) Older/deprecated identifiers, now in GTIN: EAN-8, EAN-13, UCC-13, UPC-A, DUN-14, ITF-14 Miscellaneous ZIP code validators for 175+ countries Phone number validation for all countries/regions of the world Each code has its own validator. Each validator is illustrated by a unit test case. IsoCodes is compatible with all versions of PHP that are actively supported by the PHP project, plus hhvm. Build status Continously inspecting results (phpdoc, phpmd, phpcc, etc.) available on Scrutinizer CI Requirements PHP is required to be compiled with ""--enable-bcmath"" for some arbitrary precision mathematic checks (IBAN & BBAN ISO-codes). Usually, you already have bcmath bundled in your PHP version, since many common PHP packages (php-cli, php-fpm, php5-cgi, libapache2-mod-php5, etc.) in stable GNU/Linux distribution releases (such as Debian) are listed as having bcmath built in to them, as an included module. Installing Via GitHub $ git clone git@github.com:ronanguilloux/IsoCodes.git Autoloading is PSR-0 friendly. Via Packagist & Composer Require the latest version of ronanguilloux/isocodes with Composer $ composer require ronanguilloux/isocodes Wrappers With Symfony Validator Install Soullivaneuh/IsoCodesValidator to get IsoCodes working as Validator for Symfony and Silex. With CakePHP 3 Install gourmet/validation to get IsoCodes working with CakePHP 3 as a validator. With Laravel Install pixelpeter/laravel5-isocodes-validation to get IsoCodes working with Laravel 5 as a validator. Unit testing $ phpunit --testdox --coverage-text Make utilities For development & contribution purpose only, a Makefile provides various tools to check your code style, quality & test coverage: Usual tasks:      To initialize vendors:  make     To check code quality:  make quality     To run tests suite:     make tests     To fix code style:      make cs-fix  Other specific tasks:      To evaluate code coverage:                  make codecoverage     To run a simple continuous tests server:    make continuous     To dry-fix code style issues:               make dry-fix     To evaluate code quality stats:             make stats     To update vendors using Composer:           make update  Quality assurance report Isocodes quality plan is mainly based on phpunit: it runs 980+ unit tests, with separated valid & invalid entry sets. Test values are mainly real data or documented examples from standard documentation, and a few handmade values. The composer.json already includes these Php Quality Assurance Toolchain libraries: phploc phpmd phpcpd pdepend php-cs-fixer Just run: $ make stats -i XML report outputs are then generated in a new ./build folder Code covering report built using Coveralls.io. How-to generate such code coverage report using PHPUnit. License Information GNU GPL v3 You can find a copy of this software here: https://github.com/ronanguilloux/IsoCodes Contributing Code The issue queue can be found at: https://github.com/ronanguilloux/IsoCodes/issues. See CONTRIBUTING.md. Special thanks Contributors list: Many thanks to all! Many thanks to JetBrains PhpStorm for having sponsored the IsoCode library development from the very beginning! Any contributor having an accepted PR may receive an Open Source License Key for PhpStorm IDE. Just ping Ronan via email to get one. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ronanguilloux/IsoCodes"	"A library for validating inputs according standards from ISO, International Finance, Public Administrations, GS1, Book Industry, Phone numbers & Zipcodes for many countries"	"true"
"Filtering and Validation"	"MetaYaml"	"https://github.com/romaricdrigon/MetaYaml"	"A schema validation library that supports YAML, JSON and XML."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"48"	"6"	"9"	"GitHub - romaricdrigon/MetaYaml: A powerful schema validator! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 48 Fork 9 romaricdrigon/MetaYaml Code Issues 1 Pull requests 1 Pulse Graphs A powerful schema validator! 118 commits 1 branch 3 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.1 1.0.1 1.0.0 Nothing to show New pull request Latest commit 03b0af5 Feb 29, 2016 romaricdrigon Migrated to Atoum 1.2 Permalink Failed to load latest commit information. bin Removed loop option Jan 27, 2013 data Added documentation generator Sep 7, 2012 src/RomaricDrigon/MetaYaml Removed loose comparaison Nov 26, 2014 test Fixed to use lastest atoum versions Jan 27, 2013 .atoum.php Fix atoum configuration Sep 26, 2012 .gitignore Cleaned .gitignore Feb 29, 2016 .travis.yml Added build matrix Feb 29, 2016 LICENSE.md Added missing license file Aug 16, 2013 README.md Migrated to Atoum 1.2 Feb 29, 2016 composer.json Migrated to Atoum 1.2 Feb 29, 2016 README.md MetaYaml A [put your file type here] schema validator using [put another file type here] files. At the moment, file type can be Json, Yaml, or XML. It can generate a documentation about the schema, or a XSD file (experimental). The name comes from the fact that it was initially made to implement a pseudo-schema for Yaml files. Installation Basic usage How to write a schema Introduction Schema structure Schema nodes More information Documentation generator Notes on XML support XSD generator Test Extending Thanks Installation It is a standalone component: the core requires PHP >= 5.3.3 to use the YamlLoader, you will need the Symfony component Yaml (standalone component, does not require Symfony2) to launch the tests, you'll need atoum To install via composer just do composer require romaricdrigon/metayaml Basic usage You have to create a MetaYaml object, and then pass it both the schema and your data as multidimensional php arrays: use RomaricDrigon\MetaYaml\MetaYaml;  // create object, load schema from an array $schema = new MetaYaml($schema);  /*  you can optionally validate the schema  it can take some time (up to a second for a few hundred lines)  so do it only once, and maybe only in development! */ $schema->validateSchema(); // return true or throw an exception  // you could also have done this at init $schema = new MetaYaml($schema, true); // will load AND validate the schema  // finally, validate your data array according to the schema $schema->validate($data); // return true or throw an exception You can use any of the provided loaders to obtain these arrays (yep, you can validate XML using a schema from an Yaml file!). Some loader examples: use RomaricDrigon\MetaYaml\MetaYaml; use RomaricDrigon\MetaYaml\Loader\YamlLoader; use RomaricDrigon\MetaYaml\Loader\XmlLoader; // JsonLoader is already available  // create one loader object $loader = new JsonLoader(); // Json (will use php json_decode) $loader = new YamlLoader(); // Yaml using Symfony Yaml component $loader = new XmlLoader(); // Xml (using php SimpleXml)  // the usage is the same then $array = $loader->load('SOME STRING...'); // or you can load from a file $array = $loader->loadFromFile('path/to/file'); How to write a schema Introduction A schema file will define the array structure (which elements are allowed, where), some attributes (required, can be empty...) and the possible values for these elements (or their type). Here's a simple example of a schema, using Yaml syntax: root: # root is always required (note no prefix here)     _type: array # each element must always have a '_type'     _children: # array nodes have a '_children' node, defining their children         flowers:             _type: array             _required: true # optional, default false             _children:                 rose:                     _required: true                     _type: text                 violet:                     _type: text                 # -> only rose and violet are allowed children of flowers And a valid Yaml file : flowers:     rose: ""a rose""     violet: ""a violet flower"" We will continue with Yaml examples; if you're not familiar with the syntax, you may want to take a look at its Wikipedia page. Of course the same structure is possible with Json or XML, because the core is the same. Take a look at examples in test/data/ folder. Schema structure A schema file must have a root node, which will describe the first-level content. You can optionally define a prefix; by default it is _ (_type, _required...). You have to define a partials node if you want to use this feature (learn more about it below). A basic schema file: root:     # here put the elements who will be in the file     # note that root can have any type: an array, a number, a prototype... prefix: my_ # so it's gonna be 'my_type', 'my_required', 'my_children'... partials:     block:         # here I define a partial called block Schema nodes Each node in the schema must have a _type attribute. Here I define a node called paragraph whose content is some text: paragraph:     _type: text Those types are available: text: scalar value number: numeric value boolean: boolean value pattern: check if the value matches the regular expression provided in _pattern, which is a PCRE regex enum: enumeration ; list accepted values in _values node array: array; define children in a _children node; array's children must have determined named keys; any extra key will cause an error prototype: define a repetition of items whose name/index is not important. You must give children's type in _prototype node. choice: child node can be any of the nodes provided in _choices. Keys in _choices array are not important (as long as they are unique). In each choice, it's best to put the discriminating field in first. partial: ""shortcut"" to a block described in partials root node. Provide partial name in _partial You can specify additional attributes: general attributes: _required: this node must always be defined (by default false) _not_empty for text, number and array nodes: they can't be empty (by default false). Respective empty values are '', 0 (as a string, an integer or a float), array(). To test for null values, use _required instead. _strict with text, number, boolean and enum will enforce a strict type check (respectively, with a string, an integer or a float, a boolean, any of these values). Be careful when using these with a parser which may not be type-aware (such as the XML one; Yaml and json should be ok) _description: full-text description, cf. Documentation generator only for array nodes: _ignore_extra_keys: the node can contain children whose keys are not listed in _children; they'll be ignored only for prototype nodes: min_items: the prototype node should contain at least 'min' elements max_items: the opposite, the max number of elements in the prototype node (by default 200) Here's a comprehensive example: root:     _type: array     _children:         SomeText:             _type: text             _not_empty: true # so !== ''         SomeEnum:             _type: enum             _values:                 - windows                 - mac                 - linux         SomeNumber:             _type: number             _strict: true         SomeBool:             _type: boolean         SomePrototypeArray:             _type: prototype             _prototype:                 _type: array                 _children:                     SomeOtherText:                         _type: text                         _is_required: true # can't be null         SomeParagraph:             _type: partial             _partial: aBlock # cf 'partials' below         SomeChoice:             _type: choice             _choices:                 1:                     _type: enum                     _values:                         - windows                         - linux                 2:                     _type: number                 # so our node must be either #1 or #2         SomeRegex:             _type: pattern             _pattern: /e/ partials:     aBlock:         _type: array         _children:             Line1:                 _type: text More information For more examples, look inside test/data folder. In each folder, you have an .yml file and its schema. There's also a XML example. If you're curious about an advanced usage, you can check data/MetaSchema.json: schema files are validated using this schema (an yep, the schema validates successfully itself!) Documentation generator Each node can have a _description attribute, containing some human-readable text. You can retrieve the documentation about a node (its type, description, other attributes...) like this: // it's recommended to validate the schema before reading documentation $schema = new MetaYaml($schema, true);  // get documentation about root node $schema->getDocumentationForNode();  // get documentation about a child node 'test' in an array 'a_test' under root $schema->getDocumentationForNode(array('a_test', 'test'));  // finally, if you want to unfold (follow) all partials, set second argument to true $schema->getDocumentationForNode(array('a_test', 'test'), true); // watch out there's no loop inside partials! It returns an associative array formatted like this: array(     'name' => 'test', // name of current node, root for first node     'node' => array(         '_type' => 'array',         '_children' => ... // and so on     ),     'prefix' => '_' ) If the targeted node is inside a choice, the result will differ slightly: array(     'name' => 'test', // name of current node, from the choice key in the schema     'node' => array(         '_is_choice' => 'true', // important: so we know next keys are choices         0 => array(             '_type' => 'array' // and so on, for first choice         ),         1 => array(             '_type' => 'text' // and so on, for second choice         ),         // ...     ),     'prefix' => '_' ) This behavior allow us to handle imbricated choices, without loosing data (you have an array level for each choice level, and you can check the flag _is_choice) If you pass an invalid path (e.g. no node with the name you gave exist), it will throw an exception. Notes on XML support In XML, you can store a value in a node within a child element, or using an attribute. This is not possible in an array; the only way is to use a child. Thus, the following conventions are enforced by the XML loader: elements AND attributes are stored as child, using element name and content, or attribute name and value, as respectively key and value if a node has an attribute and a child node with the same name, the attribute will be overwritten if a node has both attribute(s) and a text content, text content will be stored under key _value multiple child node with the same name will be overwritten, only the last will be retained; except if they have a _key attribute, which will be used thus namespaces are not supported empty nodes are skipped Let's take an example: <fleurs>     <roses couleur=""rose"">         <opera>une rose</opera>         <sauvage>             <des_bois>une autre rose</des_bois>             <des_sous_bois sauvage=""oui"">encore</des_sous_bois>         </sauvage>     </roses>     <tulipe>je vais disparaitre !</tulipe>     <tulipe>deuxieme tulipe</tulipe>     <fleur couleur=""violette"" sauvage=""false"" _key=""violette"">une violette</fleur> </fleurs> will give us this array: array('fleurs' =>     'roses' => array(         'couleur' => 'rose',         'sauvage' => array(             'des_bois' => 'une autre rose',             'des_sous_bois' => array(                 'sauvage' => 'oui',                 '_value' => 'encore'             )         )     ),     'tulipe' => 'deuxieme tulipe',     'violette' => array(         'couleur' => 'violette',         'sauvage' => 'false',         '_value' => 'une violette'     ) ) XSD generator Please note this feature is still experimental! MetaYaml can try to generate a XML Schema Definition from a MetaYaml schema. You may want to use this file to pre-validate XML input, or to use in another context (client-side...). The same conventions (cf. above) will be used. Usage example : use RomaricDrigon\MetaYaml\MetaYaml\XsdGenerator;  // create a XsdGenerator object (requires Php XMLWriter from libxml, enabled by default) $generator = new XsdGenerator();  // $schema is the source schema, php array // second parameter to soft-indent generated XML (default true) $my_xsd_string = $generator->build($schema, true); A few limitations, some relative to XML Schema, apply: root node must be an array an element can't have a name beginning by a number all first-level nodes will be mandatory (but they may be empty) choice node are not supported pattern may have a slightly different behavior due to implementations differences prototype children nodes type will not be validated strict mode does not exists ignore_extra_keys attribute will cause all children nodes not to be validated Test The project is fully tested using atoum. To launch tests, just run in a shell ./bin/test -d test Extending You may want to write your own loader, using anything else. Take a look at any class in Loader/ folder, it's pretty easy: you have to implement the LoaderInterface, and may want to extend Loader class (so you don't have to write loadFromFile()). Thanks Thanks to Riad Benguella and Julien Bianchi for their help & advice. Top Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/romaricdrigon/MetaYaml"	"A schema validation library that supports YAML, JSON and XML."	"true"
"Filtering and Validation"	"Respect Validation"	"https://github.com/Respect/Validation"	"A simple validation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3314"	"197"	"486"	"GitHub - Respect/Validation: The most awesome validation engine ever created for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 197 Star 3,314 Fork 486 Respect/Validation Code Issues 44 Pull requests 10 Wiki Pulse Graphs The most awesome validation engine ever created for PHP http://respect.github.io/Validation 1,356 commits 5 branches 55 releases 86 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.9 1.0 1.1 gh-pages master Nothing to show 1.1.2 1.1.1 1.1.0 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 0.9.8 0.9.7 0.9.6 0.9.5 0.9.4 0.9.3 0.9.2 0.9.1 0.9.0 0.8.14 0.8.13 0.8.12 0.8.11 0.8.10 0.8.9 0.8.8 0.8.7 0.8.6 0.8.5 0.8.4 0.8.3 0.8.2 0.8.1 0.8.0 0.7.10 0.7.9 0.7.8 0.7.7 0.7.6 0.7.5 0.7.4 0.7.3 0.7.2 0.7.1 0.7.0 0.6.1 0.6.0 0.5.0 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 0.3.9 Nothing to show New pull request Latest commit d2c8b4d Jul 1, 2016 henriquemoody Merge branch '1.1' Permalink Failed to load latest commit information. docs Merge branch '1.0' into 1.1 May 7, 2016 library Fix Pesel validator when first char is zero Jul 1, 2016 tests Merge branch '1.1' Jul 1, 2016 .gitignore Add ""composer.lock"" to the .gitignore list Oct 17, 2015 .php_cs Use short array syntax Oct 17, 2015 .scrutinizer.yml Use PSR-2 standard Jan 8, 2015 .travis.yml Drop support for PHP <5.6 May 6, 2016 CHANGELOG.md Update ""CHANGELOG.md"" file Apr 23, 2016 CONTRIBUTING.md Update contributing guidelines Nov 18, 2015 LICENSE.md Create ""CHANGELOG.md"" file Oct 7, 2015 README.md Drop support for PHP <5.6 May 6, 2016 composer.json Upgrade PHPUnit version May 25, 2016 couscous.yml Add Google Analytics tracking ID to ""couscous.yml"" Feb 18, 2015 phpunit.xml.dist Create ""SubdivisionCode"" rule Sep 21, 2015 README.md Respect\Validation The most awesome validation engine ever created for PHP. Complex rules made simple: v::numeric()->positive()->between(1, 255)->validate($input). Granularity control for advanced reporting. More than 100 (fully tested) validators. A concrete API for non fluent usage. Works on PHP 5.6+ or HHVM 3.6+ Table of contents Contributing Feature Guide Installation License Validators Changelog Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Respect/Validation"	"A simple validation library."	"true"
"Filtering and Validation"	"Upload"	"https://github.com/brandonsavage/Upload"	"A library for handling file uploads and validation."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1155"	"90"	"190"	"GitHub - brandonsavage/Upload: File uploads with validation and storage strategies Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 90 Star 1,155 Fork 190 brandonsavage/Upload Code Issues 21 Pull requests 2 Pulse Graphs File uploads with validation and storage strategies 87 commits 3 branches 6 releases 16 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cleanup develop master Nothing to show 1.3.2 1.3.1 1.3.0 1.2.0 1.1.0 1.0.0 Nothing to show New pull request Latest commit 81db4ea Mar 3, 2016 brandonsavage Merge pull request #66 from OmarElGabry/patch-1 … Make sure file name is safe Permalink Failed to load latest commit information. src/Upload Make sure file name is safe Aug 22, 2015 tests Merge pull request #62 from nikeee/gethash Aug 14, 2015 .gitignore Provide backwards compat interface on \Upload\File that proxies to \U… Apr 4, 2014 .travis.yml Updating Travis to include PHP 7. Jun 29, 2015 LICENSE First import Sep 10, 2012 README.md Merge pull request #65 from camilopayan/mimetype-update Aug 14, 2015 composer.json Add multi-file upload handling and interface support Mar 19, 2014 phpunit.xml Add extra validations Sep 11, 2012 README.md Upload This component simplifies file validation and uploading. Usage Assume a file is uploaded with this HTML form: <form method=""POST"" enctype=""multipart/form-data"">     <input type=""file"" name=""foo"" value=""""/>     <input type=""submit"" value=""Upload File""/> </form> When the HTML form is submitted, the server-side PHP code can validate and upload the file like this: <?php $storage = new \Upload\Storage\FileSystem('/path/to/directory'); $file = new \Upload\File('foo', $storage);  // Optionally you can rename the file on upload $new_filename = uniqid(); $file->setName($new_filename);  // Validate file upload // MimeType List => http://www.iana.org/assignments/media-types/media-types.xhtml $file->addValidations(array(     // Ensure file is of type ""image/png""     new \Upload\Validation\Mimetype('image/png'),      //You can also add multi mimetype validation     //new \Upload\Validation\Mimetype(array('image/png', 'image/gif'))      // Ensure file is no larger than 5M (use ""B"", ""K"", M"", or ""G"")     new \Upload\Validation\Size('5M') ));  // Access data about the file that has been uploaded $data = array(     'name'       => $file->getNameWithExtension(),     'extension'  => $file->getExtension(),     'mime'       => $file->getMimetype(),     'size'       => $file->getSize(),     'md5'        => $file->getMd5(),     'dimensions' => $file->getDimensions() );  // Try to upload file try {     // Success!     $file->upload(); } catch (\Exception $e) {     // Fail!     $errors = $file->getErrors(); } How to Install Install composer in your project: curl -s https://getcomposer.org/installer | php  Require the package with composer: php composer.phar require codeguy/upload  Author Josh Lockhart License MIT Public License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/brandonsavage/Upload"	"A library for handling file uploads and validation."	"true"
"Filtering and Validation"	"Valitron"	"https://github.com/vlucas/valitron"	"Another validation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"665"	"50"	"133"	"GitHub - vlucas/valitron: Valitron is a simple, elegant, stand-alone validation library with NO dependencies Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 665 Fork 133 vlucas/valitron Code Issues 20 Pull requests 7 Pulse Graphs Valitron is a simple, elegant, stand-alone validation library with NO dependencies 241 commits 2 branches 19 releases 50 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master setdata Nothing to show v1.2.5 v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.8 v1.1.7 v1.1.6 v1.1.5 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.0.4 v1.0.3 v1.0.2 v1.0.0 1.1.4 Nothing to show New pull request Latest commit 86e64c1 Jun 29, 2016 vlucas committed on GitHub Merge pull request #158 from static-m/master … Added Slovak language. Permalink Failed to load latest commit information. lang Added Slovak language. Jun 29, 2016 src/Valitron Change contains validator default mode to strict May 21, 2016 tests Change contains validator default mode to strict May 21, 2016 .gitignore Add 'composer test' as a run script Dec 15, 2015 .travis.yml Let composer manage version Sep 8, 2014 LICENSE.txt Working basic validations with tests Jan 26, 2013 README.md added ""optional"" rule Mar 15, 2016 composer.json Add 'composer test' as a run script Dec 15, 2015 phpunit.xml Add a BaseTest class to reset static properties on setUp and tearDown Aug 16, 2013 README.md Valitron: Easy Validation That Doesn't Suck Valitron is a simple, minimal and elegant stand-alone validation library with NO dependencies. Valitron uses simple, straightforward validation methods with a focus on readable and concise syntax. Valitron is the simple and pragmatic validation library you've been looking for. Why Valitron? Valitron was created out of frustration with other validation libraries that have dependencies on large components from other frameworks like Symfony's HttpFoundation, pulling in a ton of extra files that aren't really needed for basic validation. It also has purposefully simple syntax used to run all validations in one call instead of individually validating each value by instantiating new classes and validating values one at a time like some other validation libraries require. In short, Valitron is everything you've been looking for in a validation library but haven't been able to find until now: simple pragmatic syntax, lightweight code that makes sense, extensible for custom callbacks and validations, well tested, and without dependencies. Let's get started. Installation Valitron uses Composer to install and update: curl -s http://getcomposer.org/installer | php php composer.phar require vlucas/valitron  The examples below use PHP 5.4 syntax, but Valitron works on PHP 5.3+. Usage Usage is simple and straightforward. Just supply an array of data you wish to validate, add some rules, and then call validate(). If there are any errors, you can call errors() to get them. $v = new Valitron\Validator(array('name' => 'Chester Tester')); $v->rule('required', 'name'); if($v->validate()) {     echo ""Yay! We're all good!""; } else {     // Errors     print_r($v->errors()); } Using this format, you can validate $_POST data directly and easily, and can even apply a rule like required to an array of fields: $v = new Valitron\Validator($_POST); $v->rule('required', ['name', 'email']); $v->rule('email', 'email'); if($v->validate()) {     echo ""Yay! We're all good!""; } else {     // Errors     print_r($v->errors()); } You may use dot syntax to access members of multi-dimensional arrays, and an asterisk to validate each member of an array: $v = new Valitron\Validator(array('settings' => array(     array('threshold' => 50),     array('threshold' => 90) ))); $v->rule('max', 'settings.*.threshold', 100); if($v->validate()) {     echo ""Yay! We're all good!""; } else {     // Errors     print_r($v->errors()); } Setting language and language dir globally:  // boot or config file  use Valitron\Validator as V;  V::langDir(__DIR__.'/validator_lang'); // always set langDir before lang. V::lang('ar');  Built-in Validation Rules required - Required field equals - Field must match another field (email/password confirmation) different - Field must be different than another field accepted - Checkbox or Radio must be accepted (yes, on, 1, true) numeric - Must be numeric integer - Must be integer number array - Must be array length - String must be certain length lengthBetween - String must be between given lengths lengthMin - String must be greater than given length lengthMax - String must be less than given length min - Minimum max - Maximum in - Performs in_array check on given array values notIn - Negation of in rule (not in array of values) ip - Valid IP address email - Valid email address url - Valid URL urlActive - Valid URL with active DNS record alpha - Alphabetic characters only alphaNum - Alphabetic and numeric characters only slug - URL slug characters (a-z, 0-9, -, _) regex - Field matches given regex pattern date - Field is a valid date dateFormat - Field is a valid date in the given format dateBefore - Field is a valid date and is before the given date dateAfter - Field is a valid date and is after the given date contains - Field is a string and contains the given string creditCard - Field is a valid credit card number instanceOf - Field contains an instance of the given class optional - Value does not need to be included in data array. If it is however, it must pass validation. NOTE: If you are comparing floating-point numbers with min/max validators, you should install the BCMath extension for greater accuracy and reliability. The extension is not required for Valitron to work, but Valitron will use it if available, and it is highly recommended. Credit Card Validation usage Credit card validation currently allows you to validate a Visa visa, Mastercard mastercard, Dinersclub dinersclub, American Express amex or Discover discover This will check the credit card against each card type $v->rule('creditCard', 'credit_card'); To optionally filter card types, add the slug to an array as the next parameter: $v->rule('creditCard', 'credit_card', ['visa', 'mastercard']); If you only want to validate one type of card, put it as a string: $v->rule('creditCard', 'credit_card', 'visa'); If the card type information is coming from the client, you might also want to still specify an array of valid card types: $cardType = 'amex'; $v->rule('creditCard', 'credit_card', $cardType, ['visa', 'mastercard']); $v->validate(); // false Adding Custom Validation Rules To add your own validation rule, use the addRule method with a rule name, a custom callback or closure, and a error message to display in case of an error. The callback provided should return boolean true or false. Valitron\Validator::addRule('alwaysFail', function($field, $value, array $params, array $fields) {     return false; }, 'Everything you do is wrong. You fail.'); Alternate syntax for adding rules As the number of rules grows, you may prefer the alternate syntax for defining multiple rules at once. $rules = [     'required' => 'foo',     'accepted' => 'bar',     'integer' =>  'bar' ];  $v = new Valitron\Validator(array('foo' => 'bar', 'bar' => 1)); $v->rules($rules); $v->validate(); If your rule requires multiple parameters or a single parameter more complex than a string, you need to wrap the rule in an array. $rules = [     'required' => [         ['foo'],         ['bar']     ],     'length' => [         ['foo', 3]     ] ]; You can also specify multiple rules for each rule type. $rules = [     'length'   => [         ['foo', 5],         ['bar', 5]     ] ]; Putting these techniques together, you can create a complete rule definition in a relatively compact data structure. You can continue to add individual rules with the rule method even after specifying a rule definition via an array. This is especially useful if you are defining custom validation rules. $rules = [     'required' => 'foo',     'accepted' => 'bar',     'integer' =>  'bar' ];  $v = new Valitron\Validator(array('foo' => 'bar', 'bar' => 1)); $v->rules($rules); $v->rule('min', 'bar', 0); $v->validate(); Adding field label to messages You can do this in two different ways, you can add a individual label to a rule or an array of all labels for the rules. To add individual label to rule you simply add the label method after the rule. $v = new Valitron\Validator(array()); $v->rule('required', 'name')->message('{field} is required')->label('Name'); $v->validate(); There is a edge case to this method, you wouldn't be able to use a array of field names in the rule definition, so one rule per field. So this wouldn't work: $v = new Valitron\Validator(array()); $v->rule('required', array('name', 'email'))->message('{field} is required')->label('Name'); $v->validate(); However we can use a array of labels to solve this issue by simply adding the labels method instead: $v = new Valitron\Validator(array()); $v->rule('required', array('name', 'email'))->message('{field} is required'); $v->labels(array(     'name' => 'Name',     'email' => 'Email address' )); $v->validate(); This introduces a new set of tags to your error language file which looks like {field}, if you are using a rule like equals you can access the second value in the language file by incrementing the field with a value like {field1}. Running Tests The test suite depends on the Composer autoloader to load and run the Valitron files. Please ensure you have downloaded and installed Composer before running the tests: Download Composer curl -s http://getcomposer.org/installer | php Run 'install' php composer.phar install Run the tests phpunit Contributing Fork it Create your feature branch (git checkout -b my-new-feature) Make your changes Run the tests, adding new ones for your own code if necessary (phpunit) Commit your changes (git commit -am 'Added some feature') Push to the branch (git push origin my-new-feature) Create new Pull Request Pat yourself on the back for being so awesome Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vlucas/valitron"	"Another validation library."	"true"
"Filtering and Validation"	"Volan"	"https://github.com/serkin/Volan"	"Another simplified validation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"26"	"3"	"2"	"GitHub - serkin/volan: Light and extendable schema validation library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 26 Fork 2 serkin/volan Code Issues 0 Pull requests 0 Pulse Graphs Light and extendable schema validation library 153 commits 2 branches 0 releases Fetching contributors PHP 98.3% Shell 1.7% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show Nothing to show New pull request Latest commit 925a25d Jun 5, 2016 serkin Update dependencies Permalink Failed to load latest commit information. src PSR Mar 4, 2016 tests Refactor tests Mar 4, 2016 vagrant/provision Add vagrant files Jul 16, 2015 .editorconfig Add editconfig May 26, 2015 .gitattributes Add gitattributes May 26, 2015 .gitignore Minor fixes May 28, 2015 .scrutinizer.yml add new scrutinizer file Jun 18, 2015 .travis.yml Refactor travis for docker Mar 4, 2016 CONTRIBUTING.md Add contributing.md May 26, 2015 LICENSE Initial commit May 4, 2015 README.md Rewrite readme Mar 4, 2016 Vagrantfile Add vagrant files Jul 16, 2015 circle.yml Minor fixes May 28, 2015 codeclimate.yml Add codeclimate Jun 4, 2015 composer.json Update dependencies Jun 5, 2016 phpunit.xml.dist Replace tests directory in phpunit config May 28, 2015 README.md Light PHP validation library For everyone who uses MongoDB or other NoSQL solution and cares about what client sends to his/her database and looking for validation library written in PHP. Volan validates array against given shema and provides you with full information about invalid nodes. Can be used with logging so you can see the whole validation process. Volan Installation Usage Predefined validatorse Custom validators Usage with other libraries Tips Allow extra keys in data Allow required fields be omitted Logging PSR compatible class names Relational structure Dependencies Contribution Licence Tests Installation via Composer: composer require serkin/volan ~1.1 Usage All you have to do is to specify _type field for each node. _type is a reference to a validation class include 'vendor/autoload.php';  $schema = [     'root' => [ // Schema must begins with 'root'         'title' => [             '_type' => 'required_string'         ],         'price' => [             '_type' => 'number'         ],         'author' => [             '_type' => 'string'         ],         'instock' => [             '_type' => 'required_boolean'         ],         'info' =>  [             '_type' => 'array',             'isbn' => [                 '_type' => 'string'             ],             'pages' => [                 '_type' => 'number'             ]         ],         'comments' => [             '_type' => 'nested_array',             'user_id' => [                 '_type' => 'required_number'             ],             'comment' => [                 '_type' => 'required_string'             ]         ]     ] ];  $book = [     'title' => 'The Idiot', // Cannot be omitted     'instock' => true, // Cannot be omitted and has to be bool type     'info' => ['isbn' => '978-0451531520'],     // 'price' can be omitted but if present has to be numeric type      'comments' => [ // Nested array check nested elements         [             'user_id' => 1,             'comment' => 'Good book',             // 'extra_field' => 'bad field'              // By default if key not present in schema validation stops and returns false          ],         [             'user_id' => 2,             'comment' => 'I like it'         ]     ] ];  $validator = new \Volan\Volan($schema); $result = $validator->validate($book);  // if $result === false you can get full information about invalid node var_dump($validator->getErrorInfo()); Predefined validators Strings string: string required_string: string that has to be present Arrays array: array required_array: array that has to be present nested_array: array with nested arrays required_nested_array: array with nested arrays has to be present Bool boolean: boolean required_boolean: boolean that has to be present Numbers number: int or float required_number: int or float that has to be present Custom validators If you need extra validators you can create them extending \Volan\Validator\AbstractValidator class Create folder src/Volan/Validator in your library Add your custom validator src/Volan/Validator/mongoid_validator.php. Example for mongoid validator: namespace Volan\Validator; class mongoid_validator extends AbstractValidator {     public function isValid($nodeData)     {         return ($nodeData instanceof \MongoId);     } } Add autoload to composer.json ""autoload"": {         ""psr-4"": {             ""Volan\\Validator\\"": ""src/Volan/Validator/""         }     } Usage with other libraries If you want to use other validation libraries with Volan it is easy. Let's take a look how it works with Respect validation engine namespace Volan\Validator; use Respect\Validation\Validator as v;  class int_between_10_and_20_validator extends AbstractValidator {     public function isValid($nodeData)     {         return v::int()->between(10, 20)->validate($nodeData);      } } Tips Allow extra keys in data If you want allow extra keys in array you can define it in constructor $validator = new \Volan\Volan($schema, $strictMode = false); Allow required fields be omitted In mongoDB when you update just several fields in collection you cannot pass validation cause required fields may be missing. You can tell validator consider all required validation as optional. $validator = new \Volan\Volan($schema); $validator->setRequiredMode(false); $result = $validator->validate($book); Logging If you want see validation process set logger   $validator = new \Volan\Volan($schema);  $result = $validator->validate($book); $result->getLog();  PSR compatible class names You can use PSR compatible names for validation classes. Previous example with mongoid validation class can be rewritten like: namespace Volan\Validator;  class MongoidValidator extends AbstractValidator {     public function isValid($nodeData)     {         return ($nodeData instanceof \MongoId);     } } Here we changed mongoid_validator to MongoidValidator. Example with int_between_10_and_20_validator be rewritten to IntBetween10And20Validator Relational structure Let's imagine we have field in our book data ... 'categories' => [new \MongoId('111111111111111111111111'),new \MongoId('111111111111111111111112')] ... and we want ensure that all elements not only instances of MongoId but actually present in our database. It is easy. Our validator will be look like: namespace Volan\Validator; class ArrayOfMongoids extends AbstractValidator {     public function isValid($nodeData)     {         foreach($nodeData as $id) {             if($id !instanceof \MongoId) || !$this->presentInCategoryCollection($id))                 return false;             }         }          return true;     }      public function presentInCategoryCollection($id)     {         // Getting connection and so on          $collection = $db->selectCollection('categories');         return (bool)$collection->findOne(['_id' => $id]);     }  } now in schema we add ... 'categories' => ['_type' => 'array_of_mongoids'] ... Dependencies PHP: >= 5.5 Contribution Please see CONTRIBUTING for details. Licence The MIT License (MIT). Please see License File for more information. Tests phpunit  Or with Docker docker run --rm -v ""$PWD"":/var/src/ serkin/php7 vendor/bin/phpunit --debug  Code style docker run --rm -v ""$PWD"":/var/src/ serkin/php7 vendor/bin/php-cs-fixer fix src  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/serkin/Volan"	"Another simplified validation library."	"true"
"API"	"API Platform"	"https://api-platform.com/"	"Expose in minutes an hypermedia REST API that embraces JSON-LD, Hydra format."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"21"	"5"	"61"	"GitHub - dunglas/api-platform: API-first web framework on top of Symfony with JSON-LD, Schema.org and Hydra support Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 21 Fork 61 dunglas/api-platform forked from api-platform/api-platform Code Pull requests 0 Pulse Graphs API-first web framework on top of Symfony with JSON-LD, Schema.org and Hydra support https://api-platform.com 28 commits 4 branches 4 releases Fetching contributors PHP 93.0% ApacheConf 5.3% Shell 1.7% PHP ApacheConf Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags custom_controller data_provider event_listener master Nothing to show v1.1.0-beta.1 v1.0.0 v1.0.0-beta.2 v1.0.0-beta Nothing to show New pull request Pull request Compare This branch is 48 commits behind api-platform:master. Latest commit 11d0f13 Mar 7, 2016 dunglas Merge pull request #48 from api-platform/v2 … Standard Edition for v2 Permalink Failed to load latest commit information. app Standard Edition for v2 Mar 7, 2016 bin Standard Edition for v2 Mar 7, 2016 docker Update the Docker configuration Mar 5, 2016 features/bootstrap Initial commit Jun 12, 2015 src Standard Edition for v2 Mar 7, 2016 tests/AppBundle/Controller Standard Edition for v2 Mar 7, 2016 var Standard Edition for v2 Mar 7, 2016 web Standard Edition for v2 Mar 7, 2016 .gitignore Standard Edition for v2 Mar 7, 2016 CONTRIBUTING.md Add a CONTRIBUTING.md file. Oct 13, 2015 Dockerfile Standard Edition for v2 Mar 7, 2016 LICENSE Initial commit Jun 12, 2015 README.md Add Gitter badge Sep 25, 2015 behat.yml Initial commit Jun 12, 2015 composer.json Standard Edition for v2 Mar 7, 2016 composer.lock Standard Edition for v2 Mar 7, 2016 docker-compose.yml Update the Docker configuration Mar 5, 2016 phpunit.xml.dist Standard Edition for v2 Mar 7, 2016 README.md The API Platform framework The new breed of web frameworks The official project documentation is available on the API Platform website. API Platform is a next-generation PHP web framework designed to create API-first projects easily but without compromise in the field of extensibility and flexibility: Use our awesome code generator to bootstrap a fully-functional data model from Schema.org vocabularies with ORM mapping and validation (you can also do it manually) Expose in minutes an hypermedia REST API that works out of the box by reusing entity metadata (ORM mapping, validation and serialization) ; that embraces JSON-LD, Hydra and provides a ton of features (CRUD, validation and error handling, relation embedding, filters, ordering...) Enjoy the beautiful automatically generated API documentation (Swagger-like) Add easily JSON Web Token or OAuth authentication Create specs and tests with a developer friendly API context system on top of Behat Develop your website UI, webapp, mobile app or anything else you want using your preferred client-side technologies! Tested and approved with AngularJS (integration included), Ionic, React and native mobile apps API Platform embraces open web standards (JSON-LD, Hydra, JWT, OAuth, HTTP, HTML5...) and the Linked Data movement. Your API will automatically expose structured data in Schema.org/JSON-LD. It means that your API Platform application is usable out of the box with technologies of the semantic web. It also means that your SEO will be improved because Google recommends these formats. And yes, Google crawls full-Javascript applications as well as old-fashioned ones. Last but not least, API Platform is built on top of the Symfony full-stack framework and follows its best practices. It means than you can: use thousands of Symfony bundles with API Platform integrate API Platform in any existing Symfony application reuse all your Symfony skills and benefit of the incredible amount of Symfony documentation available enjoy the popular Doctrine ORM (used by default, but fully optional: you can use the data provider you want, including but not limited to MongoDB ODM and ElasticSearch) Install Use Composer to create your new project: composer create-project api-platform/api-platform my-api  Start to hack A demo application (a bookstore) is pre-installed. Run app/console server:start and open http://localhost:8000 in any HTTP client to access the API Open http://localhost:8000/doc to read the HTML documentation an play with the sandbox Give a try to the HydraConsole client to leverage JSON-LD and Hydra features Build your first custom client using Javascript, CORS headers are already configured What's inside? API Platform provides rock solid foundations to build your project: The Schema Generator to generate PHP entities from Schema.org types with Doctrine ORM mappings, Symfony validation and extended PHPDoc The API bundle to expose in minutes your entities as a JSON-LD and Hydra enabled hypermedia REST API NelmioApiDocBundle integrated with the API bundle to automatically generate a beautiful human-readable documentation and a sandbox to test the API Behat and Behatch configured to easily test the API The full power of the Symfony framework and its ecosystem Doctrine ORM/DBAL An AppBundle you can use to start coding Annotations enabled for everything Swiftmailer and Twig to create beautiful emails It comes pre-configured with the following bundles: Symfony - API Platform is built on top of the full-stack Symfony framework API Platform's API bundle - Creates powerful Hypermedia APIs supporting JSON-LD and Hydra NelmioCorsBundle - Support for CORS headers NelmioApiDocBundle - Generates a human-readable documentation FosHttpCacheBundle - Add powerful caching capacities, supports Varnish, Nginx a built-in PHP reverse proxy SensioFrameworkExtraBundle - Adds several enhancements, including template and routing annotation capability DoctrineBundle - Adds support for the Doctrine ORM TwigBundle - Adds support for the Twig templating engine (useful in emails) SecurityBundle - Authentication and roles by integrating Symfony's security component SwiftmailerBundle - Adds support for Swiftmailer, a library for sending emails MonologBundle - Adds support for Monolog, a logging library WebProfilerBundle (in dev/test env) - Adds profiling functionality and the web debug toolbar SensioDistributionBundle (in dev/test env) - Adds functionality for configuring and working with Symfony distributions SensioGeneratorBundle (in dev/test env) - Adds code generation capabilities All libraries and bundles included in API Platform are released under the MIT or BSD license. Authentication support Json Web Token is a lightweight and popular way to handle authentication in a stateless way. Install LexikJWTAuthenticationBundle to adds JWT support to API Platform. Oauth support can also be easily added using FOSOAuthServerBundle. Verifying release signature Software released by the API Platform project can be verified with git using the following GPG public signature: -----BEGIN PGP PUBLIC KEY BLOCK----- Version: GnuPG v1  mQINBFV3AEgBEACjS6QwFIOEOuYAqUVBbUeuSAOdE6RmdV4OVnN62fkW2Sp8IPud s8oOmiyFlj1e3BoPDjvsnRj6qplHQ9stCXyfWgaoVRLhTcu3Wm+2ZzcyZgywva6Z npmEf9DA0MOH9dOE2sAAUktqU1n+PBsm6zIVhv5hu9j781h56/ep+IIJPJErPNDa Y1Q5b4OkFfHBqiMDa9m1BNtK7anjwFSGpAPSdusQh5mCuEEpCs/JqQ9aOVDJdEBP j1nccGN7kzPHdvIMxCHlotrOu2gBRXqmRLzUocu5XsG4nUOVLeilVS/pUI0uWMDC fje/b5JaaCMK8MxgNFVf9XaiGH2QVecAbabDrxPrCAuyaHrlMyUcEnDz0aDJeKb/ fT1pvCcHVGgocg+lA8VjPCQTsmaTz29qKq1djl4OoGa0Vmu+hEpWFVkBk3C3AVjo 9zCb4W5+080YQ6+fnlz5zY4u6twKucs9iLvRMHUjhppLmxlBqWpj/UDdVkXh6Lak ZwpdDJTIojAPi5C4z9EsOYl9PhqxqNOUPcEDJGSZKf7WERqvGvy9VVHww/O8jjw/ D2qaK5EDlrxCTazmfCtCY9Vx7dKt3kGp7vi9FHof9nQbfyqyZ1xMEli/ZjCsk5qj gejRj0S+lCTXPOvrluoFwAWJs4SapFe6p6gfBWWA84bL4hgk80dHoAo8wwARAQAB tCJLw6l2aW4gRHVuZ2xhcyA8ZHVuZ2xhc0BnbWFpbC5jb20+iQI4BBMBAgAiBQJV dwBIAhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRBNBOvvBqrzpj1DD/9k efO91zOnzQVOxCoAex4puMyp9N0GnIqNHLExAl13epvzmzn2kMMliDWFSMnHd35s NFAmXaKZCNYkSeje05wdTiKEkwZRF7vKIAjPc9e9agHit6tsEyfbBeCq8SYlut2c YRWRNrvOz7hmpwcHwlpGj24tu33abondvtmFjByhsLWNY8PY7QRPDUOMbbfgloC2 JO+H8mIZzDTsSGRogwP2aiAKS4ai2Xm/PMrD0BLi08d2F+29rESPG69fLzxEnarE DokpsHmYztdOSxLyw6SMU8Z7DB7cVwstuyy+riiwpMz/oxxkmYWCwBPnn6Bst7h9 haQkclGZZvXWyhFfKwX+XDz/a9JvTcbMwP+d7rRx9eMxTSZ+2uoVtBMxAqdlpFbk 4RWCnDs8LorYH3DSN9IR4cUOSI8yDbCJsSe3ic5C7gtT9DDYcuxii44UtgLrXcXn ZJOpaf9yhiZurd7+kA3J3bhNwk5G8Wa5UUiD4s6gHHD5FioUFX2aitlONNHmVjJX ma4fuhYQtb/rVzP242GxjxPCy+lW33NNk7T2NfKw5tGbbafmEUWd0eU+bmEF0vgJ gni2s4FG2lXrHTpdkOFkfnhJQCkD1dMhD2D5NZgpLbjO5lQEZdzQ2n0VG9pwcQSw /rwqlg6L+J3swvd8SA/oyxbuOLKOxoYUa8qaP7ZrJrkCDQRVdwBIARAAzwQrKBT5 8TkskjYPNnKnn6GFtiVe5bp32ZxuPDUHgV9rzGbWEVzCNzfHtxhMf78HjUIboQsb wga+m7cdvd0z7vxCf8AoQeu1oPXco/lOnJLGpHkDXEsnxoRY6iJJn3aNkvjKgBT+ FsddepeehdAvLkGgJOTM04zoNFebbNi9oQji99udVQTADbra9QK7AxFTUOHv9DL1 ap8/BIpfd0yWUHnQF2VFnYSXHr0oZTxDHLK+LdY2fmMnHfI1EK1CcKVtZdzByuEu WA4DsOmpZIfq974VFTxoh170jZuHCxOiZY1ZXdAWtLD4rLNX/mnb2PTRu02avFva UD9rwEtUpk32lqh7NOxvlG7pd7pUMZ+oMCHkJFi+QHVw0ogx5h1tSDd5qf12Ck6E 2g4CrEpTTs3nDYtwozgSlYPPY6nj4TGSOGShj2EjGWw5C2pDne3nnR896y3C2EOi ALqrufieNCxYkcen3XPG3qBQqU/yg3HpTUTvNloYV26CuGkvxAzryGQW7B7Lw459 84FHAaWIl5CjM6yZl2NAROdzjZkf2a0dSY9JGyLz9dChnxuUM/EJqyWw8q4IO7Xe rVbZsFipjWvzs9Z0JqKYe803misN7POugcAsbz0tGUUrb3DM0qKeHHoqSz5nxNlo Ze25ZHMsw8JnJjGWngeKUA/NlnPh9peKvR8AEQEAAYkCHwQYAQIACQUCVXcASAIb DAAKCRBNBOvvBqrzpn7REACaa4Y/FtcSJIbQxa4LE5MjKU53Kp0ooQHmsd0ObsAS uHLoGEuVw6wah20wk6NrnZSdgl3UdUw1/jbQAuKqeQYBPvHfoN7xEUk4CsdfTyDL lGhUoLAoYcIazdVgm5+/Ud5eQAcItAEXxekZ32/Ln6fvqLzogJESM4mMvgxtVomt dwsE9y4V30+U2Mguq6FTF65DH5c8toBHaD5L5CT8B0QNMCPX5l2zvmB91ZCH4Cvj s+FDO4KXpUkD04bqlgyf0s/toUO5n0i9o9mIy701BUe/Me0L23s8jOITxi9jDCZ0 ZU2gLxly2rnl9+n6pWknl8sAHDtJ/KQNqi7hxikqKbJg+F6XNWG1TiFV6WfexzNA I48HrKMjoAVMS/7pQIOJBnDfmCgMTifYVFpMh3Coy4tyiAPt8yZXjEMnvu4gdr0v WsUHMZkQP2Llx4vb3GAQ2g63QQKF4EWzRHscYmWoOX6DR24VBlAqPTFJCNb7UYXQ nc56HwlOb4lLTpGpbT62TobWfXOldx87xCIwEfgGSRO/5X9sDbKimrLDEMUeyBvH u5B+QDNmyyu8LmNj6xqGaJS8JNKVmaFpBCw6w6bPTCahF+dJ977nLXQUfz9Spitn ihCxYX4tb4whrhNkPLmwCRz4EfzWJFgdtpcVaEk9oWHe02lSp+XO8bOAs9QJuGx1 xA== =RO9E -----END PGP PUBLIC KEY BLOCK-----  Enjoy! Credits Created by Kévin Dunglas. Sponsored by Les-Tilleuls.coop Commercial support available upon request. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dunglas/api-platform"	"Expose in minutes an hypermedia REST API that embraces JSON-LD, Hydra format."	"true"
"API"	"Apigility"	"https://github.com/zfcampus/zf-apigility-skeleton"	"An API builder built with Zend Framework 2."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"445"	"76"	"122"	"GitHub - zfcampus/zf-apigility-skeleton Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 76 Star 445 Fork 122 zfcampus/zf-apigility-skeleton Code Issues 13 Pull requests 4 Pulse Graphs No description or website provided. 303 commits 3 branches 22 releases 24 contributors PHP 50.2% HTML 44.8% ApacheConf 5.0% PHP HTML ApacheConf Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop feature/mvc-auth master Nothing to show 1.3.3 1.3.2 1.3.1 1.3.0 1.2.1 1.2.0 1.1.1 1.1.0 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 1.0.0beta2 1.0.0beta1 1.0.0-beta3 0.9.1 0.9.0 0.8.0 0.7.0 0.6.0 Nothing to show New pull request Latest commit 2288bbe Mar 16, 2016 weierophinney Merge branch 'hotfix/admin-ui-100' … Update to zf-apigility-admin-ui 1.2.3, bringing in a fix for DB tables containing underscore-separated words. Permalink Failed to load latest commit information. config Move module list to separate config file. Jul 9, 2015 data/cache Centralize all files/directories to be ignored in the .gitignore file… Oct 8, 2013 module/Application Merge branch 'hotfix/87' into develop Jul 8, 2015 public Authentication fix for fast-cgi Sep 15, 2015 puphpet Merge pull request #114 from TomHAnderson/hotfix/vagrant-i18n Jan 27, 2016 .dockerignore Created a production dockerfile Jul 13, 2015 .gitignore Add `.vagrant` to .gitignore. Remove `composer.lock` from repo, but d… Jun 7, 2015 CONTRIBUTING.md Pre-release updates May 6, 2014 Dockerfile Created a production dockerfile Jul 13, 2015 Dockerfile-dev Set always_populate_raw_post_data to -1 Aug 25, 2015 LICENSE.txt Changed license date Oct 2, 2013 README.md Merge branch 'hotfix/97' into develop Jul 14, 2015 Vagrantfile New Vagrant configuration Jul 22, 2015 composer.json Update to ^1.2.3 of the UI package Mar 16, 2016 composer.lock Updates dependencies to catch latest fixes Jan 27, 2016 docker-compose.yml Created development docker file supported by docker-compose Jul 13, 2015 README.md Apigility Skeleton Application Requirements Please see the composer.json file. Installation Via release tarball Grab the latest release via the Apigility website and/or the releases page; each release has distribution tarballs and zipballs available. Untar it: tar xzf zf-apigility-skeleton-{version}.tgz (Where {version} is the version you downloaded.) Or unzip, if you chose the zipball: unzip zf-apigility-skeleton-{version}.zip (Where {version} is the version you downloaded.) Via Composer (create-project) You can use the create-project command from Composer to create the project in one go (you need to install composer.phar): curl -s https://getcomposer.org/installer | php -- php composer.phar create-project -sdev zfcampus/zf-apigility-skeleton path/to/install Via Git (clone) First, clone the repository: git clone https://github.com/zfcampus/zf-apigility-skeleton.git # optionally, specify the directory in which to clone cd path/to/install At this point, you need to use Composer to install dependencies. Assuming you already have Composer: composer.phar install All methods Once you have the basic installation, you need to put it in development mode: cd path/to/install php public/index.php development enable # put the skeleton in development mode Now, fire it up! Do one of the following: Create a vhost in your web server that points the DocumentRoot to the public/ directory of the project Fire up the built-in web server in PHP (5.4.8+) (note: do not use this for production!) In the latter case, do the following: cd path/to/install php -S 0.0.0.0:8080 -ddisplay_errors=0 -t public public/index.php You can then visit the site at http://localhost:8080/ - which will bring up a welcome page and the ability to visit the dashboard in order to create and inspect your APIs. NOTE ABOUT USING THE PHP BUILT-IN WEB SERVER PHP's built-in web server did not start supporting the PATCH HTTP method until 5.4.8. Since the admin API makes use of this HTTP method, you must use a version >= 5.4.8 when using the built-in web server. NOTE ABOUT USING APACHE Apache forbids the character sequences %2F and %5C in URI paths. However, the Apigility Admin API uses these characters for a number of service endpoints. As such, if you wish to use the Admin UI and/or Admin API with Apache, you will need to configure your Apache vhost/project to allow encoded slashes: AllowEncodedSlashes On This change will need to be made in your server's vhost file (it cannot be added to .htaccess). NOTE ABOUT OPCACHE Disable all opcode caches when running the admin! The admin cannot and will not run correctly when an opcode cache, such as APC or OpCache, is enabled. Apigility does not use a database to store configuration; instead, it uses PHP configuration files. Opcode caches will cache these files on first load, leading to inconsistencies as you write to them, and will typically lead to a state where the admin API and code become unusable. The admin is a development tool, and intended for use a development environment. As such, you should likely disable opcode caching, regardless. When you are ready to deploy your API to production, however, you can disable development mode, thus disabling the admin interface, and safely run an opcode cache again. Doing so is recommended for production due to the tremendous performance benefits opcode caches provide. NOTE ABOUT DISPLAY_ERRORS The display_errors php.ini setting is useful in development to understand what warnings, notices, and error conditions are affecting your application. However, they cause problems for APIs: APIs are typically a specific serialization format, and error reporting is usually in either plain text, or, with extensions like XDebug, in HTML. This breaks the response payload, making it unusable by clients. For this reason, we recommend disabling display_errors when using the Apigility admin interface. This can be done using the -ddisplay_errors=0 flag when using the built-in PHP web server, or you can set it in your virtual host or server definition. If you disable it, make sure you have reasonable error log settings in place. For the built-in PHP web server, errors will be reported in the console itself; otherwise, ensure you have an error log file specified in your configuration. display_errors should never be enabled in production, regardless. Vagrant If you prefer to develop with Vagrant, there is a basic vagrant recipe included with this project. This recipe assumes that you already have Vagrant installed. The virtual machine will try to use localhost:8080 by default, so if you already have a server on this port of your host machine, you need to shut down the conflicting server first, or if you know how, you can reconfigure the ports in Vagrantfile. Assuming you have Vagrant installed and assuming you have no port conflicts, you can bring up the Vagrant machine with the standard up command: vagrant up  When the machine comes up, you can ssh to it with the standard ssh forward agent: vagrant ssh  The web root is inside the shared directory, which is at /vagrant. Once you've ssh'd into the box, you need to cd: cd /vagrant  For vagrant documentation, please refer to vagrantup.com Docker If you develop or deploy using Docker, we provide both development and production configuration for you. Development Prepare your development environment using docker compose: git clone https://github.com/zfcampus/zf-apigility-skeleton  cd zf-apigility-skeleton  docker-compose build Start the development environment: docker-compose up Access your editor from http://localhost:8080/ or http://<boot2docker ip>:8080/ if on Windows or Mac. Production Use the included Dockerfile to build an Apache container: docker build -t apighost . Test your container: docker run -it -p ""80:80"" apighost Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zfcampus/zf-apigility-skeleton"	"An API builder built with Zend Framework 2."	"true"
"API"	"Drest"	"https://github.com/leedavis81/drest"	"A library for exposing Doctrine entities as REST resource endpoints."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"75"	"7"	"11"	"GitHub - leedavis81/drest: Quickly and easily expose Doctrine entities as REST resource endpoints with the use of simple configuration with annotations, yaml, json or a PHP array. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 75 Fork 11 leedavis81/drest Code Issues 0 Pull requests 1 Pulse Graphs Quickly and easily expose Doctrine entities as REST resource endpoints with the use of simple configuration with annotations, yaml, json or a PHP array. http://leedavis81.github.io/drest 265 commits 5 branches 3 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master multi_drivers scrutinizer-patch-1 v2.0.0 Nothing to show v1.0.0 v1.0.0-beta 1.0.0 Nothing to show New pull request Latest commit 2492b48 Nov 17, 2015 leedavis81 revert phpunit upgrade Permalink Failed to load latest commit information. bin Add license information to file Jul 29, 2015 build update May 16, 2013 examples Remove service actions from annotations and provide registry mechanism Oct 23, 2015 src/Drest Fix docblocks Oct 23, 2015 tests/DrestTests update docblocks Oct 23, 2015 .gitignore this resolves issues #2 and #3 Jul 26, 2013 .scrutinizer-ci.phpunit.xml.dist update scrutinizer config Jun 19, 2014 .scrutinizer.yml Refactor representation search logic Jul 20, 2015 .travis.yml Abstract HTTP stuff to a seperate manager & remove 5.3 support Jul 28, 2015 CHANGELOG.md update changelog Oct 23, 2015 LICENSE rename license file Jul 29, 2015 README.md Update README.md Aug 6, 2015 composer.json revert phpunit upgrade Nov 17, 2015 phpunit.xml.dist no longer allow failures for php 5.5 Jul 9, 2013 README.md Drest Dress up doctrine entities and expose them as REST resources This library allows you to quickly annotate your doctrine entities into restful resources. It comes shipped with it's own internal router, and can be used standalone or alongside your existing framework stack. Routes are mapped to either a default or customised service action that takes care of handling requests. Setting up endpoints is as easy as adding in a simple annotation to an entity /* @Drest\Resource(  * routes={  * @Drest\Route(  * name=""get_user"",  * route_pattern=""/user/:id"",  * verbs={""GET""}  * )})  * @ORM\Table(name=""user"")  * @ORM\Entity  */ class User {    ....... }  // hitting [GET] http://myapplication.com/user/123 may return:  {   ""user"": {     ""name"": ""lee"",     ""email"": ""lee@somedomain.com""     ... + other attributes set up to be exposed ...   } } Documentation Check out how to use drest by reading the documentation Features Quickly annotate existing Doctrine entities to become a fully functional REST resource. Utilises the internal router for matching resource route patterns. Specify what data you want to expose from your entities (including relations), or let the client choose! Generate data objects using exposable data for your API users to consume. Comes shipped with both JSON and XML representations, or you can create your own. Allows media type detection from your client requests, getting you one step close to RMM level 3. Use it independently from your existing framework stack, or alongside it. Allows extension points so you can configure requests to your specific needs. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/leedavis81/drest"	"A library for exposing Doctrine entities as REST resource endpoints."	"true"
"API"	"HAL"	"https://github.com/blongden/hal"	"A Hypertext Application Language (HAL) builder library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"174"	"10"	"38"	"GitHub - blongden/hal: application/hal builder / formatter for PHP 5.4+ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 174 Fork 38 blongden/hal Code Issues 4 Pull requests 2 Wiki Pulse Graphs application/hal builder / formatter for PHP 5.4+ 229 commits 1 branch 12 releases 23 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.9.12 0.9.11 0.9.10 0.9.9 0.9.7 0.9.6 0.9.5 0.9.4 0.9.3 0.9.2 0.9.1 0.9.0 Nothing to show New pull request Latest commit 084ce29 May 17, 2016 blongden Merge pull request #54 from hanneskod/master … Make addResource throw exception if rel is a non-string Permalink Failed to load latest commit information. src/Nocarrier Make addResource throw exception if rel is a non-string Mar 28, 2016 tests/Hal Make addResource throw exception if rel is a non-string Mar 28, 2016 .gitignore Merge branch 'release/0.9.6' May 6, 2014 .travis.yml Adds PHP 7 build Mar 4, 2015 LICENSE Added License Apr 2, 2012 README.md Update README.md Sep 7, 2015 composer.json Fix phpunit to 5.4 Mar 5, 2015 composer.lock Fix phpunit to 5.4 Mar 5, 2015 phpdoc.dist.xml Put output in api directory Apr 23, 2012 phpunit.xml.dist Attempt to fix hhvm build on travis Jul 25, 2014 README.md Nocarrier\Hal This is a library for creating documents in the application/hal+json and application/hal+xml hypermedia formats It requires PHP 5.4 or later. <?php require_once 'vendor/autoload.php';  use Nocarrier\Hal;  $hal = new Hal('/orders'); $hal->addLink('next', '/orders?page=2'); $hal->addLink('search', '/orders?id={order_id}');  $resource = new Hal(     '/orders/123',     array(         'total' => 30.00,         'currency' => 'USD',     ) );  $resource->addLink('customer', '/customer/bob', array('title' => 'Bob Jones <bob@jones.com>')); $hal->addResource('order', $resource); echo $hal->asJson(); echo $hal->asXml(); Installation The preferred method of installation is via packagist as this provides the PSR-0 autoloader functionality. The following command will download and install the latest version of the Hal library into your project. php composer.phar require nocarrier/hal  Alternatively, clone the project and install into your project manually. License Nocarrier\Hal is licensed under the MIT license. Usage Creating Hal Resources A Hal resource can be created with no values set: $hal = new \Nocarrier\Hal(); with a URI for the resource: $hal = new \Nocarrier\Hal('/orders'); and also with an array of data: $hal = new \Nocarrier\Hal('/orders', ['customerId' => 'CUS1234']); Hal resources can also be created from existing XML or JSON documents: $hal = \Nocarrier\Hal::fromJson($jsonString); $hal = \Nocarrier\Hal::fromXml($xmlString); $hal = \Nocarrier\Hal::fromXml($simpleXMLElement); The depth of embedded resources parsed with both these methods is controlled by a second argument, which defaults to 0: $hal = \Nocarrier\Hal::fromJson($jsonString, 5); Getting Representations The Hal resource can be formatted as JSON or XML: $hal = new \Nocarrier\Hal('/orders', ['customerId' => 'CUS1234']); $hal->asJson(); which with a first argument of true for pretty printing: $hal = new \Nocarrier\Hal('/orders', ['customerId' => 'CUS1234']); $hal->asJson(true); gives: {     ""customerId"": ""CUS1234"",     ""_links"": {         ""self"": {""href"": ""/orders""}     } } and $hal = new \Nocarrier\Hal('/orders', ['customerId' => 'CUS1234']); $hal->asXml(true); gives: <?xml version=""1.0""?> <resource href=""/orders"">     <customerId>CUS1234</customerId> </resource> Data The data can be set through setData and read with getData: $hal = new \Nocarrier\Hal('/orders'); $hal->setData(['customerId' => 'CUS1234']); $hal->getData(); Using array keys in the data for the XML representation can be done by prefixing the key with @: $hal = new \Nocarrier\Hal('/orders'); $hal->setData(['customerId' => ['CUS1234', '@type' => 'legacy']]); gives: <?xml version=""1.0""?> <resource href=""/orders"">     <customerId value=""CUS1234"" type=""legacy""/> </resource> The @ is ignored if JSON is rendered: {     ""customerId"": {         ""value"": ""CUS1234"",         ""type"":"" legacy""     },     ""_links"": {         ""self"": {""href"": ""/orders""}     } } Links Links can be added to the resource by providing the rel identifying them and a URI: $hal = new \Nocarrier\Hal('/orders', ['customerId' => 'CUS1234']); $hal->addLink('next', '/orders?page=2'); $hal->addLink('search', '/orders?id={order_id}'); gives: {     ""customerId"": ""CUS1234"",     ""_links"": {         ""self"": {             ""href"": ""/orders""         },         ""next"": {             ""href"": ""/orders?page=2""         },         ""search"": {             ""href"": ""/orders?id={order_id}""         }     } } If a Hal object has been created from a response returned from elsewhere it can be helpful to retrieve the links from it. $json = '{  ""customerId"": ""CUS1234"",  ""_links"": {  ""self"": {  ""href"": ""/orders""  },  ""next"": {  ""href"": ""/orders?page=2""  },  ""search"": {  ""href"": ""/orders?id={order_id}""  }  }  }';  $hal = \Nocarrier\Hal::fromJson($json);  foreach($hal->getLinks() as $rel => $links) {     echo $rel.""\n"";     foreach($links as $link) {         echo (string) $link.""\n"";     } } next /orders?page=2 search /orders?id={order_id}  and $json = '{  ""customerId"": ""CUS1234"",  ""_links"": {  ""self"": {  ""href"": ""/orders""  },  ""next"": {  ""href"": ""/orders?page=2""  },  ""search"": {  ""href"": ""/orders?id={order_id}""  }  }  }'; $hal = \Nocarrier\Hal::fromJson($json); foreach($hal->getLink('next') as $link) {     echo (string) $link.""\n""; } outputs: /orders?page=2  Embedded Resources As well as linking to resources so that the client can fetch them they can be directly embedded in the resource. $hal = new \Nocarrier\Hal('/orders', ['customerId' => 'CUS1234']);  $resource = new \Nocarrier\Hal(     '/orders/123',     array(         'total' => 30.00,         'currency' => 'USD',     ) );  $resource->addLink('customer', '/customer/bob', array('title' => 'Bob Jones <bob@jones.com>')); $hal->addResource('order', $resource); outputs: {     ""customerId"": ""CUS1234"",     ""_links"": {         ""self"": {             ""href"": ""/orders""         }     },     ""_embedded"": {         ""order"": [             {                 ""total"": 30,                 ""currency"": ""USD"",                 ""_links"": {                     ""self"": {                         ""href"": ""/orders/123""                     },                     ""customer"": {                         ""href"": ""/customer/bob"",                         ""title"": ""Bob Jones <bob@jones.com>""                     }                 }             }         ]     } } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/blongden/hal"	"A Hypertext Application Language (HAL) builder library."	"true"
"API"	"Hateoas"	"https://github.com/willdurand/Hateoas"	"A HATEOAS REST web service library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"671"	"50"	"106"	"GitHub - willdurand/Hateoas: A PHP library to support implementing representations for HATEOAS REST web services. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 671 Fork 106 willdurand/Hateoas Code Issues 27 Pull requests 3 Pulse Graphs A PHP library to support implementing representations for HATEOAS REST web services. http://hateoas-php.org/ 419 commits 4 branches 32 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 gh-pages json-api master Nothing to show v2.9.0 v2.8.1 v2.8.0 v2.7.0 v2.6.0 v2.5.0 v2.4.0 v2.3.0 v2.2.0 v2.1.0 v2.0.2 v2.0.1 v2.0.0 v2.0.0-alpha4 v2.0.0-alpha3 v2.0.0-alpha2 v2.0.0-alpha1 2.10.0 2.9.1 0.0.13 0.0.12 0.0.11 0.0.10 0.0.9 0.0.8 0.0.7 0.0.6 0.0.5 0.0.4 0.0.3 0.0.2 0.0.1 Nothing to show New pull request Latest commit ada89d8 May 19, 2016 willdurand Prepare 2.10.0 Permalink Failed to load latest commit information. src/Hateoas Merge pull request #232 from adrienbrault/circular-references May 19, 2016 tests Avoid serializing the same object twice Mar 29, 2016 .gitignore Try atoum Jun 27, 2013 .travis.yml ensure all supported symfony versions are tested Jan 26, 2016 CONTRIBUTING.md Update CONTRIBUTING file Dec 7, 2013 LICENSE Add Adrien to LICENSE file, update composer.json, add more content to… Jul 10, 2013 README.md PHP 7 ready Dec 9, 2015 composer.json Prepare 2.10.0 May 19, 2016 hateoas.xsd Rename Embed => Embedded Dec 17, 2013 phpunit.xml.dist Fix tests setup Oct 18, 2013 README.md Hateoas A PHP library to support implementing representations for HATEOAS REST web services. Installation Working With Symfony2 Usage Introduction Configuring Links Embedding Resources Dealing With Collections Representations VndErrorRepresentation The Expression Language Context Adding Your Own Context Variables Expression Functions URL Generators Helpers LinkHelper Twig Extensions LinkExtension Serializers & Formats The JsonHalSerializer The XmlSerializer The XmlHalSerializer Adding New Serializers The HateoasBuilder XML Serializer JSON Serializer URL Generator Expression Evaluator/Expression Language Relation Provider (JMS) Serializer Specific Others Configuring a Cache Directory Configuring Metadata Locations Extending The Library Reference XML YAML Annotations @Relation @Route @Embedded @Exclusion @RelationProvider Internals Installation The recommended way to install Hateoas is through Composer. Require the willdurand/hateoas package by running the following command: composer require willdurand/hateoas This will resolve the latest stable version. Otherwise, install the library and setup the autoloader yourself. Working With Symfony2 There is a bundle for that! Install the BazingaHateoasBundle, and enjoy! Usage Important: For those who use the 1.0 version, you can jump to this documentation page as the following documentation has been written for Hateoas 2.0 and above. Introduction Hateoas leverages the Serializer library to provide a nice way to build HATEOAS REST web services. HATEOAS stands for Hypermedia as the Engine of Application State, and adds hypermedia links to your representations (i.e. your API responses). HATEOAS is about the discoverability of actions on a resource. For instance, let's say you have a User API which returns a representation of a single user as follow: {     ""user"": {         ""id"": 123,         ""first_name"": ""John"",         ""last_name"": ""Doe""     } } In order to tell your API consumers how to retrieve the data for this specific user, you have to add your very first link to this representation, let's call it self as it is the URI for this particular user: {     ""user"": {         ""id"": 123,         ""first_name"": ""John"",         ""last_name"": ""Doe"",         ""_links"": {             ""self"": { ""href"": ""http://example.com/api/users/123"" }         }     } } Let's dig into Hateoas now. Configuring Links In Hateoas terminology, links are seen as relations added to resources. It is worth mentioning that relations also refer to embedded resources too, but this topic will be covered in the Embedding Resources section. A link is a relation which is identified by a name (e.g. self) and that has an href parameter: use JMS\Serializer\Annotation as Serializer; use Hateoas\Configuration\Annotation as Hateoas;  /**  * @Serializer\XmlRoot(""user"")  *  * @Hateoas\Relation(""self"", href = ""expr('/api/users/' ~ object.getId())"")  */ class User {     /** @Serializer\XmlAttribute */     private $id;     private $firstName;     private $lastName;      public function getId() {} } In the example above, we configure a self relation that is a link because of the href parameter. Its value, which may look weird at first glance, will be extensively covered in The Expression Language section. This special value is used to generate a URI. In this section, annotations are used to configure Hateoas. XML and YAML formats are also supported. If you wish, you can use plain PHP too. Important: you must configure both the Serializer and Hateoas the same way. E.g. if you use YAML for configuring Serializer, use YAML for configuring Hateoas. The easiest way to try HATEOAS is with the HateoasBuilder. The builder has numerous methods to configure the Hateoas serializer, but we won't dig into them right now (see The HateoasBuilder). Everything works fine out of the box: use Hateoas\HateoasBuilder;  $hateoas = HateoasBuilder::create()->build();  $user = new User(42, 'Adrien', 'Brault'); $json = $hateoas->serialize($user, 'json'); $xml  = $hateoas->serialize($user, 'xml'); The $hateoas object is an instance of JMS\Serializer\SerializerInterface, coming from the Serializer library. Hateoas does not come with its own serializer, it hooks into the JMS Serializer. By default, Hateoas uses the Hypertext Application Language (HAL) for JSON serialization. This specifies the structure of the response (e.g. that ""links"" should live under a _links key): {     ""id"": 42,     ""first_name"": ""Adrien"",     ""last_name"": ""Brault"",     ""_links"": {         ""self"": {             ""href"": ""/api/users/42""         }     } } For XML, Atom Links are used by default: <user id=""42"">     <first_name><![CDATA[Adrien]]></first_name>     <last_name><![CDATA[Brault]]></last_name>     <link rel=""self"" href=""/api/users/42""/> </user> It is worth mentioning that these formats are the default ones, not the only available ones. You can use different formats through different serializers, and even add your owns. Now that you know how to add links, let's see how to add embedded resources. Embedding Resources Sometimes, it's more efficient to embed related resources rather than link to them, as it prevents clients from having to make extra requests to fetch those resources. An embedded resource is a named relation that contains data, represented by the embedded parameter. use JMS\Serializer\Annotation as Serializer; use Hateoas\Configuration\Annotation as Hateoas;  /**  * ...  *  * @Hateoas\Relation(  * ""manager"",  * href = ""expr('/api/users/' ~ object.getManager().getId())"",  * embedded = ""expr(object.getManager())"",  * exclusion = @Hateoas\Exclusion(excludeIf = ""expr(object.getManager() === null)"")  * )  */ class User {     ...      /** @Serializer\Exclude */     private $manager; } Note: You will need to exclude the manager property from the serialization, otherwise both the serializer and Hateoas will serialize it. You will also have to exclude the manager relation when the manager is null, because otherwise an error will occur when creating the href link (calling getId() on null). Tip: If the manager property is an object that already has a _self link, you can re-use that value for the href instead of repeating it here. See LinkHelper. $hateoas = HateoasBuilder::create()->build();  $user = new User(42, 'Adrien', 'Brault', new User(23, 'Will', 'Durand')); $json = $hateoas->serialize($user, 'json'); $xml  = $hateoas->serialize($user, 'xml'); For json, the HAL representation places these embedded relations inside an _embedded key: {     ""id"": 42,     ""first_name"": ""Adrien"",     ""last_name"": ""Brault"",     ""_links"": {         ""self"": {             ""href"": ""/api/users/42""         },         ""manager"": {             ""href"": ""/api/users/23""         }     },     ""_embedded"": {         ""manager"": {             ""id"": 23,             ""first_name"": ""Will"",             ""last_name"": ""Durand"",             ""_links"": {                 ""self"": {                     ""href"": ""/api/users/23""                 }             }         }     } } In XML, serializing embedded relations will create new elements: <user id=""42"">     <first_name><![CDATA[Adrien]]></first_name>     <last_name><![CDATA[Brault]]></last_name>     <link rel=""self"" href=""/api/users/42""/>     <link rel=""manager"" href=""/api/users/23""/>     <manager rel=""manager"" id=""23"">         <first_name><![CDATA[Will]]></first_name>         <last_name><![CDATA[Durand]]></last_name>         <link rel=""self"" href=""/api/users/23""/>     </manager> </user> The tag name of an embedded resource is inferred from the @XmlRoot annotation (xml_root_name in YAML, xml-root-name in XML) coming from the Serializer configuration. Dealing With Collections The library provides several classes in the Hateoas\Representation\* namespace to help you with common tasks. These are simple classes configured with the library's annotations. The PaginatedRepresentation, OffsetRepresentation and CollectionRepresentation classes are probably the most interesting ones. These are helpful when your resource is actually a collection of resources (e.g. /users is a collection of users). These help you represent the collection and add pagination and limits: use Hateoas\Representation\PaginatedRepresentation; use Hateoas\Representation\CollectionRepresentation;  $paginatedCollection = new PaginatedRepresentation(     new CollectionRepresentation(         array($user1, $user2, ...),         'users', // embedded rel         'users'  // xml element name     ),     'user_list', // route     array(), // route parameters     1,       // page number     20,      // limit     4,       // total pages     'page',  // page route parameter name, optional, defaults to 'page'     'limit', // limit route parameter name, optional, defaults to 'limit'     false,   // generate relative URIs, optional, defaults to `false`     75       // total collection size, optional, defaults to `null` );  $json = $hateoas->serialize($paginatedCollection, 'json'); $xml  = $hateoas->serialize($paginatedCollection, 'xml'); The CollectionRepresentation class allows you to dynamically configure the collection resources rel, and the xml root element name. The PaginatedRepresentation is designed to add self, first, and when possible last, next, and previous links. The OffsetRepresentation works just like PaginatedRepresentation but is useful when pagination is expressed by offset, limit and total. The RouteAwareRepresentation adds a self relation based on a given route. You can generate absolute URIs by setting the absolute parameter to true in both the PaginatedRepresentation and the RouteAwareRepresentation. The Hateoas library also provides a PagerfantaFactory to easily build PaginatedRepresentation from a Pagerfanta instance. If you use the Pagerfanta library, this is an easier way to create the collection representations: use Hateoas\Configuration\Route; use Hateoas\Representation\Factory\PagerfantaFactory;  $pagerfantaFactory   = new PagerfantaFactory(); // you can pass the page,                                                 // and limit parameters name $paginatedCollection = $pagerfantaFactory->createRepresentation(     $pager,     new Route('user_list', array()) );  $json = $hateoas->serialize($paginatedCollection, 'json'); $xml  = $hateoas->serialize($paginatedCollection, 'xml'); You would get the following JSON content: {     ""page"": 1,     ""limit"": 10,     ""pages"": 1,     ""_links"": {         ""self"": {             ""href"": ""/api/users?page=1&limit=10""         },         ""first"": {             ""href"": ""/api/users?page=1&limit=10""         },         ""last"": {             ""href"": ""/api/users?page=1&limit=10""         }     },     ""_embedded"": {         ""items"": [             { ""id"": 123 },             { ""id"": 456 }         ]     } } And the following XML content: <?xml version=""1.0"" encoding=""UTF-8""?> <collection page=""1"" limit=""10"" pages=""1"">     <user id=""123""></user>     <user id=""456""></user>     <link rel=""self"" href=""/api/users?page=1&amp;limit=10"" />     <link rel=""first"" href=""/api/users?page=1&amp;limit=10"" />     <link rel=""last"" href=""/api/users?page=1&amp;limit=10"" /> </collection> If you want to customize the inlined CollectionRepresentation, pass one as third argument of the createRepresentation() method: use Hateoas\Representation\Factory\PagerfantaFactory;  $pagerfantaFactory   = new PagerfantaFactory(); // you can pass the page and limit parameters name $paginatedCollection = $pagerfantaFactory->createRepresentation(     $pager,     new Route('user_list', array()),     new CollectionRepresentation(         $pager->getCurrentPageResults(),         'users',         'users',         new Exclusion(...)     ) );  $json = $hateoas->serialize($paginatedCollection, 'json'); $xml  = $hateoas->serialize($paginatedCollection, 'xml'); If you want to change the xml root name of the collection, create a new class with the xml root configured and use the inline mechanism: use JMS\Serializer\Annotation as Serializer;  /**  * @Serializer\XmlRoot(""users"")  */ class UsersRepresentation {     /**  * @Serializer\Inline  */     private $inline;      public function __construct($inline)     {         $this->inline = $inline;     } }  $paginatedCollection = ...; $paginatedCollection = new UsersRepresentation($paginatedCollection); Representations As mentionned in the previous section, representations are classes configured with the library's annotations in order to help you with common tasks. The collection representations are described in Dealing With Collection. VndErrorRepresentation The VndErrorRepresentation allows you to describe an error response following the vnd.error specification. $error = new VndErrorRepresentation(     'Validation failed',     42,     new Relation('help', 'http://.../', null, array('title' => 'Error Information')),     new Relation('describes', 'http://.../', null, array('title' => 'Error Description')) ); Serializing such a representation in XML and JSON would give you the following outputs: <?xml version=""1.0"" encoding=""UTF-8""?>     <resource logref=""42"">     <message><![CDATA[Validation failed]]></message>     <link rel=""help"" href=""http://.../"" title=""Error Information""/>     <link rel=""describes"" href=""http://.../"" title=""Error Description""/> </resource> {     ""message"": ""Validation failed"",     ""logref"": 42,     ""_links"": {         ""help"": {             ""href"": ""http://.../"",             ""title"": ""Error Information""         },         ""describes"": {             ""href"": ""http://.../"",             ""title"": ""Error Description""         }     } } Hint: it is recommended to create your own error classes that extend the VndErrorRepresentation class. The Expression Language Hateoas relies on the powerful Symfony ExpressionLanguage component to retrieve values such as links, ids or objects to embed. Each time you fill in a value (e.g. a Relation href in annotations or YAML), you can either pass a hardcoded value or an expression. In order to use the Expression Language, you have to use the expr() notation: /**  * @Hateoas\Relation(""self"", href = ""expr('/api/users/' ~ object.getId())"")  */ You can learn more about the Expression Syntax by reading the official documentation: The Expression Syntax. Context Natively, a special variable named object is available in each expression, and represents the current object: expr(object.getId())  We call such a variable a context variable. You can add your own context variables to the Expression Language context by adding them to the ExpressionEvaluator. Adding Your Own Context Variables Using the HateoasBuilder, call the setExpressionContextVariable() method to add new context variables: use Hateoas\HateoasBuilder;  $hateoas = HateoasBuilder::create()     ->setExpressionContextVariable('foo', new Foo())     ->build(); The foo variable is now available: expr(foo !== null)  Expression Functions Expression Functions are custom functions used to extend the Expression Language as explained in the Extending the ExpressionLanguage, part of the Symfony documentation. Hateoas provides core expression functions such as the LinkExpressionFunction described in LinkHelper - The link Function, but you can also write your own function. The ExpressionFunctionInterface is designed to represent an expression function. Adding a new expression function is a matter of implementing this interface and registering by calling the registerExpressionFunction() method on the HateoasBuilder. URL Generators Since you can use the Expression Language to define the relations links (href key), you can do a lot by default. However if you are using a framework, chances are that you will want to use routes to build links. You will first need to configure an UrlGenerator on the builder. You can either implement the Hateoas\UrlGenerator\UrlGeneratorInterface, or use the Hateoas\UrlGenerator\CallableUrlGenerator: use Hateoas\UrlGenerator\CallableUrlGenerator;  $hateoas = HateoasBuilder::create()     ->setUrlGenerator(         null, // By default all links uses the generator configured with the null name         new CallableUrlGenerator(function ($route, array $parameters, $absolute) use ($myFramework) {             return $myFramework->generateTheUrl($route, $parameters, $absolute);         })     )     ->build() ; You will then be able to use the @Route annotation: use Hateoas\Configuration\Annotation as Hateoas;  /**  * @Hateoas\Relation(  * ""self"",  * href = @Hateoas\Route(  * ""user_get"",  * parameters = {  * ""id"" = ""expr(object.getId())""  * }  * )  * )  */ class User {     ""id"": 42,     ""first_name"": ""Adrien"",     ""last_name"": ""Brault"",     ""_links"": {         ""self"": {             ""href"": ""/api/users/42""         }     } } Note that the library comes with a SymfonyUrlGenerator. For example, to use it in Silex: use Hateoas\UrlGenerator\SymfonyUrlGenerator;  $hateoas = HateoasBuilder::create()     ->setUrlGenerator(null, new SymfonyUrlGenerator($app['url_generator']))     ->build() ; Helpers Hateoas provides a set of helpers to ease the process of building APIs. LinkHelper The LinkHelper class provides a getLinkHref($object, $rel, $absolute = false) method that allows you to get the href value of any object, for any given relation name. It is able to generate a URI (either absolute or relative) from any link relation: $user = new User(123, 'William', 'Durand');  $linkHelper->getLinkHref($user, 'self'); // /api/users/123  $linkHelper->getLinkHref($user, 'self', true); // http://example.com/api/users/123 The link Function The feature above is also available in your expressions (cf. The Expression Language) through the link(object, rel, absolute) function: /**  * @Hateoas\Relation(  * ""self"",  * href = @Hateoas\Route(""post_get"", parameters = {""id"" = ""expr(object.getId())""})  * )  */ class Post {}  /**  * @Hateoas\Relation(  * ""self"",  * href = @Hateoas\Route(""user_get"", parameters = {""id"" = ""expr(object.getId())""})  * )  * @Hateoas\Relation(  * ""post"",  * href = ""expr(link(object.getPost(), 'self', true))""  * )  * @Hateoas\Relation(  * ""relative"",  * href = ""expr(link(object.getRelativePost(), 'self'))""  * )  */ class User {     ...      public function getPost()     {         return new Post(456);     }      public function getRelativePost()     {         return new Post(789);     } } Pay attention to the href expressions for the post and relative relations, as well as their corresponding values in the following JSON content: {     ""user"": {         ""id"": 123,         ""first_name"": ""William"",         ""last_name"": ""Durand"",         ""_links"": {             ""self"": { ""href"": ""http://example.com/api/users/123"" },             ""post"": { ""href"": ""http://example.com/api/posts/456"" },             ""relative"": { ""href"": ""/api/posts/789"" }         }     } } It is worth mentioning that you can force whether you want an absolute or relative URI by using the third argument in both the getLinkHref() method and the link function. Important: by default, all URIs will be relative, even those which are defined as absolute in their configuration. $linkHelper->getLinkHref($user, 'post'); // /api/posts/456  $linkHelper->getLinkHref($user, 'post', true); // http://example.com/api/posts/456  $linkHelper->getLinkHref($user, 'relative'); // /api/posts/789  $linkHelper->getLinkHref($user, 'relative', true); // http://example.com/api/posts/789 Twig Extensions Hateoas also provides a set of Twig extensions. LinkExtension The LinkExtension allows you to use the LinkHelper into your Twig templates, so that you can generate links in your HTML templates for instance. This extension exposes the getLinkHref() helper's method through the link_href Twig function: {{ link_href(user, 'self') }} {# will generate: /users/123 #}  {{ link_href(will, 'self', false) }} {# will generate: /users/123 #}  {{ link_href(will, 'self', true) }} {# will generate: http://example.com/users/123 #} Serializers & Formats Hateoas provides a set of serializers. Each serializer allows you to generate either XML or JSON content following a specific format, such as HAL, or Atom Links for instance. The JsonHalSerializer The JsonHalSerializer allows you to generate HAL compliant relations in JSON. It is the default JSON serializer in Hateoas. HAL provides its linking capability with a convention which says that a resource object has a reserved property called _links. This property is an object that contains links. These links are key'ed by their link relation. HAL also describes another convention which says that a resource may have another reserved property named _embedded. This property is similar to _links in that embedded resources are key'ed by relation name. The main difference is that rather than being links, the values are resource objects. {     ""message"": ""Hello, World!"",     ""_links"": {         ""self"": {             ""href"": ""/notes/0""         }     },     ""_embedded"": {         ""associated_events"": [             {                 ""name"": ""SymfonyCon"",                 ""date"": ""2013-12-12T00:00:00+0100""             }         ]     } }  The XmlSerializer The XmlSerializer allows you to generate Atom Links into your XML documents. It is the default XML serializer. <?xml version=""1.0"" encoding=""UTF-8""?> <note>     <message><![CDATA[Hello, World!]]></message>     <link rel=""self"" href=""/notes/0"" />     <events rel=""associated_events"">         <event>             <name><![CDATA[SymfonyCon]]></name>             <date><![CDATA[2013-12-12T00:00:00+0100]]></date>         </event>     </events> </note> The XmlHalSerializer The XmlHalSerializer allows you to generate HAL compliant relations in XML. HAL in XML is similar to HAL in JSON in the sense that it describes link tags and resource tags. Note: the self relation will actually become an attribute of the main resource instead of being a link tag. Other links will be generated as link tags. <?xml version=""1.0"" encoding=""UTF-8""?> <note href=""/notes/0"">     <message><![CDATA[Hello, World!]]></message>      <resource rel=""associated_events"">         <name><![CDATA[SymfonyCon]]></name>         <date><![CDATA[2013-12-12T00:00:00+0100]]></date>     </resource> </note> Adding New Serializers For JSON related formats, you must implement the JsonSerializerInterface interface, and for XML related formats, you must implement the XmlSerializerInterface. Both interfaces describe two methods to serialize links and embedded relations. The HateoasBuilder The HateoasBuilder class is used to easily configure Hateoas thanks to a powerful and fluent API. use Hateoas\HateoasBuilder;  $hateoas = HateoasBuilder::create()     ->setCacheDir('/path/to/cache/dir')     ->setDebug($trueOrFalse)     ->setDefaultXmlSerializer()     ...     ->build(); All the methods below return the current builder, so that you can chain them. XML Serializer setXmlSerializer(XmlSerializerInterface $xmlSerializer): sets the XML serializer to use. Default is: XmlSerializer; setDefaultXmlSerializer(): sets the default XML serializer (XmlSerializer). JSON Serializer setJsonSerializer(JsonSerializerInterface $jsonSerializer): sets the JSON serializer to use. Default is: JsonHalSerializer; setDefaultJsonSerializer(): sets the default JSON serializer (JsonHalSerializer). URL Generator setUrlGenerator($name = null, UrlGeneratorInterface $urlGenerator): adds a new named URL generator. If $name is null, the URL generator will be the default one. Expression Evaluator/Expression Language setExpressionContextVariable($name, $value): adds a new expression context variable; setExpressionLanguage(ExpressionLanguage $expressionLanguage); registerExpressionFunction(ExpressionFunctionInterface $expressionFunction): adds a new expression function. Relation Provider addRelationProviderResolver(RelationProviderResolverInterface $resolver): adds a new relation provider resolver. (JMS) Serializer Specific includeInterfaceMetadata($include): whether to include the metadata from the interfaces; setMetadataDirs(array $namespacePrefixToDirMap): sets a map of namespace prefixes to directories. This method overrides any previously defined directories; addMetadataDir($dir, $namespacePrefix = ''): adds a directory where the serializer will look for class metadata; addMetadataDirs(array $namespacePrefixToDirMap): adds a map of namespace prefixes to directories; replaceMetadataDir($dir, $namespacePrefix = ''): similar to addMetadataDir(), but overrides an existing entry. Please read the official Serializer documentation for more details. Others setDebug($debug): enables or disables the debug mode; setCacheDir($dir): sets the cache directory. Configuring a Cache Directory Both the serializer and the Hateoas libraries collect metadata about your objects from various sources such as YML, XML, or annotations. In order to make this process as efficient as possible, it is recommended that you allow the Hateoas library to cache this information. To do that, configure a cache directory: $builder = \Hateoas\HateoasBuilder::create();  $hateoas = $builder     ->setCacheDir($someWritableDir)     ->build(); Configuring Metadata Locations Hateoas supports several metadata sources. By default, it uses Doctrine annotations, but you may also store metadata in XML, or YAML files. For the latter, it is necessary to configure a metadata directory where those files are located: $hateoas = \Hateoas\HateoasBuilder::create()     ->addMetadataDir($someDir)     ->build(); Hateoas would expect the metadata files to be named like the fully qualified class names where all \ are replaced with .. If you class would be named Vendor\Package\Foo the metadata file would need to be located at $someDir/Vendor.Package.Foo.(xml|yml). Extending The Library Hateoas allows frameworks to dynamically add relations to classes by providing an extension point at configuration level. This feature can be useful for those who want to to create a new layer on top of Hateoas, or to add ""global"" relations rather than copying the same configuration on each class. In order to leverage this mechanism, the ConfigurationExtensionInterface interface has to be implemented: use Hateoas\Configuration\Metadata\ConfigurationExtensionInterface; use Hateoas\Configuration\Metadata\ClassMetadataInterface; use Hateoas\Configuration\Relation;  class AcmeFooConfigurationExtension implements ConfigurationExtensionInterface {     /**  * {@inheritDoc}  */     public function decorate(ClassMetadataInterface $classMetadata)     {         if (0 === strpos('Acme\Foo\Model', $classMetadata->getName())) {             // Add a ""root"" relation to all classes in the `Acme\Foo\Model` namespace             $classMetadata->addRelation(                 new Relation(                     'root',                     '/'                 )             );         }     } } You can access the existing relations loaded from Annotations, XML, or YAML with $classMetadata->getRelations(). If the $classMetadata has relations, or if you add relations to it, its relations will be cached. So if you read configuration files (Annotations, XML, or YAML), make sure to reference them on the class metadata: $classMetadata->fileResources[] = $file; Reference XML <?xml version=""1.0"" encoding=""UTF-8""?> <serializer> <class name=""Acme\Demo\Representation\User"" h:providers=""Class::getRelations, getRelations"" xmlns:h=""https://github.com/willdurand/Hateoas"">         <h:relation rel=""self"">             <h:href uri=""http://acme.com/foo/1"" />         </h:relation>         <h:relation rel=""expr(object.getFriendsDynamicRel())"">             <h:href route=""user_friends"" generator=""my_custom_generator"">                 <h:parameter name=""id"" value=""expr(object.getId())"" />                 <h:parameter name=""page"" value=""1"" />             </h:ref>             <h:embedded xml-element-name=""users"">                 <h:content>expr(object.getFriends())</h:content>                 <h:exclusion ... />             </h:embedded>             <h:exclusion groups=""Default, user_full"" since-version=""1.0"" until-version=""2.2"" exclude-if=""expr(object.getFriends() === null)"" />         </h:relation>     </class> </serializer> See the hateoas.xsd file for more details. YAML Acme\Demo\Representation\User:     relations:         -             rel: self             href: http://acme.com/foo/1         -             rel: expr(object.getFriendsDynamicRel())             href:                 route: user_friends                 parameters:                     id: expr(object.getId())                     page: 1                 generator: my_custom_generator                 absolute: false             embedded:                 content: expr(object.getFriends())                 xmlElementName: users                 exclusion: ...             exclusion:                 groups: [Default, user_full]                 since_version: 1.0                 until_version: 2.2                 exclude_if: expr(object.getFriends() === null)      relation_providers: [ 'Class::getRelations', 'getRelations' ] Annotations @Relation This annotation can be defined on a class. use Hateoas\Configuration\Annotation as Hateoas;  /**  * @Hateoas\Relation(  * name = ""self"",  * href = ""http://hello"",  * embedded = ""expr(object.getHello())"",  * attributes = { ""foo"" = ""bar"" },  * exclusion = ...,  * )  */ Property Required Content Expression language name Yes string Yes href If embedded is not set string / @Route Yes embedded If href is not set string / @Embedded Yes attributes No array Yes on key and values exclusion No @Exclusion N/A Important: attributes are only used on link relations (i.e. combined with the href property, not with the embedded one). @Route use Hateoas\Configuration\Annotation as Hateoas;  /**  * @Hateoas\Relation(  * name = ""self"",  * href = @Hateoas\Route(  * ""user_get"",  * parameters = { ""id"" = ""expr(object.getId())"" },  * absolute = true,  * generator = ""my_custom_generator""  * )  * )  */ This annotation can be defined in the href property of the @Relation annotation. This is allows you to your URL generator, if you have configured one. Property Required Content Expression language name Yes string Yes parameters Defaults to array() array / string Yes (string + array key/values) absolute Defaults to false boolean / string Yes generator No string / null No @Embedded use Hateoas\Configuration\Annotation as Hateoas;  /**  * @Hateoas\Relation(  * name = ""friends"",  * embedded = @Hateoas\Embedded(  * ""expr(object.getFriends())"",  * exclusion = ...,  * xmlElementName = ""users""  * )  * )  */ This annotation can be defined in the embedded property of the @Relation annotation. It is useful if you need configure the exclusion or xmlElementName options for the embedded resource. Property Required Content Expression language content Yes string / array Yes (string) exclusion Defaults to array() @Exclusion N/A xmlElementName Defaults to array() string Yes @Exclusion This annotation can be defined in the exclusion property of both the @Relation and @Embedded annotations. Property Required Content Expression language groups No array No sinceVersion No float / integer No untilVersion No float / integer No maxDepth No integer No excludeIf No string / boolean Yes All values except excludeIf act the same way as when they are used directly on the regular properties with the serializer. excludeIf expects a boolean and is helpful when another expression would fail under some circumstances. In this example, if the getManager method is null, you should exclude it to prevent the URL generation from failing: /**  * @Hateoas\Relation(  * ""manager"",  * href = @Hateoas\Route(  * ""user_get"",  * parameters = { ""id"" = ""expr(object.getManager().getId())"" }  * ),  * exclusion = @Hateoas\Exclusion(excludeIf = ""expr(null === object.getManager())"")  * )  */ class User {     public function getId() {}      /**  * @return User|null  */     public function getManager() {} } @RelationProvider This annotation can be defined on a class. It is useful if you wish to serialize multiple-relations(links). As an example: {   ""_links"": {     ""relation_name"": [       {""href"": ""link1""},       {""href"": ""link2""},       {""href"": ""link3""}     ]   } }  Property Required Content Expression language name Yes string No The property ""name"" should take the relations-returning method which you have defined in your class (""addRelations"" in the following example). The can be: A method: addRelations A static method: Class::addRelations A Symfony2 service method: acme_foo.service:addRelations use Hateoas\Configuration\Metadata\ClassMetadataInterface; use Hateoas\Configuration as Hateoas;  class MyRelationProvider {     public function addRelations($object, ClassMetadataInterface $classMetadata)     {         // You need to return the relations         // Adding the relations to the $classMetadata won't work         return array(             new Hateoas\Relation(                 'self',                 new Hateoas\Route(                     'foo_get',                     array('id' => 'expr(object.getId())')                 )             )         );     } } Internals This section refers to the Hateoas internals, providing documentation about hidden parts of this library. This is not always relevant for end users, but interesting for developers or people interested in learning how things work under the hood. Contributing See CONTRIBUTING file. Running the Tests Install the Composer dev dependencies: php composer.phar install --dev  Then, run the test suite using PHPUnit: bin/phpunit  License Hateoas is released under the MIT License. See the bundled LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/willdurand/Hateoas"	"A HATEOAS REST web service library."	"true"
"API"	"Negotiation"	"https://github.com/willdurand/Negotiation"	"A content negotiation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"324"	"24"	"31"	"GitHub - willdurand/Negotiation: Content Negotiation tools for PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 324 Fork 31 willdurand/Negotiation Code Issues 5 Pull requests 2 Pulse Graphs Content Negotiation tools for PHP. http://williamdurand.fr/Negotiation/ 171 commits 6 branches 34 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x 1.0 1.1 1.2 gh-pages master Nothing to show v2.0.2 v2.0.1 v2.0.0 v2.0.0-alpha1 1.5.0 1.4.0 1.3.4 1.3.3 1.3.2 1.3.1 1.3.0 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.1.2 1.1.1 1.1.0 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 0.0.8 0.0.7 0.0.6 0.0.5 0.0.4 0.0.3 0.0.2 0.0.1 Nothing to show New pull request Latest commit 5154ac7 Mar 8, 2016 willdurand Remove composer flags from appveyor Permalink Failed to load latest commit information. src/Negotiation allow to have more than to parts Nov 19, 2015 tests add test case with three parts locale Nov 19, 2015 .gitignore Add composer.lock to gitignore Jul 29, 2015 .travis.yml Mark as PHP7 ready Dec 8, 2015 CONTRIBUTING.md Update contributing (write a PR description) Nov 21, 2013 LICENSE Update meta files Jul 28, 2015 README.md Add badges Dec 12, 2015 appveyor.yml Remove composer flags from appveyor Mar 8, 2016 composer.json Use phpunit ~4.5 Dec 12, 2015 phpunit.xml.dist Initial commit Jan 18, 2013 README.md Negotiation Negotiation is a standalone library without any dependencies that allows you to implement content negotiation in your application, whatever framework you use. This library is based on RFC 7231. Negotiation is easy to use, and extensively unit tested! Important: You are browsing the documentation of Negotiation 2.x. Documentation for version 1.x is available here: Negotiation 1.x documentation. You might also be interested in this: What's new in Negotiation 2? Installation The recommended way to install Negotiation is through Composer: $ composer require willdurand/negotiation Usage Examples Media Type Negotiation $negotiator = new \Negotiation\Negotiator();  $acceptHeader = 'text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8'; $priorities   = array('text/html; charset=UTF-8', 'application/json');  $mediaType = $negotiator->getBest($acceptHeader, $priorities);  $value = $mediaType->getValue(); // $value == 'text/html; charset=UTF-8' The Negotiator returns an instance of Accept, or null if negotiating the best media type has failed. Language Negotiation <?php  $negotiator = new \Negotiation\LanguageNegotiator();  $acceptLangageHeader = 'en; q=0.1, fr; q=0.4, fu; q=0.9, de; q=0.2'; $priorities          = array('de', 'fu', 'en');  $bestLanguage = $negotiator->getBest($acceptLangageHeader, $priorities);  $type = $bestLanguage->getType(); // $type == 'fu';  $quality = $bestLanguage->getQuality(); // $quality == 0.9 The LanguageNegotiator returns an instance of AcceptLanguage. Encoding Negotiation <?php  $negotiator = new \Negotiation\EncodingNegotiator(); $encoding   = $negotiator->getBest($acceptHeader, $priorities); The EncodingNegotiator returns an instance of AcceptEncoding. Charset Negotiation <?php  $negotiator = new \Negotiation\CharsetNegotiator(); $charset    = $negotiator->getBest($acceptHeader, $priorities); The CharsetNegotiator returns an instance of AcceptCharset. Accept* Classes Accept and Accept* classes share common methods such as: getValue() returns the accept value (e.g. text/html; z=y; a=b; c=d) getNormalizedValue() returns the value with parameters sorted (e.g. text/html; a=b; c=d; z=y) getQuality() returns the quality if available (q parameter) getType() returns the accept type (e.g. text/html) getParameters() returns the set of parameters (excluding the q parameter if provided) getParameter() allows to retrieve a given parameter by its name. Fallback to a $default (nullable) value otherwise. hasParameter() indicates whether a parameter exists. Unit Tests Setup the test suite using Composer: $ composer install --dev  Run it using PHPUnit: $ phpunit  Contributing See CONTRIBUTING file. Credits Some parts of this library are inspired by: Symfony framework; FOSRest; PEAR HTTP2. William Durand @neural-wetware License Negotiation is released under the MIT License. See the bundled LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/willdurand/Negotiation"	"A content negotiation library."	"true"
"API"	"Restler"	"https://github.com/Luracast/Restler"	"A lightweight framework to expose PHP methods as RESTful web API."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1105"	"106"	"287"	"GitHub - Luracast/Restler: Simple and effective multi-format Web API Server to host your PHP API as Pragmatic REST and / or RESTful API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 106 Star 1,105 Fork 287 Luracast/Restler Code Issues 40 Pull requests 5 Wiki Pulse Graphs Simple and effective multi-format Web API Server to host your PHP API as Pragmatic REST and / or RESTful API http://luracast.com/products/restler/ 1,167 commits 8 branches 9 releases Fetching contributors JavaScript 54.6% CSS 21.8% HTML 9.6% PHP 9.1% Makefile 2.7% Cucumber 1.9% ApacheConf 0.3% JavaScript CSS HTML PHP Makefile Cucumber ApacheConf Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags features/AOP features/explorer features/swagger1.2 features/swagger2.0 master v1 v2 v3 Nothing to show 3.0.0 3.0.0-RC6 3.0.0-RC5 3.0.0-RC4 3.0.0-RC3 3.0.0-RC2 3.0.0-RC1 2.2.0 1.0.20 Nothing to show New pull request Latest commit 0593eff Jan 9, 2016 Arul- Merge pull request #515 from mankms/patch-1 … Fix for Notice: array to string conversion on AutoLoader.php line 266 Permalink Failed to load latest commit information. features Tests and Documentation for many undocumented features May 8, 2014 public fix library typo Oct 20, 2015 scratch Scratch exquisitely ignored, great for odds and ends. Aug 30, 2012 vendor Fix for #357 Jan 9, 2016 views Moving debug views inside Luracast/Restler so that restler/framework … Apr 14, 2014 .gitignore ignore the cache folder in forms example May 1, 2014 ANNOTATIONS.md Tests and Documentation for many undocumented features May 8, 2014 FORMS.md Updated Forms documentation May 13, 2014 Makefile Restler 3.0.0 Release Candidate 1 Sep 20, 2012 PARAM.md @param {@from ...} documentation fix Jul 1, 2014 README.md UTF8 error Sep 7, 2015 behat.yml Fix for BDD response time calculation Nov 24, 2012 composer.json Changing composer to use conflict instead of replace for restler/fram… May 26, 2014 package.ini Restler 3.0.0 Release Candidate 1 Sep 19, 2012 README.md Luracast Restler Version 3.0 Release Candidate 5 Restler is a simple and effective multi-format Web API Server written in PHP. Just deal with your business logic in php, restler will take care of the REST! if you do not have PHP >= 5.3.2 on your server and wont be able to upgrade you may use Restler 2 instead Restler 3 - Better APIs by Design Developer Home Live Examples Updates on Facebook and Twitter Features Installation Quick Start Guide Change Log Features No Learning Curve Light weight Flexible Highly Customizable Many Examples that can be tried on your localhost to get started Supports HTTP request methods HEAD, GET, POST, PUT, DELETE, OPTIONS and PATCH via header or request parameter (method) Supports both RESTful and Pragmatic REST API Design Clients can use X-HTTP-Method-Override header, supports Cross Origin Resource Sharing and JSONP Two way format(media type) conversion both send and receive Pluggable content Formatter framework and api Comes with JSON, XML, Yaml, Amf, and Plist(both XML and Binary) format support Pluggable Authentication schemes OAuth 2 Server Pluggable Filters to effectively manage API usage API Rate Limiting Filter Routing Manual Routing (Annotation) Using @url GET my/custom/url/{param} PHPDoc comments Auto Routing (Reflection) URL to Method mapping URL part to Method parameter mapping Query parameters to Method parameter mapping Request body to Method parameter mapping [planned] Header to Method parameter mapping Cache built-in Client Side Caching support Proxy Caching support Server Side Caching [planned] ETag, If-None-Match support [planned] Last-Modified, If-Modified-Since support API Features Always supports URLEncoded format for simplified input (POST vars) Automatic parameter validation and type conversion API versioning support by URL and/or vendor specific MIME API documentation and discovery using Restler API Explorer Throttling and Performance tuning Management [planned] Unit Testing using PHPUnit Behavior Driven API testing using Behat and Guzzle Command line Project Management using Respect/Foundation Dependency Management using Composer Source code distributed under LGPL Git Repository and the Branches Most stable and recent version is maintained at the master branch, previous versions are kept in the branches such as v1 and v2 Version branch with the current version such as v3 is used for building up the next release. It's documentation may not be updated frequently and thus reserved for the daring ones. Feature branches such as features/html and features/router are purely for experimentation purpose to try out a feature Installation Make sure PHP 5.3.2 or above (at least 5.3.4 recommended to avoid potential bugs) is available on your server 1. Install Composer Restler uses Composer to manage its dependencies. First, download a copy of composer.phar. It can be kept in your project folder or ideally in usr/local/bin to use it globally for all your projects. If you are on Windows, you can use the composer windows installer instead. 2. Install Restler Option 1. Using composer create-project You may install Restler by running the create project command in your terminal. Replace {projectName} with your actual project name. It will create a folder with that name and install Restler. php composer.phar create-project luracast/restler {projectName} Note:- If you do not want the additional formats and BDD tools you can include --no-dev to enforce exclusion of dev packages. If you want to try the bleading edge v3 branch or any of the feature branches include 3.x-dev or dev-features/html in the above command Option 2. Downloading from github Once Composer is installed, download the latest version of the Restler framework and extract its contents into a directory on your server. Next, in the root of your Restler project, run the php composer.phar install (or composer install) command to install all of the framework's dependencies. This process requires Git to be installed on the server to successfully complete the installation. If you want to update the Restler framework, you may issue the php composer.phar update command. Note:- If are not allowed to install composer and git on your server, you can install and run them on your development machine. The resulting files and folders can be uploaded and used on the server. 3. Configure Ideally public folder should be mapped as your web root, It is optional, but recommended to avoid exposing unneeded files and folders. 4. Try it out Try the live examples in your localhost 5. Run some test Update the base_url specified in behat.yml and then try the following command bin/behat  This will test the examples against the behaviors expected, for example Feature: Testing CRUD Example     Scenario: Creating new Author with JSON         Given that I want to make a new ""Author""         And his ""name"" is ""Chris""         And his ""email"" is ""chris@world.com""         And the request is sent as JSON         When I request ""/examples/_007_crud/authors""         Then the response status code should be 200         And the response should be JSON         And the response has a ""id"" property  All set, Happy Restling! :) Quick Start Guide Once you have got restler installed with the above steps, you can quickly create your application by following these steps 1. Write API Create your API classes with all needed public and protected methods 2. Open the Gateway Create the gateway (index.php) as follows <?php require_once '../../../vendor/restler.php'; use Luracast\Restler\Restler;  $r = new Restler(); $r->addAPIClass('YourApiClassNameHere'); // repeat for more $r->handle(); //serve the response 3. Prettify URLs Enable URL Rewriting Make sure all the requests are routed to index.php by enabling URL Rewriting for your website For example:- If you are on Apache, you can use an .htaccess file such as DirectoryIndex index.php <IfModule mod_rewrite.c>     RewriteEngine On     RewriteRule ^$ index.php [QSA,L]     RewriteCond %{REQUEST_FILENAME} !-f     RewriteCond %{REQUEST_FILENAME} !-d     RewriteRule ^(.*)$ index.php [QSA,L] </IfModule> <IfModule mod_php5.c>     php_flag display_errors On </IfModule> Note:- This requires AllowOverride to be set to All instead of None in the httpd.conf file, and might require some tweaking on some server configurations. Refer to mod_rewrite documentation for more info. If you are on Nginx, you have to make sure you set the server_name and pass the PHP scripts to fast cgi (PHP-FPM) listening on 127.0.0.1:9000 server {         listen        80;         server_name   api.luracast.com; //change it to match your server name          //... other stuff          location ~ \.php$ {             root           /var/www/html;             fastcgi_pass   127.0.0.1:9000;             fastcgi_index  index.php;             fastcgi_param  SCRIPT_FILENAME  /var/www/html/$fastcgi_script_name;             include        fastcgi_params;         }          //... other stuff  }  Note:- This requires PHP, PHP-FPM to be properly installed and configured. Refer to PHP FastCGI example for more info. 4. Customise Fine tune to suit your needs <?php require_once '../../../vendor/restler.php'; use Luracast\Restler\Restler; use Luracast\Restler\Defaults; //set the defaults to match your requirements Defaults::$throttle = 20; //time in milliseconds for bandwidth throttling //setup restler $r = new Restler(); $r->addAPIClass('YourApiClassNameHere'); // repeat for more $r->addAPIClass('Resources'); //from restler framework for API Explorer $r->addFilterClass('RateLimit'); //Add Filters as needed $r->handle(); //serve the response If you have successfully completed Installation Step 2, you should have Restler API Explorer installed in vendor/Luracast/explorer folder. Create a symbolic link of vendor/Luracast/explorer/dist or copy the folder and name it as explorer Place the explorer in the same folder as the index.php Explore the api and try it out by openings explorer/index.html from the web root on your browser Happy Exploring! :) Note:- Using eAccelerator can make restler to fail as it removes the comments. More info can be found here 5. Annotate Restler supports annotations in the form of PHPDoc comments for API fine tuning They are documented in detail under Annotations 6. Authorize In order to protect your api, authenticate and allow valid users <?php require_once '../../../vendor/restler.php'; use Luracast\Restler\Restler; $r = new Restler(); $r->addAPIClass('YourApiClassNameHere'); // repeat for more $r->addAuthenticationClass('CustomAuth'); //Add Authentication classes as needed $r->handle(); //serve the response 7. Start Production By default Restler runs in debug mode more fine tuned for API developer, by showing detailed error messages and prettifying the api result to human readbale form By turning on production mode you will gain some performance boost as it will cache the routes (comment parsing happens only once instead of every api call), few other files and avoid giving out debug information <?php require_once '../../../vendor/restler.php'; use Luracast\Restler\Restler;  //setup restler  $r = new Restler(true); //turn on production mode by passing true. //If you are using file based cache (the default) make sure cache folder is //writable. when you make changes to your code make sure you delete the // routes.php inside the cache folder //... Change Log Restler 3.0 RC5 Scope (an dependency injection container) is added. It's register method allows adding api classes that has some dependencies. Improves HtmlFormat to support blade templates and makes it easily extendable to add your own templates. HtmlFormat::$format has been renamed as HtmlFormat::$template for better clarrity HtmlFormat now supports auto templating to load relevant template for an API method based on the mapped url. Tag, a utility class for generating html tags in object oriented way. Emmet class that extends a subset of emmet to create a a template engine. Forms class to auto generate forms for any API method prebuilt in HTML5, Twitter Bootstrap 3, Zurb Foundation formats. Validator improved to allow suppressing validation errors from throwing exceptions immediatly, so that API call can reach the API method Validator improved to be form validation friendly. Nav class creating html navigation interface. OAuth examles updgrated to use version 1.0 of OAuth2 library. Many bug fixes and improvements. Restler 3.0 RC4 $reques_data in api method parameters and getRequestData() on restler instance now excludes $_GET parameters. Returning null from api method now excludes the response body. This behaviour can be changed by setting Defaults::$emptyBodyForNullResponse to false. Added many api examples under tests folder for testing feature by feature using BDD Support for custom class parameters and array of custom class parameters Ability to pass the parameter directly as the body of the request when it is the only parameter Fixes to composer.json and publish stable release as composer package on packagist. New Routes class with improved routing, including wild card routes and smart routing based on paramter type. Possibility to use any autoloader including composer's autoloader for maximum interoperability Moved to using the rodneyrehm/plist package for CFPropertyList. Removed required packages as they are not technically ""required"" per se, Restler works out of the box. Created supported packages as require-dev instead which will be installed via composer install --dev Added suggested section for all the supported packages. Added keywords to package descriptor Added branch alias to indicate that v3 is the snapshot for v3.0.x-dev Released Restler as package on packagist. Restler 3.0 RC3 Added Defaults::$cacheDirectory to set cache directory in one central place Added JSONP support with JsFormat class by extending JsonFormat. Fixes fatal error when the JSON sent in the request body is not an object or array Improves inline comment parsing by array conversion when delimiter is found and tag is not @pattern RateLimit class re-written to support all range of time units second|minute|hour|day|week|month to have fine grained control Resources class improved to include description for body parameters Fixes Resources not to include namespace when the return type is array of custom class Fixed Resource not to include the API of another class when the current api name is a begins with part of the other API Added two more ways to exclude API's from explorer/documentation Resources::$excludedHttpMethods (array) Resources::$excludedPaths (array) Fixes unescaped unicode bug in PHP < 5.4 Fixes a bug with ValidationInfo parsing @choice inline comment Added Charset support Added Language (basic) support Updated the BDD tests to include new features Fixes a bug in Restler class which affects $_GET overriding Defaults Fixes a bug in XmlFormat parsing XML content to array Added support for JSONP via jsFormat extension of JsonFormat Fixes a bug in unicode un-escaping for JsonFormat in PHP < 5.4 Fixes the order so that responseFormat->setCharset is called before encoding the response Documentation improvements and minor bug fixes Restler 3.0 RC2 Filter classes can use authentication status and respond differently for authenticated users by implementing iUseAuthentication interface RateLimit class added to rate limit the api usage Fixed a bug with setCompatibilityMode Resources updated to use only paths for resource identification instead of class name Enabled Access Control for Documentation Fixed CommentParser to ignore repeated white space so that it parses comments correctly Fixed comment parsing for @status and @expires tags Added the following Examples Documentation Rate Limit Access Control CRUD example updated to include PATCH support Restler 3.0 Restler 3.0 is completely rewritten from Restler 2.0 with best practices in mind for PHP Coding RESTfulness and/or Pragmatic REST API Design Restler 3.0 uses namespaces, Late Static Bindings, and Closures and thus it is PHP 5.3+ only (if you need PHP 5.0+ support use Restler 2) provides backward compatibility for Restler 1 and 2. Use $r->setCompatibilityMode($version); supports hybrid api which provides extended data to authenticated users Use @access hybrid PHPDoc comment uses smart auto routing by default where API method parameters that have default values are no longer mapped to the URL, instead they are mapped to query strings to reduce ambiguity in the url. supports suppress_response_codes as query string, when set to true; all http responses will be returned with HTTP OK with the errors in the body to accommodate mobile and less privileged clients. has improved CommentParser which adds support for embedded data in multiple formats inline doc comments {@name value} query string params ``` param1=value&param2=value2``` json ``` {""param1"": value, ""param2"": value2}``` which can be placed in multi-lines has Defaults class with static properties that can be changed to suit the needs iAuthenticate is now using __isAllowed method instead of __isAuthenticated so that same class can be used for Authentication or Filtering iUseAuthentication interface added to help hybrid access api methods and filters to find out about user authentication status iFilter interface updated to provide charset support ...(more to follow) Restler 2.0 Restler 2.0 is a major rewrite to use convention over configuration and it is optimized for performance. Here are some of the major changes and improvements PHPDoc comments to map a method to URI are now optional. All public methods that does not begin with an underscore are mapped automatically to the method name (gateway\classname\methodname\param1\...) If we do not specify the second parameter for $restler->addAPIClass it will be mapped to the class name instead of mapping it to the root Restler 2 is written for PHP 5.3 and above but it make use of compat.php and work on any version of PHP starting from PHP 5.0 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Luracast/Restler"	"A lightweight framework to expose PHP methods as RESTful web API."	"true"
"API"	"wsdl2phpgenerator"	"https://github.com/wsdl2phpgenerator/wsdl2phpgenerator"	"A tool to generate PHP classes from SOAP WSDL files."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"456"	"31"	"145"	"GitHub - wsdl2phpgenerator/wsdl2phpgenerator: Simple utility and class library for generating php classes from a wsdl file. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 456 Fork 145 wsdl2phpgenerator/wsdl2phpgenerator Code Issues 48 Pull requests 19 Pulse Graphs Simple utility and class library for generating php classes from a wsdl file. http://wsdl2phpgenerator.github.io/wsdl2phpgenerator 465 commits 5 branches 45 releases 34 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master no-travis-composer-prefer-source php5.2 update-scrutinizer-config Nothing to show release1.4.1-php5.3 release1.4.1-php5.2 release1.3-php5.3 release1.3-php5.2 release1.2-php5.3 release1.2-php5.2 release1.1-php5.3 release1.1-php5.2 release1.0-php5.3 release1.0-php5.2 release0.1.2-php5.3 release0.1.2-php5.2 release0.1.1-php5.3 release0.1.1-php5.2 release-1.5.1 release-1.5.0 3.3.1 3.3.0 3.2.1 3.2.0 3.1.2 3.1.1 3.1.0 3.0.1 3.0.0 2.5.5 2.5.4 2.5.3 2.5.2 2.5.1 2.5.0 2.4.2 2.4.1 2.4.0 2.3.0 2.2.2 2.2.1 2.2.0 2.1.0 2.0.3 2.0.2 2.0.1 2.0.0 1.4.2-php5.3 1.4.2-php5.2 Nothing to show New pull request Latest commit 8abda9e Feb 29, 2016 kasperg Merge pull request #267 from xoeoro/xoeoro-patch-1 … Update ArrayType.php Permalink Failed to load latest commit information. docs Update documentation Nov 24, 2014 lib/PhpSource Make array types implement ArrayAccess and Iterator Jan 5, 2016 src Update ArrayType.php. fix possibility use '$arrayModel[] = $item;' sy… Feb 29, 2016 tests Update ArrayType.php. fix possibility use '$arrayModel[] = $item;' sy… Feb 29, 2016 .gitignore Refactor the project to be used as a library only. Jul 14, 2014 .scrutinizer.yml Use local version of PHPUnit for scrutiniser tests Dec 27, 2014 .travis.yml Add php 7 build testing to Travis CI Dec 2, 2015 CHANGES Release 3.3.1 Jan 13, 2016 CONTRIBUTING.md Split contribution guidelines into pull requests and issues. Mar 16, 2014 LICENSE Update LICENCE Apr 7, 2011 README.md Release 3.3.0 Jan 5, 2016 build.xml Add and commit changes to README when creating a release. Jan 4, 2015 composer.json Fix build on PHP 5.3 and 5.4 Feb 14, 2016 phpunit.xml.dist Convert to PSR4 file structure. Nov 24, 2014 README.md wsdl2phpgenerator Simple WSDL to PHP classes converter. Takes a WSDL file and outputs class files ready to use. Uses the MIT license. New major version: 3.0 A new major version of wsdl2phpgenerator has recently been released: 3.0. This introduces changes to both configuration and generated code. The changes makes it more flexible to use, easier to include in other projects, promotes contributions and reduces maintenance. 2.x users are encourage to read a walkthrough of what is new in 3.0. Contributors Originally developed by @walle and includes bug fixes and improvements from @vakopian, @statikbe, @ecolinet, @nuth, @chriskl, @RSully, @jrbasso, @dypa, @Lafriks, @SamMousa, @xstefanox, @garex, @honzap, @jk, @sheeep, @colinodell, @red-led, @ivol84, @wasinger, @devlead, @NoUseFreak, @HighOnMikey, @theHarvester, @fduch, @methodin, @nkm, @jongotlin, @yethee, @rindeal and @kasperg. Pull requests are very welcome. Please read our guidelines for contributing. Mailing list There is a mailing list for the project at https://groups.google.com/forum/#!forum/wsdl2phpgenerator Installation Add wsdl2phpgenerator to your Composer project: composer require wsdl2phpgenerator/wsdl2phpgenerator The project will also be available as a command line application which can be downloaded as a phar file. Usage To generate classes create a Generator instance and pass it a Config instance. $generator = new \Wsdl2PhpGenerator\Generator(); $generator->generate(     new \Wsdl2PhpGenerator\Config(array(         'inputFile' => 'input.wsdl',         'outputDir' => '/tmp/output'     )) ); After generating the code then configure your existing autoloader accordingly. The generated code also comes with a simple autoload.php file which can be included directly. This registers a simple autoloader for the generated classes. Example usage The following example will generate code from a web service, load the generated classes, call the web service and return the result over the course of a single process. $generator = new \Wsdl2PhpGenerator\Generator(); $generator->generate(     new \Wsdl2PhpGenerator\Config(array(         'inputFile' => 'http://www.webservicex.net/CurrencyConvertor.asmx?WSDL',         'outputDir' => '/tmp/CurrencyConverter'     )) );  require '/tmp/CurrencyConverter/autoload.php';  // A class will generated representing the service. // It is named after the element in the WSDL and has a method for each operation. $service = new \CurrencyConvertor(); $request = new \ConversionRate(\Currency::USD, \Currency::EUR); $response = $service->ConversionRate($request);  echo $response->getConversionRateResult(); Note that this is not recommended usage. Normally code generation and web services calls will be two separate processes. Options The generator supports a range of options which can be set in the configuration. inputFile The path or url to the WSDL to generate classes from. outputDir The directory to place the generated classes in. It will be created if it does not already exist. namespaceName The namespace to use for the generated classes. If not set classes will be generated without a namespace. Example usage The following configuration will place generated code from the CDYNE Weather web service under the CDyne\Weather namespace: $generator = new \Wsdl2PhpGenerator\Generator(); $generator->generate(     new \Wsdl2PhpGenerator\Config(array(         'inputFile' => 'http://wsf.cdyne.com/WeatherWS/Weather.asmx?wsdl',         'outputDir' => '/tmp/weather',         'namespaceName' => 'CDyne\Weather'     )) ); classNames A comma-separared list or array of class names to generate. All other classes in the WSDL will be ignored. This option is deprecated and will be removed in 4.0.0. Use operationNames instead. Example usage The following configuration will only generate AmazonEC2 and CopyImageType classes from the Amazon EC2 webservice. $generator = new \Wsdl2PhpGenerator\Generator(); $generator->generate(     new \Wsdl2PhpGenerator\Config(array(         'inputFile' => 'https://s3.amazonaws.com/ec2-downloads/2013-10-01.ec2.wsdl',         'outputDir' => '/tmp/amazon',         'classNames' => 'AmazonEC2, CopyImageType'     )) ); operationNames A comma-separated list or array of service operations to generate. This will only generate types that are needed for selected operations. The generated service class will only contain selected operation. Example usage The following configuration will generate operations and types for ReplaceRouteTableAssociation and RequestSpotInstances operations. $generator = new \Wsdl2PhpGenerator\Generator(); $generator->generate(     new \Wsdl2PhpGenerator\Config(array(         'inputFile' => 'https://s3.amazonaws.com/ec2-downloads/2013-10-01.ec2.wsdl',         'outputDir' => '/tmp/amazon',         'operationNames' => 'ReplaceRouteTableAssociation, RequestSpotInstances'     )) ); sharedTypes If enabled this makes all types with the same identify use the same class and only generate it once. The default solution is to prepend numbering to avoid name clashes. constructorParamsDefaultToNull If enabled this sets the default value of all parameters in all constructors to null. If this is used then properties must be set using accessors. proxy Specify a proxy to use when accessing the WSDL and other external ressources. This option should be used instead of the proxy options support by the PHP SoapClient as wsdl2phpgenerator uses more than the SOAP client to extract information. The following formats are supported: An array with the following keys host, port, login and password matching the proxy options support by the PHP SoapClient A string in an URL-like format The proxy information is used by is used when accessing the WSDL to generate the code and for subsequent requests to the SOAP service. Example usage The following configuration will use a proxy to access the Google DoubleClick Ad Exchange Buyer SOAP API: $generator = new \Wsdl2PhpGenerator\Generator(); $generator->generate(     new \Wsdl2PhpGenerator\Config(array(         'inputFile' => 'https://ads.google.com/apis/ads/publisher/v201306/ActivityService?wsdl',         'outputDir' => '/tmp/amazon',         'proxy' => 'tcp://user:secret@192.168.0.1:8080'     )) ); soapClientClass The base class to use for generated services. This should be a subclass of the PHP SoapClient. Examples of third party SOAP client implementations which can be used: BeSimpleSoapClient ZendFramework2 SOAP Component soap-plus SoapClientEx Note that it is the responsibility of the surrounding code to ensure that the base class is available during code generation and when calling web services. Example usage The following configuration will use the BeSimple SOAP client as base class: $generator = new \Wsdl2PhpGenerator\Generator(); $generator->generate(     new \Wsdl2PhpGenerator\Config(array(         'inputFile' => 'input.wsdl',         'outputDir' => '/tmp/output',         'soapClientClass' => '\BeSimple\SoapClient\SoapClient'     )) ); soapClientOptions An array of configuration options to pass to the SoapClient. They will be used when accessing the WSDL to generate the code and as defaults for subsequent requests to the SOAP service. The PHP documentation has a list of supported options. The list of options for the client can be extended by using more advanced SoapClient implementations. Note that wsdl2phpgenerator expects the features option to contain SOAP_SINGLE_ELEMENT_ARRAYS. This ensures that type hints are consistent even if sequences only contain one element. If the features option is set explicitly in soapClientOptions the SOAP_SINGLE_ELEMENT_ARRAYS must also be added explicitly. Example usage The following configuration will enable basic authentication and set the connection timeout to 60 seconds. $generator = new \Wsdl2PhpGenerator\Generator(); $generator->generate(     new \Wsdl2PhpGenerator\Config(array(         'inputFile' => 'input.wsdl',         'outputDir' => '/tmp/output',         'soapClientOptions' => array(             'authentication' => SOAP_AUTHENTICATION_BASIC,             'login' => 'username',             'password' => 'secret',             'connection_timeout' => 60     )) )); Versioning This project aims to use semantic versioning. The following constitutes the public API: \Wsdl2PhpGenerator\GeneratorInterface \Wsdl2PhpGenerator\ConfigInterface Generated code Backwards incompatible changes to these means that the major version will be increased. Additional features and bug fixes increate minor and patch versions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/wsdl2phpgenerator/wsdl2phpgenerator"	"A tool to generate PHP classes from SOAP WSDL files."	"true"
"Caching"	"Alternative PHP Cache (APC)"	"http://php.net/manual/en/book.apc.php"	"Open opcode cache for PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PHP: APC - Manual Downloads Documentation Get Involved Help Getting Started Introduction A simple tutorial Language Reference Basic syntax Types Variables Constants Expressions Operators Control Structures Functions Classes and Objects Namespaces Errors Exceptions Generators References Explained Predefined Variables Predefined Exceptions Predefined Interfaces and Classes Context options and parameters Supported Protocols and Wrappers Security Introduction General considerations Installed as CGI binary Installed as an Apache module Filesystem Security Database Security Error Reporting Using Register Globals User Submitted Data Magic Quotes Hiding PHP Keeping Current Features HTTP authentication with PHP Cookies Sessions Dealing with XForms Handling file uploads Using remote files Connection handling Persistent Database Connections Safe Mode Command line usage Garbage Collection DTrace Dynamic Tracing Function Reference Affecting PHP's Behaviour Audio Formats Manipulation Authentication Services Command Line Specific Extensions Compression and Archive Extensions Credit Card Processing Cryptography Extensions Database Extensions Date and Time Related Extensions File System Related Extensions Human Language and Character Encoding Support Image Processing and Generation Mail Related Extensions Mathematical Extensions Non-Text MIME Output Process Control Extensions Other Basic Extensions Other Services Search Engine Extensions Server Specific Extensions Session Extensions Text Processing Variable and Type Related Extensions Web Services Windows Only Extensions XML Manipulation Keyboard Shortcuts ? This help j Next menu item k Previous menu item g p Previous man page g n Next man page G Scroll to bottom g g Scroll to top g h Goto homepage g s Goto search (current page) / Focus search box Introduction » « Affecting PHP's Behaviour PHP Manual Function Reference Affecting PHP's Behaviour Change language: English Brazilian Portuguese Chinese (Simplified) French German Japanese Korean Romanian Russian Spanish Turkish Other Edit Report a Bug Alternative PHP Cache Introduction Installing/Configuring Requirements Installation Runtime Configuration Resource Types Predefined Constants APC Functions apc_add — Cache a new variable in the data store apc_bin_dump — Get a binary dump of the given files and user variables apc_bin_dumpfile — Output a binary dump of cached files and user variables to a file apc_bin_load — Load a binary dump into the APC file/user cache apc_bin_loadfile — Load a binary dump from a file into the APC file/user cache apc_cache_info — Retrieves cached information from APC's data store apc_cas — Updates an old value with a new value apc_clear_cache — Clears the APC cache apc_compile_file — Stores a file in the bytecode cache, bypassing all filters. apc_dec — Decrease a stored number apc_define_constants — Defines a set of constants for retrieval and mass-definition apc_delete_file — Deletes files from the opcode cache apc_delete — Removes a stored variable from the cache apc_exists — Checks if APC key exists apc_fetch — Fetch a stored variable from the cache apc_inc — Increase a stored number apc_load_constants — Loads a set of constants from the cache apc_sma_info — Retrieves APC's Shared Memory Allocation information apc_store — Cache a variable in the data store APCIterator — The APCIterator class APCIterator::__construct — Constructs an APCIterator iterator object APCIterator::current — Get current item APCIterator::getTotalCount — Get total count APCIterator::getTotalHits — Get total cache hits APCIterator::getTotalSize — Get total cache size APCIterator::key — Get iterator key APCIterator::next — Move pointer to next item APCIterator::rewind — Rewinds iterator APCIterator::valid — Checks if current position is valid add a note User Contributed Notes 3 notes up down 17 mike at eastghost dot com ¶ 4 years ago Was using Memcache and Memcached extensions, painfully bouncing between faults, failures and shortcomings of each.  My two cents: Neither of these old drivers has been a smash hit, repressing and slowly dooming of the true potential and full use of unix memcached. The pain finally drove to me to try APC's apc_store and apc_fetch.  The results?  Instant success, no more errors, an order of magnitude (at least) speed boost, plus one less thing (memcached) to run.  Nice.  Never going back again.  Thank y'all. up down 1 umut dot kirgoz at gmail dot com ¶ 4 years ago Since APC 3.1.3, there is a bug (http://pecl.php.net/bugs/bug.php?id=16814) which produces warnings like ""Potential Cache Slam Averted for Key"" when slam defense is on and you're trying to write a key that already exists. These is not a fix right now for this, but you can change the APC settings from php.ini file like below if possible: apc.write_lock = 1 apc.slam_defense = 0 up down -44 hello at haroonahmad dot co dot uk ¶ 7 years ago Disclaimer: i do not guarantee it will work for you so you better use it at your own risk. It works for me. * I am using # symbol for all shell commands I am posting a quick step-by-step guide to install APC on servers (dedicated or VPS) with cpanel/whm working. First login as a root to your server/vps and make a directory to work with this plugin, #mkdir /home/APC-php #cd /home/APC-php now here we will first download the APC with following command #wget http://pecl.php.net/get/APC-3.0.14.tgz you can check for the latest version now you can use gzip and tar separately or tar -xzvf to unzip this file #tar -xzvf APC-3.0.14.tgz now you will have a APC-3.0.14 folder. #cd APC-3.0.14 now you have to make php configuration files by following command #phpize after this use following three commands # ./configure --enable-apc --enable-apc-mmap --with-apxs --with-php-config=/usr/bin/php-config *if you do not know the php path then execute ( which php ) command it will display the path. on a typical cpanel vps it could be /usr/bin/php-config or /usr/local/bin/php-config but you better check it before executing the above command) #make #make test #make install NOTE: if you are using suPHP then skip --with-apxs *one more thing, if you use #make test command it shows 3 tests failed then do not worry, it showed at least to me but worked with the final steps. the (make install) command will return the apc.so module path, note down that with you as you will have to feed it in the php.ini file in the next step. check your php.ini location by #php -i | grep php.ini then open it with your favorite editor. mine was at #vi /usr/local/lib/php.ini and go to the last line and paste the following extension=""apc.so"" now there is a catch in it, if you have other modules installed and their extension directory is different than the one MAKE INSTALL showed for APC so you have to move your apc.so to that directory so that all modules are in the same directory. in my case my APC directory was /usr/lib/php/extensions/no-debug-non-zts-20060613/ but i moved apc.so from this location to my other location where my other extensions.so files were. you can check that path in php.ini sectiion of extension_dir = """" after this restart your apache, for different servers it may vary mine worked with #service httpd restart if everything works fine it will restart apache without showing any error. in case of any error, roll back your php.ini changes and restart apache and discuss your problem in some forum or email me at hello@haroonahmad.co.uk now check the phpinfo() output in your browser and it will display APC version information etc. for command line you might do php -i | grep apc I hope it helps. Haroon Ahmad add a note Affecting PHP's Behaviour APC APCu APD bcompiler BLENC Error Handling htscanner inclued Memtrack OPcache Output Control PHP Options/Info runkit scream uopz Weakref WinCache Xhprof Copyright © 2001-2016 The PHP Group My PHP.net Contact Other PHP.net sites Mirror sites Privacy policy"	"null"	"null"	"Open opcode cache for PHP."	"true"
"Caching"	"APIx Cache"	"https://github.com/frqnck/apix-cache"	"A thin PSR-6 cache wrapper to various caching backends emphasising cache tagging and indexing."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"29"	"9"	"19"	"GitHub - frqnck/apix-cache: A thin PSR-6 cache wrapper with a generic interface to various caching backends emphasising cache tagging and indexing. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 29 Fork 19 frqnck/apix-cache Code Issues 1 Pull requests 1 Pulse Graphs A thin PSR-6 cache wrapper with a generic interface to various caching backends emphasising cache tagging and indexing. 325 commits 2 branches 14 releases 5 contributors PHP 99.0% Shell 1.0% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master mongodb Nothing to show 1.2.6 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.1.0 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit 8995fcc Jul 5, 2016 frqnck Minor changes Permalink Failed to load latest commit information. src Minor changes Jul 5, 2016 tests Adds `msgpack` handler Jul 5, 2016 .gitattributes Release 1.2.3 Jan 5, 2016 .gitignore Updated PSR-Cache (Draft) to PSR-Cache (Accepted) Jan 5, 2016 .scrutinizer.yml Fix CI [skip ci] Jul 4, 2016 .travis.yml Travis Jul 5, 2016 CHANGELOG.md Adds `msgpack` handler Jul 5, 2016 LICENSE.txt Date update [skip ci] Jan 8, 2016 README.md Minor changes Jul 5, 2016 composer.json Typo [skip ci] Jul 4, 2016 phpunit.xml.dist Change of directory structure. Sep 19, 2014 README.md APIx Cache, cache-tagging for PHP APIx Cache is a generic and thin cache wrapper with a simple interface to various different caching backends and emphasising cache tagging and indexing. Cache-tagging allows to find/update all data items with one or more given tags. Providing, for instance, a batch delete of all obsolete entries matching a speficic tag such as a version string. PSR-6 (Cache) standard is provided thru a factory wrapper class. Fully unit tested and compliant with PSR-1, PSR-2, PSR-4 and PSR-Cache. Continuously integrated with PHP 5.3, 5.4, 5.5, 5.6, 7.0 and HHVM, and against APC, Redis, MongoDB, Sqlite, MySQL, PgSQL and Memcached, ... supports a range of serializers: igBinary, msgpack, json, php, ... Available as a Composer and as a PEAR package. Cache backends Currently, the following cache store are supplied: APC (which also works with APCu) with tagging support, Redis using the PhpRedis extension with tagging support, MongoDB using the mongo native PHP extension with tagging support, Memcached using the Memcached extension with indexing, tagging and namespacing support, and relational databases usign PDO with tagging support: Dedicated drivers for SQLite, PostgreSQL and MySQL (also works with Amazon Aurora, MariaDB and Percona), A generic Sql1999 driver for 4D, Cubrid, SQL Server, Sybase, Firebird, ODBC, Interbase, IBM DB2, IDS, Oracle... Directory and Files based with tagging support, Runtime, in-memory array storage. Feel free to comment, send pull requests and patches... Factory usage (PSR-Cache wrapper)   use Apix\Cache;    $backend = new \Redis();   # $backend = new \PDO('sqlite:...'); // Any supported client object e.g. Memcached, MongoClient, ...   # $backend = new Cache\Files($options); // or one that implements Apix\Cache\Adapter   # $backend = 'apc'; // or an adapter name (string) e.g. ""APC"", ""Runtime""   # $backend = new MyArrayObject(); // or even a plain array() or \ArrayObject.    $pool = Cache\Factory::getPool($backend);             // without tagging support   # $pool = Cache\Factory::getTaggablePool($backend); // with tagging    $item = $pool->getItem('wibble_id');    if ( !$item->isHit() ) {     $data = compute_expensive_stuff();     $item->set($data);     $pool->save($item);   }    return $item->get(); Basic usage (APIx native)   use Apix\Cache;    $cache = new Cache\Apc;    // try to retrieve 'wibble_id' from the cache   if ( !$data = $cache->load('wibble_id') ) {      // otherwise, get some data from the origin     // example of arbitrary mixed data     $data = array('foo' => 'bar');      // and save it to the cache     $cache->save($data, 'wibble_id');   } You can also use the folowing in your use cases:   // save $data to the cache as 'wobble_id',   // tagging it along the way as 'baz' and 'flob',   // and set the ttl to 300 seconds (5 minutes)   $cache->save($data, 'wobble_id', array('baz', 'flob'), 300);    // retrieve all the cache ids under the tag 'baz'   $ids = $cache->loadTag('baz');    // clear out all items with a 'baz' tag   $cache->clean('baz');    // remove the named item   $cache->delete('wibble_id');    // flush out the cache (of all -your- stored items)   $cache->flush(); Advanced usage Options shared by all the backends   use Apix\Cache;    // default options   $options = array(       'prefix_key'  => 'apix-cache-key:', // prefix cache keys       'prefix_tag'  => 'apix-cache-tag:', // prefix cache tags       'tag_enable'  => true               // wether to enable tags support   );    // start APC as a local cache   $local_cache = new Cache\Apc($options); Redis specific   // additional (default) options   $options['atomicity']  = false;   // false is faster, true is guaranteed   $options['serializer'] = 'php';   // null, php, igbinary, json and msgpack    $redis_client = new \Redis;       // instantiate phpredis*   $distributed_cache = new Cache\Redis($redis_client, $options); * see PhpRedis for instantiation usage. Memcached specific   // additional (default) options, specific to Memcached   $options['prefix_key'] = 'key_';  // prefix cache keys   $options['prefix_tag'] = 'tag_';  // prefix cache tags   $options['prefix_idx'] = 'idx_';  // prefix cache indexes   $options['prefix_nsp'] = 'nsp_';  // prefix cache namespaces   $options['serializer'] = 'auto';  // auto, igbinary, msgpack, php, json and json_array.    $memcached  = new \Memcached;     // a Memcached*** instance   $shared_cache = new Cache\Memcached($memcached, $options); The serialzer auto (default) is igBinary if available, then msgpack if available, then php otherwise. *** see Memcached for instantiation details. MongoDB specific   // additional (default) options   $options['object_serializer'] = 'php';  // null, json, php, igBinary   $options['db_name'] = 'apix';           // name of the mongo db   $options['collection_name'] = 'cache';  // name of the mongo collection    $mongo  = new \MongoClient;             // MongoDB native driver** instance   $cache = new Cache\Mongo($mongo, $options); ** see MongoDB for instantiation usage. PDO specific   // additional (default) options, specific to the PDO backends   $options['db_table']   = 'cache';       // table to hold the cache   $options['serializer'] = 'php';         // null, php, igbinary, json and msgpack   $options['preflight']  = true;          // wether to preflight the DB   $options['timestamp']  = 'Y-m-d H:i:s'; // the timestamp DB format    // with SQLITE   $dbh = new \PDO('sqlite:/tmp/apix_tests.sqlite3');   $relational_cache = new Cache\Pdo\Sqlite($dbh, $options);    // with MYSQL, MariaDB and Percona   $dbh = new \PDO('mysql:host=xxx;port=xxx;dbname=xxx', 'user', 'pass');   $mysql_cache = new Cache\Pdo\Mysql($dbh, $options);    // with PGSQL   $dbh = new \PDO('pgsql:dbname=xxx;host=xxx', 'xxx', 'xxx');   $postgres_cache = new Cache\Pdo\Pgsql($dbh, $options);    // with a SQL:1999 compliant DB, e.g. Oracle   $dbh = new \PDO('oci:dbname=xxx', 'xxx', 'xxx');   $sql1999_cache = new Cache\Pdo\Sql1999($dbh, $options); The preflight option will create on-the-fly the required tables if these are mssing. Once these tables exist, set preflight to false in order to avoid the extraneous checks. Filesystem specific   // additional (default) options   $options['directory'] = sys_get_temp_dir() . '/apix-cache'; // Directory where the cache is created   $options['locking'] = true;                                 // File locking (recommended)    $files_cache = new Cache\Files($options);   // or   $directory_cache = new Cache\Directory($options);  Files: the cache metadata (expiration time and tags) are stored in the cache file directly. Directory: the metadata are stored separately from the cached data. Installation This project adheres to Semantic Versioning and can be installed using composer: $ composer require apix/cache:1.2.*  All notable changes to this project are documented in its CHANGELOG. License This work is licensed under the New BSD license -- see the LICENSE for the full details. Copyright (c) 2010-2016 Franck Cassedanne Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/frqnck/apix-cache"	"A thin PSR-6 cache wrapper to various caching backends emphasising cache tagging and indexing."	"true"
"Caching"	"CacheTool"	"https://github.com/gordalina/cachetool"	"A tool to clear APC/opcode caches from the command line."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"225"	"10"	"18"	"GitHub - gordalina/cachetool: CLI App and library to manage apc & opcache. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 225 Fork 18 gordalina/cachetool Code Issues 2 Pull requests 1 Pulse Graphs CLI App and library to manage apc & opcache. http://gordalina.github.io/cachetool/ 194 commits 3 branches 42 releases 12 contributors PHP 99.1% Shell 0.9% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x gh-pages master Nothing to show 2.1.0 2.0.6 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 1.11.0 1.10.2 1.10.1 1.10.0 1.9.1 1.9.0 1.8.1 1.8.0 1.7.1 1.7.0 1.6.1 1.6.0 1.5.0 1.4.3 1.4.2 1.4.1 1.4.0 1.3.6 1.3.5 1.3.4 1.3.3 1.3.2 1.3.1 1.3.0 1.2.2 1.2.1 1.2.0 1.1.2 1.1.1 1.1.0 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit 22d5c7b Jun 15, 2016 gordalina committed on GitHub Merge pull request #36 from kornrunner/master … APCu support Permalink Failed to load latest commit information. bin Remove exit May 27, 2016 src/CacheTool APCu support Jun 1, 2016 tests APCu support May 31, 2016 .gitignore Use container for cache tool service Sep 23, 2014 .scrutinizer.yml Update scrutinizer config May 27, 2016 .travis.yml Do not allow php 7.0 to fail & submit code coverage May 27, 2016 LICENSE Initial Import Sep 22, 2014 README.md APCu support May 31, 2016 box.json Add update json schema Sep 23, 2014 composer.json Bump minimum required PHP version to 5.5.9 Mar 18, 2016 phpunit.xml.dist Remove unnecessary phpunit configuration Dec 13, 2014 README.md CacheTool - Manage cache in the CLI CacheTool allows you to work with apc, opcache, and the file status cache through the cli. It will connect to a fastcgi server (like php-fpm) and operate it's cache. Why is this useful? Maybe you want to clear the bytecode cache without reloading php-fpm or using a web endpoint Maybe you want to have a cron which deals with cache invalidation Maybe you want to see some statistics right from the console And many more... Note that, unlike APC and Opcache, the file status cache is per-process rather than stored in shared memory. This means that running stat:clear against PHP-FPM will only affect whichever FPM worker responds to the request, not the whole pool. Julien Pauli has written a post with more details on how the file status cache operates. Installation $ curl -sO http://gordalina.github.io/cachetool/downloads/cachetool.phar $ chmod +x cachetool.phar Usage (as an application) You can connect to a automatically guessed fastcgi server (if /var/run/php5-fpm.sock is a file or 127.0.0.1:9000) $ php cachetool.phar apc:cache:info --fcgi You can connect to a fastcgi server through ip $ php cachetool.phar apc:cache:info --fcgi=127.0.0.1:9000 Or by socket $ php cachetool.phar opcache:status --fcgi=/var/run/php5-fpm.sock Or to the cli $ php cachetool.phar opcache:status --cli You have some useful commands that you can you apc   apc:bin:dump             Get a binary dump of files and user variables   apc:bin:load             Load a binary dump into the APC file and user variables   apc:cache:clear          Clears APC cache (user, system or all)   apc:cache:info           Shows APC user & system cache information   apc:cache:info:file      Shows APC file cache information   apc:key:delete           Deletes an APC key   apc:key:exists           Checks if an APC key exists   apc:key:fetch            Shows the content of an APC key   apc:key:store            Store an APC key with given value   apc:sma:info             Show APC shared memory allocation information apcu   apcu:cache:clear         Clears APCu cache   apcu:cache:info          Shows APCu user & system cache information   apcu:cache:info:keys     Shows APCu keys cache information   apcu:key:delete          Deletes an APCu key   apcu:key:exists          Checks if an APCu key exists   apcu:key:fetch           Shows the content of an APCu key   apcu:key:store           Store an APCu key with given value   apcu:regexp:delete       Deletes all APCu key matching a regexp   apcu:sma:info            Show APCu shared memory allocation information opcache   opcache:configuration    Get configuration information about the cache   opcache:reset            Resets the contents of the opcode cache   opcache:status           Show summary information about the opcode cache   opcache:status:scripts   Show scripts in the opcode cache stat   stat:clear               Clears the file status cache, including the realpath cache   stat:realpath_get        Show summary information of realpath cache entries   stat:realpath_size       Display size of realpath cache Configuration File You can have a configuration file with the adapter configuration, allowing you to call CacheTool without --fcgi or --cli option. The file must be named .cachetool.yml. CacheTool will look for this file on the current directory and in any parent directory until it finds one. If the paths above fail it will try to load /etc/cachetool.yml configuration file. An example of what this file might look like is: Will connect to fastcgi at 127.0.0.1:9000 adapter: fastcgi fastcgi: 127.0.0.1:9000 Will connect to cli (disregarding fastcgi configuration) adapter: cli fastcgi: /var/run/php5-fpm.sock CacheTool writes files to the system temporary directory (given by sys_get_temp_dir()) but if you want to change this, for example, if your fastcgi service is run with PrivateTemp you can set it on the config file: adapter: fastcgi fastcgi: /var/run/php5-fpm.sock temp_dir: /dev/shm/cachetool Usage (as a library) Add it as a dependency $ composer require gordalina/cachetool If you want to use it in a Symfony 2.x project, require the 1.x version $ composer require gordalina/cachetool:~1.0 Create instance use CacheTool\Adapter\FastCGI; use CacheTool\CacheTool;  $adapter = new FastCGI('127.0.0.1:9000', $tempDir = '/tmp'); $cache = CacheTool::factory($adapter); You can use apc and opcache functions $cache->apc_clear_cache('both'); $cache->opcache_reset(); Proxies CacheTool depends on Proxies to provide functionality, by default when creating a CacheTool instance from the factory all proxies are enabled ApcProxy, OpcacheProxy and PhpProxy, you can customize it or extend to your will like the example below: use CacheTool\Adapter\FastCGI; use CacheTool\CacheTool; use CacheTool\Proxy;  $adapter = new FastCGI('/var/run/php5-fpm.sock'); $cache = new CacheTool(); $cache->setAdapter($adapter); $cache->addProxy(new Proxy\ApcProxy()); $cache->addProxy(new Proxy\PhpProxy()); Updating CacheTool Running php cachetool.phar self-update will update a phar install with the latest version. Requirements PHP 5.3.3 Testing After running composer install, run ./vendor/bin/phpunit License CacheTool is licensed under the MIT License - see the LICENSE for details Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gordalina/cachetool"	"A tool to clear APC/opcode caches from the command line."	"true"
"Caching"	"Cake Cache"	"https://github.com/cakephp/cache"	"A caching library (CP)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"23"	"4"	"GitHub - cakephp/cache: [READ-ONLY] Easy to use Caching library with support for multiple caching backends. This repo is a split of the main code that can be found in https://github.com/cakephp/cakephp Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 8 Fork 4 cakephp/cache Code Pull requests 0 Pulse Graphs [READ-ONLY] Easy to use Caching library with support for multiple caching backends. This repo is a split of the main code that can be found in https://github.com/cakephp/cakephp 155 commits 7 branches 49 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3-0 3-1 3.next 3.0 3.1 3.2 master Nothing to show 3.3.0-beta 3.2.12 3.2.11 3.2.10 3.2.9 3.2.8 3.2.7 3.2.6 3.2.5 3.2.4 3.2.3 3.2.2 3.2.1 3.2.0 3.2.0-RC1 3.1.13 3.1.10 3.1.9 3.1.8 3.1.7 3.1.6 3.1.5 3.1.4 3.1.3 3.1.2 3.1.1 3.1.0 3.1.0-beta2 3.1.0-beta 3.1.0-RC1 3.0.18 3.0.15 3.0.13 3.0.12 3.0.11 3.0.10 3.0.9 3.0.8 3.0.7 3.0.6 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 3.0.0-beta3 3.0.0-RC2 3.0.0-RC1 Nothing to show New pull request Latest commit 4b6b42e Jun 25, 2016 dakota committed on GitHub Fix issue with cache groups when creating a cache engine … If a cache engine is configured by passing in a already constructed instance, any potential groups used by that engine are lost. This can have dire consequences when trying to call (for example), `Cache::groupConfigs()`. I noticed this problem with DebugKit's cache spies. Permalink Failed to load latest commit information. Engine Fix typo in class name. May 9, 2016 Cache.php Fix issue with cache groups when creating a cache engine Jun 25, 2016 CacheEngine.php remove all reference to DS contant Feb 21, 2016 CacheRegistry.php Make all doc block classes FQCN as per CS. Feb 2, 2016 README.md use short array syntax for docs Jan 1, 2015 composer.json Declare splits as stable. Jan 28, 2016 README.md CakePHP Caching Library The Cache library provides a Cache service locator for interfacing with multiple caching backends using a simple to use interface. The caching backends supported are: Files APC Memcached Redis Wincache Xcache Usage Caching engines need to be configured with the Cache::config() method. use Cake\Cache\Cache;  // Using a short name Cache::config('default', [     'className' => 'File',     'duration' => '+1 hours',     'path' => sys_get_tmp_dir(),     'prefix' => 'my_app_' ]);  // Using a fully namespaced name. Cache::config('long', [     'className' => 'Cake\Cache\Engine\ApcEngine',     'duration' => '+1 week',     'prefix' => 'my_app_' ]);  // Using a constructed object. $object = new FileEngine($config); Cache::config('other', $object); You can now read a write from the cache: $data = Cache::remember('my_cache_key', function () {     return Service::expensiveCall(); }); The code above will try to look for data stored in cache under the my_cache_key, if not found the callback will be executed and the returned data will be cached for future calls. Documentation Please make sure you check the official documentation Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cakephp/cache"	"A caching library (CP)."	"true"
"Caching"	"Doctrine Cache"	"https://github.com/doctrine/cache"	"A caching library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"257"	"33"	"132"	"GitHub - doctrine/cache: Doctrine Cache component Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 33 Star 257 Fork 132 doctrine/cache Code Issues 11 Pull requests 13 Pulse Graphs Doctrine Cache component 508 commits 4 branches 17 releases 68 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.4.x 1.5.x 1.6.x master Nothing to show v1.6.0 v1.5.4 v1.5.3 v1.5.2 v1.5.1 v1.5.0 v1.4.4 v1.4.3 v1.4.2 v1.4.1 v1.4.0 v1.3.2 v1.3.1 v1.3.0 v1.2.0 v1.1 v1.0 Nothing to show New pull request Latest commit fe68e4f Jul 15, 2016 Ocramius #172 synax error hotfix Permalink Failed to load latest commit information. lib/Doctrine/Common/Cache #172 synax error hotfix Jul 15, 2016 tests Merge pull request #171 from localheinz/fix/short Jul 15, 2016 .coveralls.yml Build improvements Sep 26, 2013 .gitattributes [git] Add .gitattributes to remove unneeded files Mar 30, 2016 .gitignore Clover report should be ignored Dec 31, 2015 .scrutinizer.yml Adding scrutinizer configuration Dec 31, 2015 .travis.yml Removing `vendor` from cached dirs Dec 31, 2015 LICENSE Update LICENSE Oct 21, 2015 README.md Added link to the documentation Jun 29, 2016 UPGRADE.md #16 - documenting breakage in file-based caches Jan 15, 2015 build.properties Fix build.properties Sep 26, 2013 build.xml Update build.xml Sep 26, 2013 composer.json Coveralls is not required anymore Dec 31, 2015 phpunit.xml.dist debugging php7 seg fault Nov 22, 2015 README.md Doctrine Cache Cache component extracted from the Doctrine Common project. Documentation Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/doctrine/cache"	"A caching library."	"true"
"Caching"	"Stash"	"https://github.com/tedious/Stash"	"Another library for caching."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"658"	"36"	"91"	"GitHub - tedious/Stash: The place to keep your cache. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 36 Star 658 Fork 91 tedious/Stash Code Issues 25 Pull requests 9 Pulse Graphs The place to keep your cache. http://www.stashphp.com 737 commits 3 branches 19 releases Fetching contributors PHP 98.2% Shell 1.8% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags coveralls master v1.0.0-dev Nothing to show v0.14.1 v0.13.2 v0.13.1 v0.12.3 v0.12.2 v0.12.1 v0.11.6 v0.11.5 v0.11.4 v0.11.3 v0.11.2 v0.11.1 v0.10.5 v0.10.4 v0.10.3 v0.10.2 v0.10.1 v0.9.5 v0.9.4 Nothing to show New pull request Latest commit 6aec97c Jun 14, 2016 tedivm committed on GitHub Merge pull request #303 from csburton/master … Incorrect case of namespace Permalink Failed to load latest commit information. src/Stash Merge pull request #303 from csburton/master Jun 14, 2016 tests Removed sqlite2 support Dec 15, 2015 .coveralls.yml Update coveralls to reflect configuration updates Feb 1, 2016 .gitattributes Exclude development stuff from repository autogenerated ZIP archives May 20, 2016 .gitignore newlines at end of text files Mar 8, 2015 .php_cs Fix: Remove extra empty line from phpcs configuration Jul 7, 2015 .travis.yml [Travis] Don't allow php7 to fail anymore Dec 28, 2015 CHANGELOG.md Update CHANGELOG.md Feb 10, 2016 CONTRIBUTING.md Updated php-cs-fixer to 1.1 Nov 23, 2014 LICENSE newlines at end of text files Mar 9, 2015 README.md Readded require block example Feb 20, 2016 UPGRADE.md Update UPGRADE.md Nov 19, 2013 autoload.php Miscellaneous formatting Apr 15, 2014 composer.json Merge branch 'master' into v1.0.0-dev, resolving conflicts Jan 31, 2016 phpunit.xml.dist Switched off code coverage for hhvm Aug 1, 2015 README.md Stash - A PHP Caching Library Stash makes it easy to speed up your code by caching the results of expensive functions or code. Certain actions, like database queries or calls to external APIs, take a lot of time to run but tend to have the same results over short periods of time. This makes it much more efficient to store the results and call them back up later. Installing Installing Stash can be done through a variety of methods, although Composer is recommended. Composer Until Stash reaches a stable API with version 1.0 it is recommended that you review changes before Minor updates, although bug fixes will always be backwards compatible. ""require"": {   ""tedivm/stash"": ""0.14.*"" } or by using the composer require command: composer require tedivm/stash  Github Releases of Stash are available on Github. Documentation Although this README contains some useful data there is a lot more information at the main site, stashphp.com. Core Concepts Main Classes Stash has three main components: a Pool class that represents a specific grouping of cached objects, an Item class that provides access to individual objects, and a series of Driver classes that allow Stash to interact with caching systems. Each Driver is initialized and then passed into a Pool, at which point the developer can simply forget about it. Developers also have the option of using multiple Drivers together by joining them with the Composite Driver. The Pool class allows developers to perform a number of tasks. There are a few maintenance related tasks, such as running a ""Purge"" to allow backend systems to perform maintenance tasks or set new logging or driver classes. The Pool also can be used to create Item objects, singly or in groups. Each Item represents a single object inside the cache. It has a unique Key, meaning that any two Items created from the same Pool will contain the same Value. An Item can set, get and remove a value from a caching system. Keys A Key is a string that represents an Item in a caching system. At its simplest, a key is an alphanumeric string and has a one to one relationship with a value in the cache. Stash provides a feature known as ""stacks"" that allows developers to group related Items together so they can be erased as a group. This is done by giving Items a nested structure, similar to folders on a computer. Just like with folders, this is represented by adding slashes to the name representing the file or cached object. For example, a Key like ""/models/users/34/profile"" can allow developers to clear the data for specific users using that user's id, or clear the data for all users or even all models. It can also allow that developer to break up data into specific pieces to only load what is needed. Session Storage The provided Session class takes a Pool in its constructor and can then be registered as a Session Handler using the built-in PHP methods, the Session::registerHandler static function, or by using any framework that uses the SessionHandlerInterface interface. Drivers Stash currently supports the following backends: FileSystem Sqlite APC Memcached Redis Ephemeral (runtime only) Stash also supports a specialized ""Composite"" Driver which can contain any number of the above drivers. This allows developers to created multi-tiered drivers that use a variety of back ends. Symfony Integration The Stash Bundle makes using Stash inside of Symfony projects significantly easier. This bundle exposes Stash as a Service for developers to use, and allows Symfony to use Stash as a session handler. License Stash is licensed under the BSD License. See the LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tedious/Stash"	"Another library for caching."	"true"
"Caching"	"Zend Cache"	"https://github.com/zendframework/zend-cache"	"Another caching library (ZF2)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"26"	"28"	"GitHub - zendframework/zend-cache Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 15 Fork 28 zendframework/zend-cache Code Issues 12 Pull requests 3 Pulse Graphs No description or website provided. 7,565 commits 4 branches 66 releases 133 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages legacy master Nothing to show release-2.7.1 release-2.7.0 release-2.6.1 release-2.6.0 release-2.5.3 release-2.5.2 release-2.5.1 release-2.5.0 release-2.4.10 release-2.4.9 release-2.4.8 release-2.4.7 release-2.4.6 release-2.4.5 release-2.4.4 release-2.4.3 release-2.4.2 release-2.4.1 release-2.4.0 release-2.4.0rc7 release-2.4.0rc6 release-2.4.0rc5 release-2.4.0rc4 release-2.4.0rc3 release-2.4.0rc2 release-2.4.0rc1 release-2.3.9 release-2.3.8 release-2.3.7 release-2.3.6 release-2.3.5 release-2.3.4 release-2.3.3 release-2.3.2 release-2.3.1 release-2.3.0 release-2.2.10 release-2.2.9 release-2.2.8 release-2.2.7 release-2.2.6 release-2.2.5 release-2.2.4 release-2.2.3 release-2.2.2 release-2.2.1 release-2.2.0 release-2.2.0rc3 release-2.2.0rc2 release-2.2.0rc1 release-2.1.6 release-2.1.5 release-2.1.4 release-2.1.3 release-2.1.2 release-2.1.1 release-2.1.0 release-2.0.8 release-2.0.7 release-2.0.6 release-2.0.5 release-2.0.4 release-2.0.3 release-2.0.2 release-2.0.1 release-2.0.0 Nothing to show New pull request Latest commit 1f6d041 Jun 25, 2016 marc-mabe Merge branch 'hotfix/102', Close #102 Permalink Failed to load latest commit information. .ci refactor travis config to control php extention loading May 31, 2016 benchmark Added benchmarks using PHPBench Apr 20, 2016 doc/book Reviewed documentation for publication Feb 11, 2016 src Merge pull request #102 from marc-mabe/fs_racecond Jun 25, 2016 test Merge pull request #102 from marc-mabe/fs_racecond Jun 25, 2016 .coveralls.yml fixed coveralls Apr 16, 2016 .gitattributes [git] Exclude .ci folder from export Jun 5, 2015 .gitignore add composer.lock May 31, 2016 .php_cs Added benchmarks using PHPBench Apr 20, 2016 .travis.yml travis: re-enable php 5.5 May 31, 2016 CHANGELOG.md added #102 to CHANGELOG.md Jun 25, 2016 CONDUCT.md Added code manifesto as code of conduct Mar 5, 2016 CONTRIBUTING.md Fixed escaping in CONTRIBUTING.md Mar 7, 2016 LICENSE.md Happy new year 2016 Jan 7, 2016 README.md Added benchmarks using PHPBench Apr 20, 2016 composer.json fix phpunit colors May 31, 2016 composer.lock travis: re-enable php 5.5 May 31, 2016 mkdocs.yml Reviewed documentation for publication Feb 11, 2016 phpbench.json Added benchmarks using PHPBench Apr 20, 2016 phpunit.xml.dist Merge pull request #87 from marc-mabe/travis_tmpfs Apr 16, 2016 README.md zend-cache Zend\Cache provides a general cache system for PHP. The Zend\Cache component is able to cache different patterns (class, object, output, etc) using different storage adapters (DB, File, Memcache, etc). File issues at https://github.com/zendframework/zend-cache/issues Documentation is at https://zendframework.github.io/zend-cache/ Benchmarks We provide scripts for benchmarking zend-cache using the PHPBench framework; these can be found in the benchmark/ directory. To execute the benchmarks you can run the following command: $ vendor/bin/phpbench run --report=aggregate Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zendframework/zend-cache"	"Another caching library (ZF2)."	"true"
"Data Structure and Storage"	"Ardent"	"https://github.com/morrisonlevi/Ardent"	"A library of data structures."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"546"	"34"	"49"	"GitHub - morrisonlevi/Ardent: A Collections library for PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 34 Star 546 Fork 49 morrisonlevi/Ardent Code Issues 7 Pull requests 3 Pulse Graphs A Collections library for PHP. 450 commits 4 branches 26 releases 14 contributors PHP 98.6% Makefile 1.4% PHP Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Algorithms Attributes PHP5.7 master Nothing to show 0.21.1 0.21.0 0.20.1 0.20.0 0.14.0 0.13.0 0.12.1 0.12.0 0.11.0 0.10.0 0.9.1 0.9.0 0.8.1 0.8.0 0.7.1 0.7.0 0.6.1 0.6.0 0.5.0 0.4.2 0.4.1 0.4.0 0.3.1 0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit 972e9ee Jun 19, 2016 morrisonlevi committed on GitHub Merge pull request #51 from morrisonlevi/revert-50-priority … Revert ""Add Pairing Heap-based priority queue."" Permalink Failed to load latest commit information. src Revert ""Add Pairing Heap-based priority queue."" Jun 19, 2016 test Revert ""Add Pairing Heap-based priority queue."" Jun 19, 2016 .gitignore Refactor, rename, trim, and reorganize Nov 6, 2015 .travis.yml Embrace PHP 5.5 May 16, 2016 LICENSE Added license file. Dec 7, 2012 Makefile Make load.php the primary make target Nov 13, 2015 README.md Change section on name; change … to ... Nov 13, 2015 composer.json I think I'm supposed to bump this May 16, 2016 config.mk Add Makefile for building phar and running tests Sep 11, 2015 make-loader.php Refactor, rename, trim, and reorganize Nov 7, 2015 make-phar.php Add Makefile for building phar and running tests Sep 12, 2015 phpunit.xml Style: reformatted code. Also removed outdated perf directory. Apr 24, 2014 sources.mk Add Option to sources May 16, 2016 README.md A Library of Collections for OO Programming While developing and helping others develop PHP applications I noticed the trend to use PHP's arrays in nearly every task. Arrays in PHP are useful but are overused because PHP doesn't have rich standard libraries for working with common data structures and algorithms. This library hopes to fill in that gap. Undoubtably, I've made mistakes in design and implementation; hopefully more community involvement can help identify and fix such mistakes. Requirements Patience This project is unstable and subject to significant changes from release to release. Stability is not a goal during this phase of development. To be clear: you are using this project at your own risk. I highly value your experience using this library and am thankful for the early adopters, but I want to emphasize that this project is highly unstable. PHP 5.4 This project requires PHP 5.4 because PHP 5.3 is at its End Of Life (EOL). As such the project makes use of Traits, the callable type and short array syntax. Depending on how long this project takes to mature it might require PHP 5.5 for generators and improved handling of non-scalar keys in foreach loops, or maybe PHP 5.6 for ... support. You can also use HHVM. I won't let HHVM compatibility stop me from doing what I feel is right for this library, but hopefully we can maintain compatibility. Roadmap There is no official roadmap for this project. I intend to release version 1.0.0 when I am confident enough in the API that it is suitable for public use. Until then, minor versions will be tagged as they are deemed helpful. This project follows semantic versioning. How can I help? The best way to help is to use the library (again, at your own risk) and submit issues when you find them. Over 99% of the library has been executed in a unit test but the quality of some of these tests is poor; improved tests are definitely welcome. Can you add X structure? Maybe. Open an issue and I'll look into it. Why not use the existing Standard PHP Library? The Standard PHP Library (SPL) has many problems, some of which are documented in an unfinished RFC regarding the SPL. I won't go into full details here, but essentially the SPL is not providing the standardized data structures and algorithms that I feel the PHP community needs. What's up with the name? This project was originally aimed to fix the SPL; as such I had named it SPL. Eventually I realized that I would do better with a different name; I picked Ardent it describes how I feel about the need for this kind of library. Unfortunately another PHP project decided to use the name after I had already picked it. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/morrisonlevi/Ardent"	"A library of data structures."	"true"
"Data Structure and Storage"	"Cake Collection"	"https://github.com/cakephp/collection"	"A simple collections library (CP)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"24"	"26"	"2"	"GitHub - cakephp/collection: [READ-ONLY] Collection library in CakePHP. This repo is a split of the main code that can be found in https://github.com/cakephp/cakephp Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 24 Fork 2 cakephp/collection Code Pull requests 0 Pulse Graphs [READ-ONLY] Collection library in CakePHP. This repo is a split of the main code that can be found in https://github.com/cakephp/cakephp 173 commits 7 branches 48 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3-0 3-1 3.next 3.0 3.1 3.2 master Nothing to show 3.3.0-beta 3.2.12 3.2.11 3.2.10 3.2.9 3.2.8 3.2.7 3.2.6 3.2.5 3.2.4 3.2.3 3.2.2 3.2.1 3.2.0 3.2.0-RC1 3.1.13 3.1.10 3.1.9 3.1.8 3.1.7 3.1.6 3.1.5 3.1.4 3.1.3 3.1.2 3.1.1 3.1.0 3.1.0-beta2 3.1.0-beta 3.1.0-RC1 3.0.18 3.0.15 3.0.13 3.0.12 3.0.10 3.0.9 3.0.8 3.0.7 3.0.6 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 3.0.0-beta3 3.0.0-RC2 3.0.0-RC1 Nothing to show New pull request Latest commit 627e4f9 Jun 15, 2016 ravage84 Add space before operators Permalink Failed to load latest commit information. Iterator Run sniffer to auto-fix default params into doc blocks. Mar 11, 2016 Collection.php Make all doc block classes FQCN as per CS. Feb 2, 2016 CollectionInterface.php Run sniffer to auto-fix default params into doc blocks. Mar 10, 2016 CollectionTrait.php Add space before operators Jun 15, 2016 ExtractTrait.php Fix CS. Sep 24, 2015 LICENSE.txt Adds license file and badges for Collection subtree split Feb 9, 2016 README.md Adds license file and badges for Collection subtree split Feb 9, 2016 composer.json Declare splits as stable. Jan 28, 2016 functions.php Fix CS warnings in function docblocks Mar 3, 2015 README.md CakePHP Collection Library The collection classes provide a set of tools to manipulate arrays or Traversable objects. If you have ever used underscore.js, you have an idea of what you can expect from the collection classes. Usage Collections can be created using an array or Traversable object. A simple use of a Collection would be: use Cake\Collection\Collection;  $items = ['a' => 1, 'b' => 2, 'c' => 3]; $collection = new Collection($items);  // Create a new collection containing elements // with a value greater than one. $overOne = $collection->filter(function ($value, $key, $iterator) {     return $value > 1; }); The Collection\CollectionTrait allows you to integrate collection-like features into any Traversable object you have in your application as well. Documentation Please make sure you check the official documentation Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cakephp/collection"	"A simple collections library (CP)."	"true"
"Data Structure and Storage"	"Collections"	"https://github.com/italolelis/collections"	"Collections Abstraction library for PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"43"	"10"	"13"	"GitHub - italolelis/collections: Collections Abstraction library for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 43 Fork 13 italolelis/collections Code Issues 1 Pull requests 0 Wiki Pulse Graphs Collections Abstraction library for PHP 329 commits 3 branches 37 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.2 5.x master Nothing to show v6.0.1 v6.0.0 v5.0.5 v5.0.4 v5.0.3 v5.0.2 v5.0.1 v5.0.0 v4.1.8 v4.1.7 v4.1.6 v4.1.5 v4.1.4 v4.1.3 v4.1.2 v4.1.1 v4.1.0 v4.0.0 v4.0.0-beta v3.2.0 v3.1.3 v3.1.2 v3.1.1 v3.1.0 v3.0.0 v2.2.0 v2.1.1 v2.1.0 v2.0.0 v1.2.2 v1.2.1 v1.2.0 v1.1.2 v1.1.1 v1.1.0 v1.0.0 5.0.0-beta Nothing to show New pull request Latest commit 5b7e6e5 Jul 6, 2016 italolelis Added nightly Permalink Failed to load latest commit information. .github Moving contributing to .github Feb 25, 2016 docs Updated docs Jun 25, 2016 src Added missing serializers Jun 28, 2016 tests Added missing serializers Jun 28, 2016 .gitignore Cleaning gitignore Apr 6, 2016 .travis.yml Added nightly Jul 6, 2016 CHANGELOG.md Updated docs Jun 24, 2016 LICENSE - Fixed the new line in the LISENCE file. Sep 19, 2014 README.md Update README.md Jun 27, 2016 SUMMARY.md Update SUMMARY.md Jun 22, 2016 composer.json Updated libraries Jun 27, 2016 phpunit.xml.dist Changing the autoload for tests Nov 5, 2015 README.md Collections Collections Abstraction library for PHP The Collection library is one of the most useful things that many modern languages has, but for some reason PHP doesn't has a built in collection layer. For that reason we created Collections, an incredible library that gathers the best of .NET's and Java's collections patterns and unify it with PHP array power. Take a look and see what we're talking about!! Install composer require easyframework/collections Usage The Collection Class The Collection represents the List in .NET language or simply non-associative arrays in php:   $person1 = new \stdClass();   $person1->name = 'John';   $person1->age = 25;    $person2 = new \stdClass();   $person2->name = 'Maria';   $person2->age = 30;    $person3 = new \stdClass();   $person3->name = 'Anderson';   $person3->age = 15;    $collection = new Collections\Vector();   $collection->add($person1);   $collection->add($person2);   $collection->add($person3);    $collection->filter(function($person){         return $person->age > 18;   })->each(function($item){         echo $item->name; //John and Maria   }); Contributing Please see CONTRIBUTING for details. License The MIT License (MIT). Please see License File for more information. Documentation More information can be found in the online documentation at https://italolelis.gitbooks.io/collections. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/italolelis/collections"	"Collections Abstraction library for PHP."	"true"
"Data Structure and Storage"	"Fractal"	"https://github.com/thephpleague/fractal"	"A library for converting complex data structures to JSON output."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1446"	"67"	"201"	"GitHub - thephpleague/fractal: Output complex, flexible, AJAX/RESTful data structures. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 67 Star 1,446 Fork 201 thephpleague/fractal Code Issues 30 Pull requests 14 Pulse Graphs Output complex, flexible, AJAX/RESTful data structures. http://fractal.thephpleague.com 519 commits 5 branches 27 releases 46 contributors PHP 99.9% Ruby 0.1% PHP Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages improved-l4-paginator master mediaholding-improved-json-api-support scrutinizer Nothing to show 0.13.0 0.12.0 0.11.0 0.10.0 0.9.1 0.9.0 0.8.3 0.8.2 0.8.1 0.8.0 0.7.0 0.6.1 0.6.0 0.5.1 0.5.0 0.4.6 0.4.5 0.4.4 0.4.3 0.4.2 0.4.0 0.3.1 0.3.0 0.2.1 0.2.0 0.1.0 0.0.1 Nothing to show New pull request Latest commit d2be7f6 May 16, 2016 philsturgeon Merge pull request #288 from bburnichon/improvement/typehinting … Fixup some type hintings related to Resource Permalink Failed to load latest commit information. src Fixup some type hintings related to Resource Mar 23, 2016 test Merge pull request #279 from vanbrabantf/master Mar 9, 2016 .gitattributes Update .gitattributes Oct 17, 2015 .gitignore Cheer up SensionLab insight. Jul 6, 2014 .scrutinizer.yml Fix: Only collect and report coverage once Aug 23, 2015 .travis.yml Enhancement: Send builds to container-based infrastructure Sep 3, 2015 CHANGELOG.md Fixed a whoops Oct 16, 2015 CONDUCT.md added conduct, updated changelog. Oct 16, 2015 CONTRIBUTING.md update github url in CONTRIBUTING.md Mar 6, 2015 Guardfile Whitespace fixes May 13, 2014 LICENSE New email Jun 1, 2015 README.md added conduct, updated changelog. Oct 16, 2015 composer.json Released 0.12 Mar 19, 2015 phpunit.xml.dist Added some stubs for more realistic tests. May 27, 2014 README.md Fractal Fractal provides a presentation and transformation layer for complex data output, the like found in RESTful APIs, and works really well with JSON. Think of this as a view layer for your JSON/YAML/etc. When building an API it is common for people to just grab stuff from the database and pass it to json_encode(). This might be passable for ""trivial"" APIs but if they are in use by the public, or used by mobile applications then this will quickly lead to inconsistent output. Goals Create a protective shield between source data and output, so schema changes do not affect users Systematic type-casting of data, to avoid foreach()ing through and (bool)ing everything Include (a.k.a embedding, nesting or side-loading) relationships for complex data structures Work with standards like HAL and JSON-API but also allow custom serialization Support the pagination of data results, for small and large data sets alike Generally ease the subtle complexities of outputting data in a non-trivial API This package is compliant with PSR-1, PSR-2 and PSR-4. If you notice compliance oversights, please send a patch via pull request. Install Via Composer $ composer require league/fractal Requirements The following versions of PHP are supported by this version. PHP 5.4 PHP 5.5 PHP 5.6 PHP 7.0-dev HHVM Documentation Fractal has full documentation, powered by Jekyll. Contribute to this documentation in the gh-pages branch. Todo add HAL serializers Testing $ phpunit Contributing Please see CONTRIBUTING and CONDUCT for details. Credits Jason Lewis Andrew Willis Phil Sturgeon All Contributors License The MIT License (MIT). Please see License File for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thephpleague/fractal"	"A library for converting complex data structures to JSON output."	"true"
"Data Structure and Storage"	"Ginq"	"https://github.com/akanehara/ginq"	"Another PHP library based on.NET's LINQ."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"140"	"25"	"15"	"GitHub - akanehara/ginq: `LINQ to Object` inspired DSL for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 140 Fork 15 akanehara/ginq Code Issues 6 Pull requests 2 Pulse Graphs `LINQ to Object` inspired DSL for PHP 221 commits 5 branches 11 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop feature/explicit-comparer feature/expr feature/generator-impl master Nothing to show v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 end-of-prototyping Nothing to show New pull request Latest commit 2499b3a Aug 25, 2015 sukobuto do not use late-static-binding for GroupingGinq and OrderingGinq Permalink Failed to load latest commit information. src do not use late-static-binding for GroupingGinq and OrderingGinq Aug 25, 2015 test Fixed #58: An empty list terminates flatMap (selectMany) sequence. Jul 16, 2015 .gitignore Add composer.json Jun 13, 2013 .travis.yml add .travis.yml Aug 25, 2014 LICENSE Create LICENSE Apr 14, 2014 README.ja.md Modified README.*.md Sep 17, 2013 README.md Update README Aug 24, 2014 composer.json Fixed requested php version in composer.json Apr 3, 2014 phpunit.xml.dist Added files for easier run of tests Apr 4, 2014 README.md Ginq Array handling in PHP? Be happy with Ginq! Ginq is a DSL that can handle arrays and iterators of PHP unified. Ginq is inspired by Linq to Object, but is not a clone. Many functions in Ginq are evaluated in lazy, and no actions are taken until that time. This features bring you many benefits. Install composer.json: {     ""require"": {         ""ginq/ginq"": ""~0.2.3""     } } see: https://packagist.org/packages/ginq/ginq Usage $xs = Ginq::from(array(1,2,3,4,5,6,7,8,9,10))         ->where(function($x) { return $x % 2 != 0; })         ->select(function($x) { return $x * $x; });         ; You pass Ginq data and build a query with it. In this example above, you order Ginq to choose even numbers and square each of them. But Ginq do nothing, Ginq knows only you want a result of chosen and squared numbers. Let's execute foreach loop with Ginq to get the result. foreach ($xs as $x) { echo ""$x ""; } The result is 1 9 25 49 81  You got the expected result! Next, you can get an array with toList. $xs->toList(); array(1,9,25,49,81);  Ginq has functions, well-known in SQL, such as join(), orderBy(), and groupBy() other than select(), where() listed above. Selector and Predicate Most of methods in Ginq receive a closure as a argument. You may not be familiar with closures, but it is very simple things. There are just three types of closures in Ginq, you can remember simply. These are predicate, selector, and connection selector. Predicate A closure that passed to a method that do select, such as where() is called predicate. Predicate is a closure that receive a pair of key and values in the elements and return boolean value. function ($v, [$k]) { return $v % 2 == 0; } You get even numbers when you pass this closure to where(). You can skip second argument when you don't need it in the process. Selector A closure that passed to a method that do projection, such as select() is called selector. Selector is a closure that receive a pair of key and value in the elements and create a new value or key, and then return it. function ($v, [$k]) { return $v * $v ; } You get squared numbers of original when you pass this closure to select(). This function is used to specify the key of grouping with groupBy(), the key of sorting with groupBy(). Connection Selector Connection Selector is one of the selector that combine two elements into one, is used with join(), zip(). function ($v0, $v1, [$k0, $k1]) { return array($v0, $v1) ; } This function receive 4 arguments, two values and two keys, and then create new value or key and return it. You can skip arguments when you don't need it in the process. These are zip() example that combine each elements from two arrays. $foods  = array(""meat"", ""pasta"", ""salada""); $spices = array(""time"", ""basil"", ""dill"");  $xs = Ginq::from($foods)         ->zip($spices, function($f, $s) {             return ""$f with $s!"";         })         ;  foreach ($xs as $x) { echo ""$x\n""; } meat with time! pasta with basil! salada with dill!  Shortcuts of predicate and selector Selector can receive a character string instead of a closure. They return the value of the field when the element is an object, or return the value of the key when it is an array. So, Ginq::from($xs)->select('[key].property'); The example above is same as two examples below. Ginq::from($xs)->select(     function ($v, $k) { return $v['key'].property; } ); see: Property Access (Symfony) http://symfony.com/doc/current/components/property_access/index.html More complex examples References Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/akanehara/ginq"	"Another PHP library based on.NET's LINQ."	"true"
"Data Structure and Storage"	"JsonMapper"	"https://github.com/cweiske/jsonmapper"	"A library that maps nested JSON structures onto PHP classes."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"428"	"37"	"58"	"GitHub - cweiske/jsonmapper: map nested JSON structures onto PHP classes Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 37 Star 428 Fork 58 cweiske/jsonmapper Code Issues 1 Pull requests 1 Pulse Graphs map nested JSON structures onto PHP classes 102 commits 1 branch 20 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.11.0 v0.10.0 v0.9.0 v0.8.0 v0.7.0 v0.6.1 v0.6.0 v0.5.0 v0.4.4 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.0 v0.2.1 v0.2.0 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 979abda Apr 14, 2016 cweiske Release version 0.11.0 Permalink Failed to load latest commit information. example Correct single.json Nov 10, 2014 src Support ""= null"" in method param declarations Apr 14, 2016 tests Support ""= null"" in method param declarations Apr 14, 2016 .gitignore add phpunit dev dependency to composer.json Sep 13, 2014 .travis.yml use travis-ci container infrastructure to get faster builds Aug 14, 2015 ChangeLog Release version 0.11.0 Apr 14, 2016 README.rst Implement #51: $undefinedPropertyHandler Apr 14, 2016 composer.json I do not work for netresearch anymore Apr 14, 2016 package.xml Release version 0.11.0 Apr 14, 2016 README.rst JsonMapper - map nested JSON structures onto PHP classes Takes data retrieved from a JSON web service and converts them into nested object and arrays - using your own model classes. Starting from a base object, it maps JSON data on class properties, converting them into the correct simple types or objects. It's a bit like the native SOAP parameter mapping PHP's SoapClient gives you, but for JSON. Note that it does not rely on any schema, only your class definitions. Type detection works by parsing @var docblock annotations of class properties, as well as type hints in setter methods. You do not have to modify your model classes by adding JSON specific code; it works automatically by parsing already-existing docblocks. Keywords: deserialization, hydration Contents Pro & contra Benefits Drawbacks Usage Basic usage Example Property type documentation Simple type mapping Class map Logging Handling invalid or missing data Unknown properties Missing properties Simple types instead of objects Passing arrays to map() Installation via Composer via PEAR Related software About JsonMapper License Coding style Author Pro & contra Benefits Autocompletion in IDEs It's easy to add comfort methods to data model classes Your JSON API may change, but your models can stay the same - not breaking applications that use the model classes. Drawbacks Model classes need to be written by hand Since JsonMapper does not rely on any schema information (e.g. from json-schema), model classes cannot be generated automatically. Usage Basic usage Register an autoloader that can load PSR-0 compatible classes. Create a JsonMapper object instance Call the map or mapArray method, depending on your data Map a normal object: <?php require 'autoload.php'; $mapper = new JsonMapper(); $contactObject = $mapper->map($jsonContact, new Contact()); ?> Map an array of objects: <?php require 'autoload.php'; $mapper = new JsonMapper(); $contactsArray = $mapper->mapArray(     $jsonContacts, array(), 'Contact' ); ?> Instead of array() you may also use ArrayObject and descending classes. Example JSON from a address book web service: {     'name':'Sheldon Cooper',     'address': {         'street': '2311 N. Los Robles Avenue',         'city': 'Pasadena'     } } Your local Contact class: <?php class Contact {     /**  * Full name  * @var string  */     public $name;      /**  * @var Address  */     public $address; } ?> Your local Address class: <?php class Address {     public $street;     public $city;      public function getGeoCoords()     {         //do something with the $street and $city     } } ?> Your application code: <?php $json = json_decode(file_get_contents('http://example.org/bigbang.json')); $mapper = new JsonMapper(); $contact = $mapper->map($json, new Contact());  echo ""Geo coordinates for "" . $contact->name . "": ""     . var_export($contact->address->getGeoCoords(), true); ?> Property type documentation JsonMapper uses several sources to detect the correct type of a property: The setter method (set + ucwords($propertyname)) is inspected. Underscores make the next letter uppercase, which means that for a JSON property foo_bar_baz a setter method of setFooBarBaz is used. If it has a type hint in the method signature, this type used: public function setPerson(Contact $person) {...}  The method's docblock is inspected for @param $type annotations: /**  * @param Contact $person Main contact for this application  */ public function setPerson($person) {...}  If no type could be detected, the plain JSON value is passed to the setter method. @var $type docblock annotation of class properties: /**  * @var \my\application\model\Contact  */ public $person;  Note that the property has to be public to be used directly. If no type could be detected, the property gets the plain JSON value. If a property can not be found, JsonMapper tries to find the property in a case-insensitive manner. A JSON property isempty would then be mapped to a PHP property isEmpty. Supported type names: Simple types: string bool, boolean int, integer float array object Class names, with and without namespaces Contact - will throw exception if JSON value is NULL Arrays of simple types and class names: int[] Contact[] ArrayObjects of simple types and class names: ContactList[Contact] NumberList[int] Nullable types: int|null - will be null if the value in JSON is null, otherwise it will be an integer Contact|null - will be null if the value in JSON is null, otherwise it will be an object of type Contact ArrayObjects and extending classes are treated as arrays. Variables without a type or with type mixed will get the JSON value set directly without any conversion. See phpdoc's type documentation for more information. Simple type mapping When an object shall be created but the JSON contains a simple type only (e.g. string, float, boolean), this value is passed to the classes' constructor. Example: PHP code: /**  * @var DateTime  */ public $date; JSON: {""date"":""2014-05-15""} This will result in new DateTime('2014-05-15') being called. Class map When variables as defined as objects ofabstract classes or interfaces, JsonMapper would normally try to instantiate those directly and crash. Using JsonMapper's $classMap property, you can specify which classes shall get instantiated instead: $jm = new JsonMapper(); $jm->classMap['Foo'] = 'Bar'; $jm->map(...); This would create objects of type Bar when a variable is defined to be of type Foo. Logging JsonMapper's setLogger() method supports all PSR-3 compatible logger instances. Events that get logged: JSON data contain a key, but the class does not have a property or setter method for it. Neither setter nor property can be set from outside because they are protected or private Handling invalid or missing data During development, APIs often change. To get notified about such changes, JsonMapper may throw exceptions in case of either missing or yet unknown data. Unknown properties When JsonMapper sees properties in the JSON data that are not defined in the PHP class, you can let it throw an exception by setting $bExceptionOnUndefinedProperty: $jm = new JsonMapper(); $jm->bExceptionOnUndefinedProperty = true; $jm->map(...); You may also choose to handle those properties yourself by setting a callable to $undefinedPropertyHandler: /**  * Handle undefined properties during JsonMapper::map()  *  * @param object $object Object that is being filled  * @param string $propName Name of the unknown JSON property  * @param mixed $jsonValue JSON value of the property  *  * @return void  */ function setUndefinedProperty($object, $propName, $jsonValue) {     $object->{'UNDEF' . $propName} = $jsonValue; }  $jm = new JsonMapper(); $jm->undefinedPropertyHandler = 'setUndefinedProperty'; $jm->map(...); Missing properties Properties in your PHP classes can be marked as ""required"" by putting @required in their docblock: /**  * @var string  * @required  */ public $someDatum; When the JSON data do not contain this property, JsonMapper will throw an exception when $bExceptionOnMissingData is activated: $jm = new JsonMapper(); $jm->bExceptionOnMissingData = true; $jm->map(...); Simple types instead of objects When a variable's type is a class and JSON data is a simple type like string, JsonMapper passes this value to the class' constructor. If you do not want this, set $bStrictObjectTypeChecking to true: $jm = new JsonMapper(); $jm->bStrictObjectTypeChecking = true; $jm->map(...); An exception is thrown then in such cases. Passing arrays to map() You may wish to pass array data into map() that you got by calling json_decode($jsonString, true) By default, JsonMapper will throw an exception because map() requires an object as first parameter. You can circumvent that by setting $bEnforceMapType to false: $jm = new JsonMapper(); $jm->bEnforceMapType = false; $jm->map(...); Installation via Composer From Packagist: $ composer require netresearch/jsonmapper  via PEAR Warning Version 0.10.0 was the last version released on this PEAR channel. From our PEAR channel: $ pear channel-discover pear.nrdev.de $ pear install nr/jsonmapper-alpha  Related software Jackson's data binding for Java Johannes Schmitt Serializer for PHP About JsonMapper License JsonMapper is licensed under the OSL 3.0. Coding style JsonMapper follows the PEAR Coding Standards. Author Christian Weiske, cweiske.de Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cweiske/jsonmapper"	"A library that maps nested JSON structures onto PHP classes."	"true"
"Data Structure and Storage"	"Knapsack"	"https://github.com/DusanKasan/Knapsack"	"Collection library inspired by Clojure's sequences."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"154"	"9"	"10"	"GitHub - DusanKasan/Knapsack: Collection pipeline library for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 154 Fork 10 DusanKasan/Knapsack Code Issues 0 Pull requests 1 Pulse Graphs Collection pipeline library for PHP http://dusankasan.github.io/Knapsack/ 141 commits 2 branches 22 releases 6 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 8.3.0 8.2.0 8.1.1 8.1.0 8.0.0 7.0.0 6.2.0 6.1.0 6.0.0 5.0.0 4.0.0 3.1.0 3.0.0 2.0.0 1.0.0 0.4.3 0.4.2 0.4.1 0.4.0 0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit 24078b7 Jun 9, 2016 DusanKasan New version tagged Permalink Failed to load latest commit information. ci Updating CI Phpspec config Apr 11, 2016 src PrintDump function added Jun 9, 2016 tests PrintDump function added Jun 9, 2016 .gitignore Phpunit config, contribution guide added, CI now targets PHP 5.5, 5.6… Jul 28, 2015 .scrutinizer.yml Scrutinizer CI config updated Apr 21, 2016 .sensiolabs.yml Allow debug statements in insight Jun 9, 2016 CHANGELOG.md New version tagged Jun 9, 2016 CONTRIBUTING.md Performance tests rerun on 7.0.2, scenario added, contributing.md twe… May 20, 2016 LICENSE.md Initial commit Jul 14, 2015 README.md PrintDump function added Jun 9, 2016 composer.json Resolving ambiguities in dump function code Jun 8, 2016 composer.lock Sum and average can return float or int Jun 3, 2016 phpspec.yml Moving to DusanKasan global namespace to avoid conflicts Apr 11, 2016 phpunit.xml.dist Phpunit config, contribution guide added, CI now targets PHP 5.5, 5.6… Jul 28, 2015 README.md Knapsack Collection pipeline library for PHP Knapsack is a collection library for PHP >= 5.6 that implements most of the sequence operations proposed by Clojures sequences plus some additional ones. All its features are available as functions (for functional programming) and as a collection pipeline object methods. The heart of Knapsack is its Collection class. However its every method calls a simple function with the same name that does the actual heavy lifting. These are located in DusanKasan\Knapsack namespace and you can find them here. Collection is an iterator implementor that accepts Traversable object, array or even a callable that produces a Traversable object or array as constructor argument. It provides most of Clojures sequence functionality plus some extra features. It is also immutable - operations preformed on the collection will return new collection (or value) instead of modifying the original collection. Most of the methods of Collection return lazy collections (such as filter/map/etc.). However, some return non-lazy collections (reverse) or simple values (count). For these operations all of the items in the collection must be iterated over (and realized). There are also operations (drop) that iterate over some items of the collection but do not affect/return them in the result. This behaviour as well as laziness is noted for each of the operations. If you want more example usage beyond what is provided here, check the specs and/or scenarios. There are also performance tests you can run on your machine and see the computation time impact of this library (the output of these is included below). Feel free to report any issues you find. I will do my best to fix them as soon as possible, but community pull requests to fix them are more than welcome. Documentation Check out the documentation (which is prettified version of this readme) at http://dusankasan.github.io/Knapsack Installation Require this package using Composer. composer require dusank/knapsack  Usage Instantiate via static or dynamic constructor use DusanKasan\Knapsack\Collection;  $collection1 = new Collection([1, 2, 3]); $collection2 = Collection::from([1, 2, 3]); //preferred since you can call methods on its result directly. Work with arrays, Traversable objects or callables that produce Traversables $collection1 = Collection::from([1, 2, 3]); $collection2 = Collection::from(new ArrayIterator([1, 2, 3]);  //Used because Generator can not be rewound $collection2 = Collection::from(function() { //must have 0 arguments     foreach ([1, 2, 3] as $value) {         yield $value;     } }); Basic map/reduce $result = Collection::from([1, 2])     ->map(function($v) {return $v*2;})     ->reduce(function($tmp, $v) {return $tmp+$v;}, 0);  echo $result; //6 The same map/reduce using Knapsack's collection functions $result = reduce(     map(         [1, 2],          function($v) {return $v*2;}     ),     function($tmp, $v) {return $tmp+$v;},     0 );  echo $result; //6 Get first 5 items of Fibonacci's sequence $result = Collection::iterate([1,1], function($v) {         return [$v[1], $v[0] + $v[1]]; //[1, 2], [2, 3] ...     })     ->map('\DusanKasan\Knapsack\first') //one of the collection functions     ->take(5);  foreach ($result as $item) {     echo $item . PHP_EOL; }  //1 //1 //2 //3 //5 If array or Traversable would be returned from functions that return an item from the collection, it can be converted to Collection using the optional flag. By default it returns the item as is. $result = Collection::from([[[1]]])     ->first(true)     ->first();  var_dump($result); //[1] Collections are immutable function multiplyBy2($v) {     return $v * 2; }  function multiplyBy3($v) {     return $v * 3; }  function add($a, $b) {     return $a + $b; }  $collection = Collection::from([1, 2]);  $result = $collection     ->map('multiplyBy2')     ->reduce(0, 'add');  echo $result; //6  //On the same collection $differentResult = $collection     ->map('multiplyBy3')     ->reduce(0, 'add');  echo $differentResult; //9 Keys are not unique by design It would harm performance. This is only a problem if you need to call toArray(), then you should call values() before. $result = Collection::from([1, 2])->concat([3,4]);  //arrays have unique keys $result->toArray(); //[3,4] $result->values()->toArray(); //[1, 2, 3, 4]  //When iterating, you can have multiple keys. foreach ($result as $key => $item) {     echo $key . ':' . $item . PHP_EOL; }  //0:1 //1:2 //0:3 //1:4 Collection trait is provided If you wish to use all the Collection methods in your existing classes directly, no need to proxy their calls, you can just use the provided CollectionTrait. This will work on any Traversable by default. In any other class you will have to override the getItems() method provided by the trait. Keep in mind that after calling filter or any other method that returns collection, the returned type will be actually Collection, not the original Traversable. class AwesomeIterator extends ArrayIterator {     use CollectionTrait; }  $iterator = new AwesomeIterator([1, 2, 3]); $iterator->size(); //3 Performance tests PHP 5.6 +------------------------------------------------------------------------------------+-----------------------+---------------------------+----------------------+ | operation details                                                                  | native execution time | collection execution time | difference (percent) | +------------------------------------------------------------------------------------+-----------------------+---------------------------+----------------------+ | array_map vs Collection::map on 10000 integers (addition)                          | 0.030887317657471s    | 0.1881504535675s          | 609%                 | | array_map vs Collection::map on 10000 strings (concatenation)                      | 0.034685015678406s    | 0.19358699321747s         | 558%                 | | array_map vs Collection::map on 10000 objects (object to field value)              | 0.045831298828125s    | 0.20278341770172s         | 442%                 | | array_map vs Collection::map on 10000 md5 invocations                              | 0.042794704437256s    | 0.1973245382309s          | 461%                 | | array_map vs Collection::map on 10000 integers n, counting sum(0, n) the naive way | 5.0926527023315s      | 5.2498435258865s          | 103%                 | +------------------------------------------------------------------------------------+-----------------------+---------------------------+----------------------+ PHP 7.0.2 +------------------------------------------------------------------------------------+-----------------------+---------------------------+----------------------+ | operation details                                                                  | native execution time | collection execution time | difference (percent) | +------------------------------------------------------------------------------------+-----------------------+---------------------------+----------------------+ | array_map vs Collection::map on 10000 integers (addition)                          | 0.0012169599533081s   | 0.013433384895325s        | 1103%                | | array_map vs Collection::map on 10000 strings (concatenation)                      | 0.0014688730239868s   | 0.013579154014587s        | 924%                 | | array_map vs Collection::map on 10000 objects (object to field value)              | 0.0023677349090576s   | 0.016839718818665s        | 711%                 | | array_map vs Collection::map on 10000 md5 invocations                              | 0.0041363000869751s   | 0.017279839515686s        | 417%                 | | array_map vs Collection::map on 10000 integers n, counting sum(0, n) the naive way | 1.4253485679626s      | 1.2336760282516s          | 86%                  | +------------------------------------------------------------------------------------+-----------------------+---------------------------+----------------------+ Constructors These are ways how to create the Collection class. There is one default constructor and few named (static) ones. new(array|Traversable|callback $input) The default constructor accepts array, Traversable or a callable that takes no arguments and produces Traversable or array. The use case for the callable argument is for example a Generator, which can not be rewound so the Collection must be able to reconstruct it when rewinding itself. $collection = new Collection([1, 2, 3]); $collection = new Collection(new ArrayIterator([1, 2, 3])); $generatorFactory = function () {     foreach ([1, 2] as $value) {         yield $value;     } };  $collection = new Collection($generatorFactory); from(array|Traversable|callback $input) Collection::from is a static alias of the default constructor. This is the preferred way to create a Collection. $collection = Collection::from([1, 2, 3]); $collection = Collection::from(new ArrayIterator([1, 2, 3])); $generatorFactory = function () {     foreach ([1, 2] as $value) {         yield $value;     } };  $collection = Collection::from($generatorFactory); iterate(mixed $input, callable $function) Returns lazy collection of values, where first value is $input and all subsequent values are computed by applying $function to the last value in the collection. By default this produces an infinite collection. However you can end the collection by throwing a NoMoreItems exception. $collection = Collection::iterate(1, function ($value) {return $value + 1;}); // 1, 2, 3, 4 ... repeat(mixed $value, int $times = -1) Returns a lazy collection of $value repeated $times times. If $times is not provided the collection is infinite. Collection::repeat(1); //infinite collection of ones Collection::repeat(1, 4)->toArray(); //[1, 1, 1, 1] range(int $start = 0, int $end = null, int step = 1) Returns a lazy collection of numbers starting at $start, incremented by $step until $end is reached. Collection::range(0, 6, 2)->toArray(); //[0, 2, 4, 6] Operations These are the operations (methods) provided by Collection class. For each one, there is a function with the same name in Knapsack namespace. The function has the same footprint as the method, except it has one extra argument prepended - the collection (array or Traversable). Standard Iterator methods It implements http://php.net/manual/en/class.iterator.php append(mixed $item, mixed $key = null) : Collection Returns a lazy collection of items of this collection with $item added as last element. If $key is not provided, its key will be the next integer in the sequence. Collection::from([1, 3, 3, 2])     ->append(1)     ->toArray(); //[1, 3, 3, 2, 1] Collection::from([1, 3, 3, 2])     ->append(1, 'key')     ->toArray(); //[1, 3, 3, 2, 'key' => 1] toArray(append([1, 3, 3, 2], 1, 'key')); //[1, 3, 3, 2, 'key' => 1] average() : int|float Returns average of values in this collection. Collection::from([1, 2, 3, 2])->average(); //2 Collection::from([1, 2, 3, 2, 2])->average(); //2.2 Collection::from([])->average(); //0 average([1, 2, 3]); //2 combine(array|Traversable $collection, bool $strict = false) : Collection Combines the values of this collection as keys, with values of $collection as values. The resulting collection has length equal to the size of smaller collection. If $strict is true, the size of both collections must be equal, otherwise ItemNotFound is thrown. When strict, the collection is realized immediately. Collection::from(['a', 'b'])     ->combine([1, 2])     ->toArray(); //['a' => 1, 'b' => 2] toArray(combine(['a', 'b'], [1, 2])); //['a' => 1, 'b' => 2] concat(...array|Traversable) : Collection Returns a lazy collection with items from this collection followed by items from the collection from first argument, then second and so on. Collection::from([1, 3, 3, 2])     ->concat([4, 5]) //If we would convert to array here, we would loose 2 items because of same keys [4, 5, 3, 2]     ->values()      ->toArray(); //[1, 3, 3, 2, 4, 5] toArray(values(concat([1, 3, 3, 2], [4, 5]))); //[1, 3, 3, 2, 4, 5] contains(mixed $needle) : bool Returns true if $needle is present in the collection. Collection::from([1, 3, 3, 2])->contains(2); //true contains([1, 3, 3, 2], 2); //true countBy(callable $function) : Collection Returns a collection of items whose keys are the return values of $function(value, key) and values are the number of items in this collection for which the $function returned this value. Collection::from([1, 2, 3, 4, 5])     ->countBy(function ($value) {         return $value % 2 == 0 ? 'even' : 'odd';     })     ->toArray(); //['odd' => [1, 3, 5], 'even' => [2, 4]] toArray(countBy([1, 2, 3, 4, 5], function ($value) {return $value % 2 == 0 ? 'even' : 'odd';}));      cycle() : Collection Returns an infinite lazy collection of items in this collection repeated infinitely. Collection::from([1, 3, 3, 2])     ->cycle()     ->take(8) //we take just 8 items, since this collection is infinite     ->values()     ->toArray(); //[1, 3, 3, 2, 1, 3, 3, 2] toArray(values(take(cycle([1, 3, 3, 2]), 8))); //[1, 3, 3, 2, 1, 3, 3, 2] diff(array|Traversable ...$collections) : Collection Returns a lazy collection of items that are in $this but are not in any of the other arguments. Note that the ...$collections are iterated non-lazily. Collection::from([1, 3, 3, 2])     ->diff([1, 3])     ->toArray() //[3 => 2] toArray(diff([1, 3, 3, 2], [1, 3])); //[3 => 2] distinct() : Collection Returns a lazy collection of distinct items. The comparison whether the item is in the collection or not is the same as in in_array. Collection::from([1, 3, 3, 2])     ->distinct()     ->toArray() //[1, 3, 3 => 2] - each item has key of the first occurrence toArray(distinct([1, 3, 3, 2])); //[1, 3, 3 => 2] - each item has key of the first occurrence drop(int $numberOfItems) : Collection A form of slice that returns all but first $numberOfItems items. Collection::from([1, 2, 3, 4, 5])     ->drop(4)     ->toArray(); //[4 => 5] toArray(drop([1, 2, 3, 4, 5], 4)); //[4 => 5] dropLast($numberOfItems = 1) : Collection Returns a lazy collection with last $numberOfItems items skipped. These are still realized, just skipped. Collection::from([1, 2, 3])     ->dropLast()     ->toArray(); //[1, 2] Collection::from([1, 2, 3]) $collection     ->dropLast(2)     ->toArray(); //[1] toArray(dropLast([1, 2, 3], 2)); //[1] dropWhile(callable $function) : Collection Returns a lazy collection by removing items from this collection until first item for which $function(value, key) returns false. Collection::from([1, 3, 3, 2])     ->dropWhile(function ($v) {         return $v < 3;     })     ->toArray(); //[1 => 3, 2 => 3, 3 => 2]) Collection::from([1, 3, 3, 2])     ->dropWhile(function ($v, $k) {         return $k < 2 && $v < 3;     })     ->toArray(); //[1 => 3, 2 => 3, 3 => 2]) Collection::from([1, 3, 3, 2])     ->dropWhile(function ($v, $k) {         return $k < 2 && $v < 3;     })     ->toArray(); //[1 => 3, 2 => 3, 3 => 2]) toArray(values(dropWhile([1, 3, 3, 2], function ($v) {return $v < 3;}))); // [3, 3, 2] dump(int $maxItemsPerCollection = null, $maxDepth = null) : array Dumps this collection into array (recursively). scalars are returned as they are, array of class name => properties (name => value and only properties accessible for this class) is returned for objects, arrays or Traversables are returned as arrays, for anything else result of calling gettype($input) is returned If specified, $maxItemsPerCollection will only leave specified number of items in collection, appending a new element at end '>>>' if original collection was longer. If specified, $maxDepth will only leave specified n levels of nesting, replacing elements with '^^^' once the maximum nesting level was reached. If a collection with duplicate keys is encountered, the duplicate keys (except the first one) will be change into a format originalKey//duplicateCounter where duplicateCounter starts from 1 at the first duplicate. So [0 => 1, 0 => 2] will become [0 => 1, '0//1' => 2] Collection::from([1, 3, 3, 2])->dump(); //[1, 3, 3, 2] $collection = Collection::from(     [         [             [1, [2], 3],             ['a' => 'b'],             new ArrayIterator([1, 2, 3])         ],         [1, 2, 3],         new ArrayIterator(['a', 'b', 'c']),         true,         new \DusanKasan\Knapsack\Tests\Helpers\Car('sedan', 5),         \DusanKasan\Knapsack\concat([1], [1])     ] );  $collection->dump(2, 3); //[ // [ // [1, '^^^', '>>>'], // ['a' => 'b'], // '>>>' // ], // [1, 2, '>>>'], // '>>>' //]  $collection->dump(); //[ // [ // [1, [2], 3], // ['a' => 'b'], // [1, 2, 3] // ], // [1, 2, 3], // ['a', 'b', 'c'], // true, // [ // 'DusanKasan\Knapsack\Tests\Helpers\Car' => [ // 'numberOfSeats' => 5, // ], // ], // [1, '0//1' => 1] //] dump([1, 3, 3, 2], 2); // [1, 3, '>>>'] each(callable $function) : Collection Returns a lazy collection in which $function(value, key) is executed for each item. Collection::from([1, 2, 3, 4, 5])     ->each(function ($i) {         echo $i . PHP_EOL;     })     ->toArray(); //[1, 2, 3, 4, 5]  //1 //2 //3 //4 //5 each([1, 2, 3, 4, 5], function ($v) {echo $v . PHP_EOL;});  //1 //2 //3 //4 //5 every(callable $function) : bool Returns true if $function(value, key) returns true for every item in this collection, false otherwise. Collection::from([1, 3, 3, 2])     ->every(function ($v) {         return $v < 3;     }); //false Collection::from([1, 3, 3, 2])     ->find(function ($v. $k) {        return $v < 4 && $k < 2;     }, 10); //false every([1, 3, 3, 2], function ($v) {return $v < 5;}); //true except(array|Traversable $keys) : Collection Returns a lazy collection without the items associated to any of the keys from $keys. Collection::from(['a' => 1, 'b' => 2])     ->except(['a'])     ->toArray(); //['b' => 2] toArray(except(['a' => 1, 'b' => 2], ['a'])); //['b' => 2] extract(mixed $keyPath) : Collection Returns a lazy collection of data extracted from $collection items by dot separated key path. Supports the * wildcard. If a key contains \ or * it must be escaped using \ character. $collection = Collection::from([['a' => ['b' => 1]], ['a' => ['b' => 2]], ['c' => ['b' => 3]]]) $collection->extract('a.b')->toArray(); //[1, 2] $collection->extract('*.b')->toArray(); //[1, 2, 3] toArray(extract([['a' => ['b' => 1]], ['a' => ['b' => 2]]], 'a.b')); //[1, 2] filter(callable $function = null) : Collection Returns a lazy collection of items for which $function(value, key) returned true. Collection::from([1, 3, 3, 2])     ->filter(function ($value) {         return $value > 2;     })     ->values()     ->toArray() //[3, 3] Collection::from([1, 3, 3, 2])     ->filter(function ($value, $key) {         return $value > 2 && $key > 1;     })     ->toArray() //[2 => 3] toArray(values(filter([1, 3, 3, 2], function ($value) {return $value > 2;}))); //[3, 3] If $function is not provided, \DusanKasan\Knapsack\identity is used so every falsy value is removed. Collection::from([0, 0.0, false, null, """", []])     ->filter()     ->isEmpty() //true isEmpty(values(filter([0, 0.0, false, null, """", []]))); //true find(callable $function, mixed $ifNotFound = null, bool $convertToCollection = false) : mixed|Collection Returns first value for which $function(value, key) returns true. If no item is matched, returns $ifNotFound. If $convertToCollection is true and the return value is a collection (array|Traversable) an instance of Collection will be returned. Collection::from([1, 3, 3, 2])     ->find(function ($value) {        return $value < 3;     }); //1 Collection::from([1, 3, 3, 2])     ->find(function ($value) {        return $value > 3;     }, 10); //10 Collection::from([1, 3, 3, 2])     ->find(function ($value, $key) {       return $value < 3 && $key > 1;     }); //2 //if the output can be converted to Collection (it's array or Traversable), it will be. Collection::from([1, [4, 5], 3, 2])     ->find(function ($value) {       return is_array($value);     }, true)     ->size(); //2 find([1, 3, 3, 2], function ($value) {return $value > 2;}); //3 first(bool $convertToCollection = false) : mixed|Collection Returns first value in the collection or throws ItemNotFound if the collection is empty. If $convertToCollection is true and the return value is a collection (array|Traversable) an instance of Collection will be returned. Collection::from([1, 2, 3])->first(); //1 Collection::from([[1], 2, 3])->first(); //[1] Collection::from([])->first(); //throws ItemNotFound first([1, 2, 3]); //1 flatten(int $depth = -1) : Collection Returns a lazy collection with one or multiple levels of nesting flattened. Removes all nesting when no $depth value is passed. Collection::from([1,[2, [3]]])     ->flatten()     ->values() //1, 2 and 3 have all key 0     ->toArray() //[1, 2, 3] Collection::from([1,[2, [3]]])     ->flatten(1)     ->values() //1, 2 and 3 have all key 0     ->toArray() //[1, 2, [3]] toArray(values(flatten([1, [2, [3]]]))); //[1, 2, 3] flip() : Collection Returns a lazy collection where keys and values are flipped. Collection::from(['a' => 0, 'b' => 1])     ->flip()     ->toArray() //['a', 'b'] toArray(flip(['a' => 0, 'b' => 1])); //['a', 'b'] frequencies() : Collection Returns a collection where keys are distinct items from this collection and their values are number of occurrences of each value. Collection::from([1, 3, 3, 2])     ->frequencies()     ->toArray(); //[1 => 1, 3 => 2, 2 => 1] toArray(frequencies([1, 3, 3, 2])); //[1 => 1, 3 => 2, 2 => 1] get(mixed $key, bool $convertToCollection = false) : mixed|Collection Returns value at the key $key. If multiple values have this key, return first. If no value has this key, throw ItemNotFound. If $convertToCollection is true and the return value is a collection (array|Traversable) an instance of Collection will be returned. Collection::from([1, 3, 3, 2])->get(2); //3 Collection::from([1, [1, 2]])->get(1, true)->toArray(); //[1, 2] Collection::from([1, 3, 3, 2])->get(5); //throws ItemNotFound get([1, 3, 3, 2], 2); //3 getOrDefault(mixed $key, mixed $default = null, bool $convertToCollection = false) : mixed|Collection Returns value at the key $key. If multiple values have this key, return first. If no value has this key, return $default. If $convertToCollection is true and the return value is a collection (array|Traversable) an instance of Collection is returned. Collection::from([1, 3, 3, 2])->getOrDefault(2); //3 Collection::from([1, 3, 3, 2])->getOrDefault(5); //null Collection::from([1, 3, 3, 2])->getOrDefault(5, 'asd'); //'asd' Collection::from([1, 3, 3, 2])->getOrDefault(5, [1, 2], null, true)->toArray(); //[1, 2] getOrDefault([1, 3, 3, 2], 5, 'asd'); //'asd' groupBy(callable $function) : Collection Returns collection which items are separated into groups indexed by the return value of $function(value, key). Collection::from([1, 2, 3, 4, 5])     ->groupBy(function ($value) {         return $value % 2;     })     ->toArray(); //[1 => [1, 3, 5], 0 => [2, 4]] toArray(groupBy([1, 2, 3, 4, 5], function ($value) {return $value % 2;})); //[1 => [1, 3, 5], 0 => [2, 4]] groupByKey(mixed $key) : Collection Returns collection where items are separated into groups indexed by the value at given key. Collection::from([         ['letter' => 'A', 'type' => 'caps'],         ['letter' => 'a', 'type' => 'small'],         ['letter' => 'B', 'type' => 'caps'],     ])     ->groupByKey('type')     ->map('DusanKasan\Knapsack\toArray')     ->toArray();     // [ 'caps' => [['letter' => 'A', 'type' => 'caps'], ...], 'small' => [['letter' => 'a', 'type' => 'small']]] $data = [     ['letter' => 'A', 'type' => 'caps'],     ['letter' => 'a', 'type' => 'small'],     ['letter' => 'B', 'type' => 'caps'], ]; toArray(map(groupByKey($data, 'type'), 'toArray')); //[ 'caps' => [['letter' => 'A', 'type' => 'caps'], ...], 'small' => [['letter' => 'a', 'type' => 'small']]] has(mixed $key) : bool Checks for the existence of $key in this collection. Collection::from(['a' => 1])->has('a'); //true has(['a' => 1], 'a'); //true indexBy(callable $function) : Collection Returns a lazy collection by changing keys of this collection for each item to the result of $function(value, key) for that key/value. Collection::from([1, 3, 3, 2])     ->indexBy(function ($v) {         return $v;     })     ->toArray(); //[1 => 1, 3 => 3, 2 => 2] toArray(indexBy([1, 3, 3, 2], '\DusanKasan\Knapsack\identity')); //[1 => 1, 3 => 3, 2 => 2] interleave(...array|Traversable $collection) : Collection Returns a lazy collection of first item from first collection, first item from second, second from first and so on. Works with any number of arguments. Collection::from([1, 3, 3, 2])     ->interleave(['a', 'b', 'c', 'd', 'e'])     ->values()     ->toArray(); //[1, 'a', 3, 'b', 3, 'c', 2, 'd', 'e'] toArray(interleave([1, 3, 3, 2], ['a', 'b', 'c', 'd', 'e'])); //[1, 'a', 3, 'b', 3, 'c', 2, 'd', 'e'] interpose(mixed $separator) : Collection Returns a lazy collection of items of this collection separated by $separator item. Collection::from([1, 2, 3])     ->interpose('a')     ->values() // we must reset the keys, because each 'a' has undecided key     ->toArray(); //[1, 'a', 2, 'a', 3] toArray(interpose([1, 3, 3, 2], 'a')); //[1, 'a', 2, 'a', 3] intersect(array|Traversable) : Collection Returns a lazy collection of items that are in $collection and all the other arguments, indexed by the keys from the first collection. Note that the ...$collections are iterated non-lazily. Collection::from([1, 2, 3])     ->intersect([1, 3])     ->toArray(); //[1, 2 => 3] toArray(intersect([1, 2, 3],[1, 3])); //[1, 2 => 3] isEmpty() : bool Returns true if is collection is empty. False otherwise. Collection::from([1, 3, 3, 2])->isEmpty(); //false isEmpty([1]); //false isNotEmpty() : bool Opposite of isEmpty Collection::from([1, 3, 3, 2])>isNotEmpty(); //true isNotEmpty([1]); //true keys() : Collection Returns a lazy collection of the keys of this collection. Collection::from(['a' => [1, 2], 'b' => [2, 3]])     ->keys()     ->toArray(); //['a', 'b'] toArray(keys(['a' => [1, 2], 'b' => [2, 3]])); //['a', 'b'] last(bool $convertToCollection = false) : mixed|Collection Returns last value in the collection or throws ItemNotFound if the collection is empty. If $convertToCollection is true and the return value is a collection (array|Traversable) an instance of Collection is returned. Collection::from([1, 2, 3])->last(); //3 Collection::from([1, 2, [3]])->last(true)->toArray(); //[1] Collection::from([])->last(); //throws ItemNotFound last([1, 2, 3]); //3 map(callable $function) : Collection Returns collection where each value is changed to the output of executing $function(value, key). Collection::from([1, 3, 3, 2])     ->map(function ($value) {         return $value + 1;     })     ->toArray() //[2, 4, 4, 3] toArray(map([1, 3, 3, 2], '\DusanKasan\Knapsack\increment')); //[2, 4, 4, 3] mapcat(callable $mapper) : Collection Returns a lazy collection which is a result of calling map($mapper(value, key)) and then flatten(1). Collection::from([1, 3, 3, 2])     ->mapcat(function ($value) {         return [[$value]];     })     ->values()     ->toArray(); //[[1], [3], [3], [2]] Collection::from([1, 3, 3, 2])     ->mapcat(function ($key, $value) {         return [[$key]];     })     ->values()     ->toArray(); //[[0], [1], [2], [3]] toArray(values(mapcat([1, 3, 3, 2], function ($value) {return [[$value]];}))); //[[1], [3], [3], [2]] max() : mixed Returns mthe maximal value in this collection. Collection::from([1, 2, 3, 2])->max(); //3 Collection::from([])->max(); //null max([1, 2, 3, 2]); //3 min() : mixed Returns mthe minimal value in this collection. Collection::from([1, 2, 3, 2])->min(); //1 Collection::from([])->min(); //null min([1, 2, 3, 2]); //1 only(array|Traversable $keys) : Collection Returns a lazy collection of items associated to any of the keys from $keys. Collection::from(['a' => 1, 'b' => 2])     ->only(['b'])     ->toArray(); //['b' => 2] toArray(only(['a' => 1, 'b' => 2], ['b'])); //['b' => 2] partition(int $numberOfItems, int $step = 0, array|Traversable $padding = []) : Collection Returns a lazy collection of collections of $numberOfItems items each, at $step step apart. If $step is not supplied, defaults to $numberOfItems, i.e. the partitionsdo not overlap. If a $padding collection is supplied, use its elements asnecessary to complete last partition up to $numberOfItems items. In case there are not enough padding elements, return a partition with less than $numberOfItems items. Collection::from([1, 3, 3, 2])     ->partition(3, 2, [0, 1])     ->toArray(); //[[1, 3, 3], [2 => 3, 3 => 2, 0 => 0]] Collection::from([1, 3, 3, 2])     ->partition(3, 2)     ->toArray(); //[[1, 3, 3], [2 => 3, 3 => 2]] Collection::from([1, 3, 3, 2])     ->partition(3)     ->toArray(); //[[1, 3, 3], [3 => 2]] toArray(partition([1, 3, 3, 2], 3)); //[[1, 3, 3], [3 => 2]] partitionBy(callable $function) : Collection Creates a lazy collection of collections created by partitioning this collection every time $function(value, key) will return different result. Collection::from([1, 3, 3, 2])     ->partitionBy(function ($v) {         return $v % 3 == 0;     })     ->toArray(); //[[1], [1 => 3, 2 => 3], [3 => 2]] toArray(partitionBy([1, 3, 3, 2], function ($value) {return $value % 3 == 0;})); //[[1], [1 => 3, 2 => 3], [3 => 2]] prepend(mixed $item, mixed $key = null) : Collection Returns a lazy collection of items of this collection with $item added as first element. Its key will be $key. If $key is not provided, its key will be the next numerical index. Collection::from([1, 3, 3, 2])     ->prepend(1)     ->values() //both 1 have 0 key     ->toArray(); //[1, 1, 3, 3, 2] Collection::from([1, 3, 3, 2])     ->prepend('a', 1)     ->toArray(); //['a' => 1, 0 => 1, 1 => 3, 2 => 3, 3 => 2] printDump(int $maxItemsPerCollection = null, $maxDepth = null) : Collection Calls dump on $input and then prints it using the var_export. Returns the collection. See dump function for arguments and output documentation. Collection::from([1, 3, 3, 2])     ->printDump()     ->toArray(); //[1, 3, 3, 2] toArray(printDump([1, 3, 3, 2])); //[1, 3, 3, 2] realize() : Collection Realizes collection - turns lazy collection into non-lazy one by iterating over it and storing the key/values. $helper->setValue(1);   $realizedCollection = Collection::from([1, 3, 3, 2])     ->map(function ($item) use ($helper) {return $helper->getValue() + $item;})     ->realize();  $helper->setValue(2); $realizedCollection->toArray([2, 4, 4, 3]); toArray(realize([1, 3, 3, 2])); //[1, 3, 3, 2] reduce(callable $function, mixed $start, bool $convertToCollectionv = false) : mixed Reduces the collection to single value by iterating over the collection and calling $function(tmp, value, key) while passing $start and current key/item as parameters. The output of callable is used as $start in next iteration. The output of callable on last element is the return value of this function. If $convertToCollection is true and the return value is a collection (array|Traversable) an instance of Collection is returned. Collection::from([1, 3, 3, 2])     ->reduce(         function ($tmp, $i) {         return $tmp + $i;         },          0     ); //9  Collection::from([1, 3, 3, 2])     ->reduce(         function ($tmp, $i) {             $tmp[] = $i + 1;             return $tmp;         },          [],         true     )     ->first(); //2 reduce([1, 3, 3, 2], function ($tmp, $value) {return $tmp + $value;}, 0); //9 reduceRight(callable $function, mixed $start, bool $convertToColleciton = false) : mixed Like reduce, but walks from last item to the first one. If $convertToCollection is true and the return value is a collection (array|Traversable) an instance of Collection is returned. Collection::from([1, 3, 3, 2])     ->reduceRight(         function ($tmp, $i) {             return $tmp + $i;         },          0     ); //9  Collection::from([1, 3, 3, 2])     ->reduce(         function ($tmp, $i) {             $tmp[] = $i + 1;             return $tmp;         },          [],         true     )     ->first(); //3 reduceRight([1, 3, 3, 2], function ($tmp, $value) {return $tmp + $value;}, 0); //9 reductions(callable $reduction, $start) : Collection Returns a lazy collection of reduction steps. Collection::from([1, 3, 3, 2])     ->reductions(function ($tmp, $i) {         return $tmp + $i;     }, 0)     ->toArray(); //[1, 4, 7, 9] toArray(reductions([1, 3, 3, 2], function ($tmp, $value) {return $tmp + $value;}, 0)); //[1, 4, 7, 9] reject(callable $filter) : Collection Returns a lazy collection of items for which $filter(value, key) returned false. Collection::from([1, 3, 3, 2])     ->reject(function ($value) {         return $value > 2;     })     ->toArray() //[1, 3 => 2] Collection::from([1, 3, 3, 2])     ->reject(function ($value, $key) {         return $value > 2 && $key > 1;     })     ->toArray() //[1, 1 => 3, 3 => 2] toArray(reject([1, 3, 3, 2], function ($value) {return $value > 2;})); //[1, 1 => 3, 3 => 2] replace(array|Traversable $replacementMap) : Collection Returns a lazy collection with items from this collection equal to any key in $replacementMap replaced for their value. Collection::from([1, 3, 3, 2])     ->replace([3 => 'a'])     ->toArray(); //[1, 'a', 'a', 2] toArray(replace([1, 3, 3, 2], [3 => 'a'])); //[1, 'a', 'a', 2] replaceByKeys(array|Traversable $replacementMap) : Collection Returns a lazy collection with items from $collection, but items with keys that are found in keys of $replacementMap are replaced by their values. Collection::from([1, 3, 3, 2])     ->replace([3 => 'a'])     ->toArray(); //[1, 3, 3, 'a'] toArray(replace([1, 3, 3, 2], [3 => 'a'])); //[1, 3, 3, 'a'] reverse() : Collection Returns a non-lazy collection of items in this collection in reverse order. Collection::from([1, 2, 3])     ->reverse()     ->toArray(); //[2 => 3, 1 => 2, 0 => 1] toArray(reverse([1, 2, 3])); //[2 => 3, 1 => 2, 0 => 1] second(bool $convertToCollection = false) : mixed Returns the second item of $collection or throws ItemNotFound if $collection is empty or has 1 item. If $convertToCollection is true and the return value is a collection (array|Traversable) it is converted to Collection. Collection::from([1, 3, 3, 2])->second(); //3 second([1, 3]); //3 shuffle() : Collection Returns a collection of shuffled items from this collection Collection::from([1, 3, 3, 2])     ->shuffle()     ->toArray(); //something like [2 => 3, 0 => 1, 3 => 2, 1 => 3] toArray(shuffle([1, 3, 3, 2])); //something like [2 => 3, 0 => 1, 3 => 2, 1 => 3] size() : int Returns the number of items in this collection. Collection::from([1, 3, 3, 2])->size(); //4 size([1, 3, 3, 2]); //4 sizeBetween(int $fromSize, int $toSize) : bool Checks whether this collection has between $fromSize to $toSize items. $toSize can be smaller than $fromSize. Collection::from([1, 3, 3, 2])->sizeIsBetween(3, 5); //true sizeIsBetween([1, 3, 3, 2], 3, 5); //true sizeIs(int $size) : bool Checks whether this collection has exactly $size items. Collection::from([1, 3, 3, 2])->sizeIs(4); //true sizeIs([1, 3, 3, 2], 4); //true sizeIsGreaterThan(int $size) : bool Checks whether this collection has more than $size items. Collection::from([1, 3, 3, 2])->sizeIsGreaterThan(3); //true sizeIsGreaterThan([1, 3, 3, 2], 3); //true sizeIsLessThan(int $size) : bool Checks whether this collection has less than $size items. Collection::from([1, 3, 3, 2])->sizeIsLessThan(5); //true sizeIsLessThan([1, 3, 3, 2], 5); //true slice(int $from, int $to) : Collection Returns a lazy collection of items which are part of the original collection from item number $from to item number $to inclusive. The items before $from are also realized, just not returned. Collection::from([1, 2, 3, 4, 5])     ->slice(2, 4)     ->toArray(); //[2 => 3, 3 => 4] Collection::from([1, 2, 3, 4, 5])     ->slice(4)     ->toArray(); //[4 => 5] toArray(slice([1, 2, 3, 4, 5], 4)); //[4 => 5] some(callable $function) : bool Returns true if $function(value, key) returns true for at least one item in this collection, false otherwise. Collection::from([1, 3, 3, 2])     ->every(function ($value) {        return $value < 3;     }); //true Collection::from([1, 3, 3, 2])     ->find(function ($value, $key) {        return $value < 4 && $key < 2;     }, 10); //true some([1, 3, 3 ,2], function ($value) {return $value < 3;}); //true sort(callable $function) : Collection Returns collection sorted using $function(value1, value2, key1, key2). $function should return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. Collection::from([3, 1, 2])     ->sort(function ($a, $b) {         return $a > $b;     })     ->toArray(); //[1 => 1, 2 => 2, 0 => 3] Collection::from([3, 1, 2])     ->sort(function ($v1, $v2, $k1, $k2) {         return $v1 < $v2;     })     ->toArray(); //[2 => 2, 1 => 1, 0 => 3] toArray(sort([3, 1, 2], function ($a, $b) {return $a > $b;})); //[1 => 1, 2 => 2, 0 => 3] splitAt(int $position) : Collection Returns a collection of lazy collections: [take($position), drop($position)]. Collection::from([1, 3, 3, 2])     ->splitAt(2)     ->toArray(); //[[1, 3], [2 => 3, 3 => 2]] toArray(splitAt([1, 3, 3, 2], 2)); //[[1, 3], [2 => 3, 3 => 2]] splitWith(callable $function) : Collection Returns a collection of lazy collections: [takeWhile($function(value, key)), dropWhile($function(value, key))]. Collection::from([1, 3, 3, 2])     ->splitWith(function ($value) {         return $value < 3;     })     ->toArray(); //[[1], [1 => 3, 2 => 3, 3 => 2]] Collection::from([1, 3, 3, 2])     ->splitWith(function ($value, $key) {         return $key < 2 && $value < 3;     })     ->toArray(); //[[1], [1 => 3, 2 => 3, 3 => 2]] toArray(splitWith([1, 3, 3, 2], function ($value) {return $value < 3;})); //[[1], [1 => 3, 2 => 3, 3 => 2]] sum() : int|float Returns a sum of all values in this collection. Collection::from([1, 2, 3])->sum(); //6 Collection::from([1, 2, 3, 1.5])->sum(); //7.5 Collection::from([])->sum(); //0 sum([1, 2, 3]); //6 take(int $numberOfItems) : Collection A form of slice that returns first $numberOfItems items. Collection::from([1, 2, 3, 4, 5])     ->take(2)     ->toArray(); //[1, 2] toArray(take([1, 2, 3, 4, 5], 2)); //[1, 2] takeNth(int $step) : Collection Returns a lazy collection of every nth item in this collection Collection::from([1, 3, 3, 2])     ->takeNth(2)     ->toArray(); //[1, 2 => 3] toArray(takeNth([1, 3, 3, 2], 2)); //[1, 2 => 3] takeWhile(callable $function) : Collection Returns a lazy collection of items from the start of the collection until the first item for which $function(value, key) returns false. Collection::from([1, 3, 3, 2])     ->takeWhile(function ($value) {         return $value < 3;     })     ->toArray(); //[1] Collection::from([1, 3, 3, 2])     ->takeWhile(function ($value, $key) {         return $key < 2 && $value < 3;     })     ->toArray(); //[1] toArray(takeWhile([1, 3, 3, 2], function ($value) {return $value < 3;})); //[1] transform(callable $transformer) : Collection Uses a $transformer callable on itself that takes a Collection and returns Collection. This allows for creating a separate and reusable algorithms. $transformer = function (Collection $collection) {     return $collection         ->filter(function ($item) {             return $item > 1;         })         ->map('\DusanKasan\Knapsack\increment'); };  Collection::from([1, 3, 3, 2])     ->transform($transformer)     ->toArray(); //[4, 4, 3] toArray() : array Converts the collection to array recursively. Obviously this is not lazy since all the items must be realized. Calls iterator_to_array internaly. Collection::from([1, 3, 3, 2])->toArray(); //[1, 3, 3, 2] toArray([1, 3, 3, 2]); //[1, 3, 3, 2] toString() : string Returns a string by concatenating this collection's values into a string. Collection::from([1, 'a', 3, null])->toString(); //'1a3' Collection::from([])->toString(); //'' toString([1, 'a', 3, null]); //'1a3' zip(array|Traversable[] ...$collections) : Collection Returns a lazy collection of non-lazy collections of items from nth position from this collection and each passed collection. Stops when any of the collections don't have an item at the nth position. Collection::from([1, 2, 3])     ->zip(['a' => 1, 'b' => 2, 'c' => 4])     ->map('\DusanKasan\Knapsack\toArray')     ->toArray(); //[[1, 'a' => 1], [1 => 2, 'b' => 2], [2 => 3, 'c' => 4]]  Collection::from([1, 2, 3])     ->zip(['a' => 1, 'b' => 2])     ->map('\DusanKasan\Knapsack\toArray')     ->toArray(); //[[1, 'a' => 1], [1 => 2, 'b' => 2]] toArray(map(zip([1, 2, 3], ['a' => 1, 'b' => 2, 'c' => 4]), '\DusanKasan\Knapsack\toArray')); //[[1, 'a' => 1], [1 => 2, 'b' => 2], [2 => 3, 'c' => 4]] Utility functions These are the functions bundled with Knapsack to make your life easier when transitioning into functional programming. identity(mixed $value) Returns $value $value === identity($value); //true compare(mixed $a, mixed $b) Default comparator function. Returns a negative number, zero, or a positive number when $a is logically 'less than', 'equal to', or 'greater than' $b. compare(1, 2); //-1 increment(int $value) Returns value of $value incremented by one. increment(0) === 1; //true decrement(int $value) Returns value of $value decremented by one. decrement(2) === 1; //true Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/DusanKasan/Knapsack"	"Collection library inspired by Clojure's sequences."	"true"
"Data Structure and Storage"	"PHP Collections"	"https://github.com/schmittjoh/php-collection"	"A simple collections library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"229"	"18"	"33"	"GitHub - schmittjoh/php-collection: General Purpose Collection Library for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 229 Fork 33 schmittjoh/php-collection Code Issues 6 Pull requests 3 Pulse Graphs General Purpose Collection Library for PHP http://jmsyst.com/libs/php-collection 41 commits 1 branch 5 releases 6 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.4.0 0.3.1 0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit f2bcff4 May 17, 2015 schmittjoh Merge pull request #21 from schmittjoh/scrutinizer-patch-1 … Scrutinizer Auto-Fixes Permalink Failed to load latest commit information. doc adds Set implementation May 17, 2015 src/PhpCollection Scrutinizer Auto-Fixes May 17, 2015 tests adds Set implementation May 17, 2015 .gitignore initial commit Nov 30, 2012 .travis.yml Fix before_script to work with HHVM Dec 22, 2013 LICENSE initial commit Nov 30, 2012 README.md initial commit Nov 30, 2012 composer.json Bumped the branch alias for master Mar 18, 2014 composer.lock updates vendors Jul 16, 2013 phpunit.xml.dist initial commit Nov 30, 2012 README.md PHP Collection Learn more about it in its documentation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/schmittjoh/php-collection"	"A simple collections library."	"true"
"Data Structure and Storage"	"PINQ"	"https://github.com/TimeToogo/Pinq"	"A PHP library based on.NET's LINQ (Language Integrated Query)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"301"	"21"	"13"	"GitHub - TimeToogo/Pinq: PHP Integrated Query, a real LINQ library for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 301 Fork 13 TimeToogo/Pinq Code Issues 1 Pull requests 1 Pulse Graphs PHP Integrated Query, a real LINQ library for PHP http://timetoogo.github.io/Pinq/ 461 commits 3 branches 11 releases 2 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags datetimes-as-value-type gh-pages master Nothing to show 3.3.0 3.2.3 3.2.2 3.2.1 3.2.0 3.1.0 3.0.0 2.1.1 2.1.0 2.0.0 1.0.0 Nothing to show New pull request Latest commit 92f6585 Dec 31, 2015 TimeToogo Add version contraint to satooshi/php-coveralls Permalink Failed to load latest commit information. Source Update to latest nikic/php-parser Dec 31, 2015 Tests Add missing test listener method Dec 6, 2015 .coveralls.yml Added coveralls yml config Apr 21, 2014 .gitignore Fix #2, remove nbproject from repo Apr 23, 2014 .travis.yml Attempt to fix travis config Dec 6, 2015 CHANGELOG.md Loosen accessibility of Collection::updateElements Jul 8, 2015 LICENSE Bump license year Mar 26, 2015 README.md Update to latest nikic/php-parser Dec 31, 2015 composer.json Add version contraint to satooshi/php-coveralls Dec 31, 2015 phpunit.xml.dist Set stopOnFailure flag to false in phpunit.xml.dist Oct 14, 2014 README.md PHP Integrated Query - Official site What is PINQ? Based off the .NET's LINQ (Language integrated query), PINQ unifies querying across arrays/iterators and external data sources, in a single readable and concise fluent API. An example $youngPeopleDetails = $people         ->where(function ($row) { return $row['age'] <= 50; })         ->orderByAscending(function ($row) { return $row['firstName']; })         ->thenByAscending(function ($row) { return $row['lastName']; })         ->take(50)         ->indexBy(function ($row) { return $row['phoneNumber']; })         ->select(function ($row) {              return [                 'fullName'    => $row['firstName'] . ' ' . $row['lastName'],                 'address'     => $row['address'],                 'dateOfBirth' => $row['dateOfBirth'],             ];          }); More examples Installation PINQ is compatible with >= PHP 5.4 Add package to your composer.json: {     ""require"": {         ""timetoogo/pinq"": ""~3.3""     } } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TimeToogo/Pinq"	"A PHP library based on.NET's LINQ (Language Integrated Query)."	"true"
"Data Structure and Storage"	"Serializer"	"https://github.com/schmittjoh/serializer"	"A library for serialising and de-serialising data."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"495"	"38"	"389"	"GitHub - schmittjoh/serializer: Library for (de-)serializing data of any complexity (supports XML, JSON, YAML) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 38 Star 495 Fork 389 schmittjoh/serializer Code Issues 212 Pull requests 129 Pulse Graphs Library for (de-)serializing data of any complexity (supports XML, JSON, YAML) http://jmsyst.com/libs/serializer 791 commits 1 branch 8 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.1.0 1.0.0 0.16.0 0.15.0 0.14.0 0.13.0 0.12.0 0.11.0 Nothing to show New pull request Latest commit b0a46c8 May 21, 2016 schmittjoh makes sure that explicit lists are serialized as lists … If you want to make sure something is formatted as a list, i.e. ``[1, 2, 3]`` in JSON, make sure to add an explicit type like ``@Type(""array<integer>"")``.  closes #571 closes #572 closes #488 closes #304  ...and probably more Permalink Failed to load latest commit information. doc Merge pull request #553 from aledeg/patch-1 May 7, 2016 src/JMS/Serializer makes sure that explicit lists are serialized as lists May 21, 2016 tests makes sure that explicit lists are serialized as lists May 21, 2016 .gitignore travis ci test cleanup May 6, 2016 .scrutinizer.yml Enable code coverage May 10, 2016 .travis.yml reduce build matrix size May 10, 2016 CHANGELOG.md Update CHANGELOG.md Oct 31, 2013 LICENSE adds missing license file Dec 3, 2012 README.md Added travis-ci label Feb 13, 2015 UPGRADING.md Update UPGRADING.md Oct 4, 2013 composer.json Fix deps May 10, 2016 phpunit.xml.dist Added whitelist for codecoverage May 10, 2016 README.md Serializer Learn more about it in its documentation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/schmittjoh/serializer"	"A library for serialising and de-serialising data."	"true"
"Data Structure and Storage"	"Totem"	"https://github.com/Wisembly/Totem"	"A library to manage and create data changesets."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"62"	"16"	"3"	"GitHub - Wisembly/Totem: Changeset calculator between two states of a data Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 62 Fork 3 Wisembly/Totem Code Issues 5 Pull requests 1 Pulse Graphs Changeset calculator between two states of a data http://wisembly.github.io/Totem 126 commits 3 branches 17 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 1.x Switch branches/tags Branches Tags 1.x gh-pages master Nothing to show v1.4.3 v1.4.2 v1.4.1 v1.4.0 v1.3.2 v1.3.1 v1.3.0 v1.2.5 v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1 v1.0.1 v1.0.0 v0.4 Nothing to show New pull request Latest commit f62856a Dec 27, 2015 Taluu Refactor the switch in Set Permalink Failed to load latest commit information. docs Preparing release for 1.4.0 Jul 20, 2014 src test Add some assertions for deep constructor on object snapshots Dec 27, 2015 .coveralls.yml .gitignore .travis.yml Load test namespace only in dev environments Dec 26, 2015 LICENSE README.md Update README Dec 25, 2015 composer.json phpunit.xml Remove unused namespaces declaration Nov 17, 2013 README.md Totem        \\\\////         |.)(.|         | || |   Changeset calculator between two state of a data         \(__)/   Requires PHP 5.4 ; Compatible PHP 5.5, PHP 5.6, PHP 7 and HHVM         |-..-|         |o\/o|    .----\    /----.   / / / |~~~~| \ \ \  / / / /|::::|\ \ \ \ '-'-'-'-|::::|-'-'-'-'        (((^^)))         >>><<<   Snapshots currently natively supported :         ||||||   - Array         (o)(o)   - Object         | /\ |   - Collection         (====)        _(_,__)       (___\___)  Documentation For any pieces of document, please look for the docs/ directory. You may also check up the compiled version Installation You have multiple ways to install Totem. If you are unsure what to do, go with the archive release. Archive Release Download the most recent release from the release page Unpack the archive Move the files somewhere in your project Development version Install Git git clone git://github.com/Wisembly/Totem.git Via Composer Install composer in your project: curl -s http://getcomposer.org/installer | php Create a composer.json file (or update it) in your project root:   {     ""require"": {       ""wisembly/totem"": ""^1.4""     }   } Install via composer : php composer.phar install Basic Usage <?php  use Totem\Snapshot\ArraySnapshot;  $array = ['foo' => 'bar', 'baz' => 'qux']; $snapshot = new ArraySnapshot($array); // Totem\Snapshot\ArraySnapshot  $array['foo'] = 'fubar'; $set = $snapshot->diff(new ArraySnapshot($array)); // Totem\Set  var_dump($set->hasChanged('foo'),          $set->getChange('foo')->getOld(),          $set->getChange('foo')->getNew(),          $set->hasChanged('bar'));  /*   * expected result :  *  * bool(true)  * string(3) ""bar""  * string(5) ""fubar""  * bool(false)  */ Running Tests Install phpunit if not already installed Run phpunit on the project Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Wisembly/Totem"	"A library to manage and create data changesets."	"true"
"Data Structure and Storage"	"YaLinqo"	"https://github.com/Athari/YaLinqo"	"Yet Another LINQ to Objects for PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"202"	"15"	"16"	"GitHub - Athari/YaLinqo: Yet Another LINQ to Objects for PHP [Simplified BSD] Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 202 Fork 16 Athari/YaLinqo Code Issues 4 Pull requests 0 Pulse Graphs Yet Another LINQ to Objects for PHP [Simplified BSD] https://athari.github.io/YaLinqo 128 commits 3 branches 10 releases 2 contributors PHP 99.9% Batchfile 0.1% PHP Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master v1.0 Nothing to show v2.4.0 v2.3.1 v2.3.0.0 v2.2.0.0 v2.1.0.0 v2.0.0.0 v1.1.0.0 v1.0.1.1 v1.0.1.0 v1.0.0.0 Nothing to show New pull request Latest commit 59583f2 Mar 3, 2016 Athari Fixed #15 ([Insight] User specific files should not appear in .gitign… … …ore - in .gitignore, line 13): removed OS-specific entries from .gitignore. Permalink Failed to load latest commit information. Tests Fixed toString in case of same keys. Jan 11, 2016 YaLinqo Fixed toString in case of same keys. Jan 11, 2016 .coveralls.yml Added Coveralls config. May 31, 2015 .gitignore Fixed #15 ([Insight] User specific files should not appear in .gitign… Mar 3, 2016 .scrutinizer.yml Satisfying Scrutinizer: separated Enumerable into EnumerablePaginatio… Jun 8, 2015 .sensiolabs.yml Added SensioLabs config. Fixed tiny issues suggested by SensioLabs. Oct 30, 2015 .travis.yml Added proper PHPUnit config. Jun 8, 2015 composer.json Updated PHPUnit. Jun 10, 2015 license.md Updated ReadMe: removed crappy example, removed suggestion to vote fo… Jan 11, 2016 phpdoc.cmd Added support for phpDocumentor. Fixed comments: added unformatted sh… May 28, 2015 phpdoc.xml Added PHPDoc for newly added functions: cast, except, intersect, unio… Jun 7, 2015 phpunit.xml Added proper PHPUnit config. Jun 8, 2015 readme.md Updated ReadMe: removed crappy example, removed suggestion to vote fo… Jan 11, 2016 readme.md YaLinqo: Yet Another LINQ to Objects for PHP Online documentation GitHub repository Features The most complete port of .NET 4 LINQ to PHP, with many additional methods. Lazy evaluation, error messages and other behavior of original LINQ. Detailed PHPDoc and online reference based on PHPDoc for all methods. Articles are adapted from original LINQ documentation from MSDN. 100% unit test coverage. Best performance among full-featured LINQ ports (YaLinqo, Ginq, Pinq), at least 2x faster than the closest competitor, see performance tests. Callback functions can be specified as closures (like function ($v) { return $v; }), PHP ""function pointers"" (either strings like 'strnatcmp' or arrays like array($object, 'methodName')), string ""lambdas"" using various syntaxes ('""$k = $v""', '$v ==> $v+1', '($v, $k) ==> $v + $k', '($v, $k) ==> { return $v + $k; }'). Keys are as important as values. Most callback functions receive both values and the keys; transformations can be applied to both values and the keys; keys are never lost during transformations, if possible. SPL interfaces Iterator, IteratorAggregate etc. are used throughout the code and can be used interchangeably with Enumerable. Redundant collection classes are avoided, native PHP arrays are used everywhere. Composer support (package on Packagist). No external dependencies. Implemented methods Some methods had to be renamed, because their names are reserved keywords. Original methods names are given in parenthesis. Generation: cycle, emptyEnum (empty), from, generate, toInfinity, toNegativeInfinity, matches, returnEnum (return), range, rangeDown, rangeTo, repeat, split; Projection and filtering: cast, ofType, select, selectMany, where; Ordering: orderBy, orderByDescending, orderByDir, thenBy, thenByDescending, thenByDir; Joining and grouping: groupJoin, join, groupBy; Aggregation: aggregate, aggregateOrDefault, average, count, max, maxBy, min, minBy, sum; Set: all, any, contains, distinct, except, intersect, union; Pagination: elementAt, elementAtOrDefault, first, firstOrDefault, firstOrFallback, last, lastOrDefault, lastOrFallback, single, singleOrDefault, singleOrFallback, indexOf, lastIndexOf, findIndex, findLastIndex, skip, skipWhile, take, takeWhile; Conversion: toArray, toArrayDeep, toList, toListDeep, toDictionary, toJSON, toLookup, toKeys, toValues, toObject, toString; Actions: call (do), each (forEach), write, writeLine. In total, more than 70 methods. Example Process sample data: // Data $products = array(     array('name' => 'Keyboard',    'catId' => 'hw', 'quantity' =>  10, 'id' => 1),     array('name' => 'Mouse',       'catId' => 'hw', 'quantity' =>  20, 'id' => 2),     array('name' => 'Monitor',     'catId' => 'hw', 'quantity' =>   0, 'id' => 3),     array('name' => 'Joystick',    'catId' => 'hw', 'quantity' =>  15, 'id' => 4),     array('name' => 'CPU',         'catId' => 'hw', 'quantity' =>  15, 'id' => 5),     array('name' => 'Motherboard', 'catId' => 'hw', 'quantity' =>  11, 'id' => 6),     array('name' => 'Windows',     'catId' => 'os', 'quantity' => 666, 'id' => 7),     array('name' => 'Linux',       'catId' => 'os', 'quantity' => 666, 'id' => 8),     array('name' => 'Mac',         'catId' => 'os', 'quantity' => 666, 'id' => 9), ); $categories = array(     array('name' => 'Hardware',          'id' => 'hw'),     array('name' => 'Operating systems', 'id' => 'os'), );  // Put products with non-zero quantity into matching categories; // sort categories by name; // sort products within categories by quantity descending, then by name. $result = from($categories)     ->orderBy('$cat ==> $cat[""name""]')     ->groupJoin(         from($products)             ->where('$prod ==> $prod[""quantity""] > 0')             ->orderByDescending('$prod ==> $prod[""quantity""]')             ->thenBy('$prod ==> $prod[""name""]'),         '$cat ==> $cat[""id""]', '$prod ==> $prod[""catId""]',         '($cat, $prods) ==> array(  ""name"" => $cat[""name""],  ""products"" => $prods  )'     );  // Alternative shorter syntax using default variable names $result2 = from($categories)     ->orderBy('$v[""name""]')     ->groupJoin(         from($products)             ->where('$v[""quantity""] > 0')             ->orderByDescending('$v[""quantity""]')             ->thenBy('$v[""name""]'),         '$v[""id""]', '$v[""catId""]',         'array(  ""name"" => $v[""name""],  ""products"" => $e  )'     );  // Closure syntax, maximum support in IDEs, but verbose and hard to read $result3 = from($categories)     ->orderBy(function ($cat) { return $cat['name']; })     ->groupJoin(         from($products)             ->where(function ($prod) { return $prod[""quantity""] > 0; })             ->orderByDescending(function ($prod) { return $prod[""quantity""]; })             ->thenBy(function ($prod) { return $prod[""name""]; }),         function ($cat) { return $cat[""id""]; },         function ($prod) { return $prod[""catId""]; },         function ($cat, $prods) {             return array(                 ""name"" => $cat[""name""],                 ""products"" => $prods             );         }     );  print_r($result->toArrayDeep()); Output (compacted): Array (     [hw] => Array (         [name] => Hardware         [products] => Array (             [0] => Array ( [name] => Mouse       [catId] => hw [quantity] =>  20 [id] => 2 )             [1] => Array ( [name] => CPU         [catId] => hw [quantity] =>  15 [id] => 5 )             [2] => Array ( [name] => Joystick    [catId] => hw [quantity] =>  15 [id] => 4 )             [3] => Array ( [name] => Motherboard [catId] => hw [quantity] =>  11 [id] => 6 )             [4] => Array ( [name] => Keyboard    [catId] => hw [quantity] =>  10 [id] => 1 )         )     )     [os] => Array (         [name] => Operating systems         [products] => Array (             [0] => Array ( [name] => Linux       [catId] => os [quantity] => 666 [id] => 8 )             [1] => Array ( [name] => Mac         [catId] => os [quantity] => 666 [id] => 9 )             [2] => Array ( [name] => Windows     [catId] => os [quantity] => 666 [id] => 7 )         )     ) )  Requirements Version 1: PHP 5.3 or higher. Version 2: PHP 5.5 or higher. Usage Add to composer.json: {     ""require"": {         ""athari/yalinqo"": ""~2.0""     } } Add to your PHP script: require_once 'vendor/autoloader.php'; use \YaLinqo\Enumerable;  // 'from' can be called as a static method or via a global function shortcut Enumerable::from(array(1, 2, 3)); from(array(1, 2, 3)); License Simplified BSD License Copyright © 2012–2016, Alexander Prokhorov All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ALEXANDER PROKHOROV BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Links YaLinqo CodeProject articles (English): LINQ for PHP comparison: YaLinqo, Ginq, Pinq — performance comparison of full-featured LINQ ports, with some additional information. Habrahabr articles (Russian): Comparison of old LINQ libraries — comparison of LINQ for PHP, Phinq, PHPLinq and Plinq, also Underscore.php. YaLinqo 1.0 with updated comparison — explanation of architecture and design decisions. YaLinqo 2.0 — switch to PHP 5.5 with generators support and related changes. LINQ for PHP: speed matters — performance comparison of full-featured LINQ ports (YaLinqo, Ginq, Pinq). Other: Tute Wall: How to use Linq in PHP by Mr. X — a series of posts covering basic usage of YaLinqo. Related projects: YaLinqoPerf — collection of performance tests comparing raw PHP, array functions, YaLinqo, YaLinqo with string lambdas, Ginq, Ginq with property accessors, Pinq. LINQ ported to other languages: linq.js — LINQ for JavaScript. The one and only complete port of .NET 4 LINQ to JavaScript. Underscore.js — library for functional programming in JavaScript. Similar to LINQ, but different method names and no lazy evaluation. Underscore.php — port of Underscore.js to PHP. Identical functionality. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Athari/YaLinqo"	"Yet Another LINQ to Objects for PHP."	"true"
"Data Structure and Storage"	"Zend Serializer"	"https://github.com/zendframework/zend-serializer"	"Another library for serialising and de-serialising data (ZF2)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5"	"19"	"14"	"GitHub - zendframework/zend-serializer: Serializer component from Zend Framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 5 Fork 14 zendframework/zend-serializer Code Issues 1 Pull requests 2 Pulse Graphs Serializer component from Zend Framework https://zendframework.github.io/zend-serializer/ 6,520 commits 4 branches 66 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages legacy master Nothing to show release-2.8.0 release-2.7.2 release-2.7.1 release-2.7.0 release-2.6.1 release-2.6.0 release-2.5.1 release-2.5.0 release-2.4.10 release-2.4.9 release-2.4.8 release-2.4.7 release-2.4.6 release-2.4.5 release-2.4.4 release-2.4.3 release-2.4.2 release-2.4.1 release-2.4.0 release-2.4.0rc7 release-2.4.0rc6 release-2.4.0rc5 release-2.4.0rc4 release-2.4.0rc3 release-2.4.0rc2 release-2.4.0rc1 release-2.3.9 release-2.3.8 release-2.3.7 release-2.3.6 release-2.3.5 release-2.3.4 release-2.3.3 release-2.3.2 release-2.3.1 release-2.3.0 release-2.2.10 release-2.2.9 release-2.2.8 release-2.2.7 release-2.2.6 release-2.2.5 release-2.2.4 release-2.2.3 release-2.2.2 release-2.2.1 release-2.2.0 release-2.2.0rc3 release-2.2.0rc2 release-2.2.0rc1 release-2.1.6 release-2.1.5 release-2.1.4 release-2.1.3 release-2.1.2 release-2.1.1 release-2.1.0 release-2.0.8 release-2.0.7 release-2.0.6 release-2.0.5 release-2.0.4 release-2.0.3 release-2.0.2 release-2.0.1 release-2.0.0 Nothing to show New pull request Latest commit 20f333b Jun 21, 2016 weierophinney Bumped version Permalink Failed to load latest commit information. doc/book Edited all documentation for content and formatting May 11, 2016 src Update to stable dependencies Jun 21, 2016 test Update to stable dependencies Jun 21, 2016 .coveralls.yml Update to stable dependencies Jun 21, 2016 .gitattributes Update to stable dependencies Jun 21, 2016 .gitignore Added documentation build automation May 11, 2016 .travis.yml Update to stable dependencies Jun 21, 2016 CHANGELOG.md Bumped to next dev version (2.8.1) Jun 21, 2016 CONDUCT.md Added code manifesto as code of conduct Mar 5, 2016 CONTRIBUTING.md Fixed escaping in CONTRIBUTING.md Mar 7, 2016 LICENSE.md Renamed/reflowed LICENSE.txt to LICENSE.md May 29, 2015 README.md Edited all documentation for content and formatting May 11, 2016 composer.json Updated branch aliases Jun 21, 2016 composer.lock Update to stable dependencies Jun 21, 2016 mkdocs.yml Edited all documentation for content and formatting May 11, 2016 phpcs.xml Update to stable dependencies Jun 21, 2016 phpunit.xml.dist Use composer autoloader as phpunit bootstrap Apr 6, 2016 README.md zend-serializer zend-serializer provides an adapter-based interface for generating and recovering from storable representations of PHP types. File issues at https://github.com/zendframework/zend-serializer/issues Documentation is at https://zendframework.github.io/zend-serializer/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zendframework/zend-serializer"	"Another library for serialising and de-serialising data (ZF2)."	"true"
"Notifications"	"JoliNotif"	"https://github.com/jolicode/JoliNotif"	"A cross-platform library for desktop notification (support for Growl, notify-send, toaster, etc)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"613"	"42"	"45"	"GitHub - jolicode/JoliNotif: Send notifications to your desktop directly from your PHP script Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 42 Star 613 Fork 45 jolicode/JoliNotif Code Issues 2 Pull requests 1 Pulse Graphs 💻 Send notifications to your desktop directly from your PHP script http://jolicode.com/blog/desktop-notification-in-php 97 commits 2 branches 6 releases 9 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix/utf8 master Nothing to show v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0 Nothing to show New pull request Latest commit 51205fe Mar 26, 2016 pyrech Update changelog Permalink Failed to load latest commit information. bin Remove useless files May 27, 2015 doc Update documentation Mar 26, 2016 example Configure php-cs-fixer and fix CS Oct 26, 2015 src Factory now returns a NullNotifier if no supported Notifier Mar 26, 2016 tests Factory now returns a NullNotifier if no supported Notifier Mar 26, 2016 .gitignore Updated Composer config Sep 17, 2015 .php_cs Configure php-cs-fixer and fix CS Oct 26, 2015 .travis.yml Fix .travis.yml Mar 21, 2016 CHANGELOG.md Update changelog Mar 26, 2016 CONTRIBUTING.md Updated Composer config Sep 17, 2015 LICENSE Initial commit Mar 1, 2015 README.md Update documentation Mar 26, 2016 VERSIONING.md Initial commit Mar 1, 2015 box.json Add BinaryProvider Mar 11, 2015 composer.json Prepare v1.1 Mar 23, 2016 phpunit.xml.dist Initial commit Mar 1, 2015 README.md JoliNotif PHP >= 5.4 JoliNotif is a PHP library to send notifications to your desktop directly from your script. It takes care of using the right binary available, without having to worry if you're running on Linux, Windows or MacOS. For example, if you have a long running PHP task - like executing a large test suite, launching a deployment script - you can use JoliNotif to inform your users that a task just finished. Installation Use Composer to install JoliNotif in your project: composer require ""jolicode/jolinotif"" Usage Use the NotifierFactory to create a Notifier according to which notifiers are available on your system, then use it to send your notification: include __DIR__.'/vendor/autoload.php';  use Joli\JoliNotif\Notification; use Joli\JoliNotif\NotifierFactory;  // Create a Notifier $notifier = NotifierFactory::create();  // Create your notification $notification =     (new Notification())     ->setTitle('Notification title')     ->setBody('This is the body of your notification')     ->setIcon(__DIR__.'/path/to/your/icon.png') ;  // Send it $notifier->send($notification); Further documentation Discover more by reading the docs: Basic usage Notification Notifier Advanced usage You can see the current and past versions using one of the following: the git tag command the releases page on Github the file listing the changes between versions And finally some meta documentation: versioning and branching models contribution instructions Credits All contributors This project was originally inspired by mikaelbr/node-notifier License JoliNotif is licensed under the MIT License - see the LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jolicode/JoliNotif"	"A cross-platform library for desktop notification (support for Growl, notify-send, toaster, etc)"	"true"
"Notifications"	"Nod"	"https://github.com/filp/nod"	"A notification library (e.g. Growl)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"44"	"4"	"7"	"GitHub - filp/nod: Notifications in PHP (notify-send, growl, etc) like that. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 44 Fork 7 filp/nod Code Issues 0 Pull requests 0 Pulse Graphs Notifications in PHP (notify-send, growl, etc) like that. 9 commits 1 branch 0 releases 2 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit e7b9112 Aug 29, 2012 fdob committed with filp Updated Atoum adapter to work as an async report handler. Still very WIP Permalink Failed to load latest commit information. src/Nod Updated Atoum adapter to work as an async report handler. Still very WIP Aug 29, 2012 tests Added tests skeleton, now about those tests... Aug 28, 2012 .gitignore Added tests skeleton, now about those tests... Aug 28, 2012 .travis.yml Added tests skeleton, now about those tests... Aug 28, 2012 README.markdown Added missing right-paren in README.markdown Aug 29, 2012 composer.json Added (untested) adapter/writer for atoum, updated composer.json acco… Aug 29, 2012 composer.lock Added (untested) adapter/writer for atoum, updated composer.json acco… Aug 29, 2012 phpunit.xml.dist Added tests skeleton, now about those tests... Aug 28, 2012 README.markdown Nod Notifications in PHP (notify-send, growl, etc) like that. Examples Letting Nod figure out the best Adapter to use (not recommend ATM, only works with some Linux environments): #!/usr/bin/env php <?php    $notification = new Nod\Notification; $notification   ->setTitle('My rad notification')   ->setMessage('Check it.')   ->setUrgency('high')   ->setExpiry(3000)   ->setIcon('emblem-favorite.png')   ->send(); Explicitly giving Nod an Adapter to work with: #!/usr/bin/env php <?php    use Nod\Adapter\Terminal as TerminalAdapter;  $notification = new Nod\Notification(new TerminalAdapter); $notification   ->setTitle('Look at ya')   ->setMessage('Let me see what ya got')   // you can also specify the expiry directly in the send() method:   ->send(5000); Creating your own Adapters is also as easy as implementing Nod\Adapter\AdapterInterface: <?php  namespace Nod\Adapter; interface AdapterInterface {     /* bool */ public function canNotify();     /* bool */ public function process($title, $message, $urgency, $expiry, $icon); } Installation Nod is available through composer (packagist page), just drop filp/nod into your composer.json and you're good to go: {     ""require"" : {         ""filp/nod"" : ""dev-master""     } } The Nod library can be loaded directly through the composer autoloader, or with any PSR-0 compatible autoloader. TODOs, wishlist, etc Platform support (OSX growl, Windows growl, etc) Unit tests (soon!) More adapters for all sorts of zany stuff. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/filp/nod"	"A notification library (e.g. Growl)."	"true"
"Notifications"	"Notification Pusher"	"https://github.com/Ph3nol/NotificationPusher"	"A standalone library for device push notifications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"753"	"58"	"170"	"GitHub - Ph3nol/NotificationPusher: Standalone PHP library for easy devices notifications push. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 58 Star 753 Fork 170 Ph3nol/NotificationPusher Code Issues 36 Pull requests 8 Pulse Graphs Standalone PHP library for easy devices notifications push. 194 commits 2 branches 18 releases 27 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x master Nothing to show v2.2.12 v2.2.11 v2.2.10 v2.2.9 v2.2.8 v2.2.7 v2.2.6 v2.2.5 v2.2.4 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.1.2 v2.1.1 v2.1.0 v2.0 v1.0 Nothing to show New pull request Latest commit f9a99ed Oct 1, 2015 Ph3nol Merge pull request #73 from boboldehampsink/master … Added support for title, title-loc-key and title-loc-args Permalink Failed to load latest commit information. doc fix namespaces (ApnsAdapter is the only real change) Aug 27, 2015 src/Sly/NotificationPusher Merge pull request #73 from boboldehampsink/master Oct 1, 2015 tests/units/Sly/NotificationPusher Comment on one line. Jul 8, 2015 .atoum.bootstrap.php Tests improvements Dec 8, 2013 .atoum.php Typo fixed Dec 8, 2013 .gitignore Tests improvements Dec 8, 2013 .travis.yml removing ci test for unsupported php versions Aug 27, 2015 LICENSE First 2.x version Jun 16, 2013 README.md tell people directly they need 5.5 Aug 27, 2015 composer.json all the zend libs require 5.5 Aug 27, 2015 np First Console elements Jun 19, 2013 README.md NotificationPusher Standalone PHP library for easy devices message notifications push. Feel free to contribute! Thanks. Requirements PHP 5.5+ PHP Curl and OpenSSL modules Specific adapters requirements (like APNS certificate, GCM API key, etc.) Today available adapters APNS (Apple) GCM (Android) Documentation and examples Installation Getting started APNS adapter GCM adapter Create an adapter Push from CLI Todo Add new features (custom APNS payloads, GCM custom options, etc.) Add new adapters (like Blackberry and Windows phones) Write more documentation and examples 1.x users Old version is still available from 1.x branch, with dedicated declared tag. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Ph3nol/NotificationPusher"	"A standalone library for device push notifications."	"true"
"Notifications"	"Notificato"	"https://github.com/mac-cain13/notificato"	"A library for handling push notifications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"183"	"11"	"30"	"GitHub - mac-cain13/notificato: Takes care of Apple push notifications (APNS) in your PHP projects. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 183 Fork 30 mac-cain13/notificato Code Issues 3 Pull requests 0 Pulse Graphs Takes care of Apple push notifications (APNS) in your PHP projects. 213 commits 2 branches 17 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 1.2.0 1.1.3 1.1.2 1.1.1 1.1.0 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 0.5.0 0.4.0 0.3.0 0.2.1 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit b6e025c Feb 11, 2016 mac-cain13 Update upgrade.md Permalink Failed to load latest commit information. doc Fixed docs typo Jul 10, 2015 src/Wrep/Notificato Add support for new Apple certificates Feb 11, 2016 tests Add category to the message May 12, 2015 .gitignore Rename operation to Notificato Mar 18, 2013 .travis.yml Don't allow failures on PHP 7 sinds it's released Feb 11, 2016 Contribute.md Updated e-mailaddress Dec 12, 2013 License Remove old Wrep references Jan 18, 2015 Readme.md Update Readme Jan 14, 2015 Upgrade.md Update upgrade.md Feb 11, 2016 composer.json Update emailaddress Oct 22, 2015 phpunit.xml.dist Converted to tabs for indention Mar 20, 2013 sami.config.php Only generate API docs for 1.* versions Mar 21, 2013 Readme.md Notificato Notificato takes care of push notifications in your PHP projects. Italian: notificato è: participio passato English: notified Why use Notificato instead of X? Notificato has some advantages not all other PHP push libraries have: Supports multiple APNS certificates, so you can push to multiple Apps/Passbook Passes Takes excellent care of PHPs buggy SSL-sockets, handles quirks and error responses correctly Well tested with unit tests and nice Object-Oriented structure Installation Installation with Composer is recommended. Run the require command to add Notificato to your project: composer require wrep/notificato Alternatives: There is also a Notificato for Symfony2 bundle available, highly recommended for Symfony2 users. Getting started Take a look at the snippet below for a impression how Notificato works Read the documentation it will help you with common use cases Check out the API docs for a deeper understanding what Notificato is capable of <?php // This imports the Composer autoloader require_once('vendor/autoload.php');  use Wrep\Notificato\Notificato;  class GettingStarted {     /**  * This example sends one pushnotification with an alert to Apples production push servers  */     public function sendOnePushNotification()     {         // First we get a Notificato instance and tell it what certificate to use as default certificate         $notificato = new Notificato('./certificate.pem', 'passphrase-to-use');          // Now we get a fresh messagebuilder from Notificato         // This message will be send to device with pushtoken 'fffff...'         // it will automaticly be associated with the default certificate         // and we will set the red badge on the App icon to 1         $message = $notificato->messageBuilder()                                 ->setDeviceToken('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')                                 ->setBadge(1)                                 ->build();          // The message is ready, let's send it!         // Be aware that this method is blocking and on failure Notificato will retry if necessary         $messageEnvelope = $notificato->send($message);          // The returned envelope contains usefull information about how many retries where needed and if sending succeeded         echo $messageEnvelope->getFinalStatusDescription();     }      /**  * This example reads all unregistered devices from Apples feedback service  */     public function readFeedbackService()     {         // First we get the a Notificato instance and tell it what certificate to use as default certificate         $notificato = new Notificato('./certificate.pem', 'passphrase-to-use');          // Now read all ""tuples"" from the feedback service, be aware that this method is blocking         $tuples = $notificato->receiveFeedback();          // The tuples contain information about what device unregistered and when it did unregister.         // Don't forget to check if the device reregistered after the ""invaidated at"" date!         foreach ($tuples as $tuple)         {             echo 'Device ' . $tuple->getDeviceToken() . ' invalidated at ' . $tuple->getInvalidatedAt()->format(\DateTime::ISO8601) . PHP_EOL;         }     } }  $gettingStarted = new GettingStarted(); $gettingStarted->sendOnePushNotification(); $gettingStarted->readFeedbackService(); Contribute We'll love contributions, read Contribute.md for some more info on what you can do and stuff that you should know if you want to help! License & Credits Notificato is released under the MIT License by Mathijs Kadijk, so feel free to use it in commercial and non-commercial projects. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mac-cain13/notificato"	"A library for handling push notifications."	"true"
"Notifications"	"Notificator"	"https://github.com/namshi/notificator"	"A lightweight notification library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"115"	"27"	"16"	"GitHub - namshi/notificator: A very lightweight library to handle notifications the smart way. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 115 Fork 16 namshi/notificator Code Issues 0 Pull requests 0 Pulse Graphs A very lightweight library to handle notifications the smart way. 108 commits 7 branches 16 releases Fetching contributors PHP 98.4% JavaScript 1.6% PHP JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags added-logger all-to-here develop master refactoring sms-country swiftmailer Nothing to show 4.0.2 4.0.1 4.0.0 3.0.0 2.0.0 1.1.5 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit 89aaf56 Dec 20, 2015 odino Merge pull request #26 from namshi/all-to-here … Update hipchat example, closes #25 Permalink Failed to load latest commit information. examples Update hipchat.php Dec 20, 2015 spec/Namshi/Notificator moving logic to the parent class Apr 8, 2015 src/Namshi/Notificator Merge pull request #22 from pierredup/symfony-bundle May 20, 2015 .gitignore Added the handler for swiftmailer: Apr 13, 2014 .travis.yml removing outdated php versions tests Aug 25, 2013 Gruntfile.js plug some spec for notification Aug 22, 2013 README.md Add Symfony2 bundle May 11, 2015 composer.json Added the handler for swiftmailer: Apr 13, 2014 composer.lock Added the handler for swiftmailer: Apr 13, 2014 package.json plug grunt and add spec for interface manager Aug 22, 2013 README.md NAMSHI | Notificator Notificator is a very simple and lightweight library to handle notifications the smart way. It took inspiration from other libraries and patterns (Monolog and event dispatching) in order to provide a domain-driven lean notification library. Concepts are very simple: you have a notification Manager which has a few handlers registered with it (maybe an Email handler, a Skype handler, etc.); you only have to create a notification class, define which handlers should handle it and trigger it through the manager. It is way simpler in code than in words, check the documentation below! Installation Installation can be done via composer, as the library is already on packagist. The library uses semantic versioning for its API, so it is recommended to use a stable minor version (1.0, 1.1, etc.) and stick to it when declaring dependencies through composer: ""namshi/notificator"": ""1.0.*"",  Usage Using this library is very easy thanks to the simple concept - borrowed from others - behind it: you basically have a notification manager with some handlers and then you fire (trigger()) the notification with the manager. At that point, all the handlers that need to fire that notification will take care of firing it in their context (might be an email, a skype message, etc) and tell the manager that they're done, so that the manager can forward the notification to the next handler. <?php  // import namespaces use Namshi\Notificator\Notification\Handler\NotifySend as NotifySendHandler; use Namshi\Notificator\Manager; use Namshi\Notificator\Notification\NotifySend\NotifySendNotification;  // create the handler $handler = new NotifySendHandler();  // create the manager and assign the handler to it $manager = new Manager(); $manager->addHandler($handler);  $notification = new NotifySendNotification(""...whatever message..."");  // trigger the notification $manager->trigger($notification); This code, ran on ubuntu, will fire the notification using the notify-send utility: The notification Manager The manager is the entity that registers all the handlers and fires the notification. You can set and add handlers very easily: <?php  $handler  = new MyHandler(); $handlers = array(     new AnotherHandler(), new AnotherOneHandler(), );  $manager = new Manager();  // add multiple handlers $manager->setHandlers($handlers);  // add a single handler $manager->addHandler($handler);  // reset the handlers $manager->setHandlers(array()); Creating a new notification Creating new notifications is very easy, as they are plain PHP classes. They might extend the base Notification class but that is not mandatory. It is recommended, to be able to fire one notification through multiple handlers, to extend the base Notification class, and implement different interfaces that will be later checked by the handlers. <?php  use Namshi\Notificator\Notification; use Namshi\Notificator\NotificationInterface;  interface EchoedNotificationInterface extends NotificationInterface {     public function getMessage(); }  interface EmailNotificationInterface extends NotificationInterface {     public function getAddress();     public function getSubject();     public function getBody(); }  class DoubleNotification extends Notification implements EchoedNotificationInterface, EmailNotificationInterface {     protected $address;     protected $body;     protected $subject;      public function __construct($address, $subject, $body, array $parameters = array())     {         parent::__construct($parameters);          $this->address  = $address;         $this->body     = $body;         $this->subject  = $subject;         $this->message  = $body;     }      public function getAddress()     {         return $this->address;     }      public function getSubject()     {         return $this->subject;     }      public function getBody()     {         return $this->body;     }      public function getMessage()     {         return $this->message;     } } As you probably got, the above notification class is meant to be triggered via email and with the echo function (pretty useless, but gives you an idea). But the work wouldn't be over here, as you would need to implement handlers for this notification... Creating a new handler Let's say that we want to create the handlers that would handle the notification above, by echoing it and sending it via email: it is a matter of implementing 2 classes with a couple methods, shouldHandle and handle. Let's see how the EchoedNotificationHandler should look like: use Namshi\Notificator\Notification\Handler\HandlerInterface; use Namshi\Notificator\NotificationInterface;  class EchoedNotificationHandler implements HandlerInterface {     public function shouldHandle(NotificationInterface $notification)     {         return $notification instanceOf EchoedNotificationInterface;     }      public function handle(NotificationInterface $notification)     {         echo $notification->getMessage();     } } Pretty easy, right? First, we need to check if this handler is handling the given notification, and that check is done by seeing if the notification implements a known interface; second, we actually trigger the notification. The same thing needs to be done for the EmailNotificationHandler: use Namshi\Notificator\Notification\Handler\HandlerInterface; use Namshi\Notificator\NotificationInterface;  class EmailNotificationHandler implements HandlerInterface {     public function shouldHandle(NotificationInterface $notification)     {         return $notification instanceOf EmailNotificationInterface;     }      public function handle(NotificationInterface $notification)     {         mail($notification->getAddress(), $notification->getSubject(), $notification->getBody());     } } If you want to stop notification propagation after an handler has triggered the notification, you just need to return false in the handle method of the handler: public function handle(NotificationInterface $notification) {     // do whatever you want with the notification     // ...      return false; } This will tell the manager to stop propagating the notification to other handlers. Inside Symfony2 Namshi is currently using this library inside their Symfony2 applications. Add the bundle to your AppKernel.php:      $bundles = array(          ...          new Namshi\Notificator\Symfony\NamshiNotificatorBundle()      );  To register a new handler, create a service with the notification.handler tag: namshi.notification.handler.email:     class: Namshi\Notificator\Notification\Handler\Emailvision     arguments:       client: @namshi.email_client.emailvision      tags:         - { name: notification.handler }  namshi.email_client.emailvision:     class: Namshi\Emailvision\Client     arguments:       config:         test_email:           random:   AAA           encrypt:  BBB           uidkey:   email           stype:    NOTHING  This configuration registers an Emailvision handler. RabbitMQ If you use Symfony2 and the RabbitMQBundle you can trigger notifications with this library via RabbitMQ, by using the provided consumer. Declare the consumer as a service: namshi.notification.consumer:     class: Namshi\Notificator\Messaging\RabbitMQ\Symfony2\Consumer     arguments: [@namshi.notification.manager]  Then configure it within the RabbitMQ bundle: old_sound_rabbit_mq:     consumers:         notification:             connection: default             exchange_options: {name: 'notifications', type: direct}             queue_options:    {name: 'notifications'}             callback:         namshi.notification.consumer  And at that point you can run the consumer with: php app/console rabbitmq:consumer -w notification  To send notifications, the idea is that you serialize them inside the RabbitMQ messages: $publisher = $container->get('old_sound_rabbit_mq.notifications_producer');  $notification = new MyWhateverNotification(""man, this comes from RabbitMQ and Symfony2!"");  $publisher->publish(serialize($notification)); That's it! Built-in handlers We, at Namshi have developed some very simple, built-in, handlers according to our needs. Keep in mind that the main reason behind building this kind of library is the ability of triggering notification from each component of our SOA, mostly via RabbitMQ. You can take advantage of the following handlers: SwiftMailer, which lets you use the amazing SwiftMailer to send email notifications through any SMTP server (ie. Amazon's SES, or SendGrid) HipChat, which posts messages in an HipChat room Emailvision, which sends emails through the Emailvision API NotifySend, which triggers notifications on Ubuntu RabbitMQ, which triggers notifications through RabbitMQ If you have an idea for a new handler, don't hesitate with a pull request: sure, they can be implemented within your own code, but why not sharing them with the OSS ecosystem? Examples You can have a look at the few examples provided so far, under the examples directory: sending messages on HipChat creating a custom handler that sends an email using the notify-send handler triggering a notification that is not handled by any handler Running specs In order to run the spec suite after running composer install do the following: php vendor/bin/phpspec run --format=dot  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/namshi/notificator"	"A lightweight notification library."	"true"
"Notifications"	"Php-pushwoosh"	"https://github.com/gomoob/php-pushwoosh"	"A PHP Library to easily send push notifications with the Pushwoosh REST Web Services."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"35"	"8"	"17"	"GitHub - gomoob/php-pushwoosh: A PHP Library to easily send push notifications with the Pushwoosh REST Web Services. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 35 Fork 17 gomoob/php-pushwoosh Code Issues 9 Pull requests 0 Pulse Graphs A PHP Library to easily send push notifications with the Pushwoosh REST Web Services. http://gomoob.github.io/php-pushwoosh 236 commits 5 branches 28 releases 7 contributors PHP 98.1% JavaScript 1.9% PHP JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop devices-filter gh-pages master revert-54-master Nothing to show 1.6.1 1.6.0 1.5.3 1.5.2 1.5.1 1.5.0 1.4.0 1.3.1 1.3.0 1.2.0 1.1.1 1.1.0 1.0.9 1.0.8 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 0.1.0 0.1.0-alpha5 0.1.0-alpha4 0.1.0-alpha3 0.1.0-alpha2 0.1.0-alpha1 Nothing to show New pull request Latest commit c4ab4d2 Jul 7, 2016 bgaillard Prepare version 1.6.1. Permalink Failed to load latest commit information. .settings Configure Eclipse validation rules. Apr 26, 2015 src Try to fix PHPUnit execution on HHVM. Jul 7, 2016 .buildpath Remove support for version 5.5 of PHP. Jun 27, 2016 .coveralls.yml Remove unused src_dir with Coveralls. Jul 5, 2016 .gitattributes Fix issue #27. Oct 19, 2015 .gitignore Prepare version 1.0.6. Oct 14, 2015 .project Configure Eclipse validation rules. Apr 26, 2015 .travis.yml Switch back to default HHVM version. Jul 5, 2016 Gruntfile.js Try to fix PHPUnit execution on HHVM. Jul 7, 2016 LICENSE.md Add an MIT LICENSE.md file. Sep 9, 2014 README.md Fix naming error on applications_group. Jun 26, 2016 code-climate-test-reporter Remove support for version 5.5 of PHP. Jun 26, 2016 composer.json Prepare version 1.6.1. Jul 7, 2016 composer.lock Prepare version 1.6.1. Jul 7, 2016 package.json Prepare version 1.6.1. Jul 7, 2016 phpunit.xml.dist Fix coveralls execution. Jan 18, 2015 README.md php-pushwoosh A PHP Library to easily send push notifications with the Pushwoosh REST Web Services. First sample, creating a Pushwoosh message // Create a Pushwoosh client $pushwoosh = Pushwoosh::create()     ->setApplication('XXXX-XXX')     ->setAuth('xxxxxxxx');  // Create a request for the '/createMessage' Web Service $request = CreateMessageRequest::create()     ->addNotification(Notification::create()->setContent('Hello Jean !'));  // Call the REST Web Service $response = $pushwoosh->createMessage($request);  // Check if its ok if($response->isOk()) {     print 'Great, my message has been sent !'; } else {     print 'Oups, the sent failed :-(';      print 'Status code : ' . $response->getStatusCode();     print 'Status message : ' . $response->getStatusMessage(); } Easy, isn't it ? Documentation Documentation How to Contribute Framework Integrations Laravel - https://github.com/schimpanz/Laravel-Pushwoosh Symfony 2 - https://github.com/Prezent/pushwoosh-bundle If you have integrated php-pushwoosh into a popular PHP framework let us know ! About Gomoob At Gomoob we build high quality software with awesome Open Source frameworks everyday. Would you like to start your next project with us? That's great! Give us a call or send us an email and we will get back to you as soon as possible ! You can contact us by email at contact@gomoob.com or by phone number (+33) 6 85 12 81 26 or (+33) 6 28 35 04 49. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gomoob/php-pushwoosh"	"A PHP Library to easily send push notifications with the Pushwoosh REST Web Services."	"true"
"Deployment"	"Deployer"	"https://github.com/deployphp/deployer"	"A deployment tool."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2624"	"151"	"369"	"GitHub - deployphp/deployer: A deployment tool written in PHP with support for popular frameworks out of the box Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 151 Star 2,624 Fork 369 deployphp/deployer Code Issues 61 Pull requests 11 Pulse Graphs A deployment tool written in PHP with support for popular frameworks out of the box http://deployer.org 720 commits 3 branches 30 releases Fetching contributors PHP 99.6% Shell 0.4% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.x 4.x master Nothing to show v3.3.0 v3.2.1 v3.2.0 v3.1.2 v3.1.1 v3.1.0 v3.0.11 v3.0.10 v3.0.9 v3.0.8 v3.0.7 v3.0.6 v3.0.5 v3.0.4 v3.0.3 v3.0.2 v3.0.1 v3.0.0 v3.0.0-beta.5 v3.0.0-beta.4 v3.0.0-beta.3 v3.0.0-beta.2 v3.0.0-beta.1 v3.0.0-beta v2.0.5 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 Nothing to show New pull request Latest commit a82a40c Jun 27, 2016 cjsewell committed with oanhnn Add support for Silverstripe CMS (#709) … * Add support for Silverstripe CMS  * Fix typo Permalink Failed to load latest commit information. .github Update ISSUE_TEMPLATE.md Mar 15, 2016 bin Custom bin Apr 4, 2016 recipe Add support for Silverstripe CMS (#709) Jun 26, 2016 src fixed #701 Jun 22, 2016 test Applied fixes from StyleCI May 31, 2016 .editorconfig Update readme Jun 17, 2015 .gitattributes Do not export some files and folders May 5, 2016 .gitignore Close #546 and #547 Feb 1, 2016 .php_cs Add header comment fixer Apr 13, 2016 .scrutinizer.yml Use PHP 5.5 on scrutinizer Mar 13, 2016 .styleci.yml Revert ""Exclude no_extra_consecutive_blank_lines from .styleci.yml"" Mar 19, 2016 .travis.yml Update .travis.yml May 6, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Sep 7, 2015 LICENSE Update year in LICENSE Jan 8, 2016 README.md Shorten deployer.phar curl download command May 27, 2016 UPGRADE.md Create UPGRADE.md Feb 5, 2015 build Fix detecting phar location. May 26, 2015 composer.json Use deployer/phar-update instead of kherge/amend. Upgrade composer.lo… Apr 7, 2016 composer.lock Use deployer/phar-update instead of kherge/amend. Upgrade composer.lo… Apr 7, 2016 phpunit.xml Exclude resources. Feb 17, 2015 README.md Introduction Deployer is a deployment tool written in PHP. See http://deployer.org for more information and documentation. Requirements PHP 5.5.0 and up. That's all! You can enable sockets to speedup deployment process with parallel deployment. Installation To install Deployer download deployer.phar archive and move deployer.phar to your bin directory and make it executable. $ curl -LO http://deployer.org/deployer.phar $ mv deployer.phar /usr/local/bin/dep $ chmod +x /usr/local/bin/dep To upgrade Deployer run command: $ dep self-update Or via composer: $ composer require deployer/deployer Documentation Documentation source can be found in deployphp/docs repository. Building To build deployer.phar run ./build command. Community Discuss Deployer here deployer.org/discuss. Roadmap 4 Namespace for functions Dependency Injection Configuration Event Dispatcher Default stage selector Faster cloning by borrowing objects from existing clones Done in v3! Immutable settings Native SSH support 4.1 Task grouping for parallel execution Web-based client Contributing All code contributions must go through a pull request and approved by a core developer before being merged. This is to ensure proper review of all the code. Fork the project, create a feature branch, and send a pull request. To ensure a consistent code base, you should make sure the code follows the PSR-2. If you would like to help take a look at the list of issues. Maintainers Anton Medvedev @elfet Oanh Nguyen @oanhnn Hubert Viktor @ZeeCoder See also the list of contributors who participated in this project. License Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/deployphp/deployer"	"A deployment tool."	"true"
"Deployment"	"Envoy"	"https://github.com/laravel/envoy"	"A tool to run SSH tasks with PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"762"	"46"	"93"	"GitHub - laravel/envoy Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 46 Star 762 Fork 93 laravel/envoy Code Pull requests 0 Pulse Graphs No description or website provided. 218 commits 1 branch 23 releases 34 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.2.0 v1.1.0 v1.0.27 v1.0.26 v1.0.25 v1.0.24 v1.0.23 v1.0.22 v1.0.21 v1.0.20 v1.0.19 v1.0.18 v1.0.17 v1.0.16 v1.0.15 v1.0.14 v1.0.13 v1.0.12 v1.0.11 1.0.5 1.0.3 1.0.2 1.0.0 Nothing to show New pull request Latest commit 6ca254b Jun 9, 2016 taylorotwell various refactorings and improvements Permalink Failed to load latest commit information. src various refactorings and improvements Jun 9, 2016 tests Fix CS. Dec 29, 2015 .gitignore update dependencies Apr 26, 2016 Envoy.blade.php tweaks Apr 4, 2015 LICENSE.txt Very minor cs tweaks Feb 20, 2014 composer.json update dependencies Apr 26, 2016 envoy update version Apr 26, 2016 phpunit.php Fix CS. Dec 29, 2015 phpunit.xml Add tests for improved SSHConfigFile. Dec 29, 2015 readme.md Documentation link updated to last available Dec 30, 2015 readme.md Laravel Envoy Elegant SSH tasks for PHP. Official documentation is located here. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/laravel/envoy"	"A tool to run SSH tasks with PHP."	"true"
"Deployment"	"Plum"	"https://github.com/aerialls/Plum"	"A deployer library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"90"	"8"	"9"	"GitHub - aerialls/Plum: A deployer library for PHP 5.3 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 90 Fork 9 aerialls/Plum Code Issues 0 Pull requests 2 Pulse Graphs A deployer library for PHP 5.3 26 commits 1 branch 4 releases 5 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.2 v1.1 v1.0 v1.0-RC1 Nothing to show New pull request Latest commit 2c5c4f7 Aug 21, 2014 aerialls Merge pull request #4 from AlbertBrand/master … fix rsync dry run Permalink Failed to load latest commit information. src/Plum fix rsync dry run Jul 30, 2013 tests Welcome to 2012 (...) Apr 9, 2012 .travis.yml initial commit Dec 22, 2011 LICENSE initial commit Dec 22, 2011 README.md Fixing dry_run option name and better example name Mar 2, 2013 composer.json tweaked composer.json Apr 9, 2012 phpunit.xml.dist initial commit Dec 22, 2011 README.md Plum An object oriented deployer library Installation and configuration Plum does not provide and autoloader but follow the PSR-0 convention. $plum = new \Plum\Plum();  // Add global options for all the servers $plum->setOptions(array(     'dry_run'     => true,     'excludeFile' => __DIR__.'/exclude.txt' ));  // Register the rsync deployer $plum->registerDeployer(new \Plum\Deployer\RsyncDeployer());  // Add your server $plum->addServer('server_name', new \Plum\Server\Server('host', 'username', '/path/to/my/website'));  // Let's go! $plum->deploy('bender', 'rsync');  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aerialls/Plum"	"A deployer library."	"true"
"Deployment"	"Pomander"	"https://github.com/tamagokun/pomander"	"A deployment tool for PHP applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"195"	"15"	"11"	"GitHub - tamagokun/pomander: Deploy your PHP with PHP. Inspired by Capistrano and Vlad. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 195 Fork 11 tamagokun/pomander Code Issues 9 Pull requests 2 Wiki Pulse Graphs Deploy your PHP with PHP. Inspired by Capistrano and Vlad. http://tamagokun.github.io/pomander/ 310 commits 3 branches 19 releases 10 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags deploy_method gh-pages master Nothing to show 1.0.0 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 0.3.9 0.3.8 0.3.7 0.3.6 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3 0.2 0.1 Nothing to show New pull request Latest commit 1240911 May 13, 2016 tamagokun Merge pull request #65 from max-voloshin/update-phpseclib … Update phpseclib (PHP 7 compatibility) Permalink Failed to load latest commit information. bin big changes to how Pomander is booted. Not dependent on calling the Nov 1, 2013 lib Update phpseclib (PHP 7 compatibility) May 12, 2016 tests adding missing fixture for tests Aug 6, 2014 .gitignore It’s work with branch and revision Jan 10, 2014 .travis.yml drop support for PHP 5.3/5.4 Mar 18, 2016 LICENSE added MIT license Jan 14, 2012 README.md Update README.md Sep 30, 2015 composer.json Update phpseclib (PHP 7 compatibility) May 12, 2016 composer.lock Update phpseclib (PHP 7 compatibility) May 12, 2016 phpunit.xml.dist fixed tests Jan 7, 2014 README.md Pomander A light-weight flexible deployment tool for deploying web applications. This project was inspired by Capistrano and Vlad the Deployer, as well as being built on top of Phake, a Rake clone. This project came out of the need for a way to deploy Wordpress sites to multiple environments easily and without firing up FTP clients, etc. What started as a simple Rakefile, quickly grew into much more, and has been finally abstracted and ported to PHP to be able to fully integrate tasks with your application. Getting Started Make sure you have composer installed: $ curl -s https://getcomposer.org/installer | php $ sudo mv composer.phar /usr/local/bin/composer Need help installing composer? Installation $ composer global require pomander/pomander:@stable If you haven't added composer's global bin folder to your $PATH, better do that now: $ echo 'export PATH=""$HOME/.composer/vendor/bin:$PATH""' >> ~/.bashrc Substitute .bashrc with whatever you use. Setting up a project $ pom init Refer to the documentation for a full list of commands and references for configuring environments. Plugins pomander-wordpress pomander-symfony2 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tamagokun/pomander"	"A deployment tool for PHP applications."	"true"
"Deployment"	"Rocketeer"	"https://github.com/rocketeers/rocketeer"	"A fast and easy deployer for the PHP world."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2105"	"89"	"184"	"GitHub - rocketeers/rocketeer: Send your projects up in the clouds Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 89 Star 2,105 Fork 184 rocketeers/rocketeer Code Issues 103 Pull requests 7 Pulse Graphs Send your projects up in the clouds http://rocketeer.autopergamene.eu/ 2,024 commits 4 branches 38 releases 32 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop feature/dotenv-credentials feature/parallel-tasks master Nothing to show 2.2.1 2.2.0 2.1.3 2.1.2 2.1.1 2.1.0 2.0.6 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 1.2.2 1.2.1 1.2.0 1.1.2 1.1.1 1.1.0 1.0.0 0.9.0 0.8.1 0.8.0 0.7.0 0.6.5 0.6.4 0.6.3 0.6.2 0.6.1 0.6.0 0.5.0 0.4.0 0.3.2 0.3.1 0.3.0 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit 20efc28 Jul 12, 2016 Anahkiasen Fix incorrect slug Permalink Failed to load latest commit information. bin Apply modules to pathfinders Jul 10, 2016 src Fix incorrect slug Jul 12, 2016 tests Add test for create-release hook Jul 12, 2016 .editorconfig Tweak matrix Jul 1, 2016 .gitattributes Keep tests to allow usage of test helpers by plugins Jan 30, 2015 .gitignore Update gitignore Jul 10, 2016 .php_cs Same for func_get_args Jul 2, 2016 .travis.yml Allow failures on HHVM Jul 12, 2016 CHANGELOG.md Update CHANGELOG.md Jun 5, 2015 CONTRIBUTING.md Add PHP-CS configuration Mar 7, 2015 LICENSE Update year Mar 7, 2015 README.md Add script aliases Mar 6, 2015 box.json Exclude PHPCS from PHAR Jul 10, 2016 composer.json Tweak flysystem constraint Jul 11, 2016 humbug.json Add a good bunch of missing tests Jan 9, 2015 phpcs.xml Use PHPCS for linting Jul 10, 2016 phpunit.xml.dist Set slow threshold to 200ms Jul 9, 2016 README.md Rocketeer Rocketeer is a modern PHP task runner and deployment package. It is inspired by the Laravel Framework philosophy and thus aims to be fast, elegant, and more importantly easy to use. Like the latter, emphasis is put on smart defaults and modern development. While it is coded in PHP, it can deploy any project from small HTML/CSS websites to large Rails applications. Main features Versatile, support for multiple connections, multiserver connections, multiple stages per server, etc. Fast, queue tasks and run them in parallel across all your servers and stages Modulable, not only can you add custom tasks and components, every core part of Rocketeer can be hot swapped, extended, hacked to bits, etc. Preconfigured, tired of defining the same routines again and again ? Rocketeer is made for modern development and comes with smart defaults and built-in tasks such as installing your application's dependencies Powerful, releases management, server checks, rollbacks, etc. Every feature you'd expect from a deployment tool is there Installation The fastest way is to grab the binary: $ wget http://rocketeer.autopergamene.eu/versions/rocketeer.phar $ chmod +x rocketeer.phar $ mv rocketeer.phar /usr/local/bin/rocketeer More ways to setup Rocketeer can be found in the official documentation. Usage The available commands in Rocketeer are : $ php rocketeer   check        Check if the server is ready to receive the application   cleanup      Clean up old releases from the server   current      Display what the current release is   deploy       Deploys the website   flush        Flushes Rocketeer's cache of credentials   help         Displays help for a command   ignite       Creates Rocketeer's configuration   list         Lists commands   rollback     Rollback to the previous release, or to a specific one   setup        Set up the remote server for deployment   strategies   Lists the available options for each strategy   teardown     Remove the remote applications and existing caches   test         Run the tests on the server and displays the output   update       Update the remote server without doing a new release  Documentation can be found here Testing $ composer test Contributing Please see CONTRIBUTING for details. Security If you discover any security related issues, please email :author_email instead of using the issue tracker. Credits Anahkiasen All Contributors License The MIT License (MIT). Please see License File for more information. Available plugins and integrations Campfire Slack HipChat Wordpress Bugsnag Why not Capistrano? That's a question that's been asked to me, why not simply use Capistrano? I've used Capistrano in the past, it does everything you want it to do, that's a given. But, it remains a Ruby package and one that's tightly coupled to Rails in some ways; Rocketeer makes it so that you don't have Ruby files hanging around your app. That way you configure it once and can use it wherever you want in the realm of your application, even outside of the deploy routine. It's also meant to be a lot easier to comprehend, for first-time users or novices, Capistrano is a lot to take in at once – Rocketeer aims to be as simple as possible by providing smart defaults and speeding up the time between installing it and first hitting deploy. It's also more thought out for the PHP world – although you can configure Capistrano to run Composer and PHPUnit, that's not something it expects from the get go, while those tasks that are a part of every PHP developer are integrated in Rocketeer's core deploy process. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rocketeers/rocketeer"	"A fast and easy deployer for the PHP world."	"true"
"Internationalisation and Localisation"	"Aura Intl"	"https://github.com/auraphp/Aura.Intl"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"51"	"13"	"14"	"GitHub - auraphp/Aura.Intl: Internationalization tools, particularly message translation. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 51 Fork 14 auraphp/Aura.Intl Code Issues 2 Pull requests 1 Pulse Graphs Internationalization tools, particularly message translation. 96 commits 2 branches 6 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 2.x Switch branches/tags Branches Tags 1.x 2.x Nothing to show 1.1.1 1.1.0 1.0.1 1.0.0 1.0.0-beta2 1.0.0-beta1 Nothing to show New pull request Latest commit ec390d3 Jul 6, 2016 harikt committed on GitHub Merge pull request #27 from jhuet/2.x … Making Translator's messages 'mutable' Permalink Failed to load latest commit information. docs Update index.md Feb 19, 2016 src Package::getMessage() returns false when no messages found as Transla… Jun 2, 2016 tests Updating unit tests Jun 2, 2016 .gitignore Initial commit to 2.x package Jan 18, 2016 .scrutinizer.yml Add scrutinizer Jan 19, 2016 .travis.yml Initial commit to 2.x package Jan 18, 2016 CHANGES.md Initial commit to 2.x package Jan 18, 2016 CONTRIBUTING.md Add contributing.md and change LICENSE to MIT Jan 19, 2016 LICENSE Change license on all files to MIT and whitespace removal Jan 19, 2016 README.md update docs and readme , removed the scripts to make compatible with … Jan 19, 2016 TODO.md initial import Nov 12, 2012 composer.json Add tests to autoload Jan 18, 2016 phpunit.php Initial commit to 2.x package Jan 18, 2016 phpunit.xml.dist Add whitelist for code coverage Jan 19, 2016 README.md Aura.Intl The Aura.Intl package provides internationalization (I18N) tools, specifically package-oriented per-locale message translation. Installation and Autoloading This package is installable and PSR-4 autoloadable via Composer as aura/intl. Alternatively, download a release, or clone this repository, then map the Aura\Intl\ namespace to the package src/ directory. Dependencies This package requires PHP 5.4 or later; it has been tested on PHP 5.5, 5.6, PHP 7, and HHVM. We recommend using the latest available version of PHP as a matter of principle. Aura library packages may sometimes depend on external interfaces, but never on external implementations. This allows compliance with community standards without compromising flexibility. For specifics, please examine the package composer.json file. Quality This project adheres to Semantic Versioning. To run the unit tests at the command line, issue composer install and then phpunit at the package root. This requires Composer to be available as composer, and PHPUnit to be available as phpunit. This package attempts to comply with PSR-1, PSR-2, and PSR-4. If you notice compliance oversights, please send a patch via pull request. Community To ask questions, provide feedback, or otherwise communicate with other Aura users, please join our Google Group, follow @auraphp, or chat with us on Freenode in the #auraphp channel. Documentation This package is fully documented here. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/auraphp/Aura.Intl"	""	"true"
"Internationalisation and Localisation"	"Cake I18n"	"https://github.com/cakephp/i18n"	"Message translation and localization for dates and numbers (CP)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9"	"24"	"0"	"GitHub - cakephp/i18n: [READ-ONLY] Provides support for message translation and localization for dates and numbers. This repo is a split of the main code that can be found in https://github.com/cakephp/cakephp Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 9 Fork 0 cakephp/i18n Code Pull requests 0 Pulse Graphs [READ-ONLY] Provides support for message translation and localization for dates and numbers. This repo is a split of the main code that can be found in https://github.com/cakephp/cakephp 298 commits 7 branches 46 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3-0 3-1 3.next 3.0 3.1 3.2 master Nothing to show 3.3.0-beta 3.2.12 3.2.11 3.2.10 3.2.9 3.2.8 3.2.7 3.2.6 3.2.5 3.2.4 3.2.3 3.2.2 3.2.1 3.2.0 3.2.0-RC1 3.1.13 3.1.10 3.1.9 3.1.8 3.1.7 3.1.6 3.1.5 3.1.4 3.1.3 3.1.2 3.1.1 3.1.0 3.1.0-beta2 3.1.0-beta 3.1.0-RC1 3.0.18 3.0.15 3.0.13 3.0.12 3.0.10 3.0.9 3.0.8 3.0.7 3.0.6 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 3.0.0-RC2 Nothing to show New pull request Latest commit a33a42f Jul 7, 2016 markstory Make constants optional. … Don't require constants from the application skeleton in the standalone components. This makes it easier for the components to be used.  I've deprecated Folder::inCakePath() as it is a silly function that can be replaced with usage of inPath()  Refs #9074 Permalink Failed to load latest commit information. Formatter Avoding errors when there is no translation for the given plural form Mar 3, 2016 Parser Suppress notice errors in PO file parsing. Feb 26, 2016 ChainMessagesLoader.php Docblock Absolute Path Apr 3, 2015 Date.php Use the diffFormatter hook provided by chronos Dec 4, 2015 DateFormatTrait.php Don't use unset $translator, use given $formatter instead Jun 15, 2016 FrozenDate.php Use the diffFormatter hook provided by chronos Dec 5, 2015 FrozenTime.php Run sniffer to auto-fix default params into doc blocks. Mar 11, 2016 I18n.php fix docblock typo Jun 13, 2016 LICENSE.txt Adds license file and badges for I18n subtree split Feb 9, 2016 MessagesFileLoader.php Make constants optional. Jul 7, 2016 Number.php Merge branch 'master' into 3.1 Sep 9, 2015 PluralRules.php Run phpcbf for PSR2 CS fixers Dec 31, 2014 README.md Add info about setting locale folder path. Jul 6, 2016 RelativeTimeFormatter.php Revert ""Default output timezone v3"" Jun 11, 2016 Time.php Run sniffer to auto-fix default params into doc blocks. Mar 10, 2016 TranslatorRegistry.php Always import classes. Sep 23, 2015 composer.json Merge branch 'master' into 3.2 Jan 29, 2016 functions.php Fixed __x doc link Apr 1, 2016 README.md CakePHP Internationalization Library The I18n library provides a I18n service locator that can be used for setting the current locale, building translation bundles and translating messages. Additionally, it provides the Time and Number classes which can be used to output dates, currencies and any numbers in the right format for the specified locale. Usage Internally, the I18n class uses Aura.Intl. Getting familiar with it will help you understand how to build and manipulate translation bundles, should you wish to create them manually instead of using the conventions this library uses. Setting the Current Locale use Cake\I18n\I18n;  I18n::locale('en_US'); Setting path to folder containing po files. use Cake\Core\Configure;  Configure::write('App.paths.locales', ['/path/with/trailing/slash/']);  Please refer to the [CakePHP Manual](http://book.cakephp.org/3.0/en/core-libraries/internationalization-and-localization.html#language-files) for details about expected folder structure and file naming.  ### Translating a Message  ```php echo __(  'Hi {0,string}, your balance on the {1,date} is {2,number,currency}',  ['Charles', '2014-01-13 11:12:00', 1354.37] );  // Returns Hi Charles, your balance on the Jan 13, 2014, 11:12 AM is $ 1,354.37 Creating Your Own Translators use Cake\I18n\I18n; use Aura\Intl\Package;  I18n::translator('animals', 'fr_FR', function () {     $package = new Package(         'default', // The formatting strategy (ICU)         'default', // The fallback domain     );     $package->setMessages([         'Dog' => 'Chien',         'Cat' => 'Chat',         'Bird' => 'Oiseau'         ...     ]);      return $package; });  I18n::locale('fr_FR'); __d('animals', 'Dog'); // Returns ""Chien"" Formatting Time $time = Time::now(); echo $time; // shows '4/20/14, 10:10 PM' for the en-US locale Formatting Numbers echo Number::format(100100100); echo Number::currency(123456.7890, 'EUR'); // outputs €123,456.79 Documentation Please make sure you check the official I18n documentation. The documentation for the Time class contains instructions on how to configure and output time strings for selected locales. The documentation for the Number class shows how to use the Number class for displaying numbers in specific locales. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cakephp/i18n"	"Message translation and localization for dates and numbers (CP)"	"true"
"Third Party APIs"	"Amazon Web Service SDK"	"https://github.com/aws/aws-sdk-php"	"The official PHP AWS SDK library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2077"	"224"	"577"	"GitHub - aws/aws-sdk-php: Official repository of the AWS SDK for PHP (@awsforphp) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 224 Star 2,077 Fork 577 aws/aws-sdk-php Code Issues 6 Pull requests 4 Pulse Graphs Official repository of the AWS SDK for PHP (@awsforphp) http://aws.amazon.com/sdkforphp 2,946 commits 2 branches 211 releases 70 contributors PHP 99.6% Other 0.4% PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.8 master Nothing to show 3.18.28 3.18.27 3.18.26 3.18.25 3.18.24 3.18.23 3.18.22 3.18.21 3.18.20 3.18.19 3.18.18 3.18.17 3.18.16 3.18.15 3.18.14 3.18.13 3.18.12 3.18.11 3.18.10 3.18.9 3.18.8 3.18.7 3.18.6 3.18.5 3.18.4 3.18.3 3.18.2 3.18.1 3.18.0 3.17.6 3.17.5 3.17.4 3.17.3 3.17.2 3.17.1 3.17.0 3.16.0 3.15.9 3.15.8 3.15.7 3.15.6 3.15.5 3.15.4 3.15.3 3.15.2 3.15.1 3.15.0 3.14.2 3.14.1 3.14.0 3.13.1 3.13.0 3.12.2 3.12.1 3.12.0 3.11.7 3.11.6 3.11.5 3.11.4 3.11.3 3.11.2 3.11.1 3.11.0 3.10.1 3.10.0 3.9.4 3.9.3 3.9.2 3.9.1 3.9.0 3.8.2 3.8.1 3.8.0 3.7.0 3.6.0 3.5.0 3.4.1 3.4.0 3.3.8 3.3.7 3.3.6 3.3.5 3.3.4 3.3.3 3.3.2 3.3.1 3.3.0 3.2.6 3.2.5 3.2.4 3.2.3 3.2.2 3.2.1 3.2.0 3.1.0 3.0.7 3.0.6 3.0.5 3.0.4 3.0.3 Nothing to show New pull request Latest commit c75d3ba Jul 13, 2016 cjyclaire 3.18.28 release Permalink Failed to load latest commit information. build Fix typo (#1008) May 31, 2016 docs Add doc for retry behavior and cached credentials, fix typo. (#1026) Jul 12, 2016 features Fix S3 presign request (#998) May 18, 2016 src 3.18.28 release Jul 13, 2016 tests Add ECS credential into credential chain (#1036) Jul 13, 2016 .gitattributes Update Burgomaster to take an iterator and supply an iterator sans do… Jan 29, 2016 .gitignore Add manifests for ConfigService Jun 15, 2015 .travis.yml Automatically request URL encoding on ListObjects; undo the encoding … Jan 21, 2016 CHANGELOG.md 3.18.28 release Jul 13, 2016 CONTRIBUTING.md Cleaning up getting started guide (now called ""Basic SDK Usage"") and … Feb 25, 2015 LICENSE.md Initial commit Jun 28, 2012 Makefile remove-unused-md (#999) May 18, 2016 NOTICE.md Merge branch 'v3' into v3-staging May 26, 2015 README.md Update README (#1006) May 27, 2016 UPGRADING.md Added docs for S3 Multipart Uploader and updated Migration Guide. May 22, 2015 behat.yml Add a behat feature about presigned requests Apr 13, 2016 compatibility-test.php Update compatibility test Nov 9, 2015 composer.json fix ci build failure (#1025) Jul 1, 2016 phpunit.xml.dist More code coverage Apr 28, 2015 README.md AWS SDK for PHP - Version 3 The AWS SDK for PHP makes it easy for developers to access Amazon Web Services in their PHP code, and build robust applications and software using services like Amazon S3, Amazon DynamoDB, Amazon Glacier, etc. You can get started in minutes by installing the SDK through Composer or by downloading a single zip or phar file from our latest release. Resources User Guide – For both getting started and in-depth SDK usage information API Docs – For details about operations, parameters, and responses Blog – Tips & tricks, articles, and announcements Sample Project - A quick, sample project to help get you started Forum – Ask questions, get help, and give feedback Issues – Report issues, submit pull requests, and get involved (see Apache 2.0 License) @awsforphp – Follow us on Twitter For Version 2 of the SDK: User Guide API Docs Features Provides easy-to-use HTTP clients for all supported AWS [services][docs-services], regions, and authentication protocols. Is built on Guzzle, and utilizes many of its features, including persistent connections, asynchronous requests, middlewares, etc. Provides convenience features including easy result pagination via Paginators, Waiters, and simple Result objects. Provides a multipart uploader tool for Amazon S3 and Amazon Glacier that can be paused and resumed. Provides an Amazon S3 Stream Wrapper, so that you can use PHP's native file handling functions to interact with your S3 buckets and objects like a local filesystem. Provides the Amazon DynamoDB Session Handler for easily scaling sessions on a fast, NoSQL database. Automatically uses IAM Instance Profile Credentials on configured Amazon EC2 instances. Getting Started Sign up for AWS – Before you begin, you need to sign up for an AWS account and retrieve your AWS credentials. Minimum requirements – To run the SDK, your system will need to meet the minimum requirements, including having PHP >= 5.5 compiled with the cURL extension and cURL 7.16.2+ compiled with a TLS backend (e.g., NSS or OpenSSL). Install the SDK – Using Composer is the recommended way to install the AWS SDK for PHP. The SDK is available via Packagist under the aws/aws-sdk-php package. Please see the Installation section of the User Guide for more detailed information about installing the SDK through Composer and other means. Using the SDK – The best way to become familiar with how to use the SDK is to read the User Guide. The Getting Started Guide will help you become familiar with the basic concepts. Quick Examples Create an Amazon S3 client <?php // Require the Composer autoloader. require 'vendor/autoload.php';  use Aws\S3\S3Client;  // Instantiate an Amazon S3 client. $s3 = new S3Client([     'version' => 'latest',     'region'  => 'us-west-2' ]); Upload a file to Amazon S3 <?php // Upload a publicly accessible file. The file size and type are determined by the SDK. try {     $s3->putObject([         'Bucket' => 'my-bucket',         'Key'    => 'my-object',         'Body'   => fopen('/path/to/file', 'r'),         'ACL'    => 'public-read',     ]); } catch (Aws\Exception\S3Exception $e) {     echo ""There was an error uploading the file.\n""; } Related AWS Projects AWS Service Provider for Laravel AWS SDK ZF2 Module AWS Service Provider for Silex AWS SDK Bundle for Symfony Guzzle Version 6 – PHP HTTP client and framework Other AWS SDKs & Tools (e.g., js, cli, ruby, python, java, etc.) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aws/aws-sdk-php"	"The official PHP AWS SDK library."	"true"
"Third Party APIs"	"Campaign Monitor"	"http://campaignmonitor.github.io/createsend-php/"	"The official Campaign Monitor PHP library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"createsend-php by campaignmonitor createsend-php A PHP library for the Campaign Monitor API View the Project on GitHub campaignmonitor/createsend-php Download ZIP File Download TAR Ball View On GitHub createsend A PHP library which implements the complete functionality of the Campaign Monitor API. Installation If you use Composer, you can add campaignmonitor/createsend-php to your composer.json file: {     ""require"": {         ""campaignmonitor/createsend-php"": ""{version}""     } }  Otherwise you can simply download the library and include it in your project. After you have installed the library, simply include the relevant API class, as follows: require_once 'csrest_campaigns.php'  Authenticating The Campaign Monitor API supports authentication using either OAuth or an API key. Using OAuth Depending on the environment you are developing in, you may wish to use a PHP OAuth library to get access tokens for your users. If you don't use an OAuth library, you will need to get access tokens for your users by following the instructions included in the Campaign Monitor API documentation. This package provides functionality to help you do this, as described below. You may also wish to reference this example application, which is implemented using Slim but could easily be adapted for use with any PHP framework. The first thing your application should do is redirect your user to the Campaign Monitor authorization URL where they will have the opportunity to approve your application to access their Campaign Monitor account. You can get this authorization URL by using the CS_REST_General::authorize_url() method, like so: require_once 'csrest_general.php';  $authorize_url = CS_REST_General::authorize_url(     'Client ID for your application',     'Redirect URI for your application',     'The permission level your application requires',     'Optional state data to be included' ); # Redirect your users to $authorize_url.  If your user approves your application, they will then be redirected to the redirect_uri you specified, which will include a code parameter, and optionally a state parameter in the query string. Your application should implement a handler which can exchange the code passed to it for an access token, using CS_REST_General::exchange_token() like so: require_once 'csrest_general.php';  $result = CS_REST_General::exchange_token(     'Client ID for your application',     'Client Secret for your application',     'Redirect URI for your application',     'A unique code for your user' # Get the code parameter from the query string );  if ($result->was_successful()) {     $access_token = $result->response->access_token;     $expires_in = $result->response->expires_in;     $refresh_token = $result->response->refresh_token;     # Save $access_token, $expires_in, and $refresh_token. } else {     echo 'An error occurred:\n';     echo $result->response->error.': '.$result->response->error_description.""\n"";     # Handle error... }  At this point you have an access token and refresh token for your user which you should store somewhere convenient so that your application can look up these values when your user wants to make future Campaign Monitor API calls. Once you have an access token and refresh token for your user, you can authenticate and make further API calls like so: require_once 'csrest_general.php';  $auth = array(     'access_token' => 'your access token',     'refresh_token' => 'your refresh_token'); $wrap = new CS_REST_General($auth);  $result = $wrap->get_clients(); var_dump($result->response);  All OAuth tokens have an expiry time, and can be renewed with a corresponding refresh token. If your access token expires when attempting to make an API call, you will receive an error response, so your code should handle this. Here's an example of how you could do this: require_once 'csrest_general.php';  $auth = array(     'access_token' => 'your access token',     'refresh_token' => 'your refresh token' ); $wrap = new CS_REST_General($auth); $result = $wrap->get_clients(); if (!$result->was_successful()) {     # If you receive '121: Expired OAuth Token', refresh the access token     if ($result->response->Code == 121) {         list($new_access_token, $new_expires_in, $new_refresh_token) =              $wrap->refresh_token();         # Save $new_access_token, $new_expires_in, and $new_refresh_token     }     # Make the call again     $result = $wrap->get_clients(); } var_dump($result->response);  Using an API key require_once 'csrest_general.php';  $auth = array('api_key' => 'your API key'); $wrap = new CS_REST_General($auth);  $result = $wrap->get_clients(); var_dump($result->response);  Examples Samples for creating or accessing all resources can be found in the samples directory. These samples can be used as the basis for your own application and provide an outline of the expected inputs for each API call. Further documentation of the inputs and outputs of each call can be found in the documentation in each of the csrest_*.php files or simply by examining the var_dump results in each of the provided samples. Contributing Please check the guidelines for contributing to this repository. Releasing Please check the instructions for releasing this library. This project is maintained by campaignmonitor Hosted on GitHub Pages — Theme by orderedlist"	"null"	"null"	"The official Campaign Monitor PHP library."	"true"
"Third Party APIs"	"Digital Ocean"	"https://github.com/toin0u/DigitalOcean"	"A library to interface with the Digital Ocean API."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"155"	"13"	"12"	"GitHub - toin0u/DigitalOcean: PHP 5.3+ library which helps you to interact with the DigitalOcean API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 155 Fork 12 toin0u/DigitalOcean Code Issues 0 Pull requests 0 Pulse Graphs PHP 5.3+ library which helps you to interact with the DigitalOcean API 195 commits 1 branch 15 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.4.2 1.4.1 1.4.0 1.3.1 1.3.0 1.2.1 1.2.0 1.1.3 1.1.2 1.1.1 1.1.0 1.0.0 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit 434b479 Dec 17, 2014 toin0u add code of conduct Permalink Failed to load latest commit information. bin moved digitalocean to bin folder - fix #35 Jan 14, 2014 src Removed trailing whitespace Jul 26, 2014 tests remove enable and disable backup to droplets - fix #30 Jan 14, 2014 .gitattributes Added a .gitattributes file Jul 26, 2014 .gitignore remove specific files in .gitignore Nov 3, 2013 .travis.yml Fixed indentation Jul 26, 2014 CHANGELOG.md bump version to 1.4.3-dev Jan 14, 2014 CONTRIBUTING.md Updated: Contribution doc Apr 9, 2013 LICENSE Initial import Mar 14, 2013 README.md add code of conduct Dec 17, 2014 autoload.php.dist Initial import Mar 14, 2013 composer.json Testing improvements Jul 26, 2014 credentials.yml.dist Added: CLI Mar 18, 2013 phpunit.xml.dist Initial import Mar 14, 2013 README.md DigitalOcean The version 2 of the API will be available soon ! Please visit DigitalOceanV2 and contribute :) This PHP 5.3+ library helps you to interact with the DigitalOcean API via PHP or CLI. DigitalOcean is built for Developers, helps to get things done faster and to deploy an SSD cloud server in less than 55 seconds with a dedicated IP and root access. Read more. Installation This library can be found on Packagist. The recommended way to install this is through composer. Run these commands to install composer, the library and its dependencies: $ curl -sS https://getcomposer.org/installer | php $ php composer.phar require toin0u/digitalocean:@stable Or edit composer.json and add: {     ""require"": {         ""toin0u/digitalocean"": ""~1.0""     } } And install dependencies: $ curl -sS https://getcomposer.org/installer | php $ php composer.phar install Now you can add the autoloader, and you will have access to the library: <?php  require 'vendor/autoload.php'; If you don't use neither Composer nor a ClassLoader in your application, just require the provided autoloader: <?php  require_once 'src/autoload.php'; Usage You need an HttpAdapter which is responsible to get data from DigitalOcean's RESTfull API. You can provide your own adapter by implementing HttpAdapter\HttpAdapterInterface. Read more about HttpAdapter <?php  require 'vendor/autoload.php';  use DigitalOcean\DigitalOcean; use DigitalOcean\Credentials;  // Set up your credentials. $credentials = new Credentials('YOUR_CLIENT_ID', 'YOUR_API_KEY') // Use the default adapter, CurlHttpAdapter. $digitalOcean = new DigitalOcean($credentials); // Or use BuzzHttpAdapter. $digitalOcean = new DigitalOcean($credentials, new \HttpAdapter\BuzzHttpAdapter()); // Or $digitalOcean->setAdapter(new \HttpAdapter\BuzzHttpAdapter()); API Droplets // ... $droplets = $digitalOcean->droplets(); // alias to Droplets class. try {     // Returns all active droplets that are currently running in your account.     $allActive = $droplets->showAllActive();     printf(""%s\n"", $allActive->status); // OK     $firstDroplet = $allActive->droplets[0];     printf(""%s\n"", $firstDroplet->id); // 12345     printf(""%s\n"", $firstDroplet->name); // foobar     printf(""%s\n"", $firstDroplet->image_id); // 56789     printf(""%s\n"", $firstDroplet->size_id); // 66     printf(""%s\n"", $firstDroplet->region_id); // 2     printf(""%s\n"", $firstDroplet->backups_active); // true     printf(""%s\n"", $firstDroplet->ip_address); // 127.0.0.1     printf(""%s\n"", $firstDroplet->private_ip_address); // null     printf(""%s\n"", $firstDroplet->locked); // false     printf(""%s\n"", $firstDroplet->status); // active     printf(""%s\n"", $firstDroplet->created_at); // 2013-01-01T09:30:00Z      // Returns full information for a specific droplet.     printf(""%s\n"", $droplets->show(12345)->droplet->name); // foobar      // Creates a new droplet. The argument should be an array with 4 required keys:     // name, sized_id, image_id and region_id. ssh_key_ids key is optional but if any it should be a string.     $createDroplet = $droplets->create(array(         'name'               => 'my_new_droplet',         'size_id'            => 123,         'image_id'           => 456,         'region_id'          => 789,         'ssh_key_ids'        => '12,34,56', // 3 ssh keys         'private_networking' => true,         'backups_enabled'    => true,     ));     printf(""%s\n"", $createDroplet->status); // OK     printf(""%s\n"", $createDroplet->droplet->event_id); // 78908      // Reboots a droplet.     $rebootDroplet = $droplets->reboot(12345);     printf(""%s, %s\n"", $rebootDroplet->status, $rebootDroplet->event_id);      // Power cycles a droplet.     $powerCycleDroplet = $droplets->powerCycle(12345);     printf(""%s, %s\n"", $powerCycleDroplet->status, $powerCycleDroplet->event_id);      // Shutdowns a running droplet.     $shutdownDroplet = $droplets->shutdown(12345);     printf(""%s, %s\n"", $shutdownDroplet->status, $shutdownDroplet->event_id);      // Powerons a powered off droplet.     $powerOnDroplet = $droplets->powerOn(12345);     printf(""%s, %s\n"", $powerOnDroplet->status, $powerOnDroplet->event_id);      // Poweroffs a running droplet.     $powerOffDroplet = $droplets->powerOff(12345);     printf(""%s, %s\n"", $powerOffDroplet->status, $powerOffDroplet->event_id);      // Resets the root password for a droplet.     $resetRootPasswordDroplet = $droplets->resetRootPassword(12345);     printf(""%s, %s\n"", $resetRootPasswordDroplet->status, $resetRootPasswordDroplet->event_id);      // Resizes a specific droplet to a different size. The argument should be an array with size_id key.     $resizeDroplet = $droplets->resize(12345, array('size_id' => 123));     printf(""%s, %s\n"", $resizeDroplet->status, $resizeDroplet->event_id);      // Takes a snapshot of the running droplet, which can later be restored or used to create a new droplet     // from the same image. The argument can be an empty array or an array with name key.     $snapshotDroplet = $droplets->snapshot(12345, array('name' => 'my_snapshot'));     printf(""%s, %s\n"", $snapshotDroplet->status, $snapshotDroplet->event_id);      // Restores a droplet with a previous image or snapshot. The argument should be an array with image_id key.     $restoreDroplet = $droplets->restore(12345, array('image_id' => 123));     printf(""%s, %s\n"", $restoreDroplet->status, $restoreDroplet->event_id);      // Reinstalls a droplet with a default image. The argument should be an array with image_id key.     $rebuildDroplet = $droplets->rebuild(12345, array('image_id' => 123));     printf(""%s, %s\n"", $rebuildDroplet->status, $rebuildDroplet->event_id);      // Enables automatic backups which run in the background daily to backup your droplet's data.     $enableBackupsDroplet = $droplets->enableAutomaticBackups(12345);     printf(""%s, %s\n"", $enableBackupsDroplet->status, $enableBackupsDroplet->event_id);      // Disables automatic backups from running to backup your droplet's data.     $disableBackupsDroplet = $droplets->disableAutomaticBackups(12345);     printf(""%s, %s\n"", $disableBackupsDroplet->status, $disableBackupsDroplet->event_id);      // Renames a specific droplet to a different name. The argument should be an array with name key.     $renameDroplet = $droplets->rename(12345, array('name' => 'new_name'));     printf(""%s, %s\n"", $renameDroplet->status, $renameDroplet->event_id);      // Destroys one of your droplets - this is irreversible !     $destroyDroplet = $droplets->destroy(12345);     printf(""%s, %s\n"", $destroyDroplet->status, $destroyDroplet->event_id); } catch (Exception $e) {     die($e->getMessage()); } Regions // ... $regions = $digitalOcean->regions(); // alias to Regions class. try {     // Returns all the available regions within the Digital Ocean cloud.     $allRegions = $regions->getAll();     printf(""%s\n"", $allRegions->status); // OK     $region1 = $allRegions->regions[0];     printf(""%s, %s\n"", $region1->id, $region1->name); // 1, New York 1     $region2 = $allRegions->regions[1];     printf(""%s, %s\n"", $region2->id, $region2->name); // 2, Amsterdam 1 } catch (Exception $e) {     die($e->getMessage()); } Images // ... $images = $digitalOcean->images(); // alias to Images class. try {     // Returns all the available images that can be accessed by your client ID. You will have access     // to all public images by default, and any snapshots or backups that you have created in your own account.     $allImages = $images->getAll();     printf(""%s\n"", $allImages->status); // OK     $firstImage = $allImages->images[0];     printf(""%s\n"", $firstImage->id); // 12345     printf(""%s\n"", $firstImage->name); // alec snapshot     printf(""%s\n"", $firstImage->distribution); // Ubuntu     // ...     $otherImage = $allImages->images[36];     printf(""%s\n"", $otherImage->id); // 32399     printf(""%s\n"", $otherImage->name); // Fedora 17 x32 Desktop     printf(""%s\n"", $otherImage->distribution); // Fedora      // Returns all your images.     $myImages = $images->getMyImages();     printf(""%s\n"", $myImages->status); // OK     $firstImage = $myImages->images[0];     printf(""%s\n"", $firstImage->id); // 12345     printf(""%s\n"", $firstImage->name); // my_image 2013-02-01     printf(""%s\n"", $firstImage->distribution); // Ubuntu      // Returns all global images.     $globalImages = $images->getGlobal();     printf(""%s\n"", $globalImages->status); // OK     $anImage = $globalImages->images[9];     printf(""%s\n"", $anImage->id); // 12573     printf(""%s\n"", $anImage->name); // Debian 6.0 x64     printf(""%s\n"", $anImage->distribution); // Debian      // Displays the attributes of an image.     printf(""%s\n"", $images->show(12574)->image->distribution); // CentOS      // Destroys an image. There is no way to restore a deleted image so be careful and ensure     // your data is properly backed up.     $destroyImage = $images->destroy(12345);     printf(""%s\n"", $destroyImage->status); // OK      // Transferts a specific image to a specified region id. The argument should be an array with region_id key.     $transfertImage = $images->transfert(12345, array('region_id' => 67890));     printf(""%s\n"", $transfertImage->status); // OK } catch (Exception $e) {     die($e->getMessage()); } SSH Keys // ... $sshKeys = $digitalOcean->sshKeys(); // alias to SSHKeys class. try {     // Returns all the available public SSH keys in your account that can be added to a droplet.     $allSshKeys = $sshKeys->getAll();     printf(""%s\n"", $allSshKeys->status); // OK     $firstSshKey = $allSshKeys->ssh_keys[0];     printf(""%s\n"", $firstSshKey->id); // 10     printf(""%s\n"", $firstSshKey->name); // office-imac     $otherSshKey = $allSshKeys->ssh_keys[1];     printf(""%s\n"", $otherSshKey->id); // 11     printf(""%s\n"", $otherSshKey->name); // macbook-air      // Shows a specific public SSH key in your account that can be added to a droplet.     $sshKey = $sshKeys->show(10);     printf(""%s\n"", $sshKey->status); // OK     printf(""%s\n"", $sshKey->ssh_key->id); // 10     printf(""%s\n"", $sshKey->ssh_key->name); // office-imac     printf(""%s\n"", $sshKey->ssh_key->ssh_pub_key); // ssh-dss AHJASDBVY6723bgB...I0Ow== me@office-imac      // Adds a new public SSH key to your account. The argument should be an array with name and ssh_pub_key keys.     $addSshKey = $sshKeys->add(array(         'name'        => 'macbook_pro',         'ssh_pub_key' => 'ssh-dss AHJASDBVY6723bgB...I0Ow== me@macbook_pro',     ));     printf(""%s\n"", $addSshKey->status); // OK     printf(""%s\n"", $addSshKey->ssh_key->id); // 12     printf(""%s\n"", $addSshKey->ssh_key->name); // macbook_pro     printf(""%s\n"", $addSshKey->ssh_key->ssh_pub_key); // ssh-dss AHJASDBVY6723bgB...I0Ow== me@macbook_pro      // Edits an existing public SSH key in your account. The argument should be an array with ssh_pub_key key.     $editSshKey = $sshKeys->edit(12, array(         'ssh_pub_key' => 'ssh-dss fdSDlfDFdsfRF893...jidfs8Q== me@new_macbook_pro',     ));     printf(""%s\n"", $editSshKey->status); // OK     printf(""%s\n"", $editSshKey->ssh_key->id); // 12     printf(""%s\n"", $editSshKey->ssh_key->name); // macbook_pro     printf(""%s\n"", $editSshKey->ssh_key->ssh_pub_key); // ssh-dss fdSDlfDFdsfRF893...jidfs8Q== me@new_macbook_pro      // Deletes the SSH key from your account.     $destroySshKey = $sshKeys->destroy(12);     printf(""%s\n"", $destroySshKey->status); // OK } catch (Exception $e) {     die($e->getMessage()); } Sizes // ... $sizes = $digitalOcean->sizes(); // alias to Sizes class. try {     // Returns all the available sizes that can be used to create a droplet.     $allSizes = $sizes->getAll();     printf(""%s\n"", $allSizes->status); // OK     $size1 = $allSizes->sizes[0];     printf(""%s, %s\n"", $size1->id, $size1->name); // 33, 512MB     // ...     $size6 = $allSizes->sizes[5];     printf(""%s, %s\n"", $size1->id, $size1->name); // 38, 16GB } catch (Exception $e) {     die($e->getMessage()); } Domains // ... $domains = $digitalOcean->domains(); // alias to Domains class. try {     // Returns all of your current domains.     $allDomains = $domains->getAll();     printf(""%s\n"", $allDomains->status); // OK     $domain1 = $allDomains->domains[0];     printf(         ""%s, %s, %s, %s, %s, %s\n"",         $domain1->id, $domain1->name, $domain1->ttl, $domain1->live_zone_file, $domain1->error, $domain1->zone_file_with_error     ); // 100, foo.org, 1800, $TTL\\t600\\n@\\t\\tIN\\tSOA\\tNS1.DIGITALOCEAN.COM...., null, null     // ...     $domain5 = $allDomains->domains[4];     // ...      // Show a specific domain id or domain name.     $domain = $domains->show(123);     printf(         ""%s, %s, %s, %s, %s, %s\n"",         $domain->id, $domain->name, $domain->ttl, $domain->live_zone_file, $domain->error, $domain->zone_file_with_error     ); // 101, bar.org, 1800, $TTL\\t600\\n@\\t\\tIN\\tSOA\\tNS1.DIGITALOCEAN.COM...., null, null      // Adds a new domain with an A record for the specified IP address.     // The argument should be an array with name and ip_address keys.     $addDomain = $domains->add(array(         'name'       => 'baz.org',         'ip_address' => '127.0.0.1',     ));     printf(""%s\n"", $addDomain->status); // OK     printf(""%s\n"", $addDomain->domain->id); // 12     printf(""%s\n"", $addDomain->domain->name); // macbook_pro      // Deletes the specified domain id or domaine name.     $deleteDomaine = $domains->destroy(123);     printf(""%s\n"", $deleteDomaine->status); // OK      // Returns all of your current domain records.     $records = $domains->getRecords(123);     printf(""%s\n"", $records->status); // OK     $record1 = $records->records[0];     printf(""%s\n"", $record1->id); // 33     printf(""%s\n"", $record1->domain_id); // 100     printf(""%s\n"", $record1->record_type); // A     printf(""%s\n"", $record1->name); // foo.org     printf(""%s\n"", $record1->data); // 8.8.8.8     printf(""%s\n"", $record1->priority); // null     printf(""%s\n"", $record1->port); // null     printf(""%s\n"", $record1->weight); // null     $record2 = $records->records[1];     // ...      // Adds a new record to a specific domain id or domain name.     // The argument should be an array with record_type and data keys.     // - record_type can be only 'A', 'CNAME', 'NS', 'TXT', 'MX' or 'SRV'.     // - data is a string, the value of the record.     //     // Special cases:     // - name is a required string if the record_type is 'A', 'CNAME', 'TXT' or 'SRV'.     // - priority is an required integer if the record_type is 'SRV' or 'MX'.     // - port is an required integer if the record_type is 'SRV'.     // - weight is an required integer if the record_type is 'SRV'.     $Addrecord = $domains->newRecord('foo.org', array(         'record_type' => 'SRV',         'data'        => 'data',         'name'        => 'bar',         'priority'    => 1,         'port'        => 88,         'weight'      => 2,     ));     printf(""%s\n"", $Addrecord->status); // OK     printf(""%s\n"", $Addrecord->domain_record->id); // 34     printf(""%s\n"", $Addrecord->domain_record->domain_id); // 100     printf(""%s\n"", $Addrecord->domain_record->record_type); // SRV     printf(""%s\n"", $Addrecord->domain_record->name); // bar     printf(""%s\n"", $Addrecord->domain_record->data); // data     printf(""%s\n"", $Addrecord->domain_record->priority); // 1     printf(""%s\n"", $Addrecord->domain_record->port); // 88     printf(""%s\n"", $Addrecord->domain_record->weight); // 2      // Returns the specified domain record.     $record = $domains->getRecord(123, 456);     printf(""%s\n"", $record->status); // OK     printf(""%s\n"", $record->record->id); // 456     printf(""%s\n"", $record->record->domain_id); // 123     printf(""%s\n"", $record->record->record_type); // CNAME     printf(""%s\n"", $record->record->name); // bar.org     printf(""%s\n"", $record->record->data); // 8.8.8.8     printf(""%s\n"", $record->record->priority); // null     printf(""%s\n"", $record->record->port); // null     printf(""%s\n"", $record->record->weight); // null      // Edits a record to a specific domain. Look at Domains::newRecord parameters.     $editRecord = $domains->editRecord(123, 456, array(         'record_type' => 'SRV',         'data'        => '127.0.0.1',         'name'        => 'baz.org',         'priority'    => 1,         'port'        => 8888,         'weight'      => 20,     ));     printf(""%s\n"", $editRecord->status); // OK     printf(""%s\n"", $editRecord->record->id); // 456     printf(""%s\n"", $editRecord->record->domain_id); // 123     printf(""%s\n"", $editRecord->record->record_type); // SRV     printf(""%s\n"", $editRecord->record->name); // baz.org     printf(""%s\n"", $editRecord->record->data); // 127.0.0.1     printf(""%s\n"", $editRecord->record->priority); // 1     printf(""%s\n"", $editRecord->record->port); // 8888     printf(""%s\n"", $editRecord->record->weight); // 20      // Deletes the specified domain record.     $deleteRecord = $domains->destroyRecord(123);     printf(""%s\n"", $deleteRecord->status); // OK   } catch (Exception $e) {     die($e->getMessage()); } Events // ... $events = $digitalOcean->events(); // alias to Events class. try {     // Returns the event details nr. 123     $event = $events->show(123);     printf(""%s\n"", $event->status); // OK     printf(""%s\n"", $event->event->id); // 123     printf(""%s\n"", $event->event->action_status); // done     printf(""%s\n"", $event->event->droplet_id); // 100824     printf(""%s\n"", $event->event->event_type_id); // 1     printf(""%s\n"", $event->event->percentage); // 100  } catch (Exception $e) {     die($e->getMessage()); } CLI To use the Command-Line Interface, you need to copy and rename the credentials.yml.dist file to credentials.yml in your project directory, then add your own Client ID and API key: CLIENT_ID:  <YOUR_CLIENT_ID> API_KEY:    <YOUR_API_KEY> If you want to use another credential file just add the option --credentials=""/path/to/file"" to commands below. Commands for Droplets: $ php digitalocean list droplets  $ php digitalocean droplets:show-all-active +----+---------+----------+---------+-----------+----------------+------------+--------------------+--------+--------+----------------------+ | ID | Name    | Image ID | Size ID | Region ID | Backups Active | IP Address | Private IP Address | Status | Locked | Created At           | +----+---------+----------+---------+-----------+----------------+------------+--------------------+--------+--------+----------------------+ | 1  | my_drop | 54321    | 66      | 2         | 1              | 127.0.0.1  |                    | active |        | 2013-01-01T09:30:00Z | +----+---------+----------+---------+-----------+----------------+------------+--------------------+--------+--------+----------------------+  $ php digitalocean droplets:show 12345 +-------+---------+----------+---------+-----------+----------------+---------+-----------+------------+--------------------+--------+--------+----------------------+ | ID    | Name    | Image ID | Size ID | Region ID | Backups Active | Backups | Snapshots | IP Address | Private IP Address | Status | Locked | Created At           | +-------+---------+----------+---------+-----------+----------------+---------+-----------+------------+--------------------+--------+--------+----------------------+ | 12345 | my_drop | 54321    | 66      | 2         | 1              | 7       | 1         | 127.0.0.1  | 10.10.10.10        | active |        | 2013-01-01T09:30:00Z | +-------+---------+----------+---------+-----------+----------------+---------+-----------+------------+--------------------+--------+--------+----------------------+  $ php digitalocean droplets:create my_new_droplet 66 1601 2 // Creates a new droplet named ""my_new_droplet"" with 512MB and CentOS 5.8 x64 in Amsterdam without any SSH keys.  $ php digitalocean droplets:create test_droplet 65 43462 1 ""5555,5556"" // Creates a new droplet named ""test_droplet"" with 8BG and Ubuntu 11.04x32 Desktop in New York with 2 SSH keys. +--------+----------+ | Status | Event ID | +--------+----------+ | OK     | 6895     | +--------+----------+  $ php digitalocean droplets:create-interactively // see: http://shelr.tv/records/514c2ba796608075f800005a  $ php digitalocean droplets:reboot 12345 +--------+----------+ | Status | Event ID | +--------+----------+ | OK     | 6896     | +--------+----------+  $ php digitalocean droplets:power-cycle 12345 +--------+----------+ | Status | Event ID | +--------+----------+ | OK     | 6897     | +--------+----------+  $ php digitalocean droplets:shutdown 12345 +--------+----------+ | Status | Event ID | +--------+----------+ | OK     | 6898     | +--------+----------+  $ php digitalocean droplets:power-on 12345 +--------+----------+ | Status | Event ID | +--------+----------+ | OK     | 6899     | +--------+----------+  $ php digitalocean droplets:power-off 12345 +--------+----------+ | Status | Event ID | +--------+----------+ | OK     | 6900     | +--------+----------+  $ php digitalocean droplets:reset-root-password 12345 +--------+----------+ | Status | Event ID | +--------+----------+ | OK     | 6901     | +--------+----------+  $ php digitalocean droplets:resize 12345 62 // resizes to 2GB +--------+----------+ | Status | Event ID | +--------+----------+ | OK     | 6902     | +--------+----------+  $ php digitalocean droplets:snapshot 12345 my_new_snapshot // the name is optional +--------+----------+ | Status | Event ID | +--------+----------+ | OK     | 6903     | +--------+----------+  $ php digitalocean droplets:restore 12345 46964 // restores to ""LAMP on Ubuntu 12.04"" image +--------+----------+ | Status | Event ID | +--------+----------+ | OK     | 6904     | +--------+----------+  $ php digitalocean droplets:rebuild 12345 1601 // rebuilds to ""CentOS 5.8 x64"" image +--------+----------+ | Status | Event ID | +--------+----------+ | OK     | 6905     | +--------+----------+  $ php digitalocean droplets:enable-automatic-backups 12345 +--------+----------+ | Status | Event ID | +--------+----------+ | OK     | 6906     | +--------+----------+  $ php digitalocean droplets:disable-automatic-backups 12345 +--------+----------+ | Status | Event ID | +--------+----------+ | OK     | 6907     | +--------+----------+  $ php digitalocean droplets:rename 12345 new_name +--------+----------+ | Status | Event ID | +--------+----------+ | OK     | 6908     | +--------+----------+  $ php digitalocean droplets:destroy 12345 +--------+----------+ | Status | Event ID | +--------+----------+ | OK     | 6909     | +--------+----------+ Commands for Images: $ php digitalocean list images  $ php digitalocean images:all +--------+----------+--------------+ | ID     | Name     | Distribution | +--------+----------+--------------+ | 13245  | my_image | Ubuntu       | | 21345  | my_image | Ubuntu       | +--------+----------+--------------+  $ php digitalocean images:mines +--------+----------+--------------+ | ID     | Name     | Distribution | +--------+----------+--------------+ | 13245  | my_image | Ubuntu       | +--------+----------+--------------+  $ php digitalocean images:global +--------+-------------------------+--------------+ | ID     | Name                    | Distribution | +--------+-------------------------+--------------+ | 1601   | CentOS 5.8 x64          | CentOS       | | 1602   | CentOS 5.8 x32          | CentOS       | | 43462  | Ubuntu 11.04x32 Desktop | Ubuntu       | +--------+-------------------------+--------------+  $ php digitalocean images:show 46964 +--------+----------------------+--------------+ | ID     | Name                 | Distribution | +--------+----------------------+--------------+ | 46964  | LAMP on Ubuntu 12.04 | Ubuntu       | +--------+----------------------+--------------+  $ php digitalocean images:destroy 12345 +--------+ | Status | +--------+ | OK     | +--------+  $ php digitalocean images:transfert 12345 67890 +--------+----------+ | Status | Event ID | +--------+----------+ | OK     | 32654     | +--------+----------+ Commands for Regions: $ php digitalocean list regions  $ php digitalocean regions:all +----+-------------+ | ID | Name        | +----+-------------+ | 1  | New York 1  | | 2  | Amsterdam 1 | +----+-------------+ Commands for Sizes: $ php digitalocean list sizes  $ php digitalocean sizes:all +----+-------+ | ID | Name  | +----+-------+ | 1  | 512MB | | 2  | 1GB   | | 3  | 2GB   | | 4  | 4GB   | | 5  | 8GB   | | 6  | 16GB  | | 7  | 21GB  | | 8  | 48GB  | | 9  | 64GB  | | 10 | 96GB  | +----+-------+ Commands for SSH Keys: $ php digitalocean list ssh-keys  $ php digitalocean ssh-keys:all +------+----------------+ | ID   | Name           | +------+----------------+ | 5555 | my_pub_ssh_key | +------+----------------+  $ php digitalocean ssh-keys:show 5555 +------+----------------+----------------------------------------------------+ | ID   | Name           | Pub Key                                            | +------+----------------+----------------------------------------------------+ | 5555 | my_pub_ssh_key | ssh-dss                                            | |      |                | AHJASDBVY6723bgBVhusadkih238723kjLKFnbkjGFklaslkhf | |      |                | .... ZkjCTuZVy6dcH3ag6JlEfju67euWT5yMnT1I0Ow==     | |      |                | dev@my_pub_ssh_key                                 | +------+----------------+----------------------------------------------------+  $ php digitalocean ssh-keys:add my_new_ssh_key ""ssh-dss DFDSFSDFC1.......FDSFewf987fdsf= dev@my_new_ssh_key"" +------+----------------+----------------------------------------------------+ | ID   | Name           | Pub Key                                            | +------+----------------+----------------------------------------------------+ | 5556 | my_new_ssh_key | ssh-dss                                            | |      |                | DFDSFSDFC1723bgBVhusadkih238723kjLKFnbkjGFklaslkhf | |      |                | .... ZkjCTuZVy6dcH3ag6JlEfju67FDSFewf987fdsf==     | |      |                | dev@my_new_ssh_key                                 | +------+----------------+----------------------------------------------------+  $ php digitalocean ssh-keys:edit 5556 ""ssh-dss fdSDlfDFdsfRF893...jidfs8Q== me@new_macbook_pro"" +------+----------------+----------------------------------------------------+ | ID   | Name           | Pub Key                                            | +------+----------------+----------------------------------------------------+ | 5556 | my_new_ssh_key | ssh-dss                                            | |      |                | fdSDlfDFdsfRF893Vhusadkih238723kjLKFnbkjGFklaslkhf | |      |                | .... ZkjCTuZVy6dcH3ag6JlEfju67FDSFewfjidfs8Q==     | |      |                | me@new_macbook_pro                                 | +------+----------------+----------------------------------------------------+  $ php digitalocean ssh-keys:destroy 5556 +--------+ | Status | +--------+ | OK     | +--------+ Commands for Domains: $ php digitalocean list domains  $ php digitalocean domains:all +-----+---------+------+----------------+-------+----------------------+ | ID  | Name    | TTL  | Live Zone File | Error | Zone File With Error | +-----+---------+------+----------------+-------+----------------------+ | 245 | foo.com | 6800 | ...            |       | ...                  | | 678 | foo.org | 1800 | ...            |       | ...                  | +-----+---------+------+----------------+-------+----------------------+  $ php digitalocean domains:show 678 +-----+---------+------+----------------+-------+----------------------+ | ID  | Name    | TTL  | Live Zone File | Error | Zone File With Error | +-----+---------+------+----------------+-------+----------------------+ | 678 | foo.org | 1800 | ...            |       | ...                  | +-----+---------+------+----------------+-------+----------------------+  $ php digitalocean domains:add bar.org 127.0.0.1 +--------+-----+---------+ | Status | ID  | Name    | +--------+-----+---------+ | OK     | 679 | bar.org | +--------+-----+---------+  $ php digitalocean domains:destroy 679 +--------+ | Status | +--------+ | OK     | +--------+  $ php digitalocean domains:records:all +----+-----------+-------+-------------+---------+----------+------+--------+ | ID | Domain ID | Type  | Name        | Data    | Priority | Port | Weight | +----+-----------+-------+-------------+---------+----------+------+--------+ | 49 | 678       | A     | example.com | 8.8.8.8 |          |      |        | | 50 | 678       | CNAME | www         | @       |          |      |        | +----+-----------+-------+-------------+---------+----------+------+--------+  $ php digitalocean domains:records:add 678 SRV @ foo 1 2 3 +--------+----+-----------+------+------+------+----------+------+--------+ | Status | ID | Domain ID | Type | Name | Data | Priority | Port | Weight | +--------+----+-----------+------+------+------+----------+------+--------+ | OK     | 7  | 678       | SRV  | foo  | @    | 1        | 2    | 3      | +--------+----+-----------+------+------+------+----------+------+--------+  $ php digitalocean domains:records:show 678 7 +--------+----+-----------+------+------+------+----------+------+--------+ | Status | ID | Domain ID | Type | Name | Data | Priority | Port | Weight | +--------+----+-----------+------+------+------+----------+------+--------+ | OK     | 7  | 678       | SRV  | foo  | @    | 1        | 2    | 3      | +--------+----+-----------+------+------+------+----------+------+--------+  $ php digitalocean domains:records:edit 678 7 SRV new_data new_name 5 8888 10 +--------+----+-----------+------+-----------+-------------+----------+------+--------+ | Status | ID | Domain ID | Type | Name      | Data        | Priority | Port | Weight | +--------+----+-----------+------+-----------+-------------+----------+------+--------+ | OK     | 7  | 678       | SRV  | new_name  | new_data    | 5        | 8888 | 10     | +--------+----+-----------+------+-----------+-------------+----------+------+--------+  $ php digitalocean domains:records:destroy 678 7 +--------+ | Status | +--------+ | OK     | +--------+ Commands for Events: $ php digitalocean events:show 123 +----+--------+------------+---------------+------------+ | ID | Status | Droplet ID | Event Type ID | Percentage | +----+--------+------------+---------------+------------+ | 1  | done   | 100824     | 1             | 100        | +----+--------+------------+---------------+------------+ Integration with Frameworks Silex Laravel Symfony2 ... Unit Tests To run unit tests, you'll need the cURL extension and a set of dependencies, you can install them using Composer: $ php composer.phar install --dev Once installed, just launch the following command: $ phpunit --coverage-text You'll obtain some skipped unit tests due to the need of API keys. Rename the phpunit.xml.dist file to phpunit.xml, then uncomment the following lines and add your own Client ID and API key: <php>     <!-- <server name=""CLIENT_ID"" value=""YOUR_CLIENT_ID"" /> -->     <!-- <server name=""API_KEY"" value=""YOUR_API_KEY"" /> --> </php> Contributing Please see CONTRIBUTING for details. Credits Antoine Corcy All contributors Acknowledgments Symfony Console Component Symfony Yaml Component Changelog See the changelog file Support Please open an issues in github Contributor Code of Conduct As contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities. We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, age, or religion. Examples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. Project maintainers who do not follow the Code of Conduct may be removed from the project team. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers. This Code of Conduct is adapted from the Contributor Covenant, version 1.0.0, available at http://contributor-covenant.org/version/1/0/0/ License DigitalOcean is released under the MIT License. See the bundled LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/toin0u/DigitalOcean"	"A library to interface with the Digital Ocean API."	"true"
"Third Party APIs"	"Dropbox SDK"	"https://github.com/dropbox/dropbox-sdk-php"	"The official PHP Dropbox SDK library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"182"	"39"	"80"	"GitHub - dropbox/dropbox-sdk-php: A PHP library for the Dropbox Core API. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 39 Star 182 Fork 80 dropbox/dropbox-sdk-php Code Issues 5 Pull requests 2 Pulse Graphs A PHP library for the Dropbox Core API. https://www.dropbox.com/developers/core/start/php 151 commits 3 branches 11 releases 8 contributors PHP 98.4% Shell 1.6% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master path-escape Nothing to show v1.1.6 v1.1.5 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.1.0-beta1 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 9e427bf Jul 13, 2016 cakoose examples/web-file-browser: Move auth handlers to the top. … Auth is what most people have trouble with.  Move that code to the top of the file so people see it right away. Permalink Failed to load latest commit information. examples examples/web-file-browser: Move auth handlers to the top. Jul 13, 2016 lib/Dropbox Clean up Path::checkArg Jun 23, 2016 support Upgrade ApiGen to 4.1.2 (from a forked 2.8.2). Tweak docstrings to work. Jan 27, 2016 test Util::q() manually escape special characters instead of relying on va… Jun 14, 2016 .gitattributes Add .gitattributes file; set to exclude .gitignore from ""git archive"" Jun 21, 2013 .gitignore Generate API docs with ApiGen. Fill out PHPDoc comments. Feb 19, 2013 ChangeLog.txt ChangeLog: Update for 1.1.6 release. Jun 29, 2015 License.txt Initial import. Feb 16, 2013 ReadMe.md Stricter SSL settings: Fix trusted certs, ciphersuites, misc options. Dec 10, 2013 composer.json Upgrade ApiGen to 4.1.2 (from a forked 2.8.2). Tweak docstrings to work. Jan 28, 2016 composer.lock Upgrade ApiGen to 4.1.2 (from a forked 2.8.2). Tweak docstrings to work. Jan 28, 2016 ReadMe.md Dropbox SDK for PHP 5.3+ A PHP library to access Dropbox's HTTP-based API. License: MIT Requirements: PHP 5.3+, with 64-bit integers. PHP cURL extension with SSL enabled (it's usually built-in). Must not be using mbstring.func_overload to overload PHP's standard string functions. SDK API docs. Setup If you're using Composer for your project's dependencies, add the following to your ""composer.json"": ""require"": {   ""dropbox/dropbox-sdk"": ""1.1.*"" }  If you're not using Composer, download the code, copy the ""lib/"" folder into your project somewhere, and include the ""lib/Dropbox/autoload.php"" in your code. For example, if you copied the ""lib/"" and named it ""dropbox-sdk/"", you would do: // Do this only if you're not using a global autoloader (such as Composer's). require_once ""dropbox-sdk/Dropbox/autoload.php""; IMPORTANT: Many PHP installations have an insecure SSL implementation. To check if your PHP installation is insecure, run the included ""examples/test-ssl.php"" script, either on the command line or via your web server. Get a Dropbox API key You need a Dropbox API key to make API requests. Go to: https://dropbox.com/developers/apps If you've already registered an app, click on the ""Options"" link to see the app's API key and secret. Otherwise, click ""Create an app"" to register an app. Choose ""Dropbox API app"", then ""Files and datastores"", then ""Yes"" or ""No"" depending on your needs. Save the API key to a JSON file called, say, ""test.app"": {   ""key"": ""Your Dropbox API app key"",   ""secret"": ""Your Dropbox API app secret"" }  Using the Dropbox API Before your app can access a Dropbox user's files, the user must authorize your application using OAuth 2. Successfully completing this authorization flow gives you an access token for the user's Dropbox account, which grants you the ability to make Dropbox API calls to access their files. Authorization example for a simple web app: Web File Browser example Authorization example for a command-line tool: Command-Line Authorization example Once you have an access token, create a Client and start making API calls. You only need to perform the authorization process once per user. Once you have an access token for a user, save it somewhere persistent, like in a database. The next time that user visits your app, you can skip the authorization process and go straight to making API calls. Running the Examples and Tests Download this repository. Save your Dropbox API key in a file called ""test.app"". See: Get a Dropbox API key, above. authorize.php This example runs through the OAuth 2 authorization flow. ./examples/authorize.php test.app test.auth  This produces a file named ""test.auth"" that has the access token. This file can passed in to the other examples. account-info.php A trivial example that calls the /account/info API endpoint. ./examples/account-info.php test.auth  (You must first generate ""test.auth"" using the ""authorize"" example above.) web-file-browser.php A tiny web app that runs through the OAuth 2 authorization flow and then uses Dropbox API calls to let the user browse their Dropbox files. Required: copy one of the "".app"" files you created previously to ""examples/web-file-browser.app"". Using PHP built-in web server (PHP 5.4+). Go to the Dropbox API app console, go to the API app you configured in ""web-file-browser.app"", go to the OAuth redirect URIs section, and add ""http://localhost:5000/dropbox-auth-finish"". Run ""php web-file-browser.php"". Point your browser at ""http://localhost:5000/"". Using an existing web server setup. Copy the entire SDK folder to your web server's document path. For example, let's say the script is accessible at ""http://localhost/~scooby/dropbox/examples/web-file-browser.php"". Go to the Dropbox API app console, go to the API app you configured in ""web-file-browser.app"", go to the OAuth redirect URIs section, and add ""http://localhost/~scooby/dropbox/examples/web-file-browser.php/dropbox-auth-finish"". Point your browser at ""http://localhost/~scooby/dropbox/examples/web-file-browser.php"". Running the Tests run: composer install --dev to download the dependencies. (You'll need Composer.) Put an ""auth info"" file in ""test/test.auth"". (You can generate ""test/test.auth"" using the ""authorize.php"" example script.) ./vendor/bin/phpunit test/  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dropbox/dropbox-sdk-php"	"The official PHP Dropbox SDK library."	"true"
"Third Party APIs"	"Github"	"https://github.com/dsyph3r/github-api3-php"	"A library to interface with the Github API."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"60"	"3"	"14"	"GitHub - dsyph3r/github-api3-php: PHP library for the GitHub API v3 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 60 Fork 14 dsyph3r/github-api3-php Code Issues 2 Pull requests 0 Pulse Graphs PHP library for the GitHub API v3 42 commits 1 branch 0 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 88dcf44 Jul 27, 2013 dsyph3r Merge pull request #9 from mgufrone/master … fix typo $usename -> $username on several files Permalink Failed to load latest commit information. examples Adds Authentication support Sep 24, 2011 lib fix typo $usename -> $username on several files Jul 27, 2013 tests Adds Authentication support Sep 24, 2011 .gitignore Add Composer support Jun 30, 2012 .gitmodules update to submodule Dec 8, 2011 .travis.yml update to travis config Dec 6, 2011 LICENSE Addes License Sep 24, 2011 README.md Updates README with new Authentication features Sep 24, 2011 composer.json Update composer.json Jul 23, 2012 phpunit.xml work on user wrapper for API Sep 7, 2011 README.md GitHub API v3 - PHP Library Currently under construction. Overview Provides access to GitHub API v3 via an Object Oriented PHP library. The goal of this library is to provide an intuitive Object Oriented wrapper around the GitHub API v3. This is achieved using a number of methods: Method chaining to request the resources you require Consistent interface for [C]reate (create), [R]etrieve (all|get), [U]pdate (update), [D]elete (delete) Abstracting the specific details of the GitHub API     use GitHub\API\User\User;      // Setup the user, and authenticate (using basic HTTP auth)     $user = new User();     $user->setCredentials(new Authentication\Basic('username', 'password'));     $user->login();      // Get the user details     $response = $user->get();      // Now lets get user emails     $emails = $user->emails()->all();      // Add some new emails     $emails = $user->emails()->create(array('email1@test.com', 'email2@test.com'));      // Get my public keys     $keys = $user->keys()->all();      // Update a key     $user->keys()->update(44, 'New key title', 'ssh-rsa ABCDEF'); GitHub API Coverage The following resources for the API are covered: Users API Email API Followers API Keys API Gists API Comments API Requirements PHP 5.3+ Dependancies Buzz Installation $ git clone git@github.com:dsyph3r/github-api3-php.git $ cd github-api3-php $ git submodule update -i Testing The library is tested using phpunit. Run tests with $ phpunit Documentation Full documentation is provided in this README. There is also extensive source code documentation and the actual GitHub API documentation. Credits Ideas from the excellent php-github-api library by ornicar have been used in this library. Authentication Authentication is supported for both basic HTTP and OAuth. OAuth is the recommened way to authenticate. (Note: This library does not actually deal with how you do the OAuth process to retrieve the access token. You must implement this your self. See oauth2-php lib for an implementation of this). Authentication can be achieved as follows. OAuth     use GitHub\API\User\User;      $user = new User();     $user->setCredentials(new Authentication\OAuth('access_token'));     $user->login();      // Perform operations that require authentication ...      $user->logout(); Basic     use GitHub\API\User\User;      $user = new User();     $user->setCredentials(new Authentication\Basic('username', 'password'));     $user->login();      // Perform operations that require authentication ...      $user->logout(); Most of the GitHub API requires authentication. Requests made to these methods without authentication will cause a GitHub\API\AuthenticationException() to be thrown. Once credentials have been set via setCredentials() you can call login() and logout() without setting the credentials again. Credentials can be cleared with clearCredentials().     $user->clearCredentials(); Users Perform operations on unauthenticated or authenticated user including retrieval, updating, listing followers, etc. GitHub API Documentation - User API. Get user by username Returns user details. No authentication required.     $response = $user->get('dsyph3r'); Returns user details for authenticated user     $response = $user->get(); Update user Updates the authenticated user. See API for full list of available update fields. The updated user is returned.     $response = $user->update(array(       'name'      => 'dsyph3r',       'email'     => 'd.syph.3r@gmail.com',       'location'  => 'Wales, UK'     )); List followers Lists user followers. No authentication required.     $response = $user->followers('dsyph3r'); Lists the followers for authenticated user     $response = $user->followers(); Both requests can return paginated results. The optional 2nd and 3rd parameter are provided to access this functionality. The default pagination result size is 30. GitHub limits the page result size to 100.     $response = $user->followers('dsyph3r', 2, 50);   // Get page 2, 50 results per page List following users Lists user a user is following. No authentication required.     $response = $user->following('dsyph3r'); Lists the user the authenticated user is following.     $response = $user->following(); Access paginated results.     $response = $user->following('dsyph3r', 2, 50);   // Get page 2, 50 results per page Check user is being followed Check if authenticated user is following a user. Returns TRUE is user is being followed.     $response = $user->isFollowing('octocat'); Follow a user Follow a user for the authenticated user. Returns TRUE if user was followed.     $response = $user->follow('octocat'); Unfollow a user Unfollow a user for the authenticated user. Returns TRUE if user was unfollowed.     $response = $user->unfollow('octocat'); Access user related API's Each API can be used independent of other API's. However, proxy methods can be used to access related API's such as Emails for a User. The User API provides the following proxies.     // Access email API     $user->emails();      // Access keys API     $user->keys();      // Access repos API     $user->repos();      // Access gists API     $user->gists(); User Emails Perform operations on authenticated users emails. GitHub API Documentation - User Email API. The email API can be used independently of the other API's as follows:     use GitHub\API\User\Email;      $email = new Email();     $response = $email->all(); However, as emails are related to the user you can also access the email API via the user as follows:     use GitHub\API\User\User;      $user = new User();     $response = $user->emails()->all(); There are a number of benefits to this approach including increased readability, and authentication being carried across from each independent API, i.e. you don't have to authenticated the user and the email API. List emails List all email addresses for authenticated user.     $response = $user->emails()->all(); Add email address(es) Adds single or multiple address(es) for the authenticated user. On success returns list of all email address for user. On failure returns FALSE. This operation can fail if email addresses already exist for the user.     // Add single     $response = $user->emails()->create('dsyph3r@gmail.com');     // Add multiple     $response = $user->emails()->create(array('dsyph3r@gmail.com', 'octocat@github.com')); Delete email address(es) Deletes single or multiple address(es) for the authenticated user. On success returns TRUE.     // Delete single     $response = $user->emails()->delete('dsyph3r@gmail.com');     // Delete multiple     $response = $user->emails()->delete(array('dsyph3r@gmail.com', 'octocat@github.com')); User Keys Perform operations on authenticated users keys. GitHub API Documentation - User Keys API. The keys API can be used independently of the other API's as follows:     use GitHub\API\User\Key;      $key = new Key();     $response = $key->all(); However, as keys are related to the user you can also access the keys API via the user as follows:     use GitHub\API\User\User;      $user = new User();     $response = $user->keys()->all(); List keys List all keys for authenticated user.     $response = $user->keys()->all(); Get key Get a key for authenticated user by key ID.     $response = $user->keys()->get(1); Add key Adds a key for authenticated user. On success returns the created key. On failure returns FALSE. This operation can fail if the key is invalid.     $response = $user->keys()->create('desktop@dsyph3r', 'ssh-rsa ABCDEF'); Update key Update a key for authenticated user by key ID. On success returns the updated key. On failure returns FALSE. This operation can fail if the key is invalid.     $response = $user->keys()->update(1, 'desktop@dsyph3r', 'ssh-rsa FEDCBA'); Delete key Delete a key for authenticated user by ID. On success returns TRUE.     $response = $user->keys()->delete(1); Gists Perform operations on gists. GitHub API Documentation - Gists API. The gists API can be used independently of the other API's as follows:     use GitHub\API\Gist\Gist;      $gist = new Gist();     $response = $gist->all(); List gists List all public gists. No authentication required.     $response = $gist->all(); List all public gists for a user     $response = $gist->all('dsph3r'); List all public gists for authenticated user.     $gist->login();     $response = $gist->all(); List all starred gists for authenticated user.     $gist->login();     $response = $gist->all(null, Api::GIST_TYPE_STARRED); All above operations return paginated results. Accessing paginated results is as follows.     $response = $gist->all('dsyph3r', Api::GIST_TYPE_PUBLIC, 2, 50);   // Get page 2, 50 results per page Get gist Get a gist. Authentication maybe required depending on the gist permissions, ie. Private gist     $response = $gist->get(1); Create gist Creates a gist for authenticated user. On success returns the created gist. On failure returns FALSE. Gists contain files and should be passed in as an array.     $files = array(       'file1.txt' => array(         'content' => 'File 1 contents',       ),       'file2.txt' => array(         'content' => 'File 2 contents',       ),     );     $response = $gist->create($files, true, ""Gist description""); Update gist Updates a gist for authenticated user. On success returns the updated gist. On failure returns FALSE. Gists contain files and should be passed in as an array. Setting a filename key value to null will removed the file from the gist. Leaving filename keys out will cause no update to the gist file.     $files = array(       'file1.txt' => array(         // Update the contents of this file         'content' => 'File 1 contents update',       ),       // This file will be removed from gist       'file2.txt' => null,     );     $response = $gist->update(1, $files, ""Gist description update""); Star gist Star a gist for the authenticated user. Returns TRUE if gist was starred.     $response = $gist->star(1); Unstar gist Unstar a gist for the authenticated user. Returns TRUE if gist was unstarred.     $response = $gist->unstar(1); Check gist is starred Check if gist is starred for the authenticated user. Returns TRUE if gist is starred.     $response = $gist->isStarred(1); Fork gist Fork a gist for the authenticated user. Returns TRUE if gist was forked.     $response = $gist->fork(1); Delete gist Delete a gist for the authenticated user. Returns TRUE if gist was deleted.     $response = $gist->delete(1); Access gists related API's Each API can be used independent of other API's. However, proxy methods can be used to access related API's such as Comments for a Gist. The Gist API provides the following proxies.     // Access gist comments API     $gist->comments(); Gist Comments Perform operations on gist comments. GitHub API Documentation - Gists Comments API. The gists comments API can be used independently of the other API's as follows:     use GitHub\API\Gist\Comment;      $comment = new Comment();     $response = $comment->all(); However, as comments are related to the gists you can also access the comments API via the gist as follows:     use GitHub\API\Gist\Gist;      $gist = new Gist();     $response = $gist->comments()->all(); Custom Mime Types Gist comments use custom mime types to return formatted results. Custom mime types can be passed in as an argument to most functions. Available formats are:     Api::FORMAT_RAW;      // Default     Api::FORMAT_TEXT;     Api::FORMAT_HTML;     Api::FORMAT_FULL; List comments List all comments for gist. Authentication maybe required depending on the gist permissions, ie. Private gist     $response = $gist->comments()->all(1); Get the results in HTML format     $response = $gist->comments()->all(1, Api::FORMAT_HTML); Get comment Get a gist comment. Authentication maybe required depending on the gist permissions, ie. Private gist     $response = $gist->comments()->get(1); Create comment Creates a gist comment for authenticated user. On success returns the created comment. On failure returns FALSE.     $response = $gist->comments()->create(1, ""Comment Body""); Update comment Updates a gist comment for authenticated user. On success returns the updated comment. On failure returns FALSE.     $response = $gist->comments()->update(1, ""Comment body update""); Delete comment Delete a gist comment for the authenticated user. Returns TRUE if gist comment was deleted.     $response = $gist->comments()->delete(1); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dsyph3r/github-api3-php"	"A library to interface with the Github API."	"true"
"Third Party APIs"	"Mailgun"	"https://github.com/mailgun/mailgun-php"	"The official Mailgun PHP API."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"409"	"62"	"118"	"GitHub - mailgun/mailgun-php: Mailgun's Official SDK for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 62 Star 409 Fork 118 mailgun/mailgun-php Code Issues 39 Pull requests 18 Pulse Graphs Mailgun's Official SDK for PHP http://www.mailgun.com 224 commits 3 branches 14 releases 14 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages local_php_sdk master Nothing to show v2.0 v1.8 v1.7.2 v1.7.1 v1.7 1.7 1.6 1.5 1.4 1.3 1.2 1.1 1.0 0.7 Nothing to show New pull request Latest commit 976a76a Apr 1, 2016 jessespears Get rid of nonexistent package … composer.json required a package that doesn't exist. Permalink Failed to load latest commit information. src/Mailgun Removed unused tests and some parameters from the constructor Mar 5, 2016 tests Removed unused tests and some parameters from the constructor Mar 5, 2016 .gitignore Fix fatal error in not finding exception. May 13, 2014 .travis.yml removed unsupported PHP versions Mar 5, 2016 CHANGELOG.md This patch swaps the aggregator to ""PHPAggregator"" if files are inclu… Jan 30, 2014 README.md Bumped mg-php ver in README Apr 1, 2016 SharedHostInstall.md Update SharedHostInstall.md Nov 19, 2014 composer.json Get rid of nonexistent package Apr 1, 2016 phpunit.xml.dist Fixed PHPUnit XML file Aug 2, 2013 README.md Mailgun-PHP This is the Mailgun PHP SDK. This SDK contains methods for easily interacting with the Mailgun API. Below are examples to get you started. For additional examples, please see our official documentation at http://documentation.mailgun.com Installation To install the SDK, you will need to be using Composer in your project. If you aren't using Composer yet, it's really simple! Here's how to install composer and the Mailgun SDK. # Install Composer curl -sS https://getcomposer.org/installer | php  # Add Mailgun as a dependency php composer.phar require mailgun/mailgun-php:~2.0 You do also need to choose what library to use when you are sending http messages. Consult the php-http/client-implementation virtual package to find adapters to use. For more information about virtual packages please refer to Httplug. Example: php composer.phar require php-http/guzzle6-adapter:^1.0 When creating a new Mailgun object you must provide an instance of the HttpClient. $client = new \Http\Adapter\Guzzle6\Client(); $mailgun = new \Mailgun\Mailgun('api_key', $client); You could also rely on the auto discovery feature of Httplug. This means that you need to install puli/composer-plugin and put a puli.phar in your project root. For shared hosts without SSH access, check out our Shared Host Instructions. Rather just download the files? Library Download. Next, require Composer's autoloader, in your application, to automatically load the Mailgun SDK in your project: require 'vendor/autoload.php'; use Mailgun\Mailgun; Usage Here's how to send a message using the SDK: # First, instantiate the SDK with your API credentials and define your domain.  $mg = new Mailgun(""key-example""); $domain = ""example.com"";  # Now, compose and send your message. $mg->sendMessage($domain, array('from'    => 'bob@example.com',                                  'to'      => 'sally@example.com',                                  'subject' => 'The PHP SDK is awesome!',                                  'text'    => 'It is so simple to send a message.')); Or obtain the last 25 log items: # First, instantiate the SDK with your API credentials and define your domain.  $mg = new Mailgun(""key-example""); $domain = ""example.com"";  # Now, issue a GET against the Logs endpoint. $mg->get(""$domain/log"", array('limit' => 25,                                'skip'  => 0)); Response The results, provided by the endpoint, are returned as an object, which you can traverse like an array. Example: $mg = new Mailgun(""key-example""); $domain = ""example.com"";  $result = $mg->get(""$domain/log"", array('limit' => 25,                                          'skip'  => 0));  $httpResponseCode = $result->http_response_code; $httpResponseBody = $result->http_response_body;  # Iterate through the results and echo the message IDs. $logItems = $result->http_response_body->items; foreach($logItems as $logItem){     echo $logItem->message_id . ""\n""; } Example Contents: $httpResponseCode will contain an integer. You can find how we use HTTP response codes in our documentation: http://documentation.mailgun.com/api-intro.html?highlight=401#errors $httpResponseBody will contain an object of the API response. In the above example, a var_dump($result) would contain the following: object(stdClass)#26 (2) { [""http_response_body""]=>   object(stdClass)#26 (2) {     [""total_count""]=>     int(12)     [""items""]=>     array(1) {       [0]=>       object(stdClass)#31 (5) {         [""hap""]=>         string(9) ""delivered""         [""created_at""]=>         string(29) ""Tue, 20 Aug 2013 20:24:34 GMT""         [""message""]=>         string(66) ""Delivered: me@samples.mailgun.org → travis@mailgunhq.com 'Hello'""         [""type""]=>         string(4) ""info""         [""message_id""]=>         string(46) ""20130820202406.24739.21973@samples.mailgun.org""       }     }   } }  Debugging Debugging the PHP SDK can be really helpful when things aren't working quite right. To debug the SDK, here are some suggestions: Set the endpoint to Mailgun's Postbin. A Postbin is a web service that allows you to post data, which is then displayed through a browser. This allows you to quickly determine what is actually being transmitted to Mailgun's API. Step 1 - Create a new Postbin. Go to http://bin.mailgun.net. The Postbin will generate a special URL. Save that URL. Step 2 - Instantiate the Mailgun client using Postbin. Tip: The bin id will be the URL part after bin.mailgun.net. It will be random generated letters and numbers. For example, the bin id in this URL, http://bin.mailgun.net/aecf68de, is ""aecf68de"". # First, instantiate the SDK with your API credentials and define your domain.  $mg = new Mailgun('key-example', null, 'bin.mailgun.net'); $mg->setApiVersion('aecf68de'); $mg->setSslEnabled('false'); $domain = 'example.com';  # Now, compose and send your message. $mg->sendMessage($domain, array('from'    => 'bob@example.com',                                  'to'      => 'sally@example.com',                                  'subject' => 'The PHP SDK is awesome!',                                  'text'    => 'It is so simple to send a message.')); Additional Info For usage examples on each API endpoint, head over to our official documentation pages. This SDK includes a Message Builder, Batch Message and Opt-In Handler component. Message Builder allows you to quickly create the array of parameters, required to send a message, by calling a methods for each parameter. Batch Message is an extension of Message Builder, and allows you to easily send a batch message job within a few seconds. The complexity of batch messaging is eliminated! Framework integration If you are using a framework you might consider these composer packages to make the framework integration easier. tehplague/swiftmailer-mailgun-bundle for Symfony2 Bogardo/Mailgun for Laravel 4 katanyoo/yii2-mailgun-mailer for Yii2 Support and Feedback Be sure to visit the Mailgun official documentation website for additional information about our API. If you find a bug, please submit the issue in Github directly. Mailgun-PHP Issues As always, if you need additional assistance, drop us a note through your Control Panel at https://mailgun.com/cp/support. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mailgun/mailgun-php"	"The official Mailgun PHP API."	"true"
"Third Party APIs"	"PHP Github API"	"https://github.com/KnpLabs/php-github-api"	"Another library to interface with the Github API."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"874"	"69"	"319"	"GitHub - KnpLabs/php-github-api: A simple PHP GitHub API client, Object Oriented, tested and documented. For 5.3+. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 69 Star 874 Fork 319 KnpLabs/php-github-api Code Issues 28 Pull requests 8 Pulse Graphs A simple PHP GitHub API client, Object Oriented, tested and documented. For 5.3+. 857 commits 2 branches 41 releases 126 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags improvement/http-client-abstraction master Nothing to show 1.7.0 1.6.1 1.6.0 1.5.1 1.5.0 1.4.15 1.4.14 1.4.13 1.4.12 1.4.11 1.4.10 1.4.9 1.4.8 1.4.7 1.4.6 1.4.5 1.4.4 1.4.3 1.4.2 1.4.1 1.4.0 1.3.1 1.3.0 1.2.7 1.2.6 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.1.5 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.0.2 1.0.1 1.0.0 0.1 Nothing to show New pull request Latest commit 311cf10 Jul 7, 2016 cursedcoder committed on GitHub Merge pull request #393 from sergeyklay/patch-2 … Added Github\HttpClient\HttpClient::$client Permalink Failed to load latest commit information. doc Updated docs index page Jun 27, 2016 lib/Github Merge pull request #393 from sergeyklay/patch-2 Jul 7, 2016 test Update TreesTest.php Jun 5, 2016 .editorconfig Add some style fixers Jul 2, 2015 .gitattributes Added a .gitattributes file Jul 26, 2014 .gitignore Add some style fixers Jul 2, 2015 .php_cs Use StyleCI Bridge Oct 6, 2015 .styleci.yml Add return fixer Oct 11, 2015 .travis.yml Try to fix build in PHP 5.3 May 2, 2016 LICENSE Removes exec bit from various random files Oct 20, 2015 README.md Updated badges Dec 12, 2015 composer.json Fixed branch alias Dec 17, 2015 phpunit.xml.dist Exclude functional tests from default phpunit config Feb 19, 2013 README.md PHP GitHub API A simple Object Oriented wrapper for GitHub API, written with PHP5. Uses GitHub API v3. The object API is very similar to the RESTful API. Features Follows PSR-0 conventions and coding standard: autoload friendly Light and fast thanks to lazy loading of API classes Extensively tested and documented Requirements PHP >= 5.3.2 with cURL extension, Guzzle library, (optional) PHPUnit to run tests. Autoload The new version of php-github-api using Composer. The first step to use php-github-api is to download composer: $ curl -s http://getcomposer.org/installer | php Then we have to install our dependencies using: $ php composer.phar install Now we can use autoloader from Composer by: {     ""require"": {         ""knplabs/github-api"": ""~1.4""     } } php-github-api follows the PSR-0 convention names for its classes, which means you can easily integrate php-github-api classes loading in your own autoloader. Using Laravel? Laravel GitHub by Graham Campbell might interest you. Basic usage of php-github-api client <?php  // This file is generated by Composer require_once 'vendor/autoload.php';  $client = new \Github\Client(); $repositories = $client->api('user')->repositories('ornicar'); From $client object, you can access to all GitHub. Cache usage <?php  // This file is generated by Composer require_once 'vendor/autoload.php';  $client = new \Github\Client(     new \Github\HttpClient\CachedHttpClient(array('cache_dir' => '/tmp/github-api-cache')) );  // Or select directly which cache you want to use $client = new \Github\HttpClient\CachedHttpClient(); $client->setCache(     // Built in one, or any cache implementing this interface:     // Github\HttpClient\Cache\CacheInterface     new \Github\HttpClient\Cache\FilesystemCache('/tmp/github-api-cache') );  $client = new \Github\Client($client); Using cache, the client will get cached responses if resources haven't changed since last time, without reaching the X-Rate-Limit imposed by github. Documentation See the doc directory for more detailed documentation. License php-github-api is licensed under the MIT License - see the LICENSE file for details Credits Sponsored by Contributors Thanks to Thibault Duplessis aka. ornicar for his first version of this library. Thanks to Joseph Bielawski aka. stloyd for his contributions and support. Thanks to noloh for his contribution on the Object API. Thanks to bshaffer for his contribution on the Repo API. Thanks to Rolf van de Krol for his countless contributions. Thanks to Nicolas Pastorino for his contribution on the Pull Request API. Thanks to Edoardo Rivello for his contribution on the Gists API. Thanks to GitHub for the high quality API and documentation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/KnpLabs/php-github-api"	"Another library to interface with the Github API."	"true"
"Third Party APIs"	"S3 Stream Wrapper"	"https://github.com/gwkunze/S3StreamWrapper"	"A stream wrapper library for Amazon S3."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"16"	"4"	"3"	"GitHub - gwkunze/S3StreamWrapper: A PHP Stream wrapper for Amazon S3 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 16 Fork 3 gwkunze/S3StreamWrapper Code Issues 0 Pull requests 1 Pulse Graphs A PHP Stream wrapper for Amazon S3 16 commits 1 branch 8 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.3.2 0.3.1 0.3.0 0.2.3 0.2.2 0.2.1 0.2 0.1 Nothing to show New pull request Latest commit 86a3849 Nov 19, 2013 gwkunze w+ should truncate anyways, so behave the same as w when stream_open … … …is called Permalink Failed to load latest commit information. data Added default mime.json and updated formatting and fixed dirty flag n… Feb 5, 2013 scripts Initial commit Feb 5, 2013 src/S3StreamWrapper w+ should truncate anyways, so behave the same as w when stream_open … Nov 19, 2013 tests Initial commit Feb 5, 2013 .gitignore Removed mime data from .gitignore and added some more fields to compo… Feb 5, 2013 LICENSE Initial commit Feb 5, 2013 README.md Fix readme formatting Apr 4, 2013 composer.json Updated composer.json to support newer versions of AWS SDK Aug 14, 2013 phpunit.xml.dist Initial commit Feb 5, 2013 README.md S3StreamWrapper A simple stream wrapper for Amazon S3. Example <?php  use S3StreamWrapper\S3StreamWrapper;  S3StreamWrapper::register();  $options = array(     'key' => ""YOUR AWS KEY HERE"",     'secret' => ""YOUR AWS SECRET HERE"",     'region' => 'us-east-1', );  stream_context_set_default(array('s3' => $options));  echo file_get_contents(""s3://mybucket/file1"");  echo file_put_contents(""s3://mybucket/file2"", ""Foobar!"");  print_r(scandir(""s3://mybucket/"")); License MIT, See LICENSE Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gwkunze/S3StreamWrapper"	"A stream wrapper library for Amazon S3."	"true"
"Third Party APIs"	"Stripe"	"https://github.com/stripe/stripe-php"	"The official Stripe PHP library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"890"	"105"	"249"	"GitHub - stripe/stripe-php: Stripe PHP bindings Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 105 Star 890 Fork 249 stripe/stripe-php Code Issues 2 Pull requests 2 Pulse Graphs Stripe PHP bindings https://stripe.com 635 commits 6 branches 103 releases 78 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags disputes jacqueline-v1-subs master ob-fix-error-messages refunds tls12-support Nothing to show v3.17.0 v3.16.0 v3.15.0 v3.14.3 v3.14.2 v3.14.1 v3.14.0 v3.13.0 v3.12.1 v3.12.0 v3.11.0 v3.10.1 v3.10.0 v3.9.2 v3.9.1 v3.9.0 v3.8.0 v3.7.1 v3.7.0 v3.6.0 v3.5.0 v3.4.0 v3.3.0 v3.2.0 v3.1.0 v3.0.0 v2.3.0 v2.2.0 v2.1.4 v2.1.3 v2.1.2 v2.1.1 v2.1.0 v2.0.1 v2.0.0 v1.18.0 v1.17.5 v1.17.4 v1.17.3 v1.17.2 v1.17.1 v1.17.0 v1.16.0 v1.15.0 v1.14.1 v1.13.1 v1.13.0 v1.12.0 v1.11.0 v1.10.1 v1.9.1 v1.9.0 v1.8.3 v1.8.2 v1.8.1 v1.8.0 v1.7.15 v1.7.14 v1.7.13 v1.7.12 v1.7.11 v1.7.10 v1.7.9 v1.7.8 v1.7.7 v1.7.6 v1.7.5 v1.7.4 v1.7.3 v1.7.2 v1.7.1 v1.7.0 v1.6.5 v1.6.4 v1.6.3 v1.6.2 v1.6.1 v1.6.0 v1.5.24 v1.5.23 v1.5.22 v1.5.21 v1.5.20 v1.5.19 v1.5.18 v1.5.17 v1.5.16 v1.5.15 v1.5.14 v1.5.13 v1.5.12 v1.5.11 v1.5.10 v1.5.9 v1.5.8 v1.5.7 v1.5.6 v1.5.5 v1.5.4 v1.5.3 Nothing to show New pull request Latest commit ad2f7be Jul 14, 2016 brandur committed on GitHub Merge pull request #274 from stripe/brandur-fix-build … Remove some newlines that php_codesniffer doesn't like Permalink Failed to load latest commit information. data Revert ""Revert ""Add ""CyberTrust Global Root"""""" Mar 22, 2016 lib Bump version to 3.17.0 Jul 14, 2016 tests Remove some newlines that php_codesniffer doesn't like Jul 14, 2016 .coveralls.yml Add Support for coveralls code coverage Jan 12, 2015 .gitignore Add Support for coveralls code coverage Jan 12, 2015 .travis.yml Start testing PHP 7 Jul 28, 2015 CHANGELOG.md Bump version to 3.17.0 Jul 14, 2016 LICENSE Update license copyright year. Mar 10, 2015 README.md mbstring availability check May 6, 2016 VERSION Bump version to 3.17.0 Jul 14, 2016 build.php Add init file Feb 21, 2015 composer.json Added a branch alias Feb 13, 2015 init.php Added support for 3D Secure Jul 12, 2016 phpunit.no_autoload.xml Add init file Feb 21, 2015 phpunit.xml Remove forceCoversAnnotation from phpunit.xml Jan 12, 2015 README.md Stripe PHP bindings You can sign up for a Stripe account at https://stripe.com. Requirements PHP 5.3.3 and later. Composer You can install the bindings via Composer. Run the following command: composer require stripe/stripe-php To use the bindings, use Composer's autoload: require_once('vendor/autoload.php'); Manual Installation If you do not wish to use Composer, you can download the latest release. Then, to use the bindings, include the init.php file. require_once('/path/to/stripe-php/init.php'); Dependencies The bindings require the following extension in order to work properly: curl, although you can use your own non-cURL client if you prefer json mbstring (Multibyte String) If you use Composer, these dependencies should be handled automatically. If you install manually, you'll want to make sure that these extensions are available. Getting Started Simple usage looks like: \Stripe\Stripe::setApiKey('d8e8fca2dc0f896fd7cb4cb0031ba249'); $myCard = array('number' => '4242424242424242', 'exp_month' => 8, 'exp_year' => 2018); $charge = \Stripe\Charge::create(array('card' => $myCard, 'amount' => 2000, 'currency' => 'usd')); echo $charge; Documentation Please see https://stripe.com/docs/api for up-to-date documentation. Legacy Version Support If you are using PHP 5.2, you can download v1.18.0 (zip, tar.gz) from our releases page. This version will continue to work with new versions of the Stripe API for all common uses. This legacy version may be included via require_once(""/path/to/stripe-php/lib/Stripe.php"");, and used like: Stripe::setApiKey('d8e8fca2dc0f896fd7cb4cb0031ba249'); $myCard = array('number' => '4242424242424242', 'exp_month' => 8, 'exp_year' => 2018); $charge = Stripe_Charge::create(array('card' => $myCard, 'amount' => 2000, 'currency' => 'usd')); echo $charge; Custom Request Timeouts NOTE: We do not recommend decreasing the timeout for non-read-only calls (e.g. charge creation), since even if you locally timeout, the request on Stripe's side can still complete. If you are decreasing timeouts on these calls, make sure to use idempotency tokens to avoid executing the same transaction twice as a result of timeout retry logic. To modify request timeouts (connect or total, in seconds) you'll need to tell the API client to use a CurlClient other than its default. You'll set the timeouts in that CurlClient. // set up your tweaked Curl client $curl = new \Stripe\HttpClient\CurlClient(); $curl->setTimeout(10); // default is \Stripe\HttpClient\CurlClient::DEFAULT_TIMEOUT $curl->setConnectTimeout(5); // default is \Stripe\HttpClient\CurlClient::DEFAULT_CONNECT_TIMEOUT  echo $curl->getTimeout(); // 10 echo $curl->getConnectTimeout(); // 5  // tell Stripe to use the tweaked client \Stripe\ApiRequestor::setHttpClient($curl);  // use the Stripe API client as you normally would Custom cURL Options (e.g. proxies) Need to set a proxy for your requests? Pass in the requisite CURLOPT_* array to the CurlClient constructor, using the same syntax as curl_stopt_array(). This will set the default cURL options for each HTTP request made by the SDK, though many more common options (e.g. timeouts; see above on how to set those) will be overridden by the client even if set here. // set up your tweaked Curl client $curl = new \Stripe\HttpClient\CurlClient(array(CURLOPT_PROXY => 'proxy.local:80')); // tell Stripe to use the tweaked client \Stripe\ApiRequestor::setHttpClient($curl); Alternately, a callable can be passed to the CurlClient constructor that returns the above array based on request inputs. See testDefaultOptions() in tests/CurlClientTest.php for an example of this behavior. Note that the callable is called at the beginning of every API request, before the request is sent. Development Install dependencies: composer install Tests Install dependencies as mentioned above (which will resolve PHPUnit), then you can run the test suite: ./vendor/bin/phpunit Or to run an individual test file: ./vendor/bin/phpunit tests/UtilTest.php Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/stripe/stripe-php"	"The official Stripe PHP library."	"true"
"Third Party APIs"	"Twilio"	"https://github.com/twilio/twilio-php"	"The official Twilio PHP REST API."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"707"	"136"	"325"	"GitHub - twilio/twilio-php: A PHP library for communicating with the Twilio REST API and generating TwiML. Need help? Post your questions to http://getsatisfaction.com/twilio or email us at help@twilio.com Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 136 Star 707 Fork 325 twilio/twilio-php Code Issues 72 Pull requests 33 Wiki Pulse Graphs A PHP library for communicating with the Twilio REST API and generating TwiML. Need help? Post your questions to http://getsatisfaction.com/twilio or email us at help@twilio.com http://readthedocs.org/docs/twilio-php/en/latest/ 900 commits 27 branches 78 releases 37 contributors PHP 99.5% Makefile 0.5% PHP Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 5.2 WorkerChannel_capability add-actions-addresses add-unmute-function addons addresses-create develop edge-release edge fix-grants fix-paging gh-pages identity-tokens ip-messaging master next-gen-autoloader next-gen remove-pinned-certs sid-validation ssl-cert-instructions std-class taskrouter-capability token-generation-broken-link transcription twilio-capability-autoload user-agent workflow-builder-autoload Nothing to show latest docs-latest 5.2.0-edge 5.1.0-edge 5.0.1-edge 5.0.0-edge 5.0.0-RC8 5.0.0-RC7 5.0.0-RC6 5.0.0-RC5 5.0.0-RC4 5.0.0-RC3 5.0.0-RC2 5.0.0-RC1 4.10.0 4.9.2 4.9.1 4.9.0 4.8.1 4.8.0 4.7.0 4.6.1 4.6.0 4.6.0-edge 4.5.0 4.5.0-edge 4.4.0 4.3.0 4.2.1 4.2.0 4.1.0 4.0.4 4.0.3 4.0.2 4.0.1 4.0.0 3.13.1 3.13.0 3.12.8 3.12.7 3.12.6 3.12.5 3.12.4 3.12.3 3.12.2 3.12.1 3.12.0 3.10.0 3.9.1 3.9.0 3.8.3 3.8.2 3.8.1 3.8.0 3.7.2 3.7.1 3.7.0 3.6.0 3.5.2 3.5.1 3.5.0 3.3.2 3.2.4 3.2.3 3.2.2 3.2.1 3.2.0 3.0.1 3.0.0 2.0.8 2.0.7 2.0.6 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 Nothing to show New pull request Latest commit d7d9be9 Feb 26, 2016 carlosdp Add issue template Permalink Failed to load latest commit information. Services Move CapabilityAPI to its respective folder and remove include statem… Feb 17, 2016 docs fix pricing code samples Feb 10, 2016 tests Move CapabilityAPI to its respective folder and remove include statem… Feb 17, 2016 .gitignore composer.lock should not be ignored Sep 26, 2013 .travis.yml Add access tokens Dec 3, 2015 AUTHORS.md Bump version numbers for release Oct 30, 2015 CHANGES.md Bump version to 4.10.0 Jan 28, 2016 LICENSE Add license header during make dist Jul 14, 2011 Makefile Implement monitor Apr 7, 2015 README.md Add help pointers to README.md Apr 24, 2015 composer.json Changing composer to just autoload the clients eagerly Apr 27, 2015 composer.lock Update PHPUnit to get rid of obnoxious mb_strpos crap Feb 11, 2015 issue_template.md Add issue template Feb 26, 2016 package.php bump to 3.13.1 Mar 31, 2015 README.md Installation You can install twilio-php via composer or by downloading the source. Via Composer: twilio-php is available on Packagist as the twilio/sdk package. Via ZIP file: Click here to download the source (.zip) which includes all dependencies. Once you download the library, move the twilio-php folder to your project directory and then include the library file: require '/path/to/twilio-php/Services/Twilio.php';  and you're good to go! A Brief Introduction With the twilio-php library, we've simplified interaction with the Twilio REST API. No need to manually create URLS or parse XML/JSON. You now interact with resources directly. Follow the Quickstart Guide to get up and running right now. The User Guide shows you how to get the most out of twilio-php. Quickstart Send an SMS <?php // Install the library via PEAR or download the .zip file to your project folder. // This line loads the library require('/path/to/twilio-php/Services/Twilio.php');  $sid = ""ACXXXXXX""; // Your Account SID from www.twilio.com/user/account $token = ""YYYYYY""; // Your Auth Token from www.twilio.com/user/account  $client = new Services_Twilio($sid, $token); $message = $client->account->messages->sendMessage(   '9991231234', // From a valid Twilio number   '8881231234', // Text this number   ""Hello monkey!"" );  print $message->sid; Make a Call <?php // Install the library via PEAR or download the .zip file to your project folder. // This line loads the library require('/path/to/twilio-php/Services/Twilio.php');  $sid = ""ACXXXXXX""; // Your Account SID from www.twilio.com/user/account $token = ""YYYYYY""; // Your Auth Token from www.twilio.com/user/account  $client = new Services_Twilio($sid, $token); $call = $client->account->calls->create(   '9991231234', // From a valid Twilio number   '8881231234', // Call this number    // Read TwiML at this URL when a call connects (hold music)   'http://twimlets.com/holdmusic?Bucket=com.twilio.music.ambient' ); Generating TwiML To control phone calls, your application needs to output TwiML. Use Services_Twilio_Twiml to easily create such responses. <?php require('/path/to/twilio-php/Services/Twilio.php');  $response = new Services_Twilio_Twiml(); $response->say('Hello'); $response->play('https://api.twilio.com/cowbell.mp3', array(""loop"" => 5)); print $response; That will output XML that looks like this: <?xml version=""1.0"" encoding=""utf-8""?> <Response>     <Say>Hello</Say>     <Play loop=""5"">https://api.twilio.com/cowbell.mp3</Play> <Response> Full Documentation The documentation for twilio-php is hosted at Read the Docs. Click here to read our full documentation. Prerequisites PHP >= 5.2.3 The PHP JSON extension Getting help If you need help installing or using the library, please contact Twilio Support at help@twilio.com first. Twilio's Support staff are well-versed in all of the Twilio Helper Libraries, and usually reply within 24 hours. If you've instead found a bug in the library or would like new features added, go ahead and open issues or pull requests against this repo! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/twilio/twilio-php"	"The official Twilio PHP REST API."	"true"
"Third Party APIs"	"Twitter OAuth"	"https://github.com/widop/twitter-oauth"	"A library to interface with Twitter's OAuth workflow."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6"	"5"	"2"	"GitHub - widop/twitter-oauth: Twitter OAuth API for PHP 5.3+ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 6 Fork 2 widop/twitter-oauth Code Issues 0 Pull requests 0 Pulse Graphs Twitter OAuth API for PHP 5.3+ 17 commits 1 branch 0 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 2fb30fd Feb 7, 2014 egeloen Merge pull request #7 from widop/f-response … Introduce OAuth response and exception Permalink Failed to load latest commit information. doc Add bearer token support Dec 15, 2013 src/Widop/Twitter/OAuth Introduce OAuth response + exception Feb 7, 2014 tests Introduce OAuth response + exception Feb 7, 2014 .gitignore Initial commit Nov 20, 2013 .travis.yml [OAuthToken] Add serialization support Nov 30, 2013 LICENSE Initial commit Nov 20, 2013 README.md Update according to last changes Dec 16, 2013 composer.json Initial commit Nov 20, 2013 phpunit.xml.dist Introduce OAuth response + exception Feb 7, 2014 README.md README The Wid'op OAuth library is a modern PHP 5.3+ API allowing you to easily obtain a Twitter access token. For now, it supports OAuth Web & Application tokens (not xOAuth). Here a sample for the Web workflow: use Widop\HttpAdapter\CurlHttpAdapter; use Widop\Twitter\OAuth;  // First, instantiate your OAuth client. $oauth = new OAuth\OAuth(     new CurlHttpAdapter(),     new OAuth\OAuthConsumer('consumer_key', 'consumer_secret'),     new OAuth\Signature\OAuthHmacSha1Signature() );  // Second, get/cache a ""request token"" somewhere (here in session) if (!isset($_SESSION['my_request_session'])) {     $requestToken = $oauth->getRequestToken('http://my-app.com/twitter-callback.php');     $_SESSION['my_request_session'] = serialize($requestToken); } else {     $requestToken = unserialize($_SESSION['my_request_token']); }  // Third, redirect the user on twitter for getting permissions echo '<a href=""'.$oauth->getAuthorizeUrl($requestToken).'"">Authorize the application</a>';  // Then, get an ""access token"" if (isset($_REQUEST['oauth_verifier'])) {     $accessToken = $oauth->getAccessToken($requestToken, $_REQUEST['oauth_verifier']);      // Save the access token somewhere for further purpose! } Documentation Installation OAuth Testing The library is fully unit tested by PHPUnit with a code coverage close to 100%. To execute the test suite, check the travis configuration. Contribute We love contributors! The library is open source, if you'd like to contribute, feel free to propose a PR! License The Wid'op OAuth library is under the MIT license. For the full copyright and license information, please read the LICENSE file that was distributed with this source code. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/widop/twitter-oauth"	"A library to interface with Twitter's OAuth workflow."	"true"
"Third Party APIs"	"Twitter REST"	"https://github.com/widop/twitter-rest"	"A library to interact with Twitter's REST API."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"22"	"7"	"7"	"GitHub - widop/twitter-rest: Twitter REST API for PHP 5.3+ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 22 Fork 7 widop/twitter-rest Code Issues 0 Pull requests 0 Pulse Graphs Twitter REST API for PHP 5.3+ 83 commits 1 branch 0 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit cbe9bc7 Feb 7, 2014 egeloen Merge pull request #34 from widop/f-response … [Twitter] Return directly the OAuth response Permalink Failed to load latest commit information. doc [Twitter] Return directly the OAuth response Feb 7, 2014 src/Widop/Twitter/Rest [Twitter] Return directly the OAuth response Feb 7, 2014 tests [Twitter] Return directly the OAuth response Feb 7, 2014 .gitignore Initial commit Sep 27, 2013 .travis.yml [Travis] Only build master branch Nov 23, 2013 LICENSE Initial commit Sep 27, 2013 README.md [Twitter] Return directly the OAuth response Feb 7, 2014 composer.json Extract options Dec 17, 2013 phpunit.xml.dist Extract options Dec 17, 2013 README.md README The Wid'op Twitter REST library is a modern PHP 5.3+ API allowing you to easily interact with Twitter 1.1. In order to sign your request with the OAuth protocol, the library internally uses the widop/twitter-oauth. use Widop\HttpAdapter\CurlHttpAdapter; use Widop\Twitter\OAuth; use Widop\Twitter\Rest\Statuses\StatusesUpdateRequest; use Widop\Twitter\Rest\Twitter;  // First, instantiate your OAuth client. $oauth = new OAuth\OAuth(     new CurlHttpAdapter(),     new OAuth\OAuthConsumer('consumer_key', 'consumer_secret'),     new OAuth\Signature\OAuthHmacSha1Signature() );  // Second, instantiate your OAuth access token. $token = new OAuth\OAuthToken('oauth_key', 'oauth_secret');  // Third, instantiate your Twitter client. $twitter = new Twitter($oauth, $token);  // Then, send a request to the Twitter API! $request = new StatusesUpdateRequest('Yeah, I\'m currently updating my status!') $tweet = $twitter->send($request)->getData(); Documentation Installation Twitter Testing The library is fully unit tested by PHPUnit with a code coverage close to 100%. To execute the test suite, check the travis configuration. Contribute We love contributors! The library is open source, if you'd like to contribute, feel free to propose a PR! License The Wid'op Twitter REST library is under the MIT license. For the full copyright and license information, please read the LICENSE file that was distributed with this source code. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/widop/twitter-rest"	"A library to interact with Twitter's REST API."	"true"
"Extensions"	"PHP CPP"	"http://www.php-cpp.com/"	"A C++ library for developing PHP extensions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"687"	"99"	"166"	"GitHub - CopernicaMarketingSoftware/PHP-CPP: Library to build PHP extensions with C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 99 Star 687 Fork 166 CopernicaMarketingSoftware/PHP-CPP Code Issues 13 Pull requests 12 Pulse Graphs Library to build PHP extensions with C++ http://www.php-cpp.com/ 798 commits 2 branches 19 releases 21 contributors C++ 98.0% Makefile 1.3% C 0.7% C++ Makefile C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master streams Nothing to show v1.5.3 v1.5.2 v1.5.1 v1.5 v1.4 v1.3.2 v1.3.1 v1.3 v1.2.2 v1.2.1 v1.2 v1.1.1 v1.1 v1.0 v0.9.2 v0.9.1 v0.9 v0.2 v0.1 Nothing to show New pull request Latest commit 9ba1b8b Jul 1, 2016 martijnotto PHP 7 does not need the extra byte for the ini name, fixes issue #252 Permalink Failed to load latest commit information. Examples Updated examples to show the new PHP-CPP API Jun 6, 2016 common Static methods should be reported as static to the zend engine. Fixes… Jun 20, 2016 documentation Corrected syntax error in documentation code fragment... Aug 8, 2015 include Static methods should be reported as static to the zend engine. Fixes… Jun 20, 2016 zend PHP 7 does not need the extra byte for the ini name, fixes issue #252 Jul 1, 2016 .clang_complete Allocate the zend_object_iterator on the heap because the silly zend Jun 16, 2016 .gitignore added ""sudo ldconfig"" to Makefile to force that shared library cache … Jun 10, 2015 LICENSE Initial commit Aug 23, 2013 Makefile Added mkdir for lib folder and uninstall option in make. Jun 20, 2016 README.md Update README.md Jun 10, 2016 phpcpp.h Made the output streams thread_local so they work correctly in a Jun 13, 2016 README.md PHP-CPP The PHP-CPP library is a C++ library for developing PHP extensions. It offers a collection of well documented and easy-to-use classes that can be used and extended to build native extensions for PHP. The full documentation can be found on http://www.php-cpp.com. Watch out: PHP 7 only! This library has been updated to work with PHP versions 7.0 and up. If you wish to create extensions for older PHP versions, use the PHP-CPP-LEGACY library instead. The PHP-CPP and PHP-CPP-LEGACY library have (almost) identical API's, so you can easily port extensions for PHP 5.* to PHP 7 and the other war around. ABOUT PHP-CPP is created and maintained by Copernica (www.copernica.com). We write our code mostly in PHP and C++ and needed an effective way to combine these two languages. That's where PHP-CPP comes in. Do you appreciate our work and are you looking for other high quality solutions? Then check out our other solutions: PHP-JS (www.php-js.com) Copernica Marketing Suite (www.copernica.com) MailerQ MTA (www.mailerq.com) Responsive Email web service (www.responsiveemail.com) The power of PHP-CPP Unlike regular PHP extensions - which are really hard to implement and require a deep knowledge of the Zend engine and pointer manipulation - extensions built with PHP-CPP are not difficult to develop at all. In fact, the only thing you need to do is write a function in C++, and the PHP-CPP library uses all the power offered by C++11 to convert the parameters and return values from your functions to/and from PHP: Php::Value hello_world() {     return ""hello world!""; } The function above is a native C++ function. With PHP-CPP you can export this function to PHP with only one single C++ method call: extension.add(""hello_world"", hello_world); Working with parameters and return values is just as easy: Php::Value my_plus(Php::Parameters &params) {     return params[0] + params[1]; } The method call to export the above C++ function: extension.add(""my_plus"", my_plus, {     Php::ByVal(""a"", Php::numericType),     Php::ByVal(""b"", Php::numericType) }); The PHP-CPP library ensures that the variables from PHP (which internally are complicated C structures), are automatically converted into integers, passed to your function, and that the return value of your ""my_plus"" function is also converted back into a PHP variable. Type conversion between native C/C++ types and PHP variables is handled by PHP-CPP, using features from the C++11 language. It does not matter if your functions accept strings, integers, booleans or other native parameters: PHP-CPP takes care of the conversion. The return value of your function is also transformed by PHP-CPP into PHP. More complicated structures can be handled by PHP-CPP as well. If you would like to return a nested associative array from your function, you can do so too: Php::Value get_complex_array() {     Php::Value r;     r[""a""] = 123;     r[""b""] = 456;     r[""c""][0] = ""nested value"";     r[""c""][1] = ""example"";     return r; } The C++ function above is equivalent to the following function in PHP: function get_complex_array() {     return array(         ""a"" => 123,         ""b"" => 456,         ""c"" => array(""nested_value"",""example"")     ); } More information and more examples are available on the official website: http://www.php-cpp.com. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CopernicaMarketingSoftware/PHP-CPP"	"A C++ library for developing PHP extensions."	"true"
"Extensions"	"Zephir"	"https://github.com/phalcon/zephir"	"A compiled language between PHP and C++ for developing PHP extensions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1557"	"184"	"276"	"GitHub - phalcon/zephir: Zephir is a compiled high level language aimed to the creation of C-extensions for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 184 Star 1,557 Fork 276 phalcon/zephir Code Issues 160 Pull requests 21 Wiki Pulse Graphs Zephir is a compiled high level language aimed to the creation of C-extensions for PHP http://zephir-lang.com/ 2,857 commits 14 branches 29 releases 57 contributors C 51.2% PHP 44.2% Zephir 3.8% HTML 0.3% M4 0.1% CSS 0.1% Other 0.3% C PHP Zephir HTML M4 CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags development feature/case-eval-expressions global-static-cache ignore-gch internal-methods issue-616 low-overhead-fcall master mcall-cache-analysis new-parser ovr-patch-1 strict-type-hints support-clang travis-php7 Nothing to show zephir-0.4.0a v0.2.0 0.9.3 0.9.2 0.8.0 0.7.1 0.7.0 0.6.1 0.6.0 0.5.9 0.5.8 0.5.7 0.5.6 0.5.5 0.5.4 0.5.3 0.5.2 0.5.1 0.5.0 0.4.6 0.4.5 0.4.4 0.4.3 0.4.2a 0.4.1 0.4.0a 0.3.10a 0.3.7a 0.3.5a Nothing to show New pull request Latest commit 2fba6d7 Jul 4, 2016 sergeyklay committed with steffengy Fixed generating params prototype (#1277) Permalink Failed to load latest commit information. Library Fixed generating params prototype (#1277) Jul 4, 2016 bin feat(parser): Initial implementation of parser as PHP ext Dec 5, 2015 generated chore(ZendEngine_2): 0a15aa2: regenerate test sources [ci skip] May 27, 2016 kernels Better support for boolean comparisons Jun 6, 2016 parser Better support for boolean comparisons Jun 6, 2016 prototypes Added APC constants Apr 13, 2016 runtime [Runtime] Fix #989 issue, IS_CONSTANT_ARRAY was removed in PHP 5.6 Jun 27, 2015 templates Add support for module globals: (#1265) Jun 11, 2016 test Fix #1260, Added stripcslashes support for PHP7 (#1261) May 27, 2016 unit-tests Fix #1260, Added stripcslashes support for PHP7 (#1261) May 27, 2016 .editorconfig Use 4-space indent for zephir files May 8, 2015 .gitattributes Added sha to Zephir version when possible May 22, 2016 .gitignore New specialized parser (#1248) Apr 26, 2016 .travis.yml Enabled Travis cache May 22, 2016 CONTRIBUTING.md Export symbol using string Aug 22, 2014 LICENSE Happy new Year 2015! / Copyright (c) 2013-2015 Zephir Team and contri… Jan 1, 2015 README.md Update README.md Apr 4, 2016 WINDOWS.md docs(win32): Update windows documentation regarding parser Dec 13, 2015 appveyor.yml feat(parser): Initial implementation of parser as PHP ext Dec 5, 2015 bootstrap.php Happy new Year 2015! / Copyright (c) 2013-2015 Zephir Team and contri… Jan 1, 2015 compiler.php Fix PSR-2 Jun 6, 2016 composer.json Amended composer config Feb 6, 2016 config.json Upd config.json - api docs options Apr 4, 2015 id_rsa.enc chore(ci): Attempt implementing automated regenerating Nov 14, 2015 install Updating year to 2016 [ci skip] Apr 24, 2016 install-nosudo feat(parser): Initial implementation of parser as PHP ext Dec 5, 2015 phpunit.xml.dist Update phpunit configuration Sep 13, 2014 README.md Zephir Zephir - Ze(nd Engine) Ph(p) I(nt)r(mediate) - is a high level language that eases the creation and maintainability of extensions for PHP. Zephir extensions are exported to C code that can be compiled and optimized by major C compilers such as gcc/clang/vc++. Functionality is exposed to the PHP language. Main features: Both dynamic/static typing Reduced execution overhead compared with full interpretation Restricted procedural programming, promoting OOP Memory safety Ahead-of-time (AOT) compiler to provide predictable performance Compiler design goals: Multi-pass compilation Type speculation/inference Allow runtime profile-guided optimizations, pseudo-constant propagation and indirect/virtual function inlining Requirements To compile zephir-parser: re2c To build the PHP extension: g++ >= 4.4/clang++ >= 3.x/vc++ 9 gnu make 3.81 or later php development headers and tools Installation You can install zephir using composer. Run composer require phalcon/zephir, run ./install and then run zephir from your bin-dir. By default it is ./vendor/bin/zephir. You can read more about composer binaries in it's documentation. For global installation via composer you can use composer global require. Do not forget add ~/.composer/vendor/bin into your $PATH. Also you can just clone zephir repository and run ./install. For global installation add -c flag. Additional notes on Ubuntu The following packages are needed in Ubuntu: apt-get install re2c libpcre3-dev Usage Compile the extension: ./bin/zephir compile External Links Documentation Official Blog Forum Twitter License Zephir is open-sourced software licensed under the MIT License. See the LICENSE file for more information. Contributing See CONTRIBUTING.md for details about contributions to this repository. Current Build Status Zephir is built under Travis CI service. Every commit pushed to this repository will queue a build into the continuous integration service and will run all PHPUnit tests to ensure that everything is going well and the project is stable. The current build status is: Linux: Windows: Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phalcon/zephir"	"A compiled language between PHP and C++ for developing PHP extensions."	"true"
"Miscellaneous"	"Annotations"	"https://github.com/doctrine/annotations"	"An annotations library (part of Doctrine)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"151"	"31"	"79"	"GitHub - doctrine/annotations: Annotations Docblock Parser Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 151 Fork 79 doctrine/annotations Code Issues 15 Pull requests 12 Pulse Graphs Annotations Docblock Parser 5,202 commits 2 branches 12 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0 master Nothing to show v1.2.7 v1.2.6 v1.2.5 v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.2 v1.1.1 v1.1 v1.0 Nothing to show New pull request Latest commit 2e1b1f7 Mar 24, 2016 mikeSimonson Merge pull request #76 from localheinz/fix/badge … Fix: Use SVG badge for Travis build status Permalink Failed to load latest commit information. lib/Doctrine/Common/Annotations Simplified coalesce syntax for parser injection Feb 25, 2016 tests/Doctrine/Tests Added ability to inject parser via constructor Feb 25, 2016 .gitattributes Exclude files from distribution Nov 4, 2014 .gitignore Adding composer.lock and composer.phar to ignores May 21, 2013 .travis.yml Add PHP7 to the build matrix Jun 16, 2015 LICENSE Added LICENSE file Dec 20, 2013 README.md Fix: Use SVG badge for Travis build status Mar 23, 2016 composer.json Bumping master to `1.3.x-dev` Jul 6, 2014 phpunit.xml.dist Initial commit to make Annotations component standalone Jan 12, 2013 README.md Doctrine Annotations Docblock Annotations Parser library (extracted from Doctrine Common). Changelog v1.2.0 HHVM support Allowing dangling comma in annotations Excluded annotations are no longer autoloaded Importing namespaces also in traits Added support for ::class 5.5-style constant, works also in 5.3 and 5.4 v1.1 Add Exception when ZendOptimizer+ or Opcache is configured to drop comments Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/doctrine/annotations"	"An annotations library (part of Doctrine)."	"true"
"Miscellaneous"	"Cake Utility"	"https://github.com/cakephp/utility"	"Utility classes such as Inflector, String, Hash, Security and Xml (CP)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"26"	"24"	"6"	"GitHub - cakephp/utility: [READ-ONLY] CakePHP Utility classes such as Inflector, String, Hash, Security and Xml. This repo is a split of the main code that can be found in https://github.com/cakephp/cakephp Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 26 Fork 6 cakephp/utility Code Pull requests 0 Pulse Graphs [READ-ONLY] CakePHP Utility classes such as Inflector, String, Hash, Security and Xml. This repo is a split of the main code that can be found in https://github.com/cakephp/cakephp 366 commits 7 branches 49 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3-0 3-1 3.next 3.0 3.1 3.2 master Nothing to show 3.3.0-beta 3.2.12 3.2.11 3.2.10 3.2.9 3.2.8 3.2.7 3.2.6 3.2.5 3.2.4 3.2.3 3.2.2 3.2.1 3.2.0 3.2.0-RC1 3.1.13 3.1.10 3.1.9 3.1.8 3.1.7 3.1.6 3.1.5 3.1.4 3.1.3 3.1.2 3.1.1 3.1.0 3.1.0-beta2 3.1.0-beta 3.1.0-RC1 3.0.18 3.0.15 3.0.13 3.0.12 3.0.11 3.0.10 3.0.9 3.0.8 3.0.7 3.0.6 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 3.0.0-beta3 3.0.0-RC2 3.0.0-RC1 Nothing to show New pull request Latest commit aadbc56 May 22, 2016 chinpei215 Fix Security::randomBytes() fallback … randomBytes() should return a binary string always. Currently, it fallbacks to a hexadecimal string. Add insecureRandomBytes() for fallback test. Permalink Failed to load latest commit information. Crypto Fix detected errors manually that could not be auto-fixed. Feb 2, 2016 Exception Run phpcbf for PSR2 CS fixers Dec 31, 2014 CookieCryptTrait.php docblock fix, replace isset with equals null Apr 26, 2016 Hash.php Fix Hash::merge() emitting a warning when merging strings. May 14, 2016 Inflector.php Fix pluralization of ""chef"". Apr 25, 2016 LICENSE.txt Adds license file and badges for Utility subtree split Feb 9, 2016 MergeVariablesTrait.php Fix CS Sep 14, 2015 README.md Adds license file and badges for Utility subtree split Feb 9, 2016 Security.php Fix Security::randomBytes() fallback May 22, 2016 Text.php Fix Text::truncate() on single words. Apr 20, 2016 Xml.php Always import classes. Sep 23, 2015 bootstrap.php Avoid side effects in Inflector.php Mar 16, 2015 composer.json Update utility package's composer.json Mar 24, 2016 README.md CakePHP Utility Classes This library provides a range of utility classes that are used throughout the CakePHP framework What's in the toolbox? Hash A Hash (as in PHP arrays) class, capable of extracting data using an intuitive DSL: $things = [     ['name' => 'Mark', 'age' => 15],     ['name' => 'Susan', 'age' => 30],     ['name' => 'Lucy', 'age' => 25] ];  $bigPeople = Hash::extract($things, '{n}[age>21].name');  // $bigPeople will contain ['Susan', 'Lucy'] Check the official Hash class documentation Inflector The Inflector class takes a string and can manipulate it to handle word variations such as pluralizations or camelizing. echo Inflector::pluralize('Apple'); // echoes Apples  echo Inflector::singularize('People'); // echoes Person Check the official Inflector class documentation Text The Text class includes convenience methods for creating and manipulating strings. Text::insert(     'My name is :name and I am :age years old.',     ['name' => 'Bob', 'age' => '65'] ); // Returns: ""My name is Bob and I am 65 years old.""  $text = 'This is the song that never ends.'; $result = Text::wrap($text, 22);  // Returns This is the song that never ends. Check the official Text class documentation Security The security library handles basic security measures such as providing methods for hashing and encrypting data. $key = 'wt1U5MACWJFTXGenFoZoiLwQGrLgdbHA'; $result = Security::encrypt($value, $key);  Security::decrypt($result, $key); Check the official Security class documentation Xml The Xml class allows you to easily transform arrays into SimpleXMLElement or DOMDocument objects and back into arrays again $data = [     'post' => [         'id' => 1,         'title' => 'Best post',         'body' => ' ... '     ] ]; $xml = Xml::build($data); Check the official Xml class documentation Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cakephp/utility"	"Utility classes such as Inflector, String, Hash, Security and Xml (CP)."	"true"
"Miscellaneous"	"Chief"	"https://github.com/adamnicholson/Chief"	"A command bus library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"31"	"3"	"1"	"GitHub - adamnicholson/Chief: Command bus package for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 31 Fork 1 adamnicholson/Chief Code Issues 0 Pull requests 0 Pulse Graphs Command bus package for PHP 145 commits 2 branches 8 releases 1 contributor PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop/2.0 master Nothing to show 1.3.0-alpha2 1.3.0-alpha 1.2.1 1.2 1.1 1.0.2 1.0.1 1.0 Nothing to show New pull request Latest commit 94e6de1 Mar 16, 2016 adamnicholson Allow overriding cache expiry and cache key for cacheable commands Permalink Failed to load latest commit information. src Allow overriding cache expiry and cache key for cacheable commands Mar 16, 2016 tests Allow overriding cache expiry and cache key for cacheable commands Mar 16, 2016 .gitignore Added new line chars to end of text files Jan 25, 2015 .scrutinizer.yml Added missing file line ending Jan 25, 2015 .travis.yml Remove test suite support for PHP <5.6 Mar 7, 2016 LICENSE.txt Added new line chars to end of text files Jan 25, 2015 README.md Add caching decorator to README Mar 7, 2016 composer.json Move phpunit to dev only composer requirement Mar 15, 2016 phpunit.xml Remove deprecated phpunit flag Jun 25, 2015 README.md Chief Chief is a powerful standalone command bus package for PHP 5.4+. Contents What is a command bus Installation Usage Class-based command handlers Anonymous functions as command handlers Self-handling commands Decorators Queued commands Transactional commands Dependcy injection container integration License Contributing Author Command Bus? The most common style of interface to a module is to use procedures, or object methods. So if you want a module to calculate a bunch of charges for a contract, you might have a BillingService class with a method for doing the calculation, calling it like this $billingService->calculateCharges($contract);. A command oriented interface would have a command class for each operation, and be called with something like this $cmd = new CalculateChargesCommand($contract); $cmd->execute();. Essentially you have one command class for each method that you would have in the method-oriented interface. A common variation is to have a separate command executor object that actually does the running of the command. $command = new CalculateChargesCommand($contract); $commandBus->execute($command); -- From Martin Fowler's Blog (code samples haven ported to PHP): That 'executor' Martin mentions is what we call the command bus. The pattern typically consists of 3 classes: Command: A tiny object containing some data (probably just some public properties or getters/setters) CommandHandler: Responsible for running the command through a handle($command) method CommandBus: All commands are passed to the bus execute($command) method, which is responsible for finding the right CommandHandler and calling the handle($command) method. For every Command in your application, there should be a corresponding CommandHandler. In the below example, we demonstrate how a command bus design could handle registering a new user in your system using Chief: use Chief\Chief, Chief\Command;  class RegisterUserCommand implements Command {     public $email;     public $name; }  class RegisterUserCommandHandler {     public function handle(RegisterUserCommand $command) {         Users::create([             'email' => $command->email,             'name' => $command->name         ]);         Mailer::sendWelcomeEmail($command->email);     } }  $chief = new Chief;  $registerUserCommand = new RegisterUserCommand; $registerUserCommand->email = 'adamnicholson10@gmail.com'; $registerUserCommand->name = 'Adam Nicholson';  $chief->execute($registerUserCommand); Installation Install the latest version with composer require chief/chief, or see Packagist. No further setup is required, however if you're using a framework and want to make sure that we play nicely (with DI Containers, Event handlers, etc), then use the bridges below. Laravel After installing via composer, add the below to the $providers array in your app/config/app.php: 'Chief\Bridge\Laravel\LaravelServiceProvider' Usage We'll use the below command/handler for the usage examples: use Chief\Chief, Chief\Command;  class MyCommand implements Command {} class MyCommandHandler {     public function handle(MyCommand $command) { /* ... */ } } Automatic handler resolution When you pass a Command to Chief::execute(), Chief will automatically search for the relevant CommandHandler and call the handle() method: $chief = new Chief; $chief->execute(new MyCommand); By default, this will search for a CommandHandler with the same name as your Command, suffixed with 'Handler', in both the current namespace and in a nested Handlers namespace. So Commands\FooCommand will automatically resolve to Commands\FooCommandHandler or Commands\Handlers\FooCommandHandler if either class exists. Want to implement your own method of automatically resolving handlers from commands? Implement your own version of the Chief\CommandHandlerResolver interface to modify the automatic resolution behaviour. Handlers bound by class name If your handlers don't follow a particular naming convention, you can explicitly bind a command to a handler by its class name: use Chief\Chief, Chief\NativeCommandHandlerResolver, Chief\Busses\SynchronousCommandBus;  $resolver = new NativeCommandHandlerResolver(); $bus = new SynchronousCommandBus($resolver); $chief = new Chief($resolver);  $resolver->bindHandler('MyCommand', 'MyCommandHandler');  $chief->execute(new MyCommand); Handlers bound by object Or, just pass your CommandHandler instance: $resolver->bindHandler('MyCommand', new MyCommandHandler);  $chief->execute(new MyCommand); Handlers as anonymous functions Sometimes you might want to quickly write a handler for your Command without having to write a new class. With Chief you can do this by passing an anonymous function as your handler: $resolver->bindHandler('MyCommand', function (Command $command) {     /* ... */ });  $chief->execute(new MyCommand); Self-handling commands Alternatively, you may want to simply allow a Command object to execute itself. To do this, just ensure your Command class also implements CommandHandler: class SelfHandlingCommand implements Command, CommandHandler {     public function handle(Command $command) { /* ... */ } } $chief->execute(new SelfHandlingCommand); Decorators Imagine you want to log every command execution. You could do this by adding a call to your logger in every CommandHandler, however a much more elegant solution is to use decorators. Registering a decorator: $chief = new Chief(new SynchronousCommandBus, [new LoggingDecorator($logger)]); Now, whenever Chief::execute() is called, the command will be passed to LoggingDecorator::execute(), which will perform some log action, and then pass the command to the relevant CommandHandler. Chief provides you with two decorators out-the-box: LoggingDecorator: Log before and after all executions to a Psr\Log\LoggerInterface EventDispatchingDecorator: Dispatch an event to a Chief\Decorators\EventDispatcher after every command execution. CommandQueueingDecorator: Put the command into a Queue for later execution, if it implements Chief\QueueableCommand. (Read more under ""Queued Commands"") TransactionalCommandLockingDecorator: Lock the command bus when a command implementing Chief\TransactionalCommand is being executed. (Read more under ""Transactional Commands"") Registering multiple decorators: // Attach decorators when you instantiate $chief = new Chief(new SynchronousCommandBus, [     new LoggingDecorator($logger),     new EventDispatchingDecorator($eventDispatcher) ]);  // Or attach decorators later $chief = new Chief(); $chief->pushDecorator(new LoggingDecorator($logger)); $chief->pushDecorator(new EventDispatchingDecorator($eventDispatcher));  // Or manually stack decorators $chief = new Chief(     new EventDispatchingtDecorator($eventDispatcher,         new LoggingDecorator($logger, $context,              new CommandQueueingDecorator($queuer,                  new TransactionalCommandLockingDecorator(                     new CommandQueueingDecorator($queuer,                          new SynchronousCommandBus()                     )                 )             )         )     ) ); Queued Commands Commands are often used for 'actions' on your domain (eg. send an email, create a user, log an event, etc). For these type of commands where you don't need an immediate response you may wish to queue them to be executed later. This is where the CommandQueueingDecorator comes in to play. Firstly, to use the CommandQueueingDecorator, you must first implement the CommandQueuer interface with your desired queue package: interface CommandQueuer {     /**  * Queue a Command for executing  *  * @param Command $command  */     public function queue(Command $command); } An implementation of CommandQueuer for illuminate/queue is included. Next, attach the CommandQueueingDecorator decorator: $chief = new Chief(); $queuer = MyCommandBusQueuer(); $chief->pushDecorator(new CommandQueueingDecorator($queuer)); Then, implement QueueableCommand in any command which can be queued: MyQueueableCommand implements Chief\QueueableCommand {} Then use Chief as normal: $command = new MyQueueableCommand(); $chief->execute($command); If you pass Chief any command which implements QueueableCommand it will be added to the queue. Any commands which do not implement QueueableCommand will be executed immediately as normal. If your commands implement QueueableCommand but you are not using the CommandQueueingDecorator, then they will be executed immediately as normal. For this reason, it is good practice to implement QueueableCommand for any commands which may be queued in the future, even if you aren't using the queueing decorator yet. Cached Command Execution The CachingDecorator can be used to store the execution return value for a given command. For example, you may have a FetchUerReportCommand, and an associated handler which takes a significant time to generate the ""UserReport"". Rather than re-generating the report every time, simply make FetchUserReport implement CacheableCommand, and the return value will be cached. Data is cached to a psr/cache (PSR-6) compatible cache library. Chief does not supply a cache library. You must require this yourself and pass it in as a consturctor argument to the CachingDecorator. Example: use Chief\CommandBus,     Chief\CacheableCommand,     Chief\Decorators\CachingDecorator;  $chief = new Chief(); $chief->pushDecorator(new CachingDecorator(     $cache, // Your library of preference implementing PSR-6 CacheItemPoolInterface.     3600 // Time in seconds that values should be cached for. 3600 = 1 hour. ));    class FetchUserReportCommand implements CacheableCommand { }  class FetchUserReportCommahdHandler {     public function handle(FetchUserReportCommand $command) {         return 'foobar';     } }  $report = $chief->execute(new FetchUserReportCommand); // (string) ""foo"" handle() is called $report = $chief->execute(new FetchUserReportCommand); // (string) ""foo"" Value taken from cache $report = $chief->execute(new FetchUserReportCommand); // (string) ""foo"" Value taken from cache   Transactional Commands Using the TransactionalCommandLockingDecorator can help to prevent more than 1 command being executed at any time. In practice, this means that you if you nest a command execution inside a command handler, the nested command will not be executed until the first command has completed. Here's an example: use Chief\CommandBus; use Chief\Command; use Chief\Decorators\TransactionalCommandLockingDecorator;  class RegisterUserCommandHandler {     public function __construct(CommandBus $bus, Users $users) {         $this->bus = $bus;     }      public function handle(RegisterUserCommand $command) {         $this->bus->execute(new RecordUserActivity('this-will-never-be-executed'));         Users::create([             'email' => $command->email,             'name' => $command->name         ]);         throw new Exception('Something unexpected; could not create user');     } }  $chief = new Chief(); $chief->pushDecorator(new TransactionalCommandLockingDecorator());  $command = new RegisterUserCommand; $command->email = 'foo@example.com'; $command->password = 'password123';  $chief->execute($command); So what's happening here? When $chief->execute(new RecordUserActivity('registered-user')) is called, that command is actually dropped into an in-memory queue, which will not execute until RegisterCommandHandler::handle() has finished. In this example, because we're showing that an Exception is thrown before the method completes, the RecordUserActivity command is never actually executed. Dependency Injection Container Integration Chief uses a CommandHandlerResolver class which is responsible for finding and instantiating the relevant CommandHandler for a given Command. If you want to use your own Dependency Injection Container to control the actual instantiation, just create your own class which implements Chief\Container and pass it to the CommandHandlerResolver which is consumed by SynchronousCommandBus. For example, if you're using Laravel: use Chief\Resolvers\NativeCommandHandlerResolver,     Chief\Chief,     Chief\Busses\SynchronousCommandBus,     Chief\Container;  class IlluminateContainer implements Container {     public function make($class) {         return \App::make($class);     } }  $resolver = new NativeCommandHandlerResolver(new IlluminateContainer); $chief = new Chief(new SynchronousCommandBus($resolver)); $chief->execute(new MyCommand); Containers have already been provided for : Illuminate\Container: $container = new \Illuminate\Container\Container; $resolver = new NativeCommandHandlerResolver(new \Chief\Bridge\Laravel\IlluminateContainer($container)); $chief = new Chief(new \Chief\Busses\SynchronousCommandBus($resolver)); League\Container: $container = new \League\Container\Container; $resolver = new NativeCommandHandlerResolver(new \Chief\Bridge\Laravel\IlluminateContainer($container)); $chief = new Chief(new \Chief\Busses\SynchronousCommandBus($resolver)); Contributing We welcome any contributions to Chief. They can be made via GitHub issues or pull requests. License Chief is licensed under the MIT License - see the LICENSE.txt file for details Author Adam Nicholson - adamnicholson10@gmail.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/adamnicholson/Chief"	"A command bus library."	"true"
"Miscellaneous"	"ClassPreloader"	"https://github.com/ClassPreloader/ClassPreloader"	"A library for optimising autoloading."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"198"	"12"	"23"	"GitHub - ClassPreloader/ClassPreloader: Optimizes class loading performance by generating a single PHP file containing all of the autoloaded files for a specific use case Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 198 Fork 23 ClassPreloader/ClassPreloader Code Issues 1 Pull requests 0 Pulse Graphs Optimizes class loading performance by generating a single PHP file containing all of the autoloaded files for a specific use case https://gjcampbell.co.uk/ 166 commits 3 branches 9 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.4 2.0 master Nothing to show 3.0.0 2.0.0 1.4.0 1.3.0 1.2.0 1.1.0 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit de1d55d Jan 24, 2016 GrahamCampbell Bumped year Permalink Failed to load latest commit information. src Updated phpdoc Nov 9, 2015 tests Updated tests Nov 9, 2015 .gitattributes Added a .gitattributes file Sep 7, 2014 .gitignore Updated .gitignore May 26, 2015 .travis.yml Updated travis config Jun 23, 2015 LICENSE Bumped year Jan 24, 2016 README.md Tweaked docs Nov 13, 2015 composer.json Restored minimum stability to stable Nov 9, 2015 phpunit.xml.dist Updated phpunit config Jun 25, 2015 README.md Class Preloader for PHP This tool is used to generate a single PHP script containing all of the classes required for a specific use case. Using a single compiled PHP script instead of relying on autoloading can help to improve the performance of specific use cases. For example, if your application executes the same bootstrap code on every request, then you could generate a preloader (the compiled output of this tool) to reduce the cost of autoloading the required classes over and over. What it actually does This tool listens for each file that is autoloaded, creates a list of files, traverses the parsed PHP file using PHP Parser and any visitors of a Config object, wraps the code of each file in a namespace block if necessary, and writes the contents of every autoloaded file (in order) to a single PHP file. Notice This tool should only be used for specific use cases. There is a tradeoff between preloading classes and autoloading classes. The point at which it is no longer beneficial to generate a preloader is application specific. You'll need to perform your own benchmarks to determine if this tool will speed up your application. Installation Add ClassPreloader as a dependency to your composer.json file by adding ""classpreloader/classpreloader"": ""^3.0"" to your require block. Note that if you want to use the cli tool, then you need to also add ""classpreloader/console"": ""^2.0"" to the require block. Using the tool You use the bin/classpreloader.php compile command with a few command line flags to generate a preloader. --config: A CSV containing a list of files to combine into a classmap, or the full path to a PHP script that returns an array of classes or a ClassPreloader\Config object. --output: The path to the file to store the compiled PHP code. If the directory does not exist, the tool will attempt to create it. --skip_dir_file: (no value) Skip files with __DIR__ or __FILE__ to make the cache portable. --fix_dir: (defaults to 1) Set to 0 to not replace __DIR__ constants with the actual directory of the original file. --fix_file: (defaults to 1) Set to 0 to not replace __FILE__ constants with the actual location of the original file. --strict_types: (defaults to 0) Set to 1 to enable strict types mode. --strip_comments: (defaults to 0) Set to 1 to strip comments from each source file. Writing a config file Creating a PHP based configuration file is fairly simple. Just include the vendor/classpreloader/classpreloader/src/ClassLoader.php file and call the ClassPreloader\ClassLoader::getIncludes() method, passing a function as the only argument. This function should accept a ClassPreloader\ClassLoader object and register the passed in object's autoloader using $loader->register(). It is important to register the ClassPreloader\ClassLoader autoloader after all other autoloaders are registered. An array or ClassPreloader\Config must be returned from the config file. You can attach custom node visitors if you need to perform any sort of translation on each matching file before writing it to the output. <?php  // Here's an example of creating a preloader for using the // Amazon DynamoDB and the AWS SDK for PHP 2.  require __DIR__.'/src/Config.php'; require __DIR__.'/src/ClassNode.php'; require __DIR__.'/src/ClassList.php'; require __DIR__.'/src/ClassLoader.php';  use ClassPreloader\ClassLoader;  $config = ClassLoader::getIncludes(function (ClassLoader $loader) {     require __DIR__.'/vendor/autoload.php';     $loader->register();     $aws = Aws\Common\Aws::factory([         'key'    => '***',         'secret' => '***',         'region' => 'us-east-1'     ]);     $client = $aws->get('dynamodb');     $client->listTables()->getAll(); });  // Add a regex filter that requires all classes to match the regex. // $config->addInclusiveFilter('/Foo/');  // Add a regex filter that requires that a class does not match the filter. // $config->addExclusiveFilter('/Foo/');  return $config; You would then run the classpreloader.php script and pass in the full path to the above PHP script. php bin/classpreloader.php compile --config=""/path/to/the_example.php"" --output=""/tmp/preloader.php"" The above command will create a file in /tmp/preloader.php that contains every file that was autoloaded while running the snippet of code in the anonymous function. You would generate this file and include it in your production script. Automating the process with Composer You can automate the process of creating preloaders using Composer's script functionality. For example, if you wanted to automatically create a preloader each time the AWS SDK for PHP is installed, you could define a script like the following in your composer.json file: {     ""require"": {         ""classpreloader/console"": ""^2.0""     },     ""scripts"": {         ""post-autoload-dump"": ""php bin/classpreloader.php compile --config=/path/to/the_example.php --output=/path/to/preload.php""     },     ""config"": {         ""bin-dir"": ""bin""     } } Using the above composer.json file, each time the project's autoloader is recreated using the install or update command, the classpreloader.php file will be executed. This script would generate a preload.php containing the classes required to run the previously demonstrated ""the_example.php"" configuration file. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ClassPreloader/ClassPreloader"	"A library for optimising autoloading."	"true"
"Miscellaneous"	"Country List"	"https://github.com/umpirsky/country-list"	"A list of all countries with names and ISO 3166-1 codes."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2463"	"151"	"781"	"GitHub - umpirsky/country-list: List of all countries with names and ISO 3166-1 codes in all languages and data formats. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 151 Star 2,463 Fork 781 umpirsky/country-list Code Issues 2 Pull requests 4 Pulse Graphs 🌐 List of all countries with names and ISO 3166-1 codes in all languages and data formats. 91 commits 5 branches 5 releases 5 contributors HTML 61.3% PHP 38.7% HTML PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix/issue-35 fix/rawgit fix/update-dependencies master zend-cldr Nothing to show 2.0.2 2.0.1 2.0.0 1.0.1 1.0.0 Nothing to show New pull request Latest commit 9d3e3ce Mar 26, 2016 umpirsky Fixed issue #53 … As described in #53, composer fails when using PHP7. Permalink Failed to load latest commit information. bin Use list generator Jan 5, 2016 data Adding countries in XLIFF formats Feb 15, 2016 .gitignore Add country data Jan 3, 2016 LICENSE Update copyright Jan 2, 2016 README.md Update README.md Mar 12, 2016 composer.json Fixed issue #53 Mar 26, 2016 composer.lock Updated list-generator bundle to add XLIFF support Feb 15, 2016 README.md symfony upgrade fixer • twig gettext extractor • wisdom • centipede • permissions handler • extraload • gravatar • locurro • country list • transliterator Country List List of all countries with names and ISO 3166-1 codes in all languages and all data formats. Formats Available Text JSON YAML XML HTML CSV SQL MySQL PostgreSQL SQLite PHP XLIFF Multilingual All formats are also available in multiple languages, please find full language list here. Build Country list is available out of the box, but if you want to submit patches, add new formats, update data source or contribute in any other way, you will probably want to rebuild the list: $ composer install $ ./bin/build Other Interesting Lists Currency List Language List Locale List TLD List Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/umpirsky/country-list"	"A list of all countries with names and ISO 3166-1 codes."	"true"
"Miscellaneous"	"Embera"	"https://github.com/mpratt/Embera"	"An Oembed consumer library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"105"	"13"	"26"	"GitHub - mpratt/Embera: A Oembed consumer library, that gives you information about urls. It helps you replace urls to youtube or vimeo for example, with their html embed code. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 105 Fork 26 mpratt/Embera Code Issues 1 Pull requests 0 Pulse Graphs A Oembed consumer library, that gives you information about urls. It helps you replace urls to youtube or vimeo for example, with their html embed code. 245 commits 1 branch 29 releases 8 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.9.3 1.9.2 1.9.1 1.9.0 1.8.15 1.8.14 1.8.13 1.8.12 1.8.11 1.8.10 1.8.9 1.8.8 1.8.7 1.8.6 1.8.5 1.8.4 1.8.3 1.8.2 1.8.1 1.8.0 1.7 1.6 1.5 1.4 1.3 1.2 1.1 1.0 0.9 Nothing to show New pull request Latest commit 45c380c Jul 15, 2016 mpratt Bump Version to 1.9.3 Permalink Failed to load latest commit information. Lib/Embera Bump Version to 1.9.3 Jul 15, 2016 Tests Added support subdomains and https for Scribd Jul 11, 2016 .gitignore A script on my machine fucked up my file permissions :/ Aug 6, 2014 .scrutinizer.yml Trying to send coverage information from travis-ci to scrutinizer-ci Aug 6, 2014 .travis.yml Test version PHP 7.0 on travis! Nov 3, 2015 LICENSE Updated LICENSE Jan 11, 2016 PROVIDERS.md Added support for Streamable (https://streamable.com) Apr 6, 2016 README.md Updated the README.md Mar 3, 2016 composer.json Updated composer.json Jan 11, 2016 phpdoc.xml A script on my machine fucked up my file permissions :/ Aug 7, 2014 phpunit.full-urls.xml Minor TestSuite cleanup Oct 17, 2014 phpunit.xml The blacklist configuration for PHPUnit coverage has been drop from n… Feb 26, 2016 README.md Embera Embera is a Oembed consumer library written in PHP. Basically what it does is take urls from a text and queries the matching service for information about the media. If you are like me, in most cases all you want is to convert a simple Url to a valid html embed code. Now, the sweet thing about Embera, is that some providers allow you to skip the part about making the request to a Oembed Provider and still get a valid html embed code! Read the Offline Support section for more information. On the other hand, there are some oembed providers that dont return html embedable code - Embera detects this and most of the time, it tries to generate a valid html code for you to use. Check out the Basic Usage instructions for more information. Supported Sites Embera supports 60+ sites. Sites marked with an * allow offline html embedding * Youtube * Vimeo * DailyMotion Instagram SoundCloud Twitter * Ted Flickr Revision3 Hulu * Kickstarter Deviantart Facebook (Public Posts/Videos) * Scribd And many many more! for the full list checkout the PROVIDERS.md file. Requirements PHP >= 5.3 Curl or allow_url_fopen must be enabled Installation Install with Composer If you're using Composer to manage dependencies, you can use this library by creating a composer.json and adding this: {     ""require"": {         ""mpratt/embera"": ""~1.0""     } }  Save it and run composer.phar install Standalone Installation (without Composer) Download the latest release or clone this repository, place the Lib/Embera directory on your project. Afterwards, you only need to include the Autoload.php file.     require '/path/to/Embera/Autoload.php';     $embera = new \Embera\Embera(); Or if you already have PSR-0 complaint autoloader, you just need to register Embera     $loader->registerNamespace('Embera', 'path/to/Embera'); Basic Usage For autoconverting urls into html embedable code, use the autoEmbed() method:     $text = 'Hi, I just saw this video http://www.dailymotion.com/video/xxwxe1_harlem-shake-de-los-simpsons_fun';     $embera = new \Embera\Embera();     echo $embera->autoEmbed($text);     /* Hi, I just saw this video <iframe src=""http://www.dailymotion.com/embed/video/xxwxe1"" ..... */ The Embera object accepts an array with configuration options, so lets say you want to specify width or height:     $config = array(         'params' => array(             'width' => 300,             'height' => 500         )     );      $text = 'Check this video out http://vimeo.com/groups/shortfilms/videos/66185763';      $embera = new \Embera\Embera($config);     echo $embera->autoEmbed($text);      /*Check this video out <iframe src=""http://player.vimeo.com/video/66185763"" width=""300"" height=""480"" ....*/ Do you want to allow embedding only from a few Sites?     $config = array(         'allow' => array('Youtube', 'Vimeo')     );      $text = 'http://vimeo.com/groups/shortfilms/videos/66185763  http://www.flickr.com/photos/bees/8597283706/in/photostream  http://youtube.com/watch?v=J---aiyznGQ';      $embera = new \Embera\Embera($config);      echo $embera->autoEmbed($text);     // The flickr url remains the same Or perhaps you want to deny embedding from sites?     $config = array(         'deny' => array('Youtube', 'Vimeo')     );      $text = 'http://dailymotion.com/video/xp30q9_bmw-serie3-2012-en-mexico_auto  http://vimeo.com/groups/shortfilms/videos/66185763  http://youtube.com/watch?v=J---aiyznGQ';      $embera = new \Embera\Embera($config);      echo $embera->autoEmbed($text);     // Only the dailymotion link will be autoconverted As an alternative you can embed urls only if they start with the embed:// prefix.     $config = array(         'use_embed_prefix' => true     );      $text = 'embed://dailymotion.com/video/xp30q9_bmw-serie3-2012-en-mexico_auto  http://youtube.com/watch?v=J---aiyznGQ';      $embera = new \Embera\Embera($config);      echo $embera->autoEmbed($text);     // Only the dailymotion link will be autoconverted Maybe you are interested on seeing the full oembed response from the urls. Use the getUrlInfo() method that returns an array with the complete information about the media located in the url     $embera = new \Embera\Embera();     print_r($embera->getUrlInfo('http://dailymotion.com/video/xp30q9_bmw-serie3-2012-en-mexico_auto')); You can even feed an array full with urls and inspect the oembed response for each one them.     $urls = array('http://vimeo.com/groups/shortfilms/videos/66185763',                   'http://vimeo.com/47360546',                   'http://www.flickr.com/photos/bees/8597283706/in/photostream',                   'http://youtube.com/watch?v=J---aiyznGQ');      $embera = new \Embera\Embera();     print_r($embera->getUrlInfo($urls)); Remember that some Oembed Providers append more/different information (and others less) this depends heavily from each provider and the type of media you are requesting. Advanced Usage Offline Support One of the key features of Embera is offline support. This feature allows you to get at least the html embed code for some services, without having to make a real http request to the oembed provider. What Offline support really means, is that the html embed code is constructed from the original url given, this also means that most of the other information such as the title or the author's name, is probably going to be missing. Lets call that a fake response. Take a look at the PROVIDERS.md to see which providers allow offline support. There is a configuration setting called oembed that should be used in order to change the way the library communicates with the oembed endpoint. By default the value equals null, which means that Embera will first try to get the data from the oembed endpoint and if that fails it tries to return a fake response. This behaviour is useful when there are problems connecting with the oembed provider! This means that you get at least an html embedable code. When the oembed setting equals true the library gets the data directly from the oembed provider. If something goes wrong with the request, Embera skips the usage of fake responses. On the other hand you can set the oembed setting to false and by doing that, you will always get fake responses. By doing this you can skip the request to the oembed provider. This library has offline support for a bunch of providers.     $config = array(         'oembed' => false     );      $text = 'http://vimeo.com/groups/shortfilms/videos/66185763  http://www.flickr.com/photos/bees/8597283706/in/photostream';      $embera = new \Embera\Embera($config);     echo $embera->autoEmbed($text);      /* <iframe src=""http://player.vimeo.com/66185763"" width=""420"" height=""315"" ...  http://www.flickr.com/photos/bees/8597283706/in/photostream */      /* Since Embera doesnt have Flickr offline support, the url stays the same. */ When using the getUrlInfo() method, it is possible to see if the information from the provider came directly from the oembed endpoint or if it was generated by the offline feature. If you see in the response, the key embera_using_fake equal 0, means that the library got the results from the Oembed provider. When it equals 1, the html embed code was generated by the library. Error Checking There are 3 methods for error checking bool hasErrors(), array getErrors() and string getLastError()     $embera = new \Embera\Embera();     $result = $embera->autoEmbed($text);      if ($embera->hasErrors())         echo $embera->getLastError();      // Or you can inspect all the errors     print_r($embera->getErrors()); Ignoring HTML tags when AutoEmbedding By default, Embera doesnt autoEmbed content/urls that are inside <pre>, <a>, <code> and <img> tags. However if you wanted to ignore other tags, you can specify other tags. Use the ìgnore_tags configuration option     $config = array(         'ignore_tags' => array('a', 'img', 'strong')     );      $embera = new \Embera\Embera();     echo $embera->autoEmbed($text); For reference, you might want to take a look at mthe HtmlProcessor class which is in charge of ignoring those tags. Output Formatting Using the \Embera\Formatter object and the decorator pattern you are able to create templates with placeholders and Embera will fill them with the relevant information from the oembed response. A placeholder, in this case, is a word enclosed by {}, for example {title} which should give you the title of the media. You can use any word from the oembed response ({provider_name}, {thumbnail_url}, {html}, {type}, etc). The Formatter object has 2 more methods - setTemplate() and transform()     $embera = new \Embera\Embera();     $embera = new \Embera\Formatter($embera);      $embera->setTemplate('<div class=""myclass"">{provider_name}: {title} <p>{html}</p></div>');      echo $embera->transform(array('url1', 'url2', 'url3'));     // <div class=""myclass"">provider for url1: the title of url1 <p>embed code for url 1</p></div>     // <div class=""myclass"">provider for url2: the title of url2 <p>embed code for url 2</p></div>     // <div class=""myclass"">provider for url3: the title of url3 <p>embed code for url 3</p></div> You can also give a string with urls and they will be replaced by the given template     $embera = new \Embera\Embera();     $embera = new \Embera\Formatter($embera);      $embera->setTemplate('<div class=""oembed"">{html}</div>');      echo $embera->transform('Hey checkout this video http://url.com/video/id');     // hey checkout this video <div class=""oembed"">embed code for url.com/video/id</div> If you like you can use a shorter syntax, just by passing a string or array as a second parameter to the setTemplate method     $embera = new \Embera\Formatter(new \Embera\Embera());     echo $embera->setTemplate('<div class=""oembed"">{html}</div>', array('url1.com', 'url2.com', 'url3.com')); Adding Custom Providers Lets say you have a private Oembed Provider and you want to manage it with Embera. Well you can do it, first you have to create a new class that extends the \Embera\Adapters\Service class. You can use one of the included providers in the /Embera/Providers directory to get an idea of what it needs to have. After that you need to use the addProvider() method. This method requires that you specify the host of your service, the class you created and optionally you can pass a third parameter, an array with data that should be used on the query string to your Oembed Provider, for example an API key.     /**  * A very basic custom Service  */     class CustomService extends \Embera\Adapters\Service     {         protected $apiUrl = 'http://custom-service.com/oembed.json';         public function validateUrl(){ return preg_match('~customservice\.com/([0-9]+)~i', $this->url); }     }      $urls = array(         'http://customservice.com/9879837498',         'http://www.customservice.com/98756478',         'http://customservice.com/9879837498/'     );      $embera = new \Embera\Embera();     $embera->addProvider('customservice.com', 'CustomService', array('api_key' => '********'));     $response = $embera->getUrlInfo($urls);      print_r($response); However, If the provider is public, the best way to deal with it is to open a bug report right here on github so I can create a class for the service and everyone benefits from it. Important: xml responses are not supported by Embera at the moment! Use JSON instead. Adding custom query string parameters to a service Some Oembed providers support custom parameters. For example Twitter allows the align parameter, which applies alignment styles to the html embed code. Most of the providers have documentation available where you can search for possible parameters. Use the config array:     $config = array(         'custom_params' => array(             'Twitter' => array('align' => 'center', 'hide_media' => 1)         )     );      $embera = new \Embera\Embera($config); In this case Im passing the align and hide_media parameters to the twitter service. As a general rule, you just have to specify the Name of the service as a key and an associative array with the parameters. Modifying attributes of fake/offline responses By default services with offline support have a width of 420px and height of 315px. You can modify this attributes via the config array:     $config = array(         'fake' => array(             'width' => 800,             'height' => 300         )     );      $embera = new \Embera\Embera($config); Passing Options to the HttpRequest Class The \Embera\HttpRequest class is a simple wrapper for curl and file_get_contents (when the allow_url_fopen directive is enabled). You can pass options for each one of them when needed     $config = array(         'http' => array(             'curl' => array(                 CURLOPT_CONNECTTIMEOUT => 1000 // Connect timeout for curl             ),             'fopen' => array(                 'header' => ""Content-Type: plain/text"", // Send a header with file_get_contents/fopen             )         )     );      $embera = new \Embera\Embera($config); License MIT For the full copyright and license information, please view the LICENSE file. Author Hi! I'm Michael Pratt and I'm from Colombia! My Personal Website is in spanish. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mpratt/Embera"	"An Oembed consumer library."	"true"
"Miscellaneous"	"Essence"	"https://github.com/essence/essence"	"A library for extracting web media."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"525"	"28"	"51"	"GitHub - essence/essence: Extracts information about web pages, like youtube videos, twitter statuses or blog articles. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 525 Fork 51 essence/essence Code Issues 11 Pull requests 0 Wiki Pulse Graphs Extracts information about web pages, like youtube videos, twitter statuses or blog articles. http://essence.github.io/essence 692 commits 4 branches 24 releases Fetching contributors PHP 96.0% HTML 4.0% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0 gh-pages master version-3.0.0 Nothing to show v2.5.2 v2.5.1 v2.5.0 v2.4.0 v2.3.0 v2.2.1 v2.2.0 v2.1.0 v2.0.1 v2.0.0 v1.4.1 v1.4.0 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.0 v1.1.0 v1.0.1 v1.0.0 3.1.1 3.1.0 3.0.0 2.5.2 Nothing to show New pull request Latest commit 4412ebd Feb 14, 2016 felixgirault Fixed user agent setting - fixes #119 Permalink Failed to load latest commit information. cli Doc Jun 15, 2015 lib/Essence Fixed user agent setting - fixes #119 Feb 14, 2016 tests Added test for 500px Oct 26, 2015 .gitignore Using composer autoload Jun 24, 2014 .scrutinizer.yml Analysing only relevant code Aug 25, 2014 .travis.yml Testing on PHP 5.5 Oct 3, 2015 LICENSE.txt Updated license Jul 5, 2014 README.md Documentation fix Nov 4, 2015 composer.json Removed explicit version Oct 28, 2015 phpunit.e2e.xml Removed deprecated configuration setting Oct 27, 2015 phpunit.xml Removed deprecated configuration setting Oct 27, 2015 README.md Essence is a simple PHP library to extract media information from websites, like youtube videos, twitter statuses or blog articles. If you were already using Essence 2.x.x, you should take a look at the migration guide. Installation composer require essence/essence  Example Essence is designed to be really easy to use. Using the main class of the library, you can retrieve information in just those few lines: $Essence = new Essence\Essence(); $Media = $Essence->extract('http://www.youtube.com/watch?v=39e3KYAmXK4');  if ($Media) {     // That's all, you're good to go ! } Then, just do anything you want with the data: <article>     <header>         <h1><?php echo $Media->title; ?></h1>         <p>By <?php echo $Media->authorName; ?></p>     </header>      <div class=""player"">         <?php echo $Media->html; ?>     </div> </article> What you get Using Essence, you will mainly interact with Media objects. Media is a simple container for all the information that are fetched from an URL. Here are the default properties it provides: type version url title description authorName authorUrl providerName providerUrl cacheAge thumbnailUrl thumbnailWidth thumbnailHeight html width height These properties were gathered from the OEmbed and OpenGraph specifications, and merged together in a united interface. Based on such standards, these properties should be a solid starting point. However, ""non-standard"" properties can and will also be setted. Here is how you can manipulate the Media properties: // through dedicated methods if (!$Media->has('foo')) {     $Media->set('foo', 'bar'); }  $value = $Media->get('foo');  // or directly like a class attribute $Media->customValue = 12; Note that Essence will always try to fill the html property when it is not available. Advanced usage The Essence class provides some useful utility functions to ensure you will get some information. Extracting URLs The crawl() method lets you crawl extractable URLs from a web page. For example, here is how you could get the URL of all videos in a blog post: $urls = $Essence->crawlUrl('http://www.blog.com/article'); array(2) {     [0] => 'http://www.youtube.com/watch?v=123456',     [1] => 'http://www.dailymotion.com/video/a1b2c_lolcat-fun' }  You can then get information from all the extracted URLs: $medias = $Essence->extractAll($urls); array(2) {     ['http://www.youtube.com/watch?v=123456'] => object(Media) {}     ['http://www.dailymotion.com/video/a1b2c_lolcat-fun'] => object(Media) {} }  Replacing URLs in text Essence can replace any extractable URL in a text by information about it. By default, any URL will be replaced by the html property of the found Media. echo $Essence->replace('Look at this: http://www.youtube.com/watch?v=123456'); Look at this: <iframe src=""http://www.youtube.com/embed/123456""></iframe> But you can do more by passing a callback to control which information will replace the URL: echo $Essence->replace($text, function($Media) {     return <<<HTML  <p class=""title"">$Media->title</p>  <div class=""player"">$Media->html</div> HTML; }); Look at this: <p class=""title"">Video title</p> <div class=""player"">     <iframe src=""http://www.youtube.com/embed/123456""></iframe> <div> This makes it easy to build rich templates or even to integrate a templating engine: echo $Essence->replace($text, function($Media) use ($TwigTemplate) {     return $TwigTemplate->render($Media->properties()); }); Configuring providers It is possible to pass some options to the providers. For example, OEmbed providers accepts the maxwidth and maxheight parameters, as specified in the OEmbed spec. $options = [     'maxwidth' => 800,     'maxheight' => 600 ];  $Media = $Essence->extract($url, $options); $medias = $Essence->extractAll($urls, $options); $text = $Essence->replace($text, null, $options); Other providers will just ignore the options they don't handle. Configuration Essence currently supports 68 specialized providers: 23hq                Deviantart          Kickstarter         Sketchfab Animoto             Dipity              Meetup              SlideShare Aol                 Dotsub              Mixcloud            SoundCloud App.net             Edocr               Mobypicture         SpeakerDeck Bambuser            Flickr              Nfb                 Spotify Bandcamp            FunnyOrDie          Official.fm         Ted Blip.tv             Gist                Polldaddy           Twitter Cacoo               Gmep                PollEverywhere      Ustream CanalPlus           HowCast             Prezi               Vhx Chirb.it            Huffduffer          Qik                 Viddler CircuitLab          Hulu                Rdio                Videojug Clikthrough         Ifixit              Revision3           Vimeo CollegeHumor        Ifttt               Roomshare           Vine Coub                Imgur               Sapo                Wistia CrowdRanking        Instagram           Screenr             WordPress DailyMile           Jest                Scribd              Yfrog Dailymotion         Justin.tv           Shoudio             Youtube Plus the OEmbed and OpenGraph providers, which can be used to extract any URL. You can configure these providers on instanciation: $Essence = new Essence\Essence([     // the SoundCloud provider is an OEmbed provider with a specific endpoint     'SoundCloud' => Essence\Di\Container::unique(function($C) {         return $C->get('OEmbedProvider')->setEndpoint(             'http://soundcloud.com/oembed?format=json&url=:url'         );     }),      'filters' => [         // the SoundCloud provider will be used for URLs that matches this pattern         'SoundCloud' => '~soundcloud\.com/[a-zA-Z0-9-_]+/[a-zA-Z0-9-]+~i'     ] ]); You can also disable the default ones: $Essence = new Essence\Essence([     'filters' => [         'SoundCloud' => false     ] ]); You will find the default configuration in the standard DI container of Essence (see the following part). Customization Almost everything in Essence can be configured through dependency injection. Under the hoods, the constructor uses a dependency injection container to return a fully configured instance of Essence. To customize the Essence behavior, the easiest way is to configure injection settings when building Essence: $Essence = new Essence\Essence([     // the container will return a unique instance of CustomHttpClient     // each time an HTTP client is needed     'Http' => Essence\Di\Container::unique(function() {         return new CustomHttpClient();     }) ]); The default injection settings are defined in the Standard container class. Try it out Once you've installed essence, you should try to run ./cli/essence.php in a terminal. This script allows you to test Essence quickly: # will fetch and print information about the video ./cli/essence.php extract http://www.youtube.com/watch?v=4S_NHY9c8uM  # will fetch and print all extractable URLs found at the given HTML page ./cli/essence.php crawl http://www.youtube.com/watch?v=4S_NHY9c8uM  Third-party libraries If you're interested in embedding videos, you should take a look at the Multiplayer lib. It allows you to build customizable embed codes painlessly: $Multiplayer = new Multiplayer\Multiplayer();  if ($Media->type === 'video') {     echo $Multiplayer->html($Media->url, [         'autoPlay' => true,         'highlightColor' => 'BADA55'     ]); } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/essence/essence"	"A library for extracting web media."	"true"
"Miscellaneous"	"Flux"	"https://github.com/selvinortiz/flux"	"A regular expression building library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"299"	"13"	"21"	"GitHub - selvinortiz/flux: Fluent regular expressions in PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 299 Fork 21 selvinortiz/flux Code Issues 1 Pull requests 0 Pulse Graphs Fluent regular expressions in PHP 27 commits 2 branches 4 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master Nothing to show v0.5.3 v0.5.2 v0.5.1 v0.5.0 Nothing to show New pull request Latest commit f980cf6 Dec 8, 2015 selvinortiz Merge pull request #12 from roxburghm/master … Fixed problem with zero min lengths being ignored Permalink Failed to load latest commit information. etc Flux 0.5.2 Aug 13, 2013 src/SelvinOrtiz/Utils/Flux Fixed problem with zero min lengths being ignored and added a test to… Dec 8, 2015 tests Fixed problem with zero min lengths being ignored and added a test to… Dec 8, 2015 .gitignore Updates ignore rules for PHPStorm and hidden files. Feb 17, 2015 .travis.yml UnitTest suite + TravisCI + Images status Jul 25, 2013 LICENSE [Issue #3] Flux 0.4.0 Jul 22, 2013 README.md Flux 0.5.2 Feb 17, 2015 composer.json Flux 0.5.0 (Beta) Jul 23, 2013 phpunit.xml Flux 0.5.2 Aug 13, 2013 README.md FLUX (Fluent Regex) 0.5.2 by Selvin Ortiz Description Fluent Regular Expressions in PHP inspired by and largely based on VerbalExpressions:JS by Jesse Luoto @see inspiration & credits below for more info. Requirements PHP 5.3 Composer Install Flux is available as a package via composer require: ""selvinortiz/flux"": ""dev-master"" autoload: require_once 'path/to/vendor/autoload.php' namespace: use SelvinOrtiz\Utils\Flux\Flux; instantiate: $flux = Flux::getInstance(); You can additionally clone/download this repo and do whatever you want: ) @Example This simple example illustrates the way you would use flux and it's fluent interface to build complex patterns. require_once realpath(__DIR__.'/../vendor/autoload.php');  use SelvinOrtiz\Utils\Flux\Flux; use SelvinOrtiz\Utils\Flux\Helper;  // The subject string (URL) $str    = 'http://www.selvinortiz.com';  // Building the pattern (Fluently) $flux   = Flux::getInstance()         ->startOfLine()         ->find('http')         ->maybe('s')         ->then('://')         ->maybe('www.')         ->anythingBut('.')         ->either('.co', '.com')         ->ignoreCase()         ->endOfLine();  // Output the Flux instance Helper::dump( $flux );  // Output the fluently built pattern (@see /src/SelvinOrtiz/Utils/Flux/Helper) Helper::msg( $flux ); // /^(http)(s)?(\:\/\/)(www\.)?([^\.]*)(.co|.com)$/i  // Inspect the results Helper::msg( $str ); Helper::msg( $flux->match( $str ) ? 'matched' : 'unmatched' ); Helper::msg( $flux->replace( 'https://$5$6', $str ) ); For other examples, please see the /etc directory. @Changelog 0.5.2 Adds length() method which adds or replaces the modifier used in the previous call Adds getLastSegmentKey() Adds the (empty) Factory class for optimized, often used patterns Fixes indentation and EOF on phpunit.xml Fixes comment typos on README and example files Pull Request #10 0.5.1 Adds getSegments() which was not included in 0.5.0 Issue #5 Adds removeSegment() which can be used in unit tests as well Adds lineBreak() and br() which matches a new line (DOS/Unix) Adds clear() which allows you to clear out the pattern and start from scratch Adds getPattern() which compiles the expression and returns it Adds `deprecation candidates as @todos Fixes mixed logic between add() and raw() Fixes implementation on the orTry() method Moves example in readme above changelog Improves unit tests 0.5.0 (Beta) Adds getSegments() to improve testability Issue #5 Adds composer package selvinortiz/flux Adds dev branch Adds contributing notes Adds install notes 0.4.5 Fixes internal namespace conflict Changes namespace from Sortiz\Tools to SelvinOrtiz\Utils\Flux Adds composer support Issue #3 Adds the addSeed() and removeSeed() methods Issue #4 Adds the getInstance() static method Adds FluxUrlExample.php, FluxDateExample.php, and FluxPhoneExample.php Adds getSeed() to get the seed without forcing __toString on the object Adds getSegment() to extract a segment (capturing group) from the pattern Implements unit tests (60% coverage) Issue #3 Implements Full PSR-2 Compliance (Tabs over Spaces) Enables the seed on match() and replace() Issue #4 Removes example.php and defines them elsewhere Moves examples into /etc and defines one example per file Other small fixes and additions 0.4.0 Adds Flux to the Sortiz\Tools namespace Implements PSR-2 Compliance (Tabs over Spaces) Updates version number on Flux and this readme file Updates the class instantiation with fully qualified class name on example.php Adds references to other repos that have ported flux Addresses concerns outlined in Issue #3 0.3.0 Improves documentation with phone/date examples Adds the letters() method Renames the numbers() method to digits() Adds support for quantifiers for digits() Adds ignoreCase() and promotes it above inAnyCase() Improves the documented API Thought hard about changing the name to FluentX any thoughts? 0.2.0 Adds the either( $option1, $option2 [, $option3 ...] ) method to handle OR cases Updates the fluent example in this readme file Adds the license 0.1.0 (Alpha) Initial preview release @Todo Add source code comments Add support for quantifiers Add language methods for more advanced use cases Add reference to repos that have ported Flux (*) Add license notes (*) Add contributing notes (*) Add credits (*) FLUX API The flux API was designed to give you a fluent chainable object to build patterns with. startOfLine() Adds a beginning of line ^ modifier endOfLine() Adds an end of line $ modifier find( $val ) & then( $val ) Allows you to augment the pattern with a required segment and it escapes regular expression characters maybe( $val ) Allows you to augment the pattern with an optional segment any( $val ) & anyOf( $val ) Allows you to create a set of characters to match anything() Adds a wild card (.*) segment to the pattern but it does not make dotAll() explicit anythingBut( $val ) Will match anything but the characters in $val which is opposite of any() and anyOf br() & lineBreak() Allows you to match a new line (DOS/Unix) tab() Adds a (\t) to the pattern which will match a tab word() Adds (\w+) to the pattern which will match a single word letters( $min=null, $max=null ) Only matches characters in the alphabet and uses $min and $max to create a quantifier digits( $mix=null, $max=null ) Only matches digits and uses $min and $max to create a quantifier like word() range( $from, $to [, $from, $to ...]) Allows you to create a range character class like a-z0-9 by calling range('a', 'z', 0, 9) orTry( $val='' ) Allows you to create OR cases (this)|(else) and retain the capturing order to use in replace() ignoreCase() & inAnyCase() Adds the i modifier to the pattern which will allow you to match in a case insensitive manner matchNewLine() & dotAll() Adds the s modifier to the pattern which will allow you to match a new line when using anything() multiline() Adds the m modifier to the pattern which will allow you to search across multiple lines oneLine() & searchOneLine() Removes the modifier added by multiline() if it was previously called match( $subject ) Simply takes your $subject in, compares it against the pattern, and returns whether a it matched or not replace( $replacement, $subject ) You can replace matched segments by using the $x format where x is the (int) position of the matched segment getPattern() Returns the compiled pattern which you can also get by using the flux instance in a context where __toString() will be called clear() Clears the created pattern along with the modifiers, prefixes, and suffixes Flux Elsewhere There is a straight port of Flux for NodeJS by James Brooks whom has also collaborated on this project. Feedback This is something that started as a weekend experiment but I would love to take it further so if you have any suggestions, please fire away! The best way to get in touch with me is via twitter @selvinortiz we'll take if from there :) Contributing Check for open issues or open a new issue for a feature request or a bug Fork this repo to start making your changes to the dev branch or branch off Write a test which shows that the bug was fixed or that the feature works as expected Send a pull request and bug me until I merge it or tell you no cigar; ) Inspiration & Credits This project is inspired and largely based on VerbalExpressions:JS by Jesse Luoto whom on July 20, 2013 started a weekend project that generated a lot of interest in the developer community and that project has proven to have a lot of potential. Flux is not a straight port of VerbalExpressions but if you're interested in a straight VerbalExpressions port for PHP you should checkout VerbalExpressions:PHP by Mark Wilson VerbalExpressions has also been ported to Ruby, Java, Groovy as of this update (July 25, 2013). For a little background as to why flux was created and why you should use it, please refer to Issue #7 for a discussion on that matter. MIT License Flux is released under the MIT license which pretty much means you can do with it as you please and I won't get mad because I'm that nice; ) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/selvinortiz/flux"	"A regular expression building library."	"true"
"Miscellaneous"	"Graphviz"	"https://github.com/alexandresalome/graphviz"	"A Graphviz library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"30"	"2"	"16"	"GitHub - alexandresalome/graphviz: graphviz Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 30 Fork 16 alexandresalome/graphviz Code Issues 0 Pull requests 0 Pulse Graphs graphviz 25 commits 1 branch 3 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.1.0 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit fc55ffa Jul 12, 2016 alexandresalome add a release date for 1.1.0 Permalink Failed to load latest commit information. samples add optional escape for labels + update docs + travis update Jul 9, 2016 src/Alom/Graphviz add edge methods Jul 11, 2016 tests/Alom/Graphviz/Tests add edge methods Jul 11, 2016 .gitignore Replaced tabs with spaces throughout the code. Nov 20, 2012 .travis.yml add optional escape for labels + update docs + travis update Jul 9, 2016 CHANGELOG.md add a release date for 1.1.0 Jul 12, 2016 CONTRIBUTORS.md add optional escape for labels + update docs + travis update Jul 9, 2016 LICENCE Initial commit Apr 29, 2012 README.md add edge methods Jul 11, 2016 composer.json remove branch alias Jul 9, 2016 phpunit.xml.dist Replaced tabs with spaces throughout the code. Nov 20, 2012 README.md Graphviz Graphviz generation for PHP View CHANGELOG View CONTRIBUTORS Installation Install the latest version with: composer require alom/graphviz Usage This library allow you to create Dot Graph with a PHP fluid interface: $graph = new Alom\Graphviz\Digraph('G'); $graph     ->subgraph('cluster_1')         ->attr('node', array('style' => 'filled', 'fillcolor' => 'blue'))         ->node('A')         ->node('B')         ->edge(array('b0', 'b1', 'b2', 'b3'))     ->end()     ->edge(array('A', 'B', 'C')) ; echo $graph->render(); Escaping of labels By default, labels will be escaped, so that your PHP string is represented ""as it is"" in the graph. If you don't want the label to be escaped, add set the special _escaped attribute to false: $graph = new Alom\Graphviz\Digraph('G'); $graph     ->node('my_table', array(         'label' => '<<table>...</table>>',         '_escaped' => false     )) Browsing the graph When you have created lot of subgraphs and nodes, it might be useful to be able to browse it using identifiers. For example, if you have the following graph: $graph = new Alom\Graphviz\Digraph('G'); $graph     ->subgraph('cluster_1')         ->node('A')         ->node('B')     ->end()     ->subgraph('cluster_2')         ->node('C')         ->node('D')     ->end()     ->edge(array('C', 'D')) ; You can do the following to access the nodes in the existing graph: $cluster = $graph->get('cluster_1'); $node = $graph->get('cluster_2')->get('D'); When you have a node or an edge, you can manipulate its attributes: # read a value echo $node->getAttribute('label', 'no label'); # second argument is default value  # write a value $node->attribute('label', 'new label'); On a graph, you can access or verify edge existence: $graph->hasEdge(array('A', 'B')); $graph->getEdge(array('C', 'D'));  Using cluster and record IDs If you create an edge from/to an ID inside a record, use an array instead of a string: $graph = new Alom\Graphviz\Digraph('G'); $graph     ->node('A', array('shape' => 'record', 'label' => '{ <1> Part 1 | <2> Part 2}'))     ->node('B')     ->edge(array('B', array('A', '1'))) ; As you can see in the example above, the edge is composed of two parts: 'B': a regular node array('A', '1'): targets the cell ""1"" inside the A node This method also work for getEdge, hasEdge and every edge-related method. Samples Take a look at examples located in samples folder: 00-readme.php: Example from graphviz README 01-basic.php: Basic styling of nodes 02-table.php: An example for HTML table escaping You can generate any of those graph by using the following commands: php samples/00-readme.php | dot -Tpdf -oout.pdf xdg-open out.pdf Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/alexandresalome/graphviz"	"A Graphviz library."	"true"
"Miscellaneous"	"Hprose-PHP"	"https://github.com/hprose/hprose-php"	"A very newbility RPC Library, support 25+ languages now."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"320"	"31"	"100"	"GitHub - hprose/hprose-php: Hprose for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 320 Fork 100 hprose/hprose-php Code Issues 0 Pull requests 0 Pulse Graphs Hprose for PHP 389 commits 1 branch 8 releases 6 contributors PHP 99.6% Shell 0.4% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.5.6 v1.5.5 v1.5.4 v1.5.3 v1.5.2 v1.5.1 v1.5.0 v1.4.0 Nothing to show New pull request Latest commit f866d05 Jul 16, 2016 andot Fixed memory leaks. Permalink Failed to load latest commit information. examples Added time push example. Jul 4, 2016 src Fixed memory leaks. Jul 16, 2016 tests Removed Hprose\Async Jul 8, 2016 .gitignore Update .gitignore Jul 10, 2016 .travis.yml Removed hhvm Support. Mar 30, 2016 LICENSE.md Update LICENSE.md Feb 6, 2016 README.md Added travis test Mar 26, 2016 README_zh_CN.md Added travis test Mar 26, 2016 composer.json Update Mar 26, 2016 install_ext.sh update install_ext.sh Mar 30, 2016 README.md Hprose for PHP Introduction Usage Server Client Exception Handling Introduction Hprose is a High Performance Remote Object Service Engine. It is a modern, lightweight, cross-language, cross-platform, object-oriented, high performance, remote dynamic communication middleware. It is not only easy to use, but powerful. You just need a little time to learn, then you can use it to easily construct cross language cross platform distributed application system. Hprose supports many programming languages, for example: AAuto Quicker ActionScript ASP C++ Dart Delphi/Free Pascal dotNET(C#, Visual Basic...) Golang Java JavaScript Node.js Objective-C Perl PHP Python Ruby ... Through Hprose, You can conveniently and efficiently intercommunicate between those programming languages. This project is the implementation of Hprose for PHP. Installation Download Source Code Download Link install by composer {     ""require"": {         ""hprose/hprose"": ""dev-master""     } } Usage Server Hprose for PHP is very easy to use. You can create a hprose server like this: <?php     require_once('Hprose.php');      function hello($name) {         return 'Hello ' . $name;     }      $server = new HproseHttpServer();     $server->addFunction('hello');     $server->start();  You can also use HproseSwooleServer to create a standalone hprose server: server.php <?php     require_once(""Hprose.php"");      function hello($name) {         return 'Hello ' . $name;     }      $server = new HproseSwooleServer('http://0.0.0.0:8080/');     $server->addFunction('hello');     $server->start(); then use command line to start it: php server.php To use HproseSwooleServer, you need install swoole first. The minimum version of swoole been supported is 1.7.16. HproseSwooleServer not only support creating http server，but also support create tcp, unix and websocket server. For examples: tcp_server.php <?php     require_once(""Hprose.php"");      function hello($name) {         return 'Hello ' . $name;     }      $server = new HproseSwooleServer('tcp://0.0.0.0:1234');     $server->addFunction('hello');     $server->start(); unix_server.php <?php     require_once(""Hprose.php"");      function hello($name) {         return 'Hello ' . $name;     }      $server = new HproseSwooleServer('unix:/tmp/my.sock');     $server->addFunction('hello');     $server->start(); websocket_server.php <?php     require_once(""Hprose.php"");      function hello($name) {         return 'Hello ' . $name;     }      $server = new HproseSwooleServer('ws://0.0.0.0:8000/');     $server->addFunction('hello');     $server->start(); The websocket server is also a http server. Client Then you can create a hprose client to invoke it like this: <?php     require_once(""Hprose.php"");     $client = new HproseHttpClient('http://127.0.0.1/server.php');     echo $client->hello('World'); Hprose also suplied HproseSwooleClient，it supports http，tcp and unix. For example: <?php     require_once(""Hprose.php"");     $client = new HproseSwooleClient('tcp://0.0.0.0:1234');     echo $client->hello('World'); ?> It also support asynchronous concurrency invoke. For example: <?php     require_once(""Hprose.php"");     $client = new HproseSwooleClient('tcp://0.0.0.0:1234');     $client->hello('World', function() {         echo ""ok\r\n"";     });     $client->hello('World 1', function($result) {         echo $result . ""\r\n"";     });     $client->hello('World 2', function($result, $args) {         echo $result . ""\r\n"";     });     $client->hello('World 3', function($result, $args, $error) {         echo $result . ""\r\n"";     }); ?> the callback function of asynchronous concurrency invoking supports 0 - 3 parameters: params comments result The result is the server returned, if no result, its value is null. arguments It is an array of arguments. if no argument, it is an empty array. error It is an object of Exception, if no error, its value is null. Exception Handling If an error occurred on the server, or your service function/method throw an exception. it will be sent to the client, and the client will throw it as an exception. You can use the try statement to catch it. No exception throwed on asynchonous invoking. The exception object will be passed to the callback function as the third argument. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hprose/hprose-php"	"A very newbility RPC Library, support 25+ languages now."	"true"
"Miscellaneous"	"JSON Lint"	"https://github.com/Seldaek/jsonlint"	"A JSON lint utility."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"201"	"16"	"30"	"GitHub - Seldaek/jsonlint: JSON Lint for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 201 Fork 30 Seldaek/jsonlint Code Issues 0 Pull requests 1 Pulse Graphs JSON Lint for PHP 85 commits 1 branch 9 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.4.0 1.3.1 1.3.0 1.2.0 1.1.2 1.1.1 1.1.0 1.0.1 1.0.0 Nothing to show New pull request Latest commit 42ae79e Nov 25, 2015 Seldaek Merge pull request #32 from DavidPrevot/help2man … Make option output help2man-compatible Permalink Failed to load latest commit information. bin Make option output help2man-compatible Nov 24, 2015 src/Seld/JsonLint Add DuplicateKeyException Nov 21, 2015 tests Add DuplicateKeyException Nov 21, 2015 .gitignore Ignore files Dec 13, 2011 .travis.yml Make php7 support official Mar 4, 2015 CHANGELOG.mdown Prepare release 1.4 Nov 21, 2015 LICENSE Add license & readme Dec 13, 2011 README.mdown Update readme/changelog Sep 5, 2014 composer.json Prepare release 1.4 Nov 21, 2015 phpunit.xml.dist Add lint method and custom exception Dec 13, 2011 README.mdown JSON Lint Usage use Seld\JsonLint\JsonParser;  $parser = new JsonParser();  // returns null if it's valid json, or a ParsingException object. $parser->lint($json);  // Call getMessage() on the exception object to get // a well formatted error message error like this  // Parse error on line 2: // ... ""key"": ""value"" ""numbers"": [1, 2, 3] // ----------------------^ // Expected one of: 'EOF', '}', ':', ',', ']'  // Call getDetails() on the exception to get more info.  // returns parsed json, like json_decode() does, but slower, throws // exceptions on failure. $parser->parse($json); Installation For a quick install with Composer use: $ composer require seld/jsonlint  JSON Lint can easily be used within another app if you have a PSR-4 autoloader, or it can be installed through Composer for use as a CLI util. Once installed via Composer you can run the following command to lint a json file or URL: $ bin/jsonlint file.json  Requirements PHP 5.3+ [optional] PHPUnit 3.5+ to execute the test suite (phpunit --version) Submitting bugs and feature requests Bugs and feature request are tracked on GitHub Author Jordi Boggiano - j.boggiano@seld.be - http://twitter.com/seldaek License JSON Lint is licensed under the MIT License - see the LICENSE file for details Acknowledgements This library is a port of the JavaScript jsonlint library. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Seldaek/jsonlint"	"A JSON lint utility."	"true"
"Miscellaneous"	"JSONPCallbackValidator"	"https://github.com/willdurand/JsonpCallbackValidator"	"A library for validating JSONP callbacks."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"37"	"5"	"5"	"GitHub - willdurand/JsonpCallbackValidator: JSONP callback validator. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 37 Fork 5 willdurand/JsonpCallbackValidator Code Issues 0 Pull requests 0 Pulse Graphs JSONP callback validator. 22 commits 1 branch 2 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.1.0 v1.0.0 Nothing to show New pull request Latest commit 5a8de44 Feb 25, 2016 willdurand Merge pull request #4 from stof/patch-1 … Improve the composer instructions in the readme Permalink Failed to load latest commit information. src Allows to call the `validate` method statically Jan 20, 2014 tests Allows to call the `validate` method statically Jan 20, 2014 .gitignore Initial commit Oct 17, 2013 .travis.yml Removed hhvm allow_failures as it works Feb 19, 2014 CONTRIBUTING.md Update README + Add LICENSE, CONTRIBUTING files Oct 17, 2013 LICENSE Update README + Add LICENSE, CONTRIBUTING files Oct 17, 2013 README.md Improve the composer instructions in the readme Feb 25, 2016 composer.json Try HHVM on Travis-CI Oct 25, 2013 phpunit.xml.dist Initial commit Oct 17, 2013 README.md JsonpCallbackValidator JsonpCallbackValidator allows you to validate a JSONP callback in order to prevent XSS attacks. Usage $validator = new \JsonpCallbackValidator();  $validator->validate('JSONP.callback'); // returns `true`  $validator->validate('(function xss(x){evil()})'); // returns `false` Or as a static method: \JsonpCallbackValidator::validate('JSONP.callback'); // returns `true`  \JsonpCallbackValidator::validate('(function xss(x){evil()})'); // returns `false` Installation The recommended way to install JsonpCallbackValidator is through Composer: $ composer require willdurand/jsonp-callback-validator Unit Tests Setup the test suite using Composer: $ composer install  Run it using PHPUnit: $ ./vendor/bin/phpunit  Contributing See CONTRIBUTING file. Credits Erik Eng (@ptz0n) for his Gist License JsonpCallbackValidator is released under the MIT License. See the bundled LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/willdurand/JsonpCallbackValidator"	"A library for validating JSONP callbacks."	"true"
"Miscellaneous"	"Jumper"	"https://github.com/kakawait/Jumper"	"A remote service executor library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"36"	"2"	"2"	"GitHub - kakawait/Jumper: PHP remote closure executor Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 36 Fork 2 kakawait/Jumper Code Issues 5 Pull requests 0 Pulse Graphs PHP remote closure executor 53 commits 1 branch 5 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.0.1 1.0.0 1.0.0-BETA2 1.0.0-BETA1 0.9.0 Nothing to show New pull request Latest commit c9e6387 Mar 21, 2014 kakawait Improve readme sample Permalink Failed to load latest commit information. demo #1 Stringifier unit test with small fixes for these stringifiers. Mis… Mar 2, 2014 src/Jumper Fix scrutinizer issues Mar 16, 2014 tests/unit SSH unit tests have been broken with the previous commit, fixes Mar 16, 2014 .gitignore Draft readme May 27, 2013 .scrutinizer.yml Add scrutinizer coverage instead of coverall. Scrutinizer does not ne… Mar 16, 2014 .travis.yml Add scrutinizer coverage instead of coverall. Scrutinizer does not ne… Mar 16, 2014 README.md Improve readme sample Mar 21, 2014 composer.json Update composer to handle dev dependencies fix #19 Mar 21, 2014 phpunit.xml.dist #13 add travis-ci conf Mar 1, 2014 README.md Jumper Allow you to execute PHP Closure in other distant computer via SSH and without client/server setup. Source computer dependency: PHP >= 5.3 (so might work on windows but untested) Target computer dependencies: PHP >= 5.3, SSHd <?php  require 'vendor/autoload.php';  $authentication = new \Jumper\Communicator\Authentication\Rsa('root', $_SERVER['HOME'] . '/.ssh/id_rsa'); $communicator = new \Jumper\Communicator\Ssh($authentication, array('host' => '127.0.0.1'));  $executor = new \Jumper\Executor($communicator, new Jumper\Stringifier\Native());  $array = array(2, 1, 4, 3); $rsortedArray = $executor->run(     function() use ($array) {         rsort($array);          return $array;     } );  var_dump($rsortedArray); // should print /* array(4) {  [0]=>  int(4)  [1]=>  int(3)  [2]=>  int(2)  [3]=>  int(1) } */ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kakawait/Jumper"	"A remote service executor library."	"true"
"Miscellaneous"	"LadyBug"	"https://github.com/raulfraile/Ladybug"	"A dumper library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"378"	"12"	"50"	"GitHub - raulfraile/ladybug: PHP 5.3+ Extensible Dumper Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 378 Fork 50 raulfraile/ladybug Code Issues 14 Pull requests 4 Pulse Graphs PHP 5.3+ Extensible Dumper 424 commits 3 branches 23 releases Fetching contributors PHP 84.3% HTML 15.2% CSS 0.5% PHP HTML CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.x master refactoring Nothing to show v1.0.13 v1.0.12 v1.0.11 v1.0.10 v1.0.9 v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v1.0.0-beta2 v1.0.0-beta1 v1.0.0-alpha4 v1.0.0-alpha3 v1.0.0-alpha2 v1.0.0-alpha1 v0.7 v0.6 v0.5 Nothing to show New pull request Latest commit 40a15f3 Dec 23, 2015 raulfraile Merge pull request #75 from jdeniau/master … Fixes #74 Permalink Failed to load latest commit information. doc Updated Composer installation instructions Oct 13, 2014 examples Improved doc in object type class Dec 18, 2013 src/Ladybug Fixes #74 Dec 23, 2015 tests fix tests for previous commit Dec 8, 2015 .gitignore External themes support Aug 24, 2013 .travis.yml fix tests for previous commit Dec 8, 2015 CHANGELOG.md Fixed tests Jun 28, 2012 CONTRIBUTING.md license and contributing files changes Jul 21, 2013 LICENSE [license] Updated license year Aug 21, 2014 README.md [readme] #54 Added drupal module to the docs Aug 20, 2014 composer.json suggestion for slightly different CI config Aug 23, 2014 phpunit.xml.dist Exclude generated container from coverage report Sep 9, 2013 README.md Ladybug: PHP 5.3+ Extensible Dumper Ladybug provides an easy and extensible var_dump / print_r replacement for PHP 5.3+ projects. Any PHP variable, object or resource can be dumped to beautiful representation: <?php $var = array(     array(         'name' => 'Raul',         'age' => 29     ),     array(         'name' => 'John',         'age' => 27     ) );  ladybug_dump($var) Documentation Examples. Usage. Installation. Extending. Reference. Tests. Support for other libraries/frameworks Symfony 2.x: LadybugBundle. Drupal 7x & 8.x: Ladybug module. Credits Raul Fraile (@raulfraile) All contributors License Ladybug is released under the MIT License. See the bundled LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/raulfraile/Ladybug"	"A dumper library."	"true"
"Miscellaneous"	"Lambda PHP"	"https://github.com/igorw/lambda-php"	"A Lambda calculus interpreter in PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"17"	"2"	"2"	"GitHub - igorw/lambda-php: Lambda calculus interpreter in PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 17 Fork 2 igorw/lambda-php Code Issues 0 Pull requests 0 Pulse Graphs Lambda calculus interpreter in PHP. 39 commits 1 branch 0 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit e43a3d3 May 24, 2014 igorw replace closure representation to use the actual word closure Permalink Failed to load latest commit information. doc add reduce forever logo Dec 30, 2013 examples fix 2014 example (was 1014) Jan 2, 2014 src replace closure representation to use the actual word closure May 24, 2014 .gitignore init Dec 14, 2013 LICENSE init Dec 14, 2013 README.md add reduce forever logo Dec 30, 2013 composer.json Add dumper, pretty-print expressions in raw mode Dec 28, 2013 composer.lock Add dumper, pretty-print expressions in raw mode Dec 28, 2013 repl.php single quotes Dec 28, 2013 README.md lambda-php Lambda calculus interpreter in PHP. Lambda calculus Lambda calculus is a very minimal programming language that was invented in 1936 by Alonzo Church. It is the functional equivalent of the Turing Machine. Lambda calculus has only three concepts: Function definitions, lexically scoped variables, function application. An example term would be the identity function: λx.x  The first part λx defines a function that takes an x, the . signifies that the part that follows is the function body. The body just returns x. In PHP, you would write the same thing as follows: function ($x) {     return $x; }  You can nest function definitions. Here is a function returning a function: λx.λy.x  And you can also apply a function to an argument, which just means calling the function. λf.λg.f g  Which is the short hand (left-associative) form of writing λf.λg.(f g)  Nested calls like: λf.λg.λh.f g h  Are interpreted as: λf.λg.λh.((f g) h)  If you want to change the grouping to be right-associative, you need to explicitly group them in parentheses: λf.λg.λh.(f (g h))  Interestingly, lambda calculus is turing complete. Using just these three concepts you can represent any computation. Check out the links at the bottom for more details on how to do stuff in lambda calculus. Interpreter This project consists of a lambda calculus expression parser using dissect, and an eval-apply interpreter based on Matt Might's implementation in scheme. The interpreter is call-by-value which means that recursive calls need to be wrapped in a function to prevent them from being evaluated eagerly. For examples of how to do numbers (church encoding), booleans, arithmetic, boolean logic, looping (recursion), etc. look at example.php. REPL This project ships with a read-eval-print-loop that you can use to evaluate lambda calculus expressions: $ php repl.php  By default, it is in int-mode, expecting the result of the expression to be a church-encoded number. Example: $ php repl.php i> λf.λx.f (f (f x)) 3  You can switch to bool-mode by sending the b command: $ php repl.php i> b b> λx.λy.x true  Or r for raw mode: $ php repl.php i> r r> λx.x λx.x  WIP A few things are still a work in progress: Krivine machine: This alternate interpreter would allow call-by-need and indexing into de-bruijn indices, which is needed by... Binary lambda calculus: Allows encoding lambda calculus programs in binary form which produces extremely small programs. This also defines an I/O mechanism. References Matt Might: 7 lines of code, 3 minutes Tom Stuart: Programming with Nothing Jean-Louis Krivine: A call-by-name lambda-calculus machine Rémi Douence, Pascal Fradet: The Next 700 Krivine Machines Xavier Leroy: The Zinc Experiment John Tromp: Binary Lambda Calculus and Combinatory Logic John Tromp: Binary Lambda Calculus interpreter for IOCCC Erkki Lindpere: Parsing Lambda Calculus in Scala Binary Lambda Calculus in Python Krivine Machine in Scheme Algorithmic Information Theory in Haskell Lambda Calculus - Wikipedia Binary Lambda Calculus - Wikipedia De Bruijn index - Wikipedia Thanks to @ympbyc @smdiehl Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/igorw/lambda-php"	"A Lambda calculus interpreter in PHP."	"true"
"Miscellaneous"	"LiteCQRS"	"https://github.com/beberlei/litecqrs-php"	"A CQRS (Command Query Responsibility Separation) library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"408"	"52"	"41"	"GitHub - beberlei/litecqrs-php: Small convention based CQRS library for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 52 Star 408 Fork 41 beberlei/litecqrs-php Code Issues 12 Pull requests 3 Pulse Graphs Small convention based CQRS library for PHP 279 commits 2 branches 5 releases 8 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.1 master Nothing to show v1.1-alpha2 v1.1-alpha1 v1.0 v1.0-alpha2 v1.0-alpha1 Nothing to show New pull request Latest commit 8e6ae64 Nov 29, 2013 beberlei Fix test after bugfix on AR Permalink Failed to load latest commit information. example Finalize example Nov 29, 2013 src/LiteCQRS Fix bug with reapplying events Nov 29, 2013 tests Fix test after bugfix on AR Nov 29, 2013 .gitignore Lite CQRS library init commit Aug 9, 2012 .travis.yml Update composer.json and travis not to run 5.3 anymore Nov 24, 2013 LICENSE Add MIT license Aug 12, 2012 README.md Rename LocatingEventBus => SynchronousInProcessEventBus Nov 28, 2013 UPGRADE.md Remove AggregateRootHandler for JMS Serializer, which broke stuff. Nov 8, 2013 composer.json Inline class Nov 28, 2013 composer.lock Inline class Nov 27, 2013 phpunit.xml.dist Add SerializerInterface and JMS Serializer implementation Aug 18, 2012 README.md LiteCQRS for PHP Small naming-convention based CQRS library for PHP (loosely based on LiteCQRS for C#) that relies on the MessageBus, Command, EventSourcing and Domain Event patterns. NOTE Use the 1.1 branch, as the dev-master is currently in heavy refactoring. Terminology CQS is Command-Query-Separation: A paradigm where read methods never change state and write methods never return data. Build on top, CQRS suggests the separation of read- from write-model and uses the DomainEvent pattern to notify the read model about changes in the write model. LiteCQRS uses the command pattern and a central message bus service that finds the corresponding handler to execute a command. A command is just a class with some properties describing it, it can optionally implement LiteCQRS\Command. During the execution of a command, domain events can be triggered. These are again just simple classes with some properties and they can optionally implement LiteCQRS\DomainEvent. An event queue knows what domain events have been triggered during a command and then publishes them to an event message bus, where many listeners can listen to them. Changes From 1.0 to 1.1 Extending LiteCQRS\Command and LiteCQRS\DomainEvent is NOT required anymore. In fact you can use any class as command or event. The naming conventions alone make sure command handlers and event listeners are detected. JMS Serializer Plugin cannot ""detach"" aggregate root properties that are part of an event that is serialized anymore. Putting related aggregate roots into an Event is therefore not supported anymore (and not a good idea even with JMS Serializer 0.9 anyways). Conventions All public methods of a command handler class are mapped to Commands ""Command Class Shortname"" => ""MethodName"" when the method and command class shortname match. Implementing an interface for the commands is NOT required (since 1.1) Domain Events are applied to Event Handlers ""Event Class Shortname"" => ""onEventClassShortname"". Only if this matches is an event listener registered. Domain Events are applied on Entities/Aggregate Roots ""Event Class Shortname"" => ""applyEventClassShortname"" You can optionally extend the DefaultDomainEvent which has a constructor that maps its array input to properties and throws an exception if an unknown property is passed. There is also a DefaultCommand with the same semantics as DefaultDomainEvent. Extending this is not required. Examples: HelloWorld\GreetingCommand maps to the greeting(GreetingCommand $command) method on the registered handler. HelloWorld\Commands\Greeting maps to the greeting(Greeting $command) method on the registered handler. HelloWorld\GreetedEvent is passed to all event handlers that have a method onGreeted(GreetedEvent $event). HelloWorld\Events\Greeted is passed to all event handlers that have a method onGreeted(Greeted $event). HelloWorld\GreetedEvent is delegated to applyGreeted($event) when created on the aggregate root Installation & Requirements Use the 1.1 branch, as the dev-master is currently in heavy refactoring. The core library has no dependencies on other libraries. Plugins have dependencies on their specific libraries. Install with Composer: {     ""require"": {         ""beberlei/lite-cqrs"": ""1.1""     } }  Workflow These are the steps that a command regularly takes through the LiteCQRS stack during execution: You push commands into a CommandBus. Commands are simple objects extending Command created by you. The CommandBus checks for a handler that can execute your command. Every command has exactly one handler. The command handler changes state of the domain model. It does that by creating events (that represent state change) and passing them to the AggregateRoot::apply() or DomainEventProvider::raise() method of your domain objects. When the command is completed, the command bus will check all objects in the identity map for events. All found events will be passed to the EventMessageBus#publish() method. The EventMessageBus dispatches all events to observing event handlers. Event Handlers can create new commands again using the CommandBus. Command and Event handler execution can be wrapped in handlers that manage transactions. Event handling is always triggered outside of any command transaction. If the command fails with any exception all events created by the command are forgotten/ignored. No event handlers will be triggered in this case. In the case of InMemory CommandBus and EventMessageBus LiteCQRS makes sure that the execution of command and event handlers is never nested, but in sequential linearized order. This prevents independent transactions for each command from affecting each other. Examples See examples/ for some examples: example1.php shows usage of the Command- and EventMessageBus with one domain object example2_event.php shows direct usage of the EventMessageBus inside a command example3_sequential_commands.php demonstrates how commands are processed sequentially. tictactoe.php implements a tic tac toe game with CQRS. SymfonyExample.md shows example1.php implemented within the scope of a Symfony2 project. Setup In Memory Command Handlers, no event publishing/observing <?php $userService = new UserService();  $commandBus = new DirectCommandBus() $commandBus->register('MyApp\ChangeEmailCommand', $userService); In Memory Commands and Events Handlers This uses LiteCQRS\EventProviderInterface instances to trigger domain events. <?php // 1. Setup the Library with InMemory Handlers $messageBus = new InMemoryEventMessageBus(); $identityMap = new SimpleIdentityMap(); $queue = new EventProviderQueue($identityMap); $commandBus = new DirectCommandBus(array(     new EventMessageHandlerFactory($messageBus, $queue) ));  // 2. Register a command service and an event handler $userService = new UserService($identityMap); $commandBus->register('MyApp\ChangeEmailCommand', $userService);  $someEventHandler = new MyEventHandler(); $messageBus->register($someEventHandler); In Memory Commands + Custom Event Queue LiteCQRS knows about triggered events by asking LiteCQRS\Bus\EventQueue. Provide your own implementation to be independent of your domain objects having to implement EventProviderInterface. <?php $messageBus = new InMemoryEventMessageBus(); $queue = new MyCustomEventQueue();  $commandBus = new DirectCommandBus(array(     new EventMessageHandlerFactory($messageBus, $queue) )); Usage To implement a Use Case of your application Create a command object that receives all the necessary input values. Use public properties and extend LiteCQRS\DefaultCommand to simplify. Add a new method with the name of the command to any of your services (command handler) Register the command handler to handle the given command on the CommandBus. Have your entities implement LiteCQRS\AggregateRoot or LiteCQRS\DomainEventProvider Use protected method raise(DomainEvent $event) or apply(DomainEvent $event)`` to attach events to your aggregate root objects. That is all there is for simple use-cases. If your command triggers events that listeners check for, you should: Create a domain specific event class. Use public properties to simplify. Create a event handler(s) or add method(s) to existing event handler(s). While it seems ""complicated"" to create commands and events for every use-case. These objects are really dumb and only contain public properties. Using your IDE or editor functionality you can easily generate them in no time. In turn, they will make your code very explicit. Difference between apply() and raise() There are two ways to publish events to the outside world. DomainEventProvider#raise(DomainEvent $event) is the simple one, it emits an event and does nothing more. AggregateRoot#apply(DomainEvent $event) requires you to add a method apply$eventName($event) that can be used to replay events on objects. This is used to replay an object from events. If you don't use event sourcing then you are fine just using raise() and ignoring apply() altogether. Failing Events The EventMessageBus prevents exceptions from bubbling up. To allow some debugging of failed event handler execution there is a special event ""EventExecutionFailed"" that you can listen to. You will get passed an instance of LiteCQRS\Bus\EventExecutionFailed with properties $exception, $service and $event to allow analysing failures in your application. Extension Points You should implement your own CommandBus or extend the existing to wire the whole process together exactly as you need it to work. Plugins Symfony Inside symfony you can use LiteCQRS by registering services with lite_cqrs.command_handler or the lite_cqrs.event_handler tag. These services are then autodiscovered for commands and events. Command- and Event-Handlers are lazily loaded from the Symfony Dependency Injection Container. To enable the bundle put the following in your Kernel: new \LiteCQRS\Plugin\SymfonyBundle\LiteCQRSBundle(), You can enable/disable the bundle by adding the following to your config.yml: lite_cqrs: ~  Please refer to the SymfonyExample.md document for a full demonstration of using LiteCQRS from within a Symfony2 project. Monolog A plugin that logs the execution of every command and handler using Monolog. It includes the type and name of the message, its parameters as json and if its execution succeeded or failed. The Monolog integration into Symfony registers a specific channel lite_cqrs which you can configure differently from the default channels in Symfony. See the Symfony cookbook for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/beberlei/litecqrs-php"	"A CQRS (Command Query Responsibility Separation) library."	"true"
"Miscellaneous"	"Metrics"	"https://github.com/beberlei/metrics"	"A simple metrics API library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"158"	"8"	"23"	"GitHub - beberlei/metrics: Simple library that abstracts different metrics collectors. I find this necessary to have a consistent and simple metrics (functional) API that doesn't cause vendor lock-in. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 158 Fork 23 beberlei/metrics Code Issues 1 Pull requests 2 Pulse Graphs Simple library that abstracts different metrics collectors. I find this necessary to have a consistent and simple metrics (functional) API that doesn't cause vendor lock-in. 88 commits 1 branch 9 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2.0.3 v2.0.2 v2.0.1 v2.0.0 v2.0.0-RC1 v1.1.2 v1.1.1 v1.1.0 v1.0 Nothing to show New pull request Latest commit 0810638 Dec 29, 2015 lyrixx minor #46 Word correction (armetiz) … This PR was merged into the 2.x-dev branch.  Discussion ----------  Word correction  I know.. This is a very important PR.  Commits -------  823daa6 Word correction Permalink Failed to load latest commit information. example Let's talk about Metrics 2.0 Jan 21, 2015 src/Beberlei Word correction Dec 29, 2015 .gitignore Let's talk about Metrics 2.0 Jan 21, 2015 .travis.yml Add InfluxDB adapter Jul 24, 2015 README.md feature #35 Add InfluxDB adapter (davidfuhr) Jul 24, 2015 UPGRADE-2.0.md Let's talk about Metrics 2.0 Jan 21, 2015 composer.json Add InfluxDB adapter Jul 24, 2015 phpunit.xml.dist Let's talk about Metrics 2.0 Jan 21, 2015 README.md Metrics Simple library that abstracts different metrics collectors. I find this necessary to have a consistent and simple metrics API that doesn't cause vendor lock-in. It also ships with a Symfony Bundle. This is not a library for displaying metrics. Currently supported backends: Doctrine DBAL Graphite InfluxDB Librato Logger (Psr\Log\LoggerInterface) Null (Dummy that does nothing) StatsD Zabbix Installation Using Composer: composer require beberlei/metrics API You can instantiate clients: <?php  $collector = \Beberlei\Metrics\Factory::create('statsd'); You can measure stats: <?php  $collector->increment('foo.bar'); $collector->decrement('foo.bar');  $start = microtime(true); $diff  = microtime(true) - $start; $collector->timing('foo.bar', $diff);  $value = 1234; $collector->measure('foo.bar', $value); Some backends defer sending and aggregate all information, make sure to call flush: <?php  $collector->flush(); Configuration <?php $statsd = \Beberlei\Metrics\Factory::create('statsd');  $zabbix = \Beberlei\Metrics\Factory::create('zabbix', array(     'hostname' => 'foo.beberlei.de',     'server'   => 'localhost',     'port'     => 10051, ));  $zabbixConfig = \Beberlei\Metrics\Factory::create('zabbix_file', array(     'hostname' => 'foo.beberlei.de',     'file'     => '/etc/zabbix/zabbix_agentd.conf' ));  $librato = \Beberlei\Metrics\Factory::create('librato', array(     'hostname' => 'foo.beberlei.de',     'username' => 'foo',     'password' => 'bar', ));  $null = \Beberlei\Metrics\Factory::create('null'); Symfony Bundle Integration Register Bundle into Kernel: <?php  class AppKernel extends Kernel {     public function registerBundles()     {         //..         $bundles[] = new \Beberlei\Bundle\MetricsBundle\BeberleiMetricsBundle();         //..     } } Do Configuration: # app/config/config.yml beberlei_metrics:     default: foo     collectors:         foo:             type: statsd         bar:             type: zabbix             prefix: foo.beberlei.de             host: localhost             port: 10051         baz:             type: zabbix_file             prefix: foo.beberlei.de             file: /etc/zabbix/zabbix_agentd.conf         librato:             type: librato             username: foo             password: bar         dbal:             type: doctrine_dbal             connection: metrics # using the connection named ""metrics""         monolog:             type: monolog  This adds collectors to the Metrics registry. The functions are automatically included in the Bundle class so that in your code you can just start using the convenient functions. Metrics are also added as services: <?php  $metrics = $container->get('beberlei_metrics.collector.foo'); and the default collector can be fetched: <?php  $metrics = $container->get('beberlei_metrics.collector'); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/beberlei/metrics"	"A simple metrics API library."	"true"
"Miscellaneous"	"noCAPTCHA"	"https://github.com/ARCANEDEV/noCAPTCHA"	"Helper for Google's noCAPTCHA (reCAPTCHA)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"94"	"12"	"12"	"GitHub - ARCANEDEV/noCAPTCHA: Helper for Google's new noCAPTCHA (reCAPTCHA) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 94 Fork 12 ARCANEDEV/noCAPTCHA Code Issues 2 Pull requests 0 Pulse Graphs 🛂 Helper for Google's new noCAPTCHA (reCAPTCHA) 162 commits 3 branches 25 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags laravel-4.2 master v2 Nothing to show 3.0.1 3.0.0 2.3.0 2.2.0 2.1.7 2.1.6 2.1.5 2.1.0 2.0.7 2.0.5 2.0.4 2.0.3 2.0.1 2.0.0 1.2.7 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.1.3 1.1.1 1.1.0 1.0.0 Nothing to show New pull request Latest commit cf06f88 May 30, 2016 arcanedev-maroc Merge pull request #37 from ARCANEDEV/refactoring … Refactoring Permalink Failed to load latest commit information. _docs Updating Usage documentation May 30, 2016 config Updating config file Apr 18, 2016 examples Updating the examples May 30, 2016 src Refactoring May 30, 2016 tests Fixing the conflict between the attribute name and response name May 30, 2016 .editorconfig Adding the .editorconfig file Dec 22, 2015 .gitattributes Adding _docs folder to .gitattributes May 30, 2016 .gitignore Adding laravel 5.1 support Jul 23, 2015 .scrutinizer.yml Updating Travis CI & Scrutinizer config files Dec 31, 2015 .travis.yml Updating Travis CI config file Mar 20, 2016 CONTRIBUTING.md Adding CONTRIBUTING.md Oct 18, 2015 LICENSE.md Updating LICENSE.md Apr 18, 2016 README.md Updating docs Apr 18, 2016 composer.json Updating composer dependencies Jan 23, 2016 phpunit.xml Adding newline Oct 18, 2015 README.md noCAPTCHA (new reCAPTCHA) By ARCANEDEV© What is reCAPTCHA? reCAPTCHA is a free service that protects your site from spam and abuse. It uses advanced risk analysis engine to tell humans and bots apart. With the new API, a significant number of your valid human users will pass the reCAPTCHA challenge without having to solve a CAPTCHA. reCAPTCHA comes in the form of a widget that you can easily add to your blog, forum, registration form, etc. Google RECAPTCHA Table of contents Requirements Version Compatibility Installation and Setup Configuration Usage Extras FAQ DONE Documentation Examples More tests and code coverage PSR-7 Support (ServerRequest verification) Laravel Supported (v5.2) Laravel Supported (v5.1) Laravel Supported (v5.0) Laravel Supported (v4.2) TODOS What else ? Contribution Any ideas are welcome. Feel free to submit any issues or pull requests, please check the contribution guidelines. Security If you discover any security related issues, please email arcanedev.maroc@gmail.com instead of using the issue tracker. Credits ARCANEDEV All Contributors Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ARCANEDEV/noCAPTCHA"	"Helper for Google's noCAPTCHA (reCAPTCHA)."	"true"
"Miscellaneous"	"Nmap"	"https://github.com/willdurand/nmap"	"A PHP wrapper around."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"53"	"9"	"19"	"GitHub - willdurand/nmap: nmap is a PHP wrapper for Nmap. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 53 Fork 19 willdurand/nmap Code Issues 3 Pull requests 2 Pulse Graphs nmap is a PHP wrapper for Nmap. 38 commits 1 branch 5 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.3.0 v0.2.0 v0.1.0 v0.0.2 v0.0.1 Nothing to show New pull request Latest commit 0ad808a Oct 14, 2015 willdurand Merge pull request #13 from mtdavidson/feature/resolveFailedToExecute… … …NmapIssue  Resolve issue #11 prevent return of -1 ( 255 ) code Permalink Failed to load latest commit information. src/Nmap Resolve issue #11 prevent return of -1 ( 255 ) code Oct 13, 2015 tests Service info: Product & version Mar 24, 2015 .gitignore gitignore phpunit binary Nov 6, 2013 .travis.yml update travis-ci config Aug 8, 2014 LICENSE Add LICENSE Sep 23, 2013 README.md Update README.md. Nov 8, 2013 composer.json Better composer.json Sep 23, 2013 phpunit.xml.dist Initial commit Sep 23, 2013 README.md nmap nmap is a PHP wrapper for Nmap, a free security scanner for network exploration. Usage $hosts = Nmap::create()->scan([ 'williamdurand.fr' ]);  $ports = $hosts->getOpenPorts(); You can specify the ports you want to scan: $nmap = new Nmap();  $nmap->scan([ 'williamdurand.fr' ], [ 21, 22, 80 ]); OS detection and Service Info are disabled by default, if you want to enable them, use the enableOsDetection() and/or enableServiceInfo() methods: $nmap     ->enableOsDetection()     ->scan([ 'williamdurand.fr' ]);  $nmap     ->enableServiceInfo()     ->scan([ 'williamdurand.fr' ]);  // Fluent interface! $nmap     ->enableOsDetection()     ->enableServiceInfo()     ->scan([ 'williamdurand.fr' ]); Turn the verbose mode by using the enableVerbose() method: $nmap     ->enableVerbose()     ->scan([ 'williamdurand.fr' ]); For some reasons, you might want to disable port scan, that is why nmap provides a disablePortScan() method: $nmap     ->disablePortScan()     ->scan([ 'williamdurand.fr' ]); You can also disable the reverse DNS resolution with disableReverseDNS(): $nmap     ->disableReverseDNS()     ->scan([ 'williamdurand.fr' ]); Installation The recommended way to install nmap is through Composer: {     ""require"": {         ""willdurand/nmap"": ""@stable""     } } Protip: you should browse the willdurand/nmap page to choose a stable version to use, avoid the @stable meta constraint. License nmap is released under the MIT License. See the bundled LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/willdurand/nmap"	"A PHP wrapper around."	"true"
"Miscellaneous"	"Nmap"	"https://nmap.org/"	"A PHP wrapper around."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Nmap: the Network Mapper - Free Security Scanner Nmap Security Scanner Intro Ref Guide Install Guide Download Changelog Book Docs Security Lists Nmap Announce Nmap Dev Bugtraq Full Disclosure Pen Test Basics More Security Tools Password audit Sniffers Vuln scanners Web scanners Wireless Exploitation Packet crafters More Site News Advertising About/Contact Sponsors: Intro Reference Guide Book Install Guide Download Changelog Zenmap GUI Docs Bug Reports OS Detection Propaganda Related Projects In the Movies In the News News Nmap 7.12 is now available! [change log | download] Nmap 7 is now available! [release notes | download] We're pleased to release our new and Improved Icons of the Web project—a 5-gigapixel interactive collage of the top million sites on the Internet! Nmap has been discovered in two new movies! It's used to hack Matt Damon's brain in Elysium and also to launch nuclear missiles in G.I. Joe: Retaliation! We're delighted to announce Nmap 6.40 with 14 new NSE scripts, hundreds of new OS and version detection signatures, and many great new features! [Announcement/Details], [Download Site] We just released Nmap 6.25 with 85 new NSE scripts, performance improvements, better OS/version detection, and more! [Announcement/Details], [Download Site] Any release as big as Nmap 6 is bound to uncover a few bugs. We've now fixed them with Nmap 6.01! Nmap 6 is now available! [release notes | download] The security community has spoken! 3,000 of you shared favorite security tools for our relaunched SecTools.Org. It is sort of like Yelp for security tools. Are you familiar with all of the 49 new tools in this edition? Nmap 5.50 Released: Now with Gopher protocol support! Our first stable release in a year includes 177 NSE scripts, 2,982 OS fingerprints, and 7,319 version detection signatures. Release focuses were the Nmap Scripting Engine, performance, Zenmap GUI, and the Nping packet analysis tool. [Download page | Release notes] Those who missed Defcon can now watch Fyodor and David Fifield demonstrate the power of the Nmap Scripting Engine. They give an overview of NSE, use it to explore Microsoft's global network, write an NSE script from scratch, and hack a webcam--all in 38 minutes! (Presentation video) Icons of the Web: explore favicons for the top million web sites with our new poster and online viewer. We're delighted to announce the immediate, free availability of the Nmap Security Scanner version 5.00. Don't miss the top 5 improvements in Nmap 5. After years of effort, we are delighted to release Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning! We now have an active Nmap Facebook page and Twitter feed to augment the mailing lists. All of these options offer RSS feeds as well. Introduction Nmap (""Network Mapper"") is a free and open source (license) utility for network discovery and security auditing. Many systems and network administrators also find it useful for tasks such as network inventory, managing service upgrade schedules, and monitoring host or service uptime. Nmap uses raw IP packets in novel ways to determine what hosts are available on the network, what services (application name and version) those hosts are offering, what operating systems (and OS versions) they are running, what type of packet filters/firewalls are in use, and dozens of other characteristics. It was designed to rapidly scan large networks, but works fine against single hosts. Nmap runs on all major computer operating systems, and official binary packages are available for Linux, Windows, and Mac OS X. In addition to the classic command-line Nmap executable, the Nmap suite includes an advanced GUI and results viewer (Zenmap), a flexible data transfer, redirection, and debugging tool (Ncat), a utility for comparing scan results (Ndiff), and a packet generation and response analysis tool (Nping). Nmap was named “Security Product of the Year” by Linux Journal, Info World, LinuxQuestions.Org, and Codetalker Digest. It was even featured in twelve movies, including The Matrix Reloaded, Die Hard 4, Girl With the Dragon Tattoo, and The Bourne Ultimatum. Nmap is ... Nmap Security Port Scanner Flexible: Supports dozens of advanced techniques for mapping out networks filled with IP filters, firewalls, routers, and other obstacles. This includes many port scanning mechanisms (both TCP & UDP), OS detection, version detection, ping sweeps, and more. See the documentation page. Powerful: Nmap has been used to scan huge networks of literally hundreds of thousands of machines. Portable: Most operating systems are supported, including Linux, Microsoft Windows, FreeBSD, OpenBSD, Solaris, IRIX, Mac OS X, HP-UX, NetBSD, Sun OS, Amiga, and more. Easy: While Nmap offers a rich set of advanced features for power users, you can start out as simply as ""nmap -v -A targethost"". Both traditional command line and graphical (GUI) versions are available to suit your preference. Binaries are available for those who do not wish to compile Nmap from source. Free: The primary goals of the Nmap Project is to help make the Internet a little more secure and to provide administrators/auditors/hackers with an advanced tool for exploring their networks. Nmap is available for free download, and also comes with full source code that you may modify and redistribute under the terms of the license. Well Documented: Significant effort has been put into comprehensive and up-to-date man pages, whitepapers, tutorials, and even a whole book! Find them in multiple languages here. Supported: While Nmap comes with no warranty, it is well supported by a vibrant community of developers and users. Most of this interaction occurs on the Nmap mailing lists. Most bug reports and questions should be sent to the nmap-dev list, but only after you read the guidelines. We recommend that all users subscribe to the low-traffic nmap-hackers announcement list. You can also find Nmap on Facebook and Twitter. For real-time chat, join the #nmap channel on Freenode or EFNet. Acclaimed: Nmap has won numerous awards, including ""Information Security Product of the Year"" by Linux Journal, Info World and Codetalker Digest. It has been featured in hundreds of magazine articles, several movies, dozens of books, and one comic book series. Visit the press page for further details. Popular: Thousands of people download Nmap every day, and it is included with many operating systems (Redhat Linux, Debian Linux, Gentoo, FreeBSD, OpenBSD, etc). It is among the top ten (out of 30,000) programs at the Freshmeat.Net repository. This is important because it lends Nmap its vibrant development and user support communities. Communication Nmap users are encouraged to subscribe to the Nmap-hackers mailing list. It is a low volume (3 posts in 2013), moderated list for the most important announcements about Nmap, Insecure.org, and related projects. You can join more than 111,000 current subscribers by submitting your email address here: (or subscribe with custom options from the Nmap-hackers list info page) We also have a development list for more hardcore members (especially programmers) who are interested in helping the project by helping with coding, testing, feature ideas, etc. New (test/beta) versions of Nmap are sometimes released here prior to general availability for QA purposes. You can subscribe at the Nmap-dev list info page. Both lists are archived (along with many other security lists) at Seclists.org. Though it isn't nearly as active as the mailing lists, the official IRC channel is #nmap on Freenode (irc.freenode.net). Nmap Site Navigation Intro Reference Guide Book Install Guide Download Changelog Zenmap GUI Docs Bug Reports OS Detection Propaganda Related Projects In the Movies In the News [ Nmap | Sec Tools | Mailing Lists | Site News | About/Contact | Advertising | Privacy ]"	"null"	"null"	"A PHP wrapper around."	"true"
"Miscellaneous"	"Opengraph"	"https://github.com/euskadi31/Opengraph"	"An opengraph library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"73"	"7"	"14"	"GitHub - euskadi31/Opengraph: A PHP 5.3+ framework for OpenGraph Protocol Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 73 Fork 14 euskadi31/Opengraph Code Issues 0 Pull requests 2 Pulse Graphs A PHP 5.3+ framework for OpenGraph Protocol 50 commits 1 branch 1 release 4 contributors PHP 89.7% HTML 10.3% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.0 Nothing to show New pull request Latest commit 971fc79 Oct 12, 2015 euskadi31 Merge pull request #5 from samward1985/default_values … Fallback Title and Description values Permalink Failed to load latest commit information. Tests/Units Add unit tests for non-og data Mar 18, 2015 demo change library to src and add composer.json Jun 3, 2012 src/Opengraph Merge pull request #5 from samward1985/default_values Oct 12, 2015 .gitignore Remove mageekguy.atoum.phar Jul 22, 2012 .travis.yml Add new php version for tests on Travis-CI Sep 30, 2015 LICENSE Add license file Jan 16, 2015 README.markdown Change test command and atoum url May 6, 2013 composer.json Update composer.json Nov 26, 2012 README.markdown Opengraph Test with Atoum cd Opengraph/ curl -s https://getcomposer.org/installer | php php composer.phar install --dev ./vendor/atoum/atoum/bin/atoum --glob Tests/Units/  Writer <?php namespace Application;  require_once __DIR__ . '/../src/Opengraph/Meta.php'; require_once __DIR__ . '/../src/Opengraph/Opengraph.php'; require_once __DIR__ . '/../src/Opengraph/Writer.php';  use Opengraph;  $writer = new Opengraph\Writer(); $writer->append(Opengraph\Writer::OG_TITLE, 'The Rock'); $writer->append(Opengraph\Writer::OG_TYPE, Opengraph\Writer::TYPE_VIDEO_MOVIE); $writer->append(Opengraph\Writer::OG_URL, 'http://www.imdb.com/title/tt0117500/'); $writer->append(Opengraph\Writer::OG_IMAGE, 'http://ia.media-imdb.com/images/rock.jpg');  echo $writer->render() . PHP_EOL;  ?> Output     <meta property=""og:title"" content=""The Rock"" />     <meta property=""og:type"" content=""video.movie"" />     <meta property=""og:url"" content=""http://www.imdb.com/title/tt0117500/"" />     <meta property=""og:image"" content=""http://ia.media-imdb.com/images/rock.jpg"" /> Reader <?php namespace Application;  require_once __DIR__ . '/../src/Opengraph/Meta.php'; require_once __DIR__ . '/../src/Opengraph/Opengraph.php'; require_once __DIR__ . '/../src/Opengraph/Reader.php';  use Opengraph;  $reader = new Opengraph\Reader(); $reader->parse(file_get_contents('http://www.imdb.com/title/tt0117500/')); print_r($reader->getArrayCopy());  ?> Output Array (     [og:url] => http://www.imdb.com/title/tt0117500/     [og:title] => Rock (1996)     [og:type] => video.movie     [og:image] => Array         (             [0] => Array                 (                     [og:image:url] => http://ia.media-imdb.com/images/M/MV5BMTM3MTczOTM1OF5BMl5BanBnXkFtZTYwMjc1NDA5._V1._SX98_SY140_.jpg                 )          )      [og:site_name] => IMDb     [fb:app_id] => 115109575169727 )  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/euskadi31/Opengraph"	"An opengraph library."	"true"
"Miscellaneous"	"Pagerfanta"	"https://github.com/whiteoctober/Pagerfanta"	"A pagination library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"574"	"42"	"134"	"GitHub - whiteoctober/Pagerfanta: Pagination for PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 42 Star 574 Fork 134 whiteoctober/Pagerfanta Code Issues 15 Pull requests 23 Pulse Graphs Pagination for PHP. 282 commits 1 branch 4 releases 47 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.3 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 63729ff May 26, 2016 olorton Merge pull request #207 from mlocati/patch-1 … Exclude development stuff from repository autogenerated ZIP archives Permalink Failed to load latest commit information. src/Pagerfanta changed type hint Nov 20, 2014 tests Implement Elastica pagination support Oct 6, 2014 .gitattributes Exclude development stuff from repository autogenerated ZIP archives May 20, 2016 .gitignore removed idea from gitignore file Jun 1, 2014 .travis.yml Removed the dev requirement of doctrine/mongodb-odm Oct 5, 2014 CHANGELOG.md Add suppport for paginator output walkers mode Mar 12, 2014 LICENSE importing Pagerfanta! Apr 28, 2011 README.md Add Elastica example to readme Oct 6, 2014 composer.json Implement Elastica pagination support Oct 5, 2014 phpunit.xml.dist refactored many things Mar 31, 2013 README.md Pagerfanta Pagination for PHP 5.3 Usage <?php  use Pagerfanta\Adapter\ArrayAdapter; use Pagerfanta\Pagerfanta;  $adapter = new ArrayAdapter($array); $pagerfanta = new Pagerfanta($adapter);  $pagerfanta->setMaxPerPage($maxPerPage); // 10 by default $maxPerPage = $pagerfanta->getMaxPerPage();  $pagerfanta->setCurrentPage($currentPage); // 1 by default $currentPage = $pagerfanta->getCurrentPage();  $nbResults = $pagerfanta->getNbResults(); $currentPageResults = $pagerfanta->getCurrentPageResults();  $pagerfanta->getNbPages();  $pagerfanta->haveToPaginate(); // whether the number of results if higher than the max per page  $pagerfanta->hasPreviousPage(); $pagerfanta->getPreviousPage(); $pagerfanta->hasNextPage(); $pagerfanta->getNextPage(); The ->setMaxPerPage() and ->setCurrentPage() methods implement a fluent interface: <?php  $pagerfanta     ->setMaxPerPage($maxPerPage)     ->setCurrentPage($currentPage); The ->setMaxPerPage() method throws an exception if the max per page is not valid: Pagerfanta\Exception\NotIntegerMaxPerPageException Pagerfanta\Exception\LessThan1MaxPerPageException Both extend from Pagerfanta\Exception\NotValidMaxPerPageException. The ->setCurrentPage() method throws an exception if the page is not valid: Pagerfanta\Exception\NotIntegerCurrentPageException Pagerfanta\Exception\LessThan1CurrentPageException Pagerfanta\Exception\OutOfRangeCurrentPageException All of them extend from Pagerfanta\Exception\NotValidCurrentPageException. ->setCurrentPage() throws an out ot range exception depending on the max per page, so if you are going to modify the max per page, you should do it before setting the current page. Adapters The adapter's concept is very simple. An adapter just returns the number of results and an slice for a offset and length. This way you can adapt a pagerfanta to paginate any kind results simply by creating an adapter. An adapter must implement the Pagerfanta\Adapter\AdapterInterface interface, which has these two methods: <?php  /**  * Returns the number of results.  *  * @return integer The number of results.  */ function getNbResults();  /**  * Returns an slice of the results.  *  * @param integer $offset The offset.  * @param integer $length The length.  *  * @return array|\Iterator|\IteratorAggregate The slice.  */ function getSlice($offset, $length); Pagerfanta comes with these adapters: ArrayAdapter To paginate an array. <?php  use Pagerfanta\Adapter\ArrayAdapter;  $adapter = new ArrayAdapter($array); MongoAdapter To paginate Mongo Cursors. <?php  use Pagerfanta\Adapter\MongoAdapter;  $cursor = $collection->find(); $adapter = new MongoAdapter($cursor); MandangoAdapter To paginate Mandango Queries. <?php  use Pagerfanta\Adapter\MandangoAdapter;  $query = $mandango->getRepository('Model\Article')->createQuery(); $adapter = new MandangoAdapter($query); DoctrineDbalAdapter To paginate DoctrineDbal query builders. <?php  use Pagerfanta\Adapter\DoctrineDbalAdapter; use Doctrine\DBAL\Query\QueryBuilder;  $queryBuilder = new QueryBuilder($conn); $queryBuilder->select('p.*')->from('posts', 'p');  $countQueryBuilderModifier = function ($queryBuilder) {     $queryBuilder->select('COUNT(DISTINCT p.id) AS total_results')           ->setMaxResults(1); };  $adapter = new DoctrineDbalAdapter($queryBuilder, $countQueryBuilderModifier); DoctrineDbalSingleTableAdapter To simplify the pagination of single table DoctrineDbal query builders. This adapter only paginates single table query builders, without joins. <?php  use Pagerfanta\Adapter\DoctrineDbalSingleTableAdapter; use Doctrine\DBAL\Query\QueryBuilder;  $queryBuilder = new QueryBuilder($conn); $queryBuilder->select('p.*')->from('posts', 'p');  $countField = 'p.id';  $adapter = new DoctrineDbalSingleTableAdapter($queryBuilder, $countField); DoctrineORMAdapter To paginate DoctrineORM query objects. <?php  use Pagerfanta\Adapter\DoctrineORMAdapter;  $queryBuilder = $entityManager->createQueryBuilder()     ->select('u')     ->from('Model\Article', 'u'); $adapter = new DoctrineORMAdapter($queryBuilder); DoctrineODMMongoDBAdapter To paginate DoctrineODMMongoDB query builders. <?php  use Pagerfanta\Adapter\DoctrineODMMongoDBAdapter;  $queryBuilder = $documentManager->createQueryBuilder('Model\Article'); $adapter = new DoctrineODMMongoDBAdapter($queryBuilder); DoctrineODMPhpcrAdapter To paginate Doctrine PHPCR-ODM query builders. <?php  use Pagerfanta\Adapter\DoctrineODMPhpcrAdapter;  $queryBuilder = $documentManager->createQueryBuilder(); $queryBuilder->from('Model\Article'); $adapter = new DoctrineODMPhpcrAdapter($queryBuilder); DoctrineCollectionAdapter To paginate a Doctrine\Common\Collection\Collections interface you can use the DoctrineCollectionAdapter. It proxies to the count() and slice() methods on the Collections interface for pagination. This makes sense if you are using Doctrine ORMs Extra Lazy association features: <?php  use Pagerfanta\Adapter\DoctrineCollectionAdapter;  $user = $em->find(""Pagerfanta\Tests\Adapter\DoctrineORM\User"", 1);  $adapter = new DoctrineCollectionAdapter($user->getGroups()); DoctrineSelectableAdapter To paginate a Doctrine\Common\Collection\Selectable interface you can use the DoctrineSelectableAdapter. It uses the matching() method on the Selectable interface for pagination. This is especially usefull when using the Doctrine Criteria object to filter a PersistentCollection: <?php  use Pagerfanta\Adapter\DoctrineSelectableAdapter; use Doctrine\Common\Collections\Criteria;  $user = $em->find(""Pagerfanta\Tests\Adapter\DoctrineORM\User"", 1); $comments = $user->getComments(); $criteria = Criteria::create()->andWhere(Criteria::expr()->in('id', array(1,2,3));  $adapter = new DoctrineSelectableAdapter($comments, $criteria); Note that you should never use this adapter with a PersistentCollection which is not set to use the EXTRA_LAZY fetch mode. Be carefull when using the count() method, currently Doctrine2 needs to fetch all the records to count the number of elements. ElasticaAdapter To paginate an Elastica Query query: <?php  use Elastica\Index; use Elastica\Query; use Elastica\Query\Term; use Pagerfanta\Adapter\ElasticaAdapter;  // Searchable can be any valid searchable Elastica object. For example a Type or Index $searchable = new Index($elasticaClient, 'index_name'); // A Query can be any valid Elastica query (json, array, Query object) $query = new Query::create(new Term(array(     'name' => 'Fred' ));  $adapter = new ElasticaAdapter($searchable, $query); PropelAdapter To paginate a propel query: <?php  use Pagerfanta\Adapter\PropelAdapter;  $adapter = new PropelAdapter($query); SolariumAdapter To paginate a solarium query: <?php  use Pagerfanta\Adapter\SolariumAdapter;  $query = $solarium->createSelect(); $query->setQuery('search term');  $adapter = new SolariumAdapter($solarium, $query); FixedAdapter Best used when you need to do a custom paging solution and don't want to implement a full adapter for a one-off use case. It returns always the same data no matter what page you query: <?php  use Pagerfanta\Adapter\FixedAdapter;  $nbResults = 5; $results = array(/* ... */);  $adapter = new FixedAdapter($nbResults, $results); Views Views are to render pagerfantas, this way you can reuse your pagerfantas' html in several projects, share them and use another ones from another developers. The views implement the Pagerfanta\View\ViewInterface interface, which has two methods: <?php  /**  * Renders a pagerfanta.  *  * The route generator is any callable to generate the routes receiving the page number  * as first and unique argument.  *  * @param PagerfantaInterface $pagerfanta A pagerfanta.  * @param mixed $routeGenerator A callable to generate the routes.  * @param array $options An array of options (optional).  */ function render(PagerfantaInterface $pagerfanta, $routeGenerator, array $options = array());  /**  * Returns the canonical name.  *  * @return string The canonical name.  */ function getName(); RouteGenerator example: <?php  $routeGenerator = function($page) {     return '/path?page='.$page; } Pagerfanta comes with three views, the default one, one for Twitter Bootstrap and an special optionable view. DefaultView This is the default view. <?php  use Pagerfanta\View\DefaultView;  $view = new DefaultView(); $options = array('proximity' => 3); $html = $view->render($pagerfanta, $routeGenerator, $options); Options (default): proximity (3) previous_message (Previous) next_message (Next) css_disabled_class (disabled) css_dots_class (dots) css_current_class (current) dots_text (...) container_template (%pages%) page_template (%text%) span_template (%text%) CSS: .pagerfanta { }  .pagerfanta a, .pagerfanta span {     display: inline-block;     border: 1px solid blue;     color: blue;     margin-right: .2em;     padding: .25em .35em; }  .pagerfanta a {     text-decoration: none; }  .pagerfanta a:hover {     background: #ccf; }  .pagerfanta .dots {     border-width: 0; }  .pagerfanta .current {     background: #ccf;     font-weight: bold; }  .pagerfanta .disabled {     border-color: #ccf;     color: #ccf; }  COLORS:  .pagerfanta a, .pagerfanta span {     border-color: blue;     color: blue; }  .pagerfanta a:hover {     background: #ccf; }  .pagerfanta .current {     background: #ccf; }  .pagerfanta .disabled {     border-color: #ccf;     color: #cf; } TwitterBootstrapView This view generates a pagination for Twitter Bootstrap. <?php  use Pagerfanta\View\TwitterBootstrapView;  $view = new TwitterBootstrapView(); $options = array('proximity' => 3); $html = $view->render($pagerfanta, $routeGenerator, $options); Options (default): proximity (3) prev_message (← Previous) prev_disabled_href () next_message (Next →) next_disabled_href () dots_message (…) dots_href () css_container_class (pagination) css_prev_class (prev) css_next_class (next) css_disabled_class (disabled) css_dots_class (disabled) css_active_class (active) OptionableView This view is to reuse options in different views. <?php  use Pagerfanta\DefaultView; use Pagerfanta\OptionableView;  $defaultView = new DefaultView();  // view and default options $myView1 = new OptionableView($defaultView, array('proximity' => 3));  $myView2 = new OptionableView($defaultView, array('previous_message' => 'Anterior', 'next_message' => 'Siguiente'));  // using in a normal way $pagerfantaHtml = $myView2->render($pagerfanta, $routeGenerator);  // overwriting default options $pagerfantaHtml = $myView2->render($pagerfanta, $routeGenerator, array('next_message' => 'Siguiente!!')); Todo Author Pablo Díez - pablodip@gmail.com License Pagerfanta is licensed under the MIT License. See the LICENSE file for full details. Sponsors WhiteOctober Acknowledgements Pagerfanta is inspired by Zend Paginator. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/whiteoctober/Pagerfanta"	"A pagination library."	"true"
"Miscellaneous"	"PHP Expression"	"https://github.com/Kitano/php-expression"	"A PHP expression language."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"27"	"5"	"2"	"GitHub - Kitano/php-expression: PHP Expression Language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 27 Fork 2 Kitano/php-expression Code Issues 2 Pull requests 0 Pulse Graphs PHP Expression Language 31 commits 1 branch 0 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 649915b Sep 2, 2013 borisguery Merge pull request #4 from adrienbrault/stuff … Add integers, expressions in array accesses, concatenation, tests Permalink Failed to load latest commit information. src/Pel Add concat expression Aug 30, 2013 tests Add concat expression Aug 31, 2013 .gitignore Initial commit Apr 12, 2013 .travis.yml Initial commit Apr 12, 2013 LICENSE Initial commit Apr 12, 2013 README.md Add simple usage to readme Aug 30, 2013 composer.json Merge pull request #3 from adrienbrault/patch-2 Sep 2, 2013 phpunit.xml.dist Initial commit Apr 12, 2013 README.md PHP Expression Language The purpose of this library is to provide a common base for an PHP Expression Language. This is not really a creative library since it burrows almost all the code from the great JMSSecurityExtraBundle which already defines more or less such a base for a powerful EL (Expression Language). The idea is to take this code outside of the Johannes's bundle and to standardize it. Simple usage $compiler = new ExpressionCompiler(); $evaluator = eval($compiler->compileExpression(new Expression(""date.format(format)"")));  $context = array(     'date' => new \DateTime(),     'format' => 'Y', ); $result = $evaluator($context);  echo $result; // 2013 Adding a custom function compiler The isNumber() function expression: First you need to create a compiler for your function <?php  namespace My\Expression\Compiler\Func;  use Pel\Expression\Compiler\Func\FunctionCompilerInterface; use Pel\Expression\ExpressionCompiler; use Pel\Expression\Ast\FunctionExpression; use Pel\Exception\RuntimeException;  class IsNumberFunctionCompiler implements FunctionCompilerInterface {     public function getName()     {         return 'isNumber';     }      public function compilePreconditions(ExpressionCompiler $compiler, FunctionExpression $function)     {         if (1 !== count($function->args)) {             throw new RuntimeException(sprintf('The isNumber() function expects exactly one argument, but got ""%s"".', var_export($function->args, true)));         }     }      public function compile(ExpressionCompiler $compiler, FunctionExpression $function)     {         $compiler             ->write(""is_numeric("")             ->compileInternal($function->args[0])             ->write("")"")         ;     } } Next, after having instanciated the ExpressionCompiler, you just need to register your custom function compiler <?php  $compiler = new ExpressionCompiler(); $compiler->addFunctionCompiler(new IsNumberFunctionCompiler());  $evaluator = eval($compiler->compileExpression(new Expression(""isNumber('1234')""))); var_dump(call_user_func($evaluator, array())); // bool(true)  $evaluator = eval($compiler->compileExpression(new Expression(""isNumber('1234abc')""))); var_dump(call_user_func($evaluator, array())); // bool(false) License This bundle is under the MIT license. See the complete license in library: LICENSE  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Kitano/php-expression"	"A PHP expression language."	"true"
"Miscellaneous"	"PHP PassBook"	"https://github.com/eymengunay/php-passbook"	"A PHP library for iOS PassBook."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"144"	"19"	"42"	"GitHub - eymengunay/php-passbook: iOS passbook library for PHP 5.4+ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 144 Fork 42 eymengunay/php-passbook Code Issues 0 Pull requests 1 Pulse Graphs iOS passbook library for PHP 5.4+ http://eymengunay.github.io/php-passbook/ 152 commits 2 branches 9 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.3.0 v1.2.1 v1.2.0 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 121d2a6 Jul 6, 2016 eymengunay committed on GitHub Merge pull request #57 from kix/patch-1 … Fix bad link in README.md Permalink Failed to load latest commit information. src/Passbook Add validation when packaging a pass using the PassValidator class Apr 24, 2016 tests Add validation when packaging a pass using the PassValidator class Apr 24, 2016 www Simple pass server added for easier testing Jan 26, 2014 .editorconfig .editorconfig added Mar 5, 2013 .gitignore Added associatedStoreIdentifiers field to result Jul 7, 2015 .scrutinizer.yml [Minor] Removed unrecognized commands Apr 4, 2016 .travis.yml Removed support for PHP 5.3 and added PHP 7.0 to continuous integration. Mar 23, 2016 LICENSE License Mar 5, 2013 README.md Update README.md Jul 6, 2016 apigen.neon Api doc added Jun 15, 2013 composer.json Branch alias updated Apr 21, 2016 phpunit.xml.dist Ensure values in number fields are numeric. Closes #27. Nov 11, 2015 README.md PHP PASSBOOK LIBRARY What is Passbook? Passbook is an application in iOS that allows users to store coupons, boarding passes, event tickets, store cards, 'generic' cards and other forms of mobile payment. What does this library do? PHP-Passbook is a library for creating and packaging passes inside your application. Distribution of generated pass files can be done by attaching the file in an e-mail or serving it from your web server. Breaking changes Version 1.1.0 Pass setRelevantDate now accepts a DateTime object instead of string PassFactory:override property renamed to PassFactory:overwrite JMS Serializer dependency removed Installing Using Composer To add PHP-Passbook as a local, per-project dependency to your project, simply add a dependency on eo/passbook to your project's composer.json file. Here is a minimal example of a composer.json file that just defines a development-time dependency on the latest version of the library: {     ""require"": {         ""eo/passbook"": ""dev-master""     } } API Doc Search by class, method name, or package: http://eymengunay.github.io/php-passbook/api Usage Example This example will create a pass of type Ticket and will save the pkpass file in the output path specified. To use this example, you will need to do the following and set the constants accordingly:  Create a P12 Certificate file  Download Apple’s World Wide Developer Relations (WWDR) certificate  Obtain a Pass Type Identifier and Team Identifier from Apple  * Get an icon (29x29 png file) for the pass   Specify a name for your organization  Specify the output path where the pass will be saved  <?php  use Passbook\Pass\Field; use Passbook\Pass\Image; use Passbook\PassFactory; use Passbook\Pass\Barcode; use Passbook\Pass\Structure; use Passbook\Type\EventTicket;  // Set these constants with your values  define('P12_FILE', '/path/to/p12/certificate.p12');  define('P12_PASSWORD', 'password_for_p12_file');  define('WWDR_FILE', '/path/to/wwdr.pem');  define('PASS_TYPE_IDENTIFIER', 'pass.com.example.yourpass');  define('TEAM_IDENTIFIER', 'IDFROMAPPLE');  define('ORGANIZATION_NAME', 'Your Organization Name');  define('OUTPUT_PATH', '/path/to/output/path');  define('ICON_FILE', '/path/to/icon.png');  // Create an event ticket $pass = new EventTicket(""1234567890"", ""The Beat Goes On""); $pass->setBackgroundColor('rgb(60, 65, 76)'); $pass->setLogoText('Apple Inc.');  // Create pass structure $structure = new Structure();  // Add primary field $primary = new Field('event', 'The Beat Goes On'); $primary->setLabel('Event'); $structure->addPrimaryField($primary);  // Add secondary field $secondary = new Field('location', 'Moscone West'); $secondary->setLabel('Location'); $structure->addSecondaryField($secondary);  // Add auxiliary field $auxiliary = new Field('datetime', '2013-04-15 @10:25'); $auxiliary->setLabel('Date & Time'); $structure->addAuxiliaryField($auxiliary);  // Add icon image $icon = new Image(ICON_FILE, 'icon'); $pass->addImage($icon);  // Set pass structure $pass->setStructure($structure);  // Add barcode $barcode = new Barcode(Barcode::TYPE_QR, 'barcodeMessage'); $pass->setBarcode($barcode);  // Create pass factory instance $factory = new PassFactory(PASS_TYPE_IDENTIFIER, TEAM_IDENTIFIER, ORGANIZATION_NAME, P12_FILE, P12_PASSWORD, WWDR_FILE); $factory->setOutputPath(OUTPUT_PATH); $factory->package($pass); Requirements PHP 5.4+ zip OpenSSL Version 1.2.0 is the last release to support PHP 5.3. Obtaining the Pass Type Identifier and Team ID You can find more information from Apple on Setting the Pass Type Identifier and Team ID. Requesting Certificates P12 Certificate Once you have downloaded the Apple iPhone certificate from Apple, export it to the P12 certificate format. To do this on Mac OS: Open the Keychain Access application (in the Applications/Utilities folder). If you have not already added the certificate to Keychain, select File > Import. Then navigate to the certificate file (the .cer file) you obtained from Apple. Select the Keys category in Keychain Access. Select the private key associated with your iPhone Development Certificate. The private key is identified by the iPhone Developer: public certificate that is paired with it. Select File > Export Items. Save your key in the Personal Information Exchange (.p12) file format. You will be prompted to create a password that is used when you attempt to import this key on another computer. on Windows: Convert the developer certificate file you receive from Apple into a PEM certificate file. Run the following command-line statement from the OpenSSL bin directory: openssl x509 -in developer_identity.cer -inform DER -out developer_identity.pem -outform PEM  If you are using the private key from the keychain on a Mac computer, convert it into a PEM key: openssl pkcs12 -nocerts -in mykey.p12 -out mykey.pem  You can now generate a valid P12 file, based on the key and the PEM version of the iPhone developer certificate: openssl pkcs12 -export -inkey mykey.key -in developer_identity.pem -out iphone_dev.p12  If you are using a key from the Mac OS keychain, use the PEM version you generated in the previous step. Otherwise, use the OpenSSL key you generated earlier (on Windows). WWDR Certificate Apple’s World Wide Developer Relations (WWDR) certificate is available from Apple at http://developer.apple.com/certificationauthority/AppleWWDRCA.cer. You will have to add this to your Keychain Access and export it in .pem format to use it with the library. The WWDR certificate links your development certificate to Apple, completing the trust chain for your application. Running Tests Before submitting a patch for inclusion, you need to run the test suite to check that you have not broken anything. To run the test suite, install PHPUnit 3.7 (or later) first. Dependencies To run the entire test suite, including tests that depend on external dependencies, php-passbook needs to be able to autoload them. By default, they are autoloaded from vendor/ under the main root directory (see vendor/autoload.php). To install them all, use Composer: Step 1: Get Composer curl -s http://getcomposer.org/installer | php  Make sure you download composer.phar in the same folder where the composer.json file is located. Step 2: Install vendors php composer.phar --dev install  Note that the script takes some time to finish. Running First, install the vendors (see above). Then, run the test suite from the package root directory with the following command: phpunit  The output should display OK. If not, you need to figure out what's going on and if the tests are broken because of your modifications. Reporting an issue or a feature request Issues and feature requests related to this library are tracked in the Github issue tracker: https://github.com/eymengunay/php-passbook/issues Donating If you want to support the project, please consider to donate a small amount using my Gratipay or Changetip page. Thank you for your support! See also PassbookBundle: PHP-Passbook library integration for Symfony2 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/eymengunay/php-passbook"	"A PHP library for iOS PassBook."	"true"
"Miscellaneous"	"PHP-GPIO"	"https://github.com/ronanguilloux/php-gpio"	"A library for playing with the Raspberry PI's GPIO pins."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"166"	"29"	"60"	"GitHub - ronanguilloux/php-gpio: A PHP library to play with the Raspberry PI's GPIO pins Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 29 Star 166 Fork 60 ronanguilloux/php-gpio forked from ben-duffin/PHP-GPIO Code Issues 5 Pull requests 2 Pulse Graphs A PHP library to play with the Raspberry PI's GPIO pins 136 commits 5 branches 1 release Fetching contributors PHP 98.5% Shell 1.5% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags PCD8544 camera master scrutinizer-patch-1 scrutinizer-patch-2 Nothing to show v1.0.0 Nothing to show New pull request #24 Compare This branch is 135 commits ahead of ben-duffin:master. Latest commit b001a47 Dec 8, 2014 ronanguilloux Merge pull request #17 from ronanguilloux/scrutinizer-patch-3 … Scrutinizer Auto-Fixes Permalink Failed to load latest commit information. bin PHP's METRICS stats generator Dec 9, 2012 src/PhpGpio Scrutinizer Auto-Fixes Dec 8, 2014 tests Added 3 functions CpuTemp GpuTemp CpuFrequency Feb 12, 2014 .gitignore ignoring IDE metadata + avoiding previsible pathes Jul 10, 2014 .scrutinizer.yml Update .scrutinizer.yml Apr 10, 2014 .travis.yml sources & tests revamped Nov 22, 2012 LICENSE Fix: files should not be executable Jul 10, 2014 README.md Update README.md Oct 4, 2014 blinker enhancements after having tested the php-gpio lib with the ronanguill… Mar 23, 2013 blinkerTest.php Fix: files should not be executable Jul 9, 2014 composer.json Fix: files should not be executable Jul 9, 2014 phpunit.xml.dist Fix: files should not be executable Jul 9, 2014 README.md php-gpio php-gpio is a simple PHP library to play with the Raspberry PI's GPIO pins. It provides simple tools such as reading & writing to pins. [UPDATE Fall 2014] Now compatible with both Raspberry Pi B Model & B+ Revision Tl;dr - ""Hey, I just want to blink a LED from my raspberry pi hosted website!"" - ""OK good guy: git clone https://github.com/ronanguilloux/php-gpio-web.git`    & remember to come back here when you're lost ;-)""  => php-gpio-web: a simple example for you to play with Leds & PHP GPIO General Purpose Input/Output (a.k.a. GPIO) is a generic pin on a chip whose behavior (including whether it is an input or output pin) can be controlled (programmed) through software. The Raspberry Pi allows peripherals and expansion boards (such as the Rpi Gertboard) to access the CPU by exposing the inputs and outputs. For further informations about the Raspberry Pi's GPIO capabilities, see docs & schemas at http://elinux.org/RPi_Low-level_peripherals. For Raspbeery Pi's GPIO controlling LEDs, have a look at a sample complete circuit diagram for a single LED, with detailled explanations & schemas, here. For Raspbeery Pi's GPIO controlling sensors, check the DS18B20 (temperature sensor) in action here Hardware prerequisites After having installed & wired your LED & resistor on a breadboard, add appropriate modules from the Linux Kernel: For LEDs, enable the gpio module : $ sudo modprobe w1-gpio (see a complete circuit diagram for a single LED + explanations & schemas here) For sensors, enable the appropriate sensor. By example for a DS18B20 1-Wire digital temperature sensor: $ sudo modprobe w1-therm (see the DS18B20 in action on a Raspberry Pi here) To load such kernel modules automatically at boot time, edit the /etc/modules file & add these two lines: w1-gpio w1-therm  Installation The recommended way to install php-gpio is through composer. Just run these three commands to install it $ sudo apt-get install git $ wget http://getcomposer.org/composer.phar $ php composer.phar create-project --stability='dev' ronanguilloux/php-gpio intoYourPath Now you can add the autoloader, and you will have access to the library: <?php  require 'vendor/autoload.php'; If you don't use neither Composer nor a ClassLoader in your application, just require the provided autoloader: <?php  require_once 'src/autoload.php'; API Usage The API usage requires sudo permissions. To respect such permissions needs (say, for any web-related usage), see blinker file and the explanations below. <?php  require 'vendor/autoload.php';  use PhpGpio\Gpio;  echo ""Setting up pin 17\n""; $gpio = new GPIO(); $gpio->setup(17, ""out"");  echo ""Turning on pin 17\n""; $gpio->output(17, 1);  echo ""Sleeping!\n""; sleep(3);  echo ""Turning off pin 17\n""; $gpio->output(17, 0);  echo ""Unexporting all pins\n""; $gpio->unexportAll(); Understanding I/O permissions Permissions make sense: it's bad practice to run your webserver user (say, Apache2's www-data) as root it's bad practice to chmod 777 /dev only because someone wants to blink a led freely Such practices are regularly proposed on RPi forums, but they aren't security-aware & therefore not recommendable in an Internet environment. Instead, the good old /etc/sudoers file allow your linux users to execute single files with sudo permissions without password to type. The blinker file solution (""one-file-to-blink-them-all"") In a PHP-based project, the API can only be used with sudo permissions. But there is a solution to avoid exposing your Raspbery Pi to security issues : Preparing & packaging inside an API client, in a single PHP file, the GPIO operation you need to run. In a hardware-based project, such operations are usualy few in number: blink a led, run a servomotor, etc. Such single PHP file containing your GPIO-related action can be called with determinated parameters from within your web-based application using exec() command : (...) $result = exec('sudo -t /usr/bin/php ./blinker 17 20000'); // calling the API client file (...) Such one-single PHP file to act as an API client for one GPIO action makes easier to configure specific sudo permissions in your /etc/sudoers file, as you'll see below. If you have more hardware operations to run (say, a LED + a servomotor + 2-3 sensors), more dedicated API client files, with their own parameters, is also very OK. As an example of such solution, we provide a simple blinker php file, executable from the shell & from within your web based app. To run this blinker with sudo permissions but without password inputting, just allow your www-data or your pi user to run the blinker script using exec(). With the solution provided below, only one blinker script is needed to manage all your leds, and your webserver application needs only one php file to be specified in /etc/sudoers. This is the regular linux-file-permission-system way to do such things, not a dummy chmod 777 bullshit. Edit your /etc/sudoers file: $ sudo visudo Then add this two lines in your /etc/sudoers file :     www-data ALL=NOPASSWD:/path/to/the/blinker  Replace /path/to/the/blinker with your single API client PHP file. The blinker file provided now has the sufficient permissions & is ready to use the GPIO API. You do not need to install apache2-suexec nor suPHP. You can test the blinker file solution with the blinkerTest.php file provided here: <?php  # blinkTester.php  # Blinks the LED wired to the GPIO #17 pin with 0.2 second delay: $result = exec('sudo -t /usr/bin/php ./blinker 17 20000'); Test your blinker: $ php blinkTester.php API Implementations Some php-gpio api examples / demo : Temperature-Pi: a simple php project reading & logging temperatures using a DS18B20 1-Wire digital temperature sensor & this php-gpio library. Php-Gpio-Web: a website damn simple integration example of the php-gpio lib Unit Tests Running the full PhpUnit tests set over php-gpio requires a sudoable user, because of various gpio operations. Instead of installing phpunit, you can just download & use the single PhpUnit package. This can be easily done using cURL, to get the standalone PhpUnit's phar file: $ wget http://pear.phpunit.de/get/phpunit.phar $ chmod +x phpunit.phar $ wget http://getcomposer.org/composer.phar $ php composer.phar install --dev $ sudo /usr/bin/php phpunit.phar PHP Quality For PHP quality fans, and for my self coding improvement, I wrote a little script available in the ./bin directory I launch to check my PHP code: It produces various stats & metrics & improvements tips on the code. Credits Aaron Pearce, for its forked aaronpearce/PHP-GPIO project Ronan Guilloux ronan.guilloux@gmail.com Bas Bloemsaat bas@bloemsaat.com, Raspberry Pi version dependency Alex Ciarlillo (@alexciarlillo), Raspberry Pi B+ revision support All contributors License php-gpio is released under the MIT License. See the bundled LICENSE file for details. You can find a copy of this software here: https://github.com/ronanguilloux/php-gpio Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ronanguilloux/php-gpio"	"A library for playing with the Raspberry PI's GPIO pins."	"true"
"Miscellaneous"	"PHPCR"	"https://github.com/phpcr/phpcr"	"A PHP port of the Java Content Repository (JCR)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"354"	"35"	"32"	"GitHub - phpcr/phpcr: Port of the Java Content Repository (JCR) to PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 354 Fork 32 phpcr/phpcr Code Issues 3 Pull requests 2 Pulse Graphs Port of the Java Content Repository (JCR) to PHP. http://phpcr.github.io 478 commits 4 branches 17 releases Fetching contributors PHP 99.7% HTML 0.3% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags acl fix-typehints master query_constants Nothing to show 2.1.2 2.1.1 2.1.0 2.1.0-beta12 2.1.0-beta11 2.1.0-beta10 2.1.0-beta9 2.1.0-beta8 2.1.0-beta7 2.1.0-beta6 2.1.0-beta5 2.1.0-beta4 2.1.0-beta3 2.1.0-beta2 2.1.0-beta1 2.1.0-RC2 2.1.0-RC1 Nothing to show New pull request Latest commit 8ff80a3 Nov 4, 2015 dbu Merge pull request #87 from phpcr/outer-joins … fix phpdoc about row methods return value in case of outer joins Permalink Failed to load latest commit information. doc fix link to tutorial. fix #81 Aug 24, 2014 src fix phpdoc about row methods return value in case of outer joins Nov 4, 2015 tests apply styleci fixes Jul 22, 2015 .gitignore cleanup doc config May 26, 2011 .styleci.yml fix styleci Aug 3, 2015 .travis.yml use travis docker env Jul 22, 2015 LICENSE.txt adding the MIT license (see http://phpcr-license.davidbu.ch/licenses/… Aug 28, 2013 README.md fix link to tutorial. fix #81 Aug 24, 2014 composer.json adding the MIT license (see http://phpcr-license.davidbu.ch/licenses/… Aug 28, 2013 README.md PHP Content Repository PHPCR This repository contains interfaces for the PHPCR standard. The JSR-283 specification defines an API for a Content Repository (CR). The PHP Content Repository Interfaces aims to provide that API in PHP. PHPCR is part of JSR-333, the next version of the Java Content Repository. There is a bunch of information here: http://phpcr.github.io Documentation Introduction PHP content repository is an API. That is, it defines a standardized way how to access and manipulate content. As with any general API, the main goal is to decouple the backend from the frontend. If you code against the PHPCR API, your code should run with all PHPCR implementations. David Nuescheler, the lead of JCR, provides the following advantages of using a content repository. Functional Definition of a “Content Repository” Common Vocabulary! No longer learn (dozens of) (ugly) proprietary APIs Write (mostly) portable code, for Document Management, Web Content Management, Source Code Control Compare Repository Functionality No more information silos and vendor Lock-in Content-Centric Infrastructure PHPCR is adapted from the Java Content Repository (JCR) standard because that is a widely used and well thought through standard. There exist a couple of implementations for PHPCR that you can use. See below for a list of known implementations. Further reading The PHPCR Book API Reference Port Status The PHPCR is following the Java Content Repository JCR API closely where appropriate. In the points where Java and PHP differ, we tried to follow the logic of PHP while keeping the spirit of the original API. The API has the same expressiveness as the Java API. Most of the JSR-283/JSR-333 documentation and code examples should be usable as-is. Main differences between PHPCR and JCR are PHP has no method overloading. Same-name methods that differ only by parameter number and/or type have been merged into one method. PHP is weak typed, which makes the Value interface and the large number of almost-identical iterators obsolete. An exhaustive list of the differences between PHPCR and JCR is in the file doc/JCR_TO_PHPCR.txt Tests Unit tests As PHPCR is an API definition, there is not much to test on it without an implementation. Nonetheless, there are a few concrete classes that do have unit tests. Simply run them with phpunit -c tests/ API Tests An API test suite for the functionality of PHPCR is available at https://github.com/phpcr/phpcr-api-tests/ All implementations have to test against this test suite to make sure they are interchangeable with each other. Implementations Jackalope separates the content repository logic from the storage backend. Several backend drivers are currently being developed. Jackalope-Jackrabbit: Mapping requests to a java Jackrabbit instance. To day the most feature complete implementation. Jackalope-DoctrineDBAL: Storing data in a relational database using the Doctrine Database Abstraction Layer. The following are a work in progress: Jackalope-MongoDB: Storing data in a MongoDB database. Jackalope-Prismic: Storing data in the Prismic.io content repository as a service. Jackalope-Midgard1 (not online afaik): Read access to the midgard 1.0 server. Midgard2: PHPCR interfaces for the midgard2 content repository. If you work on your own implementation, please let us know so we can add it here right away. Even if its not yet working, others might want to join in and help. Utilities phpcr-utils: A couple of utility classes and console commands to work with phcpr, independent of the implementation. PHPCR Shell: The PHPCR Shell aims to provide a complete shell interface to any PHPCR repository. Marmelab PHPCR Browser: Angular JS based PHPCR repository browser. Currently only supports Jackalope-Jackrabbit and Jackalope-Doctrine-DBAL. Dependencies PHPCR provides a composer.json for Composer and is available through Packagist. History The API was originally ported from Java to PHP by Karsten Dambekalns with the help of others for the typo3/flow3 project. A first attempt at a port of JSR-170 to php has been made by SimPCoRe, but it seems no applications have been published. That version never tried to provide an API, but just implemented the Java interfaces literally. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phpcr/phpcr"	"A PHP port of the Java Content Repository (JCR)."	"true"
"Miscellaneous"	"PHPStack"	"http://dunkels.com/adam/phpstack/"	"A TCP/IP stack proof of concept written in PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"phpstack - A TCP/IP Stack and Webserver in PHP Toggle navigation Adam Dunkels Home Code Science Talks Contact phpstack New: I have written a short FAQ that answers some of the questions that popped up in the comments to the Slashdot article. phpstack is a proof-of-concept TCP/IP stack and web server written entirely in the PHP scripting language. The TCP/IP stack implements only the very minimal requirements for being able to run the extremely simple web server. The web server contains no functionality whatsoever - but is has the ability to execute PHP scripts. Note: this code is not meant to be taken too seriously, it is just a quick and dirty proof-of-concept hack written in about 3 hours. If you are looking for a real TCP/IP stack please see lwIP or uIP. The demo server setup: 193.10.67.151 The phpstack software is running on a demonstration server here. The server runs as a process on a PC running FreeBSD. The PC has a null-modem cable connected between its two serial ports. A SLIP interface routes IP packets over the serial cable and the phpstack software is listening on the other end of the cable. The PC is a 450 MHz Pentium-III with 386 megabytes of memory running FreeBSD 4.9. The serial cable operates at 115200 bits per second and the web server is able to push approximately 5 connections per second. Note that the phpstack software does not run under the Apache web server, but as a stand-alone program. The PHP language The PHP language originally was originally developed for HTML processing for web applications. One of the killer features of PHP was (and still is!) the ability to embed the PHP code into HTML documents. The last few years, however, people have been using PHP for writing general purpose programs; programs for which PHP wasn't really intended. There are now PHP OpenGL wrappers, GUI libraries and even web and FTP servers written in PHP. The phpstack software extends this list down to the very lowest level of Internetworking: the TCP/IP stack. The TCP/IP stack All computers connected to the Internet runs a TCP/IP stack. The purpose of the TCP/IP stack is to let applications talk to each other over the Internet. The TCP/IP stack is hidden deeply inside the operating systems and most users and developers will not even come near the actual TCP/IP stack software. Many developers have, however, used sockets to reach the network from their programs - sockets are the interface to the TCP/IP stack on most operating systems. The socket layer hides most of the complexity of the TCP/IP stack from application programmers. phpstack contains a very, very simple TCP/IP stack. The stack is tailored explicitly for the purpose of answering pings, incoming TCP requests, opening up a connection, and sending out responses to incoming data. This functionality is enough to be able to support a small web server. The stack does not handle two-way communication, nor does it have the ability to support long-running connections. Because of the cut-down functionality, it is possible to optimize the TCP/IP stack so that it do not require any extra memory at all for each new connection. It is therefore possible to support an unlimited number of simultaneous connections. The only limit is the bandwidth of the incoming network connection. The web server The web server in phpstack is extremely simple. It listens to incoming connection requests and sends out an HTML page or a picture in response to the requests. It can only handle pages or pictures with a maximum size of 1460 bytes, because of the limited TCP/IP stack. To reduce the complexity of both the TCP/IP stack and the web server, the web server does not parse incoming requests. Instead, it uses the TCP port number of the incoming connection to distinguish between different pages or pictures. Since the web server is written in PHP, it is easy to allow the served web pages to contain PHP code. The code The roughly 600 lines of code are available here and is provided under the 3-clause BSD license. phpstack is provided as a reference and a program that people might find entertaining and possibly educating. Adam Dunkels Adam Dunkels"	"null"	"null"	"A TCP/IP stack proof of concept written in PHP."	"true"
"Miscellaneous"	"print_o"	"https://github.com/koriym/print_o"	"An object graph visualizer."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"55"	"8"	"6"	"GitHub - koriym/print_o: An object graph visualizer Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 55 Fork 6 koriym/print_o Code Issues 0 Pull requests 0 Pulse Graphs An object graph visualizer http://Display mind-map style object graph 113 commits 5 branches 9 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 1.x Switch branches/tags Branches Tags 1.x develop gh-pages master patch-1 Nothing to show 1.0.1 1.0.0 1.0.0-alpha 0.2.0 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit 1f8181b Apr 22, 2016 2 koriym Merge pull request #5 from phofmann-trust/patch-2 … Use protocol-relative URL for d3.min.js Permalink Failed to load latest commit information. src Use protocol-relative URL for d3.min.js Apr 20, 2016 tests cleanup May 14, 2015 .gitignore add ignore files May 10, 2014 .php_cs update metafiles May 14, 2015 .scrutinizer.yml update metafiles May 14, 2015 .travis.yml update metafiles May 14, 2015 Licence.txt update year Mar 5, 2015 README.md Update README.md Jun 30, 2015 build.xml add ignore files May 9, 2014 composer.json MIT license May 14, 2015 phpcs.xml update metafiles May 14, 2015 phpmd.xml update metafiles May 14, 2015 phpunit.xml simpler phpunit config file May 10, 2014 README.md print_o An object graph visualizer for PHP What is object graph ? Object-oriented applications contain complex webs of interrelated objects. Objects are linked to each other by one object either owning or containing another object or holding a reference to another object. This web of objects is called an object graph and it is the more abstract structure that can be used in discussing an application's state. - wikipedia (JA) オブジェクト指向のアプリケーションは相互に関係のある複雑なオブジェクト網を含んでいます。オブジェクトはあるオブジェクトから所有されているか、他のオブジェクト（またはそのリファレンス）を含んでいるか、そのどちらかでお互いに接続されています。このオブジェクト網をオブジェクトグラフと呼びます。 Simple object graph With properties Full extract Requirements PHP 5.4+ Installation {     ""require-dev"": {         ""koriym/printo"": ""~1.0""     } } Usage  print_o($object);  //or  use Koriym\Printo\Printo;  echo (new Printo($object))     ->setRange(Printo::RANGE_PROPERTY)     ->setLinkDistance(130)     ->setCharge(-500); Live demo Aura.Framework_Project BEAR.Sunday Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/koriym/print_o"	"An object graph visualizer."	"true"
"Miscellaneous"	"Procrastinator"	"https://github.com/lstrojny/Procrastinator"	"A library for running time consuming tasks."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"40"	"5"	"2"	"GitHub - lstrojny/Procrastinator: Execute time consuming tasks as late as possible in a request Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 40 Fork 2 lstrojny/Procrastinator Code Issues 0 Pull requests 0 Pulse Graphs Execute time consuming tasks as late as possible in a request 62 commits 1 branch 2 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.6.1 0.6.0 Nothing to show New pull request Latest commit 8996e7c Jul 30, 2015 lstrojny Migrate to new infra Permalink Failed to load latest commit information. build Build infrastructure Apr 1, 2013 src/Procrastinator Fixing interfaces May 13, 2013 tests/Procrastinator Fixing interfaces May 13, 2013 vendor Doctrine event support Feb 5, 2012 .gitignore Fixing interfaces May 13, 2013 .travis.yml Migrate to new infra Jul 30, 2015 README.md Update README.md Jan 12, 2015 build.xml Build infrastructure Apr 1, 2013 composer.json Updating dependencies Apr 11, 2014 phpunit.xml.dist Build infrastructure Apr 1, 2013 README.md Procrastinator for PHP: do stuff later A few classes to help you executing complicated tasks (like sending mails) later. Example using fastcgi_finish_request() to finish request before executing tasks <?php $procrastinator = new \Procrastinator\DeferralManager(     new \Procrastinator\Scheduler\OnRegisterShutdownScheduler(),     new \Procrastinator\Executor\Decorator\PhpFpmExecutorDecorator(         new \Procrastinator\Executor\SingleThreadExecutor()     ) );  // The rough way $procrastinator->register(     new \Procrastinator\Deferred\CallbackDeferred(         'some name',         function() {sleep(10);}     ) );  // Or use the more convenient builder interface $procrastinator->register(     $procrastinator         ->newDeferred()         ->name('some other name')         ->call(function() {sleep(10);}         ->build() );  $procrastinator->schedule(); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lstrojny/Procrastinator"	"A library for running time consuming tasks."	"true"
"Miscellaneous"	"Prooph Service Bus"	"https://github.com/prooph/service-bus"	"Lightweight message bus supporting CQRS and Micro Services"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"100"	"16"	"18"	"GitHub - prooph/service-bus: PHP Lightweight Message Bus supporting CQRS. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 100 Fork 18 prooph/service-bus Code Issues 8 Pull requests 0 Wiki Pulse Graphs PHP Lightweight Message Bus supporting CQRS. http://getprooph.org 333 commits 2 branches 38 releases 10 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show v5.1.0 v5.0.3 v5.0.2 v5.0.1 v5.0 v4.6 v4.5 v4.4.1 v4.4 v4.3 v4.2 v4.2-beta.1 v4.1.2 v4.1.1 v4.1 v4.0 v3.2 v3.1 v3.0.1 v3.0 v2.0 v1.3.1 v1.3.0 v1.2.1 v1.2.0 v1.1.1 v1.1.0 v1.0.2 v1.0.1 v1.0.0 v0.4.0 0.3.3 0.3.2 0.3.1 0.3.0 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit 71e45aa May 14, 2016 prolic better build matrix Permalink Failed to load latest commit information. config update factories to interop-config 1.0, add static factory support Mar 6, 2016 docs fix a type on ""therefore"" May 1, 2016 examples standardize date format in license + more phpdoc Aug 28, 2015 src Merge pull request #119 from basz/patch-1 Mar 18, 2016 tests update factories to interop-config 1.0, add static factory support Mar 6, 2016 .coveralls.yml Bump php-coveralls to 1.0 Feb 10, 2016 .gitignore added bookdown.io documentation Nov 8, 2015 .php_cs Add config dir to cs-fixer Aug 20, 2015 .travis.yml better build matrix May 14, 2016 LICENSE.txt Change vendor to prooph Apr 20, 2014 README.md Bookdown docs Nov 21, 2015 composer.json update factories to interop-config 1.0, add static factory support Mar 6, 2016 phpunit.xml.dist better phpunit.xml.dist Aug 28, 2015 README.md PSB - ProophServiceBus PHP 5.5+ lightweight message bus supporting CQRS and Micro Services Messaging API prooph/service-bus is a lightweight messaging facade. It allows you to define the API of your model with the help of messages. Command messages describe actions your model can handle. Event messages describe things that happened while your model handled a command. Query messages describe available information that can be fetched from your (read) model. prooph/service-bus shields your model. Data input and output ports become irrelevant and no longer influence business logic. We're looking at you Hexagonal Architecture. prooph/service-bus decouples your model from any framework. You can use a web framework like Zend, Symfony, Laravel and co. to handle http requests and pass them via prooph/service-bus to your model but you can also receive the same messages via CLI or from a messaging system like RabbitMQ or Beanstalkd. It is also a perfect fit for microservices architecture as it provides an abstraction layer for message-based inter-service communication. Installation You can install prooph/service-bus via composer by adding ""prooph/service-bus"": ""~5.0"" as requirement to your composer.json. Quick Start <?php  use Prooph\ServiceBus\CommandBus; use Prooph\ServiceBus\Example\Command\EchoText; use Prooph\ServiceBus\Plugin\Router\CommandRouter;  $commandBus = new CommandBus();  $router = new CommandRouter();  //Register a callback as CommandHandler for the EchoText command $router->route('Prooph\ServiceBus\Example\Command\EchoText')     ->to(function (EchoText $aCommand) {         echo $aCommand->getText();     });  //Expand command bus with the router plugin $commandBus->utilize($router);  //We create a new Command $echoText = new EchoText('It works');  //... and dispatch it $commandBus->dispatch($echoText);  //Output should be: It works Documentation Documentation is in the docs tree, and can be compiled using bookdown. $ php ./vendor/bin/bookdown docs/bookdown.json $ php -S 0.0.0.0:8080 -t docs/html/ Then browse to http://localhost:8080/ Support Ask questions on prooph-users google group. File issues at https://github.com/prooph/service-bus/issues. Say hello in the prooph gitter chat. Contribute Please feel free to fork and extend existing or add new features and send a pull request with your changes! To establish a consistent code quality, please provide unit tests for all your changes and may adapt the documentation. License Released under the New BSD License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/prooph/service-bus"	"Lightweight message bus supporting CQRS and Micro Services"	"true"
"Miscellaneous"	"RMT"	"https://github.com/liip/RMT"	"A library for versioning and releasing software."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"288"	"61"	"22"	"GitHub - liip/RMT: RMT is a handy tool to help releasing new version of your software Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 61 Star 288 Fork 22 liip/RMT Code Issues 15 Pull requests 5 Wiki Pulse Graphs RMT is a handy tool to help releasing new version of your software http://liip.ch 370 commits 10 branches 37 releases 17 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags add-handlers build-phar-package-action fix-hg improve-error master mercurial-support minor_tweaks new-array-helper rollback symfony_3_0 Nothing to show 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.1.9 1.1.8 1.1.7 1.1.6 1.1.5 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 0.9.16 0.9.15 0.9.14 0.9.13 0.9.12 0.9.11 0.9.10 0.9.9 0.9.8 0.9.7 0.9.6 0.9.5 0.9.4 0.9.3 0.9.2 0.9.1 0.9.0 Nothing to show New pull request Latest commit 26268e4 Jul 1, 2016 jeanmonod committed on GitHub Merge pull request #111 from raphaelstolt/fix-readme … Minor fixes Permalink Failed to load latest commit information. bin Fix typo Oct 29, 2014 docs Update the documentation related to the move on stable Dec 20, 2013 src/Liip/RMT Release of new version 1.2.4 Jun 8, 2016 test/Liip/RMT/Tests Fix tests of version 1.2.3 and keep php 5.3 compatibility May 9, 2016 .gitattributes Only export needed files Oct 23, 2014 .gitignore Add the composer.lock to git Jul 28, 2014 .rmt.yml added composer security check Oct 28, 2014 .travis.yml make symfony deps explicit in the travis setup Nov 12, 2015 CHANGELOG Release of new version 1.2.4 Jun 8, 2016 LICENSE Add a LICENCE file fix #52 Dec 12, 2013 README.md Minor fixes Jul 1, 2016 RMT Cleanup PR60 Jan 20, 2014 autoload.php the running method does not exists on Phar in HHVM Nov 11, 2014 box.json adding support for creating phar-RMT through http://box-project.org/ Jan 18, 2014 build.xml activate PSR-2 for PHPCS Oct 23, 2014 command.php Master renaming from RD to RMT fix #21 Dec 14, 2012 composer.json Release of new version 1.2.4 Jun 8, 2016 composer.lock bumped minimal requirement to PHP 5.3.9 and Symfony 2.3, allow Symfon… Nov 10, 2015 phpcs.xml Only warn about line with more than 200 chars Oct 23, 2014 phpdox.xml prepare RMT for jenkins Sep 2, 2013 phpmd.xml prepare RMT for jenkins Sep 2, 2013 phpunit.xml.dist prepare RMT for jenkins Sep 2, 2013 README.md RMT - Release Management Tool RMT is a handy tool to help releasing new versions of your software. You can define the type of version generator you want to use (e.g. semantic versioning), where you want to store the version (e.g. in a changelog file or as a VCS tag) and a list of actions that should be executed before or after the release of a new version. Installation Option 1: As a development dependency of your project In order to use RMT in your project you should use Composer to install it as a dev-dependency. Just go to your project's root directory and execute: composer require --dev liip/rmt  Then you must initialize RMT by running the following command: php vendor/liip/rmt/command.php init  This command will create a .rmt.yml config file and a RMT executable script in your project's root folder. You can now start using RMT by executing: ./RMT  Once there, your best option is to pick one of the configuration examples below and adapt it to your needs. If you are using a versioning tool, we recommend to add both Composer files (composer.json and composer.lock), the RMT configuration file(.rmt.yml) and the RMT executable script to it. The vendor directory should be ignored as it is populated when running composer install. Option 2: As a global Composer installation You can add RMT to your global composer.json and have it available globally for all your projects. Therefor just run the following command: composer global require liip/rmt  Make sure you have ~/.composer/vendor/bin/ in your $PATH. Option 3: As a Phar file RMT can be installed through phar-composer, which needs to be installed therefor. This useful tool allows you to create runnable Phar files from Composer packages. If you have phar-composer installed, you can run: sudo phar-composer install liip/RMT  and have phar-composer build and install the Phar file to your $PATH, which then allows you to run it simply as rmt from the command line or you can run phar-composer build liip/RMT  and copy the resulting Phar file manually to where you need it (either make the Phar file executable via chmod +x rmt.phar and execute it directly ./rmt.phar or run it by invoking it through PHP via php rmt.phar. For the usage substitute RMT with whatever variant you have decided to use. Usage Using RMT is very straightforward, just run the command: ./RMT release  RMT will then execute the following tasks: Execute the prerequisites checks Ask the user to answers potentials questions Execute the pre-release actions Release Generate a new version number Persist the new version number Execute the post-release actions Here is an example output: Additional commands The release command provides the main behavior of the tool, additional some extra commands are available: current will show your project current version number (alias version) changes display the changes that will be incorporated in the next release config display the current config (already merged) init create (or reset) the .rmt.yml config file Configuration All RMT configurations have to be done in .rmt.yml. The file is divided in six root elements: vcs: The type of VCS you are using, can be git, svn or none For git VCS you can use the two following options sign-tag and sign-commit if you want to GPG sign your release prerequisites: A list [] of prerequisites that must be matched before starting the release process pre-release-actions: A list [] of actions that will be executed before the release process version-generator: The generator to use to create a new version (mandatory) version-persister: The persister to use to store the versions (mandatory) post-release-actions: A list [] of actions that will be executed after the release All entries of this config work the same. You have to specify the class you want to handle the action. Example: version-generator: ""simple""` version-persister:    vcs-tag:        tag-prefix: ""v_""  RMT also support JSON configs, but we recommend using YAML. Branch specific config Sometimes you want to use a different release strategy according to the VCS branch, e.g. you want to add CHANGELOG entries only in the master branch. To do so, you have to place your default config into a root element named _default, then you can override parts of this default config for the branch master. Example: _default:     version-generator: ""simple""     version-persister: ""vcs-tag"" master:     pre-release-actions: [changelog-update]  You can use the command RMT config to see the merge result between _default and your current branch. Version generator Build-in version number generation strategies. simple: This generator is doing a simple increment (1,2,3...) semantic: A generator which implements Semantic versioning Option allow-label (boolean): To allow adding a label on a version (such as -beta, -rcXX) (default: false) Option type: to force the version type Option label: to force the label The two forced option could be very useful if you decide that a given branch is dedicated to the next beta of a given version. So just force the label to beta and all release are going to be beta increments. Version persister Class in charge of saving/retrieving the version number. vcs-tag: Save the version as a VCS tag changelog: Save the version in the changelog file Prerequisite actions Prerequisite actions are executed before the interactive part. working-copy-check: check that you don't have any VCS local changes Option allow-ignore: allow the user to skip the check when doing a release with --ignore-check display-last-changes: display your last changes tests-check: run the project test suite Option command: command to run (default: phpunit) Option expected_exit_code: expected return code (default: 0) composer-json-check: run a validate on the composer.json Option composer: how to run composer (default: php composer.phar) composer-stability-check: will check if the composer.json is set to the right minimum-stability Option stability: the stability that should be set in the minimum-stability field (default: stable) composer-security-check: run the composer.lock against https://security.sensiolabs.org/ to check for known vulnerabilities in the dependencies Actions Actions can be used for pre or post release parts. changelog-update: Update a changelog file. This action is further configured to use a specific formatter. Option format: simple, semantic or addTop (default: simple) Option file: path from .rmt.yml to changelog file (default: CHANGELOG) Option dump-commits: write all commit messages since the last release into the changelog file (default: false) Option insert-at: only for addTop formatter: Number of lines to skip from the top of the changelog file before adding the release number (default: 0) Option exclude-merge-commits: Exclude merge commits from the changelog (default: false) vcs-commit: commit all files of the working copy (only use it with the working-copy-check prerequisite) Option commit-message: specify a custom commit message. %version% will be replaced by the current / next version strings. vcs-tag: Tag the last commit vcs-publish: Publish the changes (commits and tags) composer-update: Update the version number in a composer file update-version-class: Update the version constant in a class file. Option class: path to class to be updated, or fully qualified class name of the class containing the version constant Option pattern: optional, use to specify the string replacement pattern in your version class. %version% will be replaced by the current / next version strings. For example you could use const VERSION = '%version%';. If you do not specify this option, every occurrence of the version string in the file will be replaced. build-phar-package: Builds a Phar package of the current project whose filename depends on the 'package-name' option and the deployed version: [package-name]-[version].phar Option package-name: the name of the generate package Option destination: the destination directory to build the package into. If prefixed with a slash, is considered absolute, otherwise relative to the project root. Option excluded-paths: a regex of excluded paths, directly passed to the Phar::buildFromDirectory method. Ex: /^(?!.*cookbooks|.*\.vagrant|.*\.idea).*$/im Option metadata: an array of metadata describing the package. Ex author, project. Note: the release version is added by default but can be overridden here. Option default-stub-cli: the default stub for CLI usage of the package. Option default-stub-web: the default stub for web application usage of the package. Extend it RMT is providing some existing actions, generators, and persisters. If needed you can add your own by creating a PHP script in your project, and referencing it in the configuration via it's relative path: version-generator: ""bin/myOwnGenerator.php""  Example with injected parameters: version-persister:     name: ""bin/myOwnGenerator.php""     parameter1: value1  As an example, you can look at the script /bin/UpdateApplicationVersionCurrentVersion.php configured here. WARNING: As the key name is used to define the name of the object, you cannot have a parameter named name. Configuration examples Most of the time, it will be easier for you to pick up an example below and adapt it to your needs. No VCS, changelog updater only version-generator: semantic version-persister: changelog  Using Git tags, simple versioning and prerequisites vcs: git version-generator: simple version-persister: vcs-tag prerequisites: [working-copy-check, display-last-changes]  Using Git tags, simple versioning and prerequisites, and gpg sign commit and tags vcs:    name: git   sign-tag: true   sign-commit: true version-generator: simple version-persister: vcs-tag prerequisites: [working-copy-check, display-last-changes]  Using Git tags with prefix, semantic versioning and pushing automatically vcs: git version-generator: semantic version-persister:     name: vcs-tag     tag-prefix : ""v_"" post-release-actions: [vcs-publish]  Using semantic versioning on master and simple versioning on topic branches _default:     vcs: git     prerequisites: [working-copy-check]     version-generator: simple     version-persister:         name: vcs-tag         tag-prefix: ""{branch-name}_""     post-release-actions: [vcs-publish]  # This entry allow to override some parameters for the master branch master:     prerequisites: [working-copy-check, display-last-changes]     pre-release-actions:         changelog-update:             format: semantic             file: CHANGELOG.md             dump-commits: true         update-version-class:             class: Doctrine\ODM\PHPCR\Version             pattern: const VERSION = '%version%';         vcs-commit: ~     version-generator: semantic     version-persister: vcs-tag  Contributing If you would like to help, by submitting one of your action scripts, generators, or persisters. Or just by reporting a bug just go to the project page https://github.com/liip/RMT. Requirements PHP 5.3 Composer Authors Laurent Prodon Liip AG David Jeanmonod Liip AG Peter Petermann Gameforge 4D GmbH Gilles Crettenand Liip AG and others contributors License RMT is licensed under the MIT License. See the LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/liip/RMT"	"A library for versioning and releasing software."	"true"
"Miscellaneous"	"sabre/vobject"	"https://github.com/fruux/sabre-vobject"	"A library for parsing VCard and iCalendar objects."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"284"	"28"	"64"	"GitHub - fruux/sabre-vobject: The VObject library for PHP allows you to easily parse and manipulate iCalendar and vCard objects Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 284 Fork 64 fruux/sabre-vobject Code Issues 11 Pull requests 3 Wiki Pulse Graphs 📅 The VObject library for PHP allows you to easily parse and manipulate iCalendar and vCard objects http://sabre.io/vobject/ 1,849 commits 9 branches 63 releases 35 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0 2.1 3.3 3.4 3.5 DominikTo/lowercase-charset-issue master task-scheduling vtimezone Nothing to show 4.1.1 4.1.0 4.0.3 4.0.2 4.0.1 4.0.0 4.0.0-beta1 4.0.0-alpha2 4.0.0-alpha1 3.5.2 3.5.1 3.5.0 3.4.9 3.4.8 3.4.7 3.4.6 3.4.5 3.4.4 3.4.3 3.4.2 3.4.1 3.4.0 3.3.5 3.3.4 3.3.3 3.3.2 3.3.1 3.3.0 3.2.4 3.2.3 3.2.2 3.2.1 3.2.0 3.1.4 3.1.3 3.1.2 3.1.1 3.1.0 3.0.0 3.0.0beta2 3.0.0-beta4 3.0.0-beta3 3.0.0-beta1 3.0.0-alpha4 3.0.0-alpha3 3.0.0-alpha2 3.0.0-alpha1 2.1.7 2.1.6 2.1.5 2.1.4 2.1.3 2.1.2 2.1.1 2.1.0 2.0.7 2.0.6 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 Nothing to show New pull request Latest commit a3a59b0 Jul 15, 2016 evert Giving up on hhvm Permalink Failed to load latest commit information. bin Re-running php-cs-fixer. Few things have changed. Jul 10, 2016 lib Some checks added for RRULE BYMONTH in Recur->validate() (#338) Jul 15, 2016 resources/schema Apply erratum 4247 of RFC6351. Feb 3, 2015 tests Merge branch 'fix_for_336' of https://github.com/PHPGangsta/sabre-vob… Jul 15, 2016 .gitignore Ignoring the hoa binary. Jul 4, 2015 .travis.yml Giving up on hhvm Jul 15, 2016 CHANGELOG.md Preparing vobject release Jul 15, 2016 LICENSE Happy new year! Dec 31, 2015 README.md Added 3.5 status to README Jan 7, 2016 composer.json more useful search terms Jun 17, 2016 README.md sabre/vobject The VObject library allows you to easily parse and manipulate iCalendar and vCard objects using PHP. The goal of the VObject library is to create a very complete library, with an easy to use API. Installation Make sure you have Composer installed, and then run: composer require sabre/vobject ""^4.0""  This package requires PHP 5.5. If you need the PHP 5.3/5.4 version of this package instead, use: composer require sabre/vobject ""^3.4""  Usage Working with vCards Working with iCalendar Build status branch status master 3.5 3.4 3.1 2.1 2.0 Support Head over to the SabreDAV mailing list for any questions. Made at fruux This library is being developed by fruux. Drop us a line for commercial services or enterprise support. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fruux/sabre-vobject"	"A library for parsing VCard and iCalendar objects."	"true"
"Miscellaneous"	"Slimdump"	"https://github.com/webfactory/slimdump"	"An easy dumper tool for MySQL."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"9"	"0"	"GitHub - webfactory/slimdump: slimdump is a little tool to help you creating configurable dumps of large MySQL-databases. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 14 Fork 0 webfactory/slimdump Code Issues 1 Pull requests 0 Pulse Graphs slimdump is a little tool to help you creating configurable dumps of large MySQL-databases. 106 commits 1 branch 9 releases Fetching contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.5.0 1.4.3 1.4.2 1.4.1 1.4.0 1.3.0 1.2.0 1.1.0 1.0.0 Nothing to show New pull request Latest commit 2b4d55d Jun 27, 2016 mpdude committed on GitHub Add option to avoid dumping AUTO_INCREMENT values (#14) … A new ""keep-auto-increment"" attribute has been added within <table> configuration statements.  Setting it to ""false"" (with the default being ""true"") will remove the ""AUTO_INCREMENT=..."" value that MySQL's ""SHOW CREATE TABLE"" will insert by default. As a result, you can create schema dumps that will start off with fresh AUTO_INCREMENT values. Permalink Failed to load latest commit information. bin Make use of the Symfony Console. Oct 26, 2015 example-configs added example configuration Nov 21, 2014 php Looking at how \Doctrine\DBAL\DriverManager works internally, this sh… Dec 9, 2015 src/Webfactory/Slimdump Add option to avoid dumping AUTO_INCREMENT values (#14) Jun 27, 2016 test/Webfactory/Slimdump Add option to avoid dumping AUTO_INCREMENT values (#14) Jun 27, 2016 .coveralls Added TravisCI and coveralls. Nov 28, 2015 .gitignore added configuration to build a phar Nov 21, 2014 .travis.yml Updated travis-ci config to use the new container-based infrastructure Jan 8, 2016 LICENSE Initial commit Nov 21, 2014 README.md Add option to avoid dumping AUTO_INCREMENT values (#14) Jun 27, 2016 box.json.dist added configuration to build a phar Nov 21, 2014 composer.json Composer update, fixes #17 by using symfony/console ^2.8.7 Jun 7, 2016 composer.lock Composer update, fixes #17 by using symfony/console ^2.8.7 Jun 6, 2016 phpunit.xml.dist Added composer autoloading as phpunit bootstrap file. Oct 23, 2015 README.md slimdump slimdump is a little tool to help you creating configurable dumps of large MySQL-databases. It works off one or several configuration files. For every table you specify, it can dump only the schema (CREATE TABLE ... statement), full table data, data without blobs and more. Why? We created slimdump because we often need to dump parts of MySQL databases in a convenient and reproducible way. Also, when you need to analyze problems with data from your production databases, you might want to pull only relevant parts of data and also hide personal data (user names, for example). mysqldump is a great tool, probably much more proven when it comes to edge cases and with a lot of switches. But there is no easy way to create a simple configuration file that describes a particular type of dump (e. g. a subset of your tables) and share it with your co-workers. Let alone dumping tables and omitting BLOB type columns. Installation When PHP is your everyday programming language, you probably have Composer installed. You can then easily install slimdump as a global package. Just run composer global require webfactory/slimdump. In order to use it like any other Unix command, make sure $COMPOSER_HOME/vendor/bin is in your $PATH. Of course, you can also add slimdump as a local (per-project) Composer dependency. We're also working on providing a .phar package of slimdump for those not using PHP regularly. With that solution, all you need is to have the PHP interpreter installed and to download a single archive file to use slimdump. You can help us and open a pull request for that :-)! Usage slimdump needs the DSN for the database to dump and one or more config files: slimdump {DSN} {config-file} [...more config files...] slimdump writes to STDOUT. If you want your dump written to a file, just redirect the output: slimdump {DSN} {config-file} > dump.sql The DSN has to be in the following format: mysql://[user[:password]@]host[:port]/dbname For further explanations have a look at the Doctrine documentation. Configuration Configuration is stored in XML format somewhere in your filesystem. As a benefit, you could add the configuration to your repository to share a quickstart to your database dump with your coworkers. Example: <?xml version=""1.0"" ?> <slimdump>   <!-- Create a full dump (schema + data) of ""some_table"" -->   <table name=""some_table"" dump=""full"" />    <!-- Dump the ""media"" table, omit BLOB fields. -->   <table name=""media"" dump=""noblob"" />    <!-- Dump the ""user"" table, hide names and email addresses. -->   <table name=""user"" dump=""full"">       <column name=""username"" dump=""masked"" />       <column name=""email"" dump=""masked"" />       <column name=""password"" dump=""replace"" replacement=""test"" />   </table>    <!-- Dump the ""document"" table but do not pass the ""AUTO_INCREMENT"" parameter to the SQL query.        Instead start to increment from the beginning -->   <table name=""document"" dump=""full"" keep-auto-increment=""false"" /> </slimdump> Conditions You may want to select only some rows. In that case you can define a condition on a table. Example: <?xml version=""1.0"" ?> <slimdump>   <!-- Dump all users whose usernames begin with foo -->   <table name=""user"" dump=""full"" condition=""`username` LIKE 'foo%'"" /> </slimdump> Dump modes The following modes are supported for the dump attribute: none - Table is not dumped at all. Makes sense if you use broad wildcards (see below) and then want to exclude a specific table. schema - Only the table schema will be dumped noblob - Will dump a NULL value for BLOB fields full - Whole table will be dumped masked - Replaces all chars with ""x"". Mostly makes sense when applied on the column level, for example for email addresses or user names. replace - Replace a column with a static value. Useful e.g. to replace passwords with a static one. Wildcards Of course you can use wildcards for table names (* for multiple characters, ? for a single character). Example: <?xml version=""1.0"" ?> <slimdump>   <!-- Default: dump all tables -->   <table name=""*"" dump=""full"" />    <!-- Dump all tables beginning with ""a_"" as schema -->   <table name=""a_*"" dump=""schema"" />    <!-- Dump ""big_blob_table"" without blobs -->   <table name=""big_blob_table"" dump=""noblob"" />    <!-- Do not dump any tables ending with ""_test"" -->   <table name=""*_test"" dump=""none"" /> </slimdump> This is a valid configuration. If more than one instruction matches a specific table name, the most specific one will be used. E. g. if you have definitions for blog_* and blog_author, the latter will be used for your author table, independent of their sequence order in the config. Other databases Currently only MySQL is supported. But feel free to port it to the database of your needs. Development Building the Phar Download Box into the project root: curl -LSs https://box-project.github.io/box2/installer.php | php  Install dependencies via Composer: php composer.phar install  Start the Phar build: ./box.phar build -v  Use slimdump as Phar: ./slimdump.phar {DSN} {config-file}  Tests You can execute the phpunit-tests by calling vendor/bin/phpunit. Credits, Copyright and License This tool was started at webfactory GmbH in Bonn by mpdude. http://www.webfactory.de http://twitter.com/webfactory Copyright 2014-2015 webfactory GmbH, Bonn. Code released under the MIT license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/webfactory/slimdump"	"An easy dumper tool for MySQL."	"true"
"Miscellaneous"	"Spork"	"https://github.com/kriswallsmith/spork"	"A process forking library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"565"	"42"	"44"	"GitHub - kriswallsmith/spork: Experimental library for forking PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 42 Star 565 Fork 44 kriswallsmith/spork Code Issues 14 Pull requests 10 Pulse Graphs Experimental library for forking PHP 99 commits 1 branch 3 releases 8 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.3 v0.2 v0.1 Nothing to show New pull request Latest commit 530fcf5 May 18, 2015 kriswallsmith added changelog Permalink Failed to load latest commit information. src/Spork added factory May 18, 2015 tests removed unused use statements May 18, 2015 .gitignore initial commit Apr 9, 2012 .travis.yml Added PHP 5.5 to travis. Feb 7, 2014 CHANGELOG.md added changelog May 18, 2015 LICENSE updated license headers Mar 20, 2013 README.md fixed readme example (closes #5) Jun 6, 2012 composer.json Replaced the ""Fifo"" class with the ""SharedMem"" class, which utilizes … Apr 22, 2015 phpunit.xml.dist initial commit Apr 10, 2012 README.md Spork: PHP on a Fork <?php  $manager = new Spork\ProcessManager(); $manager->fork(function() {     // do something in another process!     return 'Hello from '.getmypid(); })->then(function(Spork\Fork $fork) {     // do something in the parent process when it's done!     echo ""{$fork->getPid()} says '{$fork->getResult()}'\n""; }); Example: Upload images to your CDN Feed an iterator into the process manager and it will break the job into multiple batches and spread them across many processes. <?php  $files = new RecursiveDirectoryIterator('/path/to/images'); $files = new RecursiveIteratorIterator($files);  $manager->process($files, function(SplFileInfo $file) {     // upload this file }); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kriswallsmith/spork"	"A process forking library."	"true"
"Miscellaneous"	"Sslurp"	"https://github.com/EvanDotPro/Sslurp"	"A library that makes dealing with SSL suck less."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"58"	"6"	"9"	"GitHub - EvanDotPro/Sslurp: Sslurp is a simple library which aims to make properly dealing with SSL in PHP suck less. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 58 Fork 9 EvanDotPro/Sslurp Code Issues 4 Pull requests 4 Pulse Graphs Sslurp is a simple library which aims to make properly dealing with SSL in PHP suck less. 70 commits 1 branch 0 releases Fetching contributors PHP 99.1% Shell 0.9% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 8daf3d2 Feb 5, 2015 EvanDotPro Merge pull request #4 from sasezaki/patch-1 … add PHP 5.5, 5.6 to .travis.yml Permalink Failed to load latest commit information. bin update bin tool to be a bit more sensible Nov 1, 2013 data Add Equifax_Secure_CA.pem root certificate Sep 11, 2012 src/Sslurp Update pin for mxr.mozilla.org Jun 26, 2014 test Update test/coverage-checker Dec 6, 2012 .travis.yml add PHP 5.5, 5.6 to .travis.yml Aug 29, 2014 LICENSE Update LICENSE Jul 25, 2013 Module.php Add Module.php so Sslurp can easily be loaded as a ZF2 module. Sep 11, 2012 README.md update bin tool to be a bit more sensible Oct 31, 2013 autoload_classmap.php Refactor API to prepare for bundle-update feature Sep 17, 2012 autoload_function.php Make autoload_function.php be php-cs-fixer friendly Sep 12, 2012 autoload_register.php Initial commit Sep 11, 2012 composer.json Add ext-openssl to composer.json Sep 18, 2012 README.md Sslurp v1.0 by Evan Coury Introduction Dealing with SSL properly in PHP is a pain in the ass and completely insecure by default. Sslurp aims to make it easier to use SSL in PHP safely and securely. Sslurp can be used as a stand-alone library, CLI tool, or a ZF2 module. Note: Sslurp requires PHP with OpenSSL support. This is standard in most Linux distributions' PHP packages, otherwise you need to compile PHP using --with-openssl[=DIR]. Features / Usage Root CA bundle management Sslurp provides CLI and OOP interfaces for generating a trusted root Certificate Authority (CA) bundle using certdata.txt from the source tree of Mozilla's Network Security Services (NSS) libraries and keeping it up-to-date. The resulting root CA bundle includes the certificates vetted according to the Mozilla Root Certificate Program — the same root CA bundle trusted by cURL, Firefox, Chrome, and many other applications, libraries, languages, and operating systems. Sslurp takes additional steps to protect against MITM attacks while fetching certdata.txt from Mozilla's source tree, ensuring that the generated bundle is truly authentic. When connecting to Mozilla's mxr.mozilla.org domain to fetch the updated certdata.txt, Sslurp forces the use of verified SSL. Sslurp uses the following process to establish the initial trust of the SSL certificate on mxr.mozilla.org: Check the SSL_CERT_FILE environment variable (used by OpenSSL). If the value is the path to a readable file and valid certificate bundle, Sslurp will use it. If the SSL_CERT_FILE is not set or points to a non-existent / invalid certificate bundle, Sslurp will search several known/expected locations for the root CA bundle and use the first valid bundle found. If a valid bundle is not found in any of the expected paths, Sslurp will finally fall back to using a bundled, pre-verified copy of the root CA's public key which established trust for the mxr.mozilla.org certificate (Equifax Secure Certificate Authority at least until November 2013). As if that's not enough, Sslurp additionally makes use of public key pinning to further authenticate the authenticity of communications with Mozilla's mxr.mozilla.org domain. If the public key pin for mxr.mozilla.org changes before the expiration date of the current certificate, Sslurp will being to throw an exception, and refuse to update the root CA bundle. If the public key pin changes within the final month or after the expiration date of their current certificate (November, 2013), Sslurp will begin throwing a PHP notice encouraging you to update your copy of Sslurp to get the latest pin. You are STRONGLY ENCOURAGED to be using the latest version of Sslurp at all times. CLI root CA bundle updater ./bin/update-ca-bundle is a handy command-line tool for fetching, building, and subsequently updating a root CA bundle in PEM format for use with PHP's OpenSSL support, curl, libcurl, php_curl, etc. The output generated is fully compatible with the mk-ca-bundle.pl which is used to generate cURL's trusted bundle. Sslurp Root CA Bundle Updater  Usage:  bin/update-ca-bundle [--stdout]  bin/update-ca-bundle -o[output_file]  Options  -o         Path/filename to the file to (over)write the updated root CA bundle. Defaults to ca-bundle.pem  --stdout   Do not write file, send output to stdout instead.  Using Sslurp as a library In addition to the CLI tool, Sslurp can be used as a library through the OOP interface. The source is the API documentation. <?php require_once 'vendor/Sslurp/autoload_register.php';  $bundle = new \Sslurp\CaRootPemBundle('ca-bundle.pem');  if ($bundle->isLatest()) {     echo 'Your CA root bundle is up to date!' . PHP_EOL; } else {     echo 'WARNING! Your CA root bundle is out of date!' . PHP_EOL        . 'Local CA root bundle is version ' . $bundle->getVersion() . '. '        . 'Latest version available from Mozilla is ' . $bundle->getMozillaCertData()->getVersion() . '.' . PHP_EOL;      echo 'Updating...';     $bundle->update();     echo ""\tDone!"" . PHP_EOL; } Installation Composer / Packagist ./composer.phar require evandotpro/sslurp  Normal The ./bin/update-ca-bundle CLI tool will ""just work"" out of the box. Sslurp can easily be used in any existing project, framework, or library. To use Sslurp as a library in your project, the easiest method is to simply include the autoload_register.php file: require_once 'vendor/Sslurp/autoload_register.php'; Alternatively, if you project supports loading classmap arrays, you may fetch the classmap without registering an additional SPL autoloader: $classmap = include 'vendor/Sslurp/autoload_classmap.php'; // Register $classmap with your project's existing classmap autoloader If you have an existing SPL autoloader that allows adding a callable to a stack instead of directly registering the classmap array, you have the option of simply getting a closure which can autoload the Sslurp classes: $sslurpLoader = include 'vendor/Sslurp/autoload_function.php'; // $sslurpLoader is a closure that can be registered with an existing autoloader To-Do Paranoia level 1000 - Test environment for the ability to call the OpenSSL executable, and if possible, make use of OCSP to further verify the validity of the mxr.mozilla.org domain. License Sslurp is released under the BSD license. See the included LICENSE file. The generated root CA bundle file is simply a converted version of the original and as such, it is licensed under the same licenses as the Mozilla source: MPL v2.0, GPL v2.0 or LGPL 2.1. See nss/COPYING for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/EvanDotPro/Sslurp"	"A library that makes dealing with SSL suck less."	"true"
"Miscellaneous"	"SuperClosure"	"https://github.com/jeremeamia/super_closure"	"A library that allows Closures to be serialized."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"523"	"24"	"49"	"GitHub - jeremeamia/super_closure: Serialize closures with this uncanny PHP library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 523 Fork 49 jeremeamia/super_closure Code Issues 5 Pull requests 0 Pulse Graphs Serialize closures with this uncanny PHP library. 157 commits 5 branches 13 releases 10 contributors PHP 99.4% Makefile 0.6% PHP Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.8 1.0 2.0 2.1 master Nothing to show 2.2.0 2.1.0 2.0.0 2.0.0-beta.1 2.0.0-alpha2 2.0-alpha1 1.0.2 1.0.1 1.0.0 0.9.2 0.9.1 0.9.0 0.8.0 Nothing to show New pull request Latest commit 6fe8ad0 Feb 28, 2016 jeremeamia Merge pull request #82 from jrbasso/patch-1 … Added JsonSerializer to the list of who is using Permalink Failed to load latest commit information. src Drop our custom hash_equals for symfony/polyfill-php56 Dec 5, 2015 tests Merge pull request #53 from gmo/bugfix/unserialization Dec 5, 2015 .gitattributes Update .gitattributes Dec 5, 2015 .gitignore Updated .ignore Dec 5, 2015 .travis.yml Allow HHVM to fail Dec 5, 2015 LICENSE.md Updated the year in the license file Jan 25, 2015 Makefile Updates to metafiles. Removing Code Climate stuff Dec 2, 2015 README.md Added JsonSerializer to the list of who is using Feb 28, 2016 composer.json Use newer ^ for versions Dec 5, 2015 phpunit.xml.dist Rename phpunit.xml to phpunit.xml.dist Dec 5, 2015 README.md PHP SuperClosure – Version 2 A PHP Library for serializing closures and anonymous functions. Introduction Once upon a time, I tried to serialize a PHP Closure object. As you can probably guess, it doesn't work at all. In fact, you get a very specific error message from the PHP Runtime: Uncaught exception 'Exception' with message 'Serialization of 'Closure' is not allowed' Even though serializing closures is ""not allowed"" by PHP, the SuperClosure library makes it possible. Here's the way you use it: use SuperClosure\Serializer;  $serializer = new Serializer();  $greeting = 'Hello'; $hello = function ($name = 'World') use ($greeting) {     echo ""{$greeting}, {$name}!\n""; };  $hello('Jeremy'); //> Hello, Jeremy!  $serialized = $serializer->serialize($hello); // ... $unserialized = $serializer->unserialize($serialized);  $unserialized('Jeremy'); //> Hello, Jeremy! Yep, pretty cool, right? Features SuperClosure comes with two different Closure Analyzers, which each support different features regarding the serialization of closures. The TokenAnalyzer is not as robust as the AstAnalyzer, but it is around 20-25 times faster. Using the table below, and keeping in mind what your closure's code looks like, you should choose the fastest analyzer that supports the features you need. Supported Features Via AstAnalyzer Via TokenAnalyzer Regular closures (anonymous functions) $fn = function (...) {...}; Yes Yes Closures with context $fn = function () use ($a, $b, ...) {...}; Yes Yes Recursive closures $fn = function () use (&$fn, ...) {...}; Yes Yes Closures bound to an object $fn = function () {$this->something(); ...}; Yes Yes Closures scoped to an object $fn = function () {self::something(); ...}; Yes Yes Static closures (i.e, preserves the `static`-ness) $fn = static function () {...}; Yes -- Closures with class name in params $fn = function (Foo $foo) {...}; Yes -- Closures with class name in body $fn = function () {$foo = new Foo; ...}; Yes -- Closures with magic constants $fn = function () {$file = __FILE__; ...}; Yes -- Performance Slow Fast Caveats For any variables used by reference (e.g., function () use (&$vars, &$like, &$these) {…}), the references are not maintained after serialization. The only exception to this is recursive closure references. If you have two closures defined on a single line (why would you do this anyway?), you will not be able to serialize either one since it is ambiguous which closure's code should be parsed (they are anonymous functions after all). Warning: The eval() function is required to unserialize the closure. This functions is considered dangerous by many, so you will have to evaluate what precautions you may need to take when using this library. You should only unserialize closures retrieved from a trusted source, otherwise you are opening yourself up to code injection attacks. It is a good idea sign serialized closures if you plan on storing or transporting them. Read the Signing Closures section below for details on how to do this. Cannot serialize closures that are defined within eval()'d code. This includes re-serializing a closure that has been unserialized. Analyzers You can choose the analyzer you want to use when you instantiate the Serializer. If you do not specify one, the AstAnalyzer is used by default, since it has the most capabilities. use SuperClosure\Serializer; use SuperClosure\Analyzer\AstAnalyzer; use SuperClosure\Analyzer\TokenAnalyzer;  // Use the default analyzer. $serializer = new Serializer();  // Explicitly choose an analyzer. $serializer = new Serializer(new AstAnalyzer()); // OR $serializer = new Serializer(new TokenAnalyzer()); Analyzers are also useful on their own if you are just looking to do some introspection on a Closure object. Check out what is returned when using the AstAnalyzer: use SuperClosure\Analyzer\AstAnalyzer;  class Calculator {     public function getAdder($operand)     {         return function ($number) use ($operand) {             return $number + $operand;         };     } }  $closure = (new Calculator)->getAdder(5); $analyzer = new AstAnalyzer();  var_dump($analyzer->analyze($closure)); // array(10) { // 'reflection' => class ReflectionFunction#5 (1) {...} // 'code' => string(68) ""function ($number) use($operand) { // return $number + $operand; // };"" // 'hasThis' => bool(false) // 'context' => array(1) { // 'operand' => int(5) // } // 'hasRefs' => bool(false) // 'binding' => class Calculator#2 (0) {...} // 'scope' => string(10) ""Calculator"" // 'isStatic' => bool(false) // 'ast' => class PhpParser\Node\Expr\Closure#13 (2) {...} // 'location' => array(8) { // 'class' => string(11) ""\Calculator"" // 'directory' => string(47) ""/Users/lindblom/Projects/{...}/SuperClosureTest"" // 'file' => string(58) ""/Users/lindblom/Projects/{...}/SuperClosureTest/simple.php"" // 'function' => string(9) ""{closure}"" // 'line' => int(11) // 'method' => string(22) ""\Calculator::{closure}"" // 'namespace' => NULL // 'trait' => NULL // } // } Signing Closures Version 2.1+ of SuperClosure allows you to specify a signing key, when you instantiate the Serializer. Doing this will configure your Serializer to sign any closures you serialize and verify the signatures of any closures you unserialize. Doing this can help protect you from code injection attacks that could potentially happen if someone tampered with a serialized closure. Remember to keep your signing key secret. $serializer1 = new SuperClosure\Serializer(null, $yourSecretSigningKey); $data = $serializer1->serialize(function () {echo ""Hello!\n"";}); echo $data . ""\n""; // %rv9zNtTArySx/1803fgk3rPS1RO4uOPPaoZfTRWp554=C:32:""SuperClosure\Serializa...  $serializer2 = new SuperClosure\Serializer(null, $incorrectKey); try {     $fn = $serializer2->unserialize($data); } catch (SuperClosure\Exception\ClosureUnserializationException $e) {     echo $e->getMessage() . ""\n""; } // The signature of the closure's data is invalid, which means the serialized // closure has been modified and is unsafe to unserialize. Installation To install the Super Closure library in your project using Composer, simply require the project with Composer: $ composer require jeremeamia/superclosure You may of course manually update your require block if you so choose: {     ""require"": {         ""jeremeamia/superclosure"": ""^2.0""     } } Please visit the Composer homepage for more information about how to use Composer. Why would I need to serialize a closure? Well, since you are here looking at this README, you may already have a use case in mind. Even though this concept began as an experiment, there have been some use cases that have come up in the wild. For example, in a video about Laravel and IronMQ by UserScape, at about the 7:50 mark they show how you can push a closure onto a queue as a job so that it can be executed by a worker. This is nice because you do not have to create a whole class for a job that might be really simple. Or... you might have a dependency injection container or router object that is built by writing closures. If you wanted to cache that, you would need to be able to serialize it. In general, however, serializing closures should probably be avoided. Tell me about how this project started It all started back in the beginning of 2010 when PHP 5.3 was starting to gain traction. I set out to prove that serializing a closure could be done, despite that PHP wouldn't let me do it. I wrote a blog post called Extending PHP 5.3 Closures with Serialization and Reflection on my former employers' blog, HTMList, showing how it could be done. I also released the code on GitHub. Since then, I've made a few iterations on the code, and the most recent iterations have been more robust, thanks to the usage of the fabulous nikic/php-parser library. Who is using SuperClosure? Laravel - Serializes a closure to potentially push onto a job queue. HTTP Mock for PHP - Serialize a closure to send to remote server within a test workflow. Jumper - Serialize a closure to run on remote host via SSH. nicmart/Benchmark - Uses the ClosureParser to display a benchmarked Closure's code. florianv/business - Serializes special days to store business days definitions. zumba/json-serializer - Serializes PHP variables into JSON format. Please let me know if and how your project uses Super Closure. Alternatives This year the Opis Closure library has been introduced, that also provides the ability to serialize a closure. You should check it out as well and see which one suits your needs the best. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jeremeamia/super_closure"	"A library that allows Closures to be serialized."	"true"
"Miscellaneous"	"Symfony VarDumper"	"http://symfony.com/doc/current/components/var_dumper/introduction.html"	"A variable dumper component (SF2)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"173"	"10"	"20"	"GitHub - symfony/var-dumper: [READ-ONLY] Subtree split of the Symfony VarDumper Component Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 173 Fork 20 symfony/var-dumper Code Pull requests 3 Pulse Graphs [READ-ONLY] Subtree split of the Symfony VarDumper Component https://github.com/symfony/symfony 343 commits 6 branches 59 releases 34 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.6 2.7 2.8 3.0 3.1 master Nothing to show v3.1.2 v3.1.1 v3.1.0 v3.1.0-RC1 v3.1.0-BETA1 v3.0.8 v3.0.7 v3.0.6 v3.0.5 v3.0.4 v3.0.3 v3.0.2 v3.0.1 v3.0.0 v3.0.0-BETA1 v2.8.8 v2.8.7 v2.8.6 v2.8.5 v2.8.4 v2.8.3 v2.8.2 v2.8.1 v2.8.0 v2.8.0-BETA1 v2.7.15 v2.7.14 v2.7.13 v2.7.12 v2.7.11 v2.7.10 v2.7.9 v2.7.8 v2.7.7 v2.7.6 v2.7.5 v2.7.4 v2.7.3 v2.7.2 v2.7.1 v2.7.0 v2.7.0-BETA2 v2.7.0-BETA1 v2.6.13 v2.6.12 v2.6.11 v2.6.10 v2.6.9 v2.6.8 v2.6.7 v2.6.6 v2.6.5 v2.6.4 v2.6.3 v2.6.2 v2.6.1 v2.6.0 v2.6.0-BETA2 v2.6.0-BETA1 Nothing to show New pull request Latest commit 3743fa6 Jul 10, 2016 nicolas-grekas Merge branch '3.1' … * 3.1:   [HttpKernel] fixed internal subrequests having an if-modified-since-header   [Security] Fix deprecated usage of DigestAuthenticationEntryPoint::getKey() in DigestAuthenticationListener   [Validator] Added additional MasterCard range to the CardSchemeValidator   Make the exception message more clear.   [Form] fixed bug - name in ButtonBuilder   [DoctrineBridge] added missing error code for constraint.   [ClassLoader] Fix declared classes being computed when not needed   [varDumper] Fix missing usage of ExceptionCaster::$traceArgs Permalink Failed to load latest commit information. Caster Merge branch '3.1' Jul 10, 2016 Cloner Merge branch '3.1' Jun 29, 2016 Dumper fixed CS Jun 29, 2016 Exception Add more callable type hints Oct 5, 2015 Resources/functions [DebugBundle] adjust after review Sep 23, 2014 Test [VarDumper] Add flags to allow fine tuning dumps representation Jan 13, 2016 Tests Merge branch '3.1' Jul 5, 2016 .gitignore [VarDumper] Ignore /vendor/ directory in git Feb 17, 2015 CHANGELOG.md Added missing changelog entry Apr 3, 2015 LICENSE updated copyright year Jan 3, 2016 README.md Fix typo in VarDumper README Apr 22, 2016 VarDumper.php Add more callable type hints Oct 5, 2015 composer.json updated version to 3.2 May 13, 2016 phpunit.xml.dist [VarDumper] Add flags to allow fine tuning dumps representation Jan 13, 2016 README.md VarDumper Component The VarDumper component provides mechanisms for walking through any arbitrary PHP variable. Built on top, it provides a better dump() function that you can use instead of var_dump. Resources Documentation Contributing Report issues and send Pull Requests in the main Symfony repository Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/symfony/var-dumper"	"A variable dumper component (SF2)."	"true"
"Miscellaneous"	"Underscore"	"http://anahkiasen.github.io/underscore-php/"	"A PHP port of the Underscore JS library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"585"	"39"	"61"	"GitHub - Anahkiasen/underscore-php: A redacted PHP port of Underscore.js with additional functions and goodies – Available for Composer and Laravel Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 39 Star 585 Fork 61 Anahkiasen/underscore-php Code Issues 23 Pull requests 4 Wiki Pulse Graphs A redacted PHP port of Underscore.js with additional functions and goodies – Available for Composer and Laravel http://anahkiasen.github.com/underscore-php/ 360 commits 3 branches 10 releases 18 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages master Nothing to show 2.0.0 1.3.1 1.3.0 1.2.3 1.2.2 1.2.1 1.2.0 1.1.1 1.1.0 1.0.0 Nothing to show New pull request Latest commit 2f979ca Dec 21, 2015 Anahkiasen Merge pull request #81 from tamakiii/impl-index-by-function-on-array-… … …type  Implement indexBy() function on Types\Arrays Permalink Failed to load latest commit information. config CS fixe Aug 12, 2015 src lint Dec 21, 2015 tests Merge branch 'lint' into impl-index-by-function-on-array-type Dec 21, 2015 .gitattributes Add gitattributes file Aug 12, 2015 .gitignore Code tweaks Jan 16, 2015 .php_cs Update PHP-CS-Fixer Aug 12, 2015 .travis.yml Add PCS to tests Aug 12, 2015 CHANGELOG.md Update CHANGELOG.md Aug 12, 2015 README.md Fix typo and syntax highlighting in README.md Jul 25, 2015 composer.json Add PCS to tests Aug 12, 2015 helpers.php Prevent conflicts with other 'underscore' functions Apr 10, 2014 phpunit.xml Remove extra character Jan 16, 2015 README.md Underscore.php The PHP manipulation toolbelt First off : Underscore.php is not a PHP port of Underscore.js (well ok I mean it was at first). It's doesn't aim to blatantly port its methods, but more port its philosophy. It's a full-on PHP manipulation toolbet sugar-coated by an elegant syntax directly inspired by the Laravel framework. Out through the window went the infamous __(), replaced by methods and class names that are meant to be read like sentences à la Rails : Arrays::from($article)->sortBy('author')->toJSON(). It features a good hundred of methods for all kinds of types : strings, objects, arrays, functions, integers, etc., and provides a parsing class that help switching from one type to the other mid-course. Oh also it's growing all the time. The cherry on top ? It wraps nicely around native PHP functions meaning Strings::replace is actually a dynamic call to str_replace but with the benefit of allowed chaining and a finally consistant argument order (all functions in Underscore put the subject as the first argument, NO MATTER WHAT). It works both as a stand-alone via Composer or as a bundle for the Laravel framework. So you know, you don't really have any excuse. Install Underscore To install Underscore.php simply run composer require anahkiasen/underscore-php. Note that Underscore's type classes (Arrays/Strings/etc) are by default namespaced in the Types folder, so to use Arrays, you would do the following : use Underscore\Types\Arrays; Using Underscore It can be used both as a static class, and an Object-Oriented class, so both the following are valid : $array = array(1, 2, 3);  // One-off calls to helpers Arrays::each($array, function($value) { return $value * $value; }) // Square the array Function::once($myFunction) // Only allow the function to be called once Number::paddingLeft(5, 5) // Returns '00005' Object::methods($myObject) // Return the object's methods Strings::length('foobar') // Returns 6  // Or chain calls with the 'from' method Arrays::from($array)->filter(...)->sort(...)->get(2)  // Which does this in the background $array = new Arrays($array); $array->filter(...)->sort(...)->get(2) For those nostalgic of ye old __() a generic Underscore class is provided that is able to go and fetch methods in all of Underscore.php's methods. For this it looks into the methods it knows and analyzes the subject of the method (meaning if you do Underscore::contains('foobar', 'foo') it knows you're not looking for Arrays::contains). On types : it's important to note that using a specific type class to create an Underscore repository will convert the type of provided subject. Say you have an object and do new Arrays($myObject) – this will convert the object to an array and allow you to use Arrays methods on it. For this Underscore uses its Parse class's methods that for the most part just type cast and return (like this (array) $object) but it also sometimes go the extra mile to understand what you want to do : if you convert an array to a string, it will transform it to JSON, if you transform an array into an integer, it returns the size of the array, etc. The core concept is this : static calls return values from their methods, while chained calls update the value of the object they're working on. Which means that an Underscore object don't return its value until you call the ->obtain method on it — until then you can chain as long as you want, it will remain an object. The exception are certains properties that are considered breakers and that will return the object's value. An example is Arrays->get. Note that since all data passed to Underscore is transformed into an object, you can do this sort of things, plus the power of chained methods, it all makes the manipulation of data a breeze. $array = new Arrays(['foo' => 'bar']);  echo $array->foo // Returns 'bar'  $array->bis = 'ter' $array->obtain() // Returns array('foo' => 'bar', 'bis' => 'ter') Customizing Underscore Underscore.php provides the ability to extend any class with custom functions so go crazy. Don't forget that if you think you have a function anybody could enjoy, do a pull request, let everyone enjoy it ! Strings::extend('summary', function($string) {   return Strings::limitWords($string, 10, '... — click to read more'); });  Strings::from($article->content)->summary()->title() You can also give custom aliases to all of Underscore's methods, in the provided config file. Just add entries to the aliases option, the key being the alias, and the value being the method to point to. Extendability Underscore.php's classes are extendable as well in an OOP sense. You can update an Underscore repository with the setSubject method (or directly via $this->subject = granted you return $this at the end). When creating an Underscore repository, by default it's subject is an empty string, you can change that by returning whatever you want in the getDefault method. class Users extends Arrays {   public function getDefault()   {     return 'foobar';   }    public function getUsers()   {     // Fetch data from anywhere      return $this->setSubject($myArrayOfUsers);   } }  $users = new Users; // Users holds 'foobar' $users->getUsers()->sort('name')->clean()->toCSV()  // Same as above Users::create()->getUsers()->sort('name')->clean()->toCSV() It is important to not panic about the mass of methods present in Underscore and the dangers extending one of the Types would cause : the methods aren't contained in the classes themselves but in methods repositories. So if you extend the Strings class and want to have a length method on your class that has a completely different meaning than Strings::length, it won't cause any signature conflict or anything. Also note that Underscore method router is dynamic so if your subject is an array and mid course becomes a string, Underscore will always find the right class to call, no matter what you extended in the first place. Try to keep track of your subject though : if your subject becomes a string, calling per example ->map will return an error. Call to native methods Underscore natively extends PHP, so it can automatically reference original PHP functions when the context matches. Now, PHP by itself doesn't have a lot of conventions so Arrays:: look for array_ functions, Strings:: look for str_ plus a handful of other hardcoded redirect, but that's it. The advantage is obviously that it allows chaining on a lot of otherwise one-off functions or that only work by reference. Arrays::diff($array, $array2, $array3) // Calls `array_diff` Arrays::from($array)->diff($array2, $array3)->merge($array4) // Calls `array_diff` then `array_merge` on the result Documentation You can find a detailed summary of all classes and methods in the repo's wiki or the official page. The changelog is available in the CHANGELOG file. About Underscore.php There is technically another port of Underscore.js to PHP available on Github — I first discovered it when I saw it was for a time used on Laravel 4. I quickly grew disapoint of what a mess the code was, the lack of updates, and the 1:1 mentality that went behind it. This revamped Underscore.php doesn't aim to be a direct port of Underscore.js. It sometimes omits methods that aren't relevant to PHP developers, rename others to match terms that are more common to them, provides a richer syntax, adds a whole lot of methods, and leaves room for future ones to be added all the time — whereas the previous port quickly recoded all JS methods to PHP and left it at that. If you come from Javascript and are confused by some of the changes, don't put all the blame on me for trying to mess everything up. A basic example is the map function : in PHP it has a completely different sense because there exists an array_map function that basically does what __::invoke does in JS. So map is now Arrays::each. Always keep in mind this was made for PHP developpers first, and differences do exist between the two to accomdate the common terms in PHP. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Anahkiasen/underscore-php"	"A PHP port of the Underscore JS library."	"true"
"Miscellaneous"	"Whoops"	"https://github.com/filp/whoops"	"A pretty error handling library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3302"	"161"	"316"	"GitHub - filp/whoops: PHP errors for cool kids Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 161 Star 3,302 Fork 316 filp/whoops Code Issues 6 Pull requests 11 Wiki Pulse Graphs PHP errors for cool kids http://filp.github.io/whoops/ 792 commits 4 branches 30 releases 72 contributors PHP 91.5% CSS 6.1% JavaScript 2.4% PHP CSS JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/frame-args gh-pages master v1 Nothing to show 2.1.2 2.1.1 2.1.0 2.0.0 2.0.0-alpha2 2.0.0-alpha1 1.1.10 1.1.9 1.1.8 1.1.7 1.1.6 1.1.5 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.1.0-rc 1.0.10 1.0.9 1.0.8 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.1 1.0.0 0.9.0 0.8.4 Nothing to show New pull request Latest commit 8828aaa May 6, 2016 denis-sokolov Merge pull request #415 from websiteduck/patch-1 … Make code-block use tab size of 4 instead of browser default of 8 Permalink Failed to load latest commit information. docs Note about Sublime protocol on OS X Feb 16, 2016 examples Update ajax only example for Whoops 2, fix #381 Feb 5, 2016 src/Whoops Make code-block use tab size of 4 instead of browser default of 8 May 6, 2016 tests Fix tests Mar 13, 2016 .editorconfig Add .editorconfig file Jan 15, 2016 .gitattributes Add .editorconfig file Jan 15, 2016 .gitignore Cleanup lock file May 28, 2015 .scrutinizer.yml Remove deprecated Zend integration Nov 22, 2015 .travis.yml Cache composer packages and secure PHP versions Mar 12, 2016 CHANGELOG.md Changelog for 2.1.0 Mar 13, 2016 CONTRIBUTING.md Contributing: add a note about updating documentation Mar 17, 2014 LICENSE.md Prep for Packagist submission Mar 14, 2013 README.md Add Graham and Markus to Readme Feb 16, 2016 composer.json Require symfony/var-dumper for development Feb 18, 2016 phpunit.xml.dist Remove deprecated Zend integration Nov 22, 2015 README.md whoops PHP errors for cool kids whoops is an error handler framework for PHP. Out-of-the-box, it provides a pretty error interface that helps you debug your web projects, but at heart it's a simple yet powerful stacked error handling system. Features Flexible, stack-based error handling Stand-alone library with (currently) no required dependencies Simple API for dealing with exceptions, trace frames & their data Includes a pretty rad error page for your webapp projects Includes the ability to open referenced files directly in your editor and IDE Includes handlers for different response formats (JSON, XML, SOAP) Easy to extend and integrate with existing libraries Clean, well-structured & tested code-base Installing If you use Laravel 4, you already have Whoops. There are also community-provided instructions on how to integrate Whoops into Silex 1, Silex 2, Phalcon, Laravel 3, Laravel 5, CakePHP 2, CakePHP 3, Zend Framework 2, Yii 1, FuelPHP, Slim, Pimple, or any framework consuming StackPHP middlewares or PSR-7 middlewares. If you are not using any of these frameworks, here's a very simple way to install: Use Composer to install Whoops into your project: composer require filp/whoops Register the pretty handler in your code: $whoops = new \Whoops\Run; $whoops->pushHandler(new \Whoops\Handler\PrettyPageHandler); $whoops->register(); For more options, have a look at the example files in examples/ to get a feel for how things work. Also take a look at the API Documentation and the list of available handers below. You may also want to override some system calls Whoops does. To do that, extend Whoops\Util\SystemFacade, override functions that you want and pass it as the argument to the Run constructor. Available Handlers whoops currently ships with the following built-in handlers, available in the Whoops\Handler namespace: PrettyPageHandler - Shows a pretty error page when something goes pants-up PlainTextHandler - Outputs plain text message for use in CLI applications CallbackHandler - Wraps a closure or other callable as a handler. You do not need to use this handler explicitly, whoops will automatically wrap any closure or callable you pass to Whoops\Run::pushHandler JsonResponseHandler - Captures exceptions and returns information on them as a JSON string. Can be used to, for example, play nice with AJAX requests. XmlResponseHandler - Captures exceptions and returns information on them as a XML string. Can be used to, for example, play nice with AJAX requests. You can also use pluggable handlers, such as SOAP handler. Authors This library was primarily developed by Filipe Dobreira, and is currently maintained by Denis Sokolov. A lot of awesome fixes and enhancements were also sent in by various contributors. Special thanks to Graham Campbell and Markus Staab for continuous participation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/filp/whoops"	"A pretty error handling library."	"true"
"PHP Installation"	"HomeBrew PHP"	"https://github.com/Homebrew/homebrew-php"	"A PHP tap for HomeBrew."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2076"	"92"	"581"	"GitHub - Homebrew/homebrew-php: PHP OS X formulae for the Homebrew package manager Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 92 Star 2,076 Fork 581 Homebrew/homebrew-php Code Issues 61 Pull requests 15 Wiki Pulse Graphs 🌎 PHP OS X formulae for the Homebrew package manager 4,293 commits 1 branch 0 releases 345 contributors Ruby 100.0% Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 50e5aff Jul 7, 2016 BrewTestBot committed with ablyler php70-yaf: add 3.0.3 bottle. Permalink Failed to load latest commit information. .github Add pull request github template (#3170) May 18, 2016 Abstract Add --force flag to buildconf when building php from HEAD (#3341) Jul 6, 2016 Contributions Updated references from josegonzalez/php to Homebrew/homebrew-php. Apr 13, 2014 Formula php70-yaf: add 3.0.3 bottle. Jul 8, 2016 Requirements Prevent PHP 7.1 as beeing set as the default php formula (#3295) Jun 24, 2016 language Provide a high level composer method Feb 18, 2016 .travis.yml Disable hombrew analytics tracking on Travis Jun 25, 2016 CONTRIBUTING.md PHP 5.5.37 Jun 24, 2016 LICENSE LICENSE added Jan 1, 2016 README.md PHP 7.1.0-alpha.1 Jun 19, 2016 README.md Homebrew PHP A centralized repository for PHP-related brews. Bugs happen The more information you provide and the more detailed your report is, the easier it is for us to fix it. An example of the best practice(s) for filling out bug reports can be seen here: https://github.com/Homebrew/homebrew-php/issues/1225. Please refer to this section for more information. Common Issues Bugs inevitably happen - none of us are running EVERY conceivable setup - but hopefully the install process can be made smoother through the following tips: If you have recently upgraded your Mac OS version or Xcode, read this section. Upgrade your OS X to the latest patch version. So if you are on 10.9.0, upgrade to 10.9.2 etc. Ensure Xcode is installed and up to date. Run brew update. If you tapped an old version of homebrew-php or have an old brew installation, this may cause some installation issues. Run brew upgrade. This will upgrade all installed formulae. Sometimes an old version of a formula is installed and this breaks our dependency management. Unfortunately, there is currently no way to force Homebrew to upgrade only those we depend upon. This is a possible fix for those with libxml related compilation issues. If brew doctor complains about Error: Failed to import: homebrew-php-requirement or similar, you can find broken PHP requirement files using find $(brew --prefix)/Library/Formula -type l -name ""*requirement.rb"". Run this with the -delete flag if you are sure the results of the find contain only the files producing import failures. You can also remove them manually. If you upgraded to Mavericks 10.9.x, please also upgrade to the latest Xcode, 5.0.1 and make sure you re-install Command Line Tools: xcode-select --install On Mavericks 10.9.x, if xcode-select --install displays the error message Can't install the software because it is not currently available from the Software Update server., download Command Line Tools from Apple Developer. If you are using Xcode 4, install the Command Line Tools. If you think you have them installed, please ensure that an update of Xcode or OS X did not remove them. You can verify this by launching Xcode, opening preferences, going to the Downloads tab, and clicking the Install button: Delete your ~/.pearrc file before attempting to install a PHP version, as the pear step will fail if an existing, incompatible version exists. We try to detect and remove them ourselves, but sometimes this fails. Run brew doctor and fix any issues you can. If you are using Mountain Lion 10.8.x, please install XQuartz so that the png.h header exists for compilation of certain brews. Mountain Lion removes X11, which contained numerous headers. A permanent fix is forthcoming. If you upgraded to Mountain Lion 10.8.x, please also upgrade to the latest Xcode, 5.1. File an awesome bug report, using the information in the next section. If you have a failing install due to GD build test failed, try running the following before attempting to reinstall: brew rm freetype jpeg libpng gd zlib brew install freetype jpeg libpng gd zlib Doing all of these might be a hassle, but will more than likely ensure you either have a working install or get help as soon as possible. Common upgrade issues If you have recently upgraded your Mac OS X version or Xcode, you may have some compilation or missing libraries issues. The following information may help you solve most of the problems: Ensure you have properly upgraded CLT depending on your Xcode version. Proceed step by step to isolate the responsible formula. If you need to install php56 and php56-imagick, don't do brew install php56 php56-imagick. Just do brew install php56, ensure everything is working as expected, check the output of phpinfo(), restart your Apache server with sudo apachectl restart. Then you can install the next formula brew install php56-imagick. If php53, php55 or php56 build fails, remove all their dependencies and reinstall the formula. For instance: If brew install php56 fails, do the following: brew rm php56 && brew deps php56 | xargs brew rm. If brew install php56 --with-gmp fails, do the following: brew rm php56 && brew deps php56 --with-gmp | xargs brew rm. Then reinstall a clean version of the formula: brew update && brew upgrade && brew install php56. If an extension build fails, try also to remove all its dependencies and reinstall it. Sometimes it appears that a formula is not available anymore, do the following: brew tap --repair. Filing Bug Reports An example of the best practice(s) for filling out bug reports can be seen here: https://github.com/Homebrew/homebrew-php/issues/1225. Please include the following information in your bug report: OS X Version: eg. 10.7.3, 10.6.3 Homebrew Version: brew -v PHP Version in use: stock-apple, homebrew-php stable, homebrew-php devel, homebrew-php head, custom Xcode Version: 4.4, 4.3, 4.0, 3 etc. If you are on Mountain Lion 10.8.x, please also upgrade to the latest Xcode, 4.4. If you are using 4.3, verify whether you have the Command Line Tools installed as well. If on Snow Leopard, you may want to install the OS X GCC Installer. Output of gcc -v Output of php -v Installation logs for the formula in question A link to the gist created with brew gist-logs <formula-you-are-using> will contain these logs. Or, if brew gist-logs is not working: Output of brew install -v path/to/homebrew-php/the-formula-you-want-to-test.rb --with-your --opts-here within a gist. Please append any options you added to the brew install command. Output of brew doctor within a gist New bug reports will be created with a template of this information for you to fill in. This will help us diagnose your issues much quicker, as well as find similarities between different reported issues. Background This repository contains PHP-related formulae for Homebrew. (This replaces the PHP formulae that used to live under adamv's homebrew-alt repository.) The purpose of this repository is to allow PHP developers to quickly retrieve working, up-to-date formulae. The mainline Homebrew repositories are maintained by non-php developers, so testing/maintaining PHP-related brews has fallen by the wayside. If you are a PHP developer using Homebrew, please contribute to this repository. Requirements Homebrew Snow Leopard, Lion, Mountain Lion, Mavericks, or Yosemite. Untested everywhere else. The Homebrew dupes tap - brew tap homebrew/dupes The Homebrew versions tap - brew tap homebrew/versions Installation Setup the homebrew/dupes tap which has dependencies we need: $ brew tap homebrew/dupes Setup the homebrew/versions tap which has dependencies we need: $ brew tap homebrew/versions Then, run the following in your command-line: $ brew tap homebrew/homebrew-php Usage Note: For a list of available configuration options run: $ brew options php56 Once the tap is installed, you can install php53, php54, php55, php56, php70, php71, or any formulae you might need via: $ brew install php56 That's it! Please also follow the instructions from brew info at the end of the install to ensure you properly installed your PHP version. Installing Multiple Versions Using multiple PHP versions from homebrew-php is pretty straightforward. If using Apache, you will need to update the LoadModule call. For convenience, simply comment out the old PHP version: # /etc/apache2/httpd.conf # Swapping from PHP 5.5 to PHP 5.6 # $HOMEBREW_PREFIX is normally `/usr/local` # LoadModule php5_module    $HOMEBREW_PREFIX/Cellar/php55/5.5.18/libexec/apache2/libphp5.so LoadModule php5_module    $HOMEBREW_PREFIX/Cellar/php56/5.6.4/libexec/apache2/libphp5.so  If using FPM, you will need to unload the plist controlling php, or manually stop the daemon, via your command line: # Swapping from PHP 5.5 to PHP 5.6 # $HOMEBREW_PREFIX is normally `/usr/local` $ cp $HOMEBREW_PREFIX/Cellar/php56/5.6.4/homebrew.mxcl.php56.plist ~/Library/LaunchAgents/ $ launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.php55.plist $ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php56.plist If you would like to swap the PHP you use on the command line, you should update the $PATH variable in either your .profile, .zshrc, .bashrc or .bash_profile: # Swapping from PHP 5.5 to PHP 5.6 # export PATH=""$(brew --prefix homebrew/php/php55)/bin:$PATH"" export PATH=""$(brew --prefix homebrew/php/php56)/bin:$PATH""  Please be aware that you must make this type of change EACH time you swap between PHP minor versions. You will typically only need to update the Apache/FPM when upgrading your PHP patch version. PEAR Extensions Pear is no longer compiled by default, instead you need to install php with the --with-pear option, such as: brew install php56 --with-pear. Please note that all extensions installed with the included pear will be installed to the respective php's bin path. For example, supposing you installed PHP_CodeSniffer as follows: $ pear install PHP_CodeSniffer It would be nice to be able to use the phpcs command via command-line, or other utilities. You will need to add the installed php's bin directory to your path. The following would be added to your .bashrc or .bash_profile when running the php56 brew: export PATH=""$(brew --prefix php56)/bin:$PATH"" Some caveats: Remember to use the proper PHP version in that export. So if you installed the php55 formula, use php55 instead of php56 in the export. Updating your installed PHP will result in the binaries no longer existing within your path. In such cases, you will need to reinstall the pear extensions. Alternatives include installing pear outside of homebrew-php or using the homebrew-php version of your extension. Uninstalling your homebrew-php PHP formula will also remove the extensions. Contributing See Contributing Todo Proper PHP Versioning? See issue #1 Pull out all PHP-related brews from Homebrew License Copyright (c) 2012-2015 Jose Diaz-Gonzalez and other contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Homebrew/homebrew-php"	"A PHP tap for HomeBrew."	"true"
"PHP Installation"	"HomeBrew"	"http://brew.sh/"	"A package manager for OSX."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2020"	"111"	"590"	"GitHub - Homebrew/brew: The missing package manager for OS X Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 111 Star 2,020 Fork 590 Homebrew/brew Code Issues 29 Pull requests 27 Pulse Graphs 🍺 The missing package manager for OS X http://brew.sh 9,679 commits 1 branch 0 releases 453 contributors Ruby 88.4% HTML 4.5% Shell 4.1% Groff 3.0% Ruby HTML Shell Groff Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 91d32e7 Jul 15, 2016 MikeMcQuaid committed on GitHub Deprecate homebrew/binary. (#512) … We're moving more stuff to Homebrew Cask which is better maintained and run. Permalink Failed to load latest commit information. .github .github/*: point to Homebrew Evolution repository. (#259) May 19, 2016 Library Deprecate homebrew/binary. (#512) Jul 15, 2016 bin brew.{rb,sh}: move to Library/Homebrew. (#506) Jul 15, 2016 etc/bash_completion.d tap-info: improve Bash completion Jul 10, 2016 share Deprecate homebrew/binary. (#512) Jul 15, 2016 .gitignore add file directory for vendor Ruby Jul 11, 2016 .travis.yml travis: remove dead code Apr 12, 2016 .yardopts More API documentation. Aug 29, 2015 CODEOFCONDUCT.md CODEOFCONDUCT.md: phrasing May 8, 2015 LICENSE.txt LICENSE: year bump Dec 31, 2015 README.md README: add nijikon. Jun 13, 2016 README.md Homebrew Features, usage and installation instructions are summarised on the homepage. What Packages Are Available? Type brew search for a list. Or visit braumeister.org to browse packages online. Or use brew search --desc <keyword> to browse packages from the command line. More Documentation brew help, man brew or check our documentation. Troubleshooting First, please run brew update and brew doctor. Second, read the Troubleshooting Checklist. If you don't read these it will take us far longer to help you with your problem. Security Please report security issues to security@brew.sh. This is our PGP key which is valid until May 24, 2017. Key ID: 0xE33A3D3CCE59E297 Fingerprint: C657 8F76 2E23 441E C879 EC5C E33A 3D3C CE59 E297 Full key: https://keybase.io/homebrew/key.asc Who Are You? Homebrew's current maintainers are Misty De Meo, Andrew Janke, Xu Cheng, Tomasz Pajor, Mike McQuaid, Baptiste Fontaine, Brett Koonce, ilovezfs, Martin Afanasjew, Dominyk Tiller, Tim Smith and Alex Dunn. Former maintainers with significant contributions include Jack Nagel, Adam Vandenberg and Homebrew's creator: Max Howell. License Code is under the BSD 2 Clause (NetBSD) license. Documentation is under the Creative Commons Attribution license. Donations Homebrew is a non-profit project run entirely by unpaid volunteers. We need your funds to pay for software, hardware and hosting around continuous integration and future improvements to the project. Every donation will be spent on making Homebrew better for our users. Homebrew is a member of the Software Freedom Conservancy which provides us with an ability to receive tax-deductible, Homebrew earmarked donations (and many other services). Software Freedom Conservancy, Inc. is a 501(c)(3) organization incorporated in New York, and donations made to it are fully tax-deductible to the extent permitted by law. Donate with PayPal Donate by USA $ check from a USA bank: Make check payable to ""Software Freedom Conservancy, Inc."" and place ""Directed donation: Homebrew"" in the memo field. Checks should then be mailed to: Software Freedom Conservancy, Inc. 137 Montague ST STE 380 BROOKLYN, NY 11201 USA Donate by wire transfer: contact accounting@sfconservancy.org for wire transfer details. Donate with Flattr or PayPal Giving Fund: coming soon. Sponsors Our CI infrastructure was paid for by our Kickstarter supporters. Our CI infrastructure is hosted by The Positive Internet Company. Our bottles (binary packages) are hosted by Bintray. Secure password storage and syncing provided by 1Password for Teams by AgileBits Homebrew is a member of the Software Freedom Conservancy Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Homebrew/brew"	"A package manager for OSX."	"true"
"PHP Installation"	"PHP Brew"	"https://github.com/phpbrew/phpbrew"	"A PHP version manager and installer."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2368"	"112"	"199"	"GitHub - phpbrew/phpbrew: Brew & manage PHP versions in pure PHP at HOME Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 112 Star 2,368 Fork 199 phpbrew/phpbrew Code Issues 75 Pull requests 0 Wiki Pulse Graphs Brew & manage PHP versions in pure PHP at HOME http://phpbrew.github.io/phpbrew 2,746 commits 24 branches 97 releases 61 contributors Makefile 46.6% PHP 33.7% Shell 19.7% Makefile PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0 bash-rework develop ext-tests feature/apache-conf feature/distribution_url feature/new-apache-conf feature/patch feature/patchkit feature/release-list feature/unserialize fedora fix-different-root-dir fix-issues fix/some-fixes fix/503 fpm-setup fpm-support-php52 gh-pages issue/487 master patch-strip-param-detection system-php upgrade-cliframework Nothing to show 1.22.5 1.22.4 1.22.2 1.22.1 1.22.0 1.21.6 1.21.5 1.21.4 1.21.3 1.21.2 1.21.1 1.21.0 1.20.8 1.20.7 1.20.6 1.20.4 1.20.3 1.20.2 1.19.7 1.19.6 1.19.5 1.19.4 1.19.1 1.19.0 1.18.5 1.18.4 1.18.3 1.18.2 1.18.1 1.18.0 1.17.2 1.17.1 1.17.0 1.16.7 1.16.6 1.16.5 1.16.4 1.16.3 1.16.2 1.16.1 1.16.0 1.15.3 1.15.2 1.15.1 1.15.0 1.14.7 1.14.6 1.14.5 1.14.4 1.14.3 1.14.2 1.14.1 1.14.0 1.13.2 1.13.1 1.13.0 1.12.0 1.11.8 1.11.7 1.11.6 1.11.5 1.11.4 1.11.3 1.11.2 1.11.1 1.11.0 1.10.5 1.10.4 1.10.3 1.10.2 1.10.1 1.10.0 1.9.3 1.9.0 1.8.25 1.8.24 1.8.22 1.8.21 1.8.20 1.8.19 1.8.18 1.8.17 1.8.16 1.8.15 1.8.14 1.8.13 1.8.11 1.8.9 1.8.7 1.8.2 1.8.1 1.5.0 1.5.0-beta 1.3.1 1.2.3 1.2.1 1.2.0 Nothing to show New pull request Latest commit 8fc9610 Jul 14, 2016 c9s committed on GitHub Merge pull request #778 from morozov/mysql-sock … Use correct path for MySQL socket on Ubuntu. $paths[0] doesn't work, since array_filter() preserves indices. No need to check existence of all files. Permalink Failed to load latest commit information. .github update issue template Apr 28, 2016 assets add php7 info Dec 4, 2015 bin Release 1.21.5 May 9, 2016 build Keep build dir Dec 6, 2015 completion updates completion files Oct 27, 2015 flavors/command Import command flavor for genphp Sep 28, 2014 screenshots update screenshots Jun 13, 2016 scripts Remove old bump-version script Apr 23, 2016 sh Moved files to sh directory Jan 22, 2014 shell Add phpbrew fpm which command Jun 12, 2016 src/PhpBrew Use correct path for MySQL socket on Ubuntu. $paths[0] doesn't work, … Jul 14, 2016 tests fix ci tests Jul 10, 2016 .gitattributes Release 1.21.4 May 7, 2016 .gitignore Fix build Dec 7, 2015 .hhconfig Add .hhconfig for vim-hack plugin Sep 28, 2014 .travis.yml REMOVE ccache compiler cache content env var Jun 13, 2016 CHANGES.md Update phar Jun 13, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Dec 31, 2015 CONTRIBUTORS.md Replace patches using sed and perl with pure php. Dec 15, 2014 Doxyfile Update Doxyfile for QUIET mode Jul 12, 2012 HACKING.md Update Hacking doc Dec 6, 2015 LICENSE Happy New Year Jan 7, 2015 Makefile update phar file Dec 25, 2015 README.ja.md fix installing extra app command Jun 20, 2016 README.md style ci fix and status Jul 10, 2016 README.pt-br.md add file README.pt-br.md and translating Feb 29, 2016 build.xml Update phpunit.xml file for logging Jul 21, 2015 composer.json update branch alisa Jun 13, 2016 composer.lock Release 1.21.4 May 6, 2016 phpbrew Release 1.22.5 Jul 11, 2016 phpbrew.asc Add gpg signing rule in Makefile Dec 7, 2015 phpdox.xml Update ant build file Jul 21, 2015 phpmd.xml Update ant build file Jul 21, 2015 phprelease.ini Update release step Apr 23, 2016 phpunit.xml.dist Add PHPBREW_BIN to phpunit config May 4, 2016 todo.md update todo Dec 4, 2013 README.md PHPBrew Read this in other languages: English, Português - BR, 日本語. phpbrew builds and installs multiple version php(s) in your $HOME directory. What phpbrew can do for you: Configure options are simplified into variants, no worries about the path anymore! Build php with different variants like PDO, mysql, sqlite, debug ...etc. Compile apache php module and separate them by different versions. Build and install php(s) in your home directory, so you don't need root permission. Switch versions very easily and is integrated with bash/zsh shell. Automatic feature detection. Install & enable php extensions into current environment with ease. Install multiple php into system-wide environment. Path detection optimization for HomeBrew and MacPorts. Requirement Please see Requirement before you get started. you need to install some development packages for building PHP. INSTALL curl -L -O https://github.com/phpbrew/phpbrew/raw/master/phpbrew chmod +x phpbrew  # Move phpbrew to somewhere can be found by your $PATH sudo mv phpbrew /usr/bin/phpbrew QUICK START Please see Quick Start if you're impatient. :-p GETTING STARTED OK, I assume you have more time to work on this, this is a step-by-step tutorial that helps you get started. Setting up Init a bash script for your shell environment: phpbrew init Add these lines to your .bashrc or .zshrc file: [[ -e ~/.phpbrew/bashrc ]] && source ~/.phpbrew/bashrc If you're using system-wide phpbrew, you may setup a shared phpbrew root, for example: mkdir -p /opt/phpbrew phpbrew init --root=/opt/phpbrew Setting up lookup prefix You may setup your prefered default prefix for looking up libraries, available options are macports, homebrew, debian, ubuntu or a custom path: For Homebrew users: phpbrew lookup-prefix homebrew For Macports users: phpbrew lookup-prefix macports Basic usage To list known versions: phpbrew known  7.0: 7.0.3, 7.0.2, 7.0.1, 7.0.0 ... 5.6: 5.6.18, 5.6.17, 5.6.16, 5.6.15, 5.6.14, 5.6.13, 5.6.12, 5.6.11 ... 5.5: 5.5.32, 5.5.31, 5.5.30, 5.5.29, 5.5.28, 5.5.27, 5.5.26, 5.5.25 ... 5.4: 5.4.45, 5.4.44, 5.4.43, 5.4.42, 5.4.41, 5.4.40, 5.4.39, 5.4.38 ... 5.3: 5.3.29, 5.3.28 ... To show more minor versions: $ phpbrew known --more To update the release info: $ phpbrew update To get older versions (less than 5.4) Please note that we don't guarantee that you can build the php versions that are not supported by offical successfully, please don't fire any issue about the older versions, these issues won't be fixed. $ phpbrew update --old To list known older versions (less than 5.4) $ phpbrew known --old Starting Building Your Own PHP Simply build and install PHP with default variant: $ phpbrew install 5.4.0 +default Here we suggest default variant set, which includes most commonly used variants, if you need a minimum install, just remove the default variant set. You can enable parallel compilation by passing -j or --jobs option and the following is an example: $ phpbrew install -j $(nproc) 5.4.0 +default With tests: $ phpbrew install --test 5.4.0 With debug messages: $ phpbrew -d install --test 5.4.0 To install older versions (less than 5.3): $ phpbrew install --old 5.2.13 To install the next (unstable) version: $ phpbrew install next as php-7.1.0 To install from a github tag: $ phpbrew install github:php/php-src@PHP-7.0 as php-7.0.0 Cleaning up build directory $ phpbrew clean php-5.4.0 Variants PHPBrew arranges configure options for you, you can simply specify variant name, and phpbrew will detect include paths and build options for configuring. PHPBrew provides default variants and some virtual variants, to the default variants, which includes the most commonly used variants, to the virtual variants, which defines a variant set, you may use one virtual variant to enable multiple variants at one time. To check out what is included in these variants, simply run variants subcommand to list these variants: $ phpbrew variants Variants:   all, apxs2, bcmath, bz2, calendar, cgi, cli, ctype, dba, debug, dom, embed,   exif, fileinfo, filter, fpm, ftp, gcov, gd, gettext, hash, iconv, icu,   imap, intl, ipc, ipv6, json, kerberos, mbregex, mbstring, mcrypt, mhash,   mysql, openssl, pcntl, pcre, pdo, pgsql, phar, posix, readline, session,   soap, sockets, sqlite, tidy, tokenizer, xml_all, xmlrpc, zip, zlib, gmp   Virtual variants:   dbs:      sqlite, mysql, pgsql, pdo   mb:       mbstring, mbregex   neutral:   default:  filter, dom, bcmath, ctype, mhash, fileinfo, pdo, posix, ipc,             pcntl, bz2, zip, cli, json, mbstring, mbregex, calendar, sockets, readline,             xml_all  Using variants to build PHP:    phpbrew install 5.3.10 +default   phpbrew install 5.3.10 +mysql +pdo   phpbrew install 5.3.10 +mysql +pdo +apxs2   phpbrew install 5.3.10 +mysql +pdo +apxs2=/usr/bin/apxs2 To enable one variant, simply add a prefix + before the variant name, eg +mysql  To disable one variant, simply add a prefix - before the variant name. -debug  For example, if we want to build PHP with the default options and database supports (mysql, sqlite, postgresql), you may simply run: $ phpbrew install 5.4.5 +default+dbs You may also build PHP with extra variants: $ phpbrew install 5.3.10 +mysql+sqlite+cgi  $ phpbrew install 5.3.10 +mysql+debug+pgsql +apxs2  $ phpbrew install 5.3.10 +pdo +mysql +pgsql +apxs2=/usr/bin/apxs2 To build PHP with pgsql (PostgreSQL) extension: $ phpbrew install 5.4.1 +pgsql+pdo Or build pgsql extension with postgresql base dir on Mac OS X: $ phpbrew install 5.4.1 +pdo+pgsql=/opt/local/lib/postgresql91/bin The pgsql path is the location of pg_config, you could find pg_config in the /opt/local/lib/postgresql91/bin To build PHP with neutral compile options, you can specify neutral virtual variant, which means that phpbrew doesn't add any additional compile options including --disable-all. But some options(for example --enable-libxml) are still automatically added to support pear installation. You can build PHP with neutral: $ phpbrew install 5.4.1 +neutral For more details, please check out PHPBrew Cookbook. Extra Configure Options To pass extra configure arguments, you can do this: $ phpbrew install 5.3.10 +mysql +sqlite -- \     --enable-ftp --apxs2=/opt/local/apache2/bin/apxs Use And Switch Use (switch version temporarily): $ phpbrew use 5.4.22 Switch PHP version (switch default version) $ phpbrew switch 5.4.18 Turn Off: $ phpbrew off If you enable apache PHP modules, remember to comment out or remove the settings. $ sudo vim /etc/httpd/conf/httpd.conf # LoadModule php5_module        /usr/lib/httpd/modules/libphp5.3.21.so # LoadModule php5_module        /usr/lib/httpd/modules/libphp5.3.20.so List installed PHP $ phpbrew list The Extension Installer See Extension Installer Configuring the php.ini for current php version Simply run: $ phpbrew config You may specify the EDITOR environment variable to your favorite editor: export EDITOR=vim phpbrew config Upgrade phpbrew To upgrade phpbrew, you may simply run the self-update command, this command enables you to install the latest version of master branch from GitHub: $ phpbrew self-update The Installed PHP(s) The installed phps are located in ~/.phpbrew/php, for example, php 5.4.20 is located at: ~/.phpbrew/php/5.4.20/bin/php  And you should put your configuration file in: ~/.phpbrew/php/5.4.20/etc/php.ini  Extension configuration files should be put in: ~/.phpbrew/php/5.4.20/var/db ~/.phpbrew/php/5.4.20/var/db/xdebug.ini ~/.phpbrew/php/5.4.20/var/db/apc.ini ~/.phpbrew/php/5.4.20/var/db/memcache.ini ... etc  Quick commands to switch between directories Switching to PHP build directory $ phpbrew build-dir Switching to PHP dist directory $ phpbrew dist-dir Switching to PHP etc directory $ phpbrew etc-dir Switching to PHP var directory $ phpbrew var-dir PHP FPM phpbrew also provides useful fpm managing sub-commands. to use them, please remember to enable +fpm variant when building your own php. To start php-fpm, simply type: $ phpbrew fpm start To stop php-fpm, type: $ phpbrew fpm stop To show php-fpm modules: phpbrew fpm module To test php-fpm config: phpbrew fpm test To edit php-fpm config: phpbrew fpm config The installed php-fpm is located in ~/.phpbrew/php/php-*/sbin. The correspond php-fpm.conf is lcoated in ~/.phpbrew/php/php-*/etc/php-fpm.conf.default, you may copy the default config file to the desired location. e.g., cp -v ~/.phpbrew/php/php-*/etc/php-fpm.conf.default     ~/.phpbrew/php/php-*/etc/php-fpm.conf  php-fpm --php-ini {php config file} --fpm-config {fpm config file}  Installing Extra Apps phpbrew provides app command to fetch some php apps. Installing composer $ phpbrew app get composer Installing phpunit phpbrew app get phpunit Enabling Version Info Prompt To add PHP version info in your shell prompt, you can use ""PHPBREW_SET_PROMPT=1"" variable. The default is ""PHPBREW_SET_PROMPT=0"" (disable). To enable it, you can add this line to your ~/.bashrc file and put this line before you source ~/.phpbrew/bashrc. export PHPBREW_SET_PROMPT=1 To embed version info in your prompt, you can use phpbrew_current_php_version shell function, which is defined in .phpbrew/bashrc. and you can set the version info in your PS1 var. e.g. PS1="" \$(phpbrew_current_php_version) \$ "" Known Issues For PHP-5.3+ versions, ""Building intl 64-bit fails on OS X"" https://bugs.php.net/bug.php?id=48795 To build PHP with GD extension, you need to specify your libpng dir and libjpeg dir, for example, $ phpbrew install php-5.4.10 +default +mysql +intl +gettext +apxs2=/usr/bin/apxs2 \ -- --with-libdir=lib/x86_64-linux-gnu \ --with-gd=shared \ --enable-gd-natf \ --with-jpeg-dir=/usr \ --with-png-dir=/usr Troubleshooting Please see TroubleShooting FAQ Q: How do I have the same version with different compile option? A: Currently, you can install php5.x.x and rename the /Users/phpbrew/.phpbrew/php/php-5.x.x folder to the new name, for example, php-5.x.x-super , and install another php-5.3.3 Contribution Please see Contribution Documentation Please see Wiki Author Yo-An Lin (c9s) Márcio Almad License See LICENSE file. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phpbrew/phpbrew"	"A PHP version manager and installer."	"true"
"PHP Installation"	"PHP Build"	"https://github.com/php-build/php-build"	"Another PHP version installer."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"612"	"35"	"111"	"GitHub - php-build/php-build: Builds PHP so that multiple versions can be used side by side. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 612 Fork 111 php-build/php-build Code Issues 19 Pull requests 2 Wiki Pulse Graphs Builds PHP so that multiple versions can be used side by side. https://php-build.github.io 757 commits 1 branch 17 releases 39 contributors Shell 86.3% Groff 13.7% Shell Groff Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.10.0 v0.9.0 v0.9.0-dev v0.9.0-beta3 v0.9.0-beta2 v0.8.0 v0.7.0 v0.6.2 v0.6.1 v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.3.0RC1 v0.2.0 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 5a093b1 Jul 11, 2016 GrahamCampbell committed on GitHub Merge pull request #387 from DeepDiver1975/7.1alpha3 … Add 7.1alpha3 Permalink Failed to load latest commit information. bin fix extra newline Mar 25, 2016 man Remove pear and pyrus Dec 4, 2015 share/php-build Add 7.1alpha3 Jul 11, 2016 tests Remove pear and pyrus Dec 4, 2015 .gitattributes Add newline handling gitattributes Sep 5, 2014 .gitignore Fixed link Oct 2, 2015 .travis.yml Add 7.1alpha3 Jul 11, 2016 CHANGELOG.md Add 7.1alpha3 Jul 11, 2016 CONTRIBUTING.md Remove pear and pyrus Dec 4, 2015 LICENSE Fixed license years Apr 16, 2015 README.md Update installation in README Apr 4, 2016 Vagrantfile Enable pear channel auto discover Nov 5, 2012 build-docs.sh Updated references to the github repo Nov 26, 2015 install.sh Use consistent function declaration coding standard Jun 9, 2015 make-release.sh Made -r a fallback if -E is not found for sed. Jan 14, 2016 run-tests.sh Added the latest PHP releases Jun 23, 2016 uninstall.sh Add uninstaller script; Closes #279 Apr 19, 2015 vagrant-init.sh Vagrant provision file fails on installing BATS - #191 Mar 12, 2014 README.md php-build php-build is a utility for building versions of PHP to use them side by side with each other. The overall structure is loosly borrowed from Sam Stephenson's ruby-build. Do you like php-build? You can buy me a beer by Gittipp-ing. Consider also Gittipp-ing one of the awesome contributors. Overview Installation Contributing Changelog License Installation As phpenv plugin With CHH/phpenv via installer It's the standard way: installs phpenv in $HOME/.phpenv (default $PHPENV_ROOT value). curl -L http://git.io/phpenv-installer \     | bash See more on https://github.com/rogeriopradoj/phpenv-installer: install CHH/phpenv + php-build/php-build (and other plugins), updating all of them when you want to! With phpenv manually Locate your phpenv directory: % ls $HOME/.phpenv  Clone the Git repository into phpenv plugins directory: % git clone git://github.com/php-build/php-build.git $HOME/.phpenv/plugins/php-build  Now you can use php-build as phpenv plugin, as follows: % phpenv install <definition>  The built version will be installed into $HOME/.phpenv/versions/<definition>. As standalone php-build Clone the Git Repository: % git clone git://github.com/php-build/php-build.git  Then go into the extracted/cloned directory and run: % ./install.sh  This installs php-build to the default prefix /usr/local. To install php-build to an other location than /usr/local set the PREFIX environment variable: % PREFIX=$HOME/local ./install.sh  If you don't have permissions to write to the prefix, then you have to run install.sh as superuser, either via su -c or via sudo. Contributing Issue reports and pull requests are always welcome. Freenode channel: #php-build Google group: https://groups.google.com/forum/#!forum/php-build-developers All contributions will be reviewed and merged by the core team: Graham Campbell Rogerio Prado de Jesus Loïc Frering Christoph Hochstrasser See CONTRIBUTING.md. Changelog See CHANGELOG.md. License php-build is released under the MIT License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/php-build/php-build"	"Another PHP version installer."	"true"
"PHP Installation"	"PHP Env"	"https://github.com/CHH/phpenv"	"Another PHP version manager."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"467"	"29"	"42"	"GitHub - CHH/phpenv: Thin Wrapper around rbenv for PHP version managment Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 29 Star 467 Fork 42 CHH/phpenv Code Issues 16 Pull requests 5 Pulse Graphs Thin Wrapper around rbenv for PHP version managment 86 commits 2 branches 0 releases 13 contributors Shell 100.0% Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master old_version Nothing to show Nothing to show New pull request Latest commit f347f96 Oct 20, 2014 CHH Merge pull request #32 from gitter-badger/gitter-badge … Add a Gitter chat badge to README.md Permalink Failed to load latest commit information. bin [Fixes #23] Show correct message in rbenv-which Dec 29, 2013 extensions Fix issue with testing if config file exists in config-rm. Mar 13, 2013 man Generated README from ronn file Nov 9, 2011 LICENSE Create a separated file for LICENSE Nov 25, 2012 README.md Added Gitter badge Oct 19, 2014 README.md phpenv Sets up a separate rbenv environment for PHP man page SYNOPSIS phpenv-install.sh UPDATE=yes phpenv-install.sh  DESCRIPTION The phpenv-install.sh command sets up a separate rbenv environment for usage with PHP. This environment is stored in the $HOME/.phpenv directory and contains a phpenv executable which sets the RBENV_ROOT environment variable to $HOME/.phpenv. To install PHP versions, just put them to the $HOME/.phpenv/versions directory. You can use php-build to do this with one command: $ php-build -i development 5.4.9 $HOME/.phpenv/versions/5.4.9 $ phpenv versions   5.4.9 $ phpenv rehash $ phpenv global 5.4.9 $ php --version   PHP 5.4.9 (cli) (built: Nov 25 2012 17:27:10)    Copyright (c) 1997-2012 The PHP Group   Zend Engine v2.4.0, Copyright (c) 1998-2012 Zend Technologies       with Xdebug v2.2.1, Copyright (c) 2002-2012, by Derick Rethans  The phpenv-install.sh command has an optional ""update"" mode which updates the $HOME/.phpenv to the latest source code from the rbenv repository and creates a new phpenv executable. This mode is triggered by setting the UPDATE environment variable before calling phpenv-install.sh, for example: $ UPDATE=yes phpenv-install.sh  Finally, enable phpenv in your shell by adding $HOME/.phpenv/bin and $HOME/.phpenv/shims to your PATH and adding eval ""$(phpenv init -)"" to your $HOME/.bash_profile or $HOME/.bashrc (or your shell's respective file) and restart your shell. IMPORTANT NOTES For rbenv users: Make sure that ~/.rbenv/bin takes precedence in the PATH over ~/.phpenv/bin by placing it before, so rbenv gets used from ~/.rbenv. You need to have git installed to run the phpenv-install.sh command. SEE ALSO rbenv Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CHH/phpenv"	"Another PHP version manager."	"true"
"PHP Installation"	"PHP OSX"	"http://php-osx.liip.ch/"	"A PHP installer for OSX."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"230"	"27"	"19"	"GitHub - liip/php-osx: The uploader and website for the PHP 5 package for OS X 10.6 built with https://github.com/liip/build-entropy-php Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 230 Fork 19 liip/php-osx Code Issues 35 Pull requests 0 Pulse Graphs The uploader and website for the PHP 5 package for OS X 10.6 built with https://github.com/liip/build-entropy-php http://php-osx.liip.ch 143 commits 1 branch 0 releases Fetching contributors PHP 91.4% HTML 7.7% Shell 0.9% PHP HTML Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 2d09460 Jun 28, 2016 chregu make it work for PHP 7.1 Permalink Failed to load latest commit information. AWSSDKforPHP Added latest releases to page Oct 26, 2013 .gitignore track the package by *vendors.sh Mar 9, 2011 99-liip-developer.ini add php 7 and liip.ini Nov 27, 2015 LICENSE added LICENSE Mar 9, 2011 buildAll.sh a little buildAll.sh scripty May 20, 2013 buildAndUpload.sh Adding experimental support for 10.9 Aug 28, 2013 config.inc.php-dist Added config.inc.php-dist Mar 7, 2011 create_package.sh add php 7 and liip.ini Nov 27, 2015 getLatestVersions.php make it work for PHP 7.1 Jun 28, 2016 index.html.tmpl make it work for PHP 7.1 Jun 28, 2016 info.html Added info.html Apr 20, 2011 install.sh make it work for PHP 7.1 Jun 28, 2016 install_vendors.sh track the package by *vendors.sh Mar 9, 2011 liip.png Added Logos Jan 11, 2012 local.gif Added Logos Jan 11, 2012 update_httpd_conf.sh check if /etc/apache2/other exists at all Aug 9, 2014 update_vendors.sh track the package by *vendors.sh Mar 9, 2011 uploadFile.php WS only Oct 26, 2013 upload_info.sh Added info.html Mar 7, 2011 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/liip/php-osx"	"A PHP installer for OSX."	"true"
"PHP Installation"	"PHP Switch"	"https://github.com/jubianchi/phpswitch"	"Another version manager."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"89"	"5"	"9"	"GitHub - jubianchi/phpswitch: A CLI utility to help you build and test PHP versions Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 89 Fork 9 jubianchi/phpswitch Code Issues 6 Pull requests 1 Pulse Graphs A CLI utility to help you build and test PHP versions http://jubianchi.github.io/phpswitch/ 271 commits 6 branches 1 release Fetching contributors PHP 99.9% Shell 0.1% PHP Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.1 bugfixes configuration gh-pages master treemap-improved Nothing to show 0.1.0 Nothing to show New pull request Latest commit 2bc860a Sep 4, 2014 jubianchi Clean Permalink Failed to load latest commit information. bin Update deps Sep 11, 2013 doc @ 50e54f0 Update doc Jul 8, 2013 src/jubianchi/PhpSwitch Clean Sep 4, 2014 tests Better coverage of configuration Mar 9, 2014 .atoum.php Root process Feb 28, 2014 .atoum.treemap.php Add treemap Mar 26, 2013 .gitignore Improve tests Mar 9, 2014 .gitmodules Trying to add gh-pages as a submodule Jan 7, 2013 .phpswitch.yml Refactor configuration Feb 28, 2014 .travis.yml Should fix travis build Jun 24, 2013 LICENSE Add MIT license Jun 2, 2013 README.md Clean readme Feb 24, 2013 Vagrantfile Update vagrant config Mar 9, 2014 behat.yml Setup Behat Feb 19, 2013 composer.json Improve tests Mar 9, 2014 composer.lock Improve tests Mar 9, 2014 README.md phpswitch A CLI utility to help you build and test PHP versions Documentation : http://jubianchi.github.com/phpswitch/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jubianchi/phpswitch"	"Another version manager."	"true"
"PHP Installation"	"VirtPHP"	"http://virtphp.org/"	"A tool for creating and managing isolated PHP environments."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"428"	"20"	"33"	"GitHub - virtphp/virtphp: virtPHP is a tool to create isolated PHP environments. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 428 Fork 33 virtphp/virtphp Code Issues 16 Pull requests 5 Wiki Pulse Graphs virtPHP is a tool to create isolated PHP environments. http://virtphp.org 313 commits 1 branch 7 releases Fetching contributors PHP 98.5% Shell 1.2% Puppet 0.3% PHP Shell Puppet Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.5.2-alpha v0.5.1-alpha v0.5.0-alpha v0.4.0-alpha v0.3.0-alpha v0.2.0-alpha v0.1.0-alpha Nothing to show New pull request Latest commit 6ada045 Jan 18, 2015 jwoodcock Updating change log for 0.5.2 Permalink Failed to load latest commit information. .puppet/manifests Moved Puppet manifests to the .puppet directory Oct 24, 2013 bin To be consistent with branding, changed all ""VirtPHP"" to ""virtPHP"" Jul 28, 2014 res To be consistent with branding, changed all ""VirtPHP"" to ""virtPHP"" Jul 28, 2014 src Changed the declaration and use of $file to a constant as it will nev… Jan 6, 2015 tests Reoved the message count test on execute. Nov 15, 2014 .gitignore Adding .DS_Store to the ignores list Oct 19, 2013 .travis.yml Test on hhvm but ignore failures Mar 5, 2014 CHANGELOG.md Updating change log for 0.5.2 Jan 18, 2015 LICENSE Bumping the copyright year. Mar 3, 2014 README.md Added phpbrew documentation and removed all phpenv and php-build docs… Aug 30, 2014 Vagrantfile To be consistent with branding, changed all ""VirtPHP"" to ""virtPHP"" Jul 28, 2014 composer.json Updating to use PHPUnit 4 for tests Jul 28, 2014 phpunit.xml.dist To be consistent with branding, changed all ""VirtPHP"" to ""virtPHP"" Jul 28, 2014 README.md virtPHP is a tool for creating and managing multiple isolated PHP environments on a single machine. It's like Python's virtualenv, but for PHP. virtPHP creates isolated environments so that you may run any number of PHP development projects, all using different versions of PEAR packages and different PECL extensions. You may even specify a different version of PHP, if your system has various installations of PHP. To install multiple versions of PHP, we suggest taking a look at the phpenv and php-build projects or phpbrew and using virtPHP with them, to manage multiple virtual PHP environments. Note: virtPHP is currently only targeted to command line php (php-cli) for *nix based systems. Installation Download the virtphp.phar file from the latest release and place it in /usr/local/bin or wherever it's accessible from your PATH. Optionally, you may clone this repository and build the phar file yourself. Usage virtPHP is a command-line tool. To get started, you'll probably want to check out what it can do. To do this, just execute it without any arguments, like this: user@host:~$ php virtphp.phar If you have the phar file set executable (i.e. chmod 755), then you can execute it like this: user@host:~$ ./virtphp.phar Or, if it's in your PATH, like this: user@host:~$ virtphp.phar We recommend putting it in your PATH and aliasing it to virtphp, so that you can run it like this: user@host:~$ virtphp For convenience, the following examples will assume you have simply downloaded virtphp.phar and have not placed it in your PATH or set it executable. Getting Started To create a new virtPHP environment, use the create command: user@host:~$ php virtphp.phar create myenv By default, this will create a new PHP environment in myenv/, using your system PHP as the base. After creating the environment, you may activate it so that you now use the new environment in your shell: user@host:~$ source myenv/bin/activate After activating your environment, you'll notice that your shell changes to include the name of your virtPHP environment, like this: (myenv) user@host:~$ And, when you run which php, your shell session reports it is now using PHP from your virtPHP environment: (myenv) user@host:~$ which php /home/user/myenv/bin/php Now, let's install a PECL extension and a PEAR package. (myenv) user@host:~$ pecl install mongo (myenv) user@host:~$ pear config-set auto_discover 1 (myenv) user@host:~$ pear install pear.phpunit.de/PHPUnit (I'm not showing any of the console output here, in case you were wondering.) What's cool here is that you didn't have to use sudo to install these commands, and if you run pear list -a, you'll see both PHPUnit and pecl/mongo listed as being installed. Now, any project running in the current, activated virtPHP environment can make use of these packages. To return your environment back to normal settings and discontinue using your virtPHP environment, simply use the deactivate command. It doesn't matter where you are when you run it—it's available to your entire virtPHP environment. (myenv) user@host:~$  deactivate Now, depending on your base environment, when you run pear list -a, you won't see the PHPUnit or pecl/mongo packages that you just installed. To start up your virtPHP environment again, just source the activate script for the virtPHP environment you want to use. Altogether, that's pretty neat, huh? So you've setup one or two or even eleven different environments. Keeping track of all of them in your head can lead to cluster headaches, right? So to list out all the environments you have installed, use the show command. user@host:~$ php virtphp.phar show This will give you a nice list of all the environments you've created and the path to each. +--------+--------------------------------------+ | Name   | Path                                 | +--------+--------------------------------------+ | mytest | /Users/virtPHP/work/project2/virtphp | | myenv  | /Users/virtPHP/work/project1/virtphp | +--------+--------------------------------------+ Because virtPHP creates physical folders and files for all of it's work, make sure you use the built in commands for destroying or cloning environments, otherwise things can get messy. However, if an environment does get out of sync you can perform a resync of a particular environment. user@host:~$ php virtphp.phar show --env=myenv --path=/Users/virtPHP/work/RealProject/virtphp If you do another show, you will see the updated path in the list of your enviornments. +--------+-----------------------------------------+ | Name   | Path                                    | +--------+-----------------------------------------+ | mytest | /Users/virtPHP/work/project2/virtphp    | | myenv  | /Users/virtPHP/work/RealProject/virtphp | +--------+-----------------------------------------+ Under the Covers When you create a new virtPHP environment, it creates a new directory and sets up a virtual environment for PHP within it. For example, the myenv/ environment directory looks something like this: myenv/ |-- bin/ |   |-- activate |   |-- composer -> /home/user/myenv/bin/composer.phar* |   |-- composer.phar* |   |-- pear* |   |-- peardev* |   |-- pecl* |   |-- php* |   |-- php-config* |   |-- phpize -> /usr/bin/phpize* |   `-- phpunit* |-- etc/ |   |-- pear.conf |   `-- php.ini |-- lib/ |   `-- php/ |       `-- mongo.so `-- share/     |-- pear/     `-- php/  When you activate the environment, the bin/ directory becomes a part of your PATH. When you install a PECL extension, the extension is placed in lib/php/ (as you can see in this example, with mongo.so), and when you install a PEAR package, it is placed in share/php/ (and console commands are placed in bin/, as you can see in this example with phpunit). To be helpful, we have already installed Composer for you. When you activate a virtPHP environment, then you have access to the composer command. Advanced Concepts Let's say you need to use the same host machine to develop multiple projects, all requiring different versions of PHP and different versions of PECL extensions or PEAR packages. virtPHP was made for this! Specifying a PHP Build for virtPHP If you have multiple builds of PHP on your system, you can tell virtPHP which one to use, when creating a new environment. user@host:~$ php virtphp.phar create --php-bin-dir=""/home/user/.phpbrew/php/php-5.4.25/bin"" project1-env user@host:~$ php virtphp.phar create --php-bin-dir=""/home/user/.phpbrew/php/php5.4.25/bin"" project2-env In this case, we have project1-env and project2-env, both of which use PHP 5.4.25. One of the projects, however uses the older pecl/mongo version 1.2 series, while the other project uses the pecl/mongo 1.4 series. virtPHP makes the use of both extensions possible on the same system. Here's how: user@host:~$ source project1-env/bin/activate # Activate project1 (project1-env) user@host:~$ pecl install mongo-1.2.12 (project1-env) user@host:~$ deactivate user@host:~$ source project2-env/bin/activate # Activate project2 (project2-env) user@host:~$ pecl install mongo-1.4.5 (project2-env) user@host:~$ deactivate Now, we are able to use version 1.2.12 of pecl/mongo, when working on project1-env, and we can use version 1.4.5 of pecl/mongo, when working on project2-env. We just need to activate the environment we are working on first. In the same way, working with different versions of PHP for other projects is simple. For example, in project3-env, we are using PHP 5.5. user@host:~$ php virtphp.phar create --php-bin-dir=""/home/user/.phpbrew/php/php-5.5.9/bin"" project3-env Using phpbrew to install multiple PHP versions In the previous examples, we told virtPHP to use a specific build of PHP when creating new environments. To use virtPHP in this way, you'll need to install different builds of PHP. You can download the source, configure it, and build it on your own, or you may use phpbrew to do this for you. First, install phpbrew on your system, like this (follow any instructions these commands print to the screen): user@host:~$ curl -L -O https://github.com/phpbrew/phpbrew/raw/master/phpbrew user@host:~$ chmod +x phpbrew user@host:~$ sudo mv phpbrew /usr/bin/phpbrew Then, you should init a bash script for your shell environment, which will place a bashrc file in the ~/.phpbrew folder. user@host:~$ phpbrew init Then source this file to your .bashrc or .zshrc file with this line: user@host:~$ source ~/.phpbrew/bashrc Now, we can view and install a few versions of PHP, and control the variants that can be installed with it, with the following commands. user@host:~$ phpbrew known Available stable versions:   5.6 versions:    5.6.0   5.5 versions:    5.5.16, 5.5.15, 5.5.14, 5.5.13, 5.5.12, 5.5.11, 5.5.10, 5.5.9   5.4 versions:    5.4.32, 5.4.31, 5.4.30, 5.4.29, 5.4.28, 5.4.27, 5.4.26, 5.4.25   5.3 versions:    5.3.28, 5.3.27, 5.3.26, 5.3.25, 5.3.24, 5.3.23, 5.3.22, 5.3.21  user@host:~$ phpbrew install 5.6.0 +default+debug+mysql This may take a while, so grab a few cups of coffee. phpbrew command shown with the default, debug, and mysql variants included. Variants can be installed individually, or in 'virtual variants' user@host:~$ phpbrew variants Variants:   all, apxs2, bcmath, bz2, calendar, cgi, cli, ctype, dba, debug, dom, embed,   exif, fileinfo, filter, fpm, ftp, gcov, gd, gettext, hash, iconv, icu,   imap, intl, ipc, ipv6, json, kerberos, mbregex, mbstring, mcrypt, mhash,   mysql, openssl, pcntl, pcre, pdo, pgsql, phar, posix, readline, session,   soap, sockets, sqlite, tidy, tokenizer, xml_all, xmlrpc, zip, zlib   Virtual variants:   dbs:      sqlite, mysql, pgsql, pdo   mb:       mbstring, mbregex   neutral:   default:  filter, dom, bcmath, ctype, mhash, fileinfo, pdo, posix, ipc,             pcntl, bz2, zip, cli, json, mbstring, mbregex, calendar, sockets, readline,             xml_all After installing the spcified version of phpbrew, we can activate a specific version like this: user@host:~$ phpbrew use php-5.6.0 ...switch between different versions: user@host:~$ phpbrew switch php-5.5.16 ...or, return to the system version: user@host:~$ phpbrew off So, why would we need virtPHP, if we can do this? virtPHP goes beyond phpbrew. With virtPHP, you may install different PECL extensions, different PEAR packages, and manage separate php.ini configs for the same version and build of PHP. This way, projects you are developing that share the same PHP version but different configuration may be developed on the same system using different virtual PHP environments. virtPHP can work together with phpbrew to achieve this. Known Issues .pearrc not found issue If you get an error stating the script couldn't access the .pearrc file (or can't find it), you can either try changing the permissions on your [USER_DIR]/.pearrc file or remove it entirely. This issue seems to occur sporadically. Contributing If you would like to help, take a look at the list of issues. Fork the project, create a feature branch, and send us a pull request. To ensure a consistent code base, you should make sure the code follows the coding standards, which we borrowed from Symfony. Running the Tests You may use the provided Vagrantfile to start up a VM and run tests in a clean environment. You will need VirtualBox and Vagrant installed on your system. user@host:~$ cd virtphp/ user@host:~$ vagrant up user@host:~$ vagrant ssh user@host:~$ cd /vagrant user@host:~$ curl -sS https://getcomposer.org/installer | php user@host:~$ php composer.phar install user@host:~$ ./vendor/bin/phpunit Building the Phar File virtPHP is distributed as an executable phar file. The bin/compile script handles building this file. To build the phar file, change to the location of your virtPHP project clone and execute the compile script like this: user@host:~$ ./bin/compile This should build a file named virtphp.phar in your current directory. You may move this file to wherever you like and use it for creating virtPHP environments. Requirements PHP 5.3.3 or above. License Copyright (c) 2013-2014 Jordan Kasper, Ben Ramsey, Jacques Woodcock Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/virtphp/virtphp"	"A tool for creating and managing isolated PHP environments."	"true"
"Development Environment"	"Ansible"	"https://www.ansible.com/"	"A radically simple orchestration framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"17830"	"1400"	"5389"	"GitHub - ansible/ansible: Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications— automate in a language that approaches plain English, using SSH, with no agents to install on remote systems. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,400 Star 17,830 Fork 5,389 ansible/ansible Code Issues 1,054 Pull requests 396 Pulse Graphs Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications— automate in a language that approaches plain English, using SSH, with no agents to install on remote systems. http://ansible.com/ 19,983 commits 42 branches 108 releases 1,430 contributors Python 92.4% CSS 4.0% JavaScript 0.9% Makefile 0.9% HTML 0.7% Shell 0.5% Other 0.6% Python CSS JavaScript Makefile HTML Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: devel Switch branches/tags Branches Tags adhoc_callback devel feature_1476 feature_10218 gracefully_handle_killed_subprocesses gregdek-community-patch-1 release1.5.0 release1.5.1 release1.5.2 release1.5.3 release1.5.4 release1.5.5 release1.6.0 release1.6.1 release1.6.2 release1.6.3 release1.6.4 release1.6.5 release1.6.6 release1.6.7 release1.6.8 release1.6.9 release1.6.10 release1.7.0 release1.7.1 release1.7.2 release1.8.0 release1.8.1 release1.8.2 release1.8.3 release1.8.4 revert-10399-assemble-with-prefix-and-suffix revert-11865-fix-group_vars_path revert-15369-patch-2 revert-15668-patch-1 stable-1.9 stable-2.0-network stable-2.0 stable-2.0.0.1 stable-2.1 tgerla-clarify-role-tags tmp-holding-branch-post-2.1.1 Nothing to show v2.1.1.0-0.2.rc2 v2.1.1.0-0.1.rc1 v2.1.0.0-1 v2.1.0.0-0.4.rc4 v2.1.0.0-0.3.rc3 v2.1.0.0-0.2.rc2 v2.1.0.0-0.1.rc1 v2.0.2.0-1 v2.0.2.0-0.4.rc4 v2.0.2.0-0.3.rc3 v2.0.2.0-0.2.rc2 v2.0.2.0-0.1.rc1 v2.0.1.0-1 v2.0.1.0-0.2.rc2 v2.0.1.0-0.1.rc1 v2.0.0.2-1 v2.0.0.1-1 v2.0.0.0-1 v2.0.0-0.9.rc4 v2.0.0-0.8.rc3 v2.0.0-0.7.rc2 v2.0.0-0.6.rc1 v2.0.0-0.5.beta3 v2.0.0-0.4.beta2 v2.0.0-0.3.beta1 v2.0.0-0.2.alpha2 v2.0.0-0.1.alpha1 v1.9.6-1 v1.9.6-0.1.rc1 v1.9.5-1 v1.9.5-0.1.rc1 v1.9.4-1 v1.9.4-0.3.rc3 v1.9.4-0.2.rc2 v1.9.4-0.1.rc1 v1.9.3-1 v1.9.3-0.3.rc3 v1.9.3-0.2.rc2 v1.9.3-0.1.rc1 v1.9.2-1 v1.9.2-0.2.rc2 v1.9.2-0.1.rc1 v1.9.1-1 v1.9.1-0.4.rc4 v1.9.1-0.3.rc3 v1.9.1-0.2.rc2 v1.9.1-0.1.rc1 v1.9.0.1-1 v1.9.0-2 v1.9.0-1 v1.9.0-0.2.rc2 v1.9.0-0.1.rc1 v1.8.4 v1.8.3 v1.8.2 v1.8.1 v1.8.0 v1.7.2 v1.7.1 v1.7.0 v1.6.10 v1.6.9 v1.6.8 v1.6.7 v1.6.6 v1.6.5 v1.6.4 v1.6.3 v1.6.2 v1.6.1 v1.6.0 v1.5.5 v1.5.4 v1.5.3 v1.5.2 v1.5.1 v1.5.0 v1.4.5 v1.4.4 v1.4.3 v1.4.2 v1.4.1 v1.4.0 v1.3.4 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.3 v1.2.2 v1.2.1 v1.2 v1.1 v1.0 v0.9 0.8 0.7.2 0.7.1 0.7 0.6 Nothing to show New pull request Latest commit 134d70e Jul 15, 2016 privateip committed on GitHub Merge pull request #16733 from privateip/plugin-action-net-config … removes methods to write to dest from net_config Permalink Failed to load latest commit information. .github Move comments out of code-blocks (#15961) May 23, 2016 bin Fix bin/ansible to not make a double traceback on python3 (#15972) Jun 2, 2016 contrib Added the ability to filter gce grouped_instances by region/zone (#14138 Jul 14, 2016 docs/man Fix typo on -K/--ask-become-pass option in 'ansible' man page (#16667) Jul 11, 2016 docsite Use same warning for become-pass as for ask-pass (#16702) Jul 14, 2016 examples make timeout decorator for facts have a configurable duration (#16551) Jul 8, 2016 hacking Do not corrupt $MANPATH when it's not present (#16300) Jun 15, 2016 lib/ansible removes methods to write to dest from net_config Jul 15, 2016 packaging Add RELEASE.tmpl for releases and tweak release playbook Jul 8, 2016 test fix setup test for renamed windows fact Jul 14, 2016 ticket_stubs Add proposals template (#16654) Jul 8, 2016 .coveragerc Add tox and travis-ci support Mar 13, 2015 .gitattributes updated changelog with 1.8.2-4 content, added .gitattributes Feb 23, 2015 .gitignore Add full support for Shippable CI. Jun 1, 2016 .gitmodules remove old dead code Aug 27, 2015 .mailmap Add a .mailmap for 'shortlog' (#15588) Apr 25, 2016 .travis.yml Track build times (#15708) May 3, 2016 .yamllint Fix YAML source and check it on Shippable (#15678) Jun 4, 2016 CHANGELOG.md doc: add ipmi modules to changelog Jul 14, 2016 CODING_GUIDELINES.md CODING_GUIDELINES: Fix typo: / => \ Jun 28, 2014 CONTRIBUTING.md Update CONTRIBUTING.md with more recent developments Mar 23, 2016 COPYING license file should be in source tree Mar 15, 2012 MANIFEST.in added galaxy data Jan 12, 2016 Makefile only send event if tqm exists Jan 13, 2016 README.md Remove download stats badge (#16358) Jun 20, 2016 RELEASES.txt s/2015/2016 May 8, 2016 ROADMAP.rst Update ROADMAP.rst Jun 2, 2016 VERSION Version bump to 2.2.0 for devel Apr 26, 2016 ansible-core-sitemap.xml Add debug strategy plugin (#15125) Apr 8, 2016 setup.py Fix ziploader for the cornercase of ansible invoking ansible. Apr 29, 2016 shippable.yml Run shippable tests in unprivileged containers. (#16481) Jun 28, 2016 tox.ini Start to test module_utils for python 3 syntax (#15882) May 17, 2016 README.md Ansible Ansible is a radically simple IT automation system. It handles configuration-management, application deployment, cloud provisioning, ad-hoc task-execution, and multinode orchestration - including trivializing things like zero downtime rolling updates with load balancers. Read the documentation and more at http://ansible.com/ Many users run straight from the development branch (it's generally fine to do so), but you might also wish to consume a release. You can find instructions here for a variety of platforms. If you decide to go with the development branch, be sure to run git submodule update --init --recursive after doing a checkout. If you want to download a tarball of a release, go to releases.ansible.com, though most users use yum (using the EPEL instructions linked above), apt (using the PPA instructions linked above), or pip install ansible. Design Principles Have a dead simple setup process and a minimal learning curve Manage machines very quickly and in parallel Avoid custom-agents and additional open ports, be agentless by leveraging the existing SSH daemon Describe infrastructure in a language that is both machine and human friendly Focus on security and easy auditability/review/rewriting of content Manage new remote machines instantly, without bootstrapping any software Allow module development in any dynamic language, not just Python Be usable as non-root Be the easiest IT automation system to use, ever. Get Involved Read Community Information for all kinds of ways to contribute to and interact with the project, including mailing list information and how to submit bug reports and code to Ansible. All code submissions are done through pull requests. Take care to make sure no merge commits are in the submission, and use git rebase vs git merge for this reason. If submitting a large code change (other than modules), it's probably a good idea to join ansible-devel and talk about what you would like to do or add first and to avoid duplicate efforts. This not only helps everyone know what's going on, it also helps save time and effort if we decide some changes are needed. Users list: ansible-project Development list: ansible-devel Announcement list: ansible-announce - read only irc.freenode.net: #ansible Branch Info Releases are named after Led Zeppelin songs. (Releases prior to 2.0 were named after Van Halen songs.) The devel branch corresponds to the release actively under development. As of 1.8, modules are kept in different repos, you'll want to follow core and extras Various release-X.Y branches exist for previous releases. We'd love to have your contributions, read Community Information for notes on how to get started. Authors Ansible was created by Michael DeHaan (michael.dehaan/gmail/com) and has contributions from over 1000 users (and growing). Thanks everyone! Ansible is sponsored by Ansible, Inc Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ansible/ansible"	"A radically simple orchestration framework."	"true"
"Development Environment"	"Phansible"	"http://phansible.com/"	"A web tool for building PHP development virtual machines with Ansible."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"524"	"41"	"139"	"GitHub - phansible/phansible: Phansible - generate Vagrant + Ansible dev environments for PHP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 41 Star 524 Fork 139 phansible/phansible Code Issues 24 Pull requests 3 Pulse Graphs Phansible - generate Vagrant + Ansible dev environments for PHP http://phansible.com 537 commits 2 branches 9 releases Fetching contributors PHP 47.8% CSS 19.2% HTML 16.7% JavaScript 14.4% Ruby 1.0% Shell 0.6% Smarty 0.3% PHP CSS HTML JavaScript Ruby Shell Smarty Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master redis-fix Nothing to show 0.7.2 0.7.1 0.7 0.6.1 0.6 0.5 0.4 0.3 0.2 Nothing to show New pull request Latest commit b579ac5 May 9, 2016 debo Update Ubuntu LTS Trusty origin Permalink Failed to load latest commit information. ansible Replace all sudo occurrences for become Mar 29, 2016 app Update Ubuntu LTS Trusty origin May 9, 2016 src/Phansible Replace all sudo occurrences for become Mar 29, 2016 tests/src/Phansible Tests and Increased coverage Oct 18, 2015 web Merge branch 'search_engine' of git://github.com/fabiorphp/phansible … Aug 17, 2015 .gitignore Ignore the roles folder Nov 8, 2015 .scrutinizer.yml README Jun 8, 2015 .travis.yml README Jun 8, 2015 CONTRIBUTING.md Create CONTRIBUTING.md Nov 26, 2014 LICENSE Initial commit Jan 29, 2014 README.md README Jun 8, 2015 Vagrantfile fixed vagrant box url Dec 1, 2014 bootstrap.php Changes Mar 2, 2014 composer.json Testing on PHP 5.5 and beyond! Jun 2, 2015 composer.lock Updating libraries Apr 20, 2015 phpunit.xml Scrutinizer and Travis-CI Jun 8, 2015 README.md Phansible Phansible is a simple generator for Vagrant projects, targeting PHP development environments, using Ansible as Provisioner. It was inspired by PuPHPet. The project is built on top of Silex, using Flint. Contributions Contributions are always welcome, please have a look at our issues to see if there's something you could help with. You can also join us on gitter. TO DO Deprecate 1.0 branch and put master into production CI our generated roles (@naxhh is working on this) API for generating roles outside the Web (@erikaheidi is working on this) New technologies (request for your favourite ones!) More documentation on how to customize things Take a look at our issues. Setup Clone the repo: git clone https://github.com/Phansible/phansible.git Go into the phansible folder cd phansible/ Install the dependencies with composer: php composer install Run the php built in server: php -S 0.0.0.0:8080 -t web/ You can now go on http://localhost:8080 to see your modification. As an alternative, you can also use the included Vagrant setup (requires Ansible). Tests To run the tests just do:  ./vendor/bin/phpunit  Code style To check the code style just do:  ./vendor/bin/phpcs --standard=psr2 ./src  ./vendor/bin/phpmd src/ text codesize,controversial,design,naming,unusedcode  When no errors appear you are ready to push your commits! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Phansible/phansible"	"A web tool for building PHP development virtual machines with Ansible."	"true"
"Development Environment"	"Protobox"	"http://getprotobox.com/"	"Another web tool for building PHP development virtual machines."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Protobox - Online GUI for Vagrant protobox BUILD EXPLORE ABOUT ROADMAP DOCS ISSUES GitHub upload your config Build amazing web applications together Use protobox to build and share your vagrant virtual machines EXPLORE BOXES Getting Started Protobox is a layer on top of vagrant and a web GUI to setup virtual machines for web development. A single YAML document controls everything that is installed on the virtual machine. Read More. Explore The fastest way to get started is to browse our existing pre-configured boxes in our explore section. Once you select one, you are ready to get started. Applications If you are looking to install popular web applications on your virtual machine, check out our applications section. Continue You can edit your YAML configuration files locally or drag them on this page to load your existing configurations to continue right where you left off. Install Protobox is easily installable by pasting one line into your terminal. Install protobox Source Code Check out our source code to learn more about our project and how to contribute. View source Follow Us Follow us on twitter to stay up to date on new features, bug fixes, and the latest news. Follow protobox   Let's Get Started! Applications This section you can use to install popular web applications such as wordpress, drupal, symfony, laravel, etc. It is completely optional, so feel free to proceed to the next section. New Application: Git Repository (Public or Private) Drupal Laravel Lemonstand PyroCMS Sylius Symfony Wordpress Add Application If you are done configuring, click the big button below. Next Section Create Configuration File Vagrant Local Local Virtual Machine Operating System Ubuntu 12.04 Precise x64 PHP 5.5 PHP 5.4 Ubuntu 10.04 Lucid x64 PHP 5.4 PHP 5.3 Choose the operating system for your virtual machine. It may take some time to downloaded the box the first time you run Vagrant. Read more about vagrant boxes here. Name Your Local VM Your personal name for the box. This should be unique to your system. If you have multiple boxes running, name each one differently. Local VM IP Address IP address to use for accessing the virtual machine. This is the IP address you will need to enter into your hosts file for every virtualhost you create later on. Local VM Memory Memory to assign to the virtual machine in megabytes (only integers allowed) If you are done configuring, click the big button below. Next Section Create Configuration File Server Server Packages Installed Packages Packages to install via the OS package manager. Do not install any web servers, databases, or languages here since you will configure them in later steps. curl and git are automatically installed. Debian / Ubuntu: vim SSH Keys You can also add all your ssh keys and config files (id_rsa, config, etc), to the ./data/ssh/ folder. During initial startup they will automatically be copied to the VM. Dotfiles Install You can toggle this setting to globally turn on/off the dotfiles installation. Dotfiles Repository You can add a git repository of dotfiles here to be copied into the VM. Make sure you also setup SSH keys to access the GIT repository. AND / OR You can also add all your dotfiles (.bash_aliases, .vimrc, .gitconfig, etc), to the ./data/dot/ folder. During initial startup they will automatically be copied to the virtual machine. If you are done configuring, click the big button below. Next Section Create Configuration File Web Server Apache Nginx Apache Settings Install You can toggle this setting to turn on/off the apache installation. Apache Modules cache cgid dav dav_fs disk_cache expires headers info ldap mime_magic php proxy_ajp proxy_balancer proxy rewrite ssl userdir vhost_alias Apache Virtual Host #1 Vhost Name The name of this vhost configuration for your own personal reference. Server Name The URL you want to use to access this site on your computer. Don't forget to add this to your hosts file! Server Aliases www.app.dev Server aliases are secondary ways to access this site on your computer. Typically www.app.dev or any other subdomains you want to have. Document Root The location of your site's index file, or other landing page on the file system. Port 80 for normal browsing, if you choose another append it to the URL, ex: http://app.dev:1337 Environment Variables APP_ENV dev These should be ""name value"" list of environmental variables you want to access in your code. Allow Override All ""All"" is suitable for most installations. Click here for technical information. Remove this vhost Add another Apache vhost Nginx Settings Install You can toggle this setting to turn on/off the nginx installation. Nginx Virtual Host #1 Vhost Name The name of this vhost configuration for your own personal reference. Server Name The URL you want to use to access this site on your computer. Don't forget to add this to your hosts file! Server Aliases www.app.dev Server aliases are secondary ways to access this site on your computer. Typically www.app.dev or any other subdomains you want to have. Document Root The location of your site's index file, or other landing page on the file system. Port 80 for normal browsing, if you choose another append it to the URL, ex: http://app.dev:1337 Environment Variables APP_ENV dev These should be ""name value"" list of environmental variables you want to access in your code.   Remove this vhost Add another Nginx vhost If you are done configuring, click the big button below. Next Section Create Configuration File Languages PHP PHP [HipHop] Ruby PHP Settings Install You can toggle this setting to turn on/off the PHP installation. PHP Version 5.5 5.4 5.3 Please select a PHP version that is compatible with the OS that you selected in the vagrant configuration. PHP Modules cgi cli common curl dbg enchant fpm gd geoip gmp imagick imap interbase intl ldap mapscript mbstring mcrypt memcache memcached odbc pspell readline recode snmp sqlite svn sybase tidy xcache xmlrpc xsl INI Settings allow_url_fopen allow_url_include always_populate_raw_post_data asp_tags auto_append_file auto_detect_line_endings auto_globals_jit auto_prepend_file browscap child_terminate default_charset default_mimetype default_socket_timeout disable_classes disable_functions display_errors display_startup_errors docref_ext docref_root doc_root engine error_append_string error_log error_prepend_string error_reporting exit_on_timeout expose_php extension extension_dir file_uploads from html_errors ignore_repeated_errors ignore_repeated_source ignore_user_abort implicit_flush include_path last_modified log_errors log_errors_max_len max_execution_time max_input_nesting_level max_input_vars max_input_time memory_limit open_basedir output_buffering output_handler enable_post_data_reading post_max_size precision realpath_cache_size realpath_cache_ttl register_argc_argv report_memleaks report_zend_debug request_order sendmail_from sendmail_path serialize_precision short_open_tag SMTP smtp_port track_errors unserialize_callback_func upload_max_filesize max_file_uploads upload_tmp_dir user_agent user_dir variables_order windows_show_crt_warning xbithack xmlrpc_errors xmlrpc_error_number zend_extension zend_extension_debug zend_extension_debug_ts zend_extension_ts apc.cache_by_default apc.enabled apc.enable_cli apc.file_update_protection apc.filters apc.gc_ttl apc.include_once_override apc.localcache apc.localcache.size apc.max_file_size apc.mmap_file_mask apc.num_files_hint apc.report_autofilter apc.rfc1867 apc.rfc1867_freq apc.rfc1867_name apc.rfc1867_prefix apc.shm_segments apc.shm_size apc.slam_defense apc.stat apc.stat_ctime apc.ttl apc.user_entries_hint apc.user_ttl apc.write_lock apd.dumpdir apd.statement_tracing arg_separator.input arg_separator.output assert.active assert.bail assert.callback assert.quiet_eval assert.warning axis2.client_home axis2.enable_exception axis2.enable_trace axis2.log_path bcmath.scale bcompiler.enabled birdstep.max_links blenc.key_file cgi.check_shebang_line cgi.discard_path cgi.fix_pathinfo cgi.force_redirect cgi.nph cgi.redirect_status_env cgi.rfc2616_headers cli.pager cli.prompt cli_server.color coin_acceptor.auto_initialize coin_acceptor.auto_reset coin_acceptor.command_function coin_acceptor.delay_coins coin_acceptor.delay_prom coin_acceptor.lock_on_close coin_acceptor.start_unlocked com.allow_dcom com.autoregister_casesensitive com.autoregister_typelib com.autoregister_verbose com.code_page com.typelib_file curl.cainfo daffodildb.default_host daffodildb.default_password daffodildb.default_socket daffodildb.default_user daffodildb.port date.default_latitude date.default_longitude date.sunrise_zenith date.sunset_zenith dba.default_handler etpan.default.charset etpan.default.protocol exif.decode_jis_intel exif.decode_jis_motorola exif.decode_unicode_intel exif.decode_unicode_motorola exif.encode_jis exif.encode_unicode expect.logfile expect.loguser expect.timeout fastcgi.impersonate fastcgi.logging fbsql.allow_persistent fbsql.autocommit fbsql.batchsize fbsql.default_database fbsql.default_database_password fbsql.default_host fbsql.default_password fbsql.default_user fbsql.generate_warnings fbsql.max_connections fbsql.max_links fbsql.max_persistent fbsql.max_results fbsql.show_timestamp_decimals filter.default filter.default_flags gd.jpeg_ignore_warning geoip.custom_directory hidef.ini_path highlight.comment highlight.default highlight.html highlight.keyword highlight.string htscanner.config_file htscanner.default_docroot htscanner.default_ttl htscanner.stop_on_error http.etag.mode http.force_exit http.log.allowed_methods http.log.cache http.log.composite http.log.not_found http.log.redirect http.only_exceptions http.persistent.handles.ident http.persistent.handles.limit http.request.datashare.connect http.request.datashare.cookie http.request.datashare.dns http.request.datashare.ssl http.request.methods.allowed http.request.methods.custom http.send.deflate.start_auto http.send.deflate.start_flags http.send.inflate.start_auto http.send.inflate.start_flags http.send.not_found_404 ibase.allow_persistent ibase.dateformat ibase.default_charset ibase.default_db ibase.default_password ibase.default_user ibase.max_links ibase.max_persistent ibase.timeformat ibase.timestampformat ibm_db2.binmode ibm_db2.i5_all_pconnect ibm_db2.i5_allow_commit ibm_db2.i5_dbcs_alloc ibm_db2.instance_name ibm_db2.i5_ignore_userid iconv.input_encoding iconv.internal_encoding iconv.output_encoding imlib2.font_cache_max_size imlib2.font_path ingres.allow_persistent ingres.array_index_start ingres.auto ingres.blob_segment_length ingres.cursor_mode ingres.default_database ingres.default_password ingres.default_user ingres.describe ingres.fetch_buffer_size ingres.max_links ingres.max_persistent ingres.reuse_connection ingres.scrollable ingres.trace ingres.trace_connect ingres.utf8 ldap.max_links mail.add_x_header mail.force_extra_parameters mail.log maxdb.default_db maxdb.default_host maxdb.default_pw maxdb.default_user maxdb.long_readlen mbstring.detect_order mbstring.encoding_translation mbstring.func_overload mbstring.http_input mbstring.http_output mbstring.internal_encoding mbstring.language mbstring.script_encoding mbstring.strict_detection mbstring.substitute_character mcrypt.algorithms_dir mcrypt.modes_dir memcache.allow_failover memcache.chunk_size memcache.default_port memcache.hash_function memcache.hash_strategy memcache.max_failover_attempts mime_magic.debug mime_magic.magicfile mongo.allow_empty_keys mongo.chunk_size mongo.cmd mongo.default_host mongo.default_port mongo.is_master_interval mongo.long_as_object mongo.native_long mongo.ping_interval mongo.utf8 msql.allow_persistent msql.max_links msql.max_persistent mssql.allow_persistent mssql.batchsize mssql.charset mssql.compatability_mode mssql.connect_timeout mssql.datetimeconvert mssql.max_links mssql.max_persistent mssql.max_procs mssql.min_error_severity mssql.min_message_severity mssql.secure_connection mssql.textlimit mssql.textsize mssql.timeout mysql.allow_local_infile mysql.allow_persistent mysql.max_persistent mysql.max_links mysql.trace_mode mysql.default_port mysql.default_socket mysql.default_host mysql.default_user mysql.default_password mysql.connect_timeout mysqli.allow_local_infile mysqli.allow_persistent mysqli.max_persistent mysqli.max_links mysqli.default_port mysqli.default_socket mysqli.default_host mysqli.default_user mysqli.default_pw mysqli.reconnect mysqli.cache_size mysqlnd_memcache.enable mysqlnd_ms.enable mysqlnd_ms.force_config_usage mysqlnd_ms.ini_file mysqlnd_ms.config_file mysqlnd_ms.collect_statistics mysqlnd_ms.multi_master mysqlnd_ms.disable_rw_split mysqlnd_mux.enable mysqlnd_qc.enable_qc mysqlnd_qc.ttl mysqlnd_qc.cache_by_default mysqlnd_qc.cache_no_table mysqlnd_qc.use_request_time mysqlnd_qc.time_statistics mysqlnd_qc.collect_statistics mysqlnd_qc.collect_statistics_log_file mysqlnd_qc.collect_query_trace mysqlnd_qc.query_trace_bt_depth mysqlnd_qc.collect_normalized_query_trace mysqlnd_qc.ignore_sql_comments mysqlnd_qc.slam_defense mysqlnd_qc.slam_defense_ttl mysqlnd_qc.std_data_copy mysqlnd_qc.apc_prefix mysqlnd_qc.memc_server mysqlnd_qc.memc_port mysqlnd_qc.sqlite_data_file mysqlnd_uh.enable mysqlnd_uh.report_wrong_types nsapi.read_timeout oci8.connection_class oci8.default_prefetch oci8.events oci8.max_persistent oci8.old_oci_close_semantics oci8.persistent_timeout oci8.ping_interval oci8.privileged_connect oci8.statement_cache_size odbc.allow_persistent odbc.check_persistent odbc.defaultbinmode odbc.defaultlrl odbc.default_db odbc.default_pw odbc.default_user odbc.max_links odbc.max_persistent odbtp.datetime_format odbtp.detach_default_queries odbtp.guid_format odbtp.interface_file odbtp.truncation_errors opendirectory.max_refs opendirectory.separator pam.servicename pcre.backtrack_limit pcre.recursion_limit pdo.dsn.* pdo_odbc.connection_pooling pgsql.allow_persistent pgsql.auto_reset_persistent pgsql.ignore_notice pgsql.log_notice pgsql.max_links pgsql.max_persistent phar.extract_list phar.readonly phar.require_hash python.append_path python.prepend_path runkit.internal_override runkit.superglobal session.auto_start session.cache_expire session.cache_limiter session.cookie_domain session.cookie_httponly session.cookie_lifetime session.cookie_path session.cookie_secure session.entropy_file session.entropy_length session.gc_divisor session.gc_maxlifetime session.gc_probability session.hash_bits_per_character session.hash_function session.name session.referer_check session.save_handler session.save_path session.serialize_handler session.use_cookies session.use_only_cookies session.use_trans_sid session_pgsql.create_table session_pgsql.db session_pgsql.disable session_pgsql.failover_mode session_pgsql.gc_interval session_pgsql.keep_expired session_pgsql.sem_file_name session_pgsql.serializable session_pgsql.short_circuit session_pgsql.use_app_vars session_pgsql.vacuum_interval simple_cvs.authMethod simple_cvs.compressionLevel simple_cvs.cvsRoot simple_cvs.host simple_cvs.moduleName simple_cvs.userName simple_cvs.workingDir soap.wsdl_cache soap.wsdl_cache_dir soap.wsdl_cache_enabled soap.wsdl_cache_limit soap.wsdl_cache_ttl sql.safe_mode sqlite.assoc_case sybase.allow_persistent sybase.interface_file sybase.max_links sybase.max_persistent sybase.min_error_severity sybase.min_message_severity sybct.deadlock_retry_count sybct.login_timeout sybct.packet_size sybct.timeout sysvshm.init_mem tidy.clean_output tidy.default_config uploadprogress.file.filename_template url_rewriter.tags user_ini.cache_ttl user_ini.filename valkyrie.auto_validate valkyrie.config_path vld.active vld.execute vld.skip_append vld.skip_prepend xmms.path xmms.session yami.response.timeout yaz.keepalive yaz.log_mask zend.enable_gc zend.multibyte zend.script_encoding zend.signal_check zlib.output_compression zlib.output_compression_level zlib.output_handler PHP Timezone Africa/Abidjan Africa/Accra Africa/Addis_Ababa Africa/Algiers Africa/Asmara Africa/Bamako Africa/Bangui Africa/Banjul Africa/Bissau Africa/Blantyre Africa/Brazzaville Africa/Bujumbura Africa/Cairo Africa/Casablanca Africa/Ceuta Africa/Conakry Africa/Dakar Africa/Dar_es_Salaam Africa/Djibouti Africa/Douala Africa/El_Aaiun Africa/Freetown Africa/Gaborone Africa/Harare Africa/Johannesburg Africa/Juba Africa/Kampala Africa/Khartoum Africa/Kigali Africa/Kinshasa Africa/Lagos Africa/Libreville Africa/Lome Africa/Luanda Africa/Lubumbashi Africa/Lusaka Africa/Malabo Africa/Maputo Africa/Maseru Africa/Mbabane Africa/Mogadishu Africa/Monrovia Africa/Nairobi Africa/Ndjamena Africa/Niamey Africa/Nouakchott Africa/Ouagadougou Africa/Porto-Novo Africa/Sao_Tome Africa/Tripoli Africa/Tunis Africa/Windhoek America/Adak America/Anchorage America/Anguilla America/Antigua America/Araguaina America/Argentina/Buenos_Aires America/Argentina/Catamarca America/Argentina/Cordoba America/Argentina/Jujuy America/Argentina/La_Rioja America/Argentina/Mendoza America/Argentina/Rio_Gallegos America/Argentina/Salta America/Argentina/San_Juan America/Argentina/San_Luis America/Argentina/Tucuman America/Argentina/Ushuaia America/Aruba America/Asuncion America/Atikokan America/Bahia America/Bahia_Banderas America/Barbados America/Belem America/Belize America/Blanc-Sablon America/Boa_Vista America/Bogota America/Boise America/Cambridge_Bay America/Campo_Grande America/Cancun America/Caracas America/Cayenne America/Cayman America/Chicago America/Chihuahua America/Costa_Rica America/Creston America/Cuiaba America/Curacao America/Danmarkshavn America/Dawson America/Dawson_Creek America/Denver America/Detroit America/Dominica America/Edmonton America/Eirunepe America/El_Salvador America/Fort_Nelson America/Fortaleza America/Glace_Bay America/Godthab America/Goose_Bay America/Grand_Turk America/Grenada America/Guadeloupe America/Guatemala America/Guayaquil America/Guyana America/Halifax America/Havana America/Hermosillo America/Indiana/Indianapolis America/Indiana/Knox America/Indiana/Marengo America/Indiana/Petersburg America/Indiana/Tell_City America/Indiana/Vevay America/Indiana/Vincennes America/Indiana/Winamac America/Inuvik America/Iqaluit America/Jamaica America/Juneau America/Kentucky/Louisville America/Kentucky/Monticello America/Kralendijk America/La_Paz America/Lima America/Los_Angeles America/Lower_Princes America/Maceio America/Managua America/Manaus America/Marigot America/Martinique America/Matamoros America/Mazatlan America/Menominee America/Merida America/Metlakatla America/Mexico_City America/Miquelon America/Moncton America/Monterrey America/Montevideo America/Montserrat America/Nassau America/New_York America/Nipigon America/Nome America/Noronha America/North_Dakota/Beulah America/North_Dakota/Center America/North_Dakota/New_Salem America/Ojinaga America/Panama America/Pangnirtung America/Paramaribo America/Phoenix America/Port-au-Prince America/Port_of_Spain America/Porto_Velho America/Puerto_Rico America/Rainy_River America/Rankin_Inlet America/Recife America/Regina America/Resolute America/Rio_Branco America/Santarem America/Santiago America/Santo_Domingo America/Sao_Paulo America/Scoresbysund America/Sitka America/St_Barthelemy America/St_Johns America/St_Kitts America/St_Lucia America/St_Thomas America/St_Vincent America/Swift_Current America/Tegucigalpa America/Thule America/Thunder_Bay America/Tijuana America/Toronto America/Tortola America/Vancouver America/Whitehorse America/Winnipeg America/Yakutat America/Yellowknife Antarctica/Casey Antarctica/Davis Antarctica/DumontDUrville Antarctica/Macquarie Antarctica/Mawson Antarctica/McMurdo Antarctica/Palmer Antarctica/Rothera Antarctica/Syowa Antarctica/Troll Antarctica/Vostok Arctic/Longyearbyen Asia/Aden Asia/Almaty Asia/Amman Asia/Anadyr Asia/Aqtau Asia/Aqtobe Asia/Ashgabat Asia/Baghdad Asia/Bahrain Asia/Baku Asia/Bangkok Asia/Barnaul Asia/Beirut Asia/Bishkek Asia/Brunei Asia/Chita Asia/Choibalsan Asia/Colombo Asia/Damascus Asia/Dhaka Asia/Dili Asia/Dubai Asia/Dushanbe Asia/Gaza Asia/Hebron Asia/Ho_Chi_Minh Asia/Hong_Kong Asia/Hovd Asia/Irkutsk Asia/Jakarta Asia/Jayapura Asia/Jerusalem Asia/Kabul Asia/Kamchatka Asia/Karachi Asia/Kathmandu Asia/Khandyga Asia/Kolkata Asia/Krasnoyarsk Asia/Kuala_Lumpur Asia/Kuching Asia/Kuwait Asia/Macau Asia/Magadan Asia/Makassar Asia/Manila Asia/Muscat Asia/Nicosia Asia/Novokuznetsk Asia/Novosibirsk Asia/Omsk Asia/Oral Asia/Phnom_Penh Asia/Pontianak Asia/Pyongyang Asia/Qatar Asia/Qyzylorda Asia/Rangoon Asia/Riyadh Asia/Sakhalin Asia/Samarkand Asia/Seoul Asia/Shanghai Asia/Singapore Asia/Srednekolymsk Asia/Taipei Asia/Tashkent Asia/Tbilisi Asia/Tehran Asia/Thimphu Asia/Tokyo Asia/Tomsk Asia/Ulaanbaatar Asia/Urumqi Asia/Ust-Nera Asia/Vientiane Asia/Vladivostok Asia/Yakutsk Asia/Yekaterinburg Asia/Yerevan Atlantic/Azores Atlantic/Bermuda Atlantic/Canary Atlantic/Cape_Verde Atlantic/Faroe Atlantic/Madeira Atlantic/Reykjavik Atlantic/South_Georgia Atlantic/St_Helena Atlantic/Stanley Australia/Adelaide Australia/Brisbane Australia/Broken_Hill Australia/Currie Australia/Darwin Australia/Eucla Australia/Hobart Australia/Lindeman Australia/Lord_Howe Australia/Melbourne Australia/Perth Australia/Sydney Europe/Amsterdam Europe/Andorra Europe/Astrakhan Europe/Athens Europe/Belgrade Europe/Berlin Europe/Bratislava Europe/Brussels Europe/Bucharest Europe/Budapest Europe/Busingen Europe/Chisinau Europe/Copenhagen Europe/Dublin Europe/Gibraltar Europe/Guernsey Europe/Helsinki Europe/Isle_of_Man Europe/Istanbul Europe/Jersey Europe/Kaliningrad Europe/Kiev Europe/Kirov Europe/Lisbon Europe/Ljubljana Europe/London Europe/Luxembourg Europe/Madrid Europe/Malta Europe/Mariehamn Europe/Minsk Europe/Monaco Europe/Moscow Europe/Oslo Europe/Paris Europe/Podgorica Europe/Prague Europe/Riga Europe/Rome Europe/Samara Europe/San_Marino Europe/Sarajevo Europe/Simferopol Europe/Skopje Europe/Sofia Europe/Stockholm Europe/Tallinn Europe/Tirane Europe/Ulyanovsk Europe/Uzhgorod Europe/Vaduz Europe/Vatican Europe/Vienna Europe/Vilnius Europe/Volgograd Europe/Warsaw Europe/Zagreb Europe/Zaporozhye Europe/Zurich Indian/Antananarivo Indian/Chagos Indian/Christmas Indian/Cocos Indian/Comoro Indian/Kerguelen Indian/Mahe Indian/Maldives Indian/Mauritius Indian/Mayotte Indian/Reunion Pacific/Apia Pacific/Auckland Pacific/Bougainville Pacific/Chatham Pacific/Chuuk Pacific/Easter Pacific/Efate Pacific/Enderbury Pacific/Fakaofo Pacific/Fiji Pacific/Funafuti Pacific/Galapagos Pacific/Gambier Pacific/Guadalcanal Pacific/Guam Pacific/Honolulu Pacific/Johnston Pacific/Kiritimati Pacific/Kosrae Pacific/Kwajalein Pacific/Majuro Pacific/Marquesas Pacific/Midway Pacific/Nauru Pacific/Niue Pacific/Norfolk Pacific/Noumea Pacific/Pago_Pago Pacific/Palau Pacific/Pitcairn Pacific/Pohnpei Pacific/Port_Moresby Pacific/Rarotonga Pacific/Saipan Pacific/Tahiti Pacific/Tarawa Pacific/Tongatapu Pacific/Wake Pacific/Wallis UTC PEAR Install PEAR You can toggle this setting to turn on/off the PEAR installation. PEAR Modules Auth_SASL2 OpenID Config_Lite Console_Color2 Console_CommandLine Console_GetoptPlus DB_DataObject DB_Sqlite_Tools MDB2 MDB2_Driver_fbsql MDB2_Driver_ibase MDB2_Driver_mssql MDB2_Driver_mysql MDB2_Driver_mysqli MDB2_Driver_oci8 MDB2_Driver_odbc MDB2_Driver_pgsql MDB2_Driver_querysim MDB2_Driver_sqlite MDB2_Driver_sqlsrv SQL_Parser Calendar Date_Holidays Date_Holidays_Austria Date_Holidays_Netherlands Date_HumanDiff Crypt_CHAP Crypt_DiffieHellman Crypt_GPG Crypt_HMAC2 Crypt_MicroID Crypt_RC42 Event_SignalEmitter File_Bittorrent2 File_Cabinet File_CSV_DataSource File_DeliciousLibrary File_Fortune File_IMC File_Infopath File_MARC File_Ogg File_Sitemap File_XSPF MP3_IDv2 MP3_Playlist OpenDocument File_Mogile Gtk2_EntryDialog Gtk2_ExceptionDump Gtk2_FileDrop Gtk2_IndexedComboBox Gtk2_PHPConfig Gtk2_ScrollingLabel Gtk2_VarDump HTML_BBCodeParser2 HTML_Common2 HTML_Entities HTML_QuickForm2 HTML_Safe HTML_TagCloud HTTP2 HTTP_FloodControl HTTP_Header2 HTTP_OAuth HTTP_Request2 HTTP_Session2 Image_3D Image_Barcode2 Image_Color2 Image_Graph Image_JpegMarkerReader Image_JpegXmpReader Image_QRCode Image_Transform I18N_UnicodeNormalizer I18N_UnicodeString Log Math_Combinatorics Net_CheckIP2 Net_DNS2 Net_DNSBL Net_GameServerQuery Net_Gearman Net_GeoIP Net_Growl Net_IDNA2 Net_LDAP2 Net_MAC Net_MPD Net_Nmap Net_NNTP Net_URL2 Net_URL_Mapper Net_UserAgent_Mobile_GPS Net_Vpopmaild Net_WebFinger URI_Template Payment_DTA Payment_PagamentoCerto Payment_PayPal_SOAP Payment_Process2 PEAR_Command_Packaging PEAR_Frontend_Gtk2 PEAR_PackageFileManager_Cli PEAR_PackageFileManager_Frontend PEAR_PackageUpdate_Gtk2 PEAR_RemoteInstaller PEAR_Size PHP_Archive PHP_ArrayOf PHP_Beautifier PHP_CodeSniffer PHP_Debug PHP_DocBlockGenerator PHP_FunctionCallTracer PHP_LexerGenerator PHP_Parser PHP_ParserGenerator PHP_Parser_DocblockParser PHP_Shell PHP_UML XML_GRDDL OLE Structures_DataGrid Structures_DataGrid_DataSource_Excel Structures_DataGrid_DataSource_PDO Structures_Form Structures_Form_Gtk2 Structures_LinkedList System_Daemon System_Launcher Text_CAPTCHA_Numeral Text_Huffman Text_LanguageDetect Testing_DocTest Testing_FIT Testing_Selenium CodeGen CodeGen_MySQL CodeGen_MySQL_Plugin CodeGen_MySQL_UDF CodeGen_PECL ScriptReorganizer Search_Mnogosearch Validate_ES Validate_IR Validate_LI Validate_LU Validate_NO Validate_SE VersionControl_Git VersionControl_SVN Services_Akismet2 Services_Amazon_S3 Services_Amazon_SQS Services_Apns Services_Atlassian_Crowd Services_Blogging Services_Compete Services_Digg2 Services_ExchangeRates Services_Facebook Services_GeoNames Services_Google Services_Libravatar Services_Mailman Services_oEmbed Services_OpenSearch Services_OpenStreetMap Services_PageRank Services_ProjectHoneyPot Services_ReCaptcha Services_Scribd Services_SharedBook Services_ShortURL Services_Technorati Services_TinyURL Services_Trackback Services_Twitter Services_Twitter_Uploader Services_urlTea Services_UseKetchup Services_W3C_CSSValidator Services_W3C_HTMLValidator Services_Yadis Services_Yahoo Services_Yahoo_JP Services_YouTube SOAP XML_RPC2 XML_Feed_Parser XML_FOAF XML_MXML XML_Parser2 XML_Query2XML XML_Util2 XML_XRD XML_XUL PECL Install PECL You can toggle this setting to turn on/off the PECL installation. PECL Modules courierauth PAM radius sasl DTrace inclued APC APCu chdb coherence hidef memcache memcached memoize memoize_apc memoize_memcached memoize_memory varnish WinCache ZendOpcache augeas zookeeper ncurses newt tvision xmms couchbase CUBRID daffodildb dbase DBDO dbplus dbx drizzle filepro hwapi ibm_db2 informix ingres isis lchash leveldb maxdb mdbtools mongo mysql mysqlnd_memcache mysqlnd_ms mysqlnd_qc mysqlnd_uh notes oci8 odbtp Ovrimos Paradox PDO PDO_4D PDO_CUBRID PDO_DBLIB PDO_FIREBIRD PDO_IBM PDO_INFORMIX PDO_MYSQL PDO_OCI PDO_ODBC PDO_PGSQL PDO_SQLANYWHERE PDO_SQLITE pdo_sqlsrv pdo_user PDO_XML pq redis sqlanywhere SQLite sqlite3 sqlsrv tdb tokyo_tyrant date_time timezonedb BLENC gnupg mcrypt_filter eio ev libevent archive bz2 cpdf Fileinfo fpdf haru id3 lzf qqwry rar rpmreader syck yaml zip dazuko fuse inotify mogilefs xattr php_xcb tk win32std WinBinder wxwidgets html_parse tidy pecl_http txforward uri_template cairo cairo_wrapper framegrab FreeImage GDChart gmagick imagick imlib2 pango rsvg cld fribidi gender idn intl translit unicode unicodestring lua perl python spidermonkey v8js mailparse POP3 vpopmail big_int lapack stats trader ecasound ming sdl amqp ares cvsclient cyrus DBus esmtp event gearman geoip gupnp IMS kadm5 mqseries msession netools Net_Gopher ocal opendirectory perforce sam spread ssh2 tcpwrap uuid yami yaz yp zeroconf Bitset coin_acceptor cybercash cybermut mcve spplus TCLink AOP apd APM automap bcompiler classkit docblock ffi funcall htscanner igbinary intercept llvm memsession memtrack meta mono operator optimizer params parsekit Parse_Tree phar PHK PHPScript postparser PreProcessor propro raphf runkit scream session_mysql tcc uploadprogress vld amfext rrd shape clucene mnogosearch solr sphinx swish selinux taint oggvorbis openal bloomy Judy quickhash Weakref ApacheAccessor dio expect fam printer proctitle pthreads statgrab threads w32api win32ps win32ps_dll win32service yaf bbcode colorer doublemetaphone enchant jsmin markdown namazu panda pdflib ps re2 ssdeep stem sundown TextCat xdiff clips crack crack_dll fann filter functional graphdat hash huffman msgpack pcsc PECL_Gen rsync SPL SPL_Types stomp svm udis86 Valkyrie xrange libvirt axis2 json oauth SCA_SDO xcommerce yar domxml WBXML xmlReader XMLRPCi xmlwriter xslcache XDebug Install XDebug CLI debugging will automatically be available via $ xdebug foo.php. Learn more about debugging a remote server. Install Webgrind Webgrind is a GUI for XDebug. You can read more about it here. Settings auto_trace cli_color collect_assignments collect_includes collect_params collect_return collect_vars coverage_enable default_enable dump_COOKIE dump_ENV dump_FILES dump_GET dump_POST dump_REQUEST dump_SERVER dump_SESSION dump_globals dump_once dump_undefined extended_info file_link_format force_display_errors force_error_reporting halt_level idekey manual_url max_nesting_level overload_var_dump profiler_append profiler_enable profiler_enable_trigger profiler_output_dir profiler_output_name remote_autostart remote_connect_back remote_cookie_expire_time remote_enable remote_handler remote_host remote_log remote_mode remote_port scream show_exception_trace show_local_vars show_mem_delta trace_enable_trigger trace_format trace_options trace_output_dir trace_output_name var_display_max_children var_display_max_data var_display_max_depth Learn why you should be using a real debugger. Xhprof Install Xhprof Logs will be available from http://<ip_address>/xhprof. The IP address is the one you chose here. Learn how to use XHProf Extras Install phpMyAdmin phpMyAdmin will be available at http://ipaddress/phpmyadmin Install Composer Composer will be available as a system service: $ composer Install Mailcatcher Mailcatcher will be available available at: http://ipaddress:1080/ HHVM Settings Install You can toggle this setting to turn on/off the HHVM installation. Use HHVM Nightlies You can toggle this setting to turn on/off the HHVM Nightly Package installation. Extras Install Composer Composer will be available as a system service: $ composer Use HHVM for Composer This will use HHVM to process composer, greatly increasing speed. Ruby Settings Install You can toggle this setting to turn on/off the Ruby installation. Ruby Gems Ruby gems to install. If you are done configuring, click the big button below. Next Section Create Configuration File Data Store MySQL MariaDB PostgreSQL MongoDB Redis Riak MySQL Settings Install You can toggle this setting to turn on/off the MySQL installation. Root Password Assign a password to the root user. Database will only be installed when a password is entered here. MySQL Database #1 DB Name DB Host Username Password Privileges All Import Database From File Protobox will import the databases automatically if a DB_NAME.sql is found at ./data/sql/DB_NAME.sql. Optionally you can specify an import file manually above. Make sure this file is inside the VM before running $ vagrant up Remove this database Add another MySQL database MariaDB Settings Install You can toggle this setting to turn on/off the MariaDB installation. Version 5.5 10.0 Read more about MariaDB versioning. Root Password Assign a password to the root user. Database will only be installed when a password is entered here. MariaDB Database #1 DB Name DB Host Username Password Privileges All Import Database From File Protobox will import the databases automatically if a DB_NAME.sql is found at ./data/sql/DB_NAME.sql. Optionally you can specify an import file manually above. Make sure this file is inside the VM before running $ vagrant up Remove this database Add another MariaDB database PostgreSQL is coming soon. Mongdb is coming soon. Redis is coming soon. Riak is coming soon. If you are done configuring, click the big button below. Next Section Create Configuration File Queues RabbitMQ Beanstalkd IronMQ Amazon SQS RabbitMQ Install You can toggle this setting to turn on/off the RabbitMQ installation. Beanstalkd is coming soon. IronMQ does not need anything installed on the server. We suggest you use a framework or package that integrates this service in your application. Amazon SQS does not need anything installed on the server. We suggest you use a framework or package that integrates this service in your application. If you are done configuring, click the big button below. Next Section Create Configuration File Tools Local Tunnel Install Ngrok Ngrok will be available as a system service: $ ngrok NewRelic Install You can toggle this setting to turn on/off the NewRelic installation. License Key Insert your newrelic license key here. Install PHP Agent You can toggle this setting to turn on/off the NewRelic PHP Agent. Install Node Agent You can toggle this setting to turn on/off the NewRelic Node Agent. Protobox Dashboard Install You can toggle this setting to turn on/off the protobox dashboard installation. License Key The default path to install the dashboard. Virtualhosts will point to this path. If you are done configuring, click the big button below. Next Section Create Configuration File You're almost there! All you have to do now is click the big button. The next page will help guide you into getting your new configuration loaded into protobox. Create Configuration File Getting Started Applications Vagrant Server Web Server Languages Data Store Queues Tools Build Back to top © 2013 - 2016 Protobox. All rights reserved. Created by Patrick Heeney. Code licensed under MIT License."	"null"	"null"	"Another web tool for building PHP development virtual machines."	"true"
"Development Environment"	"PuPHPet"	"https://puphpet.com/"	"A web tool for building PHP development virtual machines."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3579"	"162"	"671"	"GitHub - puphpet/puphpet: Vagrant/Puppet GUI Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 162 Star 3,579 Fork 671 puphpet/puphpet Code Issues 222 Pull requests 8 Wiki Pulse Graphs Vagrant/Puppet GUI 2,350 commits 12 branches 3 releases 145 contributors HTML 51.1% PHP 12.9% Shell 10.4% Puppet 10.3% Ruby 6.8% JavaScript 3.6% Other 4.9% HTML PHP Shell Puppet Ruby JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master multi-machines ppa-ondrej-php production puphpet-module theme-1.0 theme-2.0 theme-3.0 theme-4.0 theme-5.0 theme-5.1 v2 Nothing to show v4-design symfony-2.4.x pre-php-fpm Nothing to show New pull request Latest commit 9368bfc Jul 12, 2016 jtreminio Missing Package for apt-transport-https check Permalink Failed to load latest commit information. app Sets up firewall Apr 19, 2016 archive Missing Package for apt-transport-https check Jul 12, 2016 bin Updates to use puppetlabs-apt 2.2.1; librarian-puppet requires full g… Jan 14, 2016 src/PuphpetBundle Adds message about #2361 for config.yaml Jun 30, 2016 web Theme 5.1 Apr 20, 2016 .gitattributes Squashed commit of the following: Apr 18, 2015 .gitignore Upgrades to SF2.8.x Apr 19, 2016 .travis.yml Upgrades to SF2.8.x Apr 19, 2016 CONTRIBUTING.md Renames Puphpet\MainBundle -> PuphpetBundle Apr 19, 2016 LICENSE Updated copyright to 2016 Jan 1, 2016 README.md Minimum Vagrant version set to 1.8.1 Jan 14, 2016 README_pt-br.md Adding the Code Climate badge to the two README files Jan 5, 2015 composer.json Wrong tag id Apr 21, 2016 composer.lock Theme 5.1 Apr 20, 2016 phpunit.xml.dist Initial unit testing skeleton Oct 12, 2013 phpunit_ci.xml.dist PuPHPet tests require 5.5; Removing nyancat from travis config. Boo :( Oct 17, 2013 README.md PuPHPet PuPHPet - A simple GUI to set up virtual machines for PHP development What? PuPHPet is a web application that allows you to easily and quickly generate custom Vagrant and Puppet controlled virtual machines. If you're unfamiliar with either Vagrant or Puppet, I wrote a blog titled ""Make $ vagrant up yours"". How? PHP drives the frontend, using the ""Symfony2 framework"". Choices are set into a yaml file that configures the main Puppet manifest with your custom settings. Why? I started using Vagrant and Puppet when I wanted a simple PHP 5.4 VM to do my development on. I could find nothing pre-made that didn't come with a bunch of cruft I did not want so I decided to create a tool that would ease this task for other developers who may not want to learn Puppet's DSL to get a VM up and running so they can develop in their language of choice. Who? Originally developed by Juan Treminio, PuPHPet has now had 29 contributors (as of 12/15/13), with the talented Frank Stelzer heavily contributing. Also making significant contributions is Michaël Perrin. Sometime in mid August 2013, work on v2 was begun to attempt to solve problems encountered with v1: difficult to add new features, too much PHP logic controlling Puppet logic, difficult to change an existing manifest. Goals The main goal of PuPHPet is to eventually replace tools such as XAMPP, WAMPP, MAMPP and other all-in-one servers that create development environments on your main operating system. Eventually PuPHPet will be good enough to help create production-ready servers! Requirements To run PuPHPet-generated manifests, you'll need to install Vagrant version 1.8.1 or greater. Vagrant will run on Windows, OS X and Linux. Contribution If you have a patch, or stumbled upon an issue with PuPHPet core, you can contribute this back to the code. Please read our contributor guidelines for more information how you can do this. License PuPHPet is licensed under the MIT license all third-party Puppet Modules are licensed under Apache License v2.0. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/puphpet/puphpet"	"A web tool for building PHP development virtual machines."	"true"
"Development Environment"	"Puppet"	"https://puppet.com/"	"A server automation framework and application."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Puppet - The shortest path to better software Skip to main content Home PuppetConf Forge Docs Learn Support & services Contact us Product Puppet Enterprise Insight & automation to drive change with confidence The leading platform for providing & operating constantly modern software. Automatically deliver, update, monitor & secure your infrastructure. Get Puppet Enterprise First 10 nodes free How Puppet works Define & deploy change – on any device, anywhere Download Puppet Enterprise Orchestrate change across your apps and infrastructure Try the Learning VM Learn Puppet at your own pace Preview Puppet emulator Explore how Puppet works in 7 simple screens Capabilities Automate the delivery & operation of your software Platform Make security & scale inherent & automatic Managed technology If it has an IP address, manage it with Puppet Pricing Free, standard and premium options Enterprise & Open Source Puppet Compare our open source and enterprise solutions Open source projects Check out dozens of projects in the Puppet ecosystem Solutions Solutions Automation bridging today’s & tomorrow’s realities Automate DevOps, security & cloud practices to move forward, confidently. Solutions to help deliver & operate modern software. Simply, scalably, securely. Gartner on automation Read the research & case studies DevOps Deliver faster with a proven DevOps platform Security & compliance Enforce security policies and prove compliance Configuration management Deploy & manage infrastructure faster, more reliably Cloud management Increase cloud productivity, agility and reliability Containers & microservices Adopt new tech like Docker and Kubernetes faster Infrastructure as code The foundation needed for your DevOps practice View more Resources Resource library Browse all of our resources and filter by topics Analyst reports Case studies Customer stories Data sheets On-demand webinars Podcasts Solution briefs Videos White papers Community Community portal Find help and connect with the community Events Connect with Puppet users and employees Puppet Camps One-day events with user presentations Contributor events Contributor Summits, hacks and triages Trade shows & conferences Come see us at these industry events Upcoming webinars See what’s new and ask questions live PuppetConf 2016 Get on the path to a better future Blog Read technical posts and Puppet news Puppet user groups Local meetups for learning and sharing Puppet Test Pilots Be the first to try new prototypes and features Shop Let your Puppet flag fly Partners Partners Drive change with confidence Find a partner Let us connect you with the right partner Channel partner program Join our worldwide network of Puppet resellers Service delivery partner program Get certified to deliver services on behalf of Puppet Authorized training partner program Provide training to Puppet users in your region Technology alliance partners Partner with Puppet to build a joint solution Company About us Learn more about Puppet the company Press room Not to brag, but people write about us Management Meet our executives, board, advisors and investors Careers Check out our openings and why we love it here Contact Find our offices, give us a call or send us a message Mobile Menu x Search Home PuppetConf Forge Docs Learn Product Puppet Enterprise How it works Capabilities Platform Managed technology Pricing Puppet Enterprise and Open Source Puppet Open source projects Solutions DevOps Security and compliance Configuration management Containers & microservices Infrastructure as code View more Resources Resource library Analyst reports Case studies Customer stories Data sheets On-demand webinars Podcasts Solution briefs Videos White papers Community Community Events Puppet Camps PuppetConf Contributer events Trade shows & conferences Upcoming webinars Puppet user groups Blog Puppet Test Pilots Shop Partners Partners Find a partner Channel partner program Service delivery partner program Authorized training partner program Technology alliance partners Company About us Pressroom Management Careers Contact Search form Search The shortest path to better software. Learn how Try it free The 2016 State of DevOps Report is here See what you can learn from high performers. Get the report DevOps Lay the foundation for your DevOps practices. Treat infrastructure as code, and get better, deeper collaboration between dev, ops, InfoSec and networking, too. Learn more Security & compliance Enforce your security policies and prove compliance. With Puppet, ensuring and proving security and compliance becomes efficient, automatic, and transparent. Learn more Cloud Adopt, unify and manage cloud environments – public, private, and hybrid – by automating every stage of your modern data center. Simply, at scale, and securely. Learn more From startups to the Fortune 100, thousands of companies rely on Puppet. See more of our customers Constantly modern with Puppet Puppet Enterprise is the leading platform for delivering and operating constantly modern software – no matter where it runs. With Puppet you know exactly what is going on with all your software, and you get the automation needed to drive change with confidence. Learn more Latest See more Blog post 2016 State of DevOps Report has landed White paper 2016 State of DevOps Report Analyst report Gartner publication: The Value of IT Automation Blog post Puppet Enterprise 2016.2 is now available Footer Overview Product Solutions Resource library Company Open source projects Security Resources Get help Find a partner Training Sitemap Connect Contact us Events Blog Join our mailing list Get our monthly newsletter and the occasional email we think you'll like. Legal / Privacy policy / Terms of use © 2016 Puppet"	"null"	"null"	"A server automation framework and application."	"true"
"Development Environment"	"Vagrant"	"https://www.vagrantup.com/"	"A portable development environment utility."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"12540"	"701"	"2664"	"GitHub - mitchellh/vagrant: Vagrant is a tool for building and distributing development environments. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 701 Star 12,540 Fork 2,664 mitchellh/vagrant Code Issues 312 Pull requests 33 Wiki Pulse Graphs Vagrant is a tool for building and distributing development environments. https://www.vagrantup.com 9,000 commits 3 branches 111 releases 693 contributors Ruby 93.1% HTML 3.0% CSS 1.8% PowerShell 1.2% Shell 0.5% JavaScript 0.4% Ruby HTML CSS PowerShell Shell JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master remove-deprecated-config-props sethvargo/pr-5193 Nothing to show v1.8.4 v1.8.3 v1.8.1 v1.8.0 v1.7.4 v1.7.3 v1.7.2 v1.7.1 v1.7.0 v1.6.5 v1.6.4 v1.6.3 v1.6.2 v1.6.1 v1.6.0 v1.5.4 v1.5.3 v1.5.2 v1.5.1 v1.5.0 v1.4.3 v1.4.2 v1.4.1 v1.4.0 v1.3.5 v1.3.4 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.7 v1.2.6 v1.2.5 v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.5 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v1.0.0.rc2 v1.0.0.rc1 v0.9.7 v0.9.6 v0.9.5 v0.9.4 v0.9.3 v0.9.2 v0.9.1 v0.9.0 v0.8.10 v0.8.9 v0.8.8 v0.8.7 v0.8.6 v0.8.5 v0.8.4 v0.8.3 v0.8.2 v0.8.1 v0.8.0 v0.7.8 v0.7.7 v0.7.6 v0.7.5 v0.7.4 v0.7.3 v0.7.2 v0.7.1 v0.7.0 v0.6.9 v0.6.8 v0.6.7 v0.6.6 v0.6.5 v0.6.4 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.2 v0.4.1 v0.4.0 Nothing to show New pull request Latest commit d9936e8 Jul 15, 2016 sethvargo committed on GitHub Merge pull request #7589 from junaruga/feature/support-rest-client-2 … Support rest-client 2.x as a dependency Permalink Failed to load latest commit information. .github Update ISSUE_TEMPLATE.md Jun 6, 2016 bin Allow users to force color May 30, 2016 contrib Merge pull request #7270 from lpenz/nfspager Jun 6, 2016 keys Use SSL and HTTPS links where appropriate Jan 25, 2016 lib core/bundler: Reset specs in a way that works with new Rubygems Jun 20, 2016 plugins Add VirtualBox 5.1 driver Jul 13, 2016 scripts Update RELEASE Jun 14, 2016 tasks Use color Jul 9, 2015 templates guests/darwin: Allow ipv6 static networks Jun 19, 2016 test guests/linux: Ensure NFS retries when mounting Jun 19, 2016 website Re-add typekit Jun 20, 2016 .gitignore Merge docs and www into a single static site Jan 19, 2016 .travis.yml Bump listen gem Jun 15, 2016 .vimrc .vimrc with vagrant tabstop settings Oct 22, 2013 .yardopts YARD and some documentation Sep 22, 2010 CHANGELOG.md Update CHANGELOG Jul 13, 2016 Gemfile Use Winrm 1.2.0 and fix tests Dec 11, 2014 LICENSE Updated copyright to 2016 Jan 1, 2016 README.md Use SSL and HTTPS links where appropriate Jan 25, 2016 RELEASE.md Update RELEASE Jun 14, 2016 Rakefile Change symbols inside hashes to 1.9 JSON-like syntax May 22, 2014 Vagrantfile Fix Vagrantfile Jul 8, 2015 vagrant-spec.config.example.rb core: Within a Bundler env, don't manage Bundler Jan 17, 2014 vagrant.gemspec Support rest-client 2.x as a dependency Jul 15, 2016 version.txt up version for dev Jun 17, 2016 README.md Vagrant Website: https://www.vagrantup.com/ Source: https://github.com/mitchellh/vagrant IRC: #vagrant on Freenode Mailing list: Google Groups Vagrant is a tool for building and distributing development environments. Development environments managed by Vagrant can run on local virtualized platforms such as VirtualBox or VMware, in the cloud via AWS or OpenStack, or in containers such as with Docker or raw LXC. Vagrant provides the framework and configuration format to create and manage complete portable development environments. These development environments can live on your computer or in the cloud, and are portable between Windows, Mac OS X, and Linux. Quick Start For the quick-start, we'll bring up a development machine on VirtualBox because it is free and works on all major platforms. Vagrant can, however, work with almost any system such as OpenStack, VMware, Docker, etc. First, make sure your development machine has VirtualBox installed. After this, download and install the appropriate Vagrant package for your OS. To build your first virtual environment: vagrant init hashicorp/precise32 vagrant up  Note: The above vagrant up command will also trigger Vagrant to download the precise32 box via the specified URL. Vagrant only does this if it detects that the box doesn't already exist on your system. Getting Started Guide To learn how to build a fully functional development environment, follow the getting started guide. Installing the Gem from Git If you want the bleeding edge version of Vagrant, we try to keep master pretty stable and you're welcome to give it a shot. The following is an example showing how to do this: rake install  Ruby 2.0 is needed. Contributing to Vagrant To install Vagrant from source, please follow the guide in the Wiki. You can run the test suite with: bundle exec rake  This will run the unit test suite, which should come back all green! Then you're good to go! If you want to run Vagrant without having to install the gem, you may use bundle exec, like so: bundle exec vagrant help  NOTE: By default running Vagrant via bundle will disable plugins. This is necessary because Vagrant creates its own private Bundler context (it does not respect your Gemfile), because it uses Bundler to manage plugin dependencies. Acceptance Tests Vagrant also comes with an acceptance test suite that does black-box tests of various Vagrant components. Note that these tests are extremely slow because actual VMs are spun up and down. The full test suite can take hours. Instead, try to run focused component tests. To run the acceptance test suite, first copy vagrant-spec.config.example.rb to vagrant-spec.config.rb and modify it to valid values. The places you should fill in are clearly marked. Next, see the components that can be tested: $ rake acceptance:components cli provider/virtualbox/basic ...  Then, run one of those components: $ rake acceptance:run COMPONENTS=""cli"" ...  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mitchellh/vagrant"	"A portable development environment utility."	"true"
"Virtual Machines"	"Hack"	"http://hacklang.org/"	"A programming language for HHVM that interoperates seamlessly with PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Hack Hack Install Tutorial Cookbook Docs GitHub HHVM Programming productivity without breaking things Get Started with Hack What is Hack? Hack is a programming language for HHVM. Hack reconciles the fast development cycle of a dynamically typed language with the discipline provided by static typing, while adding many features commonly found in other modern programming languages. Hack provides instantaneous type checking by incrementally checking your files as you edit them. It typically runs in less than 200 milliseconds, making it easy to integrate into your development workflow without introducing a noticeable delay. The following are some of the important language features of Hack. For more information, see the full documentation, or follow through the quick interactive tutorial. Type Annotations allow for code to be explicitly typed on parameters, class member variables and return values: <?hh class MyClass {   const int MyConst = 0;   private string $x = '';   public function increment(int $x): int {     $y = $x + 1;     return $y;   } } Generics allow classes and methods to be parameterized (i.e., a type associated when a class is instantiated or a method is called) in the same vein as statically type languages like C# and Java): <?hh class Box<T> {   protected T $data;    public function __construct(T $data) {     $this->data = $data;   }    public function getData(): T {     return $this->data;   } } Nullable Types are supported by Hack through use of the ? operator. This introduces a safer way to deal with nulls and is very useful for primitive types that don’t generally allow null as one of their values, such as bool and int (using ?bool and ?int respectively). The operator can be used on any type or class. Collections provide first class, built-in parameterized types such as Vector (an ordered, index-based list), Map (an ordered dictionary), Set (a list of unique values), and Pair (an index-based collection of exactly two elements). Lambdas succinctly allow definition of first-class functions: <?hh function foo(): (function(string): string) {   $x = 'bar';   return $y ==> $x . $y; } function test(): void {   $fn = foo();   echo $fn('baz'); // barbaz } Other significant features of Hack include XHP, Shapes, Type Aliasing, Async support, backwards compatibility with PHP code, and much more. We are delighted to have open-sourced both Hack and conversion tools you can use on your own codebase. We are dedicated to continuing to work on this project: we would love to have your feedback on our work so far, and welcome you all to participate in the HHVM and Hack communities. Feature Overview Typing Async Collections XHP Community Hack on Twitter HHVM Blog HHVM IRC Chat Hack Dev Day 2014 Hack Specification Open Source GitHub License Contributing Cookbook on Github Docs on Github HHVM © Copyright 2016, Facebook"	"null"	"null"	"A programming language for HHVM that interoperates seamlessly with PHP."	"true"
"Virtual Machines"	"HHVM"	"https://github.com/facebook/hhvm"	"A Virtual Machine, Runtime and JIT for PHP by Facebook."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"13772"	"1146"	"2541"	"GitHub - facebook/hhvm: A virtual machine designed for executing programs written in Hack and PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,146 Star 13,772 Fork 2,541 facebook/hhvm Code Issues 933 Pull requests 29 Wiki Pulse Graphs A virtual machine designed for executing programs written in Hack and PHP. http://hhvm.com 19,434 commits 21 branches 67 releases 416 contributors C++ 62.8% PHP 23.5% Hack 5.5% OCaml 4.1% C 2.8% CMake 0.6% Other 0.7% C++ PHP Hack OCaml C CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags HHVM-2.2 HHVM-2.3 HHVM-2.4 HHVM-3.0 HHVM-3.1 HHVM-3.2 HHVM-3.3 HHVM-3.4 HHVM-3.5 HHVM-3.6 HHVM-3.7 HHVM-3.8 HHVM-3.9 HHVM-3.10 HHVM-3.11 HHVM-3.12 HHVM-3.13 HHVM-3.14 HPHP-2.0 HPHP-2.1 master Nothing to show use-hphpc src-hphp pre-hhvm gcc-4.6 HPHP-2.1.0 HPHP-2.0.2 HPHP-2.0.1 HPHP-2.0.0 HHVM-3.14.2 HHVM-3.14.1 HHVM-3.14.0 HHVM-3.13.2 HHVM-3.13.1 HHVM-3.13.0 HHVM-3.12.4 HHVM-3.12.3 HHVM-3.12.2 HHVM-3.12.1 HHVM-3.12.0 HHVM-3.11.1 HHVM-3.11.0 HHVM-3.10.1 HHVM-3.10.0 HHVM-3.9.5 HHVM-3.9.4 HHVM-3.9.3 HHVM-3.9.2 HHVM-3.9.1 HHVM-3.9.0 HHVM-3.8.1 HHVM-3.8.0 HHVM-3.7.3 HHVM-3.7.2 HHVM-3.7.1 HHVM-3.7.0 HHVM-3.6.6 HHVM-3.6.5 HHVM-3.6.4 HHVM-3.6.3 HHVM-3.6.2 HHVM-3.6.1 HHVM-3.6.0 HHVM-3.5.1 HHVM-3.5.0 HHVM-3.4.2 HHVM-3.4.1 HHVM-3.4.0 HHVM-3.3.7 HHVM-3.3.6 HHVM-3.3.5 HHVM-3.3.4 HHVM-3.3.3 HHVM-3.3.2 HHVM-3.3.1 HHVM-3.3.0 HHVM-3.2.0 HHVM-3.1.0 HHVM-3.0.1 HHVM-3.0.0 HHVM-2.4.2 HHVM-2.4.1 HHVM-2.4.0 HHVM-2.3.3 HHVM-2.3.2 HHVM-2.3.1 HHVM-2.3.0 HHVM-2.2.0 Nothing to show New pull request Latest commit e6abf02 Jul 15, 2016 Orvid committed with Hhvm Bot Fix parsing INF/NAN floats in PHP7 mode … Summary: PHP7 includes a large refactor of strtod, and in the process support was added for parsing INF/NAN strings as floats. I've gated this behind a runtime option.  Fixes #6986  Reviewed By: alexmalyshev  Differential Revision: D3289627  fbshipit-source-id: 962974150723b67ebb0e0401427c029da0c66fc0 Permalink Failed to load latest commit information. CMake Additional fixup after the third-party update Jul 9, 2016 hphp Fix parsing INF/NAN floats in PHP7 mode Jul 15, 2016 third-party @ db9419a Update third-party. Jul 12, 2016 .gitignore Remove remnants of idl files Apr 13, 2016 .gitmodules remove old submodules directory Apr 12, 2014 CMakeLists.txt Targeting 3.15.0 Jun 30, 2016 CONTRIBUTING.md Talk about stable branches in CONTRIBUTING.md Jan 8, 2015 ISSUE_TEMPLATE.md Add HHVM github issue template Mar 9, 2016 LICENSE.PHP Removed a bit of trailing whitespace Feb 13, 2014 LICENSE.ZEND Removed a bit of trailing whitespace Feb 13, 2014 README.md Bring the README up-to-date. Dec 9, 2015 configure Update configure Apr 6, 2015 README.md HHVM HHVM page | HHVM documentation | Hacklang page | General group | Dev group | Twitter HHVM is an open-source virtual machine designed for executing programs written in Hack and PHP. HHVM uses a just-in-time (JIT) compilation approach to achieve superior performance while maintaining the development flexibility that PHP provides. HHVM supports Hack, PHP 5 and the major features of PHP 7. We are aware of minor incompatibilities, so please open issues when you find them. HHVM also supports many extensions as well. HHVM should be used together with a webserver like the built in, easy to deploy Proxygen, or a FastCGI-based webserver on top of nginx or Apache. Installing If you're new, try our getting started guide. You can install a prebuilt package or compile from source. Running You can run standalone programs just by passing them to hhvm: hhvm my_script.php. If you want to host a website: Install your favorite webserver. Proxygen is built in to HHVM, fast and easy to deploy. Install our package Start your webserver Run sudo /etc/init.d/hhvm start Visit your site at http://.../index.php Our getting started guide provides a slightly more detailed introduction as well as links to more information. Contributing We'd love to have your help in making HHVM better. If you're interested, please read our guide to contributing. License HHVM is licensed under the PHP and Zend licenses except as otherwise noted. The Hack typechecker (hphp/hack) is licensed under the BSD license (hphp/hack/LICENSE) with an additional grant of patent rights (hphp/hack/PATENTS) except as otherwise noted. Reporting Crashes See Reporting Crashes for helpful tips on how to report crashes in an actionable manner. Reporting and Fixing Security Issues Please do not open GitHub issues or pull requests - this makes the problem immediately visible to everyone, including malicious actors. Security issues in HHVM can be safely reported via HHVM's Whitehat Bug Bounty program: https://www.facebook.com/whitehat Facebook's security team will triage your report and determine whether or not is it eligible for a bounty under our program. FAQ Our user FAQ has answers to many common questions about HHVM, from general questions to questions geared towards those that want to use. There is also a FAQ for contributors to HHVM. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/facebook/hhvm"	"A Virtual Machine, Runtime and JIT for PHP by Facebook."	"true"
"Virtual Machines"	"HippyVM"	"https://github.com/hippyvm/hippyvm"	"Another PHP virtual machine."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"857"	"58"	"57"	"GitHub - hippyvm/hippyvm: HippyVM - an implementation of the PHP language in RPython Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 58 Star 857 Fork 57 hippyvm/hippyvm Code Issues 19 Pull requests 1 Pulse Graphs HippyVM - an implementation of the PHP language in RPython http://hippyvm.baroquesoftware.com/ 526 commits 19 branches 3 releases Fetching contributors PHP 72.3% C 12.5% Python 12.0% JavaScript 2.2% C++ 0.9% Shell 0.1% PHP C Python JavaScript C++ Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix_regex_ext frame_debug iterative_cmp iterative_cmp2 master phar-hg pypy_bridge_catch_by_name pypy_bridge_exn_cleanup pypy_bridge_line_hack pypy_bridge_lukas_fix_cffi pypy_bridge_opt_w_pylistadapteriterator_slower pypy_bridge_php_box_exns pypy_bridge_tidy_target pypy_bridge_type_cmp pypy_bridge_unset pypy_bridge test_isintance_phpref unbreak_posix various-hints Nothing to show ecoop16_initial_submission ecoop16_artefact_0_2 ecoop16_artefact_0_1 Nothing to show New pull request Latest commit 2ae35b8 Nov 19, 2015 cfbolz Merge pull request #107 from hippyvm/optimise_initial_w_2 … Quasi-immutable initial_storage_w for hippy classes. Permalink Failed to load latest commit information. bench fix the deps Oct 12, 2014 bin fix for bin/hip.py, close #13 Jul 29, 2014 hippy Quasi-immutible initial_storage_w for hippy classes. Nov 19, 2015 test_phpt Mark a cyclic comparison test as skip. Feb 2, 2015 testing Add a test for the upcoming reference optimisation. Feb 24, 2015 tests reimport the source Jul 12, 2014 tools reimport the source Jul 12, 2014 .gitignore Fixed var_esport for string, arrays, and classes. Aug 22, 2014 .travis.yml Try using an absolute PYTHONPATH. Sep 9, 2014 AUTHORS Added Deezer (my current employer) to the list of Authors Aug 13, 2014 LICENSE reimport the source Jul 12, 2014 README.md Revert ""Revise README"" Mar 26, 2015 hippy-c-cgi Use /bin/sh instead of /bin/bash. Aug 19, 2014 hippy-c-cgi-debug reimport the source Jul 12, 2014 requirements.txt Depend upon pexpect. Sep 8, 2014 setup.cfg reimport the source Jul 12, 2014 targethippy.py When translating, Check that the extensions the user asked for are pr… Jul 20, 2014 testrunner.py reimport the source Jul 12, 2014 travis.sh PYTHONPATH needs to be exported earlier so hippy/main.py sees rpython. Sep 8, 2014 README.md HippyVM HippyVM is an implementation of the PHP language using RPython/PyPy technology. HippyVM right now works only on 64bit linux on x86 platform (this limitation is temporary though, the RPython toolchain supports 32 and 64 bit x86, ARMv6 and ARMv7 on windows, os x and linux). Building The build process was tested for Ubuntu 14.04. Please create an issue/submit pull request if things are not working as expected. 1. Clone this repo ;) git clone https://github.com/hippyvm/hippyvm  2. Get a full source checkout of RPython: There are two alternative ways to achieve this, both equally functional: a snapshot of PyPy is the easiest way to get a large repository. wget https://bitbucket.org/pypy/pypy/get/default.tar.gz  mkdir pypy  tar xfv default.tar.gz -C pypy --strip-components 1  a full checkout of the RPython repository translation toolchain (currently inside the PyPy repository). It will download the whole commit history of PyPy. hg clone http://bitbucket.org/pypy/pypy  3. Get the build dependencies: pip install -r requirements.txt sudo apt-get install libmysqlclient-dev libpcre3-dev librhash-dev libbz2-dev php5-cli libffi-dev  4. The building process goes like this: cd hippyvm <path to pypy>/rpython/bin/rpython -Ojit targethippy.py  This will create a hippy-c binary that works mostly like a php-cli without readline support. Running it You can run it with ./hippy-c . Example of benchmarks are in bench/ sub-directory. Contribution Like many open-source projects, HippyVM is looking for contributors. In contrast with most language implementations that use C or C++, HippyVM has a low barrier of entry since it uses RPython, a subset of the Python language. It's really easy to write and read. Check out our implementation of strstr @wrap(['space', str, W_Root, Optional(bool)], aliases=['strchr']) def strstr(space, haystack, w_needle, before_needle=False):     """"""Find the first occurrence of a string.""""""     try:         needle = unwrap_needle(space, w_needle)     except ValidationError as exc:         space.ec.warn(""strstr(): "" + exc.msg)         return space.w_False     if len(needle) == 0:         space.ec.warn(""strstr(): Empty delimiter"")         return space.w_False     pos = haystack.find(needle)     if pos < 0:         return space.w_False     if before_needle:         return space.newstr(haystack[:pos])     else:         return space.newstr(haystack[pos:]) Doesn't look that scary, right? The reasons why HippyVM uses RPython go beyond this README. If you are interested, you can read more here HippyVM's tests If the project is up and running, which means the building section from this README went well, you can try to run HippyVM's tests. PYTHONPATH=$PYTHONPATH:/path-to-pypy py.test testing This will execute all the tests that were explicitly written for HippyVM, these tests are written in Python as well. The example test for the strstr is here. PHP's tests After having HippyVM tests up and running you can try running PHP's tests against the HippyVM implementation. PYTHONPATH=$PYTHONPATH:/path-to-pypy py.test test_phpt/ Those tests are exact copies from the reference PHP implementation What now? If you find something missing, broken, or poorly implemented: please create an issue, or better, create a pull request and update the AUTHORS file. Also please visit us on the irc channel #hippyvm@freenode.net Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hippyvm/hippyvm"	"Another PHP virtual machine."	"true"
"Integrated Development Environment"	"Eclipse for PHP Developers"	"https://www.eclipse.org/downloads/"	"A PHP IDE based on the Eclipse platform."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Eclipse Downloads Skip to main content Create account Log in Download Getting Started Members Projects Community Marketplace Events Planet Eclipse Newsletter Videos Participate Report a Bug Forums Mailing Lists Wiki IRC How to Contribute Working Groups Automotive Internet of Things LocationTech Long-Term Support PolarSys Science OpenMDM More Community Marketplace Events Planet Eclipse Newsletter Videos Participate Report a Bug Forums Mailing Lists Wiki IRC How to Contribute Working Groups Automotive Internet of Things LocationTech Long-Term Support PolarSys Science OpenMDM Toggle navigation Download Eclipse Technology that is right for you Tool Platforms Get Eclipse Neon Install your favorite Eclipse packages. Download 64 bit Download Packages Eclipse Che is a developer workspace server and cloud IDE. Get it Learn More Eclipse Che Eclipse Che is a developer workspace server and cloud IDE. Get it Learn More A modern, open source software development environment that runs in the cloud. Get it Learn More Orion A modern, open source software development environment that runs in the cloud. Get it Learn More See Java Code Changes Instantly. Save Time. Reduce Stress. Finish Projects Faster! Promoted Download Get it Learn More JRebel for Eclipse IDE See Java Code Changes Instantly. Save Time. Reduce Stress. Finish Projects Faster! Promoted Download Learn More Runtime Platforms Eclipse Jetty provides a web server and javax.servlet container. Get it Learn More Jetty Eclipse Jetty provides a web server and javax.servlet container. Get it Learn More Eclipse Equinox is an implementation of the OSGi core framework specification. Get it Learn More Equinox Eclipse Equinox is an implementation of the OSGi core framework specification. Get it Learn More Eclipse Concierge is a small footprint implementation of the OSGi specification. Get it Learn More Concierge Eclipse Concierge is a small footprint implementation of the OSGi specification. Get it Learn More Enabling modular business apps for desktop, browser and mobile. Get it Learn More RAP Enabling modular business apps for desktop, browser and mobile. Get it Learn More Technology Communities Open source technology for IoT solution developers. Get it Learn More IoT Open source technology for IoT solution developers. Get it Learn More Open source solutions for systems engineering and embedded systems. Get it Learn More Systems Engineering Open source solutions for systems engineering and embedded systems. Get it Learn More All Projects Find an Eclipse open source project. List of projects Back to the top Eclipse Foundation About us Contact Us Donate Governance Logo and Artwork Board of Directors Legal Privacy Policy Updated Terms of Use Updated Copyright Agent Eclipse Public License Legal Resources Useful Links Report a Bug Documentation How to Contribute Mailing Lists Forums Marketplace Other IDE and Tools Community of Projects Working Groups Copyright © 2016 The Eclipse Foundation. All Rights Reserved. Back to the top"	"null"	"null"	"A PHP IDE based on the Eclipse platform."	"true"
"Integrated Development Environment"	"Netbeans"	"https://netbeans.org/"	"An IDE with support for PHP and HTML5."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Welcome to NetBeans Choose page language Albanian Arabic Brazilian Portuguese Czech Dutch Finnish French Georgian German Greek Hebrew Hungarian Indonesian Italian Japanese Korean Persian Polish Portuguese Romanian Russian Simplified Chinese Slovak Spanish Swedish Traditional Chinese Turkish Vietnamese NetBeans IDE NetBeans Platform Enterprise Plugins Docs & Support Community NetBeans IDE Fits the Pieces Together Quickly and easily develop desktop, mobile and web applications with Java, JavaScript, HTML5, PHP, C/C++ and more. NetBeans IDE is FREE, open source, and has a worldwide community of users and developers. See All News Featured News: Help Us Stabilize NetBeans IDE 8.2 - Join NetCAT 8.2! Join the Free OTN Summit on July 12, 2016! Hybrid Mobile Development with Cordova and Oracle JET Trip Report: NetBeans Day India 31 May 2016: NetBeans Day in London Build with NetBeans IDE, Deploy to Oracle Java Cloud Service Best Support for Latest Java Technologies More Fast & Smart Code Editing More New: Darcula Look & Feel Theme More Easy & Efficient Project Management More Rapid User Interface Development More Write Bug Free Code More Powerful Tools for JavaScript, HTML5, and CSS3 More Cross Platform Support More Support for Multiple Languages More Rich Set of Community Provided Plugins More SiteMap About Us Contact Legal & Licences By use of this website, you agree to the NetBeans Policies and Terms of Use. © 2016, Oracle Corporation and/or its affiliates. Sponsored by"	"null"	"null"	"An IDE with support for PHP and HTML5."	"true"
"Integrated Development Environment"	"PhpStorm"	"http://www.jetbrains.com/phpstorm/"	"A commercial PHP IDE."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PhpStorm IDE :: JetBrains PhpStorm All Tools IDEs .NET & Visual Studio Team Tools Languages Store Support We Are JetBrains Check out our IDEs IntelliJ IDEA The most intelligent Java IDE PhpStorm Lightning-smart PHP IDE PyCharm Python IDE for professional developers RubyMine The most intelligent Ruby IDE WebStorm The smartest JavaScript IDE AppCode Smart IDE for iOS/OS X development CLion A smart cross-platform IDE for C and C++ DataGrip Your Swiss Army knife for databases & SQL Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for .NET and Visual Studio ReSharper Visual Studio extension for .NET developers ReSharper C++ Visual Studio extension for C++ developers dotTrace .NET performance profiler dotMemory .NET memory profiler dotCover .NET unit test runner and code coverage tool dotPeek Free .NET decompiler and assembly browser Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for teams TeamCity Powerful Continuous Integration out of the box YouTrack Issue tracker designed for development teams Upsource Code review and repository browsing Hub JetBrains team tools, integrated Check out our languages and related tools Kotlin Programming language for JVM & Android MPS DSL development environment Store Pricing and licensing options for everyone, from free plans for students to volume licensing for companies. JetBrains Toolbox Team Tools Purchase Terms FAQ Contact Sales Support Questions or problems? We want to help! Dedicated support teams can answer product- or purchase-related questions. Technical Support Contact Sales Commitment Community Support Webinars Early Access Programs We Are JetBrains We make professional software development a more productive and enjoyable experience. About Us People Customers & Awards Press Room Partners & Resellers Technology Partners Careers Contacts Search PhpStorm What's New Features Docs & Demos Buy Download Lightning-smart PHP IDE Download now Free 30-day trial Why Phpstorm Enjoy productive php Watch overview PhpStorm deeply understands your code. Major frameworks supported PhpStorm is perfect for working with Symfony, Drupal, WordPress, Zend Framework, Laravel, Magento, CakePHP, Yii, and other frameworks. All PHP tools The editor actually 'gets' your code and deeply understands its structure, supporting all PHP language features for modern and legacy projects. It provides the best code completion, refactorings, on-the-fly error prevention, and more. Front-end technologies included Make the most of the cutting edge front-end technologies, such as HTML5, CSS, Sass, Less, Stylus, CoffeeScript, TypeScript, Emmet, and JavaScript, with refactorings, debugging and unit testing available. See changes instantly in the browser thanks to Live Edit. Built-in developer tools Perform many routine tasks right from the IDE, thanks to Version Control Systems integration, support for remote deployment, databases/SQL, command-line tools, Vagrant, Composer, REST Client, and many other tools. PhpStorm = WebStorm + PHP + DB/SQL All the features of WebStorm are included into PhpStorm, and full-fledged support for PHP and Databases/SQL support are added on top. Intelligent Coding Assistance Hundreds of inspections take care of verifying your code as you type, analyzing the whole project. PHPDoc support, code (re)arranger and formatter, quick-fixes, and other features help you write neat code that’s easy to maintain. Smart Code Navigation Be the master of your codebase thanks to efficient, lightning-fast navigation features. The IDE understands where you want to go and gets you there instantly. Fast and Safe Refactoring Refactor your code reliably with safe Rename, Move, Delete, Extract Method, Inline Variable, Push members Up / Pull members Down, Change Signature, and many other refactorings. Language-specific refactorings help you perform project-wide changes in a matter of a few clicks, and can​ be safely undone. Easy Debugging and Testing PhpStorm is renowned for its zero-configuration Visual Debugger, providing extraordinary insight into what goes on in your application at every step. It works with Xdebug and Zend Debugger, and can be used both locally and remotely. Unit Testing with PHPUnit, BDD with Behat and profiler integration are also available. New Features What’s new in PhpStorm 2016.2 Better PHP 7 Support In PhpStorm 2016.2 we’ve added a new strict type inspection for PHP 7, improved parsing of PHP 7 and PHP 7.1, and new getter and setter generation for PHP 7 (and higher). These and other related features bring your PHP 7 experience in PhpStorm to a new level. Improved Type Inference Major changes were made in type inference, such as type inference of array elements from PHP array functions, type inference for elements and keys of Iterator and IteratorAggregate implementations. It brings even deeper understanding of PHP language, and helps you type less to have your code written. Smarter Code Completion A new dynamic live template was added to make it easier to complete parameters passed into functions, methods, or class constructors. Values of class constants are now shown in completion lists, and static methods are filtered out from completion lists. Discover all new features Customer Experience Meet the PhpStorm community @phpstorm's code completion is incredibly useful. @kpschrade @geeh @phpstorm I'm hooked mate. I've been so productive lately it's silly. Keep up the great work. @settermjd @phpstorm is magical... in a good way. I find myself saying ""oh that's convenient"" over and over. @codeguy If you are developing in PHP and are not using PhpStorm, you are working too hard. @mikeschinkel ""I'm so spoiled by PhpStorm!"" @kayladnls Join over 400,000 happy PhpStorm users worldwide! Download .exe Windows (.exe) OS X (.dmg) Linux (.tar.gz) Free 30-day trial Tell me about new product features as they come out Thanks for your request! Community forum Plugin repository Bug and issue tracker PhpStorm blog Also on JetBrains My account Newsletter Contact Follow JetBrains © 2000—2016 JetBrains s.r.o. All rights reserved. Developed with drive and IntelliJ IDEA Privacy Policy | Terms of Use"	"null"	"null"	"A commercial PHP IDE."	"true"
"Web Applications"	"3V4L"	"https://3v4l.org/"	"An online PHP & HHVM shell."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Online PHP shell | 150+ versions + stats + vld + hhvm 3v4l.orgrun code in 150+ php & hhvm versions bughunt search recent about <?php   7.1.0alpha37.1.0alpha27.1.0alpha17.0.87.0.77.0.67.0.57.0.47.0.37.0.27.0.17.0.0hhvm-3.12.0hhvm-3.11.0hhvm-3.10.0hhvm-3.9.15.6.235.6.225.6.215.6.205.6.195.6.185.6.175.6.165.6.155.6.145.6.135.6.125.6.115.6.105.6.95.6.85.6.75.6.65.6.55.6.45.6.35.6.25.6.15.6.05.5.375.5.365.5.355.5.345.5.335.5.325.5.315.5.305.5.295.5.285.5.275.5.265.5.255.5.245.5.235.5.225.5.215.5.205.5.195.5.185.5.165.5.155.5.145.5.135.5.125.5.115.5.105.5.95.5.85.5.75.5.65.5.55.5.45.5.35.5.25.5.15.5.05.4.455.4.445.4.435.4.425.4.415.4.405.4.395.4.385.4.375.4.365.4.355.4.345.4.325.4.315.4.305.4.295.4.285.4.275.4.265.4.255.4.245.4.235.4.225.4.215.4.205.4.195.4.185.4.175.4.165.4.155.4.145.4.135.4.125.4.115.4.105.4.95.4.85.4.75.4.65.4.55.4.45.4.35.4.25.4.15.4.05.3.295.3.285.3.275.3.265.3.255.3.245.3.235.3.225.3.215.3.205.3.195.3.185.3.175.3.165.3.155.3.145.3.135.3.125.3.115.3.105.3.95.3.85.3.75.3.65.3.55.3.45.3.35.3.25.3.15.3.05.2.175.2.165.2.155.2.145.2.135.2.125.2.115.2.105.2.95.2.85.2.75.2.65.2.55.2.45.2.35.2.25.2.15.2.05.1.65.1.55.1.45.1.35.1.25.1.15.1.05.0.55.0.45.0.35.0.25.0.15.0.04.4.94.4.84.4.74.4.64.4.54.4.44.4.34.4.24.4.14.4.04.3.114.3.104.3.94.3.84.3.74.3.64.3.54.3.44.3.34.3.24.3.14.3.0rfc-typed_propertiesrfc-array_change_keysrfc-short_closuresrfc-multi-typesrfc-lexical-anonrfc-callable_typehintrfc-func_interfaceshhvm-3.14.0 eol versions About 3v4l.org is an online shell that allows you to run your code on my server. I compiled more than 150 different PHP versions (every version released since 4.3.0) plus HHVM for you to use. For every script you submit, this site tells you: Output from all released PHP and HHVM versions Performance (time and memory) of every version VLD opcode output Contextual links to documentation and php sourcecode Output from all upcoming alpha, beta & release-candidates Output from a few popular RFC Branches HHVM Bytecode output To keep this site running I spend ~ 100 mBTC monthly; want to help out? Donate through Bitcoin. For updates, follow me on Twitter @3v4l_org. Have fun! Sjon Examples Booleans can be changed within a namespace Argument to a constructor that takes no arguments won't be evaluated __toString evolves when used in comparisons Fun with special characters Finally can do some funky things to the return value Overwriting $this when using references Broken formatting in DateTime Popular / /s9JaO /RHZ8k /51C71 /kOks3 /hPEEg /dMbat /tT4l8 /iOC9I /j4Oop"	"null"	"null"	"An online PHP & HHVM shell."	"true"
"Web Applications"	"DBV"	"http://dbv.vizuina.com/"	"A database version control application."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1425"	"120"	"236"	"GitHub - victorstanciu/dbv: Database version control, made easy! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 120 Star 1,425 Fork 236 victorstanciu/dbv Code Issues 22 Pull requests 8 Pulse Graphs Database version control, made easy! http://dbv.vizuina.com 70 commits 1 branch 6 releases 12 contributors JavaScript 71.5% PHP 24.0% CSS 4.4% ApacheConf 0.1% JavaScript PHP CSS ApacheConf Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.2 1.1 1.0.3 1.0.2 1.0.1 1.0 Nothing to show New pull request Latest commit 2e3e739 Jun 26, 2015 victorstanciu Merge pull request #75 from tierra/hide-long-object-names … Hide overflow of long object names to maintain layout. Permalink Failed to load latest commit information. data Delete placeholder readme files and replace with .gitkeep files Jan 30, 2013 languages removed default .po files Dec 13, 2012 lib Catch PDOException in PDO adapter and throw DBV_Exception with same m… Jun 26, 2015 public Hide overflow of long object names to maintain layout. Aug 19, 2014 templates Hide overflow of long object names to maintain layout. Aug 19, 2014 .gitignore remove eclipse file project Dec 11, 2012 .htaccess initial commit Nov 17, 2012 DBV.php fix http authorization Feb 5, 2015 README.md Update README.md Nov 17, 2012 config.php.sample Remove reliance on gettext() extension Mar 14, 2014 index.php use custom gettext call to allow string variables Dec 12, 2012 README.md Database version control, made easy! dbv.php is a database version control web application featuring schema management, revision scripts, and more! Check out the project website for more details, features and documentation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/victorstanciu/dbv"	"A database version control application."	"true"
"Web Applications"	"PHP Queue"	"https://github.com/CoderKungfu/php-queue"	"An application for managing queueing backends."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"517"	"39"	"65"	"GitHub - CoderKungfu/php-queue: A unified front-end for different queuing backends. Includes a REST server, CLI interface and daemon runners. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 39 Star 517 Fork 65 CoderKungfu/php-queue Code Issues 5 Pull requests 1 Wiki Pulse Graphs A unified front-end for different queuing backends. Includes a REST server, CLI interface and daemon runners. https://packagist.org/packages/coderkungfu/php-queue 312 commits 1 branch 2 releases 9 contributors PHP 99.9% ApacheConf 0.1% PHP ApacheConf Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.9.1 0.9.0 Nothing to show New pull request Latest commit 6bac0f4 Aug 2, 2015 miccheng Merge pull request #49 from carcabot/master … Priority, Delay , TTR Job Permalink Failed to load latest commit information. demo Update BeanstalkSampleQueue.php Jun 11, 2015 src/PHPQueue Update Beanstalkd.php Jun 11, 2015 test Fix tests Apr 11, 2015 .gitignore Test cases for LocalFS class. Updated gitignore to ignore all downloa… Dec 23, 2012 .travis.yml Test on newer version of php too May 21, 2015 README.md STOMP backend Apr 11, 2015 composer.json STOMP backend Apr 12, 2015 phpunit.travis.xml PSR Dec 30, 2012 phpunit.xml.dist Added support for AWS PHP SDK version 2 May 30, 2013 README.md PHP-Queue A unified front-end for different queuing backends. Includes a REST server, CLI interface and daemon runners. Why PHP-Queue? The pains of implementing a queueing system (eg. Beanstalk, Amazon SQS, RabbitMQ) for your applciation: Which one is most efficient? Performant? Learning curve to effectively implement the queue backend & the libraries. Time taken to develop the application codes. Vendor locked in, making it impossible to switch. Requires massive code change (ie. not flexible) when use case for the queue changes. PHP-Queue hopes to serve as an abstract layer between your application code and the implementation of the queue. Benefits Job Queue is Backend agnostic Just refer to the queue by name, what it runs on is independent of the application code. Your code just asks for the next item in the PHPQueue\JobQueue, and you'll get a PHPQueue\Job object with the data and jobId. Flexible Job Queue implementation You can decide whether each PHPQueue\JobQueue only carries 1 type of work or multiple types of target workers. You control the retrieval of the job data from the Queue Backend and how it is instantiated as a PHPQueue\Job object. Each PHPQueue\Job object carries information on which workers it is targeted for. Independent Workers Workers are independent of Job Queues. All it needs to worry about is processing the input data and return the resulting data. The queue despatcher will handle the rest. Workers will also be chainable. Powerful The framework is deliberately open-ended and can be adapted to your implementation. It doesn't get in the way of your queue system. We've build a simple REST server to let you post job data to your queue easily. We also included a CLI interface for adding and triggering workers. All of which you can sub-class and overwrite. You can also include our core library files into your application and do some powerful heavy lifting. Several backend drivers are bundled: Memcache Redis MongoDB CSV These can be used as the primary job queue server, or for abstract FIFO or key-value data access. Installation Installing via Composer Composer is a dependency management tool for PHP that allows you to declare the dependencies your project needs and installs them into your project. In order to use the PHP-Queue through Composer, you must do the following: Add ""coderkungfu/php-queue"" as a dependency in your project's composer.json file. Visit the Packagist page for more details. Download and install Composer. curl -s ""http://getcomposer.org/installer"" | php  Install your dependencies. php composer.phar install  All the dependencies should be downloaded into a vendor folder. Require Composer's autoloader. <?php require_once '/path/to/vendor/autoload.php'; ?> Getting Started You can have a look at the Demo App inside .\vendor\coderkungfu\php-queue\src\demo\ folder for a recommended folder structure. htdocs folder .htaccess index.php queues folder <QueueNameInCamelCase>Queue.php workers folder <WorkerNameInCamelCase>Worker.php runners folder cli.php file config.php file I would also recommend putting the autoloader statement and your app configs inside a separate config.php file. Recommended config.php file content: <?php require_once '/path/to/vendor/autoload.php'; PHPQueue\Base::$queue_path = __DIR__ . '/queues/'; PHPQueue\Base::$worker_path = __DIR__ . '/workers/'; ?> Altenative config.php file: You can also declare your application's namespace for loading the Queues and Workers. <?php require_once '/path/to/vendor/autoload.php'; PHPQueue\Base::$queue_namespace = '\MyFabulousApp\Queues'; PHPQueue\Base::$worker_namespace = '\MyFabulousApp\Workers'; ?> PHP-Queue will attempt to instantiate the PHPQueue\JobQueue and PHPQueue\Worker classes using your namespace - appended with the queue/worker name. (ie. \MyFabulousApp\Queues\Facebook). It might be advisable to use Composer's Custom Autoloader for this. Note: If you declared PHPQueue\Base::$queue_path and/or PHPQueue\Base::$worker_path together with the namespace, the files will be loaded with require_once from those folder path AND instantiated with the namespaced class names. REST Server The default REST server can be used to interface directly with the queues and workers. Copy the htdocs folder in the Demo App into your installation. The index.php calls the \PHPQueue\REST::defaultRoutes() method - which prepares an instance of the Respect\Rest REST server. You might need to modify the path of config.php within the index.php file. Recomended installation: use a new virtual host and map the htdocs as the webroot. Add new job. # Form post curl -XPOST http://localhost/<QueueName>/ -d ""var1=foo&var2=bar""  # JSON post curl -XPOST http://localhost/<QueueName>/ -H ""Content-Type: application/json"" -d '{""var1"":""foo"",""var2"":""bar""}'  Trigger next job. curl -XPUT http://localhost/<QueueName>/  Read the full documentation on Respect\Rest to further customize to your application needs (eg. Basic Auth). Command Line Interface (CLI) Copy the cli.php file from the Demo App into your installation. This file implements the \PHPQueue\Cli class. You might need to modify the path of config.php within the cli.php file. Add new job. $ php cli.php <QueueName> add --data '{""boo"":""bar"",""foo"":""car""}'  Trigger next job. $ php cli.php <QueueName> work  You can extend the PHPQueue\Cli class to customize your own CLI batch jobs (eg. import data from a MySQL DB into a queue). Runners You can read more about the Runners here. License This software is released under the MIT License. Copyright (C) 2012 Michael Cheng Chi Mun Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CoderKungfu/php-queue"	"An application for managing queueing backends."	"true"
"Web Applications"	"MailCatcher"	"https://github.com/sj26/mailcatcher"	"A web tool for capturing and viewing emails."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3413"	"78"	"337"	"GitHub - sj26/mailcatcher: Catches mail and serves it through a dream. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 78 Star 3,413 Fork 337 sj26/mailcatcher Code Issues 31 Pull requests 17 Pulse Graphs Catches mail and serves it through a dream. http://mailcatcher.me 386 commits 3 branches 33 releases 30 contributors Ruby 61.9% CoffeeScript 22.2% CSS 11.5% HTML 4.4% Ruby CoffeeScript CSS HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags expand-path-on-sinatra-root master memory-leak-2.1 Nothing to show v0.6.4 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.12 v0.5.11 v0.5.10 v0.5.9 v0.5.8 v0.5.7.2 v0.5.7.1 v0.5.1 v0.5.0 v0.4.7 v0.4.6 v0.4.5 v0.4.1 v0.4.0 v0.3.2 v0.3.1 v0.3.0 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 0021a29 Apr 23, 2016 sj26 We don't need no support Permalink Failed to load latest commit information. assets Added mail count to document title Mar 25, 2015 bin Bring `catchmail` closer to `sendmail` Jan 17, 2015 examples An example that used to break Mar 26, 2014 lib We don't need no support Apr 23, 2016 public Switch to sprockets for assets Mar 17, 2014 spec Placate ambiguous argument warning Jan 17, 2015 vendor/assets/javascripts Remove fractal analysis, it doesn't work at the moment anyway Mar 26, 2014 views Fix view broken in 264e912 Mar 6, 2015 .gitignore Remove Gemfile lock Jan 15, 2016 .travis.yml Use new travis infrastructure Jan 15, 2016 Dockerfile Simplify and fix docker builder Apr 7, 2016 Gemfile Just keep mime-types < 3, and use strong version comparison Apr 23, 2016 LICENSE Update LICENSE year May 31, 2011 README.md HTTPS screenshot Mar 29, 2016 Rakefile Testing needs compiled assets Jun 5, 2014 mailcatcher.gemspec We don't need no support Apr 23, 2016 README.md MailCatcher Catches mail and serves it through a dream. MailCatcher runs a super simple SMTP server which catches any message sent to it to display in a web interface. Run mailcatcher, set your favourite app to deliver to smtp://127.0.0.1:1025 instead of your default SMTP server, then check out http://127.0.0.1:1080 to see the mail that's arrived so far. Features Catches all mail and stores it for display. Shows HTML, Plain Text and Source version of messages, as applicable. Rewrites HTML enabling display of embedded, inline images/etc and open links in a new window. Lists attachments and allows separate downloading of parts. Download original email to view in your native mail client(s). Command line options to override the default SMTP/HTTP IP and port settings. Mail appears instantly if your browser supports WebSockets, otherwise updates every thirty seconds. Runs as a daemon run in the background. Sendmail-analogue command, catchmail, makes using mailcatcher from PHP a lot easier. Written super-simply in EventMachine, easy to dig in and change. Keyboard navigation between messages How gem install mailcatcher mailcatcher Go to http://localhost:1080/ Send mail through smtp://localhost:1025 Use mailcatcher --help to see the command line options. The brave can get the source from the GitHub repository. Bundler Please don't put mailcatcher into your Gemfile. It will conflict with your applications gems at some point. Instead, pop a note in your README stating you use mailcatcher. Simply run gem install mailcatcher then mailcatcher to get started. RVM Under RVM your mailcatcher command may only be available under the ruby you install mailcatcher into. To prevent this, and to prevent gem conflicts, install mailcatcher into a dedicated gemset and create wrapper scripts: rvm default@mailcatcher --create do gem install mailcatcher rvm wrapper default@mailcatcher --no-prefix mailcatcher catchmail  Rails To set up your rails app, I recommend adding this to your environments/development.rb: config.action_mailer.delivery_method = :smtp config.action_mailer.smtp_settings = { :address => ""localhost"", :port => 1025 }  PHP For projects using PHP, or PHP frameworks and application platforms like Drupal, you can set PHP's mail configuration in your php.ini to send via MailCatcher with: sendmail_path = /usr/bin/env catchmail -f some@from.address  You can do this in your Apache configuration like so: php_admin_value sendmail_path ""/usr/bin/env catchmail -f some@from.address""  If you've installed via RVM this probably won't work unless you've manually added your RVM bin paths to your system environment's PATH. In that case, run which catchmail and put that path into the sendmail_path directive above instead of /usr/bin/env catchmail. If starting mailcatcher on alternative SMTP IP and/or port with parameters like --smtp-ip 192.168.0.1 --smtp-port 10025, add the same parameters to your catchmail command: sendmail_path = /usr/bin/env catchmail --smtp-ip 192.160.0.1 --smtp-port 10025 -f some@from.address  Django For use in Django, simply add the following configuration to your projects' settings.py if DEBUG:     EMAIL_HOST = '127.0.0.1'     EMAIL_HOST_USER = ''     EMAIL_HOST_PASSWORD = ''     EMAIL_PORT = 1025     EMAIL_USE_TLS = False API A fairly RESTful URL schema means you can download a list of messages in JSON from /messages, each message's metadata with /messages/:id.json, and then the pertinent parts with /messages/:id.html and /messages/:id.plain for the default HTML and plain text version, /messages/:id/:cid for individual attachments by CID, or the whole message with /messages/:id.source. Caveats Mail processing is fairly basic but easily modified. If something doesn't work for you, fork and fix it or file an issue and let me know. Include the whole message you're having problems with. The interface is very basic and has not been tested on many browsers yet. TODO Add mail delivery on request, optionally multiple times. Compatibility testing against CampaignMonitor's design guidelines and CSS support matrix. Forward mail to rendering service, maybe CampaignMonitor? Thanks MailCatcher is just a mishmash of other people's hard work. Thank you so much to the people who have built the wonderful guts on which this project relies. Thanks also to The Frontier Group for giving me the idea, being great guinea pigs and letting me steal pieces of time to keep the project alive. Donations I work on MailCatcher mostly in my own spare time. If you've found Mailcatcher useful and would like to help feed me and fund continued development and new features, please donate via PayPal. If you'd like a specific feature added to MailCatcher and are willing to pay for it, please email me. License Copyright © 2010-2011 Samuel Cochran (sj26@sj26.com). Released under the MIT License, see LICENSE for details. Dreams For dream catching, try this. OR THIS, OMG. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sj26/mailcatcher"	"A web tool for capturing and viewing emails."	"true"
"Web Applications"	"Cachet"	"https://github.com/cachethq/cachet"	"The open source status page system."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4575"	"189"	"512"	"GitHub - CachetHQ/Cachet: An open source status page system for everyone. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 189 Star 4,575 Fork 512 CachetHQ/Cachet Code Issues 49 Pull requests 3 Pulse Graphs An open source status page system for everyone. https://cachethq.io 3,576 commits 16 branches 39 releases 93 contributors PHP 88.2% HTML 10.9% Other 0.9% PHP HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 2.3 Switch branches/tags Branches Tags 0.1 1.0 1.1 1.2 2.0 2.1 2.2 2.3 develop drop-langauges master metric-repository-perf scheduled-maintenance-backup scheduled-maintenance-refactoring time-sensitive-actions upgrade-paths Nothing to show v2.3.3 v2.3.2 v2.3.1 v2.3.0 v2.3.0-RC6 v2.3.0-RC5 v2.3.0-RC4 v2.3.0-RC3 v2.3.0-RC2 v2.3.0-RC1 v2.2.4 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.2.0-RC1 v2.1.2 v2.1.1 v2.1.0 v2.1.0-RC2 v2.1.0-RC1 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v2.0.0-beta2 v2.0.0-beta1 v2.0.0-RC5 v2.0.0-RC4 v2.0.0-RC3 v2.0.0-RC2 v2.0.0-RC1 v1.2.1 v1.2.0 v1.1.1 v1.1.0 v1.0.0 v0.1.0-alpha Nothing to show New pull request Latest commit d5eb087 Jul 15, 2016 jbrooksuk committed on GitHub Merge pull request #1976 from CachetHQ/cli … Don't use settings caching in cli Permalink Failed to load latest commit information. .github Update ISSUE_TEMPLATE Jul 11, 2016 app Don't use settings caching in cli Jul 14, 2016 bootstrap remove executable permission from the files don't need it Jul 12, 2016 config remove executable permission from the files don't need it Jul 12, 2016 database Publish the cache table migration Jun 5, 2016 public remove executable permission from the files don't need it Jul 12, 2016 resources remove executable permission from the files don't need it Jul 12, 2016 storage remove executable permission from the files don't need it Jul 12, 2016 tests Only test the seed command Jun 3, 2016 .editorconfig Updated .gitignore, and added editorconfig Dec 28, 2014 .env.example Use sync as the default queue driver Apr 21, 2016 .gitattributes Create ISSUE_TEMPLATE Feb 20, 2016 .gitignore Remove docker/homestead/vagrant stuff Aug 7, 2015 .travis.yml Cleanup tests May 29, 2016 CONTRIBUTING.md Moved CONTRIBUTING doc back to root Feb 29, 2016 LICENSE Bumped year Jan 5, 2016 README.md Update README.md Jul 12, 2016 VERSION Back to dev Jul 10, 2016 artisan Cachet is now a Laravel 5 app Mar 20, 2015 composer.json Updated dependencies Jun 27, 2016 composer.lock Updated the exceptions package Jul 14, 2016 gulpfile.js Fixed path Jun 7, 2016 package.json bump nodejs package dependencies Jul 13, 2016 phpunit.xml.dist Synced up db stuff Mar 24, 2016 server.php Updated copyright information Jul 6, 2015 README.md Cachet Cachet is a beautiful and powerful open source status page system, a free replacement to services such as StatusPage.io, Status.io and others. Supporting Cachet Cachet is a BSD-3-licensed open source project. If you'd like to support future development, check out the Cachet Patreon campaign. Features List your services components Log incidents Apply custom CSS to the status page Markdown support for incident messages JSON API Translated into eleven languages Metrics Cross-database support: MySQL, PostgreSQL and SQLite Subscriber notifications via Email Two factor authentication, with Google Authenticator Usage in production The master branch of this repository is a development branch and should not be used in production. Instead, please check out the latest tag release. Requirements PHP 5.5.9+ or newer Apache or Nginx server Composer How to contribute We're always looking for contributions that improve Cachet. It's easy to get started and you don't even need to know how to write a single line of code! Contributing as a non-developer/non-designer If you're one of the more linguistically talented people in the world who can speak and write more than just English, we're always looking for new translations. Of course bug reports, feature requests and documentation are always being sought after. Contributing as a designer As Cachet gains new features, the design and ideas that were once a perfect fit need updating and in some cases designing from scratch. This is where you come in! Fancy giving Cachet a lick of paint? Sweet! You'll need to install Node.js, Bower and Gulp. To get started you can do the following: Install Node.js and our dev dependencies. Modify the SCSS files in ./resources/assets/sass/ Run gulp If you're making a lot of changes, you'll find that running gulp watch will really help you out! Contributing as a developer Built using Laravel, Cachet is very easy to jump into. Have a look around you'll find it surprisingly easy! These extra dependencies are required to develop Cachet: Node.js Gulp Git Once cloned to your local machine, you'll need some demo data! Simply run php artisan cachet:seed to get the demo installation on the go. Installation, Upgrades and Documentation You can now find our documentation at https://docs.cachethq.io. Installing Cachet Getting started with Docker Getting started with Vagrant Demo Account To test out the demo, you may login to the Dashboard with the following: Username: test or test@test.com Password: test123 The demo is reset every half hour. Release Notes All releases are listed on the Releases page of the Cachet GitHub repository. On the Releases page, you can also find the release notes for each release. Translations A special thank you to our translators, who have allowed us to share Cachet with the world. If you'd like to contribute translations, please check out our CrowdIn project. Security Vulnerabilities If you discover a security vulnerability within Cachet, please send an e-mail to us at support@alt-three.com. All security vulnerabilities will be promptly addressed. Installations We offer a paid installation service, which starts at $99 but is subject to change, dependant on your setup and infrastructure. To find out more, email us at support@alt-three.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cachethq/cachet"	"The open source status page system."	"true"
"Web Applications"	"phpRedisAdmin"	"https://github.com/ErikDubbelboer/phpRedisAdmin"	"A simple web interface to manage databases."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1183"	"140"	"345"	"GitHub - erikdubbelboer/phpRedisAdmin: Simple web interface to manage Redis databases. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 140 Star 1,183 Fork 345 erikdubbelboer/phpRedisAdmin Code Issues 4 Pull requests 0 Pulse Graphs Simple web interface to manage Redis databases. http://dubbelboer.com/phpRedisAdmin/ 123 commits 2 branches 9 releases 24 contributors PHP 86.1% JavaScript 8.8% CSS 5.1% PHP JavaScript CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags customencode master Nothing to show v1.6.0 v1.5.0 v1.4.1 v1.4.0 v1.3.0 v1.2.1 v1.2.0 v1.1.0 1.4.2 Nothing to show New pull request Latest commit 961e1d5 May 21, 2016 erikdubbelboer Fix #96 Permalink Failed to load latest commit information. css Fix issue #47 Resize key frame Jun 28, 2015 images Flush button that can be enabled per server (#34) Nov 20, 2013 includes Added possibility of connection via UNIX domain socket. Mar 31, 2016 js Fixed missing current class toggle Apr 23, 2016 .gitignore Removed environment specific files. Sep 24, 2013 Dockerfile Add Docker support: Dockerfile initial version and environment-sourci… Jul 18, 2015 README.markdown Fix #96 May 21, 2016 composer.json 1.6.0, fixes #95 Apr 24, 2016 composer.lock Update predis, fix #87 Jan 20, 2016 delete.php Fix #35 and possibly #52 Mar 22, 2015 edit.php Add custom per key encoding (fix #69) Jun 20, 2015 export.php move all include files to subfolder /includes Nov 22, 2012 flush.php Flush button that can be enabled per server (#34) Nov 20, 2013 import.php Fix #35 and possibly #52 Mar 22, 2015 index.php database, fixes #79 Oct 5, 2015 info.php Fix #35 and possibly #52 Mar 22, 2015 logout.php move all include files to subfolder /includes Nov 22, 2012 overview.php 1.5.0, fix #91 Apr 12, 2016 rename.php Fix rename, 1.2.1 Apr 11, 2015 save.php move all include files to subfolder /includes Nov 22, 2012 ttl.php Update ttl.php Feb 18, 2014 view.php Add custom per key encoding (fix #69) Jun 20, 2015 README.markdown phpRedisAdmin 1.6.0 phpRedisAdmin is a simple web interface to manage Redis databases. It is released under the Creative Commons Attribution 3.0 license. This code is being developed and maintained by Erik Dubbelboer. You can send comments, patches, questions here on github or to erik@dubbelboer.com. Example You can find an example database at http://dubbelboer.com/phpRedisAdmin/ Installing/Configuring To install phpRedisAdmin through composer you need to execute the following commands: curl -s http://getcomposer.org/installer | php php composer.phar create-project -s dev erik-dubbelboer/php-redis-admin path/to/install  You may also want to copy includes/config.sample.inc.php to includes/config.inc.php and edit it with your specific redis configuration. Instead of using composer, you can also do a manual install using: git clone https://github.com/ErikDubbelboer/phpRedisAdmin.git cd phpRedisAdmin git clone https://github.com/nrk/predis.git vendor  TODO Encoding support for editing Javascript sorting of tables Better error handling Move or Copy key to different server Importing JSON JSON export with seperate objects based on your seperator Credits Icons by http://p.yusukekamiyamane.com/ (https://github.com/yusukekamiyamane/fugue-icons/tree/master/icons-shadowless) Favicon from https://github.com/antirez/redis-io/blob/master/public/images/favicon.png Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ErikDubbelboer/phpRedisAdmin"	"A simple web interface to manage databases."	"true"
"Web Applications"	"Redis"	"http://redis.io/"	"A simple web interface to manage databases."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"18819"	"1852"	"6875"	"GitHub - antirez/redis: Redis is an in-memory database that persists on disk. The data model is key-value, but many different kind of values are supported: Strings, Lists, Sets, Sorted Sets, Hashes, HyperLogLogs, Bitmaps. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,852 Star 18,819 Fork 6,875 antirez/redis Code Issues 737 Pull requests 409 Pulse Graphs Redis is an in-memory database that persists on disk. The data model is key-value, but many different kind of values are supported: Strings, Lists, Sets, Sorted Sets, Hashes, HyperLogLogs, Bitmaps. http://redis.io 5,867 commits 28 branches 176 releases 205 contributors C 82.0% Tcl 14.7% Ruby 2.3% Shell 0.5% Makefile 0.3% C++ 0.2% C Tcl Ruby Shell Makefile C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: unstable Switch branches/tags Branches Tags 2.2 2.4 2.6 2.8 3.0 3.2 current-client-fix dictc freelist issue_2175 latency lazyfree ldb less-mstime-28 less-mstime lfu memsync multi-if nosync onepass-bulk rdbchanges rssmaxmemory slave-diskless strcompr unstable waitpid-fix zaddnx zunion Nothing to show with-deprecated-diskstore vm-playpen v2.1.1-watch v2.0.0-rc4 v2.0.0-rc3 v2.0.0-rc2 v2.0.0-rc1 v2.0.0-rc1b v1.3.12 v1.3.11 v1.3.10 v1.3.9 v1.3.8 v1.3.7 twitter-20100825 twitter-20100804 3.2.1 3.2.0 3.2.0-rc3 3.2.0-rc2 3.2-rc1 3.0.7 3.0.6 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 3.0.0-rc6 3.0.0-rc5 3.0.0-rc4 3.0.0-rc3 3.0.0-rc2 3.0.0-rc1 3.0.0-beta8 3.0.0-beta7 3.0.0-beta6 3.0.0-beta5 3.0.0-beta4 3.0.0-beta3 3.0.0-beta2 3.0.0-beta1 3.0-alpha0 2.8.24 2.8.23 2.8.22 2.8.21 2.8.20 2.8.19 2.8.18 2.8.17 2.8.16 2.8.15 2.8.14 2.8.13 2.8.12 2.8.11 2.8.10 2.8.9 2.8.8 2.8.7 2.8.6 2.8.5 2.8.4 2.8.3 2.8.2 2.8.1 2.8.0 2.8.0-rc6 2.8.0-rc5 2.8.0-rc4 2.8.0-rc3 2.8.0-rc2 2.8.0-rc1 2.6.17 2.6.16 2.6.15 2.6.14 2.6.14-2 2.6.14-1 2.6.13 2.6.12 2.6.11 2.6.10 2.6.10-3 2.6.10-2 2.6.10-1 2.6.9 2.6.9-1 2.6.8 2.6.8-1 2.6.7 2.6.7-1 2.6.6 2.6.5 2.6.4 2.6.3 2.6.2 2.6.1 Nothing to show New pull request Latest commit e423f76 Jul 13, 2016 antirez LRU: Make cross-database choices for eviction. … The LRU eviction code used to make local choices: for each DB visited it selected the best key to evict. This was repeated for each DB. However this means that there could be DBs with very frequently accessed keys that are targeted by the LRU algorithm while there were other DBs with many better candidates to expire.  This commit attempts to fix this problem for the LRU policy. However the TTL policy is still not fixed by this commit. The TTL policy will be fixed in a successive commit.  This is an initial (partial because of TTL policy) fix for issue #2647. Permalink Failed to load latest commit information. deps geohash.c and geohash_helper.c are part of Redis. Jul 6, 2016 src LRU: Make cross-database choices for eviction. Jul 13, 2016 tests Regression test for issue #3333. Jul 6, 2016 utils LRU: Fix output fixes to new test-lru.rb. Jul 11, 2016 .gitignore Generate Makefile.dep at every build. Jul 6, 2016 00-RELEASENOTES Fix typo in 00-RELEASENOTES Sep 29, 2014 BUGS Fix typo Sep 29, 2014 CONTRIBUTING Fix typos in documentation Jun 7, 2016 COPYING update copyright year Apr 21, 2015 INSTALL INSTALL now redirects the user to README Feb 5, 2012 MANIFESTO Format to fit 80 columns Feb 8, 2013 Makefile Fix `install` target on OSX (see #495) May 15, 2012 README.md Fixup Jun 7, 2016 redis.conf Enable tcp-keepalive by default. Jun 13, 2016 runtest Check available tcl versions Jan 24, 2013 runtest-cluster Redis Cluster test framework skeleton. Apr 24, 2014 runtest-sentinel Sentinel test files / directories layout improved. Apr 24, 2014 sentinel.conf Fix sentinel.conf typo Sep 29, 2014 README.md This README is just a fast quick start document. You can find more detailed documentation at http://redis.io. What is Redis? Redis is often referred as a data structures server. What this means is that Redis provides access to mutable data structures via a set of commands, which are sent using a server-client model with TCP sockets and a simple protocol. So different processes can query and modify the same data structures in a shared way. Data structures implemented into Redis have a few special properties: Redis cares to store them on disk, even if they are always served and modified into the server memory. This means that Redis is fast, but that is also non-volatile. Implementation of data structures stress on memory efficiency, so data structures inside Redis will likely use less memory compared to the same data structure modeled using an high level programming language. Redis offers a number of features that are natural to find in a database, like replication, tunable levels of durability, cluster, high availability. Another good example is to think of Redis as a more complex version of memcached, where the operations are not just SETs and GETs, but operations to work with complex data types like Lists, Sets, ordered data structures, and so forth. If you want to know more, this is a list of selected starting points: Introduction to Redis data types. http://redis.io/topics/data-types-intro Try Redis directly inside your browser. http://try.redis.io The full list of Redis commands. http://redis.io/commands There is much more inside the Redis official documentation. http://redis.io/documentation Building Redis Redis can be compiled and used on Linux, OSX, OpenBSD, NetBSD, FreeBSD. We support big endian and little endian architectures, and both 32 bit and 64 bit systems. It may compile on Solaris derived systems (for instance SmartOS) but our support for this platform is best effort and Redis is not guaranteed to work as well as in Linux, OSX, and *BSD there. It is as simple as: % make  You can run a 32 bit Redis binary using: % make 32bit  After building Redis, it is a good idea to test it using: % make test  Fixing build problems with dependencies or cached build options Redis has some dependencies which are included into the deps directory. make does not automatically rebuild dependencies even if something in the source code of dependencies changes. When you update the source code with git pull or when code inside the dependencies tree is modified in any other way, make sure to use the following command in order to really clean everything and rebuild from scratch: make distclean  This will clean: jemalloc, lua, hiredis, linenoise. Also if you force certain build options like 32bit target, no C compiler optimizations (for debugging purposes), and other similar build time options, those options are cached indefinitely until you issue a make distclean command. Fixing problems building 32 bit binaries If after building Redis with a 32 bit target you need to rebuild it with a 64 bit target, or the other way around, you need to perform a make distclean in the root directory of the Redis distribution. In case of build errors when trying to build a 32 bit binary of Redis, try the following steps: Install the packages libc6-dev-i386 (also try g++-multilib). Try using the following command line instead of make 32bit: make CFLAGS=""-m32 -march=native"" LDFLAGS=""-m32"" Allocator Selecting a non-default memory allocator when building Redis is done by setting the MALLOC environment variable. Redis is compiled and linked against libc malloc by default, with the exception of jemalloc being the default on Linux systems. This default was picked because jemalloc has proven to have fewer fragmentation problems than libc malloc. To force compiling against libc malloc, use: % make MALLOC=libc  To compile against jemalloc on Mac OS X systems, use: % make MALLOC=jemalloc  Verbose build Redis will build with a user friendly colorized output by default. If you want to see a more verbose output use the following: % make V=1  Running Redis To run Redis with the default configuration just type: % cd src % ./redis-server  If you want to provide your redis.conf, you have to run it using an additional parameter (the path of the configuration file): % cd src % ./redis-server /path/to/redis.conf  It is possible to alter the Redis configuration by passing parameters directly as options using the command line. Examples: % ./redis-server --port 9999 --slaveof 127.0.0.1 6379 % ./redis-server /etc/redis/6379.conf --loglevel debug  All the options in redis.conf are also supported as options using the command line, with exactly the same name. Playing with Redis You can use redis-cli to play with Redis. Start a redis-server instance, then in another terminal try the following: % cd src % ./redis-cli redis> ping PONG redis> set foo bar OK redis> get foo ""bar"" redis> incr mycounter (integer) 1 redis> incr mycounter (integer) 2 redis>  You can find the list of all the available commands at http://redis.io/commands. Installing Redis In order to install Redis binaries into /usr/local/bin just use: % make install  You can use make PREFIX=/some/other/directory install if you wish to use a different destination. Make install will just install binaries in your system, but will not configure init scripts and configuration files in the appropriate place. This is not needed if you want just to play a bit with Redis, but if you are installing it the proper way for a production system, we have a script doing this for Ubuntu and Debian systems: % cd utils % ./install_server.sh  The script will ask you a few questions and will setup everything you need to run Redis properly as a background daemon that will start again on system reboots. You'll be able to stop and start Redis using the script named /etc/init.d/redis_<portnumber>, for instance /etc/init.d/redis_6379. Code contributions Note: by contributing code to the Redis project in any form, including sending a pull request via Github, a code fragment or patch via private email or public discussion groups, you agree to release your code under the terms of the BSD license that you can find in the COPYING file included in the Redis source distribution. Please see the CONTRIBUTING file in this source distribution for more information. Redis internals If you are reading this README you are likely in front of a Github page or you just untarred the Redis distribution tar ball. In both the cases you are basically one step away from the source code, so here we explain the Redis source code layout, what is in each file as a general idea, the most important functions and structures inside the Redis server and so forth. We keep all the discussion at a high level without digging into the details since this document would be huge otherwise and our code base changes continuously, but a general idea should be a good starting point to understand more. Moreover most of the code is heavily commented and easy to follow. Source code layout The Redis root directory just contains this README, the Makefile which calls the real Makefile inside the src directory and an example configuration for Redis and Sentinel. You can find a few shell scripts that are used in order to execute the Redis, Redis Cluster and Redis Sentinel unit tests, which are implemented inside the tests directory. Inside the root are the following important directories: src: contains the Redis implementation, written in C. tests: contains the unit tests, implemented in Tcl. deps: contains libraries Redis uses. Everything needed to compile Redis is inside this directory; your system just needs to provide libc, a POSIX compatible interface and a C compiler. Notably deps contains a copy of jemalloc, which is the default allocator of Redis under Linux. Note that under deps there are also things which started with the Redis project, but for which the main repository is not anitrez/redis. An exception to this rule is deps/geohash-int which is the low level geocoding library used by Redis: it originated from a different project, but at this point it diverged so much that it is developed as a separated entity directly inside the Redis repository. There are a few more directories but they are not very important for our goals here. We'll focus mostly on src, where the Redis implementation is contained, exploring what there is inside each file. The order in which files are exposed is the logical one to follow in order to disclose different layers of complexity incrementally. Note: lately Redis was refactored quite a bit. Function names and file names have been changed, so you may find that this documentation reflects the unstable branch more closely. For instance in Redis 3.0 the server.c and server.h files were named to redis.c and redis.h. However the overall structure is the same. Keep in mind that all the new developments and pull requests should be performed against the unstable branch. server.h The simplest way to understand how a program works is to understand the data structures it uses. So we'll start from the main header file of Redis, which is server.h. All the server configuration and in general all the shared state is defined in a global structure called server, of type struct redisServer. A few important fields in this structure are: server.db is an array of Redis databases, where data is stored. server.commands is the command table. server.clients is a linked list of clients connected to the server. server.master is a special client, the master, if the instance is a slave. There are tons of other fields. Most fields are commented directly inside the structure definition. Another important Redis data structure is the one defining a client. In the past it was called redisClient, now just client. The structure has many fields, here we'll just show the main ones: struct client {     int fd;     sds querybuf;     int argc;     robj **argv;     redisDb *db;     int flags;     list *reply;     char buf[PROTO_REPLY_CHUNK_BYTES];     ... many other fields ... }  The client structure defines a connected client: The fd field is the client socket file descriptor. argc and argv are populated with the command the client is executing, so that functions implementing a given Redis command can read the arguments. querybuf accumulates the requests from the client, which are parsed by the Redis server according to the Redis protocol and executed by calling the implementations of the commands the client is executing. reply and buf are dynamic and static buffers that accumulate the replies the server sends to the client. These buffers are incrementally written to the socket as soon as the file descriptor is writable. As you can see in the client structure above, arguments in a command are described as robj structures. The following is the full robj structure, which defines a Redis object: typedef struct redisObject {     unsigned type:4;     unsigned encoding:4;     unsigned lru:LRU_BITS; /* lru time (relative to server.lruclock) */     int refcount;     void *ptr; } robj;  Basically this structure can represent all the basic Redis data types like strings, lists, sets, sorted sets and so forth. The interesting thing is that it has a type field, so that it is possible to know what type a given object has, and a refcount, so that the same object can be referenced in multiple places without allocating it multiple times. Finally the ptr field points to the actual representation of the object, which might vary even for the same type, depending on the encoding used. Redis objects are used extensively in the Redis internals, however in order to avoid the overhead of indirect accesses, recently in many places we just use plain dynamic strings not wrapped inside a Redis object. server.c This is the entry point of the Redis server, where the main() function is defined. The following are the most important steps in order to startup the Redis server. initServerConfig() setups the default values of the server structure. initServer() allocates the data structures needed to operate, setup the listening socket, and so forth. aeMain() starts the event loop which listens for new connections. There are two special functions called periodically by the event loop: serverCron() is called periodically (according to server.hz frequency), and performs tasks that must be performed from time to time, like checking for timedout clients. beforeSleep() is called every time the event loop fired, Redis served a few requests, and is returning back into the event loop. Inside server.c you can find code that handles other vital things of the Redis server: call() is used in order to call a given command in the context of a given client. activeExpireCycle() handles eviciton of keys with a time to live set via the EXPIRE command. freeMemoryIfNeeded() is called when a new write command should be performed but Redis is out of memory according to the maxmemory directive. The global variable redisCommandTable defines all the Redis commands, specifying the name of the command, the function implementing the command, the number of arguments required, and other properties of each command. networking.c This file defines all the I/O functions with clients, masters and slaves (which in Redis are just special clients): createClient() allocates and initializes a new client. the addReply*() family of functions are used by commands implementations in order to append data to the client structure, that will be transmitted to the client as a reply for a given command executed. writeToClient() transmits the data pending in the output buffers to the client and is called by the writable event handler sendReplyToClient(). readQueryFromClient() is the readable event handler and accumulates data from read from the client into the query buffer. processInputBuffer() is the entry point in order to parse the client query buffer according to the Redis protocol. Once commands are ready to be processed, it calls processCommand() which is defined inside server.c in order to actually execute the command. freeClient() deallocates, disconnects and removes a client. aof.c and rdb.c As you can guess from the names these files implement the RDB and AOF persistence for Redis. Redis uses a persistence model based on the fork() system call in order to create a thread with the same (shared) memory content of the main Redis thread. This secondary thread dumps the content of the memory on disk. This is used by rdb.c to create the snapshots on disk and by aof.c in order to perform the AOF rewrite when the append only file gets too big. The implementation inside aof.c has additional functions in order to implement an API that allows commands to append new commands into the AOF file as clients execute them. The call() function defined inside server.c is responsible to call the functions that in turn will write the commands into the AOF. db.c Certain Redis commands operate on specific data types, others are general. Examples of generic commands are DEL and EXPIRE. They operate on keys and not on their values specifically. All those generic commands are defined inside db.c. Moreover db.c implements an API in order to perform certain operations on the Redis dataset without directly accessing the internal data structures. The most important functions inside db.c which are used in many commands implementations are the following: lookupKeyRead() and lookupKeyWrite() are used in order to get a pointer to the value associated to a given key, or NULL if the key does not exist. dbAdd() and its higher level counterpart setKey() create a new key in a Redis database. dbDelete() removes a key and its associated value. emptyDb() removes an entire single database or all the databases defined. The rest of the file implements the generic commands exposed to the client. object.c The robj structure defining Redis objects was already described. Inside object.c there are all the functions that operate with Redis objects at a basic level, like functions to allocate new objects, handle the reference counting and so forth. Notable functions inside this file: incrRefcount() and decrRefCount() are used in order to increment or decrement an object reference count. When it drops to 0 the object is finally freed. createObject() allocates a new object. There are also specialized functions to allocate string objects having a specific content, like createStringObjectFromLongLong() and similar functions. This file also implements the OBJECT command. replication.c This is one of the most complex files inside Redis, it is recommended to approach it only after getting a bit familiar with the rest of the code base. In this file there is the implementation of both the master and slave role of Redis. One of the most important functions inside this file is replicationFeedSlaves() that writes commands to the clients representing slave instances connected to our master, so that the slaves can get the writes performed by the clients: this way their data set will remain synchronized with the one in the master. This file also implements both the SYNC and PSYNC commands that are used in order to perform the first synchronization between masters and slaves, or to continue the replication after a disconnection. Other C files t_hash.c, t_list.c, t_set.c, t_string.c and t_zset.c contains the implementation of the Redis data types. They implement both an API to access a given data type, and the client commands implementations for these data types. ae.c implements the Redis event loop, it's a self contained library which is simple to read and understand. sds.c is the Redis string library, check http://github.com/antirez/sds for more information. anet.c is a library to use POSIX networking in a simpler way compared to the raw interface exposed by the kernel. dict.c is an implementation of a non-blocking hash table which rehashes incrementally. scripting.c implements Lua scripting. It is completely self contained from the rest of the Redis implementation and is simple enough to understand if you are familar with the Lua API. cluster.c implements the Redis Cluster. Probably a good read only after being very familiar with the rest of the Redis code base. If you want to read cluster.c make sure to read the Redis Cluster specification. Anatomy of a Redis command All the Redis commands are defined in the following way: void foobarCommand(client *c) {     printf(""%s"",c->argv[1]->ptr); /* Do something with the argument. */     addReply(c,shared.ok); /* Reply something to the client. */ }  The command is then referenced inside server.c in the command table: {""foobar"",foobarCommand,2,""rtF"",0,NULL,0,0,0,0,0},  In the above example 2 is the number of arguments the command takes, while ""rtF"" are the command flags, as documented in the command table top comment inside server.c. After the command operates in some way, it returns a reply to the client, usually using addReply() or a similar function defined inside networking.c. There are tons of commands implementations inside th Redis source code that can serve as examples of actual commands implementations. To write a few toy commands can be a good exercise to familiarize with the code base. There are also many other files not described here, but it is useless to cover everything. We want to just help you with the first steps. Eventually you'll find your way inside the Redis code base :-) Enjoy! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/antirez/redis"	"A simple web interface to manage databases."	"true"
"Web Applications"	"phpPgAdmin"	"https://github.com/phppgadmin/phppgadmin"	"A web-based administration tool for PostgreSQL."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"176"	"29"	"115"	"GitHub - phppgadmin/phppgadmin: the premier web-based administration tool for postgresql Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 29 Star 176 Fork 115 phppgadmin/phppgadmin forked from xzilla/phppgadmin Code Pull requests 15 Pulse Graphs the premier web-based administration tool for postgresql http://phppgadmin.sourceforge.net/ 2,164 commits 15 branches 43 releases 20 contributors PHP 75.3% JavaScript 19.2% HTML 4.9% Other 0.6% PHP JavaScript HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags DEV_RMPHPSELF DEV_SLONY DEV_TREE REL_3-0 REL_3-2 REL_3-3 REL_3-4 REL_3-5 REL_4-0 REL_4-2 REL_4_1 REL_5-0 REL_5-1 chriskl master Nothing to show start r1 REL_5-1-0 REL_5-0-BETA-2 REL_5-0-BETA-1 REL_5-0-4 REL_5-0-3 REL_5-0-2 REL_5-0-1 REL_5-0-0 REL_4-2-BETA-2 REL_4-2-BETA-1 REL_4-2-3 REL_4-2-2 REL_4-2-1 REL_4-1-BETA-1 REL_4-1-3 REL_4-1-3-RC-1 REL_4-1-2 REL_4-1-1 REL_4-0-1 REL_3-5-6 REL_3-5-5 REL_3-5-4 REL_3-5-3 REL_3-5-2 REL_3-5-1 REL_3-4-1 REL_3-3-1 REL_3-2-1 REL_3-1-RC-1 REL_3-1-BETA-1 REL_3-0-RC-2 REL_3-0-RC-1 REL_3-0-BETA-1 REL_3-0-1 REL_3-0-0-DEV-4 REL_3-0-0-DEV-3 REL_3-0-0-DEV-2 REL_3-0-0-DEV-1 REL_0-6-5 REL_0-6-0 REL_0-5-0 Nothing to show New pull request #40 Compare This branch is 25 commits ahead, 9 commits behind xzilla:master. Latest commit 3c9d356 Mar 4, 2015 xzilla Fix SF Bug #446 pagination not changing page (through select). … Fix by timding and ronlm Permalink Failed to load latest commit information. classes Fix SF Bug #446 pagination not changing page (through select). Mar 5, 2015 conf Add dynamic theme based on current server, database or user used for … Nov 12, 2013 help Fix help links for pg 9.3 / 9.4 Feb 15, 2015 images/themes Bootstrap theme Feb 8, 2015 js Fix an issue with population of FK fields using autocomplete. Nov 27, 2012 lang Update turkish.php Jan 25, 2015 libraries Add dynamic theme based on current server, database or user used for … Nov 11, 2013 plugins Fix creating report from user query result in plugin Report Nov 11, 2013 tests Admin processes test didnt seem to know about 'blocked' column. It do… Jan 25, 2015 themes Bootstrap theme Feb 9, 2015 xloadtree Quick Fix on the xloadtree code about bad html specialchars escaping … Sep 29, 2010 .gitattributes add .gitattribute file to exclude some files when creating an archive… Mar 28, 2010 .gitignore Make selenium tests full dynamics, no more build_tests.php required. Dec 30, 2011 BUGS Update BUGS CREDITS HISTORY and TODO before release Nov 29, 2010 CREDITS Update History and Credits based on recent patches Feb 15, 2015 DEVELOPERS clean up some developer suggestions Feb 15, 2015 FAQ overhaul the cant connect question, plus other fixes Jan 1, 2010 HISTORY Update History and Credits based on recent patches Feb 16, 2015 INSTALL reword information around statistics collector. based on bug report S… Mar 26, 2013 LICENSE Update copyright notices. Dec 18, 2005 TODO Add line item to ""TODO"" about Materialized Views Jan 25, 2015 TRANSLATORS Makes phpPgAdmin core full UTF-8 only. Dec 30, 2011 admin.php Cosmetic fix on Vacuum confirmation page for the ""Freeze"" checkbox Apr 23, 2013 aggregates.php Give environnments vars to the navlink hook Aug 22, 2012 ajax-ac-insert.php Makes phpPgAdmin core full UTF-8 only. Dec 30, 2011 all_db.php Give environnments vars to the navlink hook Aug 22, 2012 browser.php Add dynamic theme based on current server, database or user used for … Nov 11, 2013 casts.php Add support for 'tree' hooks in the plugin architecture. Aug 22, 2012 colproperties.php Give environnments vars to the navlink hook Aug 22, 2012 composer.json set required php version to 5.0 Mar 3, 2014 constraints.php Give environnments vars to the navlink hook Aug 22, 2012 conversions.php Add support for 'tree' hooks in the plugin architecture. Aug 22, 2012 database.php Add file upload capability to SQL popup window Feb 12, 2015 dataexport.php Fix downloading result from very long user query Nov 11, 2013 dataimport.php Fixes about using html chars in object names. Fix bug #1607047. More … May 10, 2009 dbexport.php Fix dbexport.php file, various bugs, see details Aug 27, 2010 display.php improve data management navigation; adds browse/search options to tab… Feb 15, 2015 domains.php Fix syntax bug in domain.php and remove debug messages Aug 22, 2012 fulltext.php Give environnments vars to the navlink hook Aug 22, 2012 functions.js XHTML compliance. Apr 23, 2007 functions.php make blank msg lines consistent Jul 20, 2014 groups.php Give environnments vars to the navlink hook Aug 22, 2012 help.php Localize help.php . Use 'drop' instead of 'remove' in Slony. Print st… Dec 31, 2006 history.php Give environnments vars to the navlink hook Aug 22, 2012 index.php We are using XHTML now and HTML is not an option. The headers config … Apr 18, 2007 indexes.js Extensive trigger and index improvements from Felix Meinhold (Felix.M… Mar 12, 2003 indexes.php Give environnments vars to the navlink hook Aug 22, 2012 info.php Add support for 'actionbuttons' hooks in the plugin architecture. Aug 22, 2012 intro.php Make selenium tests full dynamics, no more build_tests.php required. Dec 29, 2011 languages.php Add support for 'tree' hooks in the plugin architecture. Aug 22, 2012 links.js Wide-spread improvements to navigation tabs. Jul 13, 2004 login.php Instanciate $plugin_manager from login.php script if needed Apr 5, 2013 logout.php support sessions for browser with no cookies Sep 10, 2003 multiactionform.js initial support for multi-action options with support for tables. Thi… Mar 3, 2007 opclasses.php Add support for 'tree' hooks in the plugin architecture. Aug 22, 2012 operators.php Fix syntax bug in domain.php and remove debug messages Aug 22, 2012 plugin.php Add skeleton of the plugin architecture Aug 22, 2012 privileges.php Fix PHP notice on database privilege page Sep 30, 2012 redirect.php Fixes PHP 5.4 Strict errors Nov 4, 2012 robots.txt prevent search engines from indexing Sep 1, 2003 roles.php Give environnments vars to the navlink hook Aug 22, 2012 rules.php Give environnments vars to the navlink hook Aug 22, 2012 schemas.php make blank msg lines consistent Jul 20, 2014 sequences.php make blank msg lines consistent Jul 20, 2014 servers.php doTree() does not take an argument. May 24, 2013 sql.php Fix downloading result from very long user query Nov 11, 2013 sqledit.php Add file upload capability to SQL popup window Feb 12, 2015 tables.js Add automagic enable/disable of length attribute based on selected ty… Aug 18, 2006 tables.php improve data management navigation; adds browse/search options to tab… Feb 16, 2015 tablespaces.php Give environnments vars to the navlink hook Aug 22, 2012 tblproperties.php Use cleaner class names for comments cells and constaints icons Nov 18, 2013 triggers.php Give environnments vars to the navlink hook Aug 22, 2012 types.php Give environnments vars to the navlink hook Aug 22, 2012 users.php Give environnments vars to the navlink hook Aug 22, 2012 viewproperties.php Give environnments vars to the navlink hook Aug 22, 2012 views.php improve data management navigation; adds browse/search options to tab… Feb 16, 2015 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phppgadmin/phppgadmin"	"A web-based administration tool for PostgreSQL."	"true"
"Web Applications"	"phpMyAdmin"	"https://github.com/phpmyadmin/phpmyadmin"	"A web interface for MySQL/MariaDB."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1744"	"145"	"1032"	"GitHub - phpmyadmin/phpmyadmin: phpMyAdmin Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 145 Star 1,744 Fork 1,032 phpmyadmin/phpmyadmin Code Issues 163 Pull requests 8 Wiki Pulse Graphs phpMyAdmin http://www.phpmyadmin.net/ 106,437 commits 6 branches 416 releases 627 contributors PHP 55.1% JavaScript 42.0% HTML 2.4% Other 0.5% PHP JavaScript HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags MAINT_4_0_10 MAINT_4_4_15 QA_4_5 QA_4_6 STABLE master Nothing to show RELEASE_4_6_3 RELEASE_4_6_2 RELEASE_4_6_1 RELEASE_4_6_0 RELEASE_4_6_0RC2 RELEASE_4_6_0RC1 RELEASE_4_6_0ALPHA1 RELEASE_4_5_5_1 RELEASE_4_5_5 RELEASE_4_5_4_1 RELEASE_4_5_4 RELEASE_4_5_3_1 RELEASE_4_5_3 RELEASE_4_5_2 RELEASE_4_5_1 RELEASE_4_5_0_2 RELEASE_4_5_0_1 RELEASE_4_5_0 RELEASE_4_5_0RC1 RELEASE_4_4_15_7 RELEASE_4_4_15_6 RELEASE_4_4_15_5 RELEASE_4_4_15_4 RELEASE_4_4_15_3 RELEASE_4_4_15_2 RELEASE_4_4_15_1 RELEASE_4_4_15 RELEASE_4_4_14_1 RELEASE_4_4_14 RELEASE_4_4_13_1 RELEASE_4_4_13 RELEASE_4_4_12 RELEASE_4_4_11 RELEASE_4_4_10 RELEASE_4_4_9 RELEASE_4_4_8 RELEASE_4_4_7 RELEASE_4_4_6_1 RELEASE_4_4_6 RELEASE_4_4_5 RELEASE_4_4_4 RELEASE_4_4_3 RELEASE_4_4_2 RELEASE_4_4_1_1 RELEASE_4_4_1 RELEASE_4_4_0 RELEASE_4_4_0ALPHA1 RELEASE_4_3_13_3 RELEASE_4_3_13_2 RELEASE_4_3_13_1 RELEASE_4_3_13 RELEASE_4_3_12 RELEASE_4_3_11_1 RELEASE_4_3_11 RELEASE_4_3_10 RELEASE_4_3_9 RELEASE_4_3_8 RELEASE_4_3_7 RELEASE_4_3_6 RELEASE_4_3_5 RELEASE_4_3_4 RELEASE_4_3_3 RELEASE_4_3_2 RELEASE_4_3_1 RELEASE_4_3_0 RELEASE_4_3_0RC2 RELEASE_4_3_0RC1 RELEASE_4_3_0BETA1 RELEASE_4_3_0ALPHA1 RELEASE_4_2_13_3 RELEASE_4_2_13_2 RELEASE_4_2_13_1 RELEASE_4_2_13 RELEASE_4_2_12 RELEASE_4_2_11 RELEASE_4_2_10_1 RELEASE_4_2_10 RELEASE_4_2_9_1 RELEASE_4_2_9 RELEASE_4_2_8_1 RELEASE_4_2_8 RELEASE_4_2_7_1 RELEASE_4_2_7 RELEASE_4_2_6 RELEASE_4_2_5 RELEASE_4_2_4 RELEASE_4_2_3 RELEASE_4_2_2 RELEASE_4_2_1 RELEASE_4_2_0 RELEASE_4_2_0RC1 RELEASE_4_2_0BETA1 RELEASE_4_2_0ALPHA2 RELEASE_4_2_0ALPHA1 RELEASE_4_1_14_8 RELEASE_4_1_14_7 RELEASE_4_1_14_6 RELEASE_4_1_14_5 RELEASE_4_1_14_4 RELEASE_4_1_14_3 Nothing to show New pull request Latest commit aa3c345 Jul 14, 2016 nijel Skip anchors verification for now … Skip until new Sphinx will be released as it better handles HTTP thanks to requests library.  Signed-off-by: Michal Čihař <michal@cihar.com> Permalink Failed to load latest commit information. .github Ask people to contribute code with tests Jun 16, 2016 doc Skip anchors verification for now Jul 14, 2016 examples Merge branch 'QA_4_6-security' into master-security Jun 17, 2016 js Merge branch 'QA_4_6-security' into master-security Jun 22, 2016 libraries Merge branch 'QA_4_6' Jul 12, 2016 po Translated using Weblate (Portuguese) Jul 12, 2016 scripts Use phpmyadmin/shapefile instead of embedded bfShapeFile Jun 24, 2016 setup Merge branch 'master' into master-security Jun 20, 2016 sql Remove create_tables_drizzle.sql Sep 10, 2015 templates Merge branch 'QA_4_6' Jun 24, 2016 test Revert ""Install dbase extension on tests for shapefile"" Jun 24, 2016 themes Remove inline styles from elements with id='filterText' (partial fix … May 26, 2016 .coveralls.yml Simplify coveralls settings May 10, 2014 .gitignore Ignore linkcheck output May 27, 2016 .jshintrc Higher limit on detected errors Apr 16, 2013 .scrutinizer.yml Add missing quote to scrutinizer yml Jun 24, 2016 .travis.yml Cache pip cache Feb 22, 2016 .weblate Adjust Weblate setup to master branch May 16, 2016 CONTRIBUTING.md Document --signoff usage Feb 11, 2016 ChangeLog Merge branch 'QA_4_6' Jul 12, 2016 DCO Remove trailing whitespace from the documentation Mar 20, 2014 LICENSE Use verbatim GPL 2.0 licence text Apr 14, 2015 README Merge branch 'QA_4_6' May 10, 2016 README.rst Add CII Best Practices badge Jun 16, 2016 browse_foreigners.php Set namespace on Advisor, Config, Console and Util classes. Sep 1, 2015 build.xml Use phpmyadmin/shapefile instead of embedded bfShapeFile Jun 24, 2016 changelog.php Use https for documentation links May 10, 2016 chk_rel.php Set namespace on Advisor, Config, Console and Util classes. Sep 1, 2015 composer.json Use phpmyadmin/shapefile instead of embedded bfShapeFile Jun 24, 2016 config.sample.inc.php Merge branch 'QA_4_6' May 10, 2016 db_central_columns.php Merge branch 'QA_4_6' Jun 17, 2016 db_datadict.php Refactored url parmeters generating, Issue #11990 Feb 22, 2016 db_designer.php Merge branch 'QA_4_5' Jan 25, 2016 db_events.php Remove classes require_once. Sep 1, 2015 db_export.php Fix #12017 Cannot easily select multiple tables when exporting Feb 23, 2016 db_import.php Add missing require. Sep 6, 2015 db_operations.php Separate adding HTML markup to message from others Jun 16, 2016 db_qbe.php Remove bookmark library includes Mar 9, 2016 db_routines.php Move MySQL charsets handling to the Charsets class Apr 11, 2016 db_search.php Organize db search page in criteria, results, browse results order Feb 19, 2016 db_sql.php Fix #11866 Direct calling of functions.js #11866 Jan 18, 2016 db_sql_autocomplete.php Set namespace on Advisor, Config, Console and Util classes. Sep 1, 2015 db_sql_format.php Set namespace on Advisor, Config, Console and Util classes. Sep 1, 2015 db_structure.php Merge branch 'QA_4_6' Apr 6, 2016 db_tracking.php Remove some unnecessary string concatenations Dec 6, 2015 db_triggers.php Remove unneeded closing tags Mar 6, 2015 error_report.php Set namespace on Advisor, Config, Console and Util classes. Sep 1, 2015 export.php Document task to do Jun 17, 2016 favicon.ico Better favicon with same image for all resolutions Aug 14, 2015 file_echo.php Remove dead code used to export charts Mar 10, 2016 gis_data_editor.php Merge branch 'QA_4_6' Jun 16, 2016 import.php Merge branch 'QA_4_6-security' into master-security Jun 20, 2016 import_status.php Remove checks for older PHP versions Apr 11, 2016 index.php Separate adding HTML markup to message from others Jun 16, 2016 license.php Merge branch 'QA_4_5' into QA_4_6 Feb 12, 2016 lint.php Make phpcs happy Mar 22, 2016 logout.php Improve handling of logout May 23, 2016 navigation.php Move libraries/navigation classes into a namespace. Sep 4, 2015 normalization.php Merge branch 'QA_4_6' Mar 25, 2016 phpdox.xml Enable phploc in the docs Jan 6, 2016 phpinfo.php Set namespace on Advisor, Config, Console and Util classes. Sep 1, 2015 phpmyadmin.css.php Make ThemeManager a singleton instead of storing it in the session May 11, 2016 phpunit.xml.dist Use phpmyadmin/shapefile instead of embedded bfShapeFile Jun 24, 2016 phpunit.xml.hhvm Fix test discovery for class tests Dec 1, 2015 phpunit.xml.nocoverage Fix test discovery for class tests Dec 1, 2015 prefs_forms.php More consistency for URL::getCommon Jun 17, 2016 prefs_manage.php Add support for export user settings as config.inc.php snippet May 23, 2016 print.css Use print.css in header_printview.inc.php May 13, 2012 robots.txt Fix permissions. Aug 30, 2010 schema_export.php Merge branch 'QA_4_5' Jan 19, 2016 server_binlog.php Introduce a controller for binary logs page Feb 1, 2016 server_collations.php Use a controller for server_collations page Nov 27, 2015 server_databases.php New controller for server databases page Nov 19, 2015 server_engines.php Add a controller for server engines page Dec 8, 2015 server_export.php Merge branch 'master' into useNamespaces_master Sep 13, 2015 server_import.php Add missing require. Sep 6, 2015 server_plugins.php Use full namespace Dec 17, 2015 server_privileges.php Fix #11622 Reloading privileges is not allowed Oct 30, 2015 server_replication.php Set namespace on Advisor, Config, Console and Util classes. Sep 1, 2015 server_sql.php Add missing require. Sep 6, 2015 server_status.php Merge branch 'master' into useNamespaces_master Sep 9, 2015 server_status_advisor.php Merge branch 'master' into useNamespaces_master Sep 9, 2015 server_status_monitor.php Remove excanvas Jan 14, 2016 server_status_processes.php Ensure kill ID is integer Jun 16, 2016 server_status_queries.php Remove excanvas Jan 14, 2016 server_status_variables.php Merge branch 'master' into useNamespaces_master Sep 9, 2015 server_user_groups.php Make PHPCS happy. Oct 19, 2015 server_variables.php Move to a sub package for better organization Nov 18, 2015 show_config_errors.php Remove unneeded closing tags Mar 6, 2015 sql.php Remove bookmark library includes Mar 9, 2016 tbl_addfield.php Refactored url parmeters generating, Issue #11990 Feb 22, 2016 tbl_change.php Remove no longer used bigints javascript Jun 9, 2016 tbl_chart.php Move PMA/DI namespace to PMA\libraries\di. Sep 2, 2015 tbl_create.php Refactored url parmeters generating, Issue #11990 Feb 22, 2016 tbl_export.php Make phpcs happy Mar 22, 2016 tbl_find_replace.php Move PMA/DI namespace to PMA\libraries\di. Sep 2, 2015 tbl_get_field.php Remove /*overload*/ prefix from mb_* calls Jan 4, 2016 tbl_gis_visualization.php Make PHPCS happy. Oct 19, 2015 tbl_import.php Add missing require. Sep 6, 2015 tbl_indexes.php Make PHPCS happy. Oct 19, 2015 tbl_operations.php Make it clear whether addMessages expects string or Message object Jun 16, 2016 tbl_recent_favorite.php Remove classes require_once. Sep 1, 2015 tbl_relation.php Remove /*overload*/ prefix from mb_* calls Jan 4, 2016 tbl_replace.php These are strings, handle them according to that Jun 16, 2016 tbl_row_action.php Merge branch 'QA_4_6' May 23, 2016 tbl_select.php Move libraries/navigation/nodes classes into a namespace. Sep 4, 2015 tbl_sql.php Add missing require. Sep 6, 2015 tbl_structure.php Move MySQL charsets handling to the Charsets class Apr 11, 2016 tbl_tracking.php Refactor duplicated code Jan 1, 2016 tbl_triggers.php Remove unneeded closing tags Mar 6, 2015 tbl_zoom_select.php Move PMA/DI namespace to PMA\libraries\di. Sep 2, 2015 themes.php Make ThemeManager a singleton instead of storing it in the session May 11, 2016 transformation_overview.php Remove some unnecessary string concatenations Dec 4, 2015 transformation_wrapper.php This is an inc file Mar 10, 2016 url.php Merge branch 'QA_4_6' Jun 15, 2016 user_password.php Cache current user information for DBI lifetime Apr 6, 2016 version_check.php Merge branch 'QA_4_5' Jan 28, 2016 view_create.php Refactored url parmeters generating, Issue #11990 Feb 22, 2016 view_operations.php Fix messages handling Jun 17, 2016 README.rst phpMyAdmin A web interface for MySQL and MariaDB. https://www.phpmyadmin.net/ Code status Download You can get the newest release at https://www.phpmyadmin.net/. If you prefer to follow the git repository, the following branch and tag names may be of interest: STABLE is the current stable release. master is the development branch. Releases are tagged, for example version 4.0.1 was tagged as RELEASE_4_0_1. More Information Please see the documentation in the doc folder or at https://docs.phpmyadmin.net/. For support or to learn how to contribute code or by translating to your language, visit https://www.phpmyadmin.net/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phpmyadmin/phpmyadmin"	"A web interface for MySQL/MariaDB."	"true"
"Web Applications"	"Adminer"	"https://www.adminer.org/"	"Database management in a single PHP file."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1709"	"143"	"331"	"GitHub - vrana/adminer: Database management in a single PHP file Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 143 Star 1,709 Fork 331 vrana/adminer Code Pull requests 47 Wiki Pulse Graphs Database management in a single PHP file http://www.adminer.org/ 2,924 commits 8 branches 32 releases 41 contributors PHP 81.7% CSS 12.6% JavaScript 2.9% HTML 2.8% PHP CSS JavaScript HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags adminer2 ajax binary_compile codemirror master move navigation_commands simpledb Nothing to show v4.2.5 v4.2.4 v4.2.3 v4.2.2 v4.2.1 v4.2.0 v4.1.0 v4.0.3 v4.0.2 v4.0.1 v4.0.0 v3.7.1 v3.7.0 v3.6.4 v3.6.3 v3.6.2 v3.6.1 v3.6.0 v3.5.1 v3.5.0 v3.4.0 v3.3.4 v3.3.3 v3.3.2 v3.3.1 v3.3.0 v3.2.2 v3.2.1 v3.2.0 v3.1.0 v3.0.1 v3.0.0 Nothing to show New pull request Latest commit 53dfafd Jun 1, 2016 vrana Release 4.2.5 Permalink Failed to load latest commit information. adminer Release 4.2.5 Jun 1, 2016 designs Fix http:// links in stylesheets to protocol-independent ones (//) Feb 28, 2016 editor Change links to HTTPS Sep 10, 2015 externals Centralize setting MySQL charset Jun 24, 2014 plugins plugin.php: added missing arguments Nov 1, 2015 tests Fix tests Dec 22, 2013 .gitignore Add Composer support Nov 11, 2014 .gitmodules Remove modules used only by plugins Feb 1, 2014 changes.txt Release 4.2.5 Jun 1, 2016 compile.php Translate numbers in ar, bn, fa Mar 19, 2014 composer.json Change links to HTTPS Sep 10, 2015 coverage.php Replace isset($var) by $var !== null May 14, 2012 lang.php Use PHP 5 Aug 8, 2013 readme.txt Change links to HTTPS Sep 10, 2015 todo.txt PostgreSQL: Support creating array columns Aug 8, 2013 readme.txt Adminer - Database management in a single PHP file Adminer Editor - Data manipulation for end-users  https://www.adminer.org/ Supports: MySQL, PostgreSQL, SQLite, MS SQL, Oracle, SimpleDB, Elasticsearch Requirements: PHP 5+ Apache License 2.0 or GPL 2  adminer/index.php - Run development version of Adminer editor/index.php - Run development version of Adminer Editor editor/example.php - Example customization plugins/readme.txt - Plugins for Adminer and Adminer Editor adminer/plugin.php - Plugin demo compile.php - Create a single file version lang.php - Update translations tests/selenium.html - Selenium test suite  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vrana/adminer"	"Database management in a single PHP file."	"true"
"Web Applications"	"Grav"	"https://github.com/getgrav/grav"	"A modern flat-file CMS."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4649"	"264"	"394"	"GitHub - getgrav/grav: Modern, Crazy Fast, Ridiculously Easy and Amazingly Powerful Flat-File CMS Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 264 Star 4,649 Fork 394 getgrav/grav Code Issues 36 Pull requests 5 Pulse Graphs Modern, Crazy Fast, Ridiculously Easy and Amazingly Powerful Flat-File CMS http://getgrav.org 3,004 commits 25 branches 77 releases 72 contributors PHP 99.2% Other 0.8% PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags build_test develop feature/add-base-including-language-to-uri feature/allow-authentication-proxy feature/allow-subfolder-url-rewrite feature/bettef-gzip-flush-buffers feature/blueprints-update feature/converturl-rewrite feature/dependencies feature/fix-842 feature/fix-environment-config feature/fix-nonce-issue feature/fix-pipeline feature/fix-redirect feature/force-ssl feature/gzip-take2 feature/images-orientation-fix feature/install-events feature/non-standard-slugs feature/page_level_ssl feature/plugin-early feature/proxy_support master release/1.0.0 release/1.1.0 Nothing to show 1.1.0 1.1.0-rc.3 1.1.0-rc.2 1.1.0-rc.1 1.1.0-beta.5 1.1.0-beta.4 1.1.0-beta.3 1.1.0-beta.2 1.1.0-beta.1 1.0.10 1.0.9 1.0.8 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 1.0.0-rc.6 1.0.0-rc.5 1.0.0-rc.4 1.0.0-rc.3 1.0.0-rc.2 1.0.0-rc.1 0.9.45 0.9.44 0.9.43 0.9.42 0.9.41 0.9.40 0.9.39 0.9.38 0.9.37 0.9.36 0.9.35 0.9.34 0.9.33 0.9.32 0.9.31 0.9.30 0.9.29 0.9.28 0.9.27 0.9.26 0.9.25 0.9.24 0.9.23 0.9.22 0.9.21 0.9.20 0.9.19 0.9.18 0.9.17 0.9.16 0.9.15 0.9.14 0.9.13 0.9.12 0.9.11 0.9.10 0.9.9 0.9.8 0.9.7 0.9.6 0.9.5 0.9.4 0.9.3 0.9.2 0.9.1 0.9.0 0.8.0 0.3.0 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit 5871d1a Jul 15, 2016 rhukster Fix for invalid HTML chars and very long site titles #701 Permalink Failed to load latest commit information. assets Added empty assets folder Aug 17, 2014 backup backup to backup folder Apr 27, 2015 bin Moved `devtools` out of core into a plugin Apr 19, 2016 cache Created a .dependencies and some other install cleanup Aug 6, 2014 images Created a .dependencies and some other install cleanup Aug 7, 2014 logs Created a .dependencies and some other install cleanup Aug 7, 2014 system Fix for invalid HTML chars and very long site titles #701 Jul 15, 2016 tests Feature: Better assets pipelining (#917) Jul 11, 2016 user Switch to markdown-notices styling rather than older `>>>` block quot… May 23, 2016 webserver-configs bad nginx.conf Jul 15, 2016 .dependencies Switch to markdown-notices styling rather than older `>>>` block quot… May 23, 2016 .editorconfig Forcing 2 space indentation on all yaml files Sep 25, 2014 .gitignore Only ignore main vendor folder May 10, 2016 .htaccess Add 500 error option to the comment Apr 19, 2016 .travis.yml Updated auth token (and kicking of unit tests) Feb 5, 2016 CHANGELOG.md Fix for invalid HTML chars and very long site titles #701 Jul 15, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Jun 29, 2016 LICENSE.txt renamed LICENSE to LICENSE.txt Dec 1, 2015 README.md Update broken link for Doctrine Cache (#886) Jun 9, 2016 codeception.yml Drop default db config from config Jan 5, 2016 composer.json add ext-zip requirement (#922) Jul 1, 2016 composer.lock restore require-rev Jun 10, 2016 index.php Unified PHP code header styling Jul 11, 2016 robots.txt Prevent crawling of unnecessary directories Nov 20, 2015 README.md Grav Grav is a Fast, Simple, and Flexible, file-based Web-platform. There is Zero installation required. Just extract the ZIP archive, and you are already up and running. It follows similar principles to other flat-file CMS platforms, but has a different design philosophy than most. Grav comes with a powerful Package Management System to allow for simple installation and upgrading of plugins and themes, as well as simple updating of Grav itself. The underlying architecture of Grav is designed to use well-established and best-in-class technologies to ensure that Grav is simple to use and easy to extend. Some of these key technologies include: Twig Templating: for powerful control of the user interface Markdown: for easy content creation YAML: for simple configuration Parsedown: for fast Markdown and Markdown Extra support Doctrine Cache: layer for performance Pimple Dependency Injection Container: for extensibility and maintainability Symfony Event Dispatcher: for plugin event handling Symfony Console: for CLI interface Gregwar Image Library: for dynamic image manipulation Requirements PHP 5.5.9 or higher. Check the required modules list Check the Apache or IIS requirements QuickStart These are the options to get Grav: Downloading a Grav Package You can download a ready-built package from the Downloads page on http://getgrav.org With Composer You can create a new project with the latest stable Grav release with the following command: $ composer create-project getgrav/grav ~/webroot/grav  From GitHub Clone the Grav repository from https://github.com/getgrav/grav to a folder in the webroot of your server, e.g. ~/webroot/grav. Launch a terminal or console and navigate to the webroot folder: $ cd ~/webroot $ git clone https://github.com/getgrav/grav.git  Install the plugin and theme dependencies by using the Grav CLI application bin/grav: $ cd ~/webroot/grav $ bin/grav install  Check out the install procedures for more information. Adding Functionality You can download plugins or themes manually from the appropriate tab on the Downloads page on http://getgrav.org, but the preferred solution is to use the Grav Package Manager or GPM: $ bin/gpm index  This will display all the available plugins and then you can install one or more with: $ bin/gpm install <plugin/theme>  Updating To update Grav you should use the Grav Package Manager or GPM: $ bin/gpm selfupgrade  To update plugins and themes: $ bin/gpm update  Contributing We appreciate any contribution to Grav, whether it is related to bugs, grammar, or simply a suggestion or improvement. However, we ask that any contributions follow our simple guidelines in order to be properly received. All our projects follow the GitFlow branching model, from development to release. If you are not familiar with it, there are several guides and tutorials to make you understand what it is about. You will probably want to get started by installing this very good collection of git extensions. What you mainly want to know is that: All the main activity happens in the develop branch. Any pull request should be addressed only to that branch. We will not consider pull requests made to the master. It's very well appreciated, and highly suggested, to start a new feature whenever you want to make changes or add functionalities. It will make it much easier for us to just checkout your feature branch and test it, before merging it into develop Getting Started What is Grav? Install Grav in few seconds Understand the Configuration Take a peek at our available free Skeletons If you have questions, jump on our Gitter Room! Have fun! Exploring More Have a look at our Basic Tutorial Dive into more advanced functions License See LICENSE Running Tests First install the dev dependencies by running composer update from the Grav root. Then composer test will run the Unit Tests, which should be always executed successfully on any site. You can also run a single unit test file, e.g. composer test tests/unit/Grav/Common/AssetsTest.php Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/getgrav/grav"	"A modern flat-file CMS."	"true"
"Infrastructure"	"appserver.io"	"http://appserver.io/"	"A multithreaded application server for PHP, written in PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"727"	"83"	"85"	"GitHub - appserver-io/appserver: A multithreaded application server for PHP, written in PHP. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 83 Star 727 Fork 85 appserver-io/appserver Code Issues 82 Pull requests 0 Wiki Pulse Graphs A multithreaded application server for PHP, written in PHP. http://appserver.io/ 1,852 commits 7 branches 112 releases 23 contributors PHP 90.8% HTML 9.2% PHP HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.5.7-beta 0.5.8-beta 1.0 1.1 amqp gh-pages master Nothing to show threaded-application-1-0-7 threaded-application-1-0-6 threaded-application-1-0-5 threaded-application-1-0-4 threaded-application-1-0-3 threaded-application-1-0-2 threaded-application-1-0-1 threaded-application-1-0-0 final 1.1.2 1.1.2-beta2 1.1.2-beta1 1.1.1 1.1.1-beta16 1.1.1-beta15 1.1.1-beta14 1.1.1-beta13 1.1.1-beta12 1.1.1-beta11 1.1.1-beta10 1.1.1-beta9 1.1.1-beta8 1.1.1-beta7 1.1.1-beta6 1.1.1-beta5 1.1.1-beta4 1.1.1-beta3 1.1.1-beta2 1.1.1-beta1 1.1.1-alpha13 1.1.1-alpha12 1.1.1-alpha11 1.1.1-alpha10 1.1.1-alpha9 1.1.1-alpha8 1.1.1-alpha7 1.1.1-alpha6 1.1.1-alpha5 1.1.1-alpha4 1.1.1-alpha3 1.1.1-alpha2 1.1.1-alpha1 1.1.0 1.1.0-rc1 1.1.0-beta7 1.1.0-beta6 1.1.0-beta5 1.1.0-beta4 1.1.0-beta3 1.1.0-beta2 1.1.0-beta1 1.1.0-alpha3 1.1.0-alpha2 1.1.0-alpha1 1.0.6 1.0.5 1.0.5-beta3 1.0.5-beta2 1.0.5-beta1 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 1.0.0-rc3 1.0.0-rc2 1.0.0-rc1 1.0.0-beta4 1.0.0-beta3 1.0.0-beta2 1.0.0-beta1 1.0.0-beta 0.11.1 0.11.0 0.10.8 0.10.7 0.10.6 0.10.5 0.10.4 0.10.3 0.10.2 0.10.1 0.10.0 0.9.16 0.9.15 0.9.14 0.9.13 0.9.12 0.9.11 0.9.10 0.9.9 0.9.8 0.9.7 0.9.6 0.9.4 0.9.3 0.9.2 0.9.1 0.9.0 0.8.2 Nothing to show New pull request Latest commit b00f82c Jul 1, 2016 wagnert committed on GitHub Merge pull request #1026 from wagnert/master … Switch finally to version 1.1.2 Permalink Failed to load latest commit information. deploy Merging repositories Nov 21, 2014 etc Refactoring Doctrine EntityManager integration to support SSB injection May 2, 2016 internal Allow location merging from container.xml Dec 6, 2015 resources Removed PhpModule from appserver configuration files Jun 28, 2016 src/AppserverIo/Appserver Fixed random startup problems, occuring when container starts faster … Jun 28, 2016 tests Refactoring NamingDirectory and Unit tests May 4, 2016 var Add internal deploy directory Feb 27, 2016 .dockerignore Fixed Dockerfile Mar 15, 2016 .gitattributes Making PHP the main language again Mar 29, 2016 .gitignore Add runner mode enabling a node.JS style usability Mar 18, 2016 .travis.yml Remove PHP 5.4 from Travis-CI configuration file Jan 29, 2016 CHANGELOG.md Switch finally to version 1.1.2 Jul 1, 2016 CONTRIBUTING.md Create CONTRIBUTING.md Nov 24, 2015 Dockerfile Fixed random startup problems, occuring when container starts faster … Jun 28, 2016 LICENSE.txt Create LICENSE.txt Jan 12, 2016 README.md Fixed error in README.md file Jun 6, 2016 ROADMAP.md Update ROADMAP.md Jan 5, 2015 UPGRADE-1.0.1.md extended comments and interface usage Mar 6, 2015 UPGRADE-1.0.2.md Update UPGRADE-1.0.2.md Mar 12, 2015 UPGRADE-1.0.3.md Merge bugfix #725 - no Datasources in Singleton SessionBean Apr 9, 2015 UPGRADE-1.0.4.md Update CHANGELOG.md with 1.0.x fixes + Copy UPGRADE-1.0.x.md May 26, 2015 UPGRADE-1.0.5.md Update CHANGELOG.md with 1.0.x fixes + Copy UPGRADE-1.0.x.md May 26, 2015 UPGRADE-1.0.6.md Update CHANGELOG.md with 1.0.x fixes + Copy UPGRADE-1.0.x.md May 26, 2015 UPGRADE-1.1.0.md Merge with master Jun 18, 2015 UPGRADE-1.1.1.md Fixed invalid class loader initialization in AbstractContainerThread Apr 24, 2016 UPGRADE-1.1.2.md Fixed random startup problems, occuring when container starts faster … Jun 28, 2016 Vagrantfile [TASK] add basic vagrant file Feb 25, 2015 bootstrap.php new codeing conventions + bugfixes + new dependencies Jan 28, 2015 build.default.properties Switch finally to version 1.1.2 Jul 1, 2016 build.xml Remove blackfire.io support because of segfault caused by pthreads Mar 27, 2016 composer.json Fixed random startup problems, occuring when container starts faster … Jun 28, 2016 phpunit.xml Merge bugfix #725 - no Datasources in Singleton SessionBean Apr 9, 2015 server.php Fixed random startup problems, occuring when container starts faster … Jun 28, 2016 README.md appserver.io, a PHP application server This is the main repository for the appserver.io project. appserver.io is a multithreaded application server for PHP, written in PHP. Yes, pure PHP! If you know anything about PHP, you're probably thinking we might be crazy. Well, we aren't. We are dead serious (but we most certainly still love having fun!). appserver.io overcomes some of the biggest overhead issues most PHP (CGI) programs have in common, through a blazingly fast and rock solid infrastructure and with concepts new to PHP. At the same time, appserver.io offers PHP developers the fundamental core features found in most popular frameworks today, yet not intending to be a framework at all. It is a suprizingly fun infrastructure for PHP development, allowing you to build powerful applications without needing the bulk of a PHP framework. appserver.io includes great features like... Its own performant Web Server and HTTP foundation. A powerful Servlet Engine, with true multi-threading A Dependency Injection Container, for building modern, modular and testable code Multiple Persistence Containers, for sessions and other stateful components A Message Queue System, for contolling the execution of long running tasks A Timer Service, for running scheduled tasks and much more. appserver.io also supports Aspect Oriented Programming(AOP), which is a programming paradigm also found in the most popular frameworks today, like Laravel. AOP allows the separation of cross-cutting concerns within a program, allowing developers to create even more modular systems. With appserver.io, it is our goal to establish a solution as the next standard for enterprise applications written in PHP. With your help, we can reach this goal. Give it a try! Table of Contents Semantic Versioning Installation Basic Usage HTTP(S) Server Servlet-Engine Annotations Dependency Injection Persistence-Container Message-Queue Timer-Service AOP Design-by-Contract Runtime Environment Configuration Deployment Uninstall Semantic Versioning appserver.io follows semantic versioning. For the purpose of defining a public API we introduced appserver.io specific PSRs. These PSRs are the core to appserver.io's public API, but within their own definition and versioning, meaning that semantic versioning applies to these PSRs and not the appserver package itself. Installation appserver.io can be installed on several operating systems. It also supports several methods of acquiring the software. To get your appserver.io package you can do one of the following: Download one of our releases right from this repository which provide tested install packages Grab any of our nightlies from our project page to get bleeding edge install packages, (and may also containg bugs - only for testing and not for production use!!) Build your own package using ANT! To do so clone the runtime first. Then update at least the os.family and os.distribution build properties according to your environment and build the appserver with the ANT build and create-package target. The package will install with these basic default characteristics: Install dir: /opt/appserver Autostart after installation, no autostart on reboot Reachable under pre-configured ports as described here For OS specific steps and characteristics see below for tested environments. Mac OS X Runs and tested on Mac OS X 10.8.x and higher! For Mac OS X > 10.8.x we provide a .pkg file for download that contains the runtime and the distribution. Double-clicking on the .pkg starts and guides you through the installation process. Windows Runs and tested on Windows 7 (32-bit) and higher! As we deliver the Windows appserver as a .jar file you can download, a installed Java Runtime Environment (or JDK that is) is a vital requirement for using it. If the JRE/JDK is not installed, you have to do so first. You can get the JRE from Oracle's download page. If this requirement is met you can start the installation by simply double-clicking the .jar archive. Debian Runs and tested on Debian Squeeze (64-bit) and higher! If you're on a Debian system you might also try our .deb repository: root@debian:~# echo ""deb http://deb.appserver.io/ wheezy main"" > /etc/apt/sources.list.d/appserver.list root@debian:~# wget http://deb.appserver.io/appserver.gpg -O - | apt-key add - root@debian:~# aptitude update root@debian:~# aptitude install appserver-dist  Optionally you can download the .deb files and install them by double-clicking on them. This will invoke the system default package manager and guides you through the installation process. Please install the runtime first, as this is a dependency for the distribution. Fedora Runs and tested on versions Fedora 20 (64-bit) and higher! We also provide .rpm files for Fedora, that you can download and start the installation process by double-clicking on it. This will start the systems default package manager and guides you through the installation process. CentOS Runs and tested on CentOS 6.5 (64-bit) and higher! Installation and basic usage is the same as on Fedora, but we provide different packages. CentOS requires additional repositories like remi or EPEL to satisfy additional dependencies. Raspbian As an experiment we offer a Raspbian and brought the appserver to an ARM environment. What should we say, it worked! :D With os.distribution = raspbian you might give it a try and build it yourself. Plan for at least 5 hours though, as we currently do not offer prepared install package. Basic Usage The appserver will automatically start after your installation wizard (or package manager) finishes the setup. You can use it without limitations after installation is completed.. Below you can find basic instructions on how to make use of the appserver. After the installation, you might want to have a look at the example application, which is also included with the installation. You can reach the app at http://127.0.0.1:9080/example Start your favorite browser and have a look at what appserver can do. :) To enter the site, use the default login appserver/appserver.i0. Start and Stop Scripts There are several standalone processes, which are needed for the proper functioning of different features within appserver. There are start and stop scripts included in appserver for all *nix like operating systems. These work the same as on any other *nix systems. They are: appserver: The main process which will start the appserver itself appserver-php5-fpm: php-fpm + appserver configuration. Our default FastCGI backend. Other FCGI system can be added the same way. appserver-watcher: A watchdog which monitors filesystem changes and manages appserver restarts On a normal system, all three of these processes should run to enable the full feature set. To ultimately run the appserver, only the appserver process is needed. However, you will miss simple on-the-fly deployment (appserver-watcher) and might have problems with legacy applications. Depending on the FastCGI backend you want to use, you might ditch appserver-php5-fpm for other processes e.g. you could also use an hhvm backend. Currently we support three different types of init scripts, which support the commands start, stop, status and restart (additional commands might be available on other systems). Mac OS X (LAUNCHD) The LAUNCHD launch daemons are located within the appserver installation at /opt/appserver/sbin. They can be used with the schema /opt/appserver/sbin/<DAEMON> <COMMAND> Debian, Raspbian, CentOS, ...(SystemV) Commonly known and located in /etc/init.d/ they too support the commands mentioned above provided in the form /etc/init.d/<DAEMON> <COMMAND>. Fedora, ... (systemd) systemd init scripts can be used using the systemctl command with the syntax systemctl <COMMAND> <DAEMON>. Windows On Windows we sadly do not offer any of these scripts. After the installation, you can start the Application Server with the server.bat file located within the root directory of your installation. Best thing to do would be starting a command prompt as an administrator and run the following commands (assuming default installation path): C:\Windows\system32>cd ""C:\Program Files\appserver"" C:\Program Files\appserver>server.bat  HTTP(S) Server The configuration of the HTTP(S) Server itself is mostly self-explanatory, so just have a look at the default config file and, if you'd like, try to change the settings. Please make sure you restart the appserver after making any changes. :) A detailed overview of all configuration settings will follow ... Configure a Virtual Host Using virtual hosts, you can extend the default server configuration and produce a host specific environment for your app to run. You can do so by adding a virtual host configuration to your global server configuration file. See the example for a XML based configuration below: <virtualHosts>   <virtualHost name=""example.local"">     <params>       <param name=""admin"" type=""string"">         admin@appserver.io       </param>       <param name=""documentRoot"" type=""string"">         /opt/appserver/webapps/example       </param>     </params>   </virtualHost> </virtualHosts> The above configuration sits within the server element and opens up the virtual host example.local which has a different document root than the global configuration has. The virtual host is born. :-) The virtualHost element can hold params, rewrite rules or environment variables which are only available for the host specifically. Configure your Environment Variables You can set environment variables using either the global or the virtual host based configuration. The example below shows a basic usage of environment variables in XML format. <environmentVariables>   <environmentVariable     condition=""""     definition=""EXAMPLE_VAR=example"" />   <environmentVariable     condition=""Apple@$HTTP_USER_AGENT""     definition=""USER_HAS_APPLE=true"" /> </environmentVariables> There are several ways in which this feature is used. You can get a rough idea when having a look at Apache modules mod_env and mod_setenvif which we adopted. You can make definitions of environment variables dependent on REGEX based conditions which will be performed on so called backreferences. These backreferences are request related server variables like HTTP_USER_AGENT. A condition has the format <REGEX_CONDITION>@$<BACKREFERENCE>. If the condition is empty the environment variable will be set every time. The definition you can use has the form <NAME_OF_VAR>=<THE_VALUE_TO_SET>. The definition has some specialities too: Setting a var to null will unset the variable if it existed before You can use backreferences for the value you want to set as well. But those are limited to environment variables of the PHP process Values will be treated as strings Servlet-Engine Originally Java Servlets were Java's counterpart to other dynamic web technologies like PHP or the Microsoft .NET platform. In contrast to PHP, a Servlet written in Java is not a script that will be interpreted per request. Instead, it is a class, which is instantiated, when the Servlet Engine starts up. This means, the servlet class is already in memory and stays in memory. In most cases, this is a major advantage compared to the common PHP way to constantly reload the script on each request. Since most PHP applications are based on frameworks like Symfony or Laravel have grown immensly during the last few years, the reloading of all the script files required by the application, slows down performance considerably. This is one of the reasons why caching is a major part of all good PHP frameworks. On one hand, caching improves performance enough so the application responds to the request in an acceptable timeframe. On the other hand, it is also the origin of many problems, such as how to invalidate parts of the cache during an applications runtime. Servlets enable you to implement your application logic as you normally would, but without the need to worry about the expensive reloading process, which is common to normal PHP applications. A Servlet is a super fast and simple way to implement an entry point to handle HTTP requests, which allow you to execute all performance critical tasks, like bootstrapping (with a simple method called init()), when the Servlet Engine starts up. What is a Servlet A Servlet is a simple class that has to extend from AppserverIo\Psr\Servlet\Http\HttpServlet. Your application logic can then be implemented by overwriting the service() method or better by overwriting the request specific methods like doGet() if you want to handle a GET request. Create a simple Servlet Let's write a simple example and start with a famous Hello World servlet  namespace Namespace\Module;  use AppserverIo\Psr\Servlet\ServletConfigInterface; use AppserverIo\Psr\Servlet\Http\HttpServlet; use AppserverIo\Psr\Servlet\Http\HttpServletRequestInterface; use AppserverIo\Psr\Servlet\Http\HttpServletResponseInterface;  /**  * This is the famous 'Hello World' as servlet implementation.  *  * @Route(name=""helloWorld"",  * displayName=""I'm the 'Hello World!' servlet"",  * description=""A annotated 'Hello World!' servlet implementation."",  * urlPattern={""/helloWorld.do"", ""/helloWorld.do*""})  */ class HelloWorldServlet extends HttpServlet {    /**  * The text to be rendered.  *  * @var string  */   protected $helloWorld = '';    /**  * Initializes the servlet with the passed configuration.  *  * @param \AppserverIo\Psr\Servlet\ServletConfigInterface $config  * The configuration to initialize the servlet with  *  * @return void  */   public function init(ServletConfigInterface $config)   {      // call parent method     parent::init($config);      // prepare the text here     $this->helloWorld = 'Hello World!';      // @todo Do all the bootstrapping here, because this method will     // be invoked only once when the Servlet Engines starts up   }    /**  * Handles a HTTP GET request.  *  * @param \AppserverIo\Psr\Servlet\Http\HttpServletRequestInterface $servletRequest  * The request instance  * @param \AppserverIo\Psr\Servlet\Http\HttpServletResponseInterface $servletResponse  * The response instance  *  * @return void  * @see \AppserverIo\Psr\Servlet\Http\HttpServlet::doGet()  */   public function doGet(     HttpServletRequestInterface $servletRequest,     HttpServletResponseInterface $servletResponse)   {     $servletResponse->appendBodyStream($this->helloWorld);   } } and save it as /opt/appserver/webapps/myapp/WEB-INF/classes/Namespace/Module/HelloWorldServlet.php. Is that all? Yes! Restart the application server and open http://127.0.0.1:9080/myapp/helloWorld.do in your favorite browser, and ... vóila :) A restart is always required since you changed code in your Servlet, because the Servlet will be loaded and initialized when the the application server starts. Without a restart the application server will not know you had made any changes. Annotations Since one of our main goals is to make configuration as simple as possible, we decided to use annotations wherever possible. As annotations are not supported natively by PHP, we provide annotation support over our lang package. Beside the use of annotations in our application server components, it will also be possible to extend your application with annotations by using the functionality appserver delivers out-of-the-box. If you, for example, think about extending the actions of the controller component in your MVC framework with a @Route annotation, you can do that in the following way  namespace Namespace\Module;  use AppserverIo\Appserver\Lang\Reflection\ReflectionClass; use AppserverIo\Appserver\Lang\Reflection\ReflectionAnnotation;  class Route extends ReflectionAnnotation {    /**  * Returns the value of the name attribute.  *  * @return string The annotations name attribute  */   public function getPattern()   {     return $this->values['pattern'];   } }  class IndexController {    /**  * Default action implementation.  *  * @return void  * @Route(pattern=""/index/index"")  */   public function indexAction()   {     // do something here   } }  // create a reflection class to load the methods annotation $reflectionClass = new ReflectionClass('IndexController'); $reflectionMethod = $reflectionClass->getMethod('indexAction'); $reflectionAnnotation = $reflectionMethod->getAnnotation('Route'); $pattern = $reflectionAnnotation->newInstance()->getPattern(); Most of the annotation implementations provided by our Enterprise Beans PSR and used for Dependency Injection, which will be described below, are based on that annotation implementation. Dependency Injection Dependency Injection(DI) enables developers to write cleaner, reusable and maintainable code with less coupling by injecting necessary instances at runtime, instead of instantiating them in the class itself. Within the application server, each application has its own scope and therefore its own dependency injection container. This prevents your application from fatal errors like Cannot redeclare class .... What can be injected Generally everything! The application server itself doesn't use DI, instead it provides DI as a service for the applications running within it. But, before you can let the DI container inject an instance to your class, you have to register it. Registering a class for DI is pretty simple. To register a class in the DI container the most common way is to use annotations.  namespace Namespace\Modulename  /**  * @Stateless(name=""MyStatefulSessionBean"")  */ class MyStatefulSessionBean { } When the application server starts, it parses the META-INF/classes and WEB-INF/classes folder classes with supported annotations. If a class is found, the class will be registered in the application servers naming directory under the name you specify in the annotations name Attribute, in this example MyStatefulSessionBean. How to inject an instance Basically DI can be a manual process where you inject an instance, needed by another class by passing it to the constructor. Inside the application server, the injection is a process you can't see, it's more a kind of magic that happens behind the scenes. So instead of manually passing the necessary instances to a classes constructor, the DI container will do that for you. You simply have to tell the DI container what you need. Let's have a look at how that is done. Property Injection The first possibility we have is to annotate a class property  namespace Namespace\Module;  use AppserverIo\Psr\Servlet\ServletConfigInterface; use AppserverIo\Psr\Servlet\Http\HttpServlet; use AppserverIo\Psr\Servlet\Http\HttpServletRequestInterface; use AppserverIo\Psr\Servlet\Http\HttpServletResponseInterface;  /**  * This is the famous 'Hello World' as servlet implementation.  */ class HelloWorldServlet extends HttpServlet {    /**  * The SessionBean instance we want to have injected.  *  * @var \Namespace\Modulename\MyStatefulSessionBean  * @EnterpriseBean(name=""MyStatefulSessionBean"")  */   protected $myStatefulSessionBean;    /**  * The text to be rendered.  *  * @var string  */   protected $helloWorld = '';    /**  * Initializes the servlet with the passed configuration.  *  * @param \AppserverIo\Psr\Servlet\ServletConfigInterface $config  * The configuration to initialize the servlet with  *  * @return void  */   public function init(ServletConfigInterface $config)   {      // call parent method     parent::init($config);      // prepare the text here     $this->helloWorld = 'Hello World!';      // @todo Do all the bootstrapping here, because this method will     // be invoked only once when the Servlet Engines starts up   }    /**  * Handles a HTTP GET request.  *  * @param \AppserverIo\Psr\Servlet\Http\HttpServletRequestInterface $servletRequest  * The request instance  * @param \AppserverIo\Psr\Servlet\Http\HttpServletResponseInterface $servletResponse  * The response instance  *  * @return void  * @see \AppserverIo\Psr\Servlet\Http\HttpServlet::doGet()  */   public function doGet(     HttpServletRequestInterface $servletRequest,     HttpServletResponseInterface $servletResponse)   {     $servletResponse->appendBodyStream($this->helloWorld);   } } With the name attribute of the @EnterpriseBean annotation, you have the possibility to specify the name of the bean you registered before by annotating it. A more detailed description about the available annotations is part of the Persistence-Container. Setter Injection The second possibility to inject an instance is setter injection.  namespace Namespace\Module;  use AppserverIo\Psr\Servlet\ServletConfigInterface; use AppserverIo\Psr\Servlet\Http\HttpServlet; use AppserverIo\Psr\Servlet\Http\HttpServletRequestInterface; use AppserverIo\Psr\Servlet\Http\HttpServletResponseInterface;  /**  * This is the famous 'Hello World' as servlet implementation.  */ class HelloWorldServlet extends HttpServlet {    /**  * The SessionBean instance we want to have injected.  *  * @var \Namespace\Modulename\MyStatefulSessionBean  */   protected $myStatefulSessionBean;    /**  * The text to be rendered.  *  * @var string  */   protected $helloWorld = '';    /**  * Initializes the servlet with the passed configuration.  *  * @param \AppserverIo\Psr\Servlet\ServletConfigInterface $config  * The configuration to initialize the servlet with  *  * @return void  */   public function init(ServletConfigInterface $config)   {      // call parent method     parent::init($config);      // prepare the text here     $this->helloWorld = 'Hello World!';      // @todo Do all the bootstrapping here, because this method will     // be invoked only once when the Servlet Engines starts up   }    /**  * Handles a HTTP GET request.  *  * @param \AppserverIo\Psr\Servlet\Http\HttpServletRequestInterface $servletRequest  * The request instance  * @param \AppserverIo\Psr\Servlet\Http\HttpServletResponseInterface $servletResponse  * The response instance  *  * @return void  * @see \AppserverIo\Psr\Servlet\Http\HttpServlet::doGet()  */   public function doGet(     HttpServletRequestInterface $servletRequest,     HttpServletResponseInterface $servletResponse)   {     $servletResponse->appendBodyStream($this->helloWorld);   }    /**  * Injects the session bean by its setter method.  *  * @param \Namespace\Modulename\MyStatefulSessionBean $myStatefulSessionBean  * The instance to inject  * @EnterpriseBean(name=""MyStatefulSessionBean"")  */   public function setMySessionBean(MyStatefulSessionBean $myStatefulSessionBean)   {     $this->myStatefulSessionBean = $myStatefulSessionBean;   } } This method is the preferred one, because it will be refactored not to use reflection in further versions. Persistence-Container As described in the introduction, the application is designed inside a runtime environment, like an application server as appserver.io is. The following example gives you a short introduction on how you can create a stateful session bean and the way you can invoke it's method on the client side. First thing you can to do is create your SessionBean. What is a SessionBean? A SessionBean is basically a plain PHP class. However, you MUST not instantiate it directly, because the application server takes care of its complete lifecycle. Therefore, if you need an instance of a SessionBean, you must ask the application server to give you an instance. The persistence container will give you a proxy to the session bean that allows you to invoke all methods the SessionBean provides, just like you would do with a normal instance. But, the proxy also allows you to call this method over a network as remote method call. Using the persistence container client makes it easy for you, if your SessionBean is on the same application server instance or even on another appserver in your network. This gives you the possibility to distribute the components of your application over your network, which means a great and seamless scalability. You have to tell the persistence container what type of SessionBean you would like to have. This MUST be done by simply adding an annotation to the class doc block. The possible annotations therefore are @Singleton @Stateless @Stateful @Singleton SessionBean A SessionBean with a @Singleton annotation will be created only one time for each application. This means, whenever you'll request an instance, you'll receive the same one. If you set a variable in the SessionBean, it'll be available until you'll overwrite it, or the application server has been restarted. @Stateless SessionBean Contrary to a singleton session bean, a SessionBean with a @Stateless annotation will always be instantiated, when you request it. It has NO state, and is only valid for the time you invoke a method on it. @Stateful SessionBean The @Stateful SessionBean is a compromise between the two other types. It is stateful for the session with the ID you pass to the client, when you request the instance. A stateful SessionBean is useful, for instance, if you want to implement something like a shopping cart. If you declare the shopping cart instance, a class member of your SessionBean makes it persistent for your session lifetime. Example The following example shows you a really simple implementation of a stateful SessionBean providing a counter that'll be raised whenever you call the raiseMe() method.  namespace Namespace\Module;  /**  * This is demo implementation of stateful session bean.  *  * @Stateful  */ class MyStatefulSessionBean {    /**  * Stateful counter that exists as long as your session exists.  *  * @var integer  */   protected $counter = 0;    /**  * Example method that raises the counter by one each time you'll invoke it.  *  * @return integer The raised counter  */   public function raiseMe()   {     return $this->counter++;   } } Save the SessionBean in /opt/appserver/myapp/META-INF/classes/Namespace/Module/MyStatefulSessionBean.php. As described above, you MUST not instantiate it directly. To request an instance of the SessionBean you MUST use the persistence container client. With the lookup() method you'll receive a proxy to your SessionBean, on that you can invoke the methods as you can do with a real instance. To develop our HelloWorldServlet further, let's raise the counter with each request to the servlet. To do this, we have to refactor the doGet() method  namespace Namespace\Module;  use AppserverIo\Psr\Servlet\ServletConfigInterface; use AppserverIo\Psr\Servlet\Http\HttpServlet; use AppserverIo\Psr\Servlet\Http\HttpServletRequestInterface; use AppserverIo\Psr\Servlet\Http\HttpServletResponseInterface;  /**  * This is the famous 'Hello World' as servlet implementation.  */ class HelloWorldServlet extends HttpServlet {    /**  * The text to be rendered.  *  * @var string  */   protected $helloWorld = '';    /**  * We want to have an instance of our stateful session bean injected.  *  * @var \Namespace\Module\MyStatefulSessionBean  */    protected $myStatefulSessionBean;    /**  * Initializes the servlet with the passed configuration.  *  * @param \AppserverIo\Psr\Servlet\ServletConfigInterface $config  * The configuration to initialize the servlet with  *  * @return void  */   public function init(ServletConfigInterface $config)   {      // call parent method     parent::init($config);      // prepare the text here     $this->helloWorld = 'Hello World! (has been invoked %d times)';      // @todo Do all the bootstrapping here, because this method will     // be invoked only once when the Servlet Engines starts up   }    /**  * Handles a HTTP GET request.  *  * @param \AppserverIo\Psr\Servlet\Http\HttpServletRequestInterface $servletRequest  * The request instance  * @param \AppserverIo\Psr\Servlet\Http\HttpServletResponseInterface $servletResponse  * The response instance  *  * @return void  * @see \AppserverIo\Psr\Servlet\Http\HttpServlet::doGet()  */   public function doGet(     HttpServletRequestInterface $servletRequest,     HttpServletResponseInterface $servletResponse)   {      // start a session, because our @Stateful SessionBean     // needs thesession-ID to bound to     $servletRequest->getSession()->start(true);      // render 'Hello World! (has been invoked 1 times)'     // for example - after the first request     $servletResponse->appendBodyStream(       sprintf($this->helloWorld, $this->myStatefulSessionBean->raiseMe())     );   }    /**  * Injects the session bean by its setter method.  *  * @param \Namespace\Modulename\MyStatefulSessionBean $myStatefulSessionBean  * The instance to inject  * @EnterpriseBean(name=""MyStatefulSessionBean"")  */   public function setMySessionBean(MyStatefulSessionBean $myStatefulSessionBean)   {     $this->myStatefulSessionBean = $myStatefulSessionBean;   } } That's it! As we use a @Stateful SessionBean in this example, we MUST start a session so the persistence container can bind the SessionBean. If you would have used a @Singleton SessionBean, the effect would be the practically the same, but it would have been possible to start a SessionBean per session. As a consequence, each Servlet that invokes the raiseMe() method on the singleton SessionBean would raise the counter, meaning possibly every call to the server would raise the counter and not each particular call for a particular session. Message-Queue A Message-Queue provides the possibility to process long running tasks in an encapsulated context. For example, if you want to import a lot of products in your online shop, you can send a message to the Message-Queue, which then will start the import process in the background without preventing the calling process to continue. Using a Message-Queue gives you the power to use threads without taking care of the pitfalls! Got mail! Before we can send a message, we have to specify what should happen, when we receive one! The Message-Queue allows you to specify so called Queues. Each Queue can have a receiver, which must be a so called MessageBean. A MessageBean is very similar to a @Stateless SessionBean, but has only a single point of entry, the onMessage() message method. Whenever a message is sent to the queue, the Message-Queue simply pushes it onto the stack. In the background, a QueueWorker is running in another context and queries the stack for new messages. If a new message is available, it will be pulled from the stack, as a new instance of the receiver, which the Queue is bound to and will be instantiated to pass the message for processing. So let us create a simple Queue with <?xml version=""1.0"" encoding=""UTF-8""?> <message-queues>   <message-queue type=""ImportReceiver"">     <destination>pms/import</destination>   </message-queue> </message-queues> and save this in a file called /opt/appserver/myapp/META-INF/message-queues.xml. The next thing we need is the MessageBean that allows us to receive and process a message in a separate thread.  namespace Namespace\Modulename;  use AppserverIo\Appserver\MessageQueue\Receiver\AbstractReceiver;  /**  * @MessageDriven  */ class ImportReceiver extends AbstractReceiver {    /**  * Will be invoked when a new message for this message bean will be available.  *  * @param \AppserverIo\Psr\MessageQueueProtocol\Message $message A message this message bean is listen for  * @param string $sessionId The session ID  *  * @return void  * @see \AppserverIo\Psr\MessageQueueProtocol\Receiver::onMessage()  */   public function onMessage(Message $message, $sessionId)   {     $data = array_map('str_getcsv', file($message->getMessage()->__toString()));     foreach ($data as $row) {       // write the data to the database here     }   } } Please note: beside the functionality you have to implement with the onMessage() message method, you must also use the annotation @MessageDriven on your class. You MUST annotate the MessageBean in this fashion, in order for the container to know about and register it on startup. Pretty simple for running your import in a separate thread? But what about sending a message to this Queue? Send a message Messages are POPOs (Plain Old PHP Objects) that can be sent over the network. So if you want to send a message, you have to initialize the Message-Queue Client and specify which Queue you want to send the message to. Again, we will extend our Servlet to start an import process on a POST request  namespace Namespace\Module;  use AppserverIo\Psr\Servlet\ServletConfigInterface; use AppserverIo\Psr\Servlet\Http\HttpServlet; use AppserverIo\Psr\Servlet\Http\HttpServletRequestInterface; use AppserverIo\Psr\Servlet\Http\HttpServletResponseInterface; use AppserverIo\Psr\MessageQueueProtocol\Messages\StringMessage;  /**  * This is the famous 'Hello World' as servlet implementation.  */ class HelloWorldServlet extends HttpServlet {    /**  * The name of the request parameter with the name of the CSV  * file containing the data to be imported.  *  * @var string  */   const PARAMETER_FILENAME = 'filename';    /**  * The text to be rendered.  *  * @var string  */   protected $helloWorld = '';    /**  * We want to have an instance of our stateful session bean injected.  *  * @var \Namespace\Module\MyStatefulSessionBean  */    protected $myStatefulSessionBean;    /**  * The application instance.  *  * @var \AppserverIo\Psr\Application\ApplicationInterface  */   protected $application;    /**  * The queue session to send a message with.  *  * @var \AppserverIo\MessageQueueClient\QueueSession  * @Resource(name=""pms/import"")  */   protected $queueSender;    /**  * Initializes the servlet with the passed configuration.  *  * @param \AppserverIo\Psr\Servlet\ServletConfigInterface $config  * The configuration to initialize the servlet with  *  * @return void  */   public function init(ServletConfigInterface $config)   {      // call parent method     parent::init($config);      // prepare the text here     $this->helloWorld = 'Hello World! (has been invoked %d times)';      // @todo Do all the bootstrapping here, because this method will     // be invoked only once when the Servlet Engines starts up   }    /**  * Handles a HTTP GET request.  *  * @param \AppserverIo\Psr\Servlet\Http\HttpServletRequestInterface $servletRequest  * The request instance  * @param \AppserverIo\Psr\Servlet\Http\HttpServletResponseInterface $servletResponse  * The response instance  *  * @return void  * @see \AppserverIo\Psr\Servlet\Http\HttpServlet::doGet()  */   public function doGet(     HttpServletRequestInterface $servletRequest,     HttpServletResponseInterface $servletResponse)   {      // start a session, because our @Stateful SessionBean     // needs thesession-ID to bound to     $servletRequest->getSession()->start(true);      // render 'Hello World! (has been invoked 1 times)'     // for example - after the first request     $servletResponse->appendBodyStream(       sprintf($this->helloWorld, $this->myStatefulSessionBean->raiseMe())     );   }    /**  * Handles a HTTP POST request.  *  * Loads the filename containing the CSV data we want to import as request  * parameter and sends it, wrapped as message, to the queue.  *  * @param \AppserverIo\Psr\Servlet\Http\ServletRequest $servletRequest  * The request instance  * @param \AppserverIo\Psr\Servlet\Http\ServletResponse $servletResponse  * The response instance  *  * @return void  * @see \AppserverIo\Psr\Servlet\Http\HttpServlet::doPost()  * @throws \AppserverIo\Psr\Servlet\ServletException  * Is thrown because the request method is not implemented yet  */   public function doPost(     HttpServletRequestInterface $servletRequest,     HttpServletResponseInterface $servletResponse)   {      // load the filename we have to import     $filename = $servletRequest->getParameter(       HelloWorldServlet::PARAMETER_FILENAME     );      // send the name of the file to import to the message queue     $this->queueSender->send(new StringMessage($filename), false);   }    /**  * Injects the session bean by its setter method.  *  * @param \Namespace\Modulename\MyStatefulSessionBean $myStatefulSessionBean  * The instance to inject  * @EnterpriseBean(name=""MyStatefulSessionBean"")  */   public function setMySessionBean(MyStatefulSessionBean $myStatefulSessionBean)   {     $this->myStatefulSessionBean = $myStatefulSessionBean;   }    /**  * Injects the application instance by its setter method.  *  * @param \AppserverIo\Psr\Application\ApplicationInterface $application  * The application instance to inject  * @Resource(name=""ApplicationInterface"")  */   public function setApplication(ApplicationInterface $application)   {     $this->application = $application;   } } To make the process easier, you can use the @Resource annotation to let the container inject a sender instance, which we can use to send the name of the file containing the data to the Queue. Timer-Service In most of your projects you have the need to schedule tasks to be processed at regular intervals or at a given dates in the future. As PHP itself is a scripting language, it lacks such functionality and developers usually end up using utilities like CRON, when working on Mac OS X or a Linux distribution, which also requires low level access to the server. And, if you are working on Windows, it's even a bit more complicated. There is a tool called Scheduler in Windows, but using it is not as simple to as CRON. Neither of these options are really ""programmable"" and this is where a Timer Service comes into the game and makes scheduling tasks within your appserver application a dream come true.. As CRON does, the Timer Service allows you to schedule processing of your functional tasks at a given date or in regular intervals. In contrast to CRON however, it allows you to schedule processing the methods of your Beans (which remember, are already processed and stored in memory). How can this be done? You might know the answer by now, simply by adding an annotation to your method, as follows  namespace Namespace\Modulename;  /**  * @Singleton(name=""ASingletonProcessor"")  */ class ASingletonProcessor extends \Stackable {    /**  * A dummy method invoked by the container upon timer schedule.  *  * @param TimerInterface $timer The timer instance  *  * @return void  * @Schedule(dayOfMonth=EVERY, month=EVERY, year=EVERY, minute=EVERY, hour=EVERY)  */   public function invokedByTimer(TimerInterface $timer)   {     // do something here every minute   } } The @Schedule annotation on the invokedByTimer() method schedules the invocation of this method every minute without the need to have a CRON configured or running. Such Timers can also be created programatically. If you want to know more about this functionality, have a look at our example. AOP Although in its early days, AOP used to be a buzzword. It has, however, become a development paradigm followed by many of the PHP frameworks out there today. It has been followed for many years already by other languages like Java. Since there is actually no stable PECL extension, nor is AOP part of the PHP core, creating such an environment creates a number of challenges to make applications based on AOP to perform well. Because of its nature, AOP needs to be deeply weaved into your code. Most of the solutions available for PHP solve that by generating so called proxy classes that wrap the original methods and allow to weave the advices before, after or around the original implementation. Since in appserver, we're in a multi-threaded environment and performance is one of our main goals, we were not able to use anyone one of the available solutions. As we also need to generate proxy classes, we decided to do that through an autoloader. And since we have enabled an autoloader as part of the appserver.io distribution, you don't have to configure anything to use AOP in your code. How to add an Advice Integrating AOP in your app can be done in two ways. The first one is to define the pointcuts (and also advices if you like) in the same class they will get woven into, the second method is to separate them. In the following section we want to describe the second approach. Let's say we want to log all GET requests on our HelloWorldServlet without adding any code to the servlet itself. To do this, we first have to create an Aspect class like  namespace Namespace\Module;  /**  * @Aspect  */ class LoggerAspect {    /**  * Pointcut which targets all GET requests for all servlets  *  * @return void  * @Pointcut(""call(\Namespace\Module\*->doGet())"")  */   public function allDoGet()   {   }    /**  * Advice used to log the call to any advised method.  *  * @param \AppserverIo\Doppelgaenger\Interfaces\MethodInvocationInterface $methodInvocation  * Initially invoked method  *  * @return null  * @Before(""pointcut(allIndexActions())"")  */   public function logInfoAdvice(MethodInvocationInterface $methodInvocation)   {      // load class and method name     $className = $methodInvocation->getStructureName();     $methodName = $methodInvocation->getName()      // log the method invocation     $methodInvocation->getContext()       ->getServletRequest()       ->getContext()       ->getInitialContext()       ->getSystemLogger()       ->info(         sprintf('The method %s::%s is about to be called', className, methodName)       );   } } Store the class in /opt/appserver/myapp/META-INF/classes/Namespace/Module/LoggerAspect and restart the application server. To see the the log message, open the console (Linux/Mac OS X) and enter $ tail -f /opt/appserver/var/log/appserver-errors.log Then open http://127.0.0.1:9080/myapp/helloWorld.do in your favorite browser, and have a look at the console. AOP is a very powerful instrument to enrich your application with functionality with ""controlled"" coupling. But as in most cases, great power comes with great responsibility. So, it is really necessary to keep in mind, where your Aspect classes are and what they do. If not, someone will wonder what happens and may need a good amount of time to figure out a problem. To avoid this, we'll provide an XML based advice declaration in future versions. Design-by-Contract Beside AOP, Design-by-Contract is another interesting approach we support out-of-the-box, when you think about the architecture of your software. First introduced by Bertrand Meyer in connection with his design of the Eiffel programming language, Design-by-Contract allows you to define formal, precise and verifiable interface specifications of software components. Design-by-Contract extends the ordinary definition of classes, abstract classes and interfaces by adding pre-/postconditions and invariants referred to as contracts. As Design-by-Contract is, as is AOP, not part of the PHP core, we also use annotations to specify these contracts. What can be done? As stated above, this library aims to bring you the power of Design by Contract, an approach to make your applications more robust and easier to debug. This contains basic features as: Use your basic DocBlock annotations @param and @return as type hints (scalar and class/interface based), including special features like typed arrays using e. g. array<int> (currently only works for collections with complex types) Specify complex method contracts in PHP syntax using @requires as precondition and @ensures as postcondition Specify a state of validity for your classes (e.g. $this->attribute !== null) which will be true all times using @invariant The above (not including type safety) will be inherited by every child structure, strengthening your object hierarchies The library will warn you (exception or log message) on violations of these contracts How does it work? We use a system of autoloading and code creation to ensure our annotations will be enforced. This features a 4 step process: Autoloader : Handles autoloading and will know if contract enforcement is needed for a certain file. If so (and the cache is empty) the call will be directed to the Generator/Parser Combo Parser : Will parse the needed file using Tokenizer and provide information for further handling. Generator : Will use stream filters to create a new file structure definition containing configured enforcement Cache : Will allow us to omit Parser and Generator for future calls, to speed up usage significantly. Usage Supposed, we want to make sure, that the counter in our stateful SessionBean will always be an integer, we can define a simple contract, therefore  namespace Namespace\Module;  /**  * This is demo implementation of stateful session bean.  *  * @Stateful  * @invariant is_integer($this->counter)  */ class MyStatefulSessionBean {    /**  * Stateful counter that exists as long as your session exists.  *  * @var integer  */   protected $counter = 0;    /**  * Example method that raises the counter by one each time you'll invoke it.  *  * @return integer The raised counter  */   public function raiseMe()   {     return $this->counter++;   } } Depending on your configuration, if a method would try to set a string on the counter variable, the Design-by-Contract implementation would either throw an exception or write an error message to our log file under /opt/appserver/var/log/appserver-errors.log. Runtime Environment The appserver.io runtime environment is delivered by the package runtime. This package provides a runtime which is system independent and encloses a thread-safe compiled PHP environment. Besides the most recent PHP 5.5.x version the package comes with following installed extensions: pthreads appserver (contains some replacement functions which behave badly in a multi-threaded environment) Additionally, the PECL extensions XDebug and ev are compiled as shared modules. XDebug is necessary to render detailed code coverage reports when running unit and integration tests. ev will be used to integrate a timer service in one of the future versions. Configuration We believe that the appserver should be highly configurable, so anyone interested can fiddle around with it. Therefore, we provide a central configuration file located at /opt/appserver/etc/appserver.xml. This file contains the complete architecture as an XML structure. So if you want to change used components, introduce new services or scale the system by adding additional servers you can do so with some lines of XML.You might have a look at a basic appserver.xml. The Architecture In this example we have a shortened piece of the appserver.xml file to understand how the architecture is driven by configuration. <?xml version=""1.0"" encoding=""UTF-8""?> <appserver xmlns=""http://www.appserver.io/appserver"">    <!-- define user, group and default umask applied when creating directories and files -->   <params>     <param name=""user"" type=""string"">_www</param>     <param name=""group"" type=""string"">staff</param>     <param name=""umask"" type=""string"">0002</param>   </params>    <containers>      <!-- by default we combine all servers in one container -->     <container name=""combined-appserver"" type=""AppserverIo\Core\GenericContainer"">       <description>         <![CDATA[           This is an example of a webserver container           that handles http requests in common way         ]]>       </description>       <deployment type=""AppserverIo\Appserver\Core\GenericDeployment"" />       <host         name=""localhost""         appBase=""/webapps""         serverAdmin=""info@appserver.io""         serverSoftware=""appserver/1.0.0-beta (mac) PHP/5.5.16"" />          <servers>            <!-- this is the default configuration for the HTTP server -->           <server             name=""http""             type=""\AppserverIo\Server\Servers\MultiThreadedServer""             worker=""\AppserverIo\Server\Workers\ThreadWorker""             socket=""\AppserverIo\Server\Sockets\StreamSocket""             serverContext=""\AppserverIo\Server\Contexts\ServerContext""             requestContext=""\AppserverIo\Server\Contexts\RequestContext""             loggerName=""System"">              <!-- define the parameters to configure the server instance -->             <params>               <param name=""admin"" type=""string"">info@appserver.io</param>               <param name=""software"" type=""string"">                 appserver/1.0.0.0 (darwin) PHP/5.5.16               </param>                 <param name=""transport"" type=""string"">tcp</param>                 <param name=""address"" type=""string"">127.0.0.1</param>                 <param name=""port"" type=""integer"">9080</param>                 <param name=""workerNumber"" type=""integer"">64</param>                 <param name=""workerAcceptMin"" type=""integer"">3</param>                 <param name=""workerAcceptMax"" type=""integer"">8</param>                 <param name=""documentRoot"" type=""string"">webapps</param>                 <param name=""directoryIndex"" type=""string"">                     index.do index.php index.html index.htm                 </param>                 <param name=""keepAliveMax"" type=""integer"">64</param>                 <param name=""keepAliveTimeout"" type=""integer"">5</param>                 <param name=""errorsPageTemplatePath"" type=""string"">                     var/www/errors/error.phtml                 </param>             </params>              <!-- define the environment variables -->             <environmentVariables>               <environmentVariable                 condition="""" definition=""LOGGER_ACCESS=Access"" />             </environmentVariables>              <!-- define the connection handler(s) -->             <connectionHandlers>               <connectionHandler                 type=""\AppserverIo\WebServer\ConnectionHandlers\HttpConnectionHandler"" />             </connectionHandlers>              <!-- define authentication basic/digest -->             <authentications>               <authentication uri=""^\/admin.*"">                 <params>                   <param name=""type"" type=""string"">                     \AppserverIo\Http\Authentication\BasicAuthentication                   </param>                   <param name=""realm"" type=""string"">                     appserver.io Basic Authentication System                   </param>                   <param name=""hash"" type=""string"">                     YXBwc2VydmVyOmFwcHNlcnZlci5pMA==                   </param>                 </params>               </authentication>             </authentications>              <!-- allow access to everything -->             <accesses>               <access type=""allow"">                 <params>                   <param name=""X_REQUEST_URI"" type=""string"">.*</param>                 </params>               </access>             </accesses>              <!-- define a virtual host -->             <virtualHosts>               <virtualHost name=""example.local"">                 <params>                   <param name=""admin"" type=""string"">                     admin@appserver.io                   </param>                   <param name=""documentRoot"" type=""string"">                     /opt/appserver/webapps/example                   </param>                 </params>               </virtualHost>             </virtualHosts>              <!-- the webserver modules we want to load -->             <modules>               <!-- REQUEST_POST hook -->               <module                 type=""\AppserverIo\WebServer\Modules\VirtualHostModule""/>               <module                 type=""\AppserverIo\WebServer\Modules\AuthenticationModule""/>               <module                 type=""\AppserverIo\WebServer\Modules\EnvironmentVariableModule"" />               <module                 type=""\AppserverIo\WebServer\Modules\RewriteModule""/>               <module                 type=""\AppserverIo\WebServer\Modules\DirectoryModule""/>               <module                 type=""\AppserverIo\WebServer\Modules\AccessModule""/>               <module                 type=""\AppserverIo\WebServer\Modules\CoreModule""/>               <module                 type=""\AppserverIo\WebServer\Modules\PhpModule""/>               <module                 type=""\AppserverIo\WebServer\Modules\FastCgiModule""/>               <module                 type=""\AppserverIo\Appserver\ServletEngine\ServletEngine"" />               <!-- RESPONSE_PRE hook -->               <module                 type=""\AppserverIo\WebServer\Modules\DeflateModule""/>               <!-- RESPONSE_POST hook -->               <module                 type=""\AppserverIo\Appserver\Core\Modules\ProfileModule""/>             </modules>              <!-- bound the file extensions to the responsible module -->             <fileHandlers>               <fileHandler name=""servlet"" extension="".do"" />               <fileHandler name=""fastcgi"" extension="".php"">                 <params>                   <param name=""host"" type=""string"">127.0.0.1</param>                   <param name=""port"" type=""integer"">9010</param>                 </params>               </fileHandler>             </fileHandlers>          </server>          <!-- Here, additional servers might be added -->        </servers>     </container>   </containers> </appserver> In the above example you can see three important components of the appserver architecture being used. The container, server and a protocol (if you did not read about our basic architecture you should now). We are basically building up a container which holds a server using the websocket protocol to handle incoming requests. Container Configuration A container is created by using the container element within the containers collection of the appserver document element. Two parts of the XML create a specific container, in the system on startup: The type attribute states a class extending our AbstractContainerThread, which defines a container to be a specific type of container. The deployment element states a class containing preparations for starting up the container. It can be considered a hook, which will be invoked before the container will be available. That is basically everything there is to do to create a new container. To make use of it, it has to contain at least one server within its servers collection. Server Configuration The servers contained by our container can also be loosely drafted by the XML configuration and will be instantiated on container boot-up. To enable a server you have to mention three basic attributes of the element: The type specifies a class implementing the ServerInterface, which implements the basic behaviour of the server on receiving a connection and how it will handle it. The socket attribute specifies the type of socket the server should open. E.g. a stream or asynchronous socket The serverContext specifies the server's source of configuration and container for runtime information e.g. ServerVariables like DOCUMENT_ROOT So we have our specific server which will open a certain port and operate in a defined context. But to make the server handle a certain type of request, it needs to know which protocol to speak. This can be done using the connectionHandler element. Certain server wrappers can handle certain protocols. Therefore, we can use the protocols which a server wrapper, e.g. WebServer supports in form of connection handlers. WebServer offers a HttpConnectionHandler class. By using it, the server is able to understand the HTTP protocol. Application Configuration Beside the Container and Server configuration, it is also possible to configure an application. Each application can have it's own autoloaders and managers. By default, each application found in the application servers webapp directory /opt/appserver/webapps will be initialized with the defaults, defined in /opt/appserver/etc/appserver/conf.d/context.xml <?xml version=""1.0"" encoding=""UTF-8""?> <context   name=""globalBaseContext""   factory=""AppserverIo\Appserver\Application\ApplicationFactory""   type=""AppserverIo\Appserver\Application\Application""   xmlns=""http://www.appserver.io/appserver"">    <!--   <params>     <param name=""cache.dir"" type=""string"">/cache</param>     <param name=""session.dir"" type=""string"">/session</param>   </params>   -->    <classLoaders>      <!-- necessary to load files from the vendor directory of your application -->     <classLoader       name=""ComposerClassLoader""       interface=""ClassLoaderInterface""       type=""AppserverIo\Appserver\Core\ComposerClassLoader""       factory=""AppserverIo\Appserver\Core\ComposerClassLoaderFactory"">       <directories>         <directory>/vendor</directory>       </directories>     </classLoader>      <!-- necessary to load files from WEB-INF/classes and META-INF/classes, also -->     <!-- provides the functionality for Design-by-Contract and AOP               -->     <classLoader       name=""DgClassLoader""       interface=""ClassLoaderInterface""       type=""AppserverIo\Appserver\Core\DgClassLoader""       factory=""AppserverIo\Appserver\Core\DgClassLoaderFactory"">       <params>         <param name=""environment"" type=""string"">production</param>         <param name=""enforcementLevel"" type=""integer"">7</param>         <param name=""typeSafety"" type=""boolean"">1</param>         <param name=""processing"" type=""string"">logging</param>       </params>       <directories>         <directory enforced=""true"">/common/classes</directory>         <directory enforced=""true"">/WEB-INF/classes</directory>         <directory enforced=""true"">/META-INF/classes</directory>       </directories>     </classLoader>   </classLoaders>    <managers>      <!-- provides object management services -->     <manager       name=""ObjectManagerInterface""       type=""AppserverIo\Appserver\DependencyInjectionContainer\ObjectManager""       factory=""AppserverIo\Appserver\DependencyInjectionContainer\ObjectManagerFactory"">       <descriptors>         <descriptor>AppserverIo\Appserver\DependencyInjectionContainer\Description\ServletDescriptor</descriptor>         <descriptor>AppserverIo\Appserver\DependencyInjectionContainer\Description\SingletonSessionBeanDescriptor</descriptor>         <descriptor>AppserverIo\Appserver\DependencyInjectionContainer\Description\StatefulSessionBeanDescriptor</descriptor>         <descriptor>AppserverIo\Appserver\DependencyInjectionContainer\Description\StatelessSessionBeanDescriptor</descriptor>         <descriptor>AppserverIo\Appserver\DependencyInjectionContainer\Description\MessageDrivenBeanDescriptor</descriptor>       </descriptors>     </manager>      <!-- provides services necessary for DI -->     <manager       name=""ProviderInterface""       type=""AppserverIo\Appserver\DependencyInjectionContainer\Provider""       factory=""AppserverIo\Appserver\DependencyInjectionContainer\ProviderFactory""/>      <!-- provides the services necessary to handle Session- and MessageBeans -->     <manager       name=""BeanContextInterface""       type=""AppserverIo\Appserver\PersistenceContainer\BeanManager""       factory=""AppserverIo\Appserver\PersistenceContainer\BeanManagerFactory"">         <!-- params>           <param name=""lifetime"" type=""integer"">1440</param>           <param name=""garbageCollectionProbability"" type=""float"">0.1</param>         </params -->         <directories>           <directory>/META-INF/classes</directory>         </directories>       </manager>        <!-- provides the functionality to define and run a Queue -->       <manager         name=""QueueContextInterface""         type=""AppserverIo\Appserver\MessageQueue\QueueManager""         factory=""AppserverIo\Appserver\MessageQueue\QueueManagerFactory""/>        <!-- provides the functionality to define Servlets handling HTTP request -->       <manager         name=""ServletContextInterface""         type=""AppserverIo\Appserver\ServletEngine\ServletManager""         factory=""AppserverIo\Appserver\ServletEngine\ServletManagerFactory"">         <directories>           <directory>/WEB-INF/classes</directory>         </directories>       </manager>        <!-- provides functionality to handle HTTP sessions -->       <manager         name=""SessionManagerInterface""         type=""AppserverIo\Appserver\ServletEngine\StandardSessionManager""         factory=""AppserverIo\Appserver\ServletEngine\StandardSessionManagerFactory""/>        <!-- provides functionality to handle Timers -->       <manager         name=""TimerServiceContextInterface""         type=""AppserverIo\Appserver\PersistenceContainer\TimerServiceRegistry""         factory=""AppserverIo\Appserver\PersistenceContainer\TimerServiceRegistryFactory""/>        <!-- provides functionality to handle HTTP basic/digest authentication -->       <manager         name=""AuthenticationManagerInterface""         type=""AppserverIo\Appserver\ServletEngine\Authentication\StandardAuthenticationManager""         factory=""AppserverIo\Appserver\ServletEngine\Authentication\StandardAuthenticationManagerFactory""/>        <!-- provides functionality to preload Advices found in WEB-INF/classes or META-INF/classes -->       <manager         name=""AspectManagerInterface""         type=""AppserverIo\Appserver\AspectContainer\AspectManager""         factory=""AppserverIo\Appserver\AspectContainer\AspectManagerFactory""/>   </managers> </context> If your application doesn't use any of the defined class loaders or managers or you want to implement your own managers, you can define them in a context.xml file, which you must include with your application. Your own customized file, has to be stored in META-INF/context.xml. When the application server starts, this file will be parsed and your application will be initialized with the class loaders and managers you have defined there. Please be aware: the default class loaders and managers provide most of the functionality described above. So if you remove them from the context.xml, you have to expect unexpected and incorrect behaviour. Module Configuration The web server comes with a package of default modules. The functionality that allows us to configure a virtual host or environment variables, for example, is also provided by two very important modules. Rewrite Module The rewrite module can be used according to the \AppserverIo\WebServer\Interfaces\HttpModuleInterface interface. It needs an initial call of the init method and will process any request offered to the process method. The module is best used within the webserver project, as it offers all the needed infrastructure. Rules Most important part of the rewrite module is the way in which it can perform rewrites. All rewrites are based on rewrite rules which consist of three important parts: condition string : Conditions, which have to be met in order for the rule to take effect. This is explained in more detail under condition syntax target string : The target to rewrite the requested URI to. Within this string you can use backreferences similar to the Apache mod_rewrite module with the difference that you have to use the $ syntax (instead of the $/%/%{} syntax of Apache). Matching rule conditions, which you specifically pick out via regex are also part of available back-references as well as server and environment variables. Simple example : A condition like (.+)@$X_REQUEST_URI would produce a back reference $1 with the value /index for a requested URI /index. The target string $1/welcome.html would therefore result in a rewrite to /index/welcome.html flag string : You can use flags similar to mod_rewrite which are used to make rules react in a certain way or influence further processing. Learn more in the section on flage Condition Syntax The Syntax of possible conditions is roughly based on the possibilities of Apache's RewriteCondition and RewriteRule combined. To make use of such a combination you can chain conditions together using the {OR} symbol for OR-combined, and the {AND} symbol for AND-combined conditions. Please be aware that AND takes precedence over OR! Conditions can either be PCRE regex or certain fixed expressions. So a condition string of ([A-Z]+\.txt){OR}^/([0-9]+){AND}-f would match only real files (through -f) which either begin with numbers or end with capital letters and the extension .txt. As you might have noticed: Backslashes do not have to be escaped. You might also be curious of the -f condition. This is a direct copy of Apaches -f RewriteCondition. We also support several other expressions to regex based conditions which are: < : Is the operand lexically preceding <COMPARE_STRING>? > : Is the operand lexically following <COMPARE_STRING>? = : Is the operand lexically equal to <COMPARE_STRING>? -d : Is the operand a directory? -f : Is the operand a real file? -s : Is the operand a real file of a size greater than 0? -l : Is the operand a symbolic link? -x : Is the operand an executable file? If you are wondering what the operand might be: it is whatever you want it to be! You can specify any operand you like using the @ symbol. All conditions within a rule will use the next operand to their right and if none is given the requested URI. For example: ([A-Z]+\.txt){OR}^/([0-9]+) Will take the requested URI for both conditions (note the {OR} symbol) ([A-Z]+\.txt){OR}^/([0-9]+)@$DOCUMENT_ROOT Will test both conditions against the document root ([A-Z]+\.txt)@$DOCUMENT_ROOT{OR}^/([0-9]+) Will only test the first one against the document root and the second against the requested URI You might have noted the $ symbol before DOCUMENT_ROOT and remembered it from the back-reference syntax. That's because all Apache common server vars can be explicitly used as back-references too! That does not work for you? Need the exact opposite? No problem! All conditions, whether regex or expression based can be negated using the ! symbol in front of them! So !^([0-9]+) would match all strings which do NOT begin with a number and !-d would match all non-directories. Flags Flags are used to further influence processing. You can specify as many flags per rewrite as you like, but be aware of their impact! Syntax for several flags is simple: just separate them with a , symbol. Flags which might accept a parameter can be assigned one by using the = symbol. Currently supported flags are: L : As rules are normally processed one after the other, the L flag will make the flagged rule the last one processed if matched. R : If this flag is set we will redirect the client to the URL specified in the target string. If this is just a URI, we will redirect to the same host. You might also specify a custom status code between 300 and 399 to indicate the reason for/kind of the redirect. Default is 301 aka permanent M : Stands for map. Using this flag you can specify an external source (have a look at the Injector classes of the WebServer project) of a target map. With M=<MY_BACKREFERENCE> you can specify what the map's index has to be to match. This matching is done only if the rewrite condition matches and will behave as another condition Virtual-Host Module The module can be used according to the \AppserverIo\WebServer\Interfaces\HttpModuleInterface interface. It needs an initial call of the init method and will process any request offered to the process method. The module is best used within the webserver project as it offers all needed infrastructure. If you need to configure a virtual host, it should look like the following example, which enables a Magento installation under http://magento.dev:9080. <virtualHosts>   <virtualHost name=""magento.dev"">     <params>         <param name=""admin"" type=""string"">info@appserver.io</param>         <param name=""documentRoot"" type=""string"">webapps/magento</param>     </params>     <rewrites>         <rewrite condition=""-d{OR}-f{OR}-l"" target="""" flag=""L"" />         <rewrite condition=""(.*)"" target=""index.php/$1"" flag=""L"" />     </rewrites>     <accesses>         <access type=""allow"">             <params>                 <param name=""X_REQUEST_URI"" type=""string"">                   ^\/([^\/]+\/)?(media|skin|js|index\.php).*                 </param>             </params>         </access>     </accesses>   </virtualHost> </virtualHosts> Configuration Defaults You will see that we provide basic front-end implementations of services the appserver runtime provides. If you want to use these services yourself, you should have a look into the code of our apps and read about app development. You might be curious about the different ports we use. Per default, the appserver will open several ports at which it's services are available. As we do not want to block (or be blocked by) other services, we use ports in a higher range. As a default, we use the following ports: WebContainer HTTP Server: 9080 HTTPS Server: 9443 Persistence-MQ-Container Persistence-Container: 8585 Message-Queue: 8587 You can change the default port mapping by using the configuration file. If you are interested in our naming, you can see our container->server pattern, you might want to have a deeper look into our architecture Deployment The deploy directory in the appserver.io Application Server distribution is the location end users can place their deployment content (e. g. phar files) to have it deployed into the server runtime. Users, particularly those running production systems, are encouraged to use the appserver.io AS management APIs to upload and deploy deployment content. Deployment Modes The scanner actually only supports a manual deployment mode, which means that you have to restart the server to process deployment of your content. In this mode, the scanner will not attempt to directly monitor the deployment content and decide if or when the end user wishes the content to be deployed or undeployed. Instead, the scanner relies on a system of marker files, with the user's addition or removal of a marker file serving as a sort of command telling the scanner to deploy, undeploy or redeploy content. It is also possible to copy your unzipped content directly into the webapps folder. After restarting the webserver your content will then be deployed without having any impact on the deployment scanner, because only zipped (.phar) content will be recognized. Marker Files The marker files always have the same name as the deployment content to which they relate, but with an additional file suffix appended. For example, the marker file to indicate the example.phar file should be deployed is named example.phar.dodeploy. Different marker file suffixes have different meanings. The relevant marker file types are: Marker Description .dodeploy Placed by the user to indicate that the given content should be deployed or redeployed into the runtime. .deploying Placed by the deployment scanner service to indicate that it has noticed a .dodeploy file and is in the process of deploying the content. This marker file will be deleted, when the deployment process completes. .deployed Placed by the deployment scanner service to indicate that the given content has been deployed into the runtime. If an end user deletes this file and no other marker is available, the content will be undeployed. .failed Placed by the deployment scanner service to indicate that the given content failed to deploy into the runtime. The content of the file will include some information about the cause of the failure. Note that, removing this file will make the deployment eligible for deployment again. .undeploying Placed by the deployment scanner service to indicate that it has noticed a .deployed file has been deleted and the content is being undeployed. This marker file will be deleted, when the undeployment process completes. .undeployed Placed by the deployment scanner service to indicate that the given content has been undeployed from the runtime. If this marker file is deleted by the user, it has no impact. Basic workflows All examples assume variable $AS points to the root of the appserver.io AS distribution. Windows users: the examples below use UNIX shell commands; see the Windows Notes below. Add new zipped (.phar) content and deploy it: $ cp target/example.phar $AS/deploy $ touch $AS/deploy/example.phar.dodeploy  Undeploy currently deployed zipped (.phar) content: $ rm $AS/deploy/example.phar.deployed  Replace currently deployed zipped (.phar) content with a new version and redeploy it: $ cp target/example.phar $AS/deploy $ mv $AS/deploy/example.phar.deployed $AS/deploy/example.phar.dodeploy  Windows Notes The above examples use UNIX shell commands. Windows equivalents are: UNIX Windows cp src dest xcopy /y src dest cp -r src dest xcopy /e /s /y src dest rm afile del afile touch afile echo >> afile Note that the behavior of touch and echo are different, but the differences are not relevant to the usages. Uninstall Before uninstalling, you should stop all the services, which are still running (rpm-based packages will see to that themselves), otherwise there might be problems with existing pid-files on Linux and Mac for the next time you install it. To uninstall the appserver on Linux, you might rely on your package management system. On Windows you can use the normal uninstall process provided by the operating system. Under Mac OS X you can simply delete the /opt/appserver folder that containers all installed files. External Links All about appserver.io at appserver.io Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/appserver-io/appserver"	"A multithreaded application server for PHP, written in PHP."	"true"
"Infrastructure"	"php-pm"	"https://github.com/php-pm/php-pm"	"A process manager, supercharger and load balancer for PHP applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2338"	"149"	"121"	"GitHub - php-pm/php-pm: PPM is a process manager, supercharger and load balancer for PHP applications. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 149 Star 2,338 Fork 121 php-pm/php-pm Code Issues 11 Pull requests 2 Pulse Graphs PPM is a process manager, supercharger and load balancer for PHP applications. 184 commits 2 branches 0 releases 28 contributors PHP 100.0% PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master revert-113-l51_buffering_logger Nothing to show Nothing to show New pull request Latest commit 19164bd May 4, 2016 Fiskie committed with marcj Account for port in nginx config example (#119) … $host does not include the :port, whereas $http_host does. This broke a thing of mine that depended on HTTP_HOST until I made this change. Permalink Failed to load latest commit information. Bootstraps Added getStaticDirectory to BootstrapInterface Apr 30, 2016 Bridges Fix indents May 1, 2016 Commands Autosearch for php-cgi path. Fixed #79 May 3, 2016 React Store sock files to <cwd>/.ppm/run instead of creating always new tmp… Apr 18, 2016 Tests renamed tests to Tests Apr 4, 2016 bin Fixed some balancing issues with high traffic and added many other st… Mar 17, 2016 .gitignore Removed idea files Apr 4, 2016 .travis.yml drop php 5.5 support :> Apr 4, 2016 Client.php Allow initialization of controller port in Client (#133) May 4, 2016 LICENSE Added MIT license Oct 29, 2015 ProcessCommunicationTrait.php typos and added better debugging section in readme Mar 21, 2016 ProcessManager.php Autosearch for php-cgi path. Fixed #79 May 3, 2016 ProcessSlave.php Revert ""Use a custom BufferingLogger class"" (#117) Apr 26, 2016 README.md Account for port in nginx config example (#119) May 4, 2016 Utils.php Fixed memory leak in master. Apr 1, 2016 composer.json Define min php version in composer May 1, 2016 composer.lock Replace X-PHP-PM-Remote-IP always with the remoteAddress of the maste… Apr 4, 2016 functions.php Added better logging for failed bootstraps or fatal errors, added als… Mar 28, 2016 phpunit.xml.dist Replace X-PHP-PM-Remote-IP always with the remoteAddress of the maste… Apr 4, 2016 README.md PPM - PHP Process Manager PHP-PM is a process manager, supercharger and load balancer for PHP applications. It's based on ReactPHP and works best with applications that use request-response frameworks like Symfony's HTTPKernel. The approach of this is to kill the expensive bootstrap of PHP (declaring symbols, loading/parsing files) and the bootstrap of feature-rich frameworks. See Performance section for a quick hint. PHP-PM basically spawns several PHP instances as worker bootstraping your application (eg. the whole Symfony Kernel) and hold it in the memory to be prepared for every incoming request: This is why PHP-PM makes your application so fast. More information can be found in the article: Bring High Performance Into Your PHP App (with ReactPHP) Features Performance boost up to 15x (compared to PHP-FPM, Symfony applications). Integrated load balancer. Hot-Code reload (when PHP files change). Static file serving for easy development procedures. Support for HttpKernel (Symfony/Laravel), Drupal (experimental), Zend (experimental). Why using PPM as development server instead of vagrant, nginx or apache? No hassle with file permissions (www-data vs local user ids). No painful slow virtual-box file sync. Faster response times of your PHP app. No fighting with vagrant / virtual machine settings. Checkout a new project, run ppm start - done. (if configured with ppm config) No hassle with domain names (/etc/hosts), just use different ports for your app without root access. Badge all the things Does your app/library support PPM? Show it! [![PPM Compatible](https://raw.githubusercontent.com/php-pm/ppm-badge/master/ppm-badge.png)](https://github.com/php-pm/php-pm)  Installation To get PHP-PM you need beside the php binary also php-cgi, which comes often with php. If not available try to install it: Debian/Ubuntu (https://www.digitalocean.com/community/tutorials/how-to-upgrade-to-php-7-on-ubuntu-14-04) apt-get install php7.0-cgi By default cgi bin is in /usr/lib/cgi-bin/php, so you need to run: sudo ln -s /usr/lib/cgi-bin/php /usr/bin/php7.0-cgi Red Hat/Centos (RHEL-7, 6) (https://webtatic.com/packages/php70/) install Webtatic first yum install php70w-cli Mac OS X - Homebrew (https://github.com/Homebrew/homebrew-php) brew install php70 Mac OS X - Macports port install php70-cgi By default, PPM looks for a binary named php-cgi. If your PHP installation uses a different binary name, you can specify the full path to that binary with the php-cgi configuration option (for example: ppm config --cgi-path=/opt/local/bin/php-cgi70). On Ubuntu for example per default pcntl_* functions are disabled. If you get Warning: pcntl_signal() has been disabled for security reasons, you should activate these functions: Open /etc/php5/cgi/php.ini, find line disable_functions = pcntl_alarm,pcntl_fork, ... and place a ; in front of it: ; This directive allows you to disable certain functions for security reasons. ; It receives a comma-delimited list of function names. ; http://php.net/disable-functions ;disable_functions = pcntl_alarm,pcntl_fork, ...  Global $ git clone git@github.com:php-pm/php-pm.git $ cd php-pm $ composer install $ ln -s `pwd`/bin/ppm /usr/local/bin/ppm $ ppm --help Per project # change minimum-stability to dev in your composer.json (until we have a version tagged): ""minimum-stability"": ""dev"" composer require php-pm/php-pm:dev-master composer require php-pm/httpkernel-adapter:dev-master #if you have httpkernel (laravel, symfony) ./vendor/bin/ppm config --bootstrap=symfony #places a ppm.json in your directory ./vendor/bin/ppm start #reads ppm.json and starts the server like you want Once configured (composer and ppm.json) you can start your app on your development machine or server instantly: composer install ./vendor/bin/ppm start When debug is enabled, PHP-PM detects file changes and restarts its worker automatically. Performance To get the maximum performance you should usually use --app-env=prod with disabled debug --debug=0. Also make sure xdebug is disabled. Try with different amount of workers. Usually a 10% over your cpu core count is good. Example: If you have 8 real cores (excl. hyper-threading) use --workers=9. If your applications supports it, try enabled concurrent requests per worker: --concurrent-requests=1. To get even more performance (for static file serving or for rather fast applications) try a different event loop (see https://github.com/reactphp/event-loop). Debugging If you get strange issues in your application and you have no idea where they are coming from try using only one worker --workers=1 and enable -v or -vv. When debugging you should use xdebug as you're used to. If you set a break point and hold the application, then only one worker is stopped until you release the break point. All other workers are fully functional. Note for XDebug and PHPStorm: Since php-pm uses at least two processes, there are two xdebug instances as well. PHPStorm is per default configured to only accept one connection at a time. You need to increase that. You won't get xdebug working with your application if you don't increase that count. In all workers the STDOUT is redirected to the connected client. So take care, var_dump, echo are not displayed on the console. STDERR is not redirected to the client, but to the console. So, for very simple debugging you could use error_log('hi') and you'll see it on the console. Per default exceptions and errors are only displayed on the console, prettified with Symfony/Debug component. Adapter HttpKernel for Symfony/Laravel - https://github.com/php-pm/php-pm-httpkernel Drupal - https://github.com/php-pm/php-pm-drupal Zend - https://github.com/php-pm/php-pm-zend Command Start cd ~/my/path/to/symfony/ ppm start  ppm start ~/my/path/to/symfony/ --bootstrap=Symfony --bridge=HttpKernel  cd ~/my/path/to/symfony/ ./vendor/bin/ppm start Symfony cd my-project composer require php-pm/httpkernel-adapter:dev-master $ ./bin/ppm start --bootstrap=symfony Laravel cd my-project composer require php-pm/httpkernel-adapter:dev-master $ ./vendor/bin/ppm start --bootstrap=laravel Drupal cd my-project composer require php-pm/httpkernel-adapter:dev-master $ ./bin/ppm start --bootstrap=drupal Zend cd my-project composer require php-pm/zend-adapter:dev-master $ ./bin/ppm start --bridge=Zf2 --bootstrap=Zf2 Wordpress For all Wordpress lovers out there: PPM is not going to work with Wordpress due to the lack of request-response abstraction. We highly doubt that Wordpress is ever going to be compatible because its architecture is written in a way that makes it currently impossible to serve multiple requests in one application process. Each worker starts its own HTTP Server which listens on port 5501, 5502, 5503 etc. Range is 5501 -> 5500+<workersCount>. You can integrate those workers directly in a load balancer like NGINX or use http://127.0.0.1:8080 directly. Performance (requests/s) 6x4GHz Intel i7, 16GB RAM. 10 concurrent, 1000 total request: ab -c 10 -n 1000 http://127.0.0.1:8080/ Symfony, CMS application ppm start --bootstrap=symfony --app-env=prod --logging=0 --debug=0 --workers=20 http://jarves.io PHP Version Dynamic at Jarves Static file 7.0.3, StreamSelectLoop 2387,67 3944,52 5.6.18, StreamSelectLoop 1663,56 2636,09 5.6.18, LibEventLoop 1811,76 3441,72 Laravel, example package https://github.com/bestmomo/laravel5-example ppm start --bootstrap=laravel --app-env=prod --debug=0 --logging=0 --workers=20 Issues Not production ready yet, as it's in development and still needs some work in the bootstrap classes of supported frameworks. Some people are currently trying to use it in production. Stay tuned :) Memory leaks, memory leaks and memory leaks. You will also find leaks in your application. :) But no big issue since workers restart automatically. Does not work with ExtEventLoop. (So don't install php70-event, but you can try LibEventLoop php56-libevent) Drupal and Zend is very experimental and not fully working. Try using https://github.com/php-pm/php-pm-drupal. Laravel's debugger isn't working perfectly yet since it's still needed to reset some stuff after each request. Streamed responses are not streamed yet File upload is experimental No windows support due to signal handling Doesn't fully implement HTTP/1.1, but reactphp/http is working on it. Please help us fix these issues by creating pull requests. :) Setup 1. Use NGINX Example config for NGINX: server {     root /path/to/symfony/web/;     server_name servername.com;     location / {         try_files $uri @ppm;     }     location @ppm {         proxy_set_header Host $http_host;         proxy_set_header X-Real-IP $remote_addr;         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;         proxy_set_header X-Forwarded-Proto $scheme;         proxy_pass http://127.0.0.1:8080;     } } To get the real remote IP in your Symfony application for example, don't forget to add ppm (default 127.0.0.1) as trusted reverse proxy. # app/config/config.yml # ... framework:     trusted_proxies:  [127.0.0.1] More information at http://symfony.com/doc/current/cookbook/request/load_balancer_reverse_proxy.html. Setup 2. Use PPM directly Since PPM has also a static file server (which isn't quite as fast as nginx, but works for basic usage, see Performance section), you can use PPM directly on your server or local. Do not run ppm as root (to get port like 80 working), as it does not set a new UID of the current process and would run all the time as root, which is highly unrecommended. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/php-pm/php-pm"	"A process manager, supercharger and load balancer for PHP applications."	"true"
"PHP Magazines"	"php[architect]"	"https://www.phparch.com/magazine/"	"A monthly magazine dedicated to PHP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"php[architect] Magazine «  php[architect] – Magazine, Training, Books, Conferences php[architect] Home Magazine Subscribe Advertise July 2016 June 2016 Past Issues Write Editorial Calendar Editorial Guidelines Books Building Exceptional Sites with WordPress & Thesis Integrating Web Services with OAuth and PHP Zend Framework 1 to 2 Migration Guide XML Parsing with PHP Zend PHP 5 Certification Study Guide Functional Programming in PHP Mastering the SPL Library All Books Write for Us Training Custom PHP Training Our Training Program Meet our Trainers Conferences php[cruise] php[world] php[tek] Swag Laravel ElePHPant PHPWomen ElePHPant All Swag Register Login View Basket Search php[architect] Magazine Published monthly, php[architect] magazine is the journal for PHP professionals. Each month focuses on an important topic that PHP developers face every day, with articles written by authors from the PHP community. Each issue is packed with features that we carefully curate to make sure the information is current and relevant. Whether you’re a seasoned veteran or just starting out in your career, stay up to date with new development methodologies, testing tools, security practices, and more by subscribing today. View Subscription Options What Our Subscribers are Saying Subscribed to @phparch an hour ago and I already have at least 3 things to bring back to work. Worth every penny! — Josh Pennington (@joshpennington) December 9, 2015 See more tweets from our subscribers. July 2016 Magazine Issue Digital · $6Subscribe · starts at $49     Previous Issues June May April March   View All Past Issues »   Accessing backend system… We're sorry, but your session has expired due to inactivity. Please use your browser to refresh this page and log in to our system again. Message goes here. Message goes here. Message goes here. About us What we do Contact us Write for us FAQ Logo Download Policies & legal Customer support Privacy policy Refund policy Code of Conduct Terms & Conditions Online Store Magazine Training courses Books Special sections php[tek] Conference php[world] Conference Web Summit Series php[architect] Follow us on: Copyright © 2002-2016 musketeers.me, LLC. — All amounts in USD  "	"null"	"null"	"A monthly magazine dedicated to PHP."	"true"
