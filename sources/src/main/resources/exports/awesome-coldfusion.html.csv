"category"	"name"	"url"	"description"	"star"	"stackOverflow"	"stackOverflowUrl"	"license"	"licenseUrl"	"site"	"userGuide"	"newStars"	"newWatchs"	"newForks"	"pageText"	"newStackOverflow"	"github"	"allText"	"isExist"
"Engines"	"Adobe ColdFusion"	"http://www.adobe.com/products/coldfusion-family.html"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Adobe ColdFusion family For the complete experience, please enable JavaScript in your browser. Thank you! Products How to Buy Learn & Support About Adobe Creative Cloud Photoshop Illustrator InDesign Premiere Pro After Effects Lightroom See all See plans for: businesses photographers students Document Cloud Acrobat DC Sign Stock Elements Marketing Cloud Analytics Audience Manager Campaign Experience Manager Media Optimizer Target See all Adobe for enterprise Acrobat Reader DC Adobe Flash Player Adobe AIR Adobe Shockwave Player All products Creative Cloud Individuals Photographers Students and Teachers Business Schools and Universities Marketing Cloud Document Cloud Stock Elements All products Get Support Find answers quickly. Contact us if you need to. Start now > Learn the apps Get started or learn new ways to work. Learn now > Ask the community Post questions and get answers from experts. Start now > About Us Careers At Adobe Investor Relations Privacy  |  Security Corporate Responsibility Customer Showcase Events Contact Us News 6/21/2016 Adobe Reports Record Revenue 6/21/2016 Adobe Creative Cloud Innovations Take Creativity from Blank Page to Brilliant 6/20/2016 Adobe Positioned as a Leader in Gartner Magic Quadrant for Mobile App Development Platforms 6/15/2016 Adobe Digital Price Index Shows Continued Deflation in the U.S. Economy Adobe ColdFusion family (2016 release) Overview Buying Guide Learn & Support Free Trial Buy now Rapidly build and deploy web and mobile apps. The Adobe ColdFusion application server offers you a single platform for building and deploying web and mobile applications. Upgrade to ColdFusion Enterprise Edition for just Loading... Upgrade now Meet the Adobe ColdFusion family (2016 release)  See how you can work more productively with a host of powerful functionalities. Benefit from performance improvements to run existing code as much as 30% faster. And now, use CFML for your scripting needs via a command-line interface.   Adobe ColdFusion Enterprise (2016 release) Get a tried and tested application server that simplifies complex coding tasks. Rapidly develop robust, scalable, secure applications. Use the all-new API Manager to implement your API strategy faster, and get unprecedented control over PDF generation and manipulation Learn more ›   Adobe ColdFusion Standard (2016 release) Use a single platform to rapidly build and deploy web and mobile applications. Leverage unique capabilities for end-to-end mobile application development. Generate high-quality PDFs, and make your server more secure with default server lockdown. Learn more ›   Adobe ColdFusion Builder (2016 release) Build and deploy web and mobile applications. Boost your productivity with built-in features that aid every aspect of the development workflow. Preserve code integrity with smart features that help identify and reduce errors, vulnerabilities and security breaches. Learn more ›   Adobe ColdFusion on Amazon Web Services   Enjoy an affordable way to access powerful yet easy-to-use features for building high-performing, enterprise-ready applications that scale dynamically to meet your business needs. Learn more ›     Interested in a free trial of ColdFusion?   Adobe ColdFusion Developer Edition This free, fully functional version of ColdFusion is for local host development of applications that will be deployed on either standard or enterprise servers — and that can be simultaneously accessed from only two remote IP addresses. Try now ›   Adobe ColdFusion Express Edition This new deployment option enables you to quickly set up a development or demonstration instance of ColdFusion without running a full installer. It’s ideal for developers who want to run a ColdFusion programming instance for testing and debugging purposes. Download Win32, Win64, Linux32, Linux64, Mac, War32, War64 files.   Find third-party technologies and hosting partners. Third-party technologies | Hosting partners ColdFusion news and insights Stay up to date via the ColdFusion blog. Read the blog › Join the conversation on Facebook. ColdFusion on Facebook › Join the conversation on Twitter. ColdFusion on Twitter › Datasheets and White Papers Lockdown Guide | Migration Guide | Server Performance White Paper | API Manager Performance White Paper | Security Audit Report ColdFusion Enterprise Rapidly build highly scalable websites and mobile applications. Loading... Buy now Try › ColdFusion Standard Code and deploy robust single-server websites and applications. Loading... Buy now Try › ColdFusion Builder Professional tools for serious developers.   Learn more › Questions: Let's chat Change region Products Downloads Learn & Support Company Copyright © 2016 Adobe Systems Incorporated. All rights reserved. Privacy (UPDATED) Terms of Use Cookies AdChoices Choose your region Selecting a region changes the language and/or content on Adobe.com. Americas Brasil Canada - English Canada - Français Latinoamérica México United States Europe, Middle East and Africa Africa - English België - Nederlands Belgique - Français Belgium - English Česká republika Cyprus - English Danmark Deutschland Eesti España France Greece - English Hrvatska Ireland Israel - English Italia Latvija Lietuva Luxembourg - Deutsch Luxembourg - English Luxembourg - Français Magyarország Malta - English Middle East and North Africa - English Moyen-Orient et Afrique du Nord - Français Nederland Norge Österreich Polska Portugal România Schweiz Slovenija Slovensko Srbija Suisse Suomi Sverige Svizzera Türkiye United Kingdom България Россия Україна الشرق الأوسط وشمال أفريقيا - اللغة العربية ישראל - עברית Asia Pacific Australia Hong Kong S.A.R. of China India - English New Zealand Southeast Asia (Includes Indonesia, Malaysia, Philippines, Singapore, Thailand, and Vietnam) - English 中国 中國香港特別行政區 台灣 日本 한국 Commonwealth of Independent States Includes Armenia, Azerbaijan, Belarus, Georgia, Kazakhstan, Kyrgyzstan, Moldova, Tajikistan, Turkmenistan, Ukraine, Uzbekistan"	"null"	"null"	""	"true"
"Engines"	"Lucee"	"http://lucee.org/"	"Free, Open Source CFML Engine, Fork of"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Lucee Home Docs Downloads Get Support Get Involved Blog Contact Accelerate your development with Lucee Learn more A light-weight dynamic scripting language for the JVM that enables the rapid development of simple to highly sophisticated web applications. Lucee 5 - To the future... The Lucee Association Switzerland (LAS) is proud to announce the release of Lucee 5 for production use. Sixteen months in the making, Lucee 5 represents a complete re-engineering of the Lucee platform which is now fully OSGi compliant, making it the first and only modular ColdFusion Markup Language (CFML) engine available. read more Get involved Community Get help with Lucee problems on our mailing list and engage with the community on our language development forum. Contribute Contribute to the code Issue tracker Submitting bugs and feature requests via our online system Support Support the project Downloads Express ( 4.5 Stable | 5.0 Stable ) Installers JAR(s) ( 4.5 Stable | 5.0 Stable ) WAR ( 4.5 Stable | 5.0 Stable ) Meet us Meetup Dev Objective Conference Into the box Conference CFCamp Lucee Association Switzerland Contact About Members Supporters Team Members Ortus Solutions mso Pixl8 Rasia Daemon Nonfat Media Toomba Webapper Social Media Twitter Facebook YouTube Copyright © 2016 by Lucee Association Switzerland Powered by PresideCMS | Hosted by Viviotech"	"null"	"null"	"Free, Open Source CFML Engine, Fork of"	"true"
"Engines"	"Railo"	"http://www.getrailo.org/"	"Free, Open Source CFML Engine, Fork of"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Free, Open Source CFML Engine, Fork of"	"false"
"Application Frameworks"	"cfwheels"	"https://github.com/cfwheels/cfwheels"	"An open source ColdFusion framework inspired by Ruby on Rails."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"159"	"41"	"78"	"GitHub - cfwheels/cfwheels: An open source ColdFusion framework inspired by Ruby on Rails. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 41 Star 159 Fork 78 cfwheels/cfwheels Code Issues 115 Pull requests 2 Pulse Graphs An open source ColdFusion framework inspired by Ruby on Rails. http://cfwheels.org/ 2,875 commits 24 branches 44 releases Fetching contributors ColdFusion 99.1% Other 0.9% ColdFusion Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0-release 1.0 1.1-release 1.1 1.3 1.4 andybellenie-patch-1 andybellenie-patch-2 andybellenie-patch-3 andybellenie_patch_517 base-model csrf fix_issue_512 issue83 issue_525 issue_539 markdown_docs master nested_properties new-master plugin_case_sensitivity rocketunit-2 testing_tests tests-for-issue-122 Nothing to show v1.4.5 v1.4.4 v1.4.3 v1.4.2 v1.4.1 v1.4 v1.3.4 v1.3.3 v1.3.2 v1.3.1 v1.3 v1.2.0-rc1 v1.2.0-preview2 v1.2.0-preview1 v1.1.8 v1.1.7 v1.1.6 v1.1.5 v1.1.5-rc1 v1.1.4 v1.1.4-rc1 v1.1.3 v1.1.2 v1.0.6 1.1.1 1.1 1.1-rc1 1.1-beta2 1.1-beta1 1.0.5 1.0.5-rc1 1.0.4 1.0.3 1.0.2 1.0.1 1.0 1.0-rc1 0.9.3 0.9.2 0.9.1 0.9 0.8 0.7 0.6 Nothing to show New pull request Latest commit aef3ab6 Jul 15, 2016 chapmandu adds empty application test directories Permalink Failed to load latest commit information. config Removed lib folder, made development the default environment. Feb 11, 2015 controllers Syntax. Feb 11, 2015 events Syntax. Feb 11, 2015 files Added empty gitignore files, just used to have empty folders show in … Aug 25, 2014 images Added empty gitignore files, just used to have empty folders show in … Aug 25, 2014 javascripts Added empty gitignore files, just used to have empty folders show in … Aug 25, 2014 miscellaneous Syntax. Feb 11, 2015 models Syntax. Feb 11, 2015 plugins clean up plugins Aug 20, 2015 src Revert ""Try forcing a reload on each test package"" Apr 18, 2016 stylesheets Added empty gitignore files, just used to have empty folders show in … Aug 25, 2014 tests adds empty application test directories Jul 15, 2016 views Syntax. Feb 11, 2015 wheels adds empty application test directories Jul 15, 2016 .gitignore Ignore CFIDE in Git Apr 26, 2016 .htaccess Target 2.0 release, changed minimum requirements. Aug 12, 2015 .travis.yml repair Lucee BETA download location Sep 3, 2015 Application.cfc Preliminary OpenBD support (tested with OpenBD Ready2Run version 3.1). Jul 28, 2014 IsapiRewrite4.ini Target 2.0 release, changed minimum requirements. Aug 12, 2015 README.md Updated ReadMe Documentation references May 12, 2015 index.cfm Setting up the master branch with 1.1.8 release code as the starting … Jul 14, 2014 pom.xml repair Lucee BETA download location Sep 3, 2015 rewrite.cfm Setting up the master branch with 1.1.8 release code as the starting … Jul 14, 2014 root.cfm Syntax. Feb 11, 2015 web.config Target 2.0 release, changed minimum requirements. Aug 12, 2015 README.md CFWheels CFWheels provides fast application development, a great organization system for your code, and is just plain fun to use. One of our biggest goals is for you to be able to get up and running with CFWheels quickly. We want for you to be able to learn it as rapidly as it is to write applications with it. Getting Started In this Beginner Tutorial: Hello World, we'll be writing a simple application to make sure we have CFWheels installed properly and that everything is working as it should. Along the way, you'll get to know some basics about how applications built on top of CFWheels work. Contributing We encourage you to contribute to CFWheels! Please check out the Coding Guidelines for guidelines about how to proceed. Join us! Running Tests Before running tests, make sure that all debugging is turned OFF. This could add a considerable amount of time for the tests to complete and may cause your engine to become unresponsive. Create a database on a supported database server named wheelstestdb. At this time the supported database servers are H2, Microsoft SQL Server, Oracle, PostgreSQL and MySQL. Create a datasource in your CFML engine's administrator named wheelstestdb pointing to the wheelstestdb database and make sure to give it CLOB and BLOB support. Open your browser to the CFWheels Welcome Page. In the gray debug area at the bottom of the page, click the Run Tests link next to the version number on the Framework line. Please report any errors that you may encounter on our issue tracker. Please be sure to report the database engine (including version), CFML engine (including version), and HTTP server (including version). Code Status License CFWheels is released under the Apache License Version 2.0. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cfwheels/cfwheels"	"An open source ColdFusion framework inspired by Ruby on Rails."	"true"
"Application Frameworks"	"ColdBox"	"http://www.coldbox.org"	"The Enterprise ColdFusion MVC Development Platform"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"162"	"41"	"125"	"GitHub - ColdBox/coldbox-platform: The Enterprise ColdFusion MVC Development Platform Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 41 Star 162 Fork 125 ColdBox/coldbox-platform Code Pull requests 4 Pulse Graphs The Enterprise ColdFusion MVC Development Platform http://www.coldbox.org 4,684 commits 2 branches 73 releases Fetching contributors ColdFusion 94.8% JavaScript 4.8% Other 0.4% ColdFusion JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: development Switch branches/tags Branches Tags development master Nothing to show wirebox_1.7 wirebox_1.6 wirebox_1.5.0 wirebox_1.4.0 wirebox_1.3.1 wirebox_1.3.0 wirebox_1.2.0 wirebox_1.1.1 wirebox_1.1.0 wirebox_1.0.0 v4.2.0 v4.1.0 testbox_1.1.0 mockbox_2.1 mockbox_2.0 mockbox_1.3 mockbox_1.2_Final_Release mockbox_1.1_Final_Release mockbox_1.0_Final_Release logbox_1.7 logbox_1.6.1 logbox_1.6 logbox_1.5 logbox_1.4_Final_Release logbox_1.3_Final_Release logbox_1.2_Final_Release logbox_1.1_Final_Release logbox_1.0_Final_Release lite_1.1 cachebox_1.5 cachebox_1.4 cachebox_1.3.2 cachebox_1.3.1 cachebox_1.3.0 cachebox_1.2.1 cachebox_1.2.0 cachebox_1.1.4 cachebox_1.1.2 cachebox_1.1.1 cachebox_1.1_Final_Release cachebox_1.0_Final_Release cachebox_1.0_Final_Release_Patch1 4.0.0 3.8.1 3.8.0 3.7.0 3.6.0 3.5.3 3.5.2 3.5.1 3.5.0 3.5.0.Beta 3.1.0 3.0.0 3.0.0_RC2 3.0.0_RC1 3.0.0_M6.2 3.0.0_M6.1 3.0.0_M6 3.0.0_M5 2.6.4_Final_Release 2.6.3_Final_Release 2.6.2_Final_Release 2.6.1_Final_Release 2.6.0_Final_Release 2.5.2_Final_Release 2.5.1_Final_Release 2.5.0_Final_Release 2.0.3_Final_Release 2.0.2_Final_Release 2.0.1_Final_Release 2.0.0_Final_Release 1.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. apidocs Udpated docbox Mar 29, 2016 build keep original build file before dependency installs. May 24, 2016 install COLDBOX-512 #resolve Apr 20, 2016 system LOGBOX-23 #resolve Jul 15, 2016 test-harness COLDBOX-515 #resolve May 3, 2016 tests dictionary updates May 13, 2016 .gitattributes Add .gitattributes to normalize line breaks Dec 15, 2012 .gitignore ignore templates now Mar 5, 2016 .travis.yml Forgot to start server Mar 4, 2016 box-cachebox.json COLDBOX-498 Feb 24, 2016 box-logbox.json COLDBOX-498 Feb 24, 2016 box-wirebox-cachebox.json COLDBOX-498 Feb 24, 2016 box-wirebox.json COLDBOX-498 Feb 24, 2016 box.json fix box.json Apr 12, 2016 cpu.json COLDBOX-472 #resolve #close Sep 8, 2015 license.txt COLDBOX-498 Feb 24, 2016 readme.md travis build status Feb 27, 2016 server.json lowering ports to see if travis likes it Feb 27, 2016 readme.md    ____     ____     _____       ______     ______      ____     __     __     / ___)   / __ \   (_   _)     (_  __ \   (_   _ \    / __ \   (_ \   / _)   / /      / /  \ \    | |         ) ) \ \    ) (_) )  / /  \ \    \ \_/ /    ( (      ( ()  () )   | |        ( (   ) )   \   _/  ( ()  () )    \   /     ( (      ( ()  () )   | |   __    ) )  ) )   /  _ \  ( ()  () )    / _ \      \ \___   \ \__/ /  __| |___) )  / /__/ /   _) (_) )  \ \__/ /   _/ / \ \_     \____)   \____/   \________/  (______/   (______/    \____/   (__/   \__)   Copyright Since 2005 ColdBox Platform by Luis Majano and Ortus Solutions, Corp www.coldbox.org | www.ortussolutions.com Because of God's grace, this project exists. If you don't like this, then don't read it, its not for you. ""Therefore being justified by faith, we have peace with God through our Lord Jesus Christ: By whom also we have access by faith into this grace wherein we stand, and rejoice in hope of the glory of God. And not only so, but we glory in tribulations also: knowing that tribulation worketh patience; And patience, experience; and experience, hope: And hope maketh not ashamed; because the love of God is shed abroad in our hearts by the Holy Ghost which is given unto us. ."" Romans 5:5 Welcome to ColdBox ColdBox is a conventions modular MVC development platform for ColdFusion (CFML). License Apache License, Version 2.0. The ColdBox Websites, logo and content have a separate license and they are a separate entity. Versioning ColdBox is maintained under the Semantic Versioning guidelines as much as possible. Releases will be numbered with the following format: <major>.<minor>.<patch>  And constructed with the following guidelines: Breaking backward compatibility bumps the major (and resets the minor and patch) New additions without breaking backward compatibility bumps the minor (and resets the patch) Bug fixes and misc changes bumps the patch Important Links Source Code https://github.com/coldbox/coldbox-platform Continuous Integration http://jenkins.staging.ortussolutions.com/job/OS-ColdBoxPlatform%20BE/ Bug Tracking/Agile Boards https://ortussolutions.atlassian.net/browse/COLDBOX https://ortussolutions.atlassian.net/browse/WIREBOX https://ortussolutions.atlassian.net/browse/LOGBOX https://ortussolutions.atlassian.net/browse/CACHEBOX Documentation http://coldbox.ortusbooks.com http://wiki.coldbox.org (Legacy) Blog http://blog.coldbox.org Official Site http://www.ortussolutions.com/products/coldbox http://www.coldbox.org System Requirements Lucee 4.5+ Railo 4+ (Deprecated) ColdFusion 9.02+ Quick Installation Please go to our documentation for expanded instructions. CommandBox (Recommended) We recommend you use CommandBox, our CFML CLI and package manager, to install ColdBox. Stable Release box install coldbox Bleeding Edge Release box install coldbox-be Simple Install Unzip the download into a folder called coldbox in your webroot or place outside of the webroot and create a per-application mapping /coldbox that points to it. Bleeding Edge Downloads You can always leverage our bleeding edge artifacts server to download ColdBox: http://integration.stg.ortussolutions.com/artifacts/ortussolutions/coldbox/ Collaboration If you want to develop and hack at the source, you will need to download CommandBox first. Then in the root of this project, type box install. This will download the necessary dependencies to develop and test the core. You can then go ahead and start an embedded server box server start and start hacking around. For running our test suites you will need 2 more steps, so please refer to the Readme in the tests folder. THE DAILY BREAD ""I am the way, and the truth, and the life; no one comes to the Father, but by me (JESUS)"" Jn 14:1-12 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/coldbox/coldbox-platform"	"The Enterprise ColdFusion MVC Development Platform"	"true"
"Application Frameworks"	"FarCry"	"http://www.farcrycore.org"	"FarCry Core is a web application framework that helps CFML developers build tailor-made content solutions, fast."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"25"	"25"	"13"	"GitHub - farcrycore/core: FarCry Core: a web app framework for the ColdFusion language (supporting Lucee & Adobe ColdFusion engines). An ideal platform for building bespoke or tailor made solutions. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 25 Fork 13 farcrycore/core Code Issues 0 Pull requests 2 Pulse Graphs FarCry Core: a web app framework for the ColdFusion language (supporting Lucee & Adobe ColdFusion engines). An ideal platform for building bespoke or tailor made solutions. http://www.farcrycore.org 5,445 commits 14 branches 119 releases Fetching contributors ColdFusion 95.7% CSS 2.3% JavaScript 1.5% Other 0.5% ColdFusion CSS JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master p400 p500 p510 p520 p600 p610 p620 p630 p700 p710 p720 skunkworks/p730 trunk Nothing to show milestone-6-3-1 milestone-6-3-0 milestone-6-2-11 milestone-6-2-10 milestone-6-2-9 milestone-6-2-8 milestone-6-2-7 milestone-6-2-6 milestone-6-2-5 milestone-6-2-5-3 milestone-6-2-5-2 milestone-6-2-5-1 milestone-6-2-4 milestone-6-2-3 milestone-6-2-2 milestone-6-2-1 milestone-6-2-0 milestone-6-1-4 milestone-6-1-4-1 milestone-6-1-3 milestone-6-1-2 milestone-6-1-1 milestone-6-1-0 milestone-6-1-0-RC milestone-6-0-21 milestone-6-0-20 milestone-6-0-19 milestone-6-0-19-1 milestone-6-0-18 milestone-6-0-17 milestone-6-0-16 milestone-6-0-16-1 milestone-6-0-15 milestone-6-0-15-2 milestone-6-0-15-1 milestone-6-0-14 milestone-6-0-12 milestone-6-0-12-2 milestone-6-0-12-1 milestone-6-0-11 milestone-6-0-11-1 milestone-6-0-10 milestone-6-0-9 milestone-6-0-9-1 milestone-6-0-8 milestone-6-0-7 milestone-6-0-6 milestone-6-0-5 milestone-6-0-5-1 milestone-6-0-4 milestone-6-0-3 milestone-6-0-2 milestone-6-0-2-1 milestone-6-0-1 milestone-6-0-0 milestone-5-2-8 milestone-5-2-7 milestone-5-2-6 milestone-5-2-5 milestone-5-2-4 milestone-5-2-3 milestone-5-2-2 milestone-5-2-1 milestone-5-2-0 milestone-5-2-0-1 milestone-5-1-11 milestone-5-1-10 milestone-5-1-9 milestone-5-1-8 milestone-5-1-7 milestone-5-1-6 milestone-5-1-5 milestone-5-1-4 milestone-5-1-3 milestone-5-1-2 milestone-5-1-1 milestone-5-1-0 milestone-5-0-2 milestone-4-0-12 milestone-4-0-11 milestone-4-0-10 milestone-4-0-9 milestone-4-0-8 milestone-4-0-7 milestone-4-0-5 milestone-4-0-4 milestone-4-0-3 milestone-4-0-2 milestone-4-0-1 7.2.6 7.2.5 7.2.4 7.2.3 7.2.2 7.2.1 7.2.0 7.2.0-RC 7.1.6 7.1.5 7.1.4 Nothing to show New pull request Latest commit 7e317e7 Jun 10, 2016 justincarter fix typo Permalink Failed to load latest commit information. config FC-3015 read/write dsns Aug 10, 2015 packages FC-3078 show a 404 on the front end when viewing a draft object URL Jun 10, 2016 tags FC-3078 show a 404 on the front end when viewing a draft object URL Jun 10, 2016 tests FC-2907 application scope refactoring Sep 11, 2014 webskin FC-3072 Sort order modal not displaying tree nodes Mar 30, 2016 webtop fix typo Jun 10, 2016 .gitignore ignore .project files Oct 16, 2013 Application.cfc FC-3047 dbtype auto-detection and installer support for SQL2012 Nov 19, 2015 CONTRIBUTING.md Minor corrections Feb 16, 2015 COPYING.txt Testing commit to a revision Apr 22, 2009 README.md minor README.md edit Apr 23, 2015 index.cfm FC-1723 /core to include a redirect to the webtop Jan 19, 2009 major.version bump versions for farcry 7 Feb 19, 2013 minor.version bump minor and patch versions to 7.2.0-beta May 15, 2015 patch.version bump patch version to 7.2.6 Feb 19, 2016 proxyApplication.cfc Minor refactoring; set outputs to false, added comments, removed whit… May 24, 2008 README.md FarCry Core Framework FarCry Core: a web app framework for the ColdFusion language (supporting Lucee, Railo & Adobe ColdFusion engines). An ideal platform for building bespoke or tailor made solutions. FarCry Core comes with a range of plugins including FarCry CMS, a popular content management solution built with FarCry Core. Installation Download the latest community build or get a ""ready-to-go"" express version for a demo: http://www.farcrycore.org/downloads FarCry 7 Installation Guide is available on the forum, as is general support for all manner of hosting and deployment configurations. Places to go Community FarCry Core Website FarCry Dev Support Forum Google+ Community FarCry Documentation WIKI FarCry Committers Blog Daemon: Commercial Support/Training/Development Code farcrycore Github FarCry Component/Tag Documentation FarCry Plugin Directory FarCry Bug Database Forking, Commits, Pull Requests We follow GitHub's standard recommendations for pull requests: https://help.github.com/articles/using-pull-requests The only caveat is that all submissions must continue to cede copyright to ""Daemon Pty Limited"", the corporate custodian of the code base. Simple ""pulls"" will go through almost immediately. More complex stuff might spark a bit of discussion on the pull request itself, prior to going into the code base. Fork now! Pull at will ;) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/farcrycore/core"	"FarCry Core is a web application framework that helps CFML developers build tailor-made content solutions, fast."	"true"
"Application Frameworks"	"FW/1 - Framework One"	"https://github.com/framework-one/fw1"	"a lightweight, convention over configuration, MVC application framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"336"	"71"	"135"	"GitHub - framework-one/fw1: FW/1 - Framework One - is a lightweight, convention over configuration, MVC application framework for ColdFusion / CFML. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 71 Star 336 Fork 135 framework-one/fw1 Code Issues 6 Pull requests 0 Wiki Pulse Graphs FW/1 - Framework One - is a lightweight, convention over configuration, MVC application framework for ColdFusion / CFML. http://framework-one.github.io 1,204 commits 7 branches 56 releases 31 contributors ColdFusion 98.7% Shell 1.2% CSS 0.1% ColdFusion Shell CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags 1.x 2.2.x 2.5.x clojure-calls-cfml develop master mustache Nothing to show v4.0.0-beta2 v4.0.0-beta1 v4.0.0-alpha1 v3.5.1 v3.5.0 v3.5.0-rc2 v3.5.0-rc1 v3.5.0-beta2 v3.5.0-beta1 v3.5.0-alpha2 v3.5.0-alpha1 v3.1.2 v3.1.1 v3.1.0 v3.1-rc3 v3.1-rc2 v3.1-rc1 v3.1-beta2 v3.1-beta1 v3.0.2 v3.0.1 v3.0 v3.0-rc2 v3.0-rc1 v3.0-beta1 v3.0-alpha1 v2.5.2 v2.5.1 v2.5 v2.5rc2 v2.5rc1 v2.5rc0 v2.2.3 v2.2.2 v2.2.1 v2.2 v2.2-rc2 v2.2-rc1 v2.1.1 v2.1 v2.1rc1 v2.1beta2 v1.3 v1.2.2 v1.2.1 v1.2 v1.1.1 v1.1 v1.0.1 v1.0 2.1alpha1 2.0.1 2.0 2.0rc 2.0beta 2.0alpha Nothing to show New pull request Latest commit 3a3235a Jul 12, 2016 seancorfield Prep for 4.0.0 Beta 2 Permalink Failed to load latest commit information. css Finally incorporatey Kevan Stannard's logo design into examples. Jul 11, 2010 docs Updated Cheat Sheet from Dan Parker. Thank you! May 17, 2014 examples Revert ""Proof of concept to show how Clojure can call back into CFML!"" May 27, 2016 framework Prep for 4.0.0 Beta 2 Jul 12, 2016 introduction Examples reorg to showcase #355 Sep 4, 2015 skeleton For #312 add routes config notes to skeleton Application.cfc Mar 21, 2015 tests Implement FW/1 facade #439 Jun 1, 2016 .gitignore Ignore local example (used in 3.5 docs) Sep 6, 2015 .travis.yml Fix #391 by dropping 9.0.2 and switching 3.6 => 4.0 Oct 27, 2015 Application.cfc Correct example Application.cfc files Sep 16, 2015 CODE_OF_CONDUCT.md Fix #240 by adding a Code of Conduct Jun 19, 2015 CONTRIBUTING.md Fix #410 by adding LICENSE / updating README etc Dec 16, 2015 LICENSE It's 2016! Mar 5, 2016 README.md Update README.md May 11, 2016 box.json Update box.json regarding issue #425 Feb 19, 2016 build.xml Fix #391 by dropping 9.0.2 and switching 3.6 => 4.0 Oct 27, 2015 index.cfm Tidied up top-level welcome page/app. Jul 19, 2009 run-tests-example.sh Add an example version of a shell script to run the tests locally. Jun 18, 2014 README.md FW/1 (Framework One) This FW/1 directory is a complete web application and expects to live in its own webroot if you plan to run the applications within it. To use FW/1 in a separate webroot you can either copy the framework directory to that webroot or add a mapping for /framework to the framework folder inside this FW/1 directory. Note that since your Application.cfc needs to extend framework.one, you have to add the mapping in your admin - you can't just use a per-application mapping. Please read the Framework One Code of Conduct - we want FW/1 to be a welcoming and supportive environment for everyone to feel comfortable contributing! Resources Project home: http://fw1.riaforge.org Documentation / Wiki: http://framework-one.github.io/documentation/ / http://github.com/framework-one/fw1/wiki Blog: http://framework-one.github.io Support: http://groups.google.com/group/framework-one/ Chat: The CFML team Slack has a dedicated #fw1 channel. Running the Tests The Ant build.xml file is primarily designed to be used by Travis to run the tests automatically, but it is possible to run the tests locally, with some setup: This FW/1 directory needs to be a web root for some test domain on your local machine. I have fw1.local setup to resolve to this folder. You'll need MXUnit installed and accessible via /mxunit for the test domain you use for this project. You can install MXUnit into this FW/1 directory if you want - mxunit/* is on the .gitignore list. You can run the build locally using a variant of this command (all on one line): ant -Dplatform=railo41 -Dtest.path.root=/Developer/workspace/fw1 \     -Dcontext.root= -Dserver.name=fw1.local -Dserver.port=8080 \     run-tests-mxunit  See the run-tests-example.sh file for a template (for Mac/Linux). platform needs to be set just to satisfy the build script it doesn't affect anything (so use railo41 even if you're on ACF or a different version of Railo) test.path.root should be the filesystem path to this directory, i.e., the web root for the FW/1 project. context.root should probably be empty (unless you are using a named web application context) server.name should be the test domain you have configured server.port should be the port on which you access that test domain run-tests-mxunit is the actual Ant task that does the testing Copyright and License Copyright (c) 2009-2016 Sean Corfield (and others -- see individual files for additional copyright holders). All rights reserved. The use and distribution terms for this software are covered by the Apache Software License 2.0 (http://www.apache.org/licenses/LICENSE-2.0) which can also be found in the file LICENSE at the root of this distribution and in individual licensed files. By using this software in any fashion, you are agreeing to be bound by the terms of this license. You must not remove this notice, or any other, from this software. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/framework-one/fw1"	"a lightweight, convention over configuration, MVC application framework"	"true"
"Application Frameworks"	"ModelGlue"	"http://model-glue.com"	"a CFML based, full stack, front controller based on MVC. Features include Scaffolding, ORM integration, and many others"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"18"	"13"	"7"	"GitHub - modelglue/modelglue-framework: Model-Glue CFML is a CFML based, full stack, front controller based on MVC. Features include Scaffolding, ORM integration, and many others. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 18 Fork 7 modelglue/modelglue-framework Code Issues 5 Pull requests 0 Wiki Pulse Graphs Model-Glue CFML is a CFML based, full stack, front controller based on MVC. Features include Scaffolding, ORM integration, and many others. 493 commits 2 branches 7 releases Fetching contributors ColdFusion 99.8% Other 0.2% ColdFusion Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show release-3.2 release-3.2-rc2 build Unity MG_3.1_Final_09_29_2009 MG_3.0_Final%20_8_10_2009 3.1MFinal Nothing to show New pull request Latest commit b9f7230 Oct 14, 2014 dskaggs Merge branch 'develop' … Conflicts: 	ModelGlue/gesture/configuration/ModelGlueConfiguration.xml 	ModelGlue/gesture/controller/Controller.cfc 	ModelGlue/gesture/eventhandler/Message.cfc 	ModelGlue/gesture/eventrequest/population/FormPopulator.cfc 	ModelGlue/gesture/eventrequest/url/test/TestUrlManager.cfc 	ModelGlue/gesture/externaladapters/contentcaching/IContentCache.cfc 	ModelGlue/gesture/externaladapters/contentcaching/SimpleTimedCache.cfc 	ModelGlue/gesture/externaladapters/contentcaching/test/TestSimpleTimedCache.cfc 	ModelGlue/gesture/modules/internal/configuration/controller/ConfigurationController.cfc 	ModelGlue/gesture/modules/internal/generation/controller/GenerationController.cfc 	ModelGlue/gesture/test/TestModelGlue.cfc 	gesture/ModelGlue.cfc 	gesture/configuration/ModelGlueConfiguration.cfc 	gesture/eventhandler/EventHandler.cfc 	gesture/eventhandler/Result.cfc 	gesture/eventhandler/View.cfc 	gesture/eventrequest/EventContext.cfc 	gesture/eventrequest/phase/Invocation.cfc 	gesture/module/MemoizedXMLModuleLoader.cfc 	gesture/modules/scaffold/ScaffoldManager.cfc 	modelglueapplicationtemplate/build.properties 	modelglueapplicationtemplate/build.xml 	modelglueapplicationtemplate/config/ColdSpring.xml 	modelglueapplicationtemplate/index.cfm 	modelgluedistributionfiles/build.xml 	modelgluedistributionfiles/profiles/latestRelease/source.properties 	modelgluedistributionfiles/profiles/latestRelease/version.properties 	modelgluedistributionfiles/resources/default/NOTICE 	modelgluesamples/buster/views/pages/index.cfm 	tests/unittests/gesture/ColdSpring.xml 	tests/unittests/gesture/TestModelGlueTemplate.cfc 	tests/unittests/gesture/eventhandler/TestEventHandler.cfc 	tests/unittests/gesture/eventrequest/TestEventContext.cfc 	tests/unittests/gesture/eventrequest/url/TestSesUrlManager.cfc 	tests/unittests/gesture/modules/internal/utility/TestUtilityModule.cfc Permalink Failed to load latest commit information. Bean Core ModelGlue/gesture/eventrequest/test/format Util customtags gesture helpers tests unity Moved framework files from /ModelGlue to the root folder Jan 16, 2013 .gitignore ModelGlue.cfc ModelGlue.cfm README.md README.md ModelGlueCFML Model-Glue CFML is a CFML based, full stack, front controller based on MVC. Features include Scaffolding, ORM integration, and many others. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/modelglue/modelglue-framework"	"a CFML based, full stack, front controller based on MVC. Features include Scaffolding, ORM integration, and many others"	"true"
"Testing"	"CFSelenium"	"https://github.com/teamcfadvance/CFSelenium"	"A native Selenium RC binding for ColdFusion"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"68"	"17"	"23"	"GitHub - teamcfadvance/CFSelenium: A native Selenium RC binding for ColdFusion Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 68 Fork 23 teamcfadvance/CFSelenium Code Issues 1 Pull requests 1 Pulse Graphs A native Selenium RC binding for ColdFusion 117 commits 2 branches 7 releases Fetching contributors ColdFusion 93.2% JavaScript 3.1% Shell 1.8% Batchfile 1.3% HTML 0.6% ColdFusion JavaScript Shell Batchfile HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master server Nothing to show v1.8 v1.7 v1.6 v1.5 v1.4 v1.3 v1.2 Nothing to show New pull request Latest commit 05b604d May 31, 2016 ddspringle Merge pull request #25 from jamiejackson/fix_lampei_conflicts … Fix lampei conflicts to add WebDriver Permalink Failed to load latest commit information. Selenium-RC assets Seem to have gotten things working: Upgraded selenium-server-standalone May 30, 2016 drivers formats Bumped up the version for the Firefox plugin Jan 5, 2012 test Fixed Lucee parse problem. May 30, 2016 .gitignore .travis.yml fixed yml file parsing issue Jan 17, 2014 CFSeleniumTestCase.cfc CFSeleniumTestCase_Tags.cfc build.xml readme.md selenium.cfc Merge commit '4059439fe2d9503d7d23dbaa8a97c857bf609f29' into May 28, 2016 selenium_tags.cfc server.cfc webSelenium.cfc readme.md CFSelenium - A Native CFML (ColdFusion) Client Library for Selenium-RC What is CFSelenium? CFSelenium is a ColdFusion Component (CFC) which provides a native client library for Selenium-RC. This allows you to write tests, using CFML, which will drive a browser and verify results via Selenium-RC. Requirements ColdFusion 7+ - ColdFusion 9+ is required for the script-based cfc. You can use the tag-based cfc, selenium_tags on CF 7 and 8. The Selenium-RC Server jar, the latest version of which is included in the distribution Usage Optionally, start the Selenium-RC server. Selenium.cfc will automatically start the Selenium-RC server for you in the background if it isn't already started (note this does not work on CF7). To start it manually, the command is similar to this: java -jar selenium-server-standalone-2.53.0.jar  Create an instance of selenium.cfc. selenium = new selenium();  You can also pass the host and port into the constructor, which default to localhost and 4444: selenium = new selenium(""localhost"", 4444);  To start up a browser, call selenium.start() passing in the starting url and, optionally, a browser command telling it which browser to start (the default is *firefox): selenium.start(""http://github.com/"");  To start a different browser (e.g., Google Chrome), pass in the browser command too: selenium.start(""http://github.com/"",""*googlechrome"");  Call methods on the selenium object to drive the browser and check values. For example: selenium.open(""/bobsilverberg/CFSelenium""); assertEquals(""bobsilverberg/CFSelenium - GitHub"", selenium.getTitle()); selenium.click(""link=readme.md""); selenium.waitForPageToLoad(""30000""); assertEquals(""readme.md at master from bobsilverberg's CFSelenium - GitHub"", selenium.getTitle()); selenium.click(""raw-url""); selenium.waitForPageToLoad(""30000""); assertEquals("""", selenium.getTitle()); assertTrue(selenium.isTextPresent(""[CFSelenium]""));  You can shut down the browser using the stop() method: selenium.stop();  A Base Test Case for MXUnit Also included in the distribution is a base test case for MXUnit, called CFSeleniumTestCase.cfc. This is designed to instantiate the selenium.cfc for you and start up a browser session once, before all of your tests run, and shut down the browser after all the tests have completed. To use this base test case, simply extend it in your own test case: component extends=""CFSelenium.CFSeleniumTestCase""  You will then want to place a beforeTests() method in your test case which sets the browserUrl and the calls the base test case's beforeTests() method: public void function beforeTests(){     browserURL = ""http://github.com/"";     super.beforeTests(); }  A Selenium-IDE Formatter Too Also included in the distribution is a Firefox extension which will add a formatter to Selenium-IDE which will allow you to export tests in CFSelenium / MXUnit format. The plugin can be found in the formats folder. Support The script-based version of CFSelenium is maintained by Bob Silverberg and the tag-based version is maintained by Brian Swartzfager. Thanks also to Marc Esher for the logic which starts and stops the Selenium-RC server automatically. Please use the main repo's issue tracker to report bugs and request enhancements. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/teamcfadvance/CFSelenium"	"A native Selenium RC binding for ColdFusion"	"true"
"Testing"	"MockBox"	"http://wiki.coldbox.org/wiki/MockBox.cfm"	"The ColdFusion Mocking/Stubbing Framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"162"	"41"	"125"	"GitHub - ColdBox/coldbox-platform: The Enterprise ColdFusion MVC Development Platform Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 41 Star 162 Fork 125 ColdBox/coldbox-platform Code Pull requests 4 Pulse Graphs The Enterprise ColdFusion MVC Development Platform http://www.coldbox.org 4,684 commits 2 branches 73 releases Fetching contributors ColdFusion 94.8% JavaScript 4.8% Other 0.4% ColdFusion JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: development Switch branches/tags Branches Tags development master Nothing to show wirebox_1.7 wirebox_1.6 wirebox_1.5.0 wirebox_1.4.0 wirebox_1.3.1 wirebox_1.3.0 wirebox_1.2.0 wirebox_1.1.1 wirebox_1.1.0 wirebox_1.0.0 v4.2.0 v4.1.0 testbox_1.1.0 mockbox_2.1 mockbox_2.0 mockbox_1.3 mockbox_1.2_Final_Release mockbox_1.1_Final_Release mockbox_1.0_Final_Release logbox_1.7 logbox_1.6.1 logbox_1.6 logbox_1.5 logbox_1.4_Final_Release logbox_1.3_Final_Release logbox_1.2_Final_Release logbox_1.1_Final_Release logbox_1.0_Final_Release lite_1.1 cachebox_1.5 cachebox_1.4 cachebox_1.3.2 cachebox_1.3.1 cachebox_1.3.0 cachebox_1.2.1 cachebox_1.2.0 cachebox_1.1.4 cachebox_1.1.2 cachebox_1.1.1 cachebox_1.1_Final_Release cachebox_1.0_Final_Release cachebox_1.0_Final_Release_Patch1 4.0.0 3.8.1 3.8.0 3.7.0 3.6.0 3.5.3 3.5.2 3.5.1 3.5.0 3.5.0.Beta 3.1.0 3.0.0 3.0.0_RC2 3.0.0_RC1 3.0.0_M6.2 3.0.0_M6.1 3.0.0_M6 3.0.0_M5 2.6.4_Final_Release 2.6.3_Final_Release 2.6.2_Final_Release 2.6.1_Final_Release 2.6.0_Final_Release 2.5.2_Final_Release 2.5.1_Final_Release 2.5.0_Final_Release 2.0.3_Final_Release 2.0.2_Final_Release 2.0.1_Final_Release 2.0.0_Final_Release 1.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. apidocs Udpated docbox Mar 29, 2016 build keep original build file before dependency installs. May 24, 2016 install COLDBOX-512 #resolve Apr 20, 2016 system LOGBOX-23 #resolve Jul 15, 2016 test-harness COLDBOX-515 #resolve May 3, 2016 tests dictionary updates May 13, 2016 .gitattributes Add .gitattributes to normalize line breaks Dec 15, 2012 .gitignore ignore templates now Mar 5, 2016 .travis.yml Forgot to start server Mar 4, 2016 box-cachebox.json COLDBOX-498 Feb 24, 2016 box-logbox.json COLDBOX-498 Feb 24, 2016 box-wirebox-cachebox.json COLDBOX-498 Feb 24, 2016 box-wirebox.json COLDBOX-498 Feb 24, 2016 box.json fix box.json Apr 12, 2016 cpu.json COLDBOX-472 #resolve #close Sep 8, 2015 license.txt COLDBOX-498 Feb 24, 2016 readme.md travis build status Feb 27, 2016 server.json lowering ports to see if travis likes it Feb 27, 2016 readme.md    ____     ____     _____       ______     ______      ____     __     __     / ___)   / __ \   (_   _)     (_  __ \   (_   _ \    / __ \   (_ \   / _)   / /      / /  \ \    | |         ) ) \ \    ) (_) )  / /  \ \    \ \_/ /    ( (      ( ()  () )   | |        ( (   ) )   \   _/  ( ()  () )    \   /     ( (      ( ()  () )   | |   __    ) )  ) )   /  _ \  ( ()  () )    / _ \      \ \___   \ \__/ /  __| |___) )  / /__/ /   _) (_) )  \ \__/ /   _/ / \ \_     \____)   \____/   \________/  (______/   (______/    \____/   (__/   \__)   Copyright Since 2005 ColdBox Platform by Luis Majano and Ortus Solutions, Corp www.coldbox.org | www.ortussolutions.com Because of God's grace, this project exists. If you don't like this, then don't read it, its not for you. ""Therefore being justified by faith, we have peace with God through our Lord Jesus Christ: By whom also we have access by faith into this grace wherein we stand, and rejoice in hope of the glory of God. And not only so, but we glory in tribulations also: knowing that tribulation worketh patience; And patience, experience; and experience, hope: And hope maketh not ashamed; because the love of God is shed abroad in our hearts by the Holy Ghost which is given unto us. ."" Romans 5:5 Welcome to ColdBox ColdBox is a conventions modular MVC development platform for ColdFusion (CFML). License Apache License, Version 2.0. The ColdBox Websites, logo and content have a separate license and they are a separate entity. Versioning ColdBox is maintained under the Semantic Versioning guidelines as much as possible. Releases will be numbered with the following format: <major>.<minor>.<patch>  And constructed with the following guidelines: Breaking backward compatibility bumps the major (and resets the minor and patch) New additions without breaking backward compatibility bumps the minor (and resets the patch) Bug fixes and misc changes bumps the patch Important Links Source Code https://github.com/coldbox/coldbox-platform Continuous Integration http://jenkins.staging.ortussolutions.com/job/OS-ColdBoxPlatform%20BE/ Bug Tracking/Agile Boards https://ortussolutions.atlassian.net/browse/COLDBOX https://ortussolutions.atlassian.net/browse/WIREBOX https://ortussolutions.atlassian.net/browse/LOGBOX https://ortussolutions.atlassian.net/browse/CACHEBOX Documentation http://coldbox.ortusbooks.com http://wiki.coldbox.org (Legacy) Blog http://blog.coldbox.org Official Site http://www.ortussolutions.com/products/coldbox http://www.coldbox.org System Requirements Lucee 4.5+ Railo 4+ (Deprecated) ColdFusion 9.02+ Quick Installation Please go to our documentation for expanded instructions. CommandBox (Recommended) We recommend you use CommandBox, our CFML CLI and package manager, to install ColdBox. Stable Release box install coldbox Bleeding Edge Release box install coldbox-be Simple Install Unzip the download into a folder called coldbox in your webroot or place outside of the webroot and create a per-application mapping /coldbox that points to it. Bleeding Edge Downloads You can always leverage our bleeding edge artifacts server to download ColdBox: http://integration.stg.ortussolutions.com/artifacts/ortussolutions/coldbox/ Collaboration If you want to develop and hack at the source, you will need to download CommandBox first. Then in the root of this project, type box install. This will download the necessary dependencies to develop and test the core. You can then go ahead and start an embedded server box server start and start hacking around. For running our test suites you will need 2 more steps, so please refer to the Readme in the tests folder. THE DAILY BREAD ""I am the way, and the truth, and the life; no one comes to the Father, but by me (JESUS)"" Jn 14:1-12 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/coldbox/coldbox-platform"	"The ColdFusion Mocking/Stubbing Framework"	"true"
"Testing"	"MXUnit"	"https://github.com/mxunit/mxunit"	"xUnit style unit testing framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"74"	"16"	"49"	"GitHub - mxunit/mxunit: MXUnit core framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 74 Fork 49 mxunit/mxunit Code Issues 11 Pull requests 3 Wiki Pulse Graphs MXUnit core framework http://mxunit.org 369 commits 5 branches 6 releases Fetching contributors ColdFusion 79.5% HTML 8.8% XSLT 6.1% JavaScript 4.0% CSS 1.6% ColdFusion HTML XSLT JavaScript CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags decorator-poc develop gh-pages master mightyspec Nothing to show v2.1.3 v2.1.2 v2.1.1 v2.1.0 nightly_latest_stable_build 2012-08-11_20-18-36 Nothing to show New pull request Latest commit 195f53f Apr 21, 2016 denuno Merge pull request #36 from clitnak/OverrideInstallRoot … Allow overriding installRoot. see comment in mxunit-config.xml that describes the scenario. Permalink Failed to load latest commit information. PluginDemoTests Fixing bug in Query Comparison Equality Sep 27, 2012 ant-common @ 95bb33a ant-common Aug 12, 2012 ant Adding latest mxunit-ant.jar May 21, 2011 buildprops 'build auto-commit' Sep 27, 2012 doc changing Assert to enable pass-through of expected and actual for tes… Aug 1, 2011 eclipse more progress on decorators Aug 20, 2011 experimental_ant init Feb 28, 2010 framework Merge pull request #36 from clitnak/OverrideInstallRoot Apr 21, 2016 generator init Feb 28, 2010 images rm copyLeft img Jul 4, 2010 lib removing busted jar Sep 8, 2011 resources synching version 2.02 from SVN Jan 16, 2011 runner Made getTests public because why not? Sep 30, 2013 samples fixed typo Jul 3, 2012 tests Fixing bug in Query Comparison Equality Sep 27, 2012 utils ColdFusion MX 7 syntax fixes Jan 14, 2012 .gitignore Nice handling of ignore directories starting with '.' Jan 23, 2012 .gitmodules adding ant-common Aug 12, 2012 MIT-License.txt init Feb 28, 2010 README-toc.xml tweak Jul 5, 2010 README.html tweak README Jul 4, 2010 README.textile Updated README to reflect Github as main repo Nov 21, 2011 README.txt 'build auto-commit' Sep 9, 2011 build.xml 'build auto-commit' Sep 27, 2012 ftp.listing synching @marcesher/SVN version 2.0.3 May 6, 2011 index.cfm modified index.cfm to use full component path. this has resolved my i… Jun 3, 2011 mxunit-TestCase-Template.cfc init Feb 28, 2010 mxunit-TestSuiteTemplate.cfm init Feb 28, 2010 README.textile MXUnit A test framework for CFML (ColdFusion). Main website http://mxunit.org Docs, etc: http://wiki.mxunit.org/ MXUnit Google Group (to get help): http://groups.google.com/group/mxunit About this repository This is the main distribution branch, formally located at http://mxunit.googlecode.com/svn/mxunit/trunk/ (Subversion) We have moved most, if not all, source from Google Code to git hub. So, you should find everything here you need. Collaborating Guidelines Patches and improvements are always welcome! Please fork this branch, make your changes (with plenty of passing tests) and make a pull request. Test and Be Happy! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mxunit/mxunit"	"xUnit style unit testing framework"	"true"
"Testing"	"mxunit-watch"	"https://github.com/atuttle/mxunit-watch"	"watch a directory for file changes (.cfc.cfm.xml) to trigger mxunit test suite full run, displaying results in the console"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"5"	"2"	"GitHub - atuttle/mxunit-watch: Watch a directory for file changes (.cfc, .cfm, .xml) to trigger mxunit test suite full run, displaying results in the console Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 14 Fork 2 atuttle/mxunit-watch Code Issues 2 Pull requests 0 Pulse Graphs ⌚ Watch a directory for file changes (.cfc, .cfm, .xml) to trigger mxunit test suite full run, displaying results in the console 46 commits 1 branch 10 releases Fetching contributors JavaScript 93.6% ColdFusion 6.4% JavaScript ColdFusion Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.7.0 v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.4 v0.1.3 v0.1.2 v0.1.1 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. bin tasks .gitignore ReadMe.md index.js mxunit.js package.json screenshot.png string-fix.js test-list.cfm ReadMe.md mxunit-watch Watch a directory for file changes. When a (.cfc, .cfm, .xml) file is changed, trigger an mxunit test suite run. Results displayed neatly in the console: Pre-requisites Requires NodeJS The guts of this tool are powered by Node, and you'll be installing it from NPM. npm install -g mxunit-watch Requires MXUnit Bleeding-Edge Release I had to submit a small change to MXUnit to get it to offer up the list of tests, but they accepted my pull request, so it's now available in their Bleeding Edge Release. When another official release is published I'll update this readme with the minimum version number, but for now you should know that version 2.1.3 (the latest stable release) is not recent enough. You'll have to download the latest master branch of mxunit. Add a CFM file to your project mxunit-watch uses this file to get a listing of all of your test suites and the tests they contain: <cfscript>     testsDir = expandPath('/your/project/tests');     componentPath = 'your.project.tests';      suite = createObject('mxunit.framework.TestSuite');     files = createObject('mxunit.runner.DirectoryTestSuite').getTests(directory=testsDir, componentPath=componentPath);      for (i = 1; i <= arrayLen(files); i++){         suite.addAll(files[i]);     }      tests = suite.suites();      for (t in tests){         tests[t] = tests[t].methods;     } </cfscript> <cfsetting showdebugoutput=""false"" /> <cfcontent reset=""true"" type=""application/json; charset=UTF-8"" /><cfoutput>#serializeJson(tests)#</cfoutput><cfabort/> This file is provided in the mxunit-watch repository (test-list.cfm), or you can just copy it from above. Save it to a web-accessible location in your project and note its URL, you'll need that later. Let's go! Now that you've installed mxunit-watch and saved your tests-list file. Let's auto-run some tests! The CLI requires 2 arguments in order to run your tests: -d or --dir should be set to the directory that you want to watch -l or --list should be set to the URL of the test-list file you created $ mxunit-watch -d /my/project -l http://localhost/my/project/tests/test-list.cfm Watching for file changes. Get coding!  As the output says, it's now watching for changes. Any time you save a change to a .cfm, .cfc, or .xml file, your entire test suite will run. Other options -H [hostname] to set the hostname used to run tests -e [list] to set the list of extensions to watch. by default this is cfm,cfc,xml. Specify as a comma separated list of extensions. Example: cfm,xml,cfc,js -h for help -V for version --debug will print out some debug information at startup --save will save your hostname, list and debug settings to a .mxunit-watch file in your watch directory (see below for more information) .mxunit-watch You can create an .mxunit-watch file in your watch directory (the -d or --dir option). This can hold your list, host and debug settings. Simply create a JSON file in the watch directory using the following format: {     ""host"": ""localhost"",     ""list"": ""http://localhost/my/project/tests/test-list.cfm"",     ""debug"": true,     ""extensions"": [         ""cfm"",         ""cfc"",         ""xml""     ] } host should be the hostname parameter list should be the URL to the list of tests debug can be true or false and indicates whether or not debugging output should appear in the console extensions is an array of extensions to watch Grunt Task You can also use this as a Grunt task. Read the Grunt docs if you are unfamiliar with Grunt. To setup your task, in your Gruntfile.js file add: grunt.loadNpmTasks('mxunit-watch'); and within your grunt.initConfig({...}); block add: mxunit: {     options: {         host: ""localhost"",         list: ""http://localhost/list-tests.cfm""     } } You can then run your tests with grunt mxunit This is compatible with grunt-contrib-watch as well. Example: watch: {     mxunit: {         files: [             '**/*.cfm',             '**/*.cfc'         ],         tasks: [ ""mxunit"" ]     } } That tells the watch task to watch all *.cfm and *.cfc files for changes, and will run the mxunit task whenever one of those files changes. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/atuttle/mxunit-watch"	"watch a directory for file changes (.cfc.cfm.xml) to trigger mxunit test suite full run, displaying results in the console"	"true"
"Testing"	"TestBox"	"https://github.com/Ortus-Solutions/TestBox"	"BDD style unit testing framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"5"	"22"	"GitHub - Ortus-Solutions/TestBox: TestBox is a next generation testing framework for ColdFusion (CFML) that is based on BDD (Behavior Driven Development) for providing a clean obvious syntax for writing tests. It also includes MockBox, our mocking and stubbing framework. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 14 Fork 22 Ortus-Solutions/TestBox Code Pull requests 1 Pulse Graphs TestBox is a next generation testing framework for ColdFusion (CFML) that is based on BDD (Behavior Driven Development) for providing a clean obvious syntax for writing tests. It also includes MockBox, our mocking and stubbing framework. http://www.coldbox.org 139 commits 2 branches 4 releases 11 contributors ColdFusion 81.5% HTML 18.3% CSS 0.2% ColdFusion HTML CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: development Switch branches/tags Branches Tags development master Nothing to show v2.3.0 v2.2.0 v2.1.0 v2.0.0 Nothing to show New pull request Latest commit efb0606 Jul 1, 2016 lmajano committed on GitHub Merge pull request #35 from andrew-dixon/minor-layout-issue … Fixing a minor layout issue in the browser test runner. Permalink Failed to load latest commit information. apidocs Fixed docs location Mar 10, 2016 build version bump Mar 10, 2016 system Fix typo May 26, 2016 test-browser Fixing a minor layout issue in the browser test runner. Jul 1, 2016 test-harness update to file headers Oct 1, 2015 test-runner Fixing a minor layout issue in the browser test runner. Jul 1, 2016 tests TESTBOX-140 #resolve Feb 22, 2016 .gitattributes property null checks Apr 21, 2014 .gitignore TESTBOX-166 #resolve Feb 18, 2016 .travis.yml TESTBOX-165 #resolve Feb 18, 2016 Application.cfc TESTBOX-164 #resolve Feb 18, 2016 box.json TESTBOX-165 #resolve Feb 18, 2016 license.txt first import of TestBox to new repo Apr 21, 2014 readme.md version bump Mar 10, 2016 server.json Server updates for CommandBox Feb 24, 2016 readme.md   _____         _   ____              |_   _|__  ___| |_| __ )  _____  __    | |/ _ \/ __| __|  _ \ / _ \ \/ /    | |  __/\__ \ |_| |_) | (_) >  <     |_|\___||___/\__|____/ \___/_/\_\ v@version.number@+@build.number@  TestBox is a Behavior Driven Development (BDD) and Test Driven Development (TDD) framework for ColdFusion (CFML). It also includes mocking and stubbing capabilities via its internal MockBox library. LICENSE Apache License, Version 2.0. IMPORTANT LINKS Source https://github.com/Ortus-Solutions/TestBox Bug Tracking https://ortussolutions.atlassian.net/browse/TESTBOX Documentation http://testbox.ortusbooks.com http://testbox.ortusbooks.com/content/primers/bdd/index.html http://testbox.ortusbooks.com/content/primers/xunit/index.html Official Site http://www.ortussolutions.com/products/testbox SYSTEM REQUIREMENTS Railo 4.1 (xUnit + BDD) Deprecated Lucee 4.5+ (xUnit + BDD) ColdFusion 10+ (xUnit + BDD) ColdFusion 9.02+ (xUnit style Only) TESTBOX INSTALLATION You can visit the TestBox documentation page to view all of its features and capabilities. To install TestBox just drop it in your web root as /testbox or create a mapping in your CFML administrator or Application.cfc that points to the directory you installed TestBox and create the mapping /testbox that points to it. You can also use CommandBox to install and leverage TestBox for commandline executions, test generations, watchers and much more: Stable Release box install testbox Bleeding Edge Release box install testbox-be Copyright Since 2005 by Luis Majano and Ortus Solutions, Corp www.ortussolutions.com HONOR GOES TO GOD ABOVE ALL Because of His grace, this project exists. If you don't like this, then don't read it, its not for you. ""Therefore being justified by faith, we have peace with God through our Lord Jesus Christ: By whom also we have access by faith into this grace wherein we stand, and rejoice in hope of the glory of God. And not only so, but we glory in tribulations also: knowing that tribulation worketh patience; And patience, experience; and experience, hope: And hope maketh not ashamed; because the love of God is shed abroad in our hearts by the Holy Ghost which is given unto us. ."" Romans 5:5 THE DAILY BREAD ""I am the way, and the truth, and the life; no one comes to the Father, but by me (JESUS)"" Jn 14:1-12 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Ortus-Solutions/TestBox"	"BDD style unit testing framework"	"true"
"Dependency Injection"	"ColdSpring"	"http://www.coldspringframework.org/"	"ColdSpring makes the configuration and dependencies of your CFCs easier to manage. ColdSpring brings the power of the popular Spring framework for Java to ColdFusion."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ColdSpring makes the configuration and dependencies of your CFCs easier to manage. ColdSpring brings the power of the popular Spring framework for Java to ColdFusion."	"false"
"Dependency Injection"	"DI/1 - Inject One"	"https://github.com/framework-one/di1"	"a very lightweight, convention over configuration, dependency injection (inversion of control) framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"108"	"22"	"33"	"GitHub - framework-one/di1: DI/1 - Inject One - is a very lightweight, convention over configuration, dependency injection (inversion of control) framework for ColdFusion / CFML. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 108 Fork 33 framework-one/di1 Code Pull requests 0 Pulse Graphs DI/1 - Inject One - is a very lightweight, convention over configuration, dependency injection (inversion of control) framework for ColdFusion / CFML. http://di1.riaforge.org 119 commits 1 branch 5 releases Fetching contributors ColdFusion 100.0% ColdFusion Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.1.1 v1.1.0 v0.5 v0.4.9 v0.4.8 Nothing to show New pull request Latest commit 8e06e47 Dec 26, 2015 seancorfield Sync v1.1.1 back from FW/1 3.5.0 Permalink Failed to load latest commit information. .gitignore Create a proper test suite. Dec 27, 2011 README.md Update README to point to FW/1 repo. Jul 13, 2015 ioc.cfc Sync v1.1.1 back from FW/1 3.5.0 Dec 26, 2015 README.md DI/1 is a simple convention-based dependency injection (inversion of control) framework. DI/1 is part of the FW/1 family of components. All development work occurs in that repo. This repo is provided purely as a convenience for users who want just DI/1 as a standalone component. Usage Initialize it with a comma-separated list of folders to scan for CFCs: var beanfactor = new ioc(""/model,/shared/services"");  CFCs found in a folder called beans are assumed to be transient. All other CFCs are assumed to be singletons. This can be overridden via optional configuration. DI/1 supports constructor injection, setter injection and property-based injection. All injection is done by name. If a bean name is unique, it can be used as-is, else the bean will have an alias which is the bean name followed by its immediate parent folder name, e.g., /model/beans/user.cfc will be ""user"" and ""userBean"" /model/services/product.cfc will be ""product"" and ""productService""  Folder names may be singular or plural. DI/1 assumes that if a folder name ends in ""s"" it can remove that to get the singular name. See the DI/1 documentation for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/framework-one/di1"	"a very lightweight, convention over configuration, dependency injection (inversion of control) framework"	"true"
"Dependency Injection"	"Wirebox"	"http://wiki.coldbox.org/wiki/WireBox.cfm"	"The Enterprise Dependency Injection Framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ColdBox Platform Wiki - WireBox : The Enteprise Dependency Injection AOP Framework  All the new ColdBox, CacheBox, WireBox, TestBox and LogBox docs can be found here: https://www.gitbook.com/@ortus coldbox.org >> About Downloads Code ForgeBox Support Training Media API Blog Jobs Docs Home Quick Index Introduction ColdBox Overview Directory Layout & Conventions Request Life Cycles Application Bootstrapper Configuring Application Configuration Using configuration settings Fun Logging with LogBox Models ColdBox Models Dependency Injection via WireBox Active Entity Built-in ORM Services Hibernate Criteria Builder ORM Event Handling Views Layouts and Rendering in ColdBox Controllers Event Handlers ColdBox SES URL Mappings Object and Form Validation Request Context Request Context Extending the Request Context Tumble Down The Rabbit Hole... Handling Exceptions Flash RAM & Webflows Ajax Integration Powering Flex/Air/SOAP/REST Apps Caching with CacheBox Localization & i18n ColdBox Security Aspect Oriented Programming ColdBox Recipes Extending ColdBox ColdBox Modules & Architecture ColdBox Plugins Core Plugins Browser ColdBox Interceptors Core Interceptors Browser Testing TestBox Testing Framework TestBox BDD Primer TestBox xUnit Primer Testing ColdBox Applications Mocking-Stubbing with MockBox Tools, IDE Extras ColdBox Platform Utilities IDE Syntax Dictionaries Standalone Projects ColdBox Cheatsheet API Docs Directory SideBar My Dashboard Help Rss Feeds Category Listing Page Directory Namespace Directory User Login Username Password Submitting... Forgot Password?         WireBox last edited bybdw429s on 11-Nov-2014 History  << Back to Dashboard Contents WireBox: The Enterprise Dependency Injection Framework Introduction Overview WireBox RefCard Useful Resources Training, Presentations, More Features At A Glance Installing WireBox Standalone ColdBox Download System Requirements Installation Dependency Injection Explained Advantages of a DI Framework Getting Jiggy Wit It! Instance Creations Binder Introduction Scoping Scope Annotations Scope Configuration Binder Internal Scopes Eager Init How WireBox Resolves Dependencies Instance Creation Dependency Resolution The WireBox Injector Injector Constructor Arguments Injection Idioms Common Methods Configuring WireBox Binder Configuration Properties ColdBox Enhanced Binder Types & Scopes this.TYPES. this.SCOPES. Implicit Configuration Settings logBoxConfig cachebox scopeRegistration customDSL customScopes scanLocations stopRecursions parentInjector listeners Mapping DSL WireBox Configuration Mapping Initiators MapDirectory() Influence & Filters Mapping Destinations Persistence DSL Dependencies DSL Mapping Extra Attributes Component Annotations Scope Persistence Annotations CacheBox Integration Injection DSL Property Annotation Constructor Argument Annotation Setter Method Annotation ID-Model-Empty Namespace Provider Namespace WireBox Namespace CacheBox Namespace EntityService Namespace LogBox Namespace Java Namespace ColdBox Namespace ORM Entity Injection Virtual Inheritance Runtime Mixins() Parent Object Definitions WireBox Event Model WireBox Events WireBox Listeners ColdBox Mode Listener Standalone Mode Listener Providers Custom Providers toProvider() closures Virtual Provider Injection DSL Virtual Provider Mapping DSL Virtual Provider Lookup Methods Provider onMissingMethod Proxy Scope Widening Injection Object Persistence & Thread Safety Custom DSL Builder The DSL Builder Interface Registering a custom DSL builder Custom Scopes The Scope Interface Scoping Process Registering A Custom Scope WireBox IInjector Interface WireBox ORM Services WireBox Object Populator populateFromXML Returns Arguments populateFromQuery Returns Arguments populateFromStruct Returns Arguments populateFromQueryWithPrefix Returns Arguments populateFromJSON Returns Arguments Mapping DSL Examples WireBox: The Enterprise Dependency Injection Framework Covers up to version 1.7 Introduction WireBox is an enterprise ColdFusion dependency injection and AOP framework. This project has been part of ColdBox since its early version 2.0 releases but it is also a standalone library that can be used in ANY ColdFusion application or framework. WireBox's inspiration has been based on the idea of rapid workflows when building object oriented ColdFusion applications, programmatic configurations and simplicity. With that motivation we introduced dependency injection by annotations and conventions, which has been the core foundation of WireBox. We have definitely been influenced by great DI projects like Google Guice, Grails Framework, Spring and ColdSpring so we thank them for their contributions and inspiration. Overview Dependency injection is the art of making work come home to you. - Dhanji R. Prasanna WireBox alleviates the need for custom object factories or manual object creation in your ColdFusion applications. It provides a standardized approach to object construction and assembling that will make your code easier to adapt to changes, easier to test, mock and extend. As software developers we are always challenged with maintenance and one ever occurring annoyance,change. Therefore, the more sustainable and maintainable our software, the more we can concentrate on real problems and make our lives more productive. WireBox leverages an array of metadata annotations to make your object assembling, storage and creation easy as pie! We have leveraged the power of event driven architecture via object listeners or interceptors so you can extend not only WireBox but the way objects are analyzed, created, wired and much more. To the extent that ourAOP capabilities are all driven by our AOP listener which decouples itself from WireBox code and makes it extremely flexible. We have also seen the value of a central location for object configuration and behavior so we created our very own WireBox Programmatic Mapping DSL (Domain Specific Language) that you can use to define object construction, relationships, AOP, etc in pure ColdFusion (No XML!). We welcome you to stick around and read our documentation so you can see the true value of WireBox in your web applications. Fact : WireBox has been running and powering mission critical ColdFusion applications since 2009 and now you can too. WireBox RefCard Our WireBox RefCard will get you up and running in no time. Useful Resources http://code.google.com/p/google-guice http://www.manning.com/prasanna/ http://en.wikipedia.org/wiki/Aspect-oriented_programming http://en.wikipedia.org/wiki/Dependency_injection http://en.wikipedia.org/wiki/Inversion_of_control http://martinfowler.com/articles/injection.html http://www.theserverside.com/news/1321158/A-beginners-guide-to-Dependency-Injection http://www.developer.com/net/net/article.php/3636501 http://code.google.com/p/google-guice/ Training, Presentations, More ColdBox Connection: Introducing WireBox <p><a href=""http://vimeo.com/26130059"" rel=""nofollow"">CFMeetup : WireBox Dependency Injection &#38; AOP</a> from <a href=""http://vimeo.com/lmajano"" rel=""nofollow"">Luis Majano</a> on <a href=""http://vimeo.com"" rel=""nofollow"">Vimeo</a>.</p> Features At A Glance Here are a simple listing of features WireBox brings to the table: Annotation driven dependency injection 0 configuration mode or a programmatic binder configuration approach via ColdFusion (No XML!) Creation and Wiring of or by: ColdFusion Components Java Classes RSS Feeds WebService objects Constant values DSL string building Factory Methods Multiple Injection Styles: Property, Setter, Method, Constructor Automatic Package/Directory object scanning and registration Multiple object life cycle persistence scopes: No Scope (Transients) Singletons Request Scoped Session Scoped Application Scoped Server Scoped CacheBox Scoped Integrated logging via LogBox, never try to figure out what in the world the DI engine is doing Parent Factories Factory Method Object Creations Object life cycle events via WireBox Listeners/Interceptors Customizable injection DSL WireBox object providers to avoid scope-widening issues on time/volatile persisted objects Aspect Oriented Programming Standalone ORM Entity Injection Installing WireBox WireBox can be downloaded as a separate framework or it is included with the latest ColdBox Platform release. The main difference between both versions is the instantiation and usage namespace, the rest is the same. Standalone wirebox.system.ioc ColdBox coldbox.system.ioc Download Download WireBox Download API Docs System Requirements ColdFusion 8 and above Railo 3.1 and above Installation If you are using WireBox within a ColdBox application context, then WireBox is part of the platform. Just install ColdBox normally. If you are using WireBox standalone, just drop WireBox in your application root or create a mapping called wirebox that points to the installation folder. If you can run the following snippet, then WireBox is installed correctly:  wirebox = createObject(""component"",""wirebox.system.ioc.Injector"").init();  Note: Please remember that if you use the standalone version the namespace is wirebox.system.ioc and if you use the ColdBox application version it is coldbox.system.ioc. From this point on, we will use the standalone namespace for simplicity. Dependency Injection Explained We have released one of our chapters from our CBOX202: Dependency Injection course that deals with getting started with Dependency Injection, the problem, the benefits and the solutions. We encourage you to download it, print it, share it, digest it and learn it: http://ortus-public.s3.amazonaws.com/cbox202-unit1-3.pdf Advantages of a DI Framework Compared to manual DI, using WireBox can lead to the following advantages: You will write less boilerplate code. By giving WireBox DI responsibilities, you will stop creating objects manually or using custom object factories. You can leverage object persistence scopes for performance and scalability. Even create time persisted objects. You will not have any object creation or wiring code in your application, but have it abstracted via WireBox. Which will lead to more cohesive code that is not plagued with boilerplate code or factory code. Objects will become more testable and easier to mock, which in turn can accelerate your development by using a TDD (Test Driven Development) approach. Once WireBox leverages your objects you can take advantage of AOP or other event life cycle processes to really get funky with OO. Getting Jiggy Wit It! A primer to WireBox usage Dependency injection and instance construction with WireBox is easy. In its most simplest form we can just leverage annotations and be off to dancing Big Willy style! You can use our global injection annotation inject on cfproperties, setter methods or constructor arguments. This annotation tells WireBox to inject something in place of the property, argument or method; basically it is your code shouting ""Hey buddy, I need your help here"". What it injects depends on the contents of this annotation that leverages our injection DSL (Domain Specific Language). The simplest form of the DSL is to just tell WireBox what mapping to bring in for injection. Please note that I say mapping and not object directly, because WireBox works on the concept of an object mapping. This mapping in all reality can be a CFC, a java object, an RSS feed, a webservice, a constant value or pretty much anything you like. If you don't like annotations because you feel they are too intrusive to your taste, don't worry, we also have a programmatic configuration binder you can use to define all your objects and their dependencies. We will discuss object mappings and our configuration binders later on, so let's look at how cool this is by checking out our Coffee Shop sample class. The CoffeeShop class below will use our three types of injections to showcase how WireBox works, please note that most likely we would build this class by picking one or the other, which in itself brings in pros and cons for each approach.  component name=""CoffeeShop"" singleton{  // define a property and tell WireBox to inject it property name=""espressoMachine"" inject=""id:espressoMachine"";          function init(any owner inject){  		variables.owner = arguments.owner; 		return this;  	} 	 	function openShop() onDiComplete{ 		espressoMachine.turnOn(); 		owner.nap(); 	} 	 	function setCashRegister(cashRegister) inject=""id""{ 		variables.cashRegister= arguments.cashRegister; 	}          function makeEspresso(){     	return espressoMachine.makeEspresso();     } }  So let's break this class down. First, you can see a singleton annotation on the component declaration. This tells WireBox that this class should only be created once and then cached in its internal singleton scope of the injector. In other words, this is called object life scopes. You can refer to the persistence scopes annotations later on in the guide to learn all about how to scope your classes. Second, we built our coffee shop class with three external dependencies: 1 by cfproperty, 1 by constructor argument and 1 by setter injection. Again, you can see later on in this guide the difference between all these injection styles and choose what you prefer. In this example, we just showcase the different injection styles. Also, as you can see from the source code the three types of injection uses the inject annotation but with different content:  1. property name=""espressoMachine"" inject=""id:espressoMachine""; 2. function init(any owner inject) 3. function setCashRegister(cashRegister) inject=""id""  If you just mark a property, argument or method with the inject annotation, WireBox will assume it is a mapping and the ID should be either the property name, the argument name or the method name. However, if you want to specify the id in the DSL string, just use the simple id:{mapping} dsl notation. That's it! Isn't that cool, you just mark out your dependencies and WireBox will build and inject them for you! Thirdly, this class has the following method:  function openShop() onDIComplete{ 	espressoMachine.turnOn(); 	owner.nap(); } // or <cffunction name=""openShop"" returnType=""void"" output=""false"" onDIComplete> </cffunction>  The method has a cool little annotation called onDIComplete that tells WireBox that after all DI dependencies have been injected, then execute the method. That is so cool, WireBox can even open the coffee shop for me so I can get my espresso fix. Not only that but you can have multiple onDIComplete methods declared and WireBox will call them for you (in discovered order). These are called object post processors that are discovered by annotations or can be configured via our configuration binder and we will learn about them later on. WireBox also fires a series of object life cycle events throughout an object's life span in which you can build listens to and actually perform some cool stuff on them. So now that we got all excited about opening the coffee shop let's get into something even more interesting, unit testing and mocking. Another important aspect leveraging DI concepts when building our components is that we can immediately write tests for them and leverage mocking to test for actual behaviors. This is a great advantage as it allows you to rapidly test to confirm your component is working without worrying about building or assembling objects in your tests. You have eliminated all kinds of crazy creation and assembler code and just concentrated yourself on the problem at hand. You are now focused to code the greatest piece of software you have ever imagined, thanks to WireBox! So let's build our unit test (Please note we use our base ColdBox testing classes for ease of use and MockBox integration):  component extends=""coldbox.system.testing.BaseModelTest""{  	function setup(){ 		// mock some owner 		mockOwner = getMockBox.createEmtpyMock(""Owner"");     	// create our coffee shop class with mocking capabilities 		shop = getMockBox().createMock(""CoffeeShop"").init(mockOwner); 		// mock the espresso machine 		mockMachine = getMockBox().createEmptyMock(""EspressoMachine"");  		// inject to the shop's variables scope to simulate DI         shop.$property(""espressoMachine"",""variables"",mockMachine); 	}  	function testMakeEspresso(){ 		// mock methods 		mockMachine.$(""makeEspresso"", createStub()); 		 // test         shop.makeEspresso();         assertTrue( mockMachine.$once('makeEspresso') );     } 	 	function testOpenShop(){ 		//mocks 		mockMachine.$(""turnOn""); 		mockOwner.$(""nap""); 		// test 		shop.openShop(); 		assertTrue( mockMachine.$once('turnOn') ); 		assertTrue( mockOwner.$once('nap') ); 	} }  Now we can run our tests and verify that our coffee shop is operational and producing sweet sweet espresso! Instance Creations We have now coded our classes and unit tests with some cool annotations in record time, so what do we do next? Well, WireBox works on the idea of three ways to discover and create your classes: Approach Motivation Pros Cons Implicit Mappings To replace createObject() calls Very natural as you just request an object by its instantiation path. Very fast prototyping. Refactoring is very hard as code is plagued with instantiation paths everywhere. Not DRY. Explicit Mappings To replace createObject() calls with named keys DRY, you can create multiple named mappings that point to the same blueprint of a class. Create multiple iterations of the same class. Very nice decoupling. Not as fast to prototype as we need to define our mappings before hand in our configuration binder. Scan Locations CFC discovery by conventions A partial instantiation path(s) or folder(s) are mapped so you can retrieve by shorthand names. Very quick to prototype also without using full instantiation paths. Override of implementations can be easily done by discovery. Harder concept to digest, not as straightforward as implicit and explicit locations. So let's do examples for each where our classes we just built are placed in a directory called model of the root directory. Implicit Creation  injector = createObject(""component"",""wirebox.system.ioc.Injector"").init(); espresso = injector.getInstance(""model.CoffeeShop"").makeEspresso();  Explicit Binder Configuration  map(""CoolShop"").to(""model.CoffeeShop"");  Explicit Creation  injector = createObject(""component"",""wirebox.system.ioc.Injector"").init(); espresso = injector.getInstance(""CoolShop"").makeEspresso();  Scan Locations Binder Configuration  wirebox.scanLocations = [""model""];  Scan Locations Creation  injector = createObject(""component"",""wirebox.system.ioc.Injector"").init(); espresso = injector.getInstance(""CoffeeShop"").makeEspresso();;  So our recommendation is to always try to create configuration binders as best practice, but your requirements might dictate something else. Binder Introduction In all reality we could be building our objects and its dependencies, object graph, without any configuration just plain location and implicit conventions. This is great but not very flexible for refactoring, so let's do the best practice of defining a mapping or an alias to a real object. We do this by creating a WireBox configuration binder (wirebox.system.ioc.config.Binder), which is a simple CFC that defines the way WireBox behaves and defines object mappings. This binder is then used to initialize WireBox so it has knowledge of these mappings and our settings. <div class=""mynotes""> <p><b>Note:</b> Building object graphs manually is tedious, error prone and makes testing very difficult. That is what Inversion of Control is all about, you will surrender creation and wiring control to somebody else. Come on! Don&#39;t hold on! Release! Say it with me: Release! </p></div> <pre class=""code""> component extends=<span style=""color:#2A00FF; "">&#34;coldbox.system.ioc.config.Binder&#34;</span>{ <span style=""color:#7F0055; font-weight: bold; "">public</span> configure(){ <span style=""color:#3F7F5F; "">// Map the espresso machine </span> map(<span style=""color:#2A00FF; "">&#34;espressoMachine&#34;</span>) .to(<span style=""color:#2A00FF; "">&#34;model.EspressoMachine&#34;</span>) .asSingleton(); <span style=""color:#3F7F5F; "">// or in a more short manner, map a path and the id becomes the name of the CFC </span> mapPath(<span style=""color:#2A00FF; "">&#34;model.EspressoMachine&#34;</span>).asSingleton(); <span style=""color:#3F7F5F; "">// map the coffee shop if you want, remember we can wire by conventions also </span> mapPath(<span style=""color:#2A00FF; "">&#34;model.CoffeeShop&#34;</span>).asSingleton(); <span style=""color:#3F7F5F; "">// map the owner </span> mapPath(<span style=""color:#2A00FF; "">&#34;model.Owner&#34;</span>).asSingleton(); } } </pre> <div class=""mynotes""> <p><b>Important</b>: All objects in WireBox are considered to exist in the <i>No Scope</i> or are transient objects. You must specifically tell WireBox in what scope to persist objects like singletons, time persisted, etc. </p></div> <p>Easy enough? We use the object map binding DSL that tells WireBox how to map objects. You can also read it from left to right and it will make sense: &#34;map <i>EspressoMachine</i> to the <i>model.EspressoMachine</i> CFC and treat it as a <i>singleton</i>. How cool is that! The last part is putting it together:</p><pre class=""code""> <span style=""color:#3F7F5F; "">// create wirebox with our configuration binder &#34;MyBinder&#34;, this is the instantiation path. </span>wirebox = <span style=""color:#7F0055; font-weight: bold; "">createObject</span>(<span style=""color:#2A00FF; "">&#34;component&#34;</span>,<span style=""color:#2A00FF; "">&#34;wirebox.system.ioc.Injector&#34;</span>).init(<span style=""color:#2A00FF; "">&#34;config.MyBinder&#34;</span>); <span style=""color:#3F7F5F; "">// make some delicious espresso </span>awesomeEspresso = wirebox.getInstance(<span style=""color:#2A00FF; "">&#39;CoffeShop&#39;</span>).makeEspresso(); </pre> <div class=""mynotes""> <p><b>Note:</b> Binder configuration takes precedence over annotations. </p></div> <p>Again, we recommend you create mappings for your objects as it decouples them from their exact instantiation locations, which WireBox should only know about. This makes refactoring much easier and you can name your objects as you please as you only refer to them via aliases. Please note that WireBox helps eliminate all this creation and wiring boilerplate code and makes our software much more maintainable and testable than before. We can very easily change object implementations and change behavior without any coding at all. We are always in search of the holy grail of OO, decoupling and cohesion; hopefully WireBox can take you a little closer to perfection. So now that you have seen a little about WireBox, let&#39;s get our feet wet and start dancing Willy style!</p> Scoping We touched briefly on singleton and no scope objects in this section, so let's delve a little into what scoping is. WireBox's default behavior is to create a new instance of an object each time you request it via creation or injection (Transient/Prototype objects), this is the NO SCOPE scope. Scopes allow you to customize the object's life span and duration. The singleton scope allows for the creation of only one instance of an object that will live for the entire life span of the injector. WireBox ships with several different life span scopes but you can also create your own custom scopes (please see the custom scopes section). You can also tell WireBox in what scope to place the instance into by annotations or via the configuration binder. We have an entire section dedicated to discovering all the WireBox annotations, but let's get a sneak peek at them and also how to do it via our mapping DSL. Scope Annotations You can tag a cfcomponent tag or component declaration with a scope={named scope} annotation that tells WireBox what scope to use You can have nothing on the cfcomponent tag or component declaration which denotes the NO SCOPE You can tag a cfcomponent tag or component declaration with a singleton annotation Scope Configuration Binder  component extends=""wirebox.system.ioc.config.Binder""{ 	 	function configure(){ 		 		// map with shorthand or full scope notation 		mapPath(""model.CofeeShop"").asSingleton(); 		mapPath(""model.CofeeShop"").into(this.SCOPES.SINGLETON); 		// map some long espresso into request scope 		map(""longEspress"") 			.to(""model.Espresso"") 			.into(this.SCOPES.REQUEST); 		// cache some tea 		map(""GreenTea"") 			.to(""model.Tea"") 			.inCacheBox(timeout=20,provider=""ehCache""); 		// cache some google news that refresh themselves every 40 minutes or after 20 minutes of inactivity 		map(""latestNews"") 			.inCacheBox(timeout=40,lastAccessTimeout=20,provider=""ehCache""); 			.toRSS(""http://news.google.com/news?output=rss"") 	} 	 }  Note: In the configuration binder section you will see where the this.SCOPES enumeration class comes from. Internal Scopes Here are the internal scopes that ship with WireBox: Scope Description NOSCOPE A prototype object that gets created every time it is requested. PROTOTYPE A prototype object that gets created every time it is requested. SINGLETON Only one instance of the object exists SESSION The object will exist in the session scope APPLICATION The object will exist in the application scope REQUEST The object will exist in the request scope SERVER The object will exist in the server scope CACHEBOX A object will be time persisted in any CacheBox cache provider This is cool! We can now have full control of how objects are persisted via the WireBox injector, we are not constricted to one type of persistence anymore. Important : If you use a persistence scope that expires after time like session, request, cachebox, etc, you will experience a side effect called scope widening injection. WireBox offers a solution to this side effect via WireBox Providers, which we will cover in detail. Eager Init Another aspect of our objects is when are they created? Good question! By default all objects are created ONLY when they are requested, in other words they are lazy created. But what if you are spoiled and you want your stuff NOW NOW NOW! Well, you can, you rude little brat! Just tell WireBox that you want your objects to be eagerly created. How? Via the mapping DSL and our cool asEagerInit() function.  component extends=""wirebox.system.ioc.config.Binder""{ 	 	function configure(){ 		 		// map with shorthand or full scope notation 		mapPath(""model.CofeeShop"") 			.asSingleton() 			.asEagerInit(); 	} 	 }  How WireBox Resolves Dependencies Most of the time we believe our DI engines should be black boxes, but we try to think otherwise. We encourage developers to know what is going on so they can debug easily and not hit their foreheads against their keyboards. Believe me, I have done so before. That is why WireBox is tightly integrated with LogBox to provide incredible debugging information to ANY appender you desire so you can know what is going on. Another aspect of knowing what the DI engine does is how dependencies are resolved. Here is a typical flow of injection: Instance Creation Object is requested by name and the Injector tries to check if the mapping exists for that name. If no mapping is found then it tries to locate the object by using the internal scan locations to try to find it. If it cannot find it and there is a parent injector defined, then the request is funneled to the parent injector and we start our process again. If no parent injector is declared and no localization, then we throw a not located exception. If the object was found via the scan locations, then we register a new mapping according to its location and discover all the metadata out of the object in preparation for construction and DI We now have a guaranteed mapping so we retrieve it and we verify if the mapping's metadata has been processed or not. If the mapping is marked with no autowiring then we skip to the next step. If not, we process the mapping's metadata and prepare it for DI We verify that the scope define for the mapping exists, else we throw an invalid scope exception We ask the scope to produce the mapping object for us. The scope is in charge of persistence, locking, etc. The scope builds the instance by asking the injector to build a new instance with the correct constructor and constructor arguments and stores it in its scope once the injector builds it. The builder decides what type of construction is needed for the mapping as it can be a CFC, java object, webservice, RSS feed, factory method call, etc. Each constructor argument is processed for dependency resolution. The scope then sends the instance for DI wiring and process back to the injector The injector returns the instance Dependency Resolution Arrive at the desired injection point and get the injection DSL. If the DSL is empty, then it defaults to the id/model namespace. For this injection DSL Namespace we try to find a valid DSL builder for it. If none is found an exception is thrown. If we have a match, then the DSL builder is called with the DSL string to retrieve. The DSL builder then tries to parse and process the DSL string for object retrieval. If the DSL is a WireBox mapping then we try to retrieve the instance by name (Refer back to Instance Creation). If the builder could not produce an instance, it is logged and DI is skipped on it. Important: Circular dependencies are supported in all injection styles within WireBox. With one caveat, if you choose constructor arguments with circular dependencies, you must use object providers. The WireBox Injector WireBox bases itself on the idea of creating object injectors (wirebox.system.ioc.Injector) that in turn will produce and wire all your objects. You can create as many injector instances as you like in your applications, each with configurable differences or be linked hierarchically by setting each other as parent injectors. Each injector can be configured with a configuration binder or none at all. If you are a purely annotations based kind of developer and don't mind requesting pathed components by convention, then you can use the no-configuration approach and not even have a single configuration file, all using autowiring and discovery of conventions. However, if you would like to alter the behavior of the injector and also create object mappings, you will need a configuration binder. The next section explains the way to create this configuration binder, below is how to startup or bootstrap the injector in different manners: No Configuration Binder:   myObject = createObject(""component"",""coldbox.system.ioc.Injector"").init().getInstance(""my.object"");  With a Configuration Binder:   myObject = createObject(""component"",""coldbox.system.ioc.Injector"").init(""myBinderPath"").getInstance(""CoolObject"");  The WireBox injector class is the pivotal class that orchestrates DI, instance events and so much more. We really encourage you to study its API Docs to learn more about its construction and usage methods. Injector Constructor Arguments The injector can be constructed with three optional arguments: Argument Type Required Default Description binder instance or instantiation path false wirebox.system.ioc.config.DefaultBinder The binder instance or instantiation path to be used to configure this WireBox injector with properties struct false structnew() A structure of name value pairs usually used for configuration data that will be passed to the binder for usage in configuration. coldbox coldbox.system.web.Controller false null A reference to the ColdBox application context you will be linking the Injector to. If you are using WireBox within a ColdBox application, you don't even need to do any of this, we do it for you by using some configuration data in your ColdBox configuration file or conventions. Please see the ColdBox application section for more information. Injection Idioms Now that we have constructed our injector let's discuss a little about injection idioms or styles WireBox offers before we go all cowboy and start configuring and using this puppy. Below is a nice chart that showcases the WireBox injection styles, but we really encourage you to review our dependency injection section to learn the different approaches to DI, their values, and when to use them. Injection Location Injection Order Motivation Comments Constructor First Mandatory dependencies for object creation Each constructor argument receives a inject annotation with its required injection DSL. Be careful when dealing with object circular dependencies as they will fail via constructor injection due to its chicken and the egg nature. CFProperty Second Great documentable approach to variable mixins to reduce getter/setter verbosity Leverages the greatest aspect of ColdFusion, dynamic language, to mixin variables at runtime by using the cfproperty annotations. Great for documentation and visualizing object dependencies and safe for circular dependencies. Cons is that you can not use the dependencies in an object's constructor method. Setter Methods Third Legacy classes The inject annotation MUST exist on the setter method if the object is not mapped. Mapping must be done if you do not have access to the source or you do not want to touch the source. These are the three injection styles that WireBox supports and which style you choose depends on your requirements and also your personal taste. The setter method approach is linked to the way Spring and ColdSpring approach it which is the traditional JavaBean style of setXXX where XXX is the name of the mapping or object to pass into the setter method for injection. Note: Whichever injection style you use with WireBox, the target's visibility does not matter. This means that you can create private or package methods and WireBox will still inject them for you. This is absolutely great when you are an encapsulation freak and you do not want to expose public setter methods. Common Methods The following chart shows you the most common methods when dealing with the WireBox Injector. This doesn't mean there are no other methods on the Injector that are of value, so please check out the CFC Docs for more in-depth knowledge. Method Signature Comments autowire(target,[mapping],[targetID],[annotationCheck]) A method you can use to send objects to get autowired by convention or mapping lookups clearSingletons() A utility method that clears all the singletons from the singleton persistence scope. Great to do in development. containsInstance(name) Checks if an instance can be created by this Injector or not getBinder() Get the configuration binder for this injector getInstance([name],[dsl],[initArguments]) The main method that asks the injector for an object instance by name or by autowire DSL string. getObjectPopulator() Retrieve the ColdBox object populator that can populate objects from JSON, XML, structures and much more. getParent() Get a reference to the parent injector (if any) getScope(name) Get a reference to a registered persistence scope setParent(injector) Set a parent injector into the target injector to create hierarchies Configuring WireBox You can configure WireBox in two approaches: 1. Create a simple configuration CFC that has a configure(binder) method that accepts a WireBox configuration binder object   component{ 	function configure(required binder){ 	 	} }  2. Create a configuration CFC that extends the WireBox configuration object: coldbox.system.ioc.config.Binder and has a configure() method.   component extends=""coldbox.system.ioc.config.Binder""{ 	function configure(){ 	 	} }  The latter approach will be less verbose when talking to the mapping DSL the Binder object exposes. However, both are fully functional and matter of preference. From the configure() method you will be able to interact with the Binder methods or creating implicit DSL structures in order to configure WireBox for operation and also to create object mappings. Please also note that the Binder itself has a reference to the current Injector it belongs to (getInjector()). Binder Configuration Properties Whether you use WireBox standalone or within a ColdBox context a Binder gets a structure of configuration properties so it can use them whenever you are configuring it or declaring mappings. If you are in standalone mode, the Injector can be constructed with a properties structure that will be passed to the binder for usage. If you are in a ColdBox application the ColdBox application configuration structure is passed for you. You can then use these properties with the following methods: getProperty(name,[default]) : Get a specific property getProperties() : Get all the properties structure propertyExists(name) : Check if a property exists setProperty(name,value) : Dynamically add properties to the structure ColdBox Enhanced Binder If you are using your configuration binder within a ColdBox application you will have some extra goodies in the Binder that come in very handy: getColdBox() : Retrieve the instance of the running ColdBox application getAppMapping() : Get the current AppMapping setting for the running ColdBox application  // map the model folder mapDirectory( getAppMapping() & "".model"" );  Types & Scopes Each configuration binder has two public properties accessible in the this scope: this.TYPES : A reference to coldbox.system.ioc.Types used to declare what type of object you are registering for construction or wiring this.SCOPES : A reference to coldbox.system.ioc.Scopes used to declare in what life cycle scope the object will be stored under These two classes contain static public members in the this scope that facilitate the declaration of persistence scopes and construction types for object mappings. Below are the valid enumerations for these two classes: this.TYPES. CFC : Construction of a CFC JAVA : Construction of a Java class WEBSERVICE : Construction of a webservice object RSS : Construction of an RSS feed DSL : Construction by DSL string CONSTANT : A constant value FACTORY : Construction by factory method this.SCOPES. NOSCOPE : Transient objects PROTOTYPE : Transient objects SINGLETON : Objects constructed only once and stored in the injector SESSION : ColdFusion session scoped based objects APPLICATION : ColdFusion application scope based objects REQUEST : ColdFusion request scope based objects SERVER : ColdFusion server scope based objects CACHEBOX : CacheBox scoped objects Implicit Configuration Settings In this configure() method you can create a structure called wirebox in the variables scope that will hold the configuration data for WireBox. The following are the keys you can create in this structure: Key Type Required Default Description logBoxConfig instantiation or xml path false coldbox.system.ioc.config.LogBox The LogBox configuration to use when logging. If you are within a ColdBox application context, this value is ignored. cacheBox struct false {enabled=false} A structure that defines the tight integration between WireBox and CacheBox (explained below). If you are within a ColdBox application context, this value is ignored. scopeRegistration struct false {enabled=true,scope=""application"",key=""wirebox""} A structure that tells WireBox to register itself into ANY ColdFusion scope once instantiated. By default, each injector get's loaded into application scope with a key of wireBox, which we encourage you to modify. customDSL struct false {} A structure where you will register your own DSL Namespace implementations. Please refer to our Custom DSL section. customScopes struct false {} A structure where you will register your own object scope implementations. Please refer to our Custom Scopes section. scanLocations array false [] An array of instantiation locations WireBox will use (in order) when searching for objects when they are requested by convention. stopRecursions array false [] An array of class paths that WireBox will detect when inspecting objects for dependencies and STOP the inspection when doing inheritance recursion. parentInjector object false --- The actual instance to a parent injector you would like to configure this injector with. listeners array of structs false --- A array of listener definitions that will be registered with this injector and listen to object life cycle events. Please note that it is completely optional to use the implicit structure configuration. You can use the programmatic methods instead. Each configuration key has the same method in the binder for programmatic configuration. logBoxConfig A string containing the path of the LogBox configuration file. If you are using WireBox within a ColdBox application this setting is ignored.  wirebox.logBoxConfig = ""coldbox.system.ioc.config.LogBox"";  cachebox If you are using WireBox within a ColdBox application this setting is ignored. The following are the keys for this configuration structure: Key Type Required Default Description enabled boolean false false Enables CacheBox integration configFile config path false coldbox.system.ioc.config.CacheBox The CacheBox configuration file to use when creating CacheBox cacheFactory object false --- A reference to an already instantiated CacheBox factory to use with this Injector classNamespace class path false coldbox.system.cache The default namespace location of CacheBox. If using the standalone version of CacheBox you most likely will change this to cachebox.system.cache, else ignore this setting.  wirebox.cacheBox = { 	enabled = false,  	configFile = ""coldbox.system.ioc.config.CacheBox"", //An optional configuration file to use for loading CacheBox 	cacheFactory = """", //A reference to an already instantiated CacheBox CacheFactory 	classNamespace = """" //A class path namespace to use to create CacheBox: Default=coldbox.system.cache or wirebox.system.cache };  scopeRegistration This structure tells WireBox how to leach itself into any ColdFusion scope when initialized. Key Type Required Default Description enabled boolean false true Enables scope registration scope CF Scope true application The ColdFusion scope key string true wirebox The key to use in the ColdFusion scope when registering  wirebox.scopeRegistration = { 	enabled = true, 	scope   = ""application"", // server, cluster, session, application 	key		= ""wireBox"" };  customDSL Please refer to the Custom DSL section to find out more about custom DSLs, the following are just the way you declare them: Key Type Required Default Description {DSLNamespace} string true --- The value of the DSL Namespace is the instantiation path of the DSL Namespace builder that implements coldbox.system.ioc.DSL.IDSLBuilder  wirebox.customDSL = { 	cool = ""my.path.CoolDSLBuilder"", 	funkyBox = ""my.funky.DSLBuilder"" };  customScopes Please refer to the Custom scopes section to find out more about custom scopes, the following are just the way you declare them: Key Type Required Default Description {ScopeName} string true --- The value of the instantiation path of the custom scope that implements coldbox.system.ioc.scopes.IScope. The name of the scope will be used when registered the scope annotation.  wirebox.customScopes = { 	CoolSingletons = ""my.path.SingletonScope"", 	FunkyTransaction = ""my.funky.Transaction"" };  scanLocations The instantiation paths that this Injector will have registered to do object locations in order. So if you request an object called Service and no mapping has been configured for it, then WireBox will search all these scan locations for a Service.cfc in the specified order. The last lookup is the no namespace lookup which basically represents a createObject(""component"",""Service"") call. If you are using WireBox within a ColdBox application, ColdBox will register the models convention folder for you and also whenever a ColdBox module is activated, that module's model convention folder will be added here too. Important: Please note that order of declaration is the same as order of lookup, so it really matters. Also note that this setting only makes sense if you do not like to create mappings for objects and you just want WireBox to discover them for you.  wirebox.scanLocations = [""model"",""transfer.com"",""org.majano""];  stopRecursions This is an array of class path's that WireBox will use to stop recursion on any object graph that has inheritance when looking for dependencies. For example, let's say your object inherits from transfer.com.TransferDecorator, but you don't want WireBox to go past that inheritance class when looking for DI data, then you would add transfer.com.TransferDecorator to this setting.  wirebox.stopRecursions = [""transfer.com.TransferDecorator"",""coldbox.system.EventHandler""];  parentInjector This setting is actually a reference to another parent injector you would like this injector to set as its parent injector. Now say this sentence 10 times without hiccuping.  wirebox.parentInjector = application.coolInjector; // or wirebox.parentInjector = createObject(""component"",""coldbox.system.ioc.Injector"").init(""old.legacy.binder"");  listeners This section only shows you how to register WireBox listeners, so please refer to the object life cycle events section for more information. This setting is an array of listener structure definitions that WireBox's event manager will use when broadcasting object life cycle events. Each interceptor structure definition has the following keys: Key Type Required Default Description class class path true --- The instantiation class path of the listener name string false Name of the CFC The unique name of this listener when registered in our event manager. We recommend setting one up as best practice, else the name of the CFC file will be used instead. This setting is great for registering the same class with different configurations. properties struct false {} A structure of configuration data for this listener Important: Please note that order of declaration is the same as order of execution, so it really matters, just like ColdBox Interceptors. Please note that if you are using WireBox within a ColdBox application, you can also register listeners as interceptors in your ColdBox configuration file.  wirebox.listeners = [ 	{class=""my.AOPTracker""}, 	{class=""annotationTransactioner"",properties={target='*'} }, 	{class=""Timer"", name=""CoolTimer""} ];  Mapping DSL WireBox can also be configured by using the programmatic Mapping DSL exposed in the configuration binder instead of the implicit data structures DSL we just saw. Our recommendation is to use this mapping DSL as it makes your configuration become alive and more human readable than creating a bunch of arrays and structures. All mappings DSL methods return back an instance of the binder so you can concatenate methods to create readable execution chains:  map(""Lui"") 	.to(""model.Awesomeness"") 	.asEagerInit() 	.asSingleton();  WireBox Configuration The configuration binder has the same methods as the implicit structures that can be used to configure WireBox for operation: Method Signature Description cacheBox([configFile],[cacheFactory],[enabled],[classNamespace]) The method used to configure the injector's CacheBox integration. Ignored in an application context listener(class,[properties],[name]) The method used to register a new listener within the injector's event manager. logBoxConfig(config) The method used to tell the injector which LogBox configuration file to use for logging operations. Ignored in an application context mapDSL(namespace,path) The method used to register a new DSL annotation namespace with a DSL Builder object. mapScope(annotation,path) The method used to register a new custom scope in this injector. parentInjector(injector) Register a CFC reference to be the parent injector for the configuring injector removeScanLocations(locations) A method used to remove one or a list (array) of scan locations from the configuration binder reset() Reset the entire configuration binder to factory defaults scanLocations(locations) A method used to add one or a list (array) of scan locations to the configuration binder. If a path already exists it will not be appended again. scopeRegistration(enabled,scope,key) This method is used to tell the Injector if it should auto-register itself in any ColdFusion scope automatically. stopRecursions(classes) A method used to register one or a list (array) of class paths the injector will look out for when discovering DI metadata. If these classes are found in the inheritance chain of an object, the injector will not process that inherited chain.  	logBoxConfig(""config.LogBox"") 	.scanLocations( getAppMappig() & "".includes.models"" ) 	.stopRecursions( ""model.BaseService,model.BaseModel"" ) 	.mapScope( ""Ortus"", ""model.scopes.Ortus"" );  Mapping Initiators Ok, now that we know how to configure WireBox, let's get into the fun stuff of object mapping. How do we do this? By using our DSL mapping initiators that tell WireBox how to start the object registration process. You will then concatenate the initiators with some DSL destinations methods, DI data, etc to tell WireBox all the information it might need to construct, wire and persist the object. Here are the DSL initiators: Method Signature Description map(alias) The method that starts the mapping process. You pass in a mapping name or a list of names to start registering. mapPath(path) Map a CFC instantiation path. This method internally delivers a two-fold punch of doing map('CFCFileName').to(path). This is a quick way to map a CFC instantiation path that uses the name of the CFC as the mapping name. mapDirectory(packagePath,[include],[exclude], [influence], [filter]) A cool method that tells WireBox to automatically register ALL the CFCs found recursively in that instantiation package path. All CFCs will be registered using their CFC names as the mapping names and WireBox will inspect all the CFCs immediately for DI metadata. The include and exclude arguments can be used for inclusions/exclusions lists via regex. The influence argument can be a UDF or closure that will affect the iterating registrations of objects. The filter argument can be a UDF or closure that will filter out or in the CFCs found, an include/exclude on steroids. unMap(alias) Unmap/delete a mapping in the binder. with(alias) This method is a utility method that retrieves the alias mapping so you can start concatenating methods for that specific mapping. Basically putting it into a workable context. Important: From the methods we have seen above only the map() and with() methods require a DSL destination. MapDirectory() Influence & Filters The mapDirectory() allows you to leverage closures or UDF'sto influence and filter mappings. The arguments are filter to add a filter that MUST return boolean in order to process the mapping and influence that can influence the created mapping with any custom bindings.  // influence only certain components to be singleton mapDirectory(packagePath=""coldbox.testing.testModel.ioc"", influence=function(binder, path){ 	if( findNoCase( ""simple"", arguments.path) ){ 		arguments.binder.asSingleton(); 	} });  // filter some components from registration mapDirectory(packagePath=""coldbox.testing.testModel.ioc"", filter=function(path){ 	return ( findNoCase( ""simple"", arguments.path ) ? false : true ); });  Mapping Destinations The mapping destinations tell WireBox what type of object you are mapping to. You will usually use these methods by concatenating map() or with() initiator calls: Method Signature Description to(path) Maps a name to a CFC instantiation path toDSL(dsl) Maps a name to DSL builder string. Construction is done by using this DSL string (Look at Injection DSL) toFactoryMethod(factory,method) Maps a name to another mapping (factory) and its method call. If you would like to pass in parameters to this factory method call you will use the methodArg() DSL method concatenated to this method call. toJava(path) Maps a name to a Java class that can be instantiated via createObject(""java"") toProvider(provider) Maps a name to another mapping (provider) that must implement the WireBox Provider interface (coldbox.system.ioc.IProvider) toRSS(path) Maps a name to an atom or RSS URL. WireBox will then use the cffeed tag to construct this RSS feed. It builds out into a structure with two keys: metadata : The metadata of the feed items : The items in the feed toValue(value) Maps a name to a constant value, which can be ANYTHING. toWebservice(path) Maps a name to a webservice WSDL URL. WireBox will create the webservice via createObject(""webservice"") for you. Here are some examples:  // CFC map(""FunkyObject"").to(""myapp.model.service.FunkyService""); mapPath(""myapp.model.service.FunkyService""); mapDirectory(""myapp.model""); // Java map(""buffer"").toJava(""java.lang.StringBuffer""); // RSS feed map(""googleNews"").toRSS(""http://news.google.com/news?output=rss""); // Webservice map(""myWS"").toWebservice(""http://myapp.com/app.cfc?wsdl""); // Provider map(""Espresso"").toProvider(""FunkyEspressoProvider""); // DSL map(""Logger"").toDSL(""logbox:root"");  // factory methods map(""ColdboxFactory"").to(""coldbox.system.extras.ColdboxFactory""); map(""ColdBoxController"").toFactoryMethod(factory=""ColdBoxFactory"",method=""getColdBox""); map(""BeanInjector"") 	.toFactoryMethod(factory=""ColdBoxFactory"",method=""getPlugin"") 	.methodArg(name=""plugin"",value=""BeanFactory"") 	 // Mixin a new method in my object that dispenses users mapPath(""UserService"") 	.providerMethod(""getUser"",""User"");  Important : Please note that WireBox can create different types of objects for DI. However, only CFCs will be inspected for autowiring automatically unless you specifically tell WireBox that a certain mapping should not be autowired. In this case you will use the dependencies DSL to define all DI relationships. Persistence DSL The next step in our mapping DSL excursion is to learn about how WireBox will persist these object mappings into WireBox scopes. By default (as we have seen), all object mappings are transient objects and they belong to a scope type called NOSCOPE. However, we need to specifically tell WireBox into what scope the declared mapped objects should be placed on in order for us to leverage caching, the singleton pattern, etc. This is accomplished by leveraging our persistence component annotations or the following methods if you prefer a non-annotation approach: Note: Please note that all WireBox configuration binders have two public properties: this.TYPES - Enum class (coldbox.system.ioc.Types) this.SCOPES - Enum class (coldbox.system.ioc.Scopes) These classes have on themselves several public properties that are a cool shorthand way to link to construction types or persistence scopes. Method Signature Description asSingleton() Maps an object to the WireBox internal Singleton scope into(scope) Maps an object to a valid WireBox internal scope or any custom registered scopes by using the registered scope name. Valid internal WireBox scopes are: NOSCOPE PROTOTYPE SINGLETON SESSION APPLICATION REQUEST SERVER CACHEBOX inCacheBox([key='mappingName'],[timeout],[lastAccessTimeout],[provider='default']) Maps an object to the integrated CacheBox instance. asEagerInit() Maps an object to be created immediately once the Injector is created. By default all object mappings are lazy loaded in construction. So just remember that these persistence DSL methods are not mandatory. If you are an annotations kinda developer, then you can easily add these persistence annotations to your classes.  // CFC map(""FunkyObject"") 	.to(""myapp.model.service.FunkyService"") 	.asSingleton(); mapPath(""myapp.model.service.FunkyService"") 	.into(this.SCOPES.REQUEST); // Java as NO SCOPE map(""buffer"").toJava(""java.lang.StringBuffer""); // RSS feed map(""googleNews"") 	.toRSS(""http://news.google.com/news?output=rss"") 	.inCacheBox(timeout=60,lastAccessTimeout=15); // Webservice map(""myWS"") 	.toWebservice(""http://myapp.com/app.cfc?wsdl"") 	.into(this.SCOPES.APPLICATION);  Important : Please note that by leveraging scopes that can expire such as cachebox,request,session,applications,etc you must take into account the way they are injected into other objects. They can experience a DI side effect called scope widening injection that can link an object reference that expires into another object reference that does not expire (like singleton). This causes nasty side effects and issues, so please refer to the WireBox Providers section to find out how you can avoid this nasty pitfall by using WireBox providers. Dependencies DSL The dependencies DSL methods are mostly used to define dependencies and also to activate advanced features on target objects, such as runtime mixins, virtual inheritance, etc. Please note that you can concatenate more than one of these methods calls to dictate multiple constructor arguments, setter methods, cf properties, and more. Method Signature Description constructor(constructor) Tells WireBox which constructor to call on the mapped object. By default if an object has an init() method, that will be used as the constructor noInit() Tells WireBox that this mapped object will skip the constructor call for it. By default WireBox always calls object constructors threadSafe() Tells WireBox that the mapped object should be constructed and then wired with a strict concurrency lock for property injections, setter injections and onDIComplete(). Please be aware that if you use this mode of construction, circular dependencies are not allowed. The default is that property and setter injections and onDIComplete() are outside of the construction locks. notThreadSafe() Tells WireBox to construct objects by locking only the constructor and constructor argument dependencies to allow for circular dependencies. This is the default construction mode of all persisted objects: singleton, session, server, application and cachebox scope. noAutowire() Tells WireBox that this mapped object has its dependencies described programmatically instead of using metadata inspection to discover them. parent(alias) Tells WireBox that this mapped object has a parent mapping with definitions it should use to base it from. This feature provides a great way to reuse object mapping definitions. initArg([name],[ref],[dsl],[value],[javaCast]) Used to define a constructor argument for the mapped object. name : The name of the constructor argument. Not used for Java or Webservice construction ref : The mapping reference id this constructor is mapped to. E.G. ref='MyFunkyEspresso' dsl : The construction dsl that will be used to construct this constructor argument value : The constant value you can use instead of a dsl or ref for this constructor argument javaCast : If using a java object, you can cast the value of this constructor argument initWith() You can pass as many arguments (named or positional) to this method to simulate the init() call of the mapped object. WireBox will then use that argument collection to initialize the mapped object. Note, initWith() only accepts arguments which can be evaluated at the time the binder is parsed such as static values, or binder properties. To specify mapping IDs or DSLs, use initArg(). methodArg([name],[ref],[dsl],[value],[javaCast]) Used to define a factory method argument for the mapped object when using a factory method construction. name : The name of the method argument. Not used for Java or Webservice construction ref : The mapping reference id this method argument is mapped to. E.G. ref='MyFunkyEspresso' dsl : The construction dsl that will be used to construct this method argument value : The constant value you can use instead of a dsl or ref for this method argument javaCast : If using a java object, you can cast the value of this method argument property([name],[ref],[dsl],[value],[javaCast],[scope]) Used to define a property mixin that will occur at runtime. name : The name of the property value to inject. Not used for Java or Webservice construction ref : The mapping reference id this property is mapped to. E.G. ref='MyFunkyEspresso' dsl : The construction dsl that will be used to construct this property argument value : The constant value you can use instead of a dsl or ref for this property argument javaCast : If using a java object, you can cast the value of this property argument scope : The scope inside the CFC this property will be injected too. The default scope is the variables scope. setter([name],[ref],[dsl],[value],[javaCast]) Used to define all the setter dependencies for a mapped object that follows the JavaBean spec: setXXX where XXX is the name of the mapped object. name : The name of the setter. Not used for Java or Webservice construction ref : The mapping reference id this setter is mapped to. E.G. ref='MyFunkyEspresso' dsl : The construction dsl that will be used to construct this setter dependency value : The constant value you can use instead of a dsl or ref for this setter dependency javaCast : If using a java object, you can cast the value of this setter dependency mixins(udfIncludeList) A UDF template, a list of templates or an array of templates that WireBox should use to mix-in into the target object. It will take all the methods defined in those UDF templates and mixed them into the target object at runtime. providerMethod(method,mapping) Will inject a new method or override a method on the target object with a new method that provides objects of the mapping you specify. virtualInheritance(Mapping) Create a runtime virtual inheritance from a target object into a target mapping. This approach blends the CFCs together at runtime via mixins and WireBox Funkyness! extraAttributes(struct) Allows the ability to store extra metadata about a mapping into WireBox that can later be retrieved via AOP invocations or WireBox events. Mapping Extra Attributes You can store a-la-carte attributes in a specific mapping so it can be retrieved at a later time by either an AOP aspect or Events. This is a great way to store custom metadata about an object so it can be read later for some meaningful purpose. Let's say you want to tag a mapping with a custom type that is not so easily determined from the object instance itself. You don't want to do all kinds of introspection in order to know what object you received in an aspect or an event.  map(""MyPlugin"") 	.to(""plugins.CustomPlugin"") 	.extraAttributes({ 		pluginPath 	= pluginLocation, 		custom 	 	= arguments.custom, 		module 		= arguments.module, 		isPlugin	= true 	});  This mapping declares that an object has some extra attributes that will be stored in the mapping, such as the location, if it is a custom plugin, if it belongs to a module and a marker that determines if it is a plugin or not. This is then incredibly useful when you have an attached listener to WireBox:  function afterInstanceAutowire(event, interceptData){ 	var attribs = interceptData.mapping.getExtraAttributes(); 	var iData 	= {}; 	 	// listen to plugins only 	if( structKeyExists(attribs, ""isPlugin"") ){ 		//Fill-up Intercepted MetaData 		iData.pluginPath = attribs.pluginPath; 		iData.custom 	 = attribs.custom;	 		iData.module 	 = attribs.module;		 		iData.oPlugin    = interceptData.target; 		 		//Fire My Own Custom Interception 		instance.interceptorService.processState(""afterPluginCreation"",iData); 	} }  As you can see from this sample, the extra attributes are incredibly essential, as the listener just sends the target object. It would take lots of introspection and metadata inspections in order for me to determine if the incoming object is my system's plugin or not. However, with the extra attributes, it is just a snap! Component Annotations The following are all the annotations that are discovered by WireBox on any component declaration that WireBox constructs: Annotation Type Description autowire boolean All objects are marked as autowire=true, so if you want to disable autowiring, you can add this annotation as false. You do NOT need to add this annotation if you want to autowire it, it is redundant if you do. alias string A list of aliased names you can attach to a CFC instance apart from its Component name. This is great when using the mapDirectory() binder function. eagerInit none All objects are lazy loaded unless they are marked with this annotation or marked as eager init in the binder configuration. threadSafe none or boolean Determines the locking construction of the object for its wiring of dependencies. Please see our Object Persistence & Thread Safety Section. scope string A valid WireBox scope or a custom registered scope. Remember that ALL components by default are placed in the NO SCOPE scope. This means they are considered transient objects. singleton none Marks a component as a singleton object. cachebox string Marks a component to be stored in CacheBox. The value of this annotation should be a valid registered CacheBox cache provider. The default cache provider is called default cache boolean Marks a component to be cached in CacheBox in the default provider. cacheTimeout numeric The timeout in minutes when the object is stored in the CacheBox provider cacheLastAccessTimeout numeric The timeout in minutes when the object is stored in the CacheBox provider mixins list A list of UDF templates to mixin into the object Scope Persistence Annotations The following annotations can be placed in the component declaration to tell the WireBox injector where to persist the constructed object. If no scope annotations are found on the component or mappings then the object is treated as NO SCOPE or a prototype/transient object; one that gets constructed every time. singleton - singleton object scope=""registered_scope"" : Registered Scope: session, request, singleton, custom, etc.  component singleton{}  component scope=""singleton""{}  component scope=""request""{}  component singleton threadsafe{}  CacheBox Integration If you would like to use CacheBox for persistence for you objects you will need to mark your CFC with the following annotation(s) cachebox=""[provider]"" - The default provider is called 'default', so this annotation can be empty or a named cache provider cache - Cache into the default provider, shorthand annotation, no value needed This annotation has two sub annotations that you can also leverage for granular control of your CacheBox integration: cacheTimeout - The timeout in minutes (optional) cacheLastAccessTimeout - The last access or idle timeout in minutes (optional)  // cache into the default provider component cache{} // cache into the default provider component cachebox{}  // cache into the ehcache provider component cachebox=""ehcache""{}  // cache into the ehcache provider with settings component cachebox=""ehcache"" cacheTimeout=""20""{}  // cache with settings component cache cacheTimeout=""60"" cacheLastAccessTimeout=""10""{}  Important : When storing objects in volatile scopes like cache, session, request, etc. You must be careful of not injecting them directly into singletons or other volatile objects as you could have memory leaks via a side effect called Scope Widening Injection. We recommend combining them via WireBox Providers to avoid this side effect. Injection DSL The injection DSL is a domain specific language that denotes what to inject in the current placeholder: property, argument, or method via the inject annotation. This injection DSL not only can it be used via annotations but also via our mapping dsl whenever a dsl argument can be used. This DSL is constructed by joining words separated by a : colon. The first part of this string is what we will denote as the injection DSL Namespace.  inject=""{namespace}:extra:extra:extra""  Property Annotation Every cfproperty can be annotated with our injection annotations: @inject : The injection DSL @scope : The visibility scope to inject the dependency into. By default it injects into variables scope  property name=""service"" inject=""id:MyService"";  property name=""TYPES"" inject=""id:CustomTypes"" scope=""this"";  property name=""roles"" inject=""id:RoleService:getRoles"" scope=""instance"";  Constructor Argument Annotation You can also annotated constructor arguments with the inject annotation.   <---  Via tag based annotations ---> <cffunction name=""init"" returntype=""any"" output=""false""> 	<cfargument name=""myService"" inject=""UserService""> 	<cfargument name=""cache"" 	 inject=""cachebox:default"">  </cffunction>   // Via script but alternative method as inline annotations are broken in ACF  /** * Init * @myService.inject UserService * @cache.inject cachebox:default */ function init(required myService, required cache){ }  Important : In full script components, annotating inline arguments is broken in Adobe ColdFusion 9. You will have to annotate them via the alternative annotation syntax in ColdFusion 9 via the javadocs style comments. Setter Method Annotation You can also annotate setter methods with the inject annotation to provide injections   <---  Via tag based annotations ---> <cffunction name=""setService"" returntype=""any"" output=""false"" inject=""UserService""> 	<cfargument name=""service""> </cffunction>   function setService(required service) inject=""UserService""{   variables.service = arguments.service; }  WireBox offers a wide gamut of annotation namespaces you can use in your applications and ColdBox applications. However, we took it a step further and allowed you to create your own custom DSL namespaces making your annotations come alive! So let's investigate the shipped namespaces: ID-Model-Empty Namespace The default namespace is not specifying one. This namespace is used to retreive either named mappings or full component paths. DSL Description empty Same as saying id. Get a mapped instance with the same name as defined in the property, argument or setter method. id Get a mapped instance with the same name as defined in the property, argument or setter method. id:{name} Get a mapped instance by using the second part of the DSL as the mapping name. id:{name}:{method} Get the {name} instance object, call the {method} and inject the results model Get a mapped instance with the same name as defined in the property, argument or setter method. model:{name} Get a mapped instance by using the second part of the DSL as the mapping name. model:{name}:{method} Get the {name} instance object, call the {method} and inject the results  // Let's assume we have mapped a few objects called: UserService, SecurityService and RoleService  // Empty inject, use the property name, argument name or setter name property name=""userService"" inject;  // Using the name of the mapping as the value of the inject property name=""security"" inject=""SecurityService"";  // Using the full namespace property name=""userService"" inject=""id:UserService""; property name=""userService"" inject=""model:UserService"";  // Simple factory method property name=""roles"" inject=""id:RoleService:getRoles"";  Provider Namespace Inject object providers, please refer to our provider section in this guide. DSL Description provider Build an object provider that will return the mapping according to the property, method or argument name. provider:{name} Build an object provider that will return the {name} mapping. provider:{injectionDSL} Build an object provider that will return the object that the {injectionDSL} refers to  // using id property name=""timedService"" inject=""provider:TimedService"";  // using DSL property name=""timedService"" inject=""provider:logbox:logger:{this}"";  WireBox Namespace Talk and get objects from the current wirebox injector DSL Description wirebox Get a reference to the current injector wirebox:parent Get a reference to the parent injector (if any) wirebox:eventManager Get a reference to injector's event manager wirebox:binder Get a reference to the injector's binder wirebox:populator Get a reference to a WireBox's Object Populator utility wirebox:scope:{scope} Get a direct reference to an internal or custom scope object wirebox:properties Get the entire properties structure the injector is initialized with. If running within a ColdBox context then it is the structure of application settings wirebox:property:{name} Retrieve one key of the properties structure  property name=""beanFactory"" inject=""wirebox""; property name=""settings"" inject=""wirebox:properties""; property name=""singletonCache"" inject=""wirebox:scope:singleton""; property name=""populator"" inject=""wirebox:populator""; property name=""binder"" inject=""wirebox:binder"";  CacheBox Namespace This DSL namespace is only active if using CacheBox or a ColdBox application context. DSL Description cachebox Get a reference to the application's CacheBox instance cachebox:{name} Get a reference to a named cache inside of CacheBox cachebox:{name}:{objectKey} Get an object from the named cache inside of CacheBox according to the objectKey  property name=""cacheFactory"" inject=""cacheBox""; property name=""cache"" inject=""cachebox:default""; property name=""data"" inject=""cachebox:default:myKey"";  EntityService Namespace Gives you the ability to easily inject base orm services or binded virtual entity services for you: DSL Description entityService Inject a BaseORMService object for usage as a generic service layer entityService:{entity} Inject a VirtualEntityService object for usage as a service layer based off the name of the entity passed in.  // Generic ORM service layer property name=""genericService"" inject=""entityService""; // Virtual service layer based on the User entity property name=""userService"" inject=""entityService:User"";  LogBox Namespace Interact with LogBox DSL Description logbox Get a reference to the application's LogBox instance logbox:root Get a reference to the root logger logbox:logger:{category name} Get a reference to a named logger by its category name logbox:logger:{this} Get a reference to a named logger using the current target object's path as the category name  property name=""logbox"" inject=""logbox""; property name=""log"" inject=""logbox:root""; property name=""log"" inject=""logbox:logger:myapi""; property name=""log"" inject=""logbox:logger:{this}"";  Java Namespace Interact with Java directly DSL Description java:{class} Get a reference or instantiate the java {class} for you.  component {   property name=""foo"" inject=""java:com.class.foo""; }  map(""LinkedMap"").toDSL( ""java:java.util.LinkedHashMap"" );  ColdBox Namespace This namespace is a combination of namespaces that are only active when used within a ColdBox application: DSL Description coldbox Get the coldbox controller reference coldbox:flash Get a reference to the application's flash scope object coldbox:setting:{setting} Get the coldbox application {setting} setting and inject it coldbox:setting:{setting}@{module} Get the coldbox application {setting} from the {module} and inject it coldbox:plugin:{plugin} Get the {plugin} plugin and inject it coldbox:myPlugin:{MyPlugin} Get the {MyPlugin} custom plugin and inject it coldbox:myPlugin:{MyPlugin}@{module} Get the {MyPlugin} custom plugin from the {module} module and inject it coldbox:datasource:{alias} Get a new datasource bean according to {alias} coldbox:configBean Get a new config bean object and inject it coldbox:mailsettingsbean Get a new mail settings bean and inject it coldbox:loaderService Get a reference to the loader service coldbox:requestService Get a reference to the request service coldbox:debuggerService Get a reference to the debugger service coldbox:pluginService Get a reference to the plugin service coldbox:handlerService Get a reference to the handler service coldbox:interceptorService Get a reference to the interceptor service coldbox:moduleService Get a reference to the ColdBox Module Service coldbox:interceptor:{name} Get a reference of a named interceptor {name} coldbox:cacheManager get the cache manager coldbox:fwConfigBean Get a configuration bean object with ColdBox settings instead of Application settings coldbox:fwSetting:{setting} Get a setting from the ColdBox settings instead of the Application settings coldbox:moduleSettings:{module} Inject the entire {module} settings structure coldbox:moduleConfig:{module} Inject the entire {module} configurations structure ioc Get the named ioc bean and inject it. Name comes from the cfproperty, setter or argument name ioc:{beanName} Get the ioc bean according to {beanName} javaLoader:{class} Create an object from the JavaLoader plugin and its set of loaded java libraries webservice:{alias} Get a webservice object using an {alias} that matches in your coldbox configuration file.  // some examples property name=""logbox"" inject=""logbox""; property name=""rootLogger"" inject=""logbox:root""; property name=""logger"" inject=""logbox:logger:model.com.UserService""; property name=""moduleService"" inject=""coldbox:moduleService""; property name=""producer"" inject=""coldbox:interceptor:MessageProducer""; property name=""configBean"" inject=""coldbox:fwConfigBean""; property name=""producer"" inject=""interceptor:MessageProducer""; property name=""appPath"" inject=""coldbox:fwSetting:ApplicationPath"";  // JavaLoader goodness property name=""binaryHeap"" inject=""javaLoader:org.apache.commons.collections.BinaryHeap""; property name=""email"" inject=""javaLoader:org.apache.commons.mail.SimpleEmail"";  ORM Entity Injection WireBox is fully capable to do ORM entity injection in your ColdFusion applications in two approaches: ColdBox Applications - for use in ColdBox applications Standalone WireBox - for use in ColdBox or any framework or any ColdFusion application. Virtual Inheritance You can make two CFCs blend together simulating a virtual runtime inheritance with WireBox. WireBox will grab the target CFC and blend into it all of the virtual inheritance CFC's methods and properties. It will then also create a $super reference in the target and a $superinit() reference. This is a great alternative to real inheritance and allow for runtime mixins to occur. You start off my mapping the base or source CFC and then mapping the target CFC and declaring a virtualInheritance to the base or source CFC:  // Declare base CFC map(""BaseModel"").to(""model.base.BaseModel"");  map(""UserService"").to(""model.users.UserService"").virtualInheritance(""BaseModel"");  This will grab all methods and properties in the AbstractModel CFC and mix them into the UserService, then create a virtual $super scope which will map to an instantiated instance of the BaseModel object. Runtime Mixins() You can use the mixins() binder method or mixins annotation to define that a mapping should be mixed in with one or more set of templates. It will then at runtime inject all the methods in those templates and mix them into the target object as public methods.  // map with mixins map(""MyService"") 	.to(""model.UserService"") 	.mixins(""/helpers/base"");  // map with mixins as list map(""MyService"") 	.to(""model.UserService"") 	.mixins(""/helpers/base, /helpers/model"");  // map with mixins as array map(""MyService"") 	.to(""model.UserService"") 	.mixins( [""/helpers/base"", ""/helpers/model""] );   // Via annotation component mixins=""/helpers/base""{  }  This will grab all the methods in the base.cfm and model.cfm templates and inject them into the target mapping as public methods. Awesome right? The list of templates can include a .cfm or not Parent Object Definitions Thanks to Phill Nacelli, you can reuse object definitions in your binder or via annotations. This means that you can declare an object with its dependencies and then create other definitions that use all of this parent object's definitions. This saves tons of time in declarations and provides you with great reusability.  // Binder method parent(alias);  // Parent Annotation component parent=""alias""{}  Here is a small example:  // PARENT Mappings map(""AbstractService"").to(""model.AbstractService""); 	.property(name:""someAlphaDAO"", ref:""someAlphaDAO"") 	.property(name:""someBravoDAO"", ref:""someBravoDAO"");  // Concrete service with parent and also some added dpendencies of its own map(""ConcreteService"").to(""#myPath#.parent.SomeConcreteService"") 	.parent(""AbstractService"") 	.property(name:""someCharlieDAO"", ref:""someCharlieDAO"") 	.property(name:""someDeltaDAO"", ref:""someDeltaDAO"");;  WireBox Event Model WireBox also sports a very nice event model that can announce several object life cycle events. You can listen to these events and interact with WireBox at runtime very easily, whether you are in standalone mode or within a ColdBox application. Of course, if you are within a ColdBox application, you get the benefit of all the potential of ColdBox Interceptors and if you are in standalone mode, well, you just get the listener and that's it. Each event execution also comes with a structure of name-value pairs called interceptData that can contain objects, variables and all kinds of data that can be useful for listeners to use. This data is sent by the event caller and each event caller decides what this data sent is. Also, remember that WireBox also can be ran with a reference to CacheBox, which also offers lots of internal events that you can tap into. So let's start investigating first the object life cycle events. WireBox Events WireBox's offers a wide gamut of life cycle events that are announced at certain points in execution time. Below are the current events announced by the Injector coldbox.system.ioc.Injector. Event Data Description afterInjectorConfiguration injector : The calling injector reference Called right after the injector has been fully configured for operation. beforeInstanceCreation mapping : The mapping called to be created injector : The calling injector reference Called right before an object mapping is built via our internal object builders or custom scope builders. afterInstanceInitialized mapping : The mapping called to be created target : The object that just go constructed and initialized injector : The calling injector reference Called after an object mapping gets constructed and initialized. The mapping has NOT been placed on a scope yet and no DI/AOP has been performed yet. afterInstanceCreation mapping : The mapping called to be created target : The object that just go built, initialized and DI/AOP performed on it injector : The calling injector reference Called once the object has been fully created, initialized, stored, and DI/AOP performed on it. It is about to be returned to the caller via its getInstance() method. beforeInstanceInspection mapping : The mapping that is about to be processed. binder : The configuration binder processing the mapping injector : The calling injector reference Called whenever an object has been requested and its metadata has not been processed or discovered. In this interception point you can influence the metadata discovery. afterInstanceInspection mapping : The mapping that is about to be processed. binder : The configuration binder processing the mapping injector : The calling injector reference Called after an object mapping has been completely processed with its DI metadata discovery. This is your last chance to change or modify the DI data in the mapping before it is cached. beforeInjectorShutdown injector : The calling injector reference Called right before the Injector instance is shutdown. afterInjectorShutdown injector : The calling injector reference Called right after the Injector instance is shutdown. beforeInstanceAutowire injector : The calling injector reference mapping : The instance mapping target : The target object for wiring targetID : The unique target object ID used for wiring Called right after the instance has been created and initialized, but before DI wiring is done. afterInstanceAutowire injector : The calling injector reference mapping : The instance mapping target : The target object for wiring targetID : The unique target object ID used for wiring Called right after the instance has been created, initialized and DI has been completed on it. Note: Please see our CacheBox documentation to see all of CacheBox's events. WireBox Listeners We have already seen in our previous section all the events that are announced by WireBox, but how do we listen? There are two ways to build WireBox listeners because there are two modes of operations, but the core is the same. Listeners are simple CFCs that must create methods that match the same' name of the event they want to listen to. If you are running WireBox within a ColdBox application, listeners are Interceptors and you declare them and register them exactly the same way that you do with normal interceptors. Also, these methods can take up to two parameters depending on your mode of operation (standalone or coldbox). The one main difference between pure Wirebox listeners and ColdBox interceptors are that the configure method for the standalone WireBox is different. Please see samples. ColdBox Mode Listener Argument Type Execution Mode Description event coldbox.system.web.context.RequestContext coldbox The request context of the running request interceptData struct standalone-coldbox The data structure passed in the event So let's say that we want to listen on the beforeInjectorShutdown and on the afterInstanceCreation event in our listener.  component{  	function configure(){} 	 	function beforeInjectorShutdown(event, interceptData){ 		var injector = arguments.interceptData.injector; 		// Do my stuff here: 		 		// I can use a log object because ColdBox is cool and injects one for me already. 		log.info(""DUDE, I am going down!!!""); 	} 	 	function afterInstanceCreation(event, interceptData){ 		var injector = arguments.interceptData.injector; 		var target = arguments.interceptData.target; 		var mapping = arguments.interceptData.mapping; 		 		log.info(""The object #mapping.getName()# has just been built, performing my awesome AOP processing on it.""); 		 		// process awesome AOP on this target 		processAwesomeAOP( target ); 	} }  Standalone Mode Listener Argument Type Execution Mode Description interceptData struct standalone-coldbox The data structure passed in the event  component{  	function configure(injector,properties){ 		variables.injector = arguments.injector; 		variables.properties = arguments.properties; 		 		log = variables.injector.getLogBox().getLogger( this ); 	} 	 	function beforeInjectorShutdown(interceptData){ 		// Do my stuff here: 		 		// I can use a log object because ColdBox is cool and injects one for me already. 		log.info(""DUDE, I am going down!!!""); 	} 	 	function afterInstanceCreation(interceptData){ 		var target = arguments.interceptData.target; 		var mapping = arguments.interceptData.mapping; 		 		log.info(""The object #mapping.getName()# has just been built, performing my awesome AOP processing on it.""); 		 		// process awesome AOP on this target 		processAwesomeAOP( target ); 	} }  Please note the configure() method in the standalone listener. This is necessary when you are using Wirebox listeners outside of a ColdBox application. The configure() method receives two parameters: injector : An instance reference to the calling Injector where this listener will be registered with. properties : A structure of properties that passes through from the configuration file. As you can see from the examples above, each Listener component can listen to multiple events. Now you might be asking yourself, in what order are these listeners executed in? Well, they are executed in the order they are declared in either the ColdBox configuration file as interceptors or the WireBox configuration file as listeners. Important: Order is EXTREMELY important for interceptors/listeners. So please make sure you order them in the declaration file. Providers Let's get funky now! We have seen how to inject objects and how to scope objects. However, we need to talk about a cool WireBox feature called object providers. We learned that when you request an object from WireBox it creates it and injects it immediately. However, sometimes we need more control like: Delay construction of the dependency until some point in time during your controlled execution. Maybe you don't want to construct some dependencies until some feature in your application is enabled. You need multiple instances of a class. Like a User service producing transient users, or our espresso machine creating espressos. You need to access scoped objects that might need reconstruction. Maybe you want to check the cache first for existence or a ColdFusion scope in order to avoid scope widening injection. You have some old legacy funkiness for building stuff that has to remain as its own factory All of these areas is where WireBox Providers can really save the day. WireBox offers automatically a way to create providers for you by creating generic provider classes (coldbox.system.ioc.Provider) that will be configured to provide the mapping you want, then injected instead of the real object requested. This happens whenever you use the provider DSL injection namespace or annotate methods with a provider annotation. It also gives you an interface (coldbox.system.ioc.IProvider), which is very simple, that you can implement in order to register your own complex providers with WireBox. You would usually do the latter if you have legacy code you need to abstract out, had funky construction processes, etc. Let's start by looking at how registering custom providers work first and then how to use the automatic WireBox providers work. Custom Providers If you need to abstract old legacy code or have funky construction processes, we would recommend you build your own provider objects. This means that you will create a component that implements coldbox.system.ioc.IProvider (one get() method) and then you can map it. Once mapped, you can use it anywhere WireBox listens for providers: The injection DSL ->  property name="""" inject=""provider:{name or injectionDSL}"";  The mapping DSL  map(""MyCFC"").toProvider('name or injectionDSL')  // or setter,property,methodArg,initArg(name="""",dsl=""provider:{name or injectionDSL}"");  Here is the interface you need to implement:  <cfinterface hint=""The WireBox Provider Interface that follows the provider pattern""> 	<---  get --->     <cffunction name=""get"" output=""false"" access=""public"" returntype=""any"" hint=""Get the provided object"">     </cffunction> </cfinterface>  The CFC you build will need to be mapped so it can be retrieved by name and also so if it needs DI or any other WireBox funkiness, it can get it. So let's look at our FunkyEspressoProvider that we needed to create since we have some old legacy machines that we need to revamp:  component name=""FunkyEspressoProvider"" implements=""coldbox.system.ioc.IProvider"" singleton{ 	 	property name=""log"" inject=""logbox:logger:FunkyEspressoProvider""; 	 	public function init(){ return this; } 	 	Espresso public function get(){ 		// log 		log.canDebug(){ log.debug(""Requested funky espresso""); } 		var espresso = createObject(""component"",""old.legacy.Espresso"").init(); 		// add some sugar as the old legacy machine is not that great. 		espresso.addSugar(1); 		// returned provided object. 		return espresso; 	}  }  Finally we map to the provider using the .toProvider() mapping method in the binder so anytime somebody requests an Espresso we can get it from our funky provider. Please note that I also map the provider because it also has some DI needed.  component extends=""coldbox.system.ioc.config.Binder""{ 	function configure(){ 		// map the provider first, so it can be constructed and DI performed on it. 		map(""FunkyEspressoProvider"") 			.to(""model.legacy.FunkyEspressoProvider""); 		 		// map espresso's to the old funky provider for construction and retrieval. 		map(""Espresso"") 			.toProvider(""FunkyEspressoProvider""); 	 	} }  Cool! That's it, anytime you request an Espresso, WireBox will direct its construction to the provider you registered it with. toProvider() closures The mapping destination toProvider() can also take a closure that will be executed whenever that mapping is requested. This allows you to add your own custom provider construction code inline without creating a standalone provider object that implements our provider interface. By leveraging closures you can really get funky and more concise in your coding:  map(""MyEspresso"").toProvider( function(){ 	var espresso = new Espresso( sugar=2, cream = true ); 	injector.autowire( espresso ); 	return espresso; } );  Virtual Provider Injection DSL You can inject automatic object providers by using the provider injection DSL namespace (See above for full reference). This will inject a WireBox provider class (coldbox.system.ioc.Provider) that follows our Provider pattern with one method on it: get() that will provide you with the requested mapped object. The difference between custom providers here is that WireBox will create a virtual provider object for you dynamically at runtime, configure it to retrieve a specific type of mapping and then use that for you. The provider namespace will take everything after it and evaluate it as either a named mapping or a full injection DSL string. For example, inject=""provider:MyService"" will inject a provider of MyService objects, so it will look for a MyService ID in the binder. However, you can also get mega funky and do this: inject=""provider:logbox:logger:{this}"" and WireBox will create a provider of logbox:logger:{this}. Important: Remember that the value of the provider can be a simple ID or a full injection DSL.  // use the provider DSL namespace on a property property name=""searchCriteria"" inject=""provider:requestCriteria"";   // use the provider DSL namespace on a constructor argument function init(coolObjectProvider inject=""provider:HardToConstructObject""){ 	variables.coolObjectProvider = arguments.coolObjectProvider; 	return this; }   // To use it searchCriteria.get().getCriteria(); coolObjectProvider.get().executeSomeMethod();  That's it! You basically use the provider:{mapping} injection DSL to tell a property, setter or argument that you want a provider object instead of the real deal. This will allow you to delay construction of such object or avoid the nasty pitfall of scope widening injection. Virtual Provider Mapping DSL You can also use our cool mapping DSL to create mappings that refer to provided objects by using the DSL construction type:  // map an object to a virtual provided object map(""coolObjectProvider"") 	.toDSL(""provider:HardToConstructObject"");  // map an object an set the explicit DI arguments or DI setters to virtual provided objects map(""SearchService"") 	.to(""model.search.SearchService"") 	.initArg(name=""searchCriteria"",dsl=""provider:requestCriteria"");  You can use the following mapping methods to map to virtual providers by using their dsl arguments: mapDSL() initArg(name="""",dsl="""") property(name="""",dsl="""") setter(name="""",dsl="""") methodArg(name="""",dsl="""") Virtual Provider Lookup Methods This is a ColdFusion 9/10 feature only, where you can mark methods in your components with a special provider annotation so they can serve the objects you requested automatically for you. This is an amazing feature as it will take the original method signature and replace the method for you with one that will serve the provided objects for you automatically. How insane is that! You deserve some getting jiggy wit it dancing!  public Espresso function getEspresso() provider=""espresso""{}  Wow! That's it! Yep, just create an empty method signature and annotated with provider={mapping} and then WireBox will read these annotated methods and replace them for you at runtime so when you call getEspresso() it actually calls the WireBox injector and requests a new espresso instance and it returns it. Important: Please note that the visibility of provided methods does not matter to WireBox. It can provide public, private, or packaged visibilities with no problem at all. Provider onMissingMethod Proxy Thanks to our friend Brad Wood, we have a feature in our Providers that you can leverage its onMissngMethod() to proxy calls into the provided object itself. So let's say our provided object has a method called sayHello(), then with an injected provider you must do this:   property name=""chatter"" inject=""provider:Chat"";  function useChatter(){ 	return chatter.get().sayHello();	 }  That is great, but you can proxy calls into the provider itself by doing this:   property name=""chatter"" inject=""provider:Chat"";  function useChatter(){ 	return chatter.sayHello();	 }  The WireBox provider object (coldbox.system.ioc.Provider) has an onMissingMethod() function that will take all missing method calls and proxy them to the provided object. Now, this is great but be ready to lose on performance if you use this approach. That is the only caveat to this approach, is that you will be impacted by performance, not crazy, but try it. Scope Widening Injection An object that is scoped into request, session, server, cachebox or application scopes and if wired into a persisted object will remain around even when this object has expired from the scope. This is called scope-widening injection and is a problem that must be addressed by NOT injecting them into persisted objects directly but by using WireBox's provider approach. This guarantees that the object's scope lifecycle will be maintained and your singleton or other persistent objects will be decoupled from the scope by accessing the target object via its provider. For example, let's say you have a handler that wires in a user object that is scoped into session scope, but the handler itself is scoped as a singleton:  component name=""handler"" singleton{  	property name=""user"" inject=""id:user""; }  //user component component name=""user"" scope=""session""{ }  So when the handler is created and persisted as a singleton, the user object get's created, stored in session and also referenced into the lifecycle of the handler object. So now, if the user expires from session, the handler does not know about it, because all it knows it that a direct reference to that out of context object still remains. So if the user needed things in session to exist, this will now fail. This problem is much how hibernate and detached objects works. Objects are no longer in session, they are detached. This scope widening issue is resolved by NOT injecting the user object directly into the handler but by using a provider. Scope Widening Injection Solution: Object Providers Below is my favorite approach to solving the issue which is by using provided methods:  component name=""handler"" singleton{  	function getUser() provider=""user""{}  }  That's it! My getUser() method will be replaced by WireBox with a proxy provider method that will request from the WireBox injector the user mapping instance. Object Persistence & Thread Safety While the injector can help in many ways to secure the creation of your objects, it is ultimately up to you to create code that is both thread safe and tested. It is always a great idea to design your objects without the injector in mind for threading and concurrency. DI is not a silver bullet, but a tool to relieve object creation and not to relieve the burden of good object design. Thread safety is much more complex and can be compromised when using persistent scopes like singleton, session, server, application and cache box, as more than one thread will be trying to access your code and dependencies. The only guarantee the injector can provide is the constructor and constructor dependency creation to be completely locked. The following object is to be guaranteed to be locked when created and wired with dependencies:  component{       /**      * @log.inject logbox:logger:{this}      * @dao.inject id:MyDAO      */      function init(required log, required dao){           variables.log = arguments.log;           variables.dao = arguments.dao;           return this;      }  }  Important: The inject annotations are done in comments as ColdFusion 9 has a bug when adding annotations on scripted arguments. An example of a flawed object could be the following:  component{       property name=""dao"" inject=""id:MyDAO"";      property name=""log"" inject=""logbox:logger:{this}"";       function init(){           return this;      } }  Why is this object flawed? It is flawed because the majority of DI engines, including WireBox, will lock for constructing the object and its constructor arguments. However, once it is constructed, it will store the object in the persistence scope of choice in order to satisfy the potential of circular dependencies in the object graph. After it is placed in the storage, the DI engines will wire up setter and property mixin injections and WireBox's onDiComplete() method. With this normal approach, the wiring of dependencies and onDiComplete() have the potential of mixups due to concurrency. This is a normal side-effect and risk that developers take due that Java makes no guarantees that any thread other than the one that set its dependencies will see the dependencies. The memory between threads is not final or immutable so properties can enter an altered state. ""The subtle reason has to do with the way Java Virtual Machines (JVM) are designed to manage threads. Threads may keep local, cached copies of non-volatile fields that can quickly get out of sync with one another unless they are synchronized correctly."" From Dependency Injection by Dhanji R. Prasanna Note: This side effect of concurrency will only occur on objects that are singletons or persisted in scopes like session, server, application, server or cachebox. It does not affect transient or request scoped objects. WireBox, can help you lock and provide thread safety to setter and property injections by providing you with the ThreadSafe annotation or our binder threadSafe() tagging method. So if we wanted to make the last example thread safe for property and setter wiring then we would do the following:  component threadSafe{       property name=""dao"" inject=""id:MyDAO"";      property name=""log"" inject=""logbox:logger:{this}"";       function init(){           return this;      } }  // or component threadSafe=true{       property name=""dao"" inject=""id:MyDAO"";      property name=""log"" inject=""logbox:logger:{this}"";       function init(){           return this;      } }  // or you can bind it as a thread safe component map(""MyObject"").to(""path.model.MyObject"").asSingleton().threadSafe();  Note: All objects are marked as non thread safe for dependency wiring by default in order to allow for circular dependencies. Please note that if you mark an object as threadSafe, then it will not be able to support circular dependencies unless it uses WireBox providers. ( See Providers Section ) Our threadSafe annotation and binder tagging property will allow for these objects to be completely locked and synchronized for object creation, wiring and onDiComplete(). However, circular dependencies will now fail as persistence cannot be guaranteed for the setter or property dependencies. However, since WireBox is so awesome, you can still use circular dependencies by wiring instead our object providers. (Please see providers section). In conclusion, constructing and designing a CFC that is thread safe is often a very arduous process. It is also very difficult to test and recreate threading issues in your objects and applications. So don't feel bad, as even the best of us can get into some nasty wormholes when dealing with concurrency and thread safety. However, always try to design for as much concurrency as possible and test test test! Custom DSL Builder WireBox allows you to create your own DSL object builders and then register them via your configuration binder. This allows you to create a namespace or override an internal namespace with your own object builder. By now we have seen our injection DSL and noticed that we have internal namespaces. With this feature we can alter it or create new ones so our annotations and injection DSLs can be customized to satisfaction. This is easily done in the following process Create a CFC that implements coldbox.system.ioc.dsl.IDSLBuilder Register your custom DSL builder in your configuration binder The DSL Builder Interface  <cfinterface hint=""The main interface to produce WireBox namespace DSL Builders"">  	<---  init --->     <cffunction name=""init"" output=""false"" access=""public"" returntype=""any"">     	<cfargument name=""injector"" 	type=""any"" required=""true""/> 	</cffunction> 	 	<---  process --->     <cffunction name=""process"" output=""false"" access=""public"" returntype=""any""> 		<cfargument name=""definition"" required=""true""/>         		<cfargument name=""targetObject"" type=""any"" required=""false""/>	     </cffunction> 	 </cfinterface>  The main method here to notice is the process() method. This method receives the injection dsl annotation value and it will be up to the builder to parse it and decide what to do with it. If this method returns null then WireBox will log it for you at that specific injection dependency resolution. However, we also encourage you to use best practices and log from your builders also. Registering a custom DSL builder If you refer back to the configuration section you can see the customDSL structure or mapDSL() method that you can use for registering custom DSL namespaces.  customDSL = { 	ortus = ""path.model.dsl.OrtusBuilder""	 };  or  mapDSL(""ortus"",""path.model.dsl.OrtusBuilder"");  This will register a new injection DSL namespace called ortus that maps to that instantiation component path.model.dsl.OrtusBuilder. Here is a very simple DSL Builder:  <cfcomponent implements=""coldbox.system.ioc.dsl.IDSLBuilder"" output=""false"">  	<---  init --->     <cffunction name=""init"" output=""false"" access=""public"" returntype=""any"" hint=""Configure the DSL for operation and returns itself"" colddoc:generic=""coldbox.system.ioc.dsl.IDSLBuilder"">     	<cfargument name=""injector"" type=""any"" required=""true"" hint=""The linked WireBox injector"" colddoc:generic=""coldbox.system.ioc.Injector""/> 		<cfscript> 			instance = { injector = arguments.injector }; 			instance.log		= instance.injector.getLogBox().getLogger( this ); 			 			return this; 		</cfscript>        </cffunction> 	 	<---  process --->     <cffunction name=""process"" output=""false"" access=""public"" returntype=""any"" hint=""Process an incoming DSL definition and produce an object with it.""> 		<cfargument name=""definition"" required=""true"" hint=""The injection dsl definition structure to process. Keys: name, dsl""/> 		<cfargument name=""targetObject"" required=""false"" hint=""The target object we are building the DSL dependency for.""/>  		<cfscript> 			var thisType 			= arguments.definition.dsl; 			var thisTypeLen 		= listLen(thisType,"":""); 			var utilName 			= """"; 			 			// DSL stages 			switch(thisTypeLen){ 				// Ortus 				case 1 : { return instance.injector.getInstance('ortusUtil'); } 				// Ortus:utility 				case 2 : { 					utilName = getToken(thisType,2,"":""); 					// Verify that cache exists 					if( instance.injector.containsInstance( 'Ortus#utilName'# ) ){ 						return instance.injector.getInstance( 'Ortus#utilName#' ); 					} 					else if( instance.log.canDebug() ){ 						instance.log.debug(""Cannot find named ortus utility #utilName# using definition: #arguments.definition.toString()#""); 					} 					break; 				} 			} // end level 2 main DSL 		</cfscript>   	     </cffunction>		 	 </cfcomponent>  As you can see from the sample, creating your own DSL builder is fairly easy. The benefits of a custom DSL builder is that you can very easily create and extend the injection DSL language to your own benefit and if you are funky enough, override the behavior of the internal DSL Namespaces. Custom Scopes WireBox allows you to create your own object persistence scopes so you can have full control on their lifecycle. This is easily done in the following process: Create a CFC that implements coldbox.system.ioc.scopes.IScope Register your custom scope in your configuration binder You can create your own persistence scope or if you are getting funky, override the internal persistence scopes with your own logic. The Scope Interface  <cfinterface hint=""The main interface to produce WireBox storage scopes"">      <---  init --->     <cffunction name=""init"" output=""false"" access=""public"" returntype=""any"" hint=""Configure the scope for operation and returns itself"" colddoc:generic=""coldbox.system.ioc.scopes.IScope"">     	<cfargument name=""injector"" type=""any"" required=""true"" hint=""The linked WireBox injector"" colddoc:generic=""coldbox.system.ioc.Injector""/>     </cffunction>      <---  getFromScope --->     <cffunction name=""getFromScope"" output=""false"" access=""public"" returntype=""any"" hint=""Retrieve an object from scope or create it if not found in scope"">     	<cfargument name=""mapping"" 		type=""any"" required=""true""  hint=""The object mapping"" colddoc:generic=""coldbox.system.ioc.config.Mapping""/>     	<cfargument name=""initArguments"" 	type=""any"" required=""false"" hint=""The constructor structure of arguments to passthrough when initializing the instance"" colddoc:generic=""struct""/> 		 	</cffunction> 	 </cfinterface>  Scoping Process The scoping process must be done by using some of the referenced injector's methods: buildInstance(mapping, initArguments) autowire() These methods must be called sequentially in order to avoid circular reference locks. The first method buildInstance is used to construct and initialize an object instance. The autowire method is used then to process DI and AOP on the targeted object. Let's look at my Ortus Scope:  <cfcomponent output=""false"" implements=""coldbox.system.ioc.scopes.IScope"" hint=""I am the Ortus Scope of Scopes"">  	<---  init --->     <cffunction name=""init"" output=""false"" access=""public"" returntype=""any"" hint=""Configure the scope for operation"">     	<cfargument name=""injector"" type=""any"" required=""true"" hint=""The linked WireBox injector"" colddoc:generic=""coldbox.system.ioc.Injector""/> 		<cfscript> 			instance = { 				injector = arguments.injector, 				ortus = {} 			}; 			return this; 		</cfscript>     </cffunction>  	<---  getFromScope --->     <cffunction name=""getFromScope"" output=""false"" access=""public"" returntype=""any"" hint=""Retrieve an object from scope or create it if not found in scope"">     	<cfargument name=""mapping"" 			type=""any"" required=""true""  hint=""The object mapping"" colddoc:generic=""coldbox.system.ioc.config.Mapping""/> 		<cfargument name=""initArguments"" 	type=""any"" required=""false"" hint=""The constructor structure of arguments to passthrough when initializing the instance"" colddoc:generic=""struct""/> 		<cfscript> 			var name = arguments.mapping.getName(); 			if( structKeyExists(instance.ortus, name) ){ 				return instance.ortus[name];	 			} 			 			lock name=""ortus.scope.#arguments.mapping.getName()#""{ 				instance.ortus[name] = instance.injector.buildInstance( arguments.mapping, arguments.initArguments ); 			} 			 			// wire it 			instance.injector.autowire(target=instance.ortus[name],mapping=arguments.mapping); 			 			// send it back 			return instance.ortus[name]; 		</cfscript>     </cffunction> 	 </cfcomponent>  Important: ALways make sure that you use the buildInstance method and then store the results in the scope before wiring is done to avoid endless loops errors. Registering A Custom Scope If you refer back to the configuration section you can see the customScopes structure or mapScope() method that you can use for registering custom DSL namespaces.  customScopes = { 	ortus = ""path.model.dsl.OrtusScope""	 };  or  mapScope(""ortus"",""path.model.dsl.OrtusScope"");  Now I can use the ortus scope in my mappings DSL and even my annotations, isn't that cool!  component scope=""ortus""{ 	 }  // map it map(""Luis"") 	.to(""model.path.LuisService"") 	.into(""Ortus"");  WireBox IInjector Interface We also provide an interface to create objects that adhere to our injector interface: coldbox.system.ioc.IInjector. Then these objects can be used as parent injectors, great for legacy factories or creating hierarchies according to your specs. All you have to do is implement the following interface:  <cfinterface hint=""An interface that enables any CFC to act like a parent injector within WireBox""> 	 	<---  setParent --->     <cffunction name=""setParent"" output=""false"" access=""public"" returntype=""void"" hint=""Link a parent Injector with this injector"">     	<cfargument name=""injector"" required=""true"" hint=""A WireBox Injector to assign as a parent to this Injector"">     </cffunction> 	 	<---  getParent --->     <cffunction name=""getParent"" output=""false"" access=""public"" returntype=""any"" hint=""Get a reference to the parent injector instance, else an empty simple string meaning nothing is set"" >     </cffunction> 	 	<---  getInstance --->     <cffunction name=""getInstance"" output=""false"" access=""public"" returntype=""any"" hint=""Locates, Creates, Injects and Configures an object model instance"">     	<cfargument name=""name"" required=""false"" 	hint=""The mapping name or CFC instance path to try to build up""/> 		<cfargument name=""dsl""	required=""false"" 	hint=""The dsl string to use to retrieve the instance model object, mutually exclusive with 'name'""/> 		<cfargument name=""initArguments"" required=""false"" 	hint=""The constructor structure of arguments to passthrough when initializing the instance""/> 	</cffunction> 	 	<---  containsInstance --->     <cffunction name=""containsInstance"" output=""false"" access=""public"" returntype=""any"" hint=""Checks if this injector can locate a model instance or not"">     	<cfargument name=""name"" required=""true"" hint=""The object name or alias to search for if this container can locate it or has knowledge of it""/>     </cffunction>  	<---  shutdown --->     <cffunction name=""shutdown"" output=""false"" access=""public"" returntype=""void"" hint=""Shutdown the injector gracefully by calling the shutdown events internally."">     </cffunction> 	 </cfinterface>  Once you create this CFC that implements this interface then you can call on the injector's setParent() method and you are ready to roll. WireBox ORM Services WireBox includes all of our ORM services to enable you to work with ColdFusion ORM in a much more efficient manner without using ColdBox. Here are the main integrations we offer for ORM services: Base ORM Services : Our base class that enables you to work with ORM entities. Active Entity : Follows a similar Active Record pattern to ORM entities. Virtual Entity Services : Create virtual service layers for specific ORM entities for you. Criteria Builder : Tap into the power of Hibernate Criteria Queries with our Criteria Builder Detached Criteria Builder : With the new Detached Criteria Builder, you can expand the power and flexibility of your criteria queries with support for criteria and projection subqueries, all while using the same intuitive patterns of Criteria Builder ORM Entity Injection : Use WireBox for applying dependency injection & AOP to ORM entities. Also use it as a way to proxy hibernate listeners WireBox Object Populator WireBox also comes packaged with our handy ColdBox object populator that has been so successful in our ColdBox applications. The object populator object can populate objects with data from XML, JSON, WDDX, structures, queries and much more. So we highly encourage you to check it out as it will really help out in your applications. The way to retrieve it is to use the getObjectPopulator() method on the injector and then call one of our populate methods you can see below. Please check out the CFC docs API for the latest and greatest.  populator = injector.getObjectPopulator();  populateFromXML Populate an object from an XML packet Returns This function returns any Arguments Key Type Required Default Description target any Yes --- The target to populate xml any Yes --- The XML string or packet root string No The XML root element to start from scope string No Use scope injection instead of setters population. Ex: scope=variables.instance. trustedSetter boolean No false If set to true, the setter method will be called even if it does not exist in the bean include string No A list of keys to include in the population exclude string No A list of keys to exclude in the population ignoreEmpty boolean No false Ignore empty values on populations, great for ORM population nullEmptyInclude string No A list of keys to NULL when empty nullEmptyExclude string No A list of keys to NOT NULL when empty composeRelationships boolean No false Automatically attempt to compose relationships from memento populateFromQuery Populate a bean from a query Returns This function returns Any Arguments Key Type Required Default Description target any Yes --- The target to populate qry query Yes --- The query to populate the bean object with rowNumber Numeric No 1 The query row number to use for population scope string No Use scope injection instead of setters population. Ex: scope=variables.instance. trustedSetter boolean No false If set to true, the setter method will be called even if it does not exist in the bean include string No A list of keys to include in the population exclude string No A list of keys to exclude in the population ignoreEmpty boolean No false Ignore empty values on populations, great for ORM population nullEmptyInclude string No A list of keys to NULL when empty nullEmptyExclude string No A list of keys to NOT NULL when empty composeRelationships boolean No false Automatically attempt to compose relationships from memento populateFromStruct Populate a bean from a structure Returns This function returns any Arguments Key Type Required Default Description target any Yes --- The target to populate memento struct Yes --- The structure to populate the object with. scope string No --- Use scope injection instead of setters population. trustedSetter boolean No false If set to true, the setter method will be called even if it does not exist in the bean include string No A list of keys to include in the population exclude string No A list of keys to exclude in the population ignoreEmpty boolean No false Ignore empty values on populations, great for ORM population nullEmptyInclude string No A list of keys to NULL when empty nullEmptyExclude string No A list of keys to NOT NULL when empty composeRelationships boolean No false Automatically attempt to compose relationships from memento populateFromQueryWithPrefix Populates an Object using only specific columns from a query. Useful for performing a query with joins that needs to populate multiple objects. Returns This function returns any Arguments Key Type Required Default Description target any Yes --- This can be an instantiated bean object or a bean instantiation path as a string. If you pass an instantiation path and the bean has an 'init' method. It will be executed. This method follows the bean contract (set{property_name}). Example: setUsername(), setfname() qry query Yes --- The query to populate the bean object with rowNumber Numeric No 1 The query row number to use for population scope string No Use scope injection instead of setters population. Ex: scope=variables.instance. trustedSetter boolean No false If set to true, the setter method will be called even if it does not exist in the bean include string No A list of keys to include in the population exclude string No A list of keys to exclude in the population prefix string Yes --- The prefix used to filter, Example: 'user_' would apply to the following columns: 'user_id' and 'user_name' but not 'address_id'. ignoreEmpty boolean No false Ignore empty values on populations, great for ORM population nullEmptyInclude string No A list of keys to NULL when empty nullEmptyExclude string No A list of keys to NOT NULL when empty composeRelationships boolean No false Automatically attempt to compose relationships from memento populateFromJSON Populate a bean from a json string Returns This function returns any Arguments Key Type Required Default Description target any Yes --- The target to populate JSONString string Yes --- The JSON string to populate the object with. It has to be valid JSON and also a structure with name-key value pairs. scope string No Use scope injection instead of setters population. Ex: scope=variables.instance. trustedSetter boolean No false If set to true, the setter method will be called even if it does not exist in the bean include string No A list of keys to include in the population exclude string No A list of keys to exclude in the population ignoreEmpty boolean No false Ignore empty values on populations, great for ORM population nullEmptyInclude string No A list of keys to NULL when empty nullEmptyExclude string No A list of keys to NOT NULL when empty composeRelationships boolean No false Automatically attempt to compose relationships from memento Mapping DSL Examples  mapPath(""path"") mapDSL(""cool"", ""model.CoolFactory"");   map(""SecurityService"") 	.to(""model.security.SecurityService"") 	.onDICOmplete([""start"",""executeRoles""])   mapDirectory('/shared/model');    // Eager initialized objects map(""luis,joe"").to(""model.Luis"").into(this.SCOPES.SINGLETON).asEagerInit() map([""luis"",""joe""]).to(""model.Luis"").into(this.SCOPES.SINGLETON).asEagerInit()   // map a property to a mapping id via DSL map(""Lui"").toDSL(""coldbox:setting:luis"")   // using initWith() for passing name-value pairs or positional arguments for direct initialization of a mapping map(""transferConfig"") 	.to(""transfer.com.config.Configuration"") 	.initWith(datasourcePath=getProperty('datasourcePath'), 	 	  configPath=getProperty('configPath'), 		  definitionPath=getProperty('definitionPath')); 			   // Now doing with setter injection map(""transferConfig"") 	.to(""transfer.com.config.Configuration"") 	.setter(name=""datasourcePath"", value=getProperty(""datasourcePath"")) 	.setter(name=""configPath"", value=getProperty(""datasourcePath"")) 	.setter(name=""definitionPath"", value=getProperty(""definitionPath"") ); 			   			   // Map with constructor arguments map(""transfer"") 	.to(""transfer.com.Transfer"") 	.into(SCOPES.SINGLETON) 	.noAutowire() 	.asEagerInit() 	.initArg(name=""configuration"",ref='transferConfig');  //ref = name by default, or have an explicit name   // RSS Integration With Caching. map(""googleNews"") 	.toRSS(""http://news.google.com/news?pz=1&ned=us&hl=en&topic=h&num=3&output=rss"") 	.asEagerInit() 	.inCacheBox(timeout=20,lastAccessTimeout=30,provider=""default"",key=""google-news"");   // Java Integration with init arguments map(""Buffer""). 	toJava(""java.lang.StringBuffer""). 	initArg(value=""500"",javaCast=""long""); 	 // Java integration with initWith() custom arguments and your own casting. map(""Buffer""). 	toJava(""java.lang.StringBuffer""). 	initWit( javaCast(""long"",500) );       Download in other Formats: Markup | HTML | Word Comments (6) Add Comment Manithan said at 04:34:53 PM 24-Feb-2011 This is great but still digesting. Great Job ColdBox team. i don't like(hate) xml configuration. have to read few more times and try it out. Thanks for great work guys and waiting for sample application manithan said at 04:52:38 PM 24-Feb-2011 Once again this great and love it. i have quick question guys. how would this used in a Module. Another config have to be created for Module specific ? Luis Majano said at 08:04:28 PM 24-Feb-2011 In the module configuration you can use the binder directly as it is injected for usage directly or you can create your own wirebox configuration structure manithan said at 08:55:51 PM 24-Feb-2011 Thanks Luis. i will try that. so far i have tested with simple injection and works great. the only i am not able still make it work is the listener. i will wait for your sample application. Qasim Rasheed said at 07:01:52 PM 15-Mar-2011 Great job. Look forward to a simple example of Wirebox that doesn't use Coldbox. Clint W said at 10:43:54 PM 29-Apr-2012 Useful snippet to map all your models programagically: // Map Bindings below var expPath = expandPath('/model'); var delCount = len(expandPath('\')); var files = directoryList(expPath,true,'path','*.cfc'); for(local.i=1;local.i<=arrayLen(files);local.i++){ mapPath(path=listChangeDelims(listDeleteAt(removeChars(files[local.i],1,delCount),2,'.'),'.','\')); } ColdBox Books Purchase Books Buy Book! Buy Kindle! Buy eBook! See all books! Media ColdBox TV ColdBox Connection Video Feeds Developer Week Social Media twitter.com/coldbox twitter.com/ortussolutions twitter.com/lmajano twitter.com/gocontentbox facebook.com/coldbox Ortus Services Support & Mentoring Architecture & Design Expert Training Server Setup & Tuning Consulting Contact Us info@coldbox.org info@ortussolutions.com www.ortussolutions.com Copyright Ortus Solutions, Corp >> ContentBox v0.5 Beta 2 Design By DT"	"null"	"null"	"The Enterprise Dependency Injection Framework"	"true"
"CMS"	"CONTENS CMS"	"http://www.contens.com/"	"Professional Content Management"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"CONTENS - Content Management & Social Intranet - CONTENS Software GmbH <div> <a href=""http://www.wiredminds.de""><img src=""//wm2.wiredminds.de/track/ctin.php?wm_custnum=8cefe411a05b9ff6&amp;nojs=1"" alt="""" style=""border:0px;""> Deutsch CONTENS 4.0 Demo Video Products Content Management Key Features CONTENS compact CONTENS professional CONTENS enterprise Social Intranet CONTENS relate Modules & Enhancements Modules Enhancements Portal Bus for IBM WPS Technical Requirements Information Architecture Why CONTENS Services Project Support Consultation & Development Design Workshops Technologies Trainings Online Demo Support References Our References Successful Projects Partners Integrators Technology Partners Become a Partner Alliance Program CONTENS Partner CONTENS Integrator Company Management Job Offers Press 2012 2011 2010 Earlier Newsletter Downloads Customer Satisfaction Contact Products - Content Management - - Key Features - - CONTENS compact - - CONTENS professional - - CONTENS enterprise - Social Intranet - CONTENS relate - Modules & Enhancements - - Modules - - Enhancements - - Portal Bus for IBM WPS - Technical Requirements - Information Architecture - Why CONTENS Services - Project Support - Consultation & Development - Design - Workshops - Technologies - Trainings - Online Demo - Support References - Our References - Successful Projects Partners - Integrators - Technology Partners - Become a Partner - Alliance Program - - CONTENS Partner - - CONTENS Integrator Company - Management - Job Offers - Press - - 2012 - - 2011 - - 2010 - - Earlier - Newsletter - Downloads - Customer Satisfaction - Contact Contact us Contact us Content Management with CONTENS - intuitive, reliable and flexible Our Products Manage your online services faster, more efficiently, and with less costs using the content management solutions from CONTENS.   Our Customers Several well-known companies from all industries rely on the content management products provided by CONTENS.   Online Demo Experience how easy and fast you can maintain your websites with CONTENS. Please send us your preferred date to demo@contens.com.   Best technologies CONTENS relies on proven and modern web technologies. The overview shows the technologies that we use successfully in client projects. RSG Vendor Map CONTENS is represented on the RSG Vendor Map in the field Web Content & Experience Management. With his recommendations RSG enable companies to make better technology decisions. CONTENS Jobs We are looking for new employees to join our team in Munich. If you are a Computer Scientist, a Senior Web Developer or a JavaScript Expert, send us your application to jobs@contens.com. References CONTENS online News from the CONTENS Blog Quicklinks CONTENS Blog Contact Imprint Sitemap Jobs Why CONTENS Reasons for the use of CONTENS CMS About CONTENS Manage your online services faster, more efficiently, and with less costs using the content management solutions from CONTENS. © 2016 CONTENS Software GmbH CMS: CONTENS"	"null"	"null"	"Professional Content Management"	"true"
"CMS"	"ContentBox"	"https://github.com/Ortus-Solutions/ContentBox"	"A powerful modular content management engine"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"59"	"15"	"50"	"GitHub - Ortus-Solutions/ContentBox: Enterprise ColdFusion (CFML) Modular CMS Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 59 Fork 50 Ortus-Solutions/ContentBox Code Pull requests 2 Pulse Graphs Enterprise ColdFusion (CFML) Modular CMS http://www.ortussolutions.com/products/contentbox 2,583 commits 6 branches 24 releases 20 contributors ColdFusion 67.1% JavaScript 26.3% CSS 5.1% Shell 0.8% Batchfile 0.5% HTML 0.1% ApacheConf 0.1% ColdFusion JavaScript CSS Shell Batchfile HTML ApacheConf Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: development Switch branches/tags Branches Tags development feature-HideLargeSearch-GP master patch-704-fixCategoryDeleteBug-GP patch-DeleteFix-GP releases/2.1.0 Nothing to show v3.0.0-rc v2.1.0 v2.0.0 v1.6.0 v1.5.7 v1.5.6 v1.5.5 v1.5.4 v1.5.3 v1.5.2 v1.5.1 v1.5.0.Beta1 v1.2.0 v1.1.0 v1.0.9 v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 pre-dev-merge Nothing to show New pull request Latest commit de885ba Jul 7, 2016 lmajano Updated syntax Permalink Failed to load latest commit information. build Fixes on double settings on patches Jun 23, 2016 config CONTENTBOX-731 #resolve Jun 25, 2016 handlers ok, almost there in initial refactoring to ColdBox 4 Jul 31, 2015 layouts ok, almost there in initial refactoring to ColdBox 4 Jul 31, 2015 models ok, almost there in initial refactoring to ColdBox 4 Jul 31, 2015 modules Updated syntax Jul 7, 2016 tests update file headers Jul 28, 2015 views/main cleanup and refactoring of tests Jun 17, 2014 workbench updated dependencies before release Jun 28, 2016 .gitignore changed location of build process May 18, 2016 .htaccess Added .woff font to htaccess Nov 10, 2014 .jshintrc Updated all ui assets to rely on bower and grunt for management. Dec 3, 2015 Application.cfc set domain cookies for multi-site preparations Jun 25, 2016 box.json leverage new forge box SDK module Jun 28, 2016 favicon.ico fixes Mar 15, 2012 index.cfm update file headers Jul 28, 2015 license.txt ok, almost there in initial refactoring to ColdBox 4 Jul 31, 2015 readme.md more docs Apr 8, 2016 robots.txt CONTENTBOX-447 #close Jan 23, 2014 server.json Firefox issues with z-indexes Mar 18, 2016 readme.md    ____            _             _   ____               / ___|___  _ __ | |_ ___ _ __ | |_| __ )  _____  __  | |   / _ \| '_ \| __/ _ \ '_ \| __|  _ \ / _ \ \/ /  | |__| (_) | | | | ||  __/ | | | |_| |_) | (_) >  <    \____\___/|_| |_|\__\___|_| |_|\__|____/ \___/_/\_\   ContentBox Modular CMS - A Modular Content Platform Copyright 2012 by Luis Majano and Ortus Solutions, Corp www.ortussolutions.com Because of God's grace, this project exists. If you don't like this, then don't read it, its not for you. ""Therefore being justified by faith, we have peace with God through our Lord Jesus Christ: By whom also we have access by faith into this grace wherein we stand, and rejoice in hope of the glory of God. And not only so, but we glory in tribulations also: knowing that tribulation worketh patience; And patience, experience; and experience, hope: And hope maketh not ashamed; because the love of God is shed abroad in our hearts by the Holy Ghost which is given unto us. ."" Romans 5:5 Welcome to ContentBox ContentBox is a modular content management engine based on the popular ColdBox MVC framework. License Apache License, Version 2.0. Versioning ContentBox is maintained under the Semantic Versioning guidelines as much as possible. Releases will be numbered with the following format: <major>.<minor>.<patch>  And constructed with the following guidelines: Breaking backward compatibility bumps the major (and resets the minor and patch) New additions without breaking backward compatibility bumps the minor (and resets the patch) Bug fixes and misc changes bumps the patch Important Links Source Code https://github.com/Ortus-Solutions/ContentBox Continuous Integration http://jenkins.staging.ortussolutions.com/job/OS-ContentBox%20BE/ Bug Tracking/Agile Boards https://ortussolutions.atlassian.net/browse/CONTENTBOX Documentation http://contentbox.ortusbooks.com Blog http://www.ortussolutions.com/blog System Requirements Lucee 4.5+ Railo 4+ (Deprecated) ColdFusion 10+ ContentBox Installation You can follow in-depth installation instructions here: http://contentbox.ortusbooks.com/content/installation/index.html or you can use CommandBox to quickly get up and running via the following commands: Stable Release mkdir mysite && cd mysite # Install latest release box install contentbox box server start --rewritesEnable Bleeding Edge Release mkdir mysite && cd mysite # Install latest release box install contentbox-be box server start --rewritesEnable Collaboration If you want to develop and hack at the source, you will need to download CommandBox first. Then in the root of this project, type box install. This will download the necessary dependencies to develop and test ContentBox. You can then go ahead and start an embedded server box server start --rewritesEnable and start hacking around and contributing. Test Suites For running our test suites you will need 2 more steps, so please refer to the Readme in the tests folder. UI Development If developing CSS and Javascript assets, please refer to the Developer Guide in the workbench/Developer.md folder. THE DAILY BREAD ""I am the way, and the truth, and the life; no one comes to the Father, but by me (JESUS)"" Jn 14:1-12 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Ortus-Solutions/ContentBox"	"A powerful modular content management engine"	"true"
"CMS"	"FarCry CMS"	"https://github.com/farcrycore/plugin-farcrycms"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"17"	"1"	"GitHub - farcrycore/plugin-farcrycms: FarCry CMS plugin Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 7 Fork 1 farcrycore/plugin-farcrycms Code Issues 0 Pull requests 0 Pulse Graphs FarCry CMS plugin 339 commits 3 branches 17 releases Fetching contributors ColdFusion 84.3% JavaScript 9.4% CSS 6.3% ColdFusion JavaScript CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master p100 p600 Nothing to show rc-3-0-0-A milestone-6-3-0 milestone-6-2-6 milestone-6-0-15 milestone-6-0-11 milestone-6-0-6 milestone-6-0-4 milestone-6-0-0 milestone-5-2-0 milestone-3-0-0 milestone-2-0-0 milestone-1-0-2 milestone-1-0-1 milestone-1-0-0 7.0.2 7.0.1 7.0.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. customadmin install packages webskin www/fancybox COPYING.LESSER.txt COPYING.txt README.md README.md FarCry CMS Plugin Extends the content management features of FarCry Core to include a variety of common features. Features Includes News content Events content Feedback form Image galleries Fun facts Variety of publishing rules Installation The plugin requires an installation of FarCry 7.0 framework FarCry 6.x installations must use milestone-6-2-6 Checkout from source control cd ./farcry/plugins git clone https://github.com/farcrycore/plugin-farcrycms.git farcrycms  master should be mostly stable for 7.x. But there are specific milestone tags for earlier releases of FarCry and those who don't want to risk change. Update project constructor Add farcrycms to the plugin list within ./www/farcryConstructor.cfm <cfset THIS.plugins = ""farcrycms,googleMaps,googleAnalytics,googleSiteSearch,farcrydoc"" />  Deploy content types Go into the webtop ADMIN > DEVELOPER TOOLS >COAPI and deploy all the plugin content types. Alternatively, you can call any URL with ?updateall=yourprojectkey to automatically deploy any non-destructive schema changes. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/farcrycore/plugin-farcrycms"	""	"true"
"CMS"	"Mura"	"https://github.com/blueriver/MuraCMS"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"222"	"57"	"136"	"GitHub - blueriver/MuraCMS: Mura CMS Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 57 Star 222 Fork 136 blueriver/MuraCMS Code Issues 410 Pull requests 8 Wiki Pulse Graphs Mura CMS http://getmura.com 13,848 commits 6 branches 4 releases 52 contributors ColdFusion 57.6% JavaScript 31.2% CSS 7.5% HTML 3.0% PLSQL 0.4% Java 0.2% Other 0.1% ColdFusion JavaScript CSS HTML PLSQL Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags 5.x 6.0 6.1 6.2 develop master Nothing to show 6.2.6527 6.2.6161 6.1.6029 5.5 Nothing to show New pull request Latest commit cdb5613 Jul 15, 2016 mattlevine Tweaking to match formToObject logic Permalink Failed to load latest commit information. admin Tweaking to match formToObject logic Jul 15, 2016 config Fixing default event object Jul 1, 2016 default Style form response Jul 14, 2016 requirements Adding method to clear display object filepaths Jul 14, 2016 .gitignore gitignore node_modules Apr 25, 2016 Application.cfc Tweaking comment Dec 17, 2012 Installation.txt update installation.txt Feb 23, 2015 Mura_CMS_contribution_agreement.pdf Resetting contributor agreement Oct 25, 2013 box.json ForgeBox config Jun 17, 2016 htaccess.txt Fixing apiEndpoint differences Mar 17, 2016 index.cfm Tweaking reference to response object Feb 9, 2015 license.txt Merge remote-tracking branch 'remotes/origin/master' Dec 21, 2011 web.config.txt Update web.config.txt Sep 15, 2015 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/blueriver/MuraCMS"	""	"true"
"CMS"	"Preside CMS"	"https://github.com/pixl8/Preside-CMS"	"an open source CMS for the Railo language"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"19"	"13"	"33"	"GitHub - pixl8/Preside-CMS: PresideCMS is an open source CMS for the Lucee Server built on the ColdBox MVC Framework. It is developed and maintained by Pixl8 Interactive. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 19 Fork 33 pixl8/Preside-CMS Code Pull requests 13 Pulse Graphs PresideCMS is an open source CMS for the Lucee Server built on the ColdBox MVC Framework. It is developed and maintained by Pixl8 Interactive. 3,384 commits 15 branches 43 releases Fetching contributors ColdFusion 40.8% CSS 35.8% JavaScript 23.3% Other 0.1% ColdFusion CSS JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: stable Switch branches/tags Branches Tags feature-PRESIDECMS-82_audittrail feature-PRESIDECMS-356_multilingual_slugs feature-PRESIDECMS-398_datepicker_enhancements feature-PRESIDECMS-414_drafts feature-PRESIDECMS-416_taskmanager feature-PRESIDECMS-418_imagerotationcorrection feature-PRESIDECMS-420_missingcomma feature-PRESIDECMS-423_sitespecificsettings feature-PRESIDECMS-424_adminLoginRedirect feature-PRESIDECMS-433_publicprivatestorage feature-PRESIDECMS-437_onetomany-picker feature-adminMultilingualFixes feature-buildfixes release-10.7.0 stable Nothing to show v10.6.6 v10.6.5 v10.6.4 v10.6.3 v10.6.2 v10.6.1 v10.6.0 v10.5.8 v10.5.7 v10.5.6 v10.5.5 v10.5.4 v10.5.3 v10.5.2 v10.5.1 v10.5.0 v10.4.8 v10.4.7 v10.4.6 v10.4.5 v10.4.4 v10.4.3 v10.4.2 v10.4.1 v10.4.0 v10.3.7 v10.3.6 v10.3.5 v10.3.4 v10.3.3 v10.3.2 v10.3.1 v10.3.0 v10.2.3 v10.2.2 v10.2.1 v10.2.0 v10.1.1 v10.1.0 v10.0.3 v10.0.2 v10.0.1 v10.0.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. support Bumbing version number Jul 8, 2016 system .gitignore .travis.yml COPYRIGHT.txt LICENSE.txt README.md box.json box.json.no.deps build.sh test.sh PRESIDECMS-194 Moving test runner script to root of project to encour… Oct 28, 2015 zanata.xml Bumping zanata project version Mar 14, 2016 README.md PresideCMS PresideCMS is an open source CMS for the Lucee Server built on the ColdBox MVC Framework. It is developed and maintained by Pixl8 Interactive. Website (http://www.presidecms.com) Documentation and quick start guide (http://docs.presidecms.com) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pixl8/Preside-CMS"	"an open source CMS for the Railo language"	"true"
"CMS"	"Slatwall"	"https://github.com/ten24/Slatwall"	"An Open Source Commerce Platform"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"102"	"36"	"67"	"GitHub - ten24/slatwall: Slatwall - An Open Source Commerce Platform Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 36 Star 102 Fork 67 ten24/slatwall Code Issues 275 Pull requests 22 Wiki Pulse Graphs Slatwall - An Open Source Commerce Platform http://www.slatwallcommerce.com 18,262 commits 132 branches 465 releases Fetching contributors ColdFusion 68.9% HTML 14.2% JavaScript 7.5% TypeScript 5.8% CSS 2.7% XSLT 0.4% Other 0.5% ColdFusion HTML JavaScript TypeScript CSS XSLT Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 4.4.10.81 develop-addmerchantsolutions develop-bootstrap3 develop-ck-testIntegrationConnection develop-feature-jb-quantity-based-pricing develop-ih-amazon-sessions develop-ih-content-pagination develop-ih-listing-updates develop-jb-angular-tab-functionality develop-jb-get-primary-id-by-entity-name-fix develop-jb-gift-recipient-search-fix develop-jb-hibachi-html-edit-formaat develop-jb-listing-display-changes-from-pricing-manager develop-jb-merchandising develop-jb-quantity-based-pricing-core-changes develop-merchantsolutions develop-mt-displayAggregates develop-mt-downloadFile develop-mt-downloadFileExtension develop-mt-manyFilterCollectionsUI develop-mt-manyToManyFilter develop-mt-marketingAutomation develop-mt-saveCollection develop-mt-workflowFilter develop-mt-workflowReview2 develop-mt-workflowReview3 develop-orderservice-refactor develop-promo-attributes develop-rj-contents-style-fix develop-rj-listings-bold-fix develop-rj-listings-bold develop-rj-marketing-auto-proto develop-rj-pm-edit-row develop-rj-pricing-manager develop-rj-proto-merchandising develop-rm-angularlinks develop-rm-big_decimalplaceholder develop-rm-cflint develop-rm-ckeditorbug develop-rm-codecoverage develop-rm-cssforreyjay develop-rm-docsvalidationrbkey develop-rm-frontendmodule develop-rm-frontendmodulefix develop-rm-jschange develop-rm-jsoptimizingwysiwyg develop-rm-noresponsebeanups develop-rm-pickpackship develop-rm-pickpackship2 develop-rm-productbundlefixes develop-rm-salesforcesync develop-rm-skusperformance develop-rm-testingsettings develop-rm-wysiwygfix develop-shipping-bugs develop-slatwall-workflow-trigger develop-sv-integrationtest develop feature-cascade-delete-test feature-ck-productScheduleSkuRelations feature-export-updates feature-gm-accountmerge feature-ih-frontend-module feature-jb-qbwc-remote feature-jb-qbwc feature-jb-quantity-based-pricing feature-jb-setting-service feature-jb-typeahead-multiselect feature-mt-contentActionFix feature-mt-freightview feature-mt-marketingAutomation feature-mt-sefl feature-pickpackandship feature-quickBooksIntegration feature-rj-auto-versioning feature-rj-collections-stacked feature-rj-collectoins-stacked-2 feature-rj-detail-promo feature-rj-gift-card-detail-layout feature-rj-gift-cards-order-item-view feature-rj-meta-pick-pack-detail feature-rj-option-groups-advanced-select feature-rj-order-delivery-edit-btn feature-rj-pick-listing feature-rj-pricing-manager-1 feature-rj-pricing-manager feature-rj-remove-space-order-item feature-rj-revert-css-gift-cards feature-rm-cf2ts feature-rm-nullisundefined feature-subscription-usage-retroactively-update gh-pages hibachi.cfc hotfix-adderrors-update hotfix-ck-smartlistUniqueFlag hotfix-giftcard-style hotfix-gm-api hotfix-gm-sessiondomain hotfix-login-screen hotfix-mt-caseSensitiveTag hotfix-rj-accordion-style-issues hotfix-rj-collections-load-content hotfix-rj-contents-layout-round2 hotfix-rj-forms-response-styles hotfix-rj-images-layout hotfix-rj-modal-size-option hotfix-rj-pricing-manager hotfix-rj-subscriptionusage-style hotfix-rj-tooltips hotfix-rm-api hotfix-rm-apichanges hotfix-rm-backupzipbug hotfix-rm-coreabstraction hotfix-rm-eventbasedcms hotfix-rm-reportupdate hotfix-rm-skubundle hotfix-rm-stripwhitespace hotfix-ss-Edit-merchandiseProductDetailsTest hotfix-ss-SubscriptionUsageTest hotfix-ss-createProductIntegrationTest hotfix-ss-navigationSeleniumTest hotfix-ss-test hotfix-team-query-update hotfix-ten24-team-stripe-meta-data hotfix-yy-AccountCFCTest hotfix-yy-AccountTest hotfix-yy-ProductCFCDeleteGetTemplateOptionsFunction hotfix-yy-ProductCFCTest hotfix master qa release-candidate Nothing to show 4.4.014 4.4.013 4.4.012 4.4.011 4.4.010 4.4.009 4.4.008 4.4.007 4.4.006 4.4.005 4.4.004 4.4.003 4.4.002 4.4.001 4.3.026 4.3.025 4.3.024 4.3.023 4.3.022 4.3.021 4.3.020 4.3.019 4.3.018 4.3.017 4.3.016 4.3.015 4.3.014 4.3.013 4.3.012 4.3.011 4.3.010 4.3.009 4.3.008 4.3.007 4.3.006 4.3.005 4.3.004 4.3.003 4.3.002 4.3.001 4.3.000 4.2.018 4.2.017 4.2.016 4.2.015 4.2.014 4.2.013 4.2.012 4.2.011 4.2.010 4.2.009 4.2.008 4.2.007 4.2.006 4.2.005 4.2.004 4.2.003 4.2.002 4.2.001 4.2.000 4.1.018 4.1.017 4.1.016 4.1.015 4.1.014 4.1.013 4.1.012 4.1.011 4.1.010 4.1.009 4.1.008 4.1.007 4.1.006 4.1.005 4.1.004 4.1.003 4.1.002 4.1.001 4.1.000 4.0.033 4.0.032 4.0.031 4.0.030 4.0.029 4.0.028 4.0.027 4.0.026 4.0.025 4.0.024 4.0.023 4.0.022 4.0.021 4.0.020 4.0.019 4.0.018 4.0.017 4.0.016 4.0.015 4.0.014 4.0.013 Nothing to show New pull request Latest commit 15df000 Jul 11, 2016 Big Boy (Slatwall Robot) CI build passed, auto-built files commit - https://circleci.com/gh/te… … …n24/slatwall/2269 [ci skip] Permalink Failed to load latest commit information. admin CI build passed, auto-built files commit - https://circleci.com/gh/te… Jul 4, 2016 api removed unneeded var and variable. Feb 15, 2016 assets Merging and fixing Conflicts Jan 27, 2016 config Added validate accessID to resource bundle Jun 20, 2016 custom Content: fix layout Jun 20, 2016 frontend saving work Sep 22, 2015 integrationServices invalidating setting cache for multiple sites Jun 17, 2016 meta Merge pull request #4588 from ten24/hotfix-yy-SlatwallUnitTestBaseCFC… Jul 1, 2016 model Merge pull request #4608 from ten24/hotfix-jb-delete-file-attribute-v… Jul 6, 2016 org/Hibachi Merge branch 'hotfix' of ssh://git@github.com/ten24/slatwall.git into Jun 21, 2016 public Fixes Address form case sensitive tag in Linux machines May 27, 2016 tags Fix search table header global. Make btn less like search Mar 21, 2016 templates Merging and fixing Conflicts Jan 27, 2016 .gitignore Updates so that the docker-compose.yml file isn't part of repo Jun 6, 2016 Application.cfc Merging and fixing Conflicts Jan 27, 2016 GNU_V3_Copy.txt saving work Sep 22, 2015 circle.yml Added 3 more VM's so that test will run quicker Jun 8, 2016 default.cfm saving work Sep 22, 2015 index.cfm saving work Sep 22, 2015 license.txt saving work Sep 22, 2015 package.json fixing typescript bugs Mar 1, 2016 readme.md Removed Mura from requirements Jun 8, 2016 slatwall_implementation_guide.pdf updating the implementation guide Jun 7, 2016 version.txt.cfm CI build passed, auto-built files commit - https://circleci.com/gh/te… Jul 11, 2016 readme.md Slatwall eCommerce Platform Slatwall is an open source eCommerce platform that runs on the JVM. Learn more about what you can do with Slatwall Commerce by visiting: http://slatwallcommerce.com Requirements Coldfusion 9.0.1 or Newer Railo 4.1 or Newer Documentation Please view the project documentation, including install instructions: http://docs.slatwallcommerce.com Running Repo For Development The easiest way to run this repo is via Docker & Docker-Compose. Once you have docker installed on your machine simply create a docker-compose.yml file and place it in the root directory after cloning the repo down. The contents of the docker-compose.yml file should look something like this: version: '2' services:   slatwall:     build: ./meta/docker/slatwall-local-dev/     volumes:       - ./:/var/www/     ports:       - ""80:80""       - ""8888:8888""     links:       - slatwalldb     environment:       - MYSQL_ROOT_PASSWORD=YOUR_LOCAL_DEV_PASSWORD       - MYSQL_HOST=slatwalldb       - MYSQL_PORT=3306       - MYSQL_DATABASE=Slatwall       - LUCEE_PASSWORD=YOUR_LOCAL_DEV_PASSWORD       - LUCEE_JAVA_OPTS=-Xms1024m -Xmx1024m   slatwalldb:     image: mysql     environment:      MYSQL_ROOT_PASSWORD : YOUR_LOCAL_DEV_PASSWORD      MYSQL_DATABASE : Slatwall  Once the file is there you should be able to simply run: docker-compose up  License Slatwall is released under the GPL v3.0 license (with a special exception described below). You can use Slatwall on any commercial application as long as you abide by the license. The term ""library"" is a reference to the entire Slatwall package and all files in which the GNU General Public License applies. A copy of GNU General Public License (GPL) is included in this distribution, in the file GNU_V3_Copy.txt. If you do not have the source code, or for more information including questions about commercial license both can be found on the website: http://www.getslatwall.com Slatwall - An Open Source eCommerce Platform Copyright (C) ten24, LLC  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.  Linking this program statically or dynamically with other modules is making a combined work based on this program.  Thus, the terms and conditions of the GNU General Public License cover the whole combination.  As a special exception, the copyright holders of this program give you permission to combine this program with independent modules and your custom code, regardless of the license terms of these independent modules, and to copy and distribute the resulting program under terms of your choice, provided that you follow these specific guidelines:  - You also meet the terms and conditions of the license of each   independent module - You must not alter the default display of the Slatwall name or logo from     any part of the application - Your custom code must not alter or create any files inside Slatwall,   except in the following directories:     /integrationServices/  You may copy and distribute the modified version of this program that meets the above guidelines as a combined work under the terms of GPL for this program, provided that you include the source code of that other code when and as the GNU GPL requires distribution of source code.  If you modify this program, you may extend this exception to your version of the program, but you are not obligated to do so.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ten24/Slatwall"	"An Open Source Commerce Platform"	"true"
"NoSQL"	"CFArango"	"https://github.com/dajester2013/CFArango"	"ArangoDB client for ColdFusion"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"4"	"1"	"GitHub - dajester2013/CFArango: CFML client library for ArangoDB. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 4 Fork 1 dajester2013/CFArango Code Issues 2 Pull requests 0 Wiki Pulse Graphs CFML client library for ArangoDB. 120 commits 6 branches 5 releases Fetching contributors ColdFusion 100.0% ColdFusion Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages master odm pooled_conn rewrite Nothing to show 1.1.0 1.0.2 1.0.1 1.0 1.0a1 Nothing to show New pull request Latest commit e52d395 Jan 18, 2015 dajester2013 Update README.md Permalink Failed to load latest commit information. .externalToolBuilders added build script for building a Railo Extension. requires the Apr 14, 2014 build/scripts Finally, a basic working test build system. Jun 11, 2014 extension Railo extension store is case sensitive on installer component name May 25, 2014 org/jdsnet/arangodb Merge github changes into local workspace Nov 22, 2014 tests reorganized tests into those that can be run automated and those that Nov 22, 2014 .gitignore builds update - trying to separate things better... also, and the Jun 14, 2014 .project basic working test platform by downloading and launching railo/mxunit as May 24, 2014 .travis.yml travis didnt like the install command. splitting it... Jun 14, 2014 LICENSE licensing. also fixed a problem with the database not specifying its Dec 6, 2013 README.md Update README.md Jan 18, 2015 build.properties Fixed the extension build process - can build either an SRC or a RA e… Nov 22, 2014 build.xml Fixed the extension build process - can build either an SRC or a RA e… Nov 22, 2014 ivy.xml the railo.express.jetty config for railo 4.2.1+ does not seem to be Nov 22, 2014 ivysettings.xml basic working test platform by downloading and launching railo/mxunit as May 25, 2014 README.md CFArango CFML client library for ArangoDB. master: develop: Requirements Railo 4.1+, or Adobe ColdFusion 10+ ArangoDB 1.4+, 2.0+ Installation: Clone the repository: git clone https://github.com/dajester2013/CFArango.git Add mapping to the code (not necessary if project is cloned into your project/webserver root). Use one of the following methods: Railo/ACF Application.cfc mapping: this.mappings[""/org""] = [/path/to/CFArango]/org Railo Component resource mapping: Navigate to the administrator page (server or web depending on how wide you desire access) Under Archives & Resources > Component, add a resouce: Name = cfarango Resource = /path/to/CFArango (NOTE: do not add the /org to the resource path!) r ACF custom tag path Add /path/to/CFArango to the custom tags path Can be set in the Administrator under Extensions > Custom Tag Paths Can be set in Application.cfc this.customtagpaths=""/path/to/CFArango""; Examples: <cfscript> // representative of the defaults conn = new org.jdsnet.arangodb.Connection()         .setHost(""localhost"")         .setPort(8529)         .setProtocol(""http"");  // representative of the defaults conn.getCredentials()     .setUsername(""root"")     .setPassword("""");  var database = conn.getDatabase(""_system"");  var collection = database.createCollection(""test""); var relation = database.createEdgeCollection(""relation"");  doc1 = collection.save({     ""key"" : ""value"" // use quotes around the key to preserve case });  var doc2 = collection.newDocument({     ""key"" : ""value"" }); doc2.put(""anotherKey"",""anotherValue""); doc2.putAll({}); doc2.save();   // different ways to create relations doc1.createEdge(""relation"").to(doc2).save();    // creates an ""outbound"" relation from doc1 to doc2 doc1.createEdge(""relation"").from(doc2).save();  // creates an ""inbound"" relation from doc2 to doc1  relation.newDocument().from(doc1).to(doc2).save(); // same as first example of creating an edge.  // delete a document - note, any edges referencing this document are orphaned currently doc1.delete();  // queries   // AQL   var stmt = database.prepareStatement(""for document filter key == @key in collection return document"")             .setBatchSize(100);   var cursor = stmt.execute({""key"" : ""value""});    // reading the result set     // option 1     var result = cursor.toArray();     // option 2     var result = cursor.toQuery();     // option 3     while (cursor.hasNext()) {  // or hasNextBatch         writedump(cursor.next()); // or nextBatch     }     // option 4     cursor.each(function(doc) {  // or eachBatch         writedump(doc); // or batch     });    // Read By Example   var cursor = collection.queryByExample({""key"":""value""});   var cursor = collection.fullTextSearch("""");    // Update By Example   var result = collection.updateByExample(example={}, update={});   // Replace By Example   var result = collection.replaceByExample(example={}, update={});    // Delete By Example   var result = collection.deleteByExample(example={});  </cfscript> Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dajester2013/CFArango"	"ArangoDB client for ColdFusion"	"true"
"NoSQL"	"CFCouchbase"	"https://github.com/Ortus-Solutions/cfcouchbase-sdk"	"Couchbase NoSQL and caching client wrapper for ColdFusion"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9"	"8"	"6"	"GitHub - Ortus-Solutions/cfcouchbase-sdk: The Couchbase SDK for CFML Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 9 Fork 6 Ortus-Solutions/cfcouchbase-sdk Code Issues 0 Pull requests 1 Pulse Graphs The Couchbase SDK for CFML 229 commits 3 branches 3 releases Fetching contributors ColdFusion 100.0% ColdFusion Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: development Switch branches/tags Branches Tags development feature/java-sdk-2.3.0 master Nothing to show v2.0.0 v1.1.0 v1.0.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. apidocs build cfcouchbase samples tests .editorconfig .gitattributes .gitignore LICENSE README.md box.json server.json README.md       __       __________________                 __    __                     ____\ \     / ____/ ____/ ____/___  __  _______/ /_  / /_  ____ _________   /____/\ \   / /   / /_  / /   / __ \/ / / / ___/ __ \/ __ \/ __ `/ ___/ _ \ /____/ / /  / /___/ __/ / /___/ /_/ / /_/ / /__/ / / / /_/ / /_/ (__  )  __/       /_/   \____/_/    \____/\____/\__,_/\___/_/ /_/_.___/\__,_/____/\___/   SDK v@build.version@+@build.number@ Copyright Since 2013 Ortus Solutions, Corp WELCOME TO THE CFCOUCHBASE SDK The CFCouchbase SDK is a CFML library for interacting with Couchbase NoSQL Server. It can be used by any CFML application or CFML framework to provide them with NoSQL, distributed caching, dynamic queries and many more capabilities. The CFCouchbase SDK wraps the Couchbase Java SDK and enhances it to provide with a nice dynamic language syntax and usability. Initially sponsored by Guardly, Inc (www.guardly.com) Couchbase is copyright and a registered trademark by Couchbase, Inc. LICENSE Apache License, Version 2.0. IMPORTANT LINKS Source Code - https://github.com/Ortus-Solutions/cfcouchbase-sdk Tracker Site (Bug Tracking, Issues) - https://ortussolutions.atlassian.net/browse/COUCHBASESDK Documentation - https://cfcouchbase.ortusbooks.com/ Blog - http://www.ortussolutions.com/blog Official Site - http://www.ortussolutions.com/products/cfcouchbase SYSTEM REQUIREMENTS Couchbase Server 1.8+ Lucee 4.5+ Adobe ColdFusion 10+ CommandBox Installation The easiest way to get started with CFCouchbase is to use CommandBox CLI to install in any directory: box install cfcouchbase That's it! Manual Installation Place anywhere in your server and create a ""/cfcouchbase"" mapping to the ""cfcouchbase"" directory from the distribution. this.mappings[ ""/cfcouchbase"" ] = path.to.cfcouchbase;  You can also place the cfcouchbase folder in your webroot. Copyright Since 2005 ColdBox Framework by Luis Majano and Ortus Solutions, Corp www.coldbox.org | www.luismajano.com | www.ortussolutions.com HONOR GOES TO GOD ABOVE ALL Because of His grace, this project exists. If you don't like this, then don't read it, its not for you. ""Therefore being justified by faith, we have peace with God through our Lord Jesus Christ: By whom also we have access by faith into this grace wherein we stand, and rejoice in hope of the glory of God. And not only so, but we glory in tribulations also: knowing that tribulation worketh patience; And patience, experience; and experience, hope: And hope maketh not ashamed; because the love of God is shed abroad in our hearts by the Holy Ghost which is given unto us. ."" Romans 5:5 THE DAILY BREAD ""I am the way, and the truth, and the life; no one comes to the Father, but by me (JESUS)"" Jn 14:1-12 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Ortus-Solutions/cfcouchbase-sdk"	"Couchbase NoSQL and caching client wrapper for ColdFusion"	"true"
"NoSQL"	"cfmongodb"	"https://github.com/marcesher/cfmongodb"	"MongoDB client wrapper for ColdFusion"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"88"	"19"	"39"	"GitHub - marcesher/cfmongodb: MongoDB client wrapper for ColdFusion Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 88 Fork 39 marcesher/cfmongodb forked from virtix/cfmongodb Code Issues 11 Pull requests 1 Wiki Pulse Graphs MongoDB client wrapper for ColdFusion 331 commits 7 branches 0 releases 12 contributors ColdFusion 95.2% Java 4.8% ColdFusion Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags 0.9 1.6_compatible 1.8_compatible api_redo develop master old-master Nothing to show Nothing to show New pull request Pull request Compare This branch is 118 commits ahead, 7 commits behind virtix:master. Latest commit 33d3097 Jul 26, 2015 marcesher Merge pull request #49 from rayvarner/develop … Introduced Lucee into codebase. Permalink Failed to load latest commit information. core Introduced Lucee into codebase. Jul 22, 2015 doc added example for ssl support to MongoTest Aug 10, 2012 examples Merge pull request #38 from prismic/develop Apr 18, 2013 java Added an ""asString"" function in mongoUtil that can set a value to be … Mar 26, 2013 lib Rebuild cfmongodb.jar; update AggregationTest for new class of Aggreg… May 22, 2013 test ACF compatibility fix Mar 23, 2014 .classpath Rebuild cfmongodb.jar; update AggregationTest for new class of Aggreg… May 23, 2013 .gitignore added example for ssl support to MongoTest Aug 10, 2012 .project Added $set to update; added more examples of update and $inc to getti… Nov 6, 2010 Application.cfc updating wsversion for zeus Dec 19, 2011 README.textile fixed typo'd variable name and some cf syntax errors May 14, 2012 build.xml tweaked build Aug 30, 2011 copy_jars_to_cf_classpath.xml Add additional 'example' test to 'example tests' run May 22, 2013 index.cfm updated java driver jar; added additional mongo object construction n… Sep 9, 2012 README.textile CFMongoDB CFMongoDB is both partial wrapper for the MongoDB Java driver and a document-struct mapper for ColdFusion. It attempts to remove the need for constant javacasting in your CFML when working with MongoDB. Additionally, there’s a simple DSL which provides ColdFusion developers the ability to easily search MongoDB document collections. CFMongoDB works with Adobe ColdFusion 9.0.1+ and Railo 3.2+ Notes As of August 20, 2011, collection.update(), collection.findAndModify(), and “sort” all introduced breaking changes! update() and findAndModify() They no longer wrap documents in {$set} automatically. You will need to change your “update” documents like so: old: {newField=""hey""} new: { “$set” = {newField=""hey""} } sort Sort must now be a structure… string support is no longer supported. old: find(sort=“TS=-1”) new: find(sort={""TS""=-1}) Some Code One of the most appealing aspects is that data can be created as a ColdFusion structure and persisted almost verbatim. Example: <cfscript>  //save col = mongo.getDBCollection( 'my_collection' ); my_struct = {   name = 'Orc #getTickCount()#'   foo = 'bar'   bar = 123   'tags'=[ 'cool', 'distributed', 'fast' ] };  col.save( my_struct );  //query result = col.query().startsWith('name','Orc').find(limit=20); writeOutput(""Found #result.size()# of #result.totalCount()# Orcs"");  //use the native mongo cursor. it is case sensitive! cursor = result.asCursor(); while( cursor.hasNext() ){   thisOrc = cursor.next();   writeOutput("" name = #thisOrc['name']# <br>""); }  //use a ColdFusion array of structs. this is not case sensitive orcs = result.asArray(); for(orc in orcs){   writeOutput("" name = #orc.name# <br>""); }  </cfscript>  More Examples See examples/gettingstarted.cfm to start. Additional examples are in the various subdirectories in examples/ The Wiki Check out the wiki for additional info: http://wiki.github.com/marcesher/cfmongodb/ Getting Help We have a Google group: http://groups.google.com/group/cfmongodb Please limit conversations to MongoDB and ColdFusion. General MongoDB questions are best asked on the MongoDB group at http://groups.google.com/group/mongodb-user Posting Issues Post issues to the github issue tracker for the project. Better: post fixes. Best: post fixes with unit tests. Getting Involved Collaboration is welcome. Fork — Commit — Request a pull. For bug fixes and feature additions, commits with unit tests are much more likely to be accepted. Code well. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/marcesher/cfmongodb"	"MongoDB client wrapper for ColdFusion"	"true"
"REST"	"ColdBox REST"	"http://wiki.coldbox.org/wiki/Building_Rest_APIs.cfm"	"Native REST routing and rendering capababilities"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ColdBox Platform Wiki - Building Rest APIs  All the new ColdBox, CacheBox, WireBox, TestBox and LogBox docs can be found here: https://www.gitbook.com/@ortus coldbox.org >> About Downloads Code ForgeBox Support Training Media API Blog Jobs Docs Home Quick Index Introduction ColdBox Overview Directory Layout & Conventions Request Life Cycles Application Bootstrapper Configuring Application Configuration Using configuration settings Fun Logging with LogBox Models ColdBox Models Dependency Injection via WireBox Active Entity Built-in ORM Services Hibernate Criteria Builder ORM Event Handling Views Layouts and Rendering in ColdBox Controllers Event Handlers ColdBox SES URL Mappings Object and Form Validation Request Context Request Context Extending the Request Context Tumble Down The Rabbit Hole... Handling Exceptions Flash RAM & Webflows Ajax Integration Powering Flex/Air/SOAP/REST Apps Caching with CacheBox Localization & i18n ColdBox Security Aspect Oriented Programming ColdBox Recipes Extending ColdBox ColdBox Modules & Architecture ColdBox Plugins Core Plugins Browser ColdBox Interceptors Core Interceptors Browser Testing TestBox Testing Framework TestBox BDD Primer TestBox xUnit Primer Testing ColdBox Applications Mocking-Stubbing with MockBox Tools, IDE Extras ColdBox Platform Utilities IDE Syntax Dictionaries Standalone Projects ColdBox Cheatsheet API Docs Directory SideBar My Dashboard Help Rss Feeds Category Listing Page Directory Namespace Directory User Login Username Password Submitting... Forgot Password?         Building_Rest_APIs last edited bybdw429s on 22-Dec-2014 History  << Back to Dashboard Contents Building ColdFusion Rest APIs Overview Introduction To REST Defining Resources Defining URL Routes Route Placeholders Numeric Pattern Matcher Alphabetic Pattern Matcher Regex Pattern Matcher Returning Representations (Data) renderData() Format Detection Handler Return Data Status Codes Caching Security Requiring SSL Basic HTTP Auth Custom Restricting HTTP Verbs Error Handling Handler onError() Global Exception Handler ColdBox Relax Building ColdFusion Rest APIs Covers up to version 3.8.0 Overview REST APIs are a popular and easy way to add HTTP endpoints to your web applications to act as web services for third parties or even other internal systems. REST is simpler and requires less verbosity and overhead than other protocols such as SOAP or XML-RPC. Creating a fully-featured REST API is easy with the ColdBox Platform. Everything you need for creating routes, massaging data, and enforcing security comes out of the box.   Download RefCard Introduction To REST REST stands for Representational State Transfer and builds upon the basic idea that data is represented as resources and accessed via a URI, or unique address. An HTTP client (such as a browser, or the CFHTTP tag) can send requests to a URI to interact with it. The HTTP verb (GET, POST, etc) sent in the header of the request tells the server how the client want to interact with that resource. As far as how your data is formatted or how you implement security is left up to you. REST is less prescriptive than other standards such as SOAP (which uses tons of heavy XML and strictly-typed parameters). This makes it more natural to understand and easier to test and debug. To use REST in ColdBox ensure you have the SES interceptor enabled (Which is enabled by default for all applications). Make sure the following interceptor is defined in your /config/ColdBox.cfc configuration file. More info here.  interceptors = [   {class=""coldbox.system.interceptors.SES""} ];  Defining Resources A REST API can define its resources on its own domain (http://api.example.com), or after a static placeholder that differentiates it from the rest of the app (http://www.example.com/api/). We'll use the latter for these examples. Let's consider a resource we need to represent called ""user"". Resources should usually be nouns. If you have a verb in your URL, you're probably doing it wrong. It is also important to note that REST is a style of URL architecture not a mandate, so it is an open avenue of sorts. However, you must stay true to its concepts of resources and usage of the HTTP verbs. Here are a few pointers when using the HTTP verbs:  http://www.example.com/api/user  GET /api/user will return a representation of all the users. It is permissible to use a query string to control pagination or filtering. POST /api/user/ will create a new user GET /api/user/53 will return a representation of user 53 PUT /api/user/53 will update user 53 DELETE /api/user/53 will delete user 53 Note: GET, PUT, and DELETE methods should be idempotent which means repeated requests to the same URI don't do anything. Repeated POST calls however, would create multiple users. In ColdBox, the easiest way to represent our ""/api/user"" resource is to create a handler called ""user.cfc"" in the /handlers/api/ directory. In this instance, ColdBox will consider the ""api"" to be a handler package. Here in my handler, I have stubbed out actions for each of the operations I need to perform against my user resource. /handlers/api/user.cfc  component {    function index( event, rc, prc ) {     // List all users   }    function view( event, rc, prc ) {     // View a single user   }    function save( event, rc, prc ) {     // Save a user   }    function remove( event, rc, prc ) {     // Remove a user   }  }  Defining URL Routes Now that we have this skeleton in place to represent our user resource, let's move on show how you can have full control of the URL as well as mapping HTTP verbs to specific handler actions. The default route for our user.cfc handler is /api/user, but what if we want the resource in the URL to be completely different than the handler name convention? To do this, use the /config/routes.cfm file to declare URL routes we want the application to capture and define how to process them. Let's add the following new routes to our /config/routes.cfm file BEFORE the default route.   // map base route to list users addRoute(   pattern = 'api/user',   handler = 'api.user',   action = 'index' );  // Map route to specific user.  Different verbs call different actions! addRoute(   pattern = 'api/user/:userID?',   handler = 'api.user',   action = {     GET = 'view',     POST = 'save',     PUT = 'save',     DELETE = 'remove'   });   You can see if that if action is a string, all HTTP verbs will be mapped there, however a struct can also be provided that maps different verbs to different actions. This gives you exact control over how the requests are routed. Route Placeholders The :userID part of the route pattern is a placeholder. It matches whatever text is in the URL in that position. The value of the text that is matched will be available to you in the request collection as rc.userID. You can get even more specific about what kind of text you want to match in your route pattern. Numeric Pattern Matcher Append -numeric to the end of the placeholder to only match numbers.  addRoute( pattern = 'user/:userID-numeric' );  This route will match user/123 but not user/bob. Alphabetic Pattern Matcher Append -alpha to the end of the placeholder to only match upper and lowercase letters.  addRoute( pattern = 'page/:slug-alpha' );  This route will match page/contactus but not page/contact-us3. Regex Pattern Matcher For full control, you can specify your own regex pattern to match parts of the route  addRoute( pattern = 'api/regex:(user|person)' );  This route will match api/user and api/person, but not /api/contact Note: If a route is not matched it will be skipped and the next route will be inspected. If you want to validated parameters and return custom error messages inside your handler, then don't put the validations on the route. As you can see, you have many options to craft the URL routes your API will use. Routes can be as long as you need. You can even nest levels for URLs like /api/users/contact/address/27 which would refer to the address resource inside the contact belonging to a user. More info here Returning Representations (Data) REST does not dictate the format of data you use to represent your data. It can be JSON, XML, WDDX, plain text, or something else of your choosing. renderData() The most common way to return data from your handler's action is to use the event object's renderData() method. It takes complex data and turns it into a string representation. Here are some of the most common formats supported by event.renderData(): XML JSON TEXT WDDX  // xml marshalling function getUsersXML( event, rc, prc ){ 	var qUsers = getUserService().getUsers(); 	event.renderData( type=""XML"", data=qUsers ); } //json marshalling function getUsersJSON( event, rc, prc ){ 	var qUsers = getUserService().getUsers(); 	event.renderData( type=""json"", data=qUsers ); }  Format Detection Many APIs allow the user to choose the format they want back from the endpoint by appending a file ""extension"" to the end of the URL.  http://www.example.com/api/user.json http://www.example.com/api/user.xml http://www.example.com/api/user.text  ColdBox has built-in support for detecting an extension in the URL and will save it into the request collection in a variable called format. What's even better is that renderData() can find the the format variable and automatically render your data in the appropriate way. All you need to do is pass in a list of valid rendering formats and renderData() will do the rest.    function index( event, rc, prc ) { 	var qUsers = getUserService().getUsers(); 	// Correct format auto-detected from the URL 	event.renderData( data=qUsers, formats=""json,xml,text"" );   }  Handler Return Data You can also return a string representation of the data directly from the method if you want to manually create it. It is important that you return a string. Complex data can't be sent over HTTP. In this example, there are no views or layouts in play-- just raw data being returned from our handler.    function index( event, rc, prc ) {     return 'This is the result of my REST call';   }  Status Codes Status codes are a core concept in HTTP and REST APIs use them to send messages back to the client. Here are a few sample REST status codes and messages. 200 - OK - Everything is hunky-dory 202 - Created - The resource was created successfully 400 - Bad Request - The server couldn't figure out what the client was sending it 401 - Unauthorized - The client isn't authorized to access this resource 404 - Not Found - The resource was not found 500 - Server Error - Something bad happened on the server You can easily set status codes as well as the status message with renderData(). HTTP status codes and messages are not part of the response body. They live in the HTTP header.  function view( event, rc, prc ){ 	var qUser = getUserService().getUser( rc.userID ); 	if( qUser.recordCount ) { 		event.renderData( type=""JSON"", data=qUser ); 	} else { 		event.renderData( type=""JSON"", data={}, statusCode=404, statusMessage=""User not found""); 	} }  function save( event, rc, prc ){ 	// Save the user represented in the request body 	var userIDNew = userService.saveUser( event.getHTTPContent() ); 	// Return back the new userID to the client 	event.renderData( type=""JSON"", data={ userID = userIDNew }, statusCode=201, statusMessage=""We have created your user""); }  Status codes can also be set manually by using the event.setHTTPHeader() method in your handler.  function worldPeace( event, rc, prc ){ 	event.setHTTPHeader( statusCode=501, statusText='Not Implemented' ); 	return 'Try back later.'; }  Caching One of the great benefits of building your REST API on the ColdBox platform is tapping into great features such as event caching. Event caching allows you to cache the entire response for a resource using the incoming FORM and URL variables as the cache key. To enable event caching, set the following flag to true in your ColdBox config. /config/ColdBox.cfc  coldbox.eventCaching = true;  Next, simply add the cache=true annotation to any action you want to be cached. That's it! You can also get fancy, and specify an optional cacheTimeout and cacheLastAccesstimeout (in minutes) to control how long to cache the data.  // Cache for default timeout function showEntry( event, rc, prc ) cache=""true"" { 	prc.qEntry = getEntryService().getEntry( event.getValue( 'entryID', 0 ) );		 	event.renderData( type=""JSON"", data=prc.qEntry ); }  // Cache for one hour, or 20 minutes from the last time accessed. function showEntry( event, rc, prc ) cache=""true"" cacheTimeout=""60"" cacheLastAccessTimeout=""20"" { 	prc.qEntry = getEntryService().getEntry( event.getValue( 'entryID', 0 ) );		 	event.renderData( type=""JSON"", data=prc.qEntry ); }  Data is stored in CacheBox's template cache. You can configure this cache to store its contents anywhere including a Couchbase cluster! Security Adding authentication to an API is a common task and while there is no standard for REST, ColdBox supports just about anything you might need. Requiring SSL To prevent man-in-the-middle attacks or HTTP sniffing, we recommend your API require SSL. (This assumes you have purchased an SSL Cert and installed it on your server). When you define you routes, you can add SSL=true and ColdBox will only allow those routes to be access securely/  // Secure Route addRoute(   pattern = 'api/user',   handler = 'api.user',   action = 'index',   SSL = true );  If your client is capable of handling cookies (like a web browser) you can use the session or client scopes to store login details. Generally speaking, your REST API should be stateless, meaning nothing is stored on the server after the request completes. In this scenario, authentication information is passed along with every request. It can be passed in HTTP headers or as part of the request body. How you do this is up to you. Basic HTTP Auth One of the simplest and easiest forms of authentication is Basic HTTP Auth. Note, this is not the most robust or secure method of authentication and most major APIs such as Twitter and FaceBook have all moved away from it. In Basic HTTP Auth, the client sends a header called Authorization that contains a base 64 encoded concatenation of the username and password. You can easily get the username and password using event.getHTTPBasicCredentials().  function preHandler( event, action, eventArguments ){ 	var authDetails = event.getHTTPBasicCredentials(); 	if( !securityService.authenticate( authDetails.username, authDetails.password ) ) { 		event.renderData( type=""JSON"", data={ message = 'Please check your credentials' }, statusCode=401, statusMessage=""You're not authorized to do that""); 	} }  Custom The previous example put the security check in a preHandler() method which will get automatically run prior to each action in that handler. You can implement a broader solution by tapping into any of the ColdBox interception points such as preProcess which is announced at the start of every request. Remember interceptors can include an eventPattern annotation to limit what ColdBox events they apply to. In addition to having access to the entire request collection, the event object also has handy methods such as event.getHTTPHeader() to pull specific headers from the HTTP request. /interceptors/APISecurity.cfc  /** * This interceptor secures all API requests */ component{ 	// This will only run when the event starts with ""api."" 	function preProcess( event, interceptData, buffer ) eventPattern = '^api\.' { 		var APIUser = event.getHTTPHeader( 'APIUser', 'default' ); 		 		// Only Honest Abe can access our API 		if( APIUser != 'Honest Abe' ) { 			// Every one else will get the error response from this event 			event.overrideEvent('api.general.authFailed'); 		} 	} }  Register the interceptor with ColdBox /config/ColdBox.cfc  interceptors = [   {class=""coldbox.system.interceptors.SES""},   {class=""interceptors.APISecurity""} ];  As you can see there are many points to apply security to your API. One not covered here would be to tap into WireBox's AOP and place your security checks into an advice that can be bound to whatever API method you need to be secured. Restricting HTTP Verbs In our route configuration we mapped HTTP verbs to handlers and actions, but what if users try to access resources directly with an invalid HTTP verb? You can easily enforce valid verbs (methods) by adding this.allowedMethods at the top of your handler. In this handler the list() method can only be access via a GET, and the remove() method can only be access via POST and DELETE.  component{ 	 	this.allowedMethods = {  		remove = ""POST,DELETE""  		list   = ""GET"" 	};  	function list( event, rc, prc ){}  	function remove( event, rc, prc ){} }  The key is the name of the action and the value is a list of allowed HTTP methods. If the action is not listed in the structure, then it means allow all. If the request action HTTP method is not found in the list then it throws a 405 exception. You can catch this scenario and still return a properly-formatted response to your clients by using the onError() convention in your handler or an exception handler which applies to the entire app. Error Handling ColdBox REST APIs can use all the same error faculties that an ordinary ColdBox application has. You can read about them here. we'll cover two of the most common ways here. Handler onError() If you create a method called onError() in a handler, ColdBox will automatically call that method for runtime errors that occur while executing any of the actions in that handler. This allows for localized error handling that is customized to that resource.  // error uniformity for resources function onError( event, rc, prc, faultaction, exception ){ 	prc.response = getModel(""ResponseObject""); 	 	// setup error response 	prc.response.setError(true); 	prc.response.addMessage(""Error executing resource #arguments.exception.message#""); 	 	// log exception 	log.error( ""The action: #arguments.faultaction# failed when requesting resource: #arguments.event.getCurrentRoutedURL()#"", getHTTPRequestData() ); 	 	// display 	arguments.event.setHTTPHeader(statusCode=""500"",statusText=""Error executing resource #arguments.exception.message#"") 		.renderData( data=prc.response.getDataPacket(), type=""json"" ); }  Global Exception Handler The global exception handler will get called for any runtime errors that happen anywhere in the typical flow of your application. This is like the onError() convention but covers the entire application. First, configure the event you want called in the ColdBox.cfc config file. The event must have the handler plus action that you want called. /config/ColdBox.cfc  coldbox = { 	... 	exceptionHandler = ""main.onException"" 	... };  Then create that action and put your exception handling code inside. You can choose to do error logging, notifications, or custom output here. You can even run other events. /handlers/main.cfc  component { 	function onException( event, rc, prc ){ 		// Log the exception via LogBox 		log.error( rc.exceptionBean.getMessage() & rc.exceptionBean.getDetail(), rc.exceptionBean.getMemento() ); 	 		// Flash where the exception occurred 		flash.put(""exceptionURL"", event.getCurrentRoutedURL() ); 	 		// Relocate to fail page 		setNextEvent(""main.fail""); 	} }  ColdBox Relax ColdBox Relax is a set of ReSTful Tools For Lazy Experts. We pride ourselves in helping you (the developer) work smarter and ColdBox Relax is a tool to help you document your projects faster. ColdBox Relax provides you with the necessary tools to automagically model, document and test your ReSTful services. One can think of ColdBox Relax as a way to describe ReSTful web services, test ReSTful web services, monitor ReSTful web services and document ReSTful web services–all while you relax! You can read more about Relax on the Official Relax Doc page.   Download in other Formats: Markup | HTML | Word ColdBox Books Purchase Books Buy Book! Buy Kindle! Buy eBook! See all books! Media ColdBox TV ColdBox Connection Video Feeds Developer Week Social Media twitter.com/coldbox twitter.com/ortussolutions twitter.com/lmajano twitter.com/gocontentbox facebook.com/coldbox Ortus Services Support & Mentoring Architecture & Design Expert Training Server Setup & Tuning Consulting Contact Us info@coldbox.org info@ortussolutions.com www.ortussolutions.com Copyright Ortus Solutions, Corp >> ContentBox v0.5 Beta 2 Design By DT"	"null"	"null"	"Native REST routing and rendering capababilities"	"true"
"REST"	"FW/1 REST"	"https://github.com/framework-one/fw1/wiki/Developing-Applications-Manual#controllers-for-rest-apis"	"Native REST routing and rendering capababilities"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"336"	"71"	"135"	"Developing Applications Manual · framework-one/fw1 Wiki · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 71 Star 336 Fork 135 framework-one/fw1 Code Issues 6 Pull requests 0 Wiki Pulse Graphs Developing Applications Manual Mingo Hagen edited this page Feb 18, 2016 · 82 revisions Pages 9 Home Designing Applications Developing Applications Manual FW 1 Site Showcase Helpful Links Migrating Applications Reference Manual Roadmap Using Subsystems Clone this wiki locally Clone in Desktop This documentation covers FW/1 2.5 (and earlier, to some extent). See the FW/1 3.0 Documentation for the latest Developing Applications Manual (for release 3.0). Developing Applications with FW/1 FW/1 is intended to allow you to quickly build applications with the minimum of overhead and interference from the framework itself. The convention-based approach means that you can quickly put together an outline of your site or application merely by creating folders and files in the views folder. As you are ready to start adding business logic to the application, you can add controllers and/or services as needed to implement the validation and data processing. Basic Application Structure FW/1 applications must have an Application.cfc that extends org.corfield.framework (will be framework.one in 3.0) and an empty index.cfm as well as at least one view (under the views folder). Typical applications will also have folders for controllers, services and layouts. The folders may be in the same directory as Application.cfc / index.cfm or may be in a directory accessible via a mapping (or some other path under the webroot). If the folders are not in the same directory as Application.cfc / index.cfm, then variables.framework.base must be set in Application.cfc to identify the location of those folders. Note: because Application.cfc must extend the FW/1 framework.cfc, you need a mapping in the CF Administrator. An alternative approach is to simply copy framework.cfc to your application’s folder (containing Application.cfc and index.cfm) and then have Application.cfc extend framework instead. This requires no mapping – but means that you have multiple copies of the framework instead of a single, central copy. The views folder contains a subfolder for each section of the site, each section’s subfolder containing individual view files (pages or page fragments) used within that section. All view folders and filenames must be all lowercase. The layouts folder may contain general layouts for each section and/or a default layout for the entire site. The layouts folder may also contain subfolders for sections within the site, which in turn contain layouts for specific views. All layout folders and filenames must be all lowercase. The controllers folder contains a CFC for each section of the site (that needs a controller!). Each CFC contains a method for each requested item in that section (where control logic is needed). Controller CFC filenames must be all lowercase. You would typically also have a model folder containing CFCs for your services and your domain objects – the business logic of your application. Prior to Release 2.5, you would have had a service folder for service CFCs but there would have no consistent structure for the rest of your business logic. An application may have additional web-accessible assets such as CSS, images and so on. Views and Layouts Views and layouts are simple CFML pages. Both views and layouts are passed a variable called rc which is the request context (containing the URL and form variables merged together). Layouts are also passed a variable called body which is the current rendered view. Both views and layouts have direct access to the full FW/1 API (see below). The general principle behind views and layouts in FW/1 is that each request will yield a unique page that contains a core view, optionally wrapped in a section-specific layout, wrapped in a general layout for the site. In fact, layouts are more flexible than that, allowing for item-specific layouts as well as section-specific layouts. See below for more detail about layouts. Both views and layouts may invoke other views by name, using the view() method in the FW/1 API. For example, the home page of a site might be a portal style view that aggregates the company mission with the latest news. views/home/default.cfm might therefore look like this: <cfoutput>   <div>#view('company/mission')#</div>   <div>#view('news/list')#</div> </cfoutput> This would render the company.mission view and the news.list view. Note: The view() method behaves like a smart include, automatically handling subsystems and providing a local scope that is private to each view, as well as the rc request context variable (through which views can communicate, if necessary). No controllers are executed as part of a view() call. As of 1.2, additional data may be passed to the view() method in an optional second argument, as elements of a struct that is added to the local scope. Views and Layouts in more depth As hinted at above, layouts may nest, with a view-specific layout, a section-specific layout and a site-wide layout. When FW/1 is asked for section.item, it looks for layouts in the following places: layouts/section/item.cfm – The view-specific layout layouts/section.cfm – The section-specific layout layouts/default.cfm – The site-wide layout For a given item up to three layouts may be found and executed, so the view may be wrapped in a view-specific layout, which may be wrapped in a section-specific layout, which may be wrapped in a site-wide layout. To stop the cascade, set request.layout = false; in your view-specific (or section-specific) layout. This allows for full control in authoring section and/or page specific layouts which may be very different from your site-wide layout. This approach also allows you to have a view which returns plain XML or JSON, by using a view-specific layout that looks like this: <cfoutput>#body#</cfoutput> <cfset request.layout = false> (although you’d probably want to set the content type header to ensure XML was handled correctly!). By default, FW/1 selects views (and layouts) based on the action initiated, subsystem:section.item but that can be overridden in a controller by calling the setView() and setLayout() methods to specify a new action to use for the view and layout lookup respectively. setLayout() is new in 2.0. This can be useful when several actions need to result in the same view, such as redisplaying a form when errors are present. The view and layout CFML pages are actually executed by being included directly into the framework CFC. That’s how the view() method is made available to them. In fact, all methods in the framework CFC are directly available inside views and layouts so you can access the bean factory (if present), execute layouts and so on. It also means you need to be a little bit careful about unscoped variables inside views and layouts: a struct called local is available for you to use inside views and layouts for temporary data, such as loop variables and so on. It would be hard to give a comprehensive list of variables available inside a view or layout but here are the important ones: path – The path of the view or layout being invoked. For a given view (or layout), it will always be the same so I can’t imagine this being very useful. Strictly speaking, this is arguments.path, the value passed into the view() or layout() method. body – The generated output passed into a layout that the layout should wrap up. Strictly speaking, this is arguments.body, the value passed into the layout() method. rc – A shorthand for the request context (the request.context struct). If you write to the rc struct, layouts will be able to read those values so this can be a useful way to set a page title, for example (set in the view, rendered in the layout where appears). local – An empty struct, created as a local scope for the view or layout. framework – The FW/1 configuration structure (variables.framework in the framework CFC) which includes a number of useful values including framework.action, the name of the URL parameter that holds the action (if you’re building links, you should use the buildURL() API method which knows how to handle subsystems as well as regular section and item values in the action value). You can also write SES URLs without this variable, e.g., /index.cfm/section/item as long as your application server supports such URLs. In addition, FW/1 uses a number of request scope variables to pass data between its various methods so it is advisable not to write to the request scope inside a view or layout. See the ReferenceManual for complete details of request scope variables used by FW/1. It is strongly recommended to use the local struct for any variables you need to create yourself in a view or layout! If you have data that is needed by all of your views, it may be convenient to set that up in your setupView() method in Application.cfc – see Taking Actions on Every Request below. Added in 2.0. Rendering Data to the Caller Prior to 2.2, if you wanted to create an API that returned JSON or XML to a caller, you had to format data in a special view and set the content type correctly and suppressed layouts and so on. It was possible, but ugly. As of 2.2, you can use the renderData() framework API to bypass views and layouts completely and automatically return JSON, XML, or plain text to your caller, with the correct content type automatically set. See below for more details. Designing Controllers Controllers are the pounding heart of an MVC application and FW/1 provides quite a bit of flexibility in this area. The most basic convention is that when FW/1 is asked for section.item it will look for controllers/section.cfc and attempt to call the item() method on it, passing in the request context as a single argument called rc and controllers may call into the application model as needed, then render a view. Controllers are cached in FW/1’s application cache so controller methods need to be written with thread safety in mind (i.e., use var to declare variables properly!). If you are using a bean factory, any setXxx() methods on a controller CFC may be used by FW/1 to autowire beans from the factory into the controller when it is created. Release 2.0 supports property-based autowiring as well as explicit setters. Alternatively, you can let the bean factory take care of the controller CFC’s lifecycle completely: just name the bean with a suffix of Controller and when FW/1 is asked for section.item it will ask the bean factory for sectionController . See the note about Controllers and the FW/1 API below for a caveat on this. In addition, if you need certain actions to take place before all items in a particular section, you can define a before() method in your controller and FW/1 will automatically call it for you, before calling the item() method. This might be a good place to put a security check, to ensure a user is logged in before they can execute other actions in that section. The variable request.item contains the name of the controller method that will be called, in case you need to have exceptions on the security check (such as for a main.doLogin action that attempts to log a user in). Similarly, if you need certain actions to take place after all items in a particular section, you can define an after() method in your controller and FW/1 will automatically call it for you, after calling the item() method and after invoking any service method. Note that your Application.cfc is also viewed as a controller and if it defines before() and after() methods, those are called as part of the lifecycle, around any regular controller methods. Unlike other controllers, it does not need an init() method and instead of referring to the FW/1 API methods via variables.fw… you can just use the API methods directly – unqualified – since Application.cfc extends the framework and all those methods are available implicitly. Added in 2.0. Here is the full list of methods called automatically when FW/1 is asked for section.item : Application.cfc : before() controllers/section.cfc : before() Deprecated: controllers/section.cfc : startItem() controllers/section.cfc : item() Deprecated: (any service calls that were queued via the service() API call) Deprecated: controllers/section.cfc : endItem() controllers/section.cfc : after() Application.cfc : after() Methods that do not exist are not called. Application.cfc methods were not called in FW/1 1.×. Using onMissingMethod() to Implement Items FW/1 supports onMissingMethod(), i.e., if a desired method is not present but onMissingMethod() is declared, FW/1 will call the method anyway. That applies to all five potential controller methods: before, startItem , item , endItem and after. As of Release 2.5, startItem and endItem are deprecated and will not be called by default (unless you set suppressServiceQueue false). That means you must be a little careful if you implement onMissingMethod() since it will be called whenever FW/1 needs a method that isn’t already defined. If you are going to use onMissingMethod(), I would recommend always defining before and after methods, even if they are empty; and if you are still using start and end items, be extra careful! As of 2.1, onMissingMethod() calls will receive two arguments in missingMethodArguments: rc (as in earlier versions) and method which is the type of the method being invoked (“before”, “start”, “item”,“end”, “after”). Using onMissingView() to Handle Missing Views FW/1 provides a default onMissingView() method for Application.cfc that throws an exception (view not found). This allows you to provide your own handler for when a view is not present for a specific request. The most common usage for this is likely to be for Ajax requests, to return a JSON-encoded data value without needing an explicit view to be present. Other use cases are possible since whatever onMissingView() returns is used as the core view and, unless layouts are disabled, it will be wrapped in layouts and then displayed to the user. Be aware that onMissingView() will be called if your application throws an exception and you have not provided a view for the default error handler (main.error – if your defaultSection is main). This can lead to exceptions being masked and instead appearing as if you have a missing view! Taking Actions on Every Request FW/1 provides direct support for handling a specific request’s lifecycle based on an action (either supplied explicitly or implicitly) but relies on your Application.cfc for general lifecycle events. That’s why FW/1 expects you to write per-request logic in setupRequest(), per-session logic in setupSession() and application initialization logic in setupApplication(). FW/1 2.0 adds setupView() which is called just before view rendering begins to allow you to set up data for your views that needs to be globally available, but may depend on the results of running controllers or services. If you have some logic that is meant to be run on every request, the FW/1 way to implement this is to implement setupRequest() in your Application.cfc and have it retrieve the desired controller by name and run the appropriate event method, like this: function setupRequest() {   controller( 'security.checkAuthorization' ); } This queues up a call to that controller at the start of the request processing, calling before(),checkAuthorization() and after() as appropriate, if those methods are present. Note that the request context itself is not available at this point! setupRequest() is to set things up prior to the request being processed. If you need access to rc, you will want to implement before() in your Application.cfc which is a regular controller method that is called before any others (including before() in other controllers which get queued up): function before( struct rc ) {   // set up your RC values } If you need to perform some actions after controllers and services have completed but before any views are rendered, you can implement setupView() in your Application.cfc and FW/1 will call it after setting up the view and layout queue but before any rendering takes place: function setupView( struct rc ) {   // pre-rendering logic } You cannot call controllers here – this lifecycle method is intended for common data setup that is needed by most (or all) of your views and layouts. If services from your model have been autowired into Application.cfc, you can call those. Added in FW/1 2.0. Release 2.5 added the rc argument. Prior to 2.5, you had access to rc in variables scope inside this method but you’d have been safer to use request.context explicitly. Finally, there is a lifecycle method that FW/1 calls at the end of every request – including redirects – where you can implement setupResponse() in your Application.cfc: function setupResponse( struct rc ) {   // end of request processing } This is called after all views and layouts have been rendered in a regular request or immediately before the redirect actually occurs when redirect() has been called. You cannot call controllers here. If services from your model have been autowired into Application.cfc, you can call those. Added in FW/1 2.0. Release 2.5 added the rc argument. Prior to 2.5, you had access to rc in variables scope inside this method but you’d have been safer to use request.context explicitly. Short-Circuiting the Controller / Services Lifecycle If you need to immediately halt execution of a controller and prevent any further controllers or services from being called, use the abortController() method. See the Reference Manual for more details of abortController(), in particular how it interacts with exception-handling code in your controllers. Added in 2.0. Controllers for REST APIs As of 2.2, you can return data directly, bypassing views and layouts, using the new renderData() function. variables.fw.renderData( contentType, resultData ); Calling this function does not exit from your controller, but tells FW/1 that instead of looking for a view to render, the resultData value should be converted to the specified contentType and that should be the result of the complete HTTP request. contentType may be “json”, “xml”, or “text”. The Content-Type HTTP header is automatically set to: application/json; charset=utf-8 text/xml; charset=utf-8 text/plain; charset=utf-8 respectively. For JSON, the resultData value is converted to a string by calling serializeJSON(); for XML, the resultData value is expected to be either a valid XML string or an XML object (constructed via CFML’s various xml…() functions); for plain text, the resultData value must be a string. You can also specify an HTTP status code as a third argument. The default is 200. When you use renderData(), no matching view is required for the action being executed. Designing Services and Domain Objects Services – and domain objects – should encapsulate all of the business logic in your application. Where possible, most of the application logic should be in the domain objects, making them smart objects, and services can take care of orchestrating work that reaches across multiple domain objects. Controllers should call methods on domain objects and services to do all the heavylifting in your application, passing specific elements of the request context as arguments. FW/1’s populate() API is designed to allow you to store arbitrary elements of the request context in domain objects. If you’re using a bean factory (recommended – and covered in the next section), your services can be autowired into your controllers, making it easier to call them directly, without having to worry about how and where to construct those CFCs. Bean factories can also be used to manage your domain objects, autowiring services into them as necessary, so your controllers can simply ask the bean factory for a new domain object, populate() it from the request context, call methods on the domain object, or pass them to services as necessary. Services should not know anything about the framework. Service methods should not “reach out” into the request scope to interact with FW/1 – or any other scopes! – they should simply have some declared arguments, perform some operation and return some data. Services, Domain Objects and Persistence There are many ways to organize how you save and load data. You could use the ORM that comes with ColdFusion or Railo, you could write your own data mapping service, you could write custom SQL for every domain object. Regardless of how you choose to handle your persistence, encapsulating it in a service CFC is probably a good idea. For convenience it is often worth injecting your persistence service into your domain object so you can have a convenient domainObject.save() method to use from your controller, even if it just delegates to the persistence service internally: function save() {     variables.dataService.save( this ); } History of Services and FW/1 The convention introduced in FW/1 1.x to invoke service methods was intended to reduce the number of controller methods that simply delegate to a service method and store the result in the request context. The default service method was invoked as if you had written: request.context.data = section.item( argumentCollection=request.context ); In other words, any declared arguments on the service method were matched against values passed in through the URL or form scope, and the result of the call placed in the data element of the request context for use by the view in that request.Service method calls queued up by the controller placed their results in the designated elements of the request context. FW/1 expected to find service CFCs in the services folder and when it created them, it invoked their init() method, if present, passing no arguments, and then cached the service instance in application scope, just as controllers were cached. That meant that service methods needed to be written with thread safety in mind. If you used a bean factory but let FW/1 create and manage service CFCs, any setXxx() methods on a service CFC could be used by FW/1 to autowire beans from the factory into the service when it is created. _Release 2.0 added support for property-based autowiring as well as explicit setters. _Alternatively, you could let the bean factory take care of the service CFC’s lifecycle completely: just name the bean with a suffix of Service and when FW/1 is asked for section.item, it will ask the bean factory for sectionService. The implicit management of services and queuing up of their method calls was deprecated in Release 2.5 and will be removed in 3.0. The recommended approach has always been to use a bean factory to manage services and autowiring. Using Bean Factories FW/1 supports your favorite bean factory (aka IoC container or DI factory). As long as you have a CFC that supports the following API, FW/1 will accept it as a bean factory: boolean containsBean(string name) – returns true if the factory knows of the named bean any getBean(string name) – returns a fully initialized bean identified by name Telling FW/1 about your bean factory is as simple as calling setBeanFactory(myFactory) inside your Application.cfc’s setupApplication() method. The following example uses DI/1: var bf = new framework.ioc('/controllers,/model'); setBeanFactory(bf); or WireBox: var bf = new framework.WireBoxAdapter(); bf.getBinder().scanLocations('/controllers,/model'); setBeanFactory(bf); or ColdSpring: var bf = createObject('component','coldspring.beans.DefaultXmlBeanFactory').init(); bf.loadBeans( expandPath('config/coldspring.xml') ); setBeanFactory(bf); Note: If you are using subsystems, please read UsingSubsystems for details about setting up bean factories for subsystems. When you tell FW/1 to use a bean factory, it does several things behind the scenes: If the factory knows about a sectionController bean, FW/1 will use that instead of controllers/section.cfc Else FW/1 will create an instance of controllers/section.cfc and attempt to call any setters that match beans from the factory (autowiring beans into the controller) The FW/1 API includes the following methods related to bean factory support: hasBeanFactory() – returns true if FW/1 knows about a bean factory getBeanFactory() – returns the bean factory you told FW/1 about Since an application should know whether it is designed to use a bean factory, it is expected that only the latter method will actually be used and even then only rarely (since controllers and services are autowired and views should not need beans to do their work). Error Handling By default, if an exception occurs, FW/1 will attempt to run the main.error action (as if you had asked for ?action=main.error), assuming your defaultSection is main. If you change the defaultSection, that implicitly changes the default error handler to be the error item in that section. The exception thrown is stored directly in the request scope as request.exception. If FW/1 was processing an action when the exception occurred, the name of that action is available as request.failedAction. The default error handling action can be overridden in your Application.cfc by specifying variables.framework.error to be the name of the action to invoke when an exception occurs. If the specified error handler does not exist or another exception occurs during execution of the error handler, FW/1 provides a very basic fallback error handler that simply displays the exception. If you want to change this behavior, you can either override the failure() method or the onError() method but I don’t intend to “support” that so the only documentation will be in the code! Note: If you override onMissingView() and forget to define a view for the error handler, FW/1 will call onMissingView() and that will hide the original exception. Configuring FW/1 Applications All of the configuration for FW/1 is done through a simple structure in Application.cfc. The default behavior for the application is as if you specified this structure: variables.framework = {   action = 'action',   usingSubsystems = false,   defaultSubsystem = 'home',   defaultSection = 'main',   defaultItem = 'default',   subsystemDelimiter = ':',   siteWideLayoutSubsystem = 'common',   home = 'main.default', // defaultSection & '.' & defaultItem   // or: defaultSubsystem & subsystemDelimiter & defaultSection & '.' & defaultItem   error = 'main.error', // defaultSection & '.error'   // or: defaultSubsystem & subsystemDelimiter & defaultSection & '.error'   reload = 'reload',   password = 'true',   reloadApplicationOnEveryRequest = false,   generateSES = false,   SESOmitIndex = false,   // base = omitted so that the framework calculates a sensible default   baseURL = 'useCgiScriptName',   // cfcbase = omitted so that the framework calculates a sensible default   suppressImplicitService = true, // this used to be false in FW/1 1.x   suppressServiceQueue = true, // false restores the FW/1 2.2 behavior   enableGlobalRC = false, // true restores the FW/1 2.2 behavior   unhandledExtensions = 'cfc',   unhandledPaths = '/flex2gateway',   unhandledErrorCaught = false,   preserveKeyURLKey = 'fw1pk',   maxNumContextsPreserved = 10,   cacheFileExists = false,   applicationKey = 'org.corfield.framework', // will be 'framework.one' in 3.0   trace = false }; The keys in the structure have the following meanings: action – The URL or form variable used to specify the desired action (section.item). usingSubsystems – Whether or not to use subsystems – see Using Subsystems below. defaultSubsystem – If subsystems are enabled, this is the default subsystem when no action is specified in the URL or form post. defaultSection – If subsystems are enabled, this is the default section within a subsystem when either no action is specified at all or just the subsystem is specified in the action. If subsystems are not enabled, this is the default section when no action is specified in the URL or form post. defaultItem – The default item within a section when either no action is specified at all or just the section is specified in the action. subsystemDelimiter – When subsystems are enabled, this specifies the delimiter between the subsystem name and the action in a URL or form post. siteWideLayoutSubsystem – When subsystems are enabled, this specifies the subsystem that is used for the (optional) site-wide default layout. home – The default action when it is not specified in the URL or form post. By default, this is defaultSection.defaultItem. If you specify home, you are overriding (and hiding) defaultSection but not defaultItem. If usingSubsystem is true, the default for home is “home:main.default”, i.e., defaultSubsystem & subsystemDelimiter & defaultSection & ‘.’ & defaultItem. error – The action to use if an exception occurs. By default this is defaultSection.error. reload – The URL variable used to force FW/1 to reload its application cache and re-execute setupApplication(). password – The value of the reload URL variable that must be specified, e.g., ?reload=true is the default but you could specify reload = ‘refresh’, password = ‘fw1’ and then specifying ?refresh=fw1 would cause a reload. reloadApplicationOnEveryRequest – If this is set to true then FW/1 behaves as if you specified the reload URL variable on every request, i.e., at the start of each request, the controller/service cache is cleared and setupApplication() is executed. generateSES – If true, causes redirect() and buildURL() to generate SES-style URLs with items separated by / (and the path info in the URL will begin /section/item rather than ?action=section.item – see the Reference Manual for more details). SESOmitIndex – If SES URLs are enabled and this is true, will attempt to omit the base filename in the path when constructing URLs in buildURL() and redirect() which will generally omit /index.cfm from the start of the URL. Again, see the Reference Manual for more details. base – Provide this if the application itself is not in the same directory as Application.cfc and index.cfm. It should be the relative path to the application from the Application.cfc file. baseURL – Normally, redirect() and buildURL() default to using CGI.SCRIPT_NAME as the basis for the URL they construct. This is the right choice for most applications but there are times when the base URL used for your application could be different. As of 1.2, you can also specify baseURL = “useRequestURI” and instead of CGI.SCRIPT_NAME, the result of getPageContext().getRequest().getRequestURI() will be used to construct URLs. This is the right choice for FW/1 applications embedded inside Mura. cfcbase – Provide this if the controllers and services folders are not in the same folder as the application. It is used as the dotted-path prefix for controller and service CFCs, e.g., if cfcbase = ‘com.myapp’ then a controller would be com.myapp.controllers.MyController. suppressImplicitService – Use this option to tell FW/1 to automatically invoke a service that matches section.item in the request. Added in 1.2. In 2.0, the default of this option is true no implicit service call is queued. In FW/1 1.x, the default was false and FW/1 called a service method automatically. Experience has shown that was not a good idea (sorry!). suppressServiceQueue – Use this option to tell FW/1 to allow service() calls and start/end controller handlers. Release 2.5 deprecated the service queue and introduced this option to allow the release 2.2 behavior to continue until users can migrate away from the service queue. Release 3.0 will remove all of the service queue machinery. New in Release 2.5 enableGlobalRC – Use this option to tell FW/1 to setup rc in the framework’s variables scope. That was the default behavior in FW/1 2.2 but 2.5 adds getRC() and getRCValue() which are a better, safer way to access the request context, and adds this option with a default of false. Set this option to true in FW/1 2.5 to restore the 2.2 behavior to help with migration. unhandledExtensions – A list of file extensions that FW/1 should not handle. By default, just requests for some.cfc are not handled by FW/1. unhandledPaths – A list of file paths that FW/1 should not handle. By default, just requests for /flex2gateway are not handled by FW/1. If you specify a directory path, requests for any files in that directory are then not handled by FW/1. For example, unhandledPaths = ‘/flex2gateway,/404.cfm,/api’ will cause FW/1 to not handle requests from Flex, requests for the 404.cfm page and any requests for files in the /api folder. unhandledErrorCaught – By default the framework does not attempt to catch errors raised by unhandled requests but sometimes when you are migrating from a legacy application it is useful to route error handling of legacy (unhandled) requests through FW/1. The default for this option is false. Set it true to have FW/1’s error handling apply to unhandled requests. Added in 2.1 preserveKeyURLKey – In order to support multiple, concurrent flash scope uses – across redirects – for a single user, such as when they have multiple browser windows open, this value is used as a URL key that identifies which flash context should be restored for that browser window. If that doesn’t make sense, don’t worry about it – it’s magic! This value just needs to be something unique that won’t clash with any of your own URL variables. As of 1.2, this will be ignored if you set maxNumContextsPreserved to 1 because with only one context, FW/1 will not use a URL variable to track flash scope across redirects. maxNumContextsPreserved – If you expect users to have more than 10 browser windows open at the same time, you’ll want to set this value higher. I know, Ryan was very thorough when he implemented multiple flash contexts! As of 1.2, setting maxNumContextsPreserved to 1 will prevent the URL key from being used for redirects (since FW/1 will not need to track multiple flash contexts). cacheFileExists – If you are running on a system where disk access is slow – or you simply want to avoid several calls to fileExists() during requests for performance – you can set this to true and FW/1 will cache all its calls to fileExists(). Be aware that if the result of fileExists() is cached and you add a new layout or a new view, it won’t be noticed until you reload the framework. Added in FW/1 1.2. applicationKey – A unique value for each FW/1 application that shares a common ColdFusion application name. noLowerCase – If true, FW/1 will not force actions to lowercase so subsystem, section and item names will be case sensitive (in particular, filenames for controllers, views and layouts may therefore be mixed case on a case-sensitive operating system). The default is false. Use of this option is not recommended and is not considered good practice. Added in FW/1 2.0. subsystems – An optional struct of structs containing per-subsystem configuration data. Each key in the top-level struct is named for a subsystem. The contents of the nested structs can be anything you want for your subsystems. Retrieved by calling getSubsystemConfig(). Currently the only key used by FW/1 is baseURL which can be used to configure per-subsystem values. Added in FW/1 2.0. trace – If true, FW/1 will print out debugging / tracing information at the bottom of each page. This can be very useful for debugging your application! Note that you must enable session management in your application if you use this feature. Added in FW/1 2.1. At runtime, this structure also contains the following key (from release 0.4 onward): version – The release number (version) of the framework. This is set automatically by the framework and cannot be overridden (well, it shouldn’t be overridden!). In addition you can override the base directory for the application, which is necessary when the controllers, services, views and layouts are not in the same directory as the application’s index.cfm file. variables.framework.base should specify the path to the directory containing the layouts and views folders, either as a mapped path or a webroot-relative path (i.e., it must start with / and expand to a full file system path). If the controllers and services folders are in that same directory, FW/1 will find them automatically. If you decide to put your controllers and services folders somewhere else, you can also specify variables.framework.cfcbase as a dotted-path to those components, e.g., com.myapp.cfcs assuming that com.myapp.cfcs.controllers.Controller maps to your Controller.cfc and com.myapp.cfcs.services.Service maps to your Service.cfc . URL Routes In addition to the standard /section/item URLs that FW/1 supports, you can also specify “routes” that are URL patterns, optionally containing variables, that map to standard /section/item URLs. To use routes, specify variables.framework.routes as an array of structures, where each structure specifies mappings from routes to standard URLs. The array is searched in order and the first matching route is the one selected (and any subsequent match is ignored). This allows you to control which route should be used when several possibilities match. Placeholder variables in the route are identified by a leading colon and can appear in the URL as well, for example { “/product/:id” = “/product/view/id/:id” } specifies a match for /product/something which will be treated as if the URL was /product/view/id/something – section: product, item: view, query string id=something. Routes can also be restricted to specific HTTP methods by prefixing them with $ and the method, for example { “$POST/search” = “/main/search” } specifies a match for a POST on /search which will be treated as if the URL was /main/search – section: main, item: search. A GET operation will not match this route. Routes can also specify a redirect instead of a substitute URL by prefixing the URL with an HTTP status code and a colon, for example { “/thankyou” = “302:/main/thankyou” } specifies a match for /thankyou which will cause a redirect to /main/thankyou. A route of “*” is a wildcard that will match any request and therefore must be the last route in the array. A wildcard route may be restricted to a specific method, e.g., “$POST*” will match a POST to any URL. The keyword “$RESOURCES” can be used as a shorthand way of specifying resource routes: { “$RESOURCES” = “dogs,cats,hamsters,gerbils” } (Added in FW/1 2.2). FW/1 will interpret this as if you had specified a standard set of routes for each of the listed resources. For example, for the resource “dogs”, FW/1 will parse the following routes: { ""$GET/dogs/$"" = ""/dogs/default"" }, { ""$GET/dogs/new/$"" = ""/dogs/new"" }, { ""$POST/dogs/$"" = ""/dogs/create"" }, { ""$GET/dogs/:id/$"" = ""/dogs/show/id/:id"" }, { ""$PATCH/dogs/:id/$"" = ""/dogs/update/id/:id"", ""$PUT/dogs/:id/$"" = ""/dogs/update/id/:id"" }, { ""$DELETE/dogs/:id/$"" = ""/dogs/destroy/id/:id"" } There are also some additional resource route settings that can be specified. First you should note that the following three lines are equivalent: { ""$RESOURCES"" = ""dogs,cats,hamsters,gerbils"" }, { ""$RESOURCES"" = [ ""dogs"",""cats"",""hamsters"",""gerbils"" ] }, { ""$RESOURCES"" = { resources = ""dogs,cats,hamsters,gerbils"" } } The first two lines are shorthand ways of specifying the full configuration struct given in the third line. An example of a full configuration struct would be the following: {   resources = ""dogs"",   methods = ""default,create,show"",   pathRoot = ""/animals"",   nested = ""...""/[...]/{...} } The key “methods”, if specified, limits the generated routes to the method names listed. The key “pathRoot”, if specified, is prepended to the generated route paths, so, given the above configuration struct, you get routes such as { “$GET/animals/dogs/:id” = “/dogs/show/id/:id” }. Alternatively (or in addition), you can specify a subsystem: subsystem = “animals”, which generates routes such as { “$GET/animals/dogs/:id” = “/animals:dogs/show/id/:id” }. The key “nested” is used to indicate resources which should be nested under another resource, and again can be specified as a string list, an array, or a struct. For example: { “$RESOURCES” = { resources = “posts”, nested = “comments” } } results in all of the standard routes for “posts”, and in addition generates nested routes for “comments” such as { “$GET/posts/:posts_id/comments” = “/comments/default/posts_id/:posts_id” }. Here it should be noted that the convention is to map the parent resource key to the variable name “#resource#_id”. Also, you cannot specify a path root or subsystem for a nested resource as it inherits these from its parent resource. The specific routes that FW/1 generates are determined by the variables.framework.resourceRouteTemplates array. By default it looks like the following: variables.framework.resourceRouteTemplates = [   { method = 'default', httpMethods = [ '$GET' ] },   { method = 'new', httpMethods = [ '$GET' ], routeSuffix = '/new' },   { method = 'create', httpMethods = [ '$POST' ] },   { method = 'show', httpMethods = [ '$GET' ], includeId = true },   { method = 'update', httpMethods = [ '$PUT','$PATCH' ], includeId = true },   { method = 'destroy', httpMethods = [ '$DELETE' ], includeId = true } ]; If you wish to change the controller methods the routes are mapped to, for instance, you can specify this array in your Application.cfc and then change the default method names. For example, if you want “$GET/dogs/$” to map to “/dogs/index”, you would change method = ‘default’ to method = ‘index’ in the first template struct. A route structure may also have documentation by specifying a hint: { “/product/:id” = “/product/view/id/:id”, hint = “Display a product” }. Here’s an example showing all the features together: variables.framework.routes = [   { ""/product/:id"" = ""/product/view/id/:id"", ""/user/:id"" = ""/user/view/id/:id"",     hint = ""Display a specific product or user"" },   { ""/products"" = ""/product/list"", ""/users"" = ""/user/list"" },   { ""/old/url"" = ""302:/new/url"" },   { ""$GET/login"" = ""/not/authorized"", ""$POST/login"" = ""/auth/login"" },   { ""$RESOURCES"" = { resources = ""posts"", subsystem = ""blog"", nested = ""comments,tags"" } },   { ""*"" = ""/not/found"" } ]; Environment Control As of version 2.1, FW/1 supports environment control – the ability to automatically detect your application environment (development, production, etc) and adjust the framework configuration accordingly. There are three components to environment control: variables.framework.environments – An optional structure containing groups of framework options for each environment. getEnvironment() – A function that you override in Application.cfc that returns a string indicating the application environment. setupEnvironment( string env ) – A function that may optionally override in Application.cfc to provide more programmatic configuration for your application environment. Environment control is based on the concept of tier – development, staging, production etc – and optionally a server specifier. This two-part string determines how elements of variables.framework.environments are selected and merged into the base framework configuration. A string of the format “tier” or “tier-server” should be returned from getEnvironment(). FW/1 first looks for a group of options matching just tier and, if found, appends those to the base configuration. FW/1 then looks for a group of options matching tier-server and, if found, appends those to the configuration. After merging configuration options, FW/1 calls setupEnvironment() passing the tier/server string so your application may perform additional customization. This process is executed on every request (so be aware of performance considerations) which allows a single application to serve multiple domains and behave accordingly for each domain, for example. Your getEnvironment() function can use any means to determine which environment is active. Common methods are examining CGI.SERVER_NAME or using the server’s actual hostname (accessible thru the new getHostname() API method). Here’s an example setup: public function getEnvironment() {   if ( findNoCase( ""www"", CGI.SERVER_NAME ) ) return ""prod"";   if ( findNoCase( ""dev"", CGI.SERVER_NAME ) ) return ""dev"";   else return ""dev-qa""; } variables.framework.environments = {   dev = { reloadApplicationOnEveryRequest = true, error = ""main.detailederror"" },   dev-qa = { reloadApplicationOnEveryRequest = false },   prod = { password = ""supersecret"" } } With this setup, if the URL contains www, e.g., www.company.com, the tier will be production (“prod”) and the reload password will be changed to “supersecret”. If the URL contains dev, e.g., dev.company.com, the tier will be development (“dev”) and the application will reload on every request. In addition, a detailed error page will be used instead of the default. Otherwise, the tier will still be development (“dev”) but the environment will be treated as a QA server: the development error setting will still be in effect but the framework will no longer reload on every request. Here is another example: public function getEnvironment() {   var hostname = getHostname();   if ( findNoCase( ""local"", hostname ) ) return ""dev-"" & listFirst( hostname, ""-"" );   var svrname = listFirst( hostname, ""."" ); // drop domain name etc   switch ( svrname ) {   case ""proserver14a"": return ""prod-1"";   case ""proserver15c"": return ""prod-2"";   case ""proserver22x"": return ""prod-3"";   case ""proserver03b"": return ""qa"";   default: return ""dev-unknown"";   } } This maps local hostnames to specific developers machines (e.g., my development machine is called Sean-Corfields-iMac.local and my team’s machines follow similar naming). It specifically identifies the three servers in the production cluster and the QA server. All other environments are treated as development with an unknown server specifier. If you want to ensure that all environments are known configurations, your setupEnvironment() function can halt the application if a default environment is detected. Setting up application, session and request variables The easiest way to setup application variables is to define a setupApplication() method in your Application.cfc and put the initialization in there. This method is automatically called by FW/1 when the application starts up and when the FW/1 application is reloaded. The easiest way to setup session variables is to define a setupSession() method in your Application.cfc and put the initialization in there. This method is automatically called by FW/1 as part of onSessionStart(). The easiest way to setup request variables (or even global variables scope) is to define a setupRequest() method in your Application.cfc and put the initialization in there. Note that if you set variables scope data, it will be accessible inside your views and layouts but not inside your controllers or services. Using Subsystems The subsystems feature allows you to combine existing FW/1 applications as modules of a larger FW/1 application. The subsystems feature was contributed by Ryan Cogswell and the documentation was written by Dutch Rapley. Read about Using Subsystems to combine FW/1 applications. Accessing the FW/1 API FW/1 uses the request scope for some of its temporary data so that it can communicate between Application.cfc lifecycle methods without relying on variables scope (and potentially interfering with user data in variables scope). The ReferenceManual specifies which request scope variables are used and what you may and may not do with them. In addition, the API of FW/1 is exposed to controllers, views and layouts in a particular way as documented below. Controllers and the FW/1 API Each controller method is passed the request context as a single argument called rc, of type struct. If access to the FW/1 API is required inside a controller, you can define an init() method (constructor) which takes a single argument, of type any, and when FW/1 creates the controller CFC, it passes itself in as the argument to init(). Your init() method should save that argument in the variables scope for use within the controller methods: function init(fw) {   variables.fw = fw;   return this; } Then you could call any framework method: var user = createObject('component','model.user').init(); variables.fw.populate(user); This will call setXxx() methods on the user bean, passing in matching elements from the request context. An optional second argument may be provided that specifies the keys to populate (the default is to attempt to match against every setXxx() method on the bean): variables.fw.populate(user,'firstName, lastName, email'); This will call setFirstName(), setLastName() and setEmail() on the user bean, passing in matching elements from the request context. The other framework methods that are useful for controllers are: variables.fw.redirect( action, preserve, append, path, queryString ); where action is the action to redirect to, preserve is a list of request context keys that should be preserved across the redirect (using session scope) and append is a list of request context keys that should be appended to the redirect URL. preserve and append can both be omitted and default to none, i.e., no values preserved or appended. The optional path argument allows you to force a new base URL to be used (instead of the default variables.framework.baseURL which is normally CGI.SCRIPT_NAME). queryString allows you to specify additional URL parameters and/or anchors to be added to the generated URL. See the Reference Manual for more details. I cannot imagine other FW/1 API methods being called from controllers at this point but the option is there if you need it. Note: if you let your controllers be managed by a bean factory, in FW/1 1.1 and earlier you lose the ability to pass the framework in at construction time and therefore the ability to call API methods. My recommendation is to use a bean factory to manage your services but let FW/1 create your controllers, pass itself into their constructors and autowire dependencies from the bean factory. As of 1.2, you can use a setFramework( any framework ) method on your controller to have FW/1 injected into your controller. Views/Layouts and the FW/1 API As indicated above under the “in depth” paragraph about views and layouts, the entire FW/1 API is available to views and layouts directly (effectively in the variables scope) because of the way views and layouts are executed. This allows views and layouts to access utility beans from the bean factory, such as formatting services, as well as render views and, if necessary, other layouts. Views and layouts also have access to the framework structure which contains the action key – which could be used for building links: <a href=""?#framework.action#=section.item"">Go to section.item</a> But you’re better off using the buildURL() API method: <a href=""#buildURL( 'section.item' )#"">Go to section.item</a> You can provide additional query string values to buildURL(): <a href=""#buildURL( 'section.item?arg=val' )#"">Go to section.item with arg=val in URL</a> <a href=""#buildURL( action = 'section.item', queryString = 'arg=val' )#"">Go to section.item with arg=val in URL</a> I cannot imagine a view or layout needing full access to the FW/1 API methods beyond view(), layout() and getBeanFactory() but the option is there if you need it. Convenience Methods in the FW/1 API FW/1 provides a number of convenience methods for manipulating the action value to extract parts of the action (the action argument is optional in all these methods and defaults to the currently requested action): getSubsystem( action ) – If subsystems are enabled, this returns either the subsystem portion of the action or the default subsystem. If subsystems are not enabled, returns an empty string. getSection( action ) – Returns the section portion of the action. If subsystems are enabled but no section is specified, returns the default section. getItem( action ) – Returns the item portion of the action. If no item is specified, returns the default item. getSectionAndItem( action ) – Returns the section.item portion of the action, including default values if either part is not specified. getFullyQualifiedAction( action ) – If subsystems are enabled, returns the fully qualified subsystem:section.item version of the action, including defaults where appropriate. If subsystems are not enabled, returns getSectionAndItem( action ). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/framework-one/fw1/wiki/Developing-Applications-Manual#controllers-for-rest-apis"	"Native REST routing and rendering capababilities"	"true"
"REST"	"Taffy"	"http://taffy.io"	"The REST Web Service framework for ColdFusion and Railo"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"171"	"28"	"84"	"GitHub - atuttle/Taffy: The REST Web Service framework for ColdFusion and Railo Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 171 Fork 84 atuttle/Taffy Code Issues 27 Pull requests 3 Wiki Pulse Graphs 🍬 The REST Web Service framework for ColdFusion and Railo http://taffy.io 839 commits 8 branches 35 releases 38 contributors ColdFusion 63.0% CSS 32.6% JavaScript 4.4% ColdFusion CSS JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.3-dev ER84-dashboard-overhaul develop gh-pages master v1.2-maint v1.3-maint v2.x-maint Nothing to show v3.1.0 v3.1.0-RC1 v3.0.2 v3.0.1 v3.0.0 v3.0.0-alpha v3.0.0-RC3 v3.0.0-RC2 v3.0.0-RC1 v2.2.6 v2.2.5 v2.2.4 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.1.0 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.1 v1.2.0-beta2 v1.2.0-beta v1.2.0-Halfling v1.1.1 v1.1 v1.0.1 v1.0 1.3.0-beta1 Nothing to show New pull request Latest commit 296713a May 18, 2016 atuttle Merge pull request #319 from danshort/patch-2 … Update docs.cfm to correct bad collapse behavior Permalink Failed to load latest commit information. bonus Put function as private Jul 23, 2015 core Merge pull request #317 from danshort/master May 10, 2016 dashboard Update docs.cfm to correct bad collapse behavior May 18, 2016 examples Example Upload destination getTempDirectory() Apr 14, 2016 lib Can now run Taffy's test suite from Apache ANT - step 1 in continuous… Jul 18, 2012 snippets/Taffy Resolves #172: Update all examples to get rid of applicationStartEven… Jan 21, 2014 tests resolves #253 Jan 25, 2015 .gitignore Added IntelliJ files to .gitignore Feb 3, 2015 CONTRIBUTING.md Railo -> Lucee Mar 26, 2016 INSTALL.TXT updated install instructions for dashboard req Jul 20, 2015 LICENSE.TXT renamed license.txt -- the all caps name and nocaps extension always … Jul 18, 2012 ReadMe.md Railo -> Lucee Mar 26, 2016 build.xml xml escpaing... ಠ_ಠ Apr 11, 2013 ReadMe.md You're here because creating REST APIs with the native functionality in ColdFusion 10+, Railo, and Lucee is verbose, complex, and developer-hostile. Or maybe you're still on an older version of ColdFusion. You've come to the right place. Taffy is low friction, extremely simple to get started, and it's compatible as far back as ColdFusion 8. It's terse because it uses convention over configuration, and doesn't require writing a bunch of boilerplate code. How terse? A functional API can fit into a tweet. It's easy to debug because error messages are returned as JSON by default and it optionally integrates with your favorite IoC libraries like ColdSpring and DI/1. Currently Supported Versions Taffy 3.0.x Taffy 2.2.x If you file a bug or ask for support please indicate which version of Taffy you're using. If it's an older release, we usually ask you to upgrade. Officially, we promise to support the current and previous minor releases and the last minor release of the previous major release. Taffy follows versioning guidelines defined in semver. Supported versions get priority for bug fixes. No promises are made to fix bugs filed against unsupported versions. If your version is supported and your bug is reproducible and isolatable, we'll do everything within our power to address it. If you're on an unsupported version, upgrade is not an option in your case, and you still have an isolatable and reproducible bug, contact me to discuss further options. Running the Tests To run the tests, you must have MxUnit installed at /mxunit (not just a global mapping, put the folder in your web-root, as there are CSS/JS/etc assets that will be needed). Clone the Taffy repo to /taffy in your web root. Point your browser at http://localhost/taffy/tests/ to initialize the test-harness API that the tests will use Point your browser at http://localhost/taffy/tests/tests/ to run the test suite. If you are on vanilla Tomcat or another app server (most Railo users are), you may find that you need to add an additional servlet mapping to get the tests to run. Please report any errors or failures as bugs, and be sure to include relevant platform information. Documentation Primary documentation is available at docs.taffy.io, with a few of the more detailed guides remaining in the wiki for now. You can contribute to the documentation If you would like to contribute to documentation, please read this blog post. If you still have questions, ask them on our mailing list. :) Roadmap Features and bug fixes are coordinated via the GitHub issues list. Community We have a mailing list for Taffy Users. Feel free to ask for help, discuss potential bugs, and share new ideas there. I also frequent/idle in the #ColdFusion channel on Freenode (IRC). Open Source! Part of the beauty of open source is that you can affect change. You can help improve the documentation, fix a bug, add tests, or even propose new features. Nothing is off limits, and I try to be very responsive to pull requests and on the mailing list. LICENSE The MIT License (MIT) Copyright (c) 2011 Adam Tuttle and Contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. What does that mean? It means you can use Taffy pretty much any way you like. You can fork it. You can include it in a proprietary product, sell it, and not give us a dime. Pretty much the only thing you can't do is hold us accountable if anything goes wrong. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/atuttle/Taffy"	"The REST Web Service framework for ColdFusion and Railo"	"true"
"Other Libraries"	"CacheBox"	"http://wiki.coldbox.org/wiki/CacheBox.cfm"	"The Enterprise ColdFusion Caching Engine, Aggregator and API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ColdBox Platform Wiki - CacheBox: The Enterprise ColdFusion Caching Engine  All the new ColdBox, CacheBox, WireBox, TestBox and LogBox docs can be found here: https://www.gitbook.com/@ortus coldbox.org >> About Downloads Code ForgeBox Support Training Media API Blog Jobs Docs Home Quick Index Introduction ColdBox Overview Directory Layout & Conventions Request Life Cycles Application Bootstrapper Configuring Application Configuration Using configuration settings Fun Logging with LogBox Models ColdBox Models Dependency Injection via WireBox Active Entity Built-in ORM Services Hibernate Criteria Builder ORM Event Handling Views Layouts and Rendering in ColdBox Controllers Event Handlers ColdBox SES URL Mappings Object and Form Validation Request Context Request Context Extending the Request Context Tumble Down The Rabbit Hole... Handling Exceptions Flash RAM & Webflows Ajax Integration Powering Flex/Air/SOAP/REST Apps Caching with CacheBox Localization & i18n ColdBox Security Aspect Oriented Programming ColdBox Recipes Extending ColdBox ColdBox Modules & Architecture ColdBox Plugins Core Plugins Browser ColdBox Interceptors Core Interceptors Browser Testing TestBox Testing Framework TestBox BDD Primer TestBox xUnit Primer Testing ColdBox Applications Mocking-Stubbing with MockBox Tools, IDE Extras ColdBox Platform Utilities IDE Syntax Dictionaries Standalone Projects ColdBox Cheatsheet API Docs Directory SideBar My Dashboard Help Rss Feeds Category Listing Page Directory Namespace Directory User Login Username Password Submitting... Forgot Password?         CacheBox last edited bybdw429s on 19-Nov-2014 History  << Back to Dashboard Contents CacheBox: The Enterprise ColdFusion Caching Engine, Aggregator and API Introduction CacheBox: The Cache Aggregator & API CacheBox : The Enterprise Caching Engine CacheBox Features CacheBox RefCard CacheBox Book Downloading CacheBox Installing CacheBox System Requirements Useful Resources Caching Concepts Caching Considerations Cache Loading Definitions Java Soft References Cache Topologies Single Instance/In-Process Single Instance/Out-Process Replicated Distributed CacheBox Architecture CacheFactory CacheBoxConfig EventManager ColdBox LogBox ICacheProvider ICacheStats IObjectStore IEvictionPolicy AbstractEvictionPolicy IColdboxApplicationCache Creating CacheBox Common CacheFactory Methods Cache Cleanup/Reaping CacheBox Configuration CacheBox DSL LogBoxConfig Scope Registration Default Cache Caches Listeners CacheBox Config Object XML Configuration ColdBox Application Configuration Programmatic Configuration XML Cache Providers Couchbase Providers CF Providers Properties Railo Providers Properties Mock Provider Properties CacheBox Provider Properties CacheBox Object Stores ConcurrentStore Properties ConcurrentSoftReferenceStore Properties DiskStore Properties JDBCStore Properties BlackholeStore CacheBox Eviction Policies Using Your Own Policy CacheBox Event Model CacheBox Events CacheBox Provider Events CacheBoxProvider-CacheBoxColdBoxProvider Events CFProvider-CFColdboxProvider Events Cache Listeners Cache Reporting CacheBox Report Skins Skin Attributes Tag Caller Skin Templates ReportHandler Action Commands ColdBox Application Enhancements ColdBox Caches Resources CacheBox: The Enterprise ColdFusion Caching Engine, Aggregator and API Covers up to version 1.5 Introduction CacheBox is an enterprise caching engine, aggregator and API for ColdFusion applications. It is part of the ColdBox 3.0.0 Platform but it can also function on its own as a standalone framework. Phew! That's a mouthful, so let's talk about each one of the concerns that CacheBox tackles. CacheBox: The Cache Aggregator & API CacheBox is a cache aggregator, in which you can aggregate different caching engines or types of the same engine into one single umbrella. It gives you built in logging (via LogBox), an event model, synchronization, shutdown/startup procedures, reporting, interaction consoles and best of all a cache agnostic API. You can then build your applications based on an abstract API and then be able to configure the caches for your applications at runtime. This gives you greater flexibility and scalability when planning and writing your applications as they can be targeted for ANY CFML engine or version. CacheBox gives you the ability to manage and create your own, what we call Cache Providers that talk to different caching engines that you would like to configure in your applications. By aggregating them within CacheBox you get the added benefit of a rich event model for all caches to share, reporting and debugging. We have a great cache debugger where you can visualize all your configured caches right from within your application. You can see the performance of the cache, the contents and even issue commands to the targeted cache provider. These cache providers also share the same interaction API and thus gives you a nice level of abstraction, higher extensibility and flexibility when planning your applications or trying to scale them out. CacheBox : The Enterprise Caching Engine Caching has been a central concern in the ColdBox Platform since its very first version. We have always been concerned with mission critical applications, scalability and the ability to provide granular caching aspects to ColdBox applications. With CacheBox we decided it was time to open up the library for usage to all ColdFusion applications, not even if they are built on ColdBox (Shame on you!). Foremost, CacheBox behaves as an in-memory cache designed for handlers, plugins, events, views fragments and any other objects or data you so desire. It has various tuning parameters such as default object timeout, default last access timeout, maximum objects to have in cache, a JVM memory threshold, a reaping frequency, eviction policies, an event model and so much more. We also make use of object stores (inspired by EHCache) for the CacheBox caching engine. This means that CacheBox can be configured to store its cached objects in different locations other than memory. This gives us great flexibility because we offer a wide gamut of storage options plus the concept of actually building your own storages. Currently we offer object stores based on concurrency classes, java soft references (memory sensitive), file storage, JDBC replication, and more coming soon. CacheBox Features Cache Aggregator Ability to aggregate different caching engines Ability to aggregate different configurations of the same caches Rich aggregation event model Granular logging Fast and Simple to use Fast ColdFusion and Java hybrid cache Simple API and configuration parameters Small Footprint No need to create it, configure it or manage it if used within a ColdBox Application Solid Core Multi-Threaded Based on Java Concurrency Classes Multiple Eviction Policies: LRU,LFU and FIFO Memory Management & Memory Sensitive caching based on Java Soft References High Load Tested Fully Documented Extensible & Flexible Cache Listeners for event broadcasting Create your own custom eviction policies Create your own cache providers Create your own CacheBox object storages Extensive and granular purging mechanisms (regular expressions and key snippets) Cache Statistics API for creating custom cache reports Highly Configurable JVM Threshold Checks Object Limits Ability to time expire objects Eternal (singletons) and time-lived objects Object purging based on object usage (Access Timeouts) Fully configurable at runtime via dynamic configurations and hot-updates Visually Appealing and Useful Fully featured caching monitor and commands panel Complete cache performance reports CacheBox RefCard Our CacheBox RefCard will get you up and running in now time. CacheBox Book Below you can find the links to purchase the official CacheBox book. Purchase Book Purchase Kindle Purchase eBook   Downloading CacheBox You can download the official download of CacheBox by going to the ColdBox's downloads page. If you have ColdBox 3.0.0 already installed, don't worry, you have CacheBox already installed. The CacheBox API docs can be found also in our main website and are also available for download. We highly recommend you download the latest API docs. They are definitely a high wealth of information and it will show you all the methods and properties available for operation. Installing CacheBox CacheBox has been designed to work either as a standalone framework or within the ColdBox Platform. So if you are building ColdBox applications, you do not have to do anything; CacheBox is already part of the platform. However, if you are using CacheBox as a standalone framework, just drop the distribution folder into your webroot:  /cachebox/system  That's it! You can also create per-application mappings or global ColdFusion mappings to /cachebox that points to the standalone distribution folder. System Requirements CacheBox has been designed to work under the following CFML Engines: Railo 3.1 and beyond Adobe ColdFusion 8 and beyond Other Requirements: You can use CacheBox as a standalone framework in which the starting component namespace will be /cachebox/system/. However, if you use CacheBox within the ColdBox core, the starting component namespace will be /coldbox/system/. Take this into consideration for all the samples, configurations and CFC paths. Important Note: CacheBox is a ColdFusion 8 and above framework. The Adobe ColdFusion caching providers is targeted for ColdFusion 9.0.1 and above. Useful Resources CacheBox Release Notes http://en.wikipedia.org/wiki/Cache http://ehcache.org/documentation/getting_started.html http://www.oracle.com/technetwork/middleware/coherence http://www.couch.io/ http://ecet.ecs.ru.acad.bg/cst05/Docs/cp/SII/II.20.pdf http://www.ibm.com/developerworks/java/library/j-jtp01246.html http://java.sun.com/j2se/1.5.0/docs/api/java/lang/ref/SoftReference.html http://jdj.sys-con.com/read/36434_p.htm Caching Concepts ""A cache (pronounced /'kæ?/ kash) is a component that improves performance by transparently storing data such that future requests for that data can be served faster"" - Wikipedia Caching is everywhere around us these days in all shapes and forms: query caching, data caching, page fragment caching, event caching, etc. Much like how in Forrest Gump you could do all kinds of shrimp dishes :) In its most basic form, we use caching to accelerate and scale our processes. We might have a certain request that takes time to process due to let’s say in colloquial terms ""a big ass query"". We can leverage caching by slapping that query up and placing it in cache so we don't have to wait for it again. Our process now only at most take 1 big hit and then can be merrily on their way serving requests. Again, this is a very practical approach to caching. As you will see from this guide, caching can get very very complex and you need the right tools to be able to scale out, configure and tune your caching approaches. When building enterprise class applications we are faced with many problems dealing with architecture, performance, scalability and so much more. One of these issues might be dealing with expensive queries, but there are also lots of other issues to consider like: expense of object creation/configuration, data retrieval, data/system availability, page output caching, etc. All of these issues can benefit from some kind of caching in order to optimize performance, availability and scalability. Let's explore some benefits of caching: Reduce the amounts of data transfers between processes, network or applications Reduce processing time within a system or application Reduce I/O access operations Reduce database access operations Reduce expensive data transformations and live by a 1 hit motto Caching Considerations Whenever you are leveraging the power of caching, we recommend that you also take into consideration several key factors that need to be evaluated and put into practice in your applications. Below are some key factors that we recommend: Thread Safety : Take into consideration that when you cache data/objects or whatever, multiple threads will be trying to access it in your application. Make sure that you have the appropriate locking and synchronization techniques so multiple threads don't interfere with one another. This might be from simple testing procedures to make sure an element exists, to a more strict approach where you create a cache decorator that does hard blocks on cache access via named locks. Don't ever assume that what you ask from the cache actually exists. Serialization : If you will be caching to disk, database or using replication, distribution, most likely the caching engines will be serializing or converting your data and objects into byte or string format in order to persist them. Therefore, your objects must be able to support serialization and also be aware that if you are caching complex objects, those objects will be serialized alongside the target object. This is what's called an object graph. Where a serializer will go through the entire object graph (object/data relationships) of the target object and serialize everything. If you have circular references or references to tons of objects, serialization performance degrades and could potentially cause a heap overload and crash your application server as it will recurse forever. ColdFusion 9 introduced the component and property attribute called serializable, which is a boolean attribute you can add to the cfcompoonent and cfproperty tags. We recommend using it and marking components and relationships that do NOT need serialization.  <---  Marking a component as NOT serializable ---> <cfcomponent output=""false"" serializable=""false"">  </cfcomponent>  <---  Marking a property as NOT serializable ---> <cfproperty name=""cacheEngine"" serializable=""false"" />  Important: The default value for the serializable attribute is true. Data Format : Determine how you want to store data so it is easy to take that snapshot out of a cache and use. This can be from implementing object state/memento patterns, to leveraging serialization, to pre-defined data structures. Think ahead of HOW your data will be stored in the caches. Cache Layers : In our experience, we have seen greater improvement in performance and scalability by planning caching layers. Caching layers is what are the different layers of caching your application will provide from data to objects to event and view fragments. We recommend you analyze your cache layers and plan how they will behave. A perfect live example of caching layers can be seen in our open source ColdFusion wiki, CodexWiki, which you are actually using right now. CodexWiki leverages query caching, XML/Feed caching, object caching of DAO's, services, some business objects, plugins and event handlers, to view fragment caching and overall event output caching. We use it all baby! Cache Limits : There are definite benefits of demarcating limits on your cache. This involves setting up default limits for timeouts, idle timeouts and maximum number of objects within a cache. Studies have shown that leverage memory sensitive data constructs with fixed limit caching parameters can increase performance and overall JVM stability. Look at our cache resources for these studies as they are very interesting. Cache Loading When working with a cache engine you also have to consider how you will get data INTO the cache before you work with it. There are several approaches but I will talk about two methods of content loading: Lazy Loading or Reactive Loading : This type of loading is the most typical way to load data into a cache and it happens once data is requested from an external process. Below is a typical example using CacheBox in a service layer call:   /** * Get some blog categories from the database or cache */ function getCategories(){     var cacheKey = ""q-blog-categories"";          //Check if data exists     local.data = cache.get( cacheKey );     if( !isNull( local.data ) ){         return local.data;     }          // Else query DB and cache     var data = blogDAO.getCategories();     cache.set(cacheKey, data, 120, 20);          return data; }  This is great for small content pieces and works well for applications. However, if you have large amounts of data that must be available at application startup or cache startup. Then we recommend looking at the next method. Proactive Loading : This approach focuses itself on the loading of resources before the application starts up so content can be loaded. EHCache for example offers cache loaders that you can create that will populate the cache on initializations. CacheBox offers the same capabilities through its event model, so you can tap into the necessary events and then carry your population and loading procedures. For example, you might tap into the afterCacheRegistration event in CacheBox so you might listen to when a cache engine get's created and configured so you can start populating it right at application/cache startup. In this loader you will then have the opportunity to load your data either asynchronously or synchronously. If you will be loading large amounts of data or processor intensive data, we recommend you leverage cfthread and do the loading asynchronously within your event interceptor.   /** * A cache listener for CacheBox */ component{      /**     * Listen for cache registrations and load data into the 'bigCache' cache ONLY!     */     function afterCacheRegistration(interceptData){         // Get the registered cache reference from the incoming interception data         var cache = arguments.interceptData.cache;                  // Only work on the BigCache cache         if( cache.getName() eq ""BigCache"" ){                      // Talk to service, get some big data items             dataItems = service.getBigDataItems();                          //Cache them forever as eternal objects             cache.setMulti(mapping=dataItems,timeout=0);                 }              } }  Definitions Cache Hit: An event that occurs when an element requested from cache is found in the cache. Cache Miss: An event that occurs when an element requested form cache is NOT found in the cache. Eviction: The act of removing an element from the cache due to certain criteria algorithm that directly is connected to the state of the element. Eviction Policy: The algorithm that decides what element(s) will be evicted from a cache when full or a certain criteria has been met in the cache. (Cache Algorithms) LRU: An eviction policy that discards the least recently used items first. LFU: An eviction policy that counts how often an item has been accessed and it will discard the items that have been used the least. FIFO: An eviction policy that works as a queue, first object in will be the first object out of the cache. So older staler objects are purged. Cache Provider : A concrete implementation to a caching engine within CacheBox Object Store : An object that stores cached elements and indexes them Idle or Last Access Timeout : An expiration time an element receives if it is not accessed. Reap : Usually an asynchronous event that cleans a cache from dead elements or expired elements Distributed/Partitioned Cache : A form of caching that allows the cache to span multiple servers so that it can grow in size and in capacity. Each machine contains a unique partition of the dataset. Adding machines to the cluster will increase the capacity of the cache. Both read and write access involve network transfer and serialization/deserialization. Near Cache : Each cache server contains a small local cache which is synchronized with a larger distributed/partitioned cache, optimizing read performance. There is some overhead involved with synchronizing the caches. Replicated : Each cache server contains a full copy of the elements cached In Process Cache : A cache that lives inside of the same heap as the application using it. Out of Process Cache : A cache that lives as its own process and heap in the most likely the same server as the application using it. Eternal Objects : Eternal objects are objects that will never be purged or evicted by the caching engine automatically. The only way to remove them is to recreate the cache or clear them manually. Cache Topology : A concept that refers to where data physically resides and how it is accessed in a distributed environment Java Soft References ""In the past, developers didn't have much control over garbage collection or memory management. Java2 has changed that by introducing the java.lang.ref package. The abstract base class Reference is inherited by classes SoftReference, WeakReference and PhantomReference. SoftReferences are well suited for use in applications needing to perform caching."" Why is this? Well, a soft reference is nothing but a wrapper class that wraps an object in memory. Whenever the JVM requires memory and runs its reference rules, it can detect these soft references and decide to purge them if it meets the garbage collector rules. If it purges them, the wrapped object inside of the soft reference is marked for collection, but the java soft reference itself still exists. Therefore, the programmer can determine if the object inside the reference exists or not. If it does not exist, it means the object was garbage collected and I have no more object. I won't go into the implementation semantics of the cache, just theory. Please visit the references to understand more of how the ColdBox cache was built. In summary, soft references are what determine if an object is still available or not. CacheBox cache can then run maintenance on itself and clean out all of its references for you if you are using the ConcurrentSoftReferenceStore object store. Cache Topologies There are several cache topologies that you can benefit from and it all depends on your business requirements and scalability requirements. I will only mention four distinct approaches for caching. CacheBox at this point can support all caching topologies as the underlying caches can support them. However, at this point in time, the CacheBox caching provider only supports a single instance in-process approach. However, we are working on a CacheBox server to provide out-of process caching support and a replicated/synchronized version via ColdBox Messaging. Single Instance/In-Process A single instance cache is an in-process cache that can be used within the same JVM heap as your application. In the ColdFusion world, this cache topology is what ColdFusion 9 actually offers: An instance of ehCache that spawns the entire JVM of the running ColdFusion server. There are pros and cons to each topology and you must evaluate the risks and benefits involved with each approach. Definitely having a single instance approach is the easiest to setup and use. However, if you need to add more ColdFusion instances or you need to cluster your system, single instance will not be of much use anymore as servers will not be synchronized with the same cached data. CacheBox also allows you to create as many instances of itself as you need and also as many CacheBox caches as you need. This allows you great flexibility to create and configure multiple instance caches in a single ColdFusion server instance. This way if you are in shared hosting you do not have to worry about the underlying cache configuration (which is only 1), but you can configure your caching engines for your application ONLY! This is of great benefit and greater flexibility than dealing with a single cache instance on the ColdFusion server. Benefits: Fast access to data as it leaves in the same processes Easy to setup and configure One easy configuration if you are using ColdFusion 9 or Railo You can also have multiple CacheBox caching providers running on one machine (Greater Flexibility) You can also have multiple CacheBox instances running on one machine or have a shared scope instance (Greater Flexibility) Each of your applications, whether ColdBox or not, can leverage CacheBox and create and configure caches (Greater Flexibility) Cons : Shared resources in a single application server Shared JVM heap size, thus available RAM Limited scalability Not fault tolerant Single Instance/Out-Process A single instance can be an out-process cache that leaves on its own JVM typically in the same machine as the application server. This approach has also its benefits and cons. A typical example of an out of process cache can be using an instance of CouchDB for storage of your cache components and your applications talk to the cache via REST. Benefits : Still access is fast as it is in the same machine Easy to setup and configure Might require a windows or *nix service so the cache engine starts up with the machine Can leverage its own JVM heap, memory, GC, etc and have more granularities. Out of process cache servers can be clustered also to provide you with better redundancy. However, once you start clustering them, each of those servers will need a way to replicate and synchronize each other. Cons : Still shares resources in the server Limited scalability Needs startup scripts Needs a client of some sort to be installed in the application server so it can function and a protocol to talk to it: RMI, JMS, SOAP, REST, etc. Not fault tolerant Replicated A replicated cache can exist in multiple application server machines and their contents will be replicated, meaning all caches will contain all the data elements. This type of topology is beneficial as it allows for all members in the application cluster to have availability to its elements. However, there are also some drawbacks due to the amount of chatter and synchronization that must exist in order for all data or cache nodes to have the same data fresh. This approach will provide better scalability and redundancy as you are not limited to one single point of failure. This replicated cache can be in-process or out-process depending on the caching engine you are using. Our recommendation is to leverage EHCache and CacheBox Replicated edition (once it comes out). Benefits : Better scalability Cache data can survive server restarts if one goes down, better redundancy Better cache availability through redundancy Higher storage availability Ideal for few application servers Cons : A little bit harder to configure and setup High serialization and network communication costs Could need load balancing Can scale on small amounts only Distributed Distributed caching is the big daddy of scalability and extensibility. The crux concept is of partitioning the cache data across the members of the cache cluster and creating a grid of cached data that can scale rather easily. There are several major players out there like EHCache with Terracotta, Oracle Coherence, MemcacheD, etc. I suggest looking at all three options, but using EHCache with Terracotta is definitely easy to setup, easy to use and their tools are great. They also offer professional services and support. Please note that each vendor has their own flavor of distributed caching and might not match our diagram. Our diagram is just a visual representation for knowledge purposes. Benefits : Extreme scalability Cache data can survive server restarts if one goes down, better redundancy Better cache availability through redundancy Higher storage availability Higher flexibility Your storage increases as more cluster members are added Cons : Harder to configure and setup (Maybe, terracotta and ColdFusion 9 is super easy) Not as much serialization and communication costs Could need load balancing CacheBox Architecture CacheBox is architected to act as a cache aggregator but also has its own cache implementation based on a hybrid of ColdFusion and Java. Let's investigate first of all the major classes that make up CacheBox. (Please see online API) CacheFactory class : coldbox.system.cache.CacheFactory The CacheFactory object is the most important object as it represents CacheBox. The class path for this object is coldbox.system.cache.CacheFactory or in standalone mode cachebox.system.cache.CacheFactory. This is the aggregator or cache overseer that you will interact with to get caches, shutdown caches, perform global cache operations, and startup your CacheBox instance. If you are using CacheBox within a ColdBox application context, then ColdBox does all the configurations and creations for you. It even links your ColdBox context, LogBox and ColdBox interceptor service for you. CacheBoxConfig class : coldbox.system.cache.config.CacheBoxConfig This is the required configuration object the CacheFactory object needs in order to start itself up. This configuration object can be created and then used to configure all your caches, listeners, scope registrations and logging. We will investigate all the types of configurations available but they all translate down to methods in this configuration object. Ways to configure CacheBox: Programmatically via method calls Programmatically via a CacheBox DSL or a CacheBox DSL CFC XML EventManager class : coldbox.system.core.events.EventPoolManager or coldbox.system.web.services.InterceptorService If you are in standalone mode then CacheBox configures its own internal event manager that is very similar to the ColdBox Interceptor Service. This event manager keeps track of the listeners for each of the interceptions points or events that are broadcasted by CacheBox and its providers. ColdBox class : coldbox.system.web.Controller A reference to a running ColdBox application context the CacheBox instance is running under. This will be null if running in standalone mode. However, if you are within a ColdBox application, the CacheProvider and its references can access anything within the running ColdBox application. LogBox class : coldbox.system.logging.LogBox A reference to either a new instance of LogBox, if running in standalone mode, or a running LogBox instance via the running ColdBox application context. ICacheProvider class : coldbox.system.cache.ICacheProvider This is the main interface that each caching engine implementation must implement in order for CacheBox to aggregate it and use it. Each implementation can add additional functionality and methods but this is the core contract that each provider must adhere to. CacheBox aggregates 1 or more instances of CacheProviders that implement this interface. You can find all of our CacheBox cache providers in the following location:  /coldbox/system/cache/providers or /cachebox/system/cache/providers  ICacheStats class : coldbox.system.cache.util.ICacheStats This interface is the contract for statistics reporting. This is how CacheBox can produce gorgeous charting and reporting based on the implementation of this class. IObjectStore class : coldbox.system.cache.store.IObjectStore A CacheBox cache provider uses the concept of an object store in order to, well, store its cached objects. This can be anything as we have created an interface that anybody can implement and create their own object storages. Just be aware that the CacheBox provider's eviction policies use certain methods for reporting and evictions that MUST be implemented. IEvictionPolicy class : coldbox.system.cache.policies.IEvictionPolicy This is the contract for creating eviction policies for usage by the CacheBox cache provider. AbstractEvictionPolicy class : coldbox.system.cache.policies.AbstractEvictionPolicy This is the abstract class that gives the magic to eviction policies under the CacheBox cache provider. It communicates with the internal object stores and asks for specific metadata in specific sorter orders so the policy can execute its algorithm. Our current algorithms are: LRU,LFU, and FIFO. However, you can very easily implement your own. IColdboxApplicationCache class : coldbox.system.cache.IColdboxApplicationCache This interface extends from the original cache provider interface and adds certain methods that MUST be implemented so the cache can work for ColdBox applications. This includes functionality to do event/view caching, clearing/expiring by certain regular expressions and reporting. So if you want to create your own cache implementation for ColdBox applications, then it must adhere to this contract. Creating CacheBox CacheBox is the core framework you need to instantiate in order to work with caching in your application. You can instantiate it with a CacheBoxConfig object that will hold all of your caching configurations. To configure the library you can either do it programmatically or via an xml file, the choice is yours. After the library is instantiated and configured you can ask from it a named cache provider, or interact with the caches. By default, CacheBox can be started with no configuration and it will configure itself with the default configuration that is shipped with CacheBox that can be found in the following location:  /coldbox/system/cache/config/DefaultConfiguration.cfc or /cachebox/system/cache/config/DefaultConfiguration.cfc  The default configuration is the following:  function configure(){     // The CacheBox configuration structure DSL     cacheBox = {         // LogBox Configuration file         logBoxConfig = ""coldbox.system.cache.config.LogBox"",                   // Scope registration, automatically register the cachebox factory instance on any CF scope         // By default it registers itself on application scope         scopeRegistration = {             enabled = true,             scope   = ""application"", // valid CF scope             key     = ""cacheBox""         },                  // The defaultCache has an implicit name of ""default"" which is a reserved cache name         // It also has a default provider of cachebox which cannot be changed.         // All timeouts are in minutes         // Please note that each object store could have more configuration properties         defaultCache = {             objectDefaultTimeout = 120,             objectDefaultLastAccessTimeout = 30,             useLastAccessTimeouts = true,             reapFrequency = 2,             freeMemoryPercentageThreshold = 0,             evictionPolicy = ""LRU"",             evictCount = 1,             maxObjects = 300,             // Our default store is the concurrent soft reference             objectStore = ""ConcurrentSoftReferenceStore"",             // This switches the internal provider from normal cacheBox to coldbox enabled cachebox             coldboxEnabled = false         },                  // Register all the custom named caches you like here         caches = {},                 // Register all event listeners here, they are created in the specified order         listeners = []           }; }     If you are using CacheBox within a ColdBox application you do not need to worry about creating or even configuring the framework, as ColdBox ships already with a default configuration for ColdBox applications. However, you also have full control of configuring CacheBox at your application level (Please see the coldbox application configuration section). The default configuration for a ColdBox application can be found in the following location:  /coldbox/system/web/config/CacheBox.cfc  In summary, CacheBox has two modes of operation: Standalone Framework ColdBox Application If you have downloaded CacheBox as a standalone framework, then please make sure you use the correct namespace path (cachebox.system). Also, once you create CacheBox make sure that you persist it somewhere, either in Application scope or any other scope or a dependency injection context (WireBox). ColdBox application users already have an instance of CacheBox created for you in every application and it is stored in the main application controller and can be retrieved via the following function:  // Get a reference to CacheBox controller.getCacheBox();  // Get a reference to the default cache provider controller.getColdboxOCM() or getColdboxOCM()  // Get a reference to a named cache provider controller.getColdboxOCM(""template"") or getColdboxOCM(""template"")   Note: Most of the examples shown in this documentation refer the default framework namespace of coldbox.system. However, if you are using CacheBox as a standalone framework, then the namespace to use is cachebox.system. Happy Coding! Creating CacheBox Examples Let's start with the simplest example of them all which is just creating CacheBox with the default configuration. The rest of the samples show different configuration options:  import cachebox.system.cache.*;  // create cachebox cachebox = new CacheFactory(); // get the default cache cache = cachebox.getDefaultCache(); // set a value in cache, with 60 minute timeout and 20 minute idle timeout. cache.set(""MyValue"", {name=""Luis Majano"", awesome=true, cacheWeirdo=true}, 60,20);  Here are some more configuration samples:  // Create CacheBox with default configuration cacheBox = createObject(""component"",""cachebox.system.cache.CacheFactory"").init();   // Create the config object with an XML configuration file config = createObject(""component"",""cachebox.system.cache.config.CacheBoxConfig"").init(expandPath('cachebox.xml')); // Create CacheBox instance cacheBox = createObject(""component"",""cachebox.system.cache.CacheFactory"").init(config);  // Create the config object as a CacheBox DSL Simple CFC dataCFC = createObject(""component"",""MyCacheBoxConfig""); config = createObject(""component"",""cachebox.system.cache.config.CacheBoxConfig"").init(CFCConfig=dataCFC); // Create CacheBox instance cacheBox = createObject(""component"",""cachebox.system.cache.CacheFactory"").init(config);   // Create the config object as a CacheBox DSL Simple CFC path only config = createObject(""component"",""cachebox.system.cache.config.CacheBoxConfig"").init(CFCConfigPath=""MyCacheBoxConfig""); // Create CacheBox instance cacheBox = createObject(""component"",""cachebox.system.cache.CacheFactory"").init(config);  // Create CacheBoxConfig, call configuration methods on it and then create the factory config = createObject(""component"",""cachebox.system.cache.config.CacheBoxConfig"").init(); // Configure programmatically: You can chain methods, woot! config.scopeRegistration(true,""application"").default(objectStore=""DiskStore"",maxObject=200); // Create CacheBox instance cacheBox = createObject(""component"",""cachebox.system.cache.CacheFactory"").init(config);  Common CacheFactory Methods Here is a list of some of the most common methods you can use to interact with CacheBox. For full details, please view the online API Docs addCache(any<ICacheProvider> cache) Register a new instantiated cache with this cache factory addDefaultCache(string name) Add a default named cache to our registry, create it, config it, register it and return it of type: cachebox clearAll() Clears all the elements in all the registered caches without de-registrations configure(CacheBoxConfig config) Configure the cache factory for operation, called by the init() expireAll() Expires all the elements in all the registered caches without de-registrations getCache(string name) Get a reference to a registered cache in this factory getDefaultCache() Get the default cache provider of type cachebox reapAll() A nice way to call reap on all registered caches removeCache(string name) Try to remove a named cache from this factory replaceCache(any<ICacheProvider> cache, any<ICacheProvider> decoratedCache) Replace a registered named cache with a new decorated cache of the same name shutdown() Recursively sends shutdown commands to all registered caches and cleans up in preparation for shutdown Common Operation Examples  // Add another default cache type but with the name FunkyCache funkyCache = cachebox.addDefaultCache(""FunkyCache""); // Add some elements to funky Cache funkyCache.set(""Myentry"",now(),""20"");  // Get a reference to a named cache cfCache = cacheBox.getCache(""CFCache"");  // Get a reference to the default named cache cache = cacheBox.getDefaultCache();  // Remove our funky cache no longer needed cacheBox.removeCache(""FunkyCache"");  // Create a new cache a replace a cache, the MyFunkyFunkyCache implements ICacheProvider newCache = new MyFunkyFunkyCache({maxObjects=200,timeout=30}); // replace the CFCache with this one cacheBox.replaceCache( ""CFCache"", newCache );  // Add a new cache to cachebox programmatically newCache = new MyFunkyFunkyCache(""FunkynessCache"", {maxObjects=200,timeout=30}); cacheBox.addCache( newCache );  // Send a shutdown command to cachebox cachebox.shutdown();  Important: Remember that some of the CacheBox methods announce events. So please see our event model section to see what kind of events you can listen to when working with CacheBox. Cache Cleanup/Reaping If you are using CacheBox within a ColdBox application, ColdBox is in charge of emitting reaping or cleanup requests to the CacheBox factory. However, if you are using the standalone version of the cache, then you will need to emit this command yourself in the desired execution point. We would suggest to do this on every request. This does not mean that the request executes every time, it means that the trigger is made and if the reaping time has been elapsed, then the caches clean themselves (CacheBox Providers Only!):  cachebox.reapAll();  That's it! Just call on the reapAll() method and this will make sure that your caches clean themselves according to the reaping frequency selected in your configuration file. Important: Reaping frequency and cleanup only applies to the CacheBox Provider. CacheBox Configuration Let's delve deeper into the rabbit hole and explore how to configure this bad boy. There are three approaches to configuring CacheBox: two programmatically and one via XML. Our preference is the programmatic approach via a simple data CFC that can encapsulate the CacheBox configuration in one single component. However, at the end of the day all configuration approaches will use the CacheBoxConfig object's methods in some manner. This is the CFC that you will use to configure CacheBox and its constructor can be called with the following optional arguments which determines your configuration approach: none - Means you will be using the CFCs methods for configuration XMLConfig - The absolute path to the XML configuration file CFCConfig - The object reference to the simple data CFC that contains the CacheBox DSL CFCConfigPath - The instantiation path of the simple data CFC that contains the CacheBox DSL No matter what configuration you decide to use, you will always have to instantiate CacheBox with a CacheBoxConfig object of type: coldbox.system.cache.config.CacheBoxConfig. However, you have the option of either working with this CFC directly or creating a more portable configuration. This portable configuration we denote as a simple data CFC that contains the CacheBox configuration data that represents our CacheBox DSL (Domain Specific Language). This DSL is exactly the same if you are using CacheBox standalone or in any ColdBox application, so it definitely has its benefits. Tip: Please note that you have full access to the running CacheBox's configuration object or even a specific cache's configuration structure. Therefore, you can easily change the configuration settings for a cache or CacheBox dynamically at runtime. CacheBox DSL In order to create a simple data CFC, just create a new CFC with one required method on it called configure(). This is where you will define the caching configuration data structure in a structure called cacheBox in the variables scope:  ** * A CacheBox configuration data object */ component{      function configure(){         cacheBox = {                  };     }    }  The cacheBox structure can be configured with the following keys: Key Type Required Default Description logBoxConfig string false coldbox.system.cache.config.LogBox The instantiation or location of a LogBox configuration file. This is only for standalone operation. scopeRegistration struct false {enabled=true,scope=application,key=cacheBox} A structure that enables scope registration of the CacheBox factory in either server, cluster, application or session scope. defaultCache struct true --- The configuration of the default cache which will have an implicit name of default which is a reserved cache name. It also has a default provider of CacheBox which cannot be changed. caches struct false {} A structure where you can create more named caches for usage in your CacheBox factory. listeners array false [] An array that will hold all the listeners you want to configure at startup time for your CacheBox instance. If you are running CacheBox within a ColdBox application, this item is not necessary as you can register them via the main ColdBox interceptors section. LogBoxConfig The LogBoxConfig element is used only in standalone mode of operation and tells CacheBox what configuration file to load into LogBox. LogBox is an enterprise ColdFusion logging library that is part of the ColdBox Platform. This way, you have granular control of how CacheBox and its registered caches will be producing logging and debugging data. If you do not specify a location for a custom LogBox configuration file, then CacheBox will instantiate LogBox with its own default configuration file located at:  coldbox.system.cache.config.LogBox.cfc OR cachebox.system.cache.config.LogBox.cfc  Example:  // The CacheBox configuration structure DSL cacheBox = {     logBoxConfig = ""myapp.config.MyLogBoxConfig"",  };  Scope Registration CacheBox has a nifty little feature that enables itself to leech onto a specific scope in memory. It basically can auto-register itself in your environment with no further need for persistence or just to expand its location. By default CacheBox registers itself in application scope with a key of cacheBox, but you have complete control on how the scope registration should work. Customizable Keys: Key Type Required Default Description enabled boolean false true Enable scope registration scope string false application The ColdFusion scope to persist on key string false cacheBox The name of the key in the ColdFusion scope to persist on Example:  // The CacheBox configuration structure DSL cacheBox = {     scopeRegistration = {         enabled = true,         scope   = ""application"",         key     = ""cacheBox""     }, };  Default Cache The defaultCache element is in itself a structure of configuration data for the default cache provider of type coldbox.system.cache.providers.CacheBoxProvider. This is a reserved cache name and it is MANDATORY to declare and its name or type cannot be changed. However, if you are using CacheBox within a ColdBox application, the provider will switch itself to coldbox.system.cache.providers.CacheBoxColdBoxProvider by using the coldboxEnabled key. So let's see the configuration keys for our default cache. Default Cache Properties: Key Type Required Default Description ObjectDefaultTimeout numeric false 60 The default lifespan of an object in minutes ObjectDefaultLastAccessTimeout numeric false 30 The default last access or idle timeout in minutes UseLastAccessTimeouts Boolean false true Use or not idle timeouts ReapFrequency numeric false 2 The delay in minutes to produce a cache reap (Not guaranteed) FreeMemoryPercentageThreshold numeric false 0 The numerical percentage threshold of free JVM memory to have available before caching. If the JVM free memory falls below this setting, the cache will run the eviction policies in order to cache new objects. (0=Unlimited) MaxObjects numeric false 200 The maximum number of objects for the cache EvictionPolicy string or path false LRU The eviction policy algorithm class to use. ColdBox ships with LFU (Least Frequently Used) LRU (Least Recently Used) FIFO (First In First Out) You can also build your own and pass the instantiation path in this setting EvictCount numeric false 1 The number of objects to evict once an execution of the policy is requested. You can increase this to make your evictions more aggressive objectStore string false ConcurrentStore The object store to use for caching objects. ColdBox ships with the following object stores: ConcurrentStore - Uses concurrent hashmaps for increased performance ConcurrentSoftReferenceStore - Concurrent hashmaps plus java soft references for JVM memory sensitivity DiskStore - Uses a physical disk location for caching (Uses java serialization for complex objects) JDBCStore - Uses a JDBC datasource for caching (Uses java serialization for complex objects) You can also build your own and pass the instantiation path in this setting. ColdboxEnabled Boolean false false A flag that switches on/off the usage of either a plain vanilla CacheBox provider or a ColdBox enhanced provider. This must be true when used within a ColdBox application and it applies for the default cache ONLY. Important : Please note that each object store could have more configuration properties that you will need to add to the configuration structure. To find out about these extra configuration properties, please see the Object Store's section. Example:  // The CacheBox configuration structure DSL cacheBox = {     // Please note that each object store could have more configuration properties     defaultCache = {         objectDefaultTimeout = 60,         objectDefaultLastAccessTimeout = 30,         useLastAccessTimeouts = true,         reapFrequency = 2,         freeMemoryPercentageThreshold = 0,         evictionPolicy = ""LRU"",         evictCount = 1,         maxObjects = 200,         // Our default store is the concurrent soft reference         objectStore = ""ConcurrentSoftReferenceStore"",         // This switches the internal provider from normal cacheBox to coldbox enabled cachebox         coldboxEnabled = false     }, };  Caches The caches element is in itself a structure of configuration data for aggregating named cache providers of ANY type. The key is the unique name of the cache to aggregate under this CacheBox instance. The value should be a structure with the following keys: Key Type Required Default Description provider string true --- The instantiation path of the cache that must implement our ICacheProvider interface. properties struct false {} A structure of name-value pairs of configuration data for the cache to declare. Example:  // Register all the custom named caches you like here caches = {     sampleCache1 = {         provider=""coldbox.system.cache.providers.CacheBoxProvider"",         properties = {             objectDefaultTimeout=""20"",             useLastAccessTimeouts=""false"",             reapFrequency=""1"",             evictionPolicy=""LFU"",             evictCount=""1"",             maxObjects=""100"",             objectStore=""ConcurrentSoftReferenceStore""         }     },     sampleCache2 = {         provider = ""coldbox.system.cache.providers.CFColdboxProvider""     } },  Listeners This is an array of structures that you will use to define cache listeners. This is exactly the same as if you would be declaring ColdBox Interceptors, so order is very important. The order of declaration is the order that they are registered into their specific listening events and also the order in which they fire. The keys to declare for each structure are: Key Type Required Default Description class instantiation path true --- The instantiation path of the listener object to register name string false listLast(class,""."") The unique name used for this listener for registration purposes. If no name is provided, then we will use the last part of the instantiation path, which is usually the filename. properties struct false {} A structure of name-value pairs of configuration data for the listener declared. CacheBox Config Object The previous CacheBox DSL is a great way to configure CacheBox as it is very portable. However, you can also configure CacheBox by calling methods on the CacheBoxConfig object, which is exactly what we do when we read the CacheBox DSL. Below are the main methods used for configuring CacheBox which match exactly to the DSL items, so please refer to the DSL items for definitions and settings. Also, for all the methods in this object, check out the API Docs init([string XMLConfig=], [any CFCConfig], [string CFCConfigPath]) The constructor cache(string name, [string provider=], [struct properties={}]) Add a new cache configuration defaultCache([numeric objectDefaultTimeout=], [numeric objectDefaultLastAccessTimeout=], [numeric reapFrequency=], [numeric maxObjects=], [numeric freeMemoryPercentageThreshold=], [boolean useLastAccessTimeouts=], [string evictionPolicy=], [numeric evictCount=], [string objectStore=], [boolean coldboxEnabled=]) Add a default cache configuration listener(string class, [struct properties={}], [string name=]) Add a new listener configuration logBoxConfig(string config) Set the logBox Configuration path to use reset() Reset the entire configuration scopeRegistration([boolean enabled='false'], [string scope='application'], [string key='cachebox']) Use to define cachebox factory scope registration Code Examples:  config = createObject(""component"",""cacheBox.system.cache.config.CacheBoxConfig"").init();  // logbox config & scope chained, yes you can chain any method config.logBoxConfig(""MyLogBox.xml"").scopeRegistration(true,""application"",""cacheBox"");  // default cache config.default(maxObjects=500,evictCount=5,objectDefaultTimeout=30);  // Caches config.cache(""ehCache"",""caches.ehCacheProvider"",{configFile=""ehCache.xml""}).     cache(""template"",""cachebox.system.cache.providers.CacheBoxProvider"");  // Listeners config.listener(""myapp.model.MyListener"",""FunkyListener"",{});   XML Configuration You can also configure CacheBox with an XML file. All you need to do is create a CacheBox XML file and instantiate the config object with the location of such config file:  config = createObject(""component"",""coldbox.system.cache.config.CacheBoxConfig"").init(expandPath(""/config/cacheBox.xml""));  However, if you have your XML in a variable already, maybe you read it from a database or other location, you can still use it by calling the config object's parseAndLoad() method.  //Get the xml document from somewhere. xmlDoc = dbService().getCacheBoxConfig(); //create the CacheBox config object config = createObject(""component"",""coldbox.system.cache.config.CacheBoxConfig"").init(); config.parseAndLoad(xmlDoc);  Sample cacheBox.xml file:  <?xml version=""1.0"" encoding=""UTF-8""?> <CacheBox xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""      xsi:noNamespaceSchemaLocation=""http://www.coldbox.org/schema/CacheBoxConfig_1.0.xsd"">          <-- < The LogBox Configuration File to Use -->     <LogBoxConfig>coldbox.system.cache.config.LogBoxConfig</LogBoxConfig>          <-- <Scope Registration -->     <ScopeRegistration enabled=""true"" scope=""server"" key=""cachebox1"" />          <-- <The defaultCache has an implicit name ""default"" which is a reserved cache name          It also has a default provider of cachebox which cannot be changed.          All timeouts are in minutes -->     <DefaultConfiguration          objectDefaultTimeout=""60""         objectDefaultLastAccessTimeout=""30""         useLastAccessTimeouts=""true""         reapFrequency=""2""         freeMemoryPercentageThreshold=""0""         evictionPolicy=""LRU""         evictCount=""1""         maxObjects=""100""         objectStore=""ConcurrentSoftReferenceStore""         coldboxEnabled=""true"" />              <-- < Register all the named caches below -->     <Cache name=""SampleCache1"" provider=""coldbox.system.cache.providers.CacheBoxProvider"">         <Properties              objectDefaultTimeout=""20""             useLastAccessTimeouts=""false""             reapFrequency=""1""             evictionPolicy=""LFU""             evictCount=""1""             maxObjects=""100""             objectStore=""ConcurrentSoftReferenceStore"" />     </Cache>     <Cache name=""sampleCache2"" provider=""coldbox.system.cache.providers.CacheBoxProvider"">         <Properties maxObjects=""500""                     evictionPolicy=""FIFO"" />     </Cache>          <-- < Register cache listeners -->     <CacheListeners>         <Listener class=""test.path.Listner"" name=""SampleListner"">             <Property name=""""></Property>         </Listener>     </CacheListeners>      </CacheBox>  As you can see the XML elements translate to the CacheBox DSL elements, so please refer to them for their meaning. The root element must be <CacheBox> with the following child elements: <LogBoxConfig> : The location of the LogBox configuration file. <ScopeRegistration> : The scope registration for the factory @scope : The ColdFusion scope @key : The key in the scope @enabled : True/False to enable registration <DefaultConfiguration> : The default reserved cache configuration. All attributes match the CacheBox DSL default cache properties. @objectDefaultTimeout @objectDefaultLastAccessTimeout @useLastAccessTimeouts @reapFrequency @freeMemoryPercentageThreshold @evictionPolicy @evictCount @maxObjects @objectStore @coldboxEnabled <Cache> : A cache configuration, you can have as many as you like of these elements. They also match exactly to the caches element in the CacheBox DSL. @name : Mandatory unique name for the cache. @provider : The class of the provider <Properties> : Optional child element that you can use to configure the name-value pairs of configuration properties for the cache. Each property is an attribute of this XML element. <CacheListeners> : A container element for all the cache listeners to register <Listener> : A listener declaration @class : The instantiation class @name : The unique name of the listener, not mandatory, defaults to the filename in the class attribute <Property> : 0 or more configuration properties for the listener @name : Name of the property XMLValue : The value of the XML element is the value of the property. To make this XML configuration easier, CacheBox comes with its own XML Schema that can be found in the following location:  /coldbox/system/cache/config/CacheBoxConfig.xsd or /cachebox/system/cache/config/CacheBoxConfig.xsd or  http://www.coldbox.org/schema/CacheBoxConfig_1.0.xsd  You can also add the location to your XML header so your IDE can give you introspection and validation:  <?xml version=""1.0"" encoding=""UTF-8""?> <CacheBox xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""      xsi:noNamespaceSchemaLocation=""http://www.coldbox.org/schema/CacheBoxConfig_1.0.xsd"">      </CacheBox>  Note: Please note the version identifier in the online schema, make sure you have the correct version when using within an IDE. ColdBox Application Configuration Every ColdBox application can use CacheBox without any extra creation or configuration. By default, every ColdBox application is configured with a CacheBox instance using the configuration file found in:  /coldbox/system/web/config/CacheBox  The contents of this configuration CFC is the following:  function configure(){     // The CacheBox configuration structure DSL     cacheBox = {         // LogBox config already in coldbox app, not needed         // logBoxConfig = ""coldbox.system.web.config.LogBox"",                   // The defaultCache has an implicit name ""default"" which is a reserved cache name         // It also has a default provider of cachebox which cannot be changed.         // All timeouts are in minutes         defaultCache = {             objectDefaultTimeout = 120, //two hours default             objectDefaultLastAccessTimeout = 30, //30 minutes idle time             useLastAccessTimeouts = true,             reapFrequency = 2,             freeMemoryPercentageThreshold = 0,             evictionPolicy = ""LRU"",             evictCount = 1,             maxObjects = 300,             objectStore = ""ConcurrentStore"", //guaranteed objects             coldboxEnabled = true         },                  // Register all the custom named caches you like here         caches = {             // Named cache for all coldbox event and view template caching             template = {                 provider = ""coldbox.system.cache.providers.CacheBoxColdBoxProvider"",                 properties = {                     objectDefaultTimeout = 120,                     objectDefaultLastAccessTimeout = 30,                     useLastAccessTimeouts = true,                     reapFrequency = 2,                     freeMemoryPercentageThreshold = 0,                     evictionPolicy = ""LRU"",                     evictCount = 2,                     maxObjects = 300,                     objectStore = ""ConcurrentSoftReferenceStore"" //memory sensitive                 }             }                }            }; }     This configuration file configures CacheBox with two caches: default and template. The default cache is used for persistence for handlers, plugins, interceptors, and model objects. The template cache is used for event caching and view fragment caching. It is also important to note that the template cache uses the ConcurrentSoftReferenceStore for its objects. This means that even/view caching is subject to available memory via the JVM, a memory sensitive cache. This is essential as you could have lots of events being cached and you want to be considerate with memory concerns. It is also limited to 300 objects. Now, this is all nice and dandy, but what if I want to configure CacheBox ""MY WAY!!""? Well, don't shout, we are just getting there. There are several ways you can configure CacheBox from within your applications, so chose wisely. Programmatic Configuration ColdBox 3.0.0 and above allows for a programmatic approach via the ColdBox configuration object. So let's look at how the framework loader looks at your configuration for CacheBox configuration details: Is there a CacheBox DSL variable defined in the configuration structure? False: Does a CacheBox.cfc exist in the application's config folder? True: Use that CFC by convention to configure CacheBox False: Configure CacheBox with default framework settings found in /coldbox/system/web/config/CacheBox.cfc True: Have you defined a configFile key in the cacheBox DSL structure? True: Then use that value to pass into the configuration object so it can load CacheBox using that configuration file (xml or CFC) False: The configuration data (CacheBox DSL) is going to be defined inline here so use that structure for configuration Note: The configuration DSL is exactly the same as you have seen in before with the only distinction that you can add a configFile key that can point to an external configuration file (XML or CFC)  cacheBox = {     configFile = ""mypath.config.CacheBoxConfig"" };  That's it folks! You can either write inline CacheBox DSL configuration, use by convention a CacheBox.cfc data CFC or use a configFile approach for external file loading. Pick your poison! XML The XML approach uses exactly the same configuration elements as the normal XML configuration file but with one extra element: <ConfigFile>. This serves the same purpose as in the programmatic approach, where you have defined the CacheBox configuration somewhere and you are pointing to it via this setting:  <CacheBox>     <ConfigFile>shared.path.LogBoxConfig</ConfigFile> </CacheBox>  Please also note that the application loader follows the same approach as in the programmatic configuration: Is there a <CacheBox> element defined in the configuration? False: Does a CacheBox.cfc exist in the application's config folder? True: Use that CFC by convention to configure CacheBox False: Configure CacheBox with default framework settings found in /coldbox/system/web/config/CacheBox True: Have you defined a <ConfigFile> key in the cacheBox XML structure? True: Then use that value to pass into the configuration object so it can load CacheBox using that configuration file (xml or CFC) False: The configuration data (XML) is going to be defined inline here so use that XML for configuration Cache Providers We have shipped CacheBox with several CacheBox providers that you can use in your applications. There are basically two modes of operation for a CacheBox provider and it is all determined by the interface they implement: ICacheProvider : A standalone cache provider IColdboxApplicationCache : A cache provider for usage by the ColdBox Framework The following are the shipped providers: Provider ColdBox Enabled Reporting Enabled Description CacheBoxProvider false true Our very own CacheBox caching engine CacheBoxColdBoxProvider true true Our CacheBox caching engine prepared for ColdBox application usage CouchbaseProvider false true An awesome provider for Couchbase NoSQL server, see CacheBox-Couchbase CouchbaseColdboxProvider true true An awesome provider with ColdBox application support for Couchbase NoSQL server, see CacheBox-Couchbase CFProvider false true A ColdFusion 9.0.1 and above implementation CFColdBoxProvider true true A ColdBox enhanced version of our ColdFusion 9.0.1 cache provider RailoProvider false true A ColdBox enhanced version of our Railo cache provider RailoColdBoxProvider true true A ColdBox enhanced version of our Railo cache provider MockProvider true false A ColdBox enhanced cache provider that can be used for mocking or testing Each provider has the shared functionality provided by the ICacheProvider and IColdboxApplicationCache interfaces, so I encourage you to look at the CFC API Docs for an in-depth view of their API. Also, please note that each cache provider implementation has also some extra methods and functionality according to their implementation, so please check out the API docs for each provider. Couchbase Providers The Couchbase NoSQL server providers are a separate download and allows you to connect CacheBox and ColdBox to Couchbase for distributed caching and persistence. Please see our CacheBox-Couchbase documentation for more information. CF Providers Our CFColdboxProvider is an implementation specifically written for Adobe ColdFusion 9.0.1 and beyond. This provider leverages the EHCache engine within ColdFusion 9 and extends the native ColdFusion capabilities by talking to the EHCache sessions natively via Java. In this manner we are able to do things like: Get extended cached object metadata Get overall cache statistics Talk to terracotta classes Do quiet operations on get, clear, and put Check if an element is expired Do reporting and content reporting Much more Properties Each CacheBox provider can have its own set of configuration properties it needs for operation. Our CF providers also have some. Please note, all properties other than ""cacheName"" are passed through to the underlying EHCache implementation in ColdFusion. The default values may differ if you have edited the ehcache.xml file on your server. Property Type Required Default Description cacheName string false object The named cache to talk to via ColdFusion cache operations. By default we talk to the default ColdFusion object cache. clearOnFlush boolean false true Sets whether the MemoryStore should be cleared when flush() is called on the cache diskExpiryThreadIntervalSeconds integer false 120 (2 minutes) The interval in seconds between runs of the disk expiry thread. diskPersistent boolean false false Specifies whether to persist caches stored on disk through JVM restarts. diskSpoolBufferSizeMB integer false 30 The size of the disk spool used to buffer writes eternal boolean false false Specifies whether no timeout or idletime applies. A true value indicates that the object or page is cached without any timespan being specified. maxElementsInMemory integer false 10000 The maximum number of objects that can be cached in memory. If the number is exceeded and overflowtodisk is false, the new objects entered replace old elements using algorithm specified in the memoryevictionpolicy entry. maxElementsOnDisk integer false 10000000 The maximum number of objects that can be stored on disk if overfllowtodisk is true. memoryEvictionPolicy string false LRU The algorithm to used to evict old entries when maximum limit is reached, such as LRU (least recently used) or LFU (least frequently used). overflowToDisk boolean false false Specifies whether when the maximum number of elements allowed in memory is reached, objects can be moved to disk, as determined by the memoryevictionpolicy value. timeToIdleSeconds integer false 86400 The idle time in seconds. Used if a cfcache tag does not specify an idleTime attribute. timeToLiveSeconds integer false 86400 The timeout time in seconds. Used if a cfcache tag does not specify a timespan attribute. Note: Please note that you can configure more than 1 CFColdboxProvider cache engine in your applications that can talk to more than one referenced ColdFusion (EHCache) custom cache. Railo Providers Our RailoProvider is an implementation specifically written for Railo. Properties Property Type Required Default Description cacheName string false object The named cache to talk to via Railo cache operations. By default we talk to the default Railo object cache. Mock Provider This provider can be used for mocking capabilities in your unit tests or any kind of test you are performing. It keeps a simple localized cache inside of a local structure. It should definitely not used for any type of caching at all. Properties None CacheBox Provider The CacheBox provider is our very own enterprise cache implementation that has been part of the core since its initial baby step versions. Our caching engine has matured over the years and it has been proven effective, fast, scalable and very user friendly. In this release, we took all our gained knowledge and improved it considerably. We decoupled our object storages and created a way to create object storages for caching purposes via our IObjectStore interface. This allows us to get creative and be able to extend the caching provider into different and creative object stores. We fine tuned it for high availability, made it much more scalable, and expanded event caching to support multi-domain hosting and so much more. Here are the two implementations for our CacheBox provider: CacheBoxProvider : Our base CacheBox provider caching engine CacheBoxColdBoxProvider : A subclass of CacheBoxProvider that enables caching operations for ColdBox applications Properties Key Type Required Default Description ObjectDefaultTimeout numeric false 60 The default lifespan of an object in minutes ObjectDefaultLastAccessTimeout numeric false 30 The default last access or idle timeout in minutes UseLastAccessTimeouts Boolean false true Use or not idle timeouts ReapFrequency numeric false 2 The delay in minutes to produce a cache reap (Not guaranteed) FreeMemoryPercentageThreshold numeric false 0 The numerical percentage threshold of free JVM memory to have available before caching. If the JVM free memory falls below this setting, the cache will run the eviction policies in order to cache new objects. (0=Unlimited) MaxObjects numeric false 200 The maximum number of objects for the cache EvictionPolicy string or path false LRU The eviction policy algorithm class to use. ColdBox ships with LFU (Least Frequently Used) LRU (Least Recently Used) FIFO (First In First Out) You can also build your own and pass the instantiation path in this setting EvictCount numeric false 1 The number of objects to evict once an execution of the policy is requested. You can increase this to make your evictions more aggressive objectStore string false ConcurrentStore The object store to use for caching objects. ColdBox ships with the following object stores: ConcurrentStore - Uses concurrent hashmaps for increased performance ConcurrentSoftReferenceStore - Concurrent hashmaps plus java soft references for JVM memory sensitivity DiskStore - Uses a physical disk location for caching (Uses java serialization for complex objects) JDBCStore - Uses a JDBC datasource for caching (Uses java serialization for complex objects) You can also build your own and pass the instantiation path in this setting. ColdboxEnabled Boolean false false A flag that switches on/off the usage of either a plain vanilla CacheBox provider or a ColdBox enhanced provider. This must be true when used within a ColdBox application and it applies for the default cache ONLY. Please also note that each of the object stores can have extra configuration properties that you will need to set. So for that, let's delve a little deeper into object stores. CacheBox Object Stores CacheBox offers the capability of object stores that can be used to store cached objects. If you look at the following figure you will understand our object model for our object stores: Each object store is composed into a CacheBox provider for usage of storing and retrieving cached objects. The design principle behind each object store is that each object store implements its own locking, serialization, reading and writing mechanisms that are fronted by a nice API via the CacheBoxProvider object. Also, it is very important to note that the CacheBox eviction policies talk to the object stores in order to get ordered data structures for eviction purposes. So if you will be creating your own object stores, make sure they implement the right data methods the eviction policies can use for evictions. Also, the CacheBox provider's reaping methods use the object stores in order to get metadata out of the object stores in order to take care of cleanup, expirations and evictions. We definitely encourage you to take a look at the written object store implementations in order to learn how this works. So let's start investigating each of the object stores that are shipped with CacheBox. Important : Please note that each object store can have extra properties that need to be set in your cache configuration file. ConcurrentStore The ConcurrentStore is an object store that uses concurrent hash maps provided by the Sun JDK. Concurrent maps are better suited for caching algorithms as they do not lock the entire map in order to access elements. They work on the concept of row locking. Therefore, the increased performance and increase in throughput is observable by using concurrency maps. Here is a quote from the Java Docs: ""However, even though all operations are thread-safe, retrieval operations do not entail locking, and there is not any support for locking the entire table in a way that prevents all access. Retrieval operations (including get) generally do not block, so may overlap with update operations (including put and remove). Retrievals reflect the results of the most recently completed update operations holding upon their onset."" - JavaDocs Properties None You can also find some great research out there about concurrency maps: http://www.ibm.com/developerworks/java/library/j-jtp07233.html http://www.ehcache.org ConcurrentSoftReferenceStore The ConcurrentSoftReferenceStore uses a combination of concurrency maps and java soft references. In our introductory sections we introduced java soft references and how it allows us to create placeholders in memory for objects and when the JVM needs memory it has permission to collect these placeholders and thus release memory. This is truly a great combination to have and ColdBox leverages this for its template, event and view fragment caching. Just remember that when you use this object storage, the time spans are never guaranteed as the JVM has permission to cleanup objects when it sees fit. To get much better performance on the JVM memory heap space and a more active memory, we recommend using this object storage. Research has also indicated that a combination of memory sensitive structures in combination with limits in a cache, can increase performance and optimize its usage. So please make sure limits are set in the cache. Properties None You can also find some great research out there about concurrency maps and soft references: http://www.ibm.com/developerworks/java/library/j-jtp07233.html http://www.ibm.com/developerworks/java/library/j-jtp01246.html DiskStore The DiskStore as its name implies, uses a disk to store cached objects under. This can be any location that can be accessible via cffile and cfdirectory. Therefore, you can use Railo resources or virtual RAM locations or even Amazon S3. You can get funky my friends! Anyways, this storage will look at the incoming target object to cache and if it is a complex object it will serialize to binary and store it on disk. If it is a simple value, it just saves it. This is a great way to provide a centralized template/view caching mechanisms as views are simple strings. You can even connect a farm of servers to talk to a centralized network drive that has centralized view/event template storage. Anyways, you can get funky! Properties Key Type Required Default Description autoExpandPath Boolean false true A flag that indicates if the store should use expandPath() to figure out the path to store objects in. directoryPath string true --- The directory path to use to store cached objects under. This can be relative or absolute. JDBCStore The JDBCStore is a nice object storage that leverages a single database table to keep track of its objects. This is great for simple or small scale clusters that need centralized caching. It also follows suit that complex objects are serialized into the tables and simple objects are just saved. The object store can even create the database table for you if need be via its own object store custom properties. This cache provider is a great way to use for flash variables using the ColdBox Flash RAM. Properties Key Type Required Default Description dsn string true --- The datasource to connect to table string true --- The table we will be caching to dsnUsername string false The DSN username if used dsnPassword string false The DSN password if used tableAutoCreate Boolean false true The object store can create the repository table for you if need be and if it does not exist. BlackholeStore The BlackholeStore is not something you would actually deploy to a production site. The BlackholeStore is a development tool that simulates caching but never actually caches anything. This store can be useful to help tune an application as it can provide a solid baseline for how things would behave without caching. Anything set into a cache powered by the blackhole store will vanish into a blackhole. Anytime a lookup is performed it will appear is if that object has expired. Finally, if you actually try to get and object you will receive a null. CacheBox Eviction Policies The CacheBox Provider offers several eviction policies that are used to evict objects from cache when certain situations occur within the cache environment. Again, these eviction policies are only for the CacheBox Cache provider. These eviction situations can include: Maximum objects reached JVM memory threshold reached Manual eviction executions Below is a refresher on what an eviction policy means: Eviction Policy: The algorithm that decides what element(s) will be evicted from a cache when full or a certain criteria has been met in the cache. (Cache Algorithms) Please note that when a cache element is evicted from the cache it usually is expired first so it can be gracefully collected when the CacheBox reaping procedures occur. Therefore, you might see sometimes that the cache actually goes above the maximum objects defined, this is normal. Important: Please note that no eternal objects are ever evicted from the CacheBox provider. Eternal objects live as long as the CacheBox instance lives for (most likely application scope timeout). So please take that into consideration. ColdBox ships with the following eviction policies: Policy Description LRU (Least Recently Used) With this eviction policy, the cache discards the least recently used items first. * This is the default policy LFU (Least Frequently Used) This policy counts how often an item has been accessed and it will discard the items that have been used the least. FIFO (First In First Out) Just like it sounds, first one in, first one out. Great for implementing sized queues LIFO (Last In First Out) Just like it sounds, last one in, first one out. Great for implementing sized stacks or timed stacks Using Your Own Policy CacheBox is incredibly flexible and if you would like to create your own eviction policy, you can! Below are a set of easy steps on how to do this: 1. Create a simple CFC that implements the following class coldbox.system.cache.policies.IEvictionPolicy or use our convenience abstract class and inherit from coldbox.system.cache.policies.AbstractEvictionPolicy 2. Create your own execute() method that will evict items (We recommend looking at existing policies to get an insight on how to do this) 3. Use the policy instantiation path in your cachebox provider properties Sample Policy  <cfcomponent output=""false""               hint=""FIFO Eviction Policy Command""               extends=""coldbox.system.cache.policies.AbstractEvictionPolicy"">  <-------------------------------------------- CONSTRUCTOR ------------------------------------------->      <---  init --->     <cffunction name=""init"" output=""false"" access=""public"" returntype=""FIFO"" hint=""Constructor"">         <cfargument name=""cacheProvider"" type=""any"" required=""true"" hint=""The associated cache provider of type: coldbox.system.cache.ICacheProvider"" colddoc:generic=""coldbox.system.cache.ICacheProvider""/>         <cfscript>             super.init(arguments.cacheProvider);                          return this;         </cfscript>     </cffunction>  <-------------------------------------------- PUBLIC ------------------------------------------->      <---  execute --->     <cffunction name=""execute"" output=""false"" access=""public"" returntype=""void"" hint=""Execute the policy"">         <cfscript>             var index       = """";                          // Get searchable index             try{                 index   = getAssociatedCache().getObjectStore().getIndexer().getSortedKeys(""hits"",""numeric"",""asc"");                 // process evictions via the abstract class                 processEvictions( index );             }             catch(Any e){                 getLogger().error(""Error sorting via store indexer #e.message# #e.detail# #e.stackTrace#."");             }            </cfscript>     </cffunction>  <-------------------------------------------- PRIVATE ------------------------------------------->  </cfcomponent>  Process Evictions: The below code is the code used to evict objects from cache  <---  processEvictions ---> <cffunction name=""processEvictions"" output=""false"" access=""private"" returntype=""void"" hint=""Abstract processing of evictions"">     <cfargument name=""index"" type=""array"" required=""true"" hint=""The array of metadata keys used for processing evictions""/>     <cfscript>         var oCacheManager   = getAssociatedCache();         var indexer         = oCacheManager.getObjectStore().getIndexer();         var indexLength     = arrayLen(arguments.index);         var x               = 1;         var md              = """";         var evictCount      = oCacheManager.getConfiguration().evictCount;         var evictedCounter  = 0;                  //Loop Through Metadata         for (x=1; x lte indexLength; x=x+1){                          // verify object in indexer             if( NOT indexer.objectExists( arguments.index[x] ) ){                 continue;             }             md = indexer.getObjectMetadata( arguments.index[x] );                          // Evict if not already marked for eviction or an eternal object.             if( md.timeout gt 0 AND NOT md.isExpired ){                                  // Expire Object                 oCacheManager.expireKey( arguments.index[x] );                                  // Record Eviction                  oCacheManager.getStats().evictionHit();                 evictedCounter++;                                  // Can we break or keep on evicting                 if( evictedCounter GTE evictCount ){                     break;                 }                        }         }//end for loop     </cfscript> </cffunction>  Configuration File  defaultCache = {     objectDefaultTimeout = 120,     objectDefaultLastAccessTimeout = 30,     useLastAccessTimeouts = true,     reapFrequency = 2,     freeMemoryPercentageThreshold = 0,          evictionPolicy = ""myPath.policies.MyPolicy"",          evictCount = 1,     maxObjects = 300,     objectStore = ""ConcurrentSoftReferenceStore"",     coldboxEnabled = false }  That's it folks! Very easily you can create your own eviction policies and use our built in indexers to just sort the elements in whatever way you like. If not, you can always do it yourself :) CacheBox Event Model CacheBox also sports a very nice event model that can announce several cache life cycle events and factory life cycle events. You can listen to these events and interact with caches at runtime very easily, whether you are in standalone mode or within a ColdBox application. Of course, if you are within a ColdBox application, you get the benefit of all the potential of ColdBox Interceptors and if you are in standalone mode, well, you just get the listener and that's it. Each event execution also comes with a structure of name-value pairs called interceptData that can contain objects, variables and all kinds of data that can be useful for listeners to use. This data is sent by the event caller and each event caller decides what this data sent is. So let's start investigating first the CacheBox life cycle events. CacheBox Events CacheBox's aggregation functionality offers a wide gamut of life cycle events that are announced at certain points in execution time. Below are the current events announced by the CacheBox CacheFactory. Remember, this is the CacheFactory and not a CacheBox Cache Provider. Event Data Description afterCacheRegistration cache : the registered cache reference Called after a new cache provider has been registered, configured and initialized within CacheBox. beforeCacheRemoval cache : the cache reference to remove Called before a removeCache() operation is called on CacheBox afterCacheRemoval cache : the cache name] Called after the cache has been removed from CacheBox. You receive only the name of the cache removed. beforeCacheReplacement oldCache : the cache reference to replace newCache : the new cache reference to replace with Called right before a cache is replaced with another cache in CacheBox. afterCacheFactoryConfiguration cacheFactory : A reference to the CacheBox factory created Called after a CacheBox instance has been created, configured and started up. This is a great interception point for creating cache loaders or on startup scripts. beforeCacheFactoryShutdown cacheFactory : A reference to the CacheBox factory created Called right before the CacheBox instance is shutdown gracefully afterCacheFactoryShutdown cacheFactory : A reference to the CacheBox factory created Called right after the CacheBox instance has been shutdown gracefully beforeCacheShutdown cache : A reference to the cache to shutdown Called right before a specific cache provider is shutdown by CacheBox Factory afterCacheShutdown cache : A reference to the cache that was shutdown Called right after a specific cache provider has been shut down by CacheBox Factory and before its removed CacheBox Provider Events Each cache provider has the potential of announcing life cycle events as it implements it. If you are a cache provider author, then you can use the aggregated EventManager to register, process and announce events a-la-carte. So let's investigate each provider's life cycle events: CacheBoxProvider-CacheBoxColdBoxProvider Events Event Data Description afterCacheElementUpdated cache : the cache provider cacheNewObject : the new object to cache cacheOldObject : the object replaced Called via a set() operation when there is already the same key in the cache. Called before the replacement occurs afterCacheElementInsert cache : the cache provider cacheObject : the new object to cache cacheObjectKey : the key used to store the object cacheObjectTimeout : the timeout used cacheObjectLastAccessTimeout : the last access timeout used Called after a new cache element has been inserted into the cache afterCacheElementRemoved cache : the cache provider cacheObjectKey : the key of the removed object Called after a cache element has been removed from the cache afterCacheClearAll cache : the cache provider Called after a clearAll() has been issued on the cache afterCacheElementExpired cache : the cache provider cacheObjectKey : the key of the expired object Called after a cache element has been expired from the cache CFProvider-CFColdboxProvider Events Event Data Description afterCacheElementInsert cache : the cache provider cacheObject : the new object to cache cacheObjectKey : the key used to store the object cacheObjectTimeout : the timeout used cacheObjectLastAccessTimeout : the last access timeout used Called after a new cache element has been inserted into the cache afterCacheElementRemoved cache : the cache provider cacheObjectKey : the key of the removed object Called after a cache element has been removed from the cache afterCacheClearAll cache : the cache provider Called after a clearAll() has been issued on the cache Cache Listeners We have already seen in our previous section all the events that are announced by CacheBox and its providers, but how do we listen? There are two ways to build CacheBox listeners because there are two modes of operations, but the core is the same. Listeners are simple CFCs that must create methods that match the name of the event they want to listen in. If you are running CacheBox within a ColdBox application, listeners are Interceptors and you declare them and register them exactly the same way that you do with normal interceptors. Also, these methods can take up to two parameters depending on your mode of operation (standalone or coldbox). The one main difference between pure CacheBox listeners and ColdBox interceptors are that the configure method for the standalone CacheBox is different. Please see samples. Argument Type Execution Mode Description event coldbox.system.web.context.RequestContext coldbox The request context of the running request interceptData struct standalone-coldbox The data structure passed in the event So let's say that we want to listen on the beforeCacheFactoryShutdown and on the afterCacheElementRemoved event in our listener. ColdBox Mode Listener  component{      function configure(){}          function beforeCacheFactoryShutdown(event, interceptData){         // get factory reference.         var cacheFactory = arguments.interceptData.cacheFactory;         // Do my stuff here:                  // I can use a log object because ColdBox is cool and injects one for me already.         log.info(""DUDE, I am going down!!!"");     }          function afterCacheElementRemoved(event, interceptData){         var cache = arguments.interceptData.cache;         var key = arguments.interceptData.cacheObjectKey;                  log.info(""The cache #cache.getName()# just removed the key -> #key#"");     } }  Standalone Mode Listener  component{      function configure(cacheBox,properties){         variables.cacheBox = arguments.cacheBox;         variables.properties = arguments.properties;                  log = variables.cacheBox.getLogBox().getLogger( this );     }          function beforeCacheFactoryShutdown(interceptData){         // Do your stuff here.     }          function afterCacheElementRemoved(event, interceptData){         var cache = arguments.interceptData.cache;         var key = arguments.interceptData.cacheObjectKey;                  log.info(""The cache #cache.getName()# just removed the key -> #key#"");     } }  Please note the configure() method in the standalone listener. This is necessary when you are using CacheBox listeners outside of a ColdBox application. The configure() method receives two parameters: cacheBox : An instance reference to the CacheBox factory where this listener will be registered with. properties : A structure of properties that passes through from the configuration file. As you can see from the examples above, each Listener component can listen to multiple events. Now you might be asking yourself, in what order are these listeners executed in? Well, they are executed in the order they are declared in either the ColdBox configuration file as interceptors or the CacheBox configuration file as listeners. Important: Order is EXTREMELY important for interceptors/listeners. So please make sure you order them in the declaration file. Cache Reporting CacheBox comes with great reporting tools whether you are using it within a ColdBox application or standalone. This section deals with how to do a-la-carte reporting by using the custom tags that CacheBox ships with. Below is the simplest form of usage for the monitor reporting tags:  <---  Import Report Tags: use /cachebox/system if using standalone ---> <cfimport prefix=""cachebox"" taglib=""/coldbox/system/cache/report"">  <---  Create CacheBox with default configuration ---> <cfif structKeyExists(url,""reinit"") OR NOT structKeyExists(application,""cacheBox"")>     <cfset application.cacheBox   = createObject(""component"",""coldbox.system.cache.CacheFactory"").init()> <cfelse>     <cfset cachebox = application.cacheBox> </cfif>  <cfoutput> <html>      <head>         <title>CacheBox Monitor Tool</title>     </head>     <body>      <---  Special ToolBar --->     <div id=""toolbar"">         <input type=""button"" value=""Reinit"" onclick=""window.location='index.cfm?reinit'""/>     </div>          <---  Render Report Here --->     <cachebox:monitor cacheFactory=""#cacheBox#""/>      </body> </html> </cfoutput>  That's it! You basically import the tag library from /coldbox/system/cache/report or /cachebox/system/cache/report and then use the monitor tag to render out the monitor. What's cool about the monitor is that it is completely skinnable. Please see the CacheBox Report Skins for more information. Let's check out the attributes for this custom tag: Attribute Type Required Default Description cacheFactory coldbox.system.cache.CacheFactory true --- The reference to the CacheBox factory to report on. baseURL string false cgi.script_name The location of the script so the tag can create links for Ajax calls and rendering calls. skin string false default The name of the skin to use for rendering the report. The skins are found at /coldbox/system/cache/report/skins. Important : Each skin can implement its own attributes, so always check the skins documentation to see what extra attributes it implements. Here are some examples of the tag usage:  <cachebox:monitor cacheFactory=""#cacheBox#""/>  <cachebox:monitor cacheFactory=""#cacheBox#"" baseURL=""index.cfm?event=cacheMonitor""/>  <cachebox:monitor cacheFactory=""#cacheBox#"" skin=""coolskin""/>  <---  Embedding report in a coldbox application's admin view ---> <cachebox:monitor cacheFactory=""#controller.getCacheBox()#""            baseURL=""#event.buildLink(event.getCurrentEvent())#"" />  CacheBox Report Skins CacheBox also allows for the creation of reporting skins so you can create gorgeous looking reports for its caches, configurations, content, etc. The location of such skins is in the following location:  /coldbox/system/cache/report/skins or /cachebox/system/cache/report/skins  The name of the folder inside of the skins folder is the unique name used to specify the skin in the custom tag. You can look at the default skin to learn from it and see how you can build skins yourself. Skin Attributes A skin receives attributes or configuration elements via the custom tag used for the report monitor. Basically any attribute you add to the custom tag will be available in the skin's pages in a structure called attributes, makes sense huh? Tag Caller A skin also receives a reference to the caller scope via a variable called, drum roll please, caller. So you can also reference the caller variables via this scope. Skin Templates The first step of creating skin templates is to create its holding folder inside of the skins directory. So if we were starting a new skin called goodness then you would create a new folder in the following directory:  /coldbox/system/cache/report/skins/goodness or /cachebox/system/cache/report/skins/goodness  The following templates are the ones you will be skinning and placing in this folder. In all reality you could potentially just have one, CachePanel.cfm. However, since you can bring in AJAX content to refresh certain parts of the panel, you break out its reporting functionality into various templates. The CFC in charge of rendering your skin templates is the ReportHandler.cfc located in the same report package, so we recommend also reading its API for more in depth information. So let's explore them: Template Required Description cachebox.js true The JavaScript file that will be automatically loaded into the header content via a cfhtmlhead call. You can put any JavaScript you like here or load more JavaScript files via your skin templates. cachebox.css true The css file that will be automatically loaded into the header content via a cfhtmlhead call. CachePanel.cfm true The main template that displays the report monitor to the user. This skin could potentially hold action buttons and other parts of the cache report rendered in specific locations by using rendering methods (see ReportHandler section). CacheReport.cfm false This template is usually rendered via the renderCacheReport(cacheName) method and it is supposed to render out a report of the cache provider using the incoming cacheName argument. This template usually has a call somewhere for the content report of such cache provider via the renderCacheContentReport(cacheName) method. CacheContentReport.cfm false This template is usually rendered via the renderCacheContentReport(cacheName) method and it is supposed to render out a report of the contents of the cache provider using the incoming cacheName argument. This table of contents can also have action buttons assigned to them. Note : All skins are rendered within the ReportHandler component. This means that you have access to this object's methods and local variables. We recommend you look at the default skin's templates for usage. ReportHandler This object is in charge of rendering skin templates and also executing processing commands. The custom tag creates this object and prepares it for usage, so don't worry about it, just know how to use it. The following are the variable compositions this object has and therefore you can use them in your skin templates: Variable Type Description cacheBox coldbox.system.cache.CacheFactory A reference to the running CacheBox cache factory baseURL string The baseURL attribute passed via the tag configuration skin string The skin attribute passed via the tag configuration skinPath string The non-expanded path to the skin in use. e.g. /coldbox/system/cache/report/skin/MyCoolSkin attributes struct A reference to the attributes structure passed via the tag caller template A reference to the caller page of the custom tag. This tag also has the following methods that you might be interested in: Return Type Method void processCommands([command=],[cacheName=default],[cacheEntry=]) Execute and process a cacheBox command any renderCachePanel() Render the CachePanel.cfm template any renderCacheReport(cacheName) Render the CacheReport.cfm template which renders typically the report information about a specific cache provider any renderCacheContentReport(cacheName) Render the CacheContentReport.cfm template which typically renders the report of the content of the cache provider any renderCacheDumper(cacheName,cacheEntry) Tries to retrieve the cacheEntry from the cacheName provider and dumps it For example, here is a snippet of the CachePanel.cfm template to designate where the cache report for a specific cache provider will be rendered by default:  <---  Named Cache Report ---> <div id=""fw_cacheReport"">#renderCacheReport()#</div>  Since no cacheName argument is provided, it will use the default value of default. Here is a snippet of the cache report template of where it designates the content report to be rendered. It also verifies that the cache provider has reporting enabled and uses a custom attribute called contentReport.  <---  Content Report ---> <cfif cacheProvider.isReportingEnabled() AND attributes.contentReport>     <h3>Cache Content Report</h3>      <---  Reload Contents --->     <input type=""button"" value=""Reload Contents""             name=""cboxbutton_reloadContents""            style=""font-size:10px""             title=""Reload the contents""             onClick=""fw_cacheContentReport('#URLBase#','#arguments.cacheName#')"" />                 <---  Expire All Keys --->     <input type=""button"" value=""Expire All Keys""             name=""cboxbutton_expirekeys"" id=""cboxbutton_expirekeys""            style=""font-size:10px""             title=""Expire all the keys in the cache""             onclick=""fw_cacheContentCommand('#URLBase#','expirecache', '#arguments.cacheName#')"" />      <---  ColdBox Application Commands --->     <cfif cacheBox.isColdBoxLinked()>         <---  Clear All Events --->         <input type=""button"" value=""Clear All Events""                 name=""cboxbutton_clearallevents"" id=""cboxbutton_clearallevents""                style=""font-size:10px""                 title=""Remove all the events in the cache""                 onclick=""fw_cacheContentCommand('#URLBase#','clearallevents', '#arguments.cacheName#')"" />         <---  Clear All Views --->         <input type=""button"" value=""Clear All Views""                 name=""cboxbutton_clearallviews"" id=""cboxbutton_clearallviews""                style=""font-size:10px""                 title=""Remove all the views in the cache""                 onclick=""fw_cacheContentCommand('#URLBase#','clearallviews', '#arguments.cacheName#')"" />     </cfif>      <---  Loader --->     <span class=""fw_redText fw_debugContent"" id=""fw_cacheContentReport_loader"">Please Wait, Processing...</span>      <div class=""fw_cacheContentReport"" id=""fw_cacheContentReport"">         #renderCacheContentReport(arguments.cacheName)#     </div> </cfif>  Action Commands Each skin template can execute action commands. We have several already constructed into the tag that can execute if it detects an incoming URL variable called URL.cbox_command. So if your report exists in a page called monitor.cfm then just call that same page (via AJAX preferably) with some URL variables attached (See default skin example). Now, below are the ones we implement, but you can build as many as you like and place them in the page where you use the monitor tag or in the skin templates themselves; wherever they make sense to you. The following are the commands built in to the reporting tag and the incoming URL variables it expects. Please note that the command is taken from the URL.cbox_command variable: Command URL Variables Description expireCache url.cbox_cacheName Executes a expireAll() in the cache provider specified by the incoming cache name. reapCache url.cbox_cacheName Executes a reap() in the cache provider specified in the incoming cache name delCacheEntry url.cbox_cacheName url.cbox_cacheEntry Deletes the passed in cache entry from the named provider clearAllEvents url.cbox_cacheName Executes a clearAllEvents() in the cache provider specified in the incoming cache name(Must be a ColdBox enabled cache) clearAllViews url.cbox_cacheName Executes a clearAllViews() in the cache provider specified in the incoming cache name(Must be a ColdBox enabled cache) cacheBoxReapAll none Executes a reapAll() via the CacheBox Cache Factory cacheBoxExpireAll none Executes a expireAll() via the CacheBox Cache Factory gc none Executes a suggestion to the JVM to produce a garbage collection Note : If the tag detects an incoming command, it will execute it, reset the content and output a true to the response buffer. Here are some sample calls:  GET monitor.cfm?cbox_command=gc GET monitor.cfm?cbox_command=cacheBoxReapAll GET monitor.cfm?cbox_command=delCacheEntry&cbox_cacheName=default&cbox_cacheEntry=testKey  ColdBox Application Enhancements As we have seen from the documentation, CacheBox can be used in both standalone mode and within ColdBox applications. If you are building ColdBox applications, which you should :), then don't worry about creating CacheBox, it is already done for you. Just know how to configure it and how ColdBox leverages CacheBox for lots of internal key operations. Please also refer to the ColdBox Application Configuration section to learn about the conventions used to discover how CacheBox should be configured in a ColdBox application. ColdBox Caches A typical ColdBox application is configured by default with two caches named: default and template. The default cache is used for data, objects, model objects, plugins, handlers, etc. The template cache is exclusively used for event caching and view fragment caching. This provides the developer a nice way to decide how each of these concerns are cached. So if you are in a multi-cluster environment and you wanted to share event and view fragment caching in the cluster, you could easily configure the template cache to use the JDBCStore or the DiskStore and store these elements in a central location shared by the cluster. Lots of possibilities here. Resources We recommend seeing our other guides to see how caching is leveraged internally in ColdboxEnabled Event Handlers : How event handlers are persisted and how event caching can accelerate your applications Layouts-Views Guide : A great way to find out how to do view fragment caching Plugins : How plugins are persisted if you are a plugin author Interceptors : Learn what are interceptors/listeners, how to use them and how to configure them FlashRAM : How the ColdBox Flash RAM can be configured to use CacheBox for distribution   Download in other Formats: Markup | HTML | Word Comments (0) Add Comment ColdBox Books Purchase Books Buy Book! Buy Kindle! Buy eBook! See all books! Media ColdBox TV ColdBox Connection Video Feeds Developer Week Social Media twitter.com/coldbox twitter.com/ortussolutions twitter.com/lmajano twitter.com/gocontentbox facebook.com/coldbox Ortus Services Support & Mentoring Architecture & Design Expert Training Server Setup & Tuning Consulting Contact Us info@coldbox.org info@ortussolutions.com www.ortussolutions.com Copyright Ortus Solutions, Corp >> ContentBox v0.5 Beta 2 Design By DT"	"null"	"null"	"The Enterprise ColdFusion Caching Engine, Aggregator and API"	"true"
"Other Libraries"	"cfbackport"	"https://github.com/misterdai/cfbackport"	"Back porting features contained in newer versions of ColdFusion."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"24"	"10"	"10"	"GitHub - misterdai/cfbackport: Back porting features contained in newer versions of ColdFusion. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 24 Fork 10 misterdai/cfbackport Code Issues 2 Pull requests 0 Wiki Pulse Graphs Back porting features contained in newer versions of ColdFusion. 37 commits 1 branch 0 releases Fetching contributors ColdFusion 100.0% ColdFusion Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 42da48e Sep 23, 2014 misterdai Merge pull request #11 from henrylearn2rock/master … Support result via getPrefix() & bugfix for supporting complex struct style queryparam Permalink Failed to load latest commit information. test fixing misspell of Canonicalize, add functions, and unit tests Jul 7, 2012 README Update README Apr 10, 2014 cf10.cfm Tweaked CSRF Functions Nov 28, 2012 cf11.cfm cf9.cfm cfbackport.cfm Update cfbackport.cfm May 27, 2014 index.cfm SessionInvalidate, ArraySlice and GetApplicationMetadata Mar 12, 2012 README             __ _____ ____   ____    __ __  _ ____   ___  ____  ______            /  ]     |    \ /    |  /  ]  |/ ]    \ /   \|    \|      |           /  /|   __|  o  )  o  | /  /|  ' /|  o  )     |  D  )      |          /  / |  |_ |     |     |/  / |    \|   _/|  O  |    /|_|  |_|         /   \_|   _]|  O  |  _  /   \_|     \  |  |     |    \  |  |         \     |  |  |     |  |  \     |  .  |  |  |     |  .  \ |  |          \____|__|  |_____|__|__|\____|__|\_|__|   \___/|__|\_| |__|  Author: David ""Mister Dai"" Boyer Website: http://misterdai.wordpress.com Version: 0.8 Contributors: Henry Ho, David Epler  ---------------------- | Description        | ----------------------  This project aims to make at least some functions from newer versions of Adobe ColdFusion available in older versions.  For example, SessionInvalidate() is new to CF10 but undocumented features make it possible in at least CF8+, possibly even CF7.  Each set of functions is wrapped within an ""if"" statement to make sure they aren't loaded if the version already supports them.  ---------------------- | Requirements       | ----------------------  Functions should work in at least ColdFusion 8+.  Where possible I've tried to avoid using newer syntax or functions  If ColdFusion is patched with APSB11-04 or higher, ESAPI is available for  Encode and Decode functions.   APSB11-04+ installs ESAPI 1.4.4 for CF8.0.x and ESAPI 2.0_rc10 for CF9.0.0/1 CF9.0.2 already has ESAPI 2.0_rc10 installed  ---------------------- | Usage              | ----------------------  Include the file cfbackport.cfm where you'd like the functions to appear.  Keep in mind that if you are operating within a CFC, you'll need to include them there to make use of them.  <cfinclude template=""cfbackport.cfm"" />  ---------------------- | Functions          | ----------------------  	* Backported from CF10 for CF9 and CF8  		ArraySlice 		CallStackDump 		CallStackGet 		Canonicalize 		CsrfGenerateToken 		CsrfVerifyToken 		DecodeForHTML			(David Epler) [requires ESAPI 2.0+] 		DecodeFromURL			(David Epler) 		EncodeForCSS			(Henry Ho) 		EncodeForHTML 		EncodeForHTMLAttribute	(Henry Ho) 		EncodeForJavaScript		(Henry Ho) 		EncodeForURL			(Henry Ho) 		EncodeForXML			(David Epler) 		GetApplicationMetadata 		HMac				(David Epler) 		IsClosure 		QueryExecute                    (Henry Ho) 		ReEscape 		SessionInvalidate 		SessionStartTime 		 	* Backported from CF9 for CF8 		throw				(David Epler) [required for DecodeFromURL] 		location 		writeDump 		ArrayContains 		DirectoryList 		DirectoryRename  ---------------------- | Unit Tests         | ----------------------  Unit tests were created with MXUnit 2.1.1  	* As written (of course) CF10 passes them all 	* CF9.0.x with APSB11-04+ - 13 success, 0 error, 1 failure 	 * Failure is due to ESAPI version difference 	* CF8.0.x with APSB11-04+ - 9 success, 1 error, 4 failure 	 * Failure and Error is due to ESAPI version difference 		  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/misterdai/cfbackport"	"Back porting features contained in newer versions of ColdFusion."	"true"
"Other Libraries"	"cfpayment"	"https://github.com/ghidinelli/cfpayment"	"ColdFusion payment processing library makes plumbing e-commerce apps easy. Charging credit cards has never been easier. Inspired by Ruby's ActiveMerchant."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"64"	"21"	"31"	"GitHub - ghidinelli/cfpayment: ColdFusion payment processing library makes plumbing e-commerce apps easy.  Charging credit cards has never been easier. Inspired by Ruby's ActiveMerchant. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 64 Fork 31 ghidinelli/cfpayment Code Issues 3 Pull requests 0 Pulse Graphs ColdFusion payment processing library makes plumbing e-commerce apps easy. Charging credit cards has never been easier. Inspired by Ruby's ActiveMerchant. http://cfpayment.riaforge.org 176 commits 5 branches 1 release 7 contributors ColdFusion 98.0% Java 2.0% ColdFusion Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags basecommerce ghidinelli-test-bad-characters master patch-1 stripe-idiomatic-18 Nothing to show v1.1 Nothing to show New pull request Latest commit 87a2b02 May 8, 2016 ghidinelli Merge pull request #31 from Mark-Hetherington/patch-2 … More robust check for rd.payload Permalink Failed to load latest commit information. api More robust check for rd.payload May 5, 2016 contrib Added .tar.gz support to dist. Dec 10, 2008 docs Egit wants to commit but files aren't changed. Feb 16, 2013 tests Major internal refactor based on discussion from Google Group (http:/… Jan 4, 2012 LICENSE Egit wants to commit but files aren't changed. Feb 17, 2013 README.md Update README.md May 26, 2015 README.md CFPAYMENT ColdFusion payment processing library makes plumbing e-commerce apps easy. Rather than roll your own credit card, ACH or alternative payment gateway with error, currency and money handling, leverage one of our production-tested gateways or extend our base gateway and write only the code necessary to create requests and parse responses for your gateway. Eliminates writing boilerplate code and handling esoteric CFHTTP errors that only seem to happen in production. Tens of millions of dollars have been processed successfully. Inspired by Ruby's ActiveMerchant. Compatibility Note Effort has been made to keep cfpayment compatible with ACF at least as far back as CF8. However, with the widespread elimination of SSL 3.0 and TLS 1.0 in response to security issues and the introduction of SAN/SNI and SHA-256 certificates, versions of (Adobe) ColdFusion as recent as 10 are becoming increasingly unable to make secure CFHTTP calls to remote gateways. As of 5/26/15, Authorize.net uses SHA-256 certificates which Java 1.6 (part of CF7/CF8) does not support. Other gateways such as Paypal are making similar upgrades and more are expected to follow. If you are using an older version, you should consider upgrading, trying another engine such as Railo/Lucee, or using a the customer tag CFX_HTTP5 if you are on Windows. Install A ""/cfpayment"" mapping is required to the cfpayment root folder. Either add it via the Admin or on CF8+, create a per-application mapping in the Application.cfc: this.mappings[""/cfpayment""] = ""/path/to/your/cfpayment/folder""; Charge an Account in 6 Lines of Code // initialize gateway cfg = { path = ""stripe.stripe"", TestSecretKey = ""tGN0bIwXnHdwOa85VABjPdSn8nWY7G7I"" }; svc = createObject(""component"", ""cfpayment.api.core"").init(cfg); gw = svc.getGateway();   // create the account account = svc.createCreditCard().setAccount(4242424242424242).setMonth(10).setYear(year(now())+1)              .setFirstName(""John"").setLastName(""Doe"");  // in cents = $50.00, defaults to USD but can take any ISO currency code money = svc.createMoney(5000);   // charge the card response = gw.purchase(money = money, account = account);  // did we succeed? if (response.getSuccess()) {   // yay!  look at response.getResult() or response.getParsedResult()   // verify response.isValidAVS() or response.isValidCVV() } else {   // check response.getStatus(), output response.getMessage() } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ghidinelli/cfpayment"	"ColdFusion payment processing library makes plumbing e-commerce apps easy. Charging credit cards has never been easier. Inspired by Ruby's ActiveMerchant."	"true"
"Other Libraries"	"Hoth"	"https://github.com/aarongreenlee/Hoth"	"Exception Tracking"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"124"	"20"	"23"	"GitHub - aarongreenlee/Hoth: Exception tracking for ColdFusion. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 124 Fork 23 aarongreenlee/Hoth Code Issues 2 Pull requests 0 Wiki Pulse Graphs Exception tracking for ColdFusion. 139 commits 1 branch 1 release Fetching contributors ColdFusion 81.2% HTML 18.8% ColdFusion HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.5 Nothing to show New pull request Latest commit e1d52f7 Apr 26, 2016 aarongreenlee Merge pull request #31 from aliaspooryorik/patch-1 … Lucee compat fix Permalink Failed to load latest commit information. config Support for HTML emails which contain the exception details May 6, 2011 db ATV-137 Hoth files should be ignored from version control. Nov 17, 2012 examples Added Dave Shuck to readme. May 6, 2011 extras ColdBox Interceptor to load and configure Hoth May 6, 2011 logs Added default logs location. Oct 6, 2010 object Added a existence check for logPathIsRelative to avoid breaking May 6, 2011 test Added unit test and functionality to have Hoth replace the URL for re… Feb 18, 2011 views I added basic html doctype. It'll save numerous headaches in IE. Most… Sep 26, 2011 .gitignore Fixed some case-sensitivity issues with the name of Hoth's root Feb 10, 2011 Application.cfc adding blank Application.cfc Feb 16, 2011 HothReporter.cfc This commit adds the ability to use physical path for the Hoth log fi… May 6, 2011 HothTracker.cfc Lucee compat fix Jan 15, 2016 README.txt Update README.txt Jul 7, 2014 Report.cfc fixing the reporting feature Feb 16, 2011 README.txt 		--------------------------------------------- 		--------------------------------------------- 		--------------------------------------------- 		 		 __    __    ______   .___________. __    __   		|  |  |  |  /  __  \  |           ||  |  |  |  		|  |__|  | |  |  |  | `---|  |----`|  |__|  |  		|   __   | |  |  |  |     |  |     |   __   |  		|  |  |  | |  `--'  |     |  |     |  |  |  |  		|__|  |__|  \______/      |__|     |__|  |__| 		 		--------------------------------------------- 		--------------------------------------------- 		---------------------------------------------  MMI?????????????????????????????????????IIIIIIIIIIIIIIIIIIIII7777777777777777MMM MM??????????????????????????????????????IIIIIIIIIIIIIIIIIIIII7777777777777777MMM MM???????????????????????????????????????IIIIIIIIIIIIIIIIIII77777777777777777MMM MM??????????????????????????????????????IIIIIIIIIIIIIIIIIIII77777777777777777MMM MM??????????????????????????????????????IIIIIIIIIIIIIIIIIIII77777777777777777MMM MM?????????????????????????????????????IIIIIIIIIIIIIIIIIII7777777777777777777MMM MM????????????????????????????????????IIIIIIIIIIIIIIIIIII77777777777777777777MMM MM??????????????????????????????????IIIIIIIIIIIIIIIIIIII7777777777777777777$$MMM MM?????????????????????????????????IIIIIIIIIIIIIIIIIIII7777777777777777777$$$MMM MM??????????????????????????????IIIIIIIIIIIIIIIIIIIII7777777777777777777$$$$$MMM MM??????????????????????????IIIIIIIIIIIIIIIIIIIIIII77777777777777777777$$$$$$MMM MM??????????????????????IIIIIIIIIIIIIIIIIIIIIIIIII777777777777777777$$$$$$$$$MMM MM?IIIIIIIIIIIIIIIIIIIIIIII,...........,IIIIIIIII777777777777777777$$$$$$$$$$MMM MMIIIIIIIIIIIIIIIIIIIIII,...............+IIIII777777777777777777$$$$$$$$$$$$$MMM MMIIIIIIIIIIIIIIIIIIII..................+III7777777777777777777$$$$$$$$$$$$$$MMM MMIIIIIIIIIIIIIIIIII?........?7IIIII777.?77777777777777777777$$$$$$$$$$$$$$$$MMM MMIIIIIIIIIIIIIIIIII.......IIIIIIIII777777777................$$$$$$$$$$$$$$$$MMM MMIIIIIIIIIIIIIIIII......+IIIIII7777777777777................I$$$$$$$$$$$$$$$MMM MMIIIIIIIIIIIIIIII.......77777777777777777777................~$$$$$$$$$$$$$$$MMM MMIIIIIIIIIIIIII7I......777777777777777777777......7$$$$$$$$$$$$$$$$$$$$$$ZZZMMM MM777777777777777=......777777777777777777777......$$$$$$$$$$$$$$$$$$$$ZZ$ZZZMMM MM777777777777777......+77777777777777777777$......$$$$$$$$$$$$$$$$$ZZZZZZZZZMMM MM777777777777777......I77777777777777777$$$$,...,,$$$$$$$$$$$$$$$ZZZZZZZZZZZMMM MM777777777777777......+777777777777$$$$$$$$$,,,,,,+++++++++7$$$ZZZZZZZZZZZZZMMM MM777777777777777.......77777$$$$$$$$$$$$$$$$,,,,,,,,,,,,,,,+ZZZZZZZZZZZZZZZZMMM MM777777777777777+......7$$$$$$$$$$$$$$$$$$$$,,,,,,,,,,,,,,,+ZZZZZZZZZZZZZZZOMMM MM777777777777777$..,,,,~oth aims to help developers better understand exceptions--caught or not--in their application so you can prioritize resolution. Hoth is a simple but effective exception content tracking system.   What does Hoth do? ------------------ Hoth can send you an alert when a new, unique exception occurs within your  application. You only receive these alerts the first time an exception is seen by Hoth.    Is that all Hoth does? ---------------------- Nope! It gets better. Hoth also tracks each occurrence so you can quickly  understand how frequent an exception is within your app. No more hunting  through log files that repeat messages over, and over.    Why should you use Hoth? ------------------------ Hoth helps you analyze your errors so you can prioritize and fix them without hunting through log, after log, after log......after log.    How do you use Hoth? -------------------- You can read about, and learn how to implement, Hoth by reading the blog post here:  https://github.com/aarongreenlee/Hoth/wiki  How can I see the Hoth report right away? ----------------------------------------- If you would like to see the Hoth Report you can view the example exceptions by following these steps:  	1.	Drop Hoth in your Web root--or--make a server mapping '/Hoth' 	 	2.	Copy the /Hoth/examples/ColdFusion/HothReportUI.cfc to your 		Web site in an accessible location. 	 	3.	Hit the following URL: 		http://yourwebsite.com/HothReportUI.cfc?method=index 		 	4.	You should now be looking at example Hoth exceptions.   High-level, 50,000 ft. view of what you need to do... ----------------------------------------------------- There are two distinct parts to Hoth: Tracking and Reporting.  	Tracking 	-------- 	Tracking is common to all applications and very easy to set up. These 	instructions will apply to all applications. 	 	Reporting 	--------- 	Things become a little (but not a lot) more complex here. Reporting 	requires access to your server from a HTTP call. This is your responsibility 	to setup--and there are lots of paths you can take to implement reporting. 	 	If you take the path of using the HothReportUI.cfc you will definitely  	want to open that file and make some edits (like adding the path to 	your own HothConfig). 	  ******************************************************************************** ******************************************************************************** ********************************************************************************  Authors: ------- Aaron Greenlee - http://aarongreenlee.com Sean Coyne - http://www.n42designs.com Dan Skaggs - http://TNTechnoHermit.com Mike Henke - http://www.henke.ws James Brown - http://coldfusioning.com Dave Shuck - http://daveshuck.com Greg Moser - http://www.gregmoser.com  --------------------------------------------------------------------------------  Requirements  Adobe ColdFusion 9.01 with HotFix 1 Applied  Not yet tested on Railo or OpenBD.  -------------------------------------------------------------------------------- Hoth License  This file is part of Hoth.  This work is licensed under a Creative Commons Attribution-Share-Alike 3.0 Unported License.  Hoth is Copyright 2011 Aaron Greenlee  -------------------------------------------------------------------------------- Hoth has the following third-party dependencies or code included:  MockBox (http://coldbox.org) MXUnit (http://mxunit.org)  ******************************************************************************** ******************************************************************************** ********************************************************************************  Changelog: 	02/09/2011 - The source was opened. 	02/23/2011 - Merged the Bleeding branch. Users can now define their  				 URL in their HothConfig.cfc.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aarongreenlee/Hoth"	"Exception Tracking"	"true"
"Other Libraries"	"BugLogHQ"	"https://github.com/oarevalo/BugLogHQ"	"Exception Tracking"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"126"	"23"	"57"	"GitHub - oarevalo/BugLogHQ: BugLogHQ is a tool to centralize the handling of automated bug reports from multiple applications. BugLogHQ provides a unified view of error messages sent from any number of applications, allowing the developer to search, graph, forward, and explore the bug reports submitted by the applications. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 126 Fork 57 oarevalo/BugLogHQ Code Issues 27 Pull requests 3 Wiki Pulse Graphs BugLogHQ is a tool to centralize the handling of automated bug reports from multiple applications. BugLogHQ provides a unified view of error messages sent from any number of applications, allowing the developer to search, graph, forward, and explore the bug reports submitted by the applications. http://www.bugloghq.com 571 commits 9 branches 7 releases Fetching contributors ColdFusion 91.9% JavaScript 5.4% CSS 1.3% Other 1.4% ColdFusion JavaScript CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.6 1.7 1.8 2-rule-actions 2.0 4-use-dependency-injection master unitTests wip-actions Nothing to show v.1.8.8 v.1.8.7 v1.8.6 v1.8.5 v1.8.0 v1.7.0 v1.6.4 Nothing to show New pull request Latest commit 2eadb4a May 4, 2016 oarevalo Merge pull request #143 from sebduggan/master … Apply Railo SOAP object logic to Lucee servers too Permalink Failed to load latest commit information. client Merge pull request #143 from sebduggan/master May 4, 2016 components Updated http posts to JIRA API to use explicit basic auth headers to … Apr 4, 2015 config updated README to add CORS config Feb 29, 2016 core [FIX] handle error when reseting the app using an invalid resetApp value Feb 29, 2016 extensions/rules Added option to rules to include/exclude the HTMLReport section when … Feb 12, 2014 hq bumped version in client and hq Mar 16, 2016 install Updated ""Message"" field length in the SQL Server scripts to match oth… May 28, 2013 listeners Parameterize the CORS settings with sensible defaults and allow for f… Sep 18, 2015 mobile Updated version tags to 1.8.0-beta (webapp) and 0.6 (mobile) Mar 21, 2013 test Modified data sanitization/exclusion in bug report to be more customi… Oct 10, 2014 util Refactor sending of emails to a dedicated MailerService, add more con… Oct 11, 2014 .gitignore fixed ignore of /deploy folder May 27, 2013 .project Merge branch '1.6' (named instances, root deployment, core upgrade, Jul 24, 2012 .pydevproject Merge branch '1.6' (named instances, root deployment, core upgrade, Jul 25, 2012 Application.cfc Merge branch '1.6' (named instances, root deployment, core upgrade, Jul 25, 2012 README.md updated README to add CORS config Feb 29, 2016 build.xml Do not exclude README from generated build May 27, 2013 favicon.ico Added a fav icon Aug 7, 2012 index.cfm Merge branch '1.6' (named instances, root deployment, core upgrade, Jul 25, 2012 README.md BugLogHQ (v1.8) https://github.com/oarevalo/BugLogHQ BugLogHQ is a tool to centralize the handling of automated bug reports from multiple applications. BugLogHQ provides a unified view of error messages sent from any number of applications, allowing the developer to search, graph, forward, and explore the bug reports submitted by the applications. Copyright 2009-2013 - Oscar Arevalo (http://www.oscararevalo.com) Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contents: About BugLogHQ Release Notes Integrating BugLogHQ into your Applications BugLogHQ Interface Installation and Usage Notes: Supported Databases Acknowledgements / Thanks / Credits Bugs, suggestions Using BugLog with Non ColdFusion Applications CORS 1. About BugLogHQ BugLogHQ is a tool to centralize the handling of automated bug reports from multiple applications. BugLogHQ provides a unified view of error messages sent from any number of applications, allowing the developer to search, graph, forward, and explore the bug reports submitted by the applications. All bug reports received by BugLogHQ are stored on a normalized database, thus providing the option to the developers to further extend the application to leverage this information. 2. Release Notes New in 1.8 (4/2012) Users can now be restricted to access only specific applications assigned by the Administrator. Restricted users will only be able to see bug reports for their assigned applications and create rules for those applications. CRUD screens to manage Severities, Hosts and Applications. These are accessed through the Settings page and are only accessible to users in Admin role. The REST listener can now receive data in the body of the HTTP request encoded as a JSON object Checkpoint Tracking. The CFM client now has a checkpoint() method that you can use to track checkpoints or milestones during the page execution. If a bug is sent, then those checkpoints will be displayed on the full bug report. Remote Listener. This is a different listener type that allows the BugLog webapp and the Listener endpoint to be on separate servers, while at the same time allowing the webapp to control the listener. Individual users can now be assigned their own API keys to submit bug reports Added option to toggle on/off the automatic creation of hosts/severities/applications when a new bug report is received. Rules changes are now applied immediately without the need to restart the listener service. CFM applications using the buglog client can now set the application name explicitly, max depth for cfdumps and toggle logging messages locally. Added a basic ANT build script for generating a ZIP file suitable for deployment. New in 1.7 (9/2012) A new ""Dashboard"" homepage. More granular and finer timespans to view received errors. A log of each time an alert is fired with information on the bug report that triggered the alert. Optional HTTP Basic authentication for access to RSS feeds. Expose the results of any search criteria as an RSS feed. A new client written in JavaScript to allow client-side webapps to report errors to a BugLog server. Centralized and standardized display of dates and times, including support for time zone conversion. Display additional insights and context for each bug report (timeline, other reports from same user agent, host distribution) Allow deletion of bug reports Improved listing of current rules to provide a human-readable description of what they actually do. Use jQuery and Twitter Bootstrap for the main user interface. New in 1.6 (7/2012) Support for ""Named Instance"" deployment. A Named Instance means that you can have multiple instances of BugLog running on the same server at the same time. Each instance have their own configuration and point to their own databases. BugLog can now (optionally) run out-of-the-box on any directory (even the webroot). Added support for PostgreSQL (contributed by Morgan Dennithorne) New in 1.5 (2/2011) Extensions are now stored on a database instead of an XML file Creating a rule instance is now much more user friendly because application, host and severity codes can be selected via dropdowns; or can also be prepopulated from an existing bug report. Added support for defining settings for multiple environments (dev,qa,prod1,prod2,etc). Once the environment is detected buglog can override any setting with custom values. Added option to disable editing settings through the UI (useful if you have your config file versioned and only want to configure buglog that way) Added the ""BugLog Digest"" which is a configurable and periodic email summary of all reports received in the last X hours. Rewrote the ""iphone"" UI to be for mobiles in general (now its accessible at /bugLog/mobile), also there is an improved platform detection when going to /bugLog. If you go with any mobile browser you should get redirected to the new UI, otherwise you go to the regular desktop UI Multiple bug fixes New in 1.4 (11/2009) Bug reports and rules are now processed asynchronously and not at the time they arrive. This largely increases the response and scalability of the system. The default interval for execution is 2 minutes but this can be configured easily. Reduced the number of configuration files (only 2) and moved them to a single location. Added a ""settings"" screen to the main interface to allow administrators to configure multiple aspects of BugLogHQ as well as perform user management. Added support for integrating with JIRA. When enabled allows sending issues directly from BugLog to a JIRA instance. Added support for multiple users in two roles: administrators and regular users. Added option to change user password. Added option to require an API key that each application must send in order to submit bug reports. Added option to disable rules without having to delete them. Added more rule types and extended configuration options for existing types. Added option to purge history so that old data can be deleted Multiple bug fixes. Deprecated support for storing data in XML files (it really really didn't make any sense) UPDATE: Added custom web interface for iPhone/iPod Touch. See /bugLog/iphone New in 1.3 This is a release of mostly internal changes. The entire data access layer has been refactored to use an improved mechanism that makes it easier to work with different backend data storages. See: http://www.oscararevalo.com/index.cfm/2007/11/28/Using-Polymorphism-and-Inheritance-to-Build-a-Switchable-Data-Access-Layer The BugLogHQ application (where you go to see the bug reports) has also been updated to improve performance and use the new DAO layer. Configuration of data storage is now done via a config xml on the /buglog/config directory.The file is dao-config.xml.cfm. Here is where you can set the DSN, user, password and dbtype. From here, you can also change the storage mechanism from a database to simple XML files (maybe for a quick test drive) Fixed bug that would throw errors if the email addresses for top-level error reporting were not defined. Added a directory /bugLog/tests that contains files to test both the client and server side of buglog, and also can be used as a refence as to how to implement the client side of bugLog. BugLogListener now uses memory caching to improve performance and process bug reports faster Fixed sql scripts for MSSQL, all tables should now be configured with primary keys defined as numeric identity values bl_source table no longer needs to be populated with pre-defined values. The listener will insert these as needed. Added bugLogProxy.cfm for integration with BugLogMini ( http://buglogmini.riaforge.org/ ) New in 1.2 Support for a configurable and extensible rules system. Rules are processes that are applied to each bug report as it is received. Rules can be defined for tasks such as sending notifications when a bug of given conditions is received; when the amount of bugs received in a given timeframe is greater than a defined threshold, etc. The rules system is extensible in the sense that each rule is implemented as a CFC with a common interface. For more info on rules see: http://www.oscararevalo.com/index.cfm/2007/10/2/BugLogHQ-New-Rules-feature 3. Integrating BugLogHQ into your Applications Applications can send bug reports to BugLogHQ via three different ways: webservice call http post direct CFC call BugLogHQ provides a CFC that can be used to send the bug reports. This CFC is located in /bugLog/client/bugLogService.cfc. This is the only file that needs to be distributed with any application that wants to submit reports to BugLogHQ. The client cfc requires at least a CFML engine compatible with Adobe ColdFusion 8. You may instantiate and keep the instance of this CFC in some a scope such as Application and then just call the notifyService() method in it whenever the application needs to submit a bug report. To initialize the bugLogService, call the Init method. This method takes three parameters: bugLogListener: The location of the listener where to send the bug reports bugEmailRecipients: A comma-delimited list of email addresses to which send the bug reports in case there is an error submitting the report to the bugLog listener. bugEmailSender: The sender address to use when sending the emails mentioned above. The bugLogListener parameter can be any of: WSDL pointing to /bugLog/listeners/bugLogListenerWS.cfc (to submit the report using a webservice), Full URL pointing to /bugLog/listeners/bugLogListenerREST.cfm (to submit as an http post) path to /bugLog/listeners/bugLogListenerWS.cfc in dot notation (i.e. bugLog.listeners.bugLogListenerWS) If an error occurs while submitting the report to the listener, then bugLogService will automatically send the same information as an email to the addresses provided in the init() method. TIP: Check the file /bugLog/test/client.cfm for an example of how to use the bugLog client CFC 4. BugLogHQ Interface To access the BugLogHQ interface, go to /bugLog/ on your bugLog server; the interface is password protected. The default username and password is: admin / admin. From here you can have an overview of every bug report that has been received. Everything is pretty self-explanatory, and there are lots of things you can click to visualize the data in different ways. 5. Installation and Usage Notes: To install BugLog just unpack the zip file into the root of your webserver. BugLogHQ assumes it will be installed on a directory named /bugLog. If you want, you can also put BugLog directly on the web root or any other directory. NOTE: If you want to install bugLog on a location other than the default (/bugLog/), you will need to update the setting general.externalURL with the path to where you installed BugLog. The path must always end with a ""/"". Examples: ""/"", ""/mybuglog/"", ""/bugtrackingthingy/"", etc. NOTE: The BugLogHQ webapp requires a CFML engine compatible with at least Adobe ColdFusion 9; however it can receive bug reports from any version of CFML engines (or pretty much anything that can make an HTTP post) Run the corresponding SQL script for your database. The script can be found in the /install directory. This will create the necessary tables. By default bugLogHQ uses a datasource named ""bugLog"" with no password, to change this go to: /bugLog/config/buglog-config.xml.cfm Change the <setting /> tags for: db.dsn: datasource name as defined in the CF administrator (by default is bugLog) db.dbtype: database type. Can be mysql, mssql (for Microsot SQL Server), pgsql (for PostgreSQL) or oracle. The default is mysql db.username: username for the datasource (if needed) db.password: password for the datasource (if needed)  To access the bugLogHQ interface, go to /bugLog. The default username/password is: username: admin password: admin IMPORTANT: To change the admin password or to create additional users click on the ""Settings"" link on the upper right corner of the screen. TIP: Changing the setting general.externalURL in the main config you can tell BugLog the URL to use when referring to itself. By default buglog will try to guess it from the CGI scope, but in some cases you may want to override this. For example if you have a clustered deployment. This value can be either a relative path starting with ""/"", or a full URL (i.e. ""http://www.someserver.com/bugLog/"") TESTING AND VERIFICATION: After installation use your browser to go to /bugLog/test and follow the links to test both the client and server side of buglog. CONFIGURING MULTIPLE ENVIRONMENTS You can override any setting on the main config on a per-environment basis. To determine which is the current environment, BugLog will look for a file named severkey.txt on your /bugLog/config directory. This file should only contain a single word that is used to name the environment. For example: ""dev"" or ""prod-server-1"" or something like that. Then on your buglog-config.xml.cfm add an <envSettings /> section like the following example: <envSettings name=""dev"">   <setting name=""db.dsn"">bugLog_dev</setting>   <setting name=""general.adminEmail"">devteam@somedomain.org</setting> </envSettings>  Where the ""name"" attribute of the envSettings tag must match what you provide on your serverkey.txt file. Inside you can place any number of <settings/> tags you want. These will override the settings of the same name defined on the general part of the config. You can have as many <envSettings/> sections as you want. However only one will be used (the one that matches your serverkey.txt). If none matches the serverkey, then BugLog will use the default settings. An alternative way of providing the ""serverkey"" value is by using a Context Parameter. The advantage is that this method does not require you to add any new files to your BugLog installation. Of course, this only works if you have access to the config files of your application server. For example in Tomcat, to set your serverkey as ""dev"", you would set a context parameter by editing ""{Tomcat Path}/conf/context.xml"" like this: <Context>   ...   <Parameter name=""serverkey"" value=""dev"" override=""false"" />   ... </Context>  INSTALLING A NAMED INSTANCE To create a new instance, just create a new directory under the webroot with the name you want for your neq instance (i.e. ""/buglogdev""). On the new directory copy the contents of /bugLog/install/named-instance-template. NOTE: don't copy the directory itself, only its contents. Change the new Application.cfc to properly name your application, and modify the config/buglog-config.xml.cfm on your new instance to set its appropriate configuration (datasource, etc). After that you can just go to /buglogdev (in this case) to access your new instance. To submit bugs to this instance, just point your buglog client to /buglogdev/listener.cfm 6. Supported Databases: Currently BugLogHQ supports the following databases: MySQL Microsoft SQL Server 2000 Microsoft SQL Server 2005 Microsoft Access PostgreSQL Oracle IMPORTANT: Make sure you enable CLOB/BLOB support on the CF datasource settings in the ColdFusion Administrator, otherwise your bug reports might get truncated. 7. Acknowledgements / Thanks / Credits BugLogHQ uses rss.cfc by Raymond Camden (http://cfrss.riaforge.org/) Lots of icons from the ""Silk"" icon set by Mark James (http://www.famfamfam.com/) Thanks to Tom DeManincor for creating the SQL script for MSSQL Thanks to Chuck Weidler for updating and providing the SQL scripts for Access, MS SQL Server 2000, MSSQL Server 2005 Thanks to WST crew at Mentor Graphics for the great suggestions and ideas to improve BugLog Thanks to Morgan Dennithorne (https://github.com/morgdenn) for adding support for PostgreSQL Thanks to Brian Swartzfager (https://github.com/bcswartz) for adding support for Oracle Thanks to everyone that contributes code and patches to the project! 8. Bugs, suggestions, criticisms, well-wishes, good vibrations, etc There is now a Google Groups for the BugLogHQ project. Use them to ask any questions, ask for help if you get stuck, or if you have any contributions that you would like to share. Google Groups Page: http://groups.google.com/group/bugloghq GitHub Project Page: https://github.com/oarevalo/BugLogHQ 9. Using BugLog with Non ColdFusion Applications Since BugLog listens for bug reports through standard protocols via HTTP (REST and SOAP), you can use it to aggregate bug reports from any application, not just ones made in CFML. An application just needs to point to the right listener endpoint and pass the necessary parameters. On the /client folder you can find basic versions of PHP, Python and JavaScript clients that can be used to have an easier integration between your applications and BugLog. Please note that this scripts are on an ""experimental"" state, so they are a bit more simpler than the CFML version. They also use only the REST listener, not the SOAP one. 10. CORS When using the REST endpoint, you have the option to provide a bit of additional security by providing a CORS configuration. To enable CORS, you must have the following entries on your config/buglog-config.xml.cfm file:     <setting name=""cors.enabled"">true</setting>     <setting name=""cors.allowOrigin"">*</setting>  The * in allowOrigin tells that any domain is accepted for requests, however you may change this to a more restrictive value if desired. Additionally, you may use the following optional settings for more specific configurations:     <setting name=""cors.allowMethods""></setting>     <setting name=""cors.allowHeaders""></setting>     <setting name=""cors.allowCredentials""></setting>     <setting name=""cors.maxAge""></setting>  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/oarevalo/BugLogHQ"	"Exception Tracking"	"true"
"Other Libraries"	"iQuery"	"https://github.com/atuttle/iquery"	"Sane script querying syntax for Adobe ColdFusion, compatible as far back as CF9. Looks and behaves much like."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"4"	"0"	"GitHub - atuttle/iQuery: Intelligent script-based querying for CFML Skip to content Personal Open source Business Explore Join GitHub Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 10 Fork 0 atuttle/iQuery Code Issues 1 Pull requests 0 Pulse Graphs Intelligent script-based querying for CFML 13 commits 1 branch 0 releases Fetching contributors ColdFusion 100.0% ColdFusion Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. iQuery.cfc readme.md readme.md iQuery Intelligent script-based querying for CFML. Born out of the idea that script queries as designed by Adobe are too complex and unintuitive. Based on this proposal, with an affordance for Query of Queries since we can't use the proposed QoQ solution in userland. Installation Step 1: Drop iQuery.cfc into {cf-root}/CustomTags/com/adobe/coldfusion/ Step 2: There is no step 2 Syntax: [result =] new iQuery( SQL [, parameters] [, options] [, QoQ] );  parameters: { id: 1, lastname: 'foo', ... } options:    { cachedWithin: createTimeSpan(...), datasource: 'myDSN', ... } QoQ:        { people: new iQuery(...), ... } Simplest form: When you set Application.datasource, you don't actually have to pass any options at all for simple queries: top10users = new iQuery( ""select top 10 * from users"" ); Parameters: result = new iQuery(     ""insert into myTable (name) values (:name)""     ,{ name: ""Bob the Builder"" } ); inserted_id = result.generatedKey; Options: result = new iQuery(     ""select * from users order by lastname""     ,{}     ,{ maxRows: 20, cachedWithin: CreateTimeSpan(0,1,0,0) } ); NULLs: The string @NULL@ will be automatically converted to insert a null value for the specified column. result = new iQuery(     ""insert into myTable (some_nullable_column) values (:val)""     ,{ val: ""@NULL@"" } ); Additional Parameter Attributes If you want to specify additional queryparam attributes, pass a structure rather than a simple value. The name attribute may be excluded since you're already specifying it when naming the param structure. For example, instead of using @NULL@ as described above, you could do this: result = new iQuery(     ""select * from users where middlename = :middle""     ,{         middle: { null: true }     } ); This more complex form can also be used to set the list attribute: result = new iQuery(     ""select * from users where type in (:typelist) order by lastname""     ,{         typelist: {             value: 'a,b,c,d'             ,list: true         }     }     ,{ maxRows: 20 } ); ... or to set a specific type: result = new iQuery(     ""select * from users where middlename like :middle order by lastname, firstname""     ,{         middle: {             value: 'z%'             ,cfsqltype: 'cf_sql_varchar'         }     } ); Query of Queries: Pass any recordsets you want to read from as the 4th argument, qoq. Reference them in your SQL as qoq.[key_name]. Don't forget to set dbtype: 'query' in options. variables.people = new iQuery(""select name, age from person"");  variables.octogenarians = new iQuery(""  select name, age from qoq.people  where age >= 80 and age <= 89 "", {}, { dbType: ""query"" }, { people: variables.people } ); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/atuttle/iquery"	"Sane script querying syntax for Adobe ColdFusion, compatible as far back as CF9. Looks and behaves much like."	"true"
"Other Libraries"	"JavaLoader"	"https://github.com/markmandel/JavaLoader"	"JavaLoader is a library that has been built to ease the use, development and integration of Java within ColdFusion applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"42"	"11"	"12"	"GitHub - markmandel/JavaLoader: JavaLoader is a library that has been built to ease the use, development and integration of Java within ColdFusion applications. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 42 Fork 12 markmandel/JavaLoader Code Issues 0 Pull requests 0 Wiki Pulse Graphs JavaLoader is a library that has been built to ease the use, development and integration of Java within ColdFusion applications. http://www.compoundtheory.com/?action=javaloader.index 100 commits 3 branches 6 releases Fetching contributors ColdFusion 68.5% Java 31.5% ColdFusion Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop gh-pages master Nothing to show 1.1 1.0.1 1.0 0.6 0.5 0.4 Nothing to show New pull request Latest commit 9971d6c Jul 25, 2012 markmandel Merge pull request #5 from d1rtym0nk3y/develop … fixed unscoped variable Permalink Failed to load latest commit information. docs/gen Move title to 1.1 Feb 16, 2012 example Initial commit Jan 3, 2012 java Merge branch 'master' of https://github.com/boomfish/JavaLoader into … Jan 31, 2012 javaloader fixed unscoped variable Jul 25, 2012 unittests CF8 Compatability fixes. Mar 9, 2012 .gitignore Clean up static HTML documentation. Jan 31, 2012 README.md Move readme to 1.1 release. Jan 31, 2012 javaloader.iml Added IntelliJ IDEA project file (from Mark Mandel) Jan 16, 2012 README.md JavaLoader 1.1 JavaLoader is a library that has been built to ease the use, development and integration of Java within ColdFusion applications. It has several key features: Dynamically loading Java libraries without having to place them on the ColdFusion classpath Dynamically compiling Java code to be utilised within ColdFusion Applications Providing a Java Dynamic Proxy for ColdFusion Components to allow for seamless interoperability between Java and ColdFusion Components Spring integration with ColdFusion Components and more... Resources The homepage for JavaLoader can be found at: http://www.compoundtheory.com/?action=javaloader.index To download JavaLoader, visit RiaForge. ( Trying to keep JavaLoader as the project most downloaded! :) ) Documentation for JavaLoader can be found on the GitHub Wiki. The source code can be found in the GitHub repository. Bugs and feature requests can be entered into the GitHub issue tracker. Support can be found through the JavaLoader Mailing list. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/markmandel/JavaLoader"	"JavaLoader is a library that has been built to ease the use, development and integration of Java within ColdFusion applications."	"true"
"Other Libraries"	"LogBox"	"http://wiki.coldbox.org/wiki/LogBox.cfm"	"The Enterprise ColdFusion Logging Library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ColdBox Platform Wiki - LogBox: The enterprise ColdFusion logging library  All the new ColdBox, CacheBox, WireBox, TestBox and LogBox docs can be found here: https://www.gitbook.com/@ortus coldbox.org >> About Downloads Code ForgeBox Support Training Media API Blog Jobs Docs Home Quick Index Introduction ColdBox Overview Directory Layout & Conventions Request Life Cycles Application Bootstrapper Configuring Application Configuration Using configuration settings Fun Logging with LogBox Models ColdBox Models Dependency Injection via WireBox Active Entity Built-in ORM Services Hibernate Criteria Builder ORM Event Handling Views Layouts and Rendering in ColdBox Controllers Event Handlers ColdBox SES URL Mappings Object and Form Validation Request Context Request Context Extending the Request Context Tumble Down The Rabbit Hole... Handling Exceptions Flash RAM & Webflows Ajax Integration Powering Flex/Air/SOAP/REST Apps Caching with CacheBox Localization & i18n ColdBox Security Aspect Oriented Programming ColdBox Recipes Extending ColdBox ColdBox Modules & Architecture ColdBox Plugins Core Plugins Browser ColdBox Interceptors Core Interceptors Browser Testing TestBox Testing Framework TestBox BDD Primer TestBox xUnit Primer Testing ColdBox Applications Mocking-Stubbing with MockBox Tools, IDE Extras ColdBox Platform Utilities IDE Syntax Dictionaries Standalone Projects ColdBox Cheatsheet API Docs Directory SideBar My Dashboard Help Rss Feeds Category Listing Page Directory Namespace Directory User Login Username Password Submitting... Forgot Password?         LogBox last edited bybdw429s on 28-Mar-2014 History  << Back to Dashboard Contents LogBox: The Enterprise ColdFusion Logging Library Introduction LogBox RefCard Some Resources Need for Logging What can LogBox do? How does LogBox work? LogBox Appender Logger Logger Category Inheritance Severity Levels Dynamic Appenders Layout Configuring LogBox Programmatic Configuration LogBox DSL Adding Appenders Configuring the Root Logger Adding Categories To Specific Logging Levels Adding Categories Granularly XML Configuration XML Schema Using LogBox Using a Logger object Instance Members Can Methods For Performance $toString() and ExtraInfo Argument Creating Custom Appenders Helper Methods Instance Members Dealing with Custom Layouts Registering Appenders at Runtime Creating a Custom Layout Instance Members Appender Properties AsyncFileAppender & FileAppender AsyncRollingFileAppender & RollingFileAppender CFAppender ColdBoxTracerAppender DBAppender & AsyncDBAppender EmailAppender ScopeAppender SocketAppender TracerAppender LogBox in a ColdBox Application Configuration Within ColdBox Programmatic XML Benefits of using LogBox in a ColdBox application Where is LogBox stored in a ColdBox app? LogBox from the ColdBox Factory LogBox from the ColdBox Proxy Can I still use the Logger plugin? The LogBox autowiring DSL Summary LogBox: The Enterprise ColdFusion Logging Library Covers up to version 1.7.0 Introduction LogBox is an enterprise ColdFusion logging library designed to give you flexibility, simplicity and power when logging or tracing is needed in your applications. LogBox is part of the ColdBox Platform 3.0 suite of services and libraries and allows you to easily build upon it's logging framework in order to meet any logging or reporting needs your applications has. LogBox surpasses ColdFusion's very basic cflog tag. LogBox allows you to create multiple destinations for your loggings and even configure destinations or change them at runtime. Almost every application needs logging and/or tracing capabilities and we have developed LogBox to satisfy these needs. Although you should take care not to over-use logging as it can slow down an application, LogBox offers you the capabilities to filter out or cancel logging noise a-la-carte. LogBox was inspired by the original logging capabilities in ColdBox and in the Log4j project. LogBox RefCard Our LogBox RefCard will get you up and running in no time. Some Resources LogBox Release Notes http://logging.apache.org/log4j/ Need for Logging Most applications require logging and tracing capabilities. One can usually use ColdFusion's standard cflog or cftrace tags but you can reach a limitation very fast. What if you needed to log only certain severity levels for a particular CFC or piece of code? What if you needed that severity to advise you via SMS or Twitter (yes Twitter)? You would have to build all of these advising and logging capabilities yourself. Also, inserting log statements is tedious, time consuming and frequently pollutes your real code. What if you wanted to turn it off easily or reconfigure your logging levels? You can understand the pain and complexity required to properly deal with these situations. These reasons (and more) are why the ColdBox team has invest in LogBox. What can LogBox do? LogBox can handle the inserting of logging and/or tracing statements in your application with a simple to use API while providing you the ability to manage logging behavior outside of your application code. You can configure LogBox via the following means: A programmatic configuration file (cfc). An XML configuration file. LogBox categorizes your logging and/or tracing statements according to user-defined categories that can be configured at runtime or pre-runtime. All of these categorizations can have their own logging level ranges (such as debug or info) and even their own destination points or what we refer to as LogBox Appenders (such as Console). LogBox Appenders are the destination points you configure for your logging and/or tracing statements. LogBox also offers a basic extensible API so you can build and extend upon the Appender framework according to your unique logging or tracing needs. This gives you complete control and flexibility of how to expand LogBox without reinventing the wheel. Some appenders included in LogBox can log to the following destinations: File, Database, Sockets, Email, ColdFusion logging, System Console, and much more. LogBox facilitates the creation of your very own customized message formats via Layouts. You can create a Layout component that can be configured in to ANY LogBox appender so it can spit out your very own customized messages. LogBox can be instantiated as many times as you want and used as many times as you like in a single application. There are no restrictions upon its usage. LogBox allows for category inheritance according to component and package conventions. How does LogBox work? LogBox has four main components: LogBox, Logger, Appenders and Layouts. These four (4) components work in unison to deliver the logging and tracing of messages and to control how they are logged. You will mostly interact with the Logger component as it will send your statements to the Appenders you have configured. Users can extend LogBox and build their own appenders and layouts. LogBox LogBox is the core framework you need to instantiate in order to work with logging in your application. You have to instantiate it with a LogBoxConfig object that will hold your logging configurations. To configure the library you can either do it programmatically or via an xml file, the choice is yours. After the library is instantiated and configured you can ask from it a named Logger object so you can start logging or tracing messages. You have two ways to use LogBox: Standalone Framework Within a ColdBox application If you have downloaded LogBox as a standalone framework, then the initial namespace for the core is logbox.system. This allows you to use logbox as a standalone framework that is integrated into your proprietary application. The ColdBox Framework already has an instance of LogBox created for you in every application and it is stored in the main application controller: controller.getLogBox(). The namespace within the ColdBox framework is coldbox.system. Note: Most of the examples shown in this documentation refer the default framework namespace of coldbox.system. However, if you are using LogBox as a standalone framework, then the namespace to use is logbox.system. If you are NOT using the ColdBox Framework, please, take a moment to confirm you are using the correct namespace.  /** Creating LogBox from within a ColdBox Application **/ // Create the config object with an XML configuration file config = createObject(""component"",""coldbox.system.logging.config.LogBoxConfig"").init(expandPath('logbox.xml')); // Create logbox instance logBox = createObject(""component"",""coldbox.system.logging.LogBox"").init(config);  /** Creating LogBox when used as a stand-alone logging framework **/ // Create the config object with an XML file config = createObject(""component"",""logbox.system.logging.config.LogBoxConfig"").init(expandPath('logbox.xml')); // Create logbox logBox = createObject(""component"",""logbox.system.logging.LogBox"").init(config);  Appender An appender is an object that LogBox uses to log statements to a destination repository. All appenders act as destinations that can include: databases, JMS, files, consoles, sockets, etc... The appender has the responsibility of taking the logged message and persisting the message or sending the message to an external service. LogBox comes bundled with the following appenders that can be found in the package coldbox.system.logging.appenders: Appender Description AsyncFileAppender An Asynchronous file appender. AsyncDBAppender An Asynchronous database appender. AsyncRollingFileAppender An Asynchronous file appender that can do file rotation and archiving. CFAppender Will deliver messages to the coldfusion logs. ColdBoxTracerAppender Will deliver messages to the ColdBox Tracer Panel in the ColdBox debugger. ConsoleAppender Will deliver messages to the server's console via system.out DBAppender Will deliver messages to a database table. It can auto create the table for you. EmailAppender Will deliver messages to any email address. FileAppender Will deliver messages a file. RollingFileAppender A file appender that can do file rotation and archiving. ScopeAppender Will deliver messages to any ColdFusion variable scope. SocketAppender Will connect to any server socket and deliver messages. TracerAppender Will deliver messages to the ColdFusion tag cftrace. You can configure LogBox to use one or all of these appenders at any point in time. You can even register as many instances of any appender by defining a unique name for each. Here are examples of how one can configure appenders programmatically or via the simple configuration CFC: Programmatic Approach  //Adding appenders props = {filePath=expandPath(""/coldbox/testing/cases/logging/tmp""),autoExpand=false,fileMaxArchives=1,fileMaxSize=3000}; config.appender(name='MyAsyncFile',class=""coldbox.system.logging.appenders.AsyncRollingFileAppender"",properties=props);  //socket props = {host=""localhost"",timeout=""3"",port=""444"",persistConnection=false}; config.appender(name='SocketAppender',class=""coldbox.system.logging.appenders.SocketAppender"",properties=props);  Configuration CFC approach  function configure(){ 	 	logBox = { 		// Register Appenders 		appenders = { 			MyAsycFile = { 				class=""coldbox.system.logging.appenders.AsyncRollingFileAppender"", 				properties={ 					filePath=expandPath(""/coldbox/testing/cases/logging/tmp""),autoExpand=false,fileMaxArchives=1,fileMaxSize=3000 				} 			}, 			 			SocketAppender = { 				class=""coldbox.system.logging.appenders.SocketAppender"", 				properties = { 					host=""localhost"",timeout=""3"",port=""444"",persistConnection=false 				} 			} 		 		} 	}; }  Another feature of a LogBox appender is that you can extend them or create new ones simply by leveraging the LogBox API. To customize LogBox appenders for your own unique needs you would simply extend the core appender class: coldbox.system.logging.AbstractAppender and implementing the init() and logMessage() methods. Extending LogBox will be reviewed in greater detail over the next few sections. Logger The logger component is a named entity that you use to log or trace messages with. The logger is responsible for deciding if the severity level of the message is adequate for redirecting to a destination via any of its attached appenders. If the logger component deems the message qualifies to be redirected the logger will route the message(s) to the applicable appender(s) for delivery. There are two types of loggers in LogBox: Root Logger - The default configured logger (mandatory) Category or Named Loggers - A logger that is created with a specific category name (Usually a class path). You can define as many as you want. LogBox requires you to configure a Root Logger. A root logger is the default logger that all named category loggers inherit from. This means that if you request a logger by a name you have NOT configured before hand, then you will be interacting with the root logger. Configuring the root logger is easy and requires only two sets of instruction: A range of severity levels that the root logger is allowed to respond to; A list of appenders. Please note, it is a requirement that you configure the root logger.  // Configuring some appenders and the root logger config.appender(name=""Console"",class=""coldbox.system.logging.appenders.ConsoleAppender""); // root logger config.root(levelMin=config.logLevels.FATAL, levelMax=config.logLevels.INFO, appenders=""Console"");  // Or using simple CFC logBox = { 	appenders = { 		Console = { class=""coldbox.system.logging.appenders.ConsoleAppender"" } 	}, 	root = {levelMin=""FATAL"", levelMax=""INFO"", appenders=""*""} }  //Asking logbox for the root logger Logger = logBox.getRootLogger();  Loggers are named entities. The name you provide for a logger is refereed to as the logger's category name. This category can be the name of the component or class you are logging messages from or it can be any unique name you desire to distinguish the message being logged. Important: It is best practice to name your categories with the exact path notation of the component. Ex: coldbox.system.plugins.BeanFactory. For simplicity, you can just pass in the object reference and LogBox will figure out the name for you. Example: logger = logBox.getLogger(this); Let's say that I want to log messages in the SES interceptor whose class is coldbox.system.interceptors.SES. Then I would do the following to request a logger for usage in my ses interceptor:  // A possible approach to defining a category name. // Declaring a logger while explicitly defining the category name. logger = logBox.getLogger('coldbox.system.interceptors.SES'); //log an info message logger.info(""Customer deposited fifty billion dollars into your account."");  However, you can simplify the code above by passing the instance of where you are logging from. LogBox will then use the object's fully qualified name, via inspection, to define the logger's category name. This approach is simpler and is our preferred approach. Passing this will support refactorings and object name changes without burdening your application. Important: To stay true to our best practice recommendation of passing this to the getLogger() method your CFC must have a name attribute within the component declaration. Example:  component name=""exampleCFC"" { 	... much removed ... }   // The prefered approach to defining a category name. // Declaring a logger while allowing LogBox to implicitly define the category name via introspection. logger = logBox.getLogger(this);  //log an info message logger.info(""Customer deposited fifty billion dollars into your account. Again."");  The above two lines of code illustrate the simplicity of getting a named logger from LogBox. Two important question are: What severity messages will the logger log? and What is the destination (or destinations) of these messages? In the above example we did not explicitly configure an answer to these two questions while we created a logger for coldbox.system.interceptors.SES, so, LogBox will use the root logger. Thus it will use the root logger's severity level range and configured appenders. So if we wanted to define a category we can define it in various ways via programmatic approach or XML. Let us now look at the programmatic approach:  //register a list of categories that respond to FATAL messages  //only using the root logger's appenders config.fatal(""coldbox.system.controller"",""mycfc"",""com.model.mycfc"");  // log for errors only using the root logger's appenders config.error(""mycfc"",""com.model.mycfc"");  //log for info only using the root logger's appenders config.info(""org.model.component"");  //log all email service messages to the MyLogFileAppender and the Console. config.category(name=""org.model.EmailService"",appenders=""MyLogFileAppender,Console"");  This is the same but using the simplified Data CFC Approach:  logBox = { 	//register a list of categories that respond to FATAL messages  	fatal = [""coldbox.system.controller"",""mycfc"",""com.model.mycfc""],	 	// log for errors only using the root logger's appenders 	error = [""mycfc"",""com.model.mycfc""],	 	//log for info only using the root logger's appenders 	info = [""org.model.component""], 	 	//Register categories granularly: 	categories = { 		""com.model.myservice"" = {levelMax=""ERROR"",appenders=""MyTwit"" }, 		""org.model.EmailService"" = {appenders=""MyLogFileAppender,Console""} 	} };  You have the option to create granular categories where you can choose a level range and/or appenders, or easily tag a category to listen to only one specific type of message using the severity methods in the config object. The methods available are the same as the Severity column in the severity levels chart. Logger Category Inheritance We have a convention for our category names where each category name uses dot-notation according to the components path. Using a class-path convention for our category names allows one to pseudo-inherit for logging levels and appenders! The following example should help clarify this concept. The overall premise is that when you request a logger with a category name LogBox will search for it's configuration. If LogBox does not find a configuration for the category name it will try to locate its closest ancestor for logging levels and appenders. If LogBox cannot find an ancestor the message will be logged using the root logger information. For example, let's say we define some categories like this:  // Configured Appenders: FileAppender, ConsoleAppender config.category(name=""coldbox.system"",levelMin=config.logLevels.INFO,appenders=""console""); config.error(""coldbox.system.plugins"");  Then, let's say we request the following logger objects:  logger = logBox.getLogger(""coldbox.system.plugins.BeanFactory""); logger.info(""hello info""); logger.error(""wow and error occurred"");  logger = logBox.getLogger(""coldbox.system.interceptors.SES""); logger.info(""hello info""); logger.debug(""a cool debug message"");  Note: All example code snippets are using a getLogger('categoryname') call instead of our preferred approach of getLogger(this) because we want to showcase which category we are talking about. Please take this into consideration. Category Configured Levels Assigned Levels Appenders root FATAL-DEBUG FATAL-DEBUG console,file coldbox.system INFO-DEBUG INFO-DEBUG console coldbox.system.plugins ERROR ERROR * coldbox.system.interceptors.SES NONE INFO-DEBUG from coldbox.system console from coldbox.system coldbox.system.plugins.BeanFactory NONE ERROR from coldbox.system.plugins * Since we requested the category: coldbox.system.plugins.BeanFactory, LogBox tries to locate it, but it has not been defined, so it takes off the last item in the category name. Now it will search for a category of: coldbox.system.plugins via pseudo-inheritance. However, now coldbox.system.plugins has been found and it has been configured to only listen to error messages. Therefore, the coldbox.system.plugins.BeanFactory logger can ONLY log error messages according to it's inherited category. So the info() message will be ignored! The second logger is called coldbox.system.interceptors.SES, LogBox tries to match a category but fails, so it now searches for a logger called coldbox.system.interceptors. It still cannot find it so it continues up the package chain and finds the coldbox.system logger which has been set with a minimum of DEBUG level and ONLY the console appender. So the only message that gets logged is the logger.debug() message and it will be sent to the console appender. These examples should give you insight into category inheritance and the power they provide. You can easily turn toggle logging for entire packages with a single category definition. However, this is great only if you follow the dot notation conventions. Below is a sample generic chart sample: Category Configured Levels Assigned Levels root FATAL-DEBUG FATAL-DEBUG x NONE FATAL-DEBUG from root x.y INFO INFO x.y.z NONE INFO from x.y Severity Levels Each logger will be configured with an optional severity level range: LevelMin and LevelMax. These severities are integers from -1 to 4, each representing a severity: Severity Integer Level OFF -1 FATAL 0 (Default LevelMin) ERROR 1 WARN 2 INFO 3 DEBUG 4 (Default LevelMax) As you can see from the chart above the default minimum level is FATAL (all messages are ignored except fatal, uncaught errors) and the highest level is DEBUG (debug listens and logs all messages). When you define a root logger or category logger you should define them using a severity level from the table above. If you do not define a severity level a default level will be used. Once you have a logger instantiated you can dynamically change the logging levels by interacting with the setLevelMin() and setLevelMax() methods of the logger you have instantiated.  //change min level of logging to warn only logger = logBox.getRootLogger(); logger.setLevelMin(logger.logLevels.WARN);  Each logger object has a public property called logLevels that maps to the component: coldbox.system.loggging.LogLevels which is used as a static lookup of severity levels. You may use the alias, or, the numeric level; however, it is best practice to use a level alias (such as DEBUG or INFO). Dynamic Appenders Each logger object has several methods that you can use in order to interact with the logger's appenders. You can add, remove, clear or list the appenders on a specific logger instance. Below are the methods you can use in the logger class to interact with appenders: Method Return Type Description hasAppenders() Boolean Checks if the logger has any appenders attached to it getAppenders() Struct Returns the map of registered appenders getAppender(name) Appender Return a named appender if it is registered in the logger appenderExists(name) Boolean Checks if a named appender exists in the logger addAppender(Appender) void Register an appender with the logger at runtime removeAppender(name) Boolean Will un-register an appender from this logger removeAllAppenders() void Will try to un-register all appenders from this logger So you can easily add/remove/check the appenders on any logger at any time.   //Add your own appender at runtime jms = createObject(""component"",""com.appender.JMSAppender"").init(""JMSAppender"",properties); logger.addAppender(jms);  //log a message to all appenders and to my jms appender: logger.fatal(""I FAILED MAN!"");  //remove it logger.removeAppender(""JMSAppender"");  Layout The layout component defines the format of the message to store in an appender repository. Be default, each appender already has a pre-defined message format. However, if you do not like the format of the message you can easily change it by creating your own layout component and registering it with the appender. You can do this in the configuration object when you add appenders:  //add a FileAppender with my own formatting props = {filePath='/logs',fileName='Test'}; config.appender(name='Fileapp', 			    class=""coldbox.system.logging.appenders.FileAppender"", 				properties=props, 			    layout=""model.logging.MyFileLayout"");  So to create your very own layout object, you just need to extend the LogBox abstract layout object: coldbox.system.logging.Layout. Configuring LogBox We already have a taste of how to configure LogBox, but let's go into details. There are three approaches to configuring LogBox: two programmatic approaches or an XML approach. We definitely lean towards our programmatic approach as it provides much more flexibility and less verbosity. So let's cover it first. Programmatic Configuration No matter what configuration you decide to use, you will always have to instantiate LogBox with a LogBoxConfig object: coldbox.system.logging.config.LogBoxConfig. However you have the option of either talking directly to this CFC or creating a more portable configuration. This portable configuration we denote as a simple data CFC that contains the LogBox configuration data using what we call our LogBox DSL (Domain Specific Language). The cool thing about this LogBox DSL is that it is exactly the same whether you are using LogBox in ColdBox applications or in any other framework or non-framework ColdFusion application. So you can configure LogBox by: Creating a portabla data CFC using the LogBox DSL or Creating the LogBoxConfig object and interacting with its methods LogBox DSL In order to create a simple data CFC, just create a CFC with one required method on it called configure where you will define the logging configuration data:  ** * A LogBox configuration data object */ component{  	function configure(){ 		logBox = { 		 		}; 	}	 }  Once you have this shell, you will create a logBox variable in the variables scope that must be a structure with the following keys: Key Description appenders A structure where you will define appenders root A structure where you will configure the root logger categories A structure where you can define granular categories (OPTIONAL) DEBUG An array that will hold all the category names to place under the DEBUG logging level (OPTIONAL) INFO An array that will hold all the category names to place under the INFO logging level (OPTIONAL) WARN An array that will hold all the category names to place under the WARN logging level (OPTIONAL) ERROR An array that will hold all the category names to place under the ERROR logging level (OPTIONAL) FATAL An array that will hold all the category names to place under the FATAL logging level (OPTIONAL) OFF An array that will hold all the category names to not log at all (OPTIONAL) So to define an appender you must define a key value which is the internal name of the appender with the following keys: class : The class path of the appender layout : The layout class path of the layout object to use (optional) properties : The structure of name-value pairs to configure this appender with (optional) levelMin : The numerical or English word of the minimal logging level (optional, defaults to 0) levelMax : The numerical or English word of the maximum logging level (optional, defaults to 4) To define the root logger you can use the following keys: levelMin : The numerical or English word of the minimal logging level (optional, defaults to 0) levelMax : The numerical or English word of the maximum logging level (optional, defaults to 4) appenders : A string list of the appenders to use for logging To define categories you can use the following keys in the categories structure and the key of the structure is the name of the category: levelMin : The numerical or English word of the minimal logging level (optional, defaults to 0) levelMax : The numerical or English word of the maximum logging level (optional, defaults to 4) appenders : A string list of the appenders to use for logging (optional, defaults to *) As you might notice the name of the keys on all the structures match 100% to the programmatic methods you can also use to configure logBox. So when in doubt, refer back to the argument names.  logBox = { 	// Appenders 	appenders = { 		appenderName = { 			class=""class.to.appender"",  			layout=""class.to.layout"", 			levelMin=0, 			levelMax=4, 			properties={ 				name  = value, 				prop2 = value 2 			} 	}, 	// Root Logger 	root = {levelMin=""FATAL"", levelMax=""DEBUG"", appenders=""*""}, 	// Granualr Categories 	categories = { 		""coldbox.system"" = { levelMin=""FATAL"", levelMax=""INFO"", appenders=""*""}, 		""model.security"" = { levelMax=""DEBUG"", appenders=""console""} 	} 	// Implicit categories 	debug  = [""coldbox.system.interceptors""], 	info   = [""model.class"", ""model2.class2""], 	warn   = [""model.class"", ""model2.class2""], 	error  = [""model.class"", ""model2.class2""], 	fatal  = [""model.class"", ""model2.class2""], 	off    = [""model.class"", ""model2.class2""] };  Once you have defined the configuration data in this object you can now use the same LogBox Config object to either instantiate it for you or you can pass a reference of it by using the init() method of the LogBoxConfig object:  init([XMLConfig,CFCConfig,CFCConfigPath])  XMLConfig : The absolute path of the logbox XML configuration file CFCConfig : The object instance that has the logbox configuration data CFCConfigPath : The instantiation path of the object that has the logbox configuration data  // Using config path config = createObject(""component"",""coldbox.system.logging.config.LogBoxConfig"").init(CFCConfigPath""my.path.LogBoxConfig""); logBox = createObject(""component"",""coldbox.system.logging.LogBox"").init(config);  //Using config object data   = createObject(""component"",""my.data.CFC""); config = createObject(""component"",""coldbox.system.logging.config.LogBoxConfig"").init(data); logBox = createObject(""component"",""coldbox.system.logging.LogBox"").init(config);  That's it! Using this DSL approach, your configurations are much more portable now and can even be shared in ANY framework, ColdBox or ColdFusion application. So now let's explore how to bypass this data CFC and use the LogBoxConfig object directly. It is important to understand these methods as they are called for you when you define your LogBox DSL data. Adding Appenders The first thing you need to do in your config object is add appenders. Each appender is added via the appender() method. public void appender(string name, string class, [struct properties], string layout=) Parameters: name - A unique name for the appender to register. Only unique names can be registered per instance. class - The appender's class to register. We will create, init it and register it for you. properties - The structure of properties to configure this appender with. layout - The layout class path to use in this appender for custom message rendering. levelMin : The numerical or English word of the minimal logging level (optional, defaults to 0) levelMax : The numerical or English word of the maximum logging level (optional, defaults to 4)  config.appender(name=""CFConsole"",class=""coldbox.system.logging.appenders.ConsoleAppender""); config.appender(name=""MyCF"",class=""coldbox.system.logging.appenders.CFAppender"");  props = {host=""localhost"",timeout=""3"",port=""444"",persistConnection=false}; config.appender(name=""SocketBaby"",class=""coldbox.system.logging.appenders.SocketAppender"",properties=props);  props = {filePath='/logs',fileName='Test'}; config.appender(name='Fileapp', 			    class=""coldbox.system.logging.appenders.FileAppender"", 				properties=props, 			    layout=""model.logging.MyFileLayout"");  Configuring the Root Logger This is also mandatory if you will be using LogBox, you must add a root logger configuration. This is very easy and few arguments. public void root([numeric levelMin='-1'], [numeric levelMax='4'], string appenders) Parameters: levelMin - The default log level for the root logger, by default it is 0. Optional. levelMax - The default log level for the root logger, by default it is 4. Optional. appenders - A list of appenders to configure the root logger with. Use * to add all registered appenders  config.root(appenders=""*""); config.root(levelMax=config.logLevels.WARN,appenders=""console,files""); config.root(levelMin=config.logLevels.INFO,levelMax=config.logLevels.DEBUG,appenders=""*"");  Adding Categories To Specific Logging Levels The methods shown below are used to add categories to specific severity levels only. Each method can receive 1 to* category arguments. public void DEBUG() public void INFO() public void WARN() public void ERROR() public void FATAL() public void OFF()  config.debug(""com.model.myclass"", ""coldbox.system.controller""); config.info(""com.model.otherclass"", ""coldbox.system.whatever""); config.fatal(""com.model.otherclass"", ""coldbox.system.whatever""); config.error(""com.model.otherclass"", ""coldbox.system.whatever""); config.OFF(""com.model.otherclass"", ""coldbox.system.whatever"");  Adding Categories Granularly You can also add categories with very granular information using the category() method. This method will allow you to add a category definition with a range of severity levels and even a list of which appenders to respond to. public void category(string name, [numeric levelMin='0'], [numeric levelMax='4'], [string appenders='*']) Parameters: name - A unique name for the appender to register. Only unique names can be registered per instance. levelMin - The default min log level for this category. Defaults to the lowest level 0 or FATAL levelMax - The max default log level for this category. If not passed it defaults to the highest level possible appenders - A list of appender names to configure this category with else it will use all the appenders in the root logger. You can also use * to add all registered apenders.  //log all email service messages to the MyLogFileAppender and the Console. config.category(name=""org.model.EmailService"",appenders=""MyLogFileAppender,Console"");  XML Configuration You can also configure LogBox with an XML file. All you need to do is create a LogBox xml file and instantiate the config object with the location of such config file:  config = createObject(""component"",""coldbox.system.logging.config.LogBoxConfig"").init(expandPath(""/config/logbox.xml""));  However, if you have your XML in a variable already, maybe you read it from a database or other location, you can still use it by calling the config object's parseAndLoad() method.  //Get the xml document from somewhere. xmlDoc = dbService().getLogBoxConfig(); //create the log box config object config = createObject(""component"",""coldbox.system.logging.config.LogBoxConfig"").init(); config.parseAndLoad(xmlDoc);  Sample logbox.xml file:  <?xml version=""1.0"" encoding=""UTF-8""?> <LogBox xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  	xsi:noNamespaceSchemaLocation=""http://www.coldbox.org/schema/LogBoxConfig_1.4.xsd"">  	<-- <Appender Definitions --> 	<Appender name=""myconsole"" class=""coldbox.system.logging.appenders.ConsoleAppender"" /> 	<Appender name=""MyCF"" class=""coldbox.system.logging.appenders.CFAppender"" layout=""model.myLayout""> 		<Property name=""fileName"">MyAppLogName</Property> 	</Appender> 	<Appender name=""FileAppender"" class=""coldbox.system.logging.appenders.AsyncRollingFileAppender"" levelMax=""DEBUG""> 		<Property name=""filePath"">/coldbox/testing/logging/tmp</property> 		<Property name=""fileMaxSize"">3</Property> 		<Property name=""fileMaxArchives"">2</Property>		 	</Appender> 	 	<-- <Root Logger --> 		<-- <Root All Appenders  		<Root levelMin=""0"" levelMax=""4"" appenders=""*""> 	--> 	<Root levelMin=""0"" levelMax=""4""> 		<Appender-ref ref=""myconsole"" /> 		<Appender-ref ref=""MyCF"" /> 		<Appender-ref ref=""FileAppender"" /> 	</Root > 	 	<-- <Very advanced category --> 	<Category name=""MySES"" levelMin=""3"" levelMax=""4""> 		<Appender-ref ref=""myconsole"" /> 	</Category>	 	 	<Category name=""com.model.services"" levelMax=""3"" appenders=""MyCF"" /> 	<Category name=""com.model.dao"" levelMax=""2"" appenders=""*"" /> </LogBox>  As you can see, you need to create a root element called LogBox with the following child elements: <Appender> : an appender definition. Can be 1 or more elements. @name : The name of the appender (required) @class : The class of the appender (required) @layout : The layout class to use for rendering the messages (optional) @levelMin : The default minimum log level. (optional) @levelMax : The default maximum log level. (optional) <Root> : The root logger element. Can only be 1 defined. @levelMin : The default minimum log level. (optional) @levelMax : The default maximum log level. (optional) @appenders : An optional list of appenders for the root logger or* for all appenders. (optional) <Appender-ref> : If you do not like to use a list for the appenders, you can use this element to add appenders to the root logger. You can have 0 or more of these elements defined. @ref : The name of the appender to reference. <Category> : A category definition element. You can have 0 or more of these defined. @name : The name of the category @levelMin : The default minimum log level. (optional) @levelMax : The default maximum log level. (optional) @appenders : An optional list of appenders for this category or* for all appenders. (optional) <Appender-ref> : If you do not like to use a list for the appenders, you can use this element to add appenders to the category. You can have 0 or more of these elements defined. @ref : The name of the appender to reference. Note: All the levelMin and levelMax attributes can either be the numeric representation of the severity or the fully qualified name you can see in the severity table. XML Schema We have also included a schema fileL coldbox/logging/config/LogBoxConfig.xsd that you can use to validate your XML and use cool tag insight and introspection. You can add the following header to your XML declaration file to enable it:  <?xml version=""1.0"" encoding=""UTF-8""?> <LogBox xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  	xsi:noNamespaceSchemaLocation=""http://www.coldbox.org/schema/LogBoxConfig_1.4.xsd"">  </LogBox>  If your IDE supports XML introspection, this will do the trick. Using LogBox Once you have created and configured the LogBox library, you can interact with it in order to get logger objects. The main methods you will use to interact with LogBox are the following, but I recommend you look at the CFC api (http://www.coldbox.org/api) in order to get a listing of all available methods. LogBoxConfig getConfig() : Get the config object registered Logger getLogger(any category) : Get a named logger object using a category string or the object you will log from Logger getRootLogger() : Get a reference to the root logger string getVersion() : Get the current version of LogBox string getCurrentAppenders() : Get a list of currently registered appenders string getCurrentLoggers() : Get a list of currently instantiated loggers void configure(LogBoxConfig config) : Dynamically re-configure the LogBox library The two most important methods are getRootLogger() & getLogger(), which you will use to get the root or named logger objects. Important: When you ask for a named category logger and LogBox cannot find its definition, it will create a logger that will inherit its logging levels and appenders from the root logger. Using a Logger object Once you retrieve a logger object from LogBox, you are ready to start sending messages. We already covered how to dynamically add/remove/list/check appenders from a logger, so let's look at the other methods we have available: Utility Methods boolean canLog(numeric level) : Checks if this logger can log a certain type of severity, there is also a can{severity}() method for each severity level. boolean can{severity}() : Checks if this logger can log a certain type of severity string getCategory() : Get this logger's category name void setCategory(category) : Set the category name Logger getRootLogger() : Get the root Logger numeric getLevelMin() : Get the minimum severity level void setLevelMin(numeric level) : Set the minimum severity level numeric getLevelMax() : Get the maximum severity level void setLevelMax(numeric level) : Set the maximum severity level Logging Methods fatal(string message, [any extraInfo=' ']) : Log a fatal message error(string message, [any extraInfo=' ']) : Log an error message warn(string message, [any extraInfo=' ']) : Log a warning message info(string message, [any extraInfo=' ']) : Log an information message debug(string message, [any extraInfo=' ']) : Log a debug message logMessage(string message, numeric severity, [any extraInfo=' ']) : Log any kind of message As you can probably tell, all logging methods take in a message string an a second argument called extraInfo. This extraInfo argument can be anything from a string, a structure, a query or whatever. This way you can send in a complex structure that the appenders will serialize into message form or log into its appropriate channel. Thus, extraInfo can be very handy when you are building your own custom appenders.  // setting some messages myLogger = logBox.getLogger(this); //""com.model.dao""  myLogger.info(""I just created my first logger"");  try{ 	data = dao.getDBData(); } catch(Any e){ 	myLogger.error(""Something really died on my dbdata method: #e.message# #e.detail#"",e.tagContext); }  I hope that by now you understand the basics of loggers and how easy it is to use them. Instance Members Every logger has access to the following public variables: this.logLevel : A reference to the coldbox.system.logging.LogLevels class Can Methods For Performance We recommend using the available can{severity}() methods to determine if we can log at a specific log level before actually writing the logging method line. This is done as best practice in order to avoid processing of messages that will never be logged anyways. So let's look at a very simple example of what NOT to do:  log.debug(""This is my log message, some #dynamic# date is here"", dataCFC);  This will call the logger's debug() method, execute the lines of code and then the logger determines if it can be logged or not. This is ok, but we all love performance and best practice, so we encourage you to do the following:  if( log.canDebug() ){ 	log.debug(""This is my log message, some #dynamic# date is here"", dataCFC); }  This way, the logger determines if it can send debug log messages, and only IF IT CAN, it does so. This is much more faster and cleaner, but you will type more, sorry! $toString() and ExtraInfo Argument When using any of the logging methods like info(),debug(),warn(), etc, they all take two arguments: 1) The message to log and 2) An extraInfo argument which can be anything you like. This extra info argument can be a simple value, a CFC, a complex object and pretty much anything you like. The appenders get this extra info argument and they can process it into their appropriate destinations by serializing its value to simple form. This is done by using the following algorithm: If it is a simple value, then just use it If it is an object then check if the object has a method called $toString() If the method exists, then call $toString() and use its return value If it is an object with NO $toString() then marshall its representation in XML format If it is a complex variable like a struct, query, array, etc, then marshall it to JSON format As you can see from the algorithm above, you can use the extra info argument to your benefit to save serialized representations of data to the appenders and then retrieve or re-inflate them later. The $toString() convention is great because you have complete control on how a CFC will serialize to its string representation. Let's see an example on a simple CFC:  component{  	function $toString(){ 		// return my representation as a comma list of values of my properties 		return ""#getName()#,#getAge()#,#getEmail()#""; 	} }  So when this object is sent to a logger's method, it will detect it is an object and the $toString() function exists and call it for serialization.  user = userService.getUser(rc.id);  // need to log it. if( log.canDebug() ){ 	log.debug(""User just got logged in right now!"", user); }  Creating Custom Appenders In order to create your own appenders, you will have to create a cfc that extends coldbox.system.logging.AbstractAppender and implement the following methods: init() : Your constructor logMessage() : The method that is called when a message is received onRegistration() : An interceptor that fires when the appender gets created and initialized. It can be used for preparing the appender for operation. onUnRegistration() : An interceptor that fires when the appender is removed from a logger. The signature of the init method is the following:  <---  Init ---> <cffunction name=""init"" access=""public"" returntype=""AbstractAppender"" hint=""Constructor called by a Concrete Appender"" output=""false"" > 	<---  ************************************************************* ---> 	<cfargument name=""name"" 		type=""string""  required=""true"" hint=""The unique name for this appender.""/> 	<cfargument name=""properties"" 	type=""struct""  required=""false"" default=""#structnew()#"" hint=""A map of configuration properties for the appender""/> 	<cfargument name=""layout"" 		type=""string""  required=""false"" default="""" hint=""The layout class to use in this appender for custom message rendering.""/> 	<cfargument name=""levelMin""  	type=""numeric"" required=""false"" default=""0"" hint=""The default log level for this appender, by default it is 0. Optional. ex: LogBox.logLevels.WARN""/> 	<cfargument name=""levelMax""  	type=""numeric"" required=""false"" default=""4"" hint=""The default log level for this appender, by default it is 5. Optional. ex: LogBox.logLevels.WARN""/> 	<---  ************************************************************* ---> 	 </cffunction>  As you can see each appender receives a name, a structure of properties, a layout class, an optional levelMin and levelMax severity levels. The properties and layout are both optional, but you must call the super.init() method in order to have full ok operation on the appender. You can then do your own constructor as you see fit. Here is an example:  <---  Constructor ---> <cffunction name=""init"" access=""public"" returntype=""FileAppender"" hint=""Constructor"" output=""false""> 	<---************************************************************** ---> 	<cfargument name=""name"" 		type=""string""  required=""true"" hint=""The unique name for this appender.""/> 	<cfargument name=""properties"" 	type=""struct""  required=""false"" default=""#structnew()#"" hint=""A map of configuration properties for the appender""/> 	<cfargument name=""layout"" 	type=""string""  required=""true""  default="""" hint=""The layout class to use in this appender for custom message rendering.""/> 	<cfargument name=""levelMin""  	type=""numeric"" required=""false"" default=""0"" hint=""The default log level for this appender, by default it is 0. Optional. ex: LogBox.logLevels.WARN""/> 	<cfargument name=""levelMax""  	type=""numeric"" required=""false"" default=""4"" hint=""The default log level for this appender, by default it is 5. Optional. ex: LogBox.logLevels.WARN""/>         <---************************************************************** ---> 	<cfscript> 		super.init(argumentCollection=arguments); 		 		// Setup Properties 		if( NOT propertyExists(""filepath"") ){ 			$throw(message=""Filepath property not defined"",type=""FileAppender.PropertyNotFound""); 		} 		if( NOT propertyExists(""autoExpand"") ){ 			setProperty(""autoExpand"",true); 		} 		if( NOT propertyExists(""filename"") ){ 			setProperty(""filename"",getName()); 		} 		if( NOT propertyExists(""fileEncoding"") ){ 			setProperty(""fileEncoding"",""UTF-8""); 		} 		 		// Setup the log file full path 		instance.logFullpath = getProperty(""filePath""); 		// Clean ending slash 		if( right(instance.logFullpath,1) eq ""/"" OR right(instance.logFullPath,1) eq ""\""){ 			instance.logFullPath = left(instance.logFullpath, len(instance.logFullPath)-1); 		} 		instance.logFullPath = instance.logFullpath & ""/"" & getProperty(""filename"") & "".log""; 		 		// Do we expand the path? 		if( getProperty(""autoExpand"") ){ 			instance.logFullPath = expandPath(instance.logFullpath); 		} 		 		//lock information 		instance.lockName = getname() & ""logOperation""; 		instance.lockTimeout = 25; 		 		return this; 	</cfscript> </cffunction>  The signature of the logMessage method is the following:  <---  logMessage ---> <cffunction name=""logMessage"" access=""public"" output=""false"" returntype=""void""> 	<---************************************************************** ---> 	<cfargument name=""logEvent"" type=""coldbox.system.logging.LogEvent"" required=""true"" hint=""The logging event to log.""> 	<---************************************************************** ---> 	 </cffunction>  As you can see it is a very simple method that receives a LogBox logging event object. This object keeps track of the following properties with its appropriate getters and setters: timestamp category message severity extraInfo You can then use this logging event object to log to whatever destination you want. Here is a snippet from our scope appender:  <---  Log Message ---> <cffunction name=""logMessage"" access=""public"" output=""true"" returntype=""void"" hint=""Write an entry into the appender.""> 	<---************************************************************** ---> 	<cfargument name=""logEvent"" type=""coldbox.system.logging.LogEvent"" required=""true"" hint=""The logging event""/> 	<---************************************************************** ---> 	<cfscript> 		var logStack = """"; 		var entry = structnew(); 		var limit = getProperty('limit'); 		var loge = arguments.logEvent; 		 		// Verify storage 		ensureStorage(); 		 		// Check Limits 		logStack = getStorage(); 		 		if( limit GT 0 and arrayLen(logStack) GTE limit ){ 			// pop one out, the oldest 			arrayDeleteAt(logStack,1); 		} 		 		// Log Away 		entry.id = createUUID(); 		entry.logDate = loge.getTimeStamp(); 		entry.appenderName = getName(); 		entry.severity = severityToString(loge.getseverity()); 		entry.message = loge.getMessage(); 		entry.extraInfo = loge.getextraInfo(); 		entry.category = loge.getCategory(); 		 		// Save Storage 		arrayAppend(logStack, entry); 		saveStorage(logStack);		 	</cfscript>	    </cffunction>   Finally, both the onRegistration and onUnRegistration methods have to be void methods with no arguments.  <cffunction name=""onRegistration"" access=""public"" hint=""Runs after the appender has been created and registered. Implemented by Concrete appender"" output=""false"" returntype=""void""> </cffunction>  <cffunction name=""onUnRegistration"" access=""public"" hint=""Runs before the appender is unregistered from LogBox. Implemented by Concrete appender"" output=""false"" returntype=""void""> </cffunction>  These are great for starting or stopping your appenders if they so need to. Here is a sample from our socket appender:  <---  onRegistration ---> <cffunction name=""onRegistration"" output=""false"" access=""public"" returntype=""void"" hint=""When registration occurs""> 	<cfif getProperty(""persistConnection"")> 		<cfset openConnection()> 	</cfif> </cffunction>  <---  onRegistration ---> <cffunction name=""onUnRegistration"" output=""false"" access=""public"" returntype=""void"" hint=""When Unregistration occurs""> 	<cfif getProperty(""persistConnection"")> 		<cfset closeConnection()> 	</cfif> </cffunction>  Helper Methods The abstract appender also has various cool methods that you can use when building appenders: CF Utility Methods $abort() $dump(any var, boolean isAbort=[false]) $log(string severity='INFO', string message=) : Log a cflog message just in case $rethrowit(any throwObject) $throw(string message, [string detail=], [string type='Framework']) Properties Methods struct getProperties() : Get all the properties struct void setProperties(struct properties) : Override all properties any getProperty(string property) : Get a property void setProperty(string property, any value) : Set a property Boolean propertyExists(string property) : Checks if a property exists Utility Methods isInitialized() : If the appender has been initialized getName() : Get the name of the appender getHash() : Get the appender's unique hash id severityToString(numeric severity) : Transforms a severity integer to it's human readable form Layout Methods any getCustomLayout() : Get the custom layout object if defined. boolean hasCustomLayout() : Checks if the custom layout object is defined in this appender. Instance Members Every Appender has access to the following public variables: this.logLevel : A reference to the coldbox.system.logging.LogLevels class Dealing with Custom Layouts In order for an appender to deal with custom layouts, you must use the layout methods when preparing to log your messages. Below is a simple example from the console appender of how to do this:  if( hasCustomLayout() ){   entry = getCustomLayout().format(loge); } else{   entry = ""#severityToString(loge.getseverity())# #loge.getCategory()# #loge.getmessage()# ExtraInfo: #loge.getextraInfoAsString()#""; }  // Log message to system.out instance.out.println(entry);  As you can see, all you need to do is have an if statement that checks whether the appender has a custom layout or not and then assign the return of the layout as your message to log. Registering Appenders at Runtime You can programmatically register appenders at runtime by using the registerAppender() function exposed in the LogBox object. Here is the function API:  registerAppender(name, class, properties, layout, levelMin, levelMax);  Please note that registering dynamic appenders at runtime is tricky as some objecs might already have references to some appenders. We recommend registering appenders at configuration load or when the application starts up. Creating a Custom Layout You can easily create a custom layout object by creating a cfc that extends our abstract layout object: coldbox.system.logging.Layout and implementing a format() method. Below you can see the method signature:  <---  format ---> <cffunction name=""format"" output=""false"" access=""public"" returntype=""string"" hint=""Format a logging event message into your own format""> 	<cfargument name=""logEvent"" type=""coldbox.system.logging.LogEvent""   required=""true""   hint=""The logging event to use to create a message."">  </cffunction>  All you need to do is inspect the logging event and create your very own message and then return it back. That's it! You thought there was more? Instance Members Every Layout has access to the following public variables: this.logLevel : A reference to the coldbox.system.logging.LogLevels class this.LINE_SEP : A line separator equal to chr(13) & chr(10) Appender Properties As we mentioned before, LogBox ships with over 10 different appenders for your logging and tracing needs. Some of them require configuration properties and some don't. We already discovered that when we configure an appender we can pass in a structure of properties much like how we configure ColdBox Interceptors. Each appender can implement as many properties as they see fit. Below we will digest all the included LogBox appenders and their configuration properties. AsyncFileAppender & FileAppender Property Type Required Default Description filePath string true --- The location of where to store the log file filename string false Name of the Appender The name of the file, if not defined, then it will use the name of this appender. Do not append an extension to it. We will append a .log to it fileEncoding string false utf-8 The file encoding to use, by default we use UTF-8 autoExpand boolean false true Whether to expand the file path or not. Defaults to true Note: Please remember to set the autoExpand property to FALSE if you will be using an absolute file path location. AsyncRollingFileAppender & RollingFileAppender Property Type Required Default Description filePath string true --- The location of where to store the log file filename string false Name of the Appender The name of the file, if not defined, then it will use the name of this appender. Do not append an extension to it. We will append a .log to it fileEncoding string false utf-8 The file encoding to use, by default we use UTF-8 autoExpand boolean false true Whether to expand the file path or not. Defaults to true fileMaxSize int false 2000 (2MB) The max file size for log files. Defaults to 2000 (2 MB) fileMaxArchives int false 2 The max number of archives to keep. Defaults to 2 Note: Please remember to set the autoExpand property to FALSE if you will be using an absolute file path location. CFAppender Property Type Required Default Description logType string(file or application) false file The type of cflog to use: file or application. fileName string false Appender's name The name of the file to log to if using file as the logType. If not set, it will use the appender's name This appender logs directly to the cflog tag by using a custom file or logging to the application logs. ColdBoxTracerAppender Property Type Required Default Description coldbox_app_key string false --- The app key where ColdBox is stored in application scope because this appender talks to ColdBox via the ColdBox Factory. Don't set it to use the default This appender logs to the ColdBox Tracer Messages Panel in the ColdBox debugger. DBAppender & AsyncDBAppender Property Type Required Default Description dsn string true --- The dsn to use for logging table string true --- The table name to use for logging columnMap struct false --- A column map for aliasing columns. (Optional) autocreate boolean false false if true, then we will create the table. Defaults to false (Optional) textDBType string false text The database type for the message and extended info fields. The columns needed or created in the table are id : UUID severity : string category : string logdate : timestamp appendername : string message : string extrainfo : string If you are building a column mapper, the map must have the above keys in it that match to your own table columns. Important: Please make sure you update the textDBType property to match your database capabilities for logging. EmailAppender Property Type Required Default Description subject string true --- Get's pre-pended with the severity and category field. from string true --- The from email address to string true --- The to email(s) cc string false empty The cc email(s) bcc string false empty The bcc email(s) mailserver string false empty The optional mail server mailusername string false empty The optional mail username mailpassword string false empty The optional mail password mailport int false 25 The optional mail port useTLS boolean false false Use the Transport level security setting in the cfmail tag. useSSL boolean false false Use SSL or not ScopeAppender Property Type Required Default Description scope string false request The scope to persist to, any valid CF scope. key string false appender's name The key to use in the scope limit numeric false 0 a limit to the amount of logs to rotate. Defaults to 0, unlimited (optional) SocketAppender Property Type Required Default Description host string true The host to connect to port string true --- The port to connect to timeout numeric false 5 the timeout in seconds. defaults to 5 seconds persistConnection boolean false true Whether to persist the connection or create a new one every log time. Defaults to true TracerAppender This appender directs messages via the cftrace tag. It has no configuration properties. LogBox in a ColdBox Application Every ColdBox application can use LogBox by default since the main engine already uses it. By default ANY ColdBox application will be configured with a LogBox instance with the following appenders: ConsoleAppender  <LogBox>  	<-- <Default Appender Definitions --> 	<Appender name=""ConsoleAppender""  class=""coldbox.system.logging.appenders.ConsoleAppender"" /> 	 	<-- <Root Logger: Will log anything by default --> 	<Root levelMin=""FATAL"" levelMax=""INFO"" appenders=""*"" /> 	 </LogBox>  Also, the app will log on ANY severity by default up to INFO for the root logger and the ColdBox package. You can customize this default behavior by creating or modifying the <LogBox> element in your ColdBox configuration file and follow the same configuration approach as any normal LogBox configuration file; please refer to the configuring LogBox section. In ColdBox 3.0.0 applications and above you can either use the XML or configuration DSL approach. Configuration Within ColdBox There are several ways you can configure LogBox from within your ColdBox applications, to each its own. So we will start with the two ways you can configure a ColdBox application. Programmatic ColdBox 3.0.0 and above allows for a programmatic approach via the ColdBox configuration object. So let's look at how the loader looks at your configuration: Is there a logBox variable defined in the configuration? False: Does a LogBox.cfc exist in the application's config folder? True: Use that CFC by convention to configure LogBox False: Continue to next point Configure LogBox with default framework settings True: Have you defined a configFile key? True: Then use that value to pass into the configuration object so it can load LogBox using that configuration file (xml or CFC) False: The configuration data is going to be defined inline here so process it So the configuration DSL is exactly the same as you have seen in before with the only distinction that you can add a configFile key that can point to an external configuration file (XML or CFC). XML The XML approach uses exactly the same configuration elements as the normal XML configuration file but with one extra element: ConfigFile. This serves the same purpose as in the programmatic approach, where you have defined the LogBox configuration somewhere and you are pointing to it via this setting:  <LogBox> 	<ConfigFile>shared.path.LogBoxConfig</ConfigFile> </LogBox>  Please also note that the application loader follows almost the same approach as above: Is there a <LogBox> element defined in the configuration? False: Does a LogBox.cfc exist in the application's config folder? True: Use that CFC by convention to configure LogBox False: Continue to next point Configure LogBox with default framework settings True: Have you defined a <ConfigFile> element? True: Then use that value to pass into the configuration object so it can load LogBox using that configuration file (xml or CFC) False: The configuration data is going to be defined inline via the XML notation here so process it Benefits of using LogBox in a ColdBox application Just by building a ColdBox application, you get several key benefits when dealing with LogBox. First of all, the configuration, creation and instantiation is ALL done for you. The ColdBox configuraiton file accepts ${setting} placeholder syntax, so you can make your LogBox configuration dynamic and use your ColdBox settings. You can even make your properties to appenders to be complex variables as you have the JSON notation available in the ColdBox application already or forget about that nonsense and use the ColdBox Programatic approach. You can configure LogBox on a per-environment criteria as the ColdBox per-environment routines can use the LogBox configuration elements in its definitions. Every handler, interceptor and plugin already has a reference to the LogBox instance as a property called: logBox. So you have immediate access to it. Every handler, interceptor and plugin already has a configured logger instance as a property called: log. So you have immediate access to it. The ColdBox Logger plugin is already configured to use the configured LogBox instance and you can inject it anywhere you like. You can configure the logging of ColdBox on a per package level. You get the power of ColdBox MVC. Where is LogBox stored in a ColdBox app? The LogBox instance is stored in the ColdBox main controller object and you can retrieve it like so from any handler, plugin or interceptor.  logBox = getController().getLogBox();	  LogBox from the ColdBox Factory The ColdBox factory object also has three utility methods you can use to talk to LogBox: getLogBox() : Get a reference to the LogBox instance. getRootLogger() : Get a reference to the root logger. getLogger(category:any) : Get a named logger instance or reference. LogBox from the ColdBox Proxy The ColdBox proxy object also has three utility methods you can use to talk to LogBox from any remote proxy you create: getLogBox() : Get a reference to the LogBox instance. getRootLogger() : Get a reference to the root logger. getLogger(category:any) : Get a named logger instance or reference. Can I still use the Logger plugin? Yes, of course. The Logger plugin (v 3.0.0 > only) has been reconfigured to work with LogBox. You can use it like any normal Logger plugin with some added methods to it. In summary, the Logger plugin is configured to work via one logger who's category name is the name of your application. The LogBox autowiring DSL The ColdBox autowiring DSL can also talk to LogBox. This way you can easily use our dependency injection DSL for LogBox related objects: Type Description logbox Get a reference to the application's LogBox instance logbox:root Get a reference to the root logger logbox:logger:category Get a reference to a named logger by its category name logbox:logger:{this} Get a reference to a named logger according to the current class path of the injected target Below you can see the most common usage of this dependency DSL:  <---  LogBox wired in ---> <cfproperty name=""logBox"" type=""logbox"" />	  <---  Root Logger ---> <cfproperty name=""logger"" type=""logbox:root"" />	   <---  Named Category For an Object, will grab the category name from the object itself. ---> <cfproperty name=""logger"" type=""logbox:logger:#getMetadata(this).name#"" />	  <---  Named Category ---> <cfproperty name=""logger"" type=""logbox:logger:com.api.model"" />	  <---  Category eq to ClassPath ---> <cfproperty name=""logger"" type=""logbox:logger:{this}"" />	   Summary As you can see, LogBox is both a powerful and simple logging library for ColdFusion. You have great flexibility by being able to define more than 1 destination points and even building your own. The logger interface is incredibly easy to use and configure for any kind of custom severity levels or even destinations. LogBox is also incredibly friendly when dealing with messages as you can even customize them as you see fit. Overall, LogBox is more than a simple logging library but an enterprise logging machine!   Download in other Formats: Markup | HTML | Word Comments (2) Add Comment Kai Tischler said at 04:05:37 PM 27-Jun-2011 My understanding is the following: When placing LogBox Messages in Code, one should always adhere to the following practice: if( log.canDebug() ){ log.debug(""This is my log message, some #dynamic# date is here"", dataCFC); } Doing it this way, one can easily suppress LogBox Messages altogether; but the 'if( log.canDebug() )' code is always executed ? Must one still take care of not using too many of those LogBox Message Statements then ? Luis Majano said at 04:27:29 PM 27-Jun-2011 The if statement will execute way faster than evaulating the debugging strings and the entire logging process. For best practice always use the if approach. ColdBox Books Purchase Books Buy Book! Buy Kindle! Buy eBook! See all books! Media ColdBox TV ColdBox Connection Video Feeds Developer Week Social Media twitter.com/coldbox twitter.com/ortussolutions twitter.com/lmajano twitter.com/gocontentbox facebook.com/coldbox Ortus Services Support & Mentoring Architecture & Design Expert Training Server Setup & Tuning Consulting Contact Us info@coldbox.org info@ortussolutions.com www.ortussolutions.com Copyright Ortus Solutions, Corp >> ContentBox v0.5 Beta 2 Design By DT"	"null"	"null"	"The Enterprise ColdFusion Logging Library"	"true"
"Other Libraries"	"Moment.cfc"	"https://github.com/AlumnIQ/momentcfc"	"Moment.js inspired date/time manipulation library for CFML (not a direct port)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"29"	"9"	"13"	"GitHub - AlumnIQ/momentcfc: Inspired by (but not a port of) moment.js, date & time (and time zone!) tools for CFML Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 29 Fork 13 AlumnIQ/momentcfc Code Issues 3 Pull requests 1 Pulse Graphs Inspired by (but not a port of) moment.js, date & time (and time zone!) tools for CFML 96 commits 1 branch 0 releases Fetching contributors ColdFusion 92.3% Shell 7.7% ColdFusion Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit d6318fa Jun 13, 2016 atuttle added note about week math Permalink Failed to load latest commit information. tests Fix logic bugs in startOf/endOf and flesh out the tests more Jun 13, 2016 .gitignore upgrade build process to latest testbox Mar 23, 2015 .travis.yml Removing ntp date config request that crashes every test Jun 10, 2016 build.xml removed the dot in the project name, fingers crossed Mar 23, 2015 contributing.md How to provide useful debugging info Mar 24, 2015 moment.cfc Fix logic bugs in startOf/endOf and flesh out the tests more Jun 13, 2016 readme.md added note about week math Jun 13, 2016 readme.md Moment.cfc Inspired by moment.js, but not a strict port. With added Time Zone switchy goodness! CFML is all about making complex things simple, but date-math seems to have missed this boat. Adobe CF moment.cfc x = now(); x = new moment(); y = createDateTime( 2008, 11, 27, 13, 47, 0 ); y = new moment( '2008-11-27 13:47:00' ); x = dateAdd( 'ww', 1, x ); x.add( 1, 'week' ); y = dateAdd( 'n', -30, y ); y.subtract( 30, 'minutes' ); diff = dateDiff( 's', x, y ); diff = x.diff( y, 'seconds' ); before = dateCompare( now(), x, 'h' ) == -1; before = x.isBefore( y, 'hours' ); Basic Date & Time Methods Init The constructor takes 0, 1, or 2 arguments. new moment() Use the current system time and the current system time zone new moment( now() ) Use the specified time and the current system time zone new moment( now(), 'America/Pacific' ) Use the specified time and the specified time zone The datetime argument accepts a native CFML datetime object (e.g. now() or createDateTime()) or just a string (e.g. 2008-11-27 13:47). The time zone strings that moment expects are the internationalized strings, such as ""America/New_York"". You can find a full list here, or have moment generate it for you -- but more on that later. Add/Subtract some time The syntax and format masks for dateAdd() aren't that hard to remember, but they also aren't very readable. We can do better... new moment().add(1, 'day').subtract(6, 'weeks');  Here's a list of all masks you can use with add/subtract: Years: years, year, y Quarters: quarters, quarter, q Weeks: weeks, week, w * Days: days, day, d Weekdays: weekdays, weekday, wd * Hours: hours, hour, h Minutes: minutes, minute, n Seconds: seconds, second, s Milliseconds: milliseconds, millisecond, ms * * * Deviation from the official dateAdd mask: Adobe, in their infinite wisdom, decided to use ww for weeks and w for weekdays. Moment uses the sane alternative defined here. * * Another deviation from the official dateAdd mask: ms just makes more sense than the l (lower case L) that Adobe uses. startOf / endOf Returns a new moment instance with the date/time shifted to the start or end of the specified date part. For example, the end of the current week*: endOfWeek = new moment().endOf('week');  Or the start of the next quarter: nextQuarter = new moment().startOf('quarter').add(1, 'quarter');  * Weeks are assumed to be Sun-Sat Clone Returns a new moment instance with the same datetime and time zone. now_ = new moment(); alsoNow = now_.clone();  Min/Max To find the lower/upper date, use min/max: minTime = new moment().min( myMomentA, myMomentB ); maxTime = new moment().max( myMomentA, myMomentB );  Difference Find the difference between two datetimes in datepart units, considering time zone differences (their UTC times are compared): x = new moment(); y = new moment( '2008-11-27 13:47' ); diff = y.diff( x, 'hours' );  Returns the number of units that y is less than x. The same masking values from add/subtract work with diff. NOTE: Adobe ColdFusion does not support millisecond-level diffing, but it's not hard to add (lazy!)... So I did. Format Apply a DateTimeFormat mask to the current timestamp and return the resulting string. x = new moment(); x.format( 'yyyy-mm-dd hh:nn:ss' ); //=> ""2008-11-27 13:47""  From Fuzzy time difference description between the two moments, always phrased in past tense: x = new moment( '2008-11-27' ); y = new moment();  x.from( y ); //=> 6 years ago  y.from( x ); //=> 6 years ago  FromNow Shorthand for calling from when one of the comparators ~= now(). x = new moment( '2008-11-27' ); x.fromNow(); //=> 6 years ago  Epoch Get your moment in its unix epoch format: milliseconds since 1970-01-01. x = new moment( '2008-11-27' ); x.epoch(); //=> 1227762000000  isBefore / isAfter Compare two dates to determine which one is before/after the other. Default datepart precision is seconds. x = new moment( '2008-11-27' ); y = new moment(); old = x.isBefore( y, 'hours' ); //=> true  stillOld = y.isAfter( x, 'days' ); //=> true  Here's a list of all precisions you can use with isBefore / isAfter: Years: years, year, y Months: months, month, m Days: days, day, d Hours: hours, hour, h Minutes: minutes, minute, n Seconds: seconds, second, s isSame Just like isBefore / isAfter, except you're testing that the two moments are the same, at least to the specified level of precision. Uses the same precisions as isBefore / isAfter. x = new moment( '2008-11-27 13:47' ); y = new moment( '2008-11-27 6:30' ); same = x.isSame( y, 'hours' ); //=> true  isBetween Determines if the current moment is between the two argument moments, at least to the specified level of precision. x = new moment( '2008-11-27 06:30' ); y = new moment( '2008-11-27 13:47' ); z = new moment( '2011-01-01 06:06' ); betwixt = y.isBetween( y, 'minutes' ); //=> true  getDateTime After all is said and done, sometimes you just need the raw datetime object back. This'll give it to you. raw = new moment( '2008-11-27 13:47' ).getDateTime(); //=> {ts '2008-11-27 13:47:00'}  Time Zones In addition to all of the great date math you can do (with moment's better syntax), moment also has baked-in support for Time Zone functionality, using the robust underlying java.util.TimeZone class. Create a timestamp in the US-Eastern time zone: x = new moment( '2008-11-27 13:47:00', 'America/New_York' );  When you don't pass a time zone argument, the current system time zone is used. When you don't pass a time argument, the current system time is used. new moment() and new moment( '2008-11-27 13:47:00' ) and new moment( '2008-11-27 13:47:00', 'America/New_York' ) are all equally valid. UTC Convert a moment's current time to its UTC value (also updates the internal time zone value to ""UTC""): x.utc();  TZ Instead of UTC, let's see what time that would have been in Phoenix using the .tz() method to change our moment to another time zone: new moment( '2008-11-27 13:47', 'America/New_York' ).tz( 'America/Phoenix' ).format( 'hh:nn' ); //=> 03:06  And yes, all of the above methods (constructor as well as .utc() and .tz()) are chainable. isDST Curious if your current moment is during Daylight Saving Time? dst = new moment( '2008-11-27', 'America/New_York' ).isDST(); //=> false  getZoneCurrentOffset Return a time zone's current offset in seconds. This does respect Daylight Saving Time: offset = new moment().getZoneCurrentOffset( 'Australia/Perth' ); //=> 28800  getOffset Get the current offset of a moment in seconds, without knowing its time zone: offset = myMoment.getOffset();  getArbitraryTimeOffset Get the offset that was in use at the time in question. offset = myMoment.getArbitraryTimeOffset( '2015-02-01', 'America/New_York' ); //=> -18000 because Feb 1 is before DST starts  offset = myMoment.getArbitraryTimeOffset( '2015-03-20', 'America/New_York' ); //=> -14400 because Mar 20 is during DST  getZone Get the current time zone from the moment: myMoment.getZone(); //=> ""America/New_York""  getSystemTZ Get your system time zone: myMoment.getSystemTZ(); //=> ""America/New_York""  getZoneTable Get a list of all world time zones and their displayable offsets. This lists the zone's current offset, respecting their Daylight Saving Time rules: tbl = new moment().getZoneTable(); //=> { ""America/New_York"": ""-4:00"", ... }  Compatibility To date, development has been done against Adobe ColdFusion 10 and 11, in particular giving preference to dateTimeFormat() and its masks. Adobe CF9 compatibility might be possible, but probably not as easy as Lucee and Railo. Pull requests welcome in this department! Testing It is assumed that you have TestBox installed. (A mapping to /testbox should be sufficient.) Then just navigate to tests.cfc?method=runRemote in your browser. MIT Licensed Copyright (c) 2015 Adam Tuttle and Contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/AlumnIQ/momentcfc"	"Moment.js inspired date/time manipulation library for CFML (not a direct port)"	"true"
"Other Libraries"	"Mustache.cfc"	"https://github.com/rip747/Mustache.cfc"	"for ColdFusion"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"38"	"13"	"30"	"GitHub - rip747/Mustache.cfc: {{ mustache }} for ColdFusion Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 38 Fork 30 rip747/Mustache.cfc forked from pmcelhaney/Mustache.cfc Code Issues 8 Pull requests 1 Pulse Graphs {{ mustache }} for ColdFusion http://mustache.github.com/ 111 commits 2 branches 0 releases Fetching contributors ColdFusion 96.3% HTML 3.7% ColdFusion HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Pull request Compare This branch is 58 commits ahead, 1 commit behind pmcelhaney:master. Latest commit 1086bf6 Apr 24, 2015 Anthony Petruzzi Merge pull request #27 from skj3gg/master … thank you Permalink Failed to load latest commit information. mustache Added ability to space out section syntax Apr 23, 2015 tests Added ability to space out section syntax Apr 23, 2015 .gitignore Expanded git ignore. Mar 7, 2012 LICENSE Merge branch 'paul-master' Mar 5, 2012 readme.markdown Add information about mxunit and testing. Jun 4, 2014 readme.markdown Mustache.cfc Chris Wanstrath's Mustache templates for ColdFusion. Installation Mustache is a single component. To install, download the Mustache.cfc file from the mustache directory. Basic Usage <cfset mustache = createObject(""component"", ""Mustache"").init()> <cfset template = ""Hello, {{thing}}!""> <cfset context = structNew()> <cfset context['thing'] = 'World'>  <cfoutput>#mustache.render(template, context)#</cfoutput>  Creating Views Given a template named Winner.mustache: Hello {{name}} You have just won ${{value}}! {{#in_ca}} Well, ${{taxed_value}}, after taxes. {{/in_ca}}  And a view named Winner.cfc: <cfcomponent extends=""Mustache"">   <cffunction name=""taxed_value"">     <cfreturn this.value * 0.6>   </cffunction> </cfcomponent>  You can render the view like so: <cfset winner = createObject(""component"", ""Winner"")> <cfset winner.name = ""Patrick""> <cfset winner.value = ""1000""> <cfset winner.in_ca = true> <cfoutput>#winner.render()#</cfoutput>  Result: Hello Patrick You have just won $1000! Well, $600, after taxes.  A custom tag is also included so you can render templates like so: <cfset context = {     name = ""Patrick"",     value = 1000,     in_ca = true,     taxed_value = 600 } />  <cfimport taglib=""/path/to/mustache/dir"" prefix=""stache"" /> <stache:mustache context=""#context#""> <cfoutput> Hello {{name}} You have just won ${{value}}! {{##in_ca}} Well, ${{taxed_value}}, after taxes. {{/in_ca}} </cfoutput> </stache:mustache>  Testing To run the files in the tests folder you first need to download and install MXUnit. MXUnit is not required to run Mustache.cfc Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rip747/Mustache.cfc"	"for ColdFusion"	"true"
"Other Libraries"	"{{ mustache }}"	"http://mustache.github.io"	"for ColdFusion"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"814"	"62"	"172"	"GitHub - mustache/mustache.github.com: The {{official}} website Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 62 Star 814 Fork 172 mustache/mustache.github.com Code Issues 2 Pull requests 6 Pulse Graphs The {{official}} website http://mustache.github.io/ 171 commits 4 branches 0 releases 39 contributors HTML 48.2% JavaScript 33.2% Ruby 8.5% CSS 8.4% CoffeeScript 1.7% HTML JavaScript Ruby CSS CoffeeScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master pr/72 redesign-js redesign Nothing to show Nothing to show New pull request Latest commit 1716dd0 Jun 8, 2016 locks Merge pull request #81 from def-/master … Add Nim to languages Permalink Failed to load latest commit information. _data Add Nim to languages Jun 8, 2016 _includes Rename demo template. Feb 5, 2014 docs updated Apr 18, 2010 extras Remove unused coffeescript lib. Feb 5, 2014 .gitignore We’re gonna pages this thing. Feb 5, 2014 CONTRIBUTING.md Add CONTRIBUTING. Dec 26, 2014 Gemfile We’re gonna pages this thing. Feb 5, 2014 Gemfile.lock Bump lockfile to current github-pages version Feb 7, 2015 LICENSE.md Add MIT license for docs Jul 17, 2014 README.md That didn't look as good as I thought it would. Feb 5, 2014 Rakefile Add man task to the :build namespace. Feb 5, 2014 _config.yml Let's use Redcarpet! Apr 15, 2014 burt.css Fixes #39 Jul 22, 2014 index.html bugfix: on https demo link wasnt working Dec 29, 2014 mustache.1.html Update to latest manpages. Feb 5, 2014 mustache.1.ron.html Add redirects for *.ron.html URLs. Feb 7, 2015 mustache.5.html Added the keywords ""imports"", ""nested"" and ""subtemplates"" to the docs… May 27, 2015 mustache.5.ron.html Add redirects for *.ron.html URLs. Feb 7, 2015 tom.coffee Show errors when erroneous JSON is provided Nov 8, 2011 tom.js Update coffee rake task and generated js. Feb 5, 2014 README.md {{ mustache }} Logic-less templates. http://mustache.github.io Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mustache/mustache.github.com"	"for ColdFusion"	"true"
"Other Libraries"	"UnderscoreCF"	"https://github.com/russplaysguitar/UnderscoreCF"	"An UnderscoreJS port for Coldfusion. Functional programming library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"65"	"19"	"26"	"GitHub - russplaysguitar/UnderscoreCF: An UnderscoreJS port for Coldfusion. Functional programming library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 65 Fork 26 russplaysguitar/UnderscoreCF Code Issues 12 Pull requests 3 Pulse Graphs An UnderscoreJS port for Coldfusion. Functional programming library. http://russplaysguitar.github.com/UnderscoreCF/ 224 commits 2 branches 6 releases Fetching contributors ColdFusion 96.9% Shell 3.1% ColdFusion Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v2.4 v2.3 v2.2 v2.1 v2.0 v1.0 Nothing to show New pull request Latest commit 74b2c06 Nov 6, 2015 russplaysguitar Merge pull request #51 from elpete/add_lucee_to_ci … Add lucee to ci Permalink Failed to load latest commit information. docs Update docGenerator.cfm and foundry.json to include 2.4 changes Feb 3, 2014 mxunit_tests Add lucee to ci Nov 2, 2015 .gitattributes trying to fix github for windows issues Jun 9, 2012 .gitignore added test.cfm to gitignore Jun 25, 2012 .travis.yml Add lucee to ci Nov 2, 2015 LICENSE.txt added license Jun 18, 2012 ModuleConfig.cfc ""Box""ify project Nov 2, 2015 README.md add travis-ci build status image Feb 23, 2015 Underscore.cfc Added missing var scope in for loops Nov 16, 2014 box.json ""Box""ify project Nov 2, 2015 build.xml Add lucee to ci Nov 2, 2015 foundry.json Update docGenerator.cfm and foundry.json to include 2.4 changes Feb 4, 2014 README.md Underscore.cfc This project is an UnderscoreJS port for Coldfusion. Read the official documentation here: russplaysguitar.github.com/UnderscoreCF/ Underscore.cfc is a utility-belt library that provides a lot of the functional programming support that you would expect in Prototype.js (or Ruby). It provides dozens of functions that support both the usual functional suspects: map, select, invoke - as well as more specialized helpers: function binding, sorting, deep equality testing, and so on. It delegates to built-in functions where applicable. Underscore.cfc is compatible with Adobe Coldfusion 10 and Railo 4. Contributing Contributions are welcome. To contribute: Fork the project. Make a feature branch: git checkout -b feature_branch Make your changes. Add tests. Send a pull request. Copyright Copyright © 2012 Russ Spivey. See LICENSE.txt for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/russplaysguitar/UnderscoreCF"	"An UnderscoreJS port for Coldfusion. Functional programming library."	"true"
"Other Libraries"	"ValidateThis"	"http://validatethis.org"	"A Validation Framework for ColdFusion Objects"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"A Validation Framework for ColdFusion Objects"	"false"
"Editors"	"Adobe ColdFusion Builder 3"	"http://www.adobe.com/products/coldfusion-builder.html"	"Eclipse based ColdFusion IDE from Adobe"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ColdFusion builder, IDE | Adobe ColdFusion Builder For the complete experience, please enable JavaScript in your browser. Thank you! Products How to Buy Learn & Support About Adobe Creative Cloud Photoshop Illustrator InDesign Premiere Pro After Effects Lightroom See all See plans for: businesses photographers students Document Cloud Acrobat DC Sign Stock Elements Marketing Cloud Analytics Audience Manager Campaign Experience Manager Media Optimizer Target See all Adobe for enterprise Acrobat Reader DC Adobe Flash Player Adobe AIR Adobe Shockwave Player All products Creative Cloud Individuals Photographers Students and Teachers Business Schools and Universities Marketing Cloud Document Cloud Stock Elements All products Get Support Find answers quickly. Contact us if you need to. Start now > Learn the apps Get started or learn new ways to work. Learn now > Ask the community Post questions and get answers from experts. Start now > About Us Careers At Adobe Investor Relations Privacy  |  Security Corporate Responsibility Customer Showcase Events Contact Us News 6/21/2016 Adobe Reports Record Revenue 6/21/2016 Adobe Creative Cloud Innovations Take Creativity from Blank Page to Brilliant 6/20/2016 Adobe Positioned as a Leader in Gartner Magic Quadrant for Mobile App Development Platforms 6/15/2016 Adobe Digital Price Index Shows Continued Deflation in the U.S. Economy Adobe ColdFusion family (2016 release) / Adobe ColdFusion Builder Overview Features Buying guide Learn & Support Free Trial Buy now Get a robust IDE for web and mobile application development. Build and deploy web and mobile applications using Adobe ColdFusion Builder, the professional tool for serious developers. See what’s new › Upgrade to ColdFusion Builder for Loading... Upgrade now Meet ColdFusion Builder (2016 release). Boost your productivity with built-in features that aid every aspect of the development workflow. Preserve code integrity with smart features that help identify and reduce errors, vulnerabilities and security breaches.   Develop faster Make the most of your time with features that help you speed up repetitive tasks, program faster and search and navigate code more conveniently. Create mobile applications Get a head start in the fast-growing market for mobile apps and browser-based mobile applications. Easily develop, test, debug and deploy. Prevent errors and protect code Maintain code integrity with smart features that help identify and reduce errors, including vulnerabilities and potential security breaches. Use debugging features, preview capabilities, refactoring and more to ensure code quality.   Manage your ColdFusion server Take advantage of extensions, remote project support, integrated server management, a log viewer and other features to streamline your work. Customize your environment Work how you work best. Customize shortcuts, easily format and reuse code and expand functionality with powerful extensions.     Feature highlights   Smart tab assist Quickly navigate to the next logical tag, function or control statement within your code using keyboard shortcuts. Advanced find and replace Easily search your application for specific tags, attributes and text, regardless of file location. Use regular expressions for more complex text searches. Intelligent code assist Accelerate your application development with intelligent, ordered code assist for CFML, CFScript, HTML, JavaScript and CSS. Get code assist even for third-party JavaScript libraries included in your web application. See all features ›   Customer stories Inspirus The employee recognition platform built on Adobe ColdFusion allows organizations to recognize, engage, and inspire people at work. Download PDF › Promisan Enterprise resource planning tools built and deployed with ColdFusion put information and people to work to improve revenue. Download PDF › Webapper Global software services firm uses ColdFusion to maximize performance of auto racing sites hosted in a scalable Amazon Cloud infrastructure. Download PDF ›   See all customer stories ›   Turning up the heat on mobile application development with ColdFusion. Read the IDC white paper › ColdFusion news and insights Stay up to date via the ColdFusion blog. Read the blog › Join the conversation on Facebook. ColdFusion on Facebook › Join the conversation on Twitter. ColdFusion on Twitter › ColdFusion Builder The professional tool for serious developers.   Loading... Buy now Try Now ›     Find the right ColdFusion product for you. See the Buying Guide › Questions: Let's chat Change region Products Downloads Learn & Support Company Copyright © 2016 Adobe Systems Incorporated. All rights reserved. Privacy (UPDATED) Terms of Use Cookies AdChoices Choose your region Selecting a region changes the language and/or content on Adobe.com. Americas Brasil Canada - English Canada - Français Latinoamérica México United States Europe, Middle East and Africa Africa - English België - Nederlands Belgique - Français Belgium - English Česká republika Cyprus - English Danmark Deutschland Eesti España France Greece - English Hrvatska Ireland Israel - English Italia Latvija Lietuva Luxembourg - Deutsch Luxembourg - English Luxembourg - Français Magyarország Malta - English Middle East and North Africa - English Moyen-Orient et Afrique du Nord - Français Nederland Norge Österreich Polska Portugal România Schweiz Slovenija Slovensko Srbija Suisse Suomi Sverige Svizzera Türkiye United Kingdom България Россия Україна الشرق الأوسط وشمال أفريقيا - اللغة العربية ישראל - עברית Asia Pacific Australia Hong Kong S.A.R. of China India - English New Zealand Southeast Asia (Includes Indonesia, Malaysia, Philippines, Singapore, Thailand, and Vietnam) - English 中国 中國香港特別行政區 台灣 日本 한국 Commonwealth of Independent States Includes Armenia, Azerbaijan, Belarus, Georgia, Kazakhstan, Kyrgyzstan, Moldova, Tajikistan, Turkmenistan, Ukraine, Uzbekistan"	"null"	"null"	"Eclipse based ColdFusion IDE from Adobe"	"true"
"Editors"	"IntelliJ Idea"	"http://www.jetbrains.com/idea/"	"Java IDE, CFML Support available via"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"IntelliJ IDEA the Java IDE All Tools IDEs .NET & Visual Studio Team Tools Languages Store Support We Are JetBrains Check out our IDEs IntelliJ IDEA The most intelligent Java IDE PhpStorm Lightning-smart PHP IDE PyCharm Python IDE for professional developers RubyMine The most intelligent Ruby IDE WebStorm The smartest JavaScript IDE AppCode Smart IDE for iOS/OS X development CLion A smart cross-platform IDE for C and C++ DataGrip Your Swiss Army knife for databases & SQL Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for .NET and Visual Studio ReSharper Visual Studio extension for .NET developers ReSharper C++ Visual Studio extension for C++ developers dotTrace .NET performance profiler dotMemory .NET memory profiler dotCover .NET unit test runner and code coverage tool dotPeek Free .NET decompiler and assembly browser Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for teams TeamCity Powerful Continuous Integration out of the box YouTrack Issue tracker designed for development teams Upsource Code review and repository browsing Hub JetBrains team tools, integrated Check out our languages and related tools Kotlin Programming language for JVM & Android MPS DSL development environment Store Pricing and licensing options for everyone, from free plans for students to volume licensing for companies. JetBrains Toolbox Team Tools Purchase Terms FAQ Contact Sales Support Questions or problems? We want to help! Dedicated support teams can answer product- or purchase-related questions. Technical Support Contact Sales Commitment Community Support Webinars Early Access Programs We Are JetBrains We make professional software development a more productive and enjoyable experience. About Us People Customers & Awards Press Room Partners & Resellers Technology Partners Careers Contacts Search IntelliJ IDEA What's New Features Learn Buy Download Capable and Ergonomic Java * IDE Download *Actually, much more than just Java Features Enjoy productive java Every aspect of IntelliJ IDEA is specifically designed to maximize developer productivity. Together, powerful static code analysis and ergonomic design make development not only productive but also an enjoyable experience. Take a tour Deep intelligence After IntelliJ IDEA's indexed your source code, it offers blazing fast and intelligent experience by giving relevant suggestions in every context: instant and clever code completion, on-the-fly code analysis and reliable refactoring tools. Out-of-the-box experience Mission-critical tools such as integrated version controls systems and a wide variety of supported languages and frameworks are at hand — no plugin hustle included. Smart code completion While the basic completion suggests names of classes, methods, fields, and keywords within the visibility scope, the smart completion suggests only those types that are expected in the current context. Framework-specific assistance While IntelliJ IDEA is an IDE for Java, it also understands and provides intelligent coding assistance for a large variety of other languages such as SQL, JPQL, HTML, JavaScript, etc., even when the language expression is injected into a String literal in your Java code. Productivity boosters The IDE predicts your needs and automates the tedious and repetitive development tasks so you can stay focused on the big picture. Developer ergonomics In every design and implementation decision that we make, we keep in mind the risk of interrupting the developer's flow and do our best to eliminate or minimize it. The IDE follows your context and brings up the corresponding tools automatically. Unobtrusive intelligence The coding assistance in IntelliJ IDEA is not about only the editor: it helps you stay productive when dealing with its other parts as well: e.g. filling a field, searching over a list of elements; accessing a tool window; or toggling for a setting, etc. Built-in tools and supported frameworks Built-in tools Build tools Version control Decompiler Coverage Database tools/SQL JVM languages Java Scala Groovy Kotlin Enterprise frameworks Spring Java EE GWT/Vaadin JBoss Play Grails App Servers/Clouds Mobile development Android PhoneGap/Cordova/ Ionic Web development JavaScript HTML/CSS AngularJS React Node.js Discover all features New Features User interface Font ligatures Breadcrumb for Java Background Image in Editor and IDE Frame Notication popups got compact and moved to the right-bottom corner Version control Log for Git and Mercurial now loads data in the background, gets a handy loading progress indicator and a shortcut to navigate to the filter field Unversioned files in Commit dialog Case-only rename in Git for Windows and OS X Patches can now be applied from the clipboard or by dragging a file into the IDE; and IntelliJ offers help when applying patches with conflicts Frameworks Support for JUnit 5 Better coding assistance for React Support for AngularJS 2 Spring 4.3 core features, new inspections, and better performance Coding assistance for Spring Caching Code completion and navigation in FreeMarker and Velocity templates for variables defined in Spring controllers And much more… Choose your edition Choose your edition Community For JVM and Android development Ultimate For web and enterprise development Java, Kotlin, Groovy, Scala Android ? Maven, Gradle, SBT Git, SVN, Mercurial, CVS Perforce, ClearCase, TFS JavaScript, TypeScript ? Java EE, Spring, GWT, Vaadin, Play, Grails, Other Frameworks ? Database Tools, SQL Compare editions Download .exe Windows (.exe) OS X (.dmg) Linux (.tar.gz) Free download Download .exe Windows (.exe) OS X (.dmg) Linux (.tar.gz) Free 30-day trial Tell me about new product features as they come out Thanks for your request! Community forum Plugin repository Bug and issue tracker IntelliJ IDEA blog Also on JetBrains My account Newsletter Contact Follow JetBrains © 2000—2016 JetBrains s.r.o. All rights reserved. Developed with drive and IntelliJ IDEA Privacy Policy | Terms of Use"	"null"	"null"	"Java IDE, CFML Support available via"	"true"
"Editors"	"plugin"	"https://github.com/JetBrains/intellij-plugins/tree/master/CFML"	"Java IDE, CFML Support available via"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"485"	"64"	"262"	"intellij-plugins/CFML at master · JetBrains/intellij-plugins · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 64 Star 485 Fork 262 JetBrains/intellij-plugins Code Pull requests 10 Pulse Graphs Branch: master Switch branches/tags Branches Tags 115 117 119 121 123 125 127 129 131 133 135 137 139 141 143 145 145.1812 162 162.646 162.844 162.889 162.917 162.1024 162.1120 162.1236 162.1346 idea10 maia master nika x0x xena Nothing to show webstorm/163.1530 webstorm/163.1479 webstorm/163.1437 webstorm/163.1375 webstorm/163.1374 webstorm/163.1279 webstorm/163.1261 webstorm/163.1260 webstorm/163.1194 webstorm/163.1193 webstorm/163.1105 webstorm/163.1104 webstorm/163.1060 webstorm/163.1059 webstorm/163.1018 webstorm/163.1017 webstorm/163.955 webstorm/163.954 webstorm/163.913 webstorm/163.912 webstorm/163.899 webstorm/163.898 webstorm/163.875 webstorm/163.874 webstorm/163.828 webstorm/163.827 webstorm/163.748 webstorm/163.747 webstorm/163.690 webstorm/163.689 webstorm/163.666 webstorm/163.651 webstorm/163.650 webstorm/163.608 webstorm/163.607 webstorm/163.584 webstorm/163.583 webstorm/163.516 webstorm/163.483 webstorm/163.482 webstorm/163.369 webstorm/163.345 webstorm/163.344 webstorm/163.324 webstorm/163.323 webstorm/163.311 webstorm/163.305 webstorm/163.304 webstorm/163.283 webstorm/163.282 webstorm/163.270 webstorm/163.262 webstorm/163.255 webstorm/163.252 webstorm/163.251 webstorm/163.227 webstorm/163.226 webstorm/163.198 webstorm/163.197 webstorm/163.181 webstorm/163.164 webstorm/163.163 webstorm/163.153 webstorm/163.146 webstorm/163.145 webstorm/163.122 webstorm/163.121 webstorm/163.96 webstorm/163.95 webstorm/163.76 webstorm/163.70 webstorm/163.69 webstorm/163.58 webstorm/163.57 webstorm/163.56 webstorm/163.43 webstorm/163.14 webstorm/162.1386 webstorm/162.1371 webstorm/162.1360 webstorm/162.1348 webstorm/162.1334 webstorm/162.1332 webstorm/162.1320 webstorm/162.1306 webstorm/162.1289 webstorm/162.1277 webstorm/162.1272 webstorm/162.1262 webstorm/162.1257 webstorm/162.1243 webstorm/162.1242 webstorm/162.1225 webstorm/162.1211 webstorm/162.1195 webstorm/162.1194 webstorm/162.1180 webstorm/162.1167 webstorm/162.1166 webstorm/162.1149 Nothing to show Create new file Find file History intellij-plugins/CFML/ Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink .. Failed to load latest commit information. .idea gen resources source_for_IDEA9/com/intellij/coldFusion/model/psi src tests CFML-plugin.iml CFML.iml ColdFusion1.7.iml ColdFusion1.7.ipr ColdFusion1.7.iws ReadMe.txt ReadMe.txt Steps to configure a plugin SDK:  * Open Module Settings * SDKs -> + button -> IntelliJ Platform Plugin SDK -> Choose a folder with IntelliJ Ultimate(!) or *.App on Mac * Go to the SDK's settings page -> Classpath tab -> + button(bottom left corner) -> add plugins: Database Tools * To add a plugin go to IntelliJ IDEA folder/plugins/<plugin-name>/lib and choose all jars Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/JetBrains/intellij-plugins/tree/master/CFML"	"Java IDE, CFML Support available via"	"true"
"Editors"	"cfbrackets"	"http://cfbrackets.org"	"adds support for ColdFusion Markup Language (CFML) to"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"19"	"11"	"3"	"GitHub - raeberli/cfbrackets Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 19 Fork 3 raeberli/cfbrackets Code Issues 3 Pull requests 0 Pulse Graphs No description or website provided. 5 commits 1 branch 0 releases Fetching contributors JavaScript 100.0% JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit e3477de Jun 7, 2014 raeberli version 0.1.2 … fixed issue #1 Permalink Failed to load latest commit information. .gitattributes version 0.1.0 Jun 12, 2013 .gitignore version 0.1.0 Jun 12, 2013 CfmlAttributes-cf10.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlAttributes-cf11.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlAttributes-cf7.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlAttributes-cf8.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlAttributes-cf9.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlAttributes-obd3.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlAttributes-railo2.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlAttributes-railo3.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlAttributes-railo4.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlAttributes.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlDontCloseTags-cf10.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlDontCloseTags-cf11.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlDontCloseTags-cf7.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlDontCloseTags-cf8.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlDontCloseTags-cf9.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlDontCloseTags-obd3.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlDontCloseTags-railo2.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlDontCloseTags-railo3.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlDontCloseTags-railo4.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlDontCloseTags.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlTags-cf10.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlTags-cf11.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlTags-cf7.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlTags-cf8.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlTags-cf9.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlTags-obd3.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlTags-railo2.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlTags-railo3.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlTags-railo4.json Updated CFML Tag and Attribute information Jun 7, 2014 CfmlTags.json Updated CFML Tag and Attribute information Jun 7, 2014 HtmlAttributes.json version 0.1.0 Jun 12, 2013 HtmlTags.json version 0.1.0 Jun 12, 2013 README.md Create README.md Jun 13, 2013 main.js version 0.1.2 Jun 7, 2014 package.json version 0.1.2 Jun 7, 2014 unittests.js version 0.1.0 Jun 12, 2013 README.md cfbrackets Extension for brackets (http://brackets.io) that adds support for ColdFusion Markup Language (CFML). Currently code hinting for cfml tags and attributes are working. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/raeberli/cfbrackets"	"adds support for ColdFusion Markup Language (CFML) to"	"true"
"Editors"	"Brackets Code Editor"	"http://brackets.io/"	"adds support for ColdFusion Markup Language (CFML) to"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"25695"	"1573"	"5364"	"GitHub - adobe/brackets: An open source code editor for the web, written in JavaScript, HTML and CSS. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,573 Star 25,695 Fork 5,364 adobe/brackets Code Issues 1,827 Pull requests 110 Wiki Pulse Graphs An open source code editor for the web, written in JavaScript, HTML and CSS. http://brackets.io 16,911 commits 148 branches 90 releases 294 contributors JavaScript 83.1% HTML 13.9% CSS 2.6% PHP 0.2% Ruby 0.1% Shell 0.1% JavaScript HTML CSS PHP Ruby Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags abose/instant alf_localization_release_new alf_localization_release alf_localization couzteau/hsv-theme dangoor/extensions2 dangoor/extensions3 dangoor/fastsearch dangoor/live-js-research dangoor/liveapi-sketch dangoor/new-file-tree dangoor/9341-default-to-project-dir garthdb/topcoat-parity gh-pages glenn/dropbox-integration ingo/check-coding-rules ingo/create-empty-temp-dir-for-tests ingo/extension-bundles ingo/fix-6904 ingo/fix6931 ingo/improve-find-in-files ingo/increase-jasmine-default-timeout ingo/optimize-registry-loading ingo/rename-update-release-number-task ingo/update-build-toolchain ingo/update-extension-manager-deps ingo/update-jslint-version install-extensions irichter/fix-jquery-focus-issue irichter/multi-provider-support irichter/multiple-codeinspector-support irichter/pluggable-linting irichter/refactor-livedev-tests iwehrman/aggressive-callback-caching iwehrman/consistent-file-caching iwehrman/file-system-with-facades iwehrman/file-system-with-q iwehrman/guard-against-concurrent-array-mutation-in-async-do-in-parallel iwehrman/multi-process-watchers iwehrman/nodefs-with-binary-commands iwehrman/nodefs iwehrman/serialize-reads-and-writes iwehrman/shell-command-to-keydown-event-hack iwehrman/volumes iwehrman/watch-unwatch jasonsanjose/brackets-from-localhost jasonsanjose/child-process jasonsanjose/live-dev-reload-test jasonsanjose/live-preview-watchers jasonsanjose/node-webkit jasonsanjose/scroll-perf jasonsanjose/source-map-build jasonsanjose/zoom-level jbalsas/apify-task jeff/brackets-as-cpa jeff/cef_2171 jeff/fix-9040 jeff/fix-9564-document-mru jeff/fix-9569 jeff/fix-9706 jeff/fix-dansk-screen-grab jeff/fix-editor-focus-test-9972 jrb/improve-static-server-startup-process kai/fix-5656-live-dev kai/fix-mb-livedev-test-failures kai/ld-remote-connectivity kai/phantomjs-test-polyfill kai/prefs-no-promise-state larz/awwwyeah larz/dark-scrollbar larz/find-match-animation larz/s43-find-match-animation larz/smaller-project-panel-text marcel/extension-language-as-default marcel/pref-linewise-copy marcel/reduce-size marcel/scroll-marks-fixes marcel/update-mustache marcel/update-tern-acorn marcel/url-hints-replace master miguel/codehint-events miguel/eslint modal-trna nj/doc-view-research nj/issue-6966 nj/issue-8200-DONTMERGE nj/live-js-proto nj/live-template-experiment nj/shader-shell nj/shader-test-new-anim nj/shader-test-new nj/unit-test-test pflynn/LocalizationEx-cleanup pflynn/allow-dialog-validation pflynn/better-quicksearch-field-temp1b pflynn/better-quickseearch-field-temp pflynn/fix-rename-handling pflynn/in-browser-dummy-subfolders pflynn/in-browser-file-system pflynn/jslint-fixes pflynn/perfilecache-filesys pflynn/perfilecache-master pflynn/simple-themes-help pflynn/tokenstream prafulVaishnav/HealthDataImplementation prafulVaishnav/nodefif prafulVaishnav/test_release_1.4 prashant/editor_sync prashant/open-prefs-format-object prashant/open-prefs-in-split-view-unit-tests prksingh/JumpToHtml prksingh/fifnode prksingh/instantSearch prksingh/issue-10175 prksingh/issue-10370 prksingh/issue-10617,10590 prksingh/thorCheck prksingh/unitTestsRegExpDisableCodehints promises-upgrade randy/fif-incr-update randy/issue-10284 release remove-acorn-fix rlim/crash-test-app rlim/css-selectors rlim/find-matching-bracket rlim/improved-color-picker rlim/loc-process-change rlim/search-exclusions rroshan1/fif_web_worker rroshan1/fif_web_worker2 rroshan1/fifnode rroshan1/fifnode2 rroshan1/instant sprint-25a sprint-33-hotfix sprint-34-hotfix swmitra/BugFixesFor1.6Beta swmitra/InMemFileNav swmitra/JSRefactor swmitra/TernNode zaggino/eslint zaggino/extension-manager-cert-error zaggino/extension-update-notifications zaggino/grunt-jslint zaggino/npm-support zaggino/preferences-dialog Nothing to show v34.10744 v34.10534 v0.36.0-10998 untagged-293a2ac7be89eb7a80b8 untagged-71c185fc4eecfb5086d0 test-45 sprint-41 sprint-40 sprint-39 sprint-38 sprint-37 sprint-36 sprint-35 sprint-34.1 sprint-34 sprint-33 sprint-32 sprint-31 sprint-31a sprint-30 sprint-29 sprint-28 sprint-27 sprint-26 sprint-25 sprint-24 sprint-23 sprint-22 sprint-21 sprint-20 sprint-19 sprint-18 sprint-17 sprint-16 sprint-15 sprint-14 sprint-13 sprint-12 sprint-11 sprint-10 sprint-9 sprint-8 sprint-7 sprint-7a sprint-6 sprint-5 sprint-4 sprint-3 sprint-2 sprint-1 splitview-pre-tree2 splitview-pre-tree release-39 release-1.7 release-1.7-prerelease1 release-1.6 release-1.6+eb4 release-1.6-prerelease1 release-1.5 release-1.5+eb4 release-1.4 release-1.4+eb4 release-1.4-prerelease1 release-1.3 release-1.3+eb4 release-1.3-prerelease1 release-1.2 release-1.2+eb4 release-1.2+eb4-Prerelease1Linux release-1.2-prerelease1 release-1.2-prerelease1-Linux release-1.1 release-1.1+eb4 release-1.1-rc1 release-1.1-prerelease1 release-1.0 release-1.0+eb4 release-1.0-rc1 release-1.0-beta1 release-0.44 release-0.44-beta2 release-0.44-beta1 release-0.43 release-0.43-beta1 release-0.42 release-0.41 linux-cef-2171 hackathon 0.30.0-8833 0.30.0-8785 Nothing to show New pull request Latest commit 6e9f9e6 Jul 2, 2016 MarcelGerber committed on GitHub Merge pull request #12563 from adobe/release … Pull latest changes from release branch Permalink Failed to load latest commit information. samples Added Bulgarian translation. Apr 11, 2016 src Merge pull request #12563 from adobe/release Jul 2, 2016 tasks Add @mfatekho to CLA exceptions. Mar 22, 2016 test Merge pull request #12440 from adobe/marcel/fix-find-tests Jun 4, 2016 tools Added brackets around root_path in the mkdir directive of setup_for_h… Feb 11, 2014 .brackets.json Reintroduce JSLint as a prefered linter and disable temporary no-trai… Dec 14, 2015 .eslintrc.json Require PathUtils instead of using the global one May 1, 2016 .gitattributes Normalized Line Endings and added .gitattributes Feb 2, 2013 .gitignore Make .disabled file rule more concise. Jun 25, 2015 .gitmodules Update Tern submodule URL Dec 12, 2015 .travis.yml Use container-based Travis infrastructure Jul 13, 2015 CONTRIBUTING.md Update 'Extension Ideas' query link so it shows both open & closed is… Aug 7, 2014 Gruntfile.js Update a couple of dependencies in package.json at the root May 3, 2016 LICENSE Make license year evergreen Jan 27, 2016 NOTICE Fixed a copy / paste bug. Oct 6, 2014 README.md Update README.md Mar 22, 2016 package.json Bumping version Number to 1.8 May 23, 2016 README.md Welcome to Brackets! Brackets is a modern open-source code editor for HTML, CSS and JavaScript that's built in HTML, CSS and JavaScript. What makes Brackets different from other web code editors? Tools shouldn't get in your way. Instead of cluttering up your coding environment with lots of panels and icons, the Quick Edit UI in Brackets puts context-specific code and tools inline. Brackets is in sync with your browser. With Live Preview, Brackets works directly with your browser to push code edits instantly and jump back and forth between your real source code and the browser view. Do it yourself. Because Brackets is open source, and built with HTML, CSS and JavaScript, you can help build the best code editor for the web. Brackets may have reached version 1, but we're not stopping there. We have many feature ideas on our trello board that we're anxious to add and other innovative web development workflows that we're planning to build into Brackets. So take Brackets out for a spin and let us know how we can make it your favorite editor. You can see some screenshots of Brackets on the wiki, intro videos on YouTube, and news on the Brackets blog. How to install and run Brackets Download Installers for the latest stable build for Mac, Windows and Linux (Debian/Ubuntu) can be downloaded here. The Linux version has most of the features of the Mac and Windows versions, but is still missing a few things. See the Linux wiki page for a list of known issues and to find out how you can help. Usage By default, Brackets opens a folder containing some simple ""Getting Started"" content. You can choose a different folder to edit using File > Open Folder. Most of Brackets should be pretty self-explanatory, but for information on how to use its unique features, like Quick Edit and Live Preview, please read How to Use Brackets. Also, see the release notes for a list of new features and known issues in each build. In addition to the core features built into Brackets, there is a large and growing community of developers building extensions that add all sorts of useful functionality. See the Brackets Extension Registry for a list of available extensions. For installation instructions, see the extensions wiki page. Need help? Having problems starting Brackets the first time, or not sure how to use Brackets? Please review Troubleshooting, which helps you to fix common problems and find extra help if needed. Helping Brackets I found a bug! If you found a repeatable bug, and troubleshooting tips didn't help, then be sure to search existing issues first. Include steps to consistently reproduce the problem, actual vs. expected results, screenshots, and your OS and Brackets version number. Disable all extensions to verify the issue is a core Brackets bug. Read more guidelines for filing good bugs. I have a new suggestion, but don't know how to program! For feature requests please first check our Trello board to see if it's already there; you can upvote it if so. If not, feel free to file it as an issue as above; we'll move it to the feature backlog for you. I want to help with the code! Awesome! There are lots of ways you can help. First read CONTRIBUTING.md, then learn how to pull the repo and hack on Brackets. The text editor inside Brackets is based on CodeMirror—thanks to Marijn for taking our pull requests, implementing feature requests and fixing bugs! See Notes on CodeMirror for info on how we're using CodeMirror. Although Brackets is built in HTML/CSS/JS, it currently runs as a desktop application in a thin native shell, so that it can access your local files. (If you just try to open the index.html file in a browser, it won't work yet.) The native shell for Brackets lives in a separate repo, adobe/brackets-shell. I want to keep track of how Brackets is doing! Not sure you needed the exclamation point there, but we like your enthusiasm. What's Brackets working on next? In our feature backlog, the columns to the right (starting from ""Development"") list the features that we're currently working on. ""Ready"" shows what we'll be working on next. Watch our GitHub activity stream. Watch our Waffle Kanban board: Work items in are next. The entire development process is outlined in the Developer Guide. Contact info E-mail: admin@brackets.io Slack: Brackets on Slack (You can join by sending a mail to admin@brackets.io with the subject line slack registration request specifying the email addresses you would like to register). Developers mailing list: http://groups.google.com/group/brackets-dev Twitter: @brackets Blog: http://blog.brackets.io/ IRC: #brackets on freenode Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/adobe/brackets"	"adds support for ColdFusion Markup Language (CFML) to"	"true"
"Editors"	"CFEclipse"	"http://cfeclipse.org"	"CFML Plugin for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"58"	"20"	"16"	"GitHub - cfeclipse/cfeclipse: cfeclipse Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 58 Fork 16 cfeclipse/cfeclipse Code Issues 24 Pull requests 0 Wiki Pulse Graphs cfeclipse http://cfeclipse.org 2,303 commits 4 branches 0 releases Fetching contributors Java 86.8% ColdFusion 9.9% HTML 2.7% XSLT 0.4% CSS 0.1% AppleScript 0.1% Java ColdFusion HTML XSLT CSS AppleScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master multiedit rc1.4.6 Nothing to show Nothing to show New pull request Latest commit d25e4a7 May 22, 2016 denuno update what's new issues, push release build Permalink Failed to load latest commit information. .settings might as well add the settings, as some are already in there Dec 13, 2015 org.cfeclipse.cfeclipsecall.plugin might as well add the settings, as some are already in there Dec 13, 2015 org.cfeclipse.cfeclipsecall removed useless root .project and datestamps from some eclipse configs Feb 9, 2014 org.cfeclipse.cfml.cfunit might as well add the settings, as some are already in there Dec 13, 2015 org.cfeclipse.cfml.docsharesupport.feature might as well add the settings, as some are already in there Dec 13, 2015 org.cfeclipse.cfml.docsharesupport might as well add the settings, as some are already in there Dec 13, 2015 org.cfeclipse.cfml.feature bump version Apr 26, 2016 org.cfeclipse.cfml.frameworks.fusebox gets rid of build errors (cosmetic; probably we should ditch this Sep 25, 2011 org.cfeclipse.cfml.frameworks might as well add the settings, as some are already in there Dec 13, 2015 org.cfeclipse.cfml.platform.feature might as well add the settings, as some are already in there Dec 13, 2015 org.cfeclipse.cfml.product might as well add the settings, as some are already in there Dec 13, 2015 org.cfeclipse.cfml.snippets.feature might as well add the settings, as some are already in there Dec 13, 2015 org.cfeclipse.cfml.snippets.update might as well add the settings, as some are already in there Dec 13, 2015 org.cfeclipse.cfml.snippets might as well add the settings, as some are already in there Dec 13, 2015 org.cfeclipse.cfml.templates.fragment might as well add the settings, as some are already in there Dec 13, 2015 org.cfeclipse.cfml.update-dev 46: update releng to publish tycho built artifacts Dec 9, 2015 org.cfeclipse.cfml.update-nightly 44: Move from Buckminster to Tycho Dec 2, 2015 org.cfeclipse.cfml.update add category file Apr 22, 2016 org.cfeclipse.cfml update what's new issues, push release build May 22, 2016 org.cfeclipse.snipex.server moves stuff into position-ish May 28, 2011 .gitignore 46: update releng to publish tycho built artifacts Dec 9, 2015 .project 44: Move from Buckminster to Tycho Dec 3, 2015 README.md update readme and test CI Mar 4, 2014 pom.xml 46: update releng to publish tycho built artifacts Dec 9, 2015 README.md CFEclipse Project The goal of the CFEclipse project is to create a plugin for the Eclipse platform that provides a professional quality IDE for CFML developers. CFEclipse offers all of the features found in traditional CFML editors and several that are unique to CFEclipse. As well as allowing developers to take advantage of the wealth of other Eclipse plugins, CFEclipse comes with a developer friendly price tag... It's FREE! CFEclipse is an open-source project solely supported by volunteers! See http://www.cfeclipse.org for information Projects included in this repository org.cfeclipse.cfeclipsecall org.cfeclipse.cfeclipsecall-plugin org.cfeclipse.cfml : Main CFEclipse Plugin org.cfeclipse.cfml.cfunit org.cfeclipse.cfml.docsharesupport org.cfeclipse.cfml.docsharesupport.feature org.cfeclipse.cfml.feature org.cfeclipse.cfml.frameworks org.cfeclipse.cfml.frameworks.fusebox org.cfeclipse.cfml.snippets org.cfeclipse.cfml.snippets.update org.cfeclipse.cfml.templates.fragment org.cfeclipse.cfml.update org.cfeclipse.cfml.update-dev org.cfeclipse.cfml.update-nightly org.cfeclipse.snipex.server svn Building CFEclipse Checkout the cfeclipse-releng project from https://github.com/cfeclipse/cfeclipse-releng.git run: cfeclipse-releng build to build the master branch or: cfeclipse-releng build build.type=dev to build the develop branch. See the wiki to find out how the guts of it work Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cfeclipse/cfeclipse"	"CFML Plugin for"	"true"
"Editors"	"Eclipse"	"http://www.eclipse.org/"	"CFML Plugin for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Eclipse Neon Skip to main content Create account Log in Download Download Getting Started Members Projects Community Marketplace Events Planet Eclipse Newsletter Videos Participate Report a Bug Forums Mailing Lists Wiki IRC How to Contribute Working Groups Automotive Internet of Things LocationTech Long-Term Support PolarSys Science OpenMDM More Community Marketplace Events Planet Eclipse Newsletter Videos Participate Report a Bug Forums Mailing Lists Wiki IRC How to Contribute Working Groups Automotive Internet of Things LocationTech Long-Term Support PolarSys Science OpenMDM Toggle navigation neon Download Other Package Downloads Click here to continue to eclipse.org Highlights 1 New tools for JavaScript developers, including a JSON editor, support for Grunt/Gulp and new Chromium V8 Debugger. 2 Key Eclipse Platform improvements include HiDPI support and autosave. JDT's Content Assist now highlights matched characters and provides substring completion. 3 New Eclipse PDT 4.0 release for PHP developers with complete support for PHP 7 and improved performance. 4 The Eclipse Automated Error Reporting client can now be integrated into any third-party Eclipse plug-in or standalone RCP application. 5 Eclipse users can now save settings, like Marketplace Favorites, with their Eclipse account. 6 New Projects: Eclipse Plug-ins for Gradle (first prime release), EGerrit, Paho, Andmore - Eclipse Android Tooling, EMF Parsley and Eclipse Tools for Cloud Foundry. 7 Improved support for Docker tooling. Resources Features Projects Donate Get your limited edition Neon T-Shirt! Let's get Social Press Release 2016/06/22 Eclipse Neon Release Train Now Available News 2016/06/22 Eclipse's annual release train focuses on JavaScript, PHP 2016/06/22 Eclipse Foundation Releases Neon Webinar Series Details can be found here, or register below. 001 Eclipse Neon and Beyond - The JDT Perspective Watch Now 002 JSDT 2.0 Watch Now 003 The Eclipse User Storage Service: Creating a Better User Experience for Developers Watch Now 004 Eclipse Tools for Cloud Foundry Overview Watch Now 005 What's New for PHP Developers in Eclipse Neon? Watch Now 006 Docker Tooling for Eclipse Neon Watch Now 007 Automated Error Reporting (AERI) now available for any Eclipse Plugin Watch Now #EclipseNeon #eclipseneon Tweets Back to the top Eclipse Foundation About us Contact Us Donate Governance Logo and Artwork Board of Directors Legal Privacy Policy Updated Terms of Use Updated Copyright Agent Eclipse Public License Legal Resources Useful Links Report a Bug Documentation How to Contribute Mailing Lists Forums Marketplace Other IDE and Tools Community of Projects Working Groups Copyright © 2016 The Eclipse Foundation. All Rights Reserved. Back to the top"	"null"	"null"	"CFML Plugin for"	"true"
"Editors"	"CFML Language for Atom"	"https://github.com/atuttle/atom-language-cfml"	"CFML Language plugin for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"36"	"20"	"28"	"GitHub - atuttle/atom-language-cfml: A CFML Language for the Atom Editor Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 36 Fork 28 atuttle/atom-language-cfml Code Issues 11 Pull requests 0 Wiki Pulse Graphs 👾 A CFML Language for the Atom Editor 139 commits 2 branches 26 releases Fetching contributors CoffeeScript 62.5% JavaScript 37.5% CoffeeScript JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master merge_with_sublime_text_3_grammar Nothing to show v0.14.0 v0.13.0 v0.12.0 v0.11.0 v0.10.0 v0.9.0 v0.8.8 v0.8.7 v0.8.6 v0.8.5 v0.8.4 v0.8.3 v0.8.2 v0.8.1 v0.8.0 v0.7.1 v0.7.0 v0.6.0 v0.5.1 v0.5.0 v0.4.0 v0.3.1 v0.3.0 v0.2.1 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit e50650e Jun 23, 2016 atuttle Prepare 0.14.0 release Permalink Failed to load latest commit information. grammars add support for custom tag highlighting, add a custom tag test, remov… Jun 22, 2016 lib Update languageCFML.js Jul 9, 2015 settings Changes cfscript line/block comments from /**/ to // Aug 21, 2015 snippets added QueryExecute snippit Jul 25, 2015 spec add support for custom tag highlighting, add a custom tag test, remov… Jun 22, 2016 .travis.yml Add Travis CI support Oct 19, 2015 README.md Add rough guide to adding tests to the repo Nov 6, 2015 package.json Prepare 0.14.0 release Jun 23, 2016 README.md CFML Grammar for Atom This project is based on an auto-generated conversion of the official CFML TextMate Bundle, and is under active development. Pull requests welcome. Tests Command line: Run apm test from the package directory. Atom: Open the package in Atom. Choose Run Package Specs from View -> Developer, the Command Pallete, or the keyboard shortcut. Contributing to Tests (a rough guide) Create an it('test description', function() {}); that describes the scenario. Tokenize the line, e.g. var tokens = grammar.tokenizeLines('<cfcomponent name=""Test Component"">'); Make assertions about what classes the line should have. (I usually console.log(tokens); to see what is coming and add new selectors where I think they should be.) Submit a pull request with your new test(s). You don't even have to fix the bug (though it would be awesome if you can)! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/atuttle/atom-language-cfml"	"CFML Language plugin for"	"true"
"Editors"	"Atom"	"https://atom.io/"	"CFML Language plugin for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"29148"	"1723"	"4975"	"GitHub - atom/atom: The hackable text editor Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,723 Star 29,148 Fork 4,975 atom/atom Code Issues 1,715 Pull requests 107 Pulse Graphs The hackable text editor https://atom.io 29,083 commits 69 branches 304 releases 312 contributors CoffeeScript 86.3% JavaScript 12.0% CSS 1.2% Other 0.5% CoffeeScript JavaScript CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.5-releases 1.6-releases 1.7-releases 1.8-releases 1.9-releases as-introduce-editor-update as-ns-use-apm-with-npm3-and-node-4 as-use-marker-layer-update-events bf-alternative-test-runner bf-destroy-markers-from-display-buffer bf-suppress-logging bf-test-runner-fixes bump-spell-check dh-dont-hide-activation-errors-in-test dr-portable-mode-mac dr-wait-linux dr-windows-default-app-filetype enable-polymer expose-updates fold-comment-with-empty-line gjt-local-apm io-circle-ci iz-close-window-with-last-tab iz-fix-getCurrentWordBufferRange iz-open-locations-and-search-all-panes jf-add-travis-bits jf-ensure-env-works-when-restoring-windows jf/fix-apm-build-issues jl-local-apm ks-rebuild-incompatible-modules ku-buffer-pool ku-fix-cwd ld-change-range-event ld-glob-link ld-set-active-item master mb-1.8-release mb-1.9-releases mb-fix-windows-build mb-optimize-package-load mb-publish-artifacts-from-appveyor mb-side-by-side-windows-installer mkt-damieng-dg-windows-build-install-path mkt-fix-1-7-beta-0-release mkt-url-based-command-dispatch mkt-use-apm-with-npm3-and-node-4 move-lines-up-and-down-with-multiple-selections mq-cursor-is-visible mq-default-cursor mq-fix-flaky-specs mq-system-fonts-redux mq-zoom-scroll ns-appveyor-experimentation ns-mb-detangle-editor ns-no-polling ns-simplify-build ns-skip-deleted-project-paths ns-test-apm-upgrade ns-test-build ns-upgrade-electron oggy-descriptive-enums pb-hidden-inset scroll-away-from-bottom-panels settings-view-228 text-input tj-upgrade-deprecated-packages windows-system-settings wl-async-dialog wl-update-language-git Nothing to show v1.9.0-beta0 v1.8.0 v1.8.0-beta4 v1.8.0-beta3 v1.8.0-beta2 v1.8.0-beta1 v1.8.0-beta0 v1.7.4 v1.7.3 v1.7.2 v1.7.1 v1.7.0 v1.7.0-beta5 v1.7.0-beta4 v1.7.0-beta3 v1.7.0-beta2 v1.7.0-beta1 v1.7.0-beta0 v1.6.2 v1.6.1 v1.6.0 v1.6.0-beta8 v1.6.0-beta7 v1.6.0-beta6 v1.6.0-beta5 v1.6.0-beta4 v1.6.0-beta3 v1.6.0-beta2 v1.6.0-beta1 v1.6.0-beta0 v1.5.4 v1.5.3 v1.5.2 v1.5.1 v1.5.0 v1.5.0-beta3 v1.5.0-beta2 v1.5.0-beta1 v1.5.0-beta0 v1.4.3 v1.4.2 v1.4.1 v1.4.0 v1.4.0-beta3 v1.4.0-beta2 v1.4.0-beta1 v1.4.0-beta0 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.3.0-beta7 v1.3.0-beta6 v1.3.0-beta5 v1.3.0-beta4 v1.3.0-beta3 v1.3.0-beta2 v1.3.0-beta1 v1.3.0-beta0 v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.2.0-beta3 v1.2.0-beta2 v1.2.0-beta1 v1.2.0-beta0 v1.1.0 v1.1.0-beta1 v1.1.0-beta.0 v1.0.19 v1.0.18 v1.0.17 v1.0.16 v1.0.15 v1.0.14 v1.0.13 v1.0.12 v1.0.11 v1.0.10 v1.0.9 v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.211.0 v0.210.0 v0.209.0 v0.208.0 v0.207.0 v0.206.0 v0.205.0 v0.204.0 v0.203.0 Nothing to show New pull request Latest commit 0708140 Jul 14, 2016 maxbrunsfeld committed on GitHub Merge pull request #12167 from atom/mb-remove-nodegit … Stop using nodegit for now Permalink Failed to load latest commit information. apm apm@1.10.0 May 1, 2016 build Merge pull request #12037 from atom/publish-win32-assets-from-appveyor Jul 3, 2016 docs update nodejs installation instructions link for Fedora/Centos/RHEL Jul 4, 2016 dot-atom Replace OS X and Mac OS with macOS Jun 18, 2016 exports Remove GitRepositoryAsync Jul 13, 2016 keymaps Add Ctrl+F4 keybinding for Linux Apr 21, 2016 menus Copy active item when splitting from TextEditor context menu Apr 16, 2016 resources Ensure Cygwin + Msys compatibility on Windows May 24, 2016 script Clear out apm folder in cibuild Jul 14, 2016 spec Remove GitRepositoryAsync Jul 13, 2016 src Remove usage of repository.async in Workspace Jul 13, 2016 static Introduce @use-custom-controls variable Jul 12, 2016 vendor Allow elements to be passed to toContain matcher Sep 18, 2015 .coffeelintignore Remove mentions of benchmarks from the build, command palette Sep 18, 2015 .gitattributes Optimize bash Windows, force LF line endings May 16, 2016 .gitignore add out/ to gitignore Mar 1, 2016 .npmrc Try just setting the target? Dec 28, 2015 .pairs Add Daniel to pairs file Jun 26, 2014 .python-version use nodejs v0.10.33 and python 2.7.6 Dec 8, 2014 .travis.yml Cache other node_modules folders on Travis Feb 4, 2016 CHANGELOG.md CHANGELOG.md Jan 11, 2016 CODE_OF_CONDUCT.md Update to v1.4 of Contributor Covenent Code of Conduct May 5, 2016 CONTRIBUTING.md OSX -> macOS Jun 20, 2016 Dockerfile Only log install errors Mar 26, 2015 ISSUE_TEMPLATE.md Correctly link the debugging guide Apr 11, 2016 LICENSE.md Update license year to 2016 Jan 16, 2016 README.md mac-os -> macos Jun 18, 2016 appveyor.yml Add MSI output for AppVeyor artifact list May 19, 2016 atom.sh Make cli atom --wait work on Cygwin Mar 7, 2016 circle.yml build only my experimental branch on circle Feb 26, 2016 coffeelint.json Remove newlines_after_classes rule May 22, 2015 package.json Upgrade to minor releases of packages Jul 14, 2016 README.md Atom is a hackable text editor for the 21st century, built on Electron, and based on everything we love about our favorite editors. We designed it to be deeply customizable, but still approachable using the default configuration. Visit atom.io to learn more or visit the Atom forum. Follow @AtomEditor on Twitter for important announcements. This project adheres to the Contributor Covenant code of conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to atom@github.com. Documentation If you want to read about using Atom or developing packages in Atom, the Atom Flight Manual is free and available online. You can find the source to the manual in atom/flight-manual.atom.io. The API reference for developing packages is also documented on Atom.io. Installing Prerequisites Git macOS Download the latest Atom release. Atom will automatically update when a new release is available. Windows Download the latest AtomSetup.exe installer. Atom will automatically update when a new release is available. You can also download an atom-windows.zip file from the releases page. The .zip version will not automatically update. Using chocolatey? Run cinst Atom to install the latest version of Atom. Debian Linux (Ubuntu) Currently only a 64-bit version is available. Download atom-amd64.deb from the Atom releases page. Run sudo dpkg --install atom-amd64.deb on the downloaded package. Launch Atom using the installed atom command. The Linux version does not currently automatically update so you will need to repeat these steps to upgrade to future releases. Red Hat Linux (Fedora 21 and under, CentOS, Red Hat) Currently only a 64-bit version is available. Download atom.x86_64.rpm from the Atom releases page. Run sudo yum localinstall atom.x86_64.rpm on the downloaded package. Launch Atom using the installed atom command. The Linux version does not currently automatically update so you will need to repeat these steps to upgrade to future releases. Fedora 22+ Currently only a 64-bit version is available. Download atom.x86_64.rpm from the Atom releases page. Run sudo dnf install ./atom.x86_64.rpm on the downloaded package. Launch Atom using the installed atom command. The Linux version does not currently automatically update so you will need to repeat these steps to upgrade to future releases. Archive extraction An archive is available for people who don't want to install atom as root. This version enables you to install multiple Atom versions in parallel. It has been built on Ubuntu 64-bit, but should be compatible with other Linux distributions. Install dependencies (on Ubuntu): sudo apt install git gconf2 gconf-service libgtk2.0-0 libudev1 libgcrypt20 libnotify4 libxtst6 libnss3 python gvfs-bin xdg-utils libcap2 Download atom-amd64.tar.gz from the Atom releases page. Run tar xf atom-amd64.tar.gz in the directory where you want to extract the Atom folder. Launch Atom using the installed atom command from the newly extracted directory. The Linux version does not currently automatically update so you will need to repeat these steps to upgrade to future releases. Building Linux macOS FreeBSD Windows Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/atom/atom"	"CFML Language plugin for"	"true"
"Editors"	"Sublime Text ColdFusion Package"	"https://github.com/sublimetext/coldfusion"	"ColdFusion syntax and snippets for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"201"	"76"	"78"	"GitHub - SublimeText/ColdFusion: ColdFusion Sublime Text Package Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 76 Star 201 Fork 78 SublimeText/ColdFusion Code Issues 29 Pull requests 5 Pulse Graphs ColdFusion Sublime Text Package 581 commits 3 branches 0 releases 13 contributors Python 92.7% JavaScript 6.8% ColdFusion 0.5% Python JavaScript ColdFusion Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags development master st3-readme Nothing to show Nothing to show New pull request Latest commit c54a4c5 Sep 6, 2015 atuttle Merge pull request #168 from pchaigno/license-file … License text in LICENSE file Permalink Failed to load latest commit information. importer Update importer, and implement CF10 with backwards compatibility to CF7. Jun 24, 2012 snippets/cfscript prevents snippets from triggering in meta scope Jun 27, 2012 taglib Update importer, and implement CF10 with backwards compatibility to CF7. Jun 25, 2012 .gitignore gitignore Sep 12, 2012 CFScript.sublime-completions removes new line in var cfscript completion Oct 21, 2012 CFScript.tmPreferences enabled line comments in cfscript Feb 3, 2012 CFScriptEmbedded.tmPreferences refactor May 29, 2012 CFScriptFunctionArgs.sublime-completions fixes cfscript meta.function.parameters completions Dec 8, 2012 Cfscript.tmLanguage Adding support for the dollar sign ($) in a function name. This is a … Jun 25, 2013 ColdFusion.sublime-settings changes default auto_indent_on_close to true Oct 9, 2012 ColdFusion.tmPreferences adds cftrace to decreaseindent #85 Sep 21, 2012 ColdFusionCFC.tmLanguage adds missing punctuation definition for cfc cfml comment blocks Sep 17, 2012 Coldfusion.tmLanguage closes #108 punctuation.definition.tag.begin/end is used to match tag… Feb 15, 2013 Default (OSX).sublime-keymap allows dot completions in between hash tags closes #102 Nov 1, 2012 Default.sublime-commands Changed CFLIB ColdFusion command caption adds CFlib for faster fuzzy … Jun 4, 2012 Default.sublime-keymap allows dot completions in between hash tags closes #102 Nov 1, 2012 HTML+CFML.tmLanguage bad regex here, errant unnecessary asterisk Feb 13, 2013 JavaDoc Add Line.sublime-macro added Java Doc style keyboard shortcuts and macros for inserting aste… Jan 24, 2012 JavaDoc Delete Line.sublime-macro removed add line before macro for JavaDock and shortcuts Jan 24, 2012 LICENSE License text in LICENSE file Sep 5, 2015 Main.sublime-menu added key mappings to menu Jun 28, 2012 Symbol List Queries.tmPreferences added symbol support for cfscript queries Feb 9, 2012 Symbol List.tmPreferences removed function name meta.toc-list.function (not needed) Feb 23, 2012 Terminate Statement.sublime-macro use ctrl+enter or arrow keys to move to the next line May 24, 2012 brackets.tmPreferences #66 changes brackets.tmPreferences to use default javascript style cu… Sep 8, 2012 cflib.py attempt fix #65 - moves getCategories() from constructor to run function Sep 9, 2012 cfml.py no docs for on_query_completions but this works Jun 24, 2012 coldfusiontagcompletions.py Changes tag attribute completions scope to just meta.tag so that it w… Dec 4, 2012 functioncompletions.py pass IOError cfc_file file not found Aug 1, 2012 ondotcompletions.py Regression bug #102 allows inserting periods on multiple selection Nov 14, 2012 package-metadata.json updates package json Jun 24, 2012 readme.md Fixing dead link to old Package control site Mar 21, 2015 tagoperators.py fixes auto-complete for component tag operator attributes Dec 3, 2012 readme.md ColdFusion Package for Sublime Text Sublime Text 3 The development branch contains a rewrite of the ColdFusion plugin. The only installation method is via Git. cd Packages/ git clone https://github.com/SublimeText/ColdFusion.git cd ColdFusion git checkout development  CFLIB Command is not currently working. Tag Operator Completions is not yet implemented CFScript component method completions is not yet implemented Only CF10 Dictionary is imported. What's New Added Tag Operator completions for cfscript (10/21/12) Added CFScript component method completions (6/28/12) Added ""auto_close_cfml"", ""auto_indent_on_close"" settings (6/25/12) Added Tag Attribute completions (6/24/12) Added Command ColdFusion: Insert CFlib UDF (6/2/12) Features ColdFusion cfml, and script-based CFCs syntax highlighting. (see tmLanguage files) Auto inserts closing hash # (see Default (platform).sublime-keymap) Provides completions that match just after typing an opening angle bracket (see cfml_completions.py) Auto Complete ColdFusion Tags and Attributes (opt. cf7, cf8, cf9 & cf10) ColdFusion specific key bindings (see Default (platform).sublime-keymap) Installation The recommended method of installation is via Package Control. Package Control Follow instructions on https://packagecontrol.io/installation Install using Package Control: Install > ColdFusion package Using Git Go to your Sublime Text 2 Packages directory and clone the repository using the command below: git clone https://github.com/SublimeText/ColdFusion  Download Manually Download the files using the GitHub .zip download option Unzip the files and rename the folder to ColdFusion Copy the folder to your Sublime Text 2 Packages directory Key bindings Some packages will override key bindings. If you have problems with a specific key shortcut, you can add it to your User - Key Bindings file Preferences > Key Bindings - User You can also use sublime.log_commands(True) in the console (ctrl+~) to output key presses and their corresponding command to the console pane. ⇧+# #SELECTION# Ctrl+⇧+O <cfoutput>SELECTION</cfoutput> Ctrl+⇧+# <cfoutput>#SELECTION#</cfoutput> Ctrl+Alt+A <cfabort /> Ctrl+Alt+D <cfdump var=""#SELECTION#""> Alt+⇧+R <cfscript>SELECTION</cfscript> Ctrl+⇧+/ block comment (cfml/cfscript) Ctrl+Alt+⇧+/ javadoc comment Alt+↩ terminates statement (cfscript) Ctrl+⇧+= <cfset SELECTION /> Many more key bindings are available via Sublime Preferences > Key Bindings - Default Completions and Snippets Although, this package includes CFScript completions (.sublime-completions) and ColdFusion tag completions (API-injected), it's recommended that you create your own custom snippets using code that fits your particular coding style. To create a new snippet select Tools > New Snippet... from the Sublime Text menu. Use <scope>text.html.cfm - string</scope> for ColdFusion markup snippets and <scope>source.cfscript - string</scope> for CFScript snippets. Completions in order of priority are: Snippets API-injected completions .sublime-completions files words in the current buffer The following list contains snippets repositories made available by ColdFusion community members: https://github.com/indynagpal/sublime-stuff https://github.com/bittersweetryan/ColdFusion-Script-Sublime-Snippets To install snippets just put the .sublime-snippet files in your Packages/User folder or sub-folder (to get to your Packages/User folder select Preferences > Browse Packages... from the Sublime Text 2 menu). Custom Themes The following themes optimized for ColdFusion are made available by ColdFusion community members and can be installed with Package Control (http://wbond.net/sublime_packages/community) https://github.com/Siddley/Enhanced.HTML.CFML If you'd like to customize your favorite theme for ColdFusion support, you can use the entity.name.tag.cf scope in your tmTheme file. For example the following definition will use the color #C87551 for all ColdFusion tags: <dict>     <key>name</key>     <string>Meta</string>     <key>scope</key>     <string>meta.tag.block.cf, meta.tag.inline.cf</string>     <key>settings</key>     <dict>         <key>fontStyle</key>         <string></string>         <key>foreground</key>         <string>#C87551</string>     </dict> </dict> <!-- this will color ColdFusion tag name --> <dict>     <key>name</key>     <string>Entity</string>     <key>scope</key>     <string>entity.name.tag.cf</string>     <key>settings</key>     <dict>         <key>fontStyle</key>         <string></string>         <key>foreground</key>         <string>#C87551</string>     </dict> </dict>  You can use Ctrl+Alt+⇧+P to get the scope name at the cursor position for more theme customizing . Development Branch To help test the development branch you can install it by dowloading the zip and copying the contents to the Packages/ColdFusion folder. Alternatively, you can use git to install the ColdFusion package as mentioned above and switch to the development tracking branch using: git checkout development  Additional Packages Some additional packages you might want to check out - they are all available through Package Control http://wbond.net/sublime_packages/community http://net.tutsplus.com/articles/news/introducing-nettuts-fetch/ (highly recommended) https://github.com/BoundInCode/AutoFileName (provides file auto-complete) https://github.com/weslly/ColorPicker (choose a color and get the hex code) https://github.com/xobb1t/Sublime-AdvancedNewFile (create new files faster) https://github.com/kemayo/sublime-text-2-git (git commands) https://github.com/facelessuser/ExportHtml (provides printing) https://github.com/dz0ny/LiveReload-sublimetext2 (live reload browser) https://github.com/bgreenlee/sublime-github (github gists and more) https://github.com/virtix/sublime-text-2-mxunit (mxunit testing) https://github.com/seancoyne/farcry-sublimetext (farcry snippets) These packages require manual installation https://github.com/adampresley/sublime-cf-js-log-finder (debug output finder) https://github.com/timsayshey/Sublime-Text-CFWheels (cfwheels plugin) https://github.com/DominicWatson/SublimeText2CfQuickDocsLauncher (cfml documentation) License Copyright (c) 2012 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sublimetext/coldfusion"	"ColdFusion syntax and snippets for"	"true"
"Editors"	"Sublime Text 2/3"	"http://www.sublimetext.com"	"ColdFusion syntax and snippets for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Sublime Text: The text editor you'll fall in love with Home Download Buy Blog Forum Support Sublime Text Sublime Text is a sophisticated text editor for code, markup and prose. You'll love the slick user interface, extraordinary features and amazing performance. ◀   1 / 6   ▶ Use Multiple Selections to rename variables quickly. Here Ctrl+D⌘D is used to select the next occurrence of the current word. Make batch edits with Multiple Selections. Here Ctrl+Shift+L⇧⌘L is used to split a selection into lines, and each line is then edited simultaneously. The Command Palette gives fast access to functionality. Here Ctrl+Shift+P⇧⌘P is used to show the Command Palette, ""sspy"" (short for Set Syntax: Python) is used set the syntax of the current file to Python. Use Goto Anything to quickly navigate between files, even in the largest projects. Ctrl+P⌘P shows Goto Anything, and typing then filters on file and directory names. Goto Anything can also be used to show a function, line or word within a file. Type @ after a file name to filter on symbols. More... Find and Replace with regular expressions. Here unwanted whitespace is removed by using the regex "" +"" to find groups of spaces, which are then selected simultaneously with the Find All button. Download for Windows Download for Windows Download for Ubuntu Download for Ubuntu Download for OS X Sublime Text 3, Build 3114, 64 bit, 32 bit Sublime Text may be downloaded and evaluated for free, however a license must be purchased for continued use. There is no enforced time limit for the evaluation. Other Platforms (including tarballs for other Linux distributions) Sublime Text 2 Some things users love about Sublime Text Goto Anything Use Goto Anything to open files with only a few keystrokes, and instantly jump to symbols, lines or words. Triggered with Ctrl+P⌘P, it is possible to: Type part of a file name to open it. Type @ to jump to symbols, # to search within the file, and : to go to a line number. These shortcuts can be combined, so tp@rf may take you to a function read_file within a file text_parser.py. Similarly, tp:100 would take you to line 100 of the same file. Multiple Selections Make ten changes at the same time, not one change ten times. Multiple selections allow you to interactively change many lines at once, rename variables with ease, and manipulate files faster than ever. Try pressing Ctrl+Shift+L⇧⌘L to split the selection into lines and Ctrl+D⌘D to select the next occurrence of the selected word. To make multiple selections with the mouse, take a look at the Column Selection documentation. Command Palette The Command Palette holds infrequently used functionality, like sorting, changing the syntax and changing the indentation settings. With just a few keystrokes, you can search for what you want, without ever having to navigate through the menus or remember obscure key bindings. Show the Command Palette with Ctrl+Shift+P⌘⇧P. Distraction Free Mode When you need to focus, Distraction Free Mode is there to help you out. Distraction Free Mode is full screen, chrome free editing, with nothing but your text in the center of the screen. You can incrementally show elements of the UI, such as tabs and the find panel, as you need them. You can enter Distraction Free Mode using the View/Enter Distraction Free Mode menu. Split Editing Get the most out of your wide screen monitor with split editing support. Edit files side by side, or edit two locations in the one file. You can edit with as many rows and columns as you wish. Take advantage of multiple monitors by editing with multiple windows, and using multiple splits in each window. Take a look at the View/Layout menu for split editing options. To open multiple views into the one file, use the File/New View into File menu item. Instant Project Switch Projects in Sublime Text capture the full contents of the workspace, including modified and unsaved files. You can switch between projects in a manner similar to Goto Anything, and the switch is instant, with no save prompts - all your modifications will be restored next time the project is opened. Plugin API Sublime Text has a powerful, Python based plugin API. Along with the API, it comes with a built in Python console to interactively experiment in real time. Customize Anything Key Bindings, Menus, Snippets, Macros, Completions and more - just about everything in Sublime Text is customizable with simple JSON files. This system gives you flexibility as settings can be specified on a per-file type and per-project basis. Cross Platform Sublime Text is available for OS X, Windows and Linux. One license is all you need to use Sublime Text on every computer you own, no matter what operating system it uses. Sublime Text uses a custom UI toolkit, optimized for speed and beauty, while taking advantage of native functionality on each platform. Sublime Text is available for OS X, Windows and Linux."	"null"	"null"	"ColdFusion syntax and snippets for"	"true"
"Editors"	"TextMate"	"https://github.com/textmate/coldfusion.tmbundle"	"support for ColdFusion"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"11"	"4"	"9"	"GitHub - textmate/coldfusion.tmbundle: TextMate support for ColdFusion Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 11 Fork 9 textmate/coldfusion.tmbundle Code Issues 0 Pull requests 0 Pulse Graphs TextMate support for ColdFusion 27 commits 2 branches 0 releases Fetching contributors Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master textmate-1.x Nothing to show Nothing to show New pull request Latest commit 58cf43d Jan 25, 2013 zurielb committed with infininight Updated the grammar with the Coldfusion 9 CFTextmate grammar … - Proper styling for html and coldfusion style comments - Proper highlighting of doctypes and dtds - Proper highlighting of embedded Javascript - Proper highlighting of cfquery (normally has embedded SQL Statements) - Inclusion of cfscripts and cffunctions into the symbols submenu - Inclusion of any html element with an id into the symbols submenu - Adapted from the great work by Andy Jarrett (@andyj) on CFTextMate Permalink Failed to load latest commit information. Preferences Added a folding at the function and case levels Jan 29, 2013 Snippets Syntaxes Updated the grammar with the Coldfusion 9 CFTextmate grammar Feb 4, 2013 README.mdown info.plist README.mdown Installation You can install this bundle in TextMate by opening the preferences and going to the bundles tab. After installation it will be automatically updated for you. General Bundle Styleguide — before you make changes Commit Styleguide — before you send a pull request Writing Bug Reports — before you report an issue License If not otherwise specified (see below), files in this repository fall under the following license: Permission to copy, use, modify, sell and distribute this software is granted. This software is provided ""as is"" without express or implied warranty, and with no claim as to its suitability for any purpose.  An exception is made for files in readable text which contain their own license information, or files where an accompanying file exists (in the same directory) with a “-license” suffix added to the base-name name of the original file, and an extension of txt, html, or similar. For example “tidy” is accompanied by “tidy-license.txt”. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/textmate/coldfusion.tmbundle"	"support for ColdFusion"	"true"
"Editors"	"TextMate"	"http://macromates.com"	"support for ColdFusion"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"TextMate — The Missing Editor for Mac OS X TextMate — the missing editor for Mac OS X Intro Blog Manual Wiki Support TextMate brings Apple's approach to operating systems into the world of text editors. By bridging UNIX underpinnings and GUI, TextMate cherry-picks the best of both worlds to the benefit of expert scripters and novice users alike. Whether you are a programmer or a designer, the production of code and markup is hard work. Without an editor dedicated to the task, it is also often cumbersome, overwhelming, and repetitive. Especially when you are dealing with a lot of files at once — like most projects do. TextMate puts you back in control, reduces the mental overhead, and turns manual work into something the computer does. Created by a closet UNIX geek who was lured to the Mac platform by its ease of use and elegance, TextMate has been referred to as the culmination of Emacs and OS X and has resulted in countless requests for both a Windows and Linux port, but TextMate remains exclusive for the Mac, and that is how we like it! TextMate is not an IDE but by using its powerful snippets, macros, and unique scoping system, it can often provide features that even a language specific IDE lacks. It has enough project management features to keep most users happy, but is otherwise kept lightweight with a clean and minimalistic GUI. A list of highlights follow, you can follow the links to learn more. Ability to Search and Replace in a Project Auto-Indent for Common Actions Like Pasting Text Auto-Pairing of Brackets and Other Characters Clipboard History Column Selections and Column Typing Completion of Words from Current Document CSS-like Selectors to Pinpoint the Scope of Actions and Settings Declarative Language Grammars for Graceful Mixing and Hacking Dynamic Outline for Working With Multiple Files Expand Trigger Words to Code Blocks With Tab-able Placeholders File Tabs when Working With Projects Foldable Code Blocks Function Pop-up for Quick Overview and Navigation Plug-able Through Your Favorite Scripting Language Recordable Macros With No Programming Required Regular Expression Search and Replace (grep) Run Shell Commands from Within a Document Support for Darcs, Perforce, SVK, and Subversion Support for More Than 50 Languages Switch Between Files in Projects With a Minimum of Key Strokes Themable Syntax Highlight Colors Visual Bookmarks to Jump Between Places in a File Works As External Editor for (s)ftp Programs Works Together With Xcode and Can Build Xcode Projects Download TextMate Download TextMate 2.0 beta or 1.5 for OS X 10.4-6 Purchase TextMate Purchase Policy & Group Discount Lost Your License Key? Documentation Documentation Visit the Printable Version …or read it online TextMate Screencasts TextMate in Action Watch screencasts featuring TextMate. Buy the Book Buy the Book! Read the TextMate book by James Edward Gray II User Quotes User Quotes Version Tracker Mac Update RSS Feed Subscribe to Blog All Blog Posts All Comments MacroMates Ltd. — Cyprus — HE 259033 — VAT CY-10259033P"	"null"	"null"	"support for ColdFusion"	"true"
"Tools"	"CommandBox"	"https://github.com/Ortus-Solutions/commandbox"	"ColdFusion (CFML) CLI, Package Manager, REPL and more"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"26"	"10"	"28"	"GitHub - Ortus-Solutions/commandbox: CommandBox ColdFusion (CFML) CLI, Package Manager, REPL and more Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 26 Fork 28 Ortus-Solutions/commandbox Code Pull requests 0 Pulse Graphs CommandBox ColdFusion (CFML) CLI, Package Manager, REPL and more http://www.ortussolutions.com 1,231 commits 7 branches 11 releases Fetching contributors ColdFusion 94.4% Java 4.7% Shell 0.3% Batchfile 0.3% HTML 0.2% Ruby 0.1% ColdFusion Java Shell Batchfile HTML Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: development Switch branches/tags Branches Tags 3.0.1 development forgebox-2.0 forgebox-publish master multi-server server.json Nothing to show v3.1.1 v3.1.0 v3.0.1 v3.0.0 v2.2.0 v2.1.1 v2.1.0 v2.0.0 v1.1.1 v1.1.0 v1.0.0 Nothing to show New pull request Latest commit 9e238a7 Jul 6, 2016 bdw429s COMMANDBOX-408 Permalink Failed to load latest commit information. apidocs COMMANDBOX-353 #resolve Mar 22, 2016 build Bumping 3.2.0-snapshot version Jul 3, 2016 src COMMANDBOX-408 Jul 6, 2016 tests COMMANDBOX-407 Jul 3, 2016 .classpath https://ortussolutions.atlassian.net/browse/COMMANDBOX-256 #resolve Aug 12, 2015 .gitignore don't add config to source Jun 30, 2016 .project Created global utility class template, userconfig template, more synt… May 2, 2014 box-cli fix incorrect path to cfdistro Jun 9, 2014 box-cli.bat moved batch resource to build/resource Jun 4, 2014 license.txt Updated license to LGPL v3 Jun 3, 2014 readme.md Removed outdated Brew refernces Aug 26, 2015 readme.md    _____                                          _ ____               / ____|                                        | |  _ \             | |     ___  _ __ ___  _ __ ___   __ _ _ __   __| | |_) | _____  __  | |    / _ \| '_ ` _ \| '_ ` _ \ / _` | '_ \ / _` |  _ < / _ \ \/ /  | |___| (_) | | | | | | | | | | | (_| | | | | (_| | |_) | (_) >  <    \_____\___/|_| |_| |_|_| |_| |_|\__,_|_| |_|\__,_|____/ \___/_/\_\  WELCOME TO COMMANDBOX CommandBox ColdFusion (CFML) CLI, Package Manager, REPL and much more! Trademark + Copyright since 2014 by Ortus Solutions, Corp All products by Ortus Solutions HONOR GOES TO GOD ABOVE ALL FOR HIS WISDOM FOR THIS PROJECT Official Releases Official stable releases can be found at the CommandBox Official Page Integration Releases Download from the Ortus Integration Repository. Just please note that this contains latest bleeding edge releases that might not be stable. Getting Started Guide Get going with CommandBox in a matter of minutes with our Getting Started Guide DOCUMENTATION View our latest installation, usage, and development docs here: General Docs View our latest Command API Docs here: General Docs VERSIONING CommandBox is maintained under the Semantic Versioning guidelines as much as possible. Releases will be numbered with the following format: <major>.<minor>.<patch> And constructed with the following guidelines: Breaking backward compatibility bumps the major (and resets the minor and patch) New additions without breaking backward compatibility bumps the minor (and resets the patch) Bug fixes and misc changes bumps the patch COMMANDBOX LICENSE CommandBox is open source and bound to the LGPL v3 GNU LESSER GENERAL PUBLIC LICENSE Copyright & TradeMark since 2014, Ortus Solutions, Corp This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. CREDITS & CONTRIBUTIONS I have included some software from other open source projects and I have used some code from open source projects in this framework. If I have forgotten to name someone, please send me an email about it. I THANK GOD FOR HIS WISDOM FOR THIS PROJECT THE DAILY BREAD ""I am the way, and the truth, and the life; no one comes to the Father, but by me (JESUS)"" Jn 14:1-12 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Ortus-Solutions/commandbox"	"ColdFusion (CFML) CLI, Package Manager, REPL and more"	"true"
"Tools"	"Unofficial Updater"	"http://www.uu-2.info/"	"A utility that helps install ColdFusion hotfixes"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Unofficial Updater 2 Unofficial Updater 2 The easiest way to patch Adobe ColdFusion 8.0.1 and 9.0.x Download Unofficial Updater 2 Filename: Unofficial-Updater2.jar Release Date: February 14, 2015 MD5 Sum: 6d1dfd6a98eccb8217a2b9ed55cf2209 Latest Patch: APSB14-23 Project Location: GitHub Introduction Unofficial Updater 2 (UU2) is an outgrowth of the frustration that came from trying to manually patch Adobe ColdFusion 8.0.1 with the numerous hot fixes and security bulletins that have been published. It is a tool to provide an easy way of consistently applying applicable hot fixes and security bulletins to Adobe ColdFusion 8.0.1 and 9.0.x. Disclaimers Use of Unofficial Updater 2 is at your own risk Do not run Unofficial Updater 2 for the first time on a production system Unofficial Updater 2 is not endorsed by or have any ties to Adobe Reading Adobe TechNote Important hotfix-related notes for ColdFusion 9 and ColdFusion 10 before running Unofficial Updater 2 is highly recommended ColdFusion Server/process/instance should not be running when you use Unofficial Updater 2 Unofficial Updater 2 can only be run against Adobe ColdFusion 8.0.1, 9.0.0, 9.0.1, or 9.0.2 If you are running 8.0.0 you need to apply Update 1 from Adobe first Adobe ColdFusion 8 Update 1 Unofficial Updater 2 is updated whenever Adobe releases a new (or changes) a hot fix or security bulletin Matrix of published hot fixes and security bulletins Hot Fix Matrix: ColdFusion 8.0.1 Hot Fix Matrix: ColdFusion 9.0.0 Hot Fix Matrix: ColdFusion 9.0.1 Hot Fix Matrix: ColdFusion 9.0.2 Unofficial Updater 2 will need to be downloaded and run again when it is updated to apply all new (or changed) hot fix or security bulletin from Adobe Unofficial Updater 2 works in most situations/installs, but if you have something non-standard it might not work Consider contacting a CF-oriented Troubleshooting Consultant to ensure you are properly patched What it does First time you run Unofficial Updater 2, it will download ALL hotfixes and security bulletins from Adobe for both ColdFusion 8.0.1 and 9.0.x. UU2 will create Unofficial-Updater2-with-downloads.jar which contains the downloaded hotfixes and security bulletins. This is done since UU2 can not directly package the updates and will make it easier to patch additional servers without the need of an Internet connection. Once the downloading is complete, UU2 will asks specific questions about how Adobe ColdFusion is installed. It will then produce backups of any directories it will modify. Finally, it will apply the hotfixes and security bulletins according to the published instructions. If you are running Multi-Server JRun or J2EE installs you will need to run UU2 against each instance. UU2 only updates files, it does not modify any settings in ColdFusion such as neo-*.xml or jvm.config. The security hotfixes have introduced new jvm flags in jvm.config and changes to neo-*.xml which are documented in the Adobe TechNote Important hotfix-related notes for ColdFusion 9 and ColdFusion 10 and may need to be manually applied after running UU2 depending upon specific configuration needs. A list of files that Unofficial Updater 2 updates as compared to a clean install of Adobe ColdFusion 8.0.1, 9.0.0, 9.0.1, and 9.0.2 are listed below: File Changes: ColdFusion 8.0.1 Standalone File Changes: ColdFusion 8.0.1 Multi-Server JRun4 File Changes: ColdFusion 8.0.1 J2EE File Changes: ColdFusion 9.0.0 Standalone File Changes: ColdFusion 9.0.0 Multi-Server JRun4 File Changes: ColdFusion 9.0.0 J2EE File Changes: ColdFusion 9.0.1 Standalone File Changes: ColdFusion 9.0.1 Multi-Server JRun4 File Changes: ColdFusion 9.0.1 J2EE File Changes: ColdFusion 9.0.2 Standalone File Changes: ColdFusion 9.0.2 Multi-Server JRun4 File Changes: ColdFusion 9.0.2 J2EE If you have modified files in CFIDE and/or WEB-INF they could be changed due to files contained in the updates from Adobe. How to use Download the packaged JAR installer Stop the ColdFusion Server/process/instance you are going to update Depending upon your system you might be able to double-click Unofficial-Updater2.jar to run it, otherwise it will need to be run from command line On Windows might need to Run as Administrator for GUI or opening command prompt Installer (auto-detect GUI or text) java -jar Unofficial-Updater2.jar Force GUI Installer java -jar Unofficial-Updater2.jar swing Force Text Installer java -jar Unofficial-Updater2.jar text Text Installer run as cfusion user on Linux/UNIX su -s /bin/sh ""cfusion"" -c ""java -jar Unofficial-Updater2.jar text"" Text Installer run as root on Linux/UNIX sudo java -jar Unofficial-Updater2.jar text Once Unofficial-Updater2-with-downloads.jar is created, you can use that instead of Unofficial-Updater2.jar Walk through the screens putting the appropriate information Be sure to fill the directory locations correctly, Unofficial Updater 2 will try to validate they are correct before letting you proceed to the next step Finish updater by pressing Apply Updates On OS X/Linux/UNIX verify (and possibly correct) ownership and permission of the files updated Repeat process for all instances for Multi-Server JRun or J2EE deployments, starting with step 2 Please see the Wiki: Using Updater 2 for screenshots and walkthrough. Details At the core, Unofficial Updater 2 is just an Apache Ant script. Ant was chosen since it could provide cross platform support. The ant script was wrapped with Ant Installer to create a GUI and text based interface which only require Java 1.5+ to be installed. Backups Unofficial Updater 2 creates backups of the directories that are modified, but it is HIGHLY recommended that you create your own backups of your ColdFusion installation to restore from in case of a problem. The backups created by UU2 are stored in the directory specified when running UU2 and are named {directory-name}-uu2-{datetime-stamp}.zip ColdFusion 8.0.1 APSB12-21 was the LAST security hotfix Adobe released for ColdFusion 8.0.1 All hot fixes and security bulletins published as of September 11, 2012 for ColdFusion 8.0.1 are applied except if they were superseded by a newer patch and the following: kb404026 - Patch for Performance Monitor with ColdFusion 8.0.1 CVE-2009-1876 - wsconfig.jar update for Apache kb403750 - Using the flexgateway to instantiate multiple instances of CFCs causes objects to be populated as nulls (hf801-71643) Both kb404026 and CVE-2009-1876 require modifications to be done to the system configuration. kb404026 requires ability to modify the Windows registry and CVE-2009-1876 will modify the connector configuration. kb403750 is not installed since it does not seem to resolve all the issues and breaks other things. ColdFusion 9.0.0 All hot fixes and security bulletins published as of October 14, 2014 for ColdFusion 9.0.0 are applied except if they were superseded by a newer patch and the following: cpsid_80719 - ColdFusion 9: Limit access to the Solr collections cpsid_80719 requires modifying jetty.xml which is a system configuration change. ColdFusion 9.0.1 All hot fixes and security bulletins published as of October 14, 2014 for ColdFusion 9.0.1 are applied except if they were superseded by a newer patch. ColdFusion 9.0.2 All hot fixes and security bulletins published as of October 14, 2014 for ColdFusion 9.0.2 are applied except if they were superseded by a newer patch. Additional Notes Please refer to the various technotes about changes to configuration options since Unofficial Updater 2 only updates files, it does not modify any settings in ColdFusion such as neo-*.xml or jvm.config. Cumulative Hotfixes for ColdFusion 9.0.x Cumulative Hotfix 3 for ColdFusion 9.0.0 Cumulative Hotfix 4 for ColdFusion 9.0.1 Cumulative Hotfix 1 for ColdFusion 9.0.2 Security Bulletins APSB11-04 - Security update: Hotfix available for ColdFusion APSB11-14 - Security update: Hotfix available for ColdFusion APSB11-29 - Security update: Hotfix available for ColdFusion APSB12-06 - Security update: Hotfix available for ColdFusion APSB12-15 - Security update: Hotfix available for ColdFusion 9.0.1 and earlier APSB12-21 - Security update: Hotfix available for ColdFusion 10 and earlier APSB12-26 - Security update: Hotfix available for ColdFusion 10 and earlier APSB13-03 - Security update: Hotfix available for ColdFusion APSB13-10 - Security update: Hotfix available for ColdFusion APSB13-13 - Security update: Hotfix available for ColdFusion APSB13-19 - Security update: Hotfix available for ColdFusion APSB13-27 - Security update: Hotfix available for ColdFusion APSB14-23 - Security update: Hotfix available for ColdFusion Additional Information Important hotfix-related notes for ColdFusion 9 and ColdFusion 10 ColdFusion Security Hotfix APSB12-06 and Big Forms Java Support It is highly recommended to update the underlying JVM that ColdFusion uses to the latest available Java 6 (1.6.0) version that is available (Update 45) on ColdFusion 8.0.1 or ColdFusion 9.0.x on Mac OS X. Java 7 (1.7.0) is supported for ColdFusion 9.0.x on Windows (32 and 64 bit), Linux (32 and 64 bit), and Solaris (64 bit) after the CHFs released in March 2013 are applied. Again updating to the latest Java 7 (Update 71/72) is highly recommended. Upgrade Java for ColdFusion How to use ColdFusion with an external JVM Additional Information ColdFusion 9.0.x, Mac OS X, and Java 7 CF911: Have you updated your #ColdFusion JVM to _24 yet? Important security fix for CF 8/9 Oracle, I download your JDK by eating magic cookies  "	"null"	"null"	"A utility that helps install ColdFusion hotfixes"	"true"
