"category"	"name"	"url"	"description"	"star"	"stackOverflow"	"stackOverflowUrl"	"license"	"licenseUrl"	"site"	"userGuide"	"newStars"	"newWatchs"	"newForks"	"pageText"	"newStackOverflow"	"github"	"allText"	"isExist"
"Graphics Libraries"	"DISLIN"	"http://www.mps.mpg.de/dislin/"	"a high-level graphing and user-interface library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"DISLIN | Max Planck Institute for Solar System Research Skip to navigation (Press Enter). Skip to main content (Press Enter). contact prices eula Requirements FTP Servers gcl history links disclaimer Intranet Contact Sitemap Deutsch DISLIN Overview News Examples Gallery Online Manual Printed Manual FAQ Discussion Group Dislin on Facebook Downloads Registration License Request News Nachrichten Dislin Upgrade 10.6.1 25. April 2016 Support of the programming language Julia 20. February 2016 Dislin Version 10.6 is released 18. January 2016 Dislin Upgrade 10.5.4 for the Windows Distributions 1. October 2015 Dislin Upgrade 10.5.3 12. August 2015 New Dislin Distributions for R and Windows 32- and 64-bit 22. July 2015 New Dislin Distribution for FreeBASIC and Windows 32-bit 26. June 2015 Dislin Upgrade 10.5.2 5. May 2015 Dislin Upgrade 10.5.1 19. March 2015 Author Helmut Michels Staff member computer centre Phone: +49 551 384 979-334 Email: michels@... DISLIN Home Page Welcome to the home page of the scientific data plotting software DISLIN. DISLIN is a high-level plotting library for displaying data as curves, polar plots, bar graphs, pie charts, 3D-color plots, surfaces, contours and maps. DISLIN is intended to be a powerful and easy to use software package for scientists and programmers. There are only a few graphics routines with a short parameter list needed to display the desired graphical output. A large variety of parameter setting routines can then be called to create individually customized graphics. The software is available for several C, Fortran 77 and Fortran 90/95 compilers on the operating systems UNIX, Linux, FreeBSD, OpenVMS, Windows, Mac OSX and MS-DOS. DISLIN programs are very system-independent, they can be ported from one operating system to another without any changes. For some operating systems, the programming languages Perl, Python, Java, Ruby and the C/C++ interpreter Ch are also supported by DISLIN. The DISLIN interpreter DISGCL is availble for all supported operating systems. See a complete list of the supported operating systems and compilers. A short description of the DISLIN features is given in Overview while a detailed description is available in the online manual and in the alphabetical list of all DISLIN routines. The online manual can also be downloaded in HTML format as a compressed tar file. A printed book of DISLIN can be ordered here, or directly from the author. Last but not least a PowerPoint presentation of DISLIN is available in the file dislin.ppt. DISLIN is free for non-commercial use. Licenses for commercial use, or for just supporting DISLIN, are available from this site. The DISLIN software and manuals can be downloaded via HTML and from FTP servers.   © 2003-2016, Max-Planck-Gesellschaft, München Imprint Print http://www.mps.mpg.de/dislin"	"null"	"null"	"a high-level graphing and user-interface library."	"true"
"Graphics Libraries"	"f90gl"	"http://math.nist.gov/f90gl/"	"public domain implementation of the official NIST Fortran 90 bindings for OpenGL."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"f90gl: Fortran interface for OpenGL and GLUT [Documentation]... [Software]... [News]... [Related Links] f90gl is a public domain implementation of the official Fortran 90 bindings for OpenGL. The current version is Version 1.2.15 This version implements the interface for OpenGL 1.2, GLU 1.2, GLUT 3.7, and several extensions. It supports several Unix workstations and Windows 95/98/NT. It is also the Fortran interface for Mesa. OpenGL is a software interface for applications to generate interactive 2D and 3D computer graphics independent of operating system, window system, and hardware operations. GLUT is the OpenGL Utility Toolkit, a window system independent API toolkit for writing OpenGL programs. Mesa is a 3D graphics library with an API which is very similar to that of OpenGL. The Fortran 90 bindings for OpenGL are an alternative to the older FORTRAN 77 bindings. By using the new features of Fortran 90, they define an interface to OpenGL that does not depend on any extensions to the Fortran standard and provide access to the full functionality of OpenGL. This provides the capability of robust, standard-conforming, portable user application codes, and increases the similarity between the Fortran and C interfaces to OpenGL. The Fortran 90 bindings were favorably reviewed by J3, the US Fortran Standards Committee, and officially adopted by the OpenGL Architecture Review Board in February 1998. Documentation for f90gl including the official Fortran 90 bindings for OpenGL, installation instructions and user's guide. Software, including the f90gl distribution and updates. All the latest information on f90gl. Just for fun! Here is an animation of the f90gl logo (123K mpeg) done using f90gl. You can also see example images produced by the example programs in the f90gl distribution. Links to related sites OpenGL Home Page GLUT Home Page Mesa Home Page The Fortran Market The OpenGL Web Site with tons of links f90gl was written by William F. Mitchell of the Applied and Computational Mathematics Division at the National Institute of Standards and Technology with the advice and help of many people. f90gl was produced by an agency of the U.S. Government, and is not subject to copyright in the United States. The mention of specific products, trademarks, or brand names is for purposes of identification only. Such mention is not to be interpreted in any way as an endorsement or certification of such products or brands by the National Institute of Standards and Technology. All trademarks mentioned herein belong to their respective owners. OpenGL is a registered trademark of Silicon Graphics, Inc. Development status: Active Maintenance Last change to this page: July 20, 2010 Date this page created: 1998 Contact: William Mitchell Home Page"	"null"	"null"	"public domain implementation of the official NIST Fortran 90 bindings for OpenGL."	"true"
"Graphics Libraries"	"F03GL"	"http://www-stone.ch.cam.ac.uk/pub/f03gl/index.xhtml"	"a Fortran 2003 interface to the OpenGL library, along with the GLU and GLUT toolkits."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"F03GL: Fortran interface to OpenGL @media print,screen { body { background-color: #FFFFFF; color: black; font-family: serif; } p tt { font-family: Arial, Helvetica, sanserif; color: rgb(168,0,0); font-size: 100%; } td.pad { padding: 0 20px 0 20px; } } @media screen { #index { font-family: Arial, Helvetica, sanserif; color: black; font-size: 90%; position: absolute; left: 20px; top: 75px; margin-right: 20px; width: 120px; padding: 0 5px 0 0; /* top right bottom left */ border-right: 2px solid #0000FF; } .indexentry { font-family: Arial, Helvetica, sanserif; color: black; } #breadcrumb { position: absolute; left: 0; top: 0; margin-left: 10px; font-family: Arial, Helvetica, serif; font-size: 70%; } #top { position: absolute; left: 160px; top: 10px; right: 10px; margin-left: 10px; margin-right: 20px; } #content { font-family: serif; color: black; position: absolute; left: 160px; top: 100px; bottom: 80px; right: 10px; padding: 10px 20px 0 0; /* top right bottom left */ border-top: 1px solid black; border-bottom: 1px solid black; margin-left: 10px; margin-right: 10px; overflow: auto; } #foot { position: absolute; bottom: 10px; left: 160px; } #w3valid{ position: absolute; bottom: 0; left: 20px } } @media print { #index, #w3valid, #breadcrumb: { display: none; } #top, #content, #foot { font-family: Times-Roman, serif; font-size: 10pt; } #foot { margin-left: 150pt; font-family: Times-Roman, serif; font-size: 10pt; } } Top Generating Source Codes for F03GL Handling of GLUT Callbacks Using F03GL Character string arguments Incompatibilities with NISTIR 6134 Compiler Notes   Belorussian translation Ukrainian translation by Artem Delik Home -> Programs -> F03GL Fortran 2003 Interface to OpenGL The F03GL library The F03GL library provides a Fortran 2003 interface to the OpenGL library, along with the GLU and GLUT toolkits. It has been developed by Anthony Stone and Aleksandar Donev. We have already received useful feedback from several users of this library, and we are grateful for their suggestions. There is still room for improvement, and we would be glad to receive further comments and bug reports. All the source codes associated with the F03GL library can be downloaded as a zip archive f03gl.zip or a gzipped tarfile f03gl.tgz. There is a README file which gives basic instructions for unpacking and compiling the files and running the tests. The package is distributed under the terms of the GNU General Public Licence, version 3. F03GL uses the C Interoperability features of Fortran 2003 and binds to the C interface for OpenGL. Therefore, any system that has an OpenGL library and headers and a Fortran compiler that supports C Interoperability should be able to use this interface easily. In this sense, F03GL is different from the f90gl library by William F. Mitchell, found at http://math.nist.gov/f90gl/. That library implements the official Fortran 90 OpenGL interface (as adopted by OpenGL Architecture Review Board), described in NISTIR 6134.  It uses compiler-specific wrappers in order to implement the Fortran bindings, and does not use Fortran 2003 features. The F03GL library was meant to be a very light interface to the C library, with minimal use of wrappers, and as little use of non-standard or processor-dependent features as possible. The differences between F03GL and NISTIR 6134 are described at the end of this page. The conversion of codes using the Fortran 90 interface should involve minimal effort. We have converted several of the examples from the f90gl distribution to use F03GL, and we acknowledge with thanks Dr Mitchell's permission to do so. Many additional examples of the use of OpenGL routines with Fortran and the F03GL package may be found at the dolfyn website. Generating Source Codes for F03GL The Fortran source codes containing modules with PARAMETER declarations, INTERFACE blocks, and some minimal wrappers are generated automatically using Perl scripts. One of our goals is to develop tools that can easily automate the conversion of C header files to Fortran MODULEs, and for this purpose we are doing work with Craig Rasmussen at LANL to develop XML stylesheets to be used for this purpose (visit the CHASM toolkit webpage). The Perl scripts themselves are not very sophisticated and contain many hacks so that they work for the OpenGL interfaces, and they can probably easily be adopted to other applications. For the generation of the GL and GLU interfaces, instead of using the C header files GL.h and GLU.h (these are somewhat cut-back versions of relatively standard Linux gl.h and glu.h), we decided to use the authentic SGI specification of the interfaces in the files gl.spec, enum.spec, glu.spec and enumglu.spec, found at http://oss.sgi.com/projects/ogl-sample/registry/. (Files mentioned here in this red sanserif font are included in the f03gl package.) Only a couple of minor fixes were made to these files. The spec files provide more information than the C headers: for example, they give INTENT info and bounds info for array arguments, and they also document things like the OpenGL library retaining pointers for internal use. We tried to use all of this information to produce better Fortran interfaces. The Fortran codes are produced with    spec_interfaces.pl --bozinit --PUBLIC -p . -d -m OpenGL -gl    spec_interfaces.pl --bozinit --PRIVATE -p . -d -m OpenGL -glu Executing spec_interfaces.pl without arguments will give a brief documentation of the main options. The most important one is the “-m” or “--module” option which decides what the prefix of the Fortran MODULE names is. If you want to replace f90gl in your codes (as we do in adopting some of its examples), the module names should be OpenGL_GL, OpenGL_GLU and OpenGL_GLUT. If you want to keep the f90gl modules and try the new F03GL library, then “-m F03GL” would be a good option. If your Fortran compiler does not support BOZ constants (hexadecimal constants of the form z""0B04"") in PARAMETER statements, regenerate the interfaces without the “--bozinit” option. Otherwise, you can just use the files OpenGL_gl.f90 and OpenGL_glu.f90 in the f03gl package. For the GLUT library, there are no spec files, and we used C header files to generate the interfaces. There are also different GLUT-like toolkit libraries and corresponding headers, namely, the original GLUT.h (again, a cut-back version of glut.h from GLUT 3.8) by Mark J. Kilgard (SGI), which is not public-domain but is free, as well as several open-source replacements, such as the FreeGLUT.h from FreeGLUT or OpenGLUT.h from OpenGLUT. We have tested the Perl script h_interfaces.pl with all of these libraries and generated the source codes OpenGL_glut.f90, OpenGL_freeglut.f90 and OpenGL_openglut.f90, using something like    h_interfaces.pl -q --bozinit --scalar -m OpenGL -i GLUT.h The GLUT pre-defined fonts, which are void C pointer values, cannot be handled directly in Fortran, where TYPE(C_PTR) is an opaque type that cannot be given explicit values. Also, different GLUT implementations seem to handle the fonts differently. We therefore decided to add GLUT_fonts.c and use non-constants of TYPE(C_PTR) and pre-defined fonts. This makes no visible difference to the user. The PROTECTED attribute is used to make them more constant-like, but if your compiler does not yet support that attribute simply delete it in the Perl script. Note that glutInit has been overloaded with a generic interface that allows one to omit command arguments, since these are not commonly used in Fortran codes. Handling of GLUT Callbacks The biggest complication is the treatment of GLUT callbacks, and in particular, turning them off. There are two ways to pass procedures (as arguments) to C in Fortran 2003: as dummy procedures, which can be given full interfaces, or as procedure pointers [i.e., TYPE(C_FUNPTR) arguments, which are generic procedure pointers]. We prefer the former since giving full interfaces helps (good) compilers verify that the user-supplied callbacks have the expected interfaces. However, it then becomes difficult to turn off the callback, which in GLUT is done by passing a NULL function pointer. In Fortran, this is best done by making the dummy procedure OPTIONAL, but this requires using wrappers since OPTIONAL arguments cannot be interoperable (yet). The user simply omits the callback argument in order to turn it off. In NISTIR 6134, and in closer conformance to the C interface, one supplies an actual argument GLUT_NULL_FUNC. The script h_interfaces.glutnullfunc.pl generates an interface which uses some non-conforming tricks to make this work while still preserving the checking of callback interfaces. Some may prefer to make the callbacks TYPE(C_FUNPTR) and call the GLUT C functions directly without the wrappers (the interfaces for these are already generated by the Perl scripts), but we do not encourage this since it requires changing the calling sequence (one has to put C_FUNLOC in the actual argument list instead of simply passing the callback procedure as an actual), and will lead to incompatibilites among the codes of different users of F03GL. Character string arguments In F03GL, the string arguments are passed as character arrays [CHARACTER(C_CHAR), DIMENSION(*)], in agreement with the F03 standard, rather than as character strings [CHARACTER(KIND=C_CHAR, LEN=*)]. The F03 standard has special hacks that allow for strings to be passed as actual arguments, but a null character (C_CHAR_NULL) is not appended automatically but rather needs to be manually appended. We provide, in OpenGL_gl.f90, a helper routine CString that converts a string to a null-terminated character array. User codes need to change strings such as ""text"" in actual argument lists with CString(""text"") Using F03GL If the Fortran sources with the OpenGL modules compile successfully, the next step is testing them. The program RandomSphere_OpenGLUT.f90 provides a tutorial-style test program. This program uses some of the most useful new Free/OpenGLUT features, which are emulated with classical GLUT in RandomSphere_GLUT.f90. We have also adapted some of the test examples from f90gl to work with f03gl. Execute the script Script.sh in the f03gl directory, first setting the COMPILER environment variable to the appropriate compiler command. The examples have been tested with nagfor, gfortran and ifort. For compiler-dependent details see the compiler notes. Further examples may be found at the dolfyn website. Incompatibilities with NISTIR 6134 Here is a list of incompatibilities with NISTIR 6134. The names of the modules may be OpenGL_XXX if the user wants to replace f90gl, but otherwise they should be F03GL_XXX. F03GL does not deal with processors lacking short types. It merely defines, for example, GLshort=C_SHORT, where C_SHORT is a kind parameter defined in the F2003 intrinsic ISO_C_BINDING module. It may be -1 if the processor does not support the kind in question, which means that programs using this kind parameter simply will not compile. This is probably less of a problem today since almost all relevant processors support the C set of standard integer types. GLboolean are INTEGER(GLboolean)=INTEGER(C_SIGNED_CHAR) rather than LOGICAL, according to the F2003 standard. LOGICAL(C_BOOL) interoperates only with C99’s _Bool. For other “logicals” in C (quotes because they are really integer types anyway), one should use INTEGER. char becomes CHARACTER(KIND=C_CHAR), following F2003. On almost all, if not all, processors, this is the same as default CHARACTER. char* becomes a character array [""CHARACTER(C_CHAR), DIMENSION(*)""]. not a character string. Functions that return pointers, and in particular char*, have a return of TYPE(C_PTR), a “generic” C pointer. They can be converted to an array pointer of type CHARACTER(KIND=C_CHAR) using the F2003 procedure C_F_POINTER. We do not provide a function inside F2003 for this but it is easy to write. Converting them to POINTERs of type CHARACTER(KIND=C_CHAR,LEN=:) is not legal according to F2003 since the length must be 1 to be interoperable. TYPE(GLCPTR) becomes TYPE(C_PTR), and GLNULLPTR becomes C_NULL_PTR from F2003. Sadly, there is no TYPEALIAS in F2003 so these cannot be aliased. F2003 does not define any user-defined types such as gluQuadricObj or TK_RGTImageRec. If these types are manipulated via a pointer (handle), a TYPE(C_PTR) argument is used. It is possible to define derived types if really needed, but this is not necessary for the base libraries since there only handles appear and the components of the structures are never needed. Again, TYPEALIAS would have been useful... Void arguments become TYPE(C_PTR)---no generic interface is provided since this does not conform to the F2003 standard. Only TYPE(C_PTR) interoperates with “void*”. The procedures are not generic, but rather merely interfaces to the specific C routines (which are assumed to have external linkeage). At present the only exception is glutInit, which has been overloaded so that it can be called without arguments. No truncation to 31 characters has been done. This might be done by the Fortran processor itself, namely, it might ignore all characters 32 and higher. GLUTNULLFUNC has been deleted (see above discussion of GLUT callbacks---we do provide a version of the GLUT interfaces where GLUTNULLFUNC can be used). Instead, simply call the GLUT procedure without supplying an actual argument for the callback to turn it off. Note that this may require use of keywords if the optional callback argument is not the last one in the argument list. In the cases where GL retains a pointer to an actual argument, as in glFeedbackBuffer (section 4.2 in NISTIR), F03GL uses a TYPE(C_PTR) dummy instead of putting a TARGET attribute on the dummy, which may fail. The only cases where the Fortran 2003 standard actually guarantees no-copy is when the dummy is assumed-shape and TARGET---and assumed-shape complicates interoperability (in fact it will only be supported in the upcoming F2008). GLUT callbacks need to have arguments with the VALUE attribute and have a BIND(C) label, so that they can be called directly from C. Note that BIND(C,NAME="""") may be used to suppress the binding label for subroutines that are only needed as callbacks. This avoids polluting the global symbol namespace with callbacks. Anthony Stone <ajs1 at cam dot ac dot uk> Aleksandar Donev <aleks dot donev at gmail dot com> Last updated 19 January, 2015."	"null"	"null"	"a Fortran 2003 interface to the OpenGL library, along with the GLU and GLUT toolkits."	"true"
"Graphics Libraries"	"gtk-fortran"	"https://github.com/jerryd/gtk-fortran/wiki"	"a cross-platform library to build Graphical User Interfaces (GUI) using. Very useful when combined with the RAD tool."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"76"	"30"	"24"	"Home · jerryd/gtk-fortran Wiki · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 30 Star 76 Fork 24 jerryd/gtk-fortran Code Issues 20 Pull requests 1 Wiki Pulse Graphs Home vmagnin edited this page Jul 6, 2016 · 244 revisions Pages 16 Home git basics GTK+ Fortran code sketcher Gtk3 Gtk3 fixed problems gtk_hl: A high level interface for Gtk Fortran High level drawing api Highlevel api MS Windows Older news Older status Plplot integration Screenshots Status Supplementary routines Tested functions Show 1 more pages… Clone this wiki locally Clone in Desktop The gtk-fortran project aims to offer scientists programming in Fortran a cross-platform library to build Graphical User Interfaces (GUI). Gtk-fortran is a partial GTK+ / Fortran binding 100% written in Fortran, thanks to the ISO_C_BINDING module for interoperability between C and Fortran, which is a part of the Fortran 2003 standard. GTK+ is a free software cross-platform graphical library developed since 1998, written in C, distributed under GNU GPL 3 license and available for Linux, Unix, Windows and Mac OS X. And gtk-fortran offers an interface to around 10000 GTK+ 2 and GTK+ 3 functions (GTK, GDK, GdkPixbuf, Cairo, Pango, ATK, GLib, GObject, GIO). Although gtk-fortran development is mainly focused on Linux, some users have also built it successfully under BSD, Mac OS X, Windows 7. You can join our small community to share knowledge, skills and code: just create a github account and you will be able to post messages. Every good will is welcome. GTK+ being a huge library, only some hundreds of its functions have been tested. That is the reason why gtk-fortran must be considered as in the alpha development stage. See the list of Tested functions and the Status page for more informations. Note also that gtk-fortran goes beyond programming GUI: GTK+ includes the crossplatform GLib library which offers a lot of generic functions (regular expressions, random numbers, hash, strings, input/output...), and gtk-fortran offers also an interface to PLplot. julia_pixbuf.f90 example with gtk-fortran on Kubuntu 16.04 with GTK+ 3.18.9 You will find more Screenshots on the wiki and even more in the screenshots directory (especially in the gtk3 branch). See also jtappin's RPN Scientific calculator, a good example of what can be done with gtk-fortran. News 07-04-2016: gtk3 branch has been updated and is the more up to date branch. The changes will be backported to the master (gtk2) branch when and if I have time. 06-25-2016: The code of the heart of gtk-fortran, the cfwrapper.py script, has been refactored and improved in order to ease maintenance. The new version is in the gtk3 branch, with the latest versions of gtk-fortran files. 06-15-2016: gtk-fortran 16.04 released. 06-11-2016: the test.sh script has been updated and can be used as a primitive alternative to compile gtk-fortran and its examples. 03-02-2016: a bug in GCC 5 prevents CMake to build two examples of gtk-fortran. The workaround (see Issue 89) is simply to type make -i instead of make, to ignore errors during the build. 01-22-2013: Arch PKGBUILDs submitted to the AUR for Arch and Arch-derived distros. Packages are gtk-2-fortran-git and gtk-3-fortran-git. 08-19-2012: Reorganize branches. 08-10-2012: Plplot integration with gtk-fortran is now automatically built by the cmake build system if plplot libraries and module files are found on the system, a tutorial on using plplot and gtk-fortran is under construction. Plplot integration Older news gtk-fortran structure gtk-fortran is a three-stage rocket: The Python cfwrapper.py script parses the GTK+ .h files and generates several .f90 files containing interfaces to the functions of the GTK+ libraries. Normally, you do not need to use cfwrapper.py except when you need a new GTK+ function whose interface is not available in the gtk-fortran branches available on this site. The gtk.f90 and the *-auto.f90 files constitute the source of the gtk-fortran library which you can use directly in your own programs. But you can also decide to use the high-level-interface-for-Gtk-Fortran (hl-*.f90 files) which offers a simplified interface to some GTK+ functions. Installation and building First, you need a Fortran compiler with the ISO_C_BINDING module. If your compiler is compliant with the Fortran 2003 standard, this module should be present. Else you can download gfortran, a free software compiler (see the links at the bottom of this page): you need gfortran 4.6 or higher. Most recent Linux distributions come with gfortran 5.3 or higher. To download all the project files, you can simply clone the repository using git (see git-basics). Alternatively you can click on Source (top left), then just below Switch branches to ""master"" if you use GTK+ 2 or ""gtk3"" for GTK+ 3, then click on the Downloads button on the right, then choose the .tar.gz or .zip archive depending on your system. The only files you absolutely need are gtk.f90 and the -auto.f90 files. The files gtk-sup.f90 and gtk-hl.f90 are needed for list_demo.f90 and the hl-.f90 files (see gtk_hl:-A-high-level-interface-for-Gtk-Fortran). On your system, you need the GTK+ development files and CMake. Git branches You will find the latest versions of gtk-fortran in the master branch for GTK+ 2 and the gtk3 branch for GTK+ 3. You can also download a tagged release by choosing one in the ""Switch branches/tags"" selection window: v16.04.gtk2.24.30: compiled with GTK+ 2.24.30, GLib 2.48.0 (Kubuntu 16.04), v16.04.gtk3.18.9: compiled with GTK+ 3.18.9, GLib 2.48.0 (Kubuntu 16.04), v13.10.gtk2.24.22: compiled with GTK+ 2.24.22, GLib 2.38.1 (October 2013), v13.10.gtk3.10.1: compiled with GTK+ 3.10.1, GLib 2.38.1 (October 2013). If you have an older version of GTK+ 2 or GTK+ 3, you should have no problem because deprecated functions will be removed only in the next major version. But with GLib, deprecated functions are sometimes removed from one minor version to another, which can prevent building gtk-fortran on your machine. In that case, you can also test the older branches gtk2-old and gtk3-old (August 2012). Linux First, you need to install the GTK+ development files (Ubuntu example): sudo apt-get install gfortran libgtk2.0-dev libgtk-3-dev Depending on your system, you may also need other packages. The best way to build gtk-fortran and install its libraries on your system is to use CMake: follow the instructions of the ""INSTALL"" file. But if you do not have CMake, you can alternatively use the test.sh bash script to compile all the gtk-fortran files and all examples, using gfortran by default. To use another compiler, use the following syntax: GFC='mycompiler' ./test.sh And if you know which gtk-fortran files are needed, you can also simply compile and run each example as follow, from the src/ directory: $ gfortran gtk.f90 ../examples/julia_pixbuf.f90 pkg-config --cflags --libs gtk+-3.0 $ ./a.out Mac OS X Search in the Issues tab to find message from Mac OS X users. The examples were tested under Mac OS X 10.6.7 (Darwin 10.7.0 on x86_64), with the quartz version of GTK2. gtk2 and gfortran 4.6 were built using macports. Windows See the MS Windows page. Use CMake via win32_install.bat or alternatively the (unmaintained) test.bat script to compile all the libraries and examples (more details in the installation section). Using gtk-fortran Learn GTK+ You can begin by studying the examples available in the examples/ directory, beginning by gtkhello2.f90. And the following book is a good way to learn GTK+: Andrew Krause, Foundations of GTK+ Development, Apress, 2007, ISBN-13: 978-1-59059-793-4, 630pp, $49.99. You can download the C examples here. And you can have a look at the book on Google Books. More links to learn and use GTK+ are given at the end of this page. Some external docs about gtk-fortran: Fortran Tools - Chapter 15: GTK (p.117-140): this document edited in 2014 by The Fortran Company contains a long chapter about setting up gtk-fortran under Windows, and about programming GTK+ GUI in Fortran. How to use GTK-Fortran with Code::Blocks IDE gtk-fortran is referenced in the following book: Markus, Arjen. Modern Fortran in Practice. 1st ed. Cambridge: Cambridge University Press, 2012. http://dx.doi.org/10.1017/CBO9781139084796. Projects using gtk-fortran ForGE - Fortran GUI Environment RPN Scientific calculator Advices to lower compilation time Concerning the names of the modules you need, you can generally just look at the beginning of the names of the functions you use: gtk_window_new is in the gtk module, cairo_curve_to is in cairo... Note that all enumerators are currently in the gtk module. The list of all the functions available in gtk-fortran, with informations on the required files and the C prototype of the function, is in the src/gtk-fortran-index.csv file. gtk-fortran modules offering interfaces to more than 9000 functions, you should add to your USE statements the ONLY option, e.g.: use gtk, only: gtk_init, gtk_window_new, GTK_WINDOW_TOPLEVEL, gtk_window_set_title, &       & gtk_container_set_border_width, g_signal_connect, gtk_hbox_new, gtk_container_add, &       & gtk_button_new_with_label, gtk_box_pack_start, gtk_widget_show, gtk_main, FALSE, &       & CNULL, TRUE  The compilation time will be ten times faster than with a simple ""use gtk"" statement ! To help you, the usemodules.pl perl script can scan your Fortran source files for GTK+ and related library functions and generate the required USE statements. For more informations type: perl usemodules.pl --help Note also that the compilation time with gfortran 4.6 under Windows is ten times longer than under Linux (why ?) Known issues or limitations Parsing more than 700 .h files is not an easy task. So gtk-fortran does not implement 100% of GTK+ functions and have some limitations: gstdio.h and giochannel.h were excluded because some functions are declared twice (UNIX and non UNIX systems for example). Around 90 functions with optional arguments (variadic fuctions) are not implemented. But some of these functions are also available with an array argument to solve binding problems (for example gtk_list_store_new / gtk_list_store_newv), but not all. See http://live.gnome.org/GObjectIntrospection/WritingBindingableAPIs Very few GTK+ types are not yet implemented. Macro functions (#define) are not implemented. Structures (struct) are not implemented. Some enums are still missing, like GdkPixdataType. All enums are in the gtk module. It would perhaps be better either to dispatch them in the right modules or to create an enums module. g_signal_connect: should have been be declared as a function returning a c_long (handler_id). Fortran has no unsigned integers, so problems could occur if you pass great values between Fortran and GTK+. See the tests.f90 file. Missing deallocate in gtk_init() ? (g95 message when the program is quited). See also the Issues page. History and Roadmap History This project is based on Tobias Burnus' post on comp.lang.fortran newsgroup (2nd May 2007 13:10) where he gave an example of a Fortran 2003 program creating a minimalist GUI (an empty GTK window) using ISO_C_BINDING. Vincent Magnin posted a message on the 27th December 2010 and got into contact with Jerry DeLisle on the 29th. They launched together the project in January 2011. Other contributors then joined: James Tappin, Jens Hunger... Roadmap: Planning a 0.1 release and publish packets for some Linux distributions ? How can I help ? We need people compiling and running the examples under various OS (particularly Windows and Mac OS), architectures (32/64 bits...) and with various Fortran compilers. You can report bugs and problems in the Issues tab. You can write new examples or improve existing examples and share them with the community. Note that C examples are available in the applications gtk-demo and gtk3-demo (gtk-3-examples and gtk2.0-examples Ubuntu packages). Put a link on your site to https://github.com/jerryd/gtk-fortran/wiki, and include the ""gui"" and ""graphical user interface"" keywords. It will improve the pagerank of the project in search engines. Useful links The GTK+ Project GTK+ 3: Migrating from previous versions of GTK+ GTK+ 3 Reference Manual GTK+ 2: GTK+ Reference Manual (version 2.24) GTK+ 2.0 Tutorial in C language. GTK+ Programming Forum. A french GTK+ forum (developpez.com) Drawing with GTK+: Cairo documentation The Cairo graphics tutorial in C language. Gdk-pixbuf Related projects: gtk-sharp: a Mono/.NET binding to GTK+, with examples, on github. go-gtk: a Go binding to GTK+, with examples, on github. Fortran ressources: Fortran 2008 Standard Draft (WD 1539-1) John Reid, The New Features of Fortran 2003, ISO/IEC JTC1/SC22/WG5 N1579. John Reid, Interoperability with C, an introduction to ISO_C_BINDING. Richard J. Hanson, Tim Hopkins, Numerical Computing with Modern Fortran. Philadelphia: SIAM, 2013, ISBN 978-1-611973-11-2 Markus, Arjen, Modern Fortran in Practice. 1st ed. Cambridge: Cambridge University Press, 2012. http://dx.doi.org/10.1017/CBO9781139084796. Michael Metcalf, John Reid, Malcolm Cohen, fortran 95/2003 explained. Oxford: Oxford University Press, 2004, ISBN 978-0-19-852693-3. Arjen Markus, Modern Fortran in Practice. New York: Cambridge University Press, 2012, ISBN 978-1-107-60347-9. Tools used in this project GNU Fortran (gfortran). You can download the last builds of gfortran (i686). Scripting languages: Python, Perl. To test regular expressions: regexxer and Kodos. See also the Regular Expression Library site, with its online tester, and REGEXPER. git, the fast version control system. Scott Chacon, Pro Git, APress, 2009, a Creative Commons book. CMake, the cross-platform, open-source build system. Ken Martin, Bill Hoffm, Mastering CMake - A Cross-Platform Build System. Kitware, 2010, ISBN 978-1930934313. Meld, a visual diff and merge tool. Scrot: a command line screen capturing tool. Linux Ubuntu, Debian, Fedora, Arch Linux, Pardus... License Gtk-fortran is licensed under GNU General Public License version 3. The wiki documentation is under the GNU Free Documentation License 1.3. The gtk-fortran logo uses the GTK+ logo (by Andreas Nilsson) and so is also under GNU Free Documentation License Version 1.2 or later & Creative Commons Attribution-Share Alike 3.0 Unported license. The font is DejaVu Sans, a font under a free license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jerryd/gtk-fortran/wiki"	"a cross-platform library to build Graphical User Interfaces (GUI) using. Very useful when combined with the RAD tool."	"true"
"Graphics Libraries"	"GTK+"	"http://www.gtk.org/"	"a cross-platform library to build Graphical User Interfaces (GUI) using. Very useful when combined with the RAD tool."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The GTK+ Project The GTK+ Project About Features Download Screenshots Documentation Development Support News Feed Follow the GTK+ project on: blog | Twitter | identi.ca | Google+ What is GTK+, and how can I use it? GTK+, or the GIMP Toolkit, is a multi-platform toolkit for creating graphical user interfaces. Offering a complete set of widgets, GTK+ is suitable for projects ranging from small one-off tools to complete application suites. Where can I use it? Everywhere! GTK+ is cross-platform and boasts an easy to use API, speeding up your development time. Take a look at the screenshots to see a number of platforms GTK+ will run. What languages are supported? GTK+ is written in C but has been designed from the ground up to support a wide range of languages, not only C/C++. Using GTK+ from languages such as Perl and Python (especially in combination with the Glade GUI builder) provides an effective method of rapid application development. Are there any licensing restrictions? GTK+ is free software and part of the GNU Project. However, the licensing terms for GTK+, the GNU LGPL, allow it to be used by all developers, including those developing proprietary software, without any license fees or royalties. Get an overview of GTK+. Understand who started it, the basic architecture and why we use the license we do. GTK+ has been involved in many projects and some big platforms. To get a glimpse of what people think of GTK+ and how it has been used in commercial projects, read the success stories... To find out how more about what GTK+ can do for you, visit our features page. If you want to contribute, you are more than welcome. Copyright © 2007-2016 The GTK+ Team | Valid XHTML and CSS"	"null"	"null"	"a cross-platform library to build Graphical User Interfaces (GUI) using. Very useful when combined with the RAD tool."	"true"
"Graphics Libraries"	"Glade"	"https://glade.gnome.org/"	"a cross-platform library to build Graphical User Interfaces (GUI) using. Very useful when combined with the RAD tool."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Glade - A User Interface Designer Glade - A User Interface Designer Current Version: 3.20 Download Sources Browse Sources Windows Binaries Older MacOSX Binaries User Survey Preliminary results Documentation Tutorials API Reference Help Users mailing list File a bug Development Developers mailing list Bug list Roadmap Wiki IRC server: irc.gimp.net channel: #glade3 Related tools Anjuta IDE Nemiver Debugger Devhelp API browser Parasite What is Glade? Glade is a RAD tool to enable quick & easy development of user interfaces for the GTK+ toolkit and the GNOME desktop environment. The user interfaces designed in Glade are saved as XML, and by using the GtkBuilder GTK+ object these can be loaded by applications dynamically as needed. By using GtkBuilder, Glade XML files can be used in numerous programming languages including C, C++, C#, Vala, Java, Perl, Python,and others. Glade is Free Software released under the GNU GPL License Latest news Old stories Glade 3.20.0 released Tuesday 22 March 2016 by Juan Pablo Ugarte Glade 3.20.0 is now available for download. Glade 3.20.0 is the new stable release for GNOME 3.20. Glade User Survey results Monday 08 February 2016 by Juan Pablo Ugarte Preliminary results are available in my blog Glade 3.19.0 released Thursday 11 June 2015 by Juan Pablo Ugarte Glade 3.19.0 is now available for download. Glade 3.19.0 is the first development release in the series. 3.19.0 release notes for more details. Glade 3.18.3 released Monday 14 April 2014 by Juan Pablo Ugarte Glade 3.18.3 is now available for download. Glade 3.18.3 is the third bug fix release in the series. See 3.18.3 release notes for more details. Glade 3.8.5 released Monday 12 May 2014 by Juan Pablo Ugarte Glade 3.8.5 is now available for download. It is the fifth bug fix release in the series. See 3.8.5 release notes for more details. Copyright 2014, The Glade project"	"null"	"null"	"a cross-platform library to build Graphical User Interfaces (GUI) using. Very useful when combined with the RAD tool."	"true"
"Graphics Libraries"	"PGPLOT"	"http://www.astro.caltech.edu/%7Etjp/pgplot/"	"cross-platform scientific graphing library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PGPLOT Graphics Subroutine Library PGPLOT Graphics Subroutine Library Contents Contents Introduction Examples Copyright Status Obtaining PGPLOT Documentation: User's manual (draft) Annotated list of subroutines Subroutine synopses Known problems in PGPLOT version 5.2. Wish-list for future improvements. Some frequently asked questions. Calling PGPLOT from other languages Interactive drawing programs and other PGPLOT extensions Reporting problems New Web Addresses The web address for PGPLOT changed in October 2000. The new web address is  http://www.astro.caltech.edu/~tjp/pgplot/  and the ftp address for downloading PGPLOT is  ftp://ftp.astro.caltech.edu/pub/pgplot/pgplot5.2.tar.gz  Introduction The PGPLOT Graphics Subroutine Library is a Fortran- or C-callable, device-independent graphics package for making simple scientific graphs. It is intended for making graphical images of publication quality with minimum effort on the part of the user. For most applications, the program can be device-independent, and the output can be directed to the appropriate device at run time. The PGPLOT library consists of two major parts: a device-independent part and a set of device-dependent ``device handler'' subroutines for output on various terminals, image displays, dot-matrix printers, laser printers, and pen plotters. Common file formats supported include PostScript and GIF. PGPLOT itself is written mostly in standard Fortran-77, with a few non-standard, system-dependent subroutines. PGPLOT subroutines can be called directly from a Fortran-77 or Fortran-90 program. A C binding library (cpgplot) and header file (cpgplot.h) are provided that allow PGPLOT to be called from a C or C++ program; the binding library handles conversion between C and Fortran argument-passing conventions. PGPLOT has been tested with UNIX (most varieties, including Linux, SunOS, Solaris, HPUX, AIX, Irix, and MacOS X/Darwin) and OpenVMS operating systems. I am unable to provide support for DOS, Microsoft Windows, but I do distribute code provided by users for use with these operating systems. Examples Some example graphs showing some of the capabilities of PGPLOT, and source code in Fortran and C for a simple example, can be found in the PGPLOT Portfolio. Caution: this page contains several large graphics files. Copyright PGPLOT is not public-domain software. However, it is freely available for non-commercial use. The source code and documentation are copyrighted by California Institute of Technology, and may not be redistributed or placed on public Web servers without permission. The software is provided ``as is'' with no warranty. Status The current version of PGPLOT is 5.2.2. Changes in Version 5.0.0 Released 1994-12-30. Changes in Version 5.0.1 Released 1995-02-16. Changes in Version 5.0.2 Released 1995-06-14. Changes in Version 5.0.3 Released 1995-12-29; sys_mac directory updated 1996-01-23; sys_arc directory updated 1996-03-27. Changes in Version 5.1.0 Released 1996-05-10. Changes in Version 5.1.1 Released 1996-11-04; sys_arc directory updated 1996-11-06. Changes in Version 5.2.0 Released 1997-06-16. Changes in Version 5.2.1 Released 2000-12-07. Changes in Version 5.2.2 Released 2001-02-26. Known problems in PGPLOT version 5.2. Wish-list for future improvements. Some frequently asked questions. Installation For instructions for obtaining PGPLOT from my ftp site and for details of supported operating systems, read the installation instructions. If you cannot use ftp, PGPLOT is available on tape for a fee. Consult tjp·astro.caltech.edu. Documentation The manual PGPLOT Graphics Subroutine Library by T. J. Pearson is being updated for version 5.2 of PGPLOT. A draft of the manual is available: see the Table of Contents. A PostScript file of the manual will be made available when it is completed. A PostScript file of the old manual (version 4.9, 0.27 Mbyte, gzipped) is still available, but it does not include the many changes made in version 5.0. Calling PGPLOT From Other Languages PGPLOT is distributed with subroutine interfaces for C and Fortran-77; these interfaces can also be used with C++ and Fortran-90. Several users have contributed bindings for PGPLOT that allow the PGPLOT functions to be called from other languages. Several of these bindings allow PGPLOT to be used interactively. ADA Martin Stift has an ADA and ADA95 interface to PGPLOT. C++ CCPL is an interesting graphing library interface for use with C++. A graph is generated by sending data to a stream, e.g., pout << line_plot(my_data) << endp;. Author: Matt Howlett (University of Tasmania). URL: http://ccpl.sourceforge.net. GLISH A PGPLOT binding for GLISH has been developed as part of the aips++ project by a consortium led by the National Radio Astronomy Observatory; it is currently in beta release.. For details, see the aips++ web page. OCTAVE PGPLOT may be called from the Octave language for numerical computations via Matwrap from Gary Holt. PERL PGPERL by Karl Glazebrook provides an interface between the Perl language and the PGPLOT FORTRAN library. For further information, see the WWW page http://www.aao.gov.au/local/www/kgb/pgperl/. PYTHON Nick Patavalis (npat at efault.net) has developed an interface between PGPLOT and the Python and NumPy languages. See http://efault.net/npat/hacks/ppgplot. Scott Ransom (ransom@cfa.harvard.edu) has written another wrapper layer that simplifies use of this interface. See ftp://cfa-ftp.harvard.edu/pub/ransom/. RUBY Ruby/PGPLOT is a PGPLOT interface to the Ruby language, written by Masahiro Tanaka. SCHEME Koji Ejiri has made a Gauche binding for PGPLOT. Gauche is a Scheme interpreter. TCL/TK Tcl/Tk interfaces for PGPLOT have been developed by three groups: Nick Elias of the US Naval Observatory has released ptcl, a package that registers PGPLOT functions as Tcl commands. Information is available at http://www.InfoMagic.com/~nme2/ptcl/ptcl.html. ptcl has been ported to OpenVMS by Gilles Ratel. The Sloan Digital Sky Survey project has developed a Tcl interface to PGPLOT as part of its DERVISH package. See the Dervish Home Page for a description of the interface (under ``Plotting''). For more information contact Eileen Berman. PGTK by Brian Toby. This includes a driver for a Tk canvas widget. The driver tkdriv distributed with PGPLOT is more powerful and is recommended for people using a Unix X-window system. YORICK A PGPLOT interface to the Yorick language has been written by Alexey Goldin (alexey@oddjob.uchicago.edu). See http://flight.uchicago.edu/goldin/yorick-pgplot/. Interactive Drawing Programs and Other PGPLOT Extensions The following list does not include the many application-specific programs that have been written using PGPLOT. BUTTON by N. Cardiel and J. Gorgas of the Universidad Complutense de Madrid is a package of subroutines to facilitate the creation of interactive Fortran programs using graphics buttons. For further information, see the WWW page http://www.ucm.es/OTROS/Astrof/button/button.html. GENPLOT by Dale Gary. PGXTAL. Devinder Sivia has written some 3D plotting routines for use with PGPLOT. For details, see http://www.isis.rl.ac.uk/dataanalysis/dsplot/. This package makes use of undocumented internal features of PGPLOT (something I strongly counsel against) and may not work with all versions of PGPLOT. PLOTDAT, by Vincent Jacobs (vjacobs@physics.rutgers.edu, is fully interactive and features legends, three dimensional histograms, an ""echo"" scripting mechanism, parsing to add Greek or other ""fancy"" characters to plots, and extensive online help. Please visit the site: http://www.physics.rutgers.edu/~vjacobs/PLOTDAT/plotdat.html. PONGO by Paul Harrison. This is supported by Starlink: see http://star-www.rl.ac.uk/. Starlink also maintains a version of PGPLOT layered on the GKS library. QDP/PLT by Allyn Tennant. PLT is an interactive plotting and fitting subroutine layered on PGPLOT, and QDP provides a command interface to this routine. QDP/PLT is used by some tasks within the FTOOLS package available from the NASA Laboratory for High Energy Astrophysics. STAP by Mingsheng Han. STAP is an interactive command driven statistic and plotting program: for information, see http://www.astro.wisc.edu/~han/stap/stap.html. TVB by Georges GONCZI (Observatoire de Nice, France) is a semi-interactive tool which gives access to the whole graphic possibilities of PGPLOT without having to learn it and without having to know any special language. See http://www.obs-nice.fr/tvb/tvb.html. WIP by James Morgan. WIP is an interactive package with a simple to use interface designed to produce high quality graphical output. WIP was developed as part of the Berkeley-Illinois-Maryland Association (BIMA) project. For further information, see the WWW page http://bima.astro.umd.edu/bima/wip/wip.html. Reporting problems If you have questions about PGPLOT, please send them to Tim Pearson, preferably by e-mail to tjp·astro.caltech.edu, or by FAX to +1 (626) 568-9352. If you have a problem with installation, please include information about your operating system version, Fortran and C compilers, and the version of PGPLOT you are trying to install. If you think you have found a bug in PGPLOT, a simple test program in Fortran or C that demonstrates the problem is very helpful. I maintain a mailing list for announcements about PGPLOT, and I will add your name to the list if you send me your e-mail address. Tim Pearson, California Institute of Technology, tjp·astro.caltech.edu Copyright © 1995-2002 California Institute of Technology"	"null"	"null"	"cross-platform scientific graphing library."	"true"
"Graphics Libraries"	"Lib_VTK_IO"	"https://github.com/szaghi/Lib_VTK_IO"	"Pure Fortran (2003+) library to write and read data conforming the VTK standard."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"19"	"12"	"8"	"GitHub - szaghi/VTKFortran: pure Fortran VTK (XML) API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 19 Fork 8 szaghi/VTKFortran Code Issues 7 Pull requests 0 Wiki Pulse Graphs pure Fortran VTK (XML) API 169 commits 4 branches 11 releases 2 contributors FORTRAN 97.9% Makefile 1.1% Other 1.0% FORTRAN Makefile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags PVD-importers gh-pages importers master Nothing to show v2.0.0 v1.2.7 v1.2.6 v1.2.5 v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.1 v1.1.0 Nothing to show New pull request Latest commit 1336efa Jul 13, 2016 szaghi fix minor issues on error status code of write_geo methods Permalink Failed to load latest commit information. doc Update to the last PENF version Mar 30, 2016 references/legacy remove some befor64 use unnecessary Jun 24, 2016 src fix minor issues on error status code of write_geo methods Jul 13, 2016 .doxygenconfig Performed OPENMP speedup May 27, 2013 .gitignore OOP Refactoring Jul 5, 2016 .gitmodules add FoXy submodule Jun 28, 2016 .travis.yml Update config files to new name VTKFortran Jul 5, 2016 CMakeLists.txt HUGE option commented Jun 19, 2015 CONTRIBUTING.md Commit before submodularize Jul 27, 2015 LICENSE.bsd-2.md update licenses May 25, 2016 LICENSE.bsd-3.md update licenses May 25, 2016 LICENSE.gpl3.md LICENSE file added Mar 24, 2014 LICENSE.mit.md update licenses May 25, 2016 README.md update readme Jul 5, 2016 codecov.yml Update config files to new name VTKFortran Jul 5, 2016 fobos Update config files to new name VTKFortran Jul 5, 2016 makedoc.sh Fix issue #19 on makefile Mar 29, 2016 makefile Update to the last PENF version Mar 30, 2016 mpi_benchmark.sh MPI speedup assessed May 23, 2013 mpi_speedup.png Performed OPENMP speedup May 27, 2013 openmp_benchmark.sh Performed OPENMP speedup May 27, 2013 openmp_speedup.png Performed OPENMP speedup May 27, 2013 run_tests.sh add more consistent tests facility Jun 24, 2016 README.md VTKFortran VTKFortran, pure Fortran VTK (XML) API A KISS pure Fortran Library to parse and emit files conforming VTK (XML) standard VTKFortran is a pure Fortran library to parse and emit VTK files, VTK standard; VTKFortran is Fortran 2003+ standard compliant; VTKFortran supports parallel architectures, it being threads-safe; VTKFortran supports ascii, binary (Base64 encoding) and raw file formats; VTKFortran is a Free, Open Source Project. Issues Compiler Support Main features | Copyrights | Documentation | A Taste of VTKFortran Main features VTK features Exporters Legacy standard Structured Points; Structured Grid; Unstructured Grid; Polydata; Rectilinear Grid; Field; XML standard serial dataset: Image Data; Polydata; Rectilinear Grid; Structured Grid; Unstructured Grid; parallel (partitioned) dataset: Image Data; Polydata; Rectilinear Grid; Structured Grid; Unstructured Grid; composite dataset: vtkMultiBlockDataSet. Importers The importers are under developing. Parallel Support VTKFortran can be safely used in parallel environments, handling multiple concurrent files: it is thread/processor-safe, meaning that it can be safely used into parallel architectures using OpenMP and/or MPI paradigms. Copyrights VTKFortran is an open source project, it is distributed under a multi-licensing system: for FOSS projects: GPL v3; for closed source/commercial projects: BSD 2-Clause; BSD 3-Clause; MIT. Anyone is interest to use, to develop or to contribute to VTKFortran is welcome, feel free to select the license that best matches your soul! More details can be found on wiki. Go to Top Documentation Besides this README file the VTKFortran documentation is contained into its own wiki. Detailed documentation of the API is contained into the GitHub Pages that can also be created locally by means of ford tool. Go to Top A taste of VTKFortran Let us assume our aim being to save our pure Fortran data into a VTK structured grid file in binary XML form. This is simple as use vtk_fortran, only : vtk_file  type(vtk_file)     :: a_vtk_file                             ! A VTK file. integer, parameter :: nx1=0_I4P                              ! X lower bound extent. integer, parameter :: nx2=9_I4P                              ! X upper bound extent. integer, parameter :: ny1=0_I4P                              ! Y lower bound extent. integer, parameter :: ny2=5_I4P                              ! Y upper bound extent. integer, parameter :: nz1=0_I4P                              ! Z lower bound extent. integer, parameter :: nz2=5_I4P                              ! Z upper bound extent. integer, parameter :: nn=(nx2-nx1+1)*(ny2-ny1+1)*(nz2-nz1+1) ! Number of elements. real               :: x(nx1:nx2,ny1:ny2,nz1:nz2)             ! X coordinates. real               :: y(nx1:nx2,ny1:ny2,nz1:nz2)             ! Y coordinates. real               :: z(nx1:nx2,ny1:ny2,nz1:nz2)             ! Z coordinates. real               :: v(nx1:nx2,ny1:ny2,nz1:nz2)             ! Variable at coordinates. integer            :: error                                  ! Error status.  ! initialize the data...  error = a_vtk_file%initialize(format='binary', filename='XML_STRG-binary.vts', &                               mesh_topology='StructuredGrid',                  &                               nx1=nx1, nx2=nx2, ny1=ny1, ny2=ny2, nz1=nz1, nz2=nz2) error = a_vtk_file%xml_writer%write_piece(nx1=nx1, nx2=nx2, ny1=ny1, ny2=ny2, nz1=nz1, nz2=nz2) error = a_vtk_file%xml_writer%write_geo(n=nn, x=x, y=y, z=z) error = a_vtk_file%xml_writer%write_dataarray(location='node', action='open') error = a_vtk_file%xml_writer%write_dataarray(data_name='float64_scalar', x=v, one_component=.true.) error = a_vtk_file%xml_writer%write_dataarray(location='node', action='close') error = a_vtk_file%xml_writer%write_piece() error = a_vtk_file%finalize() Note that all VTKFortran functions return an error code that can be used for sophisticated error trapping algorithms. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/szaghi/Lib_VTK_IO"	"Pure Fortran (2003+) library to write and read data conforming the VTK standard."	"true"
"Math Libs"	"BLAS"	"http://www.netlib.org/blas/"	"application programming interface standard for publishing libraries to perform basic linear algebra operations such as vector and matrix multiplication."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"BLAS (Basic Linear Algebra Subprograms) BLAS (Basic Linear Algebra Subprograms) Menu JavaScript must be enabled in your browser to display the table of contents. Questions/comments? lapack@cs.utk.edu Contact us get the lastest news BLAS(Legacy Website) FAQ Presentation: The BLAS (Basic Linear Algebra Subprograms) are routines that provide standard building blocks for performing basic vector and matrix operations. The Level 1 BLAS perform scalar, vector and vector-vector operations, the Level 2 BLAS perform matrix-vector operations, and the Level 3 BLAS perform matrix-matrix operations. Because the BLAS are efficient, portable, and widely available, they are commonly used in the development of high quality linear algebra software, LAPACK for example. Acknowledgments: This material is based upon work supported by the National Science Foundation under Grant No. ASC-9313958 and DOE Grant No. DE-FG03-94ER25219. Any opinions, findings and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation (NSF) or the Department of Energy (DOE). History Discover the great history behind BLAS. On April 2004 an oral history interview was conducted as part of the SIAM project on the history of software for scientific computing and numerical analysis. This interview is being conducted with Professor Jack Dongarra in his office at the University of Tennessee. The interviewer is Thomas Haigh. Download Interview Enjoy! Software: Licensing: The reference BLAS is a freely-available software package. It is available from netlib via anonymous ftp and the World Wide Web. Thus, it can be included in commercial software packages (and has been). We only ask that proper credit be given to the authors. Like all software, it is copyrighted. It is not trademarked, but we do ask the following: If you modify the source for these routines we ask that you change the name of the routine and comment the changes made to the original. We will gladly answer any questions regarding the software. If a modification is done, however, it is the responsibility of the person who modified the routine to provide support. REFERENCE BLAS Version 3.6.0 Download blas-3.6.0.tgz Updated November 2015 Quick Reference Guide CBLAS Download cblas.tgz Header file: cblas.h Level 3 BLAS tuned for single processors with caches Downlaod ssgemmbased.tgz Written by Kagstrom B., Ling P., and Van Loan C. High Performance GEMM-Based Level-3 BLAS Webpage - Fortran (High Performance Computing II, 1991, North-Holland) Extended precision Level 2 BLAS routines Download ecblas2.f BLAS for windows The reference BLAS is included inside the LAPACK package. Please refer tools built under Windows using Cmake the cross-platform, open-source build system. The new build system was developed in collaboration with Kitware Inc. A dedicated website (http://icl.cs.utk.edu/lapack-for-windows/lapack/) is available for Windows users. You will find information about your configuration need. You will be able to download BLAS pre-built libraries. SVN Access The LAPACK SVN repository is open for read-only for our users to be able to get the latest bug fixed. The latest version of BLAS is included in LAPACK package. svn co https://icl.cs.utk.edu/svn/lapack-dev/lapack/trunk/ The netlib family and its cousins Basic Linear Algebra Subprograms (BLAS) LAPACK PLASMA MAGMA CLAPACK (no longer maintained) EISPACK (no longer maintained) Support If you have any issue (install, performance), just post your questions on the the LAPACK User Forum. You can also send us an email at lapack@cs.utk.edu Documentation Checkout the BLAS Wikipedia page BLAS Technical Forum The BLAS Technical Forum standard is a specification of a set of kernel routines for linear algebra, historically called the Basic Linear Algebra Subprograms. http://www.netlib.org/blas/blast-forum/ Optimized BLAS Library Machine-specific optimized BLAS libraries are available for a variety of computer architectures. These optimized BLAS libraries are provided by the computer vendor or by an independent software vendor (ISV) . For further details, please see our FAQs. Alternatively, the user can download ATLAS to automatically generate an optimized BLAS library for his architecture. Some prebuilt optimized BLAS libraries are also available from the ATLAS site. If all else fails, the user can download a Fortran77 reference implementation of the BLAS from netlib. However, keep in mind that this is a reference implementation and is not optimized. BLAS vendor library List Last updated: July 20, 2005 BLAS Routines LEVEL 1 SINGLE SROTG - setup Givens rotation SROTMG - setup modified Givens rotation SROT - apply Givens rotation SROTM - apply modified Givens rotation SSWAP - swap x and y SSCAL - x = a*x SCOPY - copy x into y SAXPY - y = a*x + y SDOT - dot product SDSDOT - dot product with extended precision accumulation SNRM2 - Euclidean norm SCNRM2- Euclidean norm SASUM - sum of absolute values ISAMAX - index of max abs value DOUBLE DROTG - setup Givens rotation DROTMG - setup modified Givens rotation DROT - apply Givens rotation DROTM - apply modified Givens rotation DSWAP - swap x and y DSCAL - x = a*x DCOPY - copy x into y DAXPY - y = a*x + y DDOT - dot product DSDOT - dot product with extended precision accumulation DNRM2 - Euclidean norm DZNRM2 - Euclidean norm DASUM - sum of absolute values IDAMAX - index of max abs value COMPLEX CROTG - setup Givens rotation CSROT - apply Givens rotation CSWAP - swap x and y CSCAL - x = a*x CSSCAL - x = a*x CCOPY - copy x into y CAXPY - y = a*x + y CDOTU - dot product CDOTC - dot product, conjugating the first vector SCASUM - sum of absolute values ICAMAX - index of max abs value DOUBLE COMLPEX ZROTG - setup Givens rotation ZDROTF - apply Givens rotation ZSWAP - swap x and y ZSCAL - x = a*x ZDSCAL - x = a*x ZCOPY - copy x into y ZAXPY - y = a*x + y ZDOTU - dot product ZDOTC - dot product, conjugating the first vector DZASUM - sum of absolute values IZAMAX - index of max abs value LEVEL 2 Single SGEMV - matrix vector multiply SGBMV - banded matrix vector multiply SSYMV - symmetric matrix vector multiply SSBMV - symmetric banded matrix vector multiply SSPMV - symmetric packed matrix vector multiply STRMV - triangular matrix vector multiply STBMV - triangular banded matrix vector multiply STPMV - triangular packed matrix vector multiply STRSV - solving triangular matrix problems STBSV - solving triangular banded matrix problems STPSV - solving triangular packed matrix problems SGER - performs the rank 1 operation A := alpha*x*y' + A SSYR - performs the symmetric rank 1 operation A := alpha*x*x' + A SSPR - symmetric packed rank 1 operation A := alpha*x*x' + A SSYR2 - performs the symmetric rank 2 operation, A := alpha*x*y' + alpha*y*x' + A SSPR2 - performs the symmetric packed rank 2 operation, A := alpha*x*y' + alpha*y*x' + A Double DGEMV - matrix vector multiply DGBMV - banded matrix vector multiply DSYMV - symmetric matrix vector multiply DSBMV - symmetric banded matrix vector multiply DSPMV - symmetric packed matrix vector multiply DTRMV - triangular matrix vector multiply DTBMV - triangular banded matrix vector multiply DTPMV - triangular packed matrix vector multiply DTRSV - solving triangular matrix problems DTBSV - solving triangular banded matrix problems DTPSV - solving triangular packed matrix problems DGER - performs the rank 1 operation A := alpha*x*y' + A DSYR - performs the symmetric rank 1 operation A := alpha*x*x' + A DSPR - symmetric packed rank 1 operation A := alpha*x*x' + A DSYR2 - performs the symmetric rank 2 operation, A := alpha*x*y' + alpha*y*x' + A DSPR2 - performs the symmetric packed rank 2 operation, A := alpha*x*y' + alpha*y*x' + A Complex CGEMV - matrix vector multiply CGBMV - banded matrix vector multiply CHEMV - hermitian matrix vector multiply CHBMV - hermitian banded matrix vector multiply CHPMV - hermitian packed matrix vector multiply CTRMV - triangular matrix vector multiply CTBMV - triangular banded matrix vector multiply CTPMV - triangular packed matrix vector multiply CTRSV - solving triangular matrix problems CTBSV - solving triangular banded matrix problems CTPSV - solving triangular packed matrix problems CGERU - performs the rank 1 operation A := alpha*x*y' + A CGERC - performs the rank 1 operation A := alpha*x*conjg( y' ) + A CHER - hermitian rank 1 operation A := alpha*x*conjg(x') + A CHPR - hermitian packed rank 1 operation A := alpha*x*conjg( x' ) + A CHER2 - hermitian rank 2 operation CHPR2 - hermitian packed rank 2 operation Double Complex ZGEMV - matrix vector multiply ZGBMV - banded matrix vector multiply ZHEMV - hermitian matrix vector multiply ZHBMV - hermitian banded matrix vector multiply ZHPMV - hermitian packed matrix vector multiply ZTRMV - triangular matrix vector multiply ZTBMV - triangular banded matrix vector multiply ZTPMV - triangular packed matrix vector multiply ZTRSV - solving triangular matrix problems ZTBSV - solving triangular banded matrix problems ZTPSV - solving triangular packed matrix problems ZGERU - performs the rank 1 operation A := alpha*x*y' + A ZGERC - performs the rank 1 operation A := alpha*x*conjg( y' ) + A ZHER - hermitian rank 1 operation A := alpha*x*conjg(x') + A ZHPR - hermitian packed rank 1 operation A := alpha*x*conjg( x' ) + A ZHER2 - hermitian rank 2 operation ZHPR2 - hermitian packed rank 2 operation LEVEL 3 Single SGEMM - matrix matrix multiply SSYMM - symmetric matrix matrix multiply SSYRK - symmetric rank-k update to a matrix SSYR2K - symmetric rank-2k update to a matrix STRMM - triangular matrix matrix multiply STRSM - solving triangular matrix with multiple right hand sides Double DGEMM - matrix matrix multiply DSYMM - symmetric matrix matrix multiply DSYRK - symmetric rank-k update to a matrix DSYR2K - symmetric rank-2k update to a matrix DTRMM - triangular matrix matrix multiply DTRSM - solving triangular matrix with multiple right hand sides Complex CGEMM - matrix matrix multiply CSYMM - symmetric matrix matrix multiply CHEMM - hermitian matrix matrix multiply CSYRK - symmetric rank-k update to a matrix CHERK - hermitian rank-k update to a matrix CSYR2K - symmetric rank-2k update to a matrix CHER2K - hermitian rank-2k update to a matrix CTRMM - triangular matrix matrix multiply CTRSM - solving triangular matrix with multiple right hand sides Double Complex ZGEMM - matrix matrix multiply ZSYMM - symmetric matrix matrix multiply ZHEMM - hermitian matrix matrix multiply ZSYRK - symmetric rank-k update to a matrix ZHERK - hermitian rank-k update to a matrix ZSYR2K - symmetric rank-2k update to a matrix ZHER2K - hermitian rank-2k update to a matrix ZTRMM - triangular matrix matrix multiply ZTRSM - solving triangular matrix with multiple right hand sides Extended precision Level 2 BLAS routines SUBROUTINE ECGEMV ( TRANS, M, N, ALPHA, A, LDA, X, INCX, BETA, Y, INCY ) SUBROUTINE ECGBMV ( TRANS, M, N, KL, KU, ALPHA, A, LDA, X, INCX, BETA, Y, INCY ) SUBROUTINE ECHEMV ( UPLO, N, ALPHA, A, LDA, X, INCX,BETA, Y, INCY ) SUBROUTINE ECHBMV ( UPLO, N, K, ALPHA, A, LDA, X, INCX,BETA, Y, INCY ) SUBROUTINE ECHPMV ( UPLO, N, ALPHA, AP, X, INCX, BETA, Y, INCY ) SUBROUTINE ECTRMV ( UPLO, TRANS, DIAG, N, A, LDA, X, INCX ) SUBROUTINE ECTBMV ( UPLO, TRANS, DIAG, N, K, A, LDA, X, INCX ) SUBROUTINE ECTPMV ( UPLO, TRANS, DIAG, N, AP, X, INCX ) SUBROUTINE ECTRSV ( UPLO, TRANS, DIAG, N, A, LDA, X, INCX ) SUBROUTINE ECTBSV ( UPLO, TRANS, DIAG, N, K, A, LDA, X, INCX ) SUBROUTINE ECTPSV ( UPLO, TRANS, DIAG, N, AP, X, INCX ) SUBROUTINE ECGERU ( M, N, ALPHA, X, INCX, Y, INCY, A, LDA ) SUBROUTINE ECGERC ( M, N, ALPHA, X, INCX, Y, INCY, A, LDA ) SUBROUTINE ECHER ( UPLO, N, ALPHA, X, INCX, A, LDA ) SUBROUTINE ECHPR ( UPLO, N, ALPHA, X, INCX, AP ) SUBROUTINE ECHER2 ( UPLO, N, ALPHA, X, INCX, Y, INCY, A, LDA ) SUBROUTINE ECHPR2 ( UPLO, N, ALPHA, X, INCX, Y, INCY, AP ) Last updated 2015-11-15 14:40:53 PST"	"null"	"null"	"application programming interface standard for publishing libraries to perform basic linear algebra operations such as vector and matrix multiplication."	"true"
"Math Libs"	"CERNLIB"	"http://cernlib.web.cern.ch/cernlib/"	"The CERN Program Library is a large collection of general purpose libraries and modules maintained and offered in both source and object code form on the CERN central computers"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"CERN Program Library CERN Program Library The CERN Program Library is a large collection of general purpose libraries and modules maintained and offered in both source and object code form on the CERN central computers. The two most popular applications based on CERNLIB are PAW and GEANT 3.21. Most of these programs were developed at CERN and are therefore oriented towards the needs of a physics research laboratory that is general mathematics, data analysis, detectors simulation, data-handling etc... applicable to a wide range of problems. The development and support for CERNLIB is stopped. Downloads The recommended way to install CERNLIB is from the preinstalled distribution kits but it is also possible to INSTALL it from the source files. Documentation All the documentations and manuals related to the CERNLIB components available both in HTML and PostScript formats. Release notes List of release notes which describe all changes done in each CERNLIB release. Access If you wish to be able to download CERNLIB software please see the conditions. Last update: 10 October 2014"	"null"	"null"	"The CERN Program Library is a large collection of general purpose libraries and modules maintained and offered in both source and object code form on the CERN central computers"	"true"
"Math Libs"	"EISPACK"	"http://www.netlib.org/eispack/"	"a software library for numerical computation of eigenvalues and eigenvectors of matrices, written in FORTRAN"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"EISPACK EISPACK Click here to see the number of accesses to this library. EISPACK is a collection of Fortran subroutines that compute the eigenvalues and eigenvectors of nine classes of matrices: complex general, complex Hermitian, real general, real symmetric, real symmetric banded, real symmetric tridiagonal, special real tridiagonal, generalized real, and generalized real symmetric matices. In addition, two routines are included that use singular value decomposition to solve certain least-squares problems. EISPACK has been superseded for the most part by LAPACK.  file	readme for	overview of eispack  lib	3090vf by	Cline, Dubrulle, and Meyering for	vectorizing on an IBM 3090-VF computer ,	These codes might be a useful starting point ,	for vectorized versions on other computers as well.  lib	ex for	This directory contains a complete set of ,	testing routines for eispack.  file	bakvec.f gams	D4c4 for	back transformation, sign-symmetric matrix  file	balanc.f gams	D4c1a for	scaling, general matrix  file	balbak.f gams	D4c4 for	back scaling, general matrix  file	bandr.f gams	D4c1b1 for	reduction, symmetric band matrix  file	bandv.f  bandv.f plus dependencies gams	D4c3 for	some eigenvectors, symmetric band matrix  file	bisect.f  bisect.f plus dependencies gams	D4a5,D4c2a for	some eigenvalues, symmetric tridiagonal matrix  file	bqr.f  bqr.f plus dependencies gams	D4a6 for	some eigenvalues, symmetric band matrix  file	cbabk2.f gams	D4c4 for	back scaling, complex matrix  file	cbal.f gams	D4c1a for	scaling, complex matrix  file	cg.f  cg.f plus dependencies gams	D4a4 for	find eigenvalues and eigenvectors, complex general matrix  file	ch.f  ch.f plus dependencies gams	D4a3 for	find eigenvalues and eigenvectors, complex Hermitian matrix  file	cinvit.f  cinvit.f plus dependencies gams	D4c2b for	some eigenvectors, complex Hessenberg matrix  file	combak.f gams	D4c4 for	back transformation, complex matrix  file	comhes.f  comhes.f plus dependencies gams	D4c1b2 for	reduction, complex matrix  file	comlr.f  comlr.f plus dependencies gams	D4c2b for	all eigenvalues, complex Hessenberg matrix  file	comlr2.f  comlr2.f plus dependencies gams	D4c2b for	all eigenvalues and eigenvectors, complex Hessenberg matrix  file	comqr.f  comqr.f plus dependencies gams	D4c2b for	all eigenvalues, complex Hessenberg matrix  file	comqr2.f  comqr2.f plus dependencies gams	D4c2b for	all eigenvalues and eigenvectors, complex Hessenberg matrix  file	cortb.f gams	D4c4 for	back transformation, complex matrix  file	corth.f  corth.f plus dependencies gams	D4c1b2 for	reduction, complex matrix  file	elmbak.f gams	D4c4 for	back transformation, real matrix  file	elmhes.f gams	D4c1b2 for	reduction, real matrix  file	eltran.f gams	D4c4 for	reduction, real matrix  file	figi.f gams	D4c1c for	reduction, sign-symmetric matrix  file	figi2.f gams	D4c1c for	reduction, sign-symmetric matrix  file	hqr.f gams	D4c2b for	all eigenvalues, real Hessenberg matrix  file	hqr2.f  hqr2.f plus dependencies gams	D4c2b for	all eigenvalues and eigenvectors, real Hessenberg matrix  file	htrib3.f gams	D4c4 for	back transformation, Hermitian packed matrix  file	htribk.f gams	D4c4 for	back transformation, Hermitian matrix  file	htrid3.f  htrid3.f plus dependencies gams	D4c1b1 for	reduction, Hermitian packed matrix  file	htridi.f  htridi.f plus dependencies gams	D4c1b1 for	reduction, Hermitian matrix  file	imtql1.f  imtql1.f plus dependencies gams	D4a5,D4c2a for	all eigenvalues, symmetric tridiagonal matrix  file	imtql2.f  imtql2.f plus dependencies gams	D4a5,D4c2a for	all eigenvalues and eigenvectors, symmetric tridiagonal matrix  file	imtqlv.f  imtqlv.f plus dependencies gams	D4a5,D4c2a for	all eigenvalues, symmetric tridiagonal matrix  file	invit.f  invit.f plus dependencies gams	D4c2b for	some eigenvectors, real Hessenberg matrix  file	minfit.f  minfit.f plus dependencies gams	D6 for	least squares, real matrix  file	ortbak.f gams	D4c4 for	back transformation, real matrix  file	orthes.f gams	D4c1b2 for	reduction, real matrix  file	ortran.f gams	D4c4 for	reduction, real matrix  file	qzhes.f gams	D4c1b3 for	reduction, generalized matrix  file	qzit.f  qzit.f plus dependencies gams	D4c1b3 for	further reduction, generalized Hessenberg matrix  file	qzval.f gams	D4c2c for	all eigenvalues, generalized Hessenberg matrix  file	qzvec.f gams	D4c3 for	all eigenvectors, generalized Hessenberg matrix  file	ratqr.f  ratqr.f plus dependencies gams	D4a5,D4c2a for	some eigenvalues, symmetric tridiagonal matrix  file	rebak.f gams	D4c4 for	back transformation, symmetric generalized matrix  file	rebakb.f gams	D4c4 for	back transformation, symmetric generalized matrix  file	reduc.f gams	D4c1c for	reduction, symmetric generalized matrix  file	reduc2.f gams	D4c1c for	reduction, symmetric generalized matrix  file	rg.f  rg.f plus dependencies gams	D4a2 for	find eigenvalues and eigenvectors, general matrix  file	rgg.f  rgg.f plus dependencies gams	D4b2 for	find eigenvalues and eigenvectors, generalized matrix  file	rs.f  rs.f plus dependencies gams	D4a1 for	find eigenvalues and eigenvectors, symmetric matrix  file	rsb.f  rsb.f plus dependencies gams	D4a6 for	find eigenvalues and eigenvectors, band symmetric matrix  file	rsg.f  rsg.f plus dependencies gams	D4b1 for	find eigenvalues and eigenvectors, generalized symmetric matrix  file	rsgab.f  rsgab.f plus dependencies gams	D4b1 for	find eigenvalues and eigenvectors, generalized symmetric matrix  file	rsgba.f  rsgba.f plus dependencies gams	D4b1 for	find eigenvalues and eigenvectors, generalized symmetric matrix  file	rsm.f  rsm.f plus dependencies for	find eigenvalues and eigenvectors, symmetric matrix  file	rsp.f  rsp.f plus dependencies gams	D4a1 for	find eigenvalues and eigenvectors, packed symmetric matrix  file	rst.f  rst.f plus dependencies gams	D4a5 for	find eigenvalues and eigenvectors, tridiagonal symmetric matrix  file	rt.f  rt.f plus dependencies gams	D4a5 for	find eigenvalues and eigenvectors, sign-symmetric tridiagonal matrix  file	svd.f  svd.f plus dependencies gams	D6 for	singular value decomposition, real matrix  file	tinvit.f  tinvit.f plus dependencies gams	D4c3 for	some eigenvectors, symmetric tridiagonal matrix  file	tql1.f  tql1.f plus dependencies gams	D4a5,D4c2a for	all eigenvalues, symmetric tridiagonal matrix  file	tql2.f  tql2.f plus dependencies gams	D4a5,D4c2a for	all eigenvalues and eigenvectors, symmetric tridiagonal matrix  file	tqlrat.f  tqlrat.f plus dependencies gams	D4a5,D4c2a for	all eigenvalues, symmetric tridiagonal matrix  file	trbak1.f gams	D4c4 for	back transformation, symmetric matrix  file	trbak3.f gams	D4c4 for	back transformation, packed symmetric matrix  file	tred1.f gams	D4c1b1 for	reduction, symmetric matrix  file	tred2.f gams	D4c1b1 for	reduction, symmetric matrix  file	tred3.f gams	D4c1b1 for	reduction, packed symmetric matrix  file	tridib.f  tridib.f plus dependencies gams	D4a5,D4c2a for	some eigenvalues, symmetric tridiagonal matrix  file	tsturm.f  tsturm.f plus dependencies gams	D4a5,D4c2a for	some eigenvalues and eigenvectors, symmetric tridiagonal matrix"	"null"	"null"	"a software library for numerical computation of eigenvalues and eigenvectors of matrices, written in FORTRAN"	"true"
"Math Libs"	"FGSL"	"http://www.lrz.de/services/software/mathematik/gsl/fortran/index.html"	"portable, object-based Fortran interface to the"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"LRZ: FGSL: A Fortran interface to the GNU Scientific Library skip to the navigation. skip to the content. Search | Kontakt | Impressum | Datenschutz Home Aktuelles FAQ Services Servicedesk Id-Portal News FAQ Services Servicedesk Id-Portal Home Page Wir über uns (de) Services (de) Fragen, Beratung und Unterstützung (de) Forschung (de) Externe Links (de) GSL Information for ... University Staff Students Supercomputer Users Grid Users Cloud Users Institutions Network Administrators System Administrators Users with Handicap Press www.lrz.de/services/software/mathematik/gsl/fortran FGSL: A Fortran interface to the GNU Scientific Library This web page provides the source code for a portable, object-based Fortran interface to the GNU scientific library a collection of numerical routines for scientific computing. The package is licensed under the GPL. Please be aware that use of this software package is at your own risk. Download version 1.1.0 (for use with GSL 2.1) Browse README and NEWS files (also included in source package) The code repository is maintained at Github. Users of FGSL are encouraged to send bug reports via the Github ticket system. Previous releases version 1.0.0 (please continue to use this together with GSL 1.x) version 0.9.4 version 0.9.3 version 0.9.2 version 0.9.1 version 0.9 version 0.8.1 version 0.7 Further information This section particularly discusses the installation procedures for the most common Linux distributions, as well as for MacOS X. Credits are due to Tom Schoonjans for providing the builds and the below information. Redhat EL/Fedora/CentOS/Scientific Linux 6 distributions Gain access to the repository with: Redhat EL6 su -c 'rpm -Uvh http://lvserver.ugent.be/yum/xmi-repo-key-6.0-1.el6.noarch.rpm' Redhat EL7 su -c 'rpm -Uvh http://lvserver.ugent.be/yum/xmi-repo-key-7.0-1.el7.noarch.rpm' Fedora (19,20,21,23) su -c 'rpm -Uvh http://lvserver.ugent.be/yum/xmi-repo-key-fedora.noarch.rpm'  Afterwards download the packages with: su -c 'yum install fgsl fgsl-devel fgsl-doc'  Debian and Ubuntu Import our public key: curl http://lvserver.ugent.be/apt/xmi.packages.key | sudo apt-key add -  Next, add the package download location corresponding to your distribution to the /etc/apt/sources.list file (as root):  Debian Squeeze: deb http://lvserver.ugent.be/apt/debian squeeze stable deb-src http://lvserver.ugent.be/apt/debian squeeze stable  Debian Wheezy: deb http://lvserver.ugent.be/apt/debian wheezy stable deb-src http://lvserver.ugent.be/apt/debian wheezy stable  Debian Jessie: deb http://lvserver.ugent.be/apt/debian jessie stable deb-src http://lvserver.ugent.be/apt/debian jessie stable  Ubuntu Utopic: deb [arch=amd64] http://lvserver.ugent.be/apt/ubuntu utopic stable deb-src http://lvserver.ugent.be/apt/ubuntu utopic stable  Ubuntu Precise: deb [arch=amd64] http://lvserver.ugent.be/apt/ubuntu precise stable deb-src http://lvserver.ugent.be/apt/ubuntu precise stable  Ubuntu Quantal, Raring and Saucy:  FGSL support for these releases has been dropped, in line with official Ubuntu policy. Ubuntu Trusty: deb [arch=amd64] http://lvserver.ugent.be/apt/ubuntu trusty stable deb-src http://lvserver.ugent.be/apt/ubuntu trusty stable Ubuntu Vivid: deb [arch=amd64] http://lvserver.ugent.be/apt/ubuntu vivid stable deb-src http://lvserver.ugent.be/apt/ubuntu vivid stable Ubuntu 15.10 Wily: deb [arch=amd64] http://lvserver.ugent.be/apt/ubuntu wily stable deb-src http://lvserver.ugent.be/apt/ubuntu wily stable Update the apt cache with: sudo apt-get update Afterwards, you should be able to install fgsl with: sudo apt-get install libfgsl0 libfgsl0-dev libfgsl0-doc MacOS MacPorts provides builds of FGSL for installation on systems running MacOS X. Alternatively, FGSL is also supported in Homebrew, a very popular (maybe even the most popular) package manager for Mac OS X nowadays. After installing Homebrew (instructions at http://brew.sh), one can install FGSL simply with: brew install homebrew/science/fgsl  Forum article The August 2007 edition of SIGPLAN Fortran Forum contains an article on some aspects of FGSL. A correction for an error in a section of this article which describes some ideas for future developments is also available.   Häufig nachgefragte Themen Antivirus Compute Cloud Eduroam E-Mail Gitlab Jobs Kennungen Kurse Lizenzen Posterdruck Schriftenbezug Serverbetrieb Software SuperMUC (Status) Sync+Share VPN Vorträge, Veranstaltungen Webhosting WLAN Zertifikate Subscribe & Follow Newsletter Mailinglisten Kontakt Email How to find us © Leibniz-Rechenzentrum Valid as of 2016-02-20 Datenschutzerklärung | Impressum"	"null"	"null"	"portable, object-based Fortran interface to the"	"true"
"Math Libs"	"GNU scientific library"	"http://www.lrz.de/services/software/mathematik/gsl/"	"portable, object-based Fortran interface to the"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"LRZ: The GNU Scientific Library skip to the navigation. skip to the content. Search | Kontakt | Impressum | Datenschutz Home Aktuelles FAQ Services Servicedesk Id-Portal News FAQ Services Servicedesk Id-Portal Home Page Wir über uns (de) Services (de) Fragen, Beratung und Unterstützung (de) Forschung (de) Externe Links (de) Mathematische Programmbibliotheken (de) Plasma NAG (de) GSL ARPACK BLAS (de) Boost Hypre LAPACK (de) PSPASES ScaLAPACK FFTW Metis/PARMetis Public Domain Software (de) LAPACK Users' Guide PLAPACK GEMM/BLAS (de) SUNDIALS Information for ... University Staff Students Supercomputer Users Grid Users Cloud Users Institutions Network Administrators System Administrators Users with Handicap Press www.lrz.de/services/software/mathematik/gsl The GNU Scientific Library An introduction to the Installation and Usage of the installations of the GNU Scientific Library (GSL) at LRZ. What is GSL? The GNU Scientific Library (GSL) is a collection of routines for numerical computing. The routines have been written from scratch by the GSL team in ANSI C. GSL is free software distributed under the terms of the GNU General Public License. Functionality and Documentation GSL provides a modern Applications Programming Interface (API) for C programmers, while allowing wrappers to be written for very high level languages. The library covers the following areas, Complex Numbers Roots of Polynomials Special Functions Vectors and Matrices Permutations Sorting BLAS Support Linear Algebra Eigensystems Fast Fourier Transforms Quadrature Random Numbers Quasi-Random Sequences Random Distributions Statistics Histograms N-Tuples Monte Carlo Integration Simulated Annealing Differential Equations Interpolation Numerical Differentiation Chebyshev Approximation Series Acceleration Discrete Hankel Transforms Root-Finding Minimization Large Least squares running statistics spline linear algebra spline matrix routines Least-Squares Fitting Physical Constants IEEE Floating-Point Further information can be found in the GSL Reference Manual (version 1.16 - 2.6 MB PDF, or version 2.1 - 3.3 MP PDF). Important Note: the 1.x and 2.x releases have significant different APIs and are therefore source and binary incompatible. Please also refer to the GSL Home Page for downloads, design documentation and up-to-date releases of the Library. Usage of GSL on LRZ computing platforms Accessing the GSL installations Access to the GSL installations is provided via the environment module gsl: module load gsl  This will suitably set all required environment variables. The include files are accessed via the GSL_INC variable and should be referenced as #include <gsl/gsl_foo.h>  in your source files (where ""foo"" is a placeholder for the various functionality areas covered by GSL). Hence, compilation is done via [gcc|icc|icpc] <options> $GSL_INC foo.c  static linkage via [gcc|icc|icpc] <options> myprog  <objects> $GSL_LIB $GSL_BLAS_LIB  and dynamic linkage via [gcc|icc|icpc] <options> myprog  <objects> $GSL_SHLIB $GSL_BLAS_SHLIB  The GSL CBLAS implementation can be replaced by $MKL_LIB or $MKL_SHLIB on all Intel-based Linux systems after loading the module mkl for improved performance of MKL. Fortran interface The Fortran interface is available on all HPC systems and can be used by performing   module load mkl   module load gsl   module load fgsl To access the module information file for FGSL any source code referencing routines must have a use fgsl  statement; also note that any name beginning with gsl_ from the C API must be replaced by the corresponding fgsl_ name, and there is no need to differentiate between pointers and passed-by-value since this is properly attended to by the wrapper. Compiling and linking then proceeds as follows:   ifort $FGSL_INC -c foo.f90   ...   ifort $FGSL_INC -c myprog.f90   ifort -o myprog.exe foo.o ... myprog.o $FGSL_LIB $GSL_LIB $MKL_LIB Further Information Please consult the GSL examples for how to use GSL from C, and the FGSL examples for how to use FGSL from Fortran. These are contained in the source packages for GSL and FGSL, respectively. The source code for the Fortran GSL interface is available from the LRZ web server.   Häufig nachgefragte Themen Antivirus Compute Cloud Eduroam E-Mail Gitlab Jobs Kennungen Kurse Lizenzen Posterdruck Schriftenbezug Serverbetrieb Software SuperMUC (Status) Sync+Share VPN Vorträge, Veranstaltungen Webhosting WLAN Zertifikate Subscribe & Follow Newsletter Mailinglisten Kontakt Email How to find us © Leibniz-Rechenzentrum Valid as of 2016-02-20 Datenschutzerklärung | Impressum"	"null"	"null"	"portable, object-based Fortran interface to the"	"true"
"Math Libs"	"IMSL"	"http://www.roguewave.com/products-services/imsl-numerical-libraries/fortran-libraries"	"The IMSL Fortran Numerical Library is the standard for high performance computing commercial mathematics and statistics libraries"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"IMSL Fortran Numerical Library | Rogue Wave   1.800.487.3217  info@roguewave.com Download Evaluation Toggle navigation Products All Products CentOS Support Open Source Support Klocwork Zend Server Zend Studio CodeDynamics TotalView for HPC IMSL Numerical Libraries Visualization HostAccess HydraExpress MemoryScape PV-WAVE SourcePro Stingray Services Request Demo Request Evaluation Request Quote Events All Events In-Person Events Upcoming Webinars On-Demand Webinars Resources All Resources Case Studies Downloads eLearning Datasheets Presentations Videos White Papers Our Blog Customers Our Customers Automotive Software Development Embedded Software Military and Aerospace Mobile and Communications Game Development Medical Devices and Software Support Programs and Policies Customer Support Support Request Latest Versions Update Request User Forums Knowledge Base Product Documentation Company About Rogue Wave Careers Leadership Team Academic Programs Partners News Contact Us   IMSL   C/C++ Library Fortran Library Java Library .NET Library Python Wrappers Solution Areas ROI Fortran Numerical Library Embeddable numerical analysis functions for Fortran applications The IMSL Fortran Numerical Library is the standard for high performance computing commercial mathematics and statistics libraries, providing: Superior accuracy and reliability through 40 years of refinement Embeddable in applications A comprehensive set of 1000+ algorithms Supporting parallel processing architectures since 1990 Learn what's new with in the latest release or see a full features list here. Portable with software and hardware upgrades as wide range of OSs, compilers and chip sets are supported Fully supported by Rogue Wave “It was much faster to use procedures from the imsl fortran library than create those same procedures on my own.” Dr. Rasmus Lents, University of Wisconsin Professor, Department of Economics   The gold standard for over four decades With over 1000 fully supported algorithms, the IMSL Fortran Numerical Library is the most comprehensive mathematics and statistics library available. Highly robust and reliable, it contains proven technology that has been thoroughly tested, well documented, continuously maintained, optimized on various platforms and used by developers worldwide for four decades. Instead of writing, testing and documenting complex mathematical and statistical algorithms from scratch or getting them from open source, developers use the algorithms provided in the IMSL Fortran Numerical Library to help accelerate application development and time to market. The original, easy-to-use Fortran Library The IMSL Fortran Numerical Library is the most convenient to use Fortran library available today. Features that make your developers more productive include: Convenient optional arguments: Allow users to utilize the fast, convenient optional arguments of modern Fortran syntax for all of the relevant algorithms in the library, saving significant coding time and helping to avoid errors Backward compatibility: Ensuring that legacy code can run on future releases Naming conventions: Function names resemble actual algorithm names, so users do not have to learn and remember special function names Over 1,000 algorithms: The most comprehensive math and statistics library available Broad platform support: Linux, Unix and Windows   Data mining and forecasting functionality Statistical functionality Mathmatical functionality Regression Time series and forecasting Optimization Cluster analysis Nonparametric tests Matrix operations Auto_ARIMA Analysis of variance Linear algebra ARCH, GARCH Generalized linear models Eigensystem analysis Principal components analysis Goodness of fit Interpolation and approximation Factor analysis Distribution functions Quadrature Discriminant analysis Random number generation Differential equations Generalized categorical models Hypothesis testing PDEs Bayesian seasonal model Design of experiments Feynman-Kac solver Statistical process control Transforms Multivariate analysis Nonlinear equations Correlations and covariance Linear and nonlinear programming Multidimensional scaling Special functions Summary statistics Utilities Overview Features What's new Information and support Function Catalog Supported Platforms Documentation Technical Support Get started Request an Evaluation Copy Request a Demo Session Request a Quote Contact Us Resources Datasheet White Papers Case Studies Learn more about our capabilities. Code Migration Move your application to different platforms quickly and easily by using core components that insulate from the underlying infrastructure. See how we can help Application Security Protect your software against security risks by detecting vulnerabilities within code and during runtime. With advanced static code analysis, runtime debugging, predictive analytics, and open source scanning, you’re covered. Strengthen your code Developing User Interfaces Simplify the development of your user interfaces, from complex visual data analysis to basic GUIs, with comprehensive graphics, controls, and data processing toolkits. See how it works Dynamic Analysis See and prevent execution, memory, and data issues on running systems with highly scalable and customizable dynamic analysis. See how it works All Capabilities Products and Services Klocwork CodeDynamics TotalView for HPC Open Source Support IMSL Numerical Libraries OpenLogic Exchange Visualization PV-WAVE SourcePro Stingray HostAccess Capabilities Application Security Static Code Analysis Dynamic Analysis Predictive Analytics Open Source Support Web Development & Deployment Code Building Blocks Open Source Auditing Code Refactoring API Management Application Performance Management Open Source Management Resources In-Person Events Blog White Papers Case Studies Videos On-Demand Webinars Company News Careers Privacy Sitemap Terms of Use  1.800.487.3217 © 2016 Rogue Wave Software, Inc.  All rights reserved.   Rogue Wave is a registered trademark of Rogue Wave Software, Inc. Other product and service names may be trademarks of Rogue Wave Software, Inc. or its affiliates. Sitemap | Privacy"	"null"	"null"	"The IMSL Fortran Numerical Library is the standard for high performance computing commercial mathematics and statistics libraries"	"true"
"Math Libs"	"Lis"	"http://www.ssisc.org/lis/index.en.html#download"	"a Library of Iterative Solvers for Linear Systems"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"9"	"7"	"GitHub - anishida/lis: Lis (Library of Iterative Solvers for linear systems, pronounced [lis]) is a scalable parallel software library for solving linear equations and eigenvalue problems that arise in the numerical solution of partial differential equations using iterative methods. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 14 Fork 7 anishida/lis Code Issues 0 Pull requests 0 Pulse Graphs Lis (Library of Iterative Solvers for linear systems, pronounced [lis]) is a scalable parallel software library for solving linear equations and eigenvalue problems that arise in the numerical solution of partial differential equations using iterative methods. http://www.ssisc.org/lis/ 241 commits 2 branches 29 releases Fetching contributors C 60.1% FORTRAN 16.1% Makefile 11.7% Shell 8.8% M4 1.3% C++ 1.3% Other 0.7% C FORTRAN Makefile Shell M4 C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show 1.5.66 1.5.65 1.5.64 1.5.63 1.5.62 1.5.61 1.5.60 1.5.59 1.5.58 1.5.57 1.5.56 1.5.55 1.5.54 1.5.53 1.5.52 1.5.51 1.5.50 1.5.49 1.5.48 1.5.47 1.5.46 1.5.45 1.5.44 1.5.43 1.5.42 1.5.41 1.5.40 1.5.39 1.5.38 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. config doc graphics include m4 src test win .gitignore Fix file order Dec 27, 2014 AUTHORS COPYING ChangeLog INSTALL Makefile.am Makefile.in NEWS README aclocal.m4 configure configure.ac reconfigure.sh README README ======   Lis (Library of Iterative Solvers for linear systems, pronounced [lis])  is a parallel software library for solving linear equations and eigenvalue problems that arise in the numerical solution of partial differential equations using iterative methods.   Lis provides facilities for:  * Automatic program configuration  * NUMA aware hybrid implementation with MPI and OpenMP  * Exchangeable dense and sparse matrix storage formats  * Basic linear algebra operations for dense and sparse matrices  * Parallel iterative methods for linear equations and standard eigenvalue problems  * Parallel preconditioners for iterative methods  * Quadruple precision floating point operations  * Performance analysis  * Command-line interface to solvers and benchmarks   The installation of Lis requires a C compiler. The Fortran interface requires a Fortran compiler, and the algebraic multigrid preconditioner requires a Fortran 90 compiler. For parallel computing environments, an OpenMP or an MPI library is used. Both the Harwell-Boeing and Matrix Market formats are supported to import and export user data.   See PDF files in directory doc for full description.   References ----------  * Akira Nishida (2010). ""Experience in Developing an Open Source  Scalable Software Infrastructure in Japan"". Computational Science and Its Applications - ICCSA 2010. Lecture Notes in Computer Science 6017. Springer. pp. 87-98. doi:10.1007/978-3-642-12165-4_36. ISBN 3-642-12164-0.  * Hisashi Kotakemori, Hidehiko Hasegawa, Tamito Kajiyama, Akira Nukada, Reiji Suda, and Akira Nishida (2008). ""Performance Evaluation of  Parallel Sparse Matrix-Vector Products on SGI Altix 3700"". OpenMP Shared Memory Parallel Programming. Lecture Notes in Computer Science 4315. Springer. pp. 153-163. doi:10.1007/978-3-540-68555-5_13. ISBN 3-540-68554-5.  * Hisashi Kotakemori, Hidehiko Hasegawa, and Akira Nishida (2005). ""Performance Evaluation of a Parallel Iterative Method Library using OpenMP"". Proceedings of the 8th International Conference on High  Performance Computing in Asia Pacific Region (HPC Asia 2005). Beijing: IEEE. pp. 432-436. doi:10.1109/HPCASIA.2005.74. ISBN 0-7695-2486-9.  * Akihiro Fujii, Akira Nishida, and Yoshio Oyanagi (2005). ""Evaluation of Parallel Aggregate Creation Orders: Smoothed Aggregation Algebraic Multigrid Method"". High Performance Computational Science and Engineering. Springer. pp. 99-122. doi:10.1007/0-387-24049-7_6. ISBN 1-4419-3684-X.   Official Website ----------------  http://www.ssisc.org/lis/  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/anishida/lis"	"a Library of Iterative Solvers for Linear Systems"	"true"
"Math Libs"	"NAG Fortran Library"	"http://www.nag.co.uk/numeric/fl/FLdescription.asp"	"Produced by experts for use in a variety of applications, the NAG Fortran Library has a global reputation for its excellence and, with hundreds of fully documented and tested routines, is the largest collection of mathematical and statistical algorithms available"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The NAG Fortran Library www.nag.co.uk Skip to main content Blog NAGnews Partners Support Search Search form Search Find Europe, UK & Headquarters Wilkinson House Jordan Hill Road Oxford OX2 8DR, UK North America 801 Warrenville Road, Suite 185 Lisle, IL 60532-4332, USA Japan Hatchobori Frontier Building 2F 4-9-9 Hatchobori, Chuo-ku Tokyo 104-0032, JAPAN Toggle navigation Home Solutions Education Solutions Engineering Industry Solutions Finance Industry Solutions Finance Related Presentations Actuarial Science ISV Solutions Partnerships and ISVs Management Solutions Oil & Gas Industry Solutions Science Business Intelligence & Analytics Solutions Sign up to our newsletter Email address * Submit Services Software Services Software Modernization Service Algorithmic Differentiation Mathematical Optimization Consultancy Algorithm Design & Development Numerical Software Quality Software Porting & Tuning Services Examples Training Courses HPC Expertise Client Projects Price Enquiry Sign up to our newsletter Email address * Submit Software NAG Library NAG C Library NAG C Library - Latest Content NAG Fortran Library NAG Fortran Library - Latest Content NAG Library for Python NAG Library for Java NAG Toolbox for MATLAB® NAG Library for .NET NAG Library for SMP & Multicore NAG Library for Xeon Phi™ NAG MPI Parallel Library Numerical Routines for GPUs Data Mining Components Languages and Environments NAG and Microsoft Excel NAG Fortran Compiler NAG Fortran Builder NAG Library - New Content Optimization Optimization Optimization Consultancy Optimization in Industry and Academia Optimization techniques Accuracy & Quality Assurance Software Downloads C Library Versions Fortran Library Versions Library for .NET Library for Java Versions Library for Python Versions Library for SMP & Multicore Versions Library for the Xeon Phi Toolbox for MATLAB® Versions Fortran Compiler Versions DCO / C++ Versions Documentation Case Studies Purchasing Webinars & Presentations Technical Report Repository Price Enquiry Sign up to our newsletter Email address * Submit HPC HPC Expertise Technology Intelligence Service Software Modernization Service Technology & Strategy Procurement & Commissioning Application Performance User Support Services DCSE Case Studies POP - EU Project Price Enquiry Sign up to our newsletter Email address * Submit Academia Academia Eligibility Request Software Downloads Training Courses Collaboration Code Contribution Careers How to cite NAG Webinars & Presentations Students and NAG Sign up to our newsletter Email address * Submit Support Technical Support Overview Contact Technical Support Documentation Installer's & Users' Notes Known Issues Software Licensing Software Downloads C Library Versions Fortran Library Versions Library for .NET Library for Java Versions Library for Python Versions Library for SMP & Multicore Versions Library for Xeon Phi Toolbox for MATLAB Versions Fortran Compiler Versions DCO / C++ Versions Kusari Licence Management Kusari FAQ Technical Report Repository Sign up to our newsletter Email address * Submit About Who we are and what we do Worldwide Contact Information Worldwide Distributor Network People Press Releases Collaboration Careers Investors in People Gold Diversity Goals NAG Employee Benefits UK Employee Interviews Environmental Policy Help with International Relocation Living, working and relocating to Oxfordshire NAG Placement Student Story NAG Skills Pledge Case Studies Life Service Recognition Award Events Industry Articles Membership Sign up to our newsletter Email address * Submit You are in...The NAG... Home Software NAG Library The NAG... Global_productpage.jpg The NAG Fortran Library The world’s largest collection of robust, documented, tested and maintained numerical algorithms. Unrivalled Reliability Algorithms that work for your applications. Flexible to the core. If you need to add mathematical and statistical functionality to your applications or if you have complex mathematical problems to solve, the NAG Fortran Library will provide a host of benefits. The NAG Library provides a solid numerical foundation and serves diverse mathematical areas. It is expertly documented, maintained and supported and is regularly updated with cutting edge algorithmic capabilities. Try Buy Download Accelerating development of your algorithm reliant application When Schroders were developing an in-house portfolio construction tool they massively reduced their development time by using NAG routines by creating 20 optimal portfolios in the same time that it used to take to create one. This gave them more time to focus on other value added areas. Learn more  Access the documentation Associated information Optimization, Sparse Linear Algebra, Nearest Correlation Matrix, Changepoint Analysis, Kalman Filter, Quantiles and More – it’s all in there. We've selected key highlights from the NAG Library and show in more detail how a particular function or set of functions can be used. To learn more about a specific area/function click on the relevant link below. Mixed Integer Nonlinear Programming NEW Unscented Kalman Filter NEW Further Additions to Nearest Correlation Matrix NEW LARS / LASSO / Forward Stagewise Regression NEW Change Point Analysis NEW Confluent and Gauss Hypergeometric Functions Two-stage Spline Approximation to Scattered Data Further Additions to Nearest Correlation Matrix Heston Model with Term Structure Optimization for Non-Negative Least Squares Quadratic Eigenvalue Problem Inhomogeneous Time Series Gaussian Mixture Model Best subset Matrix Functions Multi-start Optimization Bound Optimization By Quadratic Approximation Linear Quantile Regression Sampling with Unequal Weights Calling random number generators from a multi-threaded environment Copulas Skipping Ahead the Mersenne Twister Random Number Generator Global Optimization Nearest Correlation Matrix Partial Least Squares / Ridge Regression Quantiles Search routines Quick tour of the NAG Toolbox for MATLAB Video of Quick tour of the NAG Toolbox for MATLAB Benefits Speed up time to market / application development Developing routines is time consuming and costly, using the NAG Library saves time and reduces maintenance costs Deliver competitive advantage Focus on the innovative and cutting edge functionality of your application that delivers competitive advantage Thread Safety The NAG Library is under constant quality tests and many routines are thread-safe, giving your application a quality standard seal of approval Growth strategy New routines are added to the NAG Library on a regular basis ensuring that customers have access to new mathematical and statistical advances in a timely way Available for all these languages and environments Fortran | C | C++ | Python | Java | MATLAB | C# and .NET | Excel and VBA | SMP & Multicore | Xeon Phi | Other languages & environments Product Details Supporting Documentation Overview Product Availability The complete NAG Fortran Library Manual, Mark 25 can be viewed on-line in the following formats: HTML: The full manual available as HTML (using HTML5 features such as MathML and SVG in suitable browsers); PDF: the same manual as above, consisting of many PDF files, may be browsed via the HTML table of contents pages; Single file PDF: the manual as a single PDF file; ZIP file: The archive as a ZIP file; Windows html help: Windows html help version as a single file; (Note: due to windows security restrictions the help file may not be read directly from the internet. Save a copy to your local disk, and then read the local copy. Also depending on the Windows version installed you may need to unblock files copied from the internet before they may be used (right click on the help file and select properties then select the ""unblock"" button). Advice on viewing and navigating the first three formats can be found in the Online Documentation help document. You are strongly advised to read this document if you wish to try the HTML format. The two single file formats are more compact than the formats using one file per routine, but of course are a larger download if you only need to view the documentation for a few routines. The Library is organized into Chapters - each being documented with its own Introduction and Contents list followed by a comprehensive document for each function detailing its purpose, description, list of parameters and possible error exits. Example programs and results are also supplied. All examples are available on-line to facilitate their use as templates for the users' calling programs. The error bulletin contains a list of errors or other problems which are known to exist in the NAG Fortran Library, along with suggested workarounds where possible. The previous marks of the NAG Fortran Library Manual are still available: Mark 24, Mark 23, Mark 22 and Mark 21. A full list of routines withdrawn from past marks of the Library has been provided with pointers to the recommended replacement routine. Support documentation for the installation and use of each implementation of the NAG Fortran Library is available. Produced by experts for use in a variety of applications, the NAG Library is the largest commercially available collection of numerical and statistical algorithms in the world. With over 1,600 tried and tested routines that are both flexible and portable it remains at the core of thousands of programs and applications spanning the globe. The NAG Library is widely used and trusted because of its unrivalled quality, reliability and portability. Whether it is a single PC or a cluster of the world’s largest supercomputers, the NAG Library has the numerical capabilities to fit your model. The NAG Fortran Library is available as a Dynamic Link Library (DLLs) for use on Windows systems. The following table provides a simple mechanism by which you can determine the most appropriate NAG Fortran Library implementation for your needs. The table is organized by grouping implementations firstly by operating system and secondly by compiler; you simply select the combination appropriate to the system that you use. The most important information that you can derive from this is the NAG product code which is located in the rightmost column of each record and is a 10 character string beginning FL. Windows DLL (Windows API) 32 bit FLDLL254ML Intel Fortran 32 bit FLW3225DCL Intel Fortran 32 bit FLW3225DEL Intel Fortran 64 bit FLW6I25DCL Intel Fortran 64 bit (ILP64) FLW6I24DDL Intel Fortran 64 bit FLW6I25DEL Linux (x86) Intel Fortran 64 bit FLL6I25DCL Intel Fortran 32 bit FLLUX25DCL GNU Fortran 64 bit FLL6A24DFL GNU Fortran 32 bit FLL3A22DFL GNU Fortran 64 bit (ILP64) FLL6A23DHL NAG Fortran 64 bit FLL6A24D9L NAG Fortran 32 bit FLL3A23D9L PGI f90 64 bit FLL6A24DPL Linux (Power6) IBM xlf 64 bit FLIL622DAL Mac OS X Intel Fortran 64 bit FLMI624DCL NAG Fortran 64 bit FLMI624D9L AIX IBM xlf 64 bit FLAI623DAL IBM xlf 32 bit FLAI321DAL NAG Fortran 32 bit FLAI321D9L Solaris (SPARC) Sun f95 32 bit FLSOL22DCL Sun f95 64 bit FLSO622DCL Solaris (x86) Sun f95 64 bit FLSA622DCL Services and Support Outstanding service and support from our expert team Technical Support Quality Assured Numerical Services Training Collaboration First line technical support when you need it NAG’s Technical Support Service is provided by a team of specialists in numerical and statistical software development, in fact the NAG Library and Compiler development team share responsibility for the support of our software. We strongly believe that in order to effectively support complex software the technicians must be both experienced and understand the intricacies of the computational techniques. This conviction is reflected in the composition of the team most of whom are qualified to PhD level and have combined experience of software support in excess of 50 years. NAG accuracy is quality assured NAG provides accurate, documented, numerical software and services to help you make sure that your results are accurate. The validity of each NAG routine is tested for each platform that it is enabled for. Only when an implementation satisfies our stringent accuracy standards is it released. As a result, you can rely on the proven accuracy and reliability of NAG to give you the right answers. NAG is an ISO 9001 certified organization. Reap the benefits of NAG expertise The numerical codes that underpin the results from your software are not future proof. While the mathematics does not change, the codes have a limited lifespan because of new hardware structures, mathematical innovation and changes in application needs. NAG Numerical Services help you and your organization find and implement the optimum numerical computation solutions. NAG works with your team to impart skills and techniques that will help solve your numerical software problems. Expert teaching and instruction from numerical experts Your users, developers and managers can all benefit from NAG's highly regarded training courses. All of the training courses shown below have been delivered successfully either from NAG offices or at client premises. Training courses can be tailored to suit your particular requirements and be targeted to novice, intermediate or experienced levels. Specialized mentoring and development programs are also available for HPC managers. Working in collaboration with industry and academia NAG was founded on collaboration as an inter-University collaborative venture combining the talents of mathematicians and computer scientists. NAG has continued to collaborate with individuals and organizations over the past four decades and today longstanding and new partners are delivering tangible benefits to users and students all over the world. Try Buy Download About About us Collaboration Careers Contact NAGnews Support Contact Support Documentation Installer’s & Users’ Notes Resources NAGnews Blog Case Studies White Papers Webinars Purchase Product Availability Trials Price Enquiry Europe, UK & Headquarters Wilkinson House Jordan Hill Road Oxford  OX2 8DR, UK North America 801 Warrenville Road, Suite 185 Lisle,  IL  60532-4332, USA Japan Hatchobori Frontier Building 2F 4-9-9 Hatchobori, Chuo-ku Tokyo 104-0032, JAPAN"	"null"	"null"	"Produced by experts for use in a variety of applications, the NAG Fortran Library has a global reputation for its excellence and, with hundreds of fully documented and tested routines, is the largest collection of mathematical and statistical algorithms available"	"true"
"Math Libs"	"netCDF"	"https://github.com/Unidata/netcdf-fortran"	"a set of software libraries and self-describing, machine-independent data formats that support the creation, access, and sharing of array-oriented scientific data."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"42"	"27"	"24"	"GitHub - Unidata/netcdf-fortran: Official GitHub repository for netCDF-Fortran libraries, which depend on the netCDF C library.  Install the netCDF C library first. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 42 Fork 24 Unidata/netcdf-fortran Code Issues 12 Pull requests 0 Pulse Graphs Official GitHub repository for netCDF-Fortran libraries, which depend on the netCDF C library. Install the netCDF C library first. 257 commits 15 branches 9 releases 9 contributors FORTRAN 84.2% C++ 4.6% C 4.1% M4 3.6% CMake 1.3% Pascal 1.1% Other 1.1% FORTRAN C++ C M4 CMake Pascal Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 4.4-beta2 4.4.4 f03 master merge-check netcdf-fortran-4.2 netcdf-fortran-cmake russ rweed-contrib rweed trunk-old trunk-old@82 v4.4.2 v4.4.3-prep v4.4.3-prep2 Nothing to show v4.4.4 v4.4.3 v4.4.2 v4.4.1 v4.4.1-rc1 v4.4.0 v4.4.0-rc1 v4.4b5 netcdf-fortran-4.2 Nothing to show New pull request Latest commit bb04521 May 13, 2016 WardF Bumped the netcdf fortran SO version due to new symbols. Permalink Failed to load latest commit information. CMakeExtras Ensuring CMakeExtras are included in the tarball generated by 'make d… Jul 2, 2014 docs Added a travis badge to readme. May 6, 2016 examples Structure test configuration more like netcdf-c so that the Jan 22, 2016 fortran Additional reorganization and cleanup of the netcdf-fortran f90 docum… May 5, 2016 libsrc Bumped the netcdf fortran SO version due to new symbols. May 13, 2016 m4 add dummy file to get otherwise empty m4/ subdirectory in repository Jun 19, 2014 nf03_test Attempting to correct an issue with generated makefile.in and pgi com… Mar 22, 2016 nf_test Fixing a problem introduced with netcdf-c cdf-5 branch. Oct 12, 2015 .gitignore Updated gitignore with build directories. May 6, 2016 .travis.yml Added NC3-only to travis-ci. May 6, 2016 CMakeLists.txt Bumped the netcdf fortran SO version due to new symbols. May 13, 2016 COPYRIGHT Make Fortran CMakeLists.txt more like netcdf-c version Dec 6, 2013 CTestConfig.cmake.in Refactored variables used for custom CDash dashboard instance. Apr 1, 2016 Doxyfile.general Updated version string in a couple of places. Jan 20, 2016 F03Interfaces_LICENSE Incorporate Richard Weed's mods before testing Jun 18, 2014 Makefile.am Ensuring CMakeExtras are included in the tarball generated by 'make d… Jul 2, 2014 README.md Added a travis badge to readme. May 6, 2016 RELEASE_NOTES.md Bumped the netcdf fortran SO version due to new symbols. May 13, 2016 acinclude.m4 Apply Takeshi Enomoto's patch for case of .mod files on OSX Sep 24, 2013 config.h.cmake.in Added initial structure for Doxygen-generated documentation, followin… Jun 18, 2014 configure.ac Bumped the netcdf fortran SO version due to new symbols. May 13, 2016 netcdf-fortran.pc.in Fix pkg-config for ""--static --libs"" to output ""-lnetcdff -lnetcdf"". Apr 7, 2013 nf-config.cmake.in Cleaned out old utility scripts. Changed name of cmake templates to f… Jun 16, 2014 nf-config.in Removed --libs option, to avoid confusion with --flibs option, which Apr 8, 2013 README.md Unidata NetCDF Fortran Library Overview The Unidata network Common Data Form (netCDF) is an interface for scientific data access and a set of freely-distributed software libraries that provide an implementation of the interface. The netCDF library also defines a machine-independent format for representing scientific data. Together, the interface, library, and format support the creation, access, and sharing of scientific data. This software package provides Fortran application interfaces for accessing netCDF data. It depends on the netCDF C library, which must be installed first. Other separate software distributions available from Unidata provide C Java, C++, and Python. They have been tested on various common platforms. NetCDF files are self-describing, network-transparent, directly accessible, and extendible. Self-describing means that a netCDF file includes information about the data it contains. Network-transparent means that a netCDF file is represented in a form that can be accessed by computers with different ways of storing integers, characters, and floating-point numbers. Direct-access means that a small subset of a large dataset may be accessed efficiently, without first reading through all the preceding data. Extendible means that data can be appended to a netCDF dataset without copying it or redefining its structure. NetCDF is useful for supporting access to diverse kinds of scientific data in heterogeneous networking environments and for writing application software that does not depend on application-specific formats. For information about a variety of analysis and display packages that have been developed to analyze and display data in netCDF form, see http://www.unidata.ucar.edu/netcdf/software.html For more information about netCDF, see the netCDF Web page at http://www.unidata.ucar.edu/netcdf/ Code Status NetCDF-Fortran uses Travis-CI for continuous integration testing. This helps to ensure that developer changes do not break the netCDF-Fortran code base. Continuous Integration Testing Suite Status Travis-CI Getting NetCDF You can obtain a copy of the latest released versions of netCDF software from http://github.com/Unidata/netcdf-c http://github.com/Unidata/netcdf-fortran http://github.com/Unidata/netcdf-cxx4 http://github.com/Unidata/netcdf4-python Copyright and licensing information can be found here, as well as in the COPYRIGHT file accompanying the software http://www.unidata.ucar.edu/software/netcdf/copyright.html To install this package, please see the file INSTALL in the distribution, or the (usually more up-to-date) document: http://www.unidata.ucar.edu/netcdf/docs/netcdf-fortran-install.html Additional Documentation The netCDF-3 C and FORTRAN-77 interfaces are documented at http://www.unidata.ucar.edu/netcdf/documentation/historic/ User's Guides are also available in several forms from the same location. Mailing List A mailing list, netcdfgroup@unidata.ucar.edu, exists for discussion of the netCDF interface and announcements about netCDF bugs, fixes, and enhancements. For information about how to subscribe, see the URL http://www.unidata.ucar.edu/netcdf/mailing-lists.html We appreciate feedback from users of this package. Please send comments, suggestions, and bug reports to support-netcdf@unidata.ucar.edu. Please identify the version of the package. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Unidata/netcdf-fortran"	"a set of software libraries and self-describing, machine-independent data formats that support the creation, access, and sharing of array-oriented scientific data."	"true"
"Math Libs"	"OpenBLAS"	"https://github.com/xianyi/OpenBLAS"	"one of the fastest open source BLAS libraries available. Almost as fast as Intel MKL."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"974"	"110"	"306"	"GitHub - xianyi/OpenBLAS: OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 110 Star 974 Fork 306 xianyi/OpenBLAS Code Issues 123 Pull requests 2 Wiki Pulse Graphs OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. http://www.openblas.net 2,049 commits 16 branches 33 releases 63 contributors FORTRAN 49.2% Assembly 28.2% C 19.8% C++ 1.3% Makefile 0.9% CMake 0.4% Other 0.2% FORTRAN Assembly C C++ Makefile CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags arm_soft_fp_abi armv7 bulldozer cmake develop gh-pages haswell integer_datatype loongson3a loongson3b master optimized_for_deeplearning piledriver power8 sandybridge z13 Nothing to show v0.2.18 v0.2.17 v0.2.16 v0.2.16.rc1 v0.2.15 v0.2.14 v0.2.13 v0.2.12 v0.2.11 v0.2.10 v0.2.10.rc2 v0.2.10.rc1 v0.2.9 v0.2.9.rc2 v0.2.9.rc1 v0.2.8 v0.2.7 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.1 v0.1.0 v0.1alpha2.5 v0.1alpha2.4 v0.1alpha2.3 v0.1alpha2.2 v0.1alpha2.1 v0.1alpha2 v0.1alpha1 Nothing to show New pull request Latest commit 27b5211 Jul 15, 2016 xianyi committed on GitHub Merge pull request #927 from sva-img/develop … Added MSA optimization for GEMV_N, GEMV_T, ASUM, DOT functions Permalink Failed to load latest commit information. benchmark Add time prints in benchmark output Jul 14, 2016 cmake Replace CMAKE_SOURCE_DIR/CMAKE_BINARY_DIR with PROJECT_SOURCE_DIR/PRO… May 25, 2016 ctest Replace CMAKE_SOURCE_DIR/CMAKE_BINARY_DIR with PROJECT_SOURCE_DIR/PRO… May 25, 2016 driver Update dynamic.c Jul 14, 2016 exports Wrap CURDIR and DESTDIR in quotes May 3, 2016 interface Fix z/ctrmv stack allocation on AMD bulldozer and barcelona target Jun 7, 2016 kernel Added MSA optimization for GEMV_N, GEMV_T, ASUM, DOT functions Jul 15, 2016 lapack-netlib Update zgetrf2.f Jul 14, 2016 lapack Replace CMAKE_SOURCE_DIR/CMAKE_BINARY_DIR with PROJECT_SOURCE_DIR/PRO… May 25, 2016 reference Remove all trailing whitespace except lapack-netlib Jun 27, 2014 test Replace CMAKE_SOURCE_DIR/CMAKE_BINARY_DIR with PROJECT_SOURCE_DIR/PRO… May 25, 2016 utest Replace CMAKE_SOURCE_DIR/CMAKE_BINARY_DIR with PROJECT_SOURCE_DIR/PRO… May 25, 2016 .gitignore Delete vi swap file. Nov 11, 2015 .travis.yml Modify travis script. Mar 4, 2016 BACKERS.md Added backers. Sep 5, 2013 CMakeLists.txt Replace CMAKE_SOURCE_DIR/CMAKE_BINARY_DIR with PROJECT_SOURCE_DIR/PRO… May 25, 2016 CONTRIBUTORS.md STRSM optimization for MIPS P5600 and I6400 using MSA May 20, 2016 Changelog.txt Update doc for 0.2.18 version. Apr 12, 2016 GotoBLAS_00License.txt rename documents in GotoBLAS. Jan 24, 2011 GotoBLAS_01Readme.txt Remove all trailing whitespace except lapack-netlib Jun 27, 2014 GotoBLAS_02QuickInstall.txt Remove all trailing whitespace except lapack-netlib Jun 27, 2014 GotoBLAS_03FAQ.txt Remove all trailing whitespace except lapack-netlib Jun 27, 2014 GotoBLAS_04FAQ.txt rename documents in GotoBLAS. Jan 24, 2011 GotoBLAS_05LargePage.txt Correct typo /proc/ instead of /pros/ Mar 20, 2015 GotoBLAS_06WeirdPerformance.txt Remove all trailing whitespace except lapack-netlib Jun 27, 2014 LICENSE Update organization info. Nov 25, 2014 Makefile allow building tests when CROSS compiling but don't run them Apr 26, 2016 Makefile.alpha Remove all trailing whitespace except lapack-netlib Jun 27, 2014 Makefile.arm Fixed linking error when compiling ARMv7 for Android (disabled -lpthr… Feb 4, 2016 Makefile.arm64 Adding arm64 target CORTEXA57 Nov 9, 2015 Makefile.generic Respect user's LDFLAGS Jul 25, 2013 Makefile.ia64 Remove all trailing whitespace except lapack-netlib Jun 27, 2014 Makefile.install Wrap CURDIR and DESTDIR in quotes May 3, 2016 Makefile.mips MIPS P5600(32 bit) and I6400(64 bit) cores support added. Apr 22, 2016 Makefile.mips64 Import GotoBLAS2 1.13 BSD version codes. Jan 24, 2011 Makefile.power optimized dgemm for 20 threads May 16, 2016 Makefile.prebuild get rid of the generated cblas_noconst.h file Aug 28, 2013 Makefile.rule added bugfixes for some make files and smallscaling.c Apr 21, 2016 Makefile.sparc Remove all trailing whitespace except lapack-netlib Jun 27, 2014 Makefile.system Added MSA optimization for GEMV_N, GEMV_T, ASUM, DOT functions Jul 15, 2016 Makefile.tail Remove all trailing whitespace except lapack-netlib Jun 27, 2014 Makefile.x86 Remove all trailing whitespace except lapack-netlib Jun 27, 2014 Makefile.x86_64 Remove all trailing whitespace except lapack-netlib Jun 27, 2014 README.md Added Android as a community-supported OS Apr 26, 2016 TargetList.txt Added MSA optimization for GEMV_N, GEMV_T, ASUM, DOT functions Jul 15, 2016 USAGE.md collected usage notes Feb 27, 2016 appveyor.yml Bump to 0.2.19.dev. Apr 12, 2016 c_check Complete support for MIPS n32 ABI Jul 14, 2016 cblas.h Add ATLAS-style ?geadd function Feb 16, 2015 common.h Change to allow compiling with USE_OPENMP on MSVC Jun 14, 2016 common_alpha.h add fallback blas_lock implementation Aug 16, 2015 common_arm.h use real armv5 support Aug 16, 2015 common_arm64.h Fix blas_lock for arm64 Nov 20, 2015 common_c.h Improved Ximatcopy when lda==ldb. Sep 7, 2015 common_d.h Improved Ximatcopy when lda==ldb. Sep 7, 2015 common_ia64.h add fallback blas_lock implementation Aug 16, 2015 common_interface.h Add ATLAS-style ?geadd function Feb 16, 2015 common_lapack.h Import GotoBLAS2 1.13 BSD version codes. Jan 24, 2011 common_level1.h Changed _Complex types in common_level1.h to use the typedef. Feb 11, 2015 common_level2.h Remove all trailing whitespace except lapack-netlib Jun 27, 2014 common_level3.h Improved Ximatcopy when lda==ldb. Sep 7, 2015 common_linux.h Remove all trailing whitespace except lapack-netlib Jun 27, 2014 common_macro.h Improved Ximatcopy when lda==ldb. Sep 7, 2015 common_mips.h MIPS P5600(32 bit) and I6400(64 bit) cores support added. Apr 22, 2016 common_mips64.h MIPS P5600(32 bit) and I6400(64 bit) cores support added. Apr 22, 2016 common_param.h Fix DYNAMIC_ARCH=1 bug. Oct 27, 2015 common_power.h optimized dgemm for 20 threads May 16, 2016 common_q.h Import GotoBLAS2 1.13 BSD version codes. Jan 24, 2011 common_reference.h Update organization info. Nov 25, 2014 common_s.h Improved Ximatcopy when lda==ldb. Sep 7, 2015 common_sparc.h add fallback blas_lock implementation Aug 16, 2015 common_stackalloc.h Refs #727. Align stack buffer address on 32-bytes. Feb 11, 2016 common_thread.h Remove all trailing whitespace except lapack-netlib Jun 27, 2014 common_x.h Import GotoBLAS2 1.13 BSD version codes. Jan 24, 2011 common_x86.h Fix a minor compiler error in VisualStudio with CMake Mar 20, 2016 common_x86_64.h Don't pass REALNAME to `.end` Mar 13, 2016 common_z.h Improved Ximatcopy when lda==ldb. Sep 7, 2015 cpuid.S Remove all trailing whitespace except lapack-netlib Jun 27, 2014 cpuid.h Merge branch 'cmake' of https://github.com/hpanderson/OpenBLAS into h… Jul 22, 2015 cpuid_alpha.c Remove all trailing whitespace except lapack-netlib Jun 27, 2014 cpuid_arm.c Detect ARMV8 on 32-bit mode by using ARMV7 kernels. Jan 28, 2016 cpuid_arm64.c Fix compiling bug on ARM Cortex-A57. Feb 13, 2016 cpuid_ia64.c Remove all trailing whitespace except lapack-netlib Jun 27, 2014 cpuid_mips.c MIPS P5600(32 bit) and I6400(64 bit) cores support added. Apr 22, 2016 cpuid_mips64.c Added MSA optimization for GEMV_N, GEMV_T, ASUM, DOT functions Jul 15, 2016 cpuid_power.c added dgemm-, dtrmm-, zgemm- and ztrmm-kernel for power8 Mar 1, 2016 cpuid_sparc.c refs #55. Added DTB_ENTRIES into dynamic arch setting parameters. Now… Sep 5, 2011 cpuid_x86.c Update cpuid_x86.c Jul 14, 2016 ctest.c MIPS P5600(32 bit) and I6400(64 bit) cores support added. Apr 22, 2016 ctest1.c Import GotoBLAS2 1.13 BSD version codes. Jan 24, 2011 ctest2.c Import GotoBLAS2 1.13 BSD version codes. Jan 24, 2011 f_check Refs #917 Avoid detecting gfortran bug on IBM POWER + Ubuntu Jul 14, 2016 ftest.f Remove all trailing whitespace except lapack-netlib Jun 27, 2014 ftest2.f Import GotoBLAS2 1.13 BSD version codes. Jan 24, 2011 ftest3.f Remove all trailing whitespace except lapack-netlib Jun 27, 2014 getarch.c Added MSA optimization for GEMV_N, GEMV_T, ASUM, DOT functions Jul 15, 2016 getarch_2nd.c Delete LOCAL_BUFFER_SIZE for other architectures. Apr 12, 2016 l1param.h Added BULLDOZER target. So far it uses barcelona kernels. Dec 7, 2012 l2param.h Support AMD Piledriver by bulldozer kernels. Jul 6, 2013 lapack-devel.log Remove all trailing whitespace except lapack-netlib Jun 27, 2014 make.inc added optimized dsymv kernels for haswell Apr 22, 2015 openblas_config_template.h Refs #708. Modified config template for MSVC. Dec 5, 2015 param.h Added MSA optimization for GEMV_N, GEMV_T, ASUM, DOT functions Jul 15, 2016 quickbuild.32bit Import GotoBLAS2 1.13 BSD version codes. Jan 24, 2011 quickbuild.64bit Import GotoBLAS2 1.13 BSD version codes. Jan 24, 2011 quickbuild.win32 Added the tip for Windows. Aug 9, 2012 quickbuild.win64 Refs #63. delete prefix for mingw64 toolchain. Apr 27, 2014 segfaults.patch Remove all trailing whitespace except lapack-netlib Jun 27, 2014 symcopy.h Changed a number of inline calls to use __inline. Feb 11, 2015 version.h Update organization info. Nov 25, 2014 README.md OpenBLAS Travis CI: AppVeyor: Introduction OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. Please read the documents on OpenBLAS wiki pages http://github.com/xianyi/OpenBLAS/wiki. Binary Packages We provide binary packages for the following platform. Windows x86/x86_64 You can download them from file hosting on sourceforge.net. Installation from Source Download from project homepage. http://xianyi.github.com/OpenBLAS/ Or, check out codes from git://github.com/xianyi/OpenBLAS.git Normal compile type ""make"" to detect the CPU automatically. or type ""make TARGET=xxx"" to set target CPU, e.g. ""make TARGET=NEHALEM"". The full target list is in file TargetList.txt. Cross compile Please set CC and FC with the cross toolchains. Then, set HOSTCC with your host C compiler. At last, set TARGET explicitly. Examples: On X86 box, compile this library for loongson3a CPU. make BINARY=64 CC=mips64el-unknown-linux-gnu-gcc FC=mips64el-unknown-linux-gnu-gfortran HOSTCC=gcc TARGET=LOONGSON3A  On X86 box, compile this library for loongson3a CPU with loongcc (based on Open64) compiler. make CC=loongcc FC=loongf95 HOSTCC=gcc TARGET=LOONGSON3A CROSS=1 CROSS_SUFFIX=mips64el-st-linux-gnu-   NO_LAPACKE=1 NO_SHARED=1 BINARY=32  Debug version make DEBUG=1  Install to the directory (optional) Example: make install PREFIX=your_installation_directory  The default directory is /opt/OpenBLAS Support CPU & OS Please read GotoBLAS_01Readme.txt Additional support CPU: x86/x86-64: Intel Xeon 56xx (Westmere): Used GotoBLAS2 Nehalem codes. Intel Sandy Bridge: Optimized Level-3 and Level-2 BLAS with AVX on x86-64. Intel Haswell: Optimized Level-3 and Level-2 BLAS with AVX2 and FMA on x86-64. AMD Bobcat: Used GotoBLAS2 Barcelona codes. AMD Bulldozer: x86-64 ?GEMM FMA4 kernels. (Thank Werner Saar) AMD PILEDRIVER: Uses Bulldozer codes with some optimizations. AMD STEAMROLLER: Uses Bulldozer codes with some optimizations. MIPS64: ICT Loongson 3A: Optimized Level-3 BLAS and the part of Level-1,2. ICT Loongson 3B: Experimental ARM: ARMV6: Optimized BLAS for vfpv2 and vfpv3-d16 ( e.g. BCM2835, Cortex M0+ ) ARMV7: Optimized BLAS for vfpv3-d32 ( e.g. Cortex A8, A9 and A15 ) ARM64: ARMV8: Experimental ARM Cortex-A57: Experimental Support OS: GNU/Linux MingWin or Visual Studio(CMake)/Windows: Please read https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-in-Microsoft-Visual-Studio. Darwin/Mac OS X: Experimental. Although GotoBLAS2 supports Darwin, we are the beginner on Mac OS X. FreeBSD: Supported by community. We didn't test the library on this OS. Android: Supported by community. Please read https://github.com/xianyi/OpenBLAS/wiki/How-to-build-OpenBLAS-for-Android. Usages Link with libopenblas.a or -lopenblas for shared library. Set the number of threads with environment variables. Examples: export OPENBLAS_NUM_THREADS=4  or export GOTO_NUM_THREADS=4  or export OMP_NUM_THREADS=4  The priorities are OPENBLAS_NUM_THREADS > GOTO_NUM_THREADS > OMP_NUM_THREADS. If you compile this lib with USE_OPENMP=1, you should set OMP_NUM_THREADS environment variable. OpenBLAS ignores OPENBLAS_NUM_THREADS and GOTO_NUM_THREADS with USE_OPENMP=1. Set the number of threads on runtime. We provided the below functions to control the number of threads on runtime. void goto_set_num_threads(int num_threads);  void openblas_set_num_threads(int num_threads);  If you compile this lib with USE_OPENMP=1, you should use the above functions, too. Report Bugs Please add a issue in https://github.com/xianyi/OpenBLAS/issues Contact OpenBLAS users mailing list: https://groups.google.com/forum/#!forum/openblas-users OpenBLAS developers mailing list: https://groups.google.com/forum/#!forum/openblas-dev ChangeLog Please see Changelog.txt to obtain the differences between GotoBLAS2 1.13 BSD version. Troubleshooting Please read Faq at first. Please use gcc version 4.6 and above to compile Sandy Bridge AVX kernels on Linux/MingW/BSD. Please use Clang version 3.1 and above to compile the library on Sandy Bridge microarchitecture. The Clang 3.0 will generate the wrong AVX binary code. The number of CPUs/Cores should less than or equal to 256. On Linux x86_64(amd64), there is experimental support for up to 1024 CPUs/Cores and 128 numa nodes if you build the library with BIGNUMA=1. OpenBLAS does not set processor affinity by default. On Linux, you can enable processor affinity by commenting the line NO_AFFINITY=1 in Makefile.rule. But this may cause the conflict with R parallel. On Loongson 3A. make test would be failed because of pthread_create error. The error code is EAGAIN. However, it will be OK when you run the same testcase on shell. Contributing Check for open issues or open a fresh issue to start a discussion around a feature idea or a bug. Fork the OpenBLAS repository to start making your changes. Write a test which shows that the bug was fixed or that the feature works as expected. Send a pull request. Make sure to add yourself to CONTRIBUTORS.md. Donation Please read this wiki page. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/xianyi/OpenBLAS"	"one of the fastest open source BLAS libraries available. Almost as fast as Intel MKL."	"true"
"Math Libs"	"PAW"	"http://paw.web.cern.ch/paw/"	"conceived as an instrument to assist physicists in the analysis and presentation of their data"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Physics Analysis Workstation - PAW PAW: Physics Analysis WorkStation PAW is conceived as an instrument to assist physicists in the analysis and presentation of their data. It provides interactive graphical presentation and statistical or mathematical analysis, working on objects familiar to physicists like histograms, event files (Ntuples), vectors, etc. PAW is based on several components of the CERN Program Library. Like CERN Program Library PAW usage and/or redistribution is granted under the terms of the GNU General Public License. The development and support for PAW is stopped. FAQs Frequently asked questions are listed here as well as answers to them. Contributions Here you can find some general interest PAW macros and programs provided by PAW users. Tutorial If you are not familiar with PAW and want to learn how to use it, this is probably a place to go. The sources of the tutorial examples are also available. Some other tutorials or help about PAW can be also useful to learn more about the system. Manual The PAW reference manual (equivalent to the online HELP) is the complete description of all the PAW commands. The PAW User's Guide is available in Postscript format (1.05 Mbytes). All the CERNLIB manuals are also available. The man page gives the various options which can be used when you start PAW. Download To obtain pre-installed binaries of the current and latest version of PAW for different architectures and operating systems. This page also gives the list of the platforms on which PAW is supported by the CERN program library. Miscellaneous Various PAW related items: A set of slides describing the basic PAW functionalities, some hints to speed up Ntuple analysis, some other PAW related WEB sites, WebPAW an utility to use PAW on the web, an interface to Neural Networks in PAW, the pawpict package to include PAW pictures in LaTex documents. Last update: October 10th 2014"	"null"	"null"	"conceived as an instrument to assist physicists in the analysis and presentation of their data"	"true"
"JSON Manipulation"	"FSON"	"https://github.com/josephalevin/fson"	"Fortran 95 JSON Parser."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"29"	"10"	"14"	"GitHub - josephalevin/fson: Fortran 95 JSON Parser Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 29 Fork 14 josephalevin/fson Code Issues 3 Pull requests 0 Pulse Graphs Fortran 95 JSON Parser 143 commits 3 branches 0 releases Fetching contributors FORTRAN 96.6% Makefile 2.2% Other 1.2% FORTRAN Makefile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop issue/1 master Nothing to show Nothing to show New pull request Latest commit 93a21eb Apr 6, 2016 acroucher Changed behaviour of parse_number() so that numbers in scientific not… … …ation are assumed to be real rather than integer- to avoid problems when reading numbers that are too large to be integer (e.g. 1e16) Permalink Failed to load latest commit information. src Changed behaviour of parse_number() so that numbers in scientific not… Apr 6, 2016 .dep.inc - first commit with source code Mar 6, 2012 .gitignore Added test driver source to .gitignore Oct 8, 2014 fson_test.py Modified FRUITPy script to check if tests have been built successfull… Oct 23, 2014 makefile Changed makefile to use -fpic when compiling FSON objects and -shared… Jun 22, 2015 readme.md Added documentation for reading character arrays Feb 4, 2016 readme.md Fortran 95 JSON Parser Getting Started program example1      ! Typical usage should only require an explicit use of the fson module.     ! The other modules will be used privately by fson as required.       use fson      ! declare a pointer variable.  Always use a pointer with fson_value.     type(fson_value), pointer :: value      ! parse the json file     value => fson_parse(""test1.json"")      ! print the parsed data to the console     call fson_print(value)          ! extract data from the parsed value              ! clean up     call fson_destroy(value)  end program example1 Example JSON This JSON will serve as a reference for the following examples. If you are not already familiar with JSON you can read more at: http://www.json.org/ and http://en.wikipedia.org/wiki/JSON. {      ""name""       : {""first"": ""John"", ""last"" : ""Smith""},      ""age""        : 25,      ""address""    :        { ""streetAddress"": ""21 2nd Street"",          ""city""         : ""New York"",          ""state""        : ""NY"",          ""postalCode""   : ""10021""},      ""PhoneNumber"":        [ {""type""  : ""home"", ""number"": ""212 555-1234""},          {""type""  : ""fax"",  ""number"": ""646 555-4567""} ] }  Extracting Data Getting the data from the parsed fson_value to your variable is easy. All extraction is performed through a call to fson_get(). This subroutine is overloaded for different target value types. program example1  ! The fson mudule has the basic parser and lookup  use fson  ! Functions for accessing data as an array use fson_value_m, only: fson_value_count, fson_value_get character(len=1024) :: strval, strval2 integer i  ! Declare a pointer variables.  Always use a pointer with fson_value. type(fson_value), pointer :: json_data, array, item  ! Parse the json file json_data => fson_parse(""test1.json"")  ! Get the first and last name and print them call fson_get(json_data, ""name.first"", strval) call fson_get(json_data, ""name.last"",  strval2) print *, ""name.first = "", trim(strval) print *, ""name.last  = "", trim(strval2)  ! Use a lookup string to get the first phone number call fson_get(json_data, ""PhoneNumber[1].number"", strval)      print *, ""PhoneNumber[1].number = "", trim(strval) print *, """"  ! Get the phone numbers as an array call fson_get(json_data, ""PhoneNumber"", array)  ! Loop through each array item do i = 1, fson_value_count(array)   ! Get the array item (this is an associative array)   item => fson_value_get(array, i)    ! Lookup the values from the array   call fson_get(item, ""type"", strval)   call fson_get(item, ""number"", strval2)    ! Print out the values   print *, ""Phone Number:""   print *, ""type = "", trim(strval), "", number = "", trim(strval2) end do  ! clean up call fson_destroy(json_data)  end program example1 The program output is the following: name.first = John name.last  = Smith PhoneNumber[1].number = 212555-1234  Phone Number: type = home, number = 212555-1234 Phone Number: type = fax, number = 646555-4567  Extracting arrays You can also extract entire arrays, as Fortran allocatable arrays, using fson_get(). This assumes the array's elements are all of the same type (integer, real, double precision, logical or character). Rank-1 (vector) or rank-2 (matrix) arrays are supported. The following example parses a JSON file containing an vector of integers called ""v"" and a matrix of real numbers called ""m"", and prints them: program extract_array    use fson   implicit none   type(fson_value), pointer :: data   integer, allocatable :: vec(:)   real, allocatable :: mat(:,:)    data => fson_parse(""data.json"")    call fson_get(data, ""v"", vec)   call fson_get(data, ""m"", mat)   print *, vec   print *, mat    call fson_destroy(data)   deallocate(vec, mat)  end program extract_array When extracting character arrays, it is necessary to specify a string length when the array is declared, e.g.: integer, parameter :: str_len = 8 character(len = str_len), allocatable :: m(:)  data => fson_parse(data.json"") call fson_get(data, ""char_array"", m) JSON Path | Operator | Description              |  |----------|--------------------------| |    $     | Root object/value        |  |    .     | Child operator           | |    []    | Array element            |  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/josephalevin/fson"	"Fortran 95 JSON Parser."	"true"
"JSON Manipulation"	"json-fortran"	"https://github.com/jacobwilliams/json-fortran"	"A Fortran 2008 JSON API."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"46"	"12"	"8"	"GitHub - jacobwilliams/json-fortran: A Fortran 2008 JSON API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 46 Fork 8 jacobwilliams/json-fortran Code Issues 12 Pull requests 0 Wiki Pulse Graphs A Fortran 2008 JSON API 554 commits 3 branches 12 releases Fetching contributors FORTRAN 88.3% CMake 4.6% Perl 3.5% Shell 3.1% C++ 0.5% FORTRAN CMake Perl Shell C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags finalizer gh-pages master Nothing to show 5.0.2 5.0.1 5.0.0 4.3.0 4.2.0 4.1.1 4.1.0 4.0.0 3.1.0 3.0.0 2.0.0 1.0.0 Nothing to show New pull request Latest commit cddb8c9 Jul 9, 2016 jacobwilliams committed on GitHub Merge pull request #217 from jacobwilliams/whitespace … Added new option to print JSON without extra whitespace Permalink Failed to load latest commit information. .github made some of the aux files dot files. Jun 26, 2016 cmake Add better stacktraces and profiling with gfortran Jul 27, 2015 files added unit test for json_value_add_null. Jun 26, 2016 media rename `logos` to `media` add favicon 32x32 Jul 14, 2015 pages made some of the aux files dot files. Jun 26, 2016 src Added new option to print JSON without extra whitespace Jul 9, 2016 visual_studio updates to visual studio project. Apr 22, 2016 .PREPROCESSOR made some of the aux files dot files. Jun 26, 2016 .VERSION made some of the aux files dot files. Jun 26, 2016 .gitignore Fix gcov bug and add FORD pages Jul 27, 2015 .travis.yml made some of the aux files dot files. Jun 26, 2016 CHANGELOG.md Update codecov.io urls (they changed everything) Jun 13, 2016 CMakeLists.txt made some of the aux files dot files. Jun 26, 2016 LICENSE documentation updates and minor change. Apr 16, 2016 README.md made some of the aux files dot files. Jun 26, 2016 build.sh made some of the aux files dot files. Jun 26, 2016 codecov.yml attempting to change codecov target to 70% Jun 25, 2016 deploy.sh Fix doc deployment problems (see PR #201) Jun 13, 2016 json-fortran.md made some of the aux files dot files. Jun 26, 2016 README.md JSON-Fortran A Fortran 2008 JSON API Table of Contents JSON-Fortran Status Brief description Download Building the library Documentation Contributing License Miscellaneous Status Take a look at the CHANGELOG for a list of changes since the latest release. top Brief description A user-friendly, thread-safe, and object-oriented API for reading and writing JSON files, written in modern Fortran. top Download Download the official versioned releases here. Or, get the latest development code from the master branch here. NEWS: As of June 7, 2015, json-fortran can be downloaded and installed with the homebrew package manager on Mac OS X. Once homebrew is installed, make sure that the formulae are up to date, view the package options and caveats, and install the json-fortran formula: brew update brew info json-fortran brew install --with-unicode-support json-fortran Please note, if you wish to support usage of JSON-Fortran with multiple Fortran compilers, please follow the CMake installation instructions below, as the homebrew installation is only intended to support a single Fortran compiler. Cheers! top Building the library The code requires a Fortran compiler that supports various Fortran 2003 and Fortran 2008 features such as: allocatable strings, newunit, generic, class, and abstract interface. It has been successfully compiled with the Intel Fortran compiler 13.1.0 (and greater) and the GNU gfortran compiler [4.9 and greater]. It has also been reported that the library can be built (using the CMake build script) with the NAG Fortran compiler 6.0 Currently, several ways are provided to build the JSON-fortran library (libjsonfortran). A build script, build.sh is provided in the project root directory. This script uses FoBiS to build the JSON-Fortran library and the unit tests. Edit the script to use either the Intel Fortran Compiler or Gfortran. Note that version 1.2.5 of FoBiS (or later) is required. A Visual Studio project is included for building the library (and unit tests) on Windows with the Intel Fortran Compiler. The project has been tested with Visual Studio 2010 and 2013. A CMake build system is provided. This build system has been tested on Mac and Linux using the Intel Fortran Compiler, gfortran 4.9, and NAG Fortran 6.0. It has not been tested on Windows. This CMake based build provides an install target, and exports from both the install location and the build location so that building and using JSON-Fortran in another CMake based project is trivial. To get started with the CMake based build, set the environment variable FC to point to your Fortran compiler, and create a build directory. Then (cmake-gui|ccmake|cmake) /path/to/json-fortran-root to configure, make to build and make install to optionally install. As long as the project is built with CMake, other CMake projects can find it and link against it. For example, if you have a second copy of the JSON-Fortran project tree, and want to build the unit tests linking against those compiled/installed by the first copy: cmake_minimum_required ( VERSION 2.8.8 FATAL_ERROR ) enable_language ( Fortran ) project ( jf_test NONE )  find_package ( jsonfortran-${CMAKE_Fortran_COMPILER_ID} 5.0.2 REQUIRED ) include_directories ( ""${jsonfortran_INCLUDE_DIRS}"" )  file ( GLOB JF_TEST_SRCS ""src/tests/jf_test_*.f90"" ) foreach ( UNIT_TEST ${JF_TEST_SRCS} )   get_filename_component ( TEST ${UNIT_TEST} NAME_WE )   add_executable ( ${TEST} ${UNIT_TEST} )   target_link_libraries ( ${TEST} jsonfortran-static )   # or for linking against the dynamic/shared library:   # target_link_libraries ( ${TEST} jsonfortran ) # instead endforeach() top Documentation The API documentation for the latest release version can be found here. The documentation can also be generated by processing the source files with FORD. Note that both the shell script and CMake will also generate these files automatically in the documentation folder, assuming you have FORD installed. Some examples can also be found on the wiki. top Contributing Want to help? Take a quick look at our contributing guidelines then claim something in the ""ready"" column on our Waffle.io and Fork. Commit. Pull request. top License The JSON-Fortran source code and related files and documentation are distributed under a permissive free software license (BSD-style). See the LICENSE file for more details. top Miscellaneous JSON-Fortran is a fork and extensive upgrade of the Fortran 95 FSON code. The reason for the split was to be able to incorporate object-oriented and other nice features of the Fortran 2003 and 2008 standards. Many thanks to the original authors of FSON. For more information about JSON, see: http://www.json.org/ json-fortran on Travis CI json-fortran on Waffle.IO json-fortran on Codecov.IO top Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jacobwilliams/json-fortran"	"A Fortran 2008 JSON API."	"true"
"XML Manipulation"	"fox"	"https://github.com/andreww/fox"	"Fortran XML library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"29"	"10"	"24"	"GitHub - andreww/fox: A Fortran XML library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 29 Fork 24 andreww/fox Code Issues 19 Pull requests 2 Pulse Graphs A Fortran XML library http://www1.gly.bris.ac.uk/~walker/FoX/ 1,853 commits 11 branches 5 releases Fetching contributors FORTRAN 80.1% HTML 16.3% Shell 1.7% CMake 0.9% Makefile 0.9% Python 0.1% FORTRAN HTML Shell CMake Makefile Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags NWchem cmake cmlbonds countrts inputdec master play-with-config testing vstr wkml wncml Nothing to show 4.1.2 4.1.1 4.1.0 4.0.4 4.0.3 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. DoX cmake common config dom examples fsys m4 sax utils wcml wkml wxml .gitignore .travis.yml CMakeLists.txt CTestConfig.cmake Changelog FoX-config.in FoX.vfproj Fox.vfproj.README LICENSE Makefile README RELEASE arch.make arch.make.in configure release.sh README FoX package  Quick start:  1. Type ""./configure"" to generate appropriate compiler-dependent information for the Makefile.  2. Type ""make""  (Optionally)  3. Type ""make check""  Full documentation is in DoX/index.html  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/andreww/fox"	"Fortran XML library"	"true"
"XML Manipulation"	"xml-fortran"	"http://sourceforge.net/projects/xml-fortran/"	"an all-Fortran solution for reading and writing XML files."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"xml-fortran download | SourceForge.net SourceForge Browse Enterprise Blog Deals Help Create Log In or Join Solution Centers Go Parallel Resources Newsletters Cloud Storage Providers Business VoIP Providers Call Center Providers Home Browse Development Software Development xml-fortran xml-fortran alpha Brought to you by: arjenmarkus Summary Files Reviews Support Wiki Tickets ▾ Bugs Patches News Discussion Code ★ 5.0 Stars (1) 3 Downloads (This Week) Last Update: 2013-01-24 Download xml-fortran-1.00.tar.gz Browse All Files Windows Mac Linux Description The xml-fortran project contains a library and several auxiliary programs, written in Fortran, that allow programmers to access XML-files. xml-fortran Web Site Categories Software Development, WWW/HTTP License BSD License KEEP ME UPDATED By clicking on ""Follow"" below, you are agreeing to the Terms of Use and the Privacy Policy. Get notifications on updates for this project. Get newsletters with site news, white paper/events resources, and sponsored content from our partners. Invalid email address. Please try again. Sent to None. Follow You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. User Ratings 5.0 out of 5 stars ★★★★★ ★★★★ ★★★ ★★ ★ 1 0 0 0 0 ease 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 0 / 5 features 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 0 / 5 design 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 0 / 5 support 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 0 / 5 Write a Review User Reviews Filter All All ★★★★★ ★★★★ ★★★ ★★ ★ tfileme 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Thanks for Xml-fortran, it's excellent! Posted 05/24/2013 Read more reviews Additional Project Details Languages English Intended Audience Developers Programming Language Fortran Registered 2003-08-27 Recommended Projects pFUnit Unit testing framework for Fortran with MPI extensions flibs - a collection of Fortran modules LIBXML2F90 Deals Top Searches xml-fortran fortran 77 xml fortran Report inappropriate content Thanks for helping keep SourceForge clean. Screenshot instructions: Windows Mac Red Hat Linux   Ubuntu Click URL instructions: Right-click on ad, choose ""Copy Link"", then paste here → (This may not be possible with some types of ads) More information about our ad policies X You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. Briefly describe the problem (required): Upload screenshot of ad (required): Select a file, or drag & drop file here. ✔ ✘ Please provide the ad click URL, if possible: SourceForge About Site Status @sfnet_ops Find and Develop Software Create a Project Software Directory Top Downloaded Projects Community Blog @sourceforge Resources Help Site Documentation Support Request © 2016 Slashdot Media. All Rights Reserved. Terms Privacy Opt Out Choices Advertise Get latest updates about Open Source Projects, Conferences and News. Sign up for the SourceForge newsletter: I agree to receive quotes, newsletters and other information from sourceforge.net and its partners regarding IT services and products. I understand that I can withdraw my consent at any time. Please refer to our Privacy Policy or Contact Us for more details You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. No, thanks Screenshots can attract more users to your project. Features can attract more users to your project."	"null"	"null"	"an all-Fortran solution for reading and writing XML files."	"true"
"Date and time manipulation"	"datetime-fortran"	"https://github.com/milancurcic/datetime-fortran"	"A Fortran 2003 date and time manipulation library, modeled after Python's datetime library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"24"	"8"	"8"	"GitHub - milancurcic/datetime-fortran: A Fortran library that provides time and date manipulation facilities. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 24 Fork 8 milancurcic/datetime-fortran Code Issues 6 Pull requests 0 Pulse Graphs A Fortran library that provides time and date manipulation facilities. 217 commits 3 branches 14 releases Fetching contributors FORTRAN 94.8% Shell 2.2% Makefile 2.0% M4 1.0% FORTRAN Shell Makefile M4 Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags code-documentation-update doc-fixes master Nothing to show v1.4.2 v1.4.1 v1.4.0 v1.3.0 v1.2.0 v1.1.0 v1.0.0 v0.4.0 v0.3.1 v0.2.1 v0.1.5 v0.1.3 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit ac4f39d Apr 21, 2016 milancurcic Update README.md Permalink Failed to load latest commit information. src @blippy's configure fix from PR #37 Feb 1, 2016 .gitignore AUTHORS CONTRIBUTORS Switch @zbeekman's email address to homepage Jan 30, 2016 INSTALL Added autotools functionality Jan 24, 2016 LICENSE edit copyright statement Jan 16, 2016 Makefile.am Fixed spacing bug added by previous commit Feb 1, 2016 README.md Update README.md Apr 21, 2016 configure.ac datetime-fortran.pc.in make clean now deletes datetime-fortran.pc Jan 26, 2016 mkdist.sh Added versioning consistency checks Jan 27, 2016 scrub-clean.sh README.md Description datetime-fortran is a time and date manipulation library for Fortran. It provides classes for date and time (datetime), and time difference representation (timedelta) as well as arithmetic and comparison operators and associated methods for their manipulation. It also provides an interface to C/C++ tm struct, and associated strftime and strptime functions. Since version 0.2.0, also provides a clock class. datetime-fortran came about due to the lack of time handling facilities in standard Fortran language. It is freely available under the BSD-3 license. Please send suggestions and bug reports by e-mail or through this Github page. See the list of current issues if you would like to contribute to the code. Features Classes: datetime, timedelta, clock, tm_struct; Arithmetic operators + and - for datetime and timedelta objects; Comparison operators >, >=, <, <=, == and /= for datetime and timedelta objects; Basic timezone handling and arithmetic; Interfaces to C/C++ routines c_strftime and c_strptime through ISO_C_BINDING. Since version 0.3.0, datetime-bound method strftime and function strptime that return a datetime instance are available. Lightweight and portable; Free to modify and distribute under the terms of the BSD-3 license. Release version 1.1.0 compiles and passes all tests with the following compilers: GNU (gfortran) 4.7.2, 4.8.2, 4.8.4, 5.1.1, 5.2.0 Intel (ifort) 13.1.1, 14.0.2, 15.0.0, 16.0.0 Portland Group (pgf90) 13.6-0, 13.10-0 (thanks to Timothy Hilton) IBM AIX (xlf) 14.1.0.5 (thanks to Bjoern Hendrik Fock) Cray Fortran (ftn) 8.3.11, on Cray XC-30 Releases 1.2.0 and later have so far been tested only with: GNU (gfortran) 5.1.1, 5.2.0 Contributing You can contribute to the project in the following ways: Use it Compile it on different machines and different Fortran compilers and report successes or failures Find and report bugs Request a new feature or functionality Fork the repo, implement new feature or functionality, submit a pull request Show it to your friends and colleagues API Derived Types datetime addMilliseconds addSeconds addMinutes addHours addDays isocalendar isoformat isValid now secondsSinceEpoch strftime tm tzOffset utc weekday weekdayLong weekdayShort yearday timedelta total_seconds clock reset tick tm_struct Overloaded operators Arithmetic operators Comparison operators Public procedures c_strftime c_strptime date2num datetimeRange daysInMonth daysInYear isLeapYear num2date strptime tm2date Derived Types datetime-fortran library provides the following derived types: datetime, timedelta, clock and tm_struct. datetime Main date and time object, defined as: TYPE :: datetime    ! COMPONENTS:   INTEGER :: year        = 1 ! Year                   [1-HUGE(year)]   INTEGER :: month       = 1 ! Month in year          [1-12]   INTEGER :: day         = 1 ! Day in month           [1-31]   INTEGER :: hour        = 0 ! Hour in day            [0-23]   INTEGER :: minute      = 0 ! Minute in hour         [0-59]   INTEGER :: second      = 0 ! Second in minute       [0-59]   INTEGER :: millisecond = 0 ! Milliseconds in second [0-999]    REAL :: tz = 0 ! Timezone offset from UTC [hours]    CONTAINS    ! METHODS:   PROCEDURE :: addMilliseconds   PROCEDURE :: addSeconds   PROCEDURE :: addMinutes   PROCEDURE :: addHours   PROCEDURE :: addDays   PROCEDURE :: isocalendar   PROCEDURE :: isoformat   PROCEDURE :: isValid   PROCEDURE :: now   PROCEDURE :: secondsSinceEpoch   PROCEDURE :: strftime   PROCEDURE :: tm   PROCEDURE :: tzOffset   PROCEDURE :: utc   PROCEDURE :: weekday   PROCEDURE :: weekdayLong   PROCEDURE :: weekdayShort   PROCEDURE :: yearday  ENDTYPE datetime datetime components are initialized by default, so all arguments are optional. Arguments may be provided as positional arguments, in the order of their declaration, or as keyword arguments, in any order. If both positional and keyword arguments are used, no positional arguments may appear after a keyword argument. Example usage USE datetime_module,ONLY:datetime  TYPE(datetime) :: a  ! Initialize as default: a = datetime()                                      ! 0001-01-01 00:00:00  ! Components can be specified by position: a = datetime(1984,12,10)                            ! 1984-12-10 00:00:00  ! Or by keyword: a = datetime(month=1,day=1,year=1970)               ! 1970-01-01 00:00:00  ! Or combined: a = datetime(2013,2,minute=23,day=5)                ! 2013-02-05 00:23:00  ! With timezone offset: a = datetime(2013,2,minute=23,day=5,tz=-4)          ! 2013-02-05 00:23:00 -0400  ! Do not use positional after keyword arguments: a = datetime(year=2013,2,minute=23,day=5)  ! ILLEGAL Note that the current implementation of datetime does not support daylight saving time (DST) information. See also timedelta tm_struct Back to top addMilliseconds PURE ELEMENTAL SUBROUTINE addMilliseconds(self,ms)    ! ARGUMENTS:   CLASS(datetime),INTENT(INOUT) :: self   INTEGER,        INTENT(IN)    :: ms   ! Number of milliseconds to add Used internally by binary arithmetic operators + and - when adding/subtracting a timedelta instance to/from a datetime instance. In general, there is no need to use this method from external programs. However, it may be convenient and create less overhead if the operation needs to be performed on a large array of datetime instances. Arguments ms Integer number of milliseconds to add. May be negative for subtraction. Return value None Example usage USE datetime_module,ONLY:datetime  TYPE(datetime) :: a  ! Initialize: a = datetime(2013,1,1,0,0,0,0)           ! 2013-01-01 00:00:00.000  ! Add: CALL a%addMilliseconds(100)   ! a becomes: 2013-01-01 00:00:00.100 See also addSeconds addMinutes addHours addDays Back to top addSeconds PURE ELEMENTAL SUBROUTINE addSeconds(self,s)    ! ARGUMENTS:   CLASS(datetime),INTENT(INOUT) :: self   INTEGER,        INTENT(IN)    :: s    ! Number of seconds to add Used internally by binary arithmetic operators + and - when adding/subtracting a timedelta instance to/from a datetime instance. In general, there is no need to use this method from external programs. However, it may be convenient and create less overhead if the operation needs to be performed on a large array of datetime instances. Arguments s Integer number of seconds to add. May be negative for subtraction. Return value None Example usage USE datetime_module,ONLY:datetime  TYPE(datetime) :: a  ! Initialize: a = datetime(2013,1,1,0,0,0,0)           ! 2013-01-01 00:00:00.000  ! Add: CALL a%addSeconds(10)         ! a becomes: 2013-01-01 00:00:10.000 See also addMilliseconds addMinutes addHours addDays Back to top addMinutes PURE ELEMENTAL SUBROUTINE addMinutes(self,m)    ! ARGUMENTS:   CLASS(datetime),INTENT(INOUT) :: self   INTEGER,        INTENT(IN)    :: m    ! Number of minutes to add Used internally by binary arithmetic operators + and - when adding/subtracting a timedelta instance to/from a datetime instance. In general, there is no need to use this method from external programs. However, it may be convenient and create less overhead if the operation needs to be performed on a large array of datetime instances. Arguments m Integer number of minutes to add. May be negative for subtraction. Return value None Example usage USE datetime_module,ONLY:datetime  TYPE(datetime) :: a  ! Initialize: a = datetime(2013,1,1,0,0,0,0)           ! 2013-01-01 00:00:00.000  ! Add: CALL a%addMinutes(10)         ! a becomes: 2013-01-01 00:10:00.000 See also Back to top addHours PURE ELEMENTAL SUBROUTINE addHours(self,h)    ! ARGUMENTS:   CLASS(datetime),INTENT(INOUT) :: self   INTEGER,        INTENT(IN)    :: h    ! Number of hours to add Used internally by binary arithmetic operators + and - when adding/subtracting a timedelta instance to/from a datetime instance. In general, there is no need to use this method from external programs. However, it may be convenient and create less overhead if the operation needs to be performed on a large array of datetime instances. Arguments h Integer number of hours to add. May be negative for subtraction. Return value None Example usage USE datetime_module,ONLY:datetime  TYPE(datetime) :: a  ! Initialize: a = datetime(2013,1,1,0,0,0,0)           ! 2013-01-01 00:00:00.000  ! Add: CALL a%addHours(12)           ! a becomes: 2013-01-01 12:00:00.000 See also addMilliseconds addSeconds addMinutes addDays Back to top addDays PURE ELEMENTAL SUBROUTINE addDays(self,d)    ! ARGUMENTS:   CLASS(datetime),INTENT(INOUT) :: self   INTEGER,        INTENT(IN)    :: d    ! Number of days to add Used internally by binary arithmetic operators + and - when adding/subtracting a timedelta instance to/from a datetime instance. In general, there is no need to use this method from external programs. However, it may be convenient and create less overhead if the operation needs to be performed on a large array of datetime instances. Arguments d Integer number of days to add. May be negative for subtraction. Return value None Example usage USE datetime_module,ONLY:datetime  TYPE(datetime) :: a  ! Initialize: a = datetime(2013,1,1,0,0,0,0)           ! 2013-01-01 00:00:00.000  ! Add: CALL a%addDays(7)             ! a becomes: 2013-01-08 00:00:00.000 See also addMilliseconds addSeconds addMinutes addHours Back to top isocalendar FUNCTION isocalendar(self)    ! ARGUMENTS:   CLASS(datetime),INTENT(IN) :: self   INTEGER,DIMENSION(3)       :: isocalendar Returns an array of 3 integers: year, week number, and week day, as defined by ISO 8601 week date. The ISO calendar is a widely used variant of the Gregorian calendar. The ISO year consists of 52 or 53 full weeks. A week starts on a Monday (1) and ends on a Sunday (7). The first week of an ISO year is the first (Gregorian) calendar week of a year containing a Thursday. This is called week number 1, and the ISO year of that Thursday is the same as its Gregorian year. datetime%isocalendar() is equivalent to Python's datetime.datetime.isocalendar(). Arguments None Return value isocalendar A rank 1 integer array of length 3. Contains year, week number and week day. Example usage USE datetime_module,ONLY:datetime  TYPE(datetime) :: a  a = datetime(2013,1,1) WRITE(*,*)a%isocalendar() ! Prints: 2013  1  2 See also weekday Back to top isoformat PURE ELEMENTAL CHARACTER(LEN=23) FUNCTION isoformat(self,sep)    ! ARGUMENTS:   CLASS(datetime), INTENT(IN)          :: self   CHARACTER(LEN=1),INTENT(IN),OPTIONAL :: sep Returns a character string of length 23 that contains date and time in ISO 8601 format. datetime%isoformat() is equivalent to Python's datetime.datetime.isoformat(), with the only difference being that datetime%isoformat() returns the milliseconds at the end of the string, where as datetime.datetime.isoformat() returns microseconds. Arguments sep is an optional argument that specifies which character of length 1 will separate date and time entries. If ommited, defaults to T. Example usage USE datetime_module,ONLY:datetime  TYPE(datetime) :: a  a = datetime(1984,12,10,13,5,0)  ! Without arguments: WRITE(*,*)a%isoformat()        ! Prints 1984-12-10T13:05:00.000  ! With a specified separator: WRITE(*,*)a%isoformat(' ')     ! Prints 1984-12-10 13:05:00.000 See also Back to top isValid PURE ELEMENTAL LOGICAL FUNCTION isValid(self)    ! ARGUMENTS:   CLASS(datetime),INTENT(IN) :: self Returns .TRUE. if all datetime instance components have valid values, and .FALSE. otherwise. Components have valid values if they are within the range indicated in datetime derived type description. Useful for debugging and validating user input. Example usage USE datetime_module,ONLY:datetime  TYPE(datetime) :: a  a = datetime(1984,12,10,13,5,0)  WRITE(*,*)a%isValid()   ! .TRUE.  a = datetime(1984,13,10,13,5,0)  WRITE(*,*)a%isValid()   ! .FALSE. See also Back to top now TYPE(datetime) FUNCTION now(self)    ! ARGUMENTS:   CLASS(datetime),INTENT(IN) :: self Returns the datetime instance representing the current machine time. Does not support timezones. Arguments None. Return value self A datetime instance with current machine time. Example usage USE datetime_module,ONLY:datetime  TYPE(datetime) :: a  a = a%now()   ! Assigns current machine time to a See also Back to top secondsSinceEpoch INTEGER FUNCTION secondsSinceEpoch(self)    ! ARGUMENTS   CLASS(datetime),INTENT(IN) :: self Returns an integer number of seconds since the UNIX Epoch, 1970-01-01 00:00:00 +0000 (UTC). Arguments None. Return value secondsSinceEpoch An INTEGER scalar containing number of seconds since UNIX Epoch. Example usage USE datetime_module,ONLY:datetime  TYPE(datetime) :: a   ! Initialize: a = datetime(2013,1,1)  WRITE(*,*)a%secondsSinceEpoch() See also Back to top strftime CHARACTER(LEN=MAXSTRLEN) FUNCTION strftime(self,format)    ! ARGUMENTS:   CLASS(datetime), INTENT(IN) :: self   CHARACTER(LEN=*),INTENT(IN) :: format A datetime-bound method that serves as a wrapper around the C routine strftime. datetime%strftime takes only the format string as argument, and returns the character string representation of the time information contained in the datetime instance. Thus, this function takes care of the conversion to tm_struct and calling the raw C strftime. Because Fortran does not allow assumed-length character strings as the type of the function result, a fixed length of MAXSTRLEN is used. MAXSTRLEN is currently set to 99. It is assumed that the desired time string is shorter than this value. Any resulting string shorter than MAXSTRLEN is padded with spaces, so it is best to trim the result using the TRIM intrinsic function (see the usage example below). This datetime-bound method is available since version 0.3.0. Arguments format A character string describing the desired format of date and time. Same as the format for the raw C strftime. Return value A CHARACTER(LEN=MAXSTRLEN) representation of datetime using format. Example usage USE datetime_module  TYPE(datetime)  :: a  a = a % now() WRITE(*,*)a%isoformat()  WRITE(*,*)TRIM(a%strftime(""%Y %B %d"")) See also c_strftime Back to top tm PURE ELEMENTAL TYPE(tm_struct) FUNCTION tm(self)    ! ARGUMENTS:   CLASS(datetime),INTENT(IN) :: self Returns a tm_struct instance that matches the time and date information in the caller datetime instance. Example usage USE datetime_module,ONLY:datetime  TYPE(datetime)  :: a TYPE(tm_struct) :: tm  ! Initialize: a = datetime(2013,1,1)  ! Get tm_struct from datetime: tm = a%tm() See also tm_struct Back to top tzOffset PURE ELEMENTAL CHARACTER(LEN=5) FUNCTION tzOffset(self)    ! ARGUMENTS:   CLASS(datetime),INTENT(IN) :: self Given a datetime instance, returns a character string with timezone offset in hours from UTC (Coordinated Universal Time), in format +hhmm or -hhmm, depending on the sign, where hh are hours and mm are minutes. Arguments None. Return value tzOffset A CHARACTER(LEN=5) in the form +hhmm or -hhmm, depending on the sign. Example usage USE datetime_module,ONLY:datetime  TYPE(datetime)  :: a TYPE(tm_struct) :: tm  ! Initialize a datetime instance with timezone offset of -4.75 hours: a = datetime(2013,1,1,tz=-4.75)  ! Write tzOffset on screen: WRITE(*,*)a%tzOffset        ! -0445 (offset of 4 hours and 45 minutes) See also Back to top utc PURE ELEMENTAL TYPE(datetime) FUNCTION utc(self)    ! ARGUMENTS:   CLASS(datetime),INTENT(IN) :: self Returns the datetime instance at Coordinated Universal Time (UTC). Arguments None. Return value utc A datetime instance with at UTC (tz = 0). Example usage USE datetime_module,ONLY:datetime  TYPE(datetime)  :: a TYPE(tm_struct) :: tm  ! Initialize a datetime instance with timezone offset of -4.75 hours: a = datetime(2013,1,1,tz=-4.75)  WRITE(*,*)a%isoformat()//a%tzOffset() ! 2013-01-01T00:00:00.000-0445  ! Convert a to UTC: a = a%utc()  WRITE(*,*)a%isoformat()//a%tzOffset() ! 2013-01-01T04:45:00.000+0000 See also tzOffset Back to top weekday PURE ELEMENTAL INTEGER FUNCTION weekday(self)    CLASS(datetime),INTENT(IN) :: self A datetime-bound method to calculate day of the week using Zeller's congruence. Returns an integer scalar in the range of [0-6], starting from Sunday. Example usage USE datetime_module,ONLY:datetime  TYPE(datetime)  :: a  ! Initialize: a = datetime(2013,1,1)  WRITE(*,*)a%weekday()    ! 2 See also weekdayLong weekdayShort Back to top weekdayLong PURE ELEMENTAL CHARACTER(LEN=9) FUNCTION weekdayLong(self)    CLASS(datetime),INTENT(IN) :: self  Returns the full name of the day of the week. Example usage USE datetime_module,ONLY:datetime  TYPE(datetime)  :: a  ! Initialize: a = datetime(2013,1,1)  WRITE(*,*)a%weekdayLong()    ! Tuesday See also weekday weekdayShort Back to top weekdayShort PURE ELEMENTAL CHARACTER(LEN=3) FUNCTION weekdayShort(self)    CLASS(datetime),INTENT(IN) :: self  Returns the abbreviated (e.g. Mon) name of the day of the week. Example usage USE datetime_module,ONLY:datetime  TYPE(datetime)  :: a  ! Initialize: a = datetime(2013,1,1)  WRITE(*,*)a%weekdayShort()    ! Tue See also weekday weekdayLong Back to top yearday PURE ELEMENTAL INTEGER FUNCTION yearday(self)    CLASS(datetime),INTENT(IN) :: self datetime-bound procedure. Returns integer day of the year (ordinal date). Equals to 1 for any January 1, 365 for a December 31 on a non-leap year, and 366 for a December 31 on a leap year. Example usage USE datetime_module,ONLY:datetime  TYPE(datetime)  :: a  ! Initialize: a = datetime(2013,5,1)  WRITE(*,*)a%yearday()    ! 121 See also isocalendar Back to top timedelta Represents a duration of time, and a difference between two datetime objects. It is defined as: TYPE :: timedelta    ! COMPONENTS:   INTEGER :: days         = 0   INTEGER :: hours        = 0   INTEGER :: minutes      = 0   INTEGER :: seconds      = 0   INTEGER :: milliseconds = 0    CONTAINS    ! METHODS:   PROCEDURE :: total_seconds  ENDTYPE timedelta All arguments are optional and default to 0. Similarly to datetime objects, timedelta instances can be initialized using positional and/or keyword arguments. In addition, a timedelta object is a result of subtraction between two datetime objects. Example usage USE datetime_module  TYPE(datetime)  :: a,b TYPE(timedelta) :: c  ! Initialize as default c = timedelta()  ! Positional arguments: c = timedelta(0,1,15,0,0)      ! 1 hour and 15 minutes  ! Keyword arguments: c = timedelta(days=1,hours=12) ! 1 day and 12 hours  ! Difference between datetimes: a = datetime(2013,5,12,22,0,0) ! 2013-05-12 22:00:00 b = datetime(2012,9,18,14,0,0) ! 2012-09-18 14:00:00  ! Subtract to get timedelta: c = a-b Back to top total_seconds PURE ELEMENTAL REAL(KIND=real_dp) FUNCTION total_seconds(self)    ! ARGUMENTS:   CLASS(timedelta),INTENT(IN) :: self A timedelta-bound method that returns a number of seconds contained in the time interval defined by the timedelta instance. This method is equivalent to Python's datetime.timedelta.total_seconds function. Arguments None Return value total_seconds A total number of seconds (of type REAL(KIND=real_dp)) contained in the timedelta instance. Example usage USE datetime_module,ONLY:timedelta  TYPE(timedelta) :: td  td = timedelta(days=5,hours=12,minutes=15,seconds=7,milliseconds=123)  WRITE(*,*)td%total_seconds()   ! 476107.12300000002 Back to top clock A generic clock object that contains start and stop times, tick increment and reset and tick methods. Most useful when needing to keep track of many datetime instances that change at different rates, for example, physical models with different time steps. Definition: TYPE :: clock    ! COMPONENTS:   TYPE(datetime) :: startTime   = datetime()   TYPE(datetime) :: stopTime    = datetime()   TYPE(datetime) :: currentTime = datetime()    TYPE(timedelta) :: tickInterval = timedelta()    LOGICAL :: alarm = .FALSE.    ! Clock status flags    LOGICAL :: started = .FALSE.   LOGICAL :: stopped = .FALSE.    CONTAINS    ! METHODS:   PROCEDURE :: reset   PROCEDURE :: tick  ENDTYPE clock clock components are initialized by default, and all arguments are optional. However, a clock instance must be initialized with some sane values of clock%startTime, clock%stopTime and clock%tickIncrement in order to be useful. Example usage USE datetime_module  TYPE(clock)    :: myClock TYPE(datetime) :: myTime  ! Initialize myTime myTime = myTime%now()  ! Initialize myClock ! Starts from myTime, stops 1 hour later, 1 minute per tick  myClock = clock(startTime    = myTime,                   &                 stopTime     = myTime+timedelta(hours=1),&                 tickInterval = timedelta(minutes=1))  DO    CALL myClock % tick()    ! Report current time after each tick   WRITE(*,*)myClock % currentTime % isoformat(' ')    ! If clock has reached stopTime, exit loop   IF(myClock % stopped)THEN     EXIT   ENDIF  ENDDO See also datetime timedelta Back to top reset PURE ELEMENTAL SUBROUTINE reset(self)    ! ARGUMENTS:   CLASS(clock),INTENT(INOUT) :: self Resets the clock to its start time. Arguments None Return value None Example usage CALL myClock%reset() ! Resets myClock%currentTime to myClock%startTime See also Back to top tick PURE ELEMENTAL SUBROUTINE tick(self)    ! ARGUMENTS:   CLASS(clock),INTENT(INOUT) :: self Increments the currentTime of the clock instance by one tickInterval. Sets the clock%stopped flag to .TRUE. if clock%currentTime equals or exceeds clock%stopTime. Arguments None Return value None Example usage See clock for an example. See also Back to top tm_struct Time object compatible with C/C++ tm struct. Available mainly for the purpose of calling c_strftime and c_strptime procedures. TYPE,BIND(c) :: tm_struct    ! COMPONENTS:   INTEGER(KIND=c_int) :: tm_sec   ! Seconds      [0-60] (1 leap second)   INTEGER(KIND=c_int) :: tm_min   ! Minutes      [0-59]   INTEGER(KIND=c_int) :: tm_hour  ! Hours        [0-23]   INTEGER(KIND=c_int) :: tm_mday  ! Day          [1-31]   INTEGER(KIND=c_int) :: tm_mon   ! Month        [0-11]   INTEGER(KIND=c_int) :: tm_year  ! Year - 1900   INTEGER(KIND=c_int) :: tm_wday  ! Day of week  [0-6]   INTEGER(KIND=c_int) :: tm_yday  ! Days in year [0-365]   INTEGER(KIND=c_int) :: tm_isdst ! DST          [-1/0/1]    ! METHODS: None.  ENDTYPE tm_struct See also datetime tm strftime strptime Back to top Overloaded operators The datetime-fortran library provides arithmetic and comparison operators for datetime and timedelta objects. Arithmetic operators Addition (+) and subtraction (-) operators are available for the following combination of derived type pairs: datetime + timedelta, returns a datetime instance; timedelta + datetime, returns a datetime instance; timedelta + timedelta, returns a timedelta instance; timedelta - timedelta, returns a timedelta instance; datetime - datetime, returns a timedelta instance; -timedelta (unary minus), returns a timedelta instance. Note that datetime - datetime operation accounts for timezone (tz) offsets in each of the datetime instances. The resulting timedeltathus includes the difference between timezones. Comparison operators datetime-fortran supports following binary comparison operators for datetime and timedelta objects: ==, /=, >, >=, < and <=. Since version 1.0.5, all comparison operators respect the timezone parameter of the datetime instances, so the operands are first adjusted to UTC time before making the comparison. Back to top Public procedures c_strftime FUNCTION c_strftime(str,slen,format,tm)BIND(c,name='strftime')RESULT(rc)    ! ARGUMENTS:   CHARACTER(KIND=c_char),DIMENSION(*),INTENT(OUT) :: str      INTEGER(KIND=c_int),VALUE,          INTENT(IN)  :: slen      CHARACTER(KIND=c_char),DIMENSION(*),INTENT(IN)  :: format    TYPE(tm_struct),                    INTENT(IN)  :: tm        INTEGER(KIND=c_int)                             :: rc An interface to a C/C++ standard library routine. Copies into str the content of format, expanding its format specifiers into the corresponding values that represent the time described in tm, with a limit of slen characters. Note: This function was renamed from strftime to c_strftime in version 0.3.0 to avoid name conflict with datetime-bound method strftime. If working with datetime instances, use datetime%strftime instead. Arguments str is the destination character string with the requested date and time. slen is the maximum number of characters to be copied to str, including the terminating null-character, CHAR(0). format is the character string containing any combination of regular characters and special format specifiers. These format specifiers are replaced by the function to the corresponding values to represent the time specified in tm. For more information on format specifiers see http://www.cplusplus.com/reference/ctime/strftime/. tm is an instance of the type tm_struct, containing date and time values to be processed. Return value If the resulting string fits in less than slen characters including the terminating null-character, the total number of characters copied to str (not including the terminating null-character) is returned. Otherwise, zero is returned and the contents of the array are indeterminate. Example usage USE datetime_module  TYPE(datetime)    :: a CHARACTER(LEN=20) :: res INTEGER           :: rc  a = a % now()  rc = c_strftime(res,20,""%Y %B %d""//CHAR(0),a%tm()) See also datetime%strftime c_strptime strptime tm tm_struct Back to top c_strptime FUNCTION c_strptime(str,format,tm)BIND(c,name='strptime')RESULT(rc)    CHARACTER(KIND=c_char),DIMENSION(*),INTENT(IN)  :: str   CHARACTER(KIND=c_char),DIMENSION(*),INTENT(IN)  :: format   TYPE(tm_struct),                    INTENT(OUT) :: tm   CHARACTER(KIND=c_char,LEN=1)                    :: rc An interface to a C/C++ standard library routine. Converts the character string str to values which are stored in tm, using the format specified by format. Note: This function was renamed from strptime to c_strptime in version 0.3.0 to avoid name conflicts with strptime which operates on datetime instances. If working with datetime instances, use strptime instead. Arguments str is the character string containing date and time information. format is the character string containing any combination of regular characters and special format specifiers, describing the date and time information in str. tm is an instance of the type tm_struct, in which the date and time values will be filled upon successful completion of the c_strptime function. Return value Upon successful completion, c_strptime returns the character following the last character parsed. Otherwise, a null character is returned. Example usage Extracting time difference between two time strings using c_strptime and tm2date: USE datetime_module  TYPE(datetime)  :: date1,date2 TYPE(tm_struct) :: ctime TYPE(timedelta) :: timediff  ! Return code for strptime CHARACTER(LEN=1) :: rc  ! Example times in ""YYYYMMDD hhmmss"" format CHARACTER(LEN=15) :: str1 = ""20130512 091519"" CHARACTER(LEN=15) :: str2 = ""20131116 120418""  ! Get tm_struct instance from str1 rc = c_strptime(str1,""%Y%m%d %H%M%S""//CHAR(0),ctime) date1 = tm2date(ctime)  ! Get tm_struct instance from str2 rc = c_strptime(str2,""%Y%m%d %H%M%S""//CHAR(0),ctime) date2 = tm2date(ctime)  timediff = date2-date1  WRITE(*,*)timediff WRITE(*,*)timediff%total_seconds() This example outputs the following:         188           2          48          58        1000    16253339.0000000  See also strptime tm2date Back to top date2num PURE ELEMENTAL REAL(KIND=real_dp) FUNCTION date2num(d)    ! ARGUMENTS:   TYPE(datetime),INTENT(IN) :: d Returns the number of days since 0001-01-01 00:00:00 UTC, given a datetime instance d. This function is similar in what it returns to analogous functions in Python (matplotlib.dates.date2num) and MATLAB's datenum. Note that matplotlib.dates.date2num returns the number of days since 0001-01-01 00:00:00 UTC plus 1 (for historical reasons), and MATLAB's datenum returns the number of days since 0000-01-01 00:00:00 UTC. In datetime-fortran, we choose the reference time of 0001-01-01 00:00:00 UTC as we consider it to be the least astonishing for the average user. Thus, MATLAB and Python users should be cautious when using datetime-fortran's date2num() function. Since version 1.0.5, date2num is timezone aware, i.e. the datetime instance is first converted to UTC before calculating the number of days. date2num is the inverse function of num2date, so by definition, a % utc() == num2date(date2num(a)) evaluates as .TRUE. for any datetime instance a. Arguments d A datetime instance. Return value date2num A REAL(KIND=real_dp) number of days since 0001-01-01 00:00:00 UTC. real_dp is defined as: INTEGER,PARAMETER :: real_dp = KIND(1d0) Example usage USE datetime_module,ONLY:datetime,date2num  TYPE(datetime)  :: a  ! Initialize: a = datetime(2013,1,1,6)  WRITE(*,*)date2num(a)   ! 734869.25000000000 See also datetime num2date Back to top datetimeRange PURE FUNCTION datetimeRange(d0,d1,t)    ! ARGUMENTS:   TYPE(datetime), INTENT(IN) :: d0   TYPE(datetime), INTENT(IN) :: d1   TYPE(timedelta),INTENT(IN) :: t Given start and end datetime instances d0 and d1, and time increment as timedelta instance t, returns an array of datetime instances. The number of elements is the number of whole time increments contained between datetimes d0 and d1. Arguments d0 A datetime instance with start time. Will be the first element of the resulting array. d1 A datetime instance with end time. Will be the equal to or greater than the last element of the resulting array. t A timedelta instance being the time increment for the resulting array. Return value datetimeRange An array of datetime instances of length FLOOR((d1-d0)/t)+1 Example usage TYPE(datetime)  :: a,b TYPE(timedelta) :: td  TYPE(datetime),DIMENSION(:),ALLOCATABLE :: dtRange  a  = datetime(2014,5,1) b  = datetime(2014,5,3) td = timedelta(days=1)  dtRange = datetimeRange(a,b,td)  ! Returns:  !      ! dtRange = [datetime(2014,5,1), !            datetime(2014,5,2), !            datetime(2014,5,3)]  a  = datetime(2014,5,1) b  = datetime(2014,5,3) td = timedelta(hours=7)  dtRange = datetimeRange(a,b,td)  ! Returns:  !      ! dtRange = [datetime(2014,5,1,0), !            datetime(2014,5,1,7), !            datetime(2014,5,1,14), !            datetime(2014,5,1,21), !            datetime(2014,5,2, 4), !            datetime(2014,5,2,11), !            datetime(2014,5,2,18)] See also datetime timedelta Back to top daysInMonth PURE ELEMENTAL INTEGER FUNCTION daysInMonth(month,year)    ! ARGUMENTS:   INTEGER,INTENT(IN) :: month   INTEGER,INTENT(IN) :: year Returns the number of days in month for a given month and year. This function is declared as ELEMENTAL, so it can be called with scalar or n-dimensional array arguments. Arguments month Integer number of month in year. Valid values are in the range [1-12]. year Integer year. Return value Returns an integer number of days in requested month and year. Returns 0 if month is not in valid range. Example usage USE datetime_module,ONLY:daysInMonth  ! January on leap year: WRITE(*,*)daysInMonth(1,2012)   ! 31  ! February on leap year: WRITE(*,*)daysInMonth(2,2012)   ! 29  ! February on non-leap year WRITE(*,*)daysInMonth(2,2013)   ! 28 See also daysInYear Back to top daysInYear PURE ELEMENTAL INTEGER FUNCTION daysInYear(year)    ! ARGUMENTS:   INTEGER,INTENT(IN) :: year Given an integer year, returns an integer number of days in that year. Calls the isLeapYear function. Arguments year An INTEGER scalar or array containing the desired year number(s). Return value daysInYear An INTEGER scalar or array. Represents the number of days in year. Example usage USE datetime_module,ONLY:daysInYear  ! Leap year: WRITE(*,*)daysInYear(2012)   ! 366  ! Non-leap year: WRITE(*,*)daysInYear(2013)   ! 365 See also daysInMonth isLeapYear Back to top isLeapYear PURE ELEMENTAL LOGICAL FUNCTION isLeapYear(year)    ! ARGUMENTS:   INTEGER,INTENT(IN) :: year Returns a LOGICAL value indicating whether the reqested year is a leap year. Arguments year An INTEGER scalar or array representing year number. Return value isLeapYear A LOGICAL scalar or array indicating whether a given year is leap year. Example usage USE datetime_module,ONLY:isLeapYear  ! Leap year: WRITE(*,*)isLeapYear(2012)   ! .TRUE.  ! Non-leap year: WRITE(*,*)isLeapYear(2013)   ! .FALSE. See also daysInYear Back to top num2date PURE ELEMENTAL TYPE(datetime) FUNCTION num2date(num)    ! ARGUMENTS:   REAL(KIND=real_dp),INTENT(IN) :: num Given the number of days since 0001-01-01 00:00:00 UTC, returns a correspoding datetime instance. This function is similar to analogous function in Python (matplotlib.dates.num2date). num2date is the inverse function of date2num, so by definition, a == num2date(date2num(a)) evaluates as .TRUE. for any datetime instance a. Similarly, b == date2num(num2date(b)) evaluates as .TRUE. for any variable b of type REAL(KIND=real_dp). Arguments num Number of days since 0001-01-01 00:00:00 UTC. Return value num2date A datetime instance. Example usage USE datetime_module,ONLY:datetime,num2date  TYPE(datetime)  :: a  a = num2date(734869.25d0) ! a becomes datetime(2013,1,1,6,0,0,0) See also date2num datetime Back to top strptime TYPE(datetime) FUNCTION strptime(str,format)    ! ARGUMENTS:   CHARACTER(LEN=*),INTENT(IN) :: str   CHARACTER(LEN=*),INTENT(IN) :: format A wrapper function around c_strptime. Given a character string str with the format format, returns an appropriate datetime instance containing that time information. This function is analogous to Python's datetime.datetime.strptime() function. Available since version 0.3.0. Arguments str is the character string containing date and time information. format is the character string containing any combination of regular characters and special format specifiers, describing the date and time information in str. Return value Upon successful completion, strptime returns the datetime instance corresponding to the time information contained in str. Example usage Extracting time difference between two time strings using strptime: USE datetime_module  TYPE(datetime)  :: date1,date2 TYPE(timedelta) :: timediff  ! Example times in ""YYYYMMDD hhmmss"" format CHARACTER(LEN=15) :: str1 = ""20130512 091519"" CHARACTER(LEN=15) :: str2 = ""20131116 120418""  date1 = strptime(str1,""%Y%m%d %H%M%S"") date2 = strptime(str2,""%Y%m%d %H%M%S"")  timediff = date2-date1  WRITE(*,*)timediff WRITE(*,*)timediff%total_seconds() This example outputs the following:         188           2          48          58        1000    16253339.0000000  This is the same example as in c_strptime but with fewer necessary steps. See also c_strptime tm2date Back to top tm2date PURE ELEMENTAL TYPE(datetime) FUNCTION tm2date(ctime)    ! ARGUMENTS:   TYPE(tm_struct),INTENT(IN) :: ctime Given a tm_struct instance, returns a corresponding datetime instance. Mostly useful for obtaining a datetime instance after a tm_struct is returned from strptime. Arguments ctime A tm_struct instance. Return value tm2date A datetime instance. Example usage See example usage for strptime. See also datetime tm_struct strptime Back to top Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/milancurcic/datetime-fortran"	"A Fortran 2003 date and time manipulation library, modeled after Python's datetime library."	"true"
"Testing"	"FRUIT"	"http://sourceforge.net/projects/fortranxunit/"	"FORTRAN Unit Test Framework, written in FORTRAN 95"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"FORTRAN Unit Test Framework (FRUIT) download | SourceForge.net SourceForge Browse Enterprise Blog Deals Help Create Log In or Join Solution Centers Go Parallel Resources Newsletters Cloud Storage Providers Business VoIP Providers Call Center Providers Home Browse Development Frameworks FORTRAN Unit Test Framework (FRUIT) FORTRAN Unit Test Framework (FRUIT) FORTRAN Unit Test Framework FRUIT - TDD in FORTRAN Brought to you by: meihome, phrodod Summary Files Reviews Support Wiki Mailing Lists Bugs News Discussion Donate Code ★ 5.0 Stars (4) 17 Downloads (This Week) Last Update: 2015-11-24 Download fruit_3.4.1.zip Browse All Files Windows Mac Linux Screenshots Description FORTRAN Unit Test Framework, written in FORTRAN 95. So that all FORTRAN features can be tested. FRUIT has assertion, fixture, setup, teardown, report, spec, driver generation. Rake used as build tool. Tutorials at http://fortranxunit.wiki.sourceforge.net The core testing part is in FORTRAN, this part can be used independent of the Ruby codes. The Ruby code is to make fixtures and reports easier. Rake is to build the project elegantly. This project also demonstrate a new way to build mixed language code in an alternative way than Make. Most of the FORTRAN are important in nature, used in nuclear and aerospace codes, etc, and maintained and written actively. Please help to bring TDD practices to the FORTRAN community. The change could be very hard, personally, I quit, since I could not make the change. I hope your organization will be successful. Enjoy a cup of fruit while maintaining FORTRAN ! Andrew Hang Chen and other maintainers who feel importance of TDD in cr FORTRAN Unit Test Framework (FRUIT) Web Site Categories Frameworks, Information Analysis, Testing License BSD License KEEP ME UPDATED By clicking on ""Follow"" below, you are agreeing to the Terms of Use and the Privacy Policy. Get notifications on updates for this project. Get newsletters with site news, white paper/events resources, and sponsored content from our partners. Invalid email address. Please try again. Sent to None. Follow You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. User Ratings 5.0 out of 5 stars ★★★★★ ★★★★ ★★★ ★★ ★ 4 0 0 0 0 ease 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 5 / 5 features 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 design 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 support 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 5 / 5 Write a Review User Reviews Filter All All ★★★★★ ★★★★ ★★★ ★★ ★ eisscerav 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 easy to use. But I'm not sure if it is thread safe. Posted 11/16/2015 bbrandt5 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Have been using it for almost a year now (just the Fortran part without the Ruby) and it has everything I need. And it is super easy to use and helped me to find countless bugs. Awesome! Posted 10/29/2015 zmi007 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 I have tested only a small part of functionality of FRUIT(without ruby etc) and this part is already a very polished and useful fortran testing module. You can write tests for your program with only few lines of additinal code (in fortran). And you are free to store testing part in your source code (and switch it on f.e. with some preprocessor instruction) or to build up a complete hierarchy of test code as a library/module or additional program. Posted 03/30/2015 meihome 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Mike Jackson wrote a good review of FRUIT. It compared FRUIT and other FORTRAN unit testing framework. Please search: ""A look at FORTRAN unit test frameworks"". Andrew Chen Posted 09/14/2014 Read more reviews Additional Project Details Intended Audience Developers User Interface Console/Terminal Programming Language Fortran, Ruby Registered 2005-11-01 Recommended Projects pFUnit Unit testing framework for Fortran with MPI extensions A FORTRAN 90 Numerical Library flibs - a collection of Fortran modules Deals Top Searches fortran dotnet framework alternative fruit pca testing fortran Report inappropriate content Thanks for helping keep SourceForge clean. Screenshot instructions: Windows Mac Red Hat Linux   Ubuntu Click URL instructions: Right-click on ad, choose ""Copy Link"", then paste here → (This may not be possible with some types of ads) More information about our ad policies X You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. Briefly describe the problem (required): Upload screenshot of ad (required): Select a file, or drag & drop file here. ✔ ✘ Please provide the ad click URL, if possible: SourceForge About Site Status @sfnet_ops Find and Develop Software Create a Project Software Directory Top Downloaded Projects Community Blog @sourceforge Resources Help Site Documentation Support Request © 2016 Slashdot Media. All Rights Reserved. Terms Privacy Opt Out Choices Advertise Get latest updates about Open Source Projects, Conferences and News. Sign up for the SourceForge newsletter: I agree to receive quotes, newsletters and other information from sourceforge.net and its partners regarding IT services and products. I understand that I can withdraw my consent at any time. Please refer to our Privacy Policy or Contact Us for more details You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. No, thanks Screenshots can attract more users to your project. Features can attract more users to your project."	"null"	"null"	"FORTRAN Unit Test Framework, written in FORTRAN 95"	"true"
"Testing"	"Ftunit"	"http://flibs.sourceforge.net/ftnunit.html"	"Fortran unit testing framework by Arjen Markus"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"flibs/ftnunit - flibs flibs/ftnunit(n) 1.2 ""flibs"" NAME flibs/ftnunit - Unit testing TABLE OF CONTENTS     TABLE OF CONTENTS     SYNOPSIS     DESCRIPTION     OUTPUT     ROUTINES     CUSTOMISATION     GENERATING TESTS FROM A TABLE     TODO     RELATED WORK     COPYRIGHT SYNOPSIS runtests.bat runtests.sh runtests.tcl ftnunitgui.tcl call runtests( testproc ) call runtests_init call runtests_final( stop ) call test( proc, text, ignore ) call assert_true( cond, text ) call assert_false( cond, text ) call assert_equal( value1, value2, text ) call assert_comparable( value1, value2, margin, text ) call assert_inbetween( value, vmin, vmax, text ) call assert_files_comparable( filename1, filename2, margin, text ) exists = ftnunit_file_exists( filename ) call ftnunit_get_lun( lun ) call ftnunit_remove_file( filename ) call ftnunit_make_empty_file( filename ) cmd call ftnunit_hook_test_start( text ) cmd call ftnunit_hook_test_stop( text ) call ftnunit_hook_test_failure( text, assert_text, failure_text ) call ftnunit_hook_test_complete DESCRIPTION JUnit is a well-known facility for defining and running unit tests in Java programs. The ftnunit framework was inspired by that facility. It is not as good-looking as JUnit, by no means: It has a simple graphical user-interface that does not group the tests. As Fortran does not allow introspection, the test routines can not be detected automatically, instead as a programmer you need to set up a high-level routine yourself that collects all the unit tests. A runtime error, like division by zero, may lead to a termination of the program. There is no (portable) way to catch these. Instead, the framework relies on a batch file or shell script to repeatedly start the program until all tests are run. Despite these limitations, ftnunit can be a great help: The Tcl program gentabletest.tcl generates a complete test program based on a simple input file (see GENERATING TESTS FROM A TABLE). The code to test the various components (subroutines, functions, tasks consisting of several program units) can be combined with the program itself, without interfering with the ordinary code. This is achieved by defining a single routine (test_all, say) that runs all the unit tests and that is called via the provided routine runtests:    program myprog     ... ! ! The routine runtests will check if unit tests are requested ! If not, it will return immediately. This way we make sure ! the unit tests remain part of the program. ! ! The routine test_all runs all unit tests ! (see the dataproc_testing module) !     call runtests( test_all ) ! ! Ordinary processing !     ...  end program  The routine runtests checks if there is a file ""ftnunit.run"". If there is such a file, it will run the given subroutine. Otherwise it will return and the rest of the program is executed. Because the test code is incorporated in the program itself, it is less likely that they evolve independently: changes in the argument lists of the subroutines and functions may lead to compile errors in the test code. There is no need to set up a whole new program for testing portions of the program. The source file ""test_ftnunit.f90"" illustrates how to use the ftnunit framework: The main program calls the routine ""runtests"" and passes it the argument ""test_all"", a routine defined in a module called ""dataproc_testing"". The routine ""test_all"" consists of nothing but calls to the generic routine ""test"":    subroutine test_all      call test( test_no_file, ""Read non-existent file"" )     call test( test_empty_file, ""Read an empty file"" )     call test( test_invalid_file, ""Read an invalid file"" )     call test( test_ordinary_file, ""Read an ordinary file"" )  end subroutine test_all  The module includes a source file ""ftnunit_test.f90"". This is a remnant of a previous version. Please ignore this. The generic routine ""test"" checks whether a particular unit test needs to be run (via the test number) and then runs the subroutine that was passed as one of its arguments. One such routine looks like this:    subroutine test_no_file      integer :: nodata     real    :: vmean, vmin, vmax      call ftnunit_remove_file( 'no_such_file' )     call write_name( 'no_such_file' )      call open_files     call process_data( nodata, vmean, vmax, vmin )      call assert_true( nodata == 0, ""No data read"" )  end subroutine test_no_file  The assertion is used to check that the result is as expected. The program contains some deliberate errors and the resulting log file looks like this:    Test: Read non-existent file Test: Read an empty file Test: Read an invalid file forrtl: severe (59): list-directed I/O syntax error, unit 11, file c:\arjen\flibs\tests\ftnunit\invalid_file  Image              PC        Routine            Line        Source test_ftnunit.exe     004151B9  Unknown               Unknown  Unknown test_ftnunit.exe     00415017  Unknown               Unknown  Unknown test_ftnunit.exe     004141F4  Unknown               Unknown  Unknown test_ftnunit.exe     00414629  Unknown               Unknown  Unknown test_ftnunit.exe     00409C05  Unknown               Unknown  Unknown test_ftnunit.exe     004095FB  Unknown               Unknown  Unknown test_ftnunit.exe     0040144B  Unknown               Unknown  Unknown test_ftnunit.exe     00401FE9  Unknown               Unknown  Unknown test_ftnunit.exe     00401A2C  Unknown               Unknown  Unknown test_ftnunit.exe     00401BB3  Unknown               Unknown  Unknown test_ftnunit.exe     0040294A  Unknown               Unknown  Unknown test_ftnunit.exe     0040232E  Unknown               Unknown  Unknown test_ftnunit.exe     0044A1E9  Unknown               Unknown  Unknown test_ftnunit.exe     00433519  Unknown               Unknown  Unknown kernel32.dll       7C816D4F  Unknown               Unknown  Unknown  Incrementally linked image--PC correlation disabled. Test: Read an ordinary file Number of failed assertions:                    0 Number of runs needed to complete the tests:    3  The program is run via one of the following files: runtests.bat A batch file for use under MS Windows runtests.sh A Bourne shell script for use under UNIX/Linux or similar systems, like Cygwin or Mingw. runtests.tcl A Tcl program that presents a simple graphical user-interface ftnunitgui.tcl A Tcl-based graphical user-interface that allows you to run tests one at a time OUTPUT When you run a program in test mode via the batch file/shell script, it produces two output files: runtests.log contains all the output that was written to the screen. ftnunit.html is an HTML file with a summary of the tests and a colour encoding to indicate the test cases that succeeded or failed. ROUTINES The module ftnunit contains the following subroutines and functions: call runtests( testproc ) Routine to start the unit tests. It checks if the file ""ftnunit.run"" exists. If so, it will call the subroutine testproc that was passed. Otherwise it will simply return, so that the ordinary program execution may continue. If the subroutine testproc returns, the program stops, unless you have called the subroutine runtests_init before runtests. subroutine testproc Subroutine that calls the individual test routines. It takes no arguments. It wil generally exist of a series of calls to the routine test - see below. call runtests_init Routine to initialise the ftnunit system, so that you call runtests more than once. To complete the tests, call runtests_final, as this will print the final statistics and stop the program. call runtests_final( stop ) Routine to finalise the ftnunit system: it will print the final statistics and stop the program, but only if the file ""ftnunit.run"" is present. logical, optional, intent(in) stop If present and set to true, the routine will not stop the program. Instead it returns and the program continues working. call test( proc, text, ignore ) Routine to run the individual unit test routine (emph proc). It decides if the test has not run yet and if so, the test routine is called. Otherwise it is skipped. test takes care of all administrative details. subroutine proc Subroutine that implements an individual unit test. It takes no arguments. Within each such subroutine the complete unit test is run. character(len=*), intent(in) text Text describing the particular unit test. It is printed in the log file. logical, optional, intent(in) ignore If present and set to true, the test routine will not be actually run. Instead it is shown as ""ignored"". This feature is useful if the code to be tested is not yet ready for testing. file. call assert_true( cond, text ) Routine to check that a condition is true. If not, a message is printed in the log file and the number of failures is increased. logical cond The condition to be checked character(len=*), intent(in) text Text describing the condition call assert_false( cond, text ) Routine to check that a condition is false. If not, a message is printed in the log file and the number of failures is increased. logical cond The condition to be checked character(len=*), intent(in) text Text describing the condition call assert_equal( value1, value2, text ) Routine to check that two logicals, two strings, or two integers are equal or if two one-dimensional integer, logical or string arrays are equal. If not, a message is printed, along with the values that were different. <type> value1 The first integer/logical/string value <type> value2 The second integer/logical/string value character(len=*), intent(in) text Text describing the condition Or: integer [, dimension(:)] value1 The first integer value or array integer [, dimension(:)] value2 The second integer value or array character(len=*), intent(in) text Text describing the condition call assert_comparable( value1, value2, margin, text ) Routine to check that two reals are almost equal or if two one-dimensional real arrays (single or double precision) are almost equal. If not, a message is printed, along with the values that were different. The margin is taken as a relative tolerance. Two values are considered almost equal if:       abs( v1 - v2 ) < margin * (abs(v1)+abs(v2)) / 2 real [, dimension(:)] value1 The first real value or array real [, dimension(:)] value2 The second real value or array character(len=*), intent(in) text Text describing the condition call assert_inbetween( value, vmin, vmax, text ) Routine to check that a (single or double precision) real value lies between two given bounds. This establishes an absolute range for the values, rather than a relative. real value The real value to be tested real vmin The minimum value that is allowed real vmax The maximum value that is allowed call assert_files_comparable( filename1, filename2, margin, text ) Routine to check that two files are equal or almost equal. The files are scanned line by line and item by item. If an item can be interpreted as a number, then the comparison is done using a margin, otherwise the corresponding items are considered strings and should be exactly equal. A report is produced of all differing lines. The margin is taken as a relative tolerance. Two numerical values are considered almost equal if:        abs( v1 - v2 ) < margin * (abs(v1)+abs(v2)) / 2 character(len=*) filename1 The name of the first file to read character(len=*) filename2 The name of the second file to read character(len=*), intent(in) text Text describing the condition exists = ftnunit_file_exists( filename ) Logical function to check that a particular file exists character(len=*), intent(in) filename Name of the file to be checked call ftnunit_get_lun( lun ) Subroutine to get a free LU-number integer, intent(out) lun Next free LU-number call ftnunit_remove_file( filename ) Subroutine to remove (delete) a file character(len=*), intent(in) filename Name of the file to be removed call ftnunit_make_empty_file( filename ) Subroutine to make a new, empty file character(len=*), intent(in) filename Name of the file to be created CUSTOMISATION The module ftnunit_hooks can be used to customise the output of ftnunit to a certain extent. It provides four routines that you can easily adapt to your needs: cmd call ftnunit_hook_test_start( text ) ] Routine to signal the start of a test. string text The descriptive text passed to the routine test. cmd call ftnunit_hook_test_stop( text ) ] Routine to signal the end of a test. string text The descriptive text passed to the routine test. call ftnunit_hook_test_failure( text, assert_text, failure_text ) Routine to signal that an assertion has failed (and therefore the test). string text The descriptive text passed to the routine test. string assert_text Text describing the assertion string failure_text The text describing the reason of the failure call ftnunit_hook_test_complete Routine called after the tests have been run (for instance to start and Internet browser to view the HTML report). Note that the default implementation consists of empty routine. As an example of customisation, under Windows, you could start the default Internet browser showing the HTML file like this: subroutine ftnunit_hook_test_complete call system( ""ftnunit.html"" ) end subroutine ftnunit_hook_test_complete provided an association for files with extension ""html"" exists. GENERATING TESTS FROM A TABLE The Tcl program ""gentabletest.tcl"" reads the test specifications from an input file and generates a complete Fortran program. The ideas from Bil Kleb's ""Toward Scientific Numerical Modeling"" ftp://ftp.rta.nato.int/PubFullText/RTO/MP/RTO-MP-AVT-147/RTO-MP-AVT-147-P-17-Kleb.pdf were used for the set-up. To do: provide a detailed description. For the moment: see example.tbl, including below.    ! Example of generating test code via a table ! ------------------------------------------- ! The routine to be tested determines the minimum oxygen concentration ! in a river, based on the Streeter-Phelps model: ! !    dBOD/dt = -k * BOD ! !    dO2/dt = -k * BOD + ka * (O2sat-O2) / H ! ! where !    BOD   - biological oxygen demand (mg O2/l) !    O2    - oxygen concentration (mg O2/l) !    O2sat - saturation concentration of oxygen (mg O2/l) !    k     - decay rate of BOD (1/day) !    ka    - reareation rate of oxygen (m/day) !    H     - depth of the river ! ! We need boundary (initial) conditions for BOD and oxygen and ! the equations describe the concentrations of BOD and oxygen in a ! packet of water as it flows along the river. ! ! Note: ! It is a very simple model, it is not meant as a realistic ! representation. ! ! The routine simply continues the solution until a minimum is found. ! The results are: oxymin and time ! ! ! The keyword DECLARATIONS introduces the declarations we need for the ! complete generated code ! DECLARATIONS     use streeter_phelps     real :: bod, oxy     real :: k, ka, h, oxysat, dt, oxymin, time ! ! The keyword CODE introduces the code fragment required to run the ! routine or routines. The results and possible checking of error ! conditions are separated. ! CODE     call compute_min_oxygen( bod, oxy, k, ka, h, oxysat, dt, oxymin, time ) ! ! The keyword RESULT indicates which arguments/variables hold the ! interesting results. Specify one name per line (you can not currently ! use array elements) and the allowed margin (taken as absolute, if ! followed by ""%"" as a percentage) ! RESULT     oxymin  0.001        ! Minimum oxygen concentration     time    0.01%        ! Time the minimum is reached  ! ! The keyword ERROR is used for a code fragment that checks if the ! routine has correctly found an error in the input (that is, some ! parameter value is out of range). The code is invoked when any of ! result variables in a table entry has the keyword ERROR instead of ! a proper value. ! Use the subroutine ""error"" to indicate the correctly reported error ! condition. ! ERROR     if ( time == -999.0 ) then         call error     endif ! ! The keyword RANGES specifies that the variables are to be taken ! from a uniform or a normal distribution. The generated program will ! simply select values at random and run the code with them. The report ! consists of the detailed output as well as a summary. ! RANGES     oxy   10.0   2.0  Uniform ! Name of the variable, the mean and the margin (uniform)                               ! Normal: mean and standard deviation followed by Normal                               ! Note: all parameters must be given! ! ! The keyword TABLE indicates the beginning of a table of input data and ! expected values. The first (non-comment) line contains the names of ! the variables as used in the code fragments and all others are the ! values expected. ! ! There are two special values: ! ? -     indicating an unknown value for result variables and a ""do not !         care"" value for input variables !         It is useful to generate a table that does contain the (computed) !         results (see the file table.out) or to indicate situations !         where one or more input variables are out of range and this !         should lead to an error ! ERROR - indicating that the entry should cause the routine to be !         tested to flag an error condition. ! TABLE dt   oxy       bod       oxysat    h         k         ka        oxymin    time 0.1  10        1         10        10        0.1       1.0       10.0      2.0 1.0  10        1         10        10        0.1       1.0       ?         ? ! ! This case is unacceptable: time step must be positive 0.0  ?         ?         ?         ?         ?         ?         ?         ERROR 1.0  0.        10        10        10        0.1       1.0       ?         ?  TODO The following things are still left to do: Proper inclusion of the routine prolog and epilog Extension of the set of assertion routines RELATED WORK There are at least two similar initiatives with regard to a unit testing framework for Fortran: Funit (implemented in Fortran and Ruby) by Bil Kleb and others A framework implemented in Fortran by Brice Womack and Tom Clune FRUIT (implemented in Fortran and Ruby) by Andrew Chen (Note: To avoid confusion, I have renamed my original module ""funit"" to ftnunit) COPYRIGHT Copyright © 2009 Arjen Markus <arjenmarkus@sourceforge.net>"	"null"	"null"	"Fortran unit testing framework by Arjen Markus"	"true"
"Testing"	"pFUnit"	"http://sourceforge.net/projects/pfunit/"	"Unit testing framework for Fortran with MPI extensions by developers from NASA and NGC TASC. Uses parallel codes and object-oriented design."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"pFUnit download | SourceForge.net SourceForge Browse Enterprise Blog Deals Help Create Log In or Join Solution Centers Go Parallel Resources Newsletters Cloud Storage Providers Business VoIP Providers Call Center Providers Home Browse Development Testing pFUnit pFUnit Unit testing framework for Fortran with MPI extensions Brought to you by: aoloso, cacruz, mlrilee, techxdave, tom_clune Summary Files Reviews Support Wiki Mailing Lists Tickets ▾ Patches Bugs Feature Requests Discussion Code ★ 4.8 Stars (4) 31 Downloads (This Week) Last Update: 2016-05-24 Download pFUnit.tar.gz Browse All Files Windows Mac Linux Screenshots Description pFUnit is a Fortran testing framework created by developers from NASA and NGC TASC. pFUnit offers a convenient, lightweight mechanism for Fortran developers to create and run software tests that specify the desired behavior for a given piece of code. pFUnit Web Site Categories Testing, Frameworks License NASA Open Source Agreement Features Unit Testing for Fortran Support for Serial codes and Parallel codes using MPI and OpenMP New! Now Supporting PGI Fortran 15.1! Modern Fortran programming techniques, including object orientation Easy-to-use preprocessor support for writing tests Tested with GNU, Intel, NAG, and PGI Fortran as well as Open MPI and MPICH. Builds with GNU Make and CMake. KEEP ME UPDATED By clicking on ""Follow"" below, you are agreeing to the Terms of Use and the Privacy Policy. Get notifications on updates for this project. Get newsletters with site news, white paper/events resources, and sponsored content from our partners. Invalid email address. Please try again. Sent to None. Follow You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. User Ratings 4.8 out of 5 stars ★★★★★ ★★★★ ★★★ ★★ ★ 3 1 0 0 0 ease 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 5 / 5 features 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 design 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 5 / 5 support 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 0 / 5 Write a Review User Reviews Filter All All ★★★★★ ★★★★ ★★★ ★★ ★ melven2 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Very nice and powerful unit test framework. First (and only usable) choice if you need unit tests in modern Fortran. So I'ld suggest to use this for every new Fortran software. Support for MPI and OpenMP is included, but I didn't test this throughouly, yet. My rating is only 4 out of 5 stars because pFUnit doesn't work with all compilers/platforms correctly. This is due to compiler bugs in even the most recent Fortran compilers (concerning Fortran 2003/08 features). Of course the pFUnit developers are not the ones to blame here (they are doing a nice job!), but it is still a major drawback if your software needs to run on different platforms (e.g. a cluster, where you can't install your own compiler). Posted 02/14/2016 jdomi 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 I started to use this tool a month ago and I am now promoting this tool in my lab. It's a great tool easy to use and powerfull. Posted 03/20/2014 oliverspencer 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Very easy to use pfunit Posted 10/28/2012 <REDACTED> 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Runs smoothly Posted 09/13/2012 Read more reviews Additional Project Details Languages English Intended Audience Science/Research, Developers User Interface Command-line Programming Language Fortran Registered 2006-10-02 Recommended Projects FORTRAN Unit Test Framework (FRUIT) FORTRAN Unit Test Framework FRUIT - TDD in FORTRAN A FORTRAN 90 Numerical Library flibs - a collection of Fortran modules Deals Top Searches fortran pfunit Report inappropriate content Thanks for helping keep SourceForge clean. Screenshot instructions: Windows Mac Red Hat Linux   Ubuntu Click URL instructions: Right-click on ad, choose ""Copy Link"", then paste here → (This may not be possible with some types of ads) More information about our ad policies X You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. Briefly describe the problem (required): Upload screenshot of ad (required): Select a file, or drag & drop file here. ✔ ✘ Please provide the ad click URL, if possible: SourceForge About Site Status @sfnet_ops Find and Develop Software Create a Project Software Directory Top Downloaded Projects Community Blog @sourceforge Resources Help Site Documentation Support Request © 2016 Slashdot Media. All Rights Reserved. Terms Privacy Opt Out Choices Advertise Get latest updates about Open Source Projects, Conferences and News. Sign up for the SourceForge newsletter: I agree to receive quotes, newsletters and other information from sourceforge.net and its partners regarding IT services and products. I understand that I can withdraw my consent at any time. Please refer to our Privacy Policy or Contact Us for more details You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. No, thanks Screenshots can attract more users to your project. Features can attract more users to your project."	"null"	"null"	"Unit testing framework for Fortran with MPI extensions by developers from NASA and NGC TASC. Uses parallel codes and object-oriented design."	"true"
"Encoding-Decoding"	"BeFoR64"	"https://github.com/szaghi/BeFoR64"	"Base64 encoding/decoding library for FoRtran poor men. A KISS library for base64 encoding/decoding for modern (2003+) Fortran projects."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9"	"4"	"2"	"GitHub - szaghi/BeFoR64: BeFoR64, Base64 encoding/decoding library for FoRtran poor men Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 9 Fork 2 szaghi/BeFoR64 Code Issues 2 Pull requests 1 Wiki Pulse Graphs BeFoR64, Base64 encoding/decoding library for FoRtran poor men 72 commits 2 branches 11 releases Fetching contributors FORTRAN 98.2% Python 1.1% Shell 0.7% FORTRAN Python Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.1.1 v1.1.0 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.1.1 v0.0.1 Nothing to show New pull request Latest commit 758c54e Jun 28, 2016 szaghi update submodules Permalink Failed to load latest commit information. doc Update to the most recent PENF library Mar 30, 2016 src update submodules Jun 28, 2016 .gitmodules select master branch for submodules Jun 17, 2016 .travis.yml Config codecov Jun 8, 2016 CONTRIBUTING.md Commit before submodularize IR_Precision Jul 27, 2015 LICENSE.bsd-2.md update licenses date May 16, 2016 LICENSE.bsd-3.md modify BSD3 license Jun 16, 2015 LICENSE.gpl3.md Init versioning Jan 27, 2015 LICENSE.mit.md update licenses date May 16, 2016 README.md Update to the most recent PENF library Mar 30, 2016 codecov.yml Config codecov Jun 8, 2016 fobos Update to new PENF and try GNU 6.x Jun 8, 2016 makedoc.sh Update makedoc.sh script Mar 30, 2016 README.md BeFoR64 BeFoR64, Base64 encoding/decoding library for FoRtran poor people BeFoR64 is a pure Fortran (KISS) library for base64 encoding/decoding for modern (2003+) Fortran projects; BeFoR64 is Fortran 2003+ standard compliant; BeFoR64 is a Free, Open Source Project. Table of Contents What is BeFoR64? Main features Copyrights Documentation A Taste of BeFoR64 Issues Compiler Support What is BeFoR64? Modern Fortran standards (2003+) have introduced better support for strings manipulations. Exploiting such new Fortran capabilities, BeFoR64 provides an easy to use module library for encoding and decoding Fortran types (binary internal representation) in ascii-base64-encoded string. Go to Top Main features User-friendly methods for encoding/decoding in base64: encode real/integer scalar variables; decode real/integer scalar variables; encode real/integer array variables; decode real/integer array variables; encode character scalar variables; decode character scalar variables; encode character array variables; decode character array variables; encode unlimited polymorphic scalar variables; decode unlimited polymorphic scalar variables; encode unlimited polymorphic array variables; decode unlimited polymorphic array variables; user-friendly methods for packing heterogeneous data: pack integer/integer (different kinds) scalars; pack integer/integer (different kinds) arrays; pack real/real (different kinds) scalars; pack real/real (different kinds) arrays; pack integer/real scalars; pack integer/real arrays; errors trapping mechanism. Any feature request is welcome. Go to Top Copyrights BeFoR64 is an open source project, it is distributed under a multi-licensing system: for FOSS projects: GPL v3; for closed source/commercial projects: BSD 2-Clause; BSD 3-Clause; MIT. Anyone is interest to use, to develop or to contribute to BeFoR64 is welcome, feel free to select the license that best matches your soul! More details can be found on wiki. Go to Top Documentation Besides this README file the BeFoR64 documentation is contained into its own wiki. Detailed documentation of the API is contained into the GitHub Pages that can also be created locally by means of ford tool. A Taste of BeFoR64 Let us assume our goal is encoding a binary integer. It is as simple as use befor64 ... character(len=:), allocatable:: code64 ! base64 encoded string ... call b64_encode(n=12._R8P,code=code64) print ""(A)"", code64 But you are not limited to a simple integer scalar, you can encode real, integer, characters scalar or arrays, and by means of the auxiliary Lib_Pack library also mixed types. See the wiki. Go to Top Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/szaghi/BeFoR64"	"Base64 encoding/decoding library for FoRtran poor men. A KISS library for base64 encoding/decoding for modern (2003+) Fortran projects."	"true"
"Portability enabling"	"IR_Precision"	"https://github.com/szaghi/IR_Precision"	"Pure Fortran (2003+) library for ensuring codes portability."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9"	"3"	"5"	"GitHub - szaghi/PENF: Portability Environment for Fortran poor people Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 9 Fork 5 szaghi/PENF Code Issues 2 Pull requests 1 Pulse Graphs Portability Environment for Fortran poor people 66 commits 2 branches 13 releases Fetching contributors FORTRAN 99.3% Shell 0.7% FORTRAN Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 446afef Jun 22, 2016 szaghi Merge branch 'release/1.1.4' Permalink Failed to load latest commit information. doc New realease not backward compatible Mar 25, 2016 src Add compact real string facility Jun 22, 2016 .gitignore Add compact real string facility Jun 22, 2016 .travis.yml update travis config Jun 22, 2016 CONTRIBUTING.md commit before flows Jul 27, 2015 LICENSE.bsd-2.md update licenses May 25, 2016 LICENSE.bsd-3.md update licenses May 25, 2016 LICENSE.gpl3.md CONTRIBUTING and LICENSE files added Mar 24, 2014 LICENSE.mit.md update licenses May 25, 2016 README.md update project name into README Mar 25, 2016 fobos Add compact real string facility Jun 22, 2016 makedoc.sh update makedoc.sh Aug 6, 2015 README.md PENF PENF, Portability Environment for Fortran poor people A KISS library for exploiting codes portability for modern (2003+) Fortran projects. PENF is a pure Fortran (KISS) library for achieving portable codes for modern Fortran projects; PENF provides many number-to-string and viceversa facilities; PENF is Fortran 2003+ standard compliant; PENF is a Free, Open Source Project. Table of Contents What is PENF? Main features Copyrights Documentation A Taste of PENF Issues Compiler Support What is PENF? Fortran is the most popular programming language for scientific computing. With Fortran it is quite simple obtain fast code and manage large multidimensional array. Because Fortran permits the achievement of high performance it is also used on great range of different computer-architectures, and often on the fastest supercomputer in the world. Therefore Fortran programs must be portable: portability means that the code will give the same results on every different computer-architectures. One of the most important goal of the numeric code is to control the numeric error due to finite precision of numerical operations. Fortran uses the IEEE representations. Integers and reals (floating point) are represented with a finite precision. So when the code computes an operation it has a truncation error due to the truncation of the numerical finite representations. For numerical and more in general scientific applications this source of errors must be controlled. The programmer must know which is the precision associated to the code variables. Before the standard Fortran 90/95 there are not any way to select the precision of the numerical variables in a portable fashion. Modern Fortran standards (2003+) have introduced better support for codes portability. With the possibility to specify a kind parameter for variables, the standard Fortran 90+ makes available useful functions to select the kind precision in a portable parametric way. Using these functions the programmer can accurately control the precision of its own variables in a portable manner. PENF module provides an effective KISS library to achieve portability and concurrently it provides many tools to handles parametrized numbers. Go to Top Main features The library provides portable kind-parameters and many useful procedures to deal with them: integer and reals parameters for 1,2,4,8,16 bytes-like representations; integer and real formats definitions for all parameters; integer and real minimum maximum representable numbers; number-to-string and string-to-number casting procedures; endianism procedures checking. Any feature request is welcome. Go to Top Copyrights PENF is an open source project, it is distributed under a multi-licensing system: for FOSS projects: GPL v3; for closed source/commercial projects: BSD 2-Clause; BSD 3-Clause; MIT. Anyone is interest to use, to develop or to contribute to PENF is welcome, feel free to select the license that best matches your soul! More details can be found on wiki. Go to Top Documentation Besides this README file the PENF documentation is contained into its own wiki. Detailed documentation of the API is contained into the GitHub Pages that can also be created locally by means of ford tool. A Taste of PENF To be written. Go to Top Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/szaghi/IR_Precision"	"Pure Fortran (2003+) library for ensuring codes portability."	"true"
"Command-Line parsing"	"FLAP"	"https://github.com/szaghi/FLAP"	"Fortran command Line Arguments Parser for poor men. A KISS library for building easily nice Command Line Interfaces (CLI) for modern (2003+) Fortran projects."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"20"	"6"	"10"	"GitHub - szaghi/FLAP: Fortran command Line Arguments Parser for poor people Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 20 Fork 10 szaghi/FLAP Code Issues 11 Pull requests 0 Wiki Pulse Graphs Fortran command Line Arguments Parser for poor people 168 commits 2 branches 29 releases 2 contributors FORTRAN 98.2% Makefile 1.5% Shell 0.3% FORTRAN Makefile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.1.0 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.6.5 v0.6.4 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.0 v0.0.7 v0.0.6 v0.0.5 v0.0.4 v0.0.3 v0.0.2 v0.0.1 Nothing to show New pull request Latest commit 689b750 Jun 8, 2016 szaghi update travis config Permalink Failed to load latest commit information. doc issue with API doc... ask to Chris! Mar 23, 2016 src Rely on link instead of FoBiS recursion Jun 8, 2016 .gitignore refactor library names Mar 22, 2016 .gitmodules update IR_Precision to the new PENF Mar 25, 2016 .travis.yml update travis config Jun 8, 2016 CONTRIBUTING.md Commit before merge pull#35 Jun 26, 2015 LICENSE.bsd-2.md update licenses May 25, 2016 LICENSE.bsd-3.md update licenses May 25, 2016 LICENSE.gpl3.md Start to FLAP Apr 8, 2014 LICENSE.mit.md update licenses May 25, 2016 README.md purge google analytics Dec 22, 2015 codecov.yml Rely on link instead of FoBiS recursion Jun 8, 2016 fobos Rely on link instead of FoBiS recursion Jun 8, 2016 makedoc.sh Modify makedoc.sh script in order to make it more safe Sep 11, 2015 makefile update new PENF version Mar 25, 2016 README.md FLAP FLAP, Fortran command Line Arguments Parser for poor people A KISS pure Fortran Library for building powerful, easy-to-use, elegant command line interfaces FLAP is a pure Fortran (KISS) library for building easily nice Command Line Interfaces (CLI) for modern Fortran projects; FLAP is Fortran 2003+ standard compliant; FLAP is OOP designed; FLAP is a Free, Open Source Project. Table of Contents What is FLAP? Main features Copyrights Documentation A Taste of FLAP Issues Compiler Support What is FLAP? Modern Fortran standards (2003+) have introduced support for Command Line Arguments (CLA), thus it is possible to construct nice and effective Command Line Interfaces (CLI). FLAP is a small library designed to simplify the (repetitive) construction of complicated CLI in pure Fortran (standard 2003+). FLAP has been inspired by the python module argparse trying to mimic it. Once you have defined the arguments that are required by means of a user-friendly method of the CLI, FLAP will parse the CLAs for you. It is worthy of note that FLAP, as argparse, also automatically generates help and usage messages and issues errors when users give the program invalid arguments. Go to Top Main features FLAP is inspired by the python great module argparse, thus many features are taken from it. Here the main features are listed. User-friendly methods for building flexible and effective Command Line Interfaces (CLI); comprehensive Command Line Arguments (CLA) support: support optional and non optional CLA; support boolean CLA; support positional CLA; support list of allowable values for defined CLA with automatic consistency check; support multiple valued (list of values, aka list-valued) CLA: compiletime sized list, e.g. nargs='3'; runtime sized list with at least 1 value, e.g. nargs='+'; runtime sized list with any size, even empty, e.g. nargs='*'; support mutually exclusive CLAs; self-consistency-check of CLA definition; support fake CLAs input from a string; support fake CLAs input from environment variables; comprehensive command (group of CLAs) support: support nested subcommands; support mutually exclusive commands; self-consistency-check of command definition; automatic generation of help and usage messages; consistency-check of whole CLI definition; errors trapping for invalid CLI usage; POSIX style compliant; automatic generation of MAN PAGE using your CLI definition!; replicate all the useful features of argparse; implement docopt features. implement click features. Any feature request is welcome. Go to Top Copyrights FLAP is an open source project, it is distributed under a multi-licensing system: for FOSS projects: GPL v3; for closed source/commercial projects: BSD 2-Clause; BSD 3-Clause; MIT. Anyone is interest to use, to develop or to contribute to FLAP is welcome, feel free to select the license that best matches your soul! More details can be found on wiki. Go to Top Documentation Besides this README file the FLAP documentation is contained into its own wiki. Detailed documentation of the API is contained into the GitHub Pages that can also be created locally by means of ford tool. A Taste of FLAP Running the provided test program, test_basic -h, a taste of FLAP is served: usage:  test_basic [value] --string value [--integer value] [--real value] [--boolean] [--boolean_val value] [--integer_list value#1 value#2 value#3] [--help] [--version]  Toy program for testing FLAP  Required switches:    --string value, -s value           String input  Optional switches:    value           1-th argument           default value 1.0           Positional real input    --integer value, -i value, value in: (1,3,5)           default value 1           Integer input with fixed range    --real value, -r value           default value 1.0           Real input    --boolean, -b           default value .false.           Boolean input    --boolean_val value, -bv value           default value .true.           Valued boolean input    --integer_list value#1 value#2 value#3, -il value#1 value#2 value#3           default value 1 8 32           Integer list input    --help, -h           Print this help message    --version, -v           Print version  Examples:    test_basic -s 'Hello FLAP'    test_basic -s 'Hello FLAP' -i -2 # printing error...    test_basic -s 'Hello FLAP' -i 3 -r 33.d0    test_basic -s 'Hello FLAP' --integer_list 10 -3 87    test_basic 33.0 -s 'Hello FLAP' -i 5    test_basic --string 'Hello FLAP' --boolean Not so bad for just a very few statements as the following: ! initializing Command Line Interface call cli%init(progname    = 'test_basic',                                           &               version     = 'v2.1.5',                                               &               authors     = 'Stefano Zaghi',                                        &               license     = 'MIT',                                                  &               description = 'Toy program for testing FLAP',                         &               examples    = [""test_basic -s 'Hello FLAP'                          "",&                              ""test_basic -s 'Hello FLAP' -i -2 # printing error..."",&                              ""test_basic -s 'Hello FLAP' -i 3 -r 33.d0            "",&                              ""test_basic -s 'Hello FLAP' --integer_list 10 -3 87  "",&                              ""test_basic 33.0 -s 'Hello FLAP' -i 5                "",&                              ""test_basic --string 'Hello FLAP' --boolean          ""]) ! setting Command Line Argumenst call cli%add(switch='--string',switch_ab='-s',help='String input',required=.true.,act='store',error=error) call cli%add(switch='--integer',switch_ab='-i',help='Integer input with fixed range',required=.false.,act='store',&              def='1',choices='1,3,5',error=error) call cli%add(switch='--real',switch_ab='-r',help='Real input',required=.false.,act='store',def='1.0',error=error) call cli%add(switch='--boolean',switch_ab='-b',help='Boolean input',required=.false.,act='store_true',def='.false.',&              error=error) call cli%add(switch='--boolean_val',switch_ab='-bv',help='Valued boolean input',required=.false., act='store',&              def='.true.',error=error) call cli%add(switch='--integer_list',switch_ab='-il',help='Integer list input',required=.false.,act='store',&              nargs='3',def='1 8 32',error=error) call cli%add(positional=.true.,position=1,help='Positional real input',required=.false.,def='1.0',error=error) ! parsing Command Line Interface call cli%parse(error=error) For more details, see the provided example. For a practical example of FLAP usage see POG source file at line 85. Nested (sub)commands FLAP fully supports nested (sub)commands or groups of command line arguments. For example a fake git toy remake can be coded as ! initializing Command Line Interface call cli%init(progname    = 'test_nested',                                      &               version     = 'v2.1.5',                                           &               authors     = 'Stefano Zaghi',                                    &               license     = 'MIT',                                              &               description = 'Toy program for testing FLAP with nested commands',&               examples    = ['test_nested                      ',&                              'test_nested -h                   ',&                              'test_nested init                 ',&                              'test_nested commit -m ""fix bug-1""',&                              'test_nested tag -a ""v2.1.5""      ']) ! set a Command Line Argument without a group to trigger authors names printing call cli%add(switch='--authors',switch_ab='-a',help='Print authors names',required=.false.,act='store_true',def='.false.') ! set Command Line Arguments Groups, i.e. commands call cli%add_group(group='init',description='fake init versioning') call cli%add_group(group='commit',description='fake commit changes to current branch') call cli%add_group(group='tag',description='fake tag current commit') ! set Command Line Arguments of commit command call cli%add(group='commit',switch='--message',switch_ab='-m',help='Commit message',required=.false.,act='store',def='') ! set Command Line Arguments of commit command call cli%add(group='tag',switch='--annotate',switch_ab='-a',help='Tag annotation',required=.false.,act='store',def='') ! parsing Command Line Interface call cli%parse(error=error) if (error/=0) then   print '(A)', 'Error code: '//trim(str(n=error))   stop endif ! using Command Line Interface data to trigger program behaviour call cli%get(switch='-a',val=authors_print,error=error) ; if (error/=0) stop if (authors_print) then   print '(A)','Authors: '//cli%authors elseif (cli%run_command('init')) then   print '(A)','init (fake) versioning' elseif (cli%run_command('commit')) then   call cli%get(group='commit',switch='-m',val=message,error=error) ; if (error/=0) stop   print '(A)','commit changes to current branch with message ""'//trim(message)//'""' elseif (cli%run_command('tag')) then   call cli%get(group='tag',switch='-a',val=message,error=error) ; if (error/=0) stop   print '(A)','tag current branch with message ""'//trim(message)//'""' else   print '(A)','cowardly you are doing nothing... try at least ""-h"" option!' endif that when invoked without arguments prompts: cowardly you are doing nothing... try at least ""-h"" option! and invoked with -h option gives: usage: test_nested  [--authors] [--help] [--version] {init,commit,tag} ...  Toy program for testing FLAP with nested commands  Optional switches:    --authors, -a           default value .false.           Print authors names    --help, -h           Print this help message    --version, -v           Print version  Commands:   init           fake init versioning   commit           fake commit changes to current branch   tag           fake tag current commit  For more detailed commands help try:   test_nested init -h,--help   test_nested commit -h,--help   test_nested tag -h,--help  Examples:    test_nested    test_nested -h    test_nested init    test_nested commit -m ""fix bug-1""    test_nested tag -a ""v2.1.5"" For more details, see the provided example. Go to Top Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/szaghi/FLAP"	"Fortran command Line Arguments Parser for poor men. A KISS library for building easily nice Command Line Interfaces (CLI) for modern (2003+) Fortran projects."	"true"
"Command-Line parsing"	"options.f90"	"https://github.com/cngilbreth/optionsf90"	"Options & input processing for modern Fortran."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"2"	"1"	"GitHub - cngilbreth/optionsf90: Options & input processing for modern Fortran Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 3 Fork 1 cngilbreth/optionsf90 Code Issues 1 Pull requests 0 Pulse Graphs Options & input processing for modern Fortran 24 commits 1 branch 0 releases Fetching contributors FORTRAN 82.5% Shell 17.2% Makefile 0.3% FORTRAN Shell Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src test .gitignore README.md README.md Options and input processing for Fortran options.f90 is a Fortran module for defining and parsing command-line options and input parameters for Fortran programs. Its design is inspired by Python's optparse module. Some features: Allows definition of options/parameters (real, integer, logical, string, and flags) corresponding to natural Fortran types, with names and descriptions Automates reading option values from the command line and input parameters from file Supports long options (e.g. --myopt) and short options (-m), as well as combining several short options (e.g. -v -c is the same as -vc) Performs rigorous input validation & other error checking Supports default values for all option types, and lower & upper bounds on numerical options Can print nice descriptions of available options, with line wrapping as necessary Designed to be easily extended with new option types Well-tested and carefully coded (much of the code has been formally verified) Easy to use For more info, see http://infty.net/options/options.html To Do Some goals for future versions of this library: Include support for commands, rather than just options, on the command line. Create a mechanism for automatically generating a help message, given a short description of the program. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cngilbreth/optionsf90"	"Options & input processing for modern Fortran."	"true"
"Compiling and building"	"FoBiS"	"https://github.com/szaghi/FoBiS"	"Fortran Building System for poor men. A KISS tool for automatic building modern Fortran projects."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"33"	"10"	"9"	"GitHub - szaghi/FoBiS: FoBiS.py, Fortran projects Building System for poor people Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 33 Fork 9 szaghi/FoBiS Code Issues 3 Pull requests 0 Wiki Pulse Graphs FoBiS.py, Fortran projects Building System for poor people 234 commits 1 branch 54 releases Fetching contributors Python 94.8% FORTRAN 3.1% Makefile 1.9% C++ 0.2% Python FORTRAN Makefile C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2.0.2 v2.0.1 v2.0.0 v1.9.6 v1.9.5 v1.9.4 v1.9.3 v1.9.2 v1.9.1 v1.9.0 v1.8.4 v1.8.3 v1.8.2 v1.7.5 v1.7.4 v1.7.3 v1.7.2 v1.7.1 v1.7.0 v1.6.9 v1.6.8 v1.6.6 v1.6.5 v1.6.4 v1.6.3 v1.6.2 v1.6.1 v1.6.0 v1.5.9 v1.5.8 v1.5.7 v1.5.6 v1.5.5 v1.5.4 v1.5.3 v1.5.2 v1.5.1 v1.5.0 v1.4.3 v1.4.2 v1.4.1 v1.4.0 v1.3.2 v1.3.1 v1.3.0 v1.2.9 v1.2.8 v1.2.7 v1.2.6 v1.2.5 v1.2.4 v1.1.4 v1.1.3 v1.0.3 Nothing to show New pull request Latest commit a6decdb Jun 16, 2016 szaghi update release branch2 Permalink Failed to load latest commit information. examples add some skeletons for screencast tutorials Oct 23, 2015 release/FoBiS-master update release branch2 Jun 16, 2016 src fix travis issue Jun 16, 2016 .checkignore add checkignore for quantifiedcode analysis Nov 13, 2015 .landscape.yaml Testing landscape Feb 27, 2015 .pylintrc Fix bug in build.py on Travis CI issue Mar 10, 2016 .travis.yml fix travis issue Jun 16, 2016 CONTRIBUTING.md Documentation improvements Jul 22, 2014 LICENSE.gpl3.md Documentation improvements Jul 22, 2014 MANIFEST.in Code completely refactored Feb 5, 2015 README.md update readme Jun 16, 2016 build.py Fix bug in build.py on Travis CI issue Mar 10, 2016 fobos reintroduced verbose and meaningful options names into fobos and some… Apr 11, 2014 README.md FoBiS.py FoBiS.py, Fortran Building System for poor people A KISS tool for automatic building modern Fortran projects. Status Issues Python support Why? GNU Make, CMake, SCons & Co. are fantastic tools, even too much for poor-fortran-people. However, the support for modern Fortran project is still poor: in particular, it is quite difficult (and boring) to track the inter-module-dependency hierarchy of project using many module files. Modern Fortran programs can take great advantage of using modules (e.g. encapsulation), however their compilations can quickly become a nightmare as the number of modules grows. As a consequence, an automatic build system able to track (on the fly) any changes on the inter-module-dependency hierarchy can save the life of poor-fortran-people. Why not use an auto-make-like tool? There are a lot of alternatives for deal with inter-module-dependency hierarchy, but they can be viewed as a pre-processor for the actual building system (such as auto-make tools or even the Fortran compiler itself that, in most cases, can generate a dependency list of a processed file), thus they introduce another level of complexity... but poor-fortran-people always love the KISS (Keep It Simple, Stupid) things! FoBiS.py is designed to do just one thing: build a modern Fortran program without boring you to specify a particular compilation hierarchy. OK, what can FoBiS.py do? We are poor-fortran-people, we do not understand you... Let us consider the following project tree └── src     ├── cumbersome.f90     └── nested-1         ├── first_dep.f90         └── nested-2             └── second_dep.inc The main program contained into cumbersome.f90 depends on first_dep.f90 via the use statement use NesteD_1, thus it actually depends on the module nested_1. This module depends on second_dep.inc via the include statement include 'second_dep.inc'. Note that the dependency files are stored in a cumbersome nested tree. Write a makefile for this very simple example could waste many minutes... when the modules number increases the time wasted blows up! It would be very nice to have a tool that automatically track the actual dependency-hierarchy and build the project on the fly, without the necessity to track the dependency-hierarchy changes. FoBiS.py just makes this... and few more things! Suppose your goal is to build some (all) of the main programs contained into the project tree. In this case FoBiS.py can save your life: just type FoBiS.py build in the root of your project and FoBis.py will build all the main programs nested into the current root directory. Obviously, FoBiS.py will not (re-)compile unnecessary objects if they are up-to-date (like the ""magic"" of a makefile). FoBiS.py has many (ok... some) others interesting features: if I have convinced you, please read the following. Go to Top Main features ⚡ Automatic parsing of files for dependency-hierarchy creation in case of use and include statements; ⚡ automatic building of all programs found into the root directory parsed or only a specific selected target; avoid unnecessary re-compilation (algorithm based on file-timestamp value); simple command line interface (CLI); friendly support for external libraries linking: direct linking with full libraries paths; relative linking via extending linker search paths; support for widely used compilers: GNU Fortran Compiler; Intel Fortran Compiler; g95 Fortran Compiler; IBM XL Fortran Compiler; NAG Fortran Compiler; PGI Fortran Compiler; custom compiler support; ⚡ configuration-files-free; ... but also configuration-file driven building for complex buildings; ⚡ parallel compiling enabled by means of concurrent multiprocessing jobs; ⚡ support submodules; advanced automatic (re-)building algorithms: ⚡ automatic (re-)building when compiling flags change with respect the previous building; ⚡ automatic (re-)building when linked library change; ⚡ automatic building of projects upon which the actual project depends; ⚡ advanced automatic micro-atomic introspective unittest support by means of doctests; ⚡ generation of GNU Make makefile with rules fully supporting dependency-hierarchy for make-irreducible users; easy-extensible; well integrate with a flexible pythonic pre-processor, PreForM.py. Go to Top Documentation FoBiS.py documentations are hosted on GitHub. The wiki and the README are the main documentation resources. Other sources of documentation are the examples. Here is a non-comprehensive list of the main topics Install Usage Manual Install Getting Started PyPi Install A Taste of FoBiS.py Uncommon usage fobos: the FoBiS.py makefile FoBiS.py in action Go to Top Copyrights FoBiS.py is an open source project, it is distributed under the GPL v3 license. A copy of the license should be distributed within FoBiS.py. Anyone interested to use, develop or to contribute to FoBiS.py is welcome. Take a look at the contributing guidelines for starting to contribute to the project. Go to Top A screencast of a very cumbersome example Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/szaghi/FoBiS"	"Fortran Building System for poor men. A KISS tool for automatic building modern Fortran projects."	"true"
"Preprocessor"	"Blockit/PyF95++"	"http://blockit.sourceforge.net/"	"A fairly simple Python framework used to block parse your code (or any text file) into nested blocks. The BlockIt framework has already been used to create a templating capability for the Fortran 95/2003 language along with some language extensions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"BlockIt, a block parser and preprocessor written in Python. PyF95++ is a Fortran preprocessor developed with BlockIt. BlockIt and PyF95++ v1.7.1 What is BlockIt? BlockIt is a fairly simple Python framework used to block parse your code (or any text file) into nested blocks. That doesn't sound terribly exciting, but each type of block is user defined, inheriting many useful methods from the parent Block class. The methods allow you to do such things as create dependencies between blocks, modify blocks based on state parameters; dynamically modifying the final realization of the block. In a nutshell, it allows you to create a fairly sophisticated pre-processor, more powerful than straight-up macros (we have the power of Python at our disposal here). The framework at its base defines a line scanner, a block parser and a symbol table used to globally store the blocks. How has it been used? PyF95++: Fortran templating and pre-processing The BlockIt framework has already been used to create a templating capability for the Fortran 95/2003 language along with some language extensions. This is called PyF95++ and operates as a preprocessing tool. From this, it was straightforward to create a template library for the language, similar to the C++ STL. All of the containers in the library are reference counted as well. This extension is part of the BlockIt project so that a developer can quickly see how the framework was used to accomplish this extension. The library includes: AList An array-based linked list Buffer The buffer is used to store multi-dimensional vectors of a specified type. These can be changed to different shapes and are reference counted. DLList A doubly linked list Exception A set of exception types to be used similarly to C++ exceptions HashTable -- Pair -- Queue -- Stack -- String A collection of functions for manipulating strings VarPtrs MultiVec Also included with the library are some addons: Plot3DFile OptionParser An option parsing utility similar to the Python optparse package Functions A set of functions used in conjunction with the STL. Includes zip, enumerate, string manipulations, etc. UnitTest A simple-to-use Fortran unit testing framework built upon the templating. This Fortran unit-test framework is used to test all of the STL components of the PyF95++ project. It has support for testing of parallel components through the passing of appropriate MPI threads into all the tests of a given module. All of the templated types that have been introduced are reference counted, similar to Python, and provide consistent interfaces to manipulate data. Please visit the wiki at http://sourceforge.net/apps/mediawiki/blockit for more information. Current Requirements 1.5.3 and higher Currently we have been testing with Python 2.6.5 and GFortran 4.6 IS required. 1.5.0 and higher Currently we have been testing with Python 2.6.5 and GFortran 4.6 but we think 4.4 or 4.5 will work. 1.4.4 and lower We think Python 2.5 and GFortran 4.3.2 (if you are using PyF95++) are sufficient. Where to get BlockIt and PyF95++ BlockIt is an open source Python package made available at sourceforge under GPL V2 license. Visit the BlockIt project here. and includes all of the blockit utility, PyF95++, a directory full of tests and examples, and unit-tests. We are also looking to continually add documentation regarding the programming patterns used. The project was introduced originally on comp.lang.fortran. The BlockIt project was also made available on Softpedia in the developer tools and mentioned on the Fortran Wiki. BlockIt Developer Practices Users can always be assured of reasonably well tested software. The unit tests provide coverage of many basic aspects of the framework, and the number of examples (even many not included with the distribution) are built regularly and checked for memory errors with Valgrind. The developers seek always to provide a high-quality product with high quality documentation (see the wiki) as features become available and fully tested. That said, no product is perfect. If you experience issues, please contact the developers for assistance. We love feedback! Blockit Links Site Map Download BlockIt BlockIt Add'l Files Wiki Changelog Doxygen Output Directory Tree Unit Tests Programming Tools Doxygen Graphviz Valgrind Page last updated on 3 Jul 2011"	"null"	"null"	"A fairly simple Python framework used to block parse your code (or any text file) into nested blocks. The BlockIt framework has already been used to create a templating capability for the Fortran 95/2003 language along with some language extensions."	"true"
"Preprocessor"	"PreForM"	"https://github.com/szaghi/PreForM"	"Preprocessor for Fortran poor Men."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9"	"5"	"2"	"GitHub - szaghi/PreForM: PreForM.py,  Preprocessor for Fortran poor Men Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 9 Fork 2 szaghi/PreForM Code Issues 1 Pull requests 1 Pulse Graphs PreForM.py, Preprocessor for Fortran poor Men 27 commits 1 branch 7 releases Fetching contributors Python 100.0% Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.1.1 v1.1.0 v1.0.0 v0.0.4 v0.0.3 v0.0.2 v0.0.1 Nothing to show New pull request Latest commit ca1a8ea Jun 17, 2016 szaghi Fix PFM for loop counter +1 value … Fix PFM for loop counter issue: do not add +1 to loop counter... Permalink Failed to load latest commit information. PreForM examples Fix PFM for loop counter +1 value Jun 17, 2016 .travis.yml Test Travis CI Aug 1, 2014 CONTRIBUTING.md First shot Jul 25, 2014 LICENSE.gpl3.md First shot Jul 25, 2014 PreForM.py Try to create a valid Python Package Aug 4, 2014 README.md Changelog update Oct 17, 2014 setup.cfg Fix PyPI Egg Oct 17, 2014 setup.py Fix PFM for loop counter +1 value Jun 17, 2016 README.md PreForM.py PreForM.py, Preprocessor for Fortran poor Men A very simple and stupid preprocessor for modern Fortran projects. PreForM.py supports the most used cpp pre-processing directives and provides advanced features typical of templating systems. Even if PreForM.py is currently Fortran-agnostic (it being usable within any programming languages) it is focused on Fortran programming language. Table of Contents Team Members Contributors Why? Why not use cpp? Main features Todos Requirements Install Manual Installation PyPI Installation, the Python Package Index Getting Help Copyrights Usage Pre-process a file on-the-fly to stdout Pre-process a file and save result to a file Defines MACROS from CLI Examples Tips for non pythonic users Version History Team Members Stefano Zaghi, aka szaghi https://github.com/szaghi Contributors Tomas Bylund, aka Tobychev https://github.com/Tobychev Go to Top or Toc Why? The Fortran programming language has not its own pre-processor neither it has a standard pre-processing syntax. Consequently, Fortran developers must rely on external pre-processor tools. However, the pre-processors focused on Fortran language are very fews: PreForM.py is just anther Pythonic pre-processor designed with only main target, the Fortran poor-men. It is designed to be very simple, but flexible enough to constitute a template system for Fortran developers. Moreover, to facilitate the migration from other pre-processors, PreForM.py supports the most used cpp pre-processing directives. It is worth noting that PreForM.py even if it is designed for Fortran poor-men is presently Fortran-agnostic, as a consequence it can be used within any programming language. Why not use cpp? As a matter of fact, many Fortran developers use cpp, the C pre-processor, being one of the most diffused and standardised pre-processor. cpp is a great pre-processor, but it is basically a macro processor, meaning that it is quite focused on macro expansion/substitution/evaluation. cpp has some limitations that makes complex using it as a template system. Let us suppose we want to write a generic interface as the following: ... interface foo   module procedure foo1   module procedure foo2   module procedure foo3 endinterface contains   function foo1(in) result(out)   type(first), intent(IN):: in   logical:: out   out = in%logical_test()   endfunction foo1    function foo2(in) result(out)   type(second), intent(IN):: in   logical:: out   out = in%logical_test()   endfunction foo2    function foo3(in) result(out)   type(third), intent(IN):: in   logical:: out   out = in%logical_test()   endfunction foo3 ... Writing a macro in cpp syntax to generalize such a generic interface implementation is quite impossible. On the contrary, using PreForM.py as a template system the implementation becomes very simple and elegant: ... interface foo   #PFM for i in [1,2,3]:   module procedure foo$i   #PFM endfor endinterface contains   #PFM for i in [1,2,3] and t in [first,second,third]:   function foo$i(in) result(out)   type($t), intent(IN):: in   logical:: out   out = in%logical_test()   endfunction foo$i   #PFM endfor PreForM.py is just a pre-processor for Fortran poor-men supporting the most used cpp directives, but overtaking some of the cpp limitations in order to make PreForM.py similar to a template system. Go to Top or Toc Main features Easy-extensible: PreForM.py is just a less-than 500 lines of Python statements... no bad for a poor-cpp-preprocessor improvement; well integrated with a powerful yet simple automatic Building System for Fortran poor-men, namely FoBiS.py; simple command line interface; support the most used cpp pre-processing directives: conditionals: operators (also nested): defined MACRO or defined(MACRO); EXPRESSION || EXPRESSION (logic or); EXPRESSION && EXPRESSION (logic and); #if EXPRESSION; #elif EXPRESSION; #ifdef MACRO; #ifndef MACRO; #else; #endif; macros: standard predefined macros: __FILE__; __LINE__; __DATE__; __TIME__; expansion; stringification; concatenation; variadic macros; object-like macros: #define MACRO [VALUE], VALUE is optional; function-like macros: #define FUNCTION FUNCTION_DEFINITION; #undef; #include; pythonic Template System: #PFM for EXPRESSION-#PFM endfor pairs loop control (only for one iteration counter at time; ... Note that in general the cpp pre-processing directives should start at the first column, the symbol # being the first one. PreForM.py relaxes this rule allowing any number of leading white spaces before #. Go to Top or Toc Todos Pythonic Template System; #PFM for EXPRESSION-#PFM endfor pairs loop control for complex EXPRESSION; any feature request is welcome. Go to Top or Toc Requirements Python 2.7+ or Python 3.x; required modules: sys; os; argparse; configparser; re; optional modules: datetime; multiprocessing; a lot of patience with the author. PreForM.py is developed on a GNU/Linux architecture. For Windows architecture there is no support, however it should work out-of-the-box. Go to Top or Toc Install Manual Installation PreForM.py is a one-file-script, consequently it does not need a real installation: simply download the script and placed into your PATH. See the requirements section. However, note that the script placed into the root of PreForM.py project is just a wrapper to the real script. As a matter of fact, the tree structure of the PreForM.py project is the following: ├── CONTRIBUTING.md ├── examples │   ├── cpp-directives │   │   ├── cpp-directives.F90 │   │   ├── foo.inc │   │   └── README.md │   └── template-system │       ├── README.md │       └── simple-for-loop.f90 ├── LICENSE.gpl3.md ├── PreForM │   ├── __init__.py │   ├── __main__.py │   └── PreForM.py ├── PreForM.py ├── README.md └── setup.py Therefore, the actual script that you need to download is PreForM/PreForM.py. This cumbersome files tree is necessary to create a valid PyPI egg, see PyPI install procedure. It can be convenient to clone the project: git clone https://github.com/szaghi/PreForM and then make a link to the script where your environment can find it. Using, PyPI the Python Package Index PreForM.py can be installed by means of pip, the python installer that search into the PyPI (Python Package Index) for packages and automatically install them. Just type: pip install PreForM.py Note that you need root permissions if you are not using your virtualenv or you are trying to install PreForM.py into your system space. It is worth noting that the pip installation will create a command line tool named PreForM and not PreForM.py: take this into account when using PreForM.py. It is also worth noting that the pip installation will allow you to directly import PreForM.py code into your Python application by means of module import, e.g. from PreForM.PreForM import preprocess_file will import the preprocess_file function into your python application. Go to Top or Toc Getting Help] You are reading the main documentation of PreForM.py that should be comprehensive. For more help contact directly the author. Go to Top or Toc Copyrights PreForM.py is an open source project, it is distributed under the GPL v3 license. A copy of the license should be distributed within PreForM.py. Anyone interested to use, develop or to contribute to PreForM.py is welcome. Take a look at the contributing guidelines for starting to contribute to the project. Go to Top or Toc Usage Printing the main help message: PreForM.py -h This will echo: usage: PreForM.py [-h] [-v] [-o OUTPUT] [-D D [D ...]] [-lm] input  PreForM.py, Preprocessor for Fortran poor Men  positional arguments:   input                 Input file name of source to be preprocessed  optional arguments:   -h, --help            show this help message and exit   -v, --version         Show version   -o OUTPUT, --output OUTPUT                         Output file name of preprocessed source   -D D [D ...]          Define a list of macros in the form NAME1=VALUE1                         NAME2=VALUE2...   -lm, --list-macros    Print the list of macros state as the last parsed line                         left it Pre-process a file on-the-fly to stdout PreForM.py my_file_to_be_preprocessed.my_extension This will print to stdout the pre-processed file. Pre-process a file and save result to a file PreForM.py my_file_to_be_preprocessed.my_extension -o my_result_file This will save into my_result_file the pre-processed file. Defines MACROS from CLI It is possible to define macros on-the-fly using the CLI switch -D. As an example PreForM.py my_source.f90 -D first=1 second=sec third=.true. pre-process the source file my_source.f90 defining on-the-fly 3 macros, first,second,third, having the values 1,'sec',.true., respectively. The syntax is macro_name=macro_value. In case you want just define a macro name (without take into account for its value) you must always insert the symbol =, e.g. PreForM.py my_source.f90 -D first= second=2 This defines 2 macros, first,second, but second only has a true value (2), whereas first is only defined, but it has not a value. Go to Top or Toc Examples Into the directory examples there are some KISS examples, just read their provided REAMDE.md. Go to Top or Toc Tips for non pythonic users In the examples above PreForM.py is supposed to have the executable permissions, thus it is used without an explicit invocation of the Python interpreter. In general, if PreForM.py is not set to have executable permissions, it must be executed as: python PreForM.py ... Go to Top or Toc Version History In the following the changelog of most important releases is reported. v1.1.1 Download ZIP ball or TAR one Partial Code Lint. Fully backward compatible. v1.1.0 Download ZIP ball or TAR one Add PyPI installation procedure. Strongly modify the project tree. Fully backward compatible. v1.0.0 Download ZIP ball or TAR one First STABLE release. Implement #PFM for EXPRESSION-#PFM endfor pairs loop control for only simple expressions (i.e. expression having only one iteration counter). Fully backward compatible. v0.0.4 Download ZIP ball or TAR one CPP Support almost complete. The most used cpp pre-processing directives are now supported. Fully backward compatible. v0.0.3 Download ZIP ball or TAR one Implement function-like macros substitution. Fully backward compatible. v0.0.2 Download ZIP ball or TAR one Quasi stable API, with many cpp directives supported. Fully backward compatible. v0.0.1 Download ZIP ball or TAR one Very first, totally UNSTABLE release. Implement only few cpp directives. Go to Top or Toc Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/szaghi/PreForM"	"Preprocessor for Fortran poor Men."	"true"
"Computational Fluid Dynamics"	"OFF"	"https://github.com/szaghi/OFF/tree/testing"	"Open source Finite volume Fluid dynamics code."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"10"	"8"	"GitHub - szaghi/OFF at testing Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 15 Fork 8 szaghi/OFF Code Issues 2 Pull requests 2 Pulse Graphs OFF, Open source Finite volume Fluid dynamics code 60 commits 3 branches 3 releases Fetching contributors FORTRAN 98.7% Shell 1.3% FORTRAN Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: testing Switch branches/tags Branches Tags gh-pages master testing Nothing to show v0.0.7 v0.0.6 v0.0.5 Nothing to show New pull request Pull request Compare This branch is 15 commits ahead, 1 commit behind master. Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. doc examples src util .doxygenconfig CONTRIBUTING.md EXAMPLE.md LICENSE.gpl3.md README.md fobos makefile README.md OFF OFF, Open source Finite volumes Fluid dynamics code  OFF is a CFD code designed to be accurate, efficient and modular for solving, numerically, the Navier-Stokes equations of fluid dynamics by means of Finite Volume technique. It is written in standard (compliant) Fortran 2003 by means of OOP paradigm. OFF can be executed on parallel CPU-based architecture (shared memory multi-cores workstation, distributed memory cluster and hybrid distributed memory cluster based on shared memory nodes). Citing Please kindly cite OFF in your publications if it helps your research: @article{zaghi-2014,   author  = {S. Zaghi},   title   = {{OFF, Open source Finite volume Fluid dynamics code: A free, high-order solver based on parallel, modular, object-oriented Fortran API}},   journal = {Computer Physics Communications },   volume  = {},   number  = {0},   pages   = { - },   year    = {2014},   issn    = {0010-4655},   doi     = {http://dx.doi.org/10.1016/j.cpc.2014.04.005},   url     = {http://www.sciencedirect.com/science/article/pii/S0010465514001283}, }  Table of Contents Team Members Obtaining OFF Copyrights Main features API Mathematical and numerical models Documentation Team Members Stefano Zaghi stefano.zaghi@gmail.com Obtaining OFF OFF can be obtained only from github repository. You can use Download ZIP button provided from github or you can locally clone the github repository: git clone https://github.com/szaghi/OFF  Two branches are generally present: master branch that holds the stable version and testing one for developing purposes. In general, the git tags are used for referencing versions updates. Copyrights OFF is an open source project, it is distributed under the GPL v3. Anyone is interest to use, to develop or to contribute to OFF is welcome. Take a look at the contributing guidelines for starting to contribute to the project. Main features API Clean and lightweight programming style: explicit declaration imposed (pervasive implicit none usage); Fortran free form syntax; clear and comprehensive comments; easy to maintain and to extend: extensive use of OOP paradigm; high quality API documentation: doxygen-based high quality html pages; simple development environment: easy source files maintenance by means of Git, one of the best distributed versioning system; collaborative framework by means of GitHub repository. Mathematical and numerical models Finite Volume, Godunov-like scheme based on Euler conservation Laws written in fully conservative formulation: the extension to viscous Navier-Stokes equations is under developing; Underling Riemann Problem solver for convective fluxes: Approximate Riemann solver based on (local) Lax-Friedrichs (known also as Rusanov) algorithm; Approximate Riemann solver based on Primitive Variables Linearization algorithm; Approximate Riemann solver based on Two Rarefactions algorithm; Approximate Riemann solver based on Two Shocks algorithm; Approximate Riemann solver based on Adaptive (non iterative) PVL-TR-TS algorithm; Approximate Riemann solver based on Adaptive (non iterative) LF-TR algorithm; Approximate Riemann solver based on HLLC algorithm; Approximate Riemann solver based on Roe linearization. Exact Riemann solver based on iterative solution of u-function; Multi-Species fluids models: Partial Densities species conservation (Standard Thermodynamic Model); New multi-dimensional conservation models of Favini, B. et al (under developing); Multi-Phases fluids models: Fully-coupled Lagrangian particles transport model (under developing); Space numerical integration models: 1-st order piece-wise constant reconstruction; 2-nd order TVD linear-wise reconstruction; 3-rd,5-th,7-th orders WENO non-linear reconstruction; Time approximation models: 1-st order forward Euler integration; 2-nd,3-rd,4-th orders Strong-Stability-Preserving explicit Runge-Kutta integration; Local pseudo-time convergence acceleration for steady simulations; Multi-grid time convergence acceleration: Multi-grid model has been already developed, but it is affected by some not still recognized bugs. Testing and bugs fixing are in progress. Underling numerical grid models: 3D, general curvilinear, body-fitted, structured multi-blocks mesh; Adaptive Mesh Refinement, AMR model (under developing); Blocks overlapping, overset (Chimera) model (to be developed in future); Computational parallelism ability: Domain decomposition by means of Message Passing Interface (MPI) paradigm providing the ability to use distributed-memory cluster facilities; Fine, local parallelism by means of OpenMP paradigm providing the ability to use shared-memory cluster facilities; Fine, local parallelism by means of GPU programming (e.g. CUDA framework) providing the ability to use GPUs cluster facilities (to be developed in future). Documentation Detailed documentation can be found on the GitHub pages of the project. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/szaghi/OFF/tree/testing"	"Open source Finite volume Fluid dynamics code."	"true"
