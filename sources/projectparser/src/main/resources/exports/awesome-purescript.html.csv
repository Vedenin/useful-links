"category"	"name"	"url"	"description"	"star"	"stackOverflow"	"stackOverflowUrl"	"license"	"licenseUrl"	"site"	"userGuide"	"newStars"	"newWatchs"	"newForks"	"pageText"	"newStackOverflow"	"github"	"allText"	"isExist"
"Build Tooling"	"pulp"	"https://github.com/bodil/pulp"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"238"	"20"	"54"	"GitHub - bodil/pulp: A build tool for PureScript projects Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 238 Fork 54 bodil/pulp Code Issues 25 Pull requests 1 Pulse Graphs A build tool for PureScript projects 566 commits 3 branches 48 releases Fetching contributors PureScript 77.3% JavaScript 22.7% PureScript JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags faster-tests fix-ci master Nothing to show v9.0.1 v9.0.0 v8.2.1 v8.2.0 v8.2.0-rc.3 v8.2.0-rc.2 v8.2.0-rc.1 v8.1.1 v8.1.0 v8.0.0 v7.0.0 v6.2.1 v6.2.0 v6.1.0 v6.0.1 v6.0.0 v5.0.2 v5.0.1 v5.0.0 v4.5.0 v4.4.1 v4.4.0 v4.3.1 v4.3.0 v4.2.0 v4.1.0 v4.0.3 v4.0.2 v4.0.1 v4.0.0 v3.2.2 v3.2.1 v3.2.0 v3.1.1 v3.1.0 v3.0.0 v2.2.0 2.1.0 2.0.0 1.5.0 1.4.0 1.3.0 1.2.0 1.1.4 1.1.3 1.1.1 1.1.0 1.0.0 Nothing to show New pull request Latest commit 824c75a Jun 6, 2016 hdgarrood Update CHANGELOG for 9.0.1 Permalink Failed to load latest commit information. src Better error display on unsuccessful Pursuit submission Jun 6, 2016 test-js 0.9 compatibility, resolves #211 May 25, 2016 .gitignore 0.9 compatibility, resolves #211 May 25, 2016 .jshintrc Add jshint Nov 30, 2015 .travis.yml Use globally installed Bower. Dec 31, 2015 CHANGELOG.md Update CHANGELOG for 9.0.1 Jun 6, 2016 LICENSE.md Add README.md and LICENSE.md Dec 16, 2015 README.md Fix uninstall command for bower in docs Jun 5, 2016 appveyor.yml 0.9 compatibility, resolves #211 May 25, 2016 bower.json Update dependency on prelude May 16, 2016 index.js Use an executable script to launch Pulp. Dec 10, 2015 package.json 9.0.1 Jun 6, 2016 scripts.js Update psvm Jun 4, 2016 README.md Pulp A build tool for PureScript. Installation Getting Started with a Pulp Project What if I need something a bit more complicated? Pulp Commands Global, Command Specific and Pass-Through Options Pass-Through Options Building Projects Making a JavaScript Bundle Running Your PureScript Project Running Test Suites CommonJS Aware Builds Optimising Code Size Reimporting Browserified Bundles Building Documentation Launching a REPL Launching a Development Server A Quick Example I Need More Dependency Management Dependency Management Cheat Sheet Installing Dependencies Housekeeping Releasing Packages Licence Installation Assuming you already have Node set up (and we recommend you also set up NPM to keep your global packages in your home directory), all you need to do to get a working PureScript environment is: $ npm install -g purescript pulp bower This installs the PureScript compiler, the Pulp build tool, and the Bower package manager. Getting Started with a Pulp Project The short version: $ mkdir purescript-hello $ cd purescript-hello $ pulp init $ pulp run The structure of your project folder, after running pulp init, will look like this:   purescript-hello   - bower.json   - src/   - test/  pulp works by convention. It expects all projects to contain a bower.json file, which is needed for package management (which, in PureScript, is handled by Bower). pulp itself currently doesn't use this file for anything other than figuring out where the project root is. Your project source files go in the src folder. Your test files go in the test folder. Project dependencies will be installed under the Bower standard bower_components folder, and are expected to have the same basic src/test structure. That's all there is to a pulp project. We employ the purescript- prefix as a convention to identify PureScript projects when they're used as dependencies. You're welcome to call your project anything you like, but without the purescript- prefix it won't be picked up by pulp as a dependency when installed through Bower. What if I need something a bit more complicated? If you want to change any of these defaults, you can—pulp offers a number of command line flags to alter its behaviour—but try to avoid using them unless you have a good reason to. If you get fed up with having to remember long pulp invocations, try using npm as your build tool. pulp's numerous command line flags make it well suited for this. If that's still not enough, you might try using a more generic build tool, such as webpack with purs-loader, or gulp with gulp-purescript. Pulp Commands To get a quick overview of the things pulp can do, you can ask it to give you a list of its available commands: $ pulp --help This will print a list of pulp's global command line options, and a list of commands it will accept. To see the available options for a specific command, you can invoke the command with the --help flag, like this: $ pulp build --help This will give you an exhaustive list of ways you can modify the basic behaviour of the command. Global, Command Specific and Pass-Through Options Notice that there's a distinction between global command line options and command specific options. Global options must appear before the name of the command, and command specific options must appear after it. Thus, if you want to run the build command in watch mode (where it will run the command once, then wait and re-run the command whenever you change a source file) you need to put the --watch flag before the command itself, like so: $ pulp --watch build On the other hand, if you want to tell the build command to produce optimised code (performing dead code elimination), using the command specific option --optimise, the flag needs to come after the command name: $ pulp build --optimise Pass-Through Options Finally, pulp commands sometimes allows you to pass flags through to the psc compiler. Any unrecognised options appearing after any command specific options will be passed through to the compiler, or whichever process a pulp command spawns. For instance, if you want to tell psc to skip applying tail call optimisations, you would invoke pulp build like this: $ pulp build --no-tco The --no-tco flag isn't recognised by pulp, so it will simply append it to the psc command line for you when it launches the compiler. Take care, though, that such options should appear after pulp's own command specific options. Building Projects At heart, pulp is just a frontend for the PureScript compiler, psc. Its basic function is to compile your project, which you can do by running pulp build. This will simply run psc with all your source files, leaving the compiled JavaScript files in the output folder. These files will all be CommonJS modules, which you can require() using anything which supports CommonJS, such as node. However, you will usually want to do more with your project than just compile your PureScript code into a jumble of CommonJS modules. pulp provides a number of commands and options for the most common use cases. Making a JavaScript Bundle pulp build can also call psc-bundle for you, which is a compiler tool whose job it is to take the output from psc, remove the code which isn't actually being used by your program, and bundle it all up into a single compact JavaScript file. There are two command line options you can give pulp build to accomplish this, depending on where you want the resulting code. You can use the --optimise flag (or its shorthand alias, -O), which will send the bundled result to standard output, or you can use the --to (or -t) option, passing it a file name, and pulp will store the bundle in a file of that name. So, you can use either of these methods, which in this example will both have the same effect: $ pulp build --optimise > hello.js $ pulp build --to hello.js Note that using both options (pulp build --optimise --to hello.js) is superfluous. The presence of --to implies the presence of --optimise. Running Your PureScript Project If you're developing a Node project using PureScript, you can tell pulp to run it after compiling using the pulp run command. This command will first run pulp build for you, if necessary, then launch your compiled code using node. If you have used any pass-through command line options, these will be passed to the node process. So, to run the hello world project you get from pulp init, you would simply: $ pulp run If you want to pass command line arguments to your application, pulp lets you do that too: $ pulp run file1.txt file2.txt file3.txt Beware, though, that these are processed as pass-through options by pulp, so it will first consume any options it recognises as pulp run's command specific options; these will not be passed through to your application. If you want to run your application using something other than node, pulp lets you do that too, with the --runtime option. For instance, if you've written an application which runs on PhantomJS, you might launch it like this: $ pulp run --runtime phantomjs Running Test Suites pulp has a command pulp test, which works much like pulp run, except it will also compile the code you've placed in your test folder, and instead of running the main function in your Main module, it will use Test.Main. This module should be located in your test folder. pulp doesn't care what test framework you've chosen, as long as there's a main function in your Test.Main module to be run. If the process exits with a non-zero return code, that means your test suite failed, as far as pulp is concerned, and it will itself exit with an error. In short, to run your tests: $ pulp test To continuously run your tests when you change the source code: $ pulp --watch test Running Commands Before and After an Action It's sometimes useful to kick off a command before or after an action, particularly in combination with the --watch option above. To do this, you can use --before, or --then and --else for successful or failing actions respectively: $ pulp --watch --before clear build       # Clears the screen before builds. $ pulp --watch --then 'say Done' build    # On OS X, announces 'Done' after a successful build. $ pulp --watch --else 'say Failed' build  # Announces 'Failed' if a build failed.  # A more long-winded example combining the three: $ pulp --watch --before clear --then ""say $(basename `pwd`) succeeded."" --else 'say $(basename `pwd`) failed.' build CommonJS Aware Builds Often, you'll want to go outside PureScript and leverage some of the enormous body of JavaScript code available on NPM. This is such a common use case that pulp provides a command for it: pulp browserify. As the name suggests, this uses Browserify to bundle up your PureScript code with Node style CommonJS dependencies. For instance, the majority of web UI libraries for PureScript these days depend on either virtual-dom or React as a CommonJS dependency. Here is how you would add React to your project and build a JS bundle with React included (assuming your PureScript code requires it): $ npm install react $ pulp browserify --to hello.js Essentially, pulp browserify --to works exactly like pulp build --to, except it also resolves CommonJS dependencies and includes them in the bundle. The resulting JS file can now be loaded directly into the browser, and everything you need to run your application should be included. If you omit the --to option, the bundle is piped to standard output. This would thus have the same effect as the example above: $ pulp browserify > hello.js Optimising Code Size pulp browserify will pull code in at the module level by default, so every file required from your entry point will appear in the bundle. The PureScript compiler, as we know, is able to perform dead code elimination on your compiled PureScript code, and we can leverage this in pulp browserify using the --optimise flag. $ pulp browserify --optimise --to hello.js Note that, unlike pulp build, --to doesn't automatically imply --optimise. In fact, if you omit --optimise, pulp browserify will not only omit the dead code elimination step, it will also run Browserify as an incremental build, which means it will run considerably faster. You should use --optimise only when you're building production code—when you're developing, you'll probably prefer the much faster compile times provided by Browserify's incremental mode. Reimporting Browserified Bundles While browserified bundles are intended to be consumed directly by browsers, you may sometimes prefer to access the bundle from some external code. While it's generally preferable to consume CommonJS modules directly, there are use cases where you might want to provide a single JS file ready to be required by a consumer without needing to deal with installing and resolving dependencies. Browserify provides the --standalone mechanism for that, and pulp browserify supports it: $ pulp browserify --standalone myBundle --to myBundle.js This makes a bundle which comes wrapped in a UMD header (meaning it supports both CommonJS and AMD, and will install itself in the global namespace under the name you provided if neither is present), and the exports it provides will be the same as those you export in your Main module. So, given the example above produces a bundle where a PureScript function Main.main exists, you can access it from JavaScript via CommonJS like this: var myBundle = require(""./myBundle""); myBundle.main(); Building Documentation PureScript has an inline syntax for documentation, which can be extracted into Markdown files using the psc-docs command. pulp provides the pulp docs command to make this process easy: $ pulp docs This extracts the documentation from your source files, and places it in the docs folder under your project's root folder. You can also extract documentation from your tests, if you like: $ pulp docs --with-tests Launching a REPL The psci interactive shell for PureScript is fantastically useful, but setting it up can be a bit of a chore, especially with a large number of dependencies. That's where pulp psci comes in. pulp psci will generate a .psci file for your project automatically whenever you invoke it, and launch psci for you directly. It's as simple as: $ pulp psci Launching a Development Server While technically out of scope for a build tool like pulp, a common need when developing client side web apps is a tightly integrated development web server, which takes care of compilation for you on the fly. This is what the purs-loader project is for: it provides a PureScript loader for Webpack, which works with Webpack's development server and makes recompilation seamless: whenever you make a change to your source files, you just switch to your browser and hit the refresh button, and the server will compile and deliver your assets on the fly. No need to wait for the PureScript compiler to finish before switching to the browser. pulp provides the pulp server command to quickly set up a Webpack development server for your project. It only provides the most basic functionality: it will serve static assets from your project root, and it will serve your compiled JS bundle from /app.js. A Quick Example To see how this works, let's set up a project for serving the default hello world app through pulp server. $ mkdir hello-server $ cd hello-server $ pulp init We need an index.html file to load our compiled PureScript code. Place this in your new hello-server folder: <!doctype html> <html>   <body>     <h1>Hello sailor!</h1>     <script src=""/app.js""></script>   </body> </html> Now, start the server: $ pulp server It will tell you that it's launched a web server at http://localhost:1337/, and after a little while it will tell you that it's finished compiling (bundle is now VALID). If you browse to http://localhost:1337/, you should, in addition to the ""Hello sailor!"" header on the webpage, see that your PureScript code has printed the text ""Hello sailor!"" to the console. I Need More As mentioned, this is a very bare bones development server. You're likely to quickly need more features if you plan on doing any kind of serious web development. At this point, you'll need to set up your own Webpack configuration using purs-loader. Due to the way Webpack works, it's not really useful to extend pulp server with further configuration options. It's intended as a starting point only. Dependency Management pulp is not a package manager, only a build tool. The PureScript community has standardised on Bower as its package manager. Bower expects the presence of a bower.json file in your project root, in which it records your project’s dependencies and other metadata. pulp init will have installed a basic bower.json file for you along with the project skeleton, but you should read the Bower documentation on the file format and make sure you’ve configured it to your satisfaction before you publish your package. In particular, mind that you’ve added a license field. Dependency Management Cheat Sheet This document isn't going to explain how Bower works, or go into details about PureScript dependency management. However, a tl;dr is often enough to get you started and productive without having to dive into yet another package management system. It's going to be especially easy if you're already used to npm. So, here we go. Installing Dependencies To install the purescript-profunctor package into your project: $ bower install purescript-profunctor To also record this as a dependency in the bower.json file: $ bower install --save purescript-profunctor To install every dependency which has been recorded in bower.json as needed by your project: $ bower install Housekeeping To remove an installed package: $ bower uninstall purescript-profunctor To remove it from bower.json as well: $ bower uninstall --save purescript-profunctor To list all packages installed in your project: $ bower ls To update all installed packages to the most recent version allowed by bower.json: $ bower update Releasing Packages Bower packages are installed directly from Git repositories, and versioning follows Git tags. Imagine you've created a new PureScript library for working with zygohistomorphic prepromorphisms (because who doesn't need zygohistomorphic prepromorphisms); this is how you would register your new package in the Bower registry (we'll call the package purescript-zygo to save typing): $ bower register purescript-zygo git://github.com/me/purescript-zygo.git Note the convention of prefixing PureScript package names with purescript-. Please stick with that unless you have an especially good reason not to, as pulp and many other tools expect installed dependencies to follow this convention. Once you're registered, all you need to do to make a new release version is to make a Git tag. Bower provides a command for doing this easily: $ bower version patch This will take your current version (as determined by the most recent tag in your repository), increment the patch number by one, and make a tagged Git commit for you recording the new version. All you need to do to publish the new release is: $ git push && git push --tags The patch argument to bower version can be substituted with minor or major, depending on what sort of release you want to make. Licence Copyright 2014 Bodil Stokke This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. See the LICENSE file for further details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bodil/pulp"	""	"true"
"Build Tooling"	"purescript-psa"	"https://github.com/natefaubion/purescript-psa"	"A pretty, flexible error/warning reporting frontend for"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"25"	"6"	"2"	"GitHub - natefaubion/purescript-psa: Error/Warning reporting frontend for the PureScript compiler Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 25 Fork 2 natefaubion/purescript-psa Code Issues 4 Pull requests 1 Pulse Graphs Error/Warning reporting frontend for the PureScript compiler 51 commits 1 branch 14 releases Fetching contributors PureScript 99.3% JavaScript 0.7% PureScript JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.3.9 v0.3.8 v0.3.7 v0.3.6 v0.3.5 v0.3.4 v0.3.3 v0.3.2 v0.3.0 v0.2.1 v0.2.0 v0.1.3 v0.1.2 v0.1.1 Nothing to show New pull request Latest commit 88bbf16 Jun 4, 2016 natefaubion Version bump (v0.3.9) Permalink Failed to load latest commit information. bin Filter when using --json-errors. Clean up warnings Apr 18, 2016 src Tweak parsing of replaceRange Jun 4, 2016 test Filter when using --json-errors. Clean up warnings Apr 19, 2016 .gitignore Add stash option Jan 10, 2016 .npmignore Initial commit Jan 8, 2016 CHANGELOG.md Version bump (v0.3.9) Jun 4, 2016 LICENSE Initial commit Jan 8, 2016 README.md Mention pulp in README Feb 20, 2016 bower.json Version bump (v0.3.9) Jun 4, 2016 index.js Initial commit Jan 8, 2016 package.json Version bump (v0.3.9) Jun 4, 2016 README.md psa A pretty, flexible error/warning reporting frontend for the PureScript compiler (psc). Colors! Original source spans in errors Fine-grained warning filtering Warning persistence Install npm install -g purescript-psa  Sample Usage Censor all warnings: psa --censor-warnings <psc-options>  Censor library warnings: psa --censor-lib <psc-options>  Censor source warnings: psa --censor-src <psc-options>  Censor specific warning codes: psa --censor-codes=ShadowedName,ImplicitImport,MissingTypeDeclaration <psc-options>  Only show specific warning codes: psa --filter-codes=DeprecatedOperatorDecl,DeprecatedClassExport <psc-options>  Turn source warnings into errors: psa --strict <psc-options>  Note: It's assumed psc is in your path. If you'd like to use a custom binary location you can set the --psc=/foo/bar/psc flag. Persisting Warnings psc does not persist warnings between compilations, but psa can do it with the --stash flag. This serializes the set of warnings to disk and merges it with the new set on each compilation. psa --stash <psc-options>  If you are compiling multiple projects from the same root, you can specify which stash file should be used: psa --stash=.foo-stash <psc-options>  Usage with pulp Pulp supports building with psa: it will be used by default if it is installed, and options will be passed through, eg: pulp build --stash --censor-lib <psc-options>  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/natefaubion/purescript-psa"	"A pretty, flexible error/warning reporting frontend for"	"true"
"Build Tooling"	"grunt-purescript"	"https://github.com/purescript-contrib/grunt-purescript"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"11"	"2"	"5"	"GitHub - purescript-contrib/grunt-purescript: Grunt plugin for compiling PureScript files (deprecated) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 11 Fork 5 purescript-contrib/grunt-purescript Code Issues 3 Pull requests 0 Pulse Graphs Grunt plugin for compiling PureScript files (deprecated) 51 commits 1 branch 5 releases Fetching contributors JavaScript 100.0% JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.6.0 v0.5.3 v0.5.1 v0.5.0 v0.4.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. tasks test .gitattributes .gitignore .jshintrc LICENSE-MIT README.md gruntfile.js package.json README.md grunt-purescript This project is currently not maintained, and does not work with the current PureScript compiler. You probably want one of the following instead: Pulp is probably the most commonly used PureScript build tool at the moment. gulp-purescript may be useful when your project structure or build process is non-standard. Runs the PureScript compiler to produce JavaScript files. Getting started This plugin requires Grunt ~0.4.2 and PureScript ==0.6.* If you haven't used Grunt before, be sure to check out the Getting Started guide, as it explains how to create a Gruntfile as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command: npm install grunt-purescript --save-dev Once the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript: grunt.loadNpmTasks('grunt-purescript'); The ""psc"" task Overview In your project's Gruntfile, add a section named psc to the data object passed into grunt.initConfig(). grunt.initConfig({   psc: {     options: {       // Task-specific options go here.     },     your_target: {       // Target-specific file lists and/or options go here.     },   }, }); Options options.main Type: Boolean or String Default value: false Toggles the --main compiler flag. Can be set to true or the name of a module in which a main function resides. When enabled, a call to main will be added after all other generated JavaScript. When set to true, the module name will be assumed to be Main. options.modules Type: String or Array Default value: none Enables dead code elimination, ensuring that the named module (or list of modules) are included in the generated JavaScript, along with all their dependencies. options.codegen Type: String or Array Default value: none Specifies which module(s) to include in the generated Javascript and externs files. options.externs Type: String Default value: none Invokes the --externs compiler flag with the specified argument. Generates a .externs file for foreign imports. options.browserNamespace Type: String Default value: PS Invokes the --browser-namespace compiler flag with the specified argument. Specifies the namespace that PureScript modules will be exported to when running in the browser. options.noPrelude Type: Boolean Default value: false Toggles the --no-prelude compiler flag. Omits the Prelude from the generated JavaScript when enabled. options.noOpts Type: Boolean Default value: false Toggles the --no-opts compiler flag. Skips the optimization phase for the generated JavaScript when enabled. options.noMagicDo Type: Boolean Default value: false Toggles the --no-magic-do compiler flag. Disables overloading of the do keyword to inline calls to >>= for the Eff monad to generate more efficient code. options.noTco Type: Boolean Default value: false Toggles the --no-tco compiler flag. Disables tail-call elimination on the generated JavaScript. options.verboseErrors Type: Boolean Default value: false Toggles the --verbose-errors compiler flag. Generates verbose error messages. The ""pscMake"" task Overview This task runs the psc-make executable, which will compile modules to their own .js and .externs files. If no dest is specified the files will be generated in the output/ folder. This mode is useful when developing large libraries, since it avoids recompiling unchanged modules. In your project's Gruntfile, add a section named pscMake to the data object passed into grunt.initConfig(). Basic usage, generating the files in output/: grunt.initConfig({   pscMake: [""path/to/source/**/*.purs""] }); With options: grunt.initConfig({   pscMake: {     options: {       // Task-specific options go here.     },     src: [""path/to/source/**/*.purs""]   }, }); Or to specify an output folder a named target must be used (lib in this case): grunt.initConfig({   pscMake: {     lib: {       src: [""path/to/source/**/*.purs""],       dest: ""build""     }   }, }); Options options.browserNamespace options.noPrelude options.noOpts options.noMagicDo options.noTco These options have the same effect as described for the psc task above. The ""dotPsci"" task Overview This task generates or updates a .psci file in the current directory, adding :m commands for any files matching a list of source patterns. grunt.initConfig({   dotPsci: {     src: [""path/to/source/**/*.purs""]   } }); Options There are no options for dotPsci. The ""pscDocs"" task Overview This task generates a markdown file containing the generated documentation for any modules found in files in the source path. grunt.initConfig({   pscDocs: {     readme: {       src: ""src/**/*.purs"",       dest: ""README.md""     }   } }); Options There are no options for pscDocs. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/purescript-contrib/grunt-purescript"	""	"true"
"Build Tooling"	"gulp-purescript"	"https://github.com/purescript-contrib/gulp-purescript"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"28"	"6"	"8"	"GitHub - purescript-contrib/gulp-purescript: Gulp plugin providing PureScript compiler tasks Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 28 Fork 8 purescript-contrib/gulp-purescript Code Issues 3 Pull requests 0 Pulse Graphs Gulp plugin providing PureScript compiler tasks 122 commits 2 branches 28 releases Fetching contributors PureScript 78.1% JavaScript 21.9% PureScript JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.4-stable master Nothing to show 1.0.0 0.8.0 0.7.0 0.6.0 0.5.0 0.5.0-rc.1 0.4.3 0.4.2 0.4.1 0.4.0 0.3.1 0.3.0 0.2.0 0.1.2 0.1.1 0.1.0 0.0.12 0.0.11 0.0.10 0.0.9 0.0.8 0.0.7 0.0.6 0.0.5 0.0.4 0.0.3 0.0.2 0.0.1 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src/GulpPurescript test .gitignore LICENSE README.md bower.json index.js package.json README.md gulp-purescript Runs the PureScript compiler to produce JavaScript files Install Install with npm npm install gulp-purescript --save-dev  Binaries This plugin requires that the PureScript binaries first be installed. The binaries may be installed using the purescript NPM package or as described on the PureScript installation section of the GitHub wiki. Basic example var gulp = require('gulp');  var purescript = require('gulp-purescript');  gulp.task('psc', function(){   return purescript.psc({     src: 'src/*.purs'   }); }); There is also a more complete example that makes use of all the provided tasks in a common setup. API Refer to the PureScript compiler usage section of the Github wiki for additional details on the behaviour of each option below. Options can be passed to the Haskell runtime system for psc by passing a --psc-rts-opts argument to gulp. Any values that follow this flag will be passed through to the runtime. There is no need to include +RTS/-RTS options as these are inserted automatically. See the GHC documentation for information on the available RTS options. purescript.psc(options) Invokes the psc command. The following options are supported. src (String or String Array) Files to compile. Glob syntax is supported. noTco (Boolean) Toggles --no-tco that disables tail-call optimizations. noMagicDo (Boolean) Toggles --no-magic-do that disables optimizations overloading the do keyword generating efficient code for the Eff monad. noOpts (Boolean) Toggles --no-opts that skips the optimization phase. verboseErrors (Boolean) Toggles --verbose-errors that displays verbose error messages. comments (Boolean) Toggles --comments that includes comments in generated code. output (String) Sets --output=<string> the specifies the output directory, output by default. noPrefix (Boolean) Toggles --no-prefix that does not include the comment header. sourceMaps (Boolean) Toggles --source-maps that generates source maps. jsonErrors (Boolean) Toggles --json-errors that prints errors to stderr as JSON. purescript.pscBundle(options) Invokes the psc-bundle command. The following options are supported. src (String or String Array) The psc-produced JavaScript source files to bundle. Glob syntax is supported. output (String) Sets --output=<string> that specifies the output filename for the bundle. module (String or String Array) The name of the module or modules to use as entry points for dead code elimination. main (Boolean or String) Toggles --main or sets --main=<string> that generates code to run the main function in the specified module or the Main module by default. namespace (String) Sets --namespace=<string> that specifies the namespace that PureScript modules will be exported to when running in the browser. purescript.pscDocs(options) Invokes the psc-docs command. The following options are supported. src (String or String Array) Files to be used for generating the documentation. Glob syntax is supported. format (markdown | etags | ctags) Sets --output=<markdown|etags|ctags> that specifies the output format. docgen (String | String Array | Object) Sets --docgen=... that can be used to filter the modules documentation is generated for. If a string value is provided, the documentation for that single module will be generated. If a list of strings is provided, the documentation for all listed modules will be generated. If an object with module name/filename pairs (for example, { Module: 'docs/Module.md' }) is provided, files will be written for each of the modules. In this mode, the task requires no dest as no value is returned. purescript.psci(options) Generates a .psci file. src (String or String Array) Files added to the .psci file with the :m command. Glob syntax is supported. Full example This example will make and bundle the code, run tests, and produce a .psci file and documentation for a project using the common bower_components/src file layout. var gulp = require(""gulp""); var purescript = require(""gulp-purescript""); var run = require(""gulp-run"");  var sources = [   ""src/**/*.purs"",   ""bower_components/purescript-*/src/**/*.purs"", ];  gulp.task(""make"", function () {   return purescript.psc({ src: sources }); });  gulp.task(""bundle"", [""make""], function () {   return purescript.pscBundle({ src: ""output/**/*.js"", output: ""dist/bundle.js"" }); });  gulp.task(""docs"", function () {   return purescript.pscDocs({       src: sources,       docgen: {         ""Name.Of.Module1"": ""docs/Name/Of/Module1.md"",         ""Name.Of.Module2"": ""docs/Name/Of/Module2.md""       }     }); });  gulp.task(""dotpsci"", function () {   return purescript.psci({ src: sources })     .pipe(gulp.dest(""."")); });  gulp.task(""test"", [""make""], function() {   return purescript.pscBundle({ src: ""output/**/*.js"", main: ""Test.Main"" })     .pipe(run(""node"")); });  gulp.task(""default"", [""bundle"", ""docs"", ""dotpsci"", ""test""]); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/purescript-contrib/gulp-purescript"	""	"true"
"Build Tooling"	"purs-loader"	"https://github.com/ethul/purs-loader"	"for webpack"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"40"	"5"	"3"	"GitHub - ethul/purs-loader: PureScript loader for webpack Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 40 Fork 3 ethul/purs-loader Code Issues 3 Pull requests 0 Pulse Graphs PureScript loader for webpack 122 commits 2 branches 28 releases 3 contributors JavaScript 100.0% JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x master Nothing to show 2.0.0-rc.1 2.0.0-rc.0 1.1.0 1.0.0 1.0.0-rc.1 1.0.0-rc.0 0.6.0 0.6.0-beta.6 0.6.0-beta.5 0.6.0-beta.4 0.6.0-beta.3 0.6.0-beta.2 0.6.0-beta.1 0.6.0-beta.0 0.5.0 0.4.0 0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 0.2.1 0.2.0 0.1.1 0.1.0 0.0.3 0.0.2 0.0.1 Nothing to show New pull request Latest commit 689268d Jun 12, 2016 ethul Bumping version number to 2.0.0-rc.1 Permalink Failed to load latest commit information. src Clear warnings and errors after use Jun 12, 2016 .babelrc Refactor to compile independently of purescript-webpack-plugin. May 10, 2016 .gitignore Handle no filename in PscIde result Jun 12, 2016 LICENSE Refactor to compile independently of purescript-webpack-plugin. May 10, 2016 README.md Bumping version number to 2.0.0-rc.1 Jun 12, 2016 package.json Bumping version number to 2.0.0-rc.1 Jun 12, 2016 README.md purs-loader PureScript loader for webpack Supports hot-reloading and rebuilding of single source files Dead code elimination using the bundle option Colorized build output using purescript-psa and the psc: ""psa"" option Install Install with npm. npm install purs-loader --save-dev  npm install purs-loader@next --save-dev  npm install purs-loader@purescript-0.8 --save-dev  npm install purs-loader@purescript-0.9 --save-dev  Example const webpackConfig = {   // ...   loaders: [     // ...     {       test: /\.purs$/,       loader: 'purs-loader',       exclude: /node_modules/,       query: {         psc: 'psa',         src: ['bower_components/purescript-*/src/**/*.purs', 'src/**/*.purs']       }     }     // ...   ]   // ... } Refer to the purescript-webpack-example for a more detailed example. Options Default options: {   psc: 'psc',   pscArgs: {},   pscBundle: 'psc-bundle',   pscBundleArgs: {},   pscIde: false, // instant rebuilds using psc-ide-server (experimental)   pscIdeColors: false, // defaults to true if psc === 'psa'   bundleOutput: 'output/bundle.js',   bundleNamespace: 'PS',   bundle: false,   warnings: true,   output: 'output',   src: [     path.join('src', '**', '*.purs'),     path.join('bower_components', 'purescript-*', 'src', '**', '*.purs')   ] } Instant rebuilds (experimental) Experimental support for instant rebuilds using psc-ide-server can be enabled via the pscIde: true option. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ethul/purs-loader"	"for webpack"	"true"
"Preludes"	"purescript-prelude"	"https://github.com/purescript/purescript-prelude"	"The standard Prelude."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"16"	"13"	"23"	"GitHub - purescript/purescript-prelude: The PureScript Prelude Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 16 Fork 23 purescript/purescript-prelude Code Issues 7 Pull requests 3 Pulse Graphs The PureScript Prelude 106 commits 3 branches 15 releases 10 contributors PureScript 85.2% JavaScript 14.8% PureScript JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master modularised show-fix Nothing to show v1.0.1 v1.0.0 v1.0.0-rc.6 v1.0.0-rc.5 v1.0.0-rc.4 v1.0.0-rc.3 v1.0.0-rc.2 v1.0.0-rc.1 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 v0.1.0-rc.1 Nothing to show New pull request Latest commit 4650e8d Jun 7, 2016 garyb Merge pull request #84 from purescript/redundant-field-constraint … Remove CommutativeRing constraint from Field Permalink Failed to load latest commit information. src Remove CommutativeRing constraint from Field Jun 7, 2016 test/Test Add tests May 17, 2016 .gitignore Update build Jul 3, 2015 .jscsrc Updates for PureScript 0.8 Jan 31, 2016 .jshintrc Updates for PureScript 0.8 Jan 31, 2016 .travis.yml Stricter build May 20, 2016 LICENSE Initial commit Apr 13, 2015 README.md Updates for PureScript 0.8 Jan 31, 2016 bower.json Updates for PureScript 0.8 Jan 31, 2016 package.json Pulp-less build Jun 1, 2016 README.md purescript-prelude The PureScript prelude. Installation bower install purescript-prelude  Documentation Module documentation is published on Pursuit. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/purescript/purescript-prelude"	"The standard Prelude."	"true"
"Preludes"	"purescript-preface"	"https://github.com/paf31/purescript-preface"	"A simpler alternative to the Prelude."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"12"	"3"	"0"	"GitHub - paf31/purescript-preface: An alternative to the Prelude for teaching purposes Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 12 Fork 0 paf31/purescript-preface Code Issues 1 Pull requests 0 Pulse Graphs An alternative to the Prelude for teaching purposes 16 commits 1 branch 2 releases Fetching contributors PureScript 74.7% JavaScript 25.3% PureScript JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.0 v0.1.0 Nothing to show New pull request Latest commit 9e433f8 Jun 8, 2016 paf31 Updates for 1.0 Permalink Failed to load latest commit information. docs Updates for 1.0 Jun 8, 2016 src test .gitignore README.md Instructions Aug 28, 2015 bower.json README.md purescript-preface A simpler alternative to the Prelude. Module Documentation Example Getting Started Clone this repository. Then, using Pulp: pulp build pulp test  Design The Preface is intended to be a simpler introduction to the concepts of PureScript for beginners, specifically those coming from Javascript. With that in mind, here are some design goals: Use simple types - no type classes, effect rows, etc. Provide excellent documentation with examples. Name functions using simple names which explain their purpose. The Preface is meant to be a teaching tool, such that users should plan to graduate to the regular set of PureScript core libraries once they are familiar with the ideas. However, the Preface may be a practical alternative for some very simple tasks. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/paf31/purescript-preface"	"A simpler alternative to the Prelude."	"true"
"Preludes"	"purescript-batteries"	"https://github.com/tfausak/purescript-batteries"	"A PureScript prelude with more features."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"21"	"3"	"6"	"GitHub - tfausak/purescript-batteries: A PureScript prelude with more features. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 21 Fork 6 tfausak/purescript-batteries Code Issues 1 Pull requests 0 Pulse Graphs 🔋 A PureScript prelude with more features. http://pursuit.purescript.org/packages/purescript-batteries 250 commits 1 branch 15 releases 3 contributors PureScript 100.0% PureScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.0 v0.3.0 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.0 v0.0.0 Nothing to show New pull request Latest commit 11c97df Apr 21, 2016 tfausak Upgrade to purescript 0.8.5 Permalink Failed to load latest commit information. src Fix warnings Apr 21, 2016 test Create a rudimentary test suite Oct 23, 2015 .gitignore Update to pulp 5.0.0 Nov 24, 2015 .travis.yml Upgrade Travis CI to node 5 Apr 21, 2016 CHANGELOG.md Update link to change log Jan 4, 2016 LICENSE Upgrade to purescript 0.8.3 Mar 29, 2016 README.md Remove installation instructions Nov 19, 2015 bower.json Add some resolutions Apr 21, 2016 package.json Upgrade to purescript 0.8.5 Apr 21, 2016 README.md Batteries 🔋 A PureScript prelude with more features. PureScript is a powerful language. Unfortunately the package ecosystem is excessively granular. That means it can take tens of lines of imports to accomplish trivial tasks. Batteries makes things better by giving you more functionality from a single import. import Batteries That's all there is to it! If you want to see exactly what Batteries exports, check out the source. If it's missing something or including something it shouldn't, please open an issue! The other way to use Batteries is to not import it. Instead, simply add it as a dependency and use the packages that it includes. In this way it is similar to purescript-base. Batteries includes the following packages: aff arrays arrows assert bifunctors catenable-lists console const contravariant control coproducts datetime distributive eff either enums exceptions exists foldable-traversable foreign free functions generics globals identity inject integers invariant lazy lens lists maps math maybe monoid nullable parallel prelude profunctor proxy random refs semirings sequences sets st strings tailrec these transformers tuples unfoldable unsafe-coerce validation To see the exact versions that Batteries depends on, look at the bower.json. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tfausak/purescript-batteries"	"A PureScript prelude with more features."	"true"
"UI Libraries"	"purescript-thermite"	"https://github.com/paf31/purescript-thermite"	"A simple wrapper for ReactJS inspired by."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"141"	"11"	"29"	"GitHub - paf31/purescript-thermite: A simple PureScript wrapper for React Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 141 Fork 29 paf31/purescript-thermite Code Issues 4 Pull requests 1 Pulse Graphs A simple PureScript wrapper for React 108 commits 1 branch 33 releases Fetching contributors PureScript 94.5% HTML 5.5% PureScript HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.1 v1.0.0 v0.15.1 v0.15.0 v0.14.0 v0.13.1 v0.13.0 v0.12.1 v0.12.0 v0.11.0 v0.10.1 v0.10.0 v0.9.0 v0.8.0 v0.8.0-rc.1 v0.7.4 v0.7.3 v0.7.2 v0.7.1 v0.7.0 v0.6.1 v0.6.0 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.2 v0.4.1 v0.4.0 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 5dddb49 Jul 13, 2016 paf31 committed on GitHub Fix #65, transform every action when using focus, split, etc. (#66) Permalink Failed to load latest commit information. docs Use Coroutine/CoTransformer for PerformAction API (#62) Jun 21, 2016 html upgrade purescript-react and use purescript-react-dom Feb 29, 2016 src Fix #65, transform every action when using focus, split, etc. (#66) Jul 13, 2016 test Fix #65, transform every action when using focus, split, etc. (#66) Jul 14, 2016 .gitignore Excluding example/index.js Jan 28, 2015 LICENSE first commit Dec 19, 2014 README.md Update README.md Jun 21, 2016 bower.json Use Coroutine/CoTransformer for PerformAction API (#62) Jun 22, 2016 package.json upgrade purescript-react and use purescript-react-dom Feb 28, 2016 README.md purescript-thermite purescript-thermite is a PureScript wrapper for purescript-react. It does not provide all of the functionality of React, but instead to provide a clean API to the most commonly-used parts of its API. It is possible to use purescript-react for more specialized use cases. Try Thermite! Module Documentation Example Project: Code, Demo Building bower update pulp build pulp test -r cat > html/index.js  You can also now use npm test to run the test command above. Getting Started Thermite components are defined in parts: A type of actions, which represents the actions a user can take on our component A type of states, which represents the internal state of our component An initial state A rendering function, which takes the current component state and properties, and creates a HTML document A function which interprets actions, by modifying the state and/or running some (possibly asynchronous) computations Here is an example. We'll build a component which displays the value of a integer-valued counter. First of all, we need to import some modules: import Thermite as T  import React as R import React.DOM as R import React.DOM.Props as RP import ReactDOM as RDOM In our component, users will be able to take two actions - increment and decrement - which will be represented as buttons later: data Action = Increment | Decrement The state of our component is just an integer: type State = { counter :: Int } The initial state is zero: initialState :: State initialState = { counter: 0 } Our rendering function uses the React.DOM.* modules to create a HTML document containing a label and two buttons. The buttons' onclick handlers are given functions which generate the correct actions. The dispatch function, which is passed as the first argument to render, can be used to build such a function, by providing an action: render :: T.Render State _ Action render dispatch _ state _ =   [ R.p' [ R.text ""Value: ""          , R.text $ show state.counter          ]   , R.p' [ R.button [ RP.onClick \_ -> dispatch Increment ]                     [ R.text ""Increment"" ]          , R.button [ RP.onClick \_ -> dispatch Decrement ]                     [ R.text ""Decrement"" ]          ]   ] The performAction function interprets actions by passing a function to the state update function, which is responsible for updating the state using record updates: performAction :: T.PerformAction _ State _ Action performAction Increment _ _ = void (T.cotransform (\state -> state { counter = state.counter + 1 })) performAction Decrement _ _ = void (T.cotransform (\state -> state { counter = state.counter - 1 })) Note: PerformAction returns a coroutine, which can emit many asynchronous state updates using cotransform. This approach also allows us to create asynchronous and/or chunked action handlers (using AJAX or websockets, for example): getIncrementValueFromServer :: Aff _ Int  performAction :: T.PerformAction _ State _ Action performAction Increment _ _ = forever do   Just amount <- lift getIncrementValueFromServer   void $ T.cotransform $ \state -> state { counter = state.counter + amount } With these pieces, we can create a Spec for our component: spec :: T.Spec _ State _ Action spec = T.simpleSpec performAction render Finally, in main, we use createClass to turn our Spec into a component class, providing an initial state. The render function from purescript-react can then be used to render our component to the document body: main = do   let component = T.createClass spec initialState   body >>= RDOM.render (R.createFactory component {}) Combining Components The Spec type is an instance of the Semigroup and Monoid type classes. These instances can be used to combine different components with the same state and action types. In practice, the state and action types will not always match for the different subcomponents, so Thermite provides combinators for changing these type arguments: focus and foreach. These combinators are heavily inspired by the OpticUI library. See the example project for examples of these kinds of composition. focus focus (and the related functions focusState and match) are used to enlarge the state and action types, to make it possible to embed a component inside a larger component. focus takes a lens, which identifies the state type as a part of the state type of the larger component, and a prism, which identifies all actions of the smaller component as actions for the larger component. focusState is used when only the state type needs to be changed, and match is used when only the action type needs to be changed. As a simple example, we can combine two subcomponents by using a Tuple to store both states, and Either to combine both sets of actions: spec1 :: Spec _ S1 _ A1 spec2 :: Spec _ S2 _ A2  spec :: Spec _ (Tuple S1 S2) _ (Either A1 A2) spec = focus _1 _Left spec1 <> focus _2 _Right spec2 Here, _1 and _Left embed spec1 inside spec, using the left components of both the state Tuple and the Either type of actions. _2 and _Right similarly embed spec2, using the right components. focus is responsible for directing the various actions to the correct components, and updating the correct parts of the state. split split is used to handle child components which might not be present, for example, when a parent object contains a Maybe state. type Parent = { child :: Maybe child }  _child :: LensP Parent (Maybe Child) _child = lens _.child (_ { child = _ })  _ChildAction :: PrismP ParentAction ChildAction  childSpec :: Spec _ Child _ ChildAction  spec :: Spec _ Parent _ ParentAction spec = focus _child _ChildAction $ split _Just childSpec foreach Where focus embeds a single subcomponent inside another component, foreach embeds a whole collection of subcomponents. foreach turns a Spec eff state props action into a Spec eff (List state) props (Tuple Int action). Note that the state type has been wrapped using List, since the component now tracks state for each element of the collection. Also, the action type has been replaced with Tuple Int action. This means that when an action occurs, it is accompanied by the index of the element in the collection which it originated from. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/paf31/purescript-thermite"	"A simple wrapper for ReactJS inspired by."	"true"
"UI Libraries"	"purescript-halogen"	"https://github.com/slamdata/purescript-halogen"	"A declarative, type-safe UI library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"352"	"39"	"55"	"GitHub - slamdata/purescript-halogen: A declarative, type-safe UI library for PureScript. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 39 Star 352 Fork 55 slamdata/purescript-halogen Code Issues 22 Pull requests 1 Pulse Graphs A declarative, type-safe UI library for PureScript. 420 commits 1 branch 31 releases 27 contributors PureScript 97.1% JavaScript 2.9% PureScript JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.9.0 v0.8.0 v0.7.1 v0.7.0 v0.6.2 v0.6.1 v0.6.0 v0.5.18 v0.5.17 v0.5.16 v0.5.15 v0.5.14 v0.5.13 v0.5.12 v0.5.11 v0.5.10 v0.5.9 v0.5.8 v0.5.7 v0.5.6 v0.5.5 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.1 v0.4.0 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 5b16510 Jun 23, 2016 garyb committed on GitHub Final updates for psc 0.9 (#313) Permalink Failed to load latest commit information. examples Final updates for psc 0.9 (#313) Jun 23, 2016 src Final updates for psc 0.9 (#313) Jun 23, 2016 test/Test Final updates for psc 0.9 (#313) Jun 23, 2016 .editorconfig Update build and core library for purescript 0.7 Jul 8, 2015 .gitignore fixed examples Jun 22, 2016 .jscsrc Update build and core library for purescript 0.7 Jul 8, 2015 .jshintrc Update build and core library for purescript 0.7 Jul 8, 2015 .travis.yml Fix warnings, make all event handlers use Maybe May 13, 2016 GUIDE.md Final updates for psc 0.9 (#313) Jun 23, 2016 LICENSE Initial commit Feb 25, 2015 README.md 0.6 Mar 15, 2016 bower.json small fixes Jun 22, 2016 package.json Final updates for psc 0.9 (#313) Jun 23, 2016 README.md purescript-halogen A declarative, type-safe UI library for PureScript. Getting Started Read the guide Take a look at some of the examples: A basic counter AJAX requests TODO list Ace editor Clone the template project and give it a try! Installation bower install purescript-halogen  purescript-halogen uses the virtual-dom library as a CommonJS dependency. To set up virtual-dom in your project, it is recommended that you: Install virtual-dom as an NPM dependency in your package.json file. Use psc with psc-bundle and then webpack or browserify to build and link the virtual-dom source code into a JS bundle for use in the web browser. If you're building with pulp then this is easy to do with the pulp browserify command. Documentation The guide attempts to cover all the common uses cases and features of Halogen. Module documentation is published on Pursuit. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/slamdata/purescript-halogen"	"A declarative, type-safe UI library."	"true"
"UI Libraries"	"purescript-react-simple"	"https://github.com/joneshf/purescript-react-simple"	"A simplified wrapper around react."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"1"	"35"	"GitHub - joneshf/purescript-react-simple: React Bindings for PureScript Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 3 Fork 35 joneshf/purescript-react-simple forked from purescript-contrib/purescript-react Code Pull requests 0 Pulse Graphs React Bindings for PureScript 77 commits 4 branches 8 releases Fetching contributors PureScript 82.3% JavaScript 10.9% Makefile 4.0% HTML 2.8% PureScript JavaScript Makefile HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master simplify specs-and-tutorial wierdness Nothing to show v0.1.2 v0.1.1 v0.1.0 v0.0.6 v0.0.5 v0.0.4 v0.0.3 v0.0.2 Nothing to show New pull request Pull request Compare This branch is 26 commits ahead, 69 commits behind purescript-contrib:master. Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. docs example src .gitignore Makefile README.md bower.json gulpfile.js package.json README.md purescript-react-simple A simplified wrapper around react. The goal of this fork is to make the use of React from PureScript much easier. For the most part you can do a simple conversion from js or jsx code to ps code. See the examples for a brief look at what things look like. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/joneshf/purescript-react-simple"	"A simplified wrapper around react."	"true"
"UI Libraries"	"purescript-css"	"https://github.com/slamdata/purescript-css"	"A clean, type-safe library for describing, manipulating and rendering CSS."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"26"	"19"	"18"	"GitHub - slamdata/purescript-css: A clean, type-safe library for describing, manipulating and rendering CSS Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 26 Fork 18 slamdata/purescript-css Code Issues 5 Pull requests 1 Pulse Graphs A clean, type-safe library for describing, manipulating and rendering CSS 77 commits 2 branches 12 releases Fetching contributors PureScript 100.0% PureScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.1.0 v1.0.0 v0.7.0 v0.6.0 v0.5.2 v0.5.1 v0.5.0 v0.4.0 v0.3.1 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 7a39810 Jul 1, 2016 garyb committed on GitHub Merge pull request #37 from garyb/updates … Updates Permalink Failed to load latest commit information. src Fix warnings, add instances for everything Jul 1, 2016 test Fix warnings, add instances for everything Jul 1, 2016 .gitignore Use purescript-colors, fixes #22 Mar 5, 2016 .travis.yml Switch to pulp build Jul 1, 2016 LICENSE Fix license copyright notice Apr 8, 2015 README.md Fix many warnings, update to latest generics, update docs, etc Nov 20, 2015 bower.json Fix warnings, add instances for everything Jul 1, 2016 package.json Switch to pulp build Jul 1, 2016 README.md purescript-css A type-safe library for describing, manipulating, and rendering CSS. Installation bower install purescript-css  Documentation Module documentation is published on Pursuit: http://pursuit.purescript.org/packages/purescript-css Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/slamdata/purescript-css"	"A clean, type-safe library for describing, manipulating and rendering CSS."	"true"
"UI Libraries"	"purescript-optic-ui"	"https://github.com/zrho/purescript-optic-ui"	"Write single page web user interfaces declaratively and concisely with the help of lenses and traversals."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"75"	"15"	"7"	"GitHub - zrho/purescript-optic-ui: PureScript UI framework based on lenses. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 75 Fork 7 zrho/purescript-optic-ui Code Issues 5 Pull requests 2 Pulse Graphs PureScript UI framework based on lenses. 45 commits 2 branches 1 release Fetching contributors PureScript 92.6% JavaScript 7.4% PureScript JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master v2 Nothing to show 2.0.0-alpha Nothing to show New pull request Latest commit f997791 Jan 26, 2016 1 zrho Make travis happy by using 'pulp dep' instead of … 'bower'. Permalink Failed to load latest commit information. docs Make travis happy by using 'pulp dep' instead of Jan 26, 2016 examples Signals for principled asynchronous feedback. Jan 26, 2016 src Signals for principled asynchronous feedback. Jan 26, 2016 .gitignore Streamlined build process to use pulp. Jan 24, 2016 .travis.yml Streamlined build process to use pulp. Jan 24, 2016 README.md Streamlined build process to use pulp. Jan 24, 2016 bower.json Signals for principled asynchronous feedback. Jan 26, 2016 package.json Make travis happy by using 'pulp dep' instead of Jan 26, 2016 README.md Optic UI Optic UI is a Purescript library that allows to write single page web user interfaces declaratively and concisely with the help of lenses and traversals: UI components are defined in a profunctor that gives them access to a view model, a state local to the component. Child components that access only a part of the state of their parent can be embedded in a bigger component using lenses and traversals that focus on the respective sub-states. Components provide a handler function that - given a new state - triggers an update of the UI and generate a view that is finally rendered using virtual-dom. Examples main = animate false $ with \on h ->   let clicked _ = updatePure h (not on)   in mconcat $ ui <$>     [ H.h1_ $ text ""Toggle Button""     , H.button [H.titleA ""Toggle"", H.onClick clicked] $ text $ if on then ""On"" else ""Off""     ] main = animate ""Hello World"" $ withView H.div_ $ with \s h -> mconcat   [ ui $ H.h1_ $ text ""Synchronized Text Fields""   , ui $ H.p_ $ text ""First text field:""   , textField []   , ui $ H.p_ $ text ""Second text field:""   , textField []   ] main = animate (Tuple ""Left"" ""Right"") $ withView H.div_ $ mconcat   [ ui $ H.h1_ $ text ""Independent Text Fields""   , ui $ H.p_ $ text ""First text field:""   , _1 $ textField []   , ui $ H.p_ $ text ""Second text field:""   , _2 $ textField []   ] For more examples, have a look at the examples directory: Todo Manager AJAX Example Effects Example Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zrho/purescript-optic-ui"	"Write single page web user interfaces declaratively and concisely with the help of lenses and traversals."	"true"
"UI Libraries"	"purescript-flare"	"https://github.com/sharkdp/purescript-flare"	"Applicative-style reactive user interfaces built on top of purescript-signal."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"132"	"8"	"3"	"GitHub - sharkdp/purescript-flare: A special-purpose UI library for Purescript Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 132 Fork 3 sharkdp/purescript-flare Code Issues 6 Pull requests 0 Pulse Graphs A special-purpose UI library for Purescript 75 commits 3 branches 19 releases Fetching contributors PureScript 56.9% JavaScript 20.4% HTML 20.2% CSS 2.5% PureScript JavaScript HTML CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags free-applicative gh-pages master Nothing to show v1.0.1 v1.0.0 v0.5.1 v0.5.0 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.0 v0.2.1 v0.2.0 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 7da32e5 Jun 19, 2016 sharkdp committed on GitHub Merge pull request #16 from oblitum/firefox-sliders-fix … Sliders not showing up in Firefox Permalink Failed to load latest commit information. html Fix #16. Sliders not showing up in Firefox. Jun 16, 2016 src test Use NonEmpty for select, radioGroup, fixes #11 Jun 12, 2016 .gitignore Add .pulp-cache and .psci_modules Nov 27, 2015 README.md Update README.md Feb 9, 2016 bower.json Update bower.json Jun 12, 2016 README.md Flare Flare is a special-purpose UI library for Purescript. It is built on top of purescript-signal and uses Applicative-style programming to combine predefined input fields to a reactive user interface. Flare is inspired by the Haskell library typed-spreadsheet. The main design-criterion of this library is ease of use. Tutorial - Introduction with many examples Tests - A lot of additional examples Try Flare: Write Flare UIs in an online editor Quick start - Start a new Flare project Module documentation Projects that use Flare purescript-flarecheck - QuickCheck-style interactive tests purescript-flaredoc - Interactive documentation using FlareCheck (see -arrays, -strings, -colors) purescript-isometric - Interactive 3D rendering Building bower install pulp build -O -I test -m Test.Main -t html/main.js  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sharkdp/purescript-flare"	"Applicative-style reactive user interfaces built on top of purescript-signal."	"true"
"Asynchronicity and Parallelism"	"purescript-affjax"	"https://github.com/slamdata/purescript-aff"	"An asynchronous AJAX library built using Aff."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"77"	"19"	"24"	"GitHub - slamdata/purescript-aff: An asynchronous effect monad for PureScript Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 77 Fork 24 slamdata/purescript-aff Code Issues 9 Pull requests 0 Pulse Graphs An asynchronous effect monad for PureScript 132 commits 2 branches 36 releases 18 contributors PureScript 72.0% JavaScript 28.0% PureScript JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master psc-0.7.4-update Nothing to show v1.0.0 v0.17.0 v0.16.2 v0.16.1 v0.16.0 v0.15.0 v0.14.2 v0.14.1 v0.14.0 v0.13.1 v0.13.0 v0.12.0 v0.11.3 v0.11.2 v0.11.1 v0.11.0 v0.10.1 v0.10.0 v0.9.2 v0.9.1 v0.9.0 v0.8.0 v0.7.0 v0.6.0 v0.5.6 v0.5.5 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.0 v0.3.0 v0.2.1 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit f9b8901 Jun 9, 2016 jdegoes Merge pull request #52 from sardonicpresence/master … Allow cancellation of computations forked with `runAff` Permalink Failed to load latest commit information. src/Control/Monad Return Canceler from runAff/launchAff Jun 9, 2016 test/Test Return Canceler from runAff/launchAff Jun 9, 2016 .gitignore Use trusty build Jun 6, 2016 .travis.yml Use trusty build Jun 6, 2016 LICENSE Initial commit Feb 27, 2015 README.md Update docs Jun 6, 2016 bower.json Rearrange things to avoid dodgy FFI dependency Jun 8, 2016 package.json Use trusty build Jun 6, 2016 README.md purescript-aff An asynchronous effect monad for PureScript. The moral equivalent of ErrorT (ContT Unit (Eff e)) a, for effects e. Aff lets you say goodbye to monad transformers and callback hell! Example main = launchAff do   response <- Ajax.get ""http://foo.bar""   liftEff $ log response.body See the tests for more examples. Getting Started Installation bower install purescript-aff  Introduction An example of Aff is shown below: deleteBlankLines path = do   contents <- loadFile path   let contents' = S.join ""\n"" $ A.filter (\a -> S.length a > 0) (S.split ""\n"" contents)   saveFile path contents' This looks like ordinary, synchronous, imperative code, but actually operates asynchronously without any callbacks. Error handling is baked in so you only deal with it when you want to. The library contains instances for Semigroup, Monoid, Apply, Applicative, Bind, Monad, Alt, Plus, MonadPlus, MonadEff, and MonadError. These instances allow you to compose asynchronous code as easily as Eff, as well as interop with existing Eff code. Escaping Callback Hell Hopefully, you're using libraries that already use the Aff type, so you don't even have to think about callbacks! If you're building your own library, or you have to interact with some native code that expects callbacks, then purescript-aff provides a makeAff function: makeAff :: forall e a. ((Error -> Eff e Unit) -> (a -> Eff e Unit) -> Eff e Unit) -> Aff e a This function expects you to provide a handler, which should call a user-supplied error callback or success callback with the result of the asynchronous computation. For example, let's say we have an AJAX request function that expects a callback: exports.ajaxGet = function(callback) { // accepts a callback   return function(request) { // and a request     return function() { // returns an effect       doNativeRequest(request, function(response) {         callback(response)(); // callback itself returns an effect       });     }   } } foreign import ajaxGet :: forall e. (Response -> Eff e Unit) -> Request -> Eff e Unit We can wrap this into an asynchronous computation like so: ajaxGet' :: forall e. Request -> Aff e Response ajaxGet' req = makeAff (\error success -> ajaxGet success req) This eliminates callback hell and allows us to write code simply using do notation: do response <- ajaxGet' req    liftEff $ log response.body Eff All purely synchronous computations (Eff) can be lifted to asynchronous computations with liftEff defined in Control.Monad.Eff.Class (see here). import Control.Monad.Eff.Class  liftEff $ log ""Hello world!"" This lets you write your whole program in Aff, and still call out to synchronous code. If your Eff code throws exceptions (err :: Exception), you can remove the exceptions using liftEff', which brings exceptions to the value level as an Either Error a: do e <- liftEff' myExcFunc    liftEff $ either (const $ log ""Oh noes!"") (const $ log ""Yays!"") e Dealing with Failure The Aff monad has error handling baked in, so ordinarily you don't have to worry about it. When you need to deal with failure, you have several options. Attempt Alt MonadError 1. Attempt If you want to attempt a computation but recover from failure, you can use the attempt function: attempt :: forall e a. Aff e a -> Aff e (Either Error a) This returns an Either Error a that you can use to recover from failure. do e <- attempt $ Ajax.get ""http://foo.com""    liftEff $ either (const $ log ""Oh noes!"") (const $ log ""Yays!"") e 2. Alt Because Aff has an Alt instance, you may also use the operator <|> to provide an alternative computation in the event of failure: do result <- Ajax.get ""http://foo.com"" <|> Ajax.get ""http://bar.com""    return result 3. MonadError Aff has a MonadError instance, which comes with two functions: catchError, and throwError. These are defined in purescript-transformers. Here's an example of how you can use them: do resp <- (Ajax.get ""http://foo.com"") `catchError` (const $ pure defaultResponse)    if resp.statusCode != 200 then throwError myErr    else pure resp.body Thrown exceptions are propagated on the error channel, and can be recovered from using attempt or catchError. Forking Using the forkAff, you can ""fork"" an asynchronous computation, which means that its activities will not block the current thread of execution: forkAff myAff Because Javascript is single-threaded, forking does not actually cause the computation to be run in a separate thread. Forking just allows the subsequent actions to execute without waiting for the forked computation to complete. If the asynchronous computation supports it, you can ""kill"" a forked computation using the returned canceler: canceler <- forkAff myAff canceled <- canceler `cancel` (error ""Just had to cancel"") _        <- liftEff $ if canceled then (log ""Canceled"") else (log ""Not Canceled"") If you want to run a custom canceler if some other asynchronous computation is cancelled, you can use the cancelWith combinator: otherAff `cancelWith` myCanceler AVars The Control.Monad.Aff.AVar module contains asynchronous variables, which are very similar to Haskell's MVar construct. These can be used as low-level building blocks for asynchronous programs. do v <- makeVar    forkAff (later $ putVar v 1.0)    a <- takeVar v    liftEff $ log (""Succeeded with "" ++ show a) You can use these constructs as one-sided blocking queues, which suspend (if necessary) on take operations, or as asynchronous, empty-or-full variables. Parallel Execution There are MonadPar and MonadRace instances defined for Aff, allowing for parallel execution of Aff computations. There are two ways of taking advantage of these instances - directly through the par and race functions from these classes, or by using the Parallel newtype wrapper that enables parallel behaviours through the Applicative and Alternative operators. In the following example, using the newtype, two Ajax requests are initiated simultaneously (rather than in sequence, as they would be for Aff): runParallel (f <$> parallel (Ajax.get ""http://foo.com"") <*> parallel (Ajax.get ""http://foo.com"")) And the equivalent using the MonadPar function directly: par f (Ajax.get ""http://foo.com"") (Ajax.get ""http://foo.com"") The race function from MonadPar or the (<|>) operator of the Alt instance of Parallel allows you to race two asynchronous computations, and use whichever value comes back first (or the first error, if both err). The runParallel function allows you to unwrap the Aff and return to normal monadic (sequential) composition. A parallel computation can be canceled if both of its individual components can be canceled. API Docs API documentation is published on Pursuit. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/slamdata/purescript-aff"	"An asynchronous AJAX library built using Aff."	"true"
"Testing"	"purescript-test-unit"	"https://github.com/bodil/purescript-test-unit"	"An asynchronous unit test runner for PureScript."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"26"	"7"	"14"	"GitHub - bodil/purescript-test-unit: An asynchronous unit test runner for PureScript Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 26 Fork 14 bodil/purescript-test-unit Code Issues 1 Pull requests 0 Pulse Graphs An asynchronous unit test runner for PureScript 53 commits 1 branch 16 releases 10 contributors PureScript 88.2% JavaScript 11.8% PureScript JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v7.0.0 v6.0.1 v6.0.0 v5.0.0 v4.1.0 v4.0.0 v3.0.0 v2.0.0 1.1.6 1.1.5 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.0.0 Nothing to show New pull request Latest commit eb6eac9 Jun 16, 2016 bodil v7.0.0 Permalink Failed to load latest commit information. src/Test Updated for PureScript 0.9.1. Jun 16, 2016 test Support multiple output formats using free monads. Apr 24, 2016 .gitignore Updated for PureScript 0.9.1. Jun 16, 2016 COPYING Make it so. Nov 16, 2014 COPYING.LESSER Make it so. Nov 16, 2014 README.md Updates to test example to make it runnable Jun 9, 2016 bower.json v7.0.0 Jun 16, 2016 README.md purescript-test-unit An asynchronous unit test runner for PureScript. API docs on Pursuit Usage Test-Unit tests are simply Aff actions, which can either succeed (test passed) or fail (test did not pass). The type for these tests is Test e, which is just an alias for Aff e Unit. The Test.Unit.Assert module contains a number of functions for making common assertions. The most straightforward is assert, which takes a failure message and a boolean, and if the boolean is true, it produces a Test which immediately succeeds. If the boolean is false, you get a Test which fails with the provided error message. Because tests are really just Affs, you can perform any Aff inside a do block, allowing you to easily test asynchronous code. module Test.Main where  import Prelude  import Test.Unit (suite, test, timeout) import Test.Unit.Main (runTest) import Test.Unit.Assert as Assert  import Node.FS.Aff as FS import Node.Encoding (Encoding(..))  main = runTest do   suite ""sync code"" do     test ""arithmetic"" do       Assert.assert ""2 + 2 should be 4"" $ (2 + 2) == 4       Assert.assertFalse ""2 + 2 shouldn't be 5"" $ (2 + 2) == 5       Assert.equal (2 + 2) 4       Assert.expectFailure ""2 + 2 shouldn't be 5"" $ Assert.equal (2 + 2) 5   suite ""async code"" do     test ""with async IO"" do       fileContents <- FS.readTextFile UTF8 ""file.txt""       Assert.equal fileContents ""hello here are your file contents""     test ""async operation with a timeout"" do       timeout 100 $ do         file2Contents <- FS.readTextFile UTF8 ""file2.txt""         Assert.equal file2Contents ""can we read a file in 100ms?"" Run tests using pulp test or just by compiling with --main Test.Main. QuickCheck purescript-quickcheck tests can be run using the functions in the Test.Unit.QuickCheck module. It exports two functions, quickCheck and quickCheck', which work like their QuickCheck counterparts, except they produce Test actions so they integrate cleanly with Test-Unit. module Test.Main where  import Prelude  import Test.Unit (test) import Test.Unit.Main (runTest) import Test.Unit.QuickCheck (quickCheck)  import Test.QuickCheck (Result(), (===))  theCommutativeProperty :: Int -> Int -> Result theCommutativeProperty a b = (a + b) === (b + a)  main = runTest do   test ""the commutative property"" do     quickCheck theCommutativeProperty Output Formats The Test.Unit.Main.runTest function will default to simple output of test results using console.log (the Test.Unit.Output.Simple.runTest test runner). If you're running on an ANSI colour capable terminal, it will use the Test.Unit.Output.Fancy.runTest test runner, which gets a little more colourful. Additionally, if Test.Unit.Main.runTest notices the word tap or --tap on its command line, it will pick the Test.Unit.Output.TAP.runTest test runner, which outputs test results using the TAP format. A number of TAP consumers are available on NPM to transform the test output. For instance, you could install the tap-spec and run your tests like this: pulp test tap | tap-spec. You can also specify your own test runner using the Test.Unit.Main.runTestWith function, which takes a test runner as its first argument. So, if you want to force the TAP test runner, instead of main = runTest do ... you could use main = runTestWith Test.Unit.Output.TAP.runTest do .... You could also supply your own custom test runner - study one of the existing test runners to learn how. Licence Copyright 2014 Bodil Stokke This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with this program. If not, see http://www.gnu.org/licenses/. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bodil/purescript-test-unit"	"An asynchronous unit test runner for PureScript."	"true"
"Testing"	"purescript-quickcheck"	"https://github.com/purescript/purescript-quickcheck"	"An implementation of QuickCheck in PureScript."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"28"	"8"	"13"	"GitHub - purescript/purescript-quickcheck: An implementation of QuickCheck in PureScript Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 28 Fork 13 purescript/purescript-quickcheck Code Issues 4 Pull requests 4 Pulse Graphs An implementation of QuickCheck in PureScript 154 commits 4 branches 31 releases 9 contributors PureScript 98.7% JavaScript 1.3% PureScript JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags generic higher-rank-arbitrary master reduced Nothing to show v1.0.0 v1.0.0-rc.2 v1.0.0-rc.1 v0.12.2 v0.12.1 v0.12.0 v0.11.0 v0.10.1 v0.10.0 v0.9.0 v0.8.0 v0.7.0 v0.6.0 v0.6.0-rc.2 v0.6.0-rc.1 v0.5.2 v0.5.1 v0.5.0 v0.4.0 v0.3.2 v0.3.1 v0.3.0 v0.2.2 v0.2.1 v0.2.0 v0.1.5 v0.1.3 v0.1.2 v0.1.1 v0.1.0 0.1.4 Nothing to show New pull request Latest commit 63529ee Jun 11, 2016 garyb Restore pulp build Permalink Failed to load latest commit information. src/Test Update dependencies, fix warnings May 21, 2016 test Updates for PureScript 0.8 Mar 28, 2016 .gitignore Update build Jul 3, 2015 .jscsrc Updates for PureScript 0.8 Mar 27, 2016 .jshintrc Updates for PureScript 0.8 Mar 27, 2016 .travis.yml Update dependencies, fix warnings May 20, 2016 LICENSE Initial commit Feb 5, 2014 README.md Update docs link in README Mar 28, 2016 bower.json Update build for release Jun 1, 2016 package.json Restore pulp build Jun 11, 2016 README.md purescript-quickcheck An implementation of QuickCheck in PureScript. Installation bower install purescript-quickcheck  Documentation Module documentation is published on Pursuit. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/purescript/purescript-quickcheck"	"An implementation of QuickCheck in PureScript."	"true"
"Testing"	"purescript-quickcheck-laws"	"https://github.com/garyb/purescript-quickcheck-laws"	"Law tests for core classes."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"6"	"3"	"GitHub - garyb/purescript-quickcheck-laws: QuickCheck powered law tests for PureScript's core typeclasses. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 3 Fork 3 garyb/purescript-quickcheck-laws Code Issues 4 Pull requests 2 Pulse Graphs QuickCheck powered law tests for PureScript's core typeclasses. 33 commits 2 branches 3 releases Fetching contributors PureScript 100.0% PureScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.7 master Nothing to show v1.0.0 v0.1.1 v0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src/Test/QuickCheck Formatting Jun 9, 2016 test/Test Formatting Jun 9, 2016 .gitignore Update build Jun 9, 2016 .travis.yml Update build Jun 9, 2016 README.md Fix permissions Jun 8, 2016 bower.json Fix permissions Jun 8, 2016 package.json Update build Jun 9, 2016 README.md purescript-quickcheck-laws QuickCheck powered law tests for PureScript's core typeclasses. Installation bower install purescript-quickcheck-laws  Documentation Module documentation is published on Pursuit: http://pursuit.purescript.org/packages/purescript-quickcheck-laws Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/garyb/purescript-quickcheck-laws"	"Law tests for core classes."	"true"
"Testing"	"purescript-benchotron"	"https://github.com/hdgarrood/purescript-benchotron"	"Straightforward benchmarking for PureScript/JavaScript."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9"	"4"	"5"	"GitHub - hdgarrood/purescript-benchotron: Straightforward benchmarking for PureScript/JavaScript. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 9 Fork 5 hdgarrood/purescript-benchotron Code Issues 2 Pull requests 0 Pulse Graphs Straightforward benchmarking for PureScript/JavaScript. 70 commits 2 branches 10 releases Fetching contributors PureScript 92.0% JavaScript 8.0% PureScript JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master strongcheck Nothing to show v4.0.0 v3.0.5 v3.0.4 v3.0.3 v3.0.2 v3.0.1 v3.0.0 v2.1.0 v2.0.0 v1.0.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. docs/Benchotron example src/Benchotron .gitignore .jshintrc .travis.yml README.md bower.json package.json README.md purescript-benchotron Straightforward benchmarking via Benchmark.js. I am sorry about the name (purescript-benchmark was taken). usage Suppose you want to find out which is faster out of foldr (+) 0 and runAdditive <<< foldMap Additive. Let's also do the same for (*) for good measure. Start by creating some Benchmark values: module Main where  import Prelude import Data.Array import Data.Foldable import Data.Monoid.Additive import Data.Monoid.Multiplicative import Control.Monad.Eff import Test.QuickCheck.Arbitrary (arbitrary) import Test.QuickCheck.Gen (vectorOf) import Benchotron.Core import Benchotron.UI.Console  benchSum :: Benchmark benchSum = mkBenchmark   { slug: ""sum""   , title: ""Finding the sum of an array""   , sizes: (1..5) <#> (_ * 1000)   , sizeInterpretation: ""Number of elements in the array""   , inputsPerSize: 1   , gen: \n -> vectorOf n arbitrary   , functions: [ benchFn ""foldr"" (foldr (+) 0)                , benchFn ""foldMap"" (runAdditive <<< foldMap Additive)                ]   }  benchProduct :: Benchmark benchProduct = mkBenchmark   { slug: ""product""   , title: ""Finding the product of an array""   , sizes: (1..5) <#> (_ * 1000)   , sizeInterpretation: ""Number of elements in the array""   , inputsPerSize: 1   , gen: \n -> vectorOf n arbitrary   , functions: [ benchFn ""foldr"" (foldr (*) 0)                , benchFn ""foldMap"" (runMultiplicative <<< foldMap Multiplicative)                ]   }  main = runSuite [benchSum, benchProduct] Now, run them with runSuite; this will save the results data for each benchmark to tmp/sum.json and tmp/product.json respectively. main = runSuite [benchSum, benchProduct] You can now generate SVG graphs of these results by visiting http://harry.garrood.me/purescript-benchotron-svg-renderer. Further information, such as the meaning of each of the attributes of a Benchmark value, is available in the documentation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hdgarrood/purescript-benchotron"	"Straightforward benchmarking for PureScript/JavaScript."	"true"
"Discovery"	"Pursuit"	"http://pursuit.purescript.org/"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"41"	"7"	"14"	"GitHub - purescript/pursuit: Search engine for PureScript functions Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 41 Fork 14 purescript/pursuit Code Issues 49 Pull requests 0 Pulse Graphs Search engine for PureScript functions http://pursuit.purescript.org/ 529 commits 2 branches 20 releases Fetching contributors Haskell 86.9% JavaScript 9.9% Shell 3.2% Haskell JavaScript Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master pursuit-1 Nothing to show v0.4.0 v0.3.10 v0.3.9 v0.3.8 v0.3.7 v0.3.6 v0.3.5 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.4.4 v0.2.4.3 v0.2.4.2 v0.2.4.1 v0.2.4.0 v0.2.3.0 v0.2.2.0 v0.2.1.0 Nothing to show New pull request Latest commit eabaf27 Jul 10, 2016 paf31 committed on GitHub v0.4.0 Permalink Failed to load latest commit information. app Add yesod scaffold site Jul 4, 2015 backup Add initial version of backup script Jul 4, 2015 config Fix caching config Nov 24, 2015 license-generator Update LICENSE with instructions for relinking Jul 17, 2015 src Update for PureScript 0.9.1 (#219) Jul 10, 2016 static Fix incorrect version sorting - #156 Nov 4, 2015 templates Deprecate the upload package form, fixes #212 May 15, 2016 test Add yesod scaffold site Jul 4, 2015 .gitignore Switch to stack Feb 20, 2016 .travis.yml Oops Mar 11, 2016 CHANGELOG.md Update changelog May 1, 2016 LICENSE Update LICENSE with instructions for relinking Jul 17, 2015 README.md README: More info about server start up Mar 28, 2016 pursuit.cabal v0.4.0 Jul 10, 2016 stack.yaml Update for PureScript 0.9.1 (#219) Jul 10, 2016 README.md Pursuit Pursuit is a web application which hosts documentation for PureScript packages, and lets you search for code by names or types, via Hoogle. Pursuit is currently deployed at http://pursuit.purescript.org. Information for package authors can be found at http://pursuit.purescript.org/help. Development It's recommended to use stack: http://docs.haskellstack.org. To build in development mode: $ stack build  To run the server: $ stack exec pursuit  If you have content in your data directory (see Database structure) then the Hoogle database will be regenerated before the server starts listening - this can take a short time depending on how much data you have. The site should then be available at http://localhost:3000. To build in production mode: $ stack build --flag pursuit:-dev  Database structure Pursuit currently uses the filesystem as a database, since it requires no setup and it makes it easy to use Git and GitHub for backing up. The data directory is set via an environment variable (see Configuration). The structure is as follows: /   cache/     packages/       purescript-prelude/         0.1.0/           index.html           docs/             Prelude/               index.html   verified/     purescript-prelude/       0.1.0.json       0.1.1.json  The cache/ directory has files that mirror the URL structure of the web application, and contains files which do not change and may be served as-is without forwarding the request on to the Yesod application. See Handler.Caching for more details. The verified/ directory stores uploaded packages. Each package has its own directory, and then there is a JSON file for each version. These JSON files each contain a serialized Package GithubUser; see Language.PureScript.Docs.Types in the compiler for details about these types. The backup process simply involves rsyncing everything in the verified/ directory into a git repository, making a commit, and pushing it to GitHub. Database setup If you need some sample packages to work with, you can clone the pursuit-backups repo and copy the packages you want to the verified/ directory. This is more convenient than manually uploading each package. Configuration All configuration is done at startup via environment variables. The relevant code is in the Settings module. All configuration variable names start with PURSUIT_ (eg, PURSUIT_STATIC_DIR). Most environment variables are not required, and have sensible defaults if not specified. The ones which are required are: PURSUIT_GITHUB_CLIENT_ID: Github OAuth client id, for signing users in. PURSUIT_GITHUB_CLIENT_SECRET: Github OAuth client secret, for signing users in. See src/Settings.hs for more details. One way to supply the application with environment variables (if you are on a system which uses Bash) is to use a script like the one in config/development.env. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/purescript/pursuit"	""	"true"
